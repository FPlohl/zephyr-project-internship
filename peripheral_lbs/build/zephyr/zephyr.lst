
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_table-0x200>:
	...

0000c200 <_vector_table>:
    c200:	80 47 00 20 d5 f8 00 00 b7 91 02 00 a9 f8 00 00     .G. ............
    c210:	a9 f8 00 00 a9 f8 00 00 a9 f8 00 00 00 00 00 00     ................
	...
    c22c:	b1 f5 00 00 a9 f8 00 00 00 00 00 00 5d f5 00 00     ............]...
    c23c:	a9 f8 00 00                                         ....

0000c240 <_irq_vector_table>:
    c240:	61 f6 00 00 e1 f9 01 00 61 f6 00 00 61 f6 00 00     a.......a...a...
    c250:	61 f6 00 00 61 f6 00 00 61 f6 00 00 61 f6 00 00     a...a...a...a...
    c260:	61 f6 00 00 61 f6 00 00 61 f6 00 00 61 f6 00 00     a...a...a...a...
    c270:	61 f6 00 00 61 f6 00 00 61 f6 00 00 61 f6 00 00     a...a...a...a...
    c280:	61 f6 00 00 61 f6 00 00 61 f6 00 00 61 f6 00 00     a...a...a...a...
    c290:	61 f6 00 00 61 f6 00 00 61 f6 00 00 61 f6 00 00     a...a...a...a...
    c2a0:	61 f6 00 00 61 f6 00 00 61 f6 00 00 61 f6 00 00     a...a...a...a...
    c2b0:	61 f6 00 00 61 f6 00 00 61 f6 00 00 61 f6 00 00     a...a...a...a...
    c2c0:	61 f6 00 00 61 f6 00 00 61 f6 00 00 61 f6 00 00     a...a...a...a...
    c2d0:	61 f6 00 00 61 f6 00 00 61 f6 00 00 61 f6 00 00     a...a...a...a...
    c2e0:	61 f6 00 00 61 f6 00 00 61 f6 00 00 61 f6 00 00     a...a...a...a...
    c2f0:	61 f6 00 00 61 f6 00 00 61 f6 00 00 61 f6 00 00     a...a...a...a...

Disassembly of section text:

0000c300 <__aeabi_uldivmod>:
    c300:	b953      	cbnz	r3, c318 <__aeabi_uldivmod+0x18>
    c302:	b94a      	cbnz	r2, c318 <__aeabi_uldivmod+0x18>
    c304:	2900      	cmp	r1, #0
    c306:	bf08      	it	eq
    c308:	2800      	cmpeq	r0, #0
    c30a:	bf1c      	itt	ne
    c30c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    c310:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c314:	f000 b80c 	b.w	c330 <__aeabi_idiv0>
    c318:	f1ad 0c08 	sub.w	ip, sp, #8
    c31c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c320:	f000 f808 	bl	c334 <__udivmoddi4>
    c324:	f8dd e004 	ldr.w	lr, [sp, #4]
    c328:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c32c:	b004      	add	sp, #16
    c32e:	4770      	bx	lr

0000c330 <__aeabi_idiv0>:
    c330:	4770      	bx	lr
    c332:	bf00      	nop

0000c334 <__udivmoddi4>:
    c334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c338:	4607      	mov	r7, r0
    c33a:	468c      	mov	ip, r1
    c33c:	4608      	mov	r0, r1
    c33e:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c340:	4615      	mov	r5, r2
    c342:	463c      	mov	r4, r7
    c344:	4619      	mov	r1, r3
    c346:	2b00      	cmp	r3, #0
    c348:	f040 80c6 	bne.w	c4d8 <__udivmoddi4+0x1a4>
    c34c:	4282      	cmp	r2, r0
    c34e:	fab2 f782 	clz	r7, r2
    c352:	d946      	bls.n	c3e2 <__udivmoddi4+0xae>
    c354:	b14f      	cbz	r7, c36a <__udivmoddi4+0x36>
    c356:	f1c7 0e20 	rsb	lr, r7, #32
    c35a:	fa24 fe0e 	lsr.w	lr, r4, lr
    c35e:	fa00 f307 	lsl.w	r3, r0, r7
    c362:	40bd      	lsls	r5, r7
    c364:	ea4e 0c03 	orr.w	ip, lr, r3
    c368:	40bc      	lsls	r4, r7
    c36a:	ea4f 4815 	mov.w	r8, r5, lsr #16
    c36e:	fa1f fe85 	uxth.w	lr, r5
    c372:	fbbc f9f8 	udiv	r9, ip, r8
    c376:	0c22      	lsrs	r2, r4, #16
    c378:	fb08 c319 	mls	r3, r8, r9, ip
    c37c:	fb09 fa0e 	mul.w	sl, r9, lr
    c380:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    c384:	459a      	cmp	sl, r3
    c386:	d928      	bls.n	c3da <__udivmoddi4+0xa6>
    c388:	18eb      	adds	r3, r5, r3
    c38a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    c38e:	d204      	bcs.n	c39a <__udivmoddi4+0x66>
    c390:	459a      	cmp	sl, r3
    c392:	d902      	bls.n	c39a <__udivmoddi4+0x66>
    c394:	f1a9 0002 	sub.w	r0, r9, #2
    c398:	442b      	add	r3, r5
    c39a:	eba3 030a 	sub.w	r3, r3, sl
    c39e:	b2a4      	uxth	r4, r4
    c3a0:	fbb3 f2f8 	udiv	r2, r3, r8
    c3a4:	fb08 3312 	mls	r3, r8, r2, r3
    c3a8:	fb02 fe0e 	mul.w	lr, r2, lr
    c3ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c3b0:	45a6      	cmp	lr, r4
    c3b2:	d914      	bls.n	c3de <__udivmoddi4+0xaa>
    c3b4:	192c      	adds	r4, r5, r4
    c3b6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
    c3ba:	d203      	bcs.n	c3c4 <__udivmoddi4+0x90>
    c3bc:	45a6      	cmp	lr, r4
    c3be:	d901      	bls.n	c3c4 <__udivmoddi4+0x90>
    c3c0:	1e93      	subs	r3, r2, #2
    c3c2:	442c      	add	r4, r5
    c3c4:	eba4 040e 	sub.w	r4, r4, lr
    c3c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c3cc:	b11e      	cbz	r6, c3d6 <__udivmoddi4+0xa2>
    c3ce:	40fc      	lsrs	r4, r7
    c3d0:	2300      	movs	r3, #0
    c3d2:	6034      	str	r4, [r6, #0]
    c3d4:	6073      	str	r3, [r6, #4]
    c3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c3da:	4648      	mov	r0, r9
    c3dc:	e7dd      	b.n	c39a <__udivmoddi4+0x66>
    c3de:	4613      	mov	r3, r2
    c3e0:	e7f0      	b.n	c3c4 <__udivmoddi4+0x90>
    c3e2:	b902      	cbnz	r2, c3e6 <__udivmoddi4+0xb2>
    c3e4:	deff      	udf	#255	; 0xff
    c3e6:	bb87      	cbnz	r7, c44a <__udivmoddi4+0x116>
    c3e8:	1a83      	subs	r3, r0, r2
    c3ea:	2101      	movs	r1, #1
    c3ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c3f0:	b2aa      	uxth	r2, r5
    c3f2:	fbb3 fcfe 	udiv	ip, r3, lr
    c3f6:	0c20      	lsrs	r0, r4, #16
    c3f8:	fb0e 331c 	mls	r3, lr, ip, r3
    c3fc:	fb0c f802 	mul.w	r8, ip, r2
    c400:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    c404:	4598      	cmp	r8, r3
    c406:	d963      	bls.n	c4d0 <__udivmoddi4+0x19c>
    c408:	18eb      	adds	r3, r5, r3
    c40a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    c40e:	d204      	bcs.n	c41a <__udivmoddi4+0xe6>
    c410:	4598      	cmp	r8, r3
    c412:	d902      	bls.n	c41a <__udivmoddi4+0xe6>
    c414:	f1ac 0002 	sub.w	r0, ip, #2
    c418:	442b      	add	r3, r5
    c41a:	eba3 0308 	sub.w	r3, r3, r8
    c41e:	b2a4      	uxth	r4, r4
    c420:	fbb3 fcfe 	udiv	ip, r3, lr
    c424:	fb0e 331c 	mls	r3, lr, ip, r3
    c428:	fb0c f202 	mul.w	r2, ip, r2
    c42c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c430:	42a2      	cmp	r2, r4
    c432:	d94f      	bls.n	c4d4 <__udivmoddi4+0x1a0>
    c434:	192c      	adds	r4, r5, r4
    c436:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    c43a:	d204      	bcs.n	c446 <__udivmoddi4+0x112>
    c43c:	42a2      	cmp	r2, r4
    c43e:	d902      	bls.n	c446 <__udivmoddi4+0x112>
    c440:	f1ac 0302 	sub.w	r3, ip, #2
    c444:	442c      	add	r4, r5
    c446:	1aa4      	subs	r4, r4, r2
    c448:	e7be      	b.n	c3c8 <__udivmoddi4+0x94>
    c44a:	f1c7 0c20 	rsb	ip, r7, #32
    c44e:	fa20 f80c 	lsr.w	r8, r0, ip
    c452:	fa00 f307 	lsl.w	r3, r0, r7
    c456:	fa24 fc0c 	lsr.w	ip, r4, ip
    c45a:	40bd      	lsls	r5, r7
    c45c:	ea4c 0203 	orr.w	r2, ip, r3
    c460:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c464:	b2ab      	uxth	r3, r5
    c466:	fbb8 fcfe 	udiv	ip, r8, lr
    c46a:	0c11      	lsrs	r1, r2, #16
    c46c:	fb0e 801c 	mls	r0, lr, ip, r8
    c470:	fb0c f903 	mul.w	r9, ip, r3
    c474:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    c478:	4581      	cmp	r9, r0
    c47a:	fa04 f407 	lsl.w	r4, r4, r7
    c47e:	d923      	bls.n	c4c8 <__udivmoddi4+0x194>
    c480:	1828      	adds	r0, r5, r0
    c482:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    c486:	d204      	bcs.n	c492 <__udivmoddi4+0x15e>
    c488:	4581      	cmp	r9, r0
    c48a:	d902      	bls.n	c492 <__udivmoddi4+0x15e>
    c48c:	f1ac 0102 	sub.w	r1, ip, #2
    c490:	4428      	add	r0, r5
    c492:	eba0 0009 	sub.w	r0, r0, r9
    c496:	b292      	uxth	r2, r2
    c498:	fbb0 fcfe 	udiv	ip, r0, lr
    c49c:	fb0e 001c 	mls	r0, lr, ip, r0
    c4a0:	fb0c f803 	mul.w	r8, ip, r3
    c4a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
    c4a8:	4598      	cmp	r8, r3
    c4aa:	d90f      	bls.n	c4cc <__udivmoddi4+0x198>
    c4ac:	18eb      	adds	r3, r5, r3
    c4ae:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
    c4b2:	d204      	bcs.n	c4be <__udivmoddi4+0x18a>
    c4b4:	4598      	cmp	r8, r3
    c4b6:	d902      	bls.n	c4be <__udivmoddi4+0x18a>
    c4b8:	f1ac 0202 	sub.w	r2, ip, #2
    c4bc:	442b      	add	r3, r5
    c4be:	eba3 0308 	sub.w	r3, r3, r8
    c4c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    c4c6:	e791      	b.n	c3ec <__udivmoddi4+0xb8>
    c4c8:	4661      	mov	r1, ip
    c4ca:	e7e2      	b.n	c492 <__udivmoddi4+0x15e>
    c4cc:	4662      	mov	r2, ip
    c4ce:	e7f6      	b.n	c4be <__udivmoddi4+0x18a>
    c4d0:	4660      	mov	r0, ip
    c4d2:	e7a2      	b.n	c41a <__udivmoddi4+0xe6>
    c4d4:	4663      	mov	r3, ip
    c4d6:	e7b6      	b.n	c446 <__udivmoddi4+0x112>
    c4d8:	4283      	cmp	r3, r0
    c4da:	d905      	bls.n	c4e8 <__udivmoddi4+0x1b4>
    c4dc:	b10e      	cbz	r6, c4e2 <__udivmoddi4+0x1ae>
    c4de:	e9c6 7000 	strd	r7, r0, [r6]
    c4e2:	2100      	movs	r1, #0
    c4e4:	4608      	mov	r0, r1
    c4e6:	e776      	b.n	c3d6 <__udivmoddi4+0xa2>
    c4e8:	fab3 f183 	clz	r1, r3
    c4ec:	b981      	cbnz	r1, c510 <__udivmoddi4+0x1dc>
    c4ee:	4283      	cmp	r3, r0
    c4f0:	d301      	bcc.n	c4f6 <__udivmoddi4+0x1c2>
    c4f2:	42ba      	cmp	r2, r7
    c4f4:	d80a      	bhi.n	c50c <__udivmoddi4+0x1d8>
    c4f6:	1abc      	subs	r4, r7, r2
    c4f8:	eb60 0303 	sbc.w	r3, r0, r3
    c4fc:	2001      	movs	r0, #1
    c4fe:	469c      	mov	ip, r3
    c500:	2e00      	cmp	r6, #0
    c502:	d068      	beq.n	c5d6 <__udivmoddi4+0x2a2>
    c504:	e9c6 4c00 	strd	r4, ip, [r6]
    c508:	2100      	movs	r1, #0
    c50a:	e764      	b.n	c3d6 <__udivmoddi4+0xa2>
    c50c:	4608      	mov	r0, r1
    c50e:	e7f7      	b.n	c500 <__udivmoddi4+0x1cc>
    c510:	f1c1 0c20 	rsb	ip, r1, #32
    c514:	408b      	lsls	r3, r1
    c516:	fa22 f40c 	lsr.w	r4, r2, ip
    c51a:	431c      	orrs	r4, r3
    c51c:	fa02 f501 	lsl.w	r5, r2, r1
    c520:	fa00 f301 	lsl.w	r3, r0, r1
    c524:	fa27 f20c 	lsr.w	r2, r7, ip
    c528:	fa20 fb0c 	lsr.w	fp, r0, ip
    c52c:	ea4f 4914 	mov.w	r9, r4, lsr #16
    c530:	4313      	orrs	r3, r2
    c532:	fbbb f8f9 	udiv	r8, fp, r9
    c536:	fa1f fe84 	uxth.w	lr, r4
    c53a:	fb09 bb18 	mls	fp, r9, r8, fp
    c53e:	0c1a      	lsrs	r2, r3, #16
    c540:	fb08 fa0e 	mul.w	sl, r8, lr
    c544:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
    c548:	4592      	cmp	sl, r2
    c54a:	fa07 f701 	lsl.w	r7, r7, r1
    c54e:	d93e      	bls.n	c5ce <__udivmoddi4+0x29a>
    c550:	18a2      	adds	r2, r4, r2
    c552:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    c556:	d204      	bcs.n	c562 <__udivmoddi4+0x22e>
    c558:	4592      	cmp	sl, r2
    c55a:	d902      	bls.n	c562 <__udivmoddi4+0x22e>
    c55c:	f1a8 0002 	sub.w	r0, r8, #2
    c560:	4422      	add	r2, r4
    c562:	eba2 020a 	sub.w	r2, r2, sl
    c566:	b29b      	uxth	r3, r3
    c568:	fbb2 f8f9 	udiv	r8, r2, r9
    c56c:	fb09 2218 	mls	r2, r9, r8, r2
    c570:	fb08 fe0e 	mul.w	lr, r8, lr
    c574:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    c578:	4596      	cmp	lr, r2
    c57a:	d92a      	bls.n	c5d2 <__udivmoddi4+0x29e>
    c57c:	18a2      	adds	r2, r4, r2
    c57e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    c582:	d204      	bcs.n	c58e <__udivmoddi4+0x25a>
    c584:	4596      	cmp	lr, r2
    c586:	d902      	bls.n	c58e <__udivmoddi4+0x25a>
    c588:	f1a8 0302 	sub.w	r3, r8, #2
    c58c:	4422      	add	r2, r4
    c58e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c592:	fba0 9305 	umull	r9, r3, r0, r5
    c596:	eba2 020e 	sub.w	r2, r2, lr
    c59a:	429a      	cmp	r2, r3
    c59c:	46ce      	mov	lr, r9
    c59e:	4698      	mov	r8, r3
    c5a0:	d302      	bcc.n	c5a8 <__udivmoddi4+0x274>
    c5a2:	d106      	bne.n	c5b2 <__udivmoddi4+0x27e>
    c5a4:	454f      	cmp	r7, r9
    c5a6:	d204      	bcs.n	c5b2 <__udivmoddi4+0x27e>
    c5a8:	ebb9 0e05 	subs.w	lr, r9, r5
    c5ac:	eb63 0804 	sbc.w	r8, r3, r4
    c5b0:	3801      	subs	r0, #1
    c5b2:	b186      	cbz	r6, c5d6 <__udivmoddi4+0x2a2>
    c5b4:	ebb7 030e 	subs.w	r3, r7, lr
    c5b8:	eb62 0708 	sbc.w	r7, r2, r8
    c5bc:	fa07 fc0c 	lsl.w	ip, r7, ip
    c5c0:	40cb      	lsrs	r3, r1
    c5c2:	ea4c 0303 	orr.w	r3, ip, r3
    c5c6:	40cf      	lsrs	r7, r1
    c5c8:	e9c6 3700 	strd	r3, r7, [r6]
    c5cc:	e79c      	b.n	c508 <__udivmoddi4+0x1d4>
    c5ce:	4640      	mov	r0, r8
    c5d0:	e7c7      	b.n	c562 <__udivmoddi4+0x22e>
    c5d2:	4643      	mov	r3, r8
    c5d4:	e7db      	b.n	c58e <__udivmoddi4+0x25a>
    c5d6:	4631      	mov	r1, r6
    c5d8:	e6fd      	b.n	c3d6 <__udivmoddi4+0xa2>
    c5da:	0000      	movs	r0, r0
    c5dc:	0000      	movs	r0, r0
	...

0000c5e0 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    c5e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    c5e2:	4d3f      	ldr	r5, [pc, #252]	; (c6e0 <bt_init+0x100>)
    c5e4:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
    c5e8:	6899      	ldr	r1, [r3, #8]
    c5ea:	f011 0101 	ands.w	r1, r1, #1
    c5ee:	d121      	bne.n	c634 <bt_init+0x54>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    c5f0:	aa01      	add	r2, sp, #4
    c5f2:	f640 4003 	movw	r0, #3075	; 0xc03
    c5f6:	f003 ffdf 	bl	105b8 <bt_hci_cmd_send_sync>
		if (err) {
    c5fa:	4604      	mov	r4, r0
    c5fc:	2800      	cmp	r0, #0
    c5fe:	d16c      	bne.n	c6da <bt_init+0xfa>
	uint8_t status = buf->data[0];
    c600:	9b01      	ldr	r3, [sp, #4]
    c602:	689b      	ldr	r3, [r3, #8]
	if (status) {
    c604:	781b      	ldrb	r3, [r3, #0]
    c606:	b993      	cbnz	r3, c62e <bt_init+0x4e>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c608:	f3bf 8f5b 	dmb	ish
    c60c:	462b      	mov	r3, r5
    c60e:	f853 2fcc 	ldr.w	r2, [r3, #204]!
    c612:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    c616:	f002 0209 	and.w	r2, r2, #9
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c61a:	f3bf 8f5b 	dmb	ish
    c61e:	e853 1f00 	ldrex	r1, [r3]
    c622:	e843 2000 	strex	r0, r2, [r3]
    c626:	2800      	cmp	r0, #0
    c628:	d1f9      	bne.n	c61e <bt_init+0x3e>
    c62a:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    c62e:	9801      	ldr	r0, [sp, #4]
    c630:	f016 ff32 	bl	23498 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    c634:	aa01      	add	r2, sp, #4
    c636:	2100      	movs	r1, #0
    c638:	f241 0003 	movw	r0, #4099	; 0x1003
    c63c:	f003 ffbc 	bl	105b8 <bt_hci_cmd_send_sync>
	if (err) {
    c640:	4604      	mov	r4, r0
    c642:	2800      	cmp	r0, #0
    c644:	d149      	bne.n	c6da <bt_init+0xfa>
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    c646:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    c648:	4826      	ldr	r0, [pc, #152]	; (c6e4 <bt_init+0x104>)
    c64a:	6899      	ldr	r1, [r3, #8]
    c64c:	2208      	movs	r2, #8
    c64e:	3101      	adds	r1, #1
    c650:	f01c fe79 	bl	29346 <memcpy>
	net_buf_unref(rsp);
    c654:	9801      	ldr	r0, [sp, #4]
    c656:	f016 ff1f 	bl	23498 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    c65a:	4621      	mov	r1, r4
    c65c:	aa01      	add	r2, sp, #4
    c65e:	f241 0001 	movw	r0, #4097	; 0x1001
    c662:	f003 ffa9 	bl	105b8 <bt_hci_cmd_send_sync>
	if (err) {
    c666:	4604      	mov	r4, r0
    c668:	2800      	cmp	r0, #0
    c66a:	d136      	bne.n	c6da <bt_init+0xfa>
	read_local_ver_complete(rsp);
    c66c:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    c66e:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    c670:	785a      	ldrb	r2, [r3, #1]
    c672:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    c676:	78d9      	ldrb	r1, [r3, #3]
    c678:	789a      	ldrb	r2, [r3, #2]
    c67a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    c67e:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    c682:	791a      	ldrb	r2, [r3, #4]
    c684:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    c688:	7a19      	ldrb	r1, [r3, #8]
    c68a:	79da      	ldrb	r2, [r3, #7]
    c68c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    c690:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    c694:	795a      	ldrb	r2, [r3, #5]
    c696:	799b      	ldrb	r3, [r3, #6]
    c698:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    c69c:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    c6a0:	f016 fefa 	bl	23498 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    c6a4:	4621      	mov	r1, r4
    c6a6:	aa01      	add	r2, sp, #4
    c6a8:	f241 0002 	movw	r0, #4098	; 0x1002
    c6ac:	f003 ff84 	bl	105b8 <bt_hci_cmd_send_sync>
	if (err) {
    c6b0:	4604      	mov	r4, r0
    c6b2:	b990      	cbnz	r0, c6da <bt_init+0xfa>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    c6b4:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    c6b6:	480c      	ldr	r0, [pc, #48]	; (c6e8 <bt_init+0x108>)
    c6b8:	6899      	ldr	r1, [r3, #8]
    c6ba:	2240      	movs	r2, #64	; 0x40
    c6bc:	3101      	adds	r1, #1
    c6be:	f01c fe42 	bl	29346 <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
    c6c2:	4809      	ldr	r0, [pc, #36]	; (c6e8 <bt_init+0x108>)
    c6c4:	f01c fedd 	bl	29482 <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
    c6c8:	9801      	ldr	r0, [sp, #4]
    c6ca:	f016 fee5 	bl	23498 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    c6ce:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    c6d2:	065a      	lsls	r2, r3, #25
    c6d4:	d40a      	bmi.n	c6ec <bt_init+0x10c>
		return -ENODEV;
    c6d6:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    c6da:	4620      	mov	r0, r4
    c6dc:	b002      	add	sp, #8
    c6de:	bd70      	pop	{r4, r5, r6, pc}
    c6e0:	20000000 	.word	0x20000000
    c6e4:	20000070 	.word	0x20000070
    c6e8:	20000078 	.word	0x20000078
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    c6ec:	4621      	mov	r1, r4
    c6ee:	aa01      	add	r2, sp, #4
    c6f0:	f242 0003 	movw	r0, #8195	; 0x2003
    c6f4:	f003 ff60 	bl	105b8 <bt_hci_cmd_send_sync>
	if (err) {
    c6f8:	4604      	mov	r4, r0
    c6fa:	2800      	cmp	r0, #0
    c6fc:	d1ed      	bne.n	c6da <bt_init+0xfa>
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    c6fe:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    c700:	48b9      	ldr	r0, [pc, #740]	; (c9e8 <bt_init+0x408>)
    c702:	6899      	ldr	r1, [r3, #8]
    c704:	2208      	movs	r2, #8
    c706:	3101      	adds	r1, #1
    c708:	f01c fe1d 	bl	29346 <memcpy>
	net_buf_unref(rsp);
    c70c:	9801      	ldr	r0, [sp, #4]
    c70e:	f016 fec3 	bl	23498 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    c712:	4621      	mov	r1, r4
    c714:	aa01      	add	r2, sp, #4
    c716:	f242 0002 	movw	r0, #8194	; 0x2002
    c71a:	f003 ff4d 	bl	105b8 <bt_hci_cmd_send_sync>
		if (err) {
    c71e:	4604      	mov	r4, r0
    c720:	2800      	cmp	r0, #0
    c722:	d1da      	bne.n	c6da <bt_init+0xfa>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    c724:	9b01      	ldr	r3, [sp, #4]
    c726:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    c728:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    c72c:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
    c730:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    c732:	b121      	cbz	r1, c73e <bt_init+0x15e>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    c734:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    c736:	48ad      	ldr	r0, [pc, #692]	; (c9ec <bt_init+0x40c>)
    c738:	4611      	mov	r1, r2
    c73a:	f022 f80d 	bl	2e758 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    c73e:	9801      	ldr	r0, [sp, #4]
    c740:	f016 feaa 	bl	23498 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    c744:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    c748:	f016 0620 	ands.w	r6, r6, #32
    c74c:	f000 8121 	beq.w	c992 <bt_init+0x3b2>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    c750:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    c754:	071b      	lsls	r3, r3, #28
    c756:	d512      	bpl.n	c77e <bt_init+0x19e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    c758:	aa01      	add	r2, sp, #4
    c75a:	2100      	movs	r1, #0
    c75c:	f242 001c 	movw	r0, #8220	; 0x201c
    c760:	f003 ff2a 	bl	105b8 <bt_hci_cmd_send_sync>
		if (err) {
    c764:	4604      	mov	r4, r0
    c766:	2800      	cmp	r0, #0
    c768:	d1b7      	bne.n	c6da <bt_init+0xfa>
		le_read_supp_states_complete(rsp);
    c76a:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    c76c:	6883      	ldr	r3, [r0, #8]
    c76e:	f8d3 2001 	ldr.w	r2, [r3, #1]
    c772:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    c776:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    c77a:	f016 fe8d 	bl	23498 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    c77e:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    c782:	069e      	lsls	r6, r3, #26
    c784:	d523      	bpl.n	c7ce <bt_init+0x1ee>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    c786:	f10d 0102 	add.w	r1, sp, #2
    c78a:	4668      	mov	r0, sp
    c78c:	f01d f914 	bl	299b8 <hci_le_read_max_data_len>
		if (err) {
    c790:	4604      	mov	r4, r0
    c792:	2800      	cmp	r0, #0
    c794:	d1a1      	bne.n	c6da <bt_init+0xfa>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    c796:	2104      	movs	r1, #4
    c798:	f242 0024 	movw	r0, #8228	; 0x2024
    c79c:	f003 feb0 	bl	10500 <bt_hci_cmd_create>
		if (!buf) {
    c7a0:	4606      	mov	r6, r0
    c7a2:	2800      	cmp	r0, #0
    c7a4:	f000 80fc 	beq.w	c9a0 <bt_init+0x3c0>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    c7a8:	2104      	movs	r1, #4
    c7aa:	3008      	adds	r0, #8
    c7ac:	f020 fe11 	bl	2d3d2 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    c7b0:	f8bd 3000 	ldrh.w	r3, [sp]
    c7b4:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    c7b6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    c7ba:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    c7bc:	4622      	mov	r2, r4
    c7be:	4631      	mov	r1, r6
    c7c0:	f242 0024 	movw	r0, #8228	; 0x2024
    c7c4:	f003 fef8 	bl	105b8 <bt_hci_cmd_send_sync>
		if (err) {
    c7c8:	4604      	mov	r4, r0
    c7ca:	2800      	cmp	r0, #0
    c7cc:	d185      	bne.n	c6da <bt_init+0xfa>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    c7ce:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    c7d2:	065c      	lsls	r4, r3, #25
    c7d4:	d510      	bpl.n	c7f8 <bt_init+0x218>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    c7d6:	aa01      	add	r2, sp, #4
    c7d8:	2100      	movs	r1, #0
    c7da:	f242 002a 	movw	r0, #8234	; 0x202a
    c7de:	f003 feeb 	bl	105b8 <bt_hci_cmd_send_sync>
		if (err) {
    c7e2:	4604      	mov	r4, r0
    c7e4:	2800      	cmp	r0, #0
    c7e6:	f47f af78 	bne.w	c6da <bt_init+0xfa>
		le_read_resolving_list_size_complete(rsp);
    c7ea:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
    c7ec:	6883      	ldr	r3, [r0, #8]
    c7ee:	785b      	ldrb	r3, [r3, #1]
    c7f0:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
    c7f4:	f016 fe50 	bl	23498 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    c7f8:	2108      	movs	r1, #8
    c7fa:	f242 0001 	movw	r0, #8193	; 0x2001
    c7fe:	f003 fe7f 	bl	10500 <bt_hci_cmd_create>
	if (!buf) {
    c802:	4604      	mov	r4, r0
    c804:	2800      	cmp	r0, #0
    c806:	f000 80cb 	beq.w	c9a0 <bt_init+0x3c0>
    c80a:	2108      	movs	r1, #8
    c80c:	4408      	add	r0, r1
    c80e:	f020 fde0 	bl	2d3d2 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    c812:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    c816:	f011 0f40 	tst.w	r1, #64	; 0x40
    c81a:	4602      	mov	r2, r0
    c81c:	f240 2302 	movw	r3, #514	; 0x202
    c820:	bf08      	it	eq
    c822:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    c824:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    c826:	bf4c      	ite	mi
    c828:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    c82c:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    c830:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    c832:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    c836:	bf48      	it	mi
    c838:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    c83c:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    c840:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    c844:	bf18      	it	ne
    c846:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    c84a:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    c84e:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    c850:	bf48      	it	mi
    c852:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    c856:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    c858:	bf08      	it	eq
    c85a:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    c85e:	2100      	movs	r1, #0
    c860:	f01c ff8d 	bl	2977e <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    c864:	4621      	mov	r1, r4
    c866:	2200      	movs	r2, #0
    c868:	f242 0001 	movw	r0, #8193	; 0x2001
    c86c:	f003 fea4 	bl	105b8 <bt_hci_cmd_send_sync>
	if (err) {
    c870:	4604      	mov	r4, r0
    c872:	2800      	cmp	r0, #0
    c874:	f47f af31 	bne.w	c6da <bt_init+0xfa>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    c878:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    c87c:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    c880:	0698      	lsls	r0, r3, #26
    c882:	f100 80a2 	bmi.w	c9ca <bt_init+0x3ea>
	if (bt_dev.le.acl_mtu) {
    c886:	b9d9      	cbnz	r1, c8c0 <bt_init+0x2e0>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    c888:	aa01      	add	r2, sp, #4
    c88a:	f241 0005 	movw	r0, #4101	; 0x1005
    c88e:	f003 fe93 	bl	105b8 <bt_hci_cmd_send_sync>
	if (err) {
    c892:	4604      	mov	r4, r0
    c894:	2800      	cmp	r0, #0
    c896:	f47f af20 	bne.w	c6da <bt_init+0xfa>
	if (bt_dev.le.acl_mtu) {
    c89a:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
    c89e:	b963      	cbnz	r3, c8ba <bt_init+0x2da>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    c8a0:	9b01      	ldr	r3, [sp, #4]
    c8a2:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    c8a4:	785a      	ldrb	r2, [r3, #1]
    c8a6:	7899      	ldrb	r1, [r3, #2]
    c8a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    c8ac:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    c8b0:	889a      	ldrh	r2, [r3, #4]
    c8b2:	484e      	ldr	r0, [pc, #312]	; (c9ec <bt_init+0x40c>)
    c8b4:	4611      	mov	r1, r2
    c8b6:	f021 ff4f 	bl	2e758 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    c8ba:	9801      	ldr	r0, [sp, #4]
    c8bc:	f016 fdec 	bl	23498 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    c8c0:	2108      	movs	r1, #8
    c8c2:	f640 4001 	movw	r0, #3073	; 0xc01
    c8c6:	f003 fe1b 	bl	10500 <bt_hci_cmd_create>
	if (!buf) {
    c8ca:	4604      	mov	r4, r0
    c8cc:	2800      	cmp	r0, #0
    c8ce:	d067      	beq.n	c9a0 <bt_init+0x3c0>
    c8d0:	2108      	movs	r1, #8
    c8d2:	4408      	add	r0, r1
    c8d4:	f020 fd7d 	bl	2d3d2 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    c8d8:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    c8dc:	07d9      	lsls	r1, r3, #31
    c8de:	4602      	mov	r2, r0
    c8e0:	d579      	bpl.n	c9d6 <bt_init+0x3f6>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    c8e2:	a13f      	add	r1, pc, #252	; (adr r1, c9e0 <bt_init+0x400>)
    c8e4:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
    c8e8:	f01c ff49 	bl	2977e <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    c8ec:	4621      	mov	r1, r4
    c8ee:	2200      	movs	r2, #0
    c8f0:	f640 4001 	movw	r0, #3073	; 0xc01
    c8f4:	f003 fe60 	bl	105b8 <bt_hci_cmd_send_sync>
	if (err) {
    c8f8:	4604      	mov	r4, r0
    c8fa:	2800      	cmp	r0, #0
    c8fc:	f47f aeed 	bne.w	c6da <bt_init+0xfa>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    c900:	4601      	mov	r1, r0
    c902:	aa01      	add	r2, sp, #4
    c904:	f64f 4001 	movw	r0, #64513	; 0xfc01
    c908:	f003 fe56 	bl	105b8 <bt_hci_cmd_send_sync>
	if (err) {
    c90c:	4604      	mov	r4, r0
    c90e:	bb48      	cbnz	r0, c964 <bt_init+0x384>
	net_buf_unref(rsp);
    c910:	9801      	ldr	r0, [sp, #4]
    c912:	f016 fdc1 	bl	23498 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    c916:	4621      	mov	r1, r4
    c918:	aa01      	add	r2, sp, #4
    c91a:	f64f 4002 	movw	r0, #64514	; 0xfc02
    c91e:	f003 fe4b 	bl	105b8 <bt_hci_cmd_send_sync>
	if (err) {
    c922:	4604      	mov	r4, r0
    c924:	b9f0      	cbnz	r0, c964 <bt_init+0x384>
	rp.cmds = (void *)rsp->data;
    c926:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    c928:	4831      	ldr	r0, [pc, #196]	; (c9f0 <bt_init+0x410>)
    c92a:	6899      	ldr	r1, [r3, #8]
    c92c:	2202      	movs	r2, #2
    c92e:	3101      	adds	r1, #1
    c930:	f01c fd09 	bl	29346 <memcpy>
	net_buf_unref(rsp);
    c934:	9801      	ldr	r0, [sp, #4]
    c936:	f016 fdaf 	bl	23498 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    c93a:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    c93e:	075b      	lsls	r3, r3, #29
    c940:	d510      	bpl.n	c964 <bt_init+0x384>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    c942:	aa01      	add	r2, sp, #4
    c944:	4621      	mov	r1, r4
    c946:	f64f 4003 	movw	r0, #64515	; 0xfc03
    c94a:	f003 fe35 	bl	105b8 <bt_hci_cmd_send_sync>
		if (err) {
    c94e:	b948      	cbnz	r0, c964 <bt_init+0x384>
		rp.feat = (void *)rsp->data;
    c950:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    c952:	4828      	ldr	r0, [pc, #160]	; (c9f4 <bt_init+0x414>)
    c954:	6899      	ldr	r1, [r3, #8]
    c956:	2201      	movs	r2, #1
    c958:	4411      	add	r1, r2
    c95a:	f01c fcf4 	bl	29346 <memcpy>
		net_buf_unref(rsp);
    c95e:	9801      	ldr	r0, [sp, #4]
    c960:	f016 fd9a 	bl	23498 <net_buf_unref>
	err = bt_id_init();
    c964:	f01d fa57 	bl	29e16 <bt_id_init>
	if (err) {
    c968:	4604      	mov	r4, r0
    c96a:	2800      	cmp	r0, #0
    c96c:	f47f aeb5 	bne.w	c6da <bt_init+0xfa>
		err = bt_conn_init();
    c970:	f005 fc34 	bl	121dc <bt_conn_init>
		if (err) {
    c974:	4604      	mov	r4, r0
    c976:	2800      	cmp	r0, #0
    c978:	f47f aeaf 	bne.w	c6da <bt_init+0xfa>
		if (!bt_dev.id_count) {
    c97c:	79eb      	ldrb	r3, [r5, #7]
    c97e:	2b00      	cmp	r3, #0
    c980:	f43f aeab 	beq.w	c6da <bt_init+0xfa>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    c984:	2108      	movs	r1, #8
    c986:	481c      	ldr	r0, [pc, #112]	; (c9f8 <bt_init+0x418>)
    c988:	f01c fe4b 	bl	29622 <atomic_or>
	bt_finalize_init();
    c98c:	f004 f896 	bl	10abc <bt_finalize_init>
	return 0;
    c990:	e6a3      	b.n	c6da <bt_init+0xfa>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    c992:	2102      	movs	r1, #2
    c994:	f640 406d 	movw	r0, #3181	; 0xc6d
    c998:	f003 fdb2 	bl	10500 <bt_hci_cmd_create>
		if (!buf) {
    c99c:	4604      	mov	r4, r0
    c99e:	b910      	cbnz	r0, c9a6 <bt_init+0x3c6>
		return -ENOBUFS;
    c9a0:	f06f 0468 	mvn.w	r4, #104	; 0x68
    c9a4:	e699      	b.n	c6da <bt_init+0xfa>
    c9a6:	2102      	movs	r1, #2
    c9a8:	3008      	adds	r0, #8
    c9aa:	f020 fd12 	bl	2d3d2 <net_buf_simple_add>
		cp_le->le = 0x01;
    c9ae:	2301      	movs	r3, #1
    c9b0:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    c9b2:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    c9b4:	4621      	mov	r1, r4
    c9b6:	4632      	mov	r2, r6
    c9b8:	f640 406d 	movw	r0, #3181	; 0xc6d
    c9bc:	f003 fdfc 	bl	105b8 <bt_hci_cmd_send_sync>
		if (err) {
    c9c0:	4604      	mov	r4, r0
    c9c2:	2800      	cmp	r0, #0
    c9c4:	f43f aec4 	beq.w	c750 <bt_init+0x170>
    c9c8:	e687      	b.n	c6da <bt_init+0xfa>
	else if (!bt_dev.le.acl_mtu) {
    c9ca:	2900      	cmp	r1, #0
    c9cc:	f47f af78 	bne.w	c8c0 <bt_init+0x2e0>
		return -EIO;
    c9d0:	f06f 0404 	mvn.w	r4, #4
    c9d4:	e681      	b.n	c6da <bt_init+0xfa>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    c9d6:	4809      	ldr	r0, [pc, #36]	; (c9fc <bt_init+0x41c>)
    c9d8:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    c9dc:	e784      	b.n	c8e8 <bt_init+0x308>
    c9de:	bf00      	nop
    c9e0:	02008890 	.word	0x02008890
    c9e4:	20008000 	.word	0x20008000
    c9e8:	200000d0 	.word	0x200000d0
    c9ec:	20000100 	.word	0x20000100
    c9f0:	200000b9 	.word	0x200000b9
    c9f4:	200000b8 	.word	0x200000b8
    c9f8:	200000cc 	.word	0x200000cc
    c9fc:	02008810 	.word	0x02008810

0000ca00 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
    ca00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
    ca04:	e9d0 350b 	ldrd	r3, r5, [r0, #44]	; 0x2c
	start_to_address_actual_us =
    ca08:	6a86      	ldr	r6, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
    ca0a:	195c      	adds	r4, r3, r5
	start_to_address_expected_us = EVENT_JITTER_US +
    ca0c:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
    ca0e:	42a6      	cmp	r6, r4
{
    ca10:	4688      	mov	r8, r1
    ca12:	4617      	mov	r7, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
    ca14:	d818      	bhi.n	ca48 <ull_drift_ticks_get+0x48>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    ca16:	4d1c      	ldr	r5, [pc, #112]	; (ca88 <ull_drift_ticks_get+0x88>)
    ca18:	fba3 0105 	umull	r0, r1, r3, r5
    ca1c:	a318      	add	r3, pc, #96	; (adr r3, ca80 <ull_drift_ticks_get+0x80>)
    ca1e:	e9d3 2300 	ldrd	r2, r3, [r3]
    ca22:	f7ff fc6d 	bl	c300 <__aeabi_uldivmod>
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    ca26:	1ba4      	subs	r4, r4, r6
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    ca28:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    ca2c:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    ca30:	a313      	add	r3, pc, #76	; (adr r3, ca80 <ull_drift_ticks_get+0x80>)
    ca32:	e9d3 2300 	ldrd	r2, r3, [r3]
    ca36:	fba4 0105 	umull	r0, r1, r4, r5
    ca3a:	f7ff fc61 	bl	c300 <__aeabi_uldivmod>
    ca3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    ca42:	6038      	str	r0, [r7, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
    ca44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    ca48:	4c0f      	ldr	r4, [pc, #60]	; (ca88 <ull_drift_ticks_get+0x88>)
    ca4a:	a30d      	add	r3, pc, #52	; (adr r3, ca80 <ull_drift_ticks_get+0x80>)
    ca4c:	e9d3 2300 	ldrd	r2, r3, [r3]
    ca50:	fba6 0104 	umull	r0, r1, r6, r4
    ca54:	f7ff fc54 	bl	c300 <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    ca58:	f105 0130 	add.w	r1, r5, #48	; 0x30
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    ca5c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    ca60:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    ca64:	a306      	add	r3, pc, #24	; (adr r3, ca80 <ull_drift_ticks_get+0x80>)
    ca66:	e9d3 2300 	ldrd	r2, r3, [r3]
    ca6a:	fba1 0104 	umull	r0, r1, r1, r4
    ca6e:	f7ff fc47 	bl	c300 <__aeabi_uldivmod>
    ca72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    ca76:	6038      	str	r0, [r7, #0]
}
    ca78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ca7c:	f3af 8000 	nop.w
    ca80:	1afd498d 	.word	0x1afd498d
    ca84:	00000007 	.word	0x00000007
    ca88:	3b9aca00 	.word	0x3b9aca00
    ca8c:	00000000 	.word	0x00000000

0000ca90 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
    ca90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
inline struct ll_adv_set *ull_adv_is_enabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || !adv->is_enabled) {
    ca94:	4cab      	ldr	r4, [pc, #684]	; (cd44 <ll_adv_enable+0x2b4>)
{
    ca96:	b08f      	sub	sp, #60	; 0x3c
	if (!adv || !adv->is_enabled) {
    ca98:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
	if (!enable) {
    ca9c:	2800      	cmp	r0, #0
    ca9e:	f000 8139 	beq.w	cd14 <ll_adv_enable+0x284>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
    caa2:	f012 0701 	ands.w	r7, r2, #1
    caa6:	f040 81b7 	bne.w	ce18 <ll_adv_enable+0x388>
	ull_filter_adv_update(lll->filter_policy);
    caaa:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
	lll->rl_idx = FILTER_IDX_NONE;
    caae:	23ff      	movs	r3, #255	; 0xff
	ull_filter_adv_update(lll->filter_policy);
    cab0:	f000 0003 	and.w	r0, r0, #3
	lll->rl_idx = FILTER_IDX_NONE;
    cab4:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	ull_filter_adv_update(lll->filter_policy);
    cab8:	f012 fc2e 	bl	1f318 <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    cabc:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    cac0:	0741      	lsls	r1, r0, #29
    cac2:	d42d      	bmi.n	cb20 <ll_adv_enable+0x90>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    cac4:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    cac8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    cacc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    cad0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    cad4:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    cad8:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		pdu_adv_to_update = pdu;
	}

	if (pdu_adv_to_update) {
    cadc:	f1b8 0f00 	cmp.w	r8, #0
    cae0:	d011      	beq.n	cb06 <ll_adv_enable+0x76>
		const uint8_t *adv_addr;

		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
    cae2:	4898      	ldr	r0, [pc, #608]	; (cd44 <ll_adv_enable+0x2b4>)
    cae4:	4641      	mov	r1, r8
    cae6:	f00c ffeb 	bl	19ac0 <ull_adv_pdu_update_addrs>

		/* In case the local IRK was not set or no match was
		 * found the fallback address was used instead, check
		 * that a valid address has been set.
		 */
		if (pdu_adv_to_update->tx_addr &&
    caea:	f898 3000 	ldrb.w	r3, [r8]
    caee:	065a      	lsls	r2, r3, #25
    caf0:	d505      	bpl.n	cafe <ll_adv_enable+0x6e>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
    caf2:	2106      	movs	r1, #6
    caf4:	f008 fbc0 	bl	15278 <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
    caf8:	2800      	cmp	r0, #0
    cafa:	f000 81cb 	beq.w	ce94 <ll_adv_enable+0x404>
		if ((pdu->type != PDU_ADV_TYPE_EXT_IND) ||
		    (pdu->adv_ext_ind.adv_mode & BT_HCI_LE_ADV_PROP_SCAN)) {
#else
		if (1) {
#endif
			ull_adv_pdu_update_addrs(adv, pdu_scan);
    cafe:	4891      	ldr	r0, [pc, #580]	; (cd44 <ll_adv_enable+0x2b4>)
    cb00:	4649      	mov	r1, r9
    cb02:	f00c ffdd 	bl	19ac0 <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    cb06:	f898 3000 	ldrb.w	r3, [r8]
    cb0a:	f013 0f0e 	tst.w	r3, #14
    cb0e:	f040 80ee 	bne.w	ccee <ll_adv_enable+0x25e>
		if (lll->conn) {
    cb12:	6a23      	ldr	r3, [r4, #32]
    cb14:	b19b      	cbz	r3, cb3e <ll_adv_enable+0xae>
	return BT_HCI_ERR_CMD_DISALLOWED;
    cb16:	270c      	movs	r7, #12
}
    cb18:	4638      	mov	r0, r7
    cb1a:	b00f      	add	sp, #60	; 0x3c
    cb1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
    cb20:	463a      	mov	r2, r7
    cb22:	f104 016b 	add.w	r1, r4, #107	; 0x6b
    cb26:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    cb2a:	f012 fd63 	bl	1f5f4 <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
    cb2e:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
    cb30:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
		if (lll->rl_idx != FILTER_IDX_NONE) {
    cb34:	d0c6      	beq.n	cac4 <ll_adv_enable+0x34>
			ull_filter_rpa_update(false);
    cb36:	4638      	mov	r0, r7
    cb38:	f012 fc08 	bl	1f34c <ull_filter_rpa_update>
    cb3c:	e7c2      	b.n	cac4 <ll_adv_enable+0x34>
		link = ll_rx_link_alloc();
    cb3e:	f00b fe73 	bl	18828 <ll_rx_link_alloc>
		if (!link) {
    cb42:	4682      	mov	sl, r0
    cb44:	2800      	cmp	r0, #0
    cb46:	f000 81af 	beq.w	cea8 <ll_adv_enable+0x418>
		node_rx = ll_rx_alloc();
    cb4a:	f00b fe79 	bl	18840 <ll_rx_alloc>
		if (!node_rx) {
    cb4e:	4683      	mov	fp, r0
    cb50:	2800      	cmp	r0, #0
    cb52:	f000 81ae 	beq.w	ceb2 <ll_adv_enable+0x422>
		conn = ll_conn_acquire();
    cb56:	f00d fea1 	bl	1a89c <ll_conn_acquire>
		if (!conn) {
    cb5a:	4605      	mov	r5, r0
    cb5c:	2800      	cmp	r0, #0
    cb5e:	f000 81a5 	beq.w	ceac <ll_adv_enable+0x41c>
		if (!conn_lll->link_tx_free) {
    cb62:	6f40      	ldr	r0, [r0, #116]	; 0x74
		conn_lll->handle = 0xFFFF;
    cb64:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cb68:	852b      	strh	r3, [r5, #40]	; 0x28
		conn_lll = &conn->lll;
    cb6a:	f105 031c 	add.w	r3, r5, #28
		if (!conn_lll->link_tx_free) {
    cb6e:	2800      	cmp	r0, #0
    cb70:	f000 8196 	beq.w	cea0 <ll_adv_enable+0x410>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
    cb74:	f105 0268 	add.w	r2, r5, #104	; 0x68
    cb78:	f105 0164 	add.w	r1, r5, #100	; 0x64
    cb7c:	930b      	str	r3, [sp, #44]	; 0x2c
    cb7e:	f008 fb87 	bl	15290 <memq_init>
			conn_lll->phy_tx = PHY_1M;
    cb82:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    cb86:	4b70      	ldr	r3, [pc, #448]	; (cd48 <ll_adv_enable+0x2b8>)
			conn_lll->phy_tx = PHY_1M;
    cb88:	f422 62ef 	bic.w	r2, r2, #1912	; 0x778
    cb8c:	f022 0207 	bic.w	r2, r2, #7
    cb90:	f442 7288 	orr.w	r2, r2, #272	; 0x110
    cb94:	f042 0201 	orr.w	r2, r2, #1
    cb98:	f8a5 2060 	strh.w	r2, [r5, #96]	; 0x60
		conn_lll->data_chan_sel = 0;
    cb9c:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    cba0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    cba4:	f062 027f 	orn	r2, r2, #127	; 0x7f
    cba8:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
		conn_lll->sn = 0;
    cbac:	f895 207a 	ldrb.w	r2, [r5, #122]	; 0x7a
    cbb0:	f022 0207 	bic.w	r2, r2, #7
    cbb4:	f885 207a 	strb.w	r2, [r5, #122]	; 0x7a
		conn_lll->periph.initiated = 0;
    cbb8:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
    cbbc:	f022 0207 	bic.w	r2, r2, #7
    cbc0:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
		conn->common.fex_valid = 0;
    cbc4:	f895 20d8 	ldrb.w	r2, [r5, #216]	; 0xd8
    cbc8:	f022 0207 	bic.w	r2, r2, #7
    cbcc:	f885 20d8 	strb.w	r2, [r5, #216]	; 0xd8
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    cbd0:	f04f 121b 	mov.w	r2, #1769499	; 0x1b001b
		conn_lll->link_tx_free = NULL;
    cbd4:	2600      	movs	r6, #0
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    cbd6:	e9c5 2316 	strd	r2, r3, [r5, #88]	; 0x58
		conn->connect_expire = 6;
    cbda:	2206      	movs	r2, #6
    cbdc:	f8a5 20c0 	strh.w	r2, [r5, #192]	; 0xc0
		conn_lll->periph.window_widening_event_us = 0;
    cbe0:	e9c5 6612 	strd	r6, r6, [r5, #72]	; 0x48
		conn_lll->link_tx_free = NULL;
    cbe4:	676e      	str	r6, [r5, #116]	; 0x74
		conn_lll->packet_tx_head_len = 0;
    cbe6:	f8a5 6078 	strh.w	r6, [r5, #120]	; 0x78
		conn_lll->latency_prepare = 0;
    cbea:	85ee      	strh	r6, [r5, #46]	; 0x2e
		conn_lll->latency_event = 0;
    cbec:	632e      	str	r6, [r5, #48]	; 0x30
		conn_lll->data_chan_use = 0;
    cbee:	f885 603b 	strb.w	r6, [r5, #59]	; 0x3b
		conn_lll->periph.window_size_prepare_us = 0;
    cbf2:	652e      	str	r6, [r5, #80]	; 0x50
		conn->supervision_expire = 0;
    cbf4:	f8a5 60c4 	strh.w	r6, [r5, #196]	; 0xc4
		conn->procedure_expire = 0;
    cbf8:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
		conn->apto_expire = 0U;
    cbfc:	f8a5 60d0 	strh.w	r6, [r5, #208]	; 0xd0
		conn->appto_expire = 0U;
    cc00:	f8a5 60cc 	strh.w	r6, [r5, #204]	; 0xcc
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
    cc04:	f8a5 60e4 	strh.w	r6, [r5, #228]	; 0xe4
    cc08:	f885 60e6 	strb.w	r6, [r5, #230]	; 0xe6
		conn->llcp_rx = NULL;
    cc0c:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
    cc10:	f8a5 610c 	strh.w	r6, [r5, #268]	; 0x10c
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
    cc14:	f8a5 6120 	strh.w	r6, [r5, #288]	; 0x120
		conn->llcp_feature.features_conn = ll_feat_get();
    cc18:	f00b f958 	bl	17ecc <ll_feat_get>
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    cc1c:	f895 213a 	ldrb.w	r2, [r5, #314]	; 0x13a
		conn->llcp_version.req = conn->llcp_version.ack = 0;
    cc20:	f8a5 6138 	strh.w	r6, [r5, #312]	; 0x138
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    cc24:	f022 0203 	bic.w	r2, r2, #3
    cc28:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    cc2c:	f895 207a 	ldrb.w	r2, [r5, #122]	; 0x7a
		conn->llcp_terminate.req = conn->llcp_terminate.ack = 0;
    cc30:	f8a5 6140 	strh.w	r6, [r5, #320]	; 0x140
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    cc34:	f022 0218 	bic.w	r2, r2, #24
    cc38:	f885 207a 	strb.w	r2, [r5, #122]	; 0x7a
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    cc3c:	f895 2166 	ldrb.w	r2, [r5, #358]	; 0x166
		conn->llcp_terminate.reason_final = 0;
    cc40:	f885 6143 	strb.w	r6, [r5, #323]	; 0x143
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    cc44:	f022 0207 	bic.w	r2, r2, #7
    cc48:	f885 2166 	strb.w	r2, [r5, #358]	; 0x166
		conn->llcp_conn_param.disabled = 0;
    cc4c:	f895 2186 	ldrb.w	r2, [r5, #390]	; 0x186
		conn->llcp_terminate.node_rx.hdr.link = link;
    cc50:	f8c5 a144 	str.w	sl, [r5, #324]	; 0x144
		conn->llcp_conn_param.disabled = 0;
    cc54:	f366 1245 	bfi	r2, r6, #5, #1
    cc58:	f885 2186 	strb.w	r2, [r5, #390]	; 0x186
		conn->llcp_length.disabled = 0U;
    cc5c:	f895 21ae 	ldrb.w	r2, [r5, #430]	; 0x1ae
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
    cc60:	f8a5 6164 	strh.w	r6, [r5, #356]	; 0x164
		conn->llcp_length.disabled = 0U;
    cc64:	f366 02c3 	bfi	r2, r6, #3, #1
		conn->llcp_feature.features_conn = ll_feat_get();
    cc68:	e9c5 014a 	strd	r0, r1, [r5, #296]	; 0x128
		conn->llcp_feature.features_peer = 0;
    cc6c:	2100      	movs	r1, #0
    cc6e:	2000      	movs	r0, #0
    cc70:	e9c5 014c 	strd	r0, r1, [r5, #304]	; 0x130
		conn->llcp_length.disabled = 0U;
    cc74:	f885 21ae 	strb.w	r2, [r5, #430]	; 0x1ae
		conn->periph.llcp_type = 0U;
    cc78:	f885 60d9 	strb.w	r6, [r5, #217]	; 0xd9
		conn->llcp_conn_param.req = 0;
    cc7c:	f8a5 6184 	strh.w	r6, [r5, #388]	; 0x184
		conn->periph.ticks_to_offset = 0;
    cc80:	f8c5 60e0 	str.w	r6, [r5, #224]	; 0xe0
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
    cc84:	f8a5 61ac 	strh.w	r6, [r5, #428]	; 0x1ac
		conn->llcp_length.cache.tx_octets = 0U;
    cc88:	f8a5 61b8 	strh.w	r6, [r5, #440]	; 0x1b8
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
    cc8c:	f00e f94c 	bl	1af28 <ull_conn_default_tx_octets_get>
    cc90:	f8a5 00d2 	strh.w	r0, [r5, #210]	; 0xd2
		conn->default_tx_time = ull_conn_default_tx_time_get();
    cc94:	f00e f94e 	bl	1af34 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
    cc98:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
    cc9c:	4a2b      	ldr	r2, [pc, #172]	; (cd4c <ll_adv_enable+0x2bc>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
    cc9e:	f8a5 00d4 	strh.w	r0, [r5, #212]	; 0xd4
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
    cca2:	400a      	ands	r2, r1
    cca4:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
    cca8:	f00e f94a 	bl	1af40 <ull_conn_default_phy_tx_get>
    ccac:	f895 21c0 	ldrb.w	r2, [r5, #448]	; 0x1c0
    ccb0:	f360 0202 	bfi	r2, r0, #0, #3
    ccb4:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    ccb8:	f00e f948 	bl	1af4c <ull_conn_default_phy_rx_get>
		lll->conn = conn_lll;
    ccbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ccbe:	6223      	str	r3, [r4, #32]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    ccc0:	f895 31c0 	ldrb.w	r3, [r5, #448]	; 0x1c0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    ccc4:	f8c5 61c4 	str.w	r6, [r5, #452]	; 0x1c4
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    ccc8:	f360 03c5 	bfi	r3, r0, #3, #3
		adv->node_rx_cc_free = node_rx;
    cccc:	e9c4 ab18 	strd	sl, fp, [r4, #96]	; 0x60
		conn->tx_data = conn->tx_data_last = 0;
    ccd0:	e9c5 6674 	strd	r6, r6, [r5, #464]	; 0x1d0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    ccd4:	e9c5 6672 	strd	r6, r6, [r5, #456]	; 0x1c8
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
	hdr->disabled_cb = hdr->disabled_param = NULL;
    ccd8:	e9c5 6605 	strd	r6, r6, [r5, #20]
	hdr->ref = 0U;
    ccdc:	702e      	strb	r6, [r5, #0]

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
    ccde:	61ed      	str	r5, [r5, #28]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    cce0:	f885 31c0 	strb.w	r3, [r5, #448]	; 0x1c0
		err = lll_clock_wait();
    cce4:	f013 fbca 	bl	2047c <lll_clock_wait>
		if (err) {
    cce8:	2800      	cmp	r0, #0
    ccea:	f040 80d5 	bne.w	ce98 <ll_adv_enable+0x408>
	uint8_t ch_map = lll->chan_map;
    ccee:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    ccf2:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
    ccf4:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    ccf8:	f10d 0033 	add.w	r0, sp, #51	; 0x33
	uint8_t ch_map = lll->chan_map;
    ccfc:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    cd00:	f008 fc46 	bl	15590 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
    cd04:	bb20      	cbnz	r0, cd50 <ll_adv_enable+0x2c0>
	if (adv->lll.conn) {
    cd06:	6a23      	ldr	r3, [r4, #32]
    cd08:	2b00      	cmp	r3, #0
    cd0a:	f43f af04 	beq.w	cb16 <ll_adv_enable+0x86>
		conn_release(adv);
    cd0e:	f00c fba7 	bl	19460 <conn_release.constprop.0>
    cd12:	e700      	b.n	cb16 <ll_adv_enable+0x86>
	if (!adv || !adv->is_enabled) {
    cd14:	f012 0701 	ands.w	r7, r2, #1
    cd18:	f43f aefe 	beq.w	cb18 <ll_adv_enable+0x88>
	if (adv->lll.conn) {
    cd1c:	6a23      	ldr	r3, [r4, #32]
    cd1e:	b15b      	cbz	r3, cd38 <ll_adv_enable+0x2a8>
		adv->lll.conn->periph.cancelled = 1U;
    cd20:	f893 2020 	ldrb.w	r2, [r3, #32]
    cd24:	f042 0202 	orr.w	r2, r2, #2
    cd28:	f883 2020 	strb.w	r2, [r3, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
    cd2c:	6a23      	ldr	r3, [r4, #32]
    cd2e:	f893 3020 	ldrb.w	r3, [r3, #32]
    cd32:	07d8      	lsls	r0, r3, #31
    cd34:	f53f aeef 	bmi.w	cb16 <ll_adv_enable+0x86>
}
    cd38:	b00f      	add	sp, #60	; 0x3c
    cd3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd3e:	f00c bbd1 	b.w	194e4 <disable.part.0>
    cd42:	bf00      	nop
    cd44:	20001fdc 	.word	0x20001fdc
    cd48:	01480148 	.word	0x01480148
    cd4c:	f6ff0000 	.word	0xf6ff0000
	uint16_t time_us = adv_time_get(pdu_adv, pdu_scan, adv_chn_cnt, phy,
    cd50:	f899 1001 	ldrb.w	r1, [r9, #1]
    cd54:	4602      	mov	r2, r0
    cd56:	4640      	mov	r0, r8
    cd58:	f00c fc6c 	bl	19634 <adv_time_get.constprop.0.isra.0>
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
    cd5c:	495a      	ldr	r1, [pc, #360]	; (cec8 <ll_adv_enable+0x438>)
	uint16_t interval = adv->interval;
    cd5e:	f8b4 9068 	ldrh.w	r9, [r4, #104]	; 0x68
	adv->ull.ticks_prepare_to_start =
    cd62:	2331      	movs	r3, #49	; 0x31
    cd64:	2500      	movs	r5, #0
    cd66:	60a3      	str	r3, [r4, #8]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
    cd68:	fba0 0101 	umull	r0, r1, r0, r1
    cd6c:	a354      	add	r3, pc, #336	; (adr r3, cec0 <ll_adv_enable+0x430>)
    cd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->disabled_cb = hdr->disabled_param = NULL;
    cd72:	e9c4 5505 	strd	r5, r5, [r4, #20]
	hdr->ref = 0U;
    cd76:	7025      	strb	r5, [r4, #0]
	adv->ull.ticks_active_to_start = 0;
    cd78:	6065      	str	r5, [r4, #4]
	adv->ull.ticks_preempt_to_start =
    cd7a:	60e5      	str	r5, [r4, #12]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
    cd7c:	f7ff fac0 	bl	c300 <__aeabi_uldivmod>
    cd80:	6120      	str	r0, [r4, #16]
	ticks_anchor = ticker_ticks_now_get();
    cd82:	f009 fd21 	bl	167c8 <ticker_ticks_now_get>
    cd86:	4606      	mov	r6, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    cd88:	f1b9 0f00 	cmp.w	r9, #0
    cd8c:	d108      	bne.n	cda0 <ll_adv_enable+0x310>
    cd8e:	f898 5000 	ldrb.w	r5, [r8]
    cd92:	f005 050f 	and.w	r5, r5, #15
    cd96:	f1a5 0501 	sub.w	r5, r5, #1
    cd9a:	fab5 f585 	clz	r5, r5
    cd9e:	096d      	lsrs	r5, r5, #5
    cda0:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
				   (adv->ull.ticks_slot + ticks_slot_overhead),
    cda4:	6923      	ldr	r3, [r4, #16]
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    cda6:	f365 0000 	bfi	r0, r5, #0, #1
	if (lll->is_hdcd) {
    cdaa:	f010 0501 	ands.w	r5, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    cdae:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	if (lll->is_hdcd) {
    cdb2:	d036      	beq.n	ce22 <ll_adv_enable+0x392>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    cdb4:	2000      	movs	r0, #0
    cdb6:	4a45      	ldr	r2, [pc, #276]	; (cecc <ll_adv_enable+0x43c>)
    cdb8:	f8df 9114 	ldr.w	r9, [pc, #276]	; ced0 <ll_adv_enable+0x440>
    cdbc:	9304      	str	r3, [sp, #16]
		ret_cb = TICKER_STATUS_BUSY;
    cdbe:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    cdc0:	f10d 0834 	add.w	r8, sp, #52	; 0x34
    cdc4:	9301      	str	r3, [sp, #4]
    cdc6:	9205      	str	r2, [sp, #20]
    cdc8:	2103      	movs	r1, #3
    cdca:	e9cd 0002 	strd	r0, r0, [sp, #8]
    cdce:	9406      	str	r4, [sp, #24]
    cdd0:	4633      	mov	r3, r6
    cdd2:	9000      	str	r0, [sp, #0]
    cdd4:	f8cd 8020 	str.w	r8, [sp, #32]
    cdd8:	f8cd 901c 	str.w	r9, [sp, #28]
    cddc:	462a      	mov	r2, r5
		ret_cb = TICKER_STATUS_BUSY;
    cdde:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    cde0:	f009 fc26 	bl	16630 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
    cde4:	4641      	mov	r1, r8
    cde6:	f00b fdd7 	bl	18998 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
    cdea:	2800      	cmp	r0, #0
    cdec:	d18b      	bne.n	cd06 <ll_adv_enable+0x276>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    cdee:	4a39      	ldr	r2, [pc, #228]	; (ced4 <ll_adv_enable+0x444>)
    cdf0:	9205      	str	r2, [sp, #20]
    cdf2:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
    cdf6:	9200      	str	r2, [sp, #0]
    cdf8:	e9cd 0003 	strd	r0, r0, [sp, #12]
    cdfc:	e9cd 0001 	strd	r0, r0, [sp, #4]
    ce00:	f8cd 901c 	str.w	r9, [sp, #28]
    ce04:	f8cd 8020 	str.w	r8, [sp, #32]
    ce08:	9406      	str	r4, [sp, #24]
    ce0a:	4633      	mov	r3, r6
    ce0c:	2201      	movs	r2, #1
    ce0e:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
    ce10:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    ce12:	f009 fc0d 	bl	16630 <ticker_start>
    ce16:	e02e      	b.n	ce76 <ll_adv_enable+0x3e6>
			return 0;
    ce18:	2700      	movs	r7, #0
}
    ce1a:	4638      	mov	r0, r7
    ce1c:	b00f      	add	sp, #60	; 0x3c
    ce1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ll_adv_ticker_ext[handle].ticks_slot_window =
    ce22:	4a2d      	ldr	r2, [pc, #180]	; (ced8 <ll_adv_enable+0x448>)
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    ce24:	482d      	ldr	r0, [pc, #180]	; (cedc <ll_adv_enable+0x44c>)
		ret = ticker_start_ext(
    ce26:	9304      	str	r3, [sp, #16]
			ULL_ADV_RANDOM_DELAY + ticks_slot;
    ce28:	f203 1347 	addw	r3, r3, #327	; 0x147
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    ce2c:	fba9 0100 	umull	r0, r1, r9, r0
		ret = ticker_start_ext(
    ce30:	9406      	str	r4, [sp, #24]
    ce32:	9502      	str	r5, [sp, #8]
		ll_adv_ticker_ext[handle].ticks_slot_window =
    ce34:	6013      	str	r3, [r2, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    ce36:	2391      	movs	r3, #145	; 0x91
    ce38:	fb03 1109 	mla	r1, r3, r9, r1
		ret = ticker_start_ext(
    ce3c:	4b24      	ldr	r3, [pc, #144]	; (ced0 <ll_adv_enable+0x440>)
    ce3e:	9307      	str	r3, [sp, #28]
    ce40:	4b22      	ldr	r3, [pc, #136]	; (cecc <ll_adv_enable+0x43c>)
    ce42:	9305      	str	r3, [sp, #20]
    ce44:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ce48:	9209      	str	r2, [sp, #36]	; 0x24
		ret_cb = TICKER_STATUS_BUSY;
    ce4a:	f04f 0902 	mov.w	r9, #2
		ret = ticker_start_ext(
    ce4e:	9303      	str	r3, [sp, #12]
    ce50:	f10d 0834 	add.w	r8, sp, #52	; 0x34
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    ce54:	a31a      	add	r3, pc, #104	; (adr r3, cec0 <ll_adv_enable+0x430>)
    ce56:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret_cb = TICKER_STATUS_BUSY;
    ce5a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
		ret = ticker_start_ext(
    ce5e:	f8cd 8020 	str.w	r8, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    ce62:	f7ff fa4d 	bl	c300 <__aeabi_uldivmod>
		ret = ticker_start_ext(
    ce66:	4633      	mov	r3, r6
    ce68:	e9cd 5000 	strd	r5, r0, [sp]
    ce6c:	464a      	mov	r2, r9
    ce6e:	4628      	mov	r0, r5
    ce70:	2103      	movs	r1, #3
    ce72:	f009 fb87 	bl	16584 <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
    ce76:	4641      	mov	r1, r8
    ce78:	f00b fd8e 	bl	18998 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    ce7c:	2800      	cmp	r0, #0
    ce7e:	f47f af42 	bne.w	cd06 <ll_adv_enable+0x276>
	adv->is_enabled = 1;
    ce82:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
		ull_filter_adv_scan_state_cb(BIT(0));
    ce86:	2001      	movs	r0, #1
	adv->is_enabled = 1;
    ce88:	4303      	orrs	r3, r0
    ce8a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
		ull_filter_adv_scan_state_cb(BIT(0));
    ce8e:	f012 fa25 	bl	1f2dc <ull_filter_adv_scan_state_cb>
	return 0;
    ce92:	e641      	b.n	cb18 <ll_adv_enable+0x88>
			return BT_HCI_ERR_INVALID_PARAM;
    ce94:	2712      	movs	r7, #18
    ce96:	e63f      	b.n	cb18 <ll_adv_enable+0x88>
			conn_release(adv);
    ce98:	f00c fae2 	bl	19460 <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
    ce9c:	2703      	movs	r7, #3
    ce9e:	e63b      	b.n	cb18 <ll_adv_enable+0x88>
			conn_lll->link_tx_free = &conn_lll->link_tx;
    cea0:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    cea4:	6768      	str	r0, [r5, #116]	; 0x74
    cea6:	e665      	b.n	cb74 <ll_adv_enable+0xe4>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    cea8:	2707      	movs	r7, #7
    ceaa:	e635      	b.n	cb18 <ll_adv_enable+0x88>
			ll_rx_release(node_rx);
    ceac:	4658      	mov	r0, fp
    ceae:	f00b fccd 	bl	1884c <ll_rx_release>
			ll_rx_link_release(link);
    ceb2:	4650      	mov	r0, sl
    ceb4:	f00b fcbe 	bl	18834 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    ceb8:	2707      	movs	r7, #7
    ceba:	e62d      	b.n	cb18 <ll_adv_enable+0x88>
    cebc:	f3af 8000 	nop.w
    cec0:	1afd498d 	.word	0x1afd498d
    cec4:	00000007 	.word	0x00000007
    cec8:	3b9aca00 	.word	0x3b9aca00
    cecc:	000196a5 	.word	0x000196a5
    ced0:	00017f6d 	.word	0x00017f6d
    ced4:	000191f1 	.word	0x000191f1
    ced8:	20002050 	.word	0x20002050
    cedc:	84e72a00 	.word	0x84e72a00

0000cee0 <ull_adv_time_update>:
{
    cee0:	b570      	push	{r4, r5, r6, lr}
	chan_map = lll->chan_map;
    cee2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
    cee6:	b08a      	sub	sp, #40	; 0x28
	chan_map = lll->chan_map;
    cee8:	f3c3 0342 	ubfx	r3, r3, #1, #3
{
    ceec:	460d      	mov	r5, r1
    ceee:	4604      	mov	r4, r0
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    cef0:	2101      	movs	r1, #1
    cef2:	f10d 0023 	add.w	r0, sp, #35	; 0x23
{
    cef6:	4616      	mov	r6, r2
	chan_map = lll->chan_map;
    cef8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    cefc:	f008 fb48 	bl	15590 <util_ones_count_get>
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
    cf00:	7871      	ldrb	r1, [r6, #1]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    cf02:	4602      	mov	r2, r0
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
    cf04:	4628      	mov	r0, r5
    cf06:	f00c fb95 	bl	19634 <adv_time_get.constprop.0.isra.0>
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
    cf0a:	491d      	ldr	r1, [pc, #116]	; (cf80 <ull_adv_time_update+0xa0>)
    cf0c:	a31a      	add	r3, pc, #104	; (adr r3, cf78 <ull_adv_time_update+0x98>)
    cf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
    cf12:	fba0 0101 	umull	r0, r1, r0, r1
    cf16:	f7ff f9f3 	bl	c300 <__aeabi_uldivmod>
	if (adv->ull.ticks_slot > time_ticks) {
    cf1a:	6923      	ldr	r3, [r4, #16]
    cf1c:	4298      	cmp	r0, r3
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
    cf1e:	4605      	mov	r5, r0
	if (adv->ull.ticks_slot > time_ticks) {
    cf20:	d220      	bcs.n	cf64 <ull_adv_time_update+0x84>
		ticks_minus = adv->ull.ticks_slot - time_ticks;
    cf22:	1a1b      	subs	r3, r3, r0
		ticks_plus = 0U;
    cf24:	2200      	movs	r2, #0
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    cf26:	9201      	str	r2, [sp, #4]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    cf28:	4a16      	ldr	r2, [pc, #88]	; (cf84 <ull_adv_time_update+0xa4>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    cf2a:	9302      	str	r3, [sp, #8]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    cf2c:	4b16      	ldr	r3, [pc, #88]	; (cf88 <ull_adv_time_update+0xa8>)
    cf2e:	1aa2      	subs	r2, r4, r2
    cf30:	fba3 3202 	umull	r3, r2, r3, r2
	ret_cb = TICKER_STATUS_BUSY;
    cf34:	2102      	movs	r1, #2
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    cf36:	0992      	lsrs	r2, r2, #6
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    cf38:	2300      	movs	r3, #0
    cf3a:	440a      	add	r2, r1
    cf3c:	ae09      	add	r6, sp, #36	; 0x24
	ret_cb = TICKER_STATUS_BUSY;
    cf3e:	9109      	str	r1, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    cf40:	4912      	ldr	r1, [pc, #72]	; (cf8c <ull_adv_time_update+0xac>)
    cf42:	9105      	str	r1, [sp, #20]
    cf44:	e9cd 3303 	strd	r3, r3, [sp, #12]
    cf48:	2103      	movs	r1, #3
    cf4a:	b2d2      	uxtb	r2, r2
    cf4c:	9606      	str	r6, [sp, #24]
    cf4e:	9300      	str	r3, [sp, #0]
    cf50:	4618      	mov	r0, r3
    cf52:	f009 fbdf 	bl	16714 <ticker_update>
	ret = ull_ticker_status_take(ret, &ret_cb);
    cf56:	4631      	mov	r1, r6
    cf58:	f00b fd1e 	bl	18998 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    cf5c:	b948      	cbnz	r0, cf72 <ull_adv_time_update+0x92>
	adv->ull.ticks_slot = time_ticks;
    cf5e:	6125      	str	r5, [r4, #16]
}
    cf60:	b00a      	add	sp, #40	; 0x28
    cf62:	bd70      	pop	{r4, r5, r6, pc}
	} else if (adv->ull.ticks_slot < time_ticks) {
    cf64:	d902      	bls.n	cf6c <ull_adv_time_update+0x8c>
		ticks_plus = time_ticks - adv->ull.ticks_slot;
    cf66:	1ac2      	subs	r2, r0, r3
		ticks_minus = 0U;
    cf68:	2300      	movs	r3, #0
    cf6a:	e7dc      	b.n	cf26 <ull_adv_time_update+0x46>
		return BT_HCI_ERR_SUCCESS;
    cf6c:	2000      	movs	r0, #0
}
    cf6e:	b00a      	add	sp, #40	; 0x28
    cf70:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    cf72:	200c      	movs	r0, #12
}
    cf74:	b00a      	add	sp, #40	; 0x28
    cf76:	bd70      	pop	{r4, r5, r6, pc}
    cf78:	1afd498d 	.word	0x1afd498d
    cf7c:	00000007 	.word	0x00000007
    cf80:	3b9aca00 	.word	0x3b9aca00
    cf84:	20001fdc 	.word	0x20001fdc
    cf88:	8d3dcb09 	.word	0x8d3dcb09
    cf8c:	00017f6d 	.word	0x00017f6d

0000cf90 <event_conn_upd_prep>:
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
}

static inline int event_conn_upd_prep(struct ll_conn *conn, uint16_t lazy,
				      uint32_t ticks_at_expire)
{
    cf90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_conn *lll = &conn->lll;
	uint16_t instant_latency;
	uint16_t event_counter;

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    cf94:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
    cf96:	8e46      	ldrh	r6, [r0, #50]	; 0x32
    cf98:	441e      	add	r6, r3

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    cf9a:	f890 310e 	ldrb.w	r3, [r0, #270]	; 0x10e
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    cf9e:	b2b6      	uxth	r6, r6
    cfa0:	4431      	add	r1, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    cfa2:	f013 0307 	ands.w	r3, r3, #7
{
    cfa6:	b08b      	sub	sp, #44	; 0x2c
    cfa8:	4604      	mov	r4, r0
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    cfaa:	fa1f f981 	uxth.w	r9, r1
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    cfae:	f040 81a3 	bne.w	d2f8 <event_conn_upd_prep+0x368>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    cfb2:	f8b0 70e8 	ldrh.w	r7, [r0, #232]	; 0xe8
    cfb6:	eba9 0107 	sub.w	r1, r9, r7
    cfba:	fa1f f981 	uxth.w	r9, r1
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
    cfbe:	0409      	lsls	r1, r1, #16
    cfc0:	f100 820c 	bmi.w	d3dc <event_conn_upd_prep+0x44c>
    cfc4:	4690      	mov	r8, r2
		uint32_t ticker_status;
		uint32_t periodic_us;
		uint16_t latency;

#if defined(CONFIG_BT_PERIPHERAL) && defined(CONFIG_BT_CTLR_LE_ENC)
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    cfc6:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
    cfca:	2a00      	cmp	r2, #0
    cfcc:	f2c0 8135 	blt.w	d23a <event_conn_upd_prep+0x2aa>
			conn->periph.llcp_type = LLCP_NONE;
		} else
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */
		{
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
    cfd0:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    cfd4:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    cfd8:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
    cfdc:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
		conn->llcp_cu.ack = conn->llcp_cu.req;
    cfe0:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
    cfe4:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    cfe8:	4293      	cmp	r3, r2
    cfea:	d006      	beq.n	cffa <event_conn_upd_prep+0x6a>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    cfec:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    cff0:	f003 030f 	and.w	r3, r3, #15
    cff4:	2b06      	cmp	r3, #6
    cff6:	f000 8247 	beq.w	d488 <event_conn_upd_prep+0x4f8>
	if (conn == conn_upd_curr) {
    cffa:	4bb1      	ldr	r3, [pc, #708]	; (d2c0 <event_conn_upd_prep+0x330>)
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    cffc:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
	if (conn == conn_upd_curr) {
    d000:	681a      	ldr	r2, [r3, #0]
    d002:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
    d004:	bf04      	itt	eq
    d006:	2200      	moveq	r2, #0
    d008:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
    d00a:	2d00      	cmp	r5, #0
    d00c:	f000 8144 	beq.w	d298 <event_conn_upd_prep+0x308>
    d010:	6828      	ldr	r0, [r5, #0]
    d012:	2800      	cmp	r0, #0
    d014:	f000 8140 	beq.w	d298 <event_conn_upd_prep+0x308>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
    d018:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
    d01c:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
		conn->llcp_rx = rx->hdr.link->mem;
    d020:	6842      	ldr	r2, [r0, #4]
    d022:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		if ((conn->llcp_cu.interval != lll->interval) ||
    d026:	4563      	cmp	r3, ip
		    (conn->llcp_cu.latency != lll->latency) ||
    d028:	f8b4 2112 	ldrh.w	r2, [r4, #274]	; 0x112
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    d02c:	f8b4 1114 	ldrh.w	r1, [r4, #276]	; 0x114
		if ((conn->llcp_cu.interval != lll->interval) ||
    d030:	f000 8117 	beq.w	d262 <event_conn_upd_prep+0x2d2>
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
    d034:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
			cu->interval = conn->llcp_cu.interval;
    d038:	83eb      	strh	r3, [r5, #30]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    d03a:	2319      	movs	r3, #25
    d03c:	712b      	strb	r3, [r5, #4]
			cu->status = 0x00;
    d03e:	2300      	movs	r3, #0
			rx->hdr.handle = lll->handle;
    d040:	f8a5 c006 	strh.w	ip, [r5, #6]
			cu->latency = conn->llcp_cu.latency;
    d044:	842a      	strh	r2, [r5, #32]
			cu->timeout = conn->llcp_cu.timeout;
    d046:	8469      	strh	r1, [r5, #34]	; 0x22
			cu->status = 0x00;
    d048:	772b      	strb	r3, [r5, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    d04a:	4629      	mov	r1, r5
    d04c:	f00b fc04 	bl	18858 <ll_rx_put>
		ll_rx_sched();
    d050:	f00b fc0c 	bl	1886c <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    d054:	68a3      	ldr	r3, [r4, #8]
    d056:	2b00      	cmp	r3, #0
    d058:	f2c0 80f7 	blt.w	d24a <event_conn_upd_prep+0x2ba>
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
    d05c:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
    d05e:	f8b4 5110 	ldrh.w	r5, [r4, #272]	; 0x110
		conn_interval_old = instant_latency * lll->interval;
    d062:	fb10 f009 	smulbb	r0, r0, r9
    d066:	b280      	uxth	r0, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
    d068:	fbb0 f1f5 	udiv	r1, r0, r5
		conn_interval_new = latency * conn->llcp_cu.interval;
    d06c:	fb15 f301 	smulbb	r3, r5, r1
    d070:	b29b      	uxth	r3, r3
		if (conn_interval_new > conn_interval_old) {
    d072:	4298      	cmp	r0, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    d074:	fa1f fa81 	uxth.w	sl, r1
		if (conn_interval_new > conn_interval_old) {
    d078:	f0c0 80ce 	bcc.w	d218 <event_conn_upd_prep+0x288>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
				(conn_interval_new - conn_interval_old) *
				CONN_INT_UNIT_US);
		} else {
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    d07c:	fb05 0111 	mls	r1, r5, r1, r0
    d080:	f240 43e2 	movw	r3, #1250	; 0x4e2
    d084:	488f      	ldr	r0, [pc, #572]	; (d2c4 <event_conn_upd_prep+0x334>)
    d086:	b289      	uxth	r1, r1
    d088:	fb03 f101 	mul.w	r1, r3, r1
    d08c:	fba1 0100 	umull	r0, r1, r1, r0
    d090:	a389      	add	r3, pc, #548	; (adr r3, d2b8 <event_conn_upd_prep+0x328>)
    d092:	e9d3 2300 	ldrd	r2, r3, [r3]
    d096:	f7ff f933 	bl	c300 <__aeabi_uldivmod>
    d09a:	eba8 0800 	sub.w	r8, r8, r0
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
		lll->latency_prepare -= (instant_latency - latency);
    d09e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    d0a0:	441f      	add	r7, r3
			CONN_INT_UNIT_US;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
    d0a2:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
    d0a6:	1bbe      	subs	r6, r7, r6
    d0a8:	4456      	add	r6, sl
		conn_interval_us = conn->llcp_cu.interval *
    d0aa:	f240 47e2 	movw	r7, #1250	; 0x4e2
		} else if (lll->role) {
    d0ae:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
    d0b0:	85e6      	strh	r6, [r4, #46]	; 0x2e
		conn_interval_us = conn->llcp_cu.interval *
    d0b2:	fb07 f605 	mul.w	r6, r7, r5
		} else if (lll->role) {
    d0b6:	f2c0 8196 	blt.w	d3e6 <event_conn_upd_prep+0x456>
			 */
			ticks_win_offset += 1U;
#endif /* CONFIG_BT_CENTRAL */

		} else {
			LL_ASSERT(0);
    d0ba:	4a83      	ldr	r2, [pc, #524]	; (d2c8 <event_conn_upd_prep+0x338>)
    d0bc:	4983      	ldr	r1, [pc, #524]	; (d2cc <event_conn_upd_prep+0x33c>)
    d0be:	4884      	ldr	r0, [pc, #528]	; (d2d0 <event_conn_upd_prep+0x340>)
    d0c0:	f640 43bc 	movw	r3, #3260	; 0xcbc
    d0c4:	f01a fa36 	bl	27534 <assert_print>
    d0c8:	4040      	eors	r0, r0
    d0ca:	f380 8811 	msr	BASEPRI, r0
    d0ce:	f04f 0003 	mov.w	r0, #3
    d0d2:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    d0d4:	2700      	movs	r7, #0
		periodic_us = conn_interval_us;
    d0d6:	46b3      	mov	fp, r6

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
					  conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    d0d8:	4a7e      	ldr	r2, [pc, #504]	; (d2d4 <event_conn_upd_prep+0x344>)
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    d0da:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    d0de:	497e      	ldr	r1, [pc, #504]	; (d2d8 <event_conn_upd_prep+0x348>)
		lll->latency = conn->llcp_cu.latency;
    d0e0:	f8b4 0112 	ldrh.w	r0, [r4, #274]	; 0x112
    d0e4:	85a0      	strh	r0, [r4, #44]	; 0x2c
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    d0e6:	4432      	add	r2, r6
    d0e8:	fbb2 f2f6 	udiv	r2, r2, r6
    d0ec:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    d0f0:	f242 7210 	movw	r2, #10000	; 0x2710
    d0f4:	fb02 6303 	mla	r3, r2, r3, r6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    d0f8:	4431      	add	r1, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    d0fa:	3b01      	subs	r3, #1
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    d0fc:	fbb1 f1f6 	udiv	r1, r1, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    d100:	fbb3 f6f6 	udiv	r6, r3, r6
		lll->interval = conn->llcp_cu.interval;
    d104:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
    d108:	8563      	strh	r3, [r4, #42]	; 0x2a
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    d10a:	b28a      	uxth	r2, r1
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    d10c:	1d83      	adds	r3, r0, #6
    d10e:	429a      	cmp	r2, r3
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    d110:	f8a4 60c2 	strh.w	r6, [r4, #194]	; 0xc2
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    d114:	f8a4 20ce 	strh.w	r2, [r4, #206]	; 0xce
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    d118:	dd04      	ble.n	d124 <event_conn_upd_prep+0x194>
    d11a:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
    d11e:	33fa      	adds	r3, #250	; 0xfa
    d120:	441a      	add	r2, r3
    d122:	b292      	uxth	r2, r2
				     (conn->apto_reload - (lll->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
    d124:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    d128:	f8a4 20ca 	strh.w	r2, [r4, #202]	; 0xca
		if (conn->llcp_cu.cmd) {
    d12c:	071b      	lsls	r3, r3, #28
			conn->supervision_expire = 0U;
    d12e:	bf44      	itt	mi
    d130:	2300      	movmi	r3, #0
    d132:	f8a4 30c4 	strhmi.w	r3, [r4, #196]	; 0xc4
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    d136:	2102      	movs	r1, #2
    d138:	2001      	movs	r0, #1
    d13a:	f015 f95f 	bl	223fc <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    d13e:	2200      	movs	r2, #0
    d140:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    d142:	4681      	mov	r9, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    d144:	2001      	movs	r0, #1
    d146:	f008 f8f3 	bl	15330 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    d14a:	4964      	ldr	r1, [pc, #400]	; (d2dc <event_conn_upd_prep+0x34c>)
    d14c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    d150:	4620      	mov	r0, r4
    d152:	f008 f87d 	bl	15250 <mem_index_get>
			      0);
#endif

		/* start peripheral/central with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    d156:	f100 0a03 	add.w	sl, r0, #3
    d15a:	fa5f fa8a 	uxtb.w	sl, sl
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    d15e:	4b60      	ldr	r3, [pc, #384]	; (d2e0 <event_conn_upd_prep+0x350>)
    d160:	9400      	str	r4, [sp, #0]
    d162:	4652      	mov	r2, sl
    d164:	2101      	movs	r1, #1
    d166:	2000      	movs	r0, #0
    d168:	f009 faec 	bl	16744 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d16c:	f030 0302 	bics.w	r3, r0, #2
    d170:	d00c      	beq.n	d18c <event_conn_upd_prep+0x1fc>
    d172:	4a55      	ldr	r2, [pc, #340]	; (d2c8 <event_conn_upd_prep+0x338>)
    d174:	495b      	ldr	r1, [pc, #364]	; (d2e4 <event_conn_upd_prep+0x354>)
    d176:	4856      	ldr	r0, [pc, #344]	; (d2d0 <event_conn_upd_prep+0x340>)
    d178:	f640 43eb 	movw	r3, #3307	; 0xceb
    d17c:	f01a f9da 	bl	27534 <assert_print>
    d180:	4040      	eors	r0, r0
    d182:	f380 8811 	msr	BASEPRI, r0
    d186:	f04f 0003 	mov.w	r0, #3
    d18a:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    d18c:	4e4d      	ldr	r6, [pc, #308]	; (d2c4 <event_conn_upd_prep+0x334>)
    d18e:	fbab 6b06 	umull	r6, fp, fp, r6
    d192:	a349      	add	r3, pc, #292	; (adr r3, d2b8 <event_conn_upd_prep+0x328>)
    d194:	e9d3 2300 	ldrd	r2, r3, [r3]
    d198:	4630      	mov	r0, r6
    d19a:	4659      	mov	r1, fp
    d19c:	f7ff f8b0 	bl	c300 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    d1a0:	9408      	str	r4, [sp, #32]
				     HAL_TICKER_REMAINDER(periodic_us),
    d1a2:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    d1a6:	9406      	str	r4, [sp, #24]
				     HAL_TICKER_REMAINDER(periodic_us),
    d1a8:	484f      	ldr	r0, [pc, #316]	; (d2e8 <event_conn_upd_prep+0x358>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    d1aa:	6923      	ldr	r3, [r4, #16]
    d1ac:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(periodic_us),
    d1ae:	fba5 0100 	umull	r0, r1, r5, r0
    d1b2:	2307      	movs	r3, #7
    d1b4:	fb03 1105 	mla	r1, r3, r5, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    d1b8:	4b4c      	ldr	r3, [pc, #304]	; (d2ec <event_conn_upd_prep+0x35c>)
    d1ba:	9307      	str	r3, [sp, #28]
    d1bc:	4b4c      	ldr	r3, [pc, #304]	; (d2f0 <event_conn_upd_prep+0x360>)
    d1be:	9305      	str	r3, [sp, #20]
				     HAL_TICKER_REMAINDER(periodic_us),
    d1c0:	1a30      	subs	r0, r6, r0
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    d1c2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
				     HAL_TICKER_REMAINDER(periodic_us),
    d1c6:	eb6b 0101 	sbc.w	r1, fp, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    d1ca:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    d1cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d1d0:	2300      	movs	r3, #0
    d1d2:	f7ff f895 	bl	c300 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    d1d6:	4643      	mov	r3, r8
    d1d8:	e9cd 5001 	strd	r5, r0, [sp, #4]
    d1dc:	9700      	str	r7, [sp, #0]
    d1de:	4652      	mov	r2, sl
    d1e0:	2101      	movs	r1, #1
    d1e2:	2000      	movs	r0, #0
    d1e4:	f009 fa24 	bl	16630 <ticker_start>
#else
				     ull_central_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d1e8:	f030 0302 	bics.w	r3, r0, #2
    d1ec:	d00c      	beq.n	d208 <event_conn_upd_prep+0x278>
    d1ee:	4a36      	ldr	r2, [pc, #216]	; (d2c8 <event_conn_upd_prep+0x338>)
    d1f0:	493c      	ldr	r1, [pc, #240]	; (d2e4 <event_conn_upd_prep+0x354>)
    d1f2:	4837      	ldr	r0, [pc, #220]	; (d2d0 <event_conn_upd_prep+0x340>)
    d1f4:	f640 5305 	movw	r3, #3333	; 0xd05
    d1f8:	f01a f99c 	bl	27534 <assert_print>
    d1fc:	4040      	eors	r0, r0
    d1fe:	f380 8811 	msr	BASEPRI, r0
    d202:	f04f 0003 	mov.w	r0, #3
    d206:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    d208:	f1b9 0f00 	cmp.w	r9, #0
    d20c:	f040 8136 	bne.w	d47c <event_conn_upd_prep+0x4ec>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
				      TICKER_USER_ID_ULL_LOW, 1);
		}
#endif

		return 0;
    d210:	2000      	movs	r0, #0
	}

	return -EINPROGRESS;
}
    d212:	b00b      	add	sp, #44	; 0x2c
    d214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    d218:	1a1b      	subs	r3, r3, r0
    d21a:	492a      	ldr	r1, [pc, #168]	; (d2c4 <event_conn_upd_prep+0x334>)
    d21c:	f240 40e2 	movw	r0, #1250	; 0x4e2
    d220:	fb03 f000 	mul.w	r0, r3, r0
    d224:	fba0 0101 	umull	r0, r1, r0, r1
    d228:	a323      	add	r3, pc, #140	; (adr r3, d2b8 <event_conn_upd_prep+0x328>)
    d22a:	e9d3 2300 	ldrd	r2, r3, [r3]
    d22e:	f7ff f867 	bl	c300 <__aeabi_uldivmod>
    d232:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d236:	4480      	add	r8, r0
    d238:	e731      	b.n	d09e <event_conn_upd_prep+0x10e>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    d23a:	f890 20d9 	ldrb.w	r2, [r0, #217]	; 0xd9
    d23e:	2a00      	cmp	r2, #0
    d240:	f43f aec6 	beq.w	cfd0 <event_conn_upd_prep+0x40>
			conn->periph.llcp_type = LLCP_NONE;
    d244:	f880 30d9 	strb.w	r3, [r0, #217]	; 0xd9
    d248:	e6c6      	b.n	cfd8 <event_conn_upd_prep+0x48>
			uint32_t ticks_prepare_to_start =
    d24a:	68e1      	ldr	r1, [r4, #12]
    d24c:	6862      	ldr	r2, [r4, #4]
			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
    d24e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    d252:	4291      	cmp	r1, r2
    d254:	bf2c      	ite	cs
    d256:	4488      	addcs	r8, r1
    d258:	4490      	addcc	r8, r2
    d25a:	60a3      	str	r3, [r4, #8]
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
    d25c:	eba8 0803 	sub.w	r8, r8, r3
    d260:	e6fc      	b.n	d05c <event_conn_upd_prep+0xcc>
		if ((conn->llcp_cu.interval != lll->interval) ||
    d262:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
    d266:	4594      	cmp	ip, r2
    d268:	f47f aee4 	bne.w	d034 <event_conn_upd_prep+0xa4>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    d26c:	f240 4ce2 	movw	ip, #1250	; 0x4e2
    d270:	fb0c fe03 	mul.w	lr, ip, r3
    d274:	f242 7c10 	movw	ip, #10000	; 0x2710
    d278:	fb0c ec01 	mla	ip, ip, r1, lr
    d27c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    d280:	fbbc fcfe 	udiv	ip, ip, lr
		    (conn->llcp_cu.latency != lll->latency) ||
    d284:	f8b4 e0c2 	ldrh.w	lr, [r4, #194]	; 0xc2
    d288:	fa1f fc8c 	uxth.w	ip, ip
    d28c:	45e6      	cmp	lr, ip
    d28e:	f47f aed1 	bne.w	d034 <event_conn_upd_prep+0xa4>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    d292:	2301      	movs	r3, #1
    d294:	712b      	strb	r3, [r5, #4]
    d296:	e6d8      	b.n	d04a <event_conn_upd_prep+0xba>
		LL_ASSERT(rx && rx->hdr.link);
    d298:	4a0b      	ldr	r2, [pc, #44]	; (d2c8 <event_conn_upd_prep+0x338>)
    d29a:	4916      	ldr	r1, [pc, #88]	; (d2f4 <event_conn_upd_prep+0x364>)
    d29c:	480c      	ldr	r0, [pc, #48]	; (d2d0 <event_conn_upd_prep+0x340>)
    d29e:	f44f 6344 	mov.w	r3, #3136	; 0xc40
    d2a2:	f01a f947 	bl	27534 <assert_print>
    d2a6:	4040      	eors	r0, r0
    d2a8:	f380 8811 	msr	BASEPRI, r0
    d2ac:	f04f 0003 	mov.w	r0, #3
    d2b0:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    d2b2:	6828      	ldr	r0, [r5, #0]
    d2b4:	e6b0      	b.n	d018 <event_conn_upd_prep+0x88>
    d2b6:	bf00      	nop
    d2b8:	1afd498d 	.word	0x1afd498d
    d2bc:	00000007 	.word	0x00000007
    d2c0:	20002070 	.word	0x20002070
    d2c4:	3b9aca00 	.word	0x3b9aca00
    d2c8:	0002fd50 	.word	0x0002fd50
    d2cc:	0002f900 	.word	0x0002f900
    d2d0:	0002f8a0 	.word	0x0002f8a0
    d2d4:	026259ff 	.word	0x026259ff
    d2d8:	01c9c37f 	.word	0x01c9c37f
    d2dc:	200011c8 	.word	0x200011c8
    d2e0:	0001a10d 	.word	0x0001a10d
    d2e4:	0002fe30 	.word	0x0002fe30
    d2e8:	1afd498d 	.word	0x1afd498d
    d2ec:	0001a0b5 	.word	0x0001a0b5
    d2f0:	0001e715 	.word	0x0001e715
    d2f4:	0002fe1c 	.word	0x0002fe1c
		rx = ll_pdu_rx_alloc_peek(1);
    d2f8:	2001      	movs	r0, #1
    d2fa:	f00b fabd 	bl	18878 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    d2fe:	4606      	mov	r6, r0
    d300:	2800      	cmp	r0, #0
    d302:	f000 80cf 	beq.w	d4a4 <event_conn_upd_prep+0x514>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    d306:	4874      	ldr	r0, [pc, #464]	; (d4d8 <event_conn_upd_prep+0x548>)
    d308:	f007 ff6c 	bl	151e4 <mem_acquire>
		if (!tx) {
    d30c:	4605      	mov	r5, r0
    d30e:	2800      	cmp	r0, #0
    d310:	f000 80c8 	beq.w	d4a4 <event_conn_upd_prep+0x514>
	if (!conn_upd_curr) {
    d314:	4b71      	ldr	r3, [pc, #452]	; (d4dc <event_conn_upd_prep+0x54c>)
    d316:	681a      	ldr	r2, [r3, #0]
    d318:	2a00      	cmp	r2, #0
    d31a:	f000 80bb 	beq.w	d494 <event_conn_upd_prep+0x504>
		(void)ll_pdu_rx_alloc();
    d31e:	f00b facb 	bl	188b8 <ll_pdu_rx_alloc>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d322:	792b      	ldrb	r3, [r5, #4]
		rx->hdr.link->mem = conn->llcp_rx;
    d324:	6832      	ldr	r2, [r6, #0]
    d326:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    d32a:	6051      	str	r1, [r2, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d32c:	f043 0303 	orr.w	r3, r3, #3
		conn->llcp_rx = rx;
    d330:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    d334:	2000      	movs	r0, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d336:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    d338:	230c      	movs	r3, #12
    d33a:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    d33c:	71e8      	strb	r0, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    d33e:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
    d342:	722b      	strb	r3, [r5, #8]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    d344:	4a66      	ldr	r2, [pc, #408]	; (d4e0 <event_conn_upd_prep+0x550>)
    d346:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
					      conn->lll.latency + 6;
    d34a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    d34c:	fba2 2303 	umull	r2, r3, r2, r3
    d350:	0a9b      	lsrs	r3, r3, #10
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    d352:	f8a5 3009 	strh.w	r3, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    d356:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
    d35a:	f8a5 300b 	strh.w	r3, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    d35e:	f8b4 3112 	ldrh.w	r3, [r4, #274]	; 0x112
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    d362:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    d366:	f8a5 300d 	strh.w	r3, [r5, #13]
					      conn->lll.latency + 6;
    d36a:	3106      	adds	r1, #6
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    d36c:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
    d370:	f8a5 300f 	strh.w	r3, [r5, #15]
					      conn->lll.latency + 6;
    d374:	4449      	add	r1, r9
	    conn->tx_head &&
    d376:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
					      conn->lll.latency + 6;
    d37a:	b289      	uxth	r1, r1
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    d37c:	f360 0202 	bfi	r2, r0, #0, #3
		conn->llcp.conn_upd.instant = event_counter +
    d380:	f8a4 10e8 	strh.w	r1, [r4, #232]	; 0xe8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    d384:	f884 210e 	strb.w	r2, [r4, #270]	; 0x10e
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    d388:	f8a5 1011 	strh.w	r1, [r5, #17]
	if (
    d38c:	b1bb      	cbz	r3, d3be <event_conn_upd_prep+0x42e>
	    !conn->llcp_enc.pause_tx &&
    d38e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    d392:	0796      	lsls	r6, r2, #30
    d394:	d413      	bmi.n	d3be <event_conn_upd_prep+0x42e>
	    !conn->llcp_phy.pause_tx &&
    d396:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    d39a:	07d0      	lsls	r0, r2, #31
    d39c:	d40f      	bmi.n	d3be <event_conn_upd_prep+0x42e>
		if (conn->tx_head == conn->tx_data) {
    d39e:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    d3a2:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    d3a4:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    d3a8:	d07f      	beq.n	d4aa <event_conn_upd_prep+0x51a>
		} else if (!conn->tx_ctrl) {
    d3aa:	b962      	cbnz	r2, d3c6 <event_conn_upd_prep+0x436>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    d3ac:	791a      	ldrb	r2, [r3, #4]
    d3ae:	f002 0203 	and.w	r2, r2, #3
    d3b2:	2a03      	cmp	r2, #3
    d3b4:	f000 8085 	beq.w	d4c2 <event_conn_upd_prep+0x532>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    d3b8:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    d3bc:	e005      	b.n	d3ca <event_conn_upd_prep+0x43a>
		if (!conn->tx_ctrl) {
    d3be:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    d3c2:	2a00      	cmp	r2, #0
    d3c4:	d068      	beq.n	d498 <event_conn_upd_prep+0x508>
	tx->next = conn->tx_ctrl_last->next;
    d3c6:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    d3ca:	681a      	ldr	r2, [r3, #0]
    d3cc:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    d3ce:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    d3d0:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
    d3d2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
    d3d6:	b90b      	cbnz	r3, d3dc <event_conn_upd_prep+0x44c>
		conn->tx_data_last = tx;
    d3d8:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
	return -EINPROGRESS;
    d3dc:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    d3e0:	b00b      	add	sp, #44	; 0x2c
    d3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				lll->periph.window_widening_periodic_us *
    d3e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
			lll->periph.window_widening_prepare_us -=
    d3e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    d3ea:	fb02 3319 	mls	r3, r2, r9, r3
    d3ee:	64a3      	str	r3, [r4, #72]	; 0x48
				ceiling_fraction(((lll_clock_ppm_local_get() +
    d3f0:	f013 f896 	bl	20520 <lll_clock_ppm_local_get>
    d3f4:	4605      	mov	r5, r0
    d3f6:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
    d3fa:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    d3fe:	f013 f891 	bl	20524 <lll_clock_ppm_get>
    d402:	4405      	add	r5, r0
    d404:	fb06 f505 	mul.w	r5, r6, r5
    d408:	4b36      	ldr	r3, [pc, #216]	; (d4e4 <event_conn_upd_prep+0x554>)
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    d40a:	f894 211c 	ldrb.w	r2, [r4, #284]	; 0x11c
				ceiling_fraction(((lll_clock_ppm_local_get() +
    d40e:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    d412:	f205 253f 	addw	r5, r5, #575	; 0x23f
    d416:	fba3 3505 	umull	r3, r5, r3, r5
    d41a:	0cad      	lsrs	r5, r5, #18
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    d41c:	fb07 f202 	mul.w	r2, r7, r2
			lll->periph.window_widening_prepare_us +=
    d420:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			lll->periph.window_size_prepare_us =
    d422:	6522      	str	r2, [r4, #80]	; 0x50
				lll->periph.window_widening_periodic_us *
    d424:	fb05 f00a 	mul.w	r0, r5, sl
				(conn_interval_us >> 1) - EVENT_IFS_US;
    d428:	0872      	lsrs	r2, r6, #1
			lll->periph.window_widening_prepare_us +=
    d42a:	4403      	add	r3, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
    d42c:	3a96      	subs	r2, #150	; 0x96
			lll->periph.window_widening_prepare_us +=
    d42e:	4293      	cmp	r3, r2
    d430:	bf28      	it	cs
    d432:	4613      	movcs	r3, r2
			lll->periph.window_widening_periodic_us =
    d434:	6425      	str	r5, [r4, #64]	; 0x40
			periodic_us -= lll->periph.window_widening_periodic_us;
    d436:	eba6 0b05 	sub.w	fp, r6, r5
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    d43a:	4d2b      	ldr	r5, [pc, #172]	; (d4e8 <event_conn_upd_prep+0x558>)
			lll->periph.window_widening_prepare_us +=
    d43c:	e9c4 2311 	strd	r2, r3, [r4, #68]	; 0x44
			conn->periph.ticks_to_offset = 0U;
    d440:	2300      	movs	r3, #0
    d442:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    d446:	fba0 0105 	umull	r0, r1, r0, r5
    d44a:	a321      	add	r3, pc, #132	; (adr r3, d4d0 <event_conn_upd_prep+0x540>)
    d44c:	e9d3 2300 	ldrd	r2, r3, [r3]
    d450:	f7fe ff56 	bl	c300 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    d454:	4922      	ldr	r1, [pc, #136]	; (d4e0 <event_conn_upd_prep+0x550>)
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    d456:	eba8 0800 	sub.w	r8, r8, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    d45a:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
    d45e:	fba1 3000 	umull	r3, r0, r1, r0
    d462:	0a80      	lsrs	r0, r0, #10
    d464:	fb07 f000 	mul.w	r0, r7, r0
    d468:	a319      	add	r3, pc, #100	; (adr r3, d4d0 <event_conn_upd_prep+0x540>)
    d46a:	e9d3 2300 	ldrd	r2, r3, [r3]
    d46e:	fba0 0105 	umull	r0, r1, r0, r5
    d472:	f7fe ff45 	bl	c300 <__aeabi_uldivmod>
    d476:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			periodic_us -= lll->periph.window_widening_periodic_us;
    d47a:	e62d      	b.n	d0d8 <event_conn_upd_prep+0x148>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    d47c:	2201      	movs	r2, #1
    d47e:	2102      	movs	r1, #2
    d480:	4610      	mov	r0, r2
    d482:	f007 ff55 	bl	15330 <mayfly_enable>
    d486:	e6c3      	b.n	d210 <event_conn_upd_prep+0x280>
			conn->procedure_expire = 0U;
    d488:	2300      	movs	r3, #0
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    d48a:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->procedure_expire = 0U;
    d48e:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
    d492:	e5b2      	b.n	cffa <event_conn_upd_prep+0x6a>
		conn_upd_curr = conn;
    d494:	601c      	str	r4, [r3, #0]
    d496:	e742      	b.n	d31e <event_conn_upd_prep+0x38e>
			tx->next = conn->tx_head;
    d498:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    d49a:	e9c4 5571 	strd	r5, r5, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    d49e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
    d4a2:	e798      	b.n	d3d6 <event_conn_upd_prep+0x446>
			return -ENOBUFS;
    d4a4:	f06f 0068 	mvn.w	r0, #104	; 0x68
    d4a8:	e6b3      	b.n	d212 <event_conn_upd_prep+0x282>
			conn->tx_data = conn->tx_data->next;
    d4aa:	6819      	ldr	r1, [r3, #0]
    d4ac:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    d4b0:	2a00      	cmp	r2, #0
    d4b2:	d188      	bne.n	d3c6 <event_conn_upd_prep+0x436>
			tx->next = conn->tx_head->next;
    d4b4:	681a      	ldr	r2, [r3, #0]
    d4b6:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    d4b8:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    d4ba:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    d4bc:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
    d4c0:	e789      	b.n	d3d6 <event_conn_upd_prep+0x446>
	    ((pdu_data_tx->llctrl.opcode !=
    d4c2:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    d4c4:	2a03      	cmp	r2, #3
    d4c6:	d0f5      	beq.n	d4b4 <event_conn_upd_prep+0x524>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    d4c8:	2a0a      	cmp	r2, #10
    d4ca:	f47f af75 	bne.w	d3b8 <event_conn_upd_prep+0x428>
    d4ce:	e7f1      	b.n	d4b4 <event_conn_upd_prep+0x524>
    d4d0:	1afd498d 	.word	0x1afd498d
    d4d4:	00000007 	.word	0x00000007
    d4d8:	20002104 	.word	0x20002104
    d4dc:	20002070 	.word	0x20002070
    d4e0:	d1b71759 	.word	0xd1b71759
    d4e4:	431bde83 	.word	0x431bde83
    d4e8:	3b9aca00 	.word	0x3b9aca00
    d4ec:	00000000 	.word	0x00000000

0000d4f0 <ull_periph_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param);

void ull_periph_setup(struct node_rx_hdr *rx, struct node_rx_ftr *ftr,
		     struct lll_conn *lll)
{
    d4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memq_link_t *link;
	uint16_t timeout;
	uint8_t chan_sel;
	void *node;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    d4f4:	680b      	ldr	r3, [r1, #0]
	conn = lll->hdr.parent;
    d4f6:	f8d2 8000 	ldr.w	r8, [r2]
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    d4fa:	681b      	ldr	r3, [r3, #0]
{
    d4fc:	b097      	sub	sp, #92	; 0x5c
    d4fe:	460c      	mov	r4, r1
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    d500:	930a      	str	r3, [sp, #40]	; 0x28

	/* Populate the peripheral context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_adv->tx_addr;
    d502:	7f03      	ldrb	r3, [r0, #28]
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    d504:	f100 011e 	add.w	r1, r0, #30
	peer_addr_type = pdu_adv->tx_addr;
    d508:	f3c3 1380 	ubfx	r3, r3, #6, #1
{
    d50c:	4605      	mov	r5, r0
    d50e:	4617      	mov	r7, r2
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    d510:	a814      	add	r0, sp, #80	; 0x50
    d512:	2206      	movs	r2, #6
	peer_addr_type = pdu_adv->tx_addr;
    d514:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    d518:	f01b ff15 	bl	29346 <memcpy>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	uint8_t rl_idx = ftr->rl_idx;
    d51c:	f894 9011 	ldrb.w	r9, [r4, #17]

	if (rl_idx != FILTER_IDX_NONE) {
    d520:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		/* Get identity address */
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
    d524:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
	if (rl_idx != FILTER_IDX_NONE) {
    d528:	d05b      	beq.n	d5e2 <ull_periph_setup+0xf2>
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
    d52a:	465a      	mov	r2, fp
    d52c:	f10d 0147 	add.w	r1, sp, #71	; 0x47
    d530:	4648      	mov	r0, r9
    d532:	f011 fc01 	bl	1ed38 <ll_rl_id_addr_get>
		/* Mark it as identity address from RPA (0x02, 0x03) */
		peer_addr_type += 2;
    d536:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    d53a:	3302      	adds	r3, #2
    d53c:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	}

	/* Use the link stored in the node rx to enqueue connection
	 * complete node rx towards LL context.
	 */
	link = rx->link;
    d540:	4629      	mov	r1, r5
	conn->own_id_addr_type = own_id_addr_type;
	(void)memcpy(conn->own_id_addr, own_id_addr,
		     sizeof(conn->own_id_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    d542:	2203      	movs	r2, #3
	link = rx->link;
    d544:	f851 6b2e 	ldr.w	r6, [r1], #46
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    d548:	f107 0008 	add.w	r0, r7, #8
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    d54c:	f107 0a04 	add.w	sl, r7, #4
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    d550:	f01b fef9 	bl	29346 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    d554:	f107 0318 	add.w	r3, r7, #24
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    d558:	2204      	movs	r2, #4
    d55a:	f105 012a 	add.w	r1, r5, #42	; 0x2a
    d55e:	4650      	mov	r0, sl
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    d560:	930b      	str	r3, [sp, #44]	; 0x2c
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    d562:	f01b fef0 	bl	29346 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    d566:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d568:	2205      	movs	r2, #5
    d56a:	f105 013a 	add.w	r1, r5, #58	; 0x3a
    d56e:	4618      	mov	r0, r3
    d570:	f01b fee9 	bl	29346 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    d574:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d576:	2105      	movs	r1, #5
    d578:	4618      	mov	r0, r3
    d57a:	f008 f809 	bl	15590 <util_ones_count_get>
    d57e:	7f7b      	ldrb	r3, [r7, #29]
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    d580:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    d584:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d588:	f360 0305 	bfi	r3, r0, #0, #6
    d58c:	777b      	strb	r3, [r7, #29]
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    d58e:	f3c2 0304 	ubfx	r3, r2, #0, #5
    d592:	77bb      	strb	r3, [r7, #30]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    d594:	8eab      	ldrh	r3, [r5, #52]	; 0x34
    d596:	81fb      	strh	r3, [r7, #14]
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
    d598:	2801      	cmp	r0, #1
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    d59a:	b299      	uxth	r1, r3
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    d59c:	f002 031f 	and.w	r3, r2, #31
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
    d5a0:	d905      	bls.n	d5ae <ull_periph_setup+0xbe>
    d5a2:	331b      	adds	r3, #27
    d5a4:	f003 031f 	and.w	r3, r3, #31
    d5a8:	2b0b      	cmp	r3, #11
    d5aa:	d800      	bhi.n	d5ae <ull_periph_setup+0xbe>
	    (lll->data_chan_hop < CHM_HOP_COUNT_MIN) ||
	    (lll->data_chan_hop > CHM_HOP_COUNT_MAX) ||
    d5ac:	b9f9      	cbnz	r1, d5ee <ull_periph_setup+0xfe>

static void invalid_release(struct ull_hdr *hdr, struct lll_conn *lll,
			    memq_link_t *link, struct node_rx_hdr *rx)
{
	/* Reset the advertising disabled callback */
	hdr->disabled_cb = NULL;
    d5ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		struct node_rx_pdu *rx_csa;

		/* pick the rx node instance stored within the
		 * connection rx node.
		 */
		rx_csa = rx->rx_ftr.extra;
    d5b0:	68ec      	ldr	r4, [r5, #12]
	hdr->disabled_cb = NULL;
    d5b2:	2200      	movs	r2, #0
    d5b4:	615a      	str	r2, [r3, #20]
	lll->periph.initiated = 0U;
    d5b6:	f897 3020 	ldrb.w	r3, [r7, #32]

		/* Enqueue the connection event to be release */
		ll_rx_put(link, rx);
    d5ba:	4630      	mov	r0, r6
	lll->periph.initiated = 0U;
    d5bc:	f362 0300 	bfi	r3, r2, #0, #1
	rx->type = NODE_RX_TYPE_RELEASE;
    d5c0:	2601      	movs	r6, #1
	lll->periph.initiated = 0U;
    d5c2:	f887 3020 	strb.w	r3, [r7, #32]
		ll_rx_put(link, rx);
    d5c6:	4629      	mov	r1, r5
	rx->type = NODE_RX_TYPE_RELEASE;
    d5c8:	712e      	strb	r6, [r5, #4]
		ll_rx_put(link, rx);
    d5ca:	f00b f945 	bl	18858 <ll_rx_put>
		/* Mark for buffer for release */
		rx->type = NODE_RX_TYPE_RELEASE;
	}

	/* Enqueue connection or CSA event to be release */
	ll_rx_put(link, rx);
    d5ce:	6820      	ldr	r0, [r4, #0]
		rx->type = NODE_RX_TYPE_RELEASE;
    d5d0:	7126      	strb	r6, [r4, #4]
	ll_rx_put(link, rx);
    d5d2:	4621      	mov	r1, r4
    d5d4:	f00b f940 	bl	18858 <ll_rx_put>
	ll_rx_sched();
    d5d8:	f00b f948 	bl	1886c <ll_rx_sched>
}
    d5dc:	b017      	add	sp, #92	; 0x5c
    d5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
    d5e2:	2206      	movs	r2, #6
    d5e4:	a914      	add	r1, sp, #80	; 0x50
    d5e6:	4658      	mov	r0, fp
    d5e8:	f01b fead 	bl	29346 <memcpy>
    d5ec:	e7a8      	b.n	d540 <ull_periph_setup+0x50>
	((struct lll_adv *)ftr->param)->conn = NULL;
    d5ee:	6823      	ldr	r3, [r4, #0]
    d5f0:	2000      	movs	r0, #0
    d5f2:	6058      	str	r0, [r3, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    d5f4:	f895 0037 	ldrb.w	r0, [r5, #55]	; 0x37
    d5f8:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
    d5fc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    d600:	823b      	strh	r3, [r7, #16]
	conn->periph.sca = pdu_adv->connect_ind.sca;
    d602:	f898 30d8 	ldrb.w	r3, [r8, #216]	; 0xd8
    d606:	0952      	lsrs	r2, r2, #5
    d608:	f362 03c5 	bfi	r3, r2, #3, #3
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    d60c:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
    d60e:	920d      	str	r2, [sp, #52]	; 0x34
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    d610:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d614:	fb02 f001 	mul.w	r0, r2, r1
	conn->periph.sca = pdu_adv->connect_ind.sca;
    d618:	f888 30d8 	strb.w	r3, [r8, #216]	; 0xd8
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    d61c:	900b      	str	r0, [sp, #44]	; 0x2c
		ceiling_fraction(((lll_clock_ppm_local_get() +
    d61e:	f012 ff7f 	bl	20520 <lll_clock_ppm_local_get>
    d622:	900c      	str	r0, [sp, #48]	; 0x30
    d624:	f898 00d8 	ldrb.w	r0, [r8, #216]	; 0xd8
    d628:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    d62c:	f012 ff7a 	bl	20524 <lll_clock_ppm_get>
    d630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d632:	49c5      	ldr	r1, [pc, #788]	; (d948 <ull_periph_setup+0x458>)
    d634:	4403      	add	r3, r0
    d636:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d638:	fb00 f303 	mul.w	r3, r0, r3
    d63c:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    d640:	f203 233f 	addw	r3, r3, #575	; 0x23f
    d644:	fba1 2303 	umull	r2, r3, r1, r3
    d648:	0c9b      	lsrs	r3, r3, #18
	lll->periph.window_widening_periodic_us =
    d64a:	627b      	str	r3, [r7, #36]	; 0x24
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    d64c:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    d650:	8a39      	ldrh	r1, [r7, #16]
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    d652:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d656:	fb03 f202 	mul.w	r2, r3, r2
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
    d65a:	0843      	lsrs	r3, r0, #1
    d65c:	3b96      	subs	r3, #150	; 0x96
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    d65e:	63ba      	str	r2, [r7, #56]	; 0x38
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
    d660:	62bb      	str	r3, [r7, #40]	; 0x28
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    d662:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    d664:	4ab9      	ldr	r2, [pc, #740]	; (d94c <ull_periph_setup+0x45c>)
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    d666:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    d66a:	469e      	mov	lr, r3
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    d66c:	4bb8      	ldr	r3, [pc, #736]	; (d950 <ull_periph_setup+0x460>)
    d66e:	4684      	mov	ip, r0
    d670:	4403      	add	r3, r0
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    d672:	4402      	add	r2, r0
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    d674:	fbb3 f3f0 	udiv	r3, r3, r0
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    d678:	fbb2 f2f0 	udiv	r2, r2, r0
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    d67c:	f242 7010 	movw	r0, #10000	; 0x2710
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    d680:	f8a8 20c6 	strh.w	r2, [r8, #198]	; 0xc6
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    d684:	fa1f f28e 	uxth.w	r2, lr
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    d688:	fb00 c202 	mla	r2, r0, r2, ip
    d68c:	3a01      	subs	r2, #1
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    d68e:	1d88      	adds	r0, r1, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    d690:	fbb2 f2fc 	udiv	r2, r2, ip
    d694:	f8a8 20c2 	strh.w	r2, [r8, #194]	; 0xc2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    d698:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    d69a:	4282      	cmp	r2, r0
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    d69c:	f8a8 20ce 	strh.w	r2, [r8, #206]	; 0xce
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    d6a0:	dd04      	ble.n	d6ac <ull_periph_setup+0x1bc>
    d6a2:	f5c1 417f 	rsb	r1, r1, #65280	; 0xff00
    d6a6:	31fa      	adds	r1, #250	; 0xfa
    d6a8:	440a      	add	r2, r1
    d6aa:	b292      	uxth	r2, r2
    d6ac:	f8a8 20ca 	strh.w	r2, [r8, #202]	; 0xca
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
    d6b0:	4651      	mov	r1, sl
    d6b2:	2204      	movs	r2, #4
    d6b4:	f108 00dc 	add.w	r0, r8, #220	; 0xdc
    d6b8:	f01b fe45 	bl	29346 <memcpy>
		chan_sel = pdu_adv->chan_sel;
    d6bc:	462b      	mov	r3, r5
    d6be:	f813 2f1c 	ldrb.w	r2, [r3, #28]!
    d6c2:	f3c2 1140 	ubfx	r1, r2, #5, #1
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    d6c6:	07da      	lsls	r2, r3, #31
		chan_sel = pdu_adv->chan_sel;
    d6c8:	910f      	str	r1, [sp, #60]	; 0x3c
    d6ca:	910c      	str	r1, [sp, #48]	; 0x30
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    d6cc:	f100 8115 	bmi.w	d8fa <ull_periph_setup+0x40a>
	cc->status = 0U;
    d6d0:	f44f 7380 	mov.w	r3, #256	; 0x100
    d6d4:	83ab      	strh	r3, [r5, #28]
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    d6d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d6d8:	f893 0026 	ldrb.w	r0, [r3, #38]	; 0x26
    d6dc:	f012 f8a4 	bl	1f828 <ull_filter_lll_lrpa_used>
    d6e0:	4601      	mov	r1, r0
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    d6e2:	2206      	movs	r2, #6
    d6e4:	f105 002b 	add.w	r0, r5, #43	; 0x2b
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    d6e8:	2900      	cmp	r1, #0
    d6ea:	f000 80eb 	beq.w	d8c4 <ull_periph_setup+0x3d4>
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    d6ee:	f105 0124 	add.w	r1, r5, #36	; 0x24
    d6f2:	f01b fe28 	bl	29346 <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
    d6f6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		memcpy(cc->peer_rpa, peer_addr, BDADDR_SIZE);
    d6fa:	f105 0025 	add.w	r0, r5, #37	; 0x25
	if (rl_idx != FILTER_IDX_NONE) {
    d6fe:	f000 80e4 	beq.w	d8ca <ull_periph_setup+0x3da>
		memcpy(cc->peer_rpa, peer_addr, BDADDR_SIZE);
    d702:	a914      	add	r1, sp, #80	; 0x50
    d704:	2206      	movs	r2, #6
    d706:	f01b fe1e 	bl	29346 <memcpy>
	cc->peer_addr_type = peer_addr_type;
    d70a:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    d70e:	77ab      	strb	r3, [r5, #30]
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
    d710:	4659      	mov	r1, fp
    d712:	2206      	movs	r2, #6
    d714:	f105 001f 	add.w	r0, r5, #31
    d718:	f01b fe15 	bl	29346 <memcpy>
	cc->sca = conn->periph.sca;
    d71c:	f898 30d8 	ldrb.w	r3, [r8, #216]	; 0xd8
	cc->interval = lll->interval;
    d720:	89fa      	ldrh	r2, [r7, #14]
    d722:	866a      	strh	r2, [r5, #50]	; 0x32
	cc->latency = lll->latency;
    d724:	8a3a      	ldrh	r2, [r7, #16]
    d726:	86aa      	strh	r2, [r5, #52]	; 0x34
	cc->sca = conn->periph.sca;
    d728:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	cc->timeout = timeout;
    d72c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
	cc->sca = conn->periph.sca;
    d730:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	cc->timeout = timeout;
    d734:	86ea      	strh	r2, [r5, #54]	; 0x36
	lll->handle = ll_conn_handle_get(conn);
    d736:	4640      	mov	r0, r8
    d738:	f00d f8bc 	bl	1a8b4 <ll_conn_handle_get>
		ll_rx_put(link, rx);
    d73c:	4629      	mov	r1, r5
	lll->handle = ll_conn_handle_get(conn);
    d73e:	81b8      	strh	r0, [r7, #12]
	rx->handle = lll->handle;
    d740:	80e8      	strh	r0, [r5, #6]
		rx_csa = (void *)ftr->extra;
    d742:	6865      	ldr	r5, [r4, #4]
		ll_rx_put(link, rx);
    d744:	4630      	mov	r0, r6
    d746:	f00b f887 	bl	18858 <ll_rx_put>
		rx->handle = lll->handle;
    d74a:	89bb      	ldrh	r3, [r7, #12]
    d74c:	80eb      	strh	r3, [r5, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    d74e:	231c      	movs	r3, #28
    d750:	712b      	strb	r3, [r5, #4]
		if (chan_sel) {
    d752:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		link = rx->link;
    d754:	682e      	ldr	r6, [r5, #0]
		if (chan_sel) {
    d756:	2b00      	cmp	r3, #0
    d758:	f040 80bc 	bne.w	d8d4 <ull_periph_setup+0x3e4>
			cs->csa = 0x00;
    d75c:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    d760:	772b      	strb	r3, [r5, #28]
	ll_rx_put(link, rx);
    d762:	4629      	mov	r1, r5
    d764:	4630      	mov	r0, r6
    d766:	f00b f877 	bl	18858 <ll_rx_put>
	ll_rx_sched();
    d76a:	f00b f87f 	bl	1886c <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    d76e:	f897 0045 	ldrb.w	r0, [r7, #69]	; 0x45
	max_tx_time = lll->max_tx_time;
    d772:	f8b7 5040 	ldrh.w	r5, [r7, #64]	; 0x40
	max_rx_time = lll->max_rx_time;
    d776:	f8b7 6042 	ldrh.w	r6, [r7, #66]	; 0x42
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    d77a:	2101      	movs	r1, #1
    d77c:	f000 0007 	and.w	r0, r0, #7
    d780:	f012 fcde 	bl	20140 <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    d784:	442e      	add	r6, r5
    d786:	f506 76e1 	add.w	r6, r6, #450	; 0x1c2
    d78a:	1831      	adds	r1, r6, r0
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    d78c:	4682      	mov	sl, r0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    d78e:	4871      	ldr	r0, [pc, #452]	; (d954 <ull_periph_setup+0x464>)
	conn->ull.ticks_active_to_start = 0U;
    d790:	f04f 0900 	mov.w	r9, #0
	conn->ull.ticks_prepare_to_start =
    d794:	2331      	movs	r3, #49	; 0x31
    d796:	f8c8 3008 	str.w	r3, [r8, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    d79a:	fba1 0100 	umull	r0, r1, r1, r0
    d79e:	a368      	add	r3, pc, #416	; (adr r3, d940 <ull_periph_setup+0x450>)
    d7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
	conn->ull.ticks_active_to_start = 0U;
    d7a4:	f8c8 9004 	str.w	r9, [r8, #4]
	conn->ull.ticks_preempt_to_start =
    d7a8:	f8c8 900c 	str.w	r9, [r8, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    d7ac:	f7fe fda8 	bl	c300 <__aeabi_uldivmod>
	conn_interval_us -= lll->periph.window_widening_periodic_us;
    d7b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d7b2:	6a7e      	ldr	r6, [r7, #36]	; 0x24
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    d7b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	conn_offset_us = ftr->radio_end_us;
    d7b6:	68e5      	ldr	r5, [r4, #12]
	conn_interval_us -= lll->periph.window_widening_periodic_us;
    d7b8:	1b9e      	subs	r6, r3, r6
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    d7ba:	f240 43e2 	movw	r3, #1250	; 0x4e2
    d7be:	fb03 5502 	mla	r5, r3, r2, r5
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    d7c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us -= EVENT_JITTER_US;
    d7c6:	f205 45b2 	addw	r5, r5, #1202	; 0x4b2
	conn_offset_us -= ready_delay_us;
    d7ca:	eba5 030a 	sub.w	r3, r5, sl
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    d7ce:	464a      	mov	r2, r9
    d7d0:	2102      	movs	r1, #2
	conn->ull.ticks_slot =
    d7d2:	f8c8 0010 	str.w	r0, [r8, #16]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    d7d6:	2001      	movs	r0, #1
	conn_offset_us -= ready_delay_us;
    d7d8:	930b      	str	r3, [sp, #44]	; 0x2c
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    d7da:	f007 fda9 	bl	15330 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    d7de:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    d7e0:	4628      	mov	r0, r5
    d7e2:	f00c f929 	bl	19a38 <ull_adv_handle_get>
    d7e6:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    d7e8:	4b5b      	ldr	r3, [pc, #364]	; (d958 <ull_periph_setup+0x468>)
    d7ea:	9500      	str	r5, [sp, #0]
    d7ec:	b2d2      	uxtb	r2, r2
    d7ee:	4648      	mov	r0, r9
    d7f0:	2101      	movs	r1, #1
    d7f2:	f008 ffa7 	bl	16744 <ticker_stop>
}

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    d7f6:	2801      	cmp	r0, #1
    d7f8:	f000 808c 	beq.w	d914 <ull_periph_setup+0x424>
	if (adv->lll.is_hdcd) {
    d7fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d7fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    d802:	07db      	lsls	r3, r3, #31
    d804:	d471      	bmi.n	d8ea <ull_periph_setup+0x3fa>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    d806:	4640      	mov	r0, r8
    d808:	f00d f854 	bl	1a8b4 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    d80c:	f8df 9144 	ldr.w	r9, [pc, #324]	; d954 <ull_periph_setup+0x464>
    d810:	fba6 5609 	umull	r5, r6, r6, r9
    d814:	a34a      	add	r3, pc, #296	; (adr r3, d940 <ull_periph_setup+0x450>)
    d816:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    d81a:	4683      	mov	fp, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    d81c:	4631      	mov	r1, r6
    d81e:	4628      	mov	r0, r5
    d820:	f7fe fd6e 	bl	c300 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    d824:	68a3      	ldr	r3, [r4, #8]
    d826:	f8cd 8018 	str.w	r8, [sp, #24]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    d82a:	f10b 0403 	add.w	r4, fp, #3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    d82e:	f1a3 0b3a 	sub.w	fp, r3, #58	; 0x3a
    d832:	4b4a      	ldr	r3, [pc, #296]	; (d95c <ull_periph_setup+0x46c>)
    d834:	9307      	str	r3, [sp, #28]
    d836:	4b4a      	ldr	r3, [pc, #296]	; (d960 <ull_periph_setup+0x470>)
    d838:	9305      	str	r3, [sp, #20]
    d83a:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    d83e:	9308      	str	r3, [sp, #32]
    d840:	f8d8 3010 	ldr.w	r3, [r8, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    d844:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
    d848:	4846      	ldr	r0, [pc, #280]	; (d964 <ull_periph_setup+0x474>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    d84a:	f04f 0a00 	mov.w	sl, #0
    d84e:	e9cd a303 	strd	sl, r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    d852:	fba7 0100 	umull	r0, r1, r7, r0
    d856:	2307      	movs	r3, #7
    d858:	1a28      	subs	r0, r5, r0
    d85a:	fb03 1107 	mla	r1, r3, r7, r1
    d85e:	eb66 0101 	sbc.w	r1, r6, r1
    d862:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d866:	2300      	movs	r3, #0
    d868:	f7fe fd4a 	bl	c300 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    d86c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    d86e:	e9cd 7001 	strd	r7, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    d872:	fba3 0109 	umull	r0, r1, r3, r9
    d876:	a332      	add	r3, pc, #200	; (adr r3, d940 <ull_periph_setup+0x450>)
    d878:	e9d3 2300 	ldrd	r2, r3, [r3]
    d87c:	f7fe fd40 	bl	c300 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    d880:	b2e4      	uxtb	r4, r4
    d882:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d886:	9000      	str	r0, [sp, #0]
    d888:	465b      	mov	r3, fp
    d88a:	4622      	mov	r2, r4
    d88c:	2101      	movs	r1, #1
    d88e:	4650      	mov	r0, sl
    d890:	f008 fece 	bl	16630 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d894:	f030 0302 	bics.w	r3, r0, #2
    d898:	d00c      	beq.n	d8b4 <ull_periph_setup+0x3c4>
    d89a:	4a33      	ldr	r2, [pc, #204]	; (d968 <ull_periph_setup+0x478>)
    d89c:	4933      	ldr	r1, [pc, #204]	; (d96c <ull_periph_setup+0x47c>)
    d89e:	4834      	ldr	r0, [pc, #208]	; (d970 <ull_periph_setup+0x480>)
    d8a0:	f240 13c9 	movw	r3, #457	; 0x1c9
    d8a4:	f019 fe46 	bl	27534 <assert_print>
    d8a8:	4040      	eors	r0, r0
    d8aa:	f380 8811 	msr	BASEPRI, r0
    d8ae:	f04f 0003 	mov.w	r0, #3
    d8b2:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    d8b4:	2201      	movs	r2, #1
    d8b6:	2102      	movs	r1, #2
    d8b8:	4610      	mov	r0, r2
    d8ba:	f007 fd39 	bl	15330 <mayfly_enable>
}
    d8be:	b017      	add	sp, #92	; 0x5c
    d8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
    d8c4:	f01b fd4a 	bl	2935c <memset>
    d8c8:	e715      	b.n	d6f6 <ull_periph_setup+0x206>
		memset(cc->peer_rpa, 0x0, BDADDR_SIZE);
    d8ca:	2206      	movs	r2, #6
    d8cc:	2100      	movs	r1, #0
    d8ce:	f01b fd45 	bl	2935c <memset>
    d8d2:	e71a      	b.n	d70a <ull_periph_setup+0x21a>
			lll->data_chan_sel = 1;
    d8d4:	7f7b      	ldrb	r3, [r7, #29]
    d8d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d8da:	777b      	strb	r3, [r7, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    d8dc:	4650      	mov	r0, sl
    d8de:	f011 f837 	bl	1e950 <lll_chan_id>
			cs->csa = 0x01;
    d8e2:	2301      	movs	r3, #1
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    d8e4:	83f8      	strh	r0, [r7, #30]
			cs->csa = 0x01;
    d8e6:	772b      	strb	r3, [r5, #28]
    d8e8:	e73b      	b.n	d762 <ull_periph_setup+0x272>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    d8ea:	2300      	movs	r3, #0
    d8ec:	2201      	movs	r2, #1
    d8ee:	9300      	str	r3, [sp, #0]
    d8f0:	4618      	mov	r0, r3
    d8f2:	4611      	mov	r1, r2
    d8f4:	f008 ff26 	bl	16744 <ticker_stop>
    d8f8:	e785      	b.n	d806 <ull_periph_setup+0x316>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    d8fa:	4a1b      	ldr	r2, [pc, #108]	; (d968 <ull_periph_setup+0x478>)
    d8fc:	491d      	ldr	r1, [pc, #116]	; (d974 <ull_periph_setup+0x484>)
    d8fe:	481c      	ldr	r0, [pc, #112]	; (d970 <ull_periph_setup+0x480>)
    d900:	23f1      	movs	r3, #241	; 0xf1
    d902:	f019 fe17 	bl	27534 <assert_print>
    d906:	4040      	eors	r0, r0
    d908:	f380 8811 	msr	BASEPRI, r0
    d90c:	f04f 0003 	mov.w	r0, #3
    d910:	df02      	svc	2
    d912:	e6dd      	b.n	d6d0 <ull_periph_setup+0x1e0>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    d914:	f00b f87e 	bl	18a14 <ull_disable_mark_get>
    d918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d91a:	4283      	cmp	r3, r0
    d91c:	f43f af6e 	beq.w	d7fc <ull_periph_setup+0x30c>
    d920:	4a11      	ldr	r2, [pc, #68]	; (d968 <ull_periph_setup+0x478>)
    d922:	4915      	ldr	r1, [pc, #84]	; (d978 <ull_periph_setup+0x488>)
    d924:	4812      	ldr	r0, [pc, #72]	; (d970 <ull_periph_setup+0x480>)
    d926:	f240 239f 	movw	r3, #671	; 0x29f
    d92a:	f019 fe03 	bl	27534 <assert_print>
    d92e:	4040      	eors	r0, r0
    d930:	f380 8811 	msr	BASEPRI, r0
    d934:	f04f 0003 	mov.w	r0, #3
    d938:	df02      	svc	2
		  param == ull_disable_mark_get());
}
    d93a:	e75f      	b.n	d7fc <ull_periph_setup+0x30c>
    d93c:	f3af 8000 	nop.w
    d940:	1afd498d 	.word	0x1afd498d
    d944:	00000007 	.word	0x00000007
    d948:	431bde83 	.word	0x431bde83
    d94c:	026259ff 	.word	0x026259ff
    d950:	01c9c37f 	.word	0x01c9c37f
    d954:	3b9aca00 	.word	0x3b9aca00
    d958:	0001e6d9 	.word	0x0001e6d9
    d95c:	0001e6a9 	.word	0x0001e6a9
    d960:	0001e715 	.word	0x0001e715
    d964:	1afd498d 	.word	0x1afd498d
    d968:	0002ff44 	.word	0x0002ff44
    d96c:	0002fe30 	.word	0x0002fe30
    d970:	0002f8a0 	.word	0x0002f8a0
    d974:	0002f98c 	.word	0x0002f98c
    d978:	0002ffa0 	.word	0x0002ffa0
    d97c:	00000000 	.word	0x00000000

0000d980 <nrf_flash_sync_exe>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
	_ticker_sync_context.slot = duration;
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
    d980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d984:	b08f      	sub	sp, #60	; 0x3c
			      /* (MAYFLY_CALL_ID_PROGRAM) */
			   ticker_id, /* flash ticker id */
			   ticker_ticks_now_get(), /* current tick */
			   0, /* first int. immediately */
			   /* period */
			   HAL_TICKER_US_TO_TICKS(
    d986:	f8df 80d8 	ldr.w	r8, [pc, #216]	; da60 <nrf_flash_sync_exe+0xe0>
{
    d98a:	900a      	str	r0, [sp, #40]	; 0x28
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    d98c:	f10d 0137 	add.w	r1, sp, #55	; 0x37
    d990:	f10d 0036 	add.w	r0, sp, #54	; 0x36
    d994:	f00a ffda 	bl	1894c <ll_timeslice_ticker_id_get>
			   HAL_TICKER_US_TO_TICKS(
    d998:	4f32      	ldr	r7, [pc, #200]	; (da64 <nrf_flash_sync_exe+0xe4>)
	err = ticker_start(instance_index,
    d99a:	f89d a036 	ldrb.w	sl, [sp, #54]	; 0x36
    d99e:	f89d b037 	ldrb.w	fp, [sp, #55]	; 0x37
    d9a2:	f008 ff11 	bl	167c8 <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(
    d9a6:	f8d8 4000 	ldr.w	r4, [r8]
    d9aa:	fba4 5407 	umull	r5, r4, r4, r7
    d9ae:	a32a      	add	r3, pc, #168	; (adr r3, da58 <nrf_flash_sync_exe+0xd8>)
    d9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
	err = ticker_start(instance_index,
    d9b4:	4681      	mov	r9, r0
			   HAL_TICKER_US_TO_TICKS(
    d9b6:	4621      	mov	r1, r4
    d9b8:	4628      	mov	r0, r5
    d9ba:	f7fe fca1 	bl	c300 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    d9be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			   HAL_TICKER_US_TO_TICKS(
    d9c0:	900b      	str	r0, [sp, #44]	; 0x2c
				_ticker_sync_context.interval),
			   /* period remainder */
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
			   0, /* lazy, voluntary skips */
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    d9c2:	f8d8 0004 	ldr.w	r0, [r8, #4]
	err = ticker_start(instance_index,
    d9c6:	9306      	str	r3, [sp, #24]
    d9c8:	4b27      	ldr	r3, [pc, #156]	; (da68 <nrf_flash_sync_exe+0xe8>)
    d9ca:	9305      	str	r3, [sp, #20]
    d9cc:	2600      	movs	r6, #0
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    d9ce:	a322      	add	r3, pc, #136	; (adr r3, da58 <nrf_flash_sync_exe+0xd8>)
    d9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
    d9d4:	fba0 0107 	umull	r0, r1, r0, r7
	err = ticker_start(instance_index,
    d9d8:	e9cd 6607 	strd	r6, r6, [sp, #28]
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    d9dc:	f7fe fc90 	bl	c300 <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    d9e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	err = ticker_start(instance_index,
    d9e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d9e6:	e9cd 6003 	strd	r6, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    d9ea:	4820      	ldr	r0, [pc, #128]	; (da6c <nrf_flash_sync_exe+0xec>)
    d9ec:	f023 477f 	bic.w	r7, r3, #4278190080	; 0xff000000
    d9f0:	fba7 0100 	umull	r0, r1, r7, r0
    d9f4:	2307      	movs	r3, #7
    d9f6:	1a28      	subs	r0, r5, r0
    d9f8:	fb03 1107 	mla	r1, r3, r7, r1
    d9fc:	eb64 0101 	sbc.w	r1, r4, r1
    da00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    da04:	2300      	movs	r3, #0
    da06:	f7fe fc7b 	bl	c300 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    da0a:	9600      	str	r6, [sp, #0]
    da0c:	e9cd 7001 	strd	r7, r0, [sp, #4]
    da10:	464b      	mov	r3, r9
    da12:	465a      	mov	r2, fp
    da14:	2103      	movs	r1, #3
    da16:	4650      	mov	r0, sl
    da18:	f008 fe0a 	bl	16630 <ticker_start>
			   time_slot_callback_prepare,
			   op_desc,
			   NULL, /* no op callback */
			   NULL);

	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
    da1c:	f030 0402 	bics.w	r4, r0, #2
    da20:	d116      	bne.n	da50 <nrf_flash_sync_exe+0xd0>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    da22:	4a13      	ldr	r2, [pc, #76]	; (da70 <nrf_flash_sync_exe+0xf0>)
    da24:	4813      	ldr	r0, [pc, #76]	; (da74 <nrf_flash_sync_exe+0xf4>)
    da26:	2300      	movs	r3, #0
    da28:	f018 f9cc 	bl	25dc4 <z_impl_k_sem_take>
		result = -ECANCELED;
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
    da2c:	b168      	cbz	r0, da4a <nrf_flash_sync_exe+0xca>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
    da2e:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    da32:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    da36:	9400      	str	r4, [sp, #0]
    da38:	4623      	mov	r3, r4
    da3a:	2103      	movs	r1, #3
    da3c:	f008 fe82 	bl	16744 <ticker_stop>
		/* Stop any scheduled jobs */
		_ticker_stop(instance_index, 3, ticker_id);

		/* wait for operation's complete overrun*/
		result = -ETIMEDOUT;
    da40:	f06f 0073 	mvn.w	r0, #115	; 0x73
	} else {
		result = _ticker_sync_context.result;
	}

	return result;
}
    da44:	b00f      	add	sp, #60	; 0x3c
    da46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = _ticker_sync_context.result;
    da4a:	f8d8 000c 	ldr.w	r0, [r8, #12]
    da4e:	e7f9      	b.n	da44 <nrf_flash_sync_exe+0xc4>
		result = -ECANCELED;
    da50:	f06f 008b 	mvn.w	r0, #139	; 0x8b
	return result;
    da54:	e7f6      	b.n	da44 <nrf_flash_sync_exe+0xc4>
    da56:	bf00      	nop
    da58:	1afd498d 	.word	0x1afd498d
    da5c:	00000007 	.word	0x00000007
    da60:	20002b3c 	.word	0x20002b3c
    da64:	3b9aca00 	.word	0x3b9aca00
    da68:	00023ecd 	.word	0x00023ecd
    da6c:	1afd498d 	.word	0x1afd498d
    da70:	000b7b44 	.word	0x000b7b44
    da74:	20002b4c 	.word	0x20002b4c

0000da78 <nrf_flash_sync_check_time_limit>:
{
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
    da78:	b538      	push	{r3, r4, r5, lr}
	uint32_t ticks_diff;

	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    da7a:	4d0f      	ldr	r5, [pc, #60]	; (dab8 <nrf_flash_sync_check_time_limit+0x40>)
{
    da7c:	4604      	mov	r4, r0
	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    da7e:	f008 fea3 	bl	167c8 <ticker_ticks_now_get>
    da82:	68a9      	ldr	r1, [r5, #8]
    da84:	f008 fea2 	bl	167cc <ticker_ticks_diff_get>
					   _ticker_sync_context.ticks_begin);
	if (ticks_diff + ticks_diff/iteration >
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    da88:	6869      	ldr	r1, [r5, #4]
	if (ticks_diff + ticks_diff/iteration >
    da8a:	fbb0 f4f4 	udiv	r4, r0, r4
    da8e:	4404      	add	r4, r0
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    da90:	480a      	ldr	r0, [pc, #40]	; (dabc <nrf_flash_sync_check_time_limit+0x44>)
    da92:	a307      	add	r3, pc, #28	; (adr r3, dab0 <nrf_flash_sync_check_time_limit+0x38>)
    da94:	e9d3 2300 	ldrd	r2, r3, [r3]
    da98:	fba1 0100 	umull	r0, r1, r1, r0
    da9c:	f7fe fc30 	bl	c300 <__aeabi_uldivmod>
    daa0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return true;
	}

	return false;
}
    daa4:	4284      	cmp	r4, r0
    daa6:	bf94      	ite	ls
    daa8:	2000      	movls	r0, #0
    daaa:	2001      	movhi	r0, #1
    daac:	bd38      	pop	{r3, r4, r5, pc}
    daae:	bf00      	nop
    dab0:	1afd498d 	.word	0x1afd498d
    dab4:	00000007 	.word	0x00000007
    dab8:	20002b3c 	.word	0x20002b3c
    dabc:	3b9aca00 	.word	0x3b9aca00

0000dac0 <disconnected>:
	printk("Connected\n");
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
	printk("Disconnected (reason %u)\n", reason);
    dac0:	4801      	ldr	r0, [pc, #4]	; (dac8 <disconnected+0x8>)
    dac2:	f019 ba21 	b.w	26f08 <printk>
    dac6:	bf00      	nop
    dac8:	000307bc 	.word	0x000307bc

0000dacc <connected>:
	if (err) {
    dacc:	b111      	cbz	r1, dad4 <connected+0x8>
		printk("Connection failed (err %u)\n", err);
    dace:	4803      	ldr	r0, [pc, #12]	; (dadc <connected+0x10>)
    dad0:	f019 ba1a 	b.w	26f08 <printk>
	printk("Connected\n");
    dad4:	4802      	ldr	r0, [pc, #8]	; (dae0 <connected+0x14>)
    dad6:	f019 ba17 	b.w	26f08 <printk>
    dada:	bf00      	nop
    dadc:	000307d6 	.word	0x000307d6
    dae0:	000307f2 	.word	0x000307f2

0000dae4 <main>:

	return err;
}
*/
void main(void)
{
    dae4:	b530      	push	{r4, r5, lr}
	int err;

	printk("Starting Bluetooth Peripheral LBS example\n");
    dae6:	4822      	ldr	r0, [pc, #136]	; (db70 <main+0x8c>)
{
    dae8:	b089      	sub	sp, #36	; 0x24
	printk("Starting Bluetooth Peripheral LBS example\n");
    daea:	f019 fa0d 	bl	26f08 <printk>
	err = init_button();
	if (err) {
		printk("Button init failed (err %d)\n", err);
		return;
	}*/
	printk("build time: " __DATE__ " " __TIME__ "\n");
    daee:	4821      	ldr	r0, [pc, #132]	; (db74 <main+0x90>)
    daf0:	f019 fa0a 	bl	26f08 <printk>
	os_mgmt_register_group();
    daf4:	f015 fbbe 	bl	23274 <os_mgmt_register_group>
	img_mgmt_register_group();
    daf8:	f015 fa4a 	bl	22f90 <img_mgmt_register_group>
	smp_bt_register();	
    dafc:	f014 ff3e 	bl	2297c <smp_bt_register>

	bt_conn_cb_register(&conn_callbacks);
    db00:	481d      	ldr	r0, [pc, #116]	; (db78 <main+0x94>)
    db02:	f004 f9b5 	bl	11e70 <bt_conn_cb_register>
	if (IS_ENABLED(CONFIG_BT_LBS_SECURITY_ENABLED)) {
		bt_conn_auth_cb_register(&conn_auth_callbacks);
    db06:	481d      	ldr	r0, [pc, #116]	; (db7c <main+0x98>)
    db08:	f004 fb4c 	bl	121a4 <bt_conn_auth_cb_register>
	}

	err = bt_enable(NULL);
    db0c:	2000      	movs	r0, #0
    db0e:	f002 ffe7 	bl	10ae0 <bt_enable>
	if (err) {
    db12:	4601      	mov	r1, r0
    db14:	b128      	cbz	r0, db22 <main+0x3e>
		printk("Bluetooth init failed (err %d)\n", err);
    db16:	481a      	ldr	r0, [pc, #104]	; (db80 <main+0x9c>)
	for (;;) {
		printk("Ping\n");
	//	dk_set_led(RUN_STATUS_LED, (++blink_status) % 2);
		k_sleep(K_MSEC(1000));
	}
}
    db18:	b009      	add	sp, #36	; 0x24
    db1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		printk("Bluetooth init failed (err %d)\n", err);
    db1e:	f019 b9f3 	b.w	26f08 <printk>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
    db22:	4d18      	ldr	r5, [pc, #96]	; (db84 <main+0xa0>)
	printk("Bluetooth initialized\n");
    db24:	4818      	ldr	r0, [pc, #96]	; (db88 <main+0xa4>)
    db26:	f019 f9ef 	bl	26f08 <printk>
		settings_load();
    db2a:	f01a f907 	bl	27d3c <settings_load>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
    db2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    db30:	ac03      	add	r4, sp, #12
    db32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    db34:	682b      	ldr	r3, [r5, #0]
    db36:	6023      	str	r3, [r4, #0]
    db38:	2301      	movs	r3, #1
    db3a:	4914      	ldr	r1, [pc, #80]	; (db8c <main+0xa8>)
    db3c:	9300      	str	r3, [sp, #0]
    db3e:	2202      	movs	r2, #2
    db40:	4b13      	ldr	r3, [pc, #76]	; (db90 <main+0xac>)
    db42:	a803      	add	r0, sp, #12
    db44:	f003 fcda 	bl	114fc <bt_le_adv_start>
	if (err) {
    db48:	4601      	mov	r1, r0
    db4a:	b120      	cbz	r0, db56 <main+0x72>
		printk("Advertising failed to start (err %d)\n", err);
    db4c:	4811      	ldr	r0, [pc, #68]	; (db94 <main+0xb0>)
    db4e:	f019 f9db 	bl	26f08 <printk>
}
    db52:	b009      	add	sp, #36	; 0x24
    db54:	bd30      	pop	{r4, r5, pc}
	printk("Advertising successfully started\n");
    db56:	4810      	ldr	r0, [pc, #64]	; (db98 <main+0xb4>)
		printk("Ping\n");
    db58:	4c10      	ldr	r4, [pc, #64]	; (db9c <main+0xb8>)
	printk("Advertising successfully started\n");
    db5a:	f019 f9d5 	bl	26f08 <printk>
		printk("Ping\n");
    db5e:	4620      	mov	r0, r4
    db60:	f019 f9d2 	bl	26f08 <printk>
	return z_impl_k_sleep(timeout);
    db64:	2100      	movs	r1, #0
    db66:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    db6a:	f018 fdeb 	bl	26744 <z_impl_k_sleep>
	for (;;) {
    db6e:	e7f6      	b.n	db5e <main+0x7a>
    db70:	000307fd 	.word	0x000307fd
    db74:	00030828 	.word	0x00030828
    db78:	20000168 	.word	0x20000168
    db7c:	200015a8 	.word	0x200015a8
    db80:	0003084a 	.word	0x0003084a
    db84:	0002f250 	.word	0x0002f250
    db88:	0003086a 	.word	0x0003086a
    db8c:	0002f2f8 	.word	0x0002f2f8
    db90:	0002f308 	.word	0x0002f308
    db94:	00030881 	.word	0x00030881
    db98:	000308a7 	.word	0x000308a7
    db9c:	000308c9 	.word	0x000308c9

0000dba0 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    dba0:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    dba2:	4c0a      	ldr	r4, [pc, #40]	; (dbcc <crc8_ccitt+0x2c>)
    dba4:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    dba6:	4291      	cmp	r1, r2
    dba8:	d100      	bne.n	dbac <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    dbaa:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
    dbac:	f811 3b01 	ldrb.w	r3, [r1], #1
    dbb0:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    dbb2:	0903      	lsrs	r3, r0, #4
    dbb4:	5ce3      	ldrb	r3, [r4, r3]
    dbb6:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
    dbba:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    dbbc:	f3c3 1303 	ubfx	r3, r3, #4, #4
    dbc0:	5ce0      	ldrb	r0, [r4, r3]
    dbc2:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
    dbc6:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
    dbc8:	e7ed      	b.n	dba6 <crc8_ccitt+0x6>
    dbca:	bf00      	nop
    dbcc:	000308da 	.word	0x000308da

0000dbd0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    dbd0:	680b      	ldr	r3, [r1, #0]
    dbd2:	3301      	adds	r3, #1
    dbd4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    dbd6:	4b01      	ldr	r3, [pc, #4]	; (dbdc <char_out+0xc>)
    dbd8:	681b      	ldr	r3, [r3, #0]
    dbda:	4718      	bx	r3
    dbdc:	20000184 	.word	0x20000184

0000dbe0 <__printk_hook_install>:
	_char_out = fn;
    dbe0:	4b01      	ldr	r3, [pc, #4]	; (dbe8 <__printk_hook_install+0x8>)
    dbe2:	6018      	str	r0, [r3, #0]
}
    dbe4:	4770      	bx	lr
    dbe6:	bf00      	nop
    dbe8:	20000184 	.word	0x20000184

0000dbec <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    dbec:	b507      	push	{r0, r1, r2, lr}
    dbee:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
    dbf0:	2100      	movs	r1, #0
{
    dbf2:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
    dbf4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
    dbf6:	4803      	ldr	r0, [pc, #12]	; (dc04 <vprintk+0x18>)
    dbf8:	a901      	add	r1, sp, #4
    dbfa:	f000 f8f9 	bl	ddf0 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    dbfe:	b003      	add	sp, #12
    dc00:	f85d fb04 	ldr.w	pc, [sp], #4
    dc04:	0000dbd1 	.word	0x0000dbd1

0000dc08 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    dc08:	b530      	push	{r4, r5, lr}
    dc0a:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    dc0c:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    dc10:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    dc12:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    dc14:	a901      	add	r1, sp, #4
    dc16:	4805      	ldr	r0, [pc, #20]	; (dc2c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    dc18:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    dc1a:	f000 f8e9 	bl	ddf0 <cbvprintf>

	if (ctx.count < ctx.max) {
    dc1e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    dc22:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    dc24:	bfb8      	it	lt
    dc26:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    dc28:	b005      	add	sp, #20
    dc2a:	bd30      	pop	{r4, r5, pc}
    dc2c:	00026ee3 	.word	0x00026ee3

0000dc30 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    dc30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    dc34:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    dc38:	f019 0808 	ands.w	r8, r9, #8
{
    dc3c:	4604      	mov	r4, r0
    dc3e:	4693      	mov	fp, r2
	if (processing) {
    dc40:	d00d      	beq.n	dc5e <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    dc42:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    dc44:	bf0c      	ite	eq
    dc46:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    dc4a:	f049 0920 	orrne.w	r9, r9, #32
    dc4e:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    dc52:	f38b 8811 	msr	BASEPRI, fp
    dc56:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    dc5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    dc5e:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    dc62:	2902      	cmp	r1, #2
    dc64:	d107      	bne.n	dc76 <process_event+0x46>
			evt = process_recheck(mgr);
    dc66:	4620      	mov	r0, r4
    dc68:	f019 f968 	bl	26f3c <process_recheck>
		if (evt == EVT_NOP) {
    dc6c:	2800      	cmp	r0, #0
    dc6e:	d0f0      	beq.n	dc52 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    dc70:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dc72:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    dc74:	d14e      	bne.n	dd14 <process_event+0xe4>
			res = mgr->last_res;
    dc76:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    dc78:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    dc7a:	2f00      	cmp	r7, #0
    dc7c:	da15      	bge.n	dcaa <process_event+0x7a>
		*clients = mgr->clients;
    dc7e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dc80:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    dc84:	e9c4 8800 	strd	r8, r8, [r4]
    dc88:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    dc8c:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    dc8e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    dc90:	8b21      	ldrh	r1, [r4, #24]
    dc92:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    dc96:	45ca      	cmp	sl, r9
    dc98:	d002      	beq.n	dca0 <process_event+0x70>
		if (do_monitors
    dc9a:	68a3      	ldr	r3, [r4, #8]
    dc9c:	2b00      	cmp	r3, #0
    dc9e:	d15a      	bne.n	dd56 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    dca0:	b90d      	cbnz	r5, dca6 <process_event+0x76>
		    || (transit != NULL)) {
    dca2:	2e00      	cmp	r6, #0
    dca4:	d071      	beq.n	dd8a <process_event+0x15a>
    dca6:	2300      	movs	r3, #0
    dca8:	e056      	b.n	dd58 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    dcaa:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    dcae:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    dcb0:	2a01      	cmp	r2, #1
    dcb2:	d81e      	bhi.n	dcf2 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dcb4:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    dcb8:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    dcba:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dcbc:	b289      	uxth	r1, r1
    dcbe:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    dcc2:	d10a      	bne.n	dcda <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    dcc4:	b13d      	cbz	r5, dcd6 <process_event+0xa6>
    dcc6:	8b63      	ldrh	r3, [r4, #26]
    dcc8:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    dcca:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    dccc:	3301      	adds	r3, #1
    dcce:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    dcd0:	2a00      	cmp	r2, #0
    dcd2:	d1fa      	bne.n	dcca <process_event+0x9a>
    dcd4:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dcd6:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    dcda:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    dcdc:	4620      	mov	r0, r4
    dcde:	f019 f92d 	bl	26f3c <process_recheck>
    dce2:	4606      	mov	r6, r0
    dce4:	2800      	cmp	r0, #0
    dce6:	d0d3      	beq.n	dc90 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    dce8:	8b23      	ldrh	r3, [r4, #24]
    dcea:	f043 0320 	orr.w	r3, r3, #32
    dcee:	8323      	strh	r3, [r4, #24]
    dcf0:	e7cd      	b.n	dc8e <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    dcf2:	2b04      	cmp	r3, #4
    dcf4:	d10c      	bne.n	dd10 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dcf6:	f021 0107 	bic.w	r1, r1, #7
    dcfa:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    dcfc:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    dcfe:	4620      	mov	r0, r4
    dd00:	f019 f91c 	bl	26f3c <process_recheck>
    dd04:	4605      	mov	r5, r0
    dd06:	2800      	cmp	r0, #0
    dd08:	d0c1      	beq.n	dc8e <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    dd0a:	f041 0120 	orr.w	r1, r1, #32
    dd0e:	8321      	strh	r1, [r4, #24]
    dd10:	2500      	movs	r5, #0
    dd12:	e7bc      	b.n	dc8e <process_event+0x5e>
		} else if (evt == EVT_START) {
    dd14:	2803      	cmp	r0, #3
    dd16:	d109      	bne.n	dd2c <process_event+0xfc>
			transit = mgr->transitions->start;
    dd18:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dd1a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    dd1e:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dd20:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    dd24:	8323      	strh	r3, [r4, #24]
}
    dd26:	2500      	movs	r5, #0
		res = 0;
    dd28:	462f      	mov	r7, r5
    dd2a:	e7b1      	b.n	dc90 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    dd2c:	2804      	cmp	r0, #4
    dd2e:	d106      	bne.n	dd3e <process_event+0x10e>
			transit = mgr->transitions->stop;
    dd30:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dd32:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    dd36:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dd38:	f043 0304 	orr.w	r3, r3, #4
    dd3c:	e7f2      	b.n	dd24 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    dd3e:	2805      	cmp	r0, #5
    dd40:	d106      	bne.n	dd50 <process_event+0x120>
			transit = mgr->transitions->reset;
    dd42:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dd44:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    dd48:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dd4a:	f043 0305 	orr.w	r3, r3, #5
    dd4e:	e7e9      	b.n	dd24 <process_event+0xf4>
    dd50:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    dd52:	462e      	mov	r6, r5
    dd54:	e7e8      	b.n	dd28 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    dd56:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    dd58:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    dd5c:	8321      	strh	r1, [r4, #24]
    dd5e:	f38b 8811 	msr	BASEPRI, fp
    dd62:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    dd66:	b9fb      	cbnz	r3, dda8 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    dd68:	bb85      	cbnz	r5, ddcc <process_event+0x19c>
			if (transit != NULL) {
    dd6a:	b116      	cbz	r6, dd72 <process_event+0x142>
				transit(mgr, transition_complete);
    dd6c:	491f      	ldr	r1, [pc, #124]	; (ddec <process_event+0x1bc>)
    dd6e:	4620      	mov	r0, r4
    dd70:	47b0      	blx	r6
	__asm__ volatile(
    dd72:	f04f 0320 	mov.w	r3, #32
    dd76:	f3ef 8b11 	mrs	fp, BASEPRI
    dd7a:	f383 8812 	msr	BASEPRI_MAX, r3
    dd7e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    dd82:	8b23      	ldrh	r3, [r4, #24]
    dd84:	f023 0308 	bic.w	r3, r3, #8
    dd88:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    dd8a:	8b23      	ldrh	r3, [r4, #24]
    dd8c:	06da      	lsls	r2, r3, #27
    dd8e:	d525      	bpl.n	dddc <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    dd90:	f023 0310 	bic.w	r3, r3, #16
    dd94:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    dd96:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    dd98:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    dd9c:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    dda0:	2900      	cmp	r1, #0
    dda2:	f47f af5e 	bne.w	dc62 <process_event+0x32>
out:
    dda6:	e754      	b.n	dc52 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    dda8:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    ddaa:	2900      	cmp	r1, #0
    ddac:	d0dc      	beq.n	dd68 <process_event+0x138>
	return node->next;
    ddae:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    ddb2:	f8d1 b004 	ldr.w	fp, [r1, #4]
    ddb6:	463b      	mov	r3, r7
    ddb8:	4652      	mov	r2, sl
    ddba:	4620      	mov	r0, r4
    ddbc:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    ddbe:	f1b9 0f00 	cmp.w	r9, #0
    ddc2:	d0d1      	beq.n	dd68 <process_event+0x138>
    ddc4:	4649      	mov	r1, r9
    ddc6:	f8d9 9000 	ldr.w	r9, [r9]
    ddca:	e7f2      	b.n	ddb2 <process_event+0x182>
    ddcc:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    ddce:	463b      	mov	r3, r7
    ddd0:	4652      	mov	r2, sl
    ddd2:	4620      	mov	r0, r4
    ddd4:	682d      	ldr	r5, [r5, #0]
    ddd6:	f019 f8cd 	bl	26f74 <notify_one>
    ddda:	e7c5      	b.n	dd68 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    dddc:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    dde0:	bf1e      	ittt	ne
    dde2:	f023 0320 	bicne.w	r3, r3, #32
    dde6:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    dde8:	2102      	movne	r1, #2
    ddea:	e7d5      	b.n	dd98 <process_event+0x168>
    ddec:	00026fa1 	.word	0x00026fa1

0000ddf0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    ddf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ddf4:	b091      	sub	sp, #68	; 0x44
    ddf6:	468b      	mov	fp, r1
    ddf8:	9002      	str	r0, [sp, #8]
    ddfa:	4692      	mov	sl, r2
    ddfc:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    ddfe:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    de00:	f89a 0000 	ldrb.w	r0, [sl]
    de04:	b908      	cbnz	r0, de0a <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    de06:	4628      	mov	r0, r5
    de08:	e35f      	b.n	e4ca <cbvprintf+0x6da>
		if (*fp != '%') {
    de0a:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    de0c:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    de10:	d007      	beq.n	de22 <cbvprintf+0x32>
			OUTC('%');
    de12:	9b02      	ldr	r3, [sp, #8]
    de14:	4659      	mov	r1, fp
    de16:	4798      	blx	r3
    de18:	2800      	cmp	r0, #0
    de1a:	f2c0 8356 	blt.w	e4ca <cbvprintf+0x6da>
    de1e:	3501      	adds	r5, #1
			break;
    de20:	e212      	b.n	e248 <cbvprintf+0x458>
		} state = {
    de22:	2218      	movs	r2, #24
    de24:	2100      	movs	r1, #0
    de26:	a80a      	add	r0, sp, #40	; 0x28
    de28:	f01b fa98 	bl	2935c <memset>
	if (*sp == '%') {
    de2c:	f89a 3001 	ldrb.w	r3, [sl, #1]
    de30:	2b25      	cmp	r3, #37	; 0x25
    de32:	d078      	beq.n	df26 <cbvprintf+0x136>
    de34:	2200      	movs	r2, #0
    de36:	4610      	mov	r0, r2
    de38:	4696      	mov	lr, r2
    de3a:	4694      	mov	ip, r2
    de3c:	4616      	mov	r6, r2
    de3e:	4639      	mov	r1, r7
		switch (*sp) {
    de40:	f817 3b01 	ldrb.w	r3, [r7], #1
    de44:	2b2b      	cmp	r3, #43	; 0x2b
    de46:	f000 809d 	beq.w	df84 <cbvprintf+0x194>
    de4a:	f200 8094 	bhi.w	df76 <cbvprintf+0x186>
    de4e:	2b20      	cmp	r3, #32
    de50:	f000 809b 	beq.w	df8a <cbvprintf+0x19a>
    de54:	2b23      	cmp	r3, #35	; 0x23
    de56:	f000 809b 	beq.w	df90 <cbvprintf+0x1a0>
    de5a:	b12e      	cbz	r6, de68 <cbvprintf+0x78>
    de5c:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    de60:	f046 0604 	orr.w	r6, r6, #4
    de64:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    de68:	f1bc 0f00 	cmp.w	ip, #0
    de6c:	d005      	beq.n	de7a <cbvprintf+0x8a>
    de6e:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    de72:	f046 0608 	orr.w	r6, r6, #8
    de76:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    de7a:	f1be 0f00 	cmp.w	lr, #0
    de7e:	d005      	beq.n	de8c <cbvprintf+0x9c>
    de80:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    de84:	f046 0610 	orr.w	r6, r6, #16
    de88:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    de8c:	b128      	cbz	r0, de9a <cbvprintf+0xaa>
    de8e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    de92:	f040 0020 	orr.w	r0, r0, #32
    de96:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    de9a:	b12a      	cbz	r2, dea8 <cbvprintf+0xb8>
    de9c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    dea0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    dea4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    dea8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    deac:	f002 0044 	and.w	r0, r2, #68	; 0x44
    deb0:	2844      	cmp	r0, #68	; 0x44
    deb2:	d103      	bne.n	debc <cbvprintf+0xcc>
		conv->flag_zero = false;
    deb4:	f36f 1286 	bfc	r2, #6, #1
    deb8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    debc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    dec0:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    dec2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    dec6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    deca:	d17b      	bne.n	dfc4 <cbvprintf+0x1d4>
		conv->width_star = true;
    decc:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    ded0:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    ded4:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    ded6:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    deda:	781a      	ldrb	r2, [r3, #0]
    dedc:	2a2e      	cmp	r2, #46	; 0x2e
    dede:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    dee2:	bf0c      	ite	eq
    dee4:	2101      	moveq	r1, #1
    dee6:	2100      	movne	r1, #0
    dee8:	f361 0241 	bfi	r2, r1, #1, #1
    deec:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    def0:	d174      	bne.n	dfdc <cbvprintf+0x1ec>
	if (*sp == '*') {
    def2:	785a      	ldrb	r2, [r3, #1]
    def4:	2a2a      	cmp	r2, #42	; 0x2a
    def6:	d06a      	beq.n	dfce <cbvprintf+0x1de>
	++sp;
    def8:	3301      	adds	r3, #1
	size_t val = 0;
    defa:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    defc:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    defe:	4618      	mov	r0, r3
    df00:	f810 2b01 	ldrb.w	r2, [r0], #1
    df04:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    df08:	2f09      	cmp	r7, #9
    df0a:	f240 808e 	bls.w	e02a <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    df0e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    df12:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    df14:	f3c2 0040 	ubfx	r0, r2, #1, #1
    df18:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    df1c:	f361 0241 	bfi	r2, r1, #1, #1
    df20:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    df24:	e05a      	b.n	dfdc <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    df26:	f10a 0702 	add.w	r7, sl, #2
    df2a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    df2e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    df32:	07d9      	lsls	r1, r3, #31
    df34:	f140 8149 	bpl.w	e1ca <cbvprintf+0x3da>
			width = va_arg(ap, int);
    df38:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    df3c:	f1b9 0f00 	cmp.w	r9, #0
    df40:	da07      	bge.n	df52 <cbvprintf+0x162>
				conv->flag_dash = true;
    df42:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    df46:	f042 0204 	orr.w	r2, r2, #4
    df4a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    df4e:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    df52:	075a      	lsls	r2, r3, #29
    df54:	f140 8142 	bpl.w	e1dc <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    df58:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    df5c:	f1b8 0f00 	cmp.w	r8, #0
    df60:	f280 8141 	bge.w	e1e6 <cbvprintf+0x3f6>
				conv->prec_present = false;
    df64:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    df68:	f36f 0341 	bfc	r3, #1, #1
    df6c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    df70:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    df74:	e137      	b.n	e1e6 <cbvprintf+0x3f6>
		switch (*sp) {
    df76:	2b2d      	cmp	r3, #45	; 0x2d
    df78:	d00c      	beq.n	df94 <cbvprintf+0x1a4>
    df7a:	2b30      	cmp	r3, #48	; 0x30
    df7c:	f47f af6d 	bne.w	de5a <cbvprintf+0x6a>
			conv->flag_zero = true;
    df80:	2201      	movs	r2, #1
	} while (loop);
    df82:	e75c      	b.n	de3e <cbvprintf+0x4e>
			conv->flag_plus = true;
    df84:	f04f 0c01 	mov.w	ip, #1
    df88:	e759      	b.n	de3e <cbvprintf+0x4e>
			conv->flag_space = true;
    df8a:	f04f 0e01 	mov.w	lr, #1
    df8e:	e756      	b.n	de3e <cbvprintf+0x4e>
			conv->flag_hash = true;
    df90:	2001      	movs	r0, #1
    df92:	e754      	b.n	de3e <cbvprintf+0x4e>
		switch (*sp) {
    df94:	2601      	movs	r6, #1
    df96:	e752      	b.n	de3e <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    df98:	fb0c 0202 	mla	r2, ip, r2, r0
    df9c:	3a30      	subs	r2, #48	; 0x30
    df9e:	4633      	mov	r3, r6
    dfa0:	461e      	mov	r6, r3
    dfa2:	f816 0b01 	ldrb.w	r0, [r6], #1
    dfa6:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    dfaa:	2f09      	cmp	r7, #9
    dfac:	d9f4      	bls.n	df98 <cbvprintf+0x1a8>
	if (sp != wp) {
    dfae:	4299      	cmp	r1, r3
    dfb0:	d093      	beq.n	deda <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    dfb2:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    dfb6:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    dfb8:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    dfba:	f362 0141 	bfi	r1, r2, #1, #1
    dfbe:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    dfc2:	e78a      	b.n	deda <cbvprintf+0xea>
    dfc4:	460b      	mov	r3, r1
	size_t val = 0;
    dfc6:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    dfc8:	f04f 0c0a 	mov.w	ip, #10
    dfcc:	e7e8      	b.n	dfa0 <cbvprintf+0x1b0>
		conv->prec_star = true;
    dfce:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    dfd2:	f042 0204 	orr.w	r2, r2, #4
    dfd6:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    dfda:	3302      	adds	r3, #2
	switch (*sp) {
    dfdc:	461f      	mov	r7, r3
    dfde:	f817 2b01 	ldrb.w	r2, [r7], #1
    dfe2:	2a6c      	cmp	r2, #108	; 0x6c
    dfe4:	d041      	beq.n	e06a <cbvprintf+0x27a>
    dfe6:	d825      	bhi.n	e034 <cbvprintf+0x244>
    dfe8:	2a68      	cmp	r2, #104	; 0x68
    dfea:	d02b      	beq.n	e044 <cbvprintf+0x254>
    dfec:	2a6a      	cmp	r2, #106	; 0x6a
    dfee:	d046      	beq.n	e07e <cbvprintf+0x28e>
    dff0:	2a4c      	cmp	r2, #76	; 0x4c
    dff2:	d04c      	beq.n	e08e <cbvprintf+0x29e>
    dff4:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    dff6:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    dffa:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
    dffe:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    e002:	2a78      	cmp	r2, #120	; 0x78
    e004:	f200 80d9 	bhi.w	e1ba <cbvprintf+0x3ca>
    e008:	2a57      	cmp	r2, #87	; 0x57
    e00a:	d84d      	bhi.n	e0a8 <cbvprintf+0x2b8>
    e00c:	2a41      	cmp	r2, #65	; 0x41
    e00e:	d003      	beq.n	e018 <cbvprintf+0x228>
    e010:	3a45      	subs	r2, #69	; 0x45
    e012:	2a02      	cmp	r2, #2
    e014:	f200 80d1 	bhi.w	e1ba <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    e018:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    e01c:	2204      	movs	r2, #4
    e01e:	f362 0302 	bfi	r3, r2, #0, #3
    e022:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    e026:	2301      	movs	r3, #1
			break;
    e028:	e09e      	b.n	e168 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    e02a:	fb06 2101 	mla	r1, r6, r1, r2
    e02e:	3930      	subs	r1, #48	; 0x30
    e030:	4603      	mov	r3, r0
    e032:	e764      	b.n	defe <cbvprintf+0x10e>
	switch (*sp) {
    e034:	2a74      	cmp	r2, #116	; 0x74
    e036:	d026      	beq.n	e086 <cbvprintf+0x296>
    e038:	2a7a      	cmp	r2, #122	; 0x7a
    e03a:	d1db      	bne.n	dff4 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    e03c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    e040:	2206      	movs	r2, #6
    e042:	e00d      	b.n	e060 <cbvprintf+0x270>
		if (*++sp == 'h') {
    e044:	785a      	ldrb	r2, [r3, #1]
    e046:	2a68      	cmp	r2, #104	; 0x68
    e048:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    e04c:	d106      	bne.n	e05c <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    e04e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    e050:	f361 02c6 	bfi	r2, r1, #3, #4
    e054:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    e058:	1c9f      	adds	r7, r3, #2
    e05a:	e7cc      	b.n	dff6 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    e05c:	4613      	mov	r3, r2
    e05e:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    e060:	f362 03c6 	bfi	r3, r2, #3, #4
    e064:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    e068:	e7c5      	b.n	dff6 <cbvprintf+0x206>
		if (*++sp == 'l') {
    e06a:	785a      	ldrb	r2, [r3, #1]
    e06c:	2a6c      	cmp	r2, #108	; 0x6c
    e06e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    e072:	d101      	bne.n	e078 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    e074:	2104      	movs	r1, #4
    e076:	e7eb      	b.n	e050 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    e078:	4613      	mov	r3, r2
    e07a:	2203      	movs	r2, #3
    e07c:	e7f0      	b.n	e060 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    e07e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    e082:	2205      	movs	r2, #5
    e084:	e7ec      	b.n	e060 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    e086:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    e08a:	2207      	movs	r2, #7
    e08c:	e7e8      	b.n	e060 <cbvprintf+0x270>
		conv->unsupported = true;
    e08e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    e092:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    e096:	f023 0302 	bic.w	r3, r3, #2
    e09a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    e09e:	f043 0302 	orr.w	r3, r3, #2
    e0a2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    e0a6:	e7a6      	b.n	dff6 <cbvprintf+0x206>
	switch (conv->specifier) {
    e0a8:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    e0ac:	2920      	cmp	r1, #32
    e0ae:	f200 8084 	bhi.w	e1ba <cbvprintf+0x3ca>
    e0b2:	a001      	add	r0, pc, #4	; (adr r0, e0b8 <cbvprintf+0x2c8>)
    e0b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    e0b8:	0000e17d 	.word	0x0000e17d
    e0bc:	0000e1bb 	.word	0x0000e1bb
    e0c0:	0000e1bb 	.word	0x0000e1bb
    e0c4:	0000e1bb 	.word	0x0000e1bb
    e0c8:	0000e1bb 	.word	0x0000e1bb
    e0cc:	0000e1bb 	.word	0x0000e1bb
    e0d0:	0000e1bb 	.word	0x0000e1bb
    e0d4:	0000e1bb 	.word	0x0000e1bb
    e0d8:	0000e1bb 	.word	0x0000e1bb
    e0dc:	0000e019 	.word	0x0000e019
    e0e0:	0000e1bb 	.word	0x0000e1bb
    e0e4:	0000e17d 	.word	0x0000e17d
    e0e8:	0000e13d 	.word	0x0000e13d
    e0ec:	0000e019 	.word	0x0000e019
    e0f0:	0000e019 	.word	0x0000e019
    e0f4:	0000e019 	.word	0x0000e019
    e0f8:	0000e1bb 	.word	0x0000e1bb
    e0fc:	0000e13d 	.word	0x0000e13d
    e100:	0000e1bb 	.word	0x0000e1bb
    e104:	0000e1bb 	.word	0x0000e1bb
    e108:	0000e1bb 	.word	0x0000e1bb
    e10c:	0000e1bb 	.word	0x0000e1bb
    e110:	0000e185 	.word	0x0000e185
    e114:	0000e17d 	.word	0x0000e17d
    e118:	0000e1a1 	.word	0x0000e1a1
    e11c:	0000e1bb 	.word	0x0000e1bb
    e120:	0000e1bb 	.word	0x0000e1bb
    e124:	0000e1a1 	.word	0x0000e1a1
    e128:	0000e1bb 	.word	0x0000e1bb
    e12c:	0000e17d 	.word	0x0000e17d
    e130:	0000e1bb 	.word	0x0000e1bb
    e134:	0000e1bb 	.word	0x0000e1bb
    e138:	0000e17d 	.word	0x0000e17d
		conv->specifier_cat = SPECIFIER_SINT;
    e13c:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    e140:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    e142:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    e146:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    e14a:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    e14c:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    e150:	bf02      	ittt	eq
    e152:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    e156:	f041 0101 	orreq.w	r1, r1, #1
    e15a:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    e15e:	2a63      	cmp	r2, #99	; 0x63
    e160:	d131      	bne.n	e1c6 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    e162:	3b00      	subs	r3, #0
    e164:	bf18      	it	ne
    e166:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    e168:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    e16c:	f3c2 0140 	ubfx	r1, r2, #1, #1
    e170:	430b      	orrs	r3, r1
    e172:	f363 0241 	bfi	r2, r3, #1, #1
    e176:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    e17a:	e6d8      	b.n	df2e <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    e17c:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    e180:	2002      	movs	r0, #2
    e182:	e7de      	b.n	e142 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    e184:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    e188:	f003 0378 	and.w	r3, r3, #120	; 0x78
    e18c:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    e190:	2103      	movs	r1, #3
    e192:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    e196:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    e198:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    e19c:	4143      	adcs	r3, r0
    e19e:	e7e3      	b.n	e168 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    e1a0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    e1a4:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    e1a6:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    e1aa:	f361 0202 	bfi	r2, r1, #0, #3
    e1ae:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    e1b2:	bf14      	ite	ne
    e1b4:	2301      	movne	r3, #1
    e1b6:	2300      	moveq	r3, #0
    e1b8:	e7d6      	b.n	e168 <cbvprintf+0x378>
		conv->invalid = true;
    e1ba:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    e1be:	f043 0301 	orr.w	r3, r3, #1
    e1c2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    e1c6:	2300      	movs	r3, #0
    e1c8:	e7ce      	b.n	e168 <cbvprintf+0x378>
		} else if (conv->width_present) {
    e1ca:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    e1ce:	2a00      	cmp	r2, #0
			width = conv->width_value;
    e1d0:	bfb4      	ite	lt
    e1d2:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    e1d6:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
    e1da:	e6ba      	b.n	df52 <cbvprintf+0x162>
		} else if (conv->prec_present) {
    e1dc:	079b      	lsls	r3, r3, #30
    e1de:	f57f aec7 	bpl.w	df70 <cbvprintf+0x180>
			precision = conv->prec_value;
    e1e2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    e1e6:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    e1ea:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    e1ec:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    e1f0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    e1f4:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    e1f8:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    e1fa:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    e1fe:	d138      	bne.n	e272 <cbvprintf+0x482>
			switch (length_mod) {
    e200:	1ecb      	subs	r3, r1, #3
    e202:	2b04      	cmp	r3, #4
    e204:	d822      	bhi.n	e24c <cbvprintf+0x45c>
    e206:	e8df f003 	tbb	[pc, r3]
    e20a:	0903      	.short	0x0903
    e20c:	2109      	.short	0x2109
    e20e:	21          	.byte	0x21
    e20f:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    e210:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    e214:	17da      	asrs	r2, r3, #31
    e216:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    e21a:	e006      	b.n	e22a <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    e21c:	3407      	adds	r4, #7
    e21e:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    e222:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    e226:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    e22a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    e22e:	f013 0603 	ands.w	r6, r3, #3
    e232:	d056      	beq.n	e2e2 <cbvprintf+0x4f2>
			OUTS(sp, fp);
    e234:	9802      	ldr	r0, [sp, #8]
    e236:	463b      	mov	r3, r7
    e238:	4652      	mov	r2, sl
    e23a:	4659      	mov	r1, fp
    e23c:	f019 f964 	bl	27508 <outs>
    e240:	2800      	cmp	r0, #0
    e242:	f2c0 8142 	blt.w	e4ca <cbvprintf+0x6da>
    e246:	4405      	add	r5, r0
			continue;
    e248:	46ba      	mov	sl, r7
    e24a:	e5d9      	b.n	de00 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    e24c:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    e250:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    e252:	ea4f 72e3 	mov.w	r2, r3, asr #31
    e256:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    e25a:	d105      	bne.n	e268 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
    e25c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    e260:	930a      	str	r3, [sp, #40]	; 0x28
    e262:	2300      	movs	r3, #0
    e264:	930b      	str	r3, [sp, #44]	; 0x2c
    e266:	e7e0      	b.n	e22a <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
    e268:	2902      	cmp	r1, #2
    e26a:	d1de      	bne.n	e22a <cbvprintf+0x43a>
				value->sint = (short)value->sint;
    e26c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    e270:	e7d0      	b.n	e214 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    e272:	2b02      	cmp	r3, #2
    e274:	d123      	bne.n	e2be <cbvprintf+0x4ce>
			switch (length_mod) {
    e276:	1ecb      	subs	r3, r1, #3
    e278:	2b04      	cmp	r3, #4
    e27a:	d813      	bhi.n	e2a4 <cbvprintf+0x4b4>
    e27c:	e8df f003 	tbb	[pc, r3]
    e280:	120a0a03 	.word	0x120a0a03
    e284:	12          	.byte	0x12
    e285:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    e286:	6822      	ldr	r2, [r4, #0]
    e288:	920a      	str	r2, [sp, #40]	; 0x28
    e28a:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    e28c:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    e28e:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    e290:	4604      	mov	r4, r0
    e292:	e7ca      	b.n	e22a <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
    e294:	1de0      	adds	r0, r4, #7
    e296:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    e29a:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    e29e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    e2a2:	e7f5      	b.n	e290 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
    e2a4:	f854 3b04 	ldr.w	r3, [r4], #4
    e2a8:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    e2aa:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    e2ac:	f04f 0300 	mov.w	r3, #0
    e2b0:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    e2b2:	d0d3      	beq.n	e25c <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
    e2b4:	2902      	cmp	r1, #2
    e2b6:	d1b8      	bne.n	e22a <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
    e2b8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    e2bc:	e7d0      	b.n	e260 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
    e2be:	2b04      	cmp	r3, #4
    e2c0:	d109      	bne.n	e2d6 <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
    e2c2:	1de3      	adds	r3, r4, #7
    e2c4:	f023 0307 	bic.w	r3, r3, #7
    e2c8:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    e2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    e2d0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    e2d4:	e7a9      	b.n	e22a <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    e2d6:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    e2d8:	bf04      	itt	eq
    e2da:	f854 3b04 	ldreq.w	r3, [r4], #4
    e2de:	930a      	streq	r3, [sp, #40]	; 0x28
    e2e0:	e7a3      	b.n	e22a <cbvprintf+0x43a>
		switch (conv->specifier) {
    e2e2:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    e2e6:	2878      	cmp	r0, #120	; 0x78
    e2e8:	d8ae      	bhi.n	e248 <cbvprintf+0x458>
    e2ea:	2862      	cmp	r0, #98	; 0x62
    e2ec:	d822      	bhi.n	e334 <cbvprintf+0x544>
    e2ee:	2825      	cmp	r0, #37	; 0x25
    e2f0:	f43f ad8f 	beq.w	de12 <cbvprintf+0x22>
    e2f4:	2858      	cmp	r0, #88	; 0x58
    e2f6:	d1a7      	bne.n	e248 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    e2f8:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    e2fc:	9300      	str	r3, [sp, #0]
    e2fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    e302:	ab04      	add	r3, sp, #16
    e304:	aa0c      	add	r2, sp, #48	; 0x30
    e306:	f019 f8b9 	bl	2747c <encode_uint>
    e30a:	4682      	mov	sl, r0
			if (precision >= 0) {
    e30c:	f1b8 0f00 	cmp.w	r8, #0
    e310:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    e314:	db0c      	blt.n	e330 <cbvprintf+0x540>
				conv->flag_zero = false;
    e316:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    e31a:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    e31e:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    e322:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    e324:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    e328:	d902      	bls.n	e330 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
    e32a:	eba8 0303 	sub.w	r3, r8, r3
    e32e:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    e330:	4680      	mov	r8, r0
    e332:	e03d      	b.n	e3b0 <cbvprintf+0x5c0>
		switch (conv->specifier) {
    e334:	3863      	subs	r0, #99	; 0x63
    e336:	2815      	cmp	r0, #21
    e338:	d886      	bhi.n	e248 <cbvprintf+0x458>
    e33a:	a201      	add	r2, pc, #4	; (adr r2, e340 <cbvprintf+0x550>)
    e33c:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    e340:	0000e3c1 	.word	0x0000e3c1
    e344:	0000e425 	.word	0x0000e425
    e348:	0000e249 	.word	0x0000e249
    e34c:	0000e249 	.word	0x0000e249
    e350:	0000e249 	.word	0x0000e249
    e354:	0000e249 	.word	0x0000e249
    e358:	0000e425 	.word	0x0000e425
    e35c:	0000e249 	.word	0x0000e249
    e360:	0000e249 	.word	0x0000e249
    e364:	0000e249 	.word	0x0000e249
    e368:	0000e249 	.word	0x0000e249
    e36c:	0000e47f 	.word	0x0000e47f
    e370:	0000e44d 	.word	0x0000e44d
    e374:	0000e451 	.word	0x0000e451
    e378:	0000e249 	.word	0x0000e249
    e37c:	0000e249 	.word	0x0000e249
    e380:	0000e399 	.word	0x0000e399
    e384:	0000e249 	.word	0x0000e249
    e388:	0000e44d 	.word	0x0000e44d
    e38c:	0000e249 	.word	0x0000e249
    e390:	0000e249 	.word	0x0000e249
    e394:	0000e44d 	.word	0x0000e44d
			if (precision >= 0) {
    e398:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    e39c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    e3a0:	db0a      	blt.n	e3b8 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    e3a2:	4641      	mov	r1, r8
    e3a4:	4650      	mov	r0, sl
    e3a6:	f01a ff97 	bl	292d8 <strnlen>
			bpe = bps + len;
    e3aa:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    e3ae:	2600      	movs	r6, #0
		if (bps == NULL) {
    e3b0:	f1ba 0f00 	cmp.w	sl, #0
    e3b4:	d10c      	bne.n	e3d0 <cbvprintf+0x5e0>
    e3b6:	e747      	b.n	e248 <cbvprintf+0x458>
				len = strlen(bps);
    e3b8:	4650      	mov	r0, sl
    e3ba:	f01a ff86 	bl	292ca <strlen>
    e3be:	e7f4      	b.n	e3aa <cbvprintf+0x5ba>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    e3c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e3c2:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    e3c6:	2600      	movs	r6, #0
			bps = buf;
    e3c8:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    e3cc:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    e3d0:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    e3d4:	b106      	cbz	r6, e3d8 <cbvprintf+0x5e8>
			nj_len += 1U;
    e3d6:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    e3d8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    e3dc:	06d0      	lsls	r0, r2, #27
    e3de:	d568      	bpl.n	e4b2 <cbvprintf+0x6c2>
			nj_len += 2U;
    e3e0:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    e3e2:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    e3e4:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    e3e6:	bf48      	it	mi
    e3e8:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    e3ea:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    e3ec:	bf48      	it	mi
    e3ee:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    e3f0:	f1b9 0f00 	cmp.w	r9, #0
    e3f4:	dd76      	ble.n	e4e4 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    e3f6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    e3fa:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    e3fe:	f3c2 0380 	ubfx	r3, r2, #2, #1
    e402:	9303      	str	r3, [sp, #12]
    e404:	0753      	lsls	r3, r2, #29
    e406:	d46d      	bmi.n	e4e4 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    e408:	0650      	lsls	r0, r2, #25
    e40a:	d561      	bpl.n	e4d0 <cbvprintf+0x6e0>
					if (sign != 0) {
    e40c:	b146      	cbz	r6, e420 <cbvprintf+0x630>
						OUTC(sign);
    e40e:	9b02      	ldr	r3, [sp, #8]
    e410:	4659      	mov	r1, fp
    e412:	4630      	mov	r0, r6
    e414:	4798      	blx	r3
    e416:	2800      	cmp	r0, #0
    e418:	db57      	blt.n	e4ca <cbvprintf+0x6da>
						sign = 0;
    e41a:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    e41c:	3501      	adds	r5, #1
						sign = 0;
    e41e:	461e      	mov	r6, r3
					pad = '0';
    e420:	2330      	movs	r3, #48	; 0x30
    e422:	e056      	b.n	e4d2 <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    e424:	071e      	lsls	r6, r3, #28
    e426:	d40f      	bmi.n	e448 <cbvprintf+0x658>
				sign = ' ';
    e428:	f013 0610 	ands.w	r6, r3, #16
    e42c:	bf18      	it	ne
    e42e:	2620      	movne	r6, #32
			sint = value->sint;
    e430:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    e434:	2b00      	cmp	r3, #0
    e436:	f6bf af5f 	bge.w	e2f8 <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
    e43a:	4252      	negs	r2, r2
    e43c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    e440:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    e444:	262d      	movs	r6, #45	; 0x2d
    e446:	e757      	b.n	e2f8 <cbvprintf+0x508>
				sign = '+';
    e448:	262b      	movs	r6, #43	; 0x2b
    e44a:	e7f1      	b.n	e430 <cbvprintf+0x640>
		switch (conv->specifier) {
    e44c:	2600      	movs	r6, #0
    e44e:	e753      	b.n	e2f8 <cbvprintf+0x508>
			if (value->ptr != NULL) {
    e450:	980a      	ldr	r0, [sp, #40]	; 0x28
    e452:	b340      	cbz	r0, e4a6 <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    e454:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    e458:	9300      	str	r3, [sp, #0]
    e45a:	aa0c      	add	r2, sp, #48	; 0x30
    e45c:	ab04      	add	r3, sp, #16
    e45e:	2100      	movs	r1, #0
    e460:	f019 f80c 	bl	2747c <encode_uint>
				conv->altform_0c = true;
    e464:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    e468:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    e46c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    e470:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    e474:	4682      	mov	sl, r0
				conv->altform_0c = true;
    e476:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    e47a:	2600      	movs	r6, #0
				goto prec_int_pad0;
    e47c:	e746      	b.n	e30c <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    e47e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    e480:	2907      	cmp	r1, #7
    e482:	f63f aee1 	bhi.w	e248 <cbvprintf+0x458>
    e486:	e8df f001 	tbb	[pc, r1]
    e48a:	040c      	.short	0x040c
    e48c:	08080c06 	.word	0x08080c06
    e490:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    e492:	701d      	strb	r5, [r3, #0]
		break;
    e494:	e6d8      	b.n	e248 <cbvprintf+0x458>
		*(short *)dp = (short)count;
    e496:	801d      	strh	r5, [r3, #0]
		break;
    e498:	e6d6      	b.n	e248 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    e49a:	17ea      	asrs	r2, r5, #31
    e49c:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    e4a0:	e6d2      	b.n	e248 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    e4a2:	601d      	str	r5, [r3, #0]
		break;
    e4a4:	e6d0      	b.n	e248 <cbvprintf+0x458>
			bps = "(nil)";
    e4a6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; e570 <cbvprintf+0x780>
    e4aa:	4606      	mov	r6, r0
			bpe = bps + 5;
    e4ac:	f10a 0805 	add.w	r8, sl, #5
    e4b0:	e78e      	b.n	e3d0 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    e4b2:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    e4b4:	bf48      	it	mi
    e4b6:	3301      	addmi	r3, #1
    e4b8:	e793      	b.n	e3e2 <cbvprintf+0x5f2>
					OUTC(pad);
    e4ba:	4618      	mov	r0, r3
    e4bc:	9303      	str	r3, [sp, #12]
    e4be:	4659      	mov	r1, fp
    e4c0:	9b02      	ldr	r3, [sp, #8]
    e4c2:	4798      	blx	r3
    e4c4:	2800      	cmp	r0, #0
    e4c6:	9b03      	ldr	r3, [sp, #12]
    e4c8:	da04      	bge.n	e4d4 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    e4ca:	b011      	add	sp, #68	; 0x44
    e4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    e4d0:	2320      	movs	r3, #32
    e4d2:	444d      	add	r5, r9
    e4d4:	464a      	mov	r2, r9
				while (width-- > 0) {
    e4d6:	2a00      	cmp	r2, #0
    e4d8:	eba5 0109 	sub.w	r1, r5, r9
    e4dc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    e4e0:	dceb      	bgt.n	e4ba <cbvprintf+0x6ca>
    e4e2:	460d      	mov	r5, r1
		if (sign != 0) {
    e4e4:	b136      	cbz	r6, e4f4 <cbvprintf+0x704>
			OUTC(sign);
    e4e6:	9b02      	ldr	r3, [sp, #8]
    e4e8:	4659      	mov	r1, fp
    e4ea:	4630      	mov	r0, r6
    e4ec:	4798      	blx	r3
    e4ee:	2800      	cmp	r0, #0
    e4f0:	dbeb      	blt.n	e4ca <cbvprintf+0x6da>
    e4f2:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    e4f4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    e4f8:	06d9      	lsls	r1, r3, #27
    e4fa:	d401      	bmi.n	e500 <cbvprintf+0x710>
    e4fc:	071a      	lsls	r2, r3, #28
    e4fe:	d506      	bpl.n	e50e <cbvprintf+0x71e>
				OUTC('0');
    e500:	9b02      	ldr	r3, [sp, #8]
    e502:	4659      	mov	r1, fp
    e504:	2030      	movs	r0, #48	; 0x30
    e506:	4798      	blx	r3
    e508:	2800      	cmp	r0, #0
    e50a:	dbde      	blt.n	e4ca <cbvprintf+0x6da>
    e50c:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    e50e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    e512:	06db      	lsls	r3, r3, #27
    e514:	d507      	bpl.n	e526 <cbvprintf+0x736>
				OUTC(conv->specifier);
    e516:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    e51a:	9b02      	ldr	r3, [sp, #8]
    e51c:	4659      	mov	r1, fp
    e51e:	4798      	blx	r3
    e520:	2800      	cmp	r0, #0
    e522:	dbd2      	blt.n	e4ca <cbvprintf+0x6da>
    e524:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    e526:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    e528:	442e      	add	r6, r5
    e52a:	1b73      	subs	r3, r6, r5
    e52c:	2b00      	cmp	r3, #0
    e52e:	dc16      	bgt.n	e55e <cbvprintf+0x76e>
			OUTS(bps, bpe);
    e530:	9802      	ldr	r0, [sp, #8]
    e532:	4643      	mov	r3, r8
    e534:	4652      	mov	r2, sl
    e536:	4659      	mov	r1, fp
    e538:	f018 ffe6 	bl	27508 <outs>
    e53c:	2800      	cmp	r0, #0
    e53e:	dbc4      	blt.n	e4ca <cbvprintf+0x6da>
    e540:	4405      	add	r5, r0
		while (width > 0) {
    e542:	44a9      	add	r9, r5
    e544:	eba9 0305 	sub.w	r3, r9, r5
    e548:	2b00      	cmp	r3, #0
    e54a:	f77f ae7d 	ble.w	e248 <cbvprintf+0x458>
			OUTC(' ');
    e54e:	9b02      	ldr	r3, [sp, #8]
    e550:	4659      	mov	r1, fp
    e552:	2020      	movs	r0, #32
    e554:	4798      	blx	r3
    e556:	2800      	cmp	r0, #0
    e558:	dbb7      	blt.n	e4ca <cbvprintf+0x6da>
    e55a:	3501      	adds	r5, #1
			--width;
    e55c:	e7f2      	b.n	e544 <cbvprintf+0x754>
				OUTC('0');
    e55e:	9b02      	ldr	r3, [sp, #8]
    e560:	4659      	mov	r1, fp
    e562:	2030      	movs	r0, #48	; 0x30
    e564:	4798      	blx	r3
    e566:	2800      	cmp	r0, #0
    e568:	dbaf      	blt.n	e4ca <cbvprintf+0x6da>
    e56a:	3501      	adds	r5, #1
    e56c:	e7dd      	b.n	e52a <cbvprintf+0x73a>
    e56e:	bf00      	nop
    e570:	000308ea 	.word	0x000308ea

0000e574 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    e574:	b508      	push	{r3, lr}
    e576:	f04f 0220 	mov.w	r2, #32
    e57a:	f3ef 8311 	mrs	r3, BASEPRI
    e57e:	f382 8812 	msr	BASEPRI_MAX, r2
    e582:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    e586:	f001 fb25 	bl	fbd4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    e58a:	4803      	ldr	r0, [pc, #12]	; (e598 <sys_reboot+0x24>)
    e58c:	f018 fcbc 	bl	26f08 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    e590:	f000 ff3a 	bl	f408 <arch_cpu_idle>
    e594:	e7fc      	b.n	e590 <sys_reboot+0x1c>
    e596:	bf00      	nop
    e598:	000308f0 	.word	0x000308f0

0000e59c <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    e59c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    e5a0:	460f      	mov	r7, r1
    e5a2:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    e5a4:	2108      	movs	r1, #8
    e5a6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    e5a8:	f8df 9050 	ldr.w	r9, [pc, #80]	; e5fc <nvs_recover_last_ate+0x60>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    e5ac:	f019 f85b 	bl	27666 <nvs_al_size.isra.0>
	*addr -= ate_size;
    e5b0:	683c      	ldr	r4, [r7, #0]
    e5b2:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    e5b4:	4680      	mov	r8, r0
	*addr -= ate_size;
    e5b6:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    e5b8:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
    e5bc:	42ac      	cmp	r4, r5
    e5be:	d803      	bhi.n	e5c8 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    e5c0:	2000      	movs	r0, #0
}
    e5c2:	b003      	add	sp, #12
    e5c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    e5c8:	2308      	movs	r3, #8
    e5ca:	466a      	mov	r2, sp
    e5cc:	4621      	mov	r1, r4
    e5ce:	4630      	mov	r0, r6
    e5d0:	f018 ffbe 	bl	27550 <nvs_flash_rd>
		if (rc) {
    e5d4:	2800      	cmp	r0, #0
    e5d6:	d1f4      	bne.n	e5c2 <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
    e5d8:	4669      	mov	r1, sp
    e5da:	4630      	mov	r0, r6
    e5dc:	f019 f84d 	bl	2767a <nvs_ate_valid>
    e5e0:	b140      	cbz	r0, e5f4 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
    e5e2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    e5e6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
    e5ea:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
    e5ec:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
    e5f0:	4413      	add	r3, r2
    e5f2:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
    e5f4:	eba4 0408 	sub.w	r4, r4, r8
    e5f8:	e7e0      	b.n	e5bc <nvs_recover_last_ate+0x20>
    e5fa:	bf00      	nop
    e5fc:	ffff0000 	.word	0xffff0000

0000e600 <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
    e600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e604:	4604      	mov	r4, r0
    e606:	b089      	sub	sp, #36	; 0x24

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    e608:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
    e60c:	4638      	mov	r0, r7
    e60e:	f01f ffcf 	bl	2e5b0 <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    e612:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    e614:	6883      	ldr	r3, [r0, #8]
    e616:	68db      	ldr	r3, [r3, #12]
    e618:	4798      	blx	r3
    e61a:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    e61c:	b928      	cbnz	r0, e62a <nvs_mount+0x2a>
		LOG_ERR("Could not obtain flash parameters");
		return -EINVAL;
    e61e:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    e622:	4628      	mov	r0, r5
    e624:	b009      	add	sp, #36	; 0x24
    e626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
    e62a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    e62c:	6883      	ldr	r3, [r0, #8]
    e62e:	68db      	ldr	r3, [r3, #12]
    e630:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    e632:	6803      	ldr	r3, [r0, #0]
    e634:	3b01      	subs	r3, #1
    e636:	2b1f      	cmp	r3, #31
    e638:	d8f1      	bhi.n	e61e <nvs_mount+0x1e>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    e63a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    e63c:	6821      	ldr	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    e63e:	aa05      	add	r2, sp, #20
    e640:	f01f f84f 	bl	2d6e2 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    e644:	2800      	cmp	r0, #0
    e646:	d1ea      	bne.n	e61e <nvs_mount+0x1e>
	if (!fs->sector_size || fs->sector_size % info.size) {
    e648:	89a5      	ldrh	r5, [r4, #12]
    e64a:	2d00      	cmp	r5, #0
    e64c:	d0e7      	beq.n	e61e <nvs_mount+0x1e>
    e64e:	9b06      	ldr	r3, [sp, #24]
    e650:	fbb5 f2f3 	udiv	r2, r5, r3
    e654:	fb03 5512 	mls	r5, r3, r2, r5
    e658:	2d00      	cmp	r5, #0
    e65a:	d1e0      	bne.n	e61e <nvs_mount+0x1e>
	if (fs->sector_count < 2) {
    e65c:	89e3      	ldrh	r3, [r4, #14]
    e65e:	2b01      	cmp	r3, #1
    e660:	d9dd      	bls.n	e61e <nvs_mount+0x1e>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    e662:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    e664:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    e666:	f893 8004 	ldrb.w	r8, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    e66a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e66e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e672:	4638      	mov	r0, r7
    e674:	f017 fa92 	bl	25b9c <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    e678:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e67a:	2108      	movs	r1, #8
    e67c:	f018 fff3 	bl	27666 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    e680:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    e682:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
    e684:	89e3      	ldrh	r3, [r4, #14]
    e686:	fa1f fa85 	uxth.w	sl, r5
    e68a:	4553      	cmp	r3, sl
    e68c:	d845      	bhi.n	e71a <nvs_mount+0x11a>
	if (closed_sectors == fs->sector_count) {
    e68e:	89e3      	ldrh	r3, [r4, #14]
    e690:	454b      	cmp	r3, r9
    e692:	f000 80d3 	beq.w	e83c <nvs_mount+0x23c>
	if (i == fs->sector_count) {
    e696:	4553      	cmp	r3, sl
    e698:	d10b      	bne.n	e6b2 <nvs_mount+0xb2>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    e69a:	9900      	ldr	r1, [sp, #0]
    e69c:	2308      	movs	r3, #8
    e69e:	4642      	mov	r2, r8
    e6a0:	1b89      	subs	r1, r1, r6
    e6a2:	4620      	mov	r0, r4
    e6a4:	f018 ff8c 	bl	275c0 <nvs_flash_cmp_const>
		if (!rc) {
    e6a8:	b918      	cbnz	r0, e6b2 <nvs_mount+0xb2>
			nvs_sector_advance(fs, &addr);
    e6aa:	89e0      	ldrh	r0, [r4, #14]
    e6ac:	4669      	mov	r1, sp
    e6ae:	f018 ffcf 	bl	27650 <nvs_sector_advance.isra.0>
	rc = nvs_recover_last_ate(fs, &addr);
    e6b2:	4669      	mov	r1, sp
    e6b4:	4620      	mov	r0, r4
    e6b6:	f7ff ff71 	bl	e59c <nvs_recover_last_ate>
	if (rc) {
    e6ba:	4605      	mov	r5, r0
    e6bc:	2800      	cmp	r0, #0
    e6be:	f040 80bf 	bne.w	e840 <nvs_mount+0x240>
	fs->ate_wra = addr;
    e6c2:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
    e6c4:	f8df 91dc 	ldr.w	r9, [pc, #476]	; e8a4 <nvs_mount+0x2a4>
	fs->ate_wra = addr;
    e6c8:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    e6ca:	ea03 0309 	and.w	r3, r3, r9
    e6ce:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    e6d0:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    e6d4:	4299      	cmp	r1, r3
    e6d6:	d30e      	bcc.n	e6f6 <nvs_mount+0xf6>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    e6d8:	2308      	movs	r3, #8
    e6da:	aa01      	add	r2, sp, #4
    e6dc:	4620      	mov	r0, r4
    e6de:	f018 ff37 	bl	27550 <nvs_flash_rd>
		if (rc) {
    e6e2:	b9c0      	cbnz	r0, e716 <nvs_mount+0x116>
    e6e4:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
    e6e6:	f813 2b01 	ldrb.w	r2, [r3], #1
    e6ea:	4590      	cmp	r8, r2
    e6ec:	f040 80be 	bne.w	e86c <nvs_mount+0x26c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    e6f0:	3001      	adds	r0, #1
    e6f2:	2808      	cmp	r0, #8
    e6f4:	d1f7      	bne.n	e6e6 <nvs_mount+0xe6>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    e6f6:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
    e6f8:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
    e6fa:	0c1b      	lsrs	r3, r3, #16
    e6fc:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
    e6fe:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
    e700:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
    e702:	f018 ffa5 	bl	27650 <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    e706:	89a3      	ldrh	r3, [r4, #12]
    e708:	9900      	ldr	r1, [sp, #0]
    e70a:	4642      	mov	r2, r8
    e70c:	4620      	mov	r0, r4
    e70e:	f018 ff57 	bl	275c0 <nvs_flash_cmp_const>
	if (rc < 0) {
    e712:	2800      	cmp	r0, #0
    e714:	da26      	bge.n	e764 <nvs_mount+0x164>
    e716:	4605      	mov	r5, r0
    e718:	e092      	b.n	e840 <nvs_mount+0x240>
		       (uint16_t)(fs->sector_size - ate_size);
    e71a:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    e71c:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    e71e:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
    e720:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    e724:	4642      	mov	r2, r8
    e726:	2308      	movs	r3, #8
    e728:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    e72a:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    e72c:	f018 ff48 	bl	275c0 <nvs_flash_cmp_const>
		if (rc) {
    e730:	b178      	cbz	r0, e752 <nvs_mount+0x152>
			nvs_sector_advance(fs, &addr);
    e732:	89e0      	ldrh	r0, [r4, #14]
    e734:	4669      	mov	r1, sp
    e736:	f018 ff8b 	bl	27650 <nvs_sector_advance.isra.0>
			closed_sectors++;
    e73a:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    e73e:	9900      	ldr	r1, [sp, #0]
    e740:	2308      	movs	r3, #8
    e742:	4642      	mov	r2, r8
    e744:	4620      	mov	r0, r4
			closed_sectors++;
    e746:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    e74a:	f018 ff39 	bl	275c0 <nvs_flash_cmp_const>
			if (!rc) {
    e74e:	2800      	cmp	r0, #0
    e750:	d09d      	beq.n	e68e <nvs_mount+0x8e>
	for (i = 0; i < fs->sector_count; i++) {
    e752:	3501      	adds	r5, #1
    e754:	e796      	b.n	e684 <nvs_mount+0x84>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    e756:	f1ba 0f00 	cmp.w	sl, #0
    e75a:	f000 809f 	beq.w	e89c <nvs_mount+0x29c>
				rc = -ESPIPE;
    e75e:	f06f 051c 	mvn.w	r5, #28
    e762:	e06d      	b.n	e840 <nvs_mount+0x240>
	if (rc) {
    e764:	d045      	beq.n	e7f2 <nvs_mount+0x1f2>
		addr = fs->ate_wra + ate_size;
    e766:	6863      	ldr	r3, [r4, #4]
    e768:	4433      	add	r3, r6
    e76a:	9300      	str	r3, [sp, #0]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    e76c:	f64f 78ff 	movw	r8, #65535	; 0xffff
    e770:	9900      	ldr	r1, [sp, #0]
    e772:	89a3      	ldrh	r3, [r4, #12]
    e774:	b28a      	uxth	r2, r1
    e776:	1b9b      	subs	r3, r3, r6
    e778:	429a      	cmp	r2, r3
    e77a:	d315      	bcc.n	e7a8 <nvs_mount+0x1a8>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    e77c:	6861      	ldr	r1, [r4, #4]
    e77e:	4620      	mov	r0, r4
    e780:	f018 ff43 	bl	2760a <nvs_flash_erase_sector>
		if (rc) {
    e784:	2800      	cmp	r0, #0
    e786:	d1c6      	bne.n	e716 <nvs_mount+0x116>
		fs->ate_wra &= ADDR_SECT_MASK;
    e788:	6863      	ldr	r3, [r4, #4]
    e78a:	4a46      	ldr	r2, [pc, #280]	; (e8a4 <nvs_mount+0x2a4>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    e78c:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    e78e:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    e790:	440b      	add	r3, r1
    e792:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
    e796:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    e798:	4013      	ands	r3, r2
    e79a:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    e79c:	4620      	mov	r0, r4
    e79e:	f019 f861 	bl	27864 <nvs_gc>
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    e7a2:	2800      	cmp	r0, #0
    e7a4:	d040      	beq.n	e828 <nvs_mount+0x228>
    e7a6:	e7b6      	b.n	e716 <nvs_mount+0x116>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    e7a8:	2308      	movs	r3, #8
    e7aa:	aa03      	add	r2, sp, #12
    e7ac:	4620      	mov	r0, r4
    e7ae:	f018 fecf 	bl	27550 <nvs_flash_rd>
			if (rc) {
    e7b2:	2800      	cmp	r0, #0
    e7b4:	d1af      	bne.n	e716 <nvs_mount+0x116>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
    e7b6:	a903      	add	r1, sp, #12
    e7b8:	4620      	mov	r0, r4
    e7ba:	f018 ff5e 	bl	2767a <nvs_ate_valid>
    e7be:	b138      	cbz	r0, e7d0 <nvs_mount+0x1d0>
    e7c0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    e7c4:	4543      	cmp	r3, r8
    e7c6:	d103      	bne.n	e7d0 <nvs_mount+0x1d0>
			    (gc_done_ate.id == 0xffff) &&
    e7c8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    e7cc:	2b00      	cmp	r3, #0
    e7ce:	d040      	beq.n	e852 <nvs_mount+0x252>
			addr += ate_size;
    e7d0:	9b00      	ldr	r3, [sp, #0]
    e7d2:	4433      	add	r3, r6
    e7d4:	9300      	str	r3, [sp, #0]
    e7d6:	e7cb      	b.n	e770 <nvs_mount+0x170>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    e7d8:	1a5b      	subs	r3, r3, r1
    e7da:	4642      	mov	r2, r8
    e7dc:	4620      	mov	r0, r4
    e7de:	f018 feef 	bl	275c0 <nvs_flash_cmp_const>
		if (rc < 0) {
    e7e2:	2800      	cmp	r0, #0
    e7e4:	db97      	blt.n	e716 <nvs_mount+0x116>
		if (!rc) {
    e7e6:	d008      	beq.n	e7fa <nvs_mount+0x1fa>
		fs->data_wra += fs->flash_parameters->write_block_size;
    e7e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    e7ea:	68a3      	ldr	r3, [r4, #8]
    e7ec:	6812      	ldr	r2, [r2, #0]
    e7ee:	4413      	add	r3, r2
    e7f0:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
    e7f2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    e7f6:	428b      	cmp	r3, r1
    e7f8:	d8ee      	bhi.n	e7d8 <nvs_mount+0x1d8>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    e7fa:	6861      	ldr	r1, [r4, #4]
    e7fc:	89a3      	ldrh	r3, [r4, #12]
    e7fe:	eb01 0246 	add.w	r2, r1, r6, lsl #1
    e802:	429a      	cmp	r2, r3
    e804:	d1cd      	bne.n	e7a2 <nvs_mount+0x1a2>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    e806:	f8df 809c 	ldr.w	r8, [pc, #156]	; e8a4 <nvs_mount+0x2a4>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    e80a:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    e80c:	ea01 0208 	and.w	r2, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    e810:	4293      	cmp	r3, r2
    e812:	d0c6      	beq.n	e7a2 <nvs_mount+0x1a2>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    e814:	4620      	mov	r0, r4
    e816:	f018 fef8 	bl	2760a <nvs_flash_erase_sector>
		if (rc) {
    e81a:	2800      	cmp	r0, #0
    e81c:	f47f af7b 	bne.w	e716 <nvs_mount+0x116>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    e820:	6863      	ldr	r3, [r4, #4]
    e822:	ea03 0308 	and.w	r3, r3, r8
    e826:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
    e828:	89a0      	ldrh	r0, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    e82a:	88a3      	ldrh	r3, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
    e82c:	eba0 0646 	sub.w	r6, r0, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    e830:	42b3      	cmp	r3, r6
    e832:	d105      	bne.n	e840 <nvs_mount+0x240>
		rc = nvs_add_gc_done_ate(fs);
    e834:	4620      	mov	r0, r4
    e836:	f019 f800 	bl	2783a <nvs_add_gc_done_ate>
    e83a:	e76c      	b.n	e716 <nvs_mount+0x116>
		rc = -EDEADLK;
    e83c:	f06f 052c 	mvn.w	r5, #44	; 0x2c
	return z_impl_k_mutex_unlock(mutex);
    e840:	4638      	mov	r0, r7
    e842:	f017 fa23 	bl	25c8c <z_impl_k_mutex_unlock>
	if (rc) {
    e846:	2d00      	cmp	r5, #0
    e848:	f47f aeeb 	bne.w	e622 <nvs_mount+0x22>
	fs->ready = true;
    e84c:	2301      	movs	r3, #1
    e84e:	7423      	strb	r3, [r4, #16]
	return 0;
    e850:	e6e7      	b.n	e622 <nvs_mount+0x22>
			addr = fs->ate_wra & ADDR_SECT_MASK;
    e852:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
    e854:	89e0      	ldrh	r0, [r4, #14]
			addr = fs->ate_wra & ADDR_SECT_MASK;
    e856:	0c1b      	lsrs	r3, r3, #16
    e858:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
    e85a:	4669      	mov	r1, sp
			addr = fs->ate_wra & ADDR_SECT_MASK;
    e85c:	9300      	str	r3, [sp, #0]
			nvs_sector_advance(fs, &addr);
    e85e:	f018 fef7 	bl	27650 <nvs_sector_advance.isra.0>
			rc = nvs_flash_erase_sector(fs, addr);
    e862:	9900      	ldr	r1, [sp, #0]
    e864:	4620      	mov	r0, r4
    e866:	f018 fed0 	bl	2760a <nvs_flash_erase_sector>
			goto end;
    e86a:	e79a      	b.n	e7a2 <nvs_mount+0x1a2>
		if (nvs_ate_valid(fs, &last_ate)) {
    e86c:	a901      	add	r1, sp, #4
    e86e:	4620      	mov	r0, r4
    e870:	f018 ff03 	bl	2767a <nvs_ate_valid>
    e874:	f8d4 b004 	ldr.w	fp, [r4, #4]
    e878:	b180      	cbz	r0, e89c <nvs_mount+0x29c>
			fs->data_wra = addr & ADDR_SECT_MASK;
    e87a:	9a00      	ldr	r2, [sp, #0]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    e87c:	f8bd a008 	ldrh.w	sl, [sp, #8]
    e880:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    e884:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
    e886:	ea02 0209 	and.w	r2, r2, r9
    e88a:	60a2      	str	r2, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    e88c:	4451      	add	r1, sl
    e88e:	f018 feea 	bl	27666 <nvs_al_size.isra.0>
    e892:	4402      	add	r2, r0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    e894:	455a      	cmp	r2, fp
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    e896:	60a2      	str	r2, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    e898:	f43f af5d 	beq.w	e756 <nvs_mount+0x156>
		fs->ate_wra -= ate_size;
    e89c:	ebab 0306 	sub.w	r3, fp, r6
    e8a0:	6063      	str	r3, [r4, #4]
    e8a2:	e715      	b.n	e6d0 <nvs_mount+0xd0>
    e8a4:	ffff0000 	.word	0xffff0000

0000e8a8 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    e8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e8ac:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    e8ae:	7c03      	ldrb	r3, [r0, #16]
{
    e8b0:	b089      	sub	sp, #36	; 0x24
    e8b2:	4604      	mov	r4, r0
    e8b4:	4689      	mov	r9, r1
    e8b6:	4690      	mov	r8, r2
	if (!fs->ready) {
    e8b8:	2b00      	cmp	r3, #0
    e8ba:	f000 80b2 	beq.w	ea22 <nvs_write+0x17a>
		LOG_ERR("NVS not initialized");
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    e8be:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    e8c0:	2108      	movs	r1, #8
    e8c2:	4610      	mov	r0, r2
    e8c4:	f018 fecf 	bl	27666 <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
    e8c8:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    e8ca:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
    e8cc:	4610      	mov	r0, r2
    e8ce:	f018 feca 	bl	27666 <nvs_al_size.isra.0>

	/* The maximum data size is sector size - 4 ate
	 * where: 1 ate for data, 1 ate for sector close, 1 ate for gc done,
	 * and 1 ate to always allow a delete.
	 */
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    e8d2:	89a3      	ldrh	r3, [r4, #12]
    e8d4:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
    e8d8:	429e      	cmp	r6, r3
	data_size = nvs_al_size(fs, len);
    e8da:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    e8dc:	f200 80a4 	bhi.w	ea28 <nvs_write+0x180>
    e8e0:	b11e      	cbz	r6, e8ea <nvs_write+0x42>
	    ((len > 0) && (data == NULL))) {
    e8e2:	f1b8 0f00 	cmp.w	r8, #0
    e8e6:	f000 809f 	beq.w	ea28 <nvs_write+0x180>
		return -EINVAL;
	}

	/* find latest entry with same id */
	wlk_addr = fs->ate_wra;
    e8ea:	6863      	ldr	r3, [r4, #4]
    e8ec:	9303      	str	r3, [sp, #12]
	rd_addr = wlk_addr;

	while (1) {
		rd_addr = wlk_addr;
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    e8ee:	aa04      	add	r2, sp, #16
    e8f0:	a903      	add	r1, sp, #12
    e8f2:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
    e8f4:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    e8f8:	f018 fef7 	bl	276ea <nvs_prev_ate>
		if (rc) {
    e8fc:	4605      	mov	r5, r0
    e8fe:	2800      	cmp	r0, #0
    e900:	d15a      	bne.n	e9b8 <nvs_write+0x110>
			return rc;
		}
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    e902:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    e906:	454b      	cmp	r3, r9
    e908:	d005      	beq.n	e916 <nvs_write+0x6e>
			prev_found = true;
			break;
		}
		if (wlk_addr == fs->ate_wra) {
    e90a:	6862      	ldr	r2, [r4, #4]
    e90c:	9b03      	ldr	r3, [sp, #12]
    e90e:	429a      	cmp	r2, r3
    e910:	d1ed      	bne.n	e8ee <nvs_write+0x46>
				return rc;
			}
		}
	} else {
		/* skip delete entry for non-existing entry */
		if (len == 0) {
    e912:	b9de      	cbnz	r6, e94c <nvs_write+0xa4>
    e914:	e050      	b.n	e9b8 <nvs_write+0x110>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    e916:	a904      	add	r1, sp, #16
    e918:	4620      	mov	r0, r4
    e91a:	f018 feae 	bl	2767a <nvs_ate_valid>
    e91e:	2800      	cmp	r0, #0
    e920:	d0f3      	beq.n	e90a <nvs_write+0x62>
			if (wlk_ate.len == 0U) {
    e922:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
    e926:	b186      	cbz	r6, e94a <nvs_write+0xa2>
		} else if (len == wlk_ate.len) {
    e928:	429e      	cmp	r6, r3
    e92a:	d10f      	bne.n	e94c <nvs_write+0xa4>
		rd_addr += wlk_ate.offset;
    e92c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
    e930:	ea4f 411b 	mov.w	r1, fp, lsr #16
    e934:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    e936:	4401      	add	r1, r0
    e938:	4633      	mov	r3, r6
    e93a:	4642      	mov	r2, r8
    e93c:	4620      	mov	r0, r4
    e93e:	f018 fe15 	bl	2756c <nvs_flash_block_cmp>
			if (rc <= 0) {
    e942:	2800      	cmp	r0, #0
    e944:	dc02      	bgt.n	e94c <nvs_write+0xa4>
    e946:	4605      	mov	r5, r0
    e948:	e036      	b.n	e9b8 <nvs_write+0x110>
			if (wlk_ate.len == 0U) {
    e94a:	b3ab      	cbz	r3, e9b8 <nvs_write+0x110>
			return 0;
		}
	}

	/* calculate required space if the entry contains data */
	if (data_size) {
    e94c:	2f00      	cmp	r7, #0
    e94e:	d137      	bne.n	e9c0 <nvs_write+0x118>
		/* Leave space for delete ate */
		required_space = data_size + ate_size;
	}

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    e950:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
    e954:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e958:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e95c:	4650      	mov	r0, sl
    e95e:	f017 f91d 	bl	25b9c <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
    e962:	f8df b0cc 	ldr.w	fp, [pc, #204]	; ea30 <nvs_write+0x188>

	gc_count = 0;
	while (1) {
		if (gc_count == fs->sector_count) {
    e966:	89e3      	ldrh	r3, [r4, #14]
    e968:	429d      	cmp	r5, r3
    e96a:	d057      	beq.n	ea1c <nvs_write+0x174>
			 */
			rc = -ENOSPC;
			goto end;
		}

		if (fs->ate_wra >= (fs->data_wra + required_space)) {
    e96c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    e970:	18f9      	adds	r1, r7, r3
    e972:	428a      	cmp	r2, r1
    e974:	d327      	bcc.n	e9c6 <nvs_write+0x11e>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    e976:	f8ad 301a 	strh.w	r3, [sp, #26]
	nvs_ate_crc8_update(&entry);
    e97a:	a806      	add	r0, sp, #24
	entry.part = 0xff;
    e97c:	23ff      	movs	r3, #255	; 0xff
    e97e:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
    e982:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
    e986:	f8ad 601c 	strh.w	r6, [sp, #28]
	nvs_ate_crc8_update(&entry);
    e98a:	f018 fe58 	bl	2763e <nvs_ate_crc8_update>
	rc = nvs_flash_data_wrt(fs, data, len);
    e98e:	4632      	mov	r2, r6
    e990:	4641      	mov	r1, r8
    e992:	4620      	mov	r0, r4
    e994:	f018 ff2d 	bl	277f2 <nvs_flash_data_wrt>
	if (rc) {
    e998:	4603      	mov	r3, r0
    e99a:	b938      	cbnz	r0, e9ac <nvs_write+0x104>
	rc = nvs_flash_ate_wrt(fs, &entry);
    e99c:	a906      	add	r1, sp, #24
    e99e:	4620      	mov	r0, r4
    e9a0:	f018 ff3a 	bl	27818 <nvs_flash_ate_wrt>
		if (rc) {
			goto end;
		}
		gc_count++;
	}
	rc = len;
    e9a4:	2800      	cmp	r0, #0
    e9a6:	bf14      	ite	ne
    e9a8:	4603      	movne	r3, r0
    e9aa:	4633      	moveq	r3, r6
    e9ac:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
    e9ae:	4650      	mov	r0, sl
    e9b0:	f017 f96c 	bl	25c8c <z_impl_k_mutex_unlock>
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
    e9b4:	9b01      	ldr	r3, [sp, #4]
    e9b6:	461d      	mov	r5, r3
}
    e9b8:	4628      	mov	r0, r5
    e9ba:	b009      	add	sp, #36	; 0x24
    e9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		required_space = data_size + ate_size;
    e9c0:	4457      	add	r7, sl
    e9c2:	b2bf      	uxth	r7, r7
    e9c4:	e7c4      	b.n	e950 <nvs_write+0xa8>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    e9c6:	2108      	movs	r1, #8
    e9c8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e9ca:	f018 fe4c 	bl	27666 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    e9ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e9d2:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
    e9d6:	2300      	movs	r3, #0
    e9d8:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    e9dc:	1813      	adds	r3, r2, r0
    e9de:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
    e9e2:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    e9e4:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    e9e8:	441a      	add	r2, r3
    e9ea:	1a12      	subs	r2, r2, r0
    e9ec:	6062      	str	r2, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    e9ee:	a806      	add	r0, sp, #24
    e9f0:	f018 fe25 	bl	2763e <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    e9f4:	a906      	add	r1, sp, #24
    e9f6:	4620      	mov	r0, r4
    e9f8:	f018 ff0e 	bl	27818 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    e9fc:	89e0      	ldrh	r0, [r4, #14]
    e9fe:	1d21      	adds	r1, r4, #4
    ea00:	f018 fe26 	bl	27650 <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    ea04:	6863      	ldr	r3, [r4, #4]
    ea06:	ea03 030b 	and.w	r3, r3, fp
    ea0a:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    ea0c:	4620      	mov	r0, r4
    ea0e:	f018 ff29 	bl	27864 <nvs_gc>
		if (rc) {
    ea12:	4603      	mov	r3, r0
    ea14:	2800      	cmp	r0, #0
    ea16:	d1c9      	bne.n	e9ac <nvs_write+0x104>
		gc_count++;
    ea18:	3501      	adds	r5, #1
		if (gc_count == fs->sector_count) {
    ea1a:	e7a4      	b.n	e966 <nvs_write+0xbe>
			rc = -ENOSPC;
    ea1c:	f06f 031b 	mvn.w	r3, #27
    ea20:	e7c4      	b.n	e9ac <nvs_write+0x104>
		return -EACCES;
    ea22:	f06f 050c 	mvn.w	r5, #12
    ea26:	e7c7      	b.n	e9b8 <nvs_write+0x110>
		return -EINVAL;
    ea28:	f06f 0515 	mvn.w	r5, #21
    ea2c:	e7c4      	b.n	e9b8 <nvs_write+0x110>
    ea2e:	bf00      	nop
    ea30:	ffff0000 	.word	0xffff0000

0000ea34 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    ea34:	4b0c      	ldr	r3, [pc, #48]	; (ea68 <flash_area_open+0x34>)
    ea36:	681b      	ldr	r3, [r3, #0]
{
    ea38:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
    ea3a:	b173      	cbz	r3, ea5a <flash_area_open+0x26>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    ea3c:	4a0b      	ldr	r2, [pc, #44]	; (ea6c <flash_area_open+0x38>)
    ea3e:	6815      	ldr	r5, [r2, #0]
    ea40:	2200      	movs	r2, #0
    ea42:	42aa      	cmp	r2, r5
    ea44:	db02      	blt.n	ea4c <flash_area_open+0x18>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
    ea46:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;
	return 0;
}
    ea4a:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
    ea4c:	461c      	mov	r4, r3
    ea4e:	f813 6b10 	ldrb.w	r6, [r3], #16
    ea52:	4286      	cmp	r6, r0
    ea54:	d004      	beq.n	ea60 <flash_area_open+0x2c>
	for (int i = 0; i < flash_map_entries; i++) {
    ea56:	3201      	adds	r2, #1
    ea58:	e7f3      	b.n	ea42 <flash_area_open+0xe>
		return -EACCES;
    ea5a:	f06f 000c 	mvn.w	r0, #12
    ea5e:	e7f4      	b.n	ea4a <flash_area_open+0x16>
	*fap = area;
    ea60:	600c      	str	r4, [r1, #0]
	return 0;
    ea62:	2000      	movs	r0, #0
    ea64:	e7f1      	b.n	ea4a <flash_area_open+0x16>
    ea66:	bf00      	nop
    ea68:	20000188 	.word	0x20000188
    ea6c:	0002f360 	.word	0x0002f360

0000ea70 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    ea70:	b570      	push	{r4, r5, r6, lr}
    ea72:	b088      	sub	sp, #32
    ea74:	4605      	mov	r5, r0
    ea76:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
    ea78:	b2c0      	uxtb	r0, r0
    ea7a:	4669      	mov	r1, sp
{
    ea7c:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
    ea7e:	f7ff ffd9 	bl	ea34 <flash_area_open>
	if (rc < 0 || fa == NULL) {
    ea82:	2800      	cmp	r0, #0
    ea84:	db1f      	blt.n	eac6 <flash_area_get_sectors+0x56>
    ea86:	9b00      	ldr	r3, [sp, #0]
    ea88:	b1eb      	cbz	r3, eac6 <flash_area_get_sectors+0x56>
	cb_data->area_off = fa->fa_off;
    ea8a:	685a      	ldr	r2, [r3, #4]
    ea8c:	9202      	str	r2, [sp, #8]
	cb_data->area_len = fa->fa_size;
    ea8e:	689a      	ldr	r2, [r3, #8]
	cb_data->ret_len = *cnt;
    ea90:	6821      	ldr	r1, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
    ea92:	68d8      	ldr	r0, [r3, #12]
	cb_data->area_idx = idx;
    ea94:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
    ea96:	e9cd 2603 	strd	r2, r6, [sp, #12]
	cb_data->ret_idx = 0U;
    ea9a:	2200      	movs	r2, #0
	cb_data->status = 0;
    ea9c:	e9cd 1206 	strd	r1, r2, [sp, #24]
	cb_data->ret_idx = 0U;
    eaa0:	9205      	str	r2, [sp, #20]
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    eaa2:	f016 fe4b 	bl	2573c <z_impl_device_get_binding>
    eaa6:	4605      	mov	r5, r0
	flash_area_close(fa);
    eaa8:	9800      	ldr	r0, [sp, #0]
    eaaa:	f019 f825 	bl	27af8 <flash_area_close>
	if (flash_dev == NULL) {
    eaae:	b16d      	cbz	r5, eacc <flash_area_get_sectors+0x5c>
	flash_page_foreach(flash_dev, cb, cb_data);
    eab0:	4628      	mov	r0, r5
    eab2:	4908      	ldr	r1, [pc, #32]	; (ead4 <flash_area_get_sectors+0x64>)
    eab4:	aa01      	add	r2, sp, #4
    eab6:	f01e fe18 	bl	2d6ea <flash_page_foreach>
	if (cb_data->status == 0) {
    eaba:	9807      	ldr	r0, [sp, #28]
    eabc:	b908      	cbnz	r0, eac2 <flash_area_get_sectors+0x52>
		*cnt = cb_data->ret_idx;
    eabe:	9b05      	ldr	r3, [sp, #20]
    eac0:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    eac2:	b008      	add	sp, #32
    eac4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    eac6:	f06f 0015 	mvn.w	r0, #21
    eaca:	e7fa      	b.n	eac2 <flash_area_get_sectors+0x52>
		return -ENODEV;
    eacc:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    ead0:	e7f7      	b.n	eac2 <flash_area_get_sectors+0x52>
    ead2:	bf00      	nop
    ead4:	00027bc3 	.word	0x00027bc3

0000ead8 <stream_flash_init>:
}

int stream_flash_init(struct stream_flash_ctx *ctx, const struct device *fdev,
		      uint8_t *buf, size_t buf_len, size_t offset, size_t size,
		      stream_flash_callback_t cb)
{
    ead8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    eadc:	460d      	mov	r5, r1
    eade:	e9dd 860a 	ldrd	r8, r6, [sp, #40]	; 0x28
    eae2:	4691      	mov	r9, r2
    eae4:	461f      	mov	r7, r3
	if (!ctx || !fdev || !buf) {
    eae6:	4604      	mov	r4, r0
    eae8:	b920      	cbnz	r0, eaf4 <stream_flash_init+0x1c>
		return -EFAULT;
    eaea:	f06f 000d 	mvn.w	r0, #13
#ifdef CONFIG_STREAM_FLASH_ERASE
	ctx->last_erased_page_start_offset = -1;
#endif

	return 0;
}
    eaee:	b003      	add	sp, #12
    eaf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!ctx || !fdev || !buf) {
    eaf4:	2900      	cmp	r1, #0
    eaf6:	d0f8      	beq.n	eaea <stream_flash_init+0x12>
    eaf8:	2a00      	cmp	r2, #0
    eafa:	d0f6      	beq.n	eaea <stream_flash_init+0x12>
	struct _inspect_flash inspect_flash_ctx = {
    eafc:	9300      	str	r3, [sp, #0]
	if (buf_len % flash_get_write_block_size(fdev)) {
    eafe:	4608      	mov	r0, r1
	struct _inspect_flash inspect_flash_ctx = {
    eb00:	2300      	movs	r3, #0
    eb02:	9301      	str	r3, [sp, #4]
	if (buf_len % flash_get_write_block_size(fdev)) {
    eb04:	f019 f87b 	bl	27bfe <flash_get_write_block_size>
    eb08:	fbb7 f3f0 	udiv	r3, r7, r0
    eb0c:	fb03 7010 	mls	r0, r3, r0, r7
    eb10:	2800      	cmp	r0, #0
    eb12:	d1ea      	bne.n	eaea <stream_flash_init+0x12>
	flash_page_foreach(fdev, find_flash_total_size, &inspect_flash_ctx);
    eb14:	4912      	ldr	r1, [pc, #72]	; (eb60 <stream_flash_init+0x88>)
    eb16:	466a      	mov	r2, sp
    eb18:	4628      	mov	r0, r5
    eb1a:	f01e fde6 	bl	2d6ea <flash_page_foreach>
	if (inspect_flash_ctx.total_size == 0) {
    eb1e:	9b01      	ldr	r3, [sp, #4]
    eb20:	2b00      	cmp	r3, #0
    eb22:	d0e2      	beq.n	eaea <stream_flash_init+0x12>
	if ((offset + size) > inspect_flash_ctx.total_size ||
    eb24:	eb08 0206 	add.w	r2, r8, r6
    eb28:	4293      	cmp	r3, r2
    eb2a:	d3de      	bcc.n	eaea <stream_flash_init+0x12>
	    offset % flash_get_write_block_size(fdev)) {
    eb2c:	4628      	mov	r0, r5
    eb2e:	f019 f866 	bl	27bfe <flash_get_write_block_size>
    eb32:	fbb8 f3f0 	udiv	r3, r8, r0
    eb36:	fb03 8010 	mls	r0, r3, r0, r8
	if ((offset + size) > inspect_flash_ctx.total_size ||
    eb3a:	2800      	cmp	r0, #0
    eb3c:	d1d5      	bne.n	eaea <stream_flash_init+0x12>
	ctx->buf_len = buf_len;
    eb3e:	e9c4 9700 	strd	r9, r7, [r4]
	ctx->fdev = fdev;
    eb42:	60e5      	str	r5, [r4, #12]
	ctx->bytes_written = 0;
    eb44:	6120      	str	r0, [r4, #16]
	ctx->buf_bytes = 0U;
    eb46:	60a0      	str	r0, [r4, #8]
	ctx->offset = offset;
    eb48:	f8c4 8014 	str.w	r8, [r4, #20]
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
    eb4c:	b916      	cbnz	r6, eb54 <stream_flash_init+0x7c>
    eb4e:	9e01      	ldr	r6, [sp, #4]
    eb50:	eba6 0608 	sub.w	r6, r6, r8
	ctx->callback = cb;
    eb54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
    eb56:	61a6      	str	r6, [r4, #24]
	ctx->callback = cb;
    eb58:	61e3      	str	r3, [r4, #28]
	return 0;
    eb5a:	2000      	movs	r0, #0
    eb5c:	e7c7      	b.n	eaee <stream_flash_init+0x16>
    eb5e:	bf00      	nop
    eb60:	00027c0b 	.word	0x00027c0b

0000eb64 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    eb64:	4b10      	ldr	r3, [pc, #64]	; (eba8 <settings_save_one+0x44>)
{
    eb66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    eb6a:	681c      	ldr	r4, [r3, #0]
{
    eb6c:	4605      	mov	r5, r0
    eb6e:	460e      	mov	r6, r1
    eb70:	4617      	mov	r7, r2
	if (!cs) {
    eb72:	b1ac      	cbz	r4, eba0 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    eb74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    eb78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    eb7c:	480b      	ldr	r0, [pc, #44]	; (ebac <settings_save_one+0x48>)
    eb7e:	f017 f80d 	bl	25b9c <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    eb82:	6863      	ldr	r3, [r4, #4]
    eb84:	4632      	mov	r2, r6
    eb86:	f8d3 8008 	ldr.w	r8, [r3, #8]
    eb8a:	4629      	mov	r1, r5
    eb8c:	463b      	mov	r3, r7
    eb8e:	4620      	mov	r0, r4
    eb90:	47c0      	blx	r8
    eb92:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    eb94:	4805      	ldr	r0, [pc, #20]	; (ebac <settings_save_one+0x48>)
    eb96:	f017 f879 	bl	25c8c <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    eb9a:	4620      	mov	r0, r4
    eb9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    eba0:	f06f 0401 	mvn.w	r4, #1
    eba4:	e7f9      	b.n	eb9a <settings_save_one+0x36>
    eba6:	bf00      	nop
    eba8:	200015c8 	.word	0x200015c8
    ebac:	20000944 	.word	0x20000944

0000ebb0 <settings_src_register>:
	parent->next = child;
    ebb0:	2300      	movs	r3, #0
    ebb2:	6003      	str	r3, [r0, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    ebb4:	4b04      	ldr	r3, [pc, #16]	; (ebc8 <settings_src_register+0x18>)
    ebb6:	685a      	ldr	r2, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    ebb8:	b912      	cbnz	r2, ebc0 <settings_src_register+0x10>
	list->head = node;
    ebba:	e9c3 0000 	strd	r0, r0, [r3]
}
    ebbe:	4770      	bx	lr
	parent->next = child;
    ebc0:	6010      	str	r0, [r2, #0]
	list->tail = node;
    ebc2:	6058      	str	r0, [r3, #4]
}
    ebc4:	4770      	bx	lr
    ebc6:	bf00      	nop
    ebc8:	200015c0 	.word	0x200015c0

0000ebcc <settings_dst_register>:
	settings_save_dst = cs;
    ebcc:	4b01      	ldr	r3, [pc, #4]	; (ebd4 <settings_dst_register+0x8>)
    ebce:	6018      	str	r0, [r3, #0]
}
    ebd0:	4770      	bx	lr
    ebd2:	bf00      	nop
    ebd4:	200015c8 	.word	0x200015c8

0000ebd8 <settings_load_subtree>:
{
    ebd8:	b530      	push	{r4, r5, lr}
    ebda:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
    ebdc:	2300      	movs	r3, #0
{
    ebde:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    ebe0:	e9cd 3302 	strd	r3, r3, [sp, #8]
    ebe4:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    ebe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ebea:	480c      	ldr	r0, [pc, #48]	; (ec1c <settings_load_subtree+0x44>)
    ebec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ebf0:	f016 ffd4 	bl	25b9c <z_impl_k_mutex_lock>
	return list->head;
    ebf4:	4b0a      	ldr	r3, [pc, #40]	; (ec20 <settings_load_subtree+0x48>)
    ebf6:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    ebf8:	b134      	cbz	r4, ec08 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
    ebfa:	6863      	ldr	r3, [r4, #4]
    ebfc:	4620      	mov	r0, r4
    ebfe:	681b      	ldr	r3, [r3, #0]
    ec00:	a901      	add	r1, sp, #4
    ec02:	4798      	blx	r3
	return node->next;
    ec04:	6824      	ldr	r4, [r4, #0]
    ec06:	e7f7      	b.n	ebf8 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
    ec08:	4628      	mov	r0, r5
    ec0a:	f000 f881 	bl	ed10 <settings_commit_subtree>
    ec0e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    ec10:	4802      	ldr	r0, [pc, #8]	; (ec1c <settings_load_subtree+0x44>)
    ec12:	f017 f83b 	bl	25c8c <z_impl_k_mutex_unlock>
}
    ec16:	4620      	mov	r0, r4
    ec18:	b005      	add	sp, #20
    ec1a:	bd30      	pop	{r4, r5, pc}
    ec1c:	20000944 	.word	0x20000944
    ec20:	200015c0 	.word	0x200015c0

0000ec24 <settings_load_subtree_direct>:
{
    ec24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    ec26:	e9cd 0101 	strd	r0, r1, [sp, #4]
    ec2a:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    ec2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ec30:	480a      	ldr	r0, [pc, #40]	; (ec5c <settings_load_subtree_direct+0x38>)
    ec32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ec36:	f016 ffb1 	bl	25b9c <z_impl_k_mutex_lock>
	return list->head;
    ec3a:	4b09      	ldr	r3, [pc, #36]	; (ec60 <settings_load_subtree_direct+0x3c>)
    ec3c:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    ec3e:	b134      	cbz	r4, ec4e <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
    ec40:	6863      	ldr	r3, [r4, #4]
    ec42:	4620      	mov	r0, r4
    ec44:	681b      	ldr	r3, [r3, #0]
    ec46:	a901      	add	r1, sp, #4
    ec48:	4798      	blx	r3
	return node->next;
    ec4a:	6824      	ldr	r4, [r4, #0]
    ec4c:	e7f7      	b.n	ec3e <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
    ec4e:	4803      	ldr	r0, [pc, #12]	; (ec5c <settings_load_subtree_direct+0x38>)
    ec50:	f017 f81c 	bl	25c8c <z_impl_k_mutex_unlock>
}
    ec54:	2000      	movs	r0, #0
    ec56:	b004      	add	sp, #16
    ec58:	bd10      	pop	{r4, pc}
    ec5a:	bf00      	nop
    ec5c:	20000944 	.word	0x20000944
    ec60:	200015c0 	.word	0x200015c0

0000ec64 <settings_store_init>:
	list->head = NULL;
    ec64:	4b02      	ldr	r3, [pc, #8]	; (ec70 <settings_store_init+0xc>)
    ec66:	2200      	movs	r2, #0
	list->tail = NULL;
    ec68:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    ec6c:	4770      	bx	lr
    ec6e:	bf00      	nop
    ec70:	200015c0 	.word	0x200015c0

0000ec74 <settings_init>:
	list->head = NULL;
    ec74:	4b02      	ldr	r3, [pc, #8]	; (ec80 <settings_init+0xc>)
    ec76:	2200      	movs	r2, #0
	list->tail = NULL;
    ec78:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    ec7c:	f7ff bff2 	b.w	ec64 <settings_store_init>
    ec80:	200015cc 	.word	0x200015cc

0000ec84 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
    ec84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    ec88:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
    ec8a:	460e      	mov	r6, r1
    ec8c:	b109      	cbz	r1, ec92 <settings_parse_and_lookup+0xe>
		*next = NULL;
    ec8e:	2300      	movs	r3, #0
    ec90:	600b      	str	r3, [r1, #0]
    ec92:	4c1c      	ldr	r4, [pc, #112]	; (ed04 <settings_parse_and_lookup+0x80>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    ec94:	f8df 8070 	ldr.w	r8, [pc, #112]	; ed08 <settings_parse_and_lookup+0x84>
    ec98:	2500      	movs	r5, #0
    ec9a:	4544      	cmp	r4, r8
    ec9c:	d310      	bcc.n	ecc0 <settings_parse_and_lookup+0x3c>
	return list->head;
    ec9e:	4b1b      	ldr	r3, [pc, #108]	; (ed0c <settings_parse_and_lookup+0x88>)
    eca0:	681c      	ldr	r4, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    eca2:	b35c      	cbz	r4, ecfc <settings_parse_and_lookup+0x78>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    eca4:	aa01      	add	r2, sp, #4
    eca6:	4638      	mov	r0, r7
    eca8:	f854 1c14 	ldr.w	r1, [r4, #-20]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    ecac:	3c14      	subs	r4, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    ecae:	f019 f84c 	bl	27d4a <settings_name_steq>
    ecb2:	b308      	cbz	r0, ecf8 <settings_parse_and_lookup+0x74>
			continue;
		}
		if (!bestmatch) {
    ecb4:	b9cd      	cbnz	r5, ecea <settings_parse_and_lookup+0x66>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
    ecb6:	b10e      	cbz	r6, ecbc <settings_parse_and_lookup+0x38>
				*next = tmpnext;
    ecb8:	9b01      	ldr	r3, [sp, #4]
    ecba:	6033      	str	r3, [r6, #0]
    ecbc:	4625      	mov	r5, r4
    ecbe:	e01b      	b.n	ecf8 <settings_parse_and_lookup+0x74>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    ecc0:	6821      	ldr	r1, [r4, #0]
    ecc2:	aa01      	add	r2, sp, #4
    ecc4:	4638      	mov	r0, r7
    ecc6:	f019 f840 	bl	27d4a <settings_name_steq>
    ecca:	b160      	cbz	r0, ece6 <settings_parse_and_lookup+0x62>
		if (!bestmatch) {
    eccc:	b925      	cbnz	r5, ecd8 <settings_parse_and_lookup+0x54>
			if (next) {
    ecce:	b10e      	cbz	r6, ecd4 <settings_parse_and_lookup+0x50>
				*next = tmpnext;
    ecd0:	9b01      	ldr	r3, [sp, #4]
    ecd2:	6033      	str	r3, [r6, #0]
    ecd4:	4625      	mov	r5, r4
    ecd6:	e006      	b.n	ece6 <settings_parse_and_lookup+0x62>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    ecd8:	6829      	ldr	r1, [r5, #0]
    ecda:	6820      	ldr	r0, [r4, #0]
    ecdc:	2200      	movs	r2, #0
    ecde:	f019 f834 	bl	27d4a <settings_name_steq>
    ece2:	2800      	cmp	r0, #0
    ece4:	d1f3      	bne.n	ecce <settings_parse_and_lookup+0x4a>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    ece6:	3414      	adds	r4, #20
    ece8:	e7d7      	b.n	ec9a <settings_parse_and_lookup+0x16>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    ecea:	6829      	ldr	r1, [r5, #0]
    ecec:	6820      	ldr	r0, [r4, #0]
    ecee:	2200      	movs	r2, #0
    ecf0:	f019 f82b 	bl	27d4a <settings_name_steq>
    ecf4:	2800      	cmp	r0, #0
    ecf6:	d1de      	bne.n	ecb6 <settings_parse_and_lookup+0x32>
	return node->next;
    ecf8:	6964      	ldr	r4, [r4, #20]
    ecfa:	e7d2      	b.n	eca2 <settings_parse_and_lookup+0x1e>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
    ecfc:	4628      	mov	r0, r5
    ecfe:	b002      	add	sp, #8
    ed00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ed04:	0002f1ac 	.word	0x0002f1ac
    ed08:	0002f224 	.word	0x0002f224
    ed0c:	200015cc 	.word	0x200015cc

0000ed10 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    ed10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    ed12:	4c18      	ldr	r4, [pc, #96]	; (ed74 <settings_commit_subtree+0x64>)
    ed14:	4f18      	ldr	r7, [pc, #96]	; (ed78 <settings_commit_subtree+0x68>)
{
    ed16:	4606      	mov	r6, r0
	rc = 0;
    ed18:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    ed1a:	42bc      	cmp	r4, r7
    ed1c:	d308      	bcc.n	ed30 <settings_commit_subtree+0x20>
	return list->head;
    ed1e:	4b17      	ldr	r3, [pc, #92]	; (ed7c <settings_commit_subtree+0x6c>)
    ed20:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    ed22:	b324      	cbz	r4, ed6e <settings_commit_subtree+0x5e>
    ed24:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    ed26:	b9ae      	cbnz	r6, ed54 <settings_commit_subtree+0x44>
			continue;
		}
		if (ch->h_commit) {
    ed28:	68e3      	ldr	r3, [r4, #12]
    ed2a:	b9db      	cbnz	r3, ed64 <settings_commit_subtree+0x54>
	return node->next;
    ed2c:	6964      	ldr	r4, [r4, #20]
    ed2e:	e7f8      	b.n	ed22 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    ed30:	b91e      	cbnz	r6, ed3a <settings_commit_subtree+0x2a>
		if (ch->h_commit) {
    ed32:	68e3      	ldr	r3, [r4, #12]
    ed34:	b94b      	cbnz	r3, ed4a <settings_commit_subtree+0x3a>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    ed36:	3414      	adds	r4, #20
    ed38:	e7ef      	b.n	ed1a <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    ed3a:	6820      	ldr	r0, [r4, #0]
    ed3c:	2200      	movs	r2, #0
    ed3e:	4631      	mov	r1, r6
    ed40:	f019 f803 	bl	27d4a <settings_name_steq>
    ed44:	2800      	cmp	r0, #0
    ed46:	d1f4      	bne.n	ed32 <settings_commit_subtree+0x22>
    ed48:	e7f5      	b.n	ed36 <settings_commit_subtree+0x26>
			rc2 = ch->h_commit();
    ed4a:	4798      	blx	r3
				rc = rc2;
    ed4c:	2d00      	cmp	r5, #0
    ed4e:	bf08      	it	eq
    ed50:	4605      	moveq	r5, r0
    ed52:	e7f0      	b.n	ed36 <settings_commit_subtree+0x26>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    ed54:	6820      	ldr	r0, [r4, #0]
    ed56:	2200      	movs	r2, #0
    ed58:	4631      	mov	r1, r6
    ed5a:	f018 fff6 	bl	27d4a <settings_name_steq>
    ed5e:	2800      	cmp	r0, #0
    ed60:	d1e2      	bne.n	ed28 <settings_commit_subtree+0x18>
    ed62:	e7e3      	b.n	ed2c <settings_commit_subtree+0x1c>
			rc2 = ch->h_commit();
    ed64:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
    ed66:	2d00      	cmp	r5, #0
    ed68:	bf08      	it	eq
    ed6a:	4605      	moveq	r5, r0
    ed6c:	e7de      	b.n	ed2c <settings_commit_subtree+0x1c>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    ed6e:	4628      	mov	r0, r5
    ed70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ed72:	bf00      	nop
    ed74:	0002f1ac 	.word	0x0002f1ac
    ed78:	0002f224 	.word	0x0002f224
    ed7c:	200015cc 	.word	0x200015cc

0000ed80 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    ed80:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    ed82:	4c06      	ldr	r4, [pc, #24]	; (ed9c <settings_subsys_init+0x1c>)
    ed84:	7823      	ldrb	r3, [r4, #0]
    ed86:	b93b      	cbnz	r3, ed98 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    ed88:	f7ff ff74 	bl	ec74 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    ed8c:	f000 f864 	bl	ee58 <settings_backend_init>

	if (!err) {
    ed90:	b908      	cbnz	r0, ed96 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    ed92:	2301      	movs	r3, #1
    ed94:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    ed96:	bd10      	pop	{r4, pc}
		return 0;
    ed98:	2000      	movs	r0, #0
    ed9a:	e7fc      	b.n	ed96 <settings_subsys_init+0x16>
    ed9c:	20002cd8 	.word	0x20002cd8

0000eda0 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
    eda0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
    eda4:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
    eda6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; ee54 <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
    edaa:	3401      	adds	r4, #1
{
    edac:	b098      	sub	sp, #96	; 0x60
    edae:	4680      	mov	r8, r0
    edb0:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
    edb2:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    edb4:	f100 0608 	add.w	r6, r0, #8
		name_id--;
    edb8:	1e65      	subs	r5, r4, #1
    edba:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
    edbc:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    edc0:	d045      	beq.n	ee4e <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    edc2:	234a      	movs	r3, #74	; 0x4a
    edc4:	aa05      	add	r2, sp, #20
    edc6:	4629      	mov	r1, r5
    edc8:	4630      	mov	r0, r6
    edca:	f018 fe5b 	bl	27a84 <nvs_read>
    edce:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
    edd2:	343f      	adds	r4, #63	; 0x3f
    edd4:	b2a4      	uxth	r4, r4
    edd6:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    edd8:	4621      	mov	r1, r4
    edda:	2301      	movs	r3, #1
    eddc:	f10d 020b 	add.w	r2, sp, #11
    ede0:	4630      	mov	r0, r6
    ede2:	f018 fe4f 	bl	27a84 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
    ede6:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    ede8:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
    edea:	dc03      	bgt.n	edf4 <settings_nvs_load+0x54>
    edec:	2800      	cmp	r0, #0
    edee:	dc03      	bgt.n	edf8 <settings_nvs_load+0x58>
{
    edf0:	462c      	mov	r4, r5
    edf2:	e7e1      	b.n	edb8 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
    edf4:	2800      	cmp	r0, #0
    edf6:	dc16      	bgt.n	ee26 <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
    edf8:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
    edfc:	42ab      	cmp	r3, r5
    edfe:	d109      	bne.n	ee14 <settings_nvs_load+0x74>
				cf->last_name_id--;
    ee00:	4642      	mov	r2, r8
    ee02:	1e6b      	subs	r3, r5, #1
    ee04:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
    ee08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    ee0c:	2302      	movs	r3, #2
    ee0e:	4630      	mov	r0, r6
    ee10:	f7ff fd4a 	bl	e8a8 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
    ee14:	4629      	mov	r1, r5
    ee16:	4630      	mov	r0, r6
    ee18:	f018 fdd9 	bl	279ce <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
    ee1c:	4621      	mov	r1, r4
    ee1e:	4630      	mov	r0, r6
    ee20:	f018 fdd5 	bl	279ce <nvs_delete>
			continue;
    ee24:	e7e4      	b.n	edf0 <settings_nvs_load+0x50>
		name[rc1] = '\0';
    ee26:	ab18      	add	r3, sp, #96	; 0x60
    ee28:	441f      	add	r7, r3
    ee2a:	2300      	movs	r3, #0
    ee2c:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
    ee30:	4652      	mov	r2, sl
    ee32:	f8cd 9000 	str.w	r9, [sp]
    ee36:	ab03      	add	r3, sp, #12
    ee38:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
    ee3a:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
    ee3c:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
    ee40:	f018 ffbc 	bl	27dbc <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
    ee44:	2800      	cmp	r0, #0
    ee46:	d0d3      	beq.n	edf0 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
    ee48:	b018      	add	sp, #96	; 0x60
    ee4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ee4e:	2000      	movs	r0, #0
	return ret;
    ee50:	e7fa      	b.n	ee48 <settings_nvs_load+0xa8>
    ee52:	bf00      	nop
    ee54:	00027e23 	.word	0x00027e23

0000ee58 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
    ee58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
    ee5a:	2301      	movs	r3, #1

	rc = flash_area_open(SETTINGS_PARTITION, &fa);
    ee5c:	4669      	mov	r1, sp
    ee5e:	2004      	movs	r0, #4
	uint32_t sector_cnt = 1;
    ee60:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(SETTINGS_PARTITION, &fa);
    ee62:	f7ff fde7 	bl	ea34 <flash_area_open>
	if (rc) {
    ee66:	4604      	mov	r4, r0
    ee68:	2800      	cmp	r0, #0
    ee6a:	d136      	bne.n	eeda <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
    ee6c:	aa02      	add	r2, sp, #8
    ee6e:	a901      	add	r1, sp, #4
    ee70:	2004      	movs	r0, #4
    ee72:	f7ff fdfd 	bl	ea70 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
    ee76:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
    ee7a:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
    ee7c:	d02d      	beq.n	eeda <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
    ee7e:	b138      	cbz	r0, ee90 <settings_backend_init+0x38>
    ee80:	340c      	adds	r4, #12
    ee82:	d005      	beq.n	ee90 <settings_backend_init+0x38>
		k_panic();
    ee84:	4040      	eors	r0, r0
    ee86:	f380 8811 	msr	BASEPRI, r0
    ee8a:	f04f 0004 	mov.w	r0, #4
    ee8e:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
    ee90:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
    ee92:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    ee96:	d223      	bcs.n	eee0 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
    ee98:	9a00      	ldr	r2, [sp, #0]
    ee9a:	2300      	movs	r3, #0
    ee9c:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
    ee9e:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
    eea0:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
    eea2:	4285      	cmp	r5, r0
    eea4:	b29c      	uxth	r4, r3
    eea6:	d303      	bcc.n	eeb0 <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
    eea8:	3301      	adds	r3, #1
    eeaa:	2b08      	cmp	r3, #8
    eeac:	d1f8      	bne.n	eea0 <settings_backend_init+0x48>
    eeae:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    eeb0:	4d0d      	ldr	r5, [pc, #52]	; (eee8 <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
    eeb2:	6853      	ldr	r3, [r2, #4]
    eeb4:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
    eeb6:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    eeb8:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
    eeba:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    eebc:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    eebe:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
    eec0:	f019 f846 	bl	27f50 <settings_nvs_backend_init>
	if (rc) {
    eec4:	4604      	mov	r4, r0
    eec6:	b940      	cbnz	r0, eeda <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
    eec8:	4e08      	ldr	r6, [pc, #32]	; (eeec <settings_backend_init+0x94>)
    eeca:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
    eecc:	4628      	mov	r0, r5
    eece:	f7ff fe6f 	bl	ebb0 <settings_src_register>
	settings_dst_register(&cf->cf_store);
    eed2:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
    eed4:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
    eed6:	f7ff fe79 	bl	ebcc <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
    eeda:	4620      	mov	r0, r4
    eedc:	b004      	add	sp, #16
    eede:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
    eee0:	f06f 0420 	mvn.w	r4, #32
    eee4:	e7f9      	b.n	eeda <settings_backend_init+0x82>
    eee6:	bf00      	nop
    eee8:	200015d4 	.word	0x200015d4
    eeec:	2000018c 	.word	0x2000018c

0000eef0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    eef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    eef4:	4605      	mov	r5, r0
    eef6:	f04f 0320 	mov.w	r3, #32
    eefa:	f3ef 8611 	mrs	r6, BASEPRI
    eefe:	f383 8812 	msr	BASEPRI_MAX, r3
    ef02:	f3bf 8f6f 	isb	sy
	return list->head;
    ef06:	4b0e      	ldr	r3, [pc, #56]	; (ef40 <pm_state_notify+0x50>)
    ef08:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    ef0a:	b19c      	cbz	r4, ef34 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    ef0c:	4f0d      	ldr	r7, [pc, #52]	; (ef44 <pm_state_notify+0x54>)
    ef0e:	f8df 8038 	ldr.w	r8, [pc, #56]	; ef48 <pm_state_notify+0x58>
    ef12:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    ef16:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    ef1a:	2d00      	cmp	r5, #0
    ef1c:	bf08      	it	eq
    ef1e:	4613      	moveq	r3, r2
		if (callback) {
    ef20:	b12b      	cbz	r3, ef2e <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    ef22:	f898 2014 	ldrb.w	r2, [r8, #20]
    ef26:	fb09 f202 	mul.w	r2, r9, r2
    ef2a:	5cb8      	ldrb	r0, [r7, r2]
    ef2c:	4798      	blx	r3
	return node->next;
    ef2e:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    ef30:	2c00      	cmp	r4, #0
    ef32:	d1f0      	bne.n	ef16 <pm_state_notify+0x26>
	__asm__ volatile(
    ef34:	f386 8811 	msr	BASEPRI, r6
    ef38:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    ef3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ef40:	20001614 	.word	0x20001614
    ef44:	2000161c 	.word	0x2000161c
    ef48:	20002c74 	.word	0x20002c74

0000ef4c <atomic_clear_bit.constprop.0>:
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ef4c:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    ef4e:	2301      	movs	r3, #1
    ef50:	f000 001f 	and.w	r0, r0, #31
    ef54:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ef58:	4b07      	ldr	r3, [pc, #28]	; (ef78 <atomic_clear_bit.constprop.0+0x2c>)
    ef5a:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ef5e:	43c0      	mvns	r0, r0
    ef60:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    ef64:	e853 2f00 	ldrex	r2, [r3]
    ef68:	4002      	ands	r2, r0
    ef6a:	e843 2100 	strex	r1, r2, [r3]
    ef6e:	2900      	cmp	r1, #0
    ef70:	d1f8      	bne.n	ef64 <atomic_clear_bit.constprop.0+0x18>
    ef72:	f3bf 8f5b 	dmb	ish
}
    ef76:	4770      	bx	lr
    ef78:	20001628 	.word	0x20001628

0000ef7c <pm_system_resume>:

void pm_system_resume(void)
{
    ef7c:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
    ef7e:	4b1a      	ldr	r3, [pc, #104]	; (efe8 <pm_system_resume+0x6c>)
    ef80:	7d1c      	ldrb	r4, [r3, #20]
    ef82:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    ef86:	f004 031f 	and.w	r3, r4, #31
    ef8a:	2201      	movs	r2, #1
    ef8c:	409a      	lsls	r2, r3
    ef8e:	4b17      	ldr	r3, [pc, #92]	; (efec <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ef90:	0961      	lsrs	r1, r4, #5
    ef92:	43d0      	mvns	r0, r2
    ef94:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    ef98:	e853 1f00 	ldrex	r1, [r3]
    ef9c:	ea01 0500 	and.w	r5, r1, r0
    efa0:	e843 5c00 	strex	ip, r5, [r3]
    efa4:	f1bc 0f00 	cmp.w	ip, #0
    efa8:	d1f6      	bne.n	ef98 <pm_system_resume+0x1c>
    efaa:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    efae:	4211      	tst	r1, r2
    efb0:	d013      	beq.n	efda <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
    efb2:	4b0f      	ldr	r3, [pc, #60]	; (eff0 <pm_system_resume+0x74>)
    efb4:	4d0f      	ldr	r5, [pc, #60]	; (eff4 <pm_system_resume+0x78>)
    efb6:	b18b      	cbz	r3, efdc <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
    efb8:	230c      	movs	r3, #12
    efba:	4363      	muls	r3, r4
    efbc:	18ea      	adds	r2, r5, r3
    efbe:	5ce8      	ldrb	r0, [r5, r3]
    efc0:	7851      	ldrb	r1, [r2, #1]
    efc2:	f01a f9e3 	bl	2938c <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    efc6:	2000      	movs	r0, #0
    efc8:	f7ff ff92 	bl	eef0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    efcc:	230c      	movs	r3, #12
    efce:	435c      	muls	r4, r3
    efd0:	192a      	adds	r2, r5, r4
    efd2:	2300      	movs	r3, #0
    efd4:	512b      	str	r3, [r5, r4]
    efd6:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    efda:	bd38      	pop	{r3, r4, r5, pc}
    efdc:	f383 8811 	msr	BASEPRI, r3
    efe0:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    efe4:	e7ef      	b.n	efc6 <pm_system_resume+0x4a>
    efe6:	bf00      	nop
    efe8:	20002c74 	.word	0x20002c74
    efec:	2000162c 	.word	0x2000162c
    eff0:	0002938d 	.word	0x0002938d
    eff4:	2000161c 	.word	0x2000161c

0000eff8 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    eff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    effc:	4b32      	ldr	r3, [pc, #200]	; (f0c8 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    effe:	4a33      	ldr	r2, [pc, #204]	; (f0cc <pm_system_suspend+0xd4>)
    f000:	7d1c      	ldrb	r4, [r3, #20]
    f002:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f006:	0963      	lsrs	r3, r4, #5
    f008:	ea4f 0983 	mov.w	r9, r3, lsl #2
    f00c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f010:	4e2f      	ldr	r6, [pc, #188]	; (f0d0 <pm_system_suspend+0xd8>)
    f012:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    f016:	f004 081f 	and.w	r8, r4, #31
    f01a:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    f01e:	f013 0f01 	tst.w	r3, #1
{
    f022:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    f024:	d10a      	bne.n	f03c <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    f026:	4601      	mov	r1, r0
    f028:	4620      	mov	r0, r4
    f02a:	f000 f869 	bl	f100 <pm_policy_next_state>
		if (info != NULL) {
    f02e:	b128      	cbz	r0, f03c <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    f030:	c807      	ldmia	r0, {r0, r1, r2}
    f032:	230c      	movs	r3, #12
    f034:	fb03 6304 	mla	r3, r3, r4, r6
    f038:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    f03c:	230c      	movs	r3, #12
    f03e:	4363      	muls	r3, r4
    f040:	18f2      	adds	r2, r6, r3
    f042:	5cf5      	ldrb	r5, [r6, r3]
    f044:	b92d      	cbnz	r5, f052 <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    f046:	4620      	mov	r0, r4
    f048:	f7ff ff80 	bl	ef4c <atomic_clear_bit.constprop.0>
		ret = false;
    f04c:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    f04e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    f052:	1c7b      	adds	r3, r7, #1
    f054:	d00f      	beq.n	f076 <pm_system_suspend+0x7e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    f056:	f8d2 c008 	ldr.w	ip, [r2, #8]
    f05a:	481e      	ldr	r0, [pc, #120]	; (f0d4 <pm_system_suspend+0xdc>)
    f05c:	4a1e      	ldr	r2, [pc, #120]	; (f0d8 <pm_system_suspend+0xe0>)
    f05e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    f062:	2100      	movs	r1, #0
    f064:	2300      	movs	r3, #0
    f066:	fbec 0105 	umlal	r0, r1, ip, r5
    f06a:	f7fd f949 	bl	c300 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    f06e:	2101      	movs	r1, #1
    f070:	1a38      	subs	r0, r7, r0
    f072:	f01f fd85 	bl	2eb80 <z_set_timeout_expiry>
	k_sched_lock();
    f076:	f017 f8e5 	bl	26244 <k_sched_lock>
	pm_state_notify(true);
    f07a:	2001      	movs	r0, #1
    f07c:	f7ff ff38 	bl	eef0 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f080:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    f084:	2301      	movs	r3, #1
    f086:	fa03 f808 	lsl.w	r8, r3, r8
    f08a:	4b14      	ldr	r3, [pc, #80]	; (f0dc <pm_system_suspend+0xe4>)
    f08c:	4499      	add	r9, r3
    f08e:	e859 3f00 	ldrex	r3, [r9]
    f092:	ea43 0308 	orr.w	r3, r3, r8
    f096:	e849 3200 	strex	r2, r3, [r9]
    f09a:	2a00      	cmp	r2, #0
    f09c:	d1f7      	bne.n	f08e <pm_system_suspend+0x96>
    f09e:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    f0a2:	4b0f      	ldr	r3, [pc, #60]	; (f0e0 <pm_system_suspend+0xe8>)
    f0a4:	b133      	cbz	r3, f0b4 <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    f0a6:	230c      	movs	r3, #12
    f0a8:	4363      	muls	r3, r4
    f0aa:	18f2      	adds	r2, r6, r3
    f0ac:	5cf0      	ldrb	r0, [r6, r3]
    f0ae:	7851      	ldrb	r1, [r2, #1]
    f0b0:	f01a f960 	bl	29374 <pm_state_set>
	pm_system_resume();
    f0b4:	f7ff ff62 	bl	ef7c <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    f0b8:	4620      	mov	r0, r4
    f0ba:	f7ff ff47 	bl	ef4c <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    f0be:	f017 fa91 	bl	265e4 <k_sched_unlock>
	bool ret = true;
    f0c2:	2001      	movs	r0, #1
    f0c4:	e7c3      	b.n	f04e <pm_system_suspend+0x56>
    f0c6:	bf00      	nop
    f0c8:	20002c74 	.word	0x20002c74
    f0cc:	20001628 	.word	0x20001628
    f0d0:	2000161c 	.word	0x2000161c
    f0d4:	000f423f 	.word	0x000f423f
    f0d8:	000f4240 	.word	0x000f4240
    f0dc:	2000162c 	.word	0x2000162c
    f0e0:	00029375 	.word	0x00029375

0000f0e4 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f0e4:	4b05      	ldr	r3, [pc, #20]	; (f0fc <pm_policy_state_lock_is_active+0x18>)
    f0e6:	f3bf 8f5b 	dmb	ish
    f0ea:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    f0ee:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    f0f2:	3800      	subs	r0, #0
    f0f4:	bf18      	it	ne
    f0f6:	2001      	movne	r0, #1
    f0f8:	4770      	bx	lr
    f0fa:	bf00      	nop
    f0fc:	20001630 	.word	0x20001630

0000f100 <pm_policy_next_state>:
{
    f100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f104:	b085      	sub	sp, #20
    f106:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    f108:	a903      	add	r1, sp, #12
    f10a:	f000 f847 	bl	f19c <pm_state_cpu_get_all>
    f10e:	f8df 8080 	ldr.w	r8, [pc, #128]	; f190 <pm_policy_next_state+0x90>
    f112:	f8df a080 	ldr.w	sl, [pc, #128]	; f194 <pm_policy_next_state+0x94>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    f116:	1e44      	subs	r4, r0, #1
    f118:	b224      	sxth	r4, r4
    f11a:	f04f 0b00 	mov.w	fp, #0
    f11e:	1c63      	adds	r3, r4, #1
    f120:	d104      	bne.n	f12c <pm_policy_next_state+0x2c>
	return NULL;
    f122:	2600      	movs	r6, #0
}
    f124:	4630      	mov	r0, r6
    f126:	b005      	add	sp, #20
    f128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    f12c:	9a03      	ldr	r2, [sp, #12]
    f12e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    f132:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    f136:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    f13a:	f7ff ffd3 	bl	f0e4 <pm_policy_state_lock_is_active>
    f13e:	4605      	mov	r5, r0
    f140:	bb10      	cbnz	r0, f188 <pm_policy_next_state+0x88>
    f142:	6870      	ldr	r0, [r6, #4]
    f144:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    f148:	46c4      	mov	ip, r8
    f14a:	4629      	mov	r1, r5
    f14c:	fbe0 c109 	umlal	ip, r1, r0, r9
    f150:	4652      	mov	r2, sl
    f152:	465b      	mov	r3, fp
    f154:	4660      	mov	r0, ip
    f156:	f7fd f8d3 	bl	c300 <__aeabi_uldivmod>
    f15a:	9001      	str	r0, [sp, #4]
    f15c:	68b0      	ldr	r0, [r6, #8]
    f15e:	46c4      	mov	ip, r8
    f160:	4629      	mov	r1, r5
    f162:	fbe0 c109 	umlal	ip, r1, r0, r9
    f166:	465b      	mov	r3, fp
    f168:	4652      	mov	r2, sl
    f16a:	4660      	mov	r0, ip
    f16c:	f7fd f8c8 	bl	c300 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    f170:	4b09      	ldr	r3, [pc, #36]	; (f198 <pm_policy_next_state+0x98>)
    f172:	681b      	ldr	r3, [r3, #0]
    f174:	1c59      	adds	r1, r3, #1
    f176:	d001      	beq.n	f17c <pm_policy_next_state+0x7c>
    f178:	4283      	cmp	r3, r0
    f17a:	d905      	bls.n	f188 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
    f17c:	1c7a      	adds	r2, r7, #1
    f17e:	d0d1      	beq.n	f124 <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
    f180:	9b01      	ldr	r3, [sp, #4]
    f182:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    f184:	42b8      	cmp	r0, r7
    f186:	d9cd      	bls.n	f124 <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    f188:	3c01      	subs	r4, #1
    f18a:	b224      	sxth	r4, r4
    f18c:	e7c7      	b.n	f11e <pm_policy_next_state+0x1e>
    f18e:	bf00      	nop
    f190:	000f423f 	.word	0x000f423f
    f194:	000f4240 	.word	0x000f4240
    f198:	2000019c 	.word	0x2000019c

0000f19c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    f19c:	b908      	cbnz	r0, f1a2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    f19e:	4b02      	ldr	r3, [pc, #8]	; (f1a8 <pm_state_cpu_get_all+0xc>)
    f1a0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    f1a2:	2000      	movs	r0, #0
    f1a4:	4770      	bx	lr
    f1a6:	bf00      	nop
    f1a8:	0002f364 	.word	0x0002f364

0000f1ac <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    f1ac:	4b01      	ldr	r3, [pc, #4]	; (f1b4 <uECC_get_rng+0x8>)
    f1ae:	6818      	ldr	r0, [r3, #0]
    f1b0:	4770      	bx	lr
    f1b2:	bf00      	nop
    f1b4:	200001a0 	.word	0x200001a0

0000f1b8 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    f1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    f1ba:	2208      	movs	r2, #8
{
    f1bc:	b089      	sub	sp, #36	; 0x24
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    f1be:	f019 f898 	bl	282f2 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    f1c2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    f1c4:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    f1c6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    f1c8:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    f1ca:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    f1cc:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    f1ce:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    f1d0:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    f1d2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    f1d4:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    f1d6:	4613      	mov	r3, r2
    f1d8:	466a      	mov	r2, sp
{
    f1da:	460c      	mov	r4, r1
    f1dc:	4606      	mov	r6, r0
	tmp[0] = tmp[1] = tmp[2] = 0;
    f1de:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    f1e0:	4611      	mov	r1, r2
    f1e2:	4610      	mov	r0, r2
	tmp[0] = tmp[1] = tmp[2] = 0;
    f1e4:	e9cd 7701 	strd	r7, r7, [sp, #4]
    f1e8:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    f1ea:	f018 ff98 	bl	2811e <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    f1ee:	4631      	mov	r1, r6
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    f1f0:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    f1f2:	4630      	mov	r0, r6
    f1f4:	f018 ff93 	bl	2811e <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    f1f8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    f1fa:	9103      	str	r1, [sp, #12]
	tmp[4] = product[13];
    f1fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    f1fe:	9104      	str	r1, [sp, #16]
	tmp[5] = product[14];
    f200:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    f202:	9105      	str	r1, [sp, #20]
	tmp[6] = product[15];
    f204:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    f206:	4405      	add	r5, r0
	tmp[7] = 0;
    f208:	e9cd 1706 	strd	r1, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    f20c:	4610      	mov	r0, r2
    f20e:	4611      	mov	r1, r2
    f210:	f018 ff85 	bl	2811e <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    f214:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    f216:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    f218:	4630      	mov	r0, r6
    f21a:	f018 ff80 	bl	2811e <uECC_vli_add>
    f21e:	4405      	add	r5, r0

	/* s3 */
	tmp[0] = product[8];
    f220:	6a20      	ldr	r0, [r4, #32]
    f222:	9000      	str	r0, [sp, #0]
	tmp[1] = product[9];
    f224:	6a60      	ldr	r0, [r4, #36]	; 0x24
    f226:	9001      	str	r0, [sp, #4]
	tmp[2] = product[10];
    f228:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f22a:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    f22c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    f22e:	9006      	str	r0, [sp, #24]
	tmp[7] = product[15];
    f230:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    f232:	9007      	str	r0, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    f234:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    f236:	e9cd 7704 	strd	r7, r7, [sp, #16]
    f23a:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    f23c:	f018 ff6f 	bl	2811e <uECC_vli_add>
    f240:	4405      	add	r5, r0

	/* s4 */
	tmp[0] = product[9];
    f242:	6a60      	ldr	r0, [r4, #36]	; 0x24
    f244:	9000      	str	r0, [sp, #0]
	tmp[1] = product[10];
    f246:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    f248:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
	tmp[1] = product[10];
    f24c:	9001      	str	r0, [sp, #4]
	tmp[2] = product[11];
    f24e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f250:	9002      	str	r0, [sp, #8]
	tmp[4] = product[14];
    f252:	f8cd c010 	str.w	ip, [sp, #16]
	tmp[3] = product[13];
    f256:	6b60      	ldr	r0, [r4, #52]	; 0x34
	tmp[5] = product[15];
    f258:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    f25c:	9003      	str	r0, [sp, #12]
	tmp[6] = product[13];
    f25e:	e9cd c005 	strd	ip, r0, [sp, #20]
	tmp[7] = product[8];
    f262:	6a20      	ldr	r0, [r4, #32]
    f264:	9007      	str	r0, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    f266:	4630      	mov	r0, r6
    f268:	f018 ff59 	bl	2811e <uECC_vli_add>
    f26c:	4405      	add	r5, r0

	/* d1 */
	tmp[0] = product[11];
    f26e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f270:	9000      	str	r0, [sp, #0]
	tmp[1] = product[12];
    f272:	6b20      	ldr	r0, [r4, #48]	; 0x30
    f274:	9001      	str	r0, [sp, #4]
	tmp[2] = product[13];
    f276:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f278:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    f27a:	6a20      	ldr	r0, [r4, #32]
    f27c:	9006      	str	r0, [sp, #24]
	tmp[7] = product[10];
    f27e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f280:	9007      	str	r0, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    f282:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    f284:	e9cd 7704 	strd	r7, r7, [sp, #16]
    f288:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    f28a:	f019 f865 	bl	28358 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    f28e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    f290:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    f292:	6b63      	ldr	r3, [r4, #52]	; 0x34
    f294:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    f296:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    f298:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    f29a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    f29c:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    f29e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f2a0:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    f2a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    f2a4:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    f2a6:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    f2a8:	2308      	movs	r3, #8
    f2aa:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    f2ac:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    f2b0:	f019 f852 	bl	28358 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    f2b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    f2b6:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    f2b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    f2ba:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    f2bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    f2be:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    f2c0:	6a23      	ldr	r3, [r4, #32]
    f2c2:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    f2c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f2c6:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    f2c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    f2ca:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    f2ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
    f2d0:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    f2d2:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    f2d4:	2308      	movs	r3, #8
    f2d6:	4630      	mov	r0, r6
    f2d8:	f019 f83e 	bl	28358 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    f2dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    f2de:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    f2e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    f2e2:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    f2e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f2e8:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    f2ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f2ec:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    f2ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    f2f0:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    f2f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    f2f6:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    f2f8:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    f2fa:	2308      	movs	r3, #8
    f2fc:	4630      	mov	r0, r6
    f2fe:	f019 f82b 	bl	28358 <uECC_vli_sub>

	if (carry < 0) {
    f302:	1a2d      	subs	r5, r5, r0
    f304:	d410      	bmi.n	f328 <vli_mmod_fast_secp256r1+0x170>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    f306:	4c0d      	ldr	r4, [pc, #52]	; (f33c <vli_mmod_fast_secp256r1+0x184>)
		while (carry || 
    f308:	b935      	cbnz	r5, f318 <vli_mmod_fast_secp256r1+0x160>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    f30a:	2208      	movs	r2, #8
    f30c:	4631      	mov	r1, r6
    f30e:	4620      	mov	r0, r4
    f310:	f018 fffb 	bl	2830a <uECC_vli_cmp_unsafe>
		while (carry || 
    f314:	2801      	cmp	r0, #1
    f316:	d00f      	beq.n	f338 <vli_mmod_fast_secp256r1+0x180>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    f318:	2308      	movs	r3, #8
    f31a:	4622      	mov	r2, r4
    f31c:	4631      	mov	r1, r6
    f31e:	4630      	mov	r0, r6
    f320:	f019 f81a 	bl	28358 <uECC_vli_sub>
    f324:	1a2d      	subs	r5, r5, r0
    f326:	e7ef      	b.n	f308 <vli_mmod_fast_secp256r1+0x150>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    f328:	4a04      	ldr	r2, [pc, #16]	; (f33c <vli_mmod_fast_secp256r1+0x184>)
    f32a:	2308      	movs	r3, #8
    f32c:	4631      	mov	r1, r6
    f32e:	4630      	mov	r0, r6
    f330:	f018 fef5 	bl	2811e <uECC_vli_add>
		while (carry < 0);
    f334:	182d      	adds	r5, r5, r0
    f336:	d4f8      	bmi.n	f32a <vli_mmod_fast_secp256r1+0x172>
		}
	}
}
    f338:	b009      	add	sp, #36	; 0x24
    f33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f33c:	0002f368 	.word	0x0002f368

0000f340 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    f340:	4904      	ldr	r1, [pc, #16]	; (f354 <sub_bytes+0x14>)
    f342:	1e43      	subs	r3, r0, #1
    f344:	300f      	adds	r0, #15
    f346:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    f34a:	5c8a      	ldrb	r2, [r1, r2]
    f34c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    f34e:	4283      	cmp	r3, r0
    f350:	d1f9      	bne.n	f346 <sub_bytes+0x6>
	}
}
    f352:	4770      	bx	lr
    f354:	0003092c 	.word	0x0003092c

0000f358 <tc_aes128_set_encrypt_key>:
{
    f358:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    f35a:	4e26      	ldr	r6, [pc, #152]	; (f3f4 <tc_aes128_set_encrypt_key+0x9c>)
{
    f35c:	4607      	mov	r7, r0
    f35e:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    f360:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    f362:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    f364:	ad01      	add	r5, sp, #4
    f366:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    f368:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    f36a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    f36c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    f370:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    f374:	4638      	mov	r0, r7
    f376:	2f00      	cmp	r7, #0
    f378:	d038      	beq.n	f3ec <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
    f37a:	2c00      	cmp	r4, #0
    f37c:	d038      	beq.n	f3f0 <tc_aes128_set_encrypt_key+0x98>
    f37e:	1f38      	subs	r0, r7, #4
    f380:	4621      	mov	r1, r4
    f382:	4602      	mov	r2, r0
    f384:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    f386:	784b      	ldrb	r3, [r1, #1]
    f388:	780d      	ldrb	r5, [r1, #0]
    f38a:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    f38c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    f390:	78cd      	ldrb	r5, [r1, #3]
    f392:	432b      	orrs	r3, r5
    f394:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
    f396:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    f398:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    f39c:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    f39e:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    f3a2:	d1f0      	bne.n	f386 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    f3a4:	4c14      	ldr	r4, [pc, #80]	; (f3f8 <tc_aes128_set_encrypt_key+0xa0>)
    f3a6:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    f3a8:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    f3aa:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    f3ac:	d116      	bne.n	f3dc <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    f3ae:	f3c3 4207 	ubfx	r2, r3, #16, #8
    f3b2:	5ca5      	ldrb	r5, [r4, r2]
    f3b4:	0e1a      	lsrs	r2, r3, #24
    f3b6:	5ca2      	ldrb	r2, [r4, r2]
    f3b8:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    f3bc:	f3c3 2507 	ubfx	r5, r3, #8, #8
    f3c0:	b2db      	uxtb	r3, r3
    f3c2:	5d65      	ldrb	r5, [r4, r5]
    f3c4:	5ce3      	ldrb	r3, [r4, r3]
    f3c6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    f3ca:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    f3ce:	ad0c      	add	r5, sp, #48	; 0x30
    f3d0:	f021 0303 	bic.w	r3, r1, #3
    f3d4:	442b      	add	r3, r5
    f3d6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    f3da:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    f3dc:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    f3e0:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    f3e2:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    f3e4:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    f3e6:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    f3e8:	d1de      	bne.n	f3a8 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
    f3ea:	2001      	movs	r0, #1
}
    f3ec:	b00d      	add	sp, #52	; 0x34
    f3ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    f3f0:	4620      	mov	r0, r4
    f3f2:	e7fb      	b.n	f3ec <tc_aes128_set_encrypt_key+0x94>
    f3f4:	0002f264 	.word	0x0002f264
    f3f8:	0003092c 	.word	0x0003092c

0000f3fc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    f3fc:	4901      	ldr	r1, [pc, #4]	; (f404 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    f3fe:	2210      	movs	r2, #16
	str	r2, [r1]
    f400:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    f402:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    f404:	e000ed10 	.word	0xe000ed10

0000f408 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    f408:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    f40a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    f40c:	f380 8811 	msr	BASEPRI, r0
	isb
    f410:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    f414:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    f418:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    f41a:	b662      	cpsie	i
	isb
    f41c:	f3bf 8f6f 	isb	sy

	bx	lr
    f420:	4770      	bx	lr
    f422:	bf00      	nop

0000f424 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    f424:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    f426:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    f428:	f381 8811 	msr	BASEPRI, r1

	wfe
    f42c:	bf20      	wfe

	msr	BASEPRI, r0
    f42e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    f432:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    f434:	4770      	bx	lr
    f436:	bf00      	nop

0000f438 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    f438:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    f43a:	2b00      	cmp	r3, #0
    f43c:	db08      	blt.n	f450 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f43e:	2201      	movs	r2, #1
    f440:	f000 001f 	and.w	r0, r0, #31
    f444:	fa02 f000 	lsl.w	r0, r2, r0
    f448:	095b      	lsrs	r3, r3, #5
    f44a:	4a02      	ldr	r2, [pc, #8]	; (f454 <arch_irq_enable+0x1c>)
    f44c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    f450:	4770      	bx	lr
    f452:	bf00      	nop
    f454:	e000e100 	.word	0xe000e100

0000f458 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    f458:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    f45a:	2b00      	cmp	r3, #0
    f45c:	db0d      	blt.n	f47a <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f45e:	2201      	movs	r2, #1
    f460:	095b      	lsrs	r3, r3, #5
    f462:	f000 001f 	and.w	r0, r0, #31
    f466:	fa02 f000 	lsl.w	r0, r2, r0
    f46a:	3320      	adds	r3, #32
    f46c:	4a03      	ldr	r2, [pc, #12]	; (f47c <arch_irq_disable+0x24>)
    f46e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    f472:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    f476:	f3bf 8f6f 	isb	sy
}
    f47a:	4770      	bx	lr
    f47c:	e000e100 	.word	0xe000e100

0000f480 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    f480:	4b05      	ldr	r3, [pc, #20]	; (f498 <arch_irq_is_enabled+0x18>)
    f482:	0942      	lsrs	r2, r0, #5
    f484:	f000 001f 	and.w	r0, r0, #31
    f488:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    f48c:	2301      	movs	r3, #1
    f48e:	fa03 f000 	lsl.w	r0, r3, r0
}
    f492:	4010      	ands	r0, r2
    f494:	4770      	bx	lr
    f496:	bf00      	nop
    f498:	e000e100 	.word	0xe000e100

0000f49c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    f49c:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    f49e:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f4a0:	bfa8      	it	ge
    f4a2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    f4a6:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f4aa:	bfb8      	it	lt
    f4ac:	4b06      	ldrlt	r3, [pc, #24]	; (f4c8 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f4ae:	ea4f 1141 	mov.w	r1, r1, lsl #5
    f4b2:	bfac      	ite	ge
    f4b4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f4b8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f4bc:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f4be:	bfb4      	ite	lt
    f4c0:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f4c2:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    f4c6:	4770      	bx	lr
    f4c8:	e000ed14 	.word	0xe000ed14

0000f4cc <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    f4cc:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    f4ce:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    f4d0:	4b04      	ldr	r3, [pc, #16]	; (f4e4 <_arch_isr_direct_pm+0x18>)
    f4d2:	699a      	ldr	r2, [r3, #24]
    f4d4:	b11a      	cbz	r2, f4de <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    f4d6:	2200      	movs	r2, #0
    f4d8:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
    f4da:	f01f f85a 	bl	2e592 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    f4de:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    f4e0:	bd08      	pop	{r3, pc}
    f4e2:	bf00      	nop
    f4e4:	20002c74 	.word	0x20002c74

0000f4e8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    f4e8:	bf30      	wfi
    b z_SysNmiOnReset
    f4ea:	f7ff bffd 	b.w	f4e8 <z_SysNmiOnReset>
    f4ee:	bf00      	nop

0000f4f0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    f4f0:	4a0b      	ldr	r2, [pc, #44]	; (f520 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    f4f2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    f4f4:	4b0b      	ldr	r3, [pc, #44]	; (f524 <z_arm_prep_c+0x34>)
    f4f6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    f4fa:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    f4fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    f500:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    f504:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    f508:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    f50c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    f510:	f016 f95e 	bl	257d0 <z_bss_zero>
	z_data_copy();
    f514:	f017 f9aa 	bl	2686c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    f518:	f000 f9d0 	bl	f8bc <z_arm_interrupt_init>
	z_cstart();
    f51c:	f016 f99c 	bl	25858 <z_cstart>
    f520:	0000c200 	.word	0x0000c200
    f524:	e000ed00 	.word	0xe000ed00

0000f528 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    f528:	4a09      	ldr	r2, [pc, #36]	; (f550 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    f52a:	490a      	ldr	r1, [pc, #40]	; (f554 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    f52c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    f52e:	6809      	ldr	r1, [r1, #0]
    f530:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    f532:	4909      	ldr	r1, [pc, #36]	; (f558 <arch_swap+0x30>)
	_current->arch.basepri = key;
    f534:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    f536:	684b      	ldr	r3, [r1, #4]
    f538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    f53c:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    f53e:	2300      	movs	r3, #0
    f540:	f383 8811 	msr	BASEPRI, r3
    f544:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    f548:	6893      	ldr	r3, [r2, #8]
}
    f54a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    f54c:	4770      	bx	lr
    f54e:	bf00      	nop
    f550:	20002c74 	.word	0x20002c74
    f554:	000307a8 	.word	0x000307a8
    f558:	e000ed00 	.word	0xe000ed00

0000f55c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    f55c:	4912      	ldr	r1, [pc, #72]	; (f5a8 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    f55e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    f560:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    f564:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    f566:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    f56a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    f56e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    f570:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    f574:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    f578:	4f0c      	ldr	r7, [pc, #48]	; (f5ac <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    f57a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    f57e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    f580:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    f582:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    f584:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    f586:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    f588:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    f58a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    f58e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    f590:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    f592:	f000 fa2f 	bl	f9f4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    f596:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    f59a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    f59e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    f5a2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    f5a6:	4770      	bx	lr
    ldr r1, =_kernel
    f5a8:	20002c74 	.word	0x20002c74
    ldr v4, =_SCS_ICSR
    f5ac:	e000ed04 	.word	0xe000ed04

0000f5b0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    f5b0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    f5b4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    f5b6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    f5ba:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    f5be:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    f5c0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    f5c4:	2902      	cmp	r1, #2
    beq _oops
    f5c6:	d0ff      	beq.n	f5c8 <_oops>

0000f5c8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    f5c8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    f5ca:	f019 fdec 	bl	291a6 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    f5ce:	bd01      	pop	{r0, pc}

0000f5d0 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    f5d0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    f5d4:	9b00      	ldr	r3, [sp, #0]
    f5d6:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    f5da:	490a      	ldr	r1, [pc, #40]	; (f604 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    f5dc:	9b01      	ldr	r3, [sp, #4]
    f5de:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    f5e2:	9b02      	ldr	r3, [sp, #8]
    f5e4:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    f5e8:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    f5ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    f5f0:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    f5f4:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    f5f8:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    f5fa:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    f5fc:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    f5fe:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    f600:	4770      	bx	lr
    f602:	bf00      	nop
    f604:	000270dd 	.word	0x000270dd

0000f608 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    f608:	4a09      	ldr	r2, [pc, #36]	; (f630 <z_check_thread_stack_fail+0x28>)
{
    f60a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    f60c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    f60e:	b170      	cbz	r0, f62e <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    f610:	f113 0f16 	cmn.w	r3, #22
    f614:	6e80      	ldr	r0, [r0, #104]	; 0x68
    f616:	d005      	beq.n	f624 <z_check_thread_stack_fail+0x1c>
    f618:	f1a0 0220 	sub.w	r2, r0, #32
    f61c:	429a      	cmp	r2, r3
    f61e:	d805      	bhi.n	f62c <z_check_thread_stack_fail+0x24>
    f620:	4283      	cmp	r3, r0
    f622:	d203      	bcs.n	f62c <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    f624:	4281      	cmp	r1, r0
    f626:	bf28      	it	cs
    f628:	2000      	movcs	r0, #0
    f62a:	4770      	bx	lr
    f62c:	2000      	movs	r0, #0
}
    f62e:	4770      	bx	lr
    f630:	20002c74 	.word	0x20002c74

0000f634 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    f634:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    f636:	4b09      	ldr	r3, [pc, #36]	; (f65c <arch_switch_to_main_thread+0x28>)
    f638:	6098      	str	r0, [r3, #8]
{
    f63a:	460d      	mov	r5, r1
    f63c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    f63e:	f000 f9d9 	bl	f9f4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    f642:	4620      	mov	r0, r4
    f644:	f385 8809 	msr	PSP, r5
    f648:	2100      	movs	r1, #0
    f64a:	b663      	cpsie	if
    f64c:	f381 8811 	msr	BASEPRI, r1
    f650:	f3bf 8f6f 	isb	sy
    f654:	2200      	movs	r2, #0
    f656:	2300      	movs	r3, #0
    f658:	f017 fd40 	bl	270dc <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    f65c:	20002c74 	.word	0x20002c74

0000f660 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    f660:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    f662:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    f664:	4a0b      	ldr	r2, [pc, #44]	; (f694 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    f666:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    f668:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    f66a:	bf1e      	ittt	ne
	movne	r1, #0
    f66c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    f66e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    f670:	f01e ff8f 	blne	2e592 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    f674:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    f676:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    f67a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    f67e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    f682:	4905      	ldr	r1, [pc, #20]	; (f698 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    f684:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    f686:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    f688:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    f68a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    f68e:	4903      	ldr	r1, [pc, #12]	; (f69c <_isr_wrapper+0x3c>)
	bx r1
    f690:	4708      	bx	r1
    f692:	0000      	.short	0x0000
	ldr r2, =_kernel
    f694:	20002c74 	.word	0x20002c74
	ldr r1, =_sw_isr_table
    f698:	0002eff8 	.word	0x0002eff8
	ldr r1, =z_arm_int_exit
    f69c:	0000f6a1 	.word	0x0000f6a1

0000f6a0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    f6a0:	4b04      	ldr	r3, [pc, #16]	; (f6b4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    f6a2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    f6a4:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    f6a6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    f6a8:	d003      	beq.n	f6b2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    f6aa:	4903      	ldr	r1, [pc, #12]	; (f6b8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    f6ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    f6b0:	600a      	str	r2, [r1, #0]

0000f6b2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    f6b2:	4770      	bx	lr
	ldr r3, =_kernel
    f6b4:	20002c74 	.word	0x20002c74
	ldr r1, =_SCS_ICSR
    f6b8:	e000ed04 	.word	0xe000ed04

0000f6bc <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    f6bc:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    f6be:	4b1c      	ldr	r3, [pc, #112]	; (f730 <mem_manage_fault+0x74>)
{
    f6c0:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    f6c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    f6c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    f6c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    f6c8:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    f6ca:	0790      	lsls	r0, r2, #30
    f6cc:	d520      	bpl.n	f710 <mem_manage_fault+0x54>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    f6ce:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    f6d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f6d2:	0612      	lsls	r2, r2, #24
    f6d4:	d51c      	bpl.n	f710 <mem_manage_fault+0x54>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    f6d6:	b119      	cbz	r1, f6e0 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    f6d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f6da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    f6de:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    f6e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    f6e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    f6e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f6e6:	06d2      	lsls	r2, r2, #27
    f6e8:	d415      	bmi.n	f716 <mem_manage_fault+0x5a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    f6ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    f6ec:	079b      	lsls	r3, r3, #30
    f6ee:	d412      	bmi.n	f716 <mem_manage_fault+0x5a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    f6f0:	2000      	movs	r0, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    f6f2:	4b0f      	ldr	r3, [pc, #60]	; (f730 <mem_manage_fault+0x74>)
    f6f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f6f6:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    f6f8:	bf42      	ittt	mi
    f6fa:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    f6fc:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    f700:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    f702:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f704:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    f708:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    f70a:	2300      	movs	r3, #0
    f70c:	7023      	strb	r3, [r4, #0]

	return reason;
}
    f70e:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    f710:	f06f 0015 	mvn.w	r0, #21
    f714:	e7e4      	b.n	f6e0 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    f716:	4b06      	ldr	r3, [pc, #24]	; (f730 <mem_manage_fault+0x74>)
    f718:	685b      	ldr	r3, [r3, #4]
    f71a:	0519      	lsls	r1, r3, #20
    f71c:	d5e8      	bpl.n	f6f0 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    f71e:	4629      	mov	r1, r5
    f720:	f7ff ff72 	bl	f608 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    f724:	2800      	cmp	r0, #0
    f726:	d0e3      	beq.n	f6f0 <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    f728:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    f72c:	2002      	movs	r0, #2
    f72e:	e7e0      	b.n	f6f2 <mem_manage_fault+0x36>
    f730:	e000ed00 	.word	0xe000ed00

0000f734 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    f734:	4b0d      	ldr	r3, [pc, #52]	; (f76c <bus_fault.constprop.0+0x38>)
    f736:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    f738:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    f73a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f73c:	0592      	lsls	r2, r2, #22
    f73e:	d508      	bpl.n	f752 <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    f740:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    f742:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f744:	0412      	lsls	r2, r2, #16
    f746:	d504      	bpl.n	f752 <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    f748:	b118      	cbz	r0, f752 <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    f74a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f74c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    f750:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    f752:	4b06      	ldr	r3, [pc, #24]	; (f76c <bus_fault.constprop.0+0x38>)
    f754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    f756:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f758:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    f75a:	bf58      	it	pl
    f75c:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    f75e:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    f760:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    f762:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    f766:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    f768:	7008      	strb	r0, [r1, #0]

	return reason;
}
    f76a:	4770      	bx	lr
    f76c:	e000ed00 	.word	0xe000ed00

0000f770 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    f770:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    f772:	4b48      	ldr	r3, [pc, #288]	; (f894 <z_arm_fault+0x124>)
    f774:	685b      	ldr	r3, [r3, #4]
{
    f776:	b08a      	sub	sp, #40	; 0x28
    f778:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    f77a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    f77e:	2600      	movs	r6, #0
    f780:	f386 8811 	msr	BASEPRI, r6
    f784:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    f788:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    f78c:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    f790:	d111      	bne.n	f7b6 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    f792:	f002 010c 	and.w	r1, r2, #12
    f796:	2908      	cmp	r1, #8
    f798:	d00d      	beq.n	f7b6 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    f79a:	0711      	lsls	r1, r2, #28
    f79c:	d401      	bmi.n	f7a2 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    f79e:	4605      	mov	r5, r0
			*nested_exc = true;
    f7a0:	2601      	movs	r6, #1
	*recoverable = false;
    f7a2:	2200      	movs	r2, #0
	switch (fault) {
    f7a4:	3b03      	subs	r3, #3
	*recoverable = false;
    f7a6:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    f7aa:	2b03      	cmp	r3, #3
    f7ac:	d86b      	bhi.n	f886 <z_arm_fault+0x116>
    f7ae:	e8df f003 	tbb	[pc, r3]
    f7b2:	5504      	.short	0x5504
    f7b4:	5d59      	.short	0x5d59
		return NULL;
    f7b6:	4635      	mov	r5, r6
    f7b8:	e7f3      	b.n	f7a2 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    f7ba:	4b36      	ldr	r3, [pc, #216]	; (f894 <z_arm_fault+0x124>)
    f7bc:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    f7be:	f014 0402 	ands.w	r4, r4, #2
    f7c2:	d160      	bne.n	f886 <z_arm_fault+0x116>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    f7c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f7c6:	2a00      	cmp	r2, #0
    f7c8:	db15      	blt.n	f7f6 <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    f7ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f7cc:	0052      	lsls	r2, r2, #1
    f7ce:	d512      	bpl.n	f7f6 <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
    f7d0:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    f7d2:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    f7d6:	f64d 7202 	movw	r2, #57090	; 0xdf02
    f7da:	4291      	cmp	r1, r2
    f7dc:	d00a      	beq.n	f7f4 <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
    f7de:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    f7e2:	b30a      	cbz	r2, f828 <z_arm_fault+0xb8>
			reason = mem_manage_fault(esf, 1, recoverable);
    f7e4:	f10d 0207 	add.w	r2, sp, #7
    f7e8:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    f7ea:	4628      	mov	r0, r5
    f7ec:	f7ff ff66 	bl	f6bc <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    f7f0:	4604      	mov	r4, r0
		break;
    f7f2:	e000      	b.n	f7f6 <z_arm_fault+0x86>
			reason = esf->basic.r0;
    f7f4:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    f7f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f7fa:	b99b      	cbnz	r3, f824 <z_arm_fault+0xb4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    f7fc:	2220      	movs	r2, #32
    f7fe:	4629      	mov	r1, r5
    f800:	a802      	add	r0, sp, #8
    f802:	f019 fda0 	bl	29346 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    f806:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f808:	2e00      	cmp	r6, #0
    f80a:	d03e      	beq.n	f88a <z_arm_fault+0x11a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    f80c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    f810:	b922      	cbnz	r2, f81c <z_arm_fault+0xac>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    f812:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    f816:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    f81a:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    f81c:	a902      	add	r1, sp, #8
    f81e:	4620      	mov	r0, r4
    f820:	f019 fcbf 	bl	291a2 <z_arm_fatal_error>
}
    f824:	b00a      	add	sp, #40	; 0x28
    f826:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    f828:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    f82c:	b12a      	cbz	r2, f83a <z_arm_fault+0xca>
			reason = bus_fault(esf, 1, recoverable);
    f82e:	f10d 0107 	add.w	r1, sp, #7
    f832:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    f834:	f7ff ff7e 	bl	f734 <bus_fault.constprop.0>
    f838:	e7da      	b.n	f7f0 <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
    f83a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    f83c:	b292      	uxth	r2, r2
    f83e:	2a00      	cmp	r2, #0
    f840:	d0d9      	beq.n	f7f6 <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    f842:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    f844:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    f846:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    f848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    f84a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    f84c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    f84e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f850:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    f854:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    f858:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
    f85a:	e7cc      	b.n	f7f6 <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
    f85c:	f10d 0207 	add.w	r2, sp, #7
    f860:	2100      	movs	r1, #0
    f862:	e7c2      	b.n	f7ea <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
    f864:	f10d 0107 	add.w	r1, sp, #7
    f868:	2000      	movs	r0, #0
    f86a:	e7e3      	b.n	f834 <z_arm_fault+0xc4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    f86c:	4b09      	ldr	r3, [pc, #36]	; (f894 <z_arm_fault+0x124>)
    f86e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    f870:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    f872:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    f874:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    f876:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    f878:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    f87a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f87c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    f880:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    f884:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    f886:	2400      	movs	r4, #0
    f888:	e7b5      	b.n	f7f6 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    f88a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    f88e:	f023 0301 	bic.w	r3, r3, #1
    f892:	e7c2      	b.n	f81a <z_arm_fault+0xaa>
    f894:	e000ed00 	.word	0xe000ed00

0000f898 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    f898:	4a02      	ldr	r2, [pc, #8]	; (f8a4 <z_arm_fault_init+0xc>)
    f89a:	6953      	ldr	r3, [r2, #20]
    f89c:	f043 0310 	orr.w	r3, r3, #16
    f8a0:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    f8a2:	4770      	bx	lr
    f8a4:	e000ed00 	.word	0xe000ed00

0000f8a8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    f8a8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    f8ac:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    f8b0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    f8b2:	4672      	mov	r2, lr
	bl z_arm_fault
    f8b4:	f7ff ff5c 	bl	f770 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    f8b8:	bd01      	pop	{r0, pc}
    f8ba:	bf00      	nop

0000f8bc <z_arm_interrupt_init>:
    f8bc:	4804      	ldr	r0, [pc, #16]	; (f8d0 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    f8be:	2300      	movs	r3, #0
    f8c0:	2120      	movs	r1, #32
    f8c2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    f8c4:	3301      	adds	r3, #1
    f8c6:	2b30      	cmp	r3, #48	; 0x30
    f8c8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    f8cc:	d1f9      	bne.n	f8c2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    f8ce:	4770      	bx	lr
    f8d0:	e000e100 	.word	0xe000e100

0000f8d4 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    f8d4:	2000      	movs	r0, #0
    msr CONTROL, r0
    f8d6:	f380 8814 	msr	CONTROL, r0
    isb
    f8da:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    f8de:	f01f faf1 	bl	2eec4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    f8e2:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    f8e4:	490d      	ldr	r1, [pc, #52]	; (f91c <__start+0x48>)
    str r0, [r1]
    f8e6:	6008      	str	r0, [r1, #0]
    dsb
    f8e8:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    f8ec:	480c      	ldr	r0, [pc, #48]	; (f920 <__start+0x4c>)
    msr msp, r0
    f8ee:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    f8f2:	f000 f82b 	bl	f94c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    f8f6:	2020      	movs	r0, #32
    msr BASEPRI, r0
    f8f8:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    f8fc:	4809      	ldr	r0, [pc, #36]	; (f924 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    f8fe:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    f902:	1840      	adds	r0, r0, r1
    msr PSP, r0
    f904:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    f908:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    f90c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    f90e:	4308      	orrs	r0, r1
    msr CONTROL, r0
    f910:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    f914:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    f918:	f7ff fdea 	bl	f4f0 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    f91c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    f920:	20004780 	.word	0x20004780
    ldr r0, =z_interrupt_stacks
    f924:	20004900 	.word	0x20004900

0000f928 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    f928:	4907      	ldr	r1, [pc, #28]	; (f948 <z_arm_clear_arm_mpu_config+0x20>)
    f92a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    f92e:	2300      	movs	r3, #0
	int num_regions =
    f930:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    f934:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    f936:	4293      	cmp	r3, r2
    f938:	d100      	bne.n	f93c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    f93a:	4770      	bx	lr
  MPU->RNR = rnr;
    f93c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    f940:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    f944:	3301      	adds	r3, #1
    f946:	e7f6      	b.n	f936 <z_arm_clear_arm_mpu_config+0xe>
    f948:	e000ed00 	.word	0xe000ed00

0000f94c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    f94c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    f94e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    f950:	2300      	movs	r3, #0
    f952:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    f956:	f7ff ffe7 	bl	f928 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    f95a:	4b14      	ldr	r3, [pc, #80]	; (f9ac <z_arm_init_arch_hw_at_boot+0x60>)
    f95c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f960:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    f964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    f968:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    f96c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    f970:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    f974:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    f978:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    f97c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    f980:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    f984:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    f988:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    f98c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    f990:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    f994:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    f998:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    f99c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    f9a0:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    f9a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    f9a6:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    f9aa:	bd08      	pop	{r3, pc}
    f9ac:	e000e100 	.word	0xe000e100

0000f9b0 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    f9b0:	4b08      	ldr	r3, [pc, #32]	; (f9d4 <z_impl_k_thread_abort+0x24>)
    f9b2:	689b      	ldr	r3, [r3, #8]
    f9b4:	4283      	cmp	r3, r0
    f9b6:	d10b      	bne.n	f9d0 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    f9b8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    f9bc:	b143      	cbz	r3, f9d0 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    f9be:	4b06      	ldr	r3, [pc, #24]	; (f9d8 <z_impl_k_thread_abort+0x28>)
    f9c0:	685a      	ldr	r2, [r3, #4]
    f9c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    f9c6:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    f9c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f9ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    f9ce:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    f9d0:	f016 bee8 	b.w	267a4 <z_thread_abort>
    f9d4:	20002c74 	.word	0x20002c74
    f9d8:	e000ed00 	.word	0xe000ed00

0000f9dc <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    f9dc:	4b02      	ldr	r3, [pc, #8]	; (f9e8 <z_arm_configure_static_mpu_regions+0xc>)
    f9de:	4a03      	ldr	r2, [pc, #12]	; (f9ec <z_arm_configure_static_mpu_regions+0x10>)
    f9e0:	4803      	ldr	r0, [pc, #12]	; (f9f0 <z_arm_configure_static_mpu_regions+0x14>)
    f9e2:	2101      	movs	r1, #1
    f9e4:	f000 b86e 	b.w	fac4 <arm_core_mpu_configure_static_mpu_regions>
    f9e8:	20040000 	.word	0x20040000
    f9ec:	20000000 	.word	0x20000000
    f9f0:	0002f414 	.word	0x0002f414

0000f9f4 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    f9f4:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    f9f6:	4b05      	ldr	r3, [pc, #20]	; (fa0c <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    f9f8:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    f9fa:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    f9fc:	4a04      	ldr	r2, [pc, #16]	; (fa10 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    f9fe:	2120      	movs	r1, #32
    fa00:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    fa04:	4618      	mov	r0, r3
    fa06:	2101      	movs	r1, #1
    fa08:	f000 b866 	b.w	fad8 <arm_core_mpu_configure_dynamic_mpu_regions>
    fa0c:	2000164c 	.word	0x2000164c
    fa10:	150b0000 	.word	0x150b0000

0000fa14 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    fa14:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    fa16:	4f1f      	ldr	r7, [pc, #124]	; (fa94 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    fa18:	2600      	movs	r6, #0
    fa1a:	428e      	cmp	r6, r1
    fa1c:	db01      	blt.n	fa22 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    fa1e:	4610      	mov	r0, r2
    fa20:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    fa22:	6844      	ldr	r4, [r0, #4]
    fa24:	b39c      	cbz	r4, fa8e <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
    fa26:	b153      	cbz	r3, fa3e <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    fa28:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    fa2c:	ea14 0f0c 	tst.w	r4, ip
    fa30:	d118      	bne.n	fa64 <mpu_configure_regions+0x50>
		&&
    fa32:	2c1f      	cmp	r4, #31
    fa34:	d916      	bls.n	fa64 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    fa36:	6805      	ldr	r5, [r0, #0]
		&&
    fa38:	ea1c 0f05 	tst.w	ip, r5
    fa3c:	d112      	bne.n	fa64 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    fa3e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    fa40:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    fa42:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    fa46:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    fa48:	d90f      	bls.n	fa6a <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
    fa4a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    fa4e:	d80e      	bhi.n	fa6e <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    fa50:	3c01      	subs	r4, #1
    fa52:	fab4 f484 	clz	r4, r4
    fa56:	f1c4 041f 	rsb	r4, r4, #31
    fa5a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    fa5c:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    fa5e:	ea4c 0404 	orr.w	r4, ip, r4
    fa62:	d906      	bls.n	fa72 <mpu_configure_regions+0x5e>
			return -EINVAL;
    fa64:	f06f 0215 	mvn.w	r2, #21
    fa68:	e7d9      	b.n	fa1e <mpu_configure_regions+0xa>
		return REGION_32B;
    fa6a:	2408      	movs	r4, #8
    fa6c:	e7f6      	b.n	fa5c <mpu_configure_regions+0x48>
		return REGION_4G;
    fa6e:	243e      	movs	r4, #62	; 0x3e
    fa70:	e7f4      	b.n	fa5c <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    fa72:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    fa76:	4315      	orrs	r5, r2
    fa78:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    fa7c:	f044 0401 	orr.w	r4, r4, #1
    fa80:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    fa84:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    fa88:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    fa8a:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    fa8e:	3601      	adds	r6, #1
    fa90:	300c      	adds	r0, #12
    fa92:	e7c2      	b.n	fa1a <mpu_configure_regions+0x6>
    fa94:	e000ed00 	.word	0xe000ed00

0000fa98 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    fa98:	4b04      	ldr	r3, [pc, #16]	; (faac <arm_core_mpu_enable+0x14>)
    fa9a:	2205      	movs	r2, #5
    fa9c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    faa0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    faa4:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    faa8:	4770      	bx	lr
    faaa:	bf00      	nop
    faac:	e000ed00 	.word	0xe000ed00

0000fab0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    fab0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    fab4:	4b02      	ldr	r3, [pc, #8]	; (fac0 <arm_core_mpu_disable+0x10>)
    fab6:	2200      	movs	r2, #0
    fab8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    fabc:	4770      	bx	lr
    fabe:	bf00      	nop
    fac0:	e000ed00 	.word	0xe000ed00

0000fac4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    fac4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    fac6:	4c03      	ldr	r4, [pc, #12]	; (fad4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    fac8:	2301      	movs	r3, #1
    faca:	7822      	ldrb	r2, [r4, #0]
    facc:	f7ff ffa2 	bl	fa14 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    fad0:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    fad2:	bd10      	pop	{r4, pc}
    fad4:	20002cd9 	.word	0x20002cd9

0000fad8 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    fad8:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    fada:	4a09      	ldr	r2, [pc, #36]	; (fb00 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    fadc:	2300      	movs	r3, #0
    fade:	7812      	ldrb	r2, [r2, #0]
    fae0:	f7ff ff98 	bl	fa14 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    fae4:	f110 0f16 	cmn.w	r0, #22
    fae8:	d002      	beq.n	faf0 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
    faea:	4a06      	ldr	r2, [pc, #24]	; (fb04 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    faec:	2807      	cmp	r0, #7
    faee:	dd00      	ble.n	faf2 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    faf0:	bd08      	pop	{r3, pc}
    faf2:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    faf6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    fafa:	3001      	adds	r0, #1
    fafc:	e7f6      	b.n	faec <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    fafe:	bf00      	nop
    fb00:	20002cd9 	.word	0x20002cd9
    fb04:	e000ed00 	.word	0xe000ed00

0000fb08 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    fb08:	4914      	ldr	r1, [pc, #80]	; (fb5c <z_arm_mpu_init+0x54>)
    fb0a:	6808      	ldr	r0, [r1, #0]
    fb0c:	2808      	cmp	r0, #8
{
    fb0e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    fb10:	d821      	bhi.n	fb56 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    fb12:	f7ff ffcd 	bl	fab0 <arm_core_mpu_disable>
    fb16:	4c12      	ldr	r4, [pc, #72]	; (fb60 <z_arm_mpu_init+0x58>)
    fb18:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    fb1a:	2200      	movs	r2, #0
    fb1c:	4290      	cmp	r0, r2
    fb1e:	f101 010c 	add.w	r1, r1, #12
    fb22:	d105      	bne.n	fb30 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    fb24:	4b0f      	ldr	r3, [pc, #60]	; (fb64 <z_arm_mpu_init+0x5c>)
    fb26:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    fb28:	f7ff ffb6 	bl	fa98 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    fb2c:	2000      	movs	r0, #0
}
    fb2e:	bd10      	pop	{r4, pc}
    fb30:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    fb34:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    fb38:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    fb3c:	4313      	orrs	r3, r2
    fb3e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    fb42:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    fb46:	f851 3c04 	ldr.w	r3, [r1, #-4]
    fb4a:	f043 0301 	orr.w	r3, r3, #1
    fb4e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    fb52:	3201      	adds	r2, #1
    fb54:	e7e2      	b.n	fb1c <z_arm_mpu_init+0x14>
		return -1;
    fb56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    fb5a:	e7e8      	b.n	fb2e <z_arm_mpu_init+0x26>
    fb5c:	0002f420 	.word	0x0002f420
    fb60:	e000ed00 	.word	0xe000ed00
    fb64:	20002cd9 	.word	0x20002cd9

0000fb68 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    fb68:	4b01      	ldr	r3, [pc, #4]	; (fb70 <__stdout_hook_install+0x8>)
    fb6a:	6018      	str	r0, [r3, #0]
}
    fb6c:	4770      	bx	lr
    fb6e:	bf00      	nop
    fb70:	200001a4 	.word	0x200001a4

0000fb74 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    fb74:	b510      	push	{r4, lr}
	__asm__ volatile(
    fb76:	f04f 0320 	mov.w	r3, #32
    fb7a:	f3ef 8011 	mrs	r0, BASEPRI
    fb7e:	f383 8812 	msr	BASEPRI_MAX, r3
    fb82:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    fb86:	4a11      	ldr	r2, [pc, #68]	; (fbcc <nordicsemi_nrf52_init+0x58>)
    fb88:	2301      	movs	r3, #1
    fb8a:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    fb8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    fb92:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    fb96:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    fb9a:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    fb9e:	2c08      	cmp	r4, #8
    fba0:	d108      	bne.n	fbb4 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    fba2:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    fba6:	2905      	cmp	r1, #5
    fba8:	d804      	bhi.n	fbb4 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    fbaa:	4c09      	ldr	r4, [pc, #36]	; (fbd0 <nordicsemi_nrf52_init+0x5c>)
    fbac:	5c61      	ldrb	r1, [r4, r1]
    fbae:	b109      	cbz	r1, fbb4 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    fbb0:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    fbb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    fbb8:	2201      	movs	r2, #1
    fbba:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    fbbe:	f380 8811 	msr	BASEPRI, r0
    fbc2:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    fbc6:	2000      	movs	r0, #0
    fbc8:	bd10      	pop	{r4, pc}
    fbca:	bf00      	nop
    fbcc:	4001e000 	.word	0x4001e000
    fbd0:	00030a3b 	.word	0x00030a3b

0000fbd4 <sys_arch_reboot>:
    *p_gpregret = val;
    fbd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    fbd8:	b2c0      	uxtb	r0, r0
    fbda:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    fbde:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    fbe2:	4905      	ldr	r1, [pc, #20]	; (fbf8 <sys_arch_reboot+0x24>)
    fbe4:	4b05      	ldr	r3, [pc, #20]	; (fbfc <sys_arch_reboot+0x28>)
    fbe6:	68ca      	ldr	r2, [r1, #12]
    fbe8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    fbec:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    fbee:	60cb      	str	r3, [r1, #12]
    fbf0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    fbf4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    fbf6:	e7fd      	b.n	fbf4 <sys_arch_reboot+0x20>
    fbf8:	e000ed00 	.word	0xe000ed00
    fbfc:	05fa0004 	.word	0x05fa0004

0000fc00 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    fc00:	b120      	cbz	r0, fc0c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    fc02:	4b03      	ldr	r3, [pc, #12]	; (fc10 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    fc04:	0180      	lsls	r0, r0, #6
    fc06:	f043 0301 	orr.w	r3, r3, #1
    fc0a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    fc0c:	4770      	bx	lr
    fc0e:	bf00      	nop
    fc10:	0002f2f0 	.word	0x0002f2f0

0000fc14 <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
    fc14:	b570      	push	{r4, r5, r6, lr}
    fc16:	4c21      	ldr	r4, [pc, #132]	; (fc9c <le_gen_dhkey+0x88>)
    fc18:	f3bf 8f5b 	dmb	ish
    fc1c:	6823      	ldr	r3, [r4, #0]
    fc1e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    fc22:	07da      	lsls	r2, r3, #31
{
    fc24:	4606      	mov	r6, r0
    fc26:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    fc28:	d501      	bpl.n	fc2e <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
    fc2a:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
    fc2c:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
    fc2e:	2901      	cmp	r1, #1
    fc30:	d831      	bhi.n	fc96 <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    fc32:	f3bf 8f5b 	dmb	ish
    fc36:	e854 3f00 	ldrex	r3, [r4]
    fc3a:	f043 0202 	orr.w	r2, r3, #2
    fc3e:	e844 2100 	strex	r1, r2, [r4]
    fc42:	2900      	cmp	r1, #0
    fc44:	d1f7      	bne.n	fc36 <le_gen_dhkey+0x22>
    fc46:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    fc4a:	079b      	lsls	r3, r3, #30
    fc4c:	d4ed      	bmi.n	fc2a <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, BT_PUB_KEY_COORD_LEN);
    fc4e:	4814      	ldr	r0, [pc, #80]	; (fca0 <le_gen_dhkey+0x8c>)
    fc50:	4631      	mov	r1, r6
    fc52:	f019 fc0c 	bl	2946e <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[BT_PUB_KEY_COORD_LEN], &key[BT_PUB_KEY_COORD_LEN],
    fc56:	4813      	ldr	r0, [pc, #76]	; (fca4 <le_gen_dhkey+0x90>)
    fc58:	f106 0120 	add.w	r1, r6, #32
    fc5c:	f019 fc07 	bl	2946e <sys_memcpy_swap.constprop.0>
    fc60:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
    fc64:	b175      	cbz	r5, fc84 <le_gen_dhkey+0x70>
    fc66:	e854 3f00 	ldrex	r3, [r4]
    fc6a:	f043 0304 	orr.w	r3, r3, #4
    fc6e:	e844 3200 	strex	r2, r3, [r4]
    fc72:	2a00      	cmp	r2, #0
    fc74:	d1f7      	bne.n	fc66 <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    fc76:	f3bf 8f5b 	dmb	ish
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    fc7a:	480b      	ldr	r0, [pc, #44]	; (fca8 <le_gen_dhkey+0x94>)
    fc7c:	f016 f87c 	bl	25d78 <z_impl_k_sem_give>
    fc80:	2000      	movs	r0, #0
    fc82:	e7d3      	b.n	fc2c <le_gen_dhkey+0x18>
    fc84:	e854 3f00 	ldrex	r3, [r4]
    fc88:	f023 0304 	bic.w	r3, r3, #4
    fc8c:	e844 3200 	strex	r2, r3, [r4]
    fc90:	2a00      	cmp	r2, #0
    fc92:	d0f0      	beq.n	fc76 <le_gen_dhkey+0x62>
    fc94:	e7f6      	b.n	fc84 <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
    fc96:	2012      	movs	r0, #18
    fc98:	e7c8      	b.n	fc2c <le_gen_dhkey+0x18>
    fc9a:	bf00      	nop
    fc9c:	20001658 	.word	0x20001658
    fca0:	20002cfa 	.word	0x20002cfa
    fca4:	20002d1a 	.word	0x20002d1a
    fca8:	20000958 	.word	0x20000958

0000fcac <ecc_thread>:
{
    fcac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    fcb0:	4f60      	ldr	r7, [pc, #384]	; (fe34 <ecc_thread+0x188>)
	return z_impl_k_sem_take(sem, timeout);
    fcb2:	f8df 8184 	ldr.w	r8, [pc, #388]	; fe38 <ecc_thread+0x18c>
    fcb6:	463e      	mov	r6, r7
    fcb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    fcbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fcc0:	4640      	mov	r0, r8
    fcc2:	f016 f87f 	bl	25dc4 <z_impl_k_sem_take>
    fcc6:	f3bf 8f5b 	dmb	ish
    fcca:	683c      	ldr	r4, [r7, #0]
    fccc:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    fcd0:	f014 0401 	ands.w	r4, r4, #1
    fcd4:	d055      	beq.n	fd82 <ecc_thread+0xd6>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    fcd6:	f8df 9164 	ldr.w	r9, [pc, #356]	; fe3c <ecc_thread+0x190>
    fcda:	4c59      	ldr	r4, [pc, #356]	; (fe40 <ecc_thread+0x194>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
    fcdc:	4d59      	ldr	r5, [pc, #356]	; (fe44 <ecc_thread+0x198>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    fcde:	485a      	ldr	r0, [pc, #360]	; (fe48 <ecc_thread+0x19c>)
    fce0:	464a      	mov	r2, r9
    fce2:	4621      	mov	r1, r4
    fce4:	f018 f96f 	bl	27fc6 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    fce8:	2800      	cmp	r0, #0
    fcea:	d03e      	beq.n	fd6a <ecc_thread+0xbe>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
    fcec:	2220      	movs	r2, #32
    fcee:	4629      	mov	r1, r5
    fcf0:	4620      	mov	r0, r4
    fcf2:	f019 fb17 	bl	29324 <memcmp>
    fcf6:	2800      	cmp	r0, #0
    fcf8:	d0f1      	beq.n	fcde <ecc_thread+0x32>
	return 0;
    fcfa:	f04f 0900 	mov.w	r9, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    fcfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    fd02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fd06:	2001      	movs	r0, #1
    fd08:	f000 fa22 	bl	10150 <bt_buf_get_rx>
    fd0c:	f100 0508 	add.w	r5, r0, #8
    fd10:	2102      	movs	r1, #2
    fd12:	4604      	mov	r4, r0
    fd14:	4628      	mov	r0, r5
    fd16:	f01d fb5c 	bl	2d3d2 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    fd1a:	233e      	movs	r3, #62	; 0x3e
    fd1c:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    fd1e:	2342      	movs	r3, #66	; 0x42
    fd20:	7043      	strb	r3, [r0, #1]
    fd22:	2101      	movs	r1, #1
    fd24:	4628      	mov	r0, r5
    fd26:	f01d fb54 	bl	2d3d2 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    fd2a:	2308      	movs	r3, #8
    fd2c:	7003      	strb	r3, [r0, #0]
    fd2e:	2141      	movs	r1, #65	; 0x41
    fd30:	4628      	mov	r0, r5
    fd32:	f01d fb4e 	bl	2d3d2 <net_buf_simple_add>
    fd36:	4605      	mov	r5, r0
	evt->status = status;
    fd38:	f800 9b01 	strb.w	r9, [r0], #1
	if (status) {
    fd3c:	f1b9 0f00 	cmp.w	r9, #0
    fd40:	d016      	beq.n	fd70 <ecc_thread+0xc4>
		(void)memset(evt->key, 0, sizeof(evt->key));
    fd42:	2240      	movs	r2, #64	; 0x40
    fd44:	2100      	movs	r1, #0
    fd46:	f019 fb09 	bl	2935c <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    fd4a:	f3bf 8f5b 	dmb	ish
    fd4e:	e856 3f00 	ldrex	r3, [r6]
    fd52:	f023 0301 	bic.w	r3, r3, #1
    fd56:	e846 3200 	strex	r2, r3, [r6]
    fd5a:	2a00      	cmp	r2, #0
    fd5c:	d1f7      	bne.n	fd4e <ecc_thread+0xa2>
    fd5e:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    fd62:	4620      	mov	r0, r4
	bt_recv(buf);
    fd64:	f000 fdf4 	bl	10950 <bt_recv>
	while (true) {
    fd68:	e7a6      	b.n	fcb8 <ecc_thread+0xc>
			return BT_HCI_ERR_UNSPECIFIED;
    fd6a:	f04f 091f 	mov.w	r9, #31
    fd6e:	e7c6      	b.n	fcfe <ecc_thread+0x52>
		sys_memcpy_swap(evt->key, ecc.public_key_be, BT_PUB_KEY_COORD_LEN);
    fd70:	4935      	ldr	r1, [pc, #212]	; (fe48 <ecc_thread+0x19c>)
    fd72:	f019 fb7c 	bl	2946e <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[BT_PUB_KEY_COORD_LEN],
    fd76:	3120      	adds	r1, #32
    fd78:	f105 0021 	add.w	r0, r5, #33	; 0x21
    fd7c:	f019 fb77 	bl	2946e <sys_memcpy_swap.constprop.0>
    fd80:	e7e3      	b.n	fd4a <ecc_thread+0x9e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    fd82:	f3bf 8f5b 	dmb	ish
    fd86:	683b      	ldr	r3, [r7, #0]
    fd88:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    fd8c:	079b      	lsls	r3, r3, #30
    fd8e:	d593      	bpl.n	fcb8 <ecc_thread+0xc>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
    fd90:	492a      	ldr	r1, [pc, #168]	; (fe3c <ecc_thread+0x190>)
    fd92:	482d      	ldr	r0, [pc, #180]	; (fe48 <ecc_thread+0x19c>)
    fd94:	f018 ffd0 	bl	28d38 <uECC_valid_public_key>
	if (ret < 0) {
    fd98:	2800      	cmp	r0, #0
    fd9a:	db11      	blt.n	fdc0 <ecc_thread+0x114>
    fd9c:	f3bf 8f5b 	dmb	ish
    fda0:	683b      	ldr	r3, [r7, #0]
		ret = uECC_shared_secret(ecc.public_key_be,
    fda2:	4927      	ldr	r1, [pc, #156]	; (fe40 <ecc_thread+0x194>)
    fda4:	4827      	ldr	r0, [pc, #156]	; (fe44 <ecc_thread+0x198>)
    fda6:	f3bf 8f5b 	dmb	ish
    fdaa:	f013 0f04 	tst.w	r3, #4
    fdae:	f101 0220 	add.w	r2, r1, #32
    fdb2:	4b22      	ldr	r3, [pc, #136]	; (fe3c <ecc_thread+0x190>)
    fdb4:	bf18      	it	ne
    fdb6:	4601      	movne	r1, r0
    fdb8:	4610      	mov	r0, r2
    fdba:	f018 f953 	bl	28064 <uECC_shared_secret>
    fdbe:	4604      	mov	r4, r0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    fdc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    fdc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fdc8:	2001      	movs	r0, #1
    fdca:	f000 f9c1 	bl	10150 <bt_buf_get_rx>
    fdce:	f100 0908 	add.w	r9, r0, #8
    fdd2:	2102      	movs	r1, #2
    fdd4:	4605      	mov	r5, r0
    fdd6:	4648      	mov	r0, r9
    fdd8:	f01d fafb 	bl	2d3d2 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    fddc:	233e      	movs	r3, #62	; 0x3e
    fdde:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    fde0:	2322      	movs	r3, #34	; 0x22
    fde2:	7043      	strb	r3, [r0, #1]
    fde4:	2101      	movs	r1, #1
    fde6:	4648      	mov	r0, r9
    fde8:	f01d faf3 	bl	2d3d2 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    fdec:	2309      	movs	r3, #9
    fdee:	7003      	strb	r3, [r0, #0]
    fdf0:	2121      	movs	r1, #33	; 0x21
    fdf2:	4648      	mov	r0, r9
    fdf4:	f01d faed 	bl	2d3d2 <net_buf_simple_add>
    fdf8:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    fdfa:	3001      	adds	r0, #1
    fdfc:	b99c      	cbnz	r4, fe26 <ecc_thread+0x17a>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    fdfe:	221f      	movs	r2, #31
    fe00:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
    fe02:	21ff      	movs	r1, #255	; 0xff
    fe04:	2220      	movs	r2, #32
    fe06:	f019 faa9 	bl	2935c <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    fe0a:	f3bf 8f5b 	dmb	ish
    fe0e:	e856 3f00 	ldrex	r3, [r6]
    fe12:	f023 0302 	bic.w	r3, r3, #2
    fe16:	e846 3200 	strex	r2, r3, [r6]
    fe1a:	2a00      	cmp	r2, #0
    fe1c:	d1f7      	bne.n	fe0e <ecc_thread+0x162>
    fe1e:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    fe22:	4628      	mov	r0, r5
    fe24:	e79e      	b.n	fd64 <ecc_thread+0xb8>
		evt->status = 0U;
    fe26:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    fe28:	4907      	ldr	r1, [pc, #28]	; (fe48 <ecc_thread+0x19c>)
		evt->status = 0U;
    fe2a:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    fe2c:	f019 fb1f 	bl	2946e <sys_memcpy_swap.constprop.0>
    fe30:	e7eb      	b.n	fe0a <ecc_thread+0x15e>
    fe32:	bf00      	nop
    fe34:	20001658 	.word	0x20001658
    fe38:	20000958 	.word	0x20000958
    fe3c:	0002f440 	.word	0x0002f440
    fe40:	20002cda 	.word	0x20002cda
    fe44:	00030a48 	.word	0x00030a48
    fe48:	20002cfa 	.word	0x20002cfa

0000fe4c <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    fe4c:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    fe4e:	7d06      	ldrb	r6, [r0, #20]
    fe50:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    fe52:	b976      	cbnz	r6, fe72 <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    fe54:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    fe56:	881d      	ldrh	r5, [r3, #0]
    fe58:	f242 0226 	movw	r2, #8230	; 0x2026
    fe5c:	4295      	cmp	r5, r2
    fe5e:	d045      	beq.n	feec <bt_hci_ecc_send+0xa0>
    fe60:	d80f      	bhi.n	fe82 <bt_hci_ecc_send+0x36>
    fe62:	f242 0201 	movw	r2, #8193	; 0x2001
    fe66:	4295      	cmp	r5, r2
    fe68:	d04f      	beq.n	ff0a <bt_hci_ecc_send+0xbe>
    fe6a:	f242 0325 	movw	r3, #8229	; 0x2025
    fe6e:	429d      	cmp	r5, r3
    fe70:	d013      	beq.n	fe9a <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    fe72:	4b2a      	ldr	r3, [pc, #168]	; (ff1c <bt_hci_ecc_send+0xd0>)
    fe74:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
    fe78:	4620      	mov	r0, r4
    fe7a:	695b      	ldr	r3, [r3, #20]
}
    fe7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    fe80:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
    fe82:	f242 035e 	movw	r3, #8286	; 0x205e
    fe86:	429d      	cmp	r5, r3
    fe88:	d1f3      	bne.n	fe72 <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
    fe8a:	2103      	movs	r1, #3
    fe8c:	3008      	adds	r0, #8
    fe8e:	f01d fabf 	bl	2d410 <net_buf_simple_pull>
	cmd = (void *)buf->data;
    fe92:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
    fe94:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    fe98:	e02e      	b.n	fef8 <bt_hci_ecc_send+0xac>
    fe9a:	2103      	movs	r1, #3
    fe9c:	3008      	adds	r0, #8
    fe9e:	f01d fab7 	bl	2d410 <net_buf_simple_pull>
	net_buf_unref(buf);
    fea2:	4620      	mov	r0, r4
    fea4:	f013 faf8 	bl	23498 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    fea8:	f3bf 8f5b 	dmb	ish
    feac:	4b1c      	ldr	r3, [pc, #112]	; (ff20 <bt_hci_ecc_send+0xd4>)
    feae:	681a      	ldr	r2, [r3, #0]
    feb0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    feb4:	0792      	lsls	r2, r2, #30
    feb6:	d507      	bpl.n	fec8 <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    feb8:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    feba:	4631      	mov	r1, r6
    febc:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
    fec0:	f019 fab1 	bl	29426 <send_cmd_status>
}
    fec4:	2000      	movs	r0, #0
    fec6:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    fec8:	f3bf 8f5b 	dmb	ish
    fecc:	e853 2f00 	ldrex	r2, [r3]
    fed0:	f042 0101 	orr.w	r1, r2, #1
    fed4:	e843 1000 	strex	r0, r1, [r3]
    fed8:	2800      	cmp	r0, #0
    feda:	d1f7      	bne.n	fecc <bt_hci_ecc_send+0x80>
    fedc:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    fee0:	07d3      	lsls	r3, r2, #31
    fee2:	d4e9      	bmi.n	feb8 <bt_hci_ecc_send+0x6c>
	z_impl_k_sem_give(sem);
    fee4:	480f      	ldr	r0, [pc, #60]	; (ff24 <bt_hci_ecc_send+0xd8>)
    fee6:	f015 ff47 	bl	25d78 <z_impl_k_sem_give>
}
    feea:	e7e6      	b.n	feba <bt_hci_ecc_send+0x6e>
    feec:	2103      	movs	r1, #3
    feee:	3008      	adds	r0, #8
    fef0:	f01d fa8e 	bl	2d410 <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
    fef4:	68a0      	ldr	r0, [r4, #8]
    fef6:	4631      	mov	r1, r6
	status = le_gen_dhkey(cmd->key, cmd->key_type);
    fef8:	f7ff fe8c 	bl	fc14 <le_gen_dhkey>
    fefc:	4606      	mov	r6, r0
	net_buf_unref(buf);
    fefe:	4620      	mov	r0, r4
    ff00:	f013 faca 	bl	23498 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
    ff04:	4631      	mov	r1, r6
    ff06:	4628      	mov	r0, r5
    ff08:	e7da      	b.n	fec0 <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    ff0a:	78da      	ldrb	r2, [r3, #3]
    ff0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    ff10:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    ff12:	791a      	ldrb	r2, [r3, #4]
    ff14:	f022 0201 	bic.w	r2, r2, #1
    ff18:	711a      	strb	r2, [r3, #4]
}
    ff1a:	e7aa      	b.n	fe72 <bt_hci_ecc_send+0x26>
    ff1c:	20000000 	.word	0x20000000
    ff20:	20001658 	.word	0x20001658
    ff24:	20000958 	.word	0x20000958

0000ff28 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    ff28:	b510      	push	{r4, lr}
    ff2a:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    ff2c:	4c0c      	ldr	r4, [pc, #48]	; (ff60 <bt_hci_ecc_init+0x38>)
    ff2e:	490d      	ldr	r1, [pc, #52]	; (ff64 <bt_hci_ecc_init+0x3c>)
    ff30:	2200      	movs	r2, #0
    ff32:	2300      	movs	r3, #0
    ff34:	e9cd 2306 	strd	r2, r3, [sp, #24]
    ff38:	2300      	movs	r3, #0
    ff3a:	220a      	movs	r2, #10
    ff3c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    ff40:	e9cd 3301 	strd	r3, r3, [sp, #4]
    ff44:	9300      	str	r3, [sp, #0]
    ff46:	f44f 628f 	mov.w	r2, #1144	; 0x478
    ff4a:	4b07      	ldr	r3, [pc, #28]	; (ff68 <bt_hci_ecc_init+0x40>)
    ff4c:	4620      	mov	r0, r4
    ff4e:	f015 fd81 	bl	25a54 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    ff52:	4906      	ldr	r1, [pc, #24]	; (ff6c <bt_hci_ecc_init+0x44>)
    ff54:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    ff56:	b008      	add	sp, #32
    ff58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ff5c:	f01e bb14 	b.w	2e588 <z_impl_k_thread_name_set>
    ff60:	20000b08 	.word	0x20000b08
    ff64:	200031a0 	.word	0x200031a0
    ff68:	0000fcad 	.word	0x0000fcad
    ff6c:	00030a41 	.word	0x00030a41

0000ff70 <save_id>:
static void save_id(struct k_work *work)
{
	int err;
	BT_INFO("Saving ID");
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    ff70:	4903      	ldr	r1, [pc, #12]	; (ff80 <save_id+0x10>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    ff72:	4804      	ldr	r0, [pc, #16]	; (ff84 <save_id+0x14>)
    ff74:	79ca      	ldrb	r2, [r1, #7]
    ff76:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    ff7a:	f7fe bdf3 	b.w	eb64 <settings_save_one>
    ff7e:	bf00      	nop
    ff80:	20000000 	.word	0x20000000
    ff84:	00030a68 	.word	0x00030a68

0000ff88 <set>:
{
    ff88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ff8a:	4d1c      	ldr	r5, [pc, #112]	; (fffc <set+0x74>)
    ff8c:	f3bf 8f5b 	dmb	ish
    ff90:	461f      	mov	r7, r3
    ff92:	682b      	ldr	r3, [r5, #0]
    ff94:	f3bf 8f5b 	dmb	ish
    ff98:	4616      	mov	r6, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    ff9a:	07da      	lsls	r2, r3, #31
{
    ff9c:	4604      	mov	r4, r0
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    ff9e:	d403      	bmi.n	ffa8 <set+0x20>
		return 0;
    ffa0:	2400      	movs	r4, #0
}
    ffa2:	4620      	mov	r0, r4
    ffa4:	b003      	add	sp, #12
    ffa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!name) {
    ffa8:	b910      	cbnz	r0, ffb0 <set+0x28>
		return -ENOENT;
    ffaa:	f06f 0401 	mvn.w	r4, #1
    ffae:	e7f8      	b.n	ffa2 <set+0x1a>
	len = settings_name_next(name, &next);
    ffb0:	a901      	add	r1, sp, #4
    ffb2:	f017 feed 	bl	27d90 <settings_name_next>
	if (!strncmp(name, "id", len)) {
    ffb6:	4912      	ldr	r1, [pc, #72]	; (10000 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1>)
	len = settings_name_next(name, &next);
    ffb8:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
    ffba:	4620      	mov	r0, r4
    ffbc:	f019 f9a1 	bl	29302 <strncmp>
    ffc0:	4604      	mov	r4, r0
    ffc2:	2800      	cmp	r0, #0
    ffc4:	d1f1      	bne.n	ffaa <set+0x22>
    ffc6:	f3bf 8f5b 	dmb	ish
    ffca:	682b      	ldr	r3, [r5, #0]
    ffcc:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    ffd0:	071b      	lsls	r3, r3, #28
    ffd2:	d4e5      	bmi.n	ffa0 <set+0x18>
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    ffd4:	3dcc      	subs	r5, #204	; 0xcc
    ffd6:	2207      	movs	r2, #7
    ffd8:	4629      	mov	r1, r5
    ffda:	4638      	mov	r0, r7
    ffdc:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    ffde:	2806      	cmp	r0, #6
    ffe0:	d806      	bhi.n	fff0 <set+0x68>
			(void)memset(bt_dev.id_addr, 0,
    ffe2:	2207      	movs	r2, #7
    ffe4:	4621      	mov	r1, r4
    ffe6:	4628      	mov	r0, r5
    ffe8:	f019 f9b8 	bl	2935c <memset>
			bt_dev.id_count = 0U;
    ffec:	71ec      	strb	r4, [r5, #7]
    ffee:	e7d8      	b.n	ffa2 <set+0x1a>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    fff0:	2307      	movs	r3, #7
    fff2:	fbb0 f0f3 	udiv	r0, r0, r3
    fff6:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    fff8:	e7d3      	b.n	ffa2 <set+0x1a>
    fffa:	bf00      	nop
    fffc:	200000cc 	.word	0x200000cc
   10000:	00030a6b 	.word	0x00030a6b

00010004 <bt_settings_encode_key>:
{
   10004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10008:	b088      	sub	sp, #32
		snprintk(path, path_size,
   1000a:	799c      	ldrb	r4, [r3, #6]
{
   1000c:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   10010:	795d      	ldrb	r5, [r3, #5]
   10012:	791e      	ldrb	r6, [r3, #4]
   10014:	78df      	ldrb	r7, [r3, #3]
   10016:	f893 c002 	ldrb.w	ip, [r3, #2]
   1001a:	f893 e001 	ldrb.w	lr, [r3, #1]
   1001e:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   10020:	f1b8 0f00 	cmp.w	r8, #0
   10024:	d00e      	beq.n	10044 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   10026:	e9cd 3806 	strd	r3, r8, [sp, #24]
   1002a:	e9cd ce04 	strd	ip, lr, [sp, #16]
   1002e:	4613      	mov	r3, r2
   10030:	e9cd 6702 	strd	r6, r7, [sp, #8]
   10034:	e9cd 4500 	strd	r4, r5, [sp]
   10038:	4a08      	ldr	r2, [pc, #32]	; (1005c <bt_settings_encode_key+0x58>)
   1003a:	f016 ff72 	bl	26f22 <snprintk>
}
   1003e:	b008      	add	sp, #32
   10040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   10044:	e9cd e305 	strd	lr, r3, [sp, #20]
   10048:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   1004c:	4613      	mov	r3, r2
   1004e:	e9cd 5601 	strd	r5, r6, [sp, #4]
   10052:	4a03      	ldr	r2, [pc, #12]	; (10060 <bt_settings_encode_key+0x5c>)
   10054:	9400      	str	r4, [sp, #0]
   10056:	f016 ff64 	bl	26f22 <snprintk>
}
   1005a:	e7f0      	b.n	1003e <bt_settings_encode_key+0x3a>
   1005c:	00030a6e 	.word	0x00030a6e
   10060:	00030a92 	.word	0x00030a92

00010064 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   10064:	4801      	ldr	r0, [pc, #4]	; (1006c <bt_settings_save_id+0x8>)
   10066:	f015 bff3 	b.w	26050 <k_work_submit>
   1006a:	bf00      	nop
   1006c:	200001a8 	.word	0x200001a8

00010070 <commit>:
}

static int commit(void)
{
   10070:	b570      	push	{r4, r5, r6, lr}
   10072:	4c1b      	ldr	r4, [pc, #108]	; (100e0 <commit+0x70>)
   10074:	f3bf 8f5b 	dmb	ish
   10078:	6823      	ldr	r3, [r4, #0]
   1007a:	f3bf 8f5b 	dmb	ish
	int err;

	BT_DBG("");

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1007e:	f013 0f01 	tst.w	r3, #1
   10082:	4625      	mov	r5, r4
   10084:	d101      	bne.n	1008a <commit+0x1a>
	/* If any part of the Identity Information of the device has been
	 * generated this Identity needs to be saved persistently.
	 */
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
   10086:	2000      	movs	r0, #0
   10088:	e028      	b.n	100dc <commit+0x6c>
	if (!bt_dev.id_count) {
   1008a:	f814 3cc5 	ldrb.w	r3, [r4, #-197]
   1008e:	f1a4 06cc 	sub.w	r6, r4, #204	; 0xcc
   10092:	b1cb      	cbz	r3, 100c8 <commit+0x58>
   10094:	f3bf 8f5b 	dmb	ish
   10098:	6823      	ldr	r3, [r4, #0]
   1009a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1009e:	075a      	lsls	r2, r3, #29
   100a0:	d401      	bmi.n	100a6 <commit+0x36>
		bt_finalize_init();
   100a2:	f000 fd0b 	bl	10abc <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   100a6:	f3bf 8f5b 	dmb	ish
   100aa:	e855 3f00 	ldrex	r3, [r5]
   100ae:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
   100b2:	e845 2100 	strex	r1, r2, [r5]
   100b6:	2900      	cmp	r1, #0
   100b8:	d1f7      	bne.n	100aa <commit+0x3a>
   100ba:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   100be:	041b      	lsls	r3, r3, #16
   100c0:	d5e1      	bpl.n	10086 <commit+0x16>
		bt_settings_save_id();
   100c2:	f7ff ffcf 	bl	10064 <bt_settings_save_id>
   100c6:	e7de      	b.n	10086 <commit+0x16>
		err = bt_setup_public_id_addr();
   100c8:	f000 ffa0 	bl	1100c <bt_setup_public_id_addr>
		if (err) {
   100cc:	b930      	cbnz	r0, 100dc <commit+0x6c>
	if (!bt_dev.id_count) {
   100ce:	79f3      	ldrb	r3, [r6, #7]
   100d0:	2b00      	cmp	r3, #0
   100d2:	d1df      	bne.n	10094 <commit+0x24>
		err = bt_setup_random_id_addr();
   100d4:	f000 ffda 	bl	1108c <bt_setup_random_id_addr>
		if (err) {
   100d8:	2800      	cmp	r0, #0
   100da:	d0db      	beq.n	10094 <commit+0x24>
	}

	return 0;
}
   100dc:	bd70      	pop	{r4, r5, r6, pc}
   100de:	bf00      	nop
   100e0:	200000cc 	.word	0x200000cc

000100e4 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   100e4:	b430      	push	{r4, r5}
   100e6:	4603      	mov	r3, r0
   100e8:	4608      	mov	r0, r1
	switch (src->type) {
   100ea:	781a      	ldrb	r2, [r3, #0]
   100ec:	2a01      	cmp	r2, #1
   100ee:	d013      	beq.n	10118 <uuid_to_uuid128+0x34>
   100f0:	2a02      	cmp	r2, #2
   100f2:	d026      	beq.n	10142 <uuid_to_uuid128+0x5e>
   100f4:	b972      	cbnz	r2, 10114 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   100f6:	4a15      	ldr	r2, [pc, #84]	; (1014c <uuid_to_uuid128+0x68>)
   100f8:	f102 0410 	add.w	r4, r2, #16
   100fc:	f852 5b04 	ldr.w	r5, [r2], #4
   10100:	f841 5b04 	str.w	r5, [r1], #4
   10104:	42a2      	cmp	r2, r4
   10106:	d1f9      	bne.n	100fc <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
   10108:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
   1010a:	7812      	ldrb	r2, [r2, #0]
   1010c:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
   1010e:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   10110:	0a1b      	lsrs	r3, r3, #8
   10112:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   10114:	bc30      	pop	{r4, r5}
   10116:	4770      	bx	lr
		*dst = uuid128_base;
   10118:	4a0c      	ldr	r2, [pc, #48]	; (1014c <uuid_to_uuid128+0x68>)
   1011a:	f102 0410 	add.w	r4, r2, #16
   1011e:	f852 5b04 	ldr.w	r5, [r2], #4
   10122:	f841 5b04 	str.w	r5, [r1], #4
   10126:	42a2      	cmp	r2, r4
   10128:	d1f9      	bne.n	1011e <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
   1012a:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
   1012c:	7812      	ldrb	r2, [r2, #0]
   1012e:	700a      	strb	r2, [r1, #0]
   10130:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   10134:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
   10136:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   10138:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   1013a:	0a1b      	lsrs	r3, r3, #8
   1013c:	7382      	strb	r2, [r0, #14]
   1013e:	7403      	strb	r3, [r0, #16]
}
   10140:	e7e8      	b.n	10114 <uuid_to_uuid128+0x30>
}
   10142:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   10144:	2211      	movs	r2, #17
   10146:	4619      	mov	r1, r3
   10148:	f019 b8fd 	b.w	29346 <memcpy>
   1014c:	00030ab6 	.word	0x00030ab6

00010150 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   10150:	b538      	push	{r3, r4, r5, lr}
   10152:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   10154:	4805      	ldr	r0, [pc, #20]	; (1016c <bt_buf_get_rx+0x1c>)
   10156:	f01d f8da 	bl	2d30e <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   1015a:	4604      	mov	r4, r0
   1015c:	b120      	cbz	r0, 10168 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   1015e:	2100      	movs	r1, #0
   10160:	3008      	adds	r0, #8
   10162:	f01d f8f3 	bl	2d34c <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   10166:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   10168:	4620      	mov	r0, r4
   1016a:	bd38      	pop	{r3, r4, r5, pc}
   1016c:	20000a80 	.word	0x20000a80

00010170 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   10170:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   10172:	490b      	ldr	r1, [pc, #44]	; (101a0 <bt_buf_get_cmd_complete+0x30>)
{
   10174:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   10176:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
{
   1017a:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   1017c:	b920      	cbnz	r0, 10188 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   1017e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   10182:	2001      	movs	r0, #1
   10184:	f7ff bfe4 	b.w	10150 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   10188:	f01d f8f1 	bl	2d36e <net_buf_ref>
   1018c:	2301      	movs	r3, #1
		buf->len = 0U;
   1018e:	2100      	movs	r1, #0
   10190:	7503      	strb	r3, [r0, #20]
   10192:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   10194:	4604      	mov	r4, r0
   10196:	3008      	adds	r0, #8
   10198:	f01d f8d8 	bl	2d34c <net_buf_simple_reserve>
}
   1019c:	4620      	mov	r0, r4
   1019e:	bd10      	pop	{r4, pc}
   101a0:	20000000 	.word	0x20000000

000101a4 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   101a4:	b570      	push	{r4, r5, r6, lr}
   101a6:	4604      	mov	r4, r0
	switch (evt) {
   101a8:	2c0f      	cmp	r4, #15
{
   101aa:	460d      	mov	r5, r1
   101ac:	4610      	mov	r0, r2
   101ae:	4619      	mov	r1, r3
	switch (evt) {
   101b0:	d805      	bhi.n	101be <bt_buf_get_evt+0x1a>
   101b2:	2c0d      	cmp	r4, #13
   101b4:	d912      	bls.n	101dc <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   101b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   101ba:	f7ff bfd9 	b.w	10170 <bt_buf_get_cmd_complete>
	switch (evt) {
   101be:	2c13      	cmp	r4, #19
   101c0:	d10c      	bne.n	101dc <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   101c2:	480b      	ldr	r0, [pc, #44]	; (101f0 <bt_buf_get_evt+0x4c>)
   101c4:	f01d f8a3 	bl	2d30e <net_buf_alloc_fixed>
			if (buf) {
   101c8:	4604      	mov	r4, r0
   101ca:	b128      	cbz	r0, 101d8 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   101cc:	2100      	movs	r1, #0
   101ce:	3008      	adds	r0, #8
   101d0:	f01d f8bc 	bl	2d34c <net_buf_simple_reserve>
   101d4:	2301      	movs	r3, #1
   101d6:	7523      	strb	r3, [r4, #20]
}
   101d8:	4620      	mov	r0, r4
   101da:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   101dc:	4602      	mov	r2, r0
   101de:	460b      	mov	r3, r1
		if (discardable) {
   101e0:	b10d      	cbz	r5, 101e6 <bt_buf_get_evt+0x42>
   101e2:	4804      	ldr	r0, [pc, #16]	; (101f4 <bt_buf_get_evt+0x50>)
   101e4:	e7ee      	b.n	101c4 <bt_buf_get_evt+0x20>
}
   101e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   101ea:	2001      	movs	r0, #1
   101ec:	f7ff bfb0 	b.w	10150 <bt_buf_get_rx>
   101f0:	20000aac 	.word	0x20000aac
   101f4:	200009fc 	.word	0x200009fc

000101f8 <hci_disconn_complete_prio>:
{
   101f8:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   101fa:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   101fc:	781a      	ldrb	r2, [r3, #0]
   101fe:	b972      	cbnz	r2, 1021e <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   10200:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   10204:	4620      	mov	r0, r4
   10206:	f001 fc93 	bl	11b30 <bt_conn_lookup_handle>
	if (!conn) {
   1020a:	4605      	mov	r5, r0
   1020c:	b940      	cbnz	r0, 10220 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   1020e:	4b08      	ldr	r3, [pc, #32]	; (10230 <hci_disconn_complete_prio+0x38>)
   10210:	881a      	ldrh	r2, [r3, #0]
   10212:	b922      	cbnz	r2, 1021e <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   10214:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   10218:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   1021c:	8018      	strh	r0, [r3, #0]
}
   1021e:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   10220:	2101      	movs	r1, #1
   10222:	f001 fc8d 	bl	11b40 <bt_conn_set_state>
	bt_conn_unref(conn);
   10226:	4628      	mov	r0, r5
}
   10228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1022c:	f01a b822 	b.w	2a274 <bt_conn_unref>
   10230:	20002cb4 	.word	0x20002cb4

00010234 <hci_le_meta_event>:
{
   10234:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   10236:	2101      	movs	r1, #1
   10238:	4604      	mov	r4, r0
   1023a:	3008      	adds	r0, #8
   1023c:	f01d f8f0 	bl	2d420 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   10240:	4621      	mov	r1, r4
   10242:	4a03      	ldr	r2, [pc, #12]	; (10250 <hci_le_meta_event+0x1c>)
   10244:	7800      	ldrb	r0, [r0, #0]
}
   10246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   1024a:	230a      	movs	r3, #10
   1024c:	f019 b9bc 	b.w	295c8 <handle_event>
   10250:	0002f520 	.word	0x0002f520

00010254 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   10254:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   10256:	4c0c      	ldr	r4, [pc, #48]	; (10288 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   10258:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   1025a:	2205      	movs	r2, #5
   1025c:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   10260:	f001 fe48 	bl	11ef4 <bt_conn_lookup_state_le>
		if (!conn) {
   10264:	b970      	cbnz	r0, 10284 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   10266:	4b09      	ldr	r3, [pc, #36]	; (1028c <find_pending_connect.part.0+0x38>)
   10268:	6818      	ldr	r0, [r3, #0]
   1026a:	889a      	ldrh	r2, [r3, #4]
   1026c:	9000      	str	r0, [sp, #0]
   1026e:	799b      	ldrb	r3, [r3, #6]
   10270:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   10274:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
   10278:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   1027c:	2204      	movs	r2, #4
   1027e:	4669      	mov	r1, sp
   10280:	f001 fe38 	bl	11ef4 <bt_conn_lookup_state_le>
}
   10284:	b002      	add	sp, #8
   10286:	bd10      	pop	{r4, pc}
   10288:	20000000 	.word	0x20000000
   1028c:	0002f29e 	.word	0x0002f29e

00010290 <hci_cmd_done>:
{
   10290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10292:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   10294:	7990      	ldrb	r0, [r2, #6]
{
   10296:	460e      	mov	r6, r1
   10298:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   1029a:	f013 f839 	bl	23310 <net_buf_pool_get>
   1029e:	4b28      	ldr	r3, [pc, #160]	; (10340 <hci_cmd_done+0xb0>)
   102a0:	4283      	cmp	r3, r0
   102a2:	d14b      	bne.n	1033c <hci_cmd_done+0xac>
	if (cmd(buf)->opcode != opcode) {
   102a4:	4620      	mov	r0, r4
   102a6:	f013 f83b 	bl	23320 <net_buf_id>
   102aa:	4d26      	ldr	r5, [pc, #152]	; (10344 <hci_cmd_done+0xb4>)
   102ac:	230c      	movs	r3, #12
   102ae:	fb03 5000 	mla	r0, r3, r0, r5
   102b2:	8843      	ldrh	r3, [r0, #2]
   102b4:	42bb      	cmp	r3, r7
   102b6:	d141      	bne.n	1033c <hci_cmd_done+0xac>
	if (bt_dev.sent_cmd) {
   102b8:	4f23      	ldr	r7, [pc, #140]	; (10348 <hci_cmd_done+0xb8>)
   102ba:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   102be:	b120      	cbz	r0, 102ca <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
   102c0:	f013 f8ea 	bl	23498 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   102c4:	2300      	movs	r3, #0
   102c6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   102ca:	4620      	mov	r0, r4
   102cc:	f013 f828 	bl	23320 <net_buf_id>
   102d0:	270c      	movs	r7, #12
   102d2:	fb07 5000 	mla	r0, r7, r0, r5
   102d6:	6843      	ldr	r3, [r0, #4]
   102d8:	b19b      	cbz	r3, 10302 <hci_cmd_done+0x72>
   102da:	b996      	cbnz	r6, 10302 <hci_cmd_done+0x72>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   102dc:	4620      	mov	r0, r4
   102de:	f013 f81f 	bl	23320 <net_buf_id>
   102e2:	fb07 5000 	mla	r0, r7, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
   102e6:	2101      	movs	r1, #1
   102e8:	6842      	ldr	r2, [r0, #4]
   102ea:	e9d2 0300 	ldrd	r0, r3, [r2]
	if (val) {
   102ee:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   102f0:	f003 071f 	and.w	r7, r3, #31
   102f4:	40b9      	lsls	r1, r7
	if (val) {
   102f6:	095b      	lsrs	r3, r3, #5
   102f8:	b1d2      	cbz	r2, 10330 <hci_cmd_done+0xa0>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   102fa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   102fe:	f019 f990 	bl	29622 <atomic_or>
	if (cmd(buf)->sync) {
   10302:	4620      	mov	r0, r4
   10304:	f013 f80c 	bl	23320 <net_buf_id>
   10308:	270c      	movs	r7, #12
   1030a:	fb07 5000 	mla	r0, r7, r0, r5
   1030e:	6883      	ldr	r3, [r0, #8]
   10310:	b1a3      	cbz	r3, 1033c <hci_cmd_done+0xac>
		cmd(buf)->status = status;
   10312:	4620      	mov	r0, r4
   10314:	f013 f804 	bl	23320 <net_buf_id>
   10318:	4378      	muls	r0, r7
   1031a:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   1031c:	4620      	mov	r0, r4
   1031e:	f012 ffff 	bl	23320 <net_buf_id>
   10322:	fb07 5500 	mla	r5, r7, r0, r5
   10326:	68a8      	ldr	r0, [r5, #8]
}
   10328:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
   1032c:	f015 bd24 	b.w	25d78 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10330:	43c9      	mvns	r1, r1
   10332:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   10336:	f019 fa15 	bl	29764 <atomic_and.isra.0>
   1033a:	e7e2      	b.n	10302 <hci_cmd_done+0x72>
   1033c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1033e:	bf00      	nop
   10340:	20000a54 	.word	0x20000a54
   10344:	20001660 	.word	0x20001660
   10348:	20000000 	.word	0x20000000

0001034c <hci_cmd_status>:
{
   1034c:	b538      	push	{r3, r4, r5, lr}
   1034e:	2104      	movs	r1, #4
   10350:	4604      	mov	r4, r0
   10352:	3008      	adds	r0, #8
   10354:	f01d f864 	bl	2d420 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   10358:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   1035a:	7801      	ldrb	r1, [r0, #0]
   1035c:	8840      	ldrh	r0, [r0, #2]
   1035e:	4622      	mov	r2, r4
   10360:	f7ff ff96 	bl	10290 <hci_cmd_done>
	if (ncmd) {
   10364:	b125      	cbz	r5, 10370 <hci_cmd_status+0x24>
   10366:	4803      	ldr	r0, [pc, #12]	; (10374 <hci_cmd_status+0x28>)
}
   10368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1036c:	f015 bd04 	b.w	25d78 <z_impl_k_sem_give>
   10370:	bd38      	pop	{r3, r4, r5, pc}
   10372:	bf00      	nop
   10374:	20000120 	.word	0x20000120

00010378 <hci_cmd_complete>:
{
   10378:	b538      	push	{r3, r4, r5, lr}
   1037a:	2103      	movs	r1, #3
   1037c:	4604      	mov	r4, r0
   1037e:	3008      	adds	r0, #8
   10380:	f01d f84e 	bl	2d420 <net_buf_simple_pull_mem>
	status = buf->data[0];
   10384:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   10386:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   10388:	7819      	ldrb	r1, [r3, #0]
   1038a:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   1038e:	4622      	mov	r2, r4
   10390:	f7ff ff7e 	bl	10290 <hci_cmd_done>
	if (ncmd) {
   10394:	b125      	cbz	r5, 103a0 <hci_cmd_complete+0x28>
   10396:	4803      	ldr	r0, [pc, #12]	; (103a4 <hci_cmd_complete+0x2c>)
}
   10398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1039c:	f015 bcec 	b.w	25d78 <z_impl_k_sem_give>
   103a0:	bd38      	pop	{r3, r4, r5, pc}
   103a2:	bf00      	nop
   103a4:	20000120 	.word	0x20000120

000103a8 <hci_tx_thread>:
{
   103a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   103ac:	f8df 8108 	ldr.w	r8, [pc, #264]	; 104b8 <hci_tx_thread+0x110>
		BT_ASSERT(err == 0);
   103b0:	f8df a108 	ldr.w	sl, [pc, #264]	; 104bc <hci_tx_thread+0x114>
		events[0].state = K_POLL_STATE_NOT_READY;
   103b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   103b8:	4841      	ldr	r0, [pc, #260]	; (104c0 <hci_tx_thread+0x118>)
		events[0].state = K_POLL_STATE_NOT_READY;
   103ba:	f36f 3352 	bfc	r3, #13, #6
   103be:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   103c2:	f001 fb7f 	bl	11ac4 <bt_conn_prepare_events>
   103c6:	1c45      	adds	r5, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   103c8:	483b      	ldr	r0, [pc, #236]	; (104b8 <hci_tx_thread+0x110>)
   103ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   103ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   103d2:	4629      	mov	r1, r5
   103d4:	f016 fc34 	bl	26c40 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   103d8:	b160      	cbz	r0, 103f4 <hci_tx_thread+0x4c>
   103da:	493a      	ldr	r1, [pc, #232]	; (104c4 <hci_tx_thread+0x11c>)
   103dc:	483a      	ldr	r0, [pc, #232]	; (104c8 <hci_tx_thread+0x120>)
   103de:	f640 13ad 	movw	r3, #2477	; 0x9ad
   103e2:	4652      	mov	r2, sl
   103e4:	f017 f8a6 	bl	27534 <assert_print>
   103e8:	4040      	eors	r0, r0
   103ea:	f380 8811 	msr	BASEPRI, r0
   103ee:	f04f 0003 	mov.w	r0, #3
   103f2:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   103f4:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 104cc <hci_tx_thread+0x124>
{
   103f8:	4e2f      	ldr	r6, [pc, #188]	; (104b8 <hci_tx_thread+0x110>)
	return z_impl_k_sem_take(sem, timeout);
   103fa:	f5a9 779e 	sub.w	r7, r9, #316	; 0x13c
   103fe:	f1a9 0b1c 	sub.w	fp, r9, #28
	for (; count; ev++, count--) {
   10402:	b915      	cbnz	r5, 1040a <hci_tx_thread+0x62>
	z_impl_k_yield();
   10404:	f016 f916 	bl	26634 <z_impl_k_yield>
	while (1) {
   10408:	e7d4      	b.n	103b4 <hci_tx_thread+0xc>
		switch (ev->state) {
   1040a:	68f3      	ldr	r3, [r6, #12]
   1040c:	f3c3 3345 	ubfx	r3, r3, #13, #6
   10410:	2b04      	cmp	r3, #4
   10412:	d147      	bne.n	104a4 <hci_tx_thread+0xfc>
			if (ev->tag == BT_EVENT_CMD_TX) {
   10414:	7b33      	ldrb	r3, [r6, #12]
   10416:	2b00      	cmp	r3, #0
   10418:	d147      	bne.n	104aa <hci_tx_thread+0x102>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   1041a:	2200      	movs	r2, #0
   1041c:	2300      	movs	r3, #0
   1041e:	4648      	mov	r0, r9
   10420:	f01c ff7a 	bl	2d318 <net_buf_get>
	BT_ASSERT(buf);
   10424:	4604      	mov	r4, r0
   10426:	b960      	cbnz	r0, 10442 <hci_tx_thread+0x9a>
   10428:	4929      	ldr	r1, [pc, #164]	; (104d0 <hci_tx_thread+0x128>)
   1042a:	4827      	ldr	r0, [pc, #156]	; (104c8 <hci_tx_thread+0x120>)
   1042c:	f640 1344 	movw	r3, #2372	; 0x944
   10430:	4652      	mov	r2, sl
   10432:	f017 f87f 	bl	27534 <assert_print>
   10436:	4040      	eors	r0, r0
   10438:	f380 8811 	msr	BASEPRI, r0
   1043c:	f04f 0003 	mov.w	r0, #3
   10440:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   10442:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1044a:	4658      	mov	r0, fp
   1044c:	f015 fcba 	bl	25dc4 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   10450:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   10454:	b120      	cbz	r0, 10460 <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
   10456:	f013 f81f 	bl	23498 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1045a:	2300      	movs	r3, #0
   1045c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   10460:	4620      	mov	r0, r4
   10462:	f01c ff84 	bl	2d36e <net_buf_ref>
   10466:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
		return bt_hci_ecc_send(buf);
   1046a:	4620      	mov	r0, r4
   1046c:	f7ff fcee 	bl	fe4c <bt_hci_ecc_send>
	if (err) {
   10470:	b1c0      	cbz	r0, 104a4 <hci_tx_thread+0xfc>
	z_impl_k_sem_give(sem);
   10472:	4818      	ldr	r0, [pc, #96]	; (104d4 <hci_tx_thread+0x12c>)
   10474:	f015 fc80 	bl	25d78 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   10478:	4620      	mov	r0, r4
   1047a:	f012 ff51 	bl	23320 <net_buf_id>
   1047e:	4b16      	ldr	r3, [pc, #88]	; (104d8 <hci_tx_thread+0x130>)
   10480:	220c      	movs	r2, #12
   10482:	fb02 3000 	mla	r0, r2, r0, r3
   10486:	211f      	movs	r1, #31
   10488:	8840      	ldrh	r0, [r0, #2]
   1048a:	4622      	mov	r2, r4
   1048c:	f7ff ff00 	bl	10290 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   10490:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   10494:	f013 f800 	bl	23498 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   10498:	2300      	movs	r3, #0
		net_buf_unref(buf);
   1049a:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   1049c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		net_buf_unref(buf);
   104a0:	f012 fffa 	bl	23498 <net_buf_unref>
	for (; count; ev++, count--) {
   104a4:	3614      	adds	r6, #20
   104a6:	3d01      	subs	r5, #1
   104a8:	e7ab      	b.n	10402 <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   104aa:	2b01      	cmp	r3, #1
   104ac:	d1fa      	bne.n	104a4 <hci_tx_thread+0xfc>
					conn = CONTAINER_OF(ev->fifo,
   104ae:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   104b0:	3838      	subs	r0, #56	; 0x38
   104b2:	f001 fe17 	bl	120e4 <bt_conn_process_tx>
   104b6:	e7f5      	b.n	104a4 <hci_tx_thread+0xfc>
   104b8:	200001b8 	.word	0x200001b8
   104bc:	00030ac7 	.word	0x00030ac7
   104c0:	200001cc 	.word	0x200001cc
   104c4:	00030afb 	.word	0x00030afb
   104c8:	00030b04 	.word	0x00030b04
   104cc:	2000013c 	.word	0x2000013c
   104d0:	00030b21 	.word	0x00030b21
   104d4:	20000120 	.word	0x20000120
   104d8:	20001660 	.word	0x20001660

000104dc <bt_hci_cmd_state_set_init>:
{
   104dc:	b510      	push	{r4, lr}
	state->bit = bit;
   104de:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   104e2:	f89d 3008 	ldrb.w	r3, [sp, #8]
   104e6:	720b      	strb	r3, [r1, #8]
{
   104e8:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   104ea:	f012 ff19 	bl	23320 <net_buf_id>
   104ee:	4b03      	ldr	r3, [pc, #12]	; (104fc <bt_hci_cmd_state_set_init+0x20>)
   104f0:	220c      	movs	r2, #12
   104f2:	fb02 3300 	mla	r3, r2, r0, r3
   104f6:	605c      	str	r4, [r3, #4]
}
   104f8:	bd10      	pop	{r4, pc}
   104fa:	bf00      	nop
   104fc:	20001660 	.word	0x20001660

00010500 <bt_hci_cmd_create>:
{
   10500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   10504:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10508:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1050c:	4606      	mov	r6, r0
   1050e:	4817      	ldr	r0, [pc, #92]	; (1056c <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   10510:	4d17      	ldr	r5, [pc, #92]	; (10570 <bt_hci_cmd_create+0x70>)
{
   10512:	460f      	mov	r7, r1
   10514:	f01c fefb 	bl	2d30e <net_buf_alloc_fixed>
   10518:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   1051a:	f100 0a08 	add.w	sl, r0, #8
   1051e:	2100      	movs	r1, #0
   10520:	f04f 0800 	mov.w	r8, #0
   10524:	4650      	mov	r0, sl
   10526:	f01c ff11 	bl	2d34c <net_buf_simple_reserve>
   1052a:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   1052e:	4620      	mov	r0, r4
   10530:	f012 fef6 	bl	23320 <net_buf_id>
   10534:	f04f 090c 	mov.w	r9, #12
   10538:	fb09 5000 	mla	r0, r9, r0, r5
   1053c:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   1053e:	4620      	mov	r0, r4
   10540:	f012 feee 	bl	23320 <net_buf_id>
   10544:	fb09 5000 	mla	r0, r9, r0, r5
   10548:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   1054c:	4620      	mov	r0, r4
   1054e:	f012 fee7 	bl	23320 <net_buf_id>
   10552:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   10556:	2103      	movs	r1, #3
   10558:	f8c5 8004 	str.w	r8, [r5, #4]
   1055c:	4650      	mov	r0, sl
   1055e:	f01c ff38 	bl	2d3d2 <net_buf_simple_add>
	hdr->param_len = param_len;
   10562:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   10564:	8006      	strh	r6, [r0, #0]
}
   10566:	4620      	mov	r0, r4
   10568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1056c:	20000a54 	.word	0x20000a54
   10570:	20001660 	.word	0x20001660

00010574 <bt_hci_cmd_send>:
{
   10574:	b538      	push	{r3, r4, r5, lr}
   10576:	4605      	mov	r5, r0
	if (!buf) {
   10578:	460c      	mov	r4, r1
   1057a:	b919      	cbnz	r1, 10584 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   1057c:	f7ff ffc0 	bl	10500 <bt_hci_cmd_create>
		if (!buf) {
   10580:	4604      	mov	r4, r0
   10582:	b198      	cbz	r0, 105ac <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   10584:	f640 4335 	movw	r3, #3125	; 0xc35
   10588:	429d      	cmp	r5, r3
   1058a:	d109      	bne.n	105a0 <bt_hci_cmd_send+0x2c>
		return bt_hci_ecc_send(buf);
   1058c:	4620      	mov	r0, r4
   1058e:	f7ff fc5d 	bl	fe4c <bt_hci_ecc_send>
		if (err) {
   10592:	4605      	mov	r5, r0
   10594:	b110      	cbz	r0, 1059c <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
   10596:	4620      	mov	r0, r4
   10598:	f012 ff7e 	bl	23498 <net_buf_unref>
}
   1059c:	4628      	mov	r0, r5
   1059e:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   105a0:	4804      	ldr	r0, [pc, #16]	; (105b4 <bt_hci_cmd_send+0x40>)
   105a2:	4621      	mov	r1, r4
   105a4:	f01c fed6 	bl	2d354 <net_buf_put>
	return 0;
   105a8:	2500      	movs	r5, #0
   105aa:	e7f7      	b.n	1059c <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
   105ac:	f06f 0568 	mvn.w	r5, #104	; 0x68
   105b0:	e7f4      	b.n	1059c <bt_hci_cmd_send+0x28>
   105b2:	bf00      	nop
   105b4:	2000013c 	.word	0x2000013c

000105b8 <bt_hci_cmd_send_sync>:
{
   105b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   105ba:	4615      	mov	r5, r2
   105bc:	b087      	sub	sp, #28
	if (!buf) {
   105be:	460c      	mov	r4, r1
   105c0:	b921      	cbnz	r1, 105cc <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
   105c2:	f7ff ff9d 	bl	10500 <bt_hci_cmd_create>
		if (!buf) {
   105c6:	4604      	mov	r4, r0
   105c8:	2800      	cmp	r0, #0
   105ca:	d048      	beq.n	1065e <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   105cc:	2201      	movs	r2, #1
   105ce:	2100      	movs	r1, #0
   105d0:	4668      	mov	r0, sp
   105d2:	f01e f8c1 	bl	2e758 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   105d6:	4620      	mov	r0, r4
   105d8:	f012 fea2 	bl	23320 <net_buf_id>
   105dc:	4f21      	ldr	r7, [pc, #132]	; (10664 <bt_hci_cmd_send_sync+0xac>)
   105de:	230c      	movs	r3, #12
   105e0:	fb03 7000 	mla	r0, r3, r0, r7
   105e4:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   105e8:	4620      	mov	r0, r4
   105ea:	f01c fec0 	bl	2d36e <net_buf_ref>
   105ee:	4601      	mov	r1, r0
   105f0:	481d      	ldr	r0, [pc, #116]	; (10668 <bt_hci_cmd_send_sync+0xb0>)
   105f2:	f01c feaf 	bl	2d354 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   105f6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   105fa:	2300      	movs	r3, #0
   105fc:	4668      	mov	r0, sp
   105fe:	f015 fbe1 	bl	25dc4 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   10602:	4606      	mov	r6, r0
   10604:	b180      	cbz	r0, 10628 <bt_hci_cmd_send_sync+0x70>
   10606:	4a19      	ldr	r2, [pc, #100]	; (1066c <bt_hci_cmd_send_sync+0xb4>)
   10608:	4919      	ldr	r1, [pc, #100]	; (10670 <bt_hci_cmd_send_sync+0xb8>)
   1060a:	481a      	ldr	r0, [pc, #104]	; (10674 <bt_hci_cmd_send_sync+0xbc>)
   1060c:	f44f 739a 	mov.w	r3, #308	; 0x134
   10610:	f016 ff90 	bl	27534 <assert_print>
   10614:	4818      	ldr	r0, [pc, #96]	; (10678 <bt_hci_cmd_send_sync+0xc0>)
   10616:	4631      	mov	r1, r6
   10618:	f016 ff8c 	bl	27534 <assert_print>
   1061c:	4040      	eors	r0, r0
   1061e:	f380 8811 	msr	BASEPRI, r0
   10622:	f04f 0003 	mov.w	r0, #3
   10626:	df02      	svc	2
	status = cmd(buf)->status;
   10628:	4620      	mov	r0, r4
   1062a:	f012 fe79 	bl	23320 <net_buf_id>
   1062e:	230c      	movs	r3, #12
   10630:	4358      	muls	r0, r3
   10632:	5c3e      	ldrb	r6, [r7, r0]
	if (status) {
   10634:	b156      	cbz	r6, 1064c <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
   10636:	4620      	mov	r0, r4
   10638:	f012 ff2e 	bl	23498 <net_buf_unref>
			return -EIO;
   1063c:	2e09      	cmp	r6, #9
   1063e:	bf0c      	ite	eq
   10640:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   10644:	f06f 0004 	mvnne.w	r0, #4
}
   10648:	b007      	add	sp, #28
   1064a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   1064c:	b115      	cbz	r5, 10654 <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
   1064e:	602c      	str	r4, [r5, #0]
	return 0;
   10650:	4630      	mov	r0, r6
   10652:	e7f9      	b.n	10648 <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
   10654:	4620      	mov	r0, r4
   10656:	f012 ff1f 	bl	23498 <net_buf_unref>
	return 0;
   1065a:	4628      	mov	r0, r5
   1065c:	e7f4      	b.n	10648 <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
   1065e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   10662:	e7f1      	b.n	10648 <bt_hci_cmd_send_sync+0x90>
   10664:	20001660 	.word	0x20001660
   10668:	2000013c 	.word	0x2000013c
   1066c:	00030ac7 	.word	0x00030ac7
   10670:	00030afb 	.word	0x00030afb
   10674:	00030b04 	.word	0x00030b04
   10678:	00030b25 	.word	0x00030b25

0001067c <bt_hci_le_enh_conn_complete>:
{
   1067c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   10680:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
   10684:	4a83      	ldr	r2, [pc, #524]	; (10894 <bt_hci_le_enh_conn_complete+0x218>)
	handle |= ~BT_ACL_HANDLE_MASK;
   10686:	ea6f 5307 	mvn.w	r3, r7, lsl #20
		if (disconnected_handles[i] == handle) {
   1068a:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   1068c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   10690:	b29b      	uxth	r3, r3
   10692:	4299      	cmp	r1, r3
{
   10694:	4605      	mov	r5, r0
   10696:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   1069a:	bf08      	it	eq
   1069c:	8016      	strheq	r6, [r2, #0]
{
   1069e:	b089      	sub	sp, #36	; 0x24
			return true;
   106a0:	bf08      	it	eq
   106a2:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
   106a4:	f000 fafe 	bl	10ca4 <bt_id_pending_keys_update>
	if (evt->status) {
   106a8:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   106aa:	fa1f f887 	uxth.w	r8, r7
	if (evt->status) {
   106ae:	b1c4      	cbz	r4, 106e2 <bt_hci_le_enh_conn_complete+0x66>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   106b0:	2c3c      	cmp	r4, #60	; 0x3c
   106b2:	d14a      	bne.n	1074a <bt_hci_le_enh_conn_complete+0xce>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   106b4:	f000 fdf8 	bl	112a8 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   106b8:	f06f 0140 	mvn.w	r1, #64	; 0x40
   106bc:	3010      	adds	r0, #16
   106be:	f019 f851 	bl	29764 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   106c2:	2000      	movs	r0, #0
   106c4:	f7ff fdc6 	bl	10254 <find_pending_connect.part.0>
		if (!conn) {
   106c8:	4605      	mov	r5, r0
   106ca:	2800      	cmp	r0, #0
   106cc:	d03d      	beq.n	1074a <bt_hci_le_enh_conn_complete+0xce>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   106ce:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   106d0:	2100      	movs	r1, #0
   106d2:	f001 fa35 	bl	11b40 <bt_conn_set_state>
		bt_conn_unref(conn);
   106d6:	4628      	mov	r0, r5
}
   106d8:	b009      	add	sp, #36	; 0x24
   106da:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
   106de:	f019 bdc9 	b.w	2a274 <bt_conn_unref>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   106e2:	792b      	ldrb	r3, [r5, #4]
   106e4:	3b02      	subs	r3, #2
   106e6:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   106e8:	f105 0904 	add.w	r9, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   106ec:	d830      	bhi.n	10750 <bt_hci_le_enh_conn_complete+0xd4>
 *  @param dst Bluetooth LE device address destination buffer.
 *  @param src Bluetooth LE device address source buffer.
 */
static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
   106ee:	2207      	movs	r2, #7
   106f0:	4649      	mov	r1, r9
   106f2:	a806      	add	r0, sp, #24
   106f4:	f018 fe27 	bl	29346 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   106f8:	f89d 3018 	ldrb.w	r3, [sp, #24]
	memcpy(dst, src, sizeof(*dst));
   106fc:	2206      	movs	r2, #6
   106fe:	3b02      	subs	r3, #2
   10700:	f105 0111 	add.w	r1, r5, #17
   10704:	f10d 0011 	add.w	r0, sp, #17
   10708:	f88d 3018 	strb.w	r3, [sp, #24]
   1070c:	f018 fe1b 	bl	29346 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   10710:	2301      	movs	r3, #1
   10712:	f88d 3010 	strb.w	r3, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   10716:	78eb      	ldrb	r3, [r5, #3]
   10718:	2b01      	cmp	r3, #1
   1071a:	d112      	bne.n	10742 <bt_hci_le_enh_conn_complete+0xc6>
   1071c:	a806      	add	r0, sp, #24
   1071e:	f7ff fd99 	bl	10254 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10722:	78eb      	ldrb	r3, [r5, #3]
   10724:	2b01      	cmp	r3, #1
   10726:	4604      	mov	r4, r0
   10728:	d10a      	bne.n	10740 <bt_hci_le_enh_conn_complete+0xc4>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1072a:	f000 fdbd 	bl	112a8 <bt_le_adv_lookup_legacy>
   1072e:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10732:	4681      	mov	r9, r0
   10734:	3010      	adds	r0, #16
   10736:	f019 f815 	bl	29764 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   1073a:	4648      	mov	r0, r9
   1073c:	f019 fcb7 	bl	2a0ae <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   10740:	b9dc      	cbnz	r4, 1077a <bt_hci_le_enh_conn_complete+0xfe>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   10742:	211f      	movs	r1, #31
   10744:	4640      	mov	r0, r8
   10746:	f019 f94f 	bl	299e8 <bt_hci_disconnect>
}
   1074a:	b009      	add	sp, #36	; 0x24
   1074c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   10750:	78eb      	ldrb	r3, [r5, #3]
   10752:	2b01      	cmp	r3, #1
   10754:	bf04      	itt	eq
   10756:	4b50      	ldreq	r3, [pc, #320]	; (10898 <bt_hci_le_enh_conn_complete+0x21c>)
   10758:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   1075c:	4649      	mov	r1, r9
   1075e:	4620      	mov	r0, r4
   10760:	f019 fb2d 	bl	29dbe <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   10764:	2207      	movs	r2, #7
   10766:	4601      	mov	r1, r0
   10768:	a806      	add	r0, sp, #24
   1076a:	f018 fdec 	bl	29346 <memcpy>
   1076e:	2207      	movs	r2, #7
   10770:	4649      	mov	r1, r9
   10772:	a804      	add	r0, sp, #16
   10774:	f018 fde7 	bl	29346 <memcpy>
}
   10778:	e7cd      	b.n	10716 <bt_hci_le_enh_conn_complete+0x9a>
	conn->handle = handle;
   1077a:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
   1077c:	2207      	movs	r2, #7
   1077e:	f820 7b88 	strh.w	r7, [r0], #136
   10782:	a906      	add	r1, sp, #24
   10784:	f018 fddf 	bl	29346 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   10788:	7e2a      	ldrb	r2, [r5, #24]
   1078a:	7deb      	ldrb	r3, [r5, #23]
   1078c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   10790:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   10794:	7eaa      	ldrb	r2, [r5, #26]
   10796:	7e6b      	ldrb	r3, [r5, #25]
   10798:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1079c:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   107a0:	7f2a      	ldrb	r2, [r5, #28]
   107a2:	7eeb      	ldrb	r3, [r5, #27]
   107a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   107a8:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   107ac:	78eb      	ldrb	r3, [r5, #3]
   107ae:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   107b0:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   107b2:	2b01      	cmp	r3, #1
	conn->err = 0U;
   107b4:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   107b6:	d117      	bne.n	107e8 <bt_hci_le_enh_conn_complete+0x16c>
   107b8:	2207      	movs	r2, #7
   107ba:	a904      	add	r1, sp, #16
   107bc:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   107c0:	f018 fdc1 	bl	29346 <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   107c4:	f000 fd70 	bl	112a8 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   107c8:	7a21      	ldrb	r1, [r4, #8]
   107ca:	4d33      	ldr	r5, [pc, #204]	; (10898 <bt_hci_le_enh_conn_complete+0x21c>)
   107cc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   107d0:	4429      	add	r1, r5
   107d2:	2207      	movs	r2, #7
   107d4:	f104 0096 	add.w	r0, r4, #150	; 0x96
   107d8:	f018 fdb5 	bl	29346 <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   107dc:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
   107e0:	065d      	lsls	r5, r3, #25
   107e2:	d501      	bpl.n	107e8 <bt_hci_le_enh_conn_complete+0x16c>
			bt_le_adv_resume();
   107e4:	f000 ff0c 	bl	11600 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   107e8:	2107      	movs	r1, #7
   107ea:	4620      	mov	r0, r4
   107ec:	f001 f9a8 	bl	11b40 <bt_conn_set_state>
	if (is_disconnected) {
   107f0:	b11e      	cbz	r6, 107fa <bt_hci_le_enh_conn_complete+0x17e>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   107f2:	2101      	movs	r1, #1
   107f4:	4620      	mov	r0, r4
   107f6:	f001 f9a3 	bl	11b40 <bt_conn_set_state>
	bt_conn_connected(conn);
   107fa:	4620      	mov	r0, r4
   107fc:	f019 fd76 	bl	2a2ec <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   10800:	7b63      	ldrb	r3, [r4, #13]
   10802:	2b07      	cmp	r3, #7
   10804:	d142      	bne.n	1088c <bt_hci_le_enh_conn_complete+0x210>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10806:	f3bf 8f5b 	dmb	ish
   1080a:	6863      	ldr	r3, [r4, #4]
   1080c:	4e22      	ldr	r6, [pc, #136]	; (10898 <bt_hci_le_enh_conn_complete+0x21c>)
   1080e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   10812:	f413 6f00 	tst.w	r3, #2048	; 0x800
   10816:	d118      	bne.n	1084a <bt_hci_le_enh_conn_complete+0x1ce>
   10818:	78e3      	ldrb	r3, [r4, #3]
   1081a:	b11b      	cbz	r3, 10824 <bt_hci_le_enh_conn_complete+0x1a8>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   1081c:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   10820:	0718      	lsls	r0, r3, #28
   10822:	d512      	bpl.n	1084a <bt_hci_le_enh_conn_complete+0x1ce>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   10824:	2102      	movs	r1, #2
   10826:	f242 0016 	movw	r0, #8214	; 0x2016
   1082a:	f7ff fe69 	bl	10500 <bt_hci_cmd_create>
	if (!buf) {
   1082e:	4605      	mov	r5, r0
   10830:	b158      	cbz	r0, 1084a <bt_hci_le_enh_conn_complete+0x1ce>
   10832:	2102      	movs	r1, #2
   10834:	3008      	adds	r0, #8
   10836:	f01c fdcc 	bl	2d3d2 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1083a:	8823      	ldrh	r3, [r4, #0]
   1083c:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   1083e:	2200      	movs	r2, #0
   10840:	4629      	mov	r1, r5
   10842:	f242 0016 	movw	r0, #8214	; 0x2016
   10846:	f7ff feb7 	bl	105b8 <bt_hci_cmd_send_sync>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1084a:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
   1084e:	07d9      	lsls	r1, r3, #31
   10850:	d506      	bpl.n	10860 <bt_hci_le_enh_conn_complete+0x1e4>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   10852:	2100      	movs	r1, #0
   10854:	2302      	movs	r3, #2
   10856:	9100      	str	r1, [sp, #0]
   10858:	461a      	mov	r2, r3
   1085a:	4620      	mov	r0, r4
   1085c:	f019 f8fd 	bl	29a5a <bt_le_set_phy>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   10860:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   10864:	069a      	lsls	r2, r3, #26
   10866:	d511      	bpl.n	1088c <bt_hci_le_enh_conn_complete+0x210>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   10868:	f8d6 3154 	ldr.w	r3, [r6, #340]	; 0x154
   1086c:	689b      	ldr	r3, [r3, #8]
   1086e:	079b      	lsls	r3, r3, #30
   10870:	d50c      	bpl.n	1088c <bt_hci_le_enh_conn_complete+0x210>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   10872:	f10d 010e 	add.w	r1, sp, #14
   10876:	a803      	add	r0, sp, #12
   10878:	f019 f89e 	bl	299b8 <hci_le_read_max_data_len>
			if (!err) {
   1087c:	b930      	cbnz	r0, 1088c <bt_hci_le_enh_conn_complete+0x210>
				err = bt_le_set_data_len(conn,
   1087e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   10882:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   10886:	4620      	mov	r0, r4
   10888:	f019 f8c9 	bl	29a1e <bt_le_set_data_len>
	bt_conn_unref(conn);
   1088c:	4620      	mov	r0, r4
   1088e:	f019 fcf1 	bl	2a274 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10892:	e75a      	b.n	1074a <bt_hci_le_enh_conn_complete+0xce>
   10894:	20002cb4 	.word	0x20002cb4
   10898:	20000000 	.word	0x20000000

0001089c <bt_security_err_get>:
	switch (hci_err) {
   1089c:	2829      	cmp	r0, #41	; 0x29
   1089e:	bf9a      	itte	ls
   108a0:	4b01      	ldrls	r3, [pc, #4]	; (108a8 <bt_security_err_get+0xc>)
   108a2:	5c18      	ldrbls	r0, [r3, r0]
{
   108a4:	2009      	movhi	r0, #9
}
   108a6:	4770      	bx	lr
   108a8:	00030bce 	.word	0x00030bce

000108ac <hci_event_prio>:
{
   108ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   108b0:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   108b2:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   108b6:	4630      	mov	r0, r6
   108b8:	f01c fdc2 	bl	2d440 <net_buf_simple_headroom>
	state->len = buf->len;
   108bc:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   108c0:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   108c4:	4605      	mov	r5, r0
   108c6:	d80c      	bhi.n	108e2 <hci_event_prio+0x36>
   108c8:	4a1c      	ldr	r2, [pc, #112]	; (1093c <hci_event_prio+0x90>)
   108ca:	491d      	ldr	r1, [pc, #116]	; (10940 <hci_event_prio+0x94>)
   108cc:	481d      	ldr	r0, [pc, #116]	; (10944 <hci_event_prio+0x98>)
   108ce:	f640 5349 	movw	r3, #3401	; 0xd49
   108d2:	f016 fe2f 	bl	27534 <assert_print>
   108d6:	4040      	eors	r0, r0
   108d8:	f380 8811 	msr	BASEPRI, r0
   108dc:	f04f 0003 	mov.w	r0, #3
   108e0:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   108e2:	4630      	mov	r0, r6
   108e4:	2102      	movs	r1, #2
   108e6:	f01c fd9b 	bl	2d420 <net_buf_simple_pull_mem>
   108ea:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   108ec:	7800      	ldrb	r0, [r0, #0]
   108ee:	f018 fe59 	bl	295a4 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   108f2:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   108f4:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   108f6:	d40c      	bmi.n	10912 <hci_event_prio+0x66>
   108f8:	4a10      	ldr	r2, [pc, #64]	; (1093c <hci_event_prio+0x90>)
   108fa:	4913      	ldr	r1, [pc, #76]	; (10948 <hci_event_prio+0x9c>)
   108fc:	4811      	ldr	r0, [pc, #68]	; (10944 <hci_event_prio+0x98>)
   108fe:	f640 534d 	movw	r3, #3405	; 0xd4d
   10902:	f016 fe17 	bl	27534 <assert_print>
   10906:	4040      	eors	r0, r0
   10908:	f380 8811 	msr	BASEPRI, r0
   1090c:	f04f 0003 	mov.w	r0, #3
   10910:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   10912:	2305      	movs	r3, #5
   10914:	4a0d      	ldr	r2, [pc, #52]	; (1094c <hci_event_prio+0xa0>)
   10916:	7838      	ldrb	r0, [r7, #0]
   10918:	4621      	mov	r1, r4
   1091a:	f018 fe55 	bl	295c8 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1091e:	07b3      	lsls	r3, r6, #30
   10920:	d507      	bpl.n	10932 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   10922:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   10924:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   10928:	fa10 f585 	uxtah	r5, r0, r5
   1092c:	60a5      	str	r5, [r4, #8]
}
   1092e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   10932:	4620      	mov	r0, r4
}
   10934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   10938:	f012 bdae 	b.w	23498 <net_buf_unref>
   1093c:	00030ac7 	.word	0x00030ac7
   10940:	00030b45 	.word	0x00030b45
   10944:	00030b04 	.word	0x00030b04
   10948:	00030b5e 	.word	0x00030b5e
   1094c:	0002f5b0 	.word	0x0002f5b0

00010950 <bt_recv>:
{
   10950:	b570      	push	{r4, r5, r6, lr}
	if (bt_recv_thread_id == NULL) {
   10952:	4d3b      	ldr	r5, [pc, #236]	; (10a40 <bt_recv+0xf0>)
   10954:	682b      	ldr	r3, [r5, #0]
{
   10956:	4604      	mov	r4, r0
	if (bt_recv_thread_id == NULL) {
   10958:	b913      	cbnz	r3, 10960 <bt_recv+0x10>
	return z_impl_z_current_get();
   1095a:	f015 ff0d 	bl	26778 <z_impl_z_current_get>
		bt_recv_thread_id = k_current_get();
   1095e:	6028      	str	r0, [r5, #0]
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   10960:	7d23      	ldrb	r3, [r4, #20]
	switch (bt_buf_get_type(buf)) {
   10962:	2b01      	cmp	r3, #1
   10964:	d036      	beq.n	109d4 <bt_recv+0x84>
   10966:	2b03      	cmp	r3, #3
   10968:	d163      	bne.n	10a32 <bt_recv+0xe2>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1096a:	89a3      	ldrh	r3, [r4, #12]
   1096c:	2b03      	cmp	r3, #3
   1096e:	d80c      	bhi.n	1098a <bt_recv+0x3a>
   10970:	4a34      	ldr	r2, [pc, #208]	; (10a44 <bt_recv+0xf4>)
   10972:	4935      	ldr	r1, [pc, #212]	; (10a48 <bt_recv+0xf8>)
   10974:	4835      	ldr	r0, [pc, #212]	; (10a4c <bt_recv+0xfc>)
   10976:	f44f 73ec 	mov.w	r3, #472	; 0x1d8
   1097a:	f016 fddb 	bl	27534 <assert_print>
   1097e:	4040      	eors	r0, r0
   10980:	f380 8811 	msr	BASEPRI, r0
   10984:	f04f 0003 	mov.w	r0, #3
   10988:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   1098a:	2104      	movs	r1, #4
   1098c:	f104 0008 	add.w	r0, r4, #8
   10990:	f01c fd46 	bl	2d420 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   10994:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   10996:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   10998:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1099a:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   1099c:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   1099e:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   109a2:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   109a4:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   109a6:	d003      	beq.n	109b0 <bt_recv+0x60>
	net_buf_unref(buf);
   109a8:	4620      	mov	r0, r4
   109aa:	f012 fd75 	bl	23498 <net_buf_unref>
   109ae:	e00f      	b.n	109d0 <bt_recv+0x80>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   109b0:	f001 f8be 	bl	11b30 <bt_conn_lookup_handle>
	if (!conn) {
   109b4:	4605      	mov	r5, r0
   109b6:	2800      	cmp	r0, #0
   109b8:	d0f6      	beq.n	109a8 <bt_recv+0x58>
	acl(buf)->index = bt_conn_index(conn);
   109ba:	f001 f969 	bl	11c90 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   109be:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   109c0:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   109c2:	4621      	mov	r1, r4
   109c4:	4628      	mov	r0, r5
   109c6:	f019 fbed 	bl	2a1a4 <bt_conn_recv>
	bt_conn_unref(conn);
   109ca:	4628      	mov	r0, r5
   109cc:	f019 fc52 	bl	2a274 <bt_conn_unref>
		return 0;
   109d0:	2000      	movs	r0, #0
}
   109d2:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   109d4:	89a3      	ldrh	r3, [r4, #12]
   109d6:	2b01      	cmp	r3, #1
   109d8:	d80c      	bhi.n	109f4 <bt_recv+0xa4>
   109da:	4a1a      	ldr	r2, [pc, #104]	; (10a44 <bt_recv+0xf4>)
   109dc:	491a      	ldr	r1, [pc, #104]	; (10a48 <bt_recv+0xf8>)
   109de:	481b      	ldr	r0, [pc, #108]	; (10a4c <bt_recv+0xfc>)
   109e0:	f640 1331 	movw	r3, #2353	; 0x931
   109e4:	f016 fda6 	bl	27534 <assert_print>
   109e8:	4040      	eors	r0, r0
   109ea:	f380 8811 	msr	BASEPRI, r0
   109ee:	f04f 0003 	mov.w	r0, #3
   109f2:	df02      	svc	2
   109f4:	2102      	movs	r1, #2
   109f6:	f104 0008 	add.w	r0, r4, #8
   109fa:	f01c fd11 	bl	2d420 <net_buf_simple_pull_mem>
   109fe:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   10a00:	7800      	ldrb	r0, [r0, #0]
   10a02:	f018 fdcf 	bl	295a4 <bt_hci_evt_get_flags>
   10a06:	0783      	lsls	r3, r0, #30
   10a08:	d40c      	bmi.n	10a24 <bt_recv+0xd4>
   10a0a:	4a0e      	ldr	r2, [pc, #56]	; (10a44 <bt_recv+0xf4>)
   10a0c:	4910      	ldr	r1, [pc, #64]	; (10a50 <bt_recv+0x100>)
   10a0e:	480f      	ldr	r0, [pc, #60]	; (10a4c <bt_recv+0xfc>)
   10a10:	f640 1335 	movw	r3, #2357	; 0x935
   10a14:	f016 fd8e 	bl	27534 <assert_print>
   10a18:	4040      	eors	r0, r0
   10a1a:	f380 8811 	msr	BASEPRI, r0
   10a1e:	f04f 0003 	mov.w	r0, #3
   10a22:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   10a24:	4a0b      	ldr	r2, [pc, #44]	; (10a54 <bt_recv+0x104>)
   10a26:	7828      	ldrb	r0, [r5, #0]
   10a28:	2306      	movs	r3, #6
   10a2a:	4621      	mov	r1, r4
   10a2c:	f018 fdcc 	bl	295c8 <handle_event>
   10a30:	e7ba      	b.n	109a8 <bt_recv+0x58>
		net_buf_unref(buf);
   10a32:	4620      	mov	r0, r4
   10a34:	f012 fd30 	bl	23498 <net_buf_unref>
		return -EINVAL;
   10a38:	f06f 0015 	mvn.w	r0, #21
   10a3c:	e7c9      	b.n	109d2 <bt_recv+0x82>
   10a3e:	bf00      	nop
   10a40:	2000165c 	.word	0x2000165c
   10a44:	00030ac7 	.word	0x00030ac7
   10a48:	00030b45 	.word	0x00030b45
   10a4c:	00030b04 	.word	0x00030b04
   10a50:	00030b77 	.word	0x00030b77
   10a54:	0002f580 	.word	0x0002f580

00010a58 <bt_recv_prio>:
{
   10a58:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   10a5a:	7d03      	ldrb	r3, [r0, #20]
   10a5c:	2b01      	cmp	r3, #1
{
   10a5e:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   10a60:	d00c      	beq.n	10a7c <bt_recv_prio+0x24>
   10a62:	4a09      	ldr	r2, [pc, #36]	; (10a88 <bt_recv_prio+0x30>)
   10a64:	4909      	ldr	r1, [pc, #36]	; (10a8c <bt_recv_prio+0x34>)
   10a66:	480a      	ldr	r0, [pc, #40]	; (10a90 <bt_recv_prio+0x38>)
   10a68:	f640 5396 	movw	r3, #3478	; 0xd96
   10a6c:	f016 fd62 	bl	27534 <assert_print>
   10a70:	4040      	eors	r0, r0
   10a72:	f380 8811 	msr	BASEPRI, r0
   10a76:	f04f 0003 	mov.w	r0, #3
   10a7a:	df02      	svc	2
	hci_event_prio(buf);
   10a7c:	4620      	mov	r0, r4
   10a7e:	f7ff ff15 	bl	108ac <hci_event_prio>
}
   10a82:	2000      	movs	r0, #0
   10a84:	bd10      	pop	{r4, pc}
   10a86:	bf00      	nop
   10a88:	00030ac7 	.word	0x00030ac7
   10a8c:	00030ba5 	.word	0x00030ba5
   10a90:	00030b04 	.word	0x00030b04

00010a94 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   10a94:	4a08      	ldr	r2, [pc, #32]	; (10ab8 <bt_hci_driver_register+0x24>)
{
   10a96:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   10a98:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
   10a9c:	b930      	cbnz	r0, 10aac <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   10a9e:	68d9      	ldr	r1, [r3, #12]
   10aa0:	b139      	cbz	r1, 10ab2 <bt_hci_driver_register+0x1e>
   10aa2:	6959      	ldr	r1, [r3, #20]
   10aa4:	b129      	cbz	r1, 10ab2 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   10aa6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
	return 0;
   10aaa:	4770      	bx	lr
		return -EALREADY;
   10aac:	f06f 0077 	mvn.w	r0, #119	; 0x77
   10ab0:	4770      	bx	lr
		return -EINVAL;
   10ab2:	f06f 0015 	mvn.w	r0, #21
}
   10ab6:	4770      	bx	lr
   10ab8:	20000000 	.word	0x20000000

00010abc <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10abc:	4801      	ldr	r0, [pc, #4]	; (10ac4 <bt_finalize_init+0x8>)
   10abe:	2104      	movs	r1, #4
   10ac0:	f018 bdaf 	b.w	29622 <atomic_or>
   10ac4:	200000cc 	.word	0x200000cc

00010ac8 <init_work>:

static void init_work(struct k_work *work)
{
   10ac8:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
   10aca:	f7fb fd89 	bl	c5e0 <bt_init>
	if (ready_cb) {
   10ace:	4b03      	ldr	r3, [pc, #12]	; (10adc <init_work+0x14>)
   10ad0:	681b      	ldr	r3, [r3, #0]
   10ad2:	b113      	cbz	r3, 10ada <init_work+0x12>
		ready_cb(err);
	}
}
   10ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   10ad8:	4718      	bx	r3
}
   10ada:	bd10      	pop	{r4, pc}
   10adc:	20001678 	.word	0x20001678

00010ae0 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   10ae0:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
   10ae2:	4d24      	ldr	r5, [pc, #144]	; (10b74 <bt_enable+0x94>)
   10ae4:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
{
   10ae8:	b088      	sub	sp, #32
   10aea:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   10aec:	2b00      	cmp	r3, #0
   10aee:	d03b      	beq.n	10b68 <bt_enable+0x88>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10af0:	f06f 0102 	mvn.w	r1, #2
   10af4:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   10af8:	f018 fe34 	bl	29764 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   10afc:	2101      	movs	r1, #1
   10afe:	f018 fd90 	bl	29622 <atomic_or>
		return -ENODEV;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_DISABLE);

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   10b02:	07c3      	lsls	r3, r0, #31
   10b04:	d433      	bmi.n	10b6e <bt_enable+0x8e>
		return -EALREADY;
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		err = bt_settings_init();
   10b06:	f018 fcf4 	bl	294f2 <bt_settings_init>
		if (err) {
   10b0a:	4604      	mov	r4, r0
   10b0c:	bb48      	cbnz	r0, 10b62 <bt_enable+0x82>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   10b0e:	4b1a      	ldr	r3, [pc, #104]	; (10b78 <bt_enable+0x98>)
   10b10:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   10b12:	2200      	movs	r2, #0
   10b14:	2300      	movs	r3, #0
   10b16:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10b1a:	f06f 0308 	mvn.w	r3, #8
   10b1e:	e9cd 0302 	strd	r0, r3, [sp, #8]
   10b22:	e9cd 0000 	strd	r0, r0, [sp]
   10b26:	9004      	str	r0, [sp, #16]
   10b28:	4b14      	ldr	r3, [pc, #80]	; (10b7c <bt_enable+0x9c>)
   10b2a:	4915      	ldr	r1, [pc, #84]	; (10b80 <bt_enable+0xa0>)
   10b2c:	4815      	ldr	r0, [pc, #84]	; (10b84 <bt_enable+0xa4>)
   10b2e:	f44f 7220 	mov.w	r2, #640	; 0x280
   10b32:	f014 ff8f 	bl	25a54 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   10b36:	4914      	ldr	r1, [pc, #80]	; (10b88 <bt_enable+0xa8>)
   10b38:	4812      	ldr	r0, [pc, #72]	; (10b84 <bt_enable+0xa4>)
   10b3a:	f01d fd25 	bl	2e588 <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&rx_thread_data, "BT RX");
#endif

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
   10b3e:	f7ff f9f3 	bl	ff28 <bt_hci_ecc_init>
	}

	err = bt_dev.drv->open();
   10b42:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   10b46:	68db      	ldr	r3, [r3, #12]
   10b48:	4798      	blx	r3
	if (err) {
   10b4a:	4604      	mov	r4, r0
   10b4c:	b948      	cbnz	r0, 10b62 <bt_enable+0x82>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   10b4e:	b926      	cbnz	r6, 10b5a <bt_enable+0x7a>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   10b50:	b008      	add	sp, #32
   10b52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
   10b56:	f7fb bd43 	b.w	c5e0 <bt_init>
	k_work_submit(&bt_dev.init);
   10b5a:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   10b5e:	f015 fa77 	bl	26050 <k_work_submit>
}
   10b62:	4620      	mov	r0, r4
   10b64:	b008      	add	sp, #32
   10b66:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   10b68:	f06f 0412 	mvn.w	r4, #18
   10b6c:	e7f9      	b.n	10b62 <bt_enable+0x82>
		return -EALREADY;
   10b6e:	f06f 0477 	mvn.w	r4, #119	; 0x77
   10b72:	e7f6      	b.n	10b62 <bt_enable+0x82>
   10b74:	20000000 	.word	0x20000000
   10b78:	20001678 	.word	0x20001678
   10b7c:	000103a9 	.word	0x000103a9
   10b80:	20003640 	.word	0x20003640
   10b84:	20000b88 	.word	0x20000b88
   10b88:	00030bc8 	.word	0x00030bc8

00010b8c <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   10b8c:	4800      	ldr	r0, [pc, #0]	; (10b90 <bt_get_name+0x4>)
   10b8e:	4770      	bx	lr
   10b90:	000308cf 	.word	0x000308cf

00010b94 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   10b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   10b96:	4f0b      	ldr	r7, [pc, #44]	; (10bc4 <id_find+0x30>)
{
   10b98:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   10b9a:	2500      	movs	r5, #0
   10b9c:	79fb      	ldrb	r3, [r7, #7]
   10b9e:	b2ec      	uxtb	r4, r5
   10ba0:	42a3      	cmp	r3, r4
   10ba2:	d802      	bhi.n	10baa <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   10ba4:	f06f 0401 	mvn.w	r4, #1
   10ba8:	e009      	b.n	10bbe <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   10baa:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   10bae:	2207      	movs	r2, #7
   10bb0:	4439      	add	r1, r7
   10bb2:	4630      	mov	r0, r6
   10bb4:	f018 fbb6 	bl	29324 <memcmp>
   10bb8:	3501      	adds	r5, #1
   10bba:	2800      	cmp	r0, #0
   10bbc:	d1ee      	bne.n	10b9c <id_find+0x8>
}
   10bbe:	4620      	mov	r0, r4
   10bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10bc2:	bf00      	nop
   10bc4:	20000000 	.word	0x20000000

00010bc8 <set_random_address>:
{
   10bc8:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   10bca:	4914      	ldr	r1, [pc, #80]	; (10c1c <set_random_address+0x54>)
   10bcc:	2206      	movs	r2, #6
   10bce:	4605      	mov	r5, r0
   10bd0:	f018 fba8 	bl	29324 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   10bd4:	4604      	mov	r4, r0
   10bd6:	b1e0      	cbz	r0, 10c12 <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   10bd8:	2106      	movs	r1, #6
   10bda:	f242 0005 	movw	r0, #8197	; 0x2005
   10bde:	f7ff fc8f 	bl	10500 <bt_hci_cmd_create>
	if (!buf) {
   10be2:	4604      	mov	r4, r0
   10be4:	b1b8      	cbz	r0, 10c16 <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   10be6:	2206      	movs	r2, #6
   10be8:	4629      	mov	r1, r5
   10bea:	3008      	adds	r0, #8
   10bec:	f01c fbf7 	bl	2d3de <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   10bf0:	4621      	mov	r1, r4
   10bf2:	2200      	movs	r2, #0
   10bf4:	f242 0005 	movw	r0, #8197	; 0x2005
   10bf8:	f7ff fcde 	bl	105b8 <bt_hci_cmd_send_sync>
	if (err) {
   10bfc:	4604      	mov	r4, r0
   10bfe:	b940      	cbnz	r0, 10c12 <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
   10c00:	2206      	movs	r2, #6
   10c02:	4806      	ldr	r0, [pc, #24]	; (10c1c <set_random_address+0x54>)
   10c04:	4629      	mov	r1, r5
   10c06:	f018 fb9e 	bl	29346 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   10c0a:	4b05      	ldr	r3, [pc, #20]	; (10c20 <set_random_address+0x58>)
   10c0c:	2201      	movs	r2, #1
   10c0e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
   10c12:	4620      	mov	r0, r4
   10c14:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   10c16:	f06f 0468 	mvn.w	r4, #104	; 0x68
   10c1a:	e7fa      	b.n	10c12 <set_random_address+0x4a>
   10c1c:	20000061 	.word	0x20000061
   10c20:	20000000 	.word	0x20000000

00010c24 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   10c24:	b530      	push	{r4, r5, lr}
   10c26:	4604      	mov	r4, r0
   10c28:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   10c2a:	460d      	mov	r5, r1
   10c2c:	b1e1      	cbz	r1, 10c68 <id_create.constprop.0+0x44>
   10c2e:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   10c30:	2207      	movs	r2, #7
   10c32:	a902      	add	r1, sp, #8
   10c34:	4628      	mov	r0, r5
   10c36:	9302      	str	r3, [sp, #8]
   10c38:	f8cd 300b 	str.w	r3, [sp, #11]
   10c3c:	f018 fb72 	bl	29324 <memcmp>
   10c40:	b190      	cbz	r0, 10c68 <id_create.constprop.0+0x44>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   10c42:	4816      	ldr	r0, [pc, #88]	; (10c9c <id_create.constprop.0+0x78>)
   10c44:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   10c48:	4629      	mov	r1, r5
   10c4a:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   10c4c:	f019 f834 	bl	29cb8 <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10c50:	4813      	ldr	r0, [pc, #76]	; (10ca0 <id_create.constprop.0+0x7c>)
   10c52:	f019 f834 	bl	29cbe <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   10c56:	0742      	lsls	r2, r0, #29
   10c58:	f3c0 0380 	ubfx	r3, r0, #2, #1
   10c5c:	d51b      	bpl.n	10c96 <id_create.constprop.0+0x72>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   10c5e:	f7ff fa01 	bl	10064 <bt_settings_save_id>
	}

	return 0;
   10c62:	2000      	movs	r0, #0
}
   10c64:	b005      	add	sp, #20
   10c66:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   10c68:	4668      	mov	r0, sp
   10c6a:	f018 fc8d 	bl	29588 <bt_addr_le_create_static>
			if (err) {
   10c6e:	2800      	cmp	r0, #0
   10c70:	d1f8      	bne.n	10c64 <id_create.constprop.0+0x40>
		} while (id_find(&new_addr) >= 0);
   10c72:	4668      	mov	r0, sp
   10c74:	f7ff ff8e 	bl	10b94 <id_find>
   10c78:	2800      	cmp	r0, #0
   10c7a:	daf5      	bge.n	10c68 <id_create.constprop.0+0x44>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   10c7c:	4807      	ldr	r0, [pc, #28]	; (10c9c <id_create.constprop.0+0x78>)
   10c7e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   10c82:	4404      	add	r4, r0
   10c84:	4669      	mov	r1, sp
   10c86:	4620      	mov	r0, r4
   10c88:	f019 f816 	bl	29cb8 <bt_addr_le_copy>
		if (addr) {
   10c8c:	2d00      	cmp	r5, #0
   10c8e:	d0df      	beq.n	10c50 <id_create.constprop.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   10c90:	4621      	mov	r1, r4
   10c92:	4628      	mov	r0, r5
   10c94:	e7da      	b.n	10c4c <id_create.constprop.0+0x28>
	return 0;
   10c96:	4618      	mov	r0, r3
   10c98:	e7e4      	b.n	10c64 <id_create.constprop.0+0x40>
   10c9a:	bf00      	nop
   10c9c:	20000000 	.word	0x20000000
   10ca0:	200000cc 	.word	0x200000cc

00010ca4 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10ca4:	4b0a      	ldr	r3, [pc, #40]	; (10cd0 <bt_id_pending_keys_update+0x2c>)
   10ca6:	f3bf 8f5b 	dmb	ish
   10caa:	e853 2f00 	ldrex	r2, [r3]
   10cae:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
   10cb2:	e843 1000 	strex	r0, r1, [r3]
   10cb6:	2800      	cmp	r0, #0
   10cb8:	d1f7      	bne.n	10caa <bt_id_pending_keys_update+0x6>
   10cba:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   10cbe:	0453      	lsls	r3, r2, #17
   10cc0:	d504      	bpl.n	10ccc <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   10cc2:	4904      	ldr	r1, [pc, #16]	; (10cd4 <bt_id_pending_keys_update+0x30>)
   10cc4:	2200      	movs	r2, #0
   10cc6:	2002      	movs	r0, #2
   10cc8:	f004 b99e 	b.w	15008 <bt_keys_foreach>
}
   10ccc:	4770      	bx	lr
   10cce:	bf00      	nop
   10cd0:	200000cc 	.word	0x200000cc
   10cd4:	00029df7 	.word	0x00029df7

00010cd8 <bt_id_add>:
{
   10cd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   10cda:	4c46      	ldr	r4, [pc, #280]	; (10df4 <bt_id_add+0x11c>)
   10cdc:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   10ce0:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
{
   10ce4:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   10ce6:	b10a      	cbz	r2, 10cec <bt_id_add+0x14>
   10ce8:	429a      	cmp	r2, r3
   10cea:	d208      	bcs.n	10cfe <bt_id_add+0x26>
		bt_dev.le.rl_entries++;
   10cec:	3301      	adds	r3, #1
   10cee:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   10cf2:	7a2b      	ldrb	r3, [r5, #8]
   10cf4:	f043 0304 	orr.w	r3, r3, #4
   10cf8:	722b      	strb	r3, [r5, #8]
}
   10cfa:	b003      	add	sp, #12
   10cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   10cfe:	2100      	movs	r1, #0
   10d00:	2206      	movs	r2, #6
   10d02:	4608      	mov	r0, r1
   10d04:	f001 f8f6 	bl	11ef4 <bt_conn_lookup_state_le>
	if (conn) {
   10d08:	4606      	mov	r6, r0
   10d0a:	b1a8      	cbz	r0, 10d38 <bt_id_add+0x60>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10d0c:	f3bf 8f5b 	dmb	ish
   10d10:	34cc      	adds	r4, #204	; 0xcc
   10d12:	e854 3f00 	ldrex	r3, [r4]
   10d16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   10d1a:	e844 3200 	strex	r2, r3, [r4]
   10d1e:	2a00      	cmp	r2, #0
   10d20:	d1f7      	bne.n	10d12 <bt_id_add+0x3a>
   10d22:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   10d26:	7a2b      	ldrb	r3, [r5, #8]
   10d28:	f043 0301 	orr.w	r3, r3, #1
   10d2c:	722b      	strb	r3, [r5, #8]
}
   10d2e:	b003      	add	sp, #12
   10d30:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   10d34:	f019 ba9e 	b.w	2a274 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   10d38:	4601      	mov	r1, r0
   10d3a:	482f      	ldr	r0, [pc, #188]	; (10df8 <bt_id_add+0x120>)
   10d3c:	f000 faae 	bl	1129c <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   10d40:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   10d44:	b9b3      	cbnz	r3, 10d74 <bt_id_add+0x9c>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   10d46:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
   10d4a:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   10d4e:	429a      	cmp	r2, r3
   10d50:	d11f      	bne.n	10d92 <bt_id_add+0xba>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   10d52:	2200      	movs	r2, #0
   10d54:	4611      	mov	r1, r2
   10d56:	f242 0029 	movw	r0, #8233	; 0x2029
   10d5a:	f7ff fc2d 	bl	105b8 <bt_hci_cmd_send_sync>
		if (err) {
   10d5e:	b970      	cbnz	r0, 10d7e <bt_id_add+0xa6>
		bt_dev.le.rl_entries++;
   10d60:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   10d64:	3301      	adds	r3, #1
   10d66:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   10d6a:	7a2b      	ldrb	r3, [r5, #8]
   10d6c:	f043 0304 	orr.w	r3, r3, #4
   10d70:	722b      	strb	r3, [r5, #8]
		goto done;
   10d72:	e004      	b.n	10d7e <bt_id_add+0xa6>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   10d74:	4630      	mov	r0, r6
   10d76:	f018 ffee 	bl	29d56 <addr_res_enable>
		if (err) {
   10d7a:	2800      	cmp	r0, #0
   10d7c:	d0e3      	beq.n	10d46 <bt_id_add+0x6e>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   10d7e:	2001      	movs	r0, #1
   10d80:	f018 ffe9 	bl	29d56 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   10d84:	481d      	ldr	r0, [pc, #116]	; (10dfc <bt_id_add+0x124>)
   10d86:	2100      	movs	r1, #0
}
   10d88:	b003      	add	sp, #12
   10d8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   10d8e:	f000 ba85 	b.w	1129c <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   10d92:	1c6f      	adds	r7, r5, #1
   10d94:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   10d98:	4638      	mov	r0, r7
   10d9a:	f018 ff96 	bl	29cca <hci_id_add.constprop.0>
	if (err) {
   10d9e:	4606      	mov	r6, r0
   10da0:	2800      	cmp	r0, #0
   10da2:	d1ec      	bne.n	10d7e <bt_id_add+0xa6>
	bt_dev.le.rl_entries++;
   10da4:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   10da8:	3301      	adds	r3, #1
   10daa:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   10dae:	7a2b      	ldrb	r3, [r5, #8]
   10db0:	f043 0304 	orr.w	r3, r3, #4
   10db4:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   10db6:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
   10dba:	075b      	lsls	r3, r3, #29
   10dbc:	d5df      	bpl.n	10d7e <bt_id_add+0xa6>
	bt_addr_le_copy(&cp.id_addr, addr);
   10dbe:	4639      	mov	r1, r7
   10dc0:	4668      	mov	r0, sp
   10dc2:	f018 ff79 	bl	29cb8 <bt_addr_le_copy>
	cp.mode = mode;
   10dc6:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   10dc8:	2108      	movs	r1, #8
   10dca:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   10dce:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   10dd2:	f7ff fb95 	bl	10500 <bt_hci_cmd_create>
	if (!buf) {
   10dd6:	4604      	mov	r4, r0
   10dd8:	2800      	cmp	r0, #0
   10dda:	d0d0      	beq.n	10d7e <bt_id_add+0xa6>
   10ddc:	2208      	movs	r2, #8
   10dde:	4669      	mov	r1, sp
   10de0:	4410      	add	r0, r2
   10de2:	f01c fafc 	bl	2d3de <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   10de6:	4632      	mov	r2, r6
   10de8:	4621      	mov	r1, r4
   10dea:	f242 004e 	movw	r0, #8270	; 0x204e
   10dee:	f7ff fbe3 	bl	105b8 <bt_hci_cmd_send_sync>
	if (err) {
   10df2:	e7c4      	b.n	10d7e <bt_id_add+0xa6>
   10df4:	20000000 	.word	0x20000000
   10df8:	00029d87 	.word	0x00029d87
   10dfc:	00029d2d 	.word	0x00029d2d

00010e00 <bt_id_del>:
{
   10e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
   10e04:	4c3c      	ldr	r4, [pc, #240]	; (10ef8 <bt_id_del+0xf8>)
   10e06:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   10e0a:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
{
   10e0e:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size ||
   10e10:	b112      	cbz	r2, 10e18 <bt_id_del+0x18>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   10e12:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   10e14:	4293      	cmp	r3, r2
   10e16:	dd08      	ble.n	10e2a <bt_id_del+0x2a>
		bt_dev.le.rl_entries--;
   10e18:	3b01      	subs	r3, #1
   10e1a:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   10e1e:	7a2b      	ldrb	r3, [r5, #8]
   10e20:	f023 0304 	bic.w	r3, r3, #4
   10e24:	722b      	strb	r3, [r5, #8]
}
   10e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   10e2a:	2100      	movs	r1, #0
   10e2c:	2206      	movs	r2, #6
   10e2e:	4608      	mov	r0, r1
   10e30:	f001 f860 	bl	11ef4 <bt_conn_lookup_state_le>
	if (conn) {
   10e34:	4606      	mov	r6, r0
   10e36:	b1a0      	cbz	r0, 10e62 <bt_id_del+0x62>
   10e38:	f3bf 8f5b 	dmb	ish
   10e3c:	34cc      	adds	r4, #204	; 0xcc
   10e3e:	e854 3f00 	ldrex	r3, [r4]
   10e42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   10e46:	e844 3200 	strex	r2, r3, [r4]
   10e4a:	2a00      	cmp	r2, #0
   10e4c:	d1f7      	bne.n	10e3e <bt_id_del+0x3e>
   10e4e:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   10e52:	7a2b      	ldrb	r3, [r5, #8]
   10e54:	f043 0302 	orr.w	r3, r3, #2
   10e58:	722b      	strb	r3, [r5, #8]
}
   10e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   10e5e:	f019 ba09 	b.w	2a274 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   10e62:	4601      	mov	r1, r0
   10e64:	4825      	ldr	r0, [pc, #148]	; (10efc <bt_id_del+0xfc>)
   10e66:	f000 fa19 	bl	1129c <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   10e6a:	4630      	mov	r0, r6
   10e6c:	f018 ff73 	bl	29d56 <addr_res_enable>
	if (err) {
   10e70:	4607      	mov	r7, r0
   10e72:	b988      	cbnz	r0, 10e98 <bt_id_del+0x98>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   10e74:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   10e78:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   10e7c:	429a      	cmp	r2, r3
   10e7e:	d217      	bcs.n	10eb0 <bt_id_del+0xb0>
		bt_dev.le.rl_entries--;
   10e80:	3b01      	subs	r3, #1
   10e82:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   10e86:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   10e88:	491d      	ldr	r1, [pc, #116]	; (10f00 <bt_id_del+0x100>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   10e8a:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   10e8e:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   10e90:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   10e92:	2002      	movs	r0, #2
   10e94:	f004 f8b8 	bl	15008 <bt_keys_foreach>
	if (bt_dev.le.rl_entries) {
   10e98:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   10e9c:	b113      	cbz	r3, 10ea4 <bt_id_del+0xa4>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   10e9e:	2001      	movs	r0, #1
   10ea0:	f018 ff59 	bl	29d56 <addr_res_enable>
}
   10ea4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   10ea8:	4816      	ldr	r0, [pc, #88]	; (10f04 <bt_id_del+0x104>)
   10eaa:	2100      	movs	r1, #0
   10eac:	f000 b9f6 	b.w	1129c <bt_le_ext_adv_foreach>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   10eb0:	2107      	movs	r1, #7
   10eb2:	f242 0028 	movw	r0, #8232	; 0x2028
   10eb6:	f7ff fb23 	bl	10500 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   10eba:	f105 0801 	add.w	r8, r5, #1
	if (!buf) {
   10ebe:	4606      	mov	r6, r0
   10ec0:	2800      	cmp	r0, #0
   10ec2:	d0e9      	beq.n	10e98 <bt_id_del+0x98>
	return net_buf_simple_add(&buf->b, len);
   10ec4:	2107      	movs	r1, #7
   10ec6:	3008      	adds	r0, #8
   10ec8:	f01c fa83 	bl	2d3d2 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   10ecc:	4641      	mov	r1, r8
   10ece:	f018 fef3 	bl	29cb8 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   10ed2:	463a      	mov	r2, r7
   10ed4:	4631      	mov	r1, r6
   10ed6:	f242 0028 	movw	r0, #8232	; 0x2028
   10eda:	f7ff fb6d 	bl	105b8 <bt_hci_cmd_send_sync>
	if (err) {
   10ede:	2800      	cmp	r0, #0
   10ee0:	d1da      	bne.n	10e98 <bt_id_del+0x98>
	bt_dev.le.rl_entries--;
   10ee2:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   10ee6:	3b01      	subs	r3, #1
   10ee8:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   10eec:	7a2b      	ldrb	r3, [r5, #8]
   10eee:	f023 0304 	bic.w	r3, r3, #4
   10ef2:	722b      	strb	r3, [r5, #8]
   10ef4:	e7d0      	b.n	10e98 <bt_id_del+0x98>
   10ef6:	bf00      	nop
   10ef8:	20000000 	.word	0x20000000
   10efc:	00029d87 	.word	0x00029d87
   10f00:	00029d1b 	.word	0x00029d1b
   10f04:	00029d2d 	.word	0x00029d2d

00010f08 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   10f08:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10f0a:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   10f0c:	4605      	mov	r5, r0
   10f0e:	b918      	cbnz	r0, 10f18 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   10f10:	b1ec      	cbz	r4, 10f4e <bt_id_create+0x46>
		return -EINVAL;
   10f12:	f06f 0015 	mvn.w	r0, #21
   10f16:	e018      	b.n	10f4a <bt_id_create+0x42>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   10f18:	2300      	movs	r3, #0
   10f1a:	2207      	movs	r2, #7
   10f1c:	4669      	mov	r1, sp
   10f1e:	9300      	str	r3, [sp, #0]
   10f20:	f8cd 3003 	str.w	r3, [sp, #3]
   10f24:	f018 f9fe 	bl	29324 <memcmp>
   10f28:	2800      	cmp	r0, #0
   10f2a:	d0f1      	beq.n	10f10 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   10f2c:	782b      	ldrb	r3, [r5, #0]
   10f2e:	2b01      	cmp	r3, #1
   10f30:	d1ef      	bne.n	10f12 <bt_id_create+0xa>
   10f32:	79ab      	ldrb	r3, [r5, #6]
   10f34:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   10f38:	2bc0      	cmp	r3, #192	; 0xc0
   10f3a:	d1ea      	bne.n	10f12 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   10f3c:	4628      	mov	r0, r5
   10f3e:	f7ff fe29 	bl	10b94 <id_find>
   10f42:	2800      	cmp	r0, #0
   10f44:	dbe4      	blt.n	10f10 <bt_id_create+0x8>
			return -EALREADY;
   10f46:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   10f4a:	b002      	add	sp, #8
   10f4c:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   10f4e:	4e12      	ldr	r6, [pc, #72]	; (10f98 <bt_id_create+0x90>)
   10f50:	79f3      	ldrb	r3, [r6, #7]
   10f52:	2b01      	cmp	r3, #1
   10f54:	d01c      	beq.n	10f90 <bt_id_create+0x88>
   10f56:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
   10f5a:	f018 feb0 	bl	29cbe <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   10f5e:	07c3      	lsls	r3, r0, #31
   10f60:	d40b      	bmi.n	10f7a <bt_id_create+0x72>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   10f62:	2d00      	cmp	r5, #0
   10f64:	d0d5      	beq.n	10f12 <bt_id_create+0xa>
   10f66:	2207      	movs	r2, #7
   10f68:	4669      	mov	r1, sp
   10f6a:	4628      	mov	r0, r5
   10f6c:	9400      	str	r4, [sp, #0]
   10f6e:	f8cd 4003 	str.w	r4, [sp, #3]
   10f72:	f018 f9d7 	bl	29324 <memcmp>
   10f76:	2800      	cmp	r0, #0
   10f78:	d0cb      	beq.n	10f12 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   10f7a:	79f4      	ldrb	r4, [r6, #7]
	err = id_create(new_id, addr, irk);
   10f7c:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
   10f7e:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
   10f80:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   10f82:	71f3      	strb	r3, [r6, #7]
	err = id_create(new_id, addr, irk);
   10f84:	f7ff fe4e 	bl	10c24 <id_create.constprop.0>
	new_id = bt_dev.id_count++;
   10f88:	2800      	cmp	r0, #0
   10f8a:	bf08      	it	eq
   10f8c:	4620      	moveq	r0, r4
   10f8e:	e7dc      	b.n	10f4a <bt_id_create+0x42>
		return -ENOMEM;
   10f90:	f06f 000b 	mvn.w	r0, #11
   10f94:	e7d9      	b.n	10f4a <bt_id_create+0x42>
   10f96:	bf00      	nop
   10f98:	20000000 	.word	0x20000000

00010f9c <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   10f9c:	b570      	push	{r4, r5, r6, lr}
   10f9e:	b086      	sub	sp, #24
   10fa0:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   10fa2:	aa01      	add	r2, sp, #4
   10fa4:	2100      	movs	r1, #0
   10fa6:	f241 0009 	movw	r0, #4105	; 0x1009
   10faa:	f7ff fb05 	bl	105b8 <bt_hci_cmd_send_sync>
	if (err) {
   10fae:	4604      	mov	r4, r0
   10fb0:	b970      	cbnz	r0, 10fd0 <bt_id_read_public_addr+0x34>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   10fb2:	9b01      	ldr	r3, [sp, #4]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   10fb4:	9002      	str	r0, [sp, #8]
   10fb6:	689d      	ldr	r5, [r3, #8]
   10fb8:	f8ad 000c 	strh.w	r0, [sp, #12]
   10fbc:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   10fbe:	2206      	movs	r2, #6
   10fc0:	a902      	add	r1, sp, #8
   10fc2:	4628      	mov	r0, r5
   10fc4:	f018 f9ae 	bl	29324 <memcmp>
   10fc8:	b920      	cbnz	r0, 10fd4 <bt_id_read_public_addr+0x38>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   10fca:	9801      	ldr	r0, [sp, #4]
   10fcc:	f012 fa64 	bl	23498 <net_buf_unref>
		return 0U;
   10fd0:	2000      	movs	r0, #0
   10fd2:	e016      	b.n	11002 <bt_id_read_public_addr+0x66>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   10fd4:	4b0c      	ldr	r3, [pc, #48]	; (11008 <bt_id_read_public_addr+0x6c>)
   10fd6:	6818      	ldr	r0, [r3, #0]
   10fd8:	9004      	str	r0, [sp, #16]
   10fda:	889b      	ldrh	r3, [r3, #4]
   10fdc:	f8ad 3014 	strh.w	r3, [sp, #20]
   10fe0:	2206      	movs	r2, #6
   10fe2:	a904      	add	r1, sp, #16
   10fe4:	4628      	mov	r0, r5
   10fe6:	f018 f99d 	bl	29324 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   10fea:	2800      	cmp	r0, #0
   10fec:	d0ed      	beq.n	10fca <bt_id_read_public_addr+0x2e>
	memcpy(dst, src, sizeof(*dst));
   10fee:	2206      	movs	r2, #6
   10ff0:	4629      	mov	r1, r5
   10ff2:	1c70      	adds	r0, r6, #1
   10ff4:	f018 f9a7 	bl	29346 <memcpy>
	}

	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
   10ff8:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   10ffa:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   10ffc:	f012 fa4c 	bl	23498 <net_buf_unref>
	return 1U;
   11000:	2001      	movs	r0, #1
}
   11002:	b006      	add	sp, #24
   11004:	bd70      	pop	{r4, r5, r6, pc}
   11006:	bf00      	nop
   11008:	0002f2a5 	.word	0x0002f2a5

0001100c <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   1100c:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   1100e:	4668      	mov	r0, sp
   11010:	f7ff ffc4 	bl	10f9c <bt_id_read_public_addr>
   11014:	4b04      	ldr	r3, [pc, #16]	; (11028 <bt_setup_public_id_addr+0x1c>)
   11016:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   11018:	b118      	cbz	r0, 11022 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   1101a:	4669      	mov	r1, sp
   1101c:	2000      	movs	r0, #0
   1101e:	f7ff fe01 	bl	10c24 <id_create.constprop.0>
}
   11022:	b003      	add	sp, #12
   11024:	f85d fb04 	ldr.w	pc, [sp], #4
   11028:	20000000 	.word	0x20000000

0001102c <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   1102c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   11030:	4b15      	ldr	r3, [pc, #84]	; (11088 <bt_read_static_addr+0x5c>)
   11032:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   11036:	f014 0401 	ands.w	r4, r4, #1
{
   1103a:	4607      	mov	r7, r0
   1103c:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1103e:	d015      	beq.n	1106c <bt_read_static_addr+0x40>
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   11040:	aa01      	add	r2, sp, #4
   11042:	2100      	movs	r1, #0
   11044:	f64f 4009 	movw	r0, #64521	; 0xfc09
   11048:	f7ff fab6 	bl	105b8 <bt_hci_cmd_send_sync>
	if (err) {
   1104c:	4605      	mov	r5, r0
   1104e:	b9c8      	cbnz	r0, 11084 <bt_read_static_addr+0x58>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   11050:	9b01      	ldr	r3, [sp, #4]
   11052:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   11054:	785c      	ldrb	r4, [r3, #1]
   11056:	42b4      	cmp	r4, r6
   11058:	bf28      	it	cs
   1105a:	4634      	movcs	r4, r6
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   1105c:	f04f 0816 	mov.w	r8, #22
   11060:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   11062:	42a5      	cmp	r5, r4
   11064:	db06      	blt.n	11074 <bt_read_static_addr+0x48>
	}

	net_buf_unref(rsp);
   11066:	9801      	ldr	r0, [sp, #4]
   11068:	f012 fa16 	bl	23498 <net_buf_unref>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   1106c:	4620      	mov	r0, r4
   1106e:	b002      	add	sp, #8
   11070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   11074:	fb08 7005 	mla	r0, r8, r5, r7
   11078:	2216      	movs	r2, #22
   1107a:	4631      	mov	r1, r6
   1107c:	f018 f963 	bl	29346 <memcpy>
	for (i = 0; i < cnt; i++) {
   11080:	3501      	adds	r5, #1
   11082:	e7ee      	b.n	11062 <bt_read_static_addr+0x36>
		return 0;
   11084:	2400      	movs	r4, #0
   11086:	e7f1      	b.n	1106c <bt_read_static_addr+0x40>
   11088:	20000000 	.word	0x20000000

0001108c <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   1108c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   1108e:	4e15      	ldr	r6, [pc, #84]	; (110e4 <bt_setup_random_id_addr+0x58>)
   11090:	79f4      	ldrb	r4, [r6, #7]
{
   11092:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   11094:	b9f4      	cbnz	r4, 110d4 <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   11096:	2101      	movs	r1, #1
   11098:	a802      	add	r0, sp, #8
   1109a:	f7ff ffc7 	bl	1102c <bt_read_static_addr>
   1109e:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   110a0:	b1c0      	cbz	r0, 110d4 <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   110a2:	2716      	movs	r7, #22
   110a4:	ab02      	add	r3, sp, #8
   110a6:	b2e5      	uxtb	r5, r4
   110a8:	fb07 3105 	mla	r1, r7, r5, r3
   110ac:	2206      	movs	r2, #6
   110ae:	f10d 0001 	add.w	r0, sp, #1
   110b2:	f018 f948 	bl	29346 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   110b6:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
   110b8:	4669      	mov	r1, sp
   110ba:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   110bc:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   110c0:	f7ff fdb0 	bl	10c24 <id_create.constprop.0>
				if (err) {
   110c4:	b920      	cbnz	r0, 110d0 <bt_setup_random_id_addr+0x44>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   110c6:	79f2      	ldrb	r2, [r6, #7]
   110c8:	3401      	adds	r4, #1
   110ca:	b2e3      	uxtb	r3, r4
   110cc:	429a      	cmp	r2, r3
   110ce:	d8e9      	bhi.n	110a4 <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
   110d0:	b009      	add	sp, #36	; 0x24
   110d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   110d4:	2100      	movs	r1, #0
   110d6:	4608      	mov	r0, r1
}
   110d8:	b009      	add	sp, #36	; 0x24
   110da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   110de:	f7ff bf13 	b.w	10f08 <bt_id_create>
   110e2:	bf00      	nop
   110e4:	20000000 	.word	0x20000000

000110e8 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   110e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   110ec:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
   110f0:	7805      	ldrb	r5, [r0, #0]
{
   110f2:	460e      	mov	r6, r1
   110f4:	4690      	mov	r8, r2
   110f6:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   110f8:	d026      	beq.n	11148 <bt_id_set_adv_own_addr+0x60>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   110fa:	4c23      	ldr	r4, [pc, #140]	; (11188 <bt_id_set_adv_own_addr+0xa0>)
   110fc:	b12a      	cbz	r2, 1110a <bt_id_set_adv_own_addr+0x22>
   110fe:	0688      	lsls	r0, r1, #26
   11100:	d503      	bpl.n	1110a <bt_id_set_adv_own_addr+0x22>
   11102:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
   11106:	0659      	lsls	r1, r3, #25
   11108:	d53a      	bpl.n	11180 <bt_id_set_adv_own_addr+0x98>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1110a:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   1110e:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   11112:	5ce3      	ldrb	r3, [r4, r3]
   11114:	2b01      	cmp	r3, #1
   11116:	d008      	beq.n	1112a <bt_id_set_adv_own_addr+0x42>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   11118:	eba9 0505 	sub.w	r5, r9, r5
   1111c:	5d63      	ldrb	r3, [r4, r5]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1111e:	f1b8 0f00 	cmp.w	r8, #0
   11122:	d10c      	bne.n	1113e <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   11124:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   11126:	2000      	movs	r0, #0
   11128:	e007      	b.n	1113a <bt_id_set_adv_own_addr+0x52>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1112a:	2007      	movs	r0, #7
   1112c:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   11130:	4420      	add	r0, r4
   11132:	f7ff fd49 	bl	10bc8 <set_random_address>
				if (err) {
   11136:	2800      	cmp	r0, #0
   11138:	d0ee      	beq.n	11118 <bt_id_set_adv_own_addr+0x30>
}
   1113a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1113e:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   11140:	bf48      	it	mi
   11142:	f043 0302 	orrmi.w	r3, r3, #2
   11146:	e7ed      	b.n	11124 <bt_id_set_adv_own_addr+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   11148:	074b      	lsls	r3, r1, #29
   1114a:	d515      	bpl.n	11178 <bt_id_set_adv_own_addr+0x90>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1114c:	f8df 8038 	ldr.w	r8, [pc, #56]	; 11188 <bt_id_set_adv_own_addr+0xa0>
   11150:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   11154:	00ee      	lsls	r6, r5, #3
   11156:	f818 3003 	ldrb.w	r3, [r8, r3]
   1115a:	2b01      	cmp	r3, #1
   1115c:	d10a      	bne.n	11174 <bt_id_set_adv_own_addr+0x8c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1115e:	2007      	movs	r0, #7
   11160:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   11164:	4440      	add	r0, r8
   11166:	f7ff fd2f 	bl	10bc8 <set_random_address>
			*own_addr_type = id_addr->type;
   1116a:	1b75      	subs	r5, r6, r5
   1116c:	f818 3005 	ldrb.w	r3, [r8, r5]
			*own_addr_type = BT_ADDR_LE_RANDOM;
   11170:	703b      	strb	r3, [r7, #0]
		if (err) {
   11172:	e7e2      	b.n	1113a <bt_id_set_adv_own_addr+0x52>
	int err = 0;
   11174:	4620      	mov	r0, r4
   11176:	e7f8      	b.n	1116a <bt_id_set_adv_own_addr+0x82>
			err = bt_id_set_adv_private_addr(adv);
   11178:	f018 fe29 	bl	29dce <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   1117c:	2301      	movs	r3, #1
   1117e:	e7f7      	b.n	11170 <bt_id_set_adv_own_addr+0x88>
			return -ENOTSUP;
   11180:	f06f 0085 	mvn.w	r0, #133	; 0x85
   11184:	e7d9      	b.n	1113a <bt_id_set_adv_own_addr+0x52>
   11186:	bf00      	nop
   11188:	20000000 	.word	0x20000000

0001118c <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   1118c:	6843      	ldr	r3, [r0, #4]
{
   1118e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11190:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   11192:	0558      	lsls	r0, r3, #21
   11194:	d502      	bpl.n	1119c <valid_adv_param+0x10>
		return false;
   11196:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   11198:	b003      	add	sp, #12
   1119a:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1119c:	6922      	ldr	r2, [r4, #16]
   1119e:	b10a      	cbz	r2, 111a4 <valid_adv_param+0x18>
   111a0:	07d9      	lsls	r1, r3, #31
   111a2:	d5f8      	bpl.n	11196 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   111a4:	4d1a      	ldr	r5, [pc, #104]	; (11210 <valid_adv_param+0x84>)
   111a6:	7820      	ldrb	r0, [r4, #0]
   111a8:	79eb      	ldrb	r3, [r5, #7]
   111aa:	4283      	cmp	r3, r0
   111ac:	d9f3      	bls.n	11196 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   111ae:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   111b2:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   111b4:	2207      	movs	r2, #7
   111b6:	4669      	mov	r1, sp
   111b8:	4428      	add	r0, r5
   111ba:	9300      	str	r3, [sp, #0]
   111bc:	f8cd 3003 	str.w	r3, [sp, #3]
   111c0:	f018 f8b0 	bl	29324 <memcmp>
	if (param->id >= bt_dev.id_count ||
   111c4:	2800      	cmp	r0, #0
   111c6:	d0e6      	beq.n	11196 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   111c8:	6860      	ldr	r0, [r4, #4]
   111ca:	07c2      	lsls	r2, r0, #31
   111cc:	d406      	bmi.n	111dc <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   111ce:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   111d2:	2b08      	cmp	r3, #8
   111d4:	d802      	bhi.n	111dc <valid_adv_param+0x50>
   111d6:	68a3      	ldr	r3, [r4, #8]
   111d8:	2b9f      	cmp	r3, #159	; 0x9f
   111da:	d9dc      	bls.n	11196 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   111dc:	f010 0f30 	tst.w	r0, #48	; 0x30
   111e0:	d002      	beq.n	111e8 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   111e2:	6923      	ldr	r3, [r4, #16]
   111e4:	2b00      	cmp	r3, #0
   111e6:	d0d6      	beq.n	11196 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   111e8:	06c3      	lsls	r3, r0, #27
   111ea:	d401      	bmi.n	111f0 <valid_adv_param+0x64>
   111ec:	6923      	ldr	r3, [r4, #16]
   111ee:	b943      	cbnz	r3, 11202 <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
   111f0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   111f4:	429a      	cmp	r2, r3
   111f6:	d8ce      	bhi.n	11196 <valid_adv_param+0xa>
   111f8:	2a1f      	cmp	r2, #31
   111fa:	d9cc      	bls.n	11196 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   111fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   11200:	d8c9      	bhi.n	11196 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   11202:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   11206:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   1120a:	bf18      	it	ne
   1120c:	2001      	movne	r0, #1
   1120e:	e7c3      	b.n	11198 <valid_adv_param+0xc>
   11210:	20000000 	.word	0x20000000

00011214 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   11214:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   11216:	4606      	mov	r6, r0
   11218:	4b1e      	ldr	r3, [pc, #120]	; (11294 <le_adv_start_add_conn+0x80>)
   1121a:	f816 2b09 	ldrb.w	r2, [r6], #9
   1121e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   11222:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   11224:	2300      	movs	r3, #0
{
   11226:	4605      	mov	r5, r0
   11228:	2207      	movs	r2, #7
   1122a:	460f      	mov	r7, r1
   1122c:	4630      	mov	r0, r6
   1122e:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   11230:	9300      	str	r3, [sp, #0]
   11232:	f8cd 3003 	str.w	r3, [sp, #3]
   11236:	f018 f875 	bl	29324 <memcmp>
   1123a:	782a      	ldrb	r2, [r5, #0]
   1123c:	4604      	mov	r4, r0
   1123e:	b9a8      	cbnz	r0, 1126c <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   11240:	4b15      	ldr	r3, [pc, #84]	; (11298 <le_adv_start_add_conn+0x84>)
   11242:	6818      	ldr	r0, [r3, #0]
   11244:	8899      	ldrh	r1, [r3, #4]
   11246:	9002      	str	r0, [sp, #8]
   11248:	799b      	ldrb	r3, [r3, #6]
   1124a:	f8ad 100c 	strh.w	r1, [sp, #12]
   1124e:	4610      	mov	r0, r2
   11250:	a902      	add	r1, sp, #8
   11252:	f88d 300e 	strb.w	r3, [sp, #14]
   11256:	f000 fe13 	bl	11e80 <bt_conn_add_le>
		if (!conn) {
   1125a:	4605      	mov	r5, r0
   1125c:	b1b8      	cbz	r0, 1128e <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   1125e:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   11260:	f000 fc6e 	bl	11b40 <bt_conn_set_state>
	*out_conn = conn;
   11264:	603d      	str	r5, [r7, #0]
	return 0;
}
   11266:	4620      	mov	r0, r4
   11268:	b005      	add	sp, #20
   1126a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   1126c:	4631      	mov	r1, r6
   1126e:	4610      	mov	r0, r2
   11270:	f019 f8bb 	bl	2a3ea <bt_conn_exists_le>
   11274:	4604      	mov	r4, r0
   11276:	b938      	cbnz	r0, 11288 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   11278:	7828      	ldrb	r0, [r5, #0]
   1127a:	4631      	mov	r1, r6
   1127c:	f000 fe00 	bl	11e80 <bt_conn_add_le>
	if (!conn) {
   11280:	4605      	mov	r5, r0
   11282:	b120      	cbz	r0, 1128e <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   11284:	2105      	movs	r1, #5
   11286:	e7eb      	b.n	11260 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   11288:	f06f 0415 	mvn.w	r4, #21
   1128c:	e7eb      	b.n	11266 <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   1128e:	f06f 040b 	mvn.w	r4, #11
   11292:	e7e8      	b.n	11266 <le_adv_start_add_conn+0x52>
   11294:	20000000 	.word	0x20000000
   11298:	0002f2ab 	.word	0x0002f2ab

0001129c <bt_le_ext_adv_foreach>:
{
   1129c:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   1129e:	4801      	ldr	r0, [pc, #4]	; (112a4 <bt_le_ext_adv_foreach+0x8>)
   112a0:	4718      	bx	r3
   112a2:	bf00      	nop
   112a4:	20000018 	.word	0x20000018

000112a8 <bt_le_adv_lookup_legacy>:
}
   112a8:	4800      	ldr	r0, [pc, #0]	; (112ac <bt_le_adv_lookup_legacy+0x4>)
   112aa:	4770      	bx	lr
   112ac:	20000018 	.word	0x20000018

000112b0 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   112b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   112b4:	690e      	ldr	r6, [r1, #16]
{
   112b6:	b08f      	sub	sp, #60	; 0x3c
   112b8:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   112ba:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   112bc:	ebb6 0903 	subs.w	r9, r6, r3
{
   112c0:	4605      	mov	r5, r0
   112c2:	488c      	ldr	r0, [pc, #560]	; (114f4 <bt_le_adv_start_legacy+0x244>)
   112c4:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
   112c6:	bf18      	it	ne
   112c8:	f04f 0901 	movne.w	r9, #1
	struct bt_conn *conn = NULL;
   112cc:	9307      	str	r3, [sp, #28]
   112ce:	f018 fdb3 	bl	29e38 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   112d2:	0747      	lsls	r7, r0, #29
{
   112d4:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   112d6:	f140 8102 	bpl.w	114de <bt_le_adv_start_legacy+0x22e>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   112da:	4608      	mov	r0, r1
   112dc:	f7ff ff56 	bl	1118c <valid_adv_param>
   112e0:	b928      	cbnz	r0, 112ee <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   112e2:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   112e6:	4658      	mov	r0, fp
   112e8:	b00f      	add	sp, #60	; 0x3c
   112ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   112ee:	4620      	mov	r0, r4
   112f0:	f018 fd7f 	bl	29df2 <bt_id_adv_random_addr_check>
   112f4:	4680      	mov	r8, r0
   112f6:	2800      	cmp	r0, #0
   112f8:	d0f3      	beq.n	112e2 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   112fa:	f105 0710 	add.w	r7, r5, #16
   112fe:	4638      	mov	r0, r7
   11300:	f018 fd9a 	bl	29e38 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   11304:	f3c0 1b80 	ubfx	fp, r0, #6, #1
   11308:	0640      	lsls	r0, r0, #25
   1130a:	f100 80eb 	bmi.w	114e4 <bt_le_adv_start_legacy+0x234>
	(void)memset(&set_param, 0, sizeof(set_param));
   1130e:	220f      	movs	r2, #15
   11310:	4659      	mov	r1, fp
   11312:	a80a      	add	r0, sp, #40	; 0x28
   11314:	f018 f822 	bl	2935c <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   11318:	68a3      	ldr	r3, [r4, #8]
   1131a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
   1131e:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   11320:	68e3      	ldr	r3, [r4, #12]
   11322:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   11326:	f018 fd78 	bl	29e1a <get_adv_channel_map>
	if (adv->id != param->id) {
   1132a:	782a      	ldrb	r2, [r5, #0]
   1132c:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   1132e:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   11332:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   11334:	f88d b036 	strb.w	fp, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   11338:	d004      	beq.n	11344 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1133a:	486e      	ldr	r0, [pc, #440]	; (114f4 <bt_le_adv_start_legacy+0x244>)
   1133c:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   11340:	f018 fd80 	bl	29e44 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   11344:	4a6c      	ldr	r2, [pc, #432]	; (114f8 <bt_le_adv_start_legacy+0x248>)
	adv->id = param->id;
   11346:	7823      	ldrb	r3, [r4, #0]
   11348:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   1134a:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   1134e:	6861      	ldr	r1, [r4, #4]
   11350:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   11354:	464a      	mov	r2, r9
   11356:	4628      	mov	r0, r5
   11358:	f7ff fec6 	bl	110e8 <bt_id_set_adv_own_addr>
	if (err) {
   1135c:	4683      	mov	fp, r0
   1135e:	2800      	cmp	r0, #0
   11360:	d1c1      	bne.n	112e6 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   11362:	f105 0009 	add.w	r0, r5, #9
	if (dir_adv) {
   11366:	2e00      	cmp	r6, #0
   11368:	d049      	beq.n	113fe <bt_le_adv_start_legacy+0x14e>
	memcpy(dst, src, sizeof(*dst));
   1136a:	6921      	ldr	r1, [r4, #16]
   1136c:	2207      	movs	r2, #7
   1136e:	f017 ffea 	bl	29346 <memcpy>
	name_type = get_adv_name_type_param(param);
   11372:	4620      	mov	r0, r4
   11374:	f018 fe64 	bl	2a040 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   11378:	6863      	ldr	r3, [r4, #4]
   1137a:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
   1137c:	4681      	mov	r9, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1137e:	d547      	bpl.n	11410 <bt_le_adv_start_legacy+0x160>
		if (dir_adv) {
   11380:	2e00      	cmp	r6, #0
   11382:	d042      	beq.n	1140a <bt_le_adv_start_legacy+0x15a>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   11384:	f013 0f10 	tst.w	r3, #16
   11388:	bf14      	ite	ne
   1138a:	2304      	movne	r3, #4
   1138c:	2301      	moveq	r3, #1
   1138e:	6921      	ldr	r1, [r4, #16]
   11390:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   11394:	2207      	movs	r2, #7
   11396:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   1139a:	f017 ffd4 	bl	29346 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   1139e:	f04f 0800 	mov.w	r8, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   113a2:	210f      	movs	r1, #15
   113a4:	f242 0006 	movw	r0, #8198	; 0x2006
   113a8:	f7ff f8aa 	bl	10500 <bt_hci_cmd_create>
	if (!buf) {
   113ac:	4683      	mov	fp, r0
   113ae:	2800      	cmp	r0, #0
   113b0:	f000 809b 	beq.w	114ea <bt_le_adv_start_legacy+0x23a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   113b4:	220f      	movs	r2, #15
   113b6:	a90a      	add	r1, sp, #40	; 0x28
   113b8:	3008      	adds	r0, #8
   113ba:	f01c f810 	bl	2d3de <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   113be:	2200      	movs	r2, #0
   113c0:	4659      	mov	r1, fp
   113c2:	f242 0006 	movw	r0, #8198	; 0x2006
   113c6:	f7ff f8f7 	bl	105b8 <bt_hci_cmd_send_sync>
	if (err) {
   113ca:	2800      	cmp	r0, #0
   113cc:	f040 8090 	bne.w	114f0 <bt_le_adv_start_legacy+0x240>
	if (!dir_adv) {
   113d0:	b376      	cbz	r6, 11430 <bt_le_adv_start_legacy+0x180>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   113d2:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   113d4:	07db      	lsls	r3, r3, #31
   113d6:	d439      	bmi.n	1144c <bt_le_adv_start_legacy+0x19c>
	return bt_le_adv_set_enable_legacy(adv, enable);
   113d8:	2101      	movs	r1, #1
   113da:	4628      	mov	r0, r5
   113dc:	f018 fe40 	bl	2a060 <bt_le_adv_set_enable_legacy>
	if (err) {
   113e0:	4683      	mov	fp, r0
   113e2:	9807      	ldr	r0, [sp, #28]
   113e4:	f1bb 0f00 	cmp.w	fp, #0
   113e8:	d073      	beq.n	114d2 <bt_le_adv_start_legacy+0x222>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   113ea:	2800      	cmp	r0, #0
   113ec:	f43f af7b 	beq.w	112e6 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   113f0:	2100      	movs	r1, #0
   113f2:	f000 fba5 	bl	11b40 <bt_conn_set_state>
			bt_conn_unref(conn);
   113f6:	9807      	ldr	r0, [sp, #28]
   113f8:	f018 ff3c 	bl	2a274 <bt_conn_unref>
   113fc:	e773      	b.n	112e6 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   113fe:	9608      	str	r6, [sp, #32]
   11400:	2207      	movs	r2, #7
   11402:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
   11406:	a908      	add	r1, sp, #32
   11408:	e7b1      	b.n	1136e <bt_le_adv_start_legacy+0xbe>
			set_param.type = BT_HCI_ADV_IND;
   1140a:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
   1140e:	e7c8      	b.n	113a2 <bt_le_adv_start_legacy+0xf2>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   11410:	059a      	lsls	r2, r3, #22
   11412:	d403      	bmi.n	1141c <bt_le_adv_start_legacy+0x16c>
   11414:	9b18      	ldr	r3, [sp, #96]	; 0x60
   11416:	b90b      	cbnz	r3, 1141c <bt_le_adv_start_legacy+0x16c>
   11418:	2802      	cmp	r0, #2
   1141a:	d103      	bne.n	11424 <bt_le_adv_start_legacy+0x174>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   1141c:	2302      	movs	r3, #2
   1141e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   11422:	e7be      	b.n	113a2 <bt_le_adv_start_legacy+0xf2>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   11424:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   11426:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   1142a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1142e:	e7b8      	b.n	113a2 <bt_le_adv_start_legacy+0xf2>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   11430:	9b19      	ldr	r3, [sp, #100]	; 0x64
   11432:	9300      	str	r3, [sp, #0]
   11434:	e9cd 8901 	strd	r8, r9, [sp, #4]
   11438:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1143a:	9905      	ldr	r1, [sp, #20]
   1143c:	4652      	mov	r2, sl
   1143e:	4628      	mov	r0, r5
   11440:	f018 fd87 	bl	29f52 <le_adv_update.constprop.0>
		if (err) {
   11444:	4683      	mov	fp, r0
   11446:	2800      	cmp	r0, #0
   11448:	d0c3      	beq.n	113d2 <bt_le_adv_start_legacy+0x122>
   1144a:	e74c      	b.n	112e6 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   1144c:	a907      	add	r1, sp, #28
   1144e:	4628      	mov	r0, r5
   11450:	f7ff fee0 	bl	11214 <le_adv_start_add_conn>
		if (err) {
   11454:	4683      	mov	fp, r0
   11456:	2800      	cmp	r0, #0
   11458:	d0be      	beq.n	113d8 <bt_le_adv_start_legacy+0x128>
			if (err == -ENOMEM && !dir_adv &&
   1145a:	f110 0f0c 	cmn.w	r0, #12
   1145e:	f47f af42 	bne.w	112e6 <bt_le_adv_start_legacy+0x36>
   11462:	2e00      	cmp	r6, #0
   11464:	f47f af3f 	bne.w	112e6 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   11468:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   1146a:	0798      	lsls	r0, r3, #30
   1146c:	f53f af3b 	bmi.w	112e6 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   11470:	6862      	ldr	r2, [r4, #4]
   11472:	f082 0202 	eor.w	r2, r2, #2
   11476:	f3c2 0b40 	ubfx	fp, r2, #1, #1
   1147a:	f00b 0201 	and.w	r2, fp, #1
   1147e:	210d      	movs	r1, #13
   11480:	4638      	mov	r0, r7
   11482:	f018 fd4f 	bl	29f24 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   11486:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   1148a:	425a      	negs	r2, r3
   1148c:	415a      	adcs	r2, r3
   1148e:	2107      	movs	r1, #7
   11490:	4638      	mov	r0, r7
   11492:	f018 fd47 	bl	29f24 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   11496:	f1a9 0102 	sub.w	r1, r9, #2
   1149a:	424a      	negs	r2, r1
   1149c:	414a      	adcs	r2, r1
   1149e:	4638      	mov	r0, r7
   114a0:	2108      	movs	r1, #8
   114a2:	f018 fd3f 	bl	29f24 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   114a6:	6862      	ldr	r2, [r4, #4]
   114a8:	2109      	movs	r1, #9
   114aa:	f002 0201 	and.w	r2, r2, #1
   114ae:	4638      	mov	r0, r7
   114b0:	f018 fd38 	bl	29f24 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   114b4:	4642      	mov	r2, r8
   114b6:	210a      	movs	r1, #10
   114b8:	4638      	mov	r0, r7
   114ba:	f018 fd33 	bl	29f24 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   114be:	6862      	ldr	r2, [r4, #4]
   114c0:	210c      	movs	r1, #12
   114c2:	f3c2 0280 	ubfx	r2, r2, #2, #1
   114c6:	4638      	mov	r0, r7
   114c8:	f018 fd2c 	bl	29f24 <atomic_set_bit_to>
	return 0;
   114cc:	f04f 0b00 	mov.w	fp, #0
   114d0:	e709      	b.n	112e6 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   114d2:	b108      	cbz	r0, 114d8 <bt_le_adv_start_legacy+0x228>
		bt_conn_unref(conn);
   114d4:	f018 fece 	bl	2a274 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   114d8:	2e00      	cmp	r6, #0
   114da:	d1ce      	bne.n	1147a <bt_le_adv_start_legacy+0x1ca>
   114dc:	e7c8      	b.n	11470 <bt_le_adv_start_legacy+0x1c0>
		return -EAGAIN;
   114de:	f06f 0b0a 	mvn.w	fp, #10
   114e2:	e700      	b.n	112e6 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   114e4:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   114e8:	e6fd      	b.n	112e6 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   114ea:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   114ee:	e6fa      	b.n	112e6 <bt_le_adv_start_legacy+0x36>
   114f0:	4683      	mov	fp, r0
   114f2:	e6f8      	b.n	112e6 <bt_le_adv_start_legacy+0x36>
   114f4:	200000cc 	.word	0x200000cc
   114f8:	20000000 	.word	0x20000000

000114fc <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   114fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   114fe:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   11500:	9a06      	ldr	r2, [sp, #24]
{
   11502:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   11504:	e9cd 3200 	strd	r3, r2, [sp]
   11508:	462b      	mov	r3, r5
   1150a:	460a      	mov	r2, r1
   1150c:	4601      	mov	r1, r0
   1150e:	4811      	ldr	r0, [pc, #68]	; (11554 <bt_le_adv_start+0x58>)
   11510:	f7ff fece 	bl	112b0 <bt_le_adv_start_legacy>
   11514:	4621      	mov	r1, r4
   11516:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   11518:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   1151a:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   1151e:	429d      	cmp	r5, r3
   11520:	d102      	bne.n	11528 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   11522:	4630      	mov	r0, r6
   11524:	b002      	add	sp, #8
   11526:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   11528:	880a      	ldrh	r2, [r1, #0]
   1152a:	4282      	cmp	r2, r0
   1152c:	d104      	bne.n	11538 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   1152e:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   11530:	b112      	cbz	r2, 11538 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   11532:	7812      	ldrb	r2, [r2, #0]
   11534:	07d2      	lsls	r2, r2, #31
   11536:	d402      	bmi.n	1153e <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   11538:	3301      	adds	r3, #1
   1153a:	3108      	adds	r1, #8
   1153c:	e7ef      	b.n	1151e <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   1153e:	4906      	ldr	r1, [pc, #24]	; (11558 <bt_le_adv_start+0x5c>)
   11540:	4806      	ldr	r0, [pc, #24]	; (1155c <bt_le_adv_start+0x60>)
   11542:	f01d f9af 	bl	2e8a4 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   11546:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1154a:	2300      	movs	r3, #0
   1154c:	4803      	ldr	r0, [pc, #12]	; (1155c <bt_le_adv_start+0x60>)
   1154e:	f014 fe1b 	bl	26188 <k_work_reschedule>
   11552:	e7e6      	b.n	11522 <bt_le_adv_start+0x26>
   11554:	20000018 	.word	0x20000018
   11558:	0002a0b5 	.word	0x0002a0b5
   1155c:	20000030 	.word	0x20000030

00011560 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   11560:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
   11562:	4822      	ldr	r0, [pc, #136]	; (115ec <bt_le_adv_stop+0x8c>)
   11564:	f018 fda3 	bl	2a0ae <bt_le_lim_adv_cancel_timeout>
   11568:	4821      	ldr	r0, [pc, #132]	; (115f0 <bt_le_adv_stop+0x90>)
   1156a:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   1156e:	f018 fc69 	bl	29e44 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11572:	481f      	ldr	r0, [pc, #124]	; (115f0 <bt_le_adv_stop+0x90>)
   11574:	f018 fc60 	bl	29e38 <atomic_get>
   11578:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1157a:	065a      	lsls	r2, r3, #25
   1157c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   11580:	d531      	bpl.n	115e6 <bt_le_adv_stop+0x86>
   11582:	481b      	ldr	r0, [pc, #108]	; (115f0 <bt_le_adv_stop+0x90>)
   11584:	f018 fc58 	bl	29e38 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   11588:	0583      	lsls	r3, r0, #22
   1158a:	d521      	bpl.n	115d0 <bt_le_adv_stop+0x70>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   1158c:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   1158e:	4819      	ldr	r0, [pc, #100]	; (115f4 <bt_le_adv_stop+0x94>)
   11590:	9300      	str	r3, [sp, #0]
   11592:	2207      	movs	r2, #7
   11594:	4669      	mov	r1, sp
   11596:	f8cd 3003 	str.w	r3, [sp, #3]
   1159a:	f017 fec3 	bl	29324 <memcmp>
   1159e:	4b16      	ldr	r3, [pc, #88]	; (115f8 <bt_le_adv_stop+0x98>)
   115a0:	b9e8      	cbnz	r0, 115de <bt_le_adv_stop+0x7e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   115a2:	4a16      	ldr	r2, [pc, #88]	; (115fc <bt_le_adv_stop+0x9c>)
   115a4:	8891      	ldrh	r1, [r2, #4]
   115a6:	6810      	ldr	r0, [r2, #0]
   115a8:	7992      	ldrb	r2, [r2, #6]
   115aa:	f8ad 100c 	strh.w	r1, [sp, #12]
   115ae:	f88d 200e 	strb.w	r2, [sp, #14]
   115b2:	9002      	str	r0, [sp, #8]
   115b4:	2204      	movs	r2, #4
   115b6:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   115b8:	7e18      	ldrb	r0, [r3, #24]
   115ba:	f000 fc9b 	bl	11ef4 <bt_conn_lookup_state_le>
   115be:	4604      	mov	r4, r0
	if (conn) {
   115c0:	b130      	cbz	r0, 115d0 <bt_le_adv_stop+0x70>
		conn->err = status;
   115c2:	2100      	movs	r1, #0
   115c4:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   115c6:	f000 fabb 	bl	11b40 <bt_conn_set_state>
		bt_conn_unref(conn);
   115ca:	4620      	mov	r0, r4
   115cc:	f018 fe52 	bl	2a274 <bt_conn_unref>
		err = bt_le_adv_set_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = bt_le_adv_set_enable_legacy(adv, false);
   115d0:	4806      	ldr	r0, [pc, #24]	; (115ec <bt_le_adv_stop+0x8c>)
   115d2:	2100      	movs	r1, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   115d4:	b004      	add	sp, #16
   115d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   115da:	f018 bd41 	b.w	2a060 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   115de:	2205      	movs	r2, #5
   115e0:	f103 0121 	add.w	r1, r3, #33	; 0x21
   115e4:	e7e8      	b.n	115b8 <bt_le_adv_stop+0x58>
}
   115e6:	b004      	add	sp, #16
   115e8:	bd10      	pop	{r4, pc}
   115ea:	bf00      	nop
   115ec:	20000018 	.word	0x20000018
   115f0:	20000028 	.word	0x20000028
   115f4:	20000021 	.word	0x20000021
   115f8:	20000000 	.word	0x20000000
   115fc:	0002f2ab 	.word	0x0002f2ab

00011600 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   11600:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11602:	481e      	ldr	r0, [pc, #120]	; (1167c <bt_le_adv_resume+0x7c>)
   11604:	4c1d      	ldr	r4, [pc, #116]	; (1167c <bt_le_adv_resume+0x7c>)
   11606:	f018 fc17 	bl	29e38 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   1160a:	f410 5f00 	tst.w	r0, #8192	; 0x2000
   1160e:	d032      	beq.n	11676 <bt_le_adv_resume+0x76>
   11610:	4620      	mov	r0, r4
   11612:	f018 fc11 	bl	29e38 <atomic_get>
   11616:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   11618:	f3c0 1580 	ubfx	r5, r0, #6, #1
   1161c:	d42b      	bmi.n	11676 <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1161e:	4620      	mov	r0, r4
   11620:	f018 fc0a 	bl	29e38 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   11624:	0583      	lsls	r3, r0, #22
   11626:	d526      	bpl.n	11676 <bt_le_adv_resume+0x76>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   11628:	a901      	add	r1, sp, #4
   1162a:	f1a4 0010 	sub.w	r0, r4, #16
   1162e:	f7ff fdf1 	bl	11214 <le_adv_start_add_conn>
	if (err) {
   11632:	bb00      	cbnz	r0, 11676 <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
   11634:	2101      	movs	r1, #1
   11636:	f1a4 0010 	sub.w	r0, r4, #16
   1163a:	f018 fd11 	bl	2a060 <bt_le_adv_set_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
   1163e:	b150      	cbz	r0, 11656 <bt_le_adv_resume+0x56>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11640:	4629      	mov	r1, r5
   11642:	9801      	ldr	r0, [sp, #4]
   11644:	f000 fa7c 	bl	11b40 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11648:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   1164c:	4620      	mov	r0, r4
   1164e:	f018 fbf9 	bl	29e44 <atomic_and>
	return (old & mask) != 0;
   11652:	f3c0 3540 	ubfx	r5, r0, #13, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   11656:	9801      	ldr	r0, [sp, #4]
   11658:	f018 fe0c 	bl	2a274 <bt_conn_unref>
	if (persist_paused) {
   1165c:	b15d      	cbz	r5, 11676 <bt_le_adv_resume+0x76>
   1165e:	f3bf 8f5b 	dmb	ish
   11662:	e854 3f00 	ldrex	r3, [r4]
   11666:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1166a:	e844 3200 	strex	r2, r3, [r4]
   1166e:	2a00      	cmp	r2, #0
   11670:	d1f7      	bne.n	11662 <bt_le_adv_resume+0x62>
   11672:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   11676:	b003      	add	sp, #12
   11678:	bd30      	pop	{r4, r5, pc}
   1167a:	bf00      	nop
   1167c:	20000028 	.word	0x20000028

00011680 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   11680:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   11682:	4904      	ldr	r1, [pc, #16]	; (11694 <bt_pub_key_is_debug+0x14>)
   11684:	2240      	movs	r2, #64	; 0x40
   11686:	f017 fe4d 	bl	29324 <memcmp>
}
   1168a:	fab0 f080 	clz	r0, r0
   1168e:	0940      	lsrs	r0, r0, #5
   11690:	bd08      	pop	{r3, pc}
   11692:	bf00      	nop
   11694:	00030bf8 	.word	0x00030bf8

00011698 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   11698:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   1169a:	4b31      	ldr	r3, [pc, #196]	; (11760 <bt_pub_key_gen+0xc8>)
   1169c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   116a0:	f003 0306 	and.w	r3, r3, #6
   116a4:	2b06      	cmp	r3, #6
   116a6:	d152      	bne.n	1174e <bt_pub_key_gen+0xb6>
			new_cb->func(debug_public_key);
			return 0;
		}
	}

	if (!new_cb) {
   116a8:	2800      	cmp	r0, #0
   116aa:	d053      	beq.n	11754 <bt_pub_key_gen+0xbc>
	return list->head;
   116ac:	4e2d      	ldr	r6, [pc, #180]	; (11764 <bt_pub_key_gen+0xcc>)
   116ae:	6832      	ldr	r2, [r6, #0]
		return -EINVAL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   116b0:	b132      	cbz	r2, 116c0 <bt_pub_key_gen+0x28>
   116b2:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   116b4:	4298      	cmp	r0, r3
   116b6:	d050      	beq.n	1175a <bt_pub_key_gen+0xc2>
	return node->next;
   116b8:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   116ba:	b10b      	cbz	r3, 116c0 <bt_pub_key_gen+0x28>
   116bc:	3b04      	subs	r3, #4
   116be:	e7f9      	b.n	116b4 <bt_pub_key_gen+0x1c>
	parent->next = child;
   116c0:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   116c2:	6872      	ldr	r2, [r6, #4]
			BT_WARN("Callback already registered");
			return -EALREADY;
		}
	}

	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   116c4:	1d03      	adds	r3, r0, #4
	list->head = node;
   116c6:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   116c8:	b902      	cbnz	r2, 116cc <bt_pub_key_gen+0x34>
	list->tail = node;
   116ca:	6073      	str	r3, [r6, #4]
   116cc:	4c26      	ldr	r4, [pc, #152]	; (11768 <bt_pub_key_gen+0xd0>)
   116ce:	f3bf 8f5b 	dmb	ish
   116d2:	e854 2f00 	ldrex	r2, [r4]
   116d6:	f042 0320 	orr.w	r3, r2, #32
   116da:	e844 3100 	strex	r1, r3, [r4]
   116de:	2900      	cmp	r1, #0
   116e0:	d1f7      	bne.n	116d2 <bt_pub_key_gen+0x3a>
   116e2:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   116e6:	f012 0220 	ands.w	r2, r2, #32
   116ea:	d002      	beq.n	116f2 <bt_pub_key_gen+0x5a>
		return 0;
   116ec:	2500      	movs	r5, #0
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   116ee:	4628      	mov	r0, r5
   116f0:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   116f2:	f3bf 8f5b 	dmb	ish
   116f6:	e854 3f00 	ldrex	r3, [r4]
   116fa:	f023 0310 	bic.w	r3, r3, #16
   116fe:	e844 3100 	strex	r1, r3, [r4]
   11702:	2900      	cmp	r1, #0
   11704:	d1f7      	bne.n	116f6 <bt_pub_key_gen+0x5e>
   11706:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   1170a:	4611      	mov	r1, r2
   1170c:	f242 0025 	movw	r0, #8229	; 0x2025
   11710:	f7fe ff52 	bl	105b8 <bt_hci_cmd_send_sync>
	if (err) {
   11714:	4605      	mov	r5, r0
   11716:	2800      	cmp	r0, #0
   11718:	d0e8      	beq.n	116ec <bt_pub_key_gen+0x54>
   1171a:	f3bf 8f5b 	dmb	ish
   1171e:	e854 3f00 	ldrex	r3, [r4]
   11722:	f023 0320 	bic.w	r3, r3, #32
   11726:	e844 3200 	strex	r2, r3, [r4]
   1172a:	2a00      	cmp	r2, #0
   1172c:	d1f7      	bne.n	1171e <bt_pub_key_gen+0x86>
   1172e:	f3bf 8f5b 	dmb	ish
	return list->head;
   11732:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   11734:	b13c      	cbz	r4, 11746 <bt_pub_key_gen+0xae>
			if (cb->func) {
   11736:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1173a:	3c04      	subs	r4, #4
			if (cb->func) {
   1173c:	b10b      	cbz	r3, 11742 <bt_pub_key_gen+0xaa>
				cb->func(NULL);
   1173e:	2000      	movs	r0, #0
   11740:	4798      	blx	r3
	return node->next;
   11742:	6864      	ldr	r4, [r4, #4]
   11744:	e7f6      	b.n	11734 <bt_pub_key_gen+0x9c>
	list->head = NULL;
   11746:	2300      	movs	r3, #0
	list->tail = NULL;
   11748:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   1174c:	e7cf      	b.n	116ee <bt_pub_key_gen+0x56>
		return -ENOTSUP;
   1174e:	f06f 0585 	mvn.w	r5, #133	; 0x85
   11752:	e7cc      	b.n	116ee <bt_pub_key_gen+0x56>
		return -EINVAL;
   11754:	f06f 0515 	mvn.w	r5, #21
   11758:	e7c9      	b.n	116ee <bt_pub_key_gen+0x56>
			return -EALREADY;
   1175a:	f06f 0577 	mvn.w	r5, #119	; 0x77
   1175e:	e7c6      	b.n	116ee <bt_pub_key_gen+0x56>
   11760:	20000000 	.word	0x20000000
   11764:	20001680 	.word	0x20001680
   11768:	200000cc 	.word	0x200000cc

0001176c <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1176c:	4b05      	ldr	r3, [pc, #20]	; (11784 <bt_pub_key_get+0x18>)
   1176e:	f3bf 8f5b 	dmb	ish
   11772:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   11774:	4804      	ldr	r0, [pc, #16]	; (11788 <bt_pub_key_get+0x1c>)
   11776:	f3bf 8f5b 	dmb	ish
		return pub_key;
   1177a:	f013 0f10 	tst.w	r3, #16
}
   1177e:	bf08      	it	eq
   11780:	2000      	moveq	r0, #0
   11782:	4770      	bx	lr
   11784:	200000cc 	.word	0x200000cc
   11788:	20002d3a 	.word	0x20002d3a

0001178c <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   1178c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   1178e:	4d1f      	ldr	r5, [pc, #124]	; (1180c <bt_dh_key_gen+0x80>)
   11790:	682b      	ldr	r3, [r5, #0]
   11792:	428b      	cmp	r3, r1
{
   11794:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   11796:	d032      	beq.n	117fe <bt_dh_key_gen+0x72>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   11798:	b113      	cbz	r3, 117a0 <bt_dh_key_gen+0x14>
		return -EBUSY;
   1179a:	f06f 000f 	mvn.w	r0, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   1179e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   117a0:	4b1b      	ldr	r3, [pc, #108]	; (11810 <bt_dh_key_gen+0x84>)
   117a2:	f3bf 8f5b 	dmb	ish
   117a6:	681a      	ldr	r2, [r3, #0]
   117a8:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   117ac:	f3c2 1740 	ubfx	r7, r2, #5, #1
   117b0:	0692      	lsls	r2, r2, #26
   117b2:	d4f2      	bmi.n	1179a <bt_dh_key_gen+0xe>
   117b4:	f3bf 8f5b 	dmb	ish
   117b8:	681b      	ldr	r3, [r3, #0]
   117ba:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   117be:	06db      	lsls	r3, r3, #27
   117c0:	d520      	bpl.n	11804 <bt_dh_key_gen+0x78>
	dh_key_cb = cb;
   117c2:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   117c4:	f242 0026 	movw	r0, #8230	; 0x2026
   117c8:	2140      	movs	r1, #64	; 0x40
   117ca:	f7fe fe99 	bl	10500 <bt_hci_cmd_create>
	if (!buf) {
   117ce:	4604      	mov	r4, r0
   117d0:	b190      	cbz	r0, 117f8 <bt_dh_key_gen+0x6c>
	return net_buf_simple_add(&buf->b, len);
   117d2:	2140      	movs	r1, #64	; 0x40
   117d4:	3008      	adds	r0, #8
   117d6:	f01b fdfc 	bl	2d3d2 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   117da:	2240      	movs	r2, #64	; 0x40
   117dc:	4631      	mov	r1, r6
   117de:	f017 fdb2 	bl	29346 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   117e2:	463a      	mov	r2, r7
   117e4:	4621      	mov	r1, r4
   117e6:	f242 0026 	movw	r0, #8230	; 0x2026
   117ea:	f7fe fee5 	bl	105b8 <bt_hci_cmd_send_sync>
	if (err) {
   117ee:	2800      	cmp	r0, #0
   117f0:	d0d5      	beq.n	1179e <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   117f2:	2300      	movs	r3, #0
   117f4:	602b      	str	r3, [r5, #0]
		return err;
   117f6:	e7d2      	b.n	1179e <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   117f8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   117fc:	e7f9      	b.n	117f2 <bt_dh_key_gen+0x66>
		return -EALREADY;
   117fe:	f06f 0077 	mvn.w	r0, #119	; 0x77
   11802:	e7cc      	b.n	1179e <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   11804:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   11808:	e7c9      	b.n	1179e <bt_dh_key_gen+0x12>
   1180a:	bf00      	nop
   1180c:	2000167c 	.word	0x2000167c
   11810:	200000cc 	.word	0x200000cc

00011814 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   11814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11816:	4c1b      	ldr	r4, [pc, #108]	; (11884 <bt_hci_evt_le_pkey_complete+0x70>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   11818:	6886      	ldr	r6, [r0, #8]
   1181a:	f3bf 8f5b 	dmb	ish
   1181e:	e854 3f00 	ldrex	r3, [r4]
   11822:	f023 0320 	bic.w	r3, r3, #32
   11826:	e844 3200 	strex	r2, r3, [r4]
   1182a:	2a00      	cmp	r2, #0
   1182c:	d1f7      	bne.n	1181e <bt_hci_evt_le_pkey_complete+0xa>
   1182e:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   11832:	7833      	ldrb	r3, [r6, #0]
   11834:	b983      	cbnz	r3, 11858 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   11836:	4814      	ldr	r0, [pc, #80]	; (11888 <bt_hci_evt_le_pkey_complete+0x74>)
   11838:	2240      	movs	r2, #64	; 0x40
   1183a:	1c71      	adds	r1, r6, #1
   1183c:	f017 fd83 	bl	29346 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11840:	f3bf 8f5b 	dmb	ish
   11844:	e854 3f00 	ldrex	r3, [r4]
   11848:	f043 0310 	orr.w	r3, r3, #16
   1184c:	e844 3200 	strex	r2, r3, [r4]
   11850:	2a00      	cmp	r2, #0
   11852:	d1f7      	bne.n	11844 <bt_hci_evt_le_pkey_complete+0x30>
   11854:	f3bf 8f5b 	dmb	ish
	return list->head;
   11858:	4d0c      	ldr	r5, [pc, #48]	; (1188c <bt_hci_evt_le_pkey_complete+0x78>)
   1185a:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1185c:	b16c      	cbz	r4, 1187a <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   1185e:	4f0a      	ldr	r7, [pc, #40]	; (11888 <bt_hci_evt_le_pkey_complete+0x74>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   11860:	3c04      	subs	r4, #4
		if (cb->func) {
   11862:	6823      	ldr	r3, [r4, #0]
   11864:	b12b      	cbz	r3, 11872 <bt_hci_evt_le_pkey_complete+0x5e>
			cb->func(evt->status ? NULL : pub_key);
   11866:	7832      	ldrb	r2, [r6, #0]
   11868:	2a00      	cmp	r2, #0
   1186a:	bf0c      	ite	eq
   1186c:	4638      	moveq	r0, r7
   1186e:	2000      	movne	r0, #0
   11870:	4798      	blx	r3
	return node->next;
   11872:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   11874:	b10c      	cbz	r4, 1187a <bt_hci_evt_le_pkey_complete+0x66>
   11876:	3c04      	subs	r4, #4
   11878:	e7f3      	b.n	11862 <bt_hci_evt_le_pkey_complete+0x4e>
	list->head = NULL;
   1187a:	2300      	movs	r3, #0
	list->tail = NULL;
   1187c:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   11880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11882:	bf00      	nop
   11884:	200000cc 	.word	0x200000cc
   11888:	20002d3a 	.word	0x20002d3a
   1188c:	20001680 	.word	0x20001680

00011890 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   11890:	4905      	ldr	r1, [pc, #20]	; (118a8 <bt_hci_evt_le_dhkey_complete+0x18>)
   11892:	680b      	ldr	r3, [r1, #0]
   11894:	b133      	cbz	r3, 118a4 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   11896:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   11898:	2000      	movs	r0, #0
   1189a:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   1189c:	7811      	ldrb	r1, [r2, #0]
   1189e:	b901      	cbnz	r1, 118a2 <bt_hci_evt_le_dhkey_complete+0x12>
   118a0:	1c50      	adds	r0, r2, #1
   118a2:	4718      	bx	r3
	}
}
   118a4:	4770      	bx	lr
   118a6:	bf00      	nop
   118a8:	2000167c 	.word	0x2000167c

000118ac <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   118ac:	4b0b      	ldr	r3, [pc, #44]	; (118dc <notify_connected+0x30>)
{
   118ae:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   118b0:	681d      	ldr	r5, [r3, #0]
{
   118b2:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   118b4:	b925      	cbnz	r5, 118c0 <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   118b6:	4d0a      	ldr	r5, [pc, #40]	; (118e0 <notify_connected+0x34>)
   118b8:	4e0a      	ldr	r6, [pc, #40]	; (118e4 <notify_connected+0x38>)
   118ba:	42b5      	cmp	r5, r6
   118bc:	d307      	bcc.n	118ce <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   118be:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
   118c0:	682b      	ldr	r3, [r5, #0]
   118c2:	b113      	cbz	r3, 118ca <notify_connected+0x1e>
			cb->connected(conn, conn->err);
   118c4:	7b21      	ldrb	r1, [r4, #12]
   118c6:	4620      	mov	r0, r4
   118c8:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   118ca:	69ad      	ldr	r5, [r5, #24]
   118cc:	e7f2      	b.n	118b4 <notify_connected+0x8>
		if (cb->connected) {
   118ce:	682b      	ldr	r3, [r5, #0]
   118d0:	b113      	cbz	r3, 118d8 <notify_connected+0x2c>
			cb->connected(conn, conn->err);
   118d2:	7b21      	ldrb	r1, [r4, #12]
   118d4:	4620      	mov	r0, r4
   118d6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   118d8:	351c      	adds	r5, #28
   118da:	e7ee      	b.n	118ba <notify_connected+0xe>
   118dc:	20001694 	.word	0x20001694
   118e0:	0002f19c 	.word	0x0002f19c
   118e4:	0002f19c 	.word	0x0002f19c

000118e8 <tx_free>:
	tx->cb = NULL;
   118e8:	2300      	movs	r3, #0
	tx->user_data = NULL;
   118ea:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   118ee:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   118f0:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   118f2:	4801      	ldr	r0, [pc, #4]	; (118f8 <tx_free+0x10>)
   118f4:	f01c bedf 	b.w	2e6b6 <k_queue_append>
   118f8:	200009a0 	.word	0x200009a0

000118fc <send_frag>:
{
   118fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   11900:	694d      	ldr	r5, [r1, #20]
{
   11902:	4604      	mov	r4, r0
   11904:	460e      	mov	r6, r1
   11906:	4690      	mov	r8, r2
   11908:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   1190a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1190e:	4835      	ldr	r0, [pc, #212]	; (119e4 <send_frag+0xe8>)
   11910:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11914:	f014 fa56 	bl	25dc4 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   11918:	7b63      	ldrb	r3, [r4, #13]
   1191a:	2b07      	cmp	r3, #7
   1191c:	d13b      	bne.n	11996 <send_frag+0x9a>
	__asm__ volatile(
   1191e:	f04f 0320 	mov.w	r3, #32
   11922:	f3ef 8211 	mrs	r2, BASEPRI
   11926:	f383 8812 	msr	BASEPRI_MAX, r3
   1192a:	f3bf 8f6f 	isb	sy
	if (tx) {
   1192e:	69a3      	ldr	r3, [r4, #24]
   11930:	2d00      	cmp	r5, #0
   11932:	d042      	beq.n	119ba <send_frag+0xbe>
	parent->next = child;
   11934:	2100      	movs	r1, #0
   11936:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   11938:	2b00      	cmp	r3, #0
   1193a:	d13b      	bne.n	119b4 <send_frag+0xb8>
	list->head = node;
   1193c:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   11940:	f382 8811 	msr	BASEPRI, r2
   11944:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   11948:	2104      	movs	r1, #4
   1194a:	f106 0008 	add.w	r0, r6, #8
   1194e:	f01b fd57 	bl	2d400 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   11952:	8823      	ldrh	r3, [r4, #0]
   11954:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
   11958:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1195c:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1195e:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   11962:	3b04      	subs	r3, #4
   11964:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   11966:	2302      	movs	r3, #2
   11968:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   1196a:	4630      	mov	r0, r6
   1196c:	f018 f960 	bl	29c30 <bt_send>
	if (err) {
   11970:	b3a8      	cbz	r0, 119de <send_frag+0xe2>
	__asm__ volatile(
   11972:	f04f 0320 	mov.w	r3, #32
   11976:	f3ef 8811 	mrs	r8, BASEPRI
   1197a:	f383 8812 	msr	BASEPRI_MAX, r3
   1197e:	f3bf 8f6f 	isb	sy
		if (tx) {
   11982:	b335      	cbz	r5, 119d2 <send_frag+0xd6>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   11984:	4629      	mov	r1, r5
   11986:	f104 0014 	add.w	r0, r4, #20
   1198a:	f018 fb95 	bl	2a0b8 <sys_slist_find_and_remove>
	__asm__ volatile(
   1198e:	f388 8811 	msr	BASEPRI, r8
   11992:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   11996:	4813      	ldr	r0, [pc, #76]	; (119e4 <send_frag+0xe8>)
   11998:	f014 f9ee 	bl	25d78 <z_impl_k_sem_give>
	if (tx) {
   1199c:	b115      	cbz	r5, 119a4 <send_frag+0xa8>
		tx_free(tx);
   1199e:	4628      	mov	r0, r5
   119a0:	f7ff ffa2 	bl	118e8 <tx_free>
	if (always_consume) {
   119a4:	b11f      	cbz	r7, 119ae <send_frag+0xb2>
		net_buf_unref(buf);
   119a6:	4630      	mov	r0, r6
   119a8:	f011 fd76 	bl	23498 <net_buf_unref>
	return false;
   119ac:	2700      	movs	r7, #0
}
   119ae:	4638      	mov	r0, r7
   119b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	parent->next = child;
   119b4:	601d      	str	r5, [r3, #0]
	list->tail = node;
   119b6:	61a5      	str	r5, [r4, #24]
}
   119b8:	e7c2      	b.n	11940 <send_frag+0x44>
		if (tail_tx) {
   119ba:	b133      	cbz	r3, 119ca <send_frag+0xce>
			pending_no_cb = &tail_tx->pending_no_cb;
   119bc:	f103 090c 	add.w	r9, r3, #12
   119c0:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   119c2:	3301      	adds	r3, #1
   119c4:	f8c9 3000 	str.w	r3, [r9]
   119c8:	e7ba      	b.n	11940 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   119ca:	69e3      	ldr	r3, [r4, #28]
   119cc:	f104 091c 	add.w	r9, r4, #28
   119d0:	e7f7      	b.n	119c2 <send_frag+0xc6>
			(*pending_no_cb)--;
   119d2:	f8d9 3000 	ldr.w	r3, [r9]
   119d6:	3b01      	subs	r3, #1
   119d8:	f8c9 3000 	str.w	r3, [r9]
   119dc:	e7d7      	b.n	1198e <send_frag+0x92>
	return true;
   119de:	2701      	movs	r7, #1
   119e0:	e7e5      	b.n	119ae <send_frag+0xb2>
   119e2:	bf00      	nop
   119e4:	20000100 	.word	0x20000100

000119e8 <bt_conn_get_pkts>:
}
   119e8:	4800      	ldr	r0, [pc, #0]	; (119ec <bt_conn_get_pkts+0x4>)
   119ea:	4770      	bx	lr
   119ec:	20000100 	.word	0x20000100

000119f0 <bt_conn_new>:
{
   119f0:	b538      	push	{r3, r4, r5, lr}
   119f2:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   119f4:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   119f6:	2501      	movs	r5, #1
   119f8:	428b      	cmp	r3, r1
   119fa:	d102      	bne.n	11a02 <bt_conn_new+0x12>
		return NULL;
   119fc:	2400      	movs	r4, #0
}
   119fe:	4620      	mov	r0, r4
   11a00:	bd38      	pop	{r3, r4, r5, pc}
   11a02:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   11a06:	f3bf 8f5b 	dmb	ish
   11a0a:	e852 0f00 	ldrex	r0, [r2]
   11a0e:	2800      	cmp	r0, #0
   11a10:	d104      	bne.n	11a1c <bt_conn_new+0x2c>
   11a12:	e842 5c00 	strex	ip, r5, [r2]
   11a16:	f1bc 0f00 	cmp.w	ip, #0
   11a1a:	d1f6      	bne.n	11a0a <bt_conn_new+0x1a>
   11a1c:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   11a20:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   11a24:	d002      	beq.n	11a2c <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   11a26:	3301      	adds	r3, #1
   11a28:	4604      	mov	r4, r0
   11a2a:	e7e5      	b.n	119f8 <bt_conn_new+0x8>
	if (!conn) {
   11a2c:	2c00      	cmp	r4, #0
   11a2e:	d0e6      	beq.n	119fe <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   11a30:	22b8      	movs	r2, #184	; 0xb8
   11a32:	2100      	movs	r1, #0
   11a34:	4620      	mov	r0, r4
   11a36:	f017 fc91 	bl	2935c <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   11a3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   11a3e:	4904      	ldr	r1, [pc, #16]	; (11a50 <bt_conn_new+0x60>)
   11a40:	f01c ff30 	bl	2e8a4 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   11a44:	4903      	ldr	r1, [pc, #12]	; (11a54 <bt_conn_new+0x64>)
   11a46:	f104 0028 	add.w	r0, r4, #40	; 0x28
   11a4a:	f01c ff05 	bl	2e858 <k_work_init>
	return conn;
   11a4e:	e7d6      	b.n	119fe <bt_conn_new+0xe>
   11a50:	00011fa5 	.word	0x00011fa5
   11a54:	0002a151 	.word	0x0002a151

00011a58 <bt_conn_send_cb>:
{
   11a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11a5a:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   11a5c:	7b43      	ldrb	r3, [r0, #13]
   11a5e:	2b07      	cmp	r3, #7
{
   11a60:	4604      	mov	r4, r0
   11a62:	460d      	mov	r5, r1
   11a64:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   11a66:	d114      	bne.n	11a92 <bt_conn_send_cb+0x3a>
	if (cb) {
   11a68:	b312      	cbz	r2, 11ab0 <bt_conn_send_cb+0x58>
	return z_impl_z_current_get();
   11a6a:	f014 fe85 	bl	26778 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   11a6e:	4b13      	ldr	r3, [pc, #76]	; (11abc <bt_conn_send_cb+0x64>)
   11a70:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   11a72:	4813      	ldr	r0, [pc, #76]	; (11ac0 <bt_conn_send_cb+0x68>)
   11a74:	bf07      	ittee	eq
   11a76:	2200      	moveq	r2, #0
   11a78:	2300      	moveq	r3, #0
   11a7a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   11a7e:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   11a82:	f014 f945 	bl	25d10 <z_impl_k_queue_get>
		if (!tx) {
   11a86:	b1a8      	cbz	r0, 11ab4 <bt_conn_send_cb+0x5c>
		if (conn->state != BT_CONN_CONNECTED) {
   11a88:	7b63      	ldrb	r3, [r4, #13]
   11a8a:	2b07      	cmp	r3, #7
   11a8c:	d004      	beq.n	11a98 <bt_conn_send_cb+0x40>
			tx_free(tx);
   11a8e:	f7ff ff2b 	bl	118e8 <tx_free>
		return -ENOTCONN;
   11a92:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   11a96:	e00a      	b.n	11aae <bt_conn_send_cb+0x56>
		tx->pending_no_cb = 0U;
   11a98:	2300      	movs	r3, #0
		tx->user_data = user_data;
   11a9a:	e9c0 6701 	strd	r6, r7, [r0, #4]
		tx->pending_no_cb = 0U;
   11a9e:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   11aa0:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   11aa2:	f104 0038 	add.w	r0, r4, #56	; 0x38
   11aa6:	4629      	mov	r1, r5
   11aa8:	f01b fc54 	bl	2d354 <net_buf_put>
	return 0;
   11aac:	2000      	movs	r0, #0
}
   11aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_data(buf)->tx = NULL;
   11ab0:	614a      	str	r2, [r1, #20]
   11ab2:	e7f6      	b.n	11aa2 <bt_conn_send_cb+0x4a>
			return -ENOBUFS;
   11ab4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   11ab8:	e7f9      	b.n	11aae <bt_conn_send_cb+0x56>
   11aba:	bf00      	nop
   11abc:	20001500 	.word	0x20001500
   11ac0:	200009a0 	.word	0x200009a0

00011ac4 <bt_conn_prepare_events>:
{
   11ac4:	b570      	push	{r4, r5, r6, lr}
	conn_change.signaled = 0U;
   11ac6:	4b17      	ldr	r3, [pc, #92]	; (11b24 <bt_conn_prepare_events+0x60>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11ac8:	4c17      	ldr	r4, [pc, #92]	; (11b28 <bt_conn_prepare_events+0x64>)
   11aca:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   11acc:	2101      	movs	r1, #1
{
   11ace:	4605      	mov	r5, r0
	conn_change.signaled = 0U;
   11ad0:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   11ad2:	f01d f9d3 	bl	2ee7c <k_poll_event_init>
   11ad6:	f3bf 8f5b 	dmb	ish
   11ada:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   11ade:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   11ae2:	f105 0614 	add.w	r6, r5, #20
	if (!atomic_get(&conn->ref)) {
   11ae6:	b90b      	cbnz	r3, 11aec <bt_conn_prepare_events+0x28>
		conn_cleanup(conn);
   11ae8:	2001      	movs	r0, #1
}
   11aea:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   11aec:	7b63      	ldrb	r3, [r4, #13]
   11aee:	b953      	cbnz	r3, 11b06 <bt_conn_prepare_events+0x42>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11af0:	f06f 0140 	mvn.w	r1, #64	; 0x40
   11af4:	1d20      	adds	r0, r4, #4
   11af6:	f018 faf9 	bl	2a0ec <atomic_and>
   11afa:	0643      	lsls	r3, r0, #25
   11afc:	d503      	bpl.n	11b06 <bt_conn_prepare_events+0x42>
		conn_cleanup(conn);
   11afe:	4620      	mov	r0, r4
   11b00:	f018 fb32 	bl	2a168 <conn_cleanup>
   11b04:	e7f0      	b.n	11ae8 <bt_conn_prepare_events+0x24>
	if (conn->state != BT_CONN_CONNECTED) {
   11b06:	7b63      	ldrb	r3, [r4, #13]
   11b08:	2b07      	cmp	r3, #7
   11b0a:	d1ed      	bne.n	11ae8 <bt_conn_prepare_events+0x24>
	k_poll_event_init(&events[0],
   11b0c:	4b07      	ldr	r3, [pc, #28]	; (11b2c <bt_conn_prepare_events+0x68>)
   11b0e:	4630      	mov	r0, r6
   11b10:	2200      	movs	r2, #0
   11b12:	2104      	movs	r1, #4
   11b14:	f01d f9b2 	bl	2ee7c <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   11b18:	2301      	movs	r3, #1
   11b1a:	f885 3020 	strb.w	r3, [r5, #32]
			ev_count++;
   11b1e:	2002      	movs	r0, #2
	return ev_count;
   11b20:	e7e3      	b.n	11aea <bt_conn_prepare_events+0x26>
   11b22:	bf00      	nop
   11b24:	200001f4 	.word	0x200001f4
   11b28:	20000c08 	.word	0x20000c08
   11b2c:	20000c40 	.word	0x20000c40

00011b30 <bt_conn_lookup_handle>:
{
   11b30:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   11b32:	2101      	movs	r1, #1
   11b34:	4801      	ldr	r0, [pc, #4]	; (11b3c <bt_conn_lookup_handle+0xc>)
   11b36:	f018 bbb7 	b.w	2a2a8 <conn_lookup_handle>
   11b3a:	bf00      	nop
   11b3c:	20000c08 	.word	0x20000c08

00011b40 <bt_conn_set_state>:
{
   11b40:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   11b42:	7b45      	ldrb	r5, [r0, #13]
   11b44:	428d      	cmp	r5, r1
{
   11b46:	4604      	mov	r4, r0
	if (conn->state == state) {
   11b48:	f000 809d 	beq.w	11c86 <bt_conn_set_state+0x146>
	conn->state = state;
   11b4c:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   11b4e:	b925      	cbnz	r5, 11b5a <bt_conn_set_state+0x1a>
		if (conn->type != BT_CONN_TYPE_ISO) {
   11b50:	7883      	ldrb	r3, [r0, #2]
   11b52:	2b08      	cmp	r3, #8
   11b54:	d001      	beq.n	11b5a <bt_conn_set_state+0x1a>
			bt_conn_ref(conn);
   11b56:	f018 fb72 	bl	2a23e <bt_conn_ref>
	switch (conn->state) {
   11b5a:	7b63      	ldrb	r3, [r4, #13]
   11b5c:	2b01      	cmp	r3, #1
   11b5e:	d116      	bne.n	11b8e <bt_conn_set_state+0x4e>
	z_impl_k_sem_give(sem);
   11b60:	4d49      	ldr	r5, [pc, #292]	; (11c88 <bt_conn_set_state+0x148>)
		tx->pending_no_cb = 0U;
   11b62:	2600      	movs	r6, #0
	__asm__ volatile(
   11b64:	f04f 0320 	mov.w	r3, #32
   11b68:	f3ef 8211 	mrs	r2, BASEPRI
   11b6c:	f383 8812 	msr	BASEPRI_MAX, r3
   11b70:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   11b74:	69e3      	ldr	r3, [r4, #28]
   11b76:	2b00      	cmp	r3, #0
   11b78:	d066      	beq.n	11c48 <bt_conn_set_state+0x108>
			conn->pending_no_cb--;
   11b7a:	3b01      	subs	r3, #1
   11b7c:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   11b7e:	f382 8811 	msr	BASEPRI, r2
   11b82:	f3bf 8f6f 	isb	sy
   11b86:	4628      	mov	r0, r5
   11b88:	f014 f8f6 	bl	25d78 <z_impl_k_sem_give>
}
   11b8c:	e7ea      	b.n	11b64 <bt_conn_set_state+0x24>
	switch (conn->state) {
   11b8e:	2b07      	cmp	r3, #7
   11b90:	d009      	beq.n	11ba6 <bt_conn_set_state+0x66>
   11b92:	2b00      	cmp	r3, #0
   11b94:	d177      	bne.n	11c86 <bt_conn_set_state+0x146>
		if (conn->type == BT_CONN_TYPE_SCO) {
   11b96:	78a3      	ldrb	r3, [r4, #2]
   11b98:	2b04      	cmp	r3, #4
   11b9a:	d11e      	bne.n	11bda <bt_conn_set_state+0x9a>
			bt_conn_unref(conn);
   11b9c:	4620      	mov	r0, r4
}
   11b9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   11ba2:	f018 bb67 	b.w	2a274 <bt_conn_unref>
		if (conn->type == BT_CONN_TYPE_SCO) {
   11ba6:	78a3      	ldrb	r3, [r4, #2]
   11ba8:	2b04      	cmp	r3, #4
   11baa:	d06c      	beq.n	11c86 <bt_conn_set_state+0x146>
	z_impl_k_queue_init(queue);
   11bac:	f104 0038 	add.w	r0, r4, #56	; 0x38
   11bb0:	f01c fd75 	bl	2e69e <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   11bb4:	4835      	ldr	r0, [pc, #212]	; (11c8c <bt_conn_set_state+0x14c>)
   11bb6:	2100      	movs	r1, #0
   11bb8:	f015 f89e 	bl	26cf8 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   11bbc:	2300      	movs	r3, #0
	list->tail = NULL;
   11bbe:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   11bc2:	78e3      	ldrb	r3, [r4, #3]
   11bc4:	2b01      	cmp	r3, #1
   11bc6:	d15e      	bne.n	11c86 <bt_conn_set_state+0x146>
			k_work_schedule(&conn->deferred_work,
   11bc8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   11bcc:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   11bd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   11bd4:	2300      	movs	r3, #0
   11bd6:	f014 baa3 	b.w	26120 <k_work_schedule>
		switch (old_state) {
   11bda:	3d01      	subs	r5, #1
   11bdc:	2d05      	cmp	r5, #5
   11bde:	d852      	bhi.n	11c86 <bt_conn_set_state+0x146>
   11be0:	a301      	add	r3, pc, #4	; (adr r3, 11be8 <bt_conn_set_state+0xa8>)
   11be2:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   11be6:	bf00      	nop
   11be8:	00011c01 	.word	0x00011c01
   11bec:	00011c3b 	.word	0x00011c3b
   11bf0:	00011b9d 	.word	0x00011b9d
   11bf4:	00011b9d 	.word	0x00011b9d
   11bf8:	00011c3b 	.word	0x00011c3b
   11bfc:	00011c3b 	.word	0x00011c3b
			tx_notify(conn);
   11c00:	4620      	mov	r0, r4
   11c02:	f018 fa82 	bl	2a10a <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   11c06:	78a3      	ldrb	r3, [r4, #2]
   11c08:	2b01      	cmp	r3, #1
   11c0a:	d103      	bne.n	11c14 <bt_conn_set_state+0xd4>
				k_work_cancel_delayable(&conn->deferred_work);
   11c0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   11c10:	f01c fe54 	bl	2e8bc <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11c14:	f3bf 8f5b 	dmb	ish
   11c18:	3404      	adds	r4, #4
   11c1a:	e854 3f00 	ldrex	r3, [r4]
   11c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11c22:	e844 3200 	strex	r2, r3, [r4]
   11c26:	2a00      	cmp	r2, #0
   11c28:	d1f7      	bne.n	11c1a <bt_conn_set_state+0xda>
   11c2a:	f3bf 8f5b 	dmb	ish
   11c2e:	4817      	ldr	r0, [pc, #92]	; (11c8c <bt_conn_set_state+0x14c>)
}
   11c30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11c34:	2100      	movs	r1, #0
   11c36:	f015 b85f 	b.w	26cf8 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   11c3a:	7b23      	ldrb	r3, [r4, #12]
   11c3c:	2b00      	cmp	r3, #0
   11c3e:	d0ad      	beq.n	11b9c <bt_conn_set_state+0x5c>
				notify_connected(conn);
   11c40:	4620      	mov	r0, r4
   11c42:	f7ff fe33 	bl	118ac <notify_connected>
   11c46:	e7a9      	b.n	11b9c <bt_conn_set_state+0x5c>
	return list->head;
   11c48:	6960      	ldr	r0, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   11c4a:	b128      	cbz	r0, 11c58 <bt_conn_set_state+0x118>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11c4c:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   11c4e:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   11c50:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11c52:	4288      	cmp	r0, r1
	list->tail = node;
   11c54:	bf08      	it	eq
   11c56:	61a3      	streq	r3, [r4, #24]
   11c58:	f382 8811 	msr	BASEPRI, r2
   11c5c:	f3bf 8f6f 	isb	sy
		if (!node) {
   11c60:	b188      	cbz	r0, 11c86 <bt_conn_set_state+0x146>
	__asm__ volatile(
   11c62:	f04f 0220 	mov.w	r2, #32
   11c66:	f3ef 8311 	mrs	r3, BASEPRI
   11c6a:	f382 8812 	msr	BASEPRI_MAX, r2
   11c6e:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   11c72:	68c2      	ldr	r2, [r0, #12]
   11c74:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   11c76:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   11c78:	f383 8811 	msr	BASEPRI, r3
   11c7c:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   11c80:	f7ff fe32 	bl	118e8 <tx_free>
   11c84:	e77f      	b.n	11b86 <bt_conn_set_state+0x46>
}
   11c86:	bd70      	pop	{r4, r5, r6, pc}
   11c88:	20000100 	.word	0x20000100
   11c8c:	200001f4 	.word	0x200001f4

00011c90 <bt_conn_index>:
		index = conn - acl_conns;
   11c90:	4b03      	ldr	r3, [pc, #12]	; (11ca0 <bt_conn_index+0x10>)
   11c92:	1ac0      	subs	r0, r0, r3
   11c94:	4b03      	ldr	r3, [pc, #12]	; (11ca4 <bt_conn_index+0x14>)
   11c96:	1180      	asrs	r0, r0, #6
   11c98:	4358      	muls	r0, r3
}
   11c9a:	b2c0      	uxtb	r0, r0
   11c9c:	4770      	bx	lr
   11c9e:	bf00      	nop
   11ca0:	20000c08 	.word	0x20000c08
   11ca4:	aaaaaaab 	.word	0xaaaaaaab

00011ca8 <bt_conn_create_pdu_timeout>:
{
   11ca8:	b538      	push	{r3, r4, r5, lr}
   11caa:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   11cac:	4906      	ldr	r1, [pc, #24]	; (11cc8 <bt_conn_create_pdu_timeout+0x20>)
   11cae:	2800      	cmp	r0, #0
   11cb0:	bf08      	it	eq
   11cb2:	4608      	moveq	r0, r1
   11cb4:	f01b fb2b 	bl	2d30e <net_buf_alloc_fixed>
	if (!buf) {
   11cb8:	4604      	mov	r4, r0
   11cba:	b118      	cbz	r0, 11cc4 <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
   11cbc:	1d29      	adds	r1, r5, #4
   11cbe:	3008      	adds	r0, #8
   11cc0:	f01b fb44 	bl	2d34c <net_buf_simple_reserve>
}
   11cc4:	4620      	mov	r0, r4
   11cc6:	bd38      	pop	{r3, r4, r5, pc}
   11cc8:	200009d0 	.word	0x200009d0

00011ccc <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   11ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11cce:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11cd0:	f3bf 8f5b 	dmb	ish
   11cd4:	6863      	ldr	r3, [r4, #4]
   11cd6:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   11cda:	05db      	lsls	r3, r3, #23
   11cdc:	f100 0004 	add.w	r0, r0, #4
   11ce0:	d511      	bpl.n	11d06 <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   11ce2:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   11ce6:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
   11cea:	429a      	cmp	r2, r3
   11cec:	d80b      	bhi.n	11d06 <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   11cee:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
   11cf2:	429a      	cmp	r2, r3
   11cf4:	d307      	bcc.n	11d06 <notify_le_param_updated+0x3a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   11cf6:	e9d4 2329 	ldrd	r2, r3, [r4, #164]	; 0xa4
   11cfa:	429a      	cmp	r2, r3
   11cfc:	d103      	bne.n	11d06 <notify_le_param_updated+0x3a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11cfe:	f46f 7180 	mvn.w	r1, #256	; 0x100
   11d02:	f018 f9f3 	bl	2a0ec <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   11d06:	4b10      	ldr	r3, [pc, #64]	; (11d48 <notify_le_param_updated+0x7c>)
   11d08:	681d      	ldr	r5, [r3, #0]
   11d0a:	b925      	cbnz	r5, 11d16 <notify_le_param_updated+0x4a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   11d0c:	4d0f      	ldr	r5, [pc, #60]	; (11d4c <notify_le_param_updated+0x80>)
   11d0e:	4f10      	ldr	r7, [pc, #64]	; (11d50 <notify_le_param_updated+0x84>)
   11d10:	42bd      	cmp	r5, r7
   11d12:	d30c      	bcc.n	11d2e <notify_le_param_updated+0x62>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   11d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   11d16:	68ee      	ldr	r6, [r5, #12]
   11d18:	b13e      	cbz	r6, 11d2a <notify_le_param_updated+0x5e>
			cb->le_param_updated(conn, conn->le.interval,
   11d1a:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   11d1e:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   11d22:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   11d26:	4620      	mov	r0, r4
   11d28:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   11d2a:	69ad      	ldr	r5, [r5, #24]
   11d2c:	e7ed      	b.n	11d0a <notify_le_param_updated+0x3e>
		if (cb->le_param_updated) {
   11d2e:	68ee      	ldr	r6, [r5, #12]
   11d30:	b13e      	cbz	r6, 11d42 <notify_le_param_updated+0x76>
			cb->le_param_updated(conn, conn->le.interval,
   11d32:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   11d36:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   11d3a:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   11d3e:	4620      	mov	r0, r4
   11d40:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   11d42:	351c      	adds	r5, #28
   11d44:	e7e4      	b.n	11d10 <notify_le_param_updated+0x44>
   11d46:	bf00      	nop
   11d48:	20001694 	.word	0x20001694
   11d4c:	0002f19c 	.word	0x0002f19c
   11d50:	0002f19c 	.word	0x0002f19c

00011d54 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   11d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11d58:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   11d5a:	4608      	mov	r0, r1
{
   11d5c:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   11d5e:	f017 fedf 	bl	29b20 <bt_le_conn_params_valid>
   11d62:	4605      	mov	r5, r0
   11d64:	b918      	cbnz	r0, 11d6e <le_param_req+0x1a>
		return false;
   11d66:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   11d68:	4628      	mov	r0, r5
   11d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   11d6e:	4b13      	ldr	r3, [pc, #76]	; (11dbc <le_param_req+0x68>)
   11d70:	681e      	ldr	r6, [r3, #0]
   11d72:	b946      	cbnz	r6, 11d86 <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   11d74:	4e12      	ldr	r6, [pc, #72]	; (11dc0 <le_param_req+0x6c>)
   11d76:	f8df 804c 	ldr.w	r8, [pc, #76]	; 11dc4 <le_param_req+0x70>
   11d7a:	4546      	cmp	r6, r8
   11d7c:	d2f4      	bcs.n	11d68 <le_param_req+0x14>
		if (!cb->le_param_req) {
   11d7e:	68b3      	ldr	r3, [r6, #8]
   11d80:	b983      	cbnz	r3, 11da4 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   11d82:	361c      	adds	r6, #28
   11d84:	e7f9      	b.n	11d7a <le_param_req+0x26>
		if (!cb->le_param_req) {
   11d86:	68b3      	ldr	r3, [r6, #8]
   11d88:	b90b      	cbnz	r3, 11d8e <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   11d8a:	69b6      	ldr	r6, [r6, #24]
   11d8c:	e7f1      	b.n	11d72 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   11d8e:	4621      	mov	r1, r4
   11d90:	4638      	mov	r0, r7
   11d92:	4798      	blx	r3
   11d94:	2800      	cmp	r0, #0
   11d96:	d0e6      	beq.n	11d66 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   11d98:	4620      	mov	r0, r4
   11d9a:	f017 fec1 	bl	29b20 <bt_le_conn_params_valid>
   11d9e:	2800      	cmp	r0, #0
   11da0:	d1f3      	bne.n	11d8a <le_param_req+0x36>
   11da2:	e7e0      	b.n	11d66 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   11da4:	4621      	mov	r1, r4
   11da6:	4638      	mov	r0, r7
   11da8:	4798      	blx	r3
   11daa:	2800      	cmp	r0, #0
   11dac:	d0db      	beq.n	11d66 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   11dae:	4620      	mov	r0, r4
   11db0:	f017 feb6 	bl	29b20 <bt_le_conn_params_valid>
   11db4:	2800      	cmp	r0, #0
   11db6:	d1e4      	bne.n	11d82 <le_param_req+0x2e>
   11db8:	e7d5      	b.n	11d66 <le_param_req+0x12>
   11dba:	bf00      	nop
   11dbc:	20001694 	.word	0x20001694
   11dc0:	0002f19c 	.word	0x0002f19c
   11dc4:	0002f19c 	.word	0x0002f19c

00011dc8 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   11dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   11dcc:	78c3      	ldrb	r3, [r0, #3]
{
   11dce:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   11dd0:	b973      	cbnz	r3, 11df0 <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
   11dd2:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   11dd6:	4b10      	ldr	r3, [pc, #64]	; (11e18 <bt_conn_identity_resolved+0x50>)
   11dd8:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   11dda:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   11dde:	b955      	cbnz	r5, 11df6 <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   11de0:	4d0e      	ldr	r5, [pc, #56]	; (11e1c <bt_conn_identity_resolved+0x54>)
   11de2:	4f0f      	ldr	r7, [pc, #60]	; (11e20 <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   11de4:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   11de8:	42bd      	cmp	r5, r7
   11dea:	d30c      	bcc.n	11e06 <bt_conn_identity_resolved+0x3e>
		}
	}
}
   11dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   11df0:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   11df4:	e7ef      	b.n	11dd6 <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   11df6:	692b      	ldr	r3, [r5, #16]
   11df8:	b11b      	cbz	r3, 11e02 <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   11dfa:	463a      	mov	r2, r7
   11dfc:	4631      	mov	r1, r6
   11dfe:	4620      	mov	r0, r4
   11e00:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   11e02:	69ad      	ldr	r5, [r5, #24]
   11e04:	e7eb      	b.n	11dde <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   11e06:	692b      	ldr	r3, [r5, #16]
   11e08:	b11b      	cbz	r3, 11e12 <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   11e0a:	4642      	mov	r2, r8
   11e0c:	4631      	mov	r1, r6
   11e0e:	4620      	mov	r0, r4
   11e10:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   11e12:	351c      	adds	r5, #28
   11e14:	e7e8      	b.n	11de8 <bt_conn_identity_resolved+0x20>
   11e16:	bf00      	nop
   11e18:	20001694 	.word	0x20001694
   11e1c:	0002f19c 	.word	0x0002f19c
   11e20:	0002f19c 	.word	0x0002f19c

00011e24 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   11e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   11e26:	7a43      	ldrb	r3, [r0, #9]
   11e28:	7283      	strb	r3, [r0, #10]
{
   11e2a:	4604      	mov	r4, r0
   11e2c:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   11e2e:	f018 fb77 	bl	2a520 <bt_l2cap_security_changed>

	for (cb = callback_list; cb; cb = cb->_next) {
   11e32:	4b0c      	ldr	r3, [pc, #48]	; (11e64 <bt_conn_security_changed+0x40>)
   11e34:	681d      	ldr	r5, [r3, #0]
   11e36:	b925      	cbnz	r5, 11e42 <bt_conn_security_changed+0x1e>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   11e38:	4d0b      	ldr	r5, [pc, #44]	; (11e68 <bt_conn_security_changed+0x44>)
   11e3a:	4f0c      	ldr	r7, [pc, #48]	; (11e6c <bt_conn_security_changed+0x48>)
   11e3c:	42bd      	cmp	r5, r7
   11e3e:	d308      	bcc.n	11e52 <bt_conn_security_changed+0x2e>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   11e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->security_changed) {
   11e42:	696b      	ldr	r3, [r5, #20]
   11e44:	b11b      	cbz	r3, 11e4e <bt_conn_security_changed+0x2a>
			cb->security_changed(conn, conn->sec_level, err);
   11e46:	7a61      	ldrb	r1, [r4, #9]
   11e48:	4632      	mov	r2, r6
   11e4a:	4620      	mov	r0, r4
   11e4c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   11e4e:	69ad      	ldr	r5, [r5, #24]
   11e50:	e7f1      	b.n	11e36 <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   11e52:	696b      	ldr	r3, [r5, #20]
   11e54:	b11b      	cbz	r3, 11e5e <bt_conn_security_changed+0x3a>
			cb->security_changed(conn, conn->sec_level, err);
   11e56:	7a61      	ldrb	r1, [r4, #9]
   11e58:	4632      	mov	r2, r6
   11e5a:	4620      	mov	r0, r4
   11e5c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   11e5e:	351c      	adds	r5, #28
   11e60:	e7ec      	b.n	11e3c <bt_conn_security_changed+0x18>
   11e62:	bf00      	nop
   11e64:	20001694 	.word	0x20001694
   11e68:	0002f19c 	.word	0x0002f19c
   11e6c:	0002f19c 	.word	0x0002f19c

00011e70 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   11e70:	4b02      	ldr	r3, [pc, #8]	; (11e7c <bt_conn_cb_register+0xc>)
   11e72:	681a      	ldr	r2, [r3, #0]
   11e74:	6182      	str	r2, [r0, #24]
	callback_list = cb;
   11e76:	6018      	str	r0, [r3, #0]
}
   11e78:	4770      	bx	lr
   11e7a:	bf00      	nop
   11e7c:	20001694 	.word	0x20001694

00011e80 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   11e80:	b570      	push	{r4, r5, r6, lr}
   11e82:	4606      	mov	r6, r0
   11e84:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   11e86:	480a      	ldr	r0, [pc, #40]	; (11eb0 <bt_conn_add_le+0x30>)
   11e88:	2101      	movs	r1, #1
   11e8a:	f7ff fdb1 	bl	119f0 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   11e8e:	4604      	mov	r4, r0
   11e90:	b160      	cbz	r0, 11eac <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
   11e92:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   11e94:	2207      	movs	r2, #7
   11e96:	4629      	mov	r1, r5
   11e98:	3088      	adds	r0, #136	; 0x88
   11e9a:	f017 fa54 	bl	29346 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   11e9e:	2301      	movs	r3, #1
   11ea0:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   11ea2:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   11ea4:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   11ea6:	4b03      	ldr	r3, [pc, #12]	; (11eb4 <bt_conn_add_le+0x34>)
   11ea8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   11eac:	4620      	mov	r0, r4
   11eae:	bd70      	pop	{r4, r5, r6, pc}
   11eb0:	20000c08 	.word	0x20000c08
   11eb4:	00280018 	.word	0x00280018

00011eb8 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   11eb8:	b570      	push	{r4, r5, r6, lr}
   11eba:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   11ebc:	480c      	ldr	r0, [pc, #48]	; (11ef0 <bt_conn_lookup_addr_le+0x38>)
{
   11ebe:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   11ec0:	f018 f9bd 	bl	2a23e <bt_conn_ref>

		if (!conn) {
   11ec4:	4604      	mov	r4, r0
   11ec6:	b128      	cbz	r0, 11ed4 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   11ec8:	7883      	ldrb	r3, [r0, #2]
   11eca:	2b01      	cmp	r3, #1
   11ecc:	d004      	beq.n	11ed8 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   11ece:	f018 f9d1 	bl	2a274 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   11ed2:	2400      	movs	r4, #0
}
   11ed4:	4620      	mov	r0, r4
   11ed6:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   11ed8:	4629      	mov	r1, r5
   11eda:	4632      	mov	r2, r6
   11edc:	f018 fa65 	bl	2a3aa <bt_conn_is_peer_addr_le>
   11ee0:	4605      	mov	r5, r0
   11ee2:	2800      	cmp	r0, #0
   11ee4:	d1f6      	bne.n	11ed4 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   11ee6:	4620      	mov	r0, r4
   11ee8:	f018 f9c4 	bl	2a274 <bt_conn_unref>
	return NULL;
   11eec:	462c      	mov	r4, r5
			continue;
   11eee:	e7f1      	b.n	11ed4 <bt_conn_lookup_addr_le+0x1c>
   11ef0:	20000c08 	.word	0x20000c08

00011ef4 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   11ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11ef6:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   11ef8:	480e      	ldr	r0, [pc, #56]	; (11f34 <bt_conn_lookup_state_le+0x40>)
{
   11efa:	460e      	mov	r6, r1
   11efc:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   11efe:	f018 f99e 	bl	2a23e <bt_conn_ref>

		if (!conn) {
   11f02:	4604      	mov	r4, r0
   11f04:	b1a0      	cbz	r0, 11f30 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   11f06:	7883      	ldrb	r3, [r0, #2]
   11f08:	2b01      	cmp	r3, #1
   11f0a:	d003      	beq.n	11f14 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   11f0c:	f018 f9b2 	bl	2a274 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   11f10:	2400      	movs	r4, #0
			continue;
   11f12:	e00d      	b.n	11f30 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   11f14:	b136      	cbz	r6, 11f24 <bt_conn_lookup_state_le+0x30>
   11f16:	4632      	mov	r2, r6
   11f18:	4629      	mov	r1, r5
   11f1a:	f018 fa46 	bl	2a3aa <bt_conn_is_peer_addr_le>
   11f1e:	b908      	cbnz	r0, 11f24 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   11f20:	4620      	mov	r0, r4
   11f22:	e7f3      	b.n	11f0c <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   11f24:	7b63      	ldrb	r3, [r4, #13]
   11f26:	42bb      	cmp	r3, r7
   11f28:	d1fa      	bne.n	11f20 <bt_conn_lookup_state_le+0x2c>
   11f2a:	7a23      	ldrb	r3, [r4, #8]
   11f2c:	42ab      	cmp	r3, r5
   11f2e:	d1f7      	bne.n	11f20 <bt_conn_lookup_state_le+0x2c>
}
   11f30:	4620      	mov	r0, r4
   11f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11f34:	20000c08 	.word	0x20000c08

00011f38 <send_conn_le_param_update>:
{
   11f38:	b538      	push	{r3, r4, r5, lr}
   11f3a:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   11f3c:	4608      	mov	r0, r1
{
   11f3e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   11f40:	f017 fdee 	bl	29b20 <bt_le_conn_params_valid>
   11f44:	b348      	cbz	r0, 11f9a <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   11f46:	4b16      	ldr	r3, [pc, #88]	; (11fa0 <send_conn_le_param_update+0x68>)
   11f48:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   11f4c:	0799      	lsls	r1, r3, #30
   11f4e:	d407      	bmi.n	11f60 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   11f50:	78e3      	ldrb	r3, [r4, #3]
   11f52:	b183      	cbz	r3, 11f76 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   11f54:	4629      	mov	r1, r5
   11f56:	4620      	mov	r0, r4
}
   11f58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   11f5c:	f000 b9c8 	b.w	122f0 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   11f60:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   11f64:	079a      	lsls	r2, r3, #30
   11f66:	d5f3      	bpl.n	11f50 <send_conn_le_param_update+0x18>
   11f68:	f3bf 8f5b 	dmb	ish
   11f6c:	6863      	ldr	r3, [r4, #4]
   11f6e:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   11f72:	059b      	lsls	r3, r3, #22
   11f74:	d4ec      	bmi.n	11f50 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   11f76:	4629      	mov	r1, r5
   11f78:	4620      	mov	r0, r4
   11f7a:	f018 fa3e 	bl	2a3fa <bt_conn_le_conn_update>
		if (rc == 0) {
   11f7e:	b958      	cbnz	r0, 11f98 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   11f80:	882b      	ldrh	r3, [r5, #0]
   11f82:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   11f86:	886b      	ldrh	r3, [r5, #2]
   11f88:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   11f8c:	88ab      	ldrh	r3, [r5, #4]
   11f8e:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   11f92:	88eb      	ldrh	r3, [r5, #6]
   11f94:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   11f98:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   11f9a:	f06f 0015 	mvn.w	r0, #21
   11f9e:	e7fb      	b.n	11f98 <send_conn_le_param_update+0x60>
   11fa0:	20000000 	.word	0x20000000

00011fa4 <deferred_work>:
{
   11fa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   11fa6:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   11faa:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   11fac:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   11fb0:	b9fb      	cbnz	r3, 11ff2 <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
   11fb2:	4628      	mov	r0, r5
   11fb4:	f018 faa3 	bl	2a4fe <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   11fb8:	4b28      	ldr	r3, [pc, #160]	; (1205c <deferred_work+0xb8>)
   11fba:	681e      	ldr	r6, [r3, #0]
   11fbc:	b94e      	cbnz	r6, 11fd2 <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   11fbe:	4e28      	ldr	r6, [pc, #160]	; (12060 <deferred_work+0xbc>)
   11fc0:	4f28      	ldr	r7, [pc, #160]	; (12064 <deferred_work+0xc0>)
   11fc2:	42be      	cmp	r6, r7
   11fc4:	d30d      	bcc.n	11fe2 <deferred_work+0x3e>
		bt_conn_unref(conn);
   11fc6:	4628      	mov	r0, r5
}
   11fc8:	b003      	add	sp, #12
   11fca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   11fce:	f018 b951 	b.w	2a274 <bt_conn_unref>
		if (cb->disconnected) {
   11fd2:	6873      	ldr	r3, [r6, #4]
   11fd4:	b11b      	cbz	r3, 11fde <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
   11fd6:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   11fda:	4628      	mov	r0, r5
   11fdc:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   11fde:	69b6      	ldr	r6, [r6, #24]
   11fe0:	e7ec      	b.n	11fbc <deferred_work+0x18>
		if (cb->disconnected) {
   11fe2:	6873      	ldr	r3, [r6, #4]
   11fe4:	b11b      	cbz	r3, 11fee <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
   11fe6:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   11fea:	4628      	mov	r0, r5
   11fec:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   11fee:	361c      	adds	r6, #28
   11ff0:	e7e7      	b.n	11fc2 <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
   11ff2:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   11ff6:	2b01      	cmp	r3, #1
   11ff8:	d128      	bne.n	1204c <deferred_work+0xa8>
	if (atomic_test_and_clear_bit(conn->flags,
   11ffa:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11ffe:	f46f 7180 	mvn.w	r1, #256	; 0x100
   12002:	4630      	mov	r0, r6
   12004:	f018 f872 	bl	2a0ec <atomic_and>
   12008:	05c3      	lsls	r3, r0, #23
   1200a:	d521      	bpl.n	12050 <deferred_work+0xac>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1200c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   12010:	f8ad 3000 	strh.w	r3, [sp]
   12014:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   12018:	f8ad 3002 	strh.w	r3, [sp, #2]
   1201c:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   12020:	f8ad 3004 	strh.w	r3, [sp, #4]
   12024:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   12028:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   1202c:	4669      	mov	r1, sp
   1202e:	4628      	mov	r0, r5
   12030:	f7ff ff82 	bl	11f38 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12034:	f3bf 8f5b 	dmb	ish
   12038:	e856 3f00 	ldrex	r3, [r6]
   1203c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12040:	e846 3200 	strex	r2, r3, [r6]
   12044:	2a00      	cmp	r2, #0
   12046:	d1f7      	bne.n	12038 <deferred_work+0x94>
   12048:	f3bf 8f5b 	dmb	ish
}
   1204c:	b003      	add	sp, #12
   1204e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
   12050:	4a05      	ldr	r2, [pc, #20]	; (12068 <deferred_work+0xc4>)
   12052:	6810      	ldr	r0, [r2, #0]
   12054:	6851      	ldr	r1, [r2, #4]
   12056:	466b      	mov	r3, sp
   12058:	c303      	stmia	r3!, {r0, r1}
   1205a:	e7e7      	b.n	1202c <deferred_work+0x88>
   1205c:	20001694 	.word	0x20001694
   12060:	0002f19c 	.word	0x0002f19c
   12064:	0002f19c 	.word	0x0002f19c
   12068:	0002f296 	.word	0x0002f296

0001206c <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   1206c:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1206e:	4801      	ldr	r0, [pc, #4]	; (12074 <bt_conn_create_frag_timeout+0x8>)
   12070:	f7ff be1a 	b.w	11ca8 <bt_conn_create_pdu_timeout>
   12074:	20000a28 	.word	0x20000a28

00012078 <create_frag>:
{
   12078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1207c:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   1207e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12082:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12086:	2000      	movs	r0, #0
{
   12088:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   1208a:	f7ff ffef 	bl	1206c <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   1208e:	7b73      	ldrb	r3, [r6, #13]
   12090:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   12092:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   12094:	f04f 0600 	mov.w	r6, #0
   12098:	d005      	beq.n	120a6 <create_frag+0x2e>
		net_buf_unref(frag);
   1209a:	f011 f9fd 	bl	23498 <net_buf_unref>
		return NULL;
   1209e:	4635      	mov	r5, r6
}
   120a0:	4628      	mov	r0, r5
   120a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   120a6:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   120a8:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   120ac:	4e0c      	ldr	r6, [pc, #48]	; (120e0 <create_frag+0x68>)
   120ae:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   120b0:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   120b4:	f01b f9c8 	bl	2d448 <net_buf_simple_tailroom>
   120b8:	4580      	cmp	r8, r0
   120ba:	d20c      	bcs.n	120d6 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   120bc:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   120c0:	f854 1f08 	ldr.w	r1, [r4, #8]!
   120c4:	4632      	mov	r2, r6
   120c6:	4638      	mov	r0, r7
   120c8:	f01b f989 	bl	2d3de <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   120cc:	4631      	mov	r1, r6
   120ce:	4620      	mov	r0, r4
   120d0:	f01b f99e 	bl	2d410 <net_buf_simple_pull>
   120d4:	e7e4      	b.n	120a0 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   120d6:	4638      	mov	r0, r7
   120d8:	f01b f9b6 	bl	2d448 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   120dc:	b286      	uxth	r6, r0
   120de:	e7ef      	b.n	120c0 <create_frag+0x48>
   120e0:	20000000 	.word	0x20000000

000120e4 <bt_conn_process_tx>:
{
   120e4:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   120e6:	7b43      	ldrb	r3, [r0, #13]
{
   120e8:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   120ea:	b95b      	cbnz	r3, 12104 <bt_conn_process_tx+0x20>
   120ec:	f06f 0140 	mvn.w	r1, #64	; 0x40
   120f0:	3004      	adds	r0, #4
   120f2:	f017 fffb 	bl	2a0ec <atomic_and>
   120f6:	0643      	lsls	r3, r0, #25
   120f8:	d504      	bpl.n	12104 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   120fa:	4620      	mov	r0, r4
}
   120fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   12100:	f018 b832 	b.w	2a168 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   12104:	2200      	movs	r2, #0
   12106:	2300      	movs	r3, #0
   12108:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1210c:	f01b f904 	bl	2d318 <net_buf_get>
	BT_ASSERT(buf);
   12110:	4605      	mov	r5, r0
   12112:	b960      	cbnz	r0, 1212e <bt_conn_process_tx+0x4a>
   12114:	4a1f      	ldr	r2, [pc, #124]	; (12194 <bt_conn_process_tx+0xb0>)
   12116:	4920      	ldr	r1, [pc, #128]	; (12198 <bt_conn_process_tx+0xb4>)
   12118:	4820      	ldr	r0, [pc, #128]	; (1219c <bt_conn_process_tx+0xb8>)
   1211a:	f44f 733a 	mov.w	r3, #744	; 0x2e8
   1211e:	f015 fa09 	bl	27534 <assert_print>
   12122:	4040      	eors	r0, r0
   12124:	f380 8811 	msr	BASEPRI, r0
   12128:	f04f 0003 	mov.w	r0, #3
   1212c:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   1212e:	4e1c      	ldr	r6, [pc, #112]	; (121a0 <bt_conn_process_tx+0xbc>)
	if (buf->len <= conn_mtu(conn)) {
   12130:	89aa      	ldrh	r2, [r5, #12]
   12132:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   12136:	429a      	cmp	r2, r3
   12138:	d807      	bhi.n	1214a <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   1213a:	2300      	movs	r3, #0
   1213c:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   1213e:	4629      	mov	r1, r5
   12140:	4620      	mov	r0, r4
   12142:	f7ff fbdb 	bl	118fc <send_frag>
	if (!send_buf(conn, buf)) {
   12146:	b130      	cbz	r0, 12156 <bt_conn_process_tx+0x72>
}
   12148:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
   1214a:	4629      	mov	r1, r5
   1214c:	4620      	mov	r0, r4
   1214e:	f7ff ff93 	bl	12078 <create_frag>
	if (!frag) {
   12152:	4601      	mov	r1, r0
   12154:	b920      	cbnz	r0, 12160 <bt_conn_process_tx+0x7c>
		net_buf_unref(buf);
   12156:	4628      	mov	r0, r5
}
   12158:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   1215c:	f011 b99c 	b.w	23498 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   12160:	2301      	movs	r3, #1
   12162:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   12164:	4620      	mov	r0, r4
   12166:	f7ff fbc9 	bl	118fc <send_frag>
   1216a:	2800      	cmp	r0, #0
   1216c:	d0f3      	beq.n	12156 <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
   1216e:	89aa      	ldrh	r2, [r5, #12]
   12170:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   12174:	429a      	cmp	r2, r3
   12176:	d802      	bhi.n	1217e <bt_conn_process_tx+0x9a>
	return send_frag(conn, buf, FRAG_END, false);
   12178:	2300      	movs	r3, #0
   1217a:	2203      	movs	r2, #3
   1217c:	e7df      	b.n	1213e <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
   1217e:	4629      	mov	r1, r5
   12180:	4620      	mov	r0, r4
   12182:	f7ff ff79 	bl	12078 <create_frag>
		if (!frag) {
   12186:	4601      	mov	r1, r0
   12188:	2800      	cmp	r0, #0
   1218a:	d0e4      	beq.n	12156 <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1218c:	2301      	movs	r3, #1
   1218e:	461a      	mov	r2, r3
   12190:	e7e8      	b.n	12164 <bt_conn_process_tx+0x80>
   12192:	bf00      	nop
   12194:	00030c38 	.word	0x00030c38
   12198:	00030b21 	.word	0x00030b21
   1219c:	00030b04 	.word	0x00030b04
   121a0:	20000000 	.word	0x20000000

000121a4 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   121a4:	4b0c      	ldr	r3, [pc, #48]	; (121d8 <bt_conn_auth_cb_register+0x34>)
   121a6:	b908      	cbnz	r0, 121ac <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
   121a8:	6018      	str	r0, [r3, #0]
		return 0;
   121aa:	4770      	bx	lr
	}

	if (bt_auth) {
   121ac:	681a      	ldr	r2, [r3, #0]
   121ae:	b962      	cbnz	r2, 121ca <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   121b0:	6902      	ldr	r2, [r0, #16]
   121b2:	b93a      	cbnz	r2, 121c4 <bt_conn_auth_cb_register+0x20>
   121b4:	6802      	ldr	r2, [r0, #0]
   121b6:	b95a      	cbnz	r2, 121d0 <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   121b8:	6842      	ldr	r2, [r0, #4]
   121ba:	b94a      	cbnz	r2, 121d0 <bt_conn_auth_cb_register+0x2c>
   121bc:	6882      	ldr	r2, [r0, #8]
   121be:	b93a      	cbnz	r2, 121d0 <bt_conn_auth_cb_register+0x2c>
   121c0:	6942      	ldr	r2, [r0, #20]
   121c2:	b92a      	cbnz	r2, 121d0 <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   121c4:	6018      	str	r0, [r3, #0]
	return 0;
   121c6:	2000      	movs	r0, #0
   121c8:	4770      	bx	lr
		return -EALREADY;
   121ca:	f06f 0077 	mvn.w	r0, #119	; 0x77
   121ce:	4770      	bx	lr
		return -EINVAL;
   121d0:	f06f 0015 	mvn.w	r0, #21
}
   121d4:	4770      	bx	lr
   121d6:	bf00      	nop
   121d8:	20001688 	.word	0x20001688

000121dc <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   121dc:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   121de:	490b      	ldr	r1, [pc, #44]	; (1220c <bt_conn_init+0x30>)
   121e0:	480b      	ldr	r0, [pc, #44]	; (12210 <bt_conn_init+0x34>)
   121e2:	f01c fa68 	bl	2e6b6 <k_queue_append>
   121e6:	490b      	ldr	r1, [pc, #44]	; (12214 <bt_conn_init+0x38>)
   121e8:	4809      	ldr	r0, [pc, #36]	; (12210 <bt_conn_init+0x34>)
   121ea:	f01c fa64 	bl	2e6b6 <k_queue_append>
   121ee:	490a      	ldr	r1, [pc, #40]	; (12218 <bt_conn_init+0x3c>)
   121f0:	4807      	ldr	r0, [pc, #28]	; (12210 <bt_conn_init+0x34>)
   121f2:	f01c fa60 	bl	2e6b6 <k_queue_append>
	}

	bt_att_init();
   121f6:	f018 fe96 	bl	2af26 <bt_att_init>

	err = bt_smp_init();
   121fa:	f002 fec7 	bl	14f8c <bt_smp_init>
	if (err) {
   121fe:	4604      	mov	r4, r0
   12200:	b908      	cbnz	r0, 12206 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   12202:	f018 fa20 	bl	2a646 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   12206:	4620      	mov	r0, r4
   12208:	bd10      	pop	{r4, pc}
   1220a:	bf00      	nop
   1220c:	20001698 	.word	0x20001698
   12210:	200009a0 	.word	0x200009a0
   12214:	200016a8 	.word	0x200016a8
   12218:	200016b8 	.word	0x200016b8

0001221c <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   1221c:	4b04      	ldr	r3, [pc, #16]	; (12230 <l2cap_accept+0x14>)
   1221e:	6818      	ldr	r0, [r3, #0]
   12220:	b918      	cbnz	r0, 1222a <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   12222:	4a04      	ldr	r2, [pc, #16]	; (12234 <l2cap_accept+0x18>)
   12224:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   12226:	600b      	str	r3, [r1, #0]

		return 0;
   12228:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
   1222a:	f06f 000b 	mvn.w	r0, #11
}
   1222e:	4770      	bx	lr
   12230:	20000cc8 	.word	0x20000cc8
   12234:	0002f5f8 	.word	0x0002f5f8

00012238 <bt_l2cap_connected>:
{
   12238:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1223c:	4e29      	ldr	r6, [pc, #164]	; (122e4 <bt_l2cap_connected+0xac>)
   1223e:	4f2a      	ldr	r7, [pc, #168]	; (122e8 <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   12240:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 122ec <bt_l2cap_connected+0xb4>
{
   12244:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   12246:	42be      	cmp	r6, r7
   12248:	d302      	bcc.n	12250 <bt_l2cap_connected+0x18>
}
   1224a:	b003      	add	sp, #12
   1224c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   12250:	6873      	ldr	r3, [r6, #4]
   12252:	a901      	add	r1, sp, #4
   12254:	4620      	mov	r0, r4
   12256:	4798      	blx	r3
   12258:	2800      	cmp	r0, #0
   1225a:	db3d      	blt.n	122d8 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
   1225c:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   1225e:	8833      	ldrh	r3, [r6, #0]
   12260:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   12264:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   12268:	4641      	mov	r1, r8
   1226a:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1226e:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   12272:	f01c fb17 	bl	2e8a4 <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12276:	f3bf 8f5b 	dmb	ish
   1227a:	f105 0368 	add.w	r3, r5, #104	; 0x68
   1227e:	2200      	movs	r2, #0
   12280:	e853 1f00 	ldrex	r1, [r3]
   12284:	e843 2000 	strex	r0, r2, [r3]
   12288:	2800      	cmp	r0, #0
   1228a:	d1f9      	bne.n	12280 <bt_l2cap_connected+0x48>
   1228c:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   12290:	60aa      	str	r2, [r5, #8]
	return list->tail;
   12292:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   12294:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode)
   12298:	bb02      	cbnz	r2, 122dc <bt_l2cap_connected+0xa4>
	list->head = node;
   1229a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
   1229e:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   122a0:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   122a2:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   122a4:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
   122a8:	681b      	ldr	r3, [r3, #0]
   122aa:	b103      	cbz	r3, 122ae <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
   122ac:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   122ae:	9b01      	ldr	r3, [sp, #4]
   122b0:	f3bf 8f5b 	dmb	ish
   122b4:	3368      	adds	r3, #104	; 0x68
   122b6:	e853 2f00 	ldrex	r2, [r3]
   122ba:	f042 0201 	orr.w	r2, r2, #1
   122be:	e843 2100 	strex	r1, r2, [r3]
   122c2:	2900      	cmp	r1, #0
   122c4:	d1f7      	bne.n	122b6 <bt_l2cap_connected+0x7e>
   122c6:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   122ca:	9801      	ldr	r0, [sp, #4]
   122cc:	6843      	ldr	r3, [r0, #4]
   122ce:	699b      	ldr	r3, [r3, #24]
   122d0:	b113      	cbz	r3, 122d8 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
   122d2:	f100 0168 	add.w	r1, r0, #104	; 0x68
   122d6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   122d8:	360c      	adds	r6, #12
   122da:	e7b4      	b.n	12246 <bt_l2cap_connected+0xe>
	parent->next = child;
   122dc:	6013      	str	r3, [r2, #0]
	list->tail = node;
   122de:	6563      	str	r3, [r4, #84]	; 0x54
}
   122e0:	e7dd      	b.n	1229e <bt_l2cap_connected+0x66>
   122e2:	bf00      	nop
   122e4:	0002f178 	.word	0x0002f178
   122e8:	0002f19c 	.word	0x0002f19c
   122ec:	0002a4e5 	.word	0x0002a4e5

000122f0 <bt_l2cap_update_conn_param>:
{
   122f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   122f2:	460d      	mov	r5, r1
	ident++;
   122f4:	4916      	ldr	r1, [pc, #88]	; (12350 <bt_l2cap_update_conn_param+0x60>)
   122f6:	780b      	ldrb	r3, [r1, #0]
   122f8:	3301      	adds	r3, #1
	if (!ident) {
   122fa:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   122fe:	bf08      	it	eq
   12300:	2301      	moveq	r3, #1
   12302:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   12304:	7809      	ldrb	r1, [r1, #0]
{
   12306:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   12308:	2208      	movs	r2, #8
   1230a:	2012      	movs	r0, #18
   1230c:	f018 f8a1 	bl	2a452 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   12310:	4604      	mov	r4, r0
   12312:	b1d0      	cbz	r0, 1234a <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   12314:	2108      	movs	r1, #8
   12316:	4408      	add	r0, r1
   12318:	f01b f85b 	bl	2d3d2 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   1231c:	882b      	ldrh	r3, [r5, #0]
   1231e:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   12320:	886b      	ldrh	r3, [r5, #2]
   12322:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   12324:	88ab      	ldrh	r3, [r5, #4]
   12326:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   12328:	88eb      	ldrh	r3, [r5, #6]
   1232a:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1232c:	2300      	movs	r3, #0
   1232e:	9300      	str	r3, [sp, #0]
   12330:	4622      	mov	r2, r4
   12332:	2105      	movs	r1, #5
   12334:	4630      	mov	r0, r6
   12336:	f018 f90b 	bl	2a550 <bt_l2cap_send_cb>
	if (err) {
   1233a:	4605      	mov	r5, r0
   1233c:	b110      	cbz	r0, 12344 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   1233e:	4620      	mov	r0, r4
   12340:	f011 f8aa 	bl	23498 <net_buf_unref>
}
   12344:	4628      	mov	r0, r5
   12346:	b002      	add	sp, #8
   12348:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1234a:	f06f 050b 	mvn.w	r5, #11
   1234e:	e7f9      	b.n	12344 <bt_l2cap_update_conn_param+0x54>
   12350:	20002d7a 	.word	0x20002d7a

00012354 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   12354:	4b02      	ldr	r3, [pc, #8]	; (12360 <att_cfm_sent+0xc>)
   12356:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   1235a:	f018 b987 	b.w	2a66c <att_sent>
   1235e:	bf00      	nop
   12360:	0002abf1 	.word	0x0002abf1

00012364 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   12364:	4b02      	ldr	r3, [pc, #8]	; (12370 <att_rsp_sent+0xc>)
   12366:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   1236a:	f018 b97f 	b.w	2a66c <att_sent>
   1236e:	bf00      	nop
   12370:	0002abd5 	.word	0x0002abd5

00012374 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   12374:	4b02      	ldr	r3, [pc, #8]	; (12380 <att_req_sent+0xc>)
   12376:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   1237a:	f018 b977 	b.w	2a66c <att_sent>
   1237e:	bf00      	nop
   12380:	0002a9a5 	.word	0x0002a9a5

00012384 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   12384:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   12386:	3808      	subs	r0, #8
   12388:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   1238a:	a901      	add	r1, sp, #4
   1238c:	4802      	ldr	r0, [pc, #8]	; (12398 <bt_att_released+0x14>)
   1238e:	f01c f8cc 	bl	2e52a <k_mem_slab_free>
}
   12392:	b003      	add	sp, #12
   12394:	f85d fb04 	ldr.w	pc, [sp], #4
   12398:	2000090c 	.word	0x2000090c

0001239c <read_group_cb>:
{
   1239c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   123a0:	4605      	mov	r5, r0
   123a2:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   123a4:	f04f 0800 	mov.w	r8, #0
   123a8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   123ac:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   123ae:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   123b0:	f88d 8008 	strb.w	r8, [sp, #8]
   123b4:	a902      	add	r1, sp, #8
{
   123b6:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   123b8:	f8ad 300a 	strh.w	r3, [sp, #10]
   123bc:	f017 f89b 	bl	294f6 <bt_uuid_cmp>
   123c0:	b1a0      	cbz	r0, 123ec <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   123c2:	f642 0301 	movw	r3, #10241	; 0x2801
   123c6:	6828      	ldr	r0, [r5, #0]
   123c8:	f88d 800c 	strb.w	r8, [sp, #12]
   123cc:	a903      	add	r1, sp, #12
   123ce:	f8ad 300e 	strh.w	r3, [sp, #14]
   123d2:	f017 f890 	bl	294f6 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   123d6:	b148      	cbz	r0, 123ec <read_group_cb+0x50>
		if (data->group &&
   123d8:	6923      	ldr	r3, [r4, #16]
   123da:	b11b      	cbz	r3, 123e4 <read_group_cb+0x48>
   123dc:	885a      	ldrh	r2, [r3, #2]
   123de:	42b2      	cmp	r2, r6
   123e0:	d200      	bcs.n	123e4 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   123e2:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   123e4:	2001      	movs	r0, #1
}
   123e6:	b004      	add	sp, #16
   123e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   123ec:	6861      	ldr	r1, [r4, #4]
   123ee:	6828      	ldr	r0, [r5, #0]
   123f0:	f017 f881 	bl	294f6 <bt_uuid_cmp>
   123f4:	b110      	cbz	r0, 123fc <read_group_cb+0x60>
		data->group = NULL;
   123f6:	2300      	movs	r3, #0
   123f8:	6123      	str	r3, [r4, #16]
   123fa:	e7f3      	b.n	123e4 <read_group_cb+0x48>
	if (data->rsp->len &&
   123fc:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   123fe:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   12400:	781a      	ldrb	r2, [r3, #0]
   12402:	b13a      	cbz	r2, 12414 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   12404:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   12408:	8981      	ldrh	r1, [r0, #12]
   1240a:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1240c:	4293      	cmp	r3, r2
   1240e:	da01      	bge.n	12414 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   12410:	2000      	movs	r0, #0
   12412:	e7e8      	b.n	123e6 <read_group_cb+0x4a>
   12414:	2104      	movs	r1, #4
   12416:	3008      	adds	r0, #8
   12418:	f01a ffdb 	bl	2d3d2 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1241c:	4b09      	ldr	r3, [pc, #36]	; (12444 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1241e:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   12420:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   12422:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   12424:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   12426:	4629      	mov	r1, r5
   12428:	9300      	str	r3, [sp, #0]
   1242a:	9401      	str	r4, [sp, #4]
   1242c:	2300      	movs	r3, #0
   1242e:	4638      	mov	r0, r7
   12430:	f018 faf5 	bl	2aa1e <att_chan_read>
	if (read < 0) {
   12434:	2800      	cmp	r0, #0
   12436:	dbeb      	blt.n	12410 <read_group_cb+0x74>
	if (!data->group) {
   12438:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1243a:	3800      	subs	r0, #0
   1243c:	bf18      	it	ne
   1243e:	2001      	movne	r0, #1
   12440:	e7d1      	b.n	123e6 <read_group_cb+0x4a>
   12442:	bf00      	nop
   12444:	0002a969 	.word	0x0002a969

00012448 <chan_send>:
{
   12448:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	hdr = (void *)buf->data;
   1244c:	688b      	ldr	r3, [r1, #8]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1244e:	f3bf 8f5b 	dmb	ish
{
   12452:	4617      	mov	r7, r2
   12454:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
   12458:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   1245c:	0752      	lsls	r2, r2, #29
{
   1245e:	4606      	mov	r6, r0
   12460:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   12462:	d546      	bpl.n	124f2 <chan_send+0xaa>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   12464:	781b      	ldrb	r3, [r3, #0]
   12466:	2bd2      	cmp	r3, #210	; 0xd2
   12468:	d10c      	bne.n	12484 <chan_send+0x3c>
		err = bt_smp_sign(chan->att->conn, buf);
   1246a:	6803      	ldr	r3, [r0, #0]
   1246c:	6818      	ldr	r0, [r3, #0]
   1246e:	f019 fe1e 	bl	2c0ae <bt_smp_sign>
		if (err) {
   12472:	4605      	mov	r5, r0
   12474:	b130      	cbz	r0, 12484 <chan_send+0x3c>
			net_buf_unref(buf);
   12476:	4620      	mov	r0, r4
   12478:	f011 f80e 	bl	23498 <net_buf_unref>
}
   1247c:	4628      	mov	r0, r5
   1247e:	b003      	add	sp, #12
   12480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   12484:	f104 0008 	add.w	r0, r4, #8
   12488:	f01a ffda 	bl	2d440 <net_buf_simple_headroom>
	state->len = buf->len;
   1248c:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   12490:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   12492:	b957      	cbnz	r7, 124aa <chan_send+0x62>
	switch (att_op_get_type(buf->data[0])) {
   12494:	68a3      	ldr	r3, [r4, #8]
   12496:	7818      	ldrb	r0, [r3, #0]
   12498:	f018 f900 	bl	2a69c <att_op_get_type>
   1249c:	3801      	subs	r0, #1
   1249e:	b2c0      	uxtb	r0, r0
   124a0:	2804      	cmp	r0, #4
   124a2:	bf9c      	itt	ls
   124a4:	4b14      	ldrls	r3, [pc, #80]	; (124f8 <chan_send+0xb0>)
   124a6:	f853 7020 	ldrls.w	r7, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   124aa:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   124ac:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   124b0:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   124b2:	4b12      	ldr	r3, [pc, #72]	; (124fc <chan_send+0xb4>)
   124b4:	429f      	cmp	r7, r3
   124b6:	d018      	beq.n	124ea <chan_send+0xa2>
	} else if (cb == chan_cfm_sent) {
   124b8:	4b11      	ldr	r3, [pc, #68]	; (12500 <chan_send+0xb8>)
   124ba:	429f      	cmp	r7, r3
   124bc:	d017      	beq.n	124ee <chan_send+0xa6>
		return att_sent;
   124be:	4911      	ldr	r1, [pc, #68]	; (12504 <chan_send+0xbc>)
   124c0:	4b11      	ldr	r3, [pc, #68]	; (12508 <chan_send+0xc0>)
   124c2:	4a12      	ldr	r2, [pc, #72]	; (1250c <chan_send+0xc4>)
   124c4:	428f      	cmp	r7, r1
   124c6:	bf18      	it	ne
   124c8:	4613      	movne	r3, r2
			       &chan->chan.chan);
   124ca:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   124cc:	9600      	str	r6, [sp, #0]
   124ce:	4622      	mov	r2, r4
   124d0:	2104      	movs	r1, #4
   124d2:	f018 f83d 	bl	2a550 <bt_l2cap_send_cb>
	if (err) {
   124d6:	4605      	mov	r5, r0
   124d8:	2800      	cmp	r0, #0
   124da:	d0cf      	beq.n	1247c <chan_send+0x34>
	buf->data = buf->__buf + state->offset;
   124dc:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   124de:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   124e2:	fa10 f088 	uxtah	r0, r0, r8
   124e6:	60a0      	str	r0, [r4, #8]
}
   124e8:	e7c8      	b.n	1247c <chan_send+0x34>
		return att_rsp_sent;
   124ea:	4b09      	ldr	r3, [pc, #36]	; (12510 <chan_send+0xc8>)
   124ec:	e7ed      	b.n	124ca <chan_send+0x82>
		return att_cfm_sent;
   124ee:	4b09      	ldr	r3, [pc, #36]	; (12514 <chan_send+0xcc>)
   124f0:	e7eb      	b.n	124ca <chan_send+0x82>
		return -EINVAL;
   124f2:	f06f 0515 	mvn.w	r5, #21
   124f6:	e7c1      	b.n	1247c <chan_send+0x34>
   124f8:	0002f61c 	.word	0x0002f61c
   124fc:	0002abd5 	.word	0x0002abd5
   12500:	0002abf1 	.word	0x0002abf1
   12504:	0002a9a5 	.word	0x0002a9a5
   12508:	00012375 	.word	0x00012375
   1250c:	0002a66d 	.word	0x0002a66d
   12510:	00012365 	.word	0x00012365
   12514:	00012355 	.word	0x00012355

00012518 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   12518:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
   1251a:	4a07      	ldr	r2, [pc, #28]	; (12538 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   1251c:	4604      	mov	r4, r0
   1251e:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   12520:	f7ff ff92 	bl	12448 <chan_send>
	if (err) {
   12524:	b130      	cbz	r0, 12534 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
   12526:	4629      	mov	r1, r5
   12528:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
   1252c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   12530:	f01a bf10 	b.w	2d354 <net_buf_put>
}
   12534:	bd38      	pop	{r3, r4, r5, pc}
   12536:	bf00      	nop
   12538:	0002abd5 	.word	0x0002abd5

0001253c <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1253c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1253e:	2300      	movs	r3, #0
{
   12540:	4607      	mov	r7, r0
   12542:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   12544:	4827      	ldr	r0, [pc, #156]	; (125e4 <bt_att_accept+0xa8>)
   12546:	2200      	movs	r2, #0
   12548:	4669      	mov	r1, sp
   1254a:	f013 fa23 	bl	25994 <k_mem_slab_alloc>
   1254e:	4605      	mov	r5, r0
   12550:	b110      	cbz	r0, 12558 <bt_att_accept+0x1c>
	k_work_init_delayable(&att->connection_work, att_enhanced_connection_work_handler);
#endif /* CONFIG_BT_EATT */

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   12552:	f06f 050b 	mvn.w	r5, #11
   12556:	e042      	b.n	125de <bt_att_accept+0xa2>
	(void)memset(att, 0, sizeof(*att));
   12558:	4601      	mov	r1, r0
   1255a:	222c      	movs	r2, #44	; 0x2c
   1255c:	9800      	ldr	r0, [sp, #0]
   1255e:	f016 fefd 	bl	2935c <memset>
	att->conn = conn;
   12562:	9c00      	ldr	r4, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   12564:	4820      	ldr	r0, [pc, #128]	; (125e8 <bt_att_accept+0xac>)
	list->tail = NULL;
   12566:	60a5      	str	r5, [r4, #8]
	list->head = NULL;
   12568:	e9c4 7500 	strd	r7, r5, [r4]
	list->tail = NULL;
   1256c:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
   12570:	2200      	movs	r2, #0
   12572:	2300      	movs	r3, #0
   12574:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   12576:	9501      	str	r5, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   12578:	f013 fa0c 	bl	25994 <k_mem_slab_alloc>
   1257c:	4605      	mov	r5, r0
   1257e:	2800      	cmp	r0, #0
   12580:	d1e7      	bne.n	12552 <bt_att_accept+0x16>
	(void)memset(chan, 0, sizeof(*chan));
   12582:	4601      	mov	r1, r0
   12584:	f44f 72a4 	mov.w	r2, #328	; 0x148
   12588:	9801      	ldr	r0, [sp, #4]
   1258a:	f016 fee7 	bl	2935c <memset>
	chan->chan.chan.ops = &ops;
   1258e:	9801      	ldr	r0, [sp, #4]
   12590:	4b16      	ldr	r3, [pc, #88]	; (125ec <bt_att_accept+0xb0>)
   12592:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   12594:	30f8      	adds	r0, #248	; 0xf8
   12596:	f01c f882 	bl	2e69e <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1259a:	9b01      	ldr	r3, [sp, #4]
   1259c:	f3bf 8f5b 	dmb	ish
   125a0:	33f0      	adds	r3, #240	; 0xf0
   125a2:	e853 2f00 	ldrex	r2, [r3]
   125a6:	e843 5100 	strex	r1, r5, [r3]
   125aa:	2900      	cmp	r1, #0
   125ac:	d1f9      	bne.n	125a2 <bt_att_accept+0x66>
   125ae:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   125b2:	9f01      	ldr	r7, [sp, #4]
	if (sys_slist_is_empty(&att->chans)) {
   125b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
	chan->att = att;
   125b6:	603c      	str	r4, [r7, #0]
	if (sys_slist_is_empty(&att->chans)) {
   125b8:	b91b      	cbnz	r3, 125c2 <bt_att_accept+0x86>
   125ba:	f104 000c 	add.w	r0, r4, #12
   125be:	f01c f86e 	bl	2e69e <z_impl_k_queue_init>
	parent->next = child;
   125c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   125c4:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
Z_GENLIST_PREPEND(slist, snode)
   125c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   125ca:	f507 73a2 	add.w	r3, r7, #324	; 0x144
	list->head = node;
   125ce:	6263      	str	r3, [r4, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   125d0:	b902      	cbnz	r2, 125d4 <bt_att_accept+0x98>
	list->tail = node;
   125d2:	62a3      	str	r3, [r4, #40]	; 0x28
	return chan;
   125d4:	9b01      	ldr	r3, [sp, #4]
	if (!chan) {
   125d6:	2b00      	cmp	r3, #0
   125d8:	d0bb      	beq.n	12552 <bt_att_accept+0x16>
	}

	*ch = &chan->chan.chan;
   125da:	3308      	adds	r3, #8
   125dc:	6033      	str	r3, [r6, #0]

	return 0;
}
   125de:	4628      	mov	r0, r5
   125e0:	b003      	add	sp, #12
   125e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   125e4:	200008f0 	.word	0x200008f0
   125e8:	2000090c 	.word	0x2000090c
   125ec:	20000204 	.word	0x20000204

000125f0 <read_type_cb>:
{
   125f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   125f4:	f8d2 8000 	ldr.w	r8, [r2]
{
   125f8:	4606      	mov	r6, r0
   125fa:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   125fc:	6800      	ldr	r0, [r0, #0]
   125fe:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   12600:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   12604:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   12606:	f016 ff76 	bl	294f6 <bt_uuid_cmp>
   1260a:	4607      	mov	r7, r0
   1260c:	2800      	cmp	r0, #0
   1260e:	d13e      	bne.n	1268e <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   12610:	4628      	mov	r0, r5
   12612:	2215      	movs	r2, #21
   12614:	4631      	mov	r1, r6
   12616:	f019 f930 	bl	2b87a <bt_gatt_check_perm>
   1261a:	4605      	mov	r5, r0
   1261c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1261e:	b148      	cbz	r0, 12634 <read_type_cb+0x44>
		if (data->rsp->len) {
   12620:	68e3      	ldr	r3, [r4, #12]
   12622:	781b      	ldrb	r3, [r3, #0]
   12624:	b923      	cbnz	r3, 12630 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   12626:	2500      	movs	r5, #0
}
   12628:	4628      	mov	r0, r5
   1262a:	b003      	add	sp, #12
   1262c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   12630:	7527      	strb	r7, [r4, #20]
   12632:	e7f8      	b.n	12626 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   12634:	68a0      	ldr	r0, [r4, #8]
   12636:	f01a fe9e 	bl	2d376 <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   1263a:	2102      	movs	r1, #2
   1263c:	3008      	adds	r0, #8
   1263e:	f01a fec8 	bl	2d3d2 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   12642:	4b14      	ldr	r3, [pc, #80]	; (12694 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   12644:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   12646:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   12648:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1264c:	4631      	mov	r1, r6
   1264e:	9300      	str	r3, [sp, #0]
   12650:	9401      	str	r4, [sp, #4]
   12652:	462b      	mov	r3, r5
   12654:	4640      	mov	r0, r8
   12656:	f018 f9e2 	bl	2aa1e <att_chan_read>
	if (read < 0) {
   1265a:	2800      	cmp	r0, #0
   1265c:	da07      	bge.n	1266e <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   1265e:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   12662:	bf26      	itte	cs
   12664:	4240      	negcs	r0, r0
   12666:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   12668:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   1266a:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1266c:	e7dc      	b.n	12628 <read_type_cb+0x38>
	if (!data->item) {
   1266e:	6923      	ldr	r3, [r4, #16]
   12670:	2b00      	cmp	r3, #0
   12672:	d0d8      	beq.n	12626 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   12674:	68a0      	ldr	r0, [r4, #8]
   12676:	f017 fff1 	bl	2a65c <net_buf_frags_len>
   1267a:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1267e:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   12680:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   12682:	7818      	ldrb	r0, [r3, #0]
   12684:	4285      	cmp	r5, r0
   12686:	bf94      	ite	ls
   12688:	2500      	movls	r5, #0
   1268a:	2501      	movhi	r5, #1
   1268c:	e7cc      	b.n	12628 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1268e:	2501      	movs	r5, #1
   12690:	e7ca      	b.n	12628 <read_type_cb+0x38>
   12692:	bf00      	nop
   12694:	0002a679 	.word	0x0002a679

00012698 <bt_att_connected>:
{
   12698:	b510      	push	{r4, lr}
   1269a:	4604      	mov	r4, r0
	atomic_set_bit(att_chan->flags, ATT_CONNECTED);
   1269c:	f104 03e8 	add.w	r3, r4, #232	; 0xe8
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   126a0:	3808      	subs	r0, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   126a2:	f3bf 8f5b 	dmb	ish
   126a6:	e853 2f00 	ldrex	r2, [r3]
   126aa:	f042 0204 	orr.w	r2, r2, #4
   126ae:	e843 2100 	strex	r1, r2, [r3]
   126b2:	2900      	cmp	r1, #0
   126b4:	d1f7      	bne.n	126a6 <bt_att_connected+0xe>
   126b6:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   126ba:	f3bf 8f5b 	dmb	ish
   126be:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   126c2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   126c6:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   126c8:	bf5e      	ittt	pl
   126ca:	2317      	movpl	r3, #23
   126cc:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   126d0:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   126d4:	f018 f912 	bl	2a8fc <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   126d8:	f504 7084 	add.w	r0, r4, #264	; 0x108
   126dc:	4903      	ldr	r1, [pc, #12]	; (126ec <bt_att_connected+0x54>)
   126de:	f01c f8e1 	bl	2e8a4 <k_work_init_delayable>
	bt_gatt_connected(ch->chan.conn);
   126e2:	6820      	ldr	r0, [r4, #0]
}
   126e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
   126e8:	f001 baf8 	b.w	13cdc <bt_gatt_connected>
   126ec:	0002afef 	.word	0x0002afef

000126f0 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   126f0:	898b      	ldrh	r3, [r1, #12]
{
   126f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   126f6:	4604      	mov	r4, r0
   126f8:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   126fa:	2b00      	cmp	r3, #0
   126fc:	d060      	beq.n	127c0 <bt_att_recv+0xd0>
	return net_buf_simple_pull_mem(&buf->b, len);
   126fe:	2101      	movs	r1, #1
   12700:	f105 0008 	add.w	r0, r5, #8
   12704:	f01a fe8c 	bl	2d420 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   12708:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1270c:	4607      	mov	r7, r0
   1270e:	2b00      	cmp	r3, #0
   12710:	d056      	beq.n	127c0 <bt_att_recv+0xd0>
		if (hdr->code == handlers[i].op) {
   12712:	7801      	ldrb	r1, [r0, #0]
   12714:	4a2e      	ldr	r2, [pc, #184]	; (127d0 <bt_att_recv+0xe0>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   12716:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1271a:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   1271c:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   12720:	4288      	cmp	r0, r1
   12722:	d11b      	bne.n	1275c <bt_att_recv+0x6c>
		if (handler->type == ATT_REQUEST &&
   12724:	00d9      	lsls	r1, r3, #3
   12726:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1272a:	f893 8002 	ldrb.w	r8, [r3, #2]
   1272e:	f1b8 0f01 	cmp.w	r8, #1
   12732:	d023      	beq.n	1277c <bt_att_recv+0x8c>
		} else if (handler->type == ATT_INDICATION &&
   12734:	f1b8 0f05 	cmp.w	r8, #5
   12738:	d131      	bne.n	1279e <bt_att_recv+0xae>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1273a:	f3bf 8f5b 	dmb	ish
   1273e:	34e8      	adds	r4, #232	; 0xe8
   12740:	e854 3f00 	ldrex	r3, [r4]
   12744:	f043 0002 	orr.w	r0, r3, #2
   12748:	e844 0c00 	strex	ip, r0, [r4]
   1274c:	f1bc 0f00 	cmp.w	ip, #0
   12750:	d1f6      	bne.n	12740 <bt_att_recv+0x50>
   12752:	f3bf 8f5b 	dmb	ish
   12756:	f013 0f02 	tst.w	r3, #2
   1275a:	e01f      	b.n	1279c <bt_att_recv+0xac>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1275c:	3301      	adds	r3, #1
   1275e:	2b0d      	cmp	r3, #13
   12760:	d1dc      	bne.n	1271c <bt_att_recv+0x2c>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   12762:	4608      	mov	r0, r1
   12764:	f017 ff9a 	bl	2a69c <att_op_get_type>
   12768:	b350      	cbz	r0, 127c0 <bt_att_recv+0xd0>
   1276a:	2805      	cmp	r0, #5
   1276c:	d028      	beq.n	127c0 <bt_att_recv+0xd0>
	if (!req) {
   1276e:	b339      	cbz	r1, 127c0 <bt_att_recv+0xd0>
   12770:	2306      	movs	r3, #6
   12772:	2200      	movs	r2, #0
   12774:	4630      	mov	r0, r6
   12776:	f018 fb21 	bl	2adbc <send_err_rsp.part.0>
   1277a:	e021      	b.n	127c0 <bt_att_recv+0xd0>
   1277c:	34e8      	adds	r4, #232	; 0xe8
   1277e:	f3bf 8f5b 	dmb	ish
   12782:	e854 3f00 	ldrex	r3, [r4]
   12786:	f043 0001 	orr.w	r0, r3, #1
   1278a:	e844 0c00 	strex	ip, r0, [r4]
   1278e:	f1bc 0f00 	cmp.w	ip, #0
   12792:	d1f6      	bne.n	12782 <bt_att_recv+0x92>
   12794:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   12798:	f013 0f01 	tst.w	r3, #1
   1279c:	d110      	bne.n	127c0 <bt_att_recv+0xd0>
	if (buf->len < handler->expect_len) {
   1279e:	440a      	add	r2, r1
   127a0:	89a9      	ldrh	r1, [r5, #12]
   127a2:	7853      	ldrb	r3, [r2, #1]
   127a4:	4299      	cmp	r1, r3
   127a6:	d30e      	bcc.n	127c6 <bt_att_recv+0xd6>
		err = handler->func(att_chan, buf);
   127a8:	6853      	ldr	r3, [r2, #4]
   127aa:	4629      	mov	r1, r5
   127ac:	4630      	mov	r0, r6
   127ae:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   127b0:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
   127b4:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   127b6:	d103      	bne.n	127c0 <bt_att_recv+0xd0>
   127b8:	b110      	cbz	r0, 127c0 <bt_att_recv+0xd0>
		send_err_rsp(att_chan, hdr->code, 0, err);
   127ba:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
   127bc:	2900      	cmp	r1, #0
   127be:	d1d8      	bne.n	12772 <bt_att_recv+0x82>
}
   127c0:	2000      	movs	r0, #0
   127c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (handler->type == ATT_REQUEST && err) {
   127c6:	f1b8 0f01 	cmp.w	r8, #1
   127ca:	d1f9      	bne.n	127c0 <bt_att_recv+0xd0>
		err = BT_ATT_ERR_INVALID_PDU;
   127cc:	2304      	movs	r3, #4
   127ce:	e7f4      	b.n	127ba <bt_att_recv+0xca>
   127d0:	0002f630 	.word	0x0002f630

000127d4 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   127d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   127d8:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   127da:	6803      	ldr	r3, [r0, #0]
   127dc:	460e      	mov	r6, r1
   127de:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   127e0:	b087      	sub	sp, #28
   127e2:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   127e4:	bf18      	it	ne
   127e6:	2101      	movne	r1, #1
   127e8:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   127ea:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   127ec:	f019 f8a3 	bl	2b936 <bt_gatt_change_aware>
   127f0:	2800      	cmp	r0, #0
   127f2:	d04a      	beq.n	1288a <att_write_rsp.constprop.0+0xb6>
	if (!handle) {
   127f4:	2f00      	cmp	r7, #0
   127f6:	d04a      	beq.n	1288e <att_write_rsp.constprop.0+0xba>
	(void)memset(&data, 0, sizeof(data));
   127f8:	2218      	movs	r2, #24
   127fa:	2100      	movs	r1, #0
   127fc:	4668      	mov	r0, sp
   127fe:	f016 fdad 	bl	2935c <memset>
	if (rsp) {
   12802:	f1b8 0f00 	cmp.w	r8, #0
   12806:	d122      	bne.n	1284e <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
   12808:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1280a:	4a22      	ldr	r2, [pc, #136]	; (12894 <att_write_rsp.constprop.0+0xc0>)
	data.conn = chan->att->conn;
   1280c:	681b      	ldr	r3, [r3, #0]
   1280e:	9300      	str	r3, [sp, #0]
	data.value = value;
   12810:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12812:	9303      	str	r3, [sp, #12]
	data.len = len;
   12814:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   12818:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1281c:	2301      	movs	r3, #1
   1281e:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
   12822:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12826:	466b      	mov	r3, sp
   12828:	4639      	mov	r1, r7
   1282a:	4638      	mov	r0, r7
	data.req = req;
   1282c:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
   12830:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12834:	f017 ff77 	bl	2a726 <bt_gatt_foreach_attr>
	if (data.err) {
   12838:	f89d 4014 	ldrb.w	r4, [sp, #20]
   1283c:	b1f4      	cbz	r4, 1287c <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
   1283e:	f1b8 0f00 	cmp.w	r8, #0
   12842:	d10e      	bne.n	12862 <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   12844:	2400      	movs	r4, #0
}
   12846:	4620      	mov	r0, r4
   12848:	b007      	add	sp, #28
   1284a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1284e:	2200      	movs	r2, #0
   12850:	4641      	mov	r1, r8
   12852:	4628      	mov	r0, r5
   12854:	f018 fa8d 	bl	2ad72 <bt_att_chan_create_pdu>
   12858:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1285a:	2800      	cmp	r0, #0
   1285c:	d1d4      	bne.n	12808 <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
   1285e:	240e      	movs	r4, #14
   12860:	e7f1      	b.n	12846 <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
   12862:	9801      	ldr	r0, [sp, #4]
   12864:	f010 fe18 	bl	23498 <net_buf_unref>
	if (!req) {
   12868:	2e00      	cmp	r6, #0
   1286a:	d0eb      	beq.n	12844 <att_write_rsp.constprop.0+0x70>
   1286c:	f89d 3014 	ldrb.w	r3, [sp, #20]
   12870:	463a      	mov	r2, r7
   12872:	4631      	mov	r1, r6
   12874:	4628      	mov	r0, r5
   12876:	f018 faa1 	bl	2adbc <send_err_rsp.part.0>
   1287a:	e7e3      	b.n	12844 <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
   1287c:	9901      	ldr	r1, [sp, #4]
   1287e:	2900      	cmp	r1, #0
   12880:	d0e0      	beq.n	12844 <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12882:	4628      	mov	r0, r5
   12884:	f7ff fe48 	bl	12518 <bt_att_chan_send_rsp.constprop.0>
   12888:	e7dd      	b.n	12846 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1288a:	2412      	movs	r4, #18
   1288c:	e7db      	b.n	12846 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
   1288e:	2401      	movs	r4, #1
   12890:	e7d9      	b.n	12846 <att_write_rsp.constprop.0+0x72>
   12892:	bf00      	nop
   12894:	0002a9bb 	.word	0x0002a9bb

00012898 <att_read_group_req>:
{
   12898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1289c:	898c      	ldrh	r4, [r1, #12]
   1289e:	3c04      	subs	r4, #4
   128a0:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   128a2:	2c02      	cmp	r4, #2
{
   128a4:	4605      	mov	r5, r0
   128a6:	b08c      	sub	sp, #48	; 0x30
   128a8:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   128aa:	d001      	beq.n	128b0 <att_read_group_req+0x18>
   128ac:	2c10      	cmp	r4, #16
   128ae:	d16e      	bne.n	1298e <att_read_group_req+0xf6>
   128b0:	2104      	movs	r1, #4
   128b2:	3008      	adds	r0, #8
   128b4:	f01a fdb4 	bl	2d420 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   128b8:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   128bc:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   128be:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   128c0:	1d01      	adds	r1, r0, #4
   128c2:	4622      	mov	r2, r4
   128c4:	4640      	mov	r0, r8
   128c6:	f016 fe44 	bl	29552 <bt_uuid_create>
   128ca:	2800      	cmp	r0, #0
   128cc:	d061      	beq.n	12992 <att_read_group_req+0xfa>
	if (!start || !end) {
   128ce:	2e00      	cmp	r6, #0
   128d0:	d03a      	beq.n	12948 <att_read_group_req+0xb0>
   128d2:	2400      	movs	r4, #0
   128d4:	2f00      	cmp	r7, #0
   128d6:	d036      	beq.n	12946 <att_read_group_req+0xae>
	if (start > end) {
   128d8:	42be      	cmp	r6, r7
   128da:	d835      	bhi.n	12948 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   128dc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   128e0:	a901      	add	r1, sp, #4
   128e2:	4640      	mov	r0, r8
   128e4:	f88d 4004 	strb.w	r4, [sp, #4]
   128e8:	f8ad 3006 	strh.w	r3, [sp, #6]
   128ec:	f016 fe03 	bl	294f6 <bt_uuid_cmp>
   128f0:	2800      	cmp	r0, #0
   128f2:	d134      	bne.n	1295e <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   128f4:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   128f6:	2214      	movs	r2, #20
   128f8:	2100      	movs	r1, #0
   128fa:	a807      	add	r0, sp, #28
   128fc:	f016 fd2e 	bl	2935c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   12900:	2201      	movs	r2, #1
   12902:	2111      	movs	r1, #17
   12904:	4620      	mov	r0, r4
   12906:	f018 fa9c 	bl	2ae42 <bt_att_create_pdu>
   1290a:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   1290c:	2800      	cmp	r0, #0
   1290e:	d040      	beq.n	12992 <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
   12910:	2101      	movs	r1, #1
   12912:	3008      	adds	r0, #8
	data.uuid = uuid;
   12914:	e9cd 5807 	strd	r5, r8, [sp, #28]
   12918:	f01a fd5b 	bl	2d3d2 <net_buf_simple_add>
	data.rsp->len = 0U;
   1291c:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   12920:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   12922:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   12924:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   12928:	4a1b      	ldr	r2, [pc, #108]	; (12998 <att_read_group_req+0x100>)
	data.group = NULL;
   1292a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1292e:	4639      	mov	r1, r7
   12930:	4630      	mov	r0, r6
   12932:	f017 fef8 	bl	2a726 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   12936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12938:	781c      	ldrb	r4, [r3, #0]
   1293a:	bb1c      	cbnz	r4, 12984 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   1293c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1293e:	f010 fdab 	bl	23498 <net_buf_unref>
	if (!req) {
   12942:	230a      	movs	r3, #10
   12944:	e018      	b.n	12978 <att_read_group_req+0xe0>
			*err = 0U;
   12946:	463e      	mov	r6, r7
	if (!req) {
   12948:	2301      	movs	r3, #1
   1294a:	4632      	mov	r2, r6
   1294c:	2110      	movs	r1, #16
   1294e:	4628      	mov	r0, r5
   12950:	f018 fa34 	bl	2adbc <send_err_rsp.part.0>
		return 0;
   12954:	2400      	movs	r4, #0
}
   12956:	4620      	mov	r0, r4
   12958:	b00c      	add	sp, #48	; 0x30
   1295a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   1295e:	f642 0301 	movw	r3, #10241	; 0x2801
   12962:	a907      	add	r1, sp, #28
   12964:	4640      	mov	r0, r8
   12966:	f88d 401c 	strb.w	r4, [sp, #28]
   1296a:	f8ad 301e 	strh.w	r3, [sp, #30]
   1296e:	f016 fdc2 	bl	294f6 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   12972:	2800      	cmp	r0, #0
   12974:	d0be      	beq.n	128f4 <att_read_group_req+0x5c>
	if (!req) {
   12976:	2310      	movs	r3, #16
   12978:	4632      	mov	r2, r6
   1297a:	2110      	movs	r1, #16
   1297c:	4628      	mov	r0, r5
   1297e:	f018 fa1d 	bl	2adbc <send_err_rsp.part.0>
		return 0;
   12982:	e7e8      	b.n	12956 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12984:	9909      	ldr	r1, [sp, #36]	; 0x24
   12986:	4628      	mov	r0, r5
   12988:	f7ff fdc6 	bl	12518 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   1298c:	e7e2      	b.n	12954 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   1298e:	2404      	movs	r4, #4
   12990:	e7e1      	b.n	12956 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   12992:	240e      	movs	r4, #14
   12994:	e7df      	b.n	12956 <att_read_group_req+0xbe>
   12996:	bf00      	nop
   12998:	0001239d 	.word	0x0001239d

0001299c <att_read_mult_req>:
{
   1299c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   129a0:	6886      	ldr	r6, [r0, #8]
{
   129a2:	b085      	sub	sp, #20
   129a4:	4604      	mov	r4, r0
   129a6:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   129a8:	4630      	mov	r0, r6
   129aa:	2101      	movs	r1, #1
   129ac:	f018 ffc3 	bl	2b936 <bt_gatt_change_aware>
   129b0:	b3b8      	cbz	r0, 12a22 <att_read_mult_req+0x86>
	(void)memset(&data, 0, sizeof(data));
   129b2:	2210      	movs	r2, #16
   129b4:	2100      	movs	r1, #0
   129b6:	4668      	mov	r0, sp
   129b8:	f016 fcd0 	bl	2935c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   129bc:	2200      	movs	r2, #0
   129be:	210f      	movs	r1, #15
   129c0:	4630      	mov	r0, r6
   129c2:	f018 fa3e 	bl	2ae42 <bt_att_create_pdu>
   129c6:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   129c8:	b368      	cbz	r0, 12a26 <att_read_mult_req+0x8a>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   129ca:	f8df 9060 	ldr.w	r9, [pc, #96]	; 12a2c <att_read_mult_req+0x90>
	data.chan = chan;
   129ce:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   129d0:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   129d4:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   129d8:	89ab      	ldrh	r3, [r5, #12]
   129da:	2b01      	cmp	r3, #1
   129dc:	d804      	bhi.n	129e8 <att_read_mult_req+0x4c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   129de:	9902      	ldr	r1, [sp, #8]
   129e0:	4620      	mov	r0, r4
   129e2:	f7ff fd99 	bl	12518 <bt_att_chan_send_rsp.constprop.0>
   129e6:	e018      	b.n	12a1a <att_read_mult_req+0x7e>
   129e8:	4638      	mov	r0, r7
   129ea:	f01a fd21 	bl	2d430 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   129ee:	466b      	mov	r3, sp
   129f0:	464a      	mov	r2, r9
   129f2:	4601      	mov	r1, r0
   129f4:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   129f6:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   129fa:	f017 fe94 	bl	2a726 <bt_gatt_foreach_attr>
		if (data.err) {
   129fe:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12a02:	2b00      	cmp	r3, #0
   12a04:	d0e8      	beq.n	129d8 <att_read_mult_req+0x3c>
			net_buf_unref(data.buf);
   12a06:	9802      	ldr	r0, [sp, #8]
   12a08:	f010 fd46 	bl	23498 <net_buf_unref>
	if (!req) {
   12a0c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12a10:	4632      	mov	r2, r6
   12a12:	210e      	movs	r1, #14
   12a14:	4620      	mov	r0, r4
   12a16:	f018 f9d1 	bl	2adbc <send_err_rsp.part.0>
	return 0;
   12a1a:	2000      	movs	r0, #0
}
   12a1c:	b005      	add	sp, #20
   12a1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   12a22:	2012      	movs	r0, #18
   12a24:	e7fa      	b.n	12a1c <att_read_mult_req+0x80>
		return BT_ATT_ERR_UNLIKELY;
   12a26:	200e      	movs	r0, #14
   12a28:	e7f8      	b.n	12a1c <att_read_mult_req+0x80>
   12a2a:	bf00      	nop
   12a2c:	0002ac0d 	.word	0x0002ac0d

00012a30 <att_read_rsp>:
{
   12a30:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   12a34:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   12a38:	4605      	mov	r5, r0
   12a3a:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   12a3c:	4640      	mov	r0, r8
   12a3e:	2101      	movs	r1, #1
{
   12a40:	4614      	mov	r4, r2
   12a42:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   12a44:	f018 ff77 	bl	2b936 <bt_gatt_change_aware>
   12a48:	b388      	cbz	r0, 12aae <att_read_rsp+0x7e>
	if (!handle) {
   12a4a:	b396      	cbz	r6, 12ab2 <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
   12a4c:	2210      	movs	r2, #16
   12a4e:	2100      	movs	r1, #0
   12a50:	4668      	mov	r0, sp
   12a52:	f016 fc83 	bl	2935c <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   12a56:	2200      	movs	r2, #0
   12a58:	4621      	mov	r1, r4
   12a5a:	4640      	mov	r0, r8
   12a5c:	f018 f9f1 	bl	2ae42 <bt_att_create_pdu>
   12a60:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   12a62:	b340      	cbz	r0, 12ab6 <att_read_rsp+0x86>
	data.offset = offset;
   12a64:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   12a68:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   12a6c:	2301      	movs	r3, #1
   12a6e:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12a72:	4a12      	ldr	r2, [pc, #72]	; (12abc <att_read_rsp+0x8c>)
	data.chan = chan;
   12a74:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12a76:	466b      	mov	r3, sp
   12a78:	4631      	mov	r1, r6
   12a7a:	4630      	mov	r0, r6
   12a7c:	f017 fe53 	bl	2a726 <bt_gatt_foreach_attr>
	if (data.err) {
   12a80:	f89d 400c 	ldrb.w	r4, [sp, #12]
   12a84:	b174      	cbz	r4, 12aa4 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   12a86:	9802      	ldr	r0, [sp, #8]
   12a88:	f010 fd06 	bl	23498 <net_buf_unref>
	if (!req) {
   12a8c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12a90:	4632      	mov	r2, r6
   12a92:	4639      	mov	r1, r7
   12a94:	4628      	mov	r0, r5
   12a96:	f018 f991 	bl	2adbc <send_err_rsp.part.0>
		return 0;
   12a9a:	2400      	movs	r4, #0
}
   12a9c:	4620      	mov	r0, r4
   12a9e:	b004      	add	sp, #16
   12aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12aa4:	9902      	ldr	r1, [sp, #8]
   12aa6:	4628      	mov	r0, r5
   12aa8:	f7ff fd36 	bl	12518 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   12aac:	e7f6      	b.n	12a9c <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   12aae:	2412      	movs	r4, #18
   12ab0:	e7f4      	b.n	12a9c <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   12ab2:	2401      	movs	r4, #1
   12ab4:	e7f2      	b.n	12a9c <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   12ab6:	240e      	movs	r4, #14
   12ab8:	e7f0      	b.n	12a9c <att_read_rsp+0x6c>
   12aba:	bf00      	nop
   12abc:	0002ac0d 	.word	0x0002ac0d

00012ac0 <att_read_type_req>:
{
   12ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   12ac4:	898c      	ldrh	r4, [r1, #12]
   12ac6:	3c04      	subs	r4, #4
   12ac8:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   12aca:	2c02      	cmp	r4, #2
{
   12acc:	4605      	mov	r5, r0
   12ace:	b08c      	sub	sp, #48	; 0x30
   12ad0:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   12ad2:	d001      	beq.n	12ad8 <att_read_type_req+0x18>
   12ad4:	2c10      	cmp	r4, #16
   12ad6:	d14f      	bne.n	12b78 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
   12ad8:	2104      	movs	r1, #4
   12ada:	3008      	adds	r0, #8
   12adc:	f01a fca0 	bl	2d420 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12ae0:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   12ae4:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   12ae6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12ae8:	1d01      	adds	r1, r0, #4
   12aea:	4622      	mov	r2, r4
   12aec:	4640      	mov	r0, r8
   12aee:	f016 fd30 	bl	29552 <bt_uuid_create>
   12af2:	b188      	cbz	r0, 12b18 <att_read_type_req+0x58>
	if (!start || !end) {
   12af4:	b19e      	cbz	r6, 12b1e <att_read_type_req+0x5e>
   12af6:	b18f      	cbz	r7, 12b1c <att_read_type_req+0x5c>
	if (start > end) {
   12af8:	42b7      	cmp	r7, r6
   12afa:	d310      	bcc.n	12b1e <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   12afc:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   12afe:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   12b00:	2100      	movs	r1, #0
   12b02:	eb0d 0002 	add.w	r0, sp, r2
   12b06:	f016 fc29 	bl	2935c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   12b0a:	2201      	movs	r2, #1
   12b0c:	2109      	movs	r1, #9
   12b0e:	4620      	mov	r0, r4
   12b10:	f018 f997 	bl	2ae42 <bt_att_create_pdu>
   12b14:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   12b16:	b968      	cbnz	r0, 12b34 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   12b18:	240e      	movs	r4, #14
   12b1a:	e007      	b.n	12b2c <att_read_type_req+0x6c>
			*err = 0U;
   12b1c:	463e      	mov	r6, r7
	if (!req) {
   12b1e:	2301      	movs	r3, #1
   12b20:	4632      	mov	r2, r6
   12b22:	2108      	movs	r1, #8
   12b24:	4628      	mov	r0, r5
   12b26:	f018 f949 	bl	2adbc <send_err_rsp.part.0>
		return 0;
   12b2a:	2400      	movs	r4, #0
}
   12b2c:	4620      	mov	r0, r4
   12b2e:	b00c      	add	sp, #48	; 0x30
   12b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   12b34:	2101      	movs	r1, #1
   12b36:	3008      	adds	r0, #8
	data.uuid = uuid;
   12b38:	e9cd 5806 	strd	r5, r8, [sp, #24]
   12b3c:	f01a fc49 	bl	2d3d2 <net_buf_simple_add>
	data.rsp->len = 0U;
   12b40:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12b44:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   12b46:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12b48:	4a0c      	ldr	r2, [pc, #48]	; (12b7c <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
   12b4a:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12b4e:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12b50:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12b54:	4630      	mov	r0, r6
   12b56:	ab06      	add	r3, sp, #24
   12b58:	f017 fde5 	bl	2a726 <bt_gatt_foreach_attr>
	if (data.err) {
   12b5c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   12b60:	b12c      	cbz	r4, 12b6e <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   12b62:	9808      	ldr	r0, [sp, #32]
   12b64:	f010 fc98 	bl	23498 <net_buf_unref>
	if (!req) {
   12b68:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   12b6c:	e7d8      	b.n	12b20 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12b6e:	9908      	ldr	r1, [sp, #32]
   12b70:	4628      	mov	r0, r5
   12b72:	f7ff fcd1 	bl	12518 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   12b76:	e7d9      	b.n	12b2c <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   12b78:	2404      	movs	r4, #4
   12b7a:	e7d7      	b.n	12b2c <att_read_type_req+0x6c>
   12b7c:	000125f1 	.word	0x000125f1

00012b80 <att_find_type_req>:
{
   12b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12b84:	4688      	mov	r8, r1
   12b86:	b086      	sub	sp, #24
   12b88:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   12b8a:	2106      	movs	r1, #6
   12b8c:	f108 0008 	add.w	r0, r8, #8
   12b90:	f01a fc46 	bl	2d420 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   12b94:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   12b96:	b317      	cbz	r7, 12bde <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   12b98:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   12b9c:	f1b9 0f00 	cmp.w	r9, #0
   12ba0:	d01c      	beq.n	12bdc <att_find_type_req+0x5c>
	if (start > end) {
   12ba2:	454f      	cmp	r7, r9
   12ba4:	d81b      	bhi.n	12bde <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   12ba6:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   12ba8:	f8ad 3002 	strh.w	r3, [sp, #2]
   12bac:	2400      	movs	r4, #0
   12bae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   12bb2:	a901      	add	r1, sp, #4
   12bb4:	4668      	mov	r0, sp
	value = buf->data;
   12bb6:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   12bba:	f88d 4000 	strb.w	r4, [sp]
   12bbe:	f88d 4004 	strb.w	r4, [sp, #4]
   12bc2:	f8ad 3006 	strh.w	r3, [sp, #6]
   12bc6:	f016 fc96 	bl	294f6 <bt_uuid_cmp>
   12bca:	4606      	mov	r6, r0
   12bcc:	b190      	cbz	r0, 12bf4 <att_find_type_req+0x74>
	if (!req) {
   12bce:	230a      	movs	r3, #10
   12bd0:	463a      	mov	r2, r7
   12bd2:	2106      	movs	r1, #6
   12bd4:	4628      	mov	r0, r5
   12bd6:	f018 f8f1 	bl	2adbc <send_err_rsp.part.0>
		return 0;
   12bda:	e007      	b.n	12bec <att_find_type_req+0x6c>
			*err = 0U;
   12bdc:	464f      	mov	r7, r9
	if (!req) {
   12bde:	2301      	movs	r3, #1
   12be0:	463a      	mov	r2, r7
   12be2:	2106      	movs	r1, #6
   12be4:	4628      	mov	r0, r5
   12be6:	f018 f8e9 	bl	2adbc <send_err_rsp.part.0>
		return 0;
   12bea:	2400      	movs	r4, #0
}
   12bec:	4620      	mov	r0, r4
   12bee:	b006      	add	sp, #24
   12bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   12bf4:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   12bf8:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   12bfc:	4601      	mov	r1, r0
   12bfe:	2214      	movs	r2, #20
   12c00:	a801      	add	r0, sp, #4
   12c02:	f016 fbab 	bl	2935c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   12c06:	4632      	mov	r2, r6
   12c08:	2107      	movs	r1, #7
   12c0a:	4640      	mov	r0, r8
   12c0c:	f018 f919 	bl	2ae42 <bt_att_create_pdu>
   12c10:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   12c12:	b1d8      	cbz	r0, 12c4c <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12c14:	230a      	movs	r3, #10
   12c16:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   12c1a:	4a0d      	ldr	r2, [pc, #52]	; (12c50 <att_find_type_req+0xd0>)
	data.value_len = value_len;
   12c1c:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   12c20:	ab01      	add	r3, sp, #4
   12c22:	4649      	mov	r1, r9
   12c24:	4638      	mov	r0, r7
	data.value = value;
   12c26:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   12c2a:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   12c2c:	f017 fd7b 	bl	2a726 <bt_gatt_foreach_attr>
	if (data.err) {
   12c30:	f89d 4015 	ldrb.w	r4, [sp, #21]
   12c34:	b12c      	cbz	r4, 12c42 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   12c36:	9802      	ldr	r0, [sp, #8]
   12c38:	f010 fc2e 	bl	23498 <net_buf_unref>
	if (!req) {
   12c3c:	f89d 3015 	ldrb.w	r3, [sp, #21]
   12c40:	e7ce      	b.n	12be0 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12c42:	9902      	ldr	r1, [sp, #8]
   12c44:	4628      	mov	r0, r5
   12c46:	f7ff fc67 	bl	12518 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   12c4a:	e7cf      	b.n	12bec <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   12c4c:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   12c4e:	e7cd      	b.n	12bec <att_find_type_req+0x6c>
   12c50:	0002a73d 	.word	0x0002a73d

00012c54 <att_find_info_req>:
{
   12c54:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   12c56:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   12c58:	881e      	ldrh	r6, [r3, #0]
{
   12c5a:	b085      	sub	sp, #20
   12c5c:	4605      	mov	r5, r0
	if (!start || !end) {
   12c5e:	b19e      	cbz	r6, 12c88 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   12c60:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   12c62:	b184      	cbz	r4, 12c86 <att_find_info_req+0x32>
	if (start > end) {
   12c64:	42b4      	cmp	r4, r6
   12c66:	d30f      	bcc.n	12c88 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   12c68:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   12c6a:	2210      	movs	r2, #16
   12c6c:	2100      	movs	r1, #0
   12c6e:	4668      	mov	r0, sp
   12c70:	f016 fb74 	bl	2935c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   12c74:	2200      	movs	r2, #0
   12c76:	2105      	movs	r1, #5
   12c78:	4638      	mov	r0, r7
   12c7a:	f018 f8e2 	bl	2ae42 <bt_att_create_pdu>
   12c7e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   12c80:	b958      	cbnz	r0, 12c9a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   12c82:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   12c84:	e007      	b.n	12c96 <att_find_info_req+0x42>
			*err = 0U;
   12c86:	4626      	mov	r6, r4
	if (!req) {
   12c88:	2301      	movs	r3, #1
   12c8a:	4632      	mov	r2, r6
   12c8c:	2104      	movs	r1, #4
   12c8e:	4628      	mov	r0, r5
   12c90:	f018 f894 	bl	2adbc <send_err_rsp.part.0>
	return 0;
   12c94:	2000      	movs	r0, #0
}
   12c96:	b005      	add	sp, #20
   12c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   12c9a:	4621      	mov	r1, r4
   12c9c:	4a08      	ldr	r2, [pc, #32]	; (12cc0 <att_find_info_req+0x6c>)
	data.chan = chan;
   12c9e:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   12ca0:	466b      	mov	r3, sp
   12ca2:	4630      	mov	r0, r6
   12ca4:	f017 fd3f 	bl	2a726 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   12ca8:	9c02      	ldr	r4, [sp, #8]
   12caa:	b924      	cbnz	r4, 12cb6 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   12cac:	9801      	ldr	r0, [sp, #4]
   12cae:	f010 fbf3 	bl	23498 <net_buf_unref>
	if (!req) {
   12cb2:	230a      	movs	r3, #10
   12cb4:	e7e9      	b.n	12c8a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12cb6:	9901      	ldr	r1, [sp, #4]
   12cb8:	4628      	mov	r0, r5
   12cba:	f7ff fc2d 	bl	12518 <bt_att_chan_send_rsp.constprop.0>
   12cbe:	e7e9      	b.n	12c94 <att_find_info_req+0x40>
   12cc0:	0002a865 	.word	0x0002a865

00012cc4 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   12cc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   12cc6:	2300      	movs	r3, #0
{
   12cc8:	4605      	mov	r5, r0
   12cca:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   12ccc:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   12cce:	f013 fd53 	bl	26778 <z_impl_z_current_get>

	if (k_current_get() == bt_recv_thread_id) {
   12cd2:	4b0b      	ldr	r3, [pc, #44]	; (12d00 <bt_att_req_alloc+0x3c>)
   12cd4:	681b      	ldr	r3, [r3, #0]
   12cd6:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   12cd8:	bf04      	itt	eq
   12cda:	2500      	moveq	r5, #0
   12cdc:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   12cde:	a901      	add	r1, sp, #4
   12ce0:	4808      	ldr	r0, [pc, #32]	; (12d04 <bt_att_req_alloc+0x40>)
   12ce2:	462a      	mov	r2, r5
   12ce4:	4623      	mov	r3, r4
   12ce6:	f012 fe55 	bl	25994 <k_mem_slab_alloc>
   12cea:	4601      	mov	r1, r0
   12cec:	b930      	cbnz	r0, 12cfc <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   12cee:	9801      	ldr	r0, [sp, #4]
   12cf0:	221c      	movs	r2, #28
   12cf2:	f016 fb33 	bl	2935c <memset>

	return req;
   12cf6:	9801      	ldr	r0, [sp, #4]
}
   12cf8:	b003      	add	sp, #12
   12cfa:	bd30      	pop	{r4, r5, pc}
		return NULL;
   12cfc:	2000      	movs	r0, #0
   12cfe:	e7fb      	b.n	12cf8 <bt_att_req_alloc+0x34>
   12d00:	2000165c 	.word	0x2000165c
   12d04:	20000928 	.word	0x20000928

00012d08 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   12d08:	b507      	push	{r0, r1, r2, lr}
   12d0a:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   12d0c:	6880      	ldr	r0, [r0, #8]
   12d0e:	b120      	cbz	r0, 12d1a <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   12d10:	f010 fbc2 	bl	23498 <net_buf_unref>
		req->buf = NULL;
   12d14:	9b01      	ldr	r3, [sp, #4]
   12d16:	2200      	movs	r2, #0
   12d18:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   12d1a:	4803      	ldr	r0, [pc, #12]	; (12d28 <bt_att_req_free+0x20>)
   12d1c:	a901      	add	r1, sp, #4
   12d1e:	f01b fc04 	bl	2e52a <k_mem_slab_free>
}
   12d22:	b003      	add	sp, #12
   12d24:	f85d fb04 	ldr.w	pc, [sp], #4
   12d28:	20000928 	.word	0x20000928

00012d2c <att_handle_rsp>:
{
   12d2c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   12d30:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   12d32:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
   12d36:	4688      	mov	r8, r1
   12d38:	4691      	mov	r9, r2
   12d3a:	461f      	mov	r7, r3
	k_work_cancel_delayable(&chan->timeout_work);
   12d3c:	f01b fdbe 	bl	2e8bc <k_work_cancel_delayable>
	if (!chan->req) {
   12d40:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   12d44:	2600      	movs	r6, #0
   12d46:	b1f0      	cbz	r0, 12d86 <att_handle_rsp+0x5a>
	if (chan->req == &cancel) {
   12d48:	4b10      	ldr	r3, [pc, #64]	; (12d8c <att_handle_rsp+0x60>)
   12d4a:	4298      	cmp	r0, r3
   12d4c:	d112      	bne.n	12d74 <att_handle_rsp+0x48>
		chan->req = NULL;
   12d4e:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
   12d52:	4635      	mov	r5, r6
	att_req_send_process(chan->att);
   12d54:	6820      	ldr	r0, [r4, #0]
   12d56:	f017 ffc0 	bl	2acda <att_req_send_process>
	if (func) {
   12d5a:	b13d      	cbz	r5, 12d6c <att_handle_rsp+0x40>
		func(chan->att->conn, err, pdu, len, params);
   12d5c:	6820      	ldr	r0, [r4, #0]
   12d5e:	f8cd a000 	str.w	sl, [sp]
   12d62:	6800      	ldr	r0, [r0, #0]
   12d64:	464b      	mov	r3, r9
   12d66:	4642      	mov	r2, r8
   12d68:	4639      	mov	r1, r7
   12d6a:	47a8      	blx	r5
}
   12d6c:	2000      	movs	r0, #0
   12d6e:	b002      	add	sp, #8
   12d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	func = chan->req->func;
   12d74:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   12d76:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
   12d78:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   12d7c:	f7ff ffc4 	bl	12d08 <bt_att_req_free>
	chan->req = NULL;
   12d80:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
   12d84:	e7e6      	b.n	12d54 <att_handle_rsp+0x28>
	bt_att_func_t func = NULL;
   12d86:	4605      	mov	r5, r0
   12d88:	e7e4      	b.n	12d54 <att_handle_rsp+0x28>
   12d8a:	bf00      	nop
   12d8c:	200016c8 	.word	0x200016c8

00012d90 <bt_att_disconnected>:
{
   12d90:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   12d92:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   12d96:	b085      	sub	sp, #20
   12d98:	4604      	mov	r4, r0
	if (!att_chan->att) {
   12d9a:	2d00      	cmp	r5, #0
   12d9c:	d04d      	beq.n	12e3a <bt_att_disconnected+0xaa>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   12d9e:	f500 719e 	add.w	r1, r0, #316	; 0x13c
   12da2:	f105 0024 	add.w	r0, r5, #36	; 0x24
   12da6:	f017 fefb 	bl	2aba0 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   12daa:	f1a4 0608 	sub.w	r6, r4, #8
   12dae:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
   12db2:	2200      	movs	r2, #0
   12db4:	2300      	movs	r3, #0
   12db6:	4638      	mov	r0, r7
   12db8:	f01a faae 	bl	2d318 <net_buf_get>
   12dbc:	4602      	mov	r2, r0
   12dbe:	bb18      	cbnz	r0, 12e08 <bt_att_disconnected+0x78>
	if (chan->req) {
   12dc0:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   12dc4:	b123      	cbz	r3, 12dd0 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   12dc6:	4601      	mov	r1, r0
   12dc8:	230e      	movs	r3, #14
   12dca:	4630      	mov	r0, r6
   12dcc:	f7ff ffae 	bl	12d2c <att_handle_rsp>
	chan->att = NULL;
   12dd0:	2300      	movs	r3, #0
   12dd2:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   12dd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   12dd8:	2b00      	cmp	r3, #0
   12dda:	d12e      	bne.n	12e3a <bt_att_disconnected+0xaa>
	att_reset(att);
   12ddc:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   12dde:	9803      	ldr	r0, [sp, #12]
   12de0:	2200      	movs	r2, #0
   12de2:	2300      	movs	r3, #0
   12de4:	300c      	adds	r0, #12
   12de6:	f01a fa97 	bl	2d318 <net_buf_get>
   12dea:	b980      	cbnz	r0, 12e0e <bt_att_disconnected+0x7e>
	while (!sys_slist_is_empty(&att->reqs)) {
   12dec:	9803      	ldr	r0, [sp, #12]
	return list->head;
   12dee:	6845      	ldr	r5, [r0, #4]
   12df0:	b985      	cbnz	r5, 12e14 <bt_att_disconnected+0x84>
	att->conn = NULL;
   12df2:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   12df4:	a903      	add	r1, sp, #12
   12df6:	4812      	ldr	r0, [pc, #72]	; (12e40 <bt_att_disconnected+0xb0>)
   12df8:	f01b fb97 	bl	2e52a <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   12dfc:	6820      	ldr	r0, [r4, #0]
}
   12dfe:	b005      	add	sp, #20
   12e00:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
   12e04:	f001 b82a 	b.w	13e5c <bt_gatt_disconnected>
		net_buf_unref(buf);
   12e08:	f010 fb46 	bl	23498 <net_buf_unref>
   12e0c:	e7d1      	b.n	12db2 <bt_att_disconnected+0x22>
		net_buf_unref(buf);
   12e0e:	f010 fb43 	bl	23498 <net_buf_unref>
   12e12:	e7e4      	b.n	12dde <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12e14:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
   12e16:	686e      	ldr	r6, [r5, #4]
	return node->next;
   12e18:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   12e1a:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12e1c:	4295      	cmp	r5, r2
	list->tail = node;
   12e1e:	bf08      	it	eq
   12e20:	6083      	streq	r3, [r0, #8]
   12e22:	b136      	cbz	r6, 12e32 <bt_att_disconnected+0xa2>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   12e24:	69ab      	ldr	r3, [r5, #24]
   12e26:	9300      	str	r3, [sp, #0]
   12e28:	2300      	movs	r3, #0
   12e2a:	6800      	ldr	r0, [r0, #0]
   12e2c:	461a      	mov	r2, r3
   12e2e:	210e      	movs	r1, #14
   12e30:	47b0      	blx	r6
		bt_att_req_free(req);
   12e32:	4628      	mov	r0, r5
   12e34:	f7ff ff68 	bl	12d08 <bt_att_req_free>
   12e38:	e7d8      	b.n	12dec <bt_att_disconnected+0x5c>
}
   12e3a:	b005      	add	sp, #20
   12e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12e3e:	bf00      	nop
   12e40:	200008f0 	.word	0x200008f0

00012e44 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   12e44:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   12e46:	4904      	ldr	r1, [pc, #16]	; (12e58 <db_hash_set+0x14>)
{
   12e48:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   12e4a:	4618      	mov	r0, r3
   12e4c:	2210      	movs	r2, #16
   12e4e:	47a0      	blx	r4

	BT_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash),
		       "Stored Hash: ");

	return 0;
}
   12e50:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   12e54:	bd10      	pop	{r4, pc}
   12e56:	bf00      	nop
   12e58:	20000dc0 	.word	0x20000dc0

00012e5c <find_cf_cfg>:
{
   12e5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12e5e:	4d0f      	ldr	r5, [pc, #60]	; (12e9c <find_cf_cfg+0x40>)
   12e60:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   12e62:	2700      	movs	r7, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   12e64:	462e      	mov	r6, r5
		if (!conn) {
   12e66:	1c68      	adds	r0, r5, #1
   12e68:	b964      	cbnz	r4, 12e84 <find_cf_cfg+0x28>
	return memcmp(a, b, sizeof(*a));
   12e6a:	2207      	movs	r2, #7
   12e6c:	4669      	mov	r1, sp
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   12e6e:	9400      	str	r4, [sp, #0]
   12e70:	f8cd 4003 	str.w	r4, [sp, #3]
   12e74:	f016 fa56 	bl	29324 <memcmp>
   12e78:	b958      	cbnz	r0, 12e92 <find_cf_cfg+0x36>
}
   12e7a:	4630      	mov	r0, r6
   12e7c:	b003      	add	sp, #12
   12e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12e80:	2701      	movs	r7, #1
   12e82:	e7ef      	b.n	12e64 <find_cf_cfg+0x8>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   12e84:	4602      	mov	r2, r0
   12e86:	7829      	ldrb	r1, [r5, #0]
   12e88:	4620      	mov	r0, r4
   12e8a:	f017 fa8e 	bl	2a3aa <bt_conn_is_peer_addr_le>
   12e8e:	2800      	cmp	r0, #0
   12e90:	d1f3      	bne.n	12e7a <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   12e92:	3510      	adds	r5, #16
   12e94:	2f00      	cmp	r7, #0
   12e96:	d0f3      	beq.n	12e80 <find_cf_cfg+0x24>
	return NULL;
   12e98:	2600      	movs	r6, #0
   12e9a:	e7ee      	b.n	12e7a <find_cf_cfg+0x1e>
   12e9c:	200016ec 	.word	0x200016ec

00012ea0 <sc_store>:
{
   12ea0:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   12ea2:	4605      	mov	r5, r0
{
   12ea4:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   12ea6:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   12eaa:	4604      	mov	r4, r0
	if (cfg->id) {
   12eac:	b19a      	cbz	r2, 12ed6 <sc_store+0x36>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   12eae:	ae02      	add	r6, sp, #8
   12eb0:	2104      	movs	r1, #4
   12eb2:	4630      	mov	r0, r6
   12eb4:	f013 ff75 	bl	26da2 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   12eb8:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   12eba:	462b      	mov	r3, r5
   12ebc:	a803      	add	r0, sp, #12
   12ebe:	4a07      	ldr	r2, [pc, #28]	; (12edc <sc_store+0x3c>)
   12ec0:	2124      	movs	r1, #36	; 0x24
   12ec2:	f7fd f89f 	bl	10004 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   12ec6:	2204      	movs	r2, #4
   12ec8:	f104 0108 	add.w	r1, r4, #8
   12ecc:	a803      	add	r0, sp, #12
   12ece:	f7fb fe49 	bl	eb64 <settings_save_one>
}
   12ed2:	b00c      	add	sp, #48	; 0x30
   12ed4:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   12ed6:	9200      	str	r2, [sp, #0]
   12ed8:	e7ef      	b.n	12eba <sc_store+0x1a>
   12eda:	bf00      	nop
   12edc:	00030c80 	.word	0x00030c80

00012ee0 <db_hash_commit>:

static int db_hash_commit(void)
{
   12ee0:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12ee2:	2108      	movs	r1, #8
   12ee4:	4804      	ldr	r0, [pc, #16]	; (12ef8 <db_hash_commit+0x18>)
   12ee6:	f018 f963 	bl	2b1b0 <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	k_work_reschedule(&db_hash.work, K_NO_WAIT);
   12eea:	2200      	movs	r2, #0
   12eec:	2300      	movs	r3, #0
   12eee:	4803      	ldr	r0, [pc, #12]	; (12efc <db_hash_commit+0x1c>)
   12ef0:	f013 f94a 	bl	26188 <k_work_reschedule>

	return 0;
}
   12ef4:	2000      	movs	r0, #0
   12ef6:	bd08      	pop	{r3, pc}
   12ef8:	20000eb0 	.word	0x20000eb0
   12efc:	20000dd0 	.word	0x20000dd0

00012f00 <bt_gatt_service_init.part.0>:
static void bt_gatt_service_init(void)
   12f00:	4908      	ldr	r1, [pc, #32]	; (12f24 <bt_gatt_service_init.part.0+0x24>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   12f02:	4a09      	ldr	r2, [pc, #36]	; (12f28 <bt_gatt_service_init.part.0+0x28>)
   12f04:	880b      	ldrh	r3, [r1, #0]
static void bt_gatt_service_init(void)
   12f06:	b510      	push	{r4, lr}
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   12f08:	4c08      	ldr	r4, [pc, #32]	; (12f2c <bt_gatt_service_init.part.0+0x2c>)
   12f0a:	2000      	movs	r0, #0
   12f0c:	42a2      	cmp	r2, r4
   12f0e:	d302      	bcc.n	12f16 <bt_gatt_service_init.part.0+0x16>
   12f10:	b100      	cbz	r0, 12f14 <bt_gatt_service_init.part.0+0x14>
   12f12:	800b      	strh	r3, [r1, #0]
}
   12f14:	bd10      	pop	{r4, pc}
		last_static_handle += svc->attr_count;
   12f16:	6850      	ldr	r0, [r2, #4]
   12f18:	4403      	add	r3, r0
   12f1a:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   12f1c:	3208      	adds	r2, #8
   12f1e:	2001      	movs	r0, #1
   12f20:	e7f4      	b.n	12f0c <bt_gatt_service_init.part.0+0xc>
   12f22:	bf00      	nop
   12f24:	20002cb6 	.word	0x20002cb6
   12f28:	0002f19c 	.word	0x0002f19c
   12f2c:	0002f1ac 	.word	0x0002f1ac

00012f30 <gatt_ccc_conn_enqueue>:
{
   12f30:	b570      	push	{r4, r5, r6, lr}
   12f32:	4604      	mov	r4, r0
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   12f34:	f7fe feac 	bl	11c90 <bt_conn_index>
   12f38:	4d0e      	ldr	r5, [pc, #56]	; (12f74 <gatt_ccc_conn_enqueue+0x44>)
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   12f3a:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
   12f3e:	429c      	cmp	r4, r3
   12f40:	d017      	beq.n	12f72 <gatt_ccc_conn_enqueue+0x42>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   12f42:	7a20      	ldrb	r0, [r4, #8]
   12f44:	f104 0188 	add.w	r1, r4, #136	; 0x88
   12f48:	f016 fe76 	bl	29c38 <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   12f4c:	b188      	cbz	r0, 12f72 <gatt_ccc_conn_enqueue+0x42>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   12f4e:	4620      	mov	r0, r4
   12f50:	f7fe fe9e 	bl	11c90 <bt_conn_index>
   12f54:	4606      	mov	r6, r0
			bt_conn_ref(conn);
   12f56:	4620      	mov	r0, r4
   12f58:	f017 f971 	bl	2a23e <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   12f5c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   12f60:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   12f64:	2300      	movs	r3, #0
   12f66:	f105 0008 	add.w	r0, r5, #8
}
   12f6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   12f6e:	f013 b90b 	b.w	26188 <k_work_reschedule>
}
   12f72:	bd70      	pop	{r4, r5, r6, pc}
   12f74:	20000e28 	.word	0x20000e28

00012f78 <sc_indicate>:
{
   12f78:	b570      	push	{r4, r5, r6, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   12f7a:	4c12      	ldr	r4, [pc, #72]	; (12fc4 <sc_indicate+0x4c>)
   12f7c:	4606      	mov	r6, r0
   12f7e:	460d      	mov	r5, r1
   12f80:	f104 0050 	add.w	r0, r4, #80	; 0x50
   12f84:	2101      	movs	r1, #1
   12f86:	f018 f913 	bl	2b1b0 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   12f8a:	07c2      	lsls	r2, r0, #31
   12f8c:	d40e      	bmi.n	12fac <sc_indicate+0x34>
		gatt_sc.start = start;
   12f8e:	8326      	strh	r6, [r4, #24]
		*end = new_end;
   12f90:	8365      	strh	r5, [r4, #26]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   12f92:	480d      	ldr	r0, [pc, #52]	; (12fc8 <sc_indicate+0x50>)
   12f94:	f018 f8b1 	bl	2b0fa <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   12f98:	0783      	lsls	r3, r0, #30
   12f9a:	d40d      	bmi.n	12fb8 <sc_indicate+0x40>
}
   12f9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&gatt_sc.work, timeout);
   12fa0:	480a      	ldr	r0, [pc, #40]	; (12fcc <sc_indicate+0x54>)
   12fa2:	f44f 72a4 	mov.w	r2, #328	; 0x148
   12fa6:	2300      	movs	r3, #0
   12fa8:	f013 b8ee 	b.w	26188 <k_work_reschedule>
	if (new_start >= *start && new_end <= *end) {
   12fac:	8b22      	ldrh	r2, [r4, #24]
   12fae:	8b63      	ldrh	r3, [r4, #26]
   12fb0:	42b2      	cmp	r2, r6
   12fb2:	d802      	bhi.n	12fba <sc_indicate+0x42>
   12fb4:	42ab      	cmp	r3, r5
   12fb6:	d3eb      	bcc.n	12f90 <sc_indicate+0x18>
}
   12fb8:	bd70      	pop	{r4, r5, r6, pc}
	if (*end < new_end) {
   12fba:	42ab      	cmp	r3, r5
		*start = new_start;
   12fbc:	8326      	strh	r6, [r4, #24]
	if (*end < new_end) {
   12fbe:	d2e8      	bcs.n	12f92 <sc_indicate+0x1a>
   12fc0:	e7e6      	b.n	12f90 <sc_indicate+0x18>
   12fc2:	bf00      	nop
   12fc4:	20000e60 	.word	0x20000e60
   12fc8:	20000eb0 	.word	0x20000eb0
   12fcc:	20000e80 	.word	0x20000e80

00012fd0 <sc_commit>:
{
   12fd0:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12fd2:	4809      	ldr	r0, [pc, #36]	; (12ff8 <sc_commit+0x28>)
   12fd4:	f06f 0102 	mvn.w	r1, #2
   12fd8:	f018 f950 	bl	2b27c <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   12fdc:	4806      	ldr	r0, [pc, #24]	; (12ff8 <sc_commit+0x28>)
   12fde:	f018 f88c 	bl	2b0fa <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   12fe2:	07c3      	lsls	r3, r0, #31
   12fe4:	d505      	bpl.n	12ff2 <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   12fe6:	4805      	ldr	r0, [pc, #20]	; (12ffc <sc_commit+0x2c>)
   12fe8:	f44f 72a4 	mov.w	r2, #328	; 0x148
   12fec:	2300      	movs	r3, #0
   12fee:	f013 f8cb 	bl	26188 <k_work_reschedule>
}
   12ff2:	2000      	movs	r0, #0
   12ff4:	bd08      	pop	{r3, pc}
   12ff6:	bf00      	nop
   12ff8:	20000eb0 	.word	0x20000eb0
   12ffc:	20000e80 	.word	0x20000e80

00013000 <db_changed>:
{
   13000:	b513      	push	{r0, r1, r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13002:	f06f 0104 	mvn.w	r1, #4
   13006:	481f      	ldr	r0, [pc, #124]	; (13084 <db_changed+0x84>)
   13008:	4c1f      	ldr	r4, [pc, #124]	; (13088 <db_changed+0x88>)
   1300a:	f018 f937 	bl	2b27c <atomic_and>
	k_work_reschedule(&db_hash.work, DB_HASH_TIMEOUT);
   1300e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13012:	2300      	movs	r3, #0
   13014:	481d      	ldr	r0, [pc, #116]	; (1308c <db_changed+0x8c>)
   13016:	f013 f8b7 	bl	26188 <k_work_reschedule>
		if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1301a:	2300      	movs	r3, #0
   1301c:	2207      	movs	r2, #7
   1301e:	4669      	mov	r1, sp
   13020:	1c60      	adds	r0, r4, #1
   13022:	9300      	str	r3, [sp, #0]
   13024:	f8cd 3003 	str.w	r3, [sp, #3]
   13028:	f016 f97c 	bl	29324 <memcmp>
   1302c:	b170      	cbz	r0, 1304c <db_changed+0x4c>
		if (CF_ROBUST_CACHING(cfg)) {
   1302e:	7a23      	ldrb	r3, [r4, #8]
   13030:	07da      	lsls	r2, r3, #31
   13032:	d50b      	bpl.n	1304c <db_changed+0x4c>
   13034:	f06f 0102 	mvn.w	r1, #2
   13038:	f104 000c 	add.w	r0, r4, #12
   1303c:	f018 f91e 	bl	2b27c <atomic_and>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13040:	f06f 0101 	mvn.w	r1, #1
   13044:	f104 000c 	add.w	r0, r4, #12
   13048:	f018 f918 	bl	2b27c <atomic_and>
		if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1304c:	2300      	movs	r3, #0
   1304e:	4810      	ldr	r0, [pc, #64]	; (13090 <db_changed+0x90>)
   13050:	9300      	str	r3, [sp, #0]
   13052:	2207      	movs	r2, #7
   13054:	4669      	mov	r1, sp
   13056:	f8cd 3003 	str.w	r3, [sp, #3]
   1305a:	f016 f963 	bl	29324 <memcmp>
   1305e:	b178      	cbz	r0, 13080 <db_changed+0x80>
		if (CF_ROBUST_CACHING(cfg)) {
   13060:	7e23      	ldrb	r3, [r4, #24]
   13062:	07db      	lsls	r3, r3, #31
   13064:	d50c      	bpl.n	13080 <db_changed+0x80>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13066:	f06f 0102 	mvn.w	r1, #2
   1306a:	480a      	ldr	r0, [pc, #40]	; (13094 <db_changed+0x94>)
   1306c:	f018 f906 	bl	2b27c <atomic_and>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13070:	4808      	ldr	r0, [pc, #32]	; (13094 <db_changed+0x94>)
   13072:	f06f 0101 	mvn.w	r1, #1
}
   13076:	b002      	add	sp, #8
   13078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1307c:	f018 b8fe 	b.w	2b27c <atomic_and>
   13080:	b002      	add	sp, #8
   13082:	bd10      	pop	{r4, pc}
   13084:	20000eb0 	.word	0x20000eb0
   13088:	200016ec 	.word	0x200016ec
   1308c:	20000dd0 	.word	0x20000dd0
   13090:	200016fd 	.word	0x200016fd
   13094:	20001708 	.word	0x20001708

00013098 <find_cf_cfg_by_addr>:
{
   13098:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
   1309a:	4c0e      	ldr	r4, [pc, #56]	; (130d4 <find_cf_cfg_by_addr+0x3c>)
   1309c:	7823      	ldrb	r3, [r4, #0]
   1309e:	4283      	cmp	r3, r0
{
   130a0:	4606      	mov	r6, r0
   130a2:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   130a4:	d00a      	beq.n	130bc <find_cf_cfg_by_addr+0x24>
   130a6:	7c23      	ldrb	r3, [r4, #16]
   130a8:	42b3      	cmp	r3, r6
   130aa:	d111      	bne.n	130d0 <find_cf_cfg_by_addr+0x38>
   130ac:	490a      	ldr	r1, [pc, #40]	; (130d8 <find_cf_cfg_by_addr+0x40>)
   130ae:	2207      	movs	r2, #7
   130b0:	4628      	mov	r0, r5
   130b2:	f016 f937 	bl	29324 <memcmp>
   130b6:	b958      	cbnz	r0, 130d0 <find_cf_cfg_by_addr+0x38>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   130b8:	2001      	movs	r0, #1
   130ba:	e006      	b.n	130ca <find_cf_cfg_by_addr+0x32>
   130bc:	2207      	movs	r2, #7
   130be:	1c61      	adds	r1, r4, #1
   130c0:	4628      	mov	r0, r5
   130c2:	f016 f92f 	bl	29324 <memcmp>
			if (id == cf_cfg[i].id &&
   130c6:	2800      	cmp	r0, #0
   130c8:	d1ed      	bne.n	130a6 <find_cf_cfg_by_addr+0xe>
				return &cf_cfg[i];
   130ca:	eb04 1000 	add.w	r0, r4, r0, lsl #4
   130ce:	e000      	b.n	130d2 <find_cf_cfg_by_addr+0x3a>
	return NULL;
   130d0:	2000      	movs	r0, #0
}
   130d2:	bd70      	pop	{r4, r5, r6, pc}
   130d4:	200016ec 	.word	0x200016ec
   130d8:	200016fd 	.word	0x200016fd

000130dc <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   130dc:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   130de:	6881      	ldr	r1, [r0, #8]
{
   130e0:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   130e2:	4a07      	ldr	r2, [pc, #28]	; (13100 <remove_peer_from_attr+0x24>)
   130e4:	4291      	cmp	r1, r2
   130e6:	d109      	bne.n	130fc <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   130e8:	791a      	ldrb	r2, [r3, #4]
   130ea:	6819      	ldr	r1, [r3, #0]
   130ec:	68c0      	ldr	r0, [r0, #12]
   130ee:	f018 fa03 	bl	2b4f8 <ccc_find_cfg>
	if (cfg) {
   130f2:	b118      	cbz	r0, 130fc <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   130f4:	220a      	movs	r2, #10
   130f6:	2100      	movs	r1, #0
   130f8:	f016 f930 	bl	2935c <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   130fc:	2001      	movs	r0, #1
   130fe:	bd08      	pop	{r3, pc}
   13100:	0002b54b 	.word	0x0002b54b

00013104 <ccc_load>:
{
   13104:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   13106:	4b21      	ldr	r3, [pc, #132]	; (1318c <ccc_load+0x88>)
{
   13108:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1310a:	6882      	ldr	r2, [r0, #8]
   1310c:	429a      	cmp	r2, r3
   1310e:	d002      	beq.n	13116 <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   13110:	2001      	movs	r0, #1
}
   13112:	b002      	add	sp, #8
   13114:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   13116:	68a3      	ldr	r3, [r4, #8]
   13118:	68c6      	ldr	r6, [r0, #12]
   1311a:	b94b      	cbnz	r3, 13130 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   1311c:	7922      	ldrb	r2, [r4, #4]
   1311e:	6821      	ldr	r1, [r4, #0]
   13120:	4630      	mov	r0, r6
   13122:	f018 f9e9 	bl	2b4f8 <ccc_find_cfg>
	if (!cfg) {
   13126:	2800      	cmp	r0, #0
   13128:	d0f2      	beq.n	13110 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   1312a:	f018 f899 	bl	2b260 <clear_ccc_cfg>
   1312e:	e7ef      	b.n	13110 <ccc_load+0xc>
	} else if (!load->count) {
   13130:	68e0      	ldr	r0, [r4, #12]
   13132:	2800      	cmp	r0, #0
   13134:	d0ed      	beq.n	13112 <ccc_load+0xe>
	if (load->entry->handle != handle) {
   13136:	881b      	ldrh	r3, [r3, #0]
   13138:	4299      	cmp	r1, r3
   1313a:	d00a      	beq.n	13152 <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   1313c:	d9e8      	bls.n	13110 <ccc_load+0xc>
	load->count--;
   1313e:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   13140:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   13142:	3801      	subs	r0, #1
	load->entry++;
   13144:	3304      	adds	r3, #4
	load->count--;
   13146:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   13148:	3800      	subs	r0, #0
	load->entry++;
   1314a:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1314c:	bf18      	it	ne
   1314e:	2001      	movne	r0, #1
   13150:	e7df      	b.n	13112 <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   13152:	7922      	ldrb	r2, [r4, #4]
   13154:	6821      	ldr	r1, [r4, #0]
   13156:	4630      	mov	r0, r6
   13158:	f018 f9ce 	bl	2b4f8 <ccc_find_cfg>
	if (!cfg) {
   1315c:	4605      	mov	r5, r0
   1315e:	b980      	cbnz	r0, 13182 <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   13160:	9000      	str	r0, [sp, #0]
   13162:	4602      	mov	r2, r0
   13164:	f8cd 0003 	str.w	r0, [sp, #3]
   13168:	4669      	mov	r1, sp
   1316a:	4630      	mov	r0, r6
   1316c:	f018 f9c4 	bl	2b4f8 <ccc_find_cfg>
		if (!cfg) {
   13170:	4605      	mov	r5, r0
   13172:	2800      	cmp	r0, #0
   13174:	d0e3      	beq.n	1313e <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   13176:	6821      	ldr	r1, [r4, #0]
   13178:	3001      	adds	r0, #1
   1317a:	f018 f828 	bl	2b1ce <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   1317e:	7923      	ldrb	r3, [r4, #4]
   13180:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   13182:	68a3      	ldr	r3, [r4, #8]
   13184:	885b      	ldrh	r3, [r3, #2]
   13186:	812b      	strh	r3, [r5, #8]
   13188:	e7d9      	b.n	1313e <ccc_load+0x3a>
   1318a:	bf00      	nop
   1318c:	0002b54b 	.word	0x0002b54b

00013190 <ccc_save>:
{
   13190:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   13192:	4b0c      	ldr	r3, [pc, #48]	; (131c4 <ccc_save+0x34>)
{
   13194:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13196:	6882      	ldr	r2, [r0, #8]
   13198:	429a      	cmp	r2, r3
{
   1319a:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   1319c:	d10f      	bne.n	131be <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   1319e:	7922      	ldrb	r2, [r4, #4]
   131a0:	6821      	ldr	r1, [r4, #0]
   131a2:	68c0      	ldr	r0, [r0, #12]
   131a4:	f018 f9a8 	bl	2b4f8 <ccc_find_cfg>
	if (!cfg) {
   131a8:	b148      	cbz	r0, 131be <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   131aa:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   131ae:	8901      	ldrh	r1, [r0, #8]
   131b0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   131b4:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   131b6:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   131b8:	8151      	strh	r1, [r2, #10]
	save->count++;
   131ba:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   131be:	2001      	movs	r0, #1
   131c0:	bd38      	pop	{r3, r4, r5, pc}
   131c2:	bf00      	nop
   131c4:	0002b54b 	.word	0x0002b54b

000131c8 <find_sc_cfg>:
{
   131c8:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   131ca:	4c0e      	ldr	r4, [pc, #56]	; (13204 <find_sc_cfg+0x3c>)
   131cc:	7823      	ldrb	r3, [r4, #0]
   131ce:	4283      	cmp	r3, r0
{
   131d0:	4605      	mov	r5, r0
   131d2:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   131d4:	d00a      	beq.n	131ec <find_sc_cfg+0x24>
   131d6:	7b23      	ldrb	r3, [r4, #12]
   131d8:	42ab      	cmp	r3, r5
   131da:	d111      	bne.n	13200 <find_sc_cfg+0x38>
   131dc:	480a      	ldr	r0, [pc, #40]	; (13208 <find_sc_cfg+0x40>)
   131de:	2207      	movs	r2, #7
   131e0:	4631      	mov	r1, r6
   131e2:	f016 f89f 	bl	29324 <memcmp>
   131e6:	b958      	cbnz	r0, 13200 <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   131e8:	2001      	movs	r0, #1
   131ea:	e005      	b.n	131f8 <find_sc_cfg+0x30>
   131ec:	2207      	movs	r2, #7
   131ee:	1c60      	adds	r0, r4, #1
   131f0:	f016 f898 	bl	29324 <memcmp>
		if (id == sc_cfg[i].id &&
   131f4:	2800      	cmp	r0, #0
   131f6:	d1ee      	bne.n	131d6 <find_sc_cfg+0xe>
			return &sc_cfg[i];
   131f8:	230c      	movs	r3, #12
   131fa:	fb03 4000 	mla	r0, r3, r0, r4
   131fe:	e000      	b.n	13202 <find_sc_cfg+0x3a>
	return NULL;
   13200:	2000      	movs	r0, #0
}
   13202:	bd70      	pop	{r4, r5, r6, pc}
   13204:	20002cb8 	.word	0x20002cb8
   13208:	20002cc5 	.word	0x20002cc5

0001320c <bt_gatt_clear_sc>:
{
   1320c:	b570      	push	{r4, r5, r6, lr}
   1320e:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   13210:	f7ff ffda 	bl	131c8 <find_sc_cfg>
	if (!cfg) {
   13214:	4604      	mov	r4, r0
   13216:	b1b8      	cbz	r0, 13248 <bt_gatt_clear_sc+0x3c>
		if (cfg->id) {
   13218:	4605      	mov	r5, r0
   1321a:	f815 2b01 	ldrb.w	r2, [r5], #1
   1321e:	b1b2      	cbz	r2, 1324e <bt_gatt_clear_sc+0x42>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   13220:	ae02      	add	r6, sp, #8
   13222:	2104      	movs	r1, #4
   13224:	4630      	mov	r0, r6
   13226:	f013 fdbc 	bl	26da2 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   1322a:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   1322c:	4a09      	ldr	r2, [pc, #36]	; (13254 <bt_gatt_clear_sc+0x48>)
   1322e:	2124      	movs	r1, #36	; 0x24
   13230:	462b      	mov	r3, r5
   13232:	a803      	add	r0, sp, #12
   13234:	f7fc fee6 	bl	10004 <bt_settings_encode_key>
		err = settings_delete(key);
   13238:	a803      	add	r0, sp, #12
   1323a:	f014 fd82 	bl	27d42 <settings_delete>
	memset(cfg, 0, sizeof(*cfg));
   1323e:	220c      	movs	r2, #12
   13240:	2100      	movs	r1, #0
   13242:	4620      	mov	r0, r4
   13244:	f016 f88a 	bl	2935c <memset>
}
   13248:	2000      	movs	r0, #0
   1324a:	b00c      	add	sp, #48	; 0x30
   1324c:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   1324e:	9200      	str	r2, [sp, #0]
   13250:	e7ec      	b.n	1322c <bt_gatt_clear_sc+0x20>
   13252:	bf00      	nop
   13254:	00030c80 	.word	0x00030c80

00013258 <disconnected_cb>:
{
   13258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1325c:	4b1f      	ldr	r3, [pc, #124]	; (132dc <disconnected_cb+0x84>)
{
   1325e:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13260:	6882      	ldr	r2, [r0, #8]
   13262:	429a      	cmp	r2, r3
{
   13264:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   13266:	d102      	bne.n	1326e <disconnected_cb+0x16>
	ccc = attr->user_data;
   13268:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   1326a:	8963      	ldrh	r3, [r4, #10]
   1326c:	b9c3      	cbnz	r3, 132a0 <disconnected_cb+0x48>
}
   1326e:	2001      	movs	r0, #1
   13270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13274:	f105 0888 	add.w	r8, r5, #136	; 0x88
   13278:	7a28      	ldrb	r0, [r5, #8]
   1327a:	4641      	mov	r1, r8
   1327c:	f016 fcdc 	bl	29c38 <bt_addr_le_is_bonded>
   13280:	b948      	cbnz	r0, 13296 <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
   13282:	4b17      	ldr	r3, [pc, #92]	; (132e0 <disconnected_cb+0x88>)
   13284:	429c      	cmp	r4, r3
   13286:	d102      	bne.n	1328e <disconnected_cb+0x36>
					sc_clear(conn);
   13288:	4628      	mov	r0, r5
   1328a:	f018 fa09 	bl	2b6a0 <sc_clear>
				clear_ccc_cfg(cfg);
   1328e:	4620      	mov	r0, r4
   13290:	f017 ffe6 	bl	2b260 <clear_ccc_cfg>
	if (!value_used) {
   13294:	e019      	b.n	132ca <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   13296:	4641      	mov	r1, r8
   13298:	4638      	mov	r0, r7
   1329a:	f017 ff98 	bl	2b1ce <bt_addr_le_copy>
	if (!value_used) {
   1329e:	e014      	b.n	132ca <disconnected_cb+0x72>
		if (!cfg->value) {
   132a0:	8923      	ldrh	r3, [r4, #8]
   132a2:	b193      	cbz	r3, 132ca <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   132a4:	4627      	mov	r7, r4
   132a6:	4628      	mov	r0, r5
   132a8:	f817 1b01 	ldrb.w	r1, [r7], #1
   132ac:	463a      	mov	r2, r7
   132ae:	f017 f87c 	bl	2a3aa <bt_conn_is_peer_addr_le>
   132b2:	2800      	cmp	r0, #0
   132b4:	d1de      	bne.n	13274 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   132b6:	7820      	ldrb	r0, [r4, #0]
   132b8:	4639      	mov	r1, r7
   132ba:	f7fe fdfd 	bl	11eb8 <bt_conn_lookup_addr_le>
			if (tmp) {
   132be:	b120      	cbz	r0, 132ca <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
   132c0:	7b45      	ldrb	r5, [r0, #13]
				bt_conn_unref(tmp);
   132c2:	f016 ffd7 	bl	2a274 <bt_conn_unref>
	if (!value_used) {
   132c6:	2d07      	cmp	r5, #7
   132c8:	d0d1      	beq.n	1326e <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   132ca:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   132cc:	2100      	movs	r1, #0
   132ce:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   132d0:	2b00      	cmp	r3, #0
   132d2:	d0cc      	beq.n	1326e <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   132d4:	4630      	mov	r0, r6
   132d6:	4798      	blx	r3
   132d8:	e7c9      	b.n	1326e <disconnected_cb+0x16>
   132da:	bf00      	nop
   132dc:	0002b54b 	.word	0x0002b54b
   132e0:	20000258 	.word	0x20000258

000132e4 <sc_indicate_rsp>:
{
   132e4:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   132e6:	f06f 0102 	mvn.w	r1, #2
   132ea:	4604      	mov	r4, r0
   132ec:	480d      	ldr	r0, [pc, #52]	; (13324 <sc_indicate_rsp+0x40>)
   132ee:	f017 ffc5 	bl	2b27c <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   132f2:	480c      	ldr	r0, [pc, #48]	; (13324 <sc_indicate_rsp+0x40>)
   132f4:	f017 ff01 	bl	2b0fa <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   132f8:	07c2      	lsls	r2, r0, #31
   132fa:	d504      	bpl.n	13306 <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   132fc:	480a      	ldr	r0, [pc, #40]	; (13328 <sc_indicate_rsp+0x44>)
   132fe:	2200      	movs	r2, #0
   13300:	2300      	movs	r3, #0
   13302:	f012 ff41 	bl	26188 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   13306:	4620      	mov	r0, r4
   13308:	f7ff fda8 	bl	12e5c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1330c:	b140      	cbz	r0, 13320 <sc_indicate_rsp+0x3c>
   1330e:	7a03      	ldrb	r3, [r0, #8]
   13310:	07db      	lsls	r3, r3, #31
   13312:	d505      	bpl.n	13320 <sc_indicate_rsp+0x3c>
}
   13314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13318:	2101      	movs	r1, #1
   1331a:	300c      	adds	r0, #12
   1331c:	f017 bf48 	b.w	2b1b0 <atomic_or>
   13320:	bd10      	pop	{r4, pc}
   13322:	bf00      	nop
   13324:	20000eb0 	.word	0x20000eb0
   13328:	20000e80 	.word	0x20000e80

0001332c <bt_gatt_init>:
{
   1332c:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1332e:	4b1e      	ldr	r3, [pc, #120]	; (133a8 <bt_gatt_init+0x7c>)
   13330:	f3bf 8f5b 	dmb	ish
   13334:	2201      	movs	r2, #1
   13336:	e853 1f00 	ldrex	r1, [r3]
   1333a:	2900      	cmp	r1, #0
   1333c:	d103      	bne.n	13346 <bt_gatt_init+0x1a>
   1333e:	e843 2000 	strex	r0, r2, [r3]
   13342:	2800      	cmp	r0, #0
   13344:	d1f7      	bne.n	13336 <bt_gatt_init+0xa>
   13346:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1334a:	d12b      	bne.n	133a4 <bt_gatt_init+0x78>
   1334c:	f3bf 8f5b 	dmb	ish
   13350:	4b16      	ldr	r3, [pc, #88]	; (133ac <bt_gatt_init+0x80>)
   13352:	e853 1f00 	ldrex	r1, [r3]
   13356:	2900      	cmp	r1, #0
   13358:	d103      	bne.n	13362 <bt_gatt_init+0x36>
   1335a:	e843 2000 	strex	r0, r2, [r3]
   1335e:	2800      	cmp	r0, #0
   13360:	d1f7      	bne.n	13352 <bt_gatt_init+0x26>
   13362:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   13366:	d101      	bne.n	1336c <bt_gatt_init+0x40>
   13368:	f7ff fdca 	bl	12f00 <bt_gatt_service_init.part.0>
	list->head = NULL;
   1336c:	4b10      	ldr	r3, [pc, #64]	; (133b0 <bt_gatt_init+0x84>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1336e:	4911      	ldr	r1, [pc, #68]	; (133b4 <bt_gatt_init+0x88>)
   13370:	4811      	ldr	r0, [pc, #68]	; (133b8 <bt_gatt_init+0x8c>)
   13372:	2200      	movs	r2, #0
	list->tail = NULL;
   13374:	e9c3 2200 	strd	r2, r2, [r3]
   13378:	f01b fa94 	bl	2e8a4 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1337c:	2300      	movs	r3, #0
   1337e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13382:	480d      	ldr	r0, [pc, #52]	; (133b8 <bt_gatt_init+0x8c>)
   13384:	f012 fecc 	bl	26120 <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   13388:	490c      	ldr	r1, [pc, #48]	; (133bc <bt_gatt_init+0x90>)
   1338a:	480d      	ldr	r0, [pc, #52]	; (133c0 <bt_gatt_init+0x94>)
   1338c:	f01b fa8a 	bl	2e8a4 <k_work_init_delayable>
   13390:	2102      	movs	r1, #2
   13392:	480c      	ldr	r0, [pc, #48]	; (133c4 <bt_gatt_init+0x98>)
   13394:	f017 ff0c 	bl	2b1b0 <atomic_or>
}
   13398:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   1339c:	490a      	ldr	r1, [pc, #40]	; (133c8 <bt_gatt_init+0x9c>)
   1339e:	480b      	ldr	r0, [pc, #44]	; (133cc <bt_gatt_init+0xa0>)
   133a0:	f01b ba80 	b.w	2e8a4 <k_work_init_delayable>
}
   133a4:	bd08      	pop	{r3, pc}
   133a6:	bf00      	nop
   133a8:	20001714 	.word	0x20001714
   133ac:	20001730 	.word	0x20001730
   133b0:	200016e4 	.word	0x200016e4
   133b4:	00013599 	.word	0x00013599
   133b8:	20000dd0 	.word	0x20000dd0
   133bc:	000139d1 	.word	0x000139d1
   133c0:	20000e80 	.word	0x20000e80
   133c4:	20000eb0 	.word	0x20000eb0
   133c8:	0002b985 	.word	0x0002b985
   133cc:	20000e30 	.word	0x20000e30

000133d0 <bt_gatt_attr_get_handle>:
{
   133d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   133d4:	4603      	mov	r3, r0
   133d6:	b148      	cbz	r0, 133ec <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   133d8:	8a00      	ldrh	r0, [r0, #16]
   133da:	b938      	cbnz	r0, 133ec <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   133dc:	4912      	ldr	r1, [pc, #72]	; (13428 <bt_gatt_attr_get_handle+0x58>)
   133de:	f8df e04c 	ldr.w	lr, [pc, #76]	; 1342c <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   133e2:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   133e4:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   133e8:	4571      	cmp	r1, lr
   133ea:	d301      	bcc.n	133f0 <bt_gatt_attr_get_handle+0x20>
}
   133ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   133f0:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   133f4:	42bb      	cmp	r3, r7
   133f6:	d304      	bcc.n	13402 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   133f8:	fb0c 7206 	mla	r2, ip, r6, r7
   133fc:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   133fe:	4293      	cmp	r3, r2
   13400:	d90e      	bls.n	13420 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   13402:	19a2      	adds	r2, r4, r6
   13404:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13406:	3108      	adds	r1, #8
   13408:	4614      	mov	r4, r2
   1340a:	e7ed      	b.n	133e8 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1340c:	fb0c 7805 	mla	r8, ip, r5, r7
   13410:	4543      	cmp	r3, r8
   13412:	d007      	beq.n	13424 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   13414:	3501      	adds	r5, #1
   13416:	1962      	adds	r2, r4, r5
   13418:	42b5      	cmp	r5, r6
   1341a:	b292      	uxth	r2, r2
   1341c:	d1f6      	bne.n	1340c <bt_gatt_attr_get_handle+0x3c>
   1341e:	e7f2      	b.n	13406 <bt_gatt_attr_get_handle+0x36>
   13420:	2500      	movs	r5, #0
   13422:	e7f8      	b.n	13416 <bt_gatt_attr_get_handle+0x46>
   13424:	4610      	mov	r0, r2
   13426:	e7e1      	b.n	133ec <bt_gatt_attr_get_handle+0x1c>
   13428:	0002f19c 	.word	0x0002f19c
   1342c:	0002f1ac 	.word	0x0002f1ac

00013430 <bt_gatt_foreach_attr_type>:
{
   13430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13434:	b089      	sub	sp, #36	; 0x24
   13436:	4699      	mov	r9, r3
	if (!num_matches) {
   13438:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
{
   1343c:	4604      	mov	r4, r0
   1343e:	460f      	mov	r7, r1
   13440:	4690      	mov	r8, r2
	if (!num_matches) {
   13442:	b91b      	cbnz	r3, 1344c <bt_gatt_foreach_attr_type+0x1c>
		num_matches = UINT16_MAX;
   13444:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13448:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
	if (start_handle <= last_static_handle) {
   1344c:	4b31      	ldr	r3, [pc, #196]	; (13514 <bt_gatt_foreach_attr_type+0xe4>)
   1344e:	881b      	ldrh	r3, [r3, #0]
   13450:	42a3      	cmp	r3, r4
   13452:	d230      	bcs.n	134b6 <bt_gatt_foreach_attr_type+0x86>
	foreach_attr_type_dyndb(start_handle, end_handle, uuid, attr_data,
   13454:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   13458:	f8ad 301e 	strh.w	r3, [sp, #30]
	return list->head;
   1345c:	4b2e      	ldr	r3, [pc, #184]	; (13518 <bt_gatt_foreach_attr_type+0xe8>)
   1345e:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
   13460:	bb7d      	cbnz	r5, 134c2 <bt_gatt_foreach_attr_type+0x92>
}
   13462:	b009      	add	sp, #36	; 0x24
   13464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   13468:	6869      	ldr	r1, [r5, #4]
   1346a:	4451      	add	r1, sl
   1346c:	42a1      	cmp	r1, r4
   1346e:	d220      	bcs.n	134b2 <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
   13470:	b289      	uxth	r1, r1
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13472:	3508      	adds	r5, #8
   13474:	468a      	mov	sl, r1
   13476:	4b29      	ldr	r3, [pc, #164]	; (1351c <bt_gatt_foreach_attr_type+0xec>)
   13478:	429d      	cmp	r5, r3
   1347a:	d3f5      	bcc.n	13468 <bt_gatt_foreach_attr_type+0x38>
   1347c:	e7ea      	b.n	13454 <bt_gatt_foreach_attr_type+0x24>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1347e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13480:	6828      	ldr	r0, [r5, #0]
   13482:	9304      	str	r3, [sp, #16]
   13484:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13486:	9303      	str	r3, [sp, #12]
   13488:	ab12      	add	r3, sp, #72	; 0x48
   1348a:	e9cd 9301 	strd	r9, r3, [sp, #4]
   1348e:	f8cd 8000 	str.w	r8, [sp]
   13492:	463b      	mov	r3, r7
   13494:	4622      	mov	r2, r4
   13496:	fb0b 0006 	mla	r0, fp, r6, r0
   1349a:	f017 fefe 	bl	2b29a <gatt_foreach_iter>
   1349e:	2800      	cmp	r0, #0
   134a0:	d0df      	beq.n	13462 <bt_gatt_foreach_attr_type+0x32>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   134a2:	3601      	adds	r6, #1
   134a4:	686b      	ldr	r3, [r5, #4]
   134a6:	eb0a 0106 	add.w	r1, sl, r6
   134aa:	42b3      	cmp	r3, r6
   134ac:	b289      	uxth	r1, r1
   134ae:	d8e6      	bhi.n	1347e <bt_gatt_foreach_attr_type+0x4e>
   134b0:	e7df      	b.n	13472 <bt_gatt_foreach_attr_type+0x42>
   134b2:	2600      	movs	r6, #0
   134b4:	e7f6      	b.n	134a4 <bt_gatt_foreach_attr_type+0x74>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   134b6:	4d1a      	ldr	r5, [pc, #104]	; (13520 <bt_gatt_foreach_attr_type+0xf0>)
		uint16_t handle = 1;
   134b8:	f04f 0a01 	mov.w	sl, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   134bc:	f04f 0b14 	mov.w	fp, #20
   134c0:	e7d9      	b.n	13476 <bt_gatt_foreach_attr_type+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
   134c2:	3d08      	subs	r5, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
   134c4:	f04f 0a14 	mov.w	sl, #20
			if (gatt_foreach_iter(attr, attr->handle,
   134c8:	f10d 0b1e 	add.w	fp, sp, #30
	return node->next;
   134cc:	68ae      	ldr	r6, [r5, #8]
		next = SYS_SLIST_PEEK_NEXT_CONTAINER(svc, node);
   134ce:	b1de      	cbz	r6, 13508 <bt_gatt_foreach_attr_type+0xd8>
			if (next->attrs[0].handle <= start_handle) {
   134d0:	f856 3c08 	ldr.w	r3, [r6, #-8]
   134d4:	8a1b      	ldrh	r3, [r3, #16]
   134d6:	42a3      	cmp	r3, r4
   134d8:	d81a      	bhi.n	13510 <bt_gatt_foreach_attr_type+0xe0>
   134da:	68ad      	ldr	r5, [r5, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
   134dc:	2d00      	cmp	r5, #0
   134de:	d0c0      	beq.n	13462 <bt_gatt_foreach_attr_type+0x32>
   134e0:	3d08      	subs	r5, #8
   134e2:	e7f3      	b.n	134cc <bt_gatt_foreach_attr_type+0x9c>
			struct bt_gatt_attr *attr = &svc->attrs[i];
   134e4:	6828      	ldr	r0, [r5, #0]
			if (gatt_foreach_iter(attr, attr->handle,
   134e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
			struct bt_gatt_attr *attr = &svc->attrs[i];
   134e8:	fb0a 0006 	mla	r0, sl, r6, r0
			if (gatt_foreach_iter(attr, attr->handle,
   134ec:	4622      	mov	r2, r4
   134ee:	8a01      	ldrh	r1, [r0, #16]
   134f0:	9304      	str	r3, [sp, #16]
   134f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   134f4:	e9cd 8900 	strd	r8, r9, [sp]
   134f8:	e9cd b302 	strd	fp, r3, [sp, #8]
   134fc:	463b      	mov	r3, r7
   134fe:	f017 fecc 	bl	2b29a <gatt_foreach_iter>
   13502:	2800      	cmp	r0, #0
   13504:	d0ad      	beq.n	13462 <bt_gatt_foreach_attr_type+0x32>
		for (i = 0; i < svc->attr_count; i++) {
   13506:	3601      	adds	r6, #1
   13508:	686b      	ldr	r3, [r5, #4]
   1350a:	429e      	cmp	r6, r3
   1350c:	d3ea      	bcc.n	134e4 <bt_gatt_foreach_attr_type+0xb4>
   1350e:	e7e4      	b.n	134da <bt_gatt_foreach_attr_type+0xaa>
   13510:	2600      	movs	r6, #0
   13512:	e7f9      	b.n	13508 <bt_gatt_foreach_attr_type+0xd8>
   13514:	20002cb6 	.word	0x20002cb6
   13518:	2000170c 	.word	0x2000170c
   1351c:	0002f1ac 	.word	0x0002f1ac
   13520:	0002f19c 	.word	0x0002f19c

00013524 <db_hash_gen>:
{
   13524:	b530      	push	{r4, r5, lr}
   13526:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
   13528:	2300      	movs	r3, #0
{
   1352a:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1352c:	aa1c      	add	r2, sp, #112	; 0x70
   1352e:	4669      	mov	r1, sp
   13530:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   13532:	e9cd 3300 	strd	r3, r3, [sp]
   13536:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1353a:	f015 fd67 	bl	2900c <tc_cmac_setup>
   1353e:	b308      	cbz	r0, 13584 <db_hash_gen+0x60>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   13540:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13544:	2001      	movs	r0, #1
   13546:	4a10      	ldr	r2, [pc, #64]	; (13588 <db_hash_gen+0x64>)
   13548:	ab04      	add	r3, sp, #16
   1354a:	f018 f989 	bl	2b860 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1354e:	480f      	ldr	r0, [pc, #60]	; (1358c <db_hash_gen+0x68>)
   13550:	a904      	add	r1, sp, #16
   13552:	f015 fdf1 	bl	29138 <tc_cmac_final>
   13556:	b1a8      	cbz	r0, 13584 <db_hash_gen+0x60>
   13558:	4b0c      	ldr	r3, [pc, #48]	; (1358c <db_hash_gen+0x68>)
   1355a:	2208      	movs	r2, #8
   1355c:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   13560:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   13562:	780d      	ldrb	r5, [r1, #0]
   13564:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
   13568:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1356a:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   1356e:	d1f7      	bne.n	13560 <db_hash_gen+0x3c>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   13570:	b124      	cbz	r4, 1357c <db_hash_gen+0x58>
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   13572:	4906      	ldr	r1, [pc, #24]	; (1358c <db_hash_gen+0x68>)
   13574:	4806      	ldr	r0, [pc, #24]	; (13590 <db_hash_gen+0x6c>)
   13576:	2210      	movs	r2, #16
   13578:	f7fb faf4 	bl	eb64 <settings_save_one>
   1357c:	4805      	ldr	r0, [pc, #20]	; (13594 <db_hash_gen+0x70>)
   1357e:	2104      	movs	r1, #4
   13580:	f017 fe16 	bl	2b1b0 <atomic_or>
}
   13584:	b049      	add	sp, #292	; 0x124
   13586:	bd30      	pop	{r4, r5, pc}
   13588:	0002b107 	.word	0x0002b107
   1358c:	20000db0 	.word	0x20000db0
   13590:	00030c68 	.word	0x00030c68
   13594:	20000eb0 	.word	0x20000eb0

00013598 <db_hash_process>:
{
   13598:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1359a:	4819      	ldr	r0, [pc, #100]	; (13600 <db_hash_process+0x68>)
   1359c:	f06f 0108 	mvn.w	r1, #8
   135a0:	f017 fe6c 	bl	2b27c <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   135a4:	0702      	lsls	r2, r0, #28
   135a6:	d525      	bpl.n	135f4 <db_hash_process+0x5c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   135a8:	4815      	ldr	r0, [pc, #84]	; (13600 <db_hash_process+0x68>)
   135aa:	f017 fda6 	bl	2b0fa <atomic_get>
   135ae:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   135b0:	075b      	lsls	r3, r3, #29
   135b2:	f3c0 0080 	ubfx	r0, r0, #2, #1
   135b6:	d401      	bmi.n	135bc <db_hash_process+0x24>
			db_hash_gen(false);
   135b8:	f7ff ffb4 	bl	13524 <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   135bc:	4911      	ldr	r1, [pc, #68]	; (13604 <db_hash_process+0x6c>)
   135be:	2210      	movs	r2, #16
   135c0:	1888      	adds	r0, r1, r2
   135c2:	f015 feaf 	bl	29324 <memcmp>
   135c6:	b948      	cbnz	r0, 135dc <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   135c8:	480f      	ldr	r0, [pc, #60]	; (13608 <db_hash_process+0x70>)
   135ca:	f01b f977 	bl	2e8bc <k_work_cancel_delayable>
}
   135ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   135d2:	480b      	ldr	r0, [pc, #44]	; (13600 <db_hash_process+0x68>)
   135d4:	f06f 0101 	mvn.w	r1, #1
   135d8:	f017 be50 	b.w	2b27c <atomic_and>
		sc_indicate(0x0001, 0xffff);
   135dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   135e0:	2001      	movs	r0, #1
   135e2:	f7ff fcc9 	bl	12f78 <sc_indicate>
}
   135e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   135ea:	4906      	ldr	r1, [pc, #24]	; (13604 <db_hash_process+0x6c>)
   135ec:	4807      	ldr	r0, [pc, #28]	; (1360c <db_hash_process+0x74>)
   135ee:	2210      	movs	r2, #16
   135f0:	f7fb bab8 	b.w	eb64 <settings_save_one>
}
   135f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	db_hash_gen(true);
   135f8:	2001      	movs	r0, #1
   135fa:	f7ff bf93 	b.w	13524 <db_hash_gen>
   135fe:	bf00      	nop
   13600:	20000eb0 	.word	0x20000eb0
   13604:	20000db0 	.word	0x20000db0
   13608:	20000e80 	.word	0x20000e80
   1360c:	00030c68 	.word	0x00030c68

00013610 <bt_gatt_service_register>:
{
   13610:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13614:	4b5f      	ldr	r3, [pc, #380]	; (13794 <bt_gatt_service_register+0x184>)
   13616:	f3bf 8f5b 	dmb	ish
   1361a:	4604      	mov	r4, r0
   1361c:	2201      	movs	r2, #1
   1361e:	e853 1f00 	ldrex	r1, [r3]
   13622:	2900      	cmp	r1, #0
   13624:	d103      	bne.n	1362e <bt_gatt_service_register+0x1e>
   13626:	e843 2000 	strex	r0, r2, [r3]
   1362a:	2800      	cmp	r0, #0
   1362c:	d1f7      	bne.n	1361e <bt_gatt_service_register+0xe>
   1362e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   13632:	d101      	bne.n	13638 <bt_gatt_service_register+0x28>
   13634:	f7ff fc64 	bl	12f00 <bt_gatt_service_init.part.0>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
   13638:	6823      	ldr	r3, [r4, #0]
   1363a:	2500      	movs	r5, #0
   1363c:	6818      	ldr	r0, [r3, #0]
   1363e:	f88d 5000 	strb.w	r5, [sp]
   13642:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
   13646:	4669      	mov	r1, sp
   13648:	f8ad 3002 	strh.w	r3, [sp, #2]
   1364c:	f015 ff53 	bl	294f6 <bt_uuid_cmp>
   13650:	b928      	cbnz	r0, 1365e <bt_gatt_service_register+0x4e>
		return -EALREADY;
   13652:	f06f 0577 	mvn.w	r5, #119	; 0x77
}
   13656:	4628      	mov	r0, r5
   13658:	b003      	add	sp, #12
   1365a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
   1365e:	6823      	ldr	r3, [r4, #0]
   13660:	a901      	add	r1, sp, #4
   13662:	6818      	ldr	r0, [r3, #0]
   13664:	f88d 5004 	strb.w	r5, [sp, #4]
   13668:	f641 0301 	movw	r3, #6145	; 0x1801
   1366c:	f8ad 3006 	strh.w	r3, [sp, #6]
   13670:	f015 ff41 	bl	294f6 <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
   13674:	2800      	cmp	r0, #0
   13676:	d0ec      	beq.n	13652 <bt_gatt_service_register+0x42>
	return list->head;
   13678:	4d47      	ldr	r5, [pc, #284]	; (13798 <bt_gatt_service_register+0x188>)
	k_sched_lock();
   1367a:	f012 fde3 	bl	26244 <k_sched_lock>
	if (sys_slist_is_empty(&db)) {
   1367e:	682e      	ldr	r6, [r5, #0]
	struct bt_gatt_attr *attrs = svc->attrs;
   13680:	f8d4 9000 	ldr.w	r9, [r4]
	uint16_t count = svc->attr_count;
   13684:	f8b4 8004 	ldrh.w	r8, [r4, #4]
	if (sys_slist_is_empty(&db)) {
   13688:	b936      	cbnz	r6, 13698 <bt_gatt_service_register+0x88>
		handle = last_static_handle;
   1368a:	4b44      	ldr	r3, [pc, #272]	; (1379c <bt_gatt_service_register+0x18c>)
   1368c:	881f      	ldrh	r7, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
   1368e:	f8df b110 	ldr.w	fp, [pc, #272]	; 137a0 <bt_gatt_service_register+0x190>
	const struct bt_gatt_attr *attr = NULL;
   13692:	f04f 0a00 	mov.w	sl, #0
   13696:	e019      	b.n	136cc <bt_gatt_service_register+0xbc>
	return list->tail;
   13698:	686b      	ldr	r3, [r5, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
   1369a:	2b00      	cmp	r3, #0
   1369c:	d078      	beq.n	13790 <bt_gatt_service_register+0x180>
	handle = last->attrs[last->attr_count - 1].handle;
   1369e:	e953 3202 	ldrd	r3, r2, [r3, #-8]
   136a2:	2114      	movs	r1, #20
   136a4:	fb01 3302 	mla	r3, r1, r2, r3
   136a8:	f833 7c04 	ldrh.w	r7, [r3, #-4]
   136ac:	463e      	mov	r6, r7
   136ae:	e7ee      	b.n	1368e <bt_gatt_service_register+0x7e>
		if (!attrs->handle) {
   136b0:	f8b9 1010 	ldrh.w	r1, [r9, #16]
   136b4:	bb31      	cbnz	r1, 13704 <bt_gatt_service_register+0xf4>
			attrs->handle = ++handle;
   136b6:	1c79      	adds	r1, r7, #1
   136b8:	b289      	uxth	r1, r1
   136ba:	f8a9 1010 	strh.w	r1, [r9, #16]
	for (; attrs && count; attrs++, count--) {
   136be:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   136c2:	f109 0914 	add.w	r9, r9, #20
   136c6:	fa1f f888 	uxth.w	r8, r8
   136ca:	460f      	mov	r7, r1
   136cc:	f1b9 0f00 	cmp.w	r9, #0
   136d0:	d002      	beq.n	136d8 <bt_gatt_service_register+0xc8>
   136d2:	f1b8 0f00 	cmp.w	r8, #0
   136d6:	d1eb      	bne.n	136b0 <bt_gatt_service_register+0xa0>
	if (last_handle == 0 || svc->attrs[0].handle > last_handle) {
   136d8:	b11e      	cbz	r6, 136e2 <bt_gatt_service_register+0xd2>
   136da:	6823      	ldr	r3, [r4, #0]
   136dc:	8a1f      	ldrh	r7, [r3, #16]
   136de:	42be      	cmp	r6, r7
   136e0:	d21e      	bcs.n	13720 <bt_gatt_service_register+0x110>
	parent->next = child;
   136e2:	2200      	movs	r2, #0
		sys_slist_append(&db, &svc->node);
   136e4:	f104 0308 	add.w	r3, r4, #8
   136e8:	60a2      	str	r2, [r4, #8]
	return list->tail;
   136ea:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   136ec:	bb5a      	cbnz	r2, 13746 <bt_gatt_service_register+0x136>
	list->head = node;
   136ee:	e9c5 3300 	strd	r3, r3, [r5]
	if (!atomic_get(&init)) {
   136f2:	482c      	ldr	r0, [pc, #176]	; (137a4 <bt_gatt_service_register+0x194>)
   136f4:	f017 fd01 	bl	2b0fa <atomic_get>
   136f8:	4605      	mov	r5, r0
   136fa:	2800      	cmp	r0, #0
   136fc:	d133      	bne.n	13766 <bt_gatt_service_register+0x156>
		k_sched_unlock();
   136fe:	f012 ff71 	bl	265e4 <k_sched_unlock>
		return 0;
   13702:	e7a8      	b.n	13656 <bt_gatt_service_register+0x46>
		} else if (attrs->handle > handle) {
   13704:	42b9      	cmp	r1, r7
   13706:	d8da      	bhi.n	136be <bt_gatt_service_register+0xae>
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
   13708:	ab01      	add	r3, sp, #4
   1370a:	465a      	mov	r2, fp
   1370c:	4608      	mov	r0, r1
	const struct bt_gatt_attr *attr = NULL;
   1370e:	f8cd a004 	str.w	sl, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
   13712:	f018 f8a5 	bl	2b860 <bt_gatt_foreach_attr>
	return attr;
   13716:	9b01      	ldr	r3, [sp, #4]
		} else if (find_attr(attrs->handle)) {
   13718:	2b00      	cmp	r3, #0
   1371a:	d134      	bne.n	13786 <bt_gatt_service_register+0x176>
   1371c:	4639      	mov	r1, r7
   1371e:	e7ce      	b.n	136be <bt_gatt_service_register+0xae>
	return list->head;
   13720:	6829      	ldr	r1, [r5, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, tmp, node) {
   13722:	2900      	cmp	r1, #0
   13724:	d0e5      	beq.n	136f2 <bt_gatt_service_register+0xe2>
   13726:	f1a1 0308 	sub.w	r3, r1, #8
   1372a:	2200      	movs	r2, #0
		if (tmp->attrs[0].handle > svc->attrs[0].handle) {
   1372c:	6818      	ldr	r0, [r3, #0]
   1372e:	8a00      	ldrh	r0, [r0, #16]
   13730:	42b8      	cmp	r0, r7
   13732:	d911      	bls.n	13758 <bt_gatt_service_register+0x148>
				sys_slist_insert(&db, &prev->node, &svc->node);
   13734:	f104 0308 	add.w	r3, r4, #8
			if (prev) {
   13738:	b142      	cbz	r2, 1374c <bt_gatt_service_register+0x13c>
	return node->next;
   1373a:	6891      	ldr	r1, [r2, #8]
	parent->next = child;
   1373c:	60a1      	str	r1, [r4, #8]
Z_GENLIST_INSERT(slist, snode)
   1373e:	2900      	cmp	r1, #0
   13740:	d0d3      	beq.n	136ea <bt_gatt_service_register+0xda>
	parent->next = child;
   13742:	6093      	str	r3, [r2, #8]
	if (err < 0) {
   13744:	e7d5      	b.n	136f2 <bt_gatt_service_register+0xe2>
   13746:	6013      	str	r3, [r2, #0]
	list->tail = node;
   13748:	606b      	str	r3, [r5, #4]
   1374a:	e7d2      	b.n	136f2 <bt_gatt_service_register+0xe2>
Z_GENLIST_PREPEND(slist, snode)
   1374c:	686a      	ldr	r2, [r5, #4]
	parent->next = child;
   1374e:	60a1      	str	r1, [r4, #8]
	list->head = node;
   13750:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   13752:	2a00      	cmp	r2, #0
   13754:	d1cd      	bne.n	136f2 <bt_gatt_service_register+0xe2>
   13756:	e7f7      	b.n	13748 <bt_gatt_service_register+0x138>
	return node->next;
   13758:	6898      	ldr	r0, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, tmp, node) {
   1375a:	2800      	cmp	r0, #0
   1375c:	d0c9      	beq.n	136f2 <bt_gatt_service_register+0xe2>
   1375e:	461a      	mov	r2, r3
   13760:	f1a0 0308 	sub.w	r3, r0, #8
   13764:	e7e2      	b.n	1372c <bt_gatt_service_register+0x11c>
		    svc->attrs[svc->attr_count - 1].handle);
   13766:	e9d4 2300 	ldrd	r2, r3, [r4]
	sc_indicate(svc->attrs[0].handle,
   1376a:	2114      	movs	r1, #20
   1376c:	fb01 2303 	mla	r3, r1, r3, r2
   13770:	8a10      	ldrh	r0, [r2, #16]
   13772:	f833 1c04 	ldrh.w	r1, [r3, #-4]
   13776:	f7ff fbff 	bl	12f78 <sc_indicate>
	return 0;
   1377a:	2500      	movs	r5, #0
	db_changed();
   1377c:	f7ff fc40 	bl	13000 <db_changed>
	k_sched_unlock();
   13780:	f012 ff30 	bl	265e4 <k_sched_unlock>
	return 0;
   13784:	e767      	b.n	13656 <bt_gatt_service_register+0x46>
		k_sched_unlock();
   13786:	f012 ff2d 	bl	265e4 <k_sched_unlock>
			return -EINVAL;
   1378a:	f06f 0515 	mvn.w	r5, #21
		return err;
   1378e:	e762      	b.n	13656 <bt_gatt_service_register+0x46>
	handle = last->attrs[last->attr_count - 1].handle;
   13790:	681b      	ldr	r3, [r3, #0]
   13792:	deff      	udf	#255	; 0xff
   13794:	20001730 	.word	0x20001730
   13798:	2000170c 	.word	0x2000170c
   1379c:	20002cb6 	.word	0x20002cb6
   137a0:	0002b0af 	.word	0x0002b0af
   137a4:	20001714 	.word	0x20001714

000137a8 <ccc_set_direct>:
{
   137a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   137ac:	b0b8      	sub	sp, #224	; 0xe0
   137ae:	460f      	mov	r7, r1
   137b0:	4615      	mov	r5, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   137b2:	4922      	ldr	r1, [pc, #136]	; (1383c <ccc_set_direct+0x94>)
   137b4:	983e      	ldr	r0, [sp, #248]	; 0xf8
   137b6:	466a      	mov	r2, sp
{
   137b8:	461e      	mov	r6, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   137ba:	f014 fac6 	bl	27d4a <settings_name_steq>
   137be:	2800      	cmp	r0, #0
   137c0:	d038      	beq.n	13834 <ccc_set_direct+0x8c>
		return ccc_set(name, len, read_cb, cb_arg);
   137c2:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
   137c4:	a901      	add	r1, sp, #4
   137c6:	4620      	mov	r0, r4
   137c8:	f014 fae2 	bl	27d90 <settings_name_next>
		if (!name) {
   137cc:	b164      	cbz	r4, 137e8 <ccc_set_direct+0x40>
		} else if (!next) {
   137ce:	9801      	ldr	r0, [sp, #4]
   137d0:	b970      	cbnz	r0, 137f0 <ccc_set_direct+0x48>
		err = bt_settings_decode_key(name, &addr);
   137d2:	f10d 0808 	add.w	r8, sp, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
   137d6:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   137d8:	4620      	mov	r0, r4
   137da:	4641      	mov	r1, r8
			load.addr_with_id.id = BT_ID_DEFAULT;
   137dc:	f88d 3014 	strb.w	r3, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   137e0:	f015 fe63 	bl	294aa <bt_settings_decode_key>
		if (err) {
   137e4:	4604      	mov	r4, r0
   137e6:	b150      	cbz	r0, 137fe <ccc_set_direct+0x56>
			return -EINVAL;
   137e8:	f06f 0015 	mvn.w	r0, #21
   137ec:	4604      	mov	r4, r0
   137ee:	e01a      	b.n	13826 <ccc_set_direct+0x7e>
			unsigned long next_id = strtoul(next, NULL, 10);
   137f0:	220a      	movs	r2, #10
   137f2:	2100      	movs	r1, #0
   137f4:	f015 fce6 	bl	291c4 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   137f8:	2800      	cmp	r0, #0
   137fa:	d0ea      	beq.n	137d2 <ccc_set_direct+0x2a>
   137fc:	e7f4      	b.n	137e8 <ccc_set_direct+0x40>
		load.addr_with_id.addr = &addr;
   137fe:	f8cd 8010 	str.w	r8, [sp, #16]
		if (len_rd) {
   13802:	b1a7      	cbz	r7, 1382e <ccc_set_direct+0x86>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   13804:	af08      	add	r7, sp, #32
   13806:	22c0      	movs	r2, #192	; 0xc0
   13808:	4639      	mov	r1, r7
   1380a:	4630      	mov	r0, r6
   1380c:	47a8      	blx	r5
			if (len < 0) {
   1380e:	2800      	cmp	r0, #0
   13810:	dbec      	blt.n	137ec <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
   13812:	0880      	lsrs	r0, r0, #2
			load.entry = ccc_store;
   13814:	9706      	str	r7, [sp, #24]
			load.count = len / sizeof(*ccc_store);
   13816:	9007      	str	r0, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   13818:	4a09      	ldr	r2, [pc, #36]	; (13840 <ccc_set_direct+0x98>)
   1381a:	ab04      	add	r3, sp, #16
   1381c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13820:	2001      	movs	r0, #1
   13822:	f018 f81d 	bl	2b860 <bt_gatt_foreach_attr>
}
   13826:	4620      	mov	r0, r4
   13828:	b038      	add	sp, #224	; 0xe0
   1382a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			load.count = 0;
   1382e:	e9cd 0006 	strd	r0, r0, [sp, #24]
   13832:	e7f1      	b.n	13818 <ccc_set_direct+0x70>
			return -EINVAL;
   13834:	f06f 0415 	mvn.w	r4, #21
   13838:	e7f5      	b.n	13826 <ccc_set_direct+0x7e>
   1383a:	bf00      	nop
   1383c:	00030c70 	.word	0x00030c70
   13840:	00013105 	.word	0x00013105

00013844 <gatt_indicate>:
{
   13844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13848:	4615      	mov	r5, r2
   1384a:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   1384c:	2214      	movs	r2, #20
   1384e:	6869      	ldr	r1, [r5, #4]
{
   13850:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   13852:	f018 f812 	bl	2b87a <bt_gatt_check_perm>
   13856:	4607      	mov	r7, r0
   13858:	2800      	cmp	r0, #0
   1385a:	d13c      	bne.n	138d6 <gatt_indicate+0x92>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1385c:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   13860:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   13862:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   13864:	f7ff fa2e 	bl	12cc4 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   13868:	3602      	adds	r6, #2
	if (!req) {
   1386a:	4604      	mov	r4, r0
   1386c:	b920      	cbnz	r0, 13878 <gatt_indicate+0x34>
		return -ENOMEM;
   1386e:	f06f 050b 	mvn.w	r5, #11
}
   13872:	4628      	mov	r0, r5
   13874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
   13878:	4b18      	ldr	r3, [pc, #96]	; (138dc <gatt_indicate+0x98>)
	req->len = len;
   1387a:	6146      	str	r6, [r0, #20]
	req->att_op = op;
   1387c:	211d      	movs	r1, #29
   1387e:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   13880:	60c7      	str	r7, [r0, #12]
	req->func = func;
   13882:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   13884:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   13886:	4632      	mov	r2, r6
   13888:	4640      	mov	r0, r8
   1388a:	f017 fada 	bl	2ae42 <bt_att_create_pdu>
	if (!buf) {
   1388e:	4606      	mov	r6, r0
   13890:	b918      	cbnz	r0, 1389a <gatt_indicate+0x56>
		bt_att_req_free(req);
   13892:	4620      	mov	r0, r4
   13894:	f7ff fa38 	bl	12d08 <bt_att_req_free>
   13898:	e7e9      	b.n	1386e <gatt_indicate+0x2a>
	return net_buf_simple_add(&buf->b, len);
   1389a:	f100 0a08 	add.w	sl, r0, #8
   1389e:	2102      	movs	r1, #2
   138a0:	4650      	mov	r0, sl
   138a2:	f019 fd96 	bl	2d3d2 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   138a6:	4607      	mov	r7, r0
   138a8:	8aa9      	ldrh	r1, [r5, #20]
   138aa:	f827 9b02 	strh.w	r9, [r7], #2
   138ae:	4650      	mov	r0, sl
   138b0:	f019 fd8f 	bl	2d3d2 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   138b4:	8aaa      	ldrh	r2, [r5, #20]
   138b6:	6929      	ldr	r1, [r5, #16]
   138b8:	4638      	mov	r0, r7
   138ba:	f015 fd44 	bl	29346 <memcpy>
	req->buf = buf;
   138be:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   138c0:	4621      	mov	r1, r4
   138c2:	4640      	mov	r0, r8
   138c4:	f017 fbde 	bl	2b084 <bt_att_req_send>
	if (err) {
   138c8:	4605      	mov	r5, r0
   138ca:	2800      	cmp	r0, #0
   138cc:	d0d1      	beq.n	13872 <gatt_indicate+0x2e>
		bt_att_req_free(req);
   138ce:	4620      	mov	r0, r4
   138d0:	f7ff fa1a 	bl	12d08 <bt_att_req_free>
   138d4:	e7cd      	b.n	13872 <gatt_indicate+0x2e>
		return -EPERM;
   138d6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   138da:	e7ca      	b.n	13872 <gatt_indicate+0x2e>
   138dc:	0002b0c9 	.word	0x0002b0c9

000138e0 <bt_gatt_indicate>:
{
   138e0:	b530      	push	{r4, r5, lr}
   138e2:	4604      	mov	r4, r0
   138e4:	b08b      	sub	sp, #44	; 0x2c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   138e6:	4837      	ldr	r0, [pc, #220]	; (139c4 <bt_gatt_indicate+0xe4>)
   138e8:	f017 fc07 	bl	2b0fa <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   138ec:	0742      	lsls	r2, r0, #29
{
   138ee:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   138f0:	d561      	bpl.n	139b6 <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   138f2:	b114      	cbz	r4, 138fa <bt_gatt_indicate+0x1a>
   138f4:	7b63      	ldrb	r3, [r4, #13]
   138f6:	2b07      	cmp	r3, #7
   138f8:	d160      	bne.n	139bc <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   138fa:	6868      	ldr	r0, [r5, #4]
   138fc:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   138fe:	f7ff fd67 	bl	133d0 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   13902:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   13904:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   13908:	b33a      	cbz	r2, 1395a <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1390a:	a905      	add	r1, sp, #20
   1390c:	9102      	str	r1, [sp, #8]
   1390e:	492e      	ldr	r1, [pc, #184]	; (139c8 <bt_gatt_indicate+0xe8>)
   13910:	9101      	str	r1, [sp, #4]
   13912:	2101      	movs	r1, #1
	found->attr = NULL;
   13914:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   13916:	9100      	str	r1, [sp, #0]
   13918:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1391c:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1391e:	f7ff fd87 	bl	13430 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   13922:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   13924:	b91b      	cbnz	r3, 1392e <bt_gatt_indicate+0x4e>
			return -ENOENT;
   13926:	f06f 0001 	mvn.w	r0, #1
}
   1392a:	b00b      	add	sp, #44	; 0x2c
   1392c:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1392e:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   13930:	9b05      	ldr	r3, [sp, #20]
   13932:	6818      	ldr	r0, [r3, #0]
   13934:	2300      	movs	r3, #0
   13936:	f88d 3010 	strb.w	r3, [sp, #16]
   1393a:	a904      	add	r1, sp, #16
   1393c:	f642 0303 	movw	r3, #10243	; 0x2803
   13940:	f8ad 3012 	strh.w	r3, [sp, #18]
   13944:	f015 fdd7 	bl	294f6 <bt_uuid_cmp>
   13948:	b970      	cbnz	r0, 13968 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1394a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1394c:	68c3      	ldr	r3, [r0, #12]
   1394e:	799b      	ldrb	r3, [r3, #6]
   13950:	069b      	lsls	r3, r3, #26
   13952:	d405      	bmi.n	13960 <bt_gatt_indicate+0x80>
			return -EINVAL;
   13954:	f06f 0015 	mvn.w	r0, #21
   13958:	e7e7      	b.n	1392a <bt_gatt_indicate+0x4a>
		if (!data.handle) {
   1395a:	2800      	cmp	r0, #0
   1395c:	d1e8      	bne.n	13930 <bt_gatt_indicate+0x50>
   1395e:	e7e2      	b.n	13926 <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   13960:	f017 ff30 	bl	2b7c4 <bt_gatt_attr_value_handle>
   13964:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   13968:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1396c:	b13c      	cbz	r4, 1397e <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   1396e:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   13970:	4601      	mov	r1, r0
		params->_ref = 1;
   13972:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   13974:	462a      	mov	r2, r5
   13976:	4620      	mov	r0, r4
   13978:	f7ff ff64 	bl	13844 <gatt_indicate>
   1397c:	e7d5      	b.n	1392a <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   1397e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   13982:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   13984:	2302      	movs	r3, #2
   13986:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1398a:	f642 1302 	movw	r3, #10498	; 0x2902
   1398e:	f8ad 3012 	strh.w	r3, [sp, #18]
   13992:	ab05      	add	r3, sp, #20
   13994:	9302      	str	r3, [sp, #8]
   13996:	4b0d      	ldr	r3, [pc, #52]	; (139cc <bt_gatt_indicate+0xec>)
   13998:	9301      	str	r3, [sp, #4]
   1399a:	2301      	movs	r3, #1
   1399c:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   1399e:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   139a0:	4623      	mov	r3, r4
   139a2:	aa04      	add	r2, sp, #16
   139a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   139a8:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   139aa:	f88d 4010 	strb.w	r4, [sp, #16]
   139ae:	f7ff fd3f 	bl	13430 <bt_gatt_foreach_attr_type>
	return data.err;
   139b2:	9807      	ldr	r0, [sp, #28]
   139b4:	e7b9      	b.n	1392a <bt_gatt_indicate+0x4a>
		return -EAGAIN;
   139b6:	f06f 000a 	mvn.w	r0, #10
   139ba:	e7b6      	b.n	1392a <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
   139bc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   139c0:	e7b3      	b.n	1392a <bt_gatt_indicate+0x4a>
   139c2:	bf00      	nop
   139c4:	200000cc 	.word	0x200000cc
   139c8:	0002b0ef 	.word	0x0002b0ef
   139cc:	00013b1d 	.word	0x00013b1d

000139d0 <sc_process>:
{
   139d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   139d2:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   139d6:	f8ad 3004 	strh.w	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   139da:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   139de:	4604      	mov	r4, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
   139e0:	f830 3c06 	ldrh.w	r3, [r0, #-6]
   139e4:	f8ad 3006 	strh.w	r3, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   139e8:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   139ec:	f06f 0101 	mvn.w	r1, #1
   139f0:	4628      	mov	r0, r5
   139f2:	f017 fc43 	bl	2b27c <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   139f6:	4b0d      	ldr	r3, [pc, #52]	; (13a2c <sc_process+0x5c>)
   139f8:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   139fc:	4b0c      	ldr	r3, [pc, #48]	; (13a30 <sc_process+0x60>)
   139fe:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   13a02:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   13a04:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   13a06:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   13a0a:	2304      	movs	r3, #4
	sc->start = 0U;
   13a0c:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   13a10:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   13a14:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   13a18:	4631      	mov	r1, r6
   13a1a:	f7ff ff61 	bl	138e0 <bt_gatt_indicate>
   13a1e:	b918      	cbnz	r0, 13a28 <sc_process+0x58>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13a20:	2102      	movs	r1, #2
   13a22:	4628      	mov	r0, r5
   13a24:	f017 fbc4 	bl	2b1b0 <atomic_or>
}
   13a28:	b002      	add	sp, #8
   13a2a:	bd70      	pop	{r4, r5, r6, pc}
   13a2c:	0002f6c0 	.word	0x0002f6c0
   13a30:	000132e5 	.word	0x000132e5

00013a34 <bt_gatt_notify_cb>:
{
   13a34:	b530      	push	{r4, r5, lr}
   13a36:	4604      	mov	r4, r0
   13a38:	b08b      	sub	sp, #44	; 0x2c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13a3a:	4835      	ldr	r0, [pc, #212]	; (13b10 <bt_gatt_notify_cb+0xdc>)
   13a3c:	f017 fb5d 	bl	2b0fa <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13a40:	0742      	lsls	r2, r0, #29
{
   13a42:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13a44:	d55d      	bpl.n	13b02 <bt_gatt_notify_cb+0xce>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   13a46:	b114      	cbz	r4, 13a4e <bt_gatt_notify_cb+0x1a>
   13a48:	7b63      	ldrb	r3, [r4, #13]
   13a4a:	2b07      	cmp	r3, #7
   13a4c:	d15c      	bne.n	13b08 <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
   13a4e:	6868      	ldr	r0, [r5, #4]
   13a50:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   13a52:	f7ff fcbd 	bl	133d0 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   13a56:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   13a58:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   13a5c:	b33a      	cbz	r2, 13aae <bt_gatt_notify_cb+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   13a5e:	a905      	add	r1, sp, #20
   13a60:	9102      	str	r1, [sp, #8]
   13a62:	492c      	ldr	r1, [pc, #176]	; (13b14 <bt_gatt_notify_cb+0xe0>)
   13a64:	9101      	str	r1, [sp, #4]
   13a66:	2101      	movs	r1, #1
	found->attr = NULL;
   13a68:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   13a6a:	9100      	str	r1, [sp, #0]
   13a6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   13a70:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   13a72:	f7ff fcdd 	bl	13430 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   13a76:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   13a78:	b91b      	cbnz	r3, 13a82 <bt_gatt_notify_cb+0x4e>
			return -ENOENT;
   13a7a:	f06f 0001 	mvn.w	r0, #1
}
   13a7e:	b00b      	add	sp, #44	; 0x2c
   13a80:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   13a82:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   13a84:	9b05      	ldr	r3, [sp, #20]
   13a86:	6818      	ldr	r0, [r3, #0]
   13a88:	2300      	movs	r3, #0
   13a8a:	f88d 3010 	strb.w	r3, [sp, #16]
   13a8e:	a904      	add	r1, sp, #16
   13a90:	f642 0303 	movw	r3, #10243	; 0x2803
   13a94:	f8ad 3012 	strh.w	r3, [sp, #18]
   13a98:	f015 fd2d 	bl	294f6 <bt_uuid_cmp>
   13a9c:	b970      	cbnz	r0, 13abc <bt_gatt_notify_cb+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   13a9e:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   13aa0:	68c3      	ldr	r3, [r0, #12]
   13aa2:	799b      	ldrb	r3, [r3, #6]
   13aa4:	06db      	lsls	r3, r3, #27
   13aa6:	d405      	bmi.n	13ab4 <bt_gatt_notify_cb+0x80>
			return -EINVAL;
   13aa8:	f06f 0015 	mvn.w	r0, #21
   13aac:	e7e7      	b.n	13a7e <bt_gatt_notify_cb+0x4a>
		if (!data.handle) {
   13aae:	2800      	cmp	r0, #0
   13ab0:	d1e8      	bne.n	13a84 <bt_gatt_notify_cb+0x50>
   13ab2:	e7e2      	b.n	13a7a <bt_gatt_notify_cb+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   13ab4:	f017 fe86 	bl	2b7c4 <bt_gatt_attr_value_handle>
   13ab8:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   13abc:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   13ac0:	b12c      	cbz	r4, 13ace <bt_gatt_notify_cb+0x9a>
		return gatt_notify(conn, data.handle, params);
   13ac2:	4601      	mov	r1, r0
   13ac4:	462a      	mov	r2, r5
   13ac6:	4620      	mov	r0, r4
   13ac8:	f017 ff02 	bl	2b8d0 <gatt_notify>
   13acc:	e7d7      	b.n	13a7e <bt_gatt_notify_cb+0x4a>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13ace:	f642 1202 	movw	r2, #10498	; 0x2902
   13ad2:	f8ad 2012 	strh.w	r2, [sp, #18]
   13ad6:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   13ad8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13adc:	9202      	str	r2, [sp, #8]
   13ade:	4a0e      	ldr	r2, [pc, #56]	; (13b18 <bt_gatt_notify_cb+0xe4>)
	data.err = -ENOTCONN;
   13ae0:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   13ae2:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13ae4:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   13ae8:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13aec:	aa04      	add	r2, sp, #16
   13aee:	4623      	mov	r3, r4
   13af0:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   13af4:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13af6:	f88d 4010 	strb.w	r4, [sp, #16]
   13afa:	f7ff fc99 	bl	13430 <bt_gatt_foreach_attr_type>
	return data.err;
   13afe:	9807      	ldr	r0, [sp, #28]
   13b00:	e7bd      	b.n	13a7e <bt_gatt_notify_cb+0x4a>
		return -EAGAIN;
   13b02:	f06f 000a 	mvn.w	r0, #10
   13b06:	e7ba      	b.n	13a7e <bt_gatt_notify_cb+0x4a>
		return -ENOTCONN;
   13b08:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   13b0c:	e7b7      	b.n	13a7e <bt_gatt_notify_cb+0x4a>
   13b0e:	bf00      	nop
   13b10:	200000cc 	.word	0x200000cc
   13b14:	0002b0ef 	.word	0x0002b0ef
   13b18:	00013b1d 	.word	0x00013b1d

00013b1c <notify_cb>:
{
   13b1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   13b20:	4b37      	ldr	r3, [pc, #220]	; (13c00 <notify_cb+0xe4>)
{
   13b22:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13b24:	6882      	ldr	r2, [r0, #8]
   13b26:	429a      	cmp	r2, r3
{
   13b28:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   13b2a:	d113      	bne.n	13b54 <notify_cb+0x38>
	ccc = attr->user_data;
   13b2c:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   13b2e:	4b35      	ldr	r3, [pc, #212]	; (13c04 <notify_cb+0xe8>)
   13b30:	429f      	cmp	r7, r3
   13b32:	d014      	beq.n	13b5e <notify_cb+0x42>
		if (cfg->value != data->type) {
   13b34:	893a      	ldrh	r2, [r7, #8]
   13b36:	89a3      	ldrh	r3, [r4, #12]
   13b38:	429a      	cmp	r2, r3
   13b3a:	d10b      	bne.n	13b54 <notify_cb+0x38>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   13b3c:	4639      	mov	r1, r7
   13b3e:	f811 0b01 	ldrb.w	r0, [r1], #1
   13b42:	f7fe f9b9 	bl	11eb8 <bt_conn_lookup_addr_le>
		if (!conn) {
   13b46:	4605      	mov	r5, r0
   13b48:	b120      	cbz	r0, 13b54 <notify_cb+0x38>
		if (conn->state != BT_CONN_CONNECTED) {
   13b4a:	7b43      	ldrb	r3, [r0, #13]
   13b4c:	2b07      	cmp	r3, #7
   13b4e:	d02e      	beq.n	13bae <notify_cb+0x92>
			bt_conn_unref(conn);
   13b50:	f016 fb90 	bl	2a274 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   13b54:	2701      	movs	r7, #1
}
   13b56:	4638      	mov	r0, r7
   13b58:	b003      	add	sp, #12
   13b5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   13b5e:	f04f 0800 	mov.w	r8, #0
   13b62:	4d29      	ldr	r5, [pc, #164]	; (13c08 <notify_cb+0xec>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   13b64:	46c1      	mov	r9, r8
   13b66:	2207      	movs	r2, #7
   13b68:	4669      	mov	r1, sp
   13b6a:	4628      	mov	r0, r5
   13b6c:	f8cd 9000 	str.w	r9, [sp]
   13b70:	f8cd 9003 	str.w	r9, [sp, #3]
   13b74:	f015 fbd6 	bl	29324 <memcmp>
   13b78:	b178      	cbz	r0, 13b9a <notify_cb+0x7e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   13b7a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   13b7e:	2207      	movs	r2, #7
   13b80:	4629      	mov	r1, r5
   13b82:	f7fe f9b7 	bl	11ef4 <bt_conn_lookup_state_le>
			if (!conn) {
   13b86:	b978      	cbnz	r0, 13ba8 <notify_cb+0x8c>
				sc = (struct sc_data *)data->ind_params->data;
   13b88:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   13b8a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   13b8e:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   13b90:	4629      	mov	r1, r5
   13b92:	8853      	ldrh	r3, [r2, #2]
   13b94:	8812      	ldrh	r2, [r2, #0]
   13b96:	f017 fd4f 	bl	2b638 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   13b9a:	350c      	adds	r5, #12
   13b9c:	f1b8 0f00 	cmp.w	r8, #0
   13ba0:	d1c8      	bne.n	13b34 <notify_cb+0x18>
   13ba2:	f04f 0801 	mov.w	r8, #1
   13ba6:	e7de      	b.n	13b66 <notify_cb+0x4a>
			bt_conn_unref(conn);
   13ba8:	f016 fb64 	bl	2a274 <bt_conn_unref>
   13bac:	e7f5      	b.n	13b9a <notify_cb+0x7e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   13bae:	697b      	ldr	r3, [r7, #20]
   13bb0:	b123      	cbz	r3, 13bbc <notify_cb+0xa0>
   13bb2:	4631      	mov	r1, r6
   13bb4:	4798      	blx	r3
   13bb6:	b908      	cbnz	r0, 13bbc <notify_cb+0xa0>
			bt_conn_unref(conn);
   13bb8:	4628      	mov	r0, r5
   13bba:	e7c9      	b.n	13b50 <notify_cb+0x34>
		if (bt_gatt_check_perm(conn, attr,
   13bbc:	2214      	movs	r2, #20
   13bbe:	4631      	mov	r1, r6
   13bc0:	4628      	mov	r0, r5
   13bc2:	f017 fe5a 	bl	2b87a <bt_gatt_check_perm>
   13bc6:	4607      	mov	r7, r0
   13bc8:	2800      	cmp	r0, #0
   13bca:	d1c3      	bne.n	13b54 <notify_cb+0x38>
		if (data->type == BT_GATT_CCC_INDICATE) {
   13bcc:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
   13bce:	88a1      	ldrh	r1, [r4, #4]
   13bd0:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
   13bd2:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   13bd4:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   13bd6:	d10f      	bne.n	13bf8 <notify_cb+0xdc>
			err = gatt_indicate(conn, data->handle,
   13bd8:	f7ff fe34 	bl	13844 <gatt_indicate>
			if (err == 0) {
   13bdc:	4606      	mov	r6, r0
   13bde:	b918      	cbnz	r0, 13be8 <notify_cb+0xcc>
				data->ind_params->_ref++;
   13be0:	6922      	ldr	r2, [r4, #16]
   13be2:	7d93      	ldrb	r3, [r2, #22]
   13be4:	3301      	adds	r3, #1
   13be6:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   13be8:	4628      	mov	r0, r5
   13bea:	f016 fb43 	bl	2a274 <bt_conn_unref>
		if (err < 0) {
   13bee:	2e00      	cmp	r6, #0
   13bf0:	dbb1      	blt.n	13b56 <notify_cb+0x3a>
		data->err = 0;
   13bf2:	2300      	movs	r3, #0
   13bf4:	60a3      	str	r3, [r4, #8]
   13bf6:	e7ad      	b.n	13b54 <notify_cb+0x38>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   13bf8:	f017 fe6a 	bl	2b8d0 <gatt_notify>
   13bfc:	4606      	mov	r6, r0
   13bfe:	e7f3      	b.n	13be8 <notify_cb+0xcc>
   13c00:	0002b54b 	.word	0x0002b54b
   13c04:	20000258 	.word	0x20000258
   13c08:	20002cb9 	.word	0x20002cb9

00013c0c <update_ccc>:
{
   13c0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   13c10:	4b2d      	ldr	r3, [pc, #180]	; (13cc8 <update_ccc+0xbc>)
{
   13c12:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13c14:	6882      	ldr	r2, [r0, #8]
   13c16:	429a      	cmp	r2, r3
{
   13c18:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   13c1a:	d122      	bne.n	13c62 <update_ccc+0x56>
	ccc = attr->user_data;
   13c1c:	68c7      	ldr	r7, [r0, #12]
	struct bt_conn *conn = data->conn;
   13c1e:	6834      	ldr	r4, [r6, #0]
		if (!cfg->value ||
   13c20:	893b      	ldrh	r3, [r7, #8]
   13c22:	b1f3      	cbz	r3, 13c62 <update_ccc+0x56>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   13c24:	463a      	mov	r2, r7
   13c26:	4620      	mov	r0, r4
   13c28:	f812 1b01 	ldrb.w	r1, [r2], #1
   13c2c:	f016 fbbd 	bl	2a3aa <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   13c30:	b1b8      	cbz	r0, 13c62 <update_ccc+0x56>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   13c32:	222a      	movs	r2, #42	; 0x2a
   13c34:	4629      	mov	r1, r5
   13c36:	4620      	mov	r0, r4
   13c38:	f017 fe1f 	bl	2b87a <bt_gatt_check_perm>
		if (err) {
   13c3c:	b1a8      	cbz	r0, 13c6a <update_ccc+0x5e>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   13c3e:	2803      	cmp	r0, #3
   13c40:	d00f      	beq.n	13c62 <update_ccc+0x56>
				sec = BT_SECURITY_L3;
   13c42:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   13c44:	4620      	mov	r0, r4
				sec = BT_SECURITY_L3;
   13c46:	bf14      	ite	ne
   13c48:	f04f 0802 	movne.w	r8, #2
   13c4c:	f04f 0803 	moveq.w	r8, #3
			    bt_conn_get_security(conn) < sec) {
   13c50:	f016 fba9 	bl	2a3a6 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   13c54:	4580      	cmp	r8, r0
   13c56:	d908      	bls.n	13c6a <update_ccc+0x5e>
				if (data->sec < sec) {
   13c58:	7933      	ldrb	r3, [r6, #4]
   13c5a:	4543      	cmp	r3, r8
   13c5c:	d201      	bcs.n	13c62 <update_ccc+0x56>
					data->sec = sec;
   13c5e:	f886 8004 	strb.w	r8, [r6, #4]
}
   13c62:	2001      	movs	r0, #1
   13c64:	b002      	add	sp, #8
   13c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		gatt_ccc_changed(attr, ccc);
   13c6a:	4639      	mov	r1, r7
   13c6c:	4628      	mov	r0, r5
   13c6e:	f017 fa21 	bl	2b0b4 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   13c72:	4b16      	ldr	r3, [pc, #88]	; (13ccc <update_ccc+0xc0>)
   13c74:	429f      	cmp	r7, r3
   13c76:	d1f4      	bne.n	13c62 <update_ccc+0x56>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   13c78:	7a20      	ldrb	r0, [r4, #8]
   13c7a:	f104 0188 	add.w	r1, r4, #136	; 0x88
   13c7e:	f7ff faa3 	bl	131c8 <find_sc_cfg>
	if (!cfg) {
   13c82:	2800      	cmp	r0, #0
   13c84:	d0ed      	beq.n	13c62 <update_ccc+0x56>
	if (!(cfg->data.start || cfg->data.end)) {
   13c86:	8902      	ldrh	r2, [r0, #8]
   13c88:	8943      	ldrh	r3, [r0, #10]
   13c8a:	ea53 0102 	orrs.w	r1, r3, r2
   13c8e:	d0e8      	beq.n	13c62 <update_ccc+0x56>
	index = bt_conn_index(conn);
   13c90:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   13c92:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   13c96:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   13c9a:	f7fd fff9 	bl	11c90 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   13c9e:	490c      	ldr	r1, [pc, #48]	; (13cd0 <update_ccc+0xc4>)
   13ca0:	4a0c      	ldr	r2, [pc, #48]	; (13cd4 <update_ccc+0xc8>)
   13ca2:	2318      	movs	r3, #24
   13ca4:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   13ca8:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   13caa:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   13cac:	4a0a      	ldr	r2, [pc, #40]	; (13cd8 <update_ccc+0xcc>)
   13cae:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   13cb0:	aa01      	add	r2, sp, #4
   13cb2:	611a      	str	r2, [r3, #16]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   13cb4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].len = sizeof(sc_range);
   13cb8:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   13cba:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   13cbe:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   13cc0:	4620      	mov	r0, r4
   13cc2:	f7ff fe0d 	bl	138e0 <bt_gatt_indicate>
		BT_ERR("SC restore indication failed");
   13cc6:	e7cc      	b.n	13c62 <update_ccc+0x56>
   13cc8:	0002b54b 	.word	0x0002b54b
   13ccc:	20000258 	.word	0x20000258
   13cd0:	20001718 	.word	0x20001718
   13cd4:	0002f6c0 	.word	0x0002f6c0
   13cd8:	0002b785 	.word	0x0002b785

00013cdc <bt_gatt_connected>:
{
   13cdc:	b570      	push	{r4, r5, r6, lr}
   13cde:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13ce0:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   13ce4:	4604      	mov	r4, r0
	data.conn = conn;
   13ce6:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
   13ce8:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13cea:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   13cec:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13cf0:	4629      	mov	r1, r5
   13cf2:	f015 ffa1 	bl	29c38 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   13cf6:	b190      	cbz	r0, 13d1e <bt_gatt_connected+0x42>
		if (conn->id) {
   13cf8:	7a22      	ldrb	r2, [r4, #8]
   13cfa:	b31a      	cbz	r2, 13d44 <bt_gatt_connected+0x68>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   13cfc:	ae02      	add	r6, sp, #8
   13cfe:	2104      	movs	r1, #4
   13d00:	4630      	mov	r0, r6
   13d02:	f013 f84e 	bl	26da2 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   13d06:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   13d08:	4a0f      	ldr	r2, [pc, #60]	; (13d48 <bt_gatt_connected+0x6c>)
   13d0a:	2124      	movs	r1, #36	; 0x24
   13d0c:	a805      	add	r0, sp, #20
   13d0e:	462b      	mov	r3, r5
   13d10:	f7fc f978 	bl	10004 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   13d14:	aa05      	add	r2, sp, #20
   13d16:	490d      	ldr	r1, [pc, #52]	; (13d4c <bt_gatt_connected+0x70>)
   13d18:	4610      	mov	r0, r2
   13d1a:	f7fa ff83 	bl	ec24 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   13d1e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13d22:	4a0b      	ldr	r2, [pc, #44]	; (13d50 <bt_gatt_connected+0x74>)
   13d24:	ab03      	add	r3, sp, #12
   13d26:	2001      	movs	r0, #1
   13d28:	f017 fd9a 	bl	2b860 <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   13d2c:	4620      	mov	r0, r4
   13d2e:	f016 fb3a 	bl	2a3a6 <bt_conn_get_security>
   13d32:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   13d36:	4288      	cmp	r0, r1
   13d38:	d202      	bcs.n	13d40 <bt_gatt_connected+0x64>
		int err = bt_conn_set_security(conn, data.sec);
   13d3a:	4620      	mov	r0, r4
   13d3c:	f016 fb03 	bl	2a346 <bt_conn_set_security>
}
   13d40:	b00e      	add	sp, #56	; 0x38
   13d42:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   13d44:	9200      	str	r2, [sp, #0]
   13d46:	e7df      	b.n	13d08 <bt_gatt_connected+0x2c>
   13d48:	00030c73 	.word	0x00030c73
   13d4c:	000137a9 	.word	0x000137a9
   13d50:	00013c0d 	.word	0x00013c0d

00013d54 <bt_gatt_att_max_mtu_changed>:
{
   13d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   13d56:	4b08      	ldr	r3, [pc, #32]	; (13d78 <bt_gatt_att_max_mtu_changed+0x24>)
   13d58:	681c      	ldr	r4, [r3, #0]
   13d5a:	4605      	mov	r5, r0
   13d5c:	460e      	mov	r6, r1
   13d5e:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   13d60:	b14c      	cbz	r4, 13d76 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   13d62:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   13d66:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   13d68:	b11b      	cbz	r3, 13d72 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   13d6a:	463a      	mov	r2, r7
   13d6c:	4631      	mov	r1, r6
   13d6e:	4628      	mov	r0, r5
   13d70:	4798      	blx	r3
	return node->next;
   13d72:	6864      	ldr	r4, [r4, #4]
   13d74:	e7f4      	b.n	13d60 <bt_gatt_att_max_mtu_changed+0xc>
}
   13d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13d78:	200016e4 	.word	0x200016e4

00013d7c <bt_gatt_encrypt_change>:
{
   13d7c:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   13d7e:	4a06      	ldr	r2, [pc, #24]	; (13d98 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   13d80:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   13d82:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   13d84:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   13d86:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   13d8a:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   13d8e:	f017 fd67 	bl	2b860 <bt_gatt_foreach_attr>
}
   13d92:	b003      	add	sp, #12
   13d94:	f85d fb04 	ldr.w	pc, [sp], #4
   13d98:	00013c0d 	.word	0x00013c0d

00013d9c <db_hash_read>:
{
   13d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   13d9e:	4914      	ldr	r1, [pc, #80]	; (13df0 <db_hash_read+0x54>)
{
   13da0:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   13da4:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   13da6:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   13daa:	461f      	mov	r7, r3
   13dac:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   13dae:	f01a fd99 	bl	2e8e4 <k_work_cancel_delayable_sync>
   13db2:	4810      	ldr	r0, [pc, #64]	; (13df4 <db_hash_read+0x58>)
   13db4:	f017 f9a1 	bl	2b0fa <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   13db8:	0743      	lsls	r3, r0, #29
   13dba:	d402      	bmi.n	13dc2 <db_hash_read+0x26>
		db_hash_gen(true);
   13dbc:	2001      	movs	r0, #1
   13dbe:	f7ff fbb1 	bl	13524 <db_hash_gen>
	(void)bt_gatt_change_aware(conn, true);
   13dc2:	2101      	movs	r1, #1
   13dc4:	4620      	mov	r0, r4
   13dc6:	f017 fdb6 	bl	2b936 <bt_gatt_change_aware>
	if (offset > value_len) {
   13dca:	2e10      	cmp	r6, #16
   13dcc:	d80c      	bhi.n	13de8 <db_hash_read+0x4c>
	len = MIN(buf_len, value_len - offset);
   13dce:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   13dd2:	4909      	ldr	r1, [pc, #36]	; (13df8 <db_hash_read+0x5c>)
	len = MIN(buf_len, value_len - offset);
   13dd4:	42bc      	cmp	r4, r7
   13dd6:	bfa8      	it	ge
   13dd8:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   13dda:	4622      	mov	r2, r4
   13ddc:	4431      	add	r1, r6
   13dde:	4628      	mov	r0, r5
   13de0:	f015 fab1 	bl	29346 <memcpy>
}
   13de4:	4620      	mov	r0, r4
   13de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   13de8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   13dec:	e7fa      	b.n	13de4 <db_hash_read+0x48>
   13dee:	bf00      	nop
   13df0:	20000e00 	.word	0x20000e00
   13df4:	20000eb0 	.word	0x20000eb0
   13df8:	20000db0 	.word	0x20000db0

00013dfc <bt_gatt_store_ccc>:
{
   13dfc:	b570      	push	{r4, r5, r6, lr}
   13dfe:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
   13e00:	2300      	movs	r3, #0
{
   13e02:	4604      	mov	r4, r0
   13e04:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   13e06:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   13e08:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   13e0c:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   13e0e:	4a11      	ldr	r2, [pc, #68]	; (13e54 <bt_gatt_store_ccc+0x58>)
   13e10:	ab0d      	add	r3, sp, #52	; 0x34
   13e12:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13e16:	2001      	movs	r0, #1
   13e18:	f017 fd22 	bl	2b860 <bt_gatt_foreach_attr>
	if (id) {
   13e1c:	b1ac      	cbz	r4, 13e4a <bt_gatt_store_ccc+0x4e>
		u8_to_dec(id_str, sizeof(id_str), id);
   13e1e:	ae03      	add	r6, sp, #12
   13e20:	4622      	mov	r2, r4
   13e22:	2104      	movs	r1, #4
   13e24:	4630      	mov	r0, r6
   13e26:	f012 ffbc 	bl	26da2 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   13e2a:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   13e2c:	4a0a      	ldr	r2, [pc, #40]	; (13e58 <bt_gatt_store_ccc+0x5c>)
   13e2e:	462b      	mov	r3, r5
   13e30:	2124      	movs	r1, #36	; 0x24
   13e32:	a804      	add	r0, sp, #16
   13e34:	f7fc f8e6 	bl	10004 <bt_settings_encode_key>
	if (save.count) {
   13e38:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   13e3a:	b142      	cbz	r2, 13e4e <bt_gatt_store_ccc+0x52>
		len = save.count * sizeof(*save.store);
   13e3c:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   13e3e:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   13e40:	a804      	add	r0, sp, #16
   13e42:	f7fa fe8f 	bl	eb64 <settings_save_one>
}
   13e46:	b040      	add	sp, #256	; 0x100
   13e48:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   13e4a:	9400      	str	r4, [sp, #0]
   13e4c:	e7ee      	b.n	13e2c <bt_gatt_store_ccc+0x30>
		str = NULL;
   13e4e:	4611      	mov	r1, r2
   13e50:	e7f6      	b.n	13e40 <bt_gatt_store_ccc+0x44>
   13e52:	bf00      	nop
   13e54:	00013191 	.word	0x00013191
   13e58:	00030c73 	.word	0x00030c73

00013e5c <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   13e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   13e5e:	4603      	mov	r3, r0
   13e60:	4a3d      	ldr	r2, [pc, #244]	; (13f58 <bt_gatt_disconnected+0xfc>)
	if (gatt_ccc_store.conn_list[index] != NULL) {
   13e62:	4e3e      	ldr	r6, [pc, #248]	; (13f5c <bt_gatt_disconnected+0x100>)
{
   13e64:	b08d      	sub	sp, #52	; 0x34
   13e66:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   13e68:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13e6c:	2001      	movs	r0, #1
   13e6e:	f017 fcf7 	bl	2b860 <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   13e72:	4620      	mov	r0, r4
   13e74:	f7fd ff0c 	bl	11c90 <bt_conn_index>
   13e78:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   13e7a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   13e7e:	b120      	cbz	r0, 13e8a <bt_gatt_disconnected+0x2e>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   13e80:	f016 f9f8 	bl	2a274 <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   13e84:	2300      	movs	r3, #0
   13e86:	f846 3025 	str.w	r3, [r6, r5, lsl #2]

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   13e8a:	4835      	ldr	r0, [pc, #212]	; (13f60 <bt_gatt_disconnected+0x104>)
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13e8c:	f104 0588 	add.w	r5, r4, #136	; 0x88
		k_work_cancel_delayable(&gatt_ccc_store.work);
   13e90:	f01a fd14 	bl	2e8bc <k_work_cancel_delayable>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13e94:	7a20      	ldrb	r0, [r4, #8]
   13e96:	4629      	mov	r1, r5
   13e98:	f015 fece 	bl	29c38 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   13e9c:	b348      	cbz	r0, 13ef2 <bt_gatt_disconnected+0x96>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   13e9e:	4629      	mov	r1, r5
   13ea0:	7a20      	ldrb	r0, [r4, #8]
   13ea2:	f7ff ffab 	bl	13dfc <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   13ea6:	4620      	mov	r0, r4
   13ea8:	f7fe ffd8 	bl	12e5c <find_cf_cfg>
	if (!cfg) {
   13eac:	4606      	mov	r6, r0
   13eae:	2800      	cmp	r0, #0
   13eb0:	d03f      	beq.n	13f32 <bt_gatt_disconnected+0xd6>
		if (conn->id) {
   13eb2:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   13eb4:	3608      	adds	r6, #8
		if (conn->id) {
   13eb6:	2a00      	cmp	r2, #0
   13eb8:	d03d      	beq.n	13f36 <bt_gatt_disconnected+0xda>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   13eba:	af02      	add	r7, sp, #8
   13ebc:	2104      	movs	r1, #4
   13ebe:	4638      	mov	r0, r7
   13ec0:	f012 ff6f 	bl	26da2 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   13ec4:	9700      	str	r7, [sp, #0]
   13ec6:	462b      	mov	r3, r5
   13ec8:	4a26      	ldr	r2, [pc, #152]	; (13f64 <bt_gatt_disconnected+0x108>)
   13eca:	2124      	movs	r1, #36	; 0x24
   13ecc:	a803      	add	r0, sp, #12
   13ece:	f7fc f899 	bl	10004 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   13ed2:	7a23      	ldrb	r3, [r4, #8]
   13ed4:	2701      	movs	r7, #1
   13ed6:	b93b      	cbnz	r3, 13ee8 <bt_gatt_disconnected+0x8c>
		bt_settings_encode_key(key, sizeof(key), "cf",
   13ed8:	2300      	movs	r3, #0
   13eda:	9300      	str	r3, [sp, #0]
   13edc:	4a21      	ldr	r2, [pc, #132]	; (13f64 <bt_gatt_disconnected+0x108>)
   13ede:	462b      	mov	r3, r5
   13ee0:	2124      	movs	r1, #36	; 0x24
   13ee2:	a803      	add	r0, sp, #12
   13ee4:	f7fc f88e 	bl	10004 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   13ee8:	463a      	mov	r2, r7
   13eea:	4631      	mov	r1, r6
   13eec:	a803      	add	r0, sp, #12
   13eee:	f7fa fe39 	bl	eb64 <settings_save_one>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13ef2:	7a20      	ldrb	r0, [r4, #8]
   13ef4:	4629      	mov	r1, r5
   13ef6:	f015 fe9f 	bl	29c38 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   13efa:	b150      	cbz	r0, 13f12 <bt_gatt_disconnected+0xb6>
		struct addr_with_id addr_with_id = {
   13efc:	7a23      	ldrb	r3, [r4, #8]
   13efe:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   13f02:	4a19      	ldr	r2, [pc, #100]	; (13f68 <bt_gatt_disconnected+0x10c>)
		struct addr_with_id addr_with_id = {
   13f04:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   13f06:	ab03      	add	r3, sp, #12
   13f08:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13f0c:	2001      	movs	r0, #1
   13f0e:	f017 fca7 	bl	2b860 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   13f12:	4620      	mov	r0, r4
   13f14:	f7fe ffa2 	bl	12e5c <find_cf_cfg>
	if (!cfg) {
   13f18:	4606      	mov	r6, r0
   13f1a:	b1d8      	cbz	r0, 13f54 <bt_gatt_disconnected+0xf8>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13f1c:	7a20      	ldrb	r0, [r4, #8]
   13f1e:	4629      	mov	r1, r5
   13f20:	f015 fe8a 	bl	29c38 <bt_addr_le_is_bonded>
   13f24:	b948      	cbnz	r0, 13f3a <bt_gatt_disconnected+0xde>
		clear_cf_cfg(cfg);
   13f26:	4630      	mov	r0, r6
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   13f28:	b00d      	add	sp, #52	; 0x34
   13f2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		clear_cf_cfg(cfg);
   13f2e:	f017 b9d9 	b.w	2b2e4 <clear_cf_cfg>
		len = 0;
   13f32:	4607      	mov	r7, r0
   13f34:	e7d0      	b.n	13ed8 <bt_gatt_disconnected+0x7c>
   13f36:	2701      	movs	r7, #1
   13f38:	e7ce      	b.n	13ed8 <bt_gatt_disconnected+0x7c>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   13f3a:	4629      	mov	r1, r5
   13f3c:	1c70      	adds	r0, r6, #1
   13f3e:	f017 f946 	bl	2b1ce <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13f42:	f06f 0102 	mvn.w	r1, #2
   13f46:	f106 000c 	add.w	r0, r6, #12
}
   13f4a:	b00d      	add	sp, #52	; 0x34
   13f4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   13f50:	f017 b994 	b.w	2b27c <atomic_and>
   13f54:	b00d      	add	sp, #52	; 0x34
   13f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13f58:	00013259 	.word	0x00013259
   13f5c:	20000e28 	.word	0x20000e28
   13f60:	20000e30 	.word	0x20000e30
   13f64:	00030c7a 	.word	0x00030c7a
   13f68:	000130dd 	.word	0x000130dd

00013f6c <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   13f6c:	4b10      	ldr	r3, [pc, #64]	; (13fb0 <get_io_capa+0x44>)
   13f6e:	681b      	ldr	r3, [r3, #0]
   13f70:	b1bb      	cbz	r3, 13fa2 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   13f72:	681a      	ldr	r2, [r3, #0]
   13f74:	b142      	cbz	r2, 13f88 <get_io_capa+0x1c>
   13f76:	6859      	ldr	r1, [r3, #4]
   13f78:	b131      	cbz	r1, 13f88 <get_io_capa+0x1c>
   13f7a:	6899      	ldr	r1, [r3, #8]
   13f7c:	b911      	cbnz	r1, 13f84 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   13f7e:	490d      	ldr	r1, [pc, #52]	; (13fb4 <get_io_capa+0x48>)
   13f80:	7809      	ldrb	r1, [r1, #0]
   13f82:	b939      	cbnz	r1, 13f94 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   13f84:	2004      	movs	r0, #4
   13f86:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
   13f88:	490a      	ldr	r1, [pc, #40]	; (13fb4 <get_io_capa+0x48>)
   13f8a:	7809      	ldrb	r1, [r1, #0]
   13f8c:	b111      	cbz	r1, 13f94 <get_io_capa+0x28>
   13f8e:	b10a      	cbz	r2, 13f94 <get_io_capa+0x28>
   13f90:	6899      	ldr	r1, [r3, #8]
   13f92:	b941      	cbnz	r1, 13fa6 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
   13f94:	685b      	ldr	r3, [r3, #4]
   13f96:	b943      	cbnz	r3, 13faa <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
   13f98:	2a00      	cmp	r2, #0
   13f9a:	bf0c      	ite	eq
   13f9c:	2003      	moveq	r0, #3
   13f9e:	2000      	movne	r0, #0
   13fa0:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   13fa2:	2003      	movs	r0, #3
   13fa4:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
   13fa6:	2001      	movs	r0, #1
   13fa8:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
   13faa:	2002      	movs	r0, #2
	}
}
   13fac:	4770      	bx	lr
   13fae:	bf00      	nop
   13fb0:	20001688 	.word	0x20001688
   13fb4:	20002d7c 	.word	0x20002d7c

00013fb8 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   13fb8:	4b06      	ldr	r3, [pc, #24]	; (13fd4 <bt_smp_accept+0x1c>)
   13fba:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
   13fbe:	b928      	cbnz	r0, 13fcc <bt_smp_accept+0x14>
			continue;
		}

		smp->chan.chan.ops = &ops;
   13fc0:	4a05      	ldr	r2, [pc, #20]	; (13fd8 <bt_smp_accept+0x20>)
   13fc2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

		*chan = &smp->chan.chan;
   13fc6:	33f0      	adds	r3, #240	; 0xf0
   13fc8:	600b      	str	r3, [r1, #0]

		return 0;
   13fca:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
   13fcc:	f06f 000b 	mvn.w	r0, #11
}
   13fd0:	4770      	bx	lr
   13fd2:	bf00      	nop
   13fd4:	20000eb8 	.word	0x20000eb8
   13fd8:	0002f83c 	.word	0x0002f83c

00013fdc <smp_find>:
{
   13fdc:	4601      	mov	r1, r0
   13fde:	b508      	push	{r3, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   13fe0:	4803      	ldr	r0, [pc, #12]	; (13ff0 <smp_find+0x14>)
   13fe2:	f017 fcfb 	bl	2b9dc <atomic_test_bit>
	return NULL;
   13fe6:	2800      	cmp	r0, #0
}
   13fe8:	4802      	ldr	r0, [pc, #8]	; (13ff4 <smp_find+0x18>)
   13fea:	bf08      	it	eq
   13fec:	2000      	moveq	r0, #0
   13fee:	bd08      	pop	{r3, pc}
   13ff0:	20000ebc 	.word	0x20000ebc
   13ff4:	20000eb8 	.word	0x20000eb8

00013ff8 <get_auth.constprop.0>:
	if (sc_supported) {
   13ff8:	4b0c      	ldr	r3, [pc, #48]	; (1402c <get_auth.constprop.0+0x34>)
   13ffa:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
   13ffc:	b510      	push	{r4, lr}
	if (sc_supported) {
   13ffe:	b17b      	cbz	r3, 14020 <get_auth.constprop.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   14000:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   14004:	f7ff ffb2 	bl	13f6c <get_io_capa>
	if (bondable) {
   14008:	4b09      	ldr	r3, [pc, #36]	; (14030 <get_auth.constprop.0+0x38>)
   1400a:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1400c:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   1400e:	bf0c      	ite	eq
   14010:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   14014:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   14018:	b12b      	cbz	r3, 14026 <get_auth.constprop.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   1401a:	f044 0001 	orr.w	r0, r4, #1
}
   1401e:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   14020:	f000 0407 	and.w	r4, r0, #7
   14024:	e7ee      	b.n	14004 <get_auth.constprop.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   14026:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   1402a:	e7f8      	b.n	1401e <get_auth.constprop.0+0x26>
   1402c:	20002d7c 	.word	0x20002d7c
   14030:	20000875 	.word	0x20000875

00014034 <smp_init>:
{
   14034:	b538      	push	{r3, r4, r5, lr}
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   14036:	22f0      	movs	r2, #240	; 0xf0
{
   14038:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1403a:	2100      	movs	r1, #0
   1403c:	f015 f98e 	bl	2935c <memset>
	if (bt_rand(smp->prnd, 16)) {
   14040:	2110      	movs	r1, #16
   14042:	f105 0027 	add.w	r0, r5, #39	; 0x27
   14046:	f003 ff39 	bl	17ebc <bt_rand>
   1404a:	4604      	mov	r4, r0
   1404c:	b948      	cbnz	r0, 14062 <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   1404e:	2105      	movs	r1, #5
   14050:	4628      	mov	r0, r5
   14052:	f017 fdb6 	bl	2bbc2 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   14056:	f7fd fb89 	bl	1176c <bt_pub_key_get>
   1405a:	4b03      	ldr	r3, [pc, #12]	; (14068 <smp_init+0x34>)
   1405c:	6018      	str	r0, [r3, #0]
}
   1405e:	4620      	mov	r0, r4
   14060:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   14062:	2408      	movs	r4, #8
   14064:	e7fb      	b.n	1405e <smp_init+0x2a>
   14066:	bf00      	nop
   14068:	20001734 	.word	0x20001734

0001406c <smp_dhkey_generate>:
{
   1406c:	b538      	push	{r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1406e:	1d05      	adds	r5, r0, #4
{
   14070:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   14072:	2108      	movs	r1, #8
   14074:	4628      	mov	r0, r5
   14076:	f017 fda4 	bl	2bbc2 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1407a:	4906      	ldr	r1, [pc, #24]	; (14094 <smp_dhkey_generate+0x28>)
   1407c:	f104 0057 	add.w	r0, r4, #87	; 0x57
   14080:	f7fd fb84 	bl	1178c <bt_dh_key_gen>
	if (err) {
   14084:	b120      	cbz	r0, 14090 <smp_dhkey_generate+0x24>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   14086:	4628      	mov	r0, r5
   14088:	2108      	movs	r1, #8
   1408a:	f017 fcd1 	bl	2ba30 <atomic_clear_bit>
		return BT_SMP_ERR_UNSPECIFIED;
   1408e:	2008      	movs	r0, #8
}
   14090:	bd38      	pop	{r3, r4, r5, pc}
   14092:	bf00      	nop
   14094:	0002c125 	.word	0x0002c125

00014098 <smp_send_pairing_confirm>:
{
   14098:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   1409a:	7a04      	ldrb	r4, [r0, #8]
   1409c:	2c02      	cmp	r4, #2
{
   1409e:	4605      	mov	r5, r0
	switch (smp->method) {
   140a0:	d823      	bhi.n	140ea <smp_send_pairing_confirm+0x52>
   140a2:	b144      	cbz	r4, 140b6 <smp_send_pairing_confirm+0x1e>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   140a4:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   140a8:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   140ac:	40dc      	lsrs	r4, r3
   140ae:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   140b2:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   140b6:	2103      	movs	r1, #3
   140b8:	4628      	mov	r0, r5
   140ba:	f017 fdd4 	bl	2bc66 <smp_create_pdu.constprop.0>
	if (!buf) {
   140be:	4606      	mov	r6, r0
   140c0:	b1a8      	cbz	r0, 140ee <smp_send_pairing_confirm+0x56>
   140c2:	2110      	movs	r1, #16
   140c4:	3008      	adds	r0, #8
   140c6:	f019 f984 	bl	2d3d2 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   140ca:	9000      	str	r0, [sp, #0]
   140cc:	4810      	ldr	r0, [pc, #64]	; (14110 <smp_send_pairing_confirm+0x78>)
   140ce:	4623      	mov	r3, r4
   140d0:	6800      	ldr	r0, [r0, #0]
   140d2:	f105 0227 	add.w	r2, r5, #39	; 0x27
   140d6:	f105 0157 	add.w	r1, r5, #87	; 0x57
   140da:	f017 fd4d 	bl	2bb78 <smp_f4>
   140de:	4604      	mov	r4, r0
   140e0:	b148      	cbz	r0, 140f6 <smp_send_pairing_confirm+0x5e>
		net_buf_unref(buf);
   140e2:	4630      	mov	r0, r6
   140e4:	f00f f9d8 	bl	23498 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   140e8:	e001      	b.n	140ee <smp_send_pairing_confirm+0x56>
	switch (smp->method) {
   140ea:	2c03      	cmp	r4, #3
   140ec:	d001      	beq.n	140f2 <smp_send_pairing_confirm+0x5a>
		return BT_SMP_ERR_UNSPECIFIED;
   140ee:	2008      	movs	r0, #8
   140f0:	e00b      	b.n	1410a <smp_send_pairing_confirm+0x72>
	switch (smp->method) {
   140f2:	2400      	movs	r4, #0
   140f4:	e7df      	b.n	140b6 <smp_send_pairing_confirm+0x1e>
	smp_send(smp, buf, NULL, NULL);
   140f6:	4602      	mov	r2, r0
   140f8:	4631      	mov	r1, r6
   140fa:	4628      	mov	r0, r5
   140fc:	f017 fcc5 	bl	2ba8a <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   14100:	1d28      	adds	r0, r5, #4
   14102:	4621      	mov	r1, r4
   14104:	f017 fc94 	bl	2ba30 <atomic_clear_bit>
	return 0;
   14108:	4620      	mov	r0, r4
}
   1410a:	b002      	add	sp, #8
   1410c:	bd70      	pop	{r4, r5, r6, pc}
   1410e:	bf00      	nop
   14110:	20001734 	.word	0x20001734

00014114 <smp_public_key_periph>:
{
   14114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   14118:	1d06      	adds	r6, r0, #4
{
   1411a:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1411c:	210e      	movs	r1, #14
   1411e:	4630      	mov	r0, r6
   14120:	f017 fc5c 	bl	2b9dc <atomic_test_bit>
   14124:	b138      	cbz	r0, 14136 <smp_public_key_periph+0x22>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   14126:	210c      	movs	r1, #12
   14128:	4620      	mov	r0, r4
   1412a:	f017 fd9c 	bl	2bc66 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1412e:	4605      	mov	r5, r0
   14130:	b958      	cbnz	r0, 1414a <smp_public_key_periph+0x36>
	switch (smp->method) {
   14132:	2008      	movs	r0, #8
   14134:	e03c      	b.n	141b0 <smp_public_key_periph+0x9c>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   14136:	4b46      	ldr	r3, [pc, #280]	; (14250 <smp_public_key_periph+0x13c>)
   14138:	2220      	movs	r2, #32
   1413a:	6819      	ldr	r1, [r3, #0]
   1413c:	f104 0057 	add.w	r0, r4, #87	; 0x57
   14140:	f015 f8f0 	bl	29324 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   14144:	2800      	cmp	r0, #0
   14146:	d1ee      	bne.n	14126 <smp_public_key_periph+0x12>
   14148:	e7f3      	b.n	14132 <smp_public_key_periph+0x1e>
   1414a:	2140      	movs	r1, #64	; 0x40
   1414c:	3008      	adds	r0, #8
   1414e:	f019 f940 	bl	2d3d2 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   14152:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 14250 <smp_public_key_periph+0x13c>
   14156:	2220      	movs	r2, #32
   14158:	f8d8 1000 	ldr.w	r1, [r8]
   1415c:	4607      	mov	r7, r0
   1415e:	f015 f8f2 	bl	29346 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   14162:	f8d8 1000 	ldr.w	r1, [r8]
   14166:	2220      	movs	r2, #32
   14168:	4411      	add	r1, r2
   1416a:	18b8      	adds	r0, r7, r2
   1416c:	f015 f8eb 	bl	29346 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   14170:	2200      	movs	r2, #0
   14172:	4629      	mov	r1, r5
   14174:	4620      	mov	r0, r4
   14176:	f017 fc88 	bl	2ba8a <smp_send.constprop.0>
	switch (smp->method) {
   1417a:	7a23      	ldrb	r3, [r4, #8]
   1417c:	2b05      	cmp	r3, #5
   1417e:	d8d8      	bhi.n	14132 <smp_public_key_periph+0x1e>
   14180:	a201      	add	r2, pc, #4	; (adr r2, 14188 <smp_public_key_periph+0x74>)
   14182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14186:	bf00      	nop
   14188:	000141a1 	.word	0x000141a1
   1418c:	00014209 	.word	0x00014209
   14190:	000141b5 	.word	0x000141b5
   14194:	000141a1 	.word	0x000141a1
   14198:	00014133 	.word	0x00014133
   1419c:	00014245 	.word	0x00014245
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   141a0:	2104      	movs	r1, #4
   141a2:	4620      	mov	r0, r4
   141a4:	f017 fd0d 	bl	2bbc2 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   141a8:	f7ff ff76 	bl	14098 <smp_send_pairing_confirm>
		if (err) {
   141ac:	2800      	cmp	r0, #0
   141ae:	d03c      	beq.n	1422a <smp_public_key_periph+0x116>
}
   141b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   141b4:	2104      	movs	r1, #4
   141b6:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   141ba:	f003 fe7f 	bl	17ebc <bt_rand>
   141be:	2800      	cmp	r0, #0
   141c0:	d1b7      	bne.n	14132 <smp_public_key_periph+0x1e>
		smp->passkey %= 1000000;
   141c2:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   141c6:	4a23      	ldr	r2, [pc, #140]	; (14254 <smp_public_key_periph+0x140>)
	if (bt_auth && bt_auth->passkey_display) {
   141c8:	4d23      	ldr	r5, [pc, #140]	; (14258 <smp_public_key_periph+0x144>)
		smp->passkey %= 1000000;
   141ca:	fbb3 f1f2 	udiv	r1, r3, r2
   141ce:	fb02 3311 	mls	r3, r2, r1, r3
   141d2:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (bt_auth && bt_auth->passkey_display) {
   141d6:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
   141d8:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (bt_auth && bt_auth->passkey_display) {
   141dc:	b163      	cbz	r3, 141f8 <smp_public_key_periph+0xe4>
   141de:	681b      	ldr	r3, [r3, #0]
   141e0:	b153      	cbz	r3, 141f8 <smp_public_key_periph+0xe4>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   141e2:	210b      	movs	r1, #11
   141e4:	4630      	mov	r0, r6
   141e6:	f017 fcec 	bl	2bbc2 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   141ea:	682b      	ldr	r3, [r5, #0]
   141ec:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   141f0:	681b      	ldr	r3, [r3, #0]
   141f2:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   141f6:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   141f8:	2103      	movs	r1, #3
   141fa:	4620      	mov	r0, r4
   141fc:	f017 fce1 	bl	2bbc2 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   14200:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   14202:	f017 fcde 	bl	2bbc2 <atomic_set_bit>
		break;
   14206:	e010      	b.n	1422a <smp_public_key_periph+0x116>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   14208:	4620      	mov	r0, r4
   1420a:	2103      	movs	r1, #3
   1420c:	f017 fcd9 	bl	2bbc2 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   14210:	210e      	movs	r1, #14
   14212:	f017 fcd6 	bl	2bbc2 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   14216:	4630      	mov	r0, r6
   14218:	210a      	movs	r1, #10
   1421a:	f017 fcd2 	bl	2bbc2 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
   1421e:	4b0e      	ldr	r3, [pc, #56]	; (14258 <smp_public_key_periph+0x144>)
   14220:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   14224:	681b      	ldr	r3, [r3, #0]
   14226:	685b      	ldr	r3, [r3, #4]
   14228:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1422a:	4630      	mov	r0, r6
   1422c:	2107      	movs	r1, #7
   1422e:	f017 fcc8 	bl	2bbc2 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   14232:	2008      	movs	r0, #8
   14234:	f7ff fed2 	bl	13fdc <smp_find>
   14238:	b938      	cbnz	r0, 1424a <smp_public_key_periph+0x136>
		return smp_dhkey_generate(smp);
   1423a:	4620      	mov	r0, r4
}
   1423c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return smp_dhkey_generate(smp);
   14240:	f7ff bf14 	b.w	1406c <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   14244:	2104      	movs	r1, #4
   14246:	4620      	mov	r0, r4
   14248:	e7db      	b.n	14202 <smp_public_key_periph+0xee>
	return 0;
   1424a:	2000      	movs	r0, #0
   1424c:	e7b0      	b.n	141b0 <smp_public_key_periph+0x9c>
   1424e:	bf00      	nop
   14250:	20001734 	.word	0x20001734
   14254:	000f4240 	.word	0x000f4240
   14258:	20001688 	.word	0x20001688

0001425c <smp_public_key>:
{
   1425c:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
   1425e:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   14260:	f100 0557 	add.w	r5, r0, #87	; 0x57
{
   14264:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   14266:	2220      	movs	r2, #32
   14268:	4631      	mov	r1, r6
   1426a:	4628      	mov	r0, r5
   1426c:	f015 f86b 	bl	29346 <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   14270:	2220      	movs	r2, #32
   14272:	18b1      	adds	r1, r6, r2
   14274:	f104 0077 	add.w	r0, r4, #119	; 0x77
   14278:	f015 f865 	bl	29346 <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1427c:	4628      	mov	r0, r5
   1427e:	f7fd f9ff 	bl	11680 <bt_pub_key_is_debug>
   14282:	b940      	cbnz	r0, 14296 <smp_public_key+0x3a>
	if (!sc_public_key) {
   14284:	4b15      	ldr	r3, [pc, #84]	; (142dc <smp_public_key+0x80>)
   14286:	681d      	ldr	r5, [r3, #0]
   14288:	bb1d      	cbnz	r5, 142d2 <smp_public_key+0x76>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1428a:	1d20      	adds	r0, r4, #4
   1428c:	2106      	movs	r1, #6
   1428e:	f017 fc98 	bl	2bbc2 <atomic_set_bit>
		return 0;
   14292:	4628      	mov	r0, r5
   14294:	e01c      	b.n	142d0 <smp_public_key+0x74>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   14296:	210e      	movs	r1, #14
   14298:	1d20      	adds	r0, r4, #4
   1429a:	f017 fc92 	bl	2bbc2 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1429e:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (!conn->le.keys) {
   142a2:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   142a6:	b933      	cbnz	r3, 142b6 <smp_public_key+0x5a>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   142a8:	7a28      	ldrb	r0, [r5, #8]
   142aa:	f105 0188 	add.w	r1, r5, #136	; 0x88
   142ae:	f000 fe83 	bl	14fb8 <bt_keys_get_addr>
   142b2:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   142b6:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   142ba:	2b00      	cmp	r3, #0
   142bc:	d0e2      	beq.n	14284 <smp_public_key+0x28>
   142be:	89da      	ldrh	r2, [r3, #14]
   142c0:	f002 0224 	and.w	r2, r2, #36	; 0x24
   142c4:	2a00      	cmp	r2, #0
   142c6:	d0dd      	beq.n	14284 <smp_public_key+0x28>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   142c8:	7b5b      	ldrb	r3, [r3, #13]
   142ca:	079b      	lsls	r3, r3, #30
   142cc:	d4da      	bmi.n	14284 <smp_public_key+0x28>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   142ce:	2003      	movs	r0, #3
}
   142d0:	bd70      	pop	{r4, r5, r6, pc}
	err = smp_public_key_periph(smp);
   142d2:	4620      	mov	r0, r4
}
   142d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = smp_public_key_periph(smp);
   142d8:	f7ff bf1c 	b.w	14114 <smp_public_key_periph>
   142dc:	20001734 	.word	0x20001734

000142e0 <smp_pairing_req>:
{
   142e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
   142e4:	688f      	ldr	r7, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   142e6:	78fb      	ldrb	r3, [r7, #3]
   142e8:	3b07      	subs	r3, #7
   142ea:	2b09      	cmp	r3, #9
{
   142ec:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   142ee:	d904      	bls.n	142fa <smp_pairing_req+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   142f0:	2706      	movs	r7, #6
}
   142f2:	4638      	mov	r0, r7
   142f4:	b002      	add	sp, #8
   142f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
   142fa:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
	if (!conn->le.keys) {
   142fe:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
   14302:	b15b      	cbz	r3, 1431c <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   14304:	1d25      	adds	r5, r4, #4
   14306:	210f      	movs	r1, #15
   14308:	4628      	mov	r0, r5
   1430a:	f017 fb67 	bl	2b9dc <atomic_test_bit>
   1430e:	b980      	cbnz	r0, 14332 <smp_pairing_req+0x52>
		int ret = smp_init(smp);
   14310:	4620      	mov	r0, r4
   14312:	f7ff fe8f 	bl	14034 <smp_init>
		if (ret) {
   14316:	b160      	cbz	r0, 14332 <smp_pairing_req+0x52>
			return ret;
   14318:	b2c7      	uxtb	r7, r0
   1431a:	e7ea      	b.n	142f2 <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1431c:	7a30      	ldrb	r0, [r6, #8]
   1431e:	f106 0188 	add.w	r1, r6, #136	; 0x88
   14322:	f000 fe49 	bl	14fb8 <bt_keys_get_addr>
   14326:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
		if (!conn->le.keys) {
   1432a:	2800      	cmp	r0, #0
   1432c:	d1ea      	bne.n	14304 <smp_pairing_req+0x24>
	switch (sec) {
   1432e:	2708      	movs	r7, #8
   14330:	e7df      	b.n	142f2 <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   14332:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   14334:	2206      	movs	r2, #6
   14336:	4639      	mov	r1, r7
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   14338:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   1433a:	f104 000a 	add.w	r0, r4, #10
   1433e:	f015 f802 	bl	29346 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   14342:	2302      	movs	r3, #2
   14344:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(conn, req->auth_req);
   14346:	78b8      	ldrb	r0, [r7, #2]
   14348:	f7ff fe56 	bl	13ff8 <get_auth.constprop.0>
   1434c:	74e0      	strb	r0, [r4, #19]
   1434e:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
   14350:	f7ff fe0c 	bl	13f6c <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   14354:	4ba1      	ldr	r3, [pc, #644]	; (145dc <smp_pairing_req+0x2fc>)
	rsp->io_capability = get_io_capa();
   14356:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   14358:	781b      	ldrb	r3, [r3, #0]
   1435a:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1435c:	2310      	movs	r3, #16
   1435e:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   14360:	793b      	ldrb	r3, [r7, #4]
   14362:	f003 0303 	and.w	r3, r3, #3
   14366:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   14368:	797b      	ldrb	r3, [r7, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1436a:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1436e:	f003 0301 	and.w	r3, r3, #1
   14372:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   14374:	d00c      	beq.n	14390 <smp_pairing_req+0xb0>
   14376:	78bb      	ldrb	r3, [r7, #2]
   14378:	0719      	lsls	r1, r3, #28
   1437a:	d509      	bpl.n	14390 <smp_pairing_req+0xb0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1437c:	2105      	movs	r1, #5
   1437e:	4628      	mov	r0, r5
   14380:	f017 fc1f 	bl	2bbc2 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   14384:	7d63      	ldrb	r3, [r4, #21]
   14386:	f003 0302 	and.w	r3, r3, #2
   1438a:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   1438c:	2300      	movs	r3, #0
   1438e:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   14390:	7ce3      	ldrb	r3, [r4, #19]
   14392:	069a      	lsls	r2, r3, #26
   14394:	d506      	bpl.n	143a4 <smp_pairing_req+0xc4>
   14396:	78bb      	ldrb	r3, [r7, #2]
   14398:	069b      	lsls	r3, r3, #26
   1439a:	d503      	bpl.n	143a4 <smp_pairing_req+0xc4>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1439c:	2114      	movs	r1, #20
   1439e:	4628      	mov	r0, r5
   143a0:	f017 fc0f 	bl	2bbc2 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   143a4:	7da3      	ldrb	r3, [r4, #22]
   143a6:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   143aa:	7d63      	ldrb	r3, [r4, #21]
   143ac:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   143b0:	7ce3      	ldrb	r3, [r4, #19]
   143b2:	07d8      	lsls	r0, r3, #31
   143b4:	d506      	bpl.n	143c4 <smp_pairing_req+0xe4>
   143b6:	78bb      	ldrb	r3, [r7, #2]
   143b8:	07d9      	lsls	r1, r3, #31
   143ba:	d503      	bpl.n	143c4 <smp_pairing_req+0xe4>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   143bc:	210d      	movs	r1, #13
   143be:	4628      	mov	r0, r5
   143c0:	f017 fbff 	bl	2bbc2 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   143c4:	2103      	movs	r1, #3
   143c6:	4628      	mov	r0, r5
   143c8:	f017 fbfb 	bl	2bbc2 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   143cc:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   143ce:	783f      	ldrb	r7, [r7, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   143d0:	f017 fb04 	bl	2b9dc <atomic_test_bit>
   143d4:	bb28      	cbnz	r0, 14422 <smp_pairing_req+0x142>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   143d6:	2f04      	cmp	r7, #4
   143d8:	d841      	bhi.n	1445e <smp_pairing_req+0x17e>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   143da:	7ca2      	ldrb	r2, [r4, #18]
   143dc:	7ae3      	ldrb	r3, [r4, #11]
   143de:	4013      	ands	r3, r2
   143e0:	07da      	lsls	r2, r3, #31
   143e2:	d43a      	bmi.n	1445a <smp_pairing_req+0x17a>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   143e4:	7b21      	ldrb	r1, [r4, #12]
   143e6:	7ce0      	ldrb	r0, [r4, #19]
   143e8:	4301      	orrs	r1, r0
   143ea:	f011 0104 	ands.w	r1, r1, #4
   143ee:	d00f      	beq.n	14410 <smp_pairing_req+0x130>
	method = gen_method_legacy[remote_io][get_io_capa()];
   143f0:	f7ff fdbc 	bl	13f6c <get_io_capa>
   143f4:	4b7a      	ldr	r3, [pc, #488]	; (145e0 <smp_pairing_req+0x300>)
   143f6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   143fa:	441f      	add	r7, r3
   143fc:	5c39      	ldrb	r1, [r7, r0]
	if (method == PASSKEY_ROLE) {
   143fe:	2904      	cmp	r1, #4
   14400:	d106      	bne.n	14410 <smp_pairing_req+0x130>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   14402:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   14406:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
   14408:	2b00      	cmp	r3, #0
   1440a:	bf0c      	ite	eq
   1440c:	2102      	moveq	r1, #2
   1440e:	2101      	movne	r1, #1
	smp->method = get_pair_method(smp, req->io_capability);
   14410:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   14412:	f8d6 10b4 	ldr.w	r1, [r6, #180]	; 0xb4
   14416:	4620      	mov	r0, r4
   14418:	f017 fae9 	bl	2b9ee <update_keys_check>
   1441c:	bb08      	cbnz	r0, 14462 <smp_pairing_req+0x182>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1441e:	2703      	movs	r7, #3
   14420:	e767      	b.n	142f2 <smp_pairing_req+0x12>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   14422:	7b20      	ldrb	r0, [r4, #12]
   14424:	7ce2      	ldrb	r2, [r4, #19]
   14426:	ea00 0302 	and.w	r3, r0, r2
   1442a:	071b      	lsls	r3, r3, #28
   1442c:	d506      	bpl.n	1443c <smp_pairing_req+0x15c>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1442e:	7ae3      	ldrb	r3, [r4, #11]
   14430:	f894 c012 	ldrb.w	ip, [r4, #18]
   14434:	ea43 030c 	orr.w	r3, r3, ip
   14438:	07db      	lsls	r3, r3, #31
   1443a:	d4e9      	bmi.n	14410 <smp_pairing_req+0x130>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1443c:	2f04      	cmp	r7, #4
   1443e:	d80e      	bhi.n	1445e <smp_pairing_req+0x17e>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   14440:	ea40 0102 	orr.w	r1, r0, r2
   14444:	f011 0104 	ands.w	r1, r1, #4
   14448:	d0e2      	beq.n	14410 <smp_pairing_req+0x130>
	return gen_method_sc[remote_io][get_io_capa()];
   1444a:	f7ff fd8f 	bl	13f6c <get_io_capa>
   1444e:	4b65      	ldr	r3, [pc, #404]	; (145e4 <smp_pairing_req+0x304>)
   14450:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   14454:	441f      	add	r7, r3
   14456:	5c39      	ldrb	r1, [r7, r0]
   14458:	e7da      	b.n	14410 <smp_pairing_req+0x130>
		return LEGACY_OOB;
   1445a:	2106      	movs	r1, #6
   1445c:	e7d8      	b.n	14410 <smp_pairing_req+0x130>
		return JUST_WORKS;
   1445e:	2100      	movs	r1, #0
   14460:	e7d6      	b.n	14410 <smp_pairing_req+0x130>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   14462:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   14466:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   14468:	2b03      	cmp	r3, #3
   1446a:	d040      	beq.n	144ee <smp_pairing_req+0x20e>
   1446c:	d82e      	bhi.n	144cc <smp_pairing_req+0x1ec>
   1446e:	3b01      	subs	r3, #1
   14470:	2b01      	cmp	r3, #1
   14472:	f63f af5c 	bhi.w	1432e <smp_pairing_req+0x4e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   14476:	2105      	movs	r1, #5
   14478:	4628      	mov	r0, r5
   1447a:	f017 faaf 	bl	2b9dc <atomic_test_bit>
   1447e:	2800      	cmp	r0, #0
   14480:	f040 80b6 	bne.w	145f0 <smp_pairing_req+0x310>
	struct bt_conn *conn = smp->chan.chan.conn;
   14484:	f8d4 60f0 	ldr.w	r6, [r4, #240]	; 0xf0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   14488:	7a30      	ldrb	r0, [r6, #8]
   1448a:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1448e:	f000 fe21 	bl	150d4 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   14492:	7a23      	ldrb	r3, [r4, #8]
   14494:	b128      	cbz	r0, 144a2 <smp_pairing_req+0x1c2>
   14496:	7b42      	ldrb	r2, [r0, #13]
   14498:	07d2      	lsls	r2, r2, #31
   1449a:	d502      	bpl.n	144a2 <smp_pairing_req+0x1c2>
   1449c:	2b00      	cmp	r3, #0
   1449e:	f43f af46 	beq.w	1432e <smp_pairing_req+0x4e>
	switch (smp->method) {
   144a2:	2b06      	cmp	r3, #6
   144a4:	f63f af43 	bhi.w	1432e <smp_pairing_req+0x4e>
   144a8:	a201      	add	r2, pc, #4	; (adr r2, 144b0 <smp_pairing_req+0x1d0>)
   144aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   144ae:	bf00      	nop
   144b0:	00014525 	.word	0x00014525
   144b4:	000145ab 	.word	0x000145ab
   144b8:	00014555 	.word	0x00014555
   144bc:	0001432f 	.word	0x0001432f
   144c0:	0001432f 	.word	0x0001432f
   144c4:	0001432f 	.word	0x0001432f
   144c8:	000144f7 	.word	0x000144f7
	switch (sec) {
   144cc:	2b04      	cmp	r3, #4
   144ce:	f47f af2e 	bne.w	1432e <smp_pairing_req+0x4e>
	return MIN(req->max_key_size, rsp->max_key_size);
   144d2:	7d23      	ldrb	r3, [r4, #20]
   144d4:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   144d6:	4293      	cmp	r3, r2
   144d8:	bf28      	it	cs
   144da:	4613      	movcs	r3, r2
   144dc:	2b10      	cmp	r3, #16
   144de:	f47f af07 	bne.w	142f0 <smp_pairing_req+0x10>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   144e2:	2105      	movs	r1, #5
   144e4:	4628      	mov	r0, r5
   144e6:	f017 fa79 	bl	2b9dc <atomic_test_bit>
   144ea:	2800      	cmp	r0, #0
   144ec:	d097      	beq.n	1441e <smp_pairing_req+0x13e>
		if (smp->method == JUST_WORKS) {
   144ee:	7a23      	ldrb	r3, [r4, #8]
   144f0:	2b00      	cmp	r3, #0
   144f2:	d1c0      	bne.n	14476 <smp_pairing_req+0x196>
   144f4:	e793      	b.n	1441e <smp_pairing_req+0x13e>
		if (bt_auth && bt_auth->oob_data_request) {
   144f6:	4e3c      	ldr	r6, [pc, #240]	; (145e8 <smp_pairing_req+0x308>)
   144f8:	6833      	ldr	r3, [r6, #0]
   144fa:	2b00      	cmp	r3, #0
   144fc:	d05f      	beq.n	145be <smp_pairing_req+0x2de>
   144fe:	68db      	ldr	r3, [r3, #12]
   14500:	2b00      	cmp	r3, #0
   14502:	d05c      	beq.n	145be <smp_pairing_req+0x2de>
			struct bt_conn_oob_info info = {
   14504:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   14506:	210a      	movs	r1, #10
   14508:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   1450a:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1450e:	f017 fb58 	bl	2bbc2 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   14512:	6833      	ldr	r3, [r6, #0]
   14514:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   14518:	68db      	ldr	r3, [r3, #12]
   1451a:	a901      	add	r1, sp, #4
   1451c:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1451e:	7a23      	ldrb	r3, [r4, #8]
   14520:	2b00      	cmp	r3, #0
   14522:	d14e      	bne.n	145c2 <smp_pairing_req+0x2e2>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   14524:	210f      	movs	r1, #15
   14526:	4628      	mov	r0, r5
   14528:	f017 fa58 	bl	2b9dc <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1452c:	4607      	mov	r7, r0
   1452e:	2800      	cmp	r0, #0
   14530:	d147      	bne.n	145c2 <smp_pairing_req+0x2e2>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   14532:	4e2d      	ldr	r6, [pc, #180]	; (145e8 <smp_pairing_req+0x308>)
   14534:	6833      	ldr	r3, [r6, #0]
   14536:	2b00      	cmp	r3, #0
   14538:	d043      	beq.n	145c2 <smp_pairing_req+0x2e2>
	    bt_auth && bt_auth->pairing_confirm) {
   1453a:	695b      	ldr	r3, [r3, #20]
   1453c:	2b00      	cmp	r3, #0
   1453e:	d040      	beq.n	145c2 <smp_pairing_req+0x2e2>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   14540:	4628      	mov	r0, r5
   14542:	210a      	movs	r1, #10
   14544:	f017 fb3d 	bl	2bbc2 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   14548:	6833      	ldr	r3, [r6, #0]
   1454a:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1454e:	695b      	ldr	r3, [r3, #20]
		bt_auth->pairing_confirm(conn);
   14550:	4798      	blx	r3
		return 0;
   14552:	e6ce      	b.n	142f2 <smp_pairing_req+0x12>
			if (bt_rand(&passkey, sizeof(passkey))) {
   14554:	2104      	movs	r1, #4
   14556:	eb0d 0001 	add.w	r0, sp, r1
   1455a:	f003 fcaf 	bl	17ebc <bt_rand>
   1455e:	2800      	cmp	r0, #0
   14560:	f47f aee5 	bne.w	1432e <smp_pairing_req+0x4e>
			passkey %= 1000000;
   14564:	9b01      	ldr	r3, [sp, #4]
   14566:	4a21      	ldr	r2, [pc, #132]	; (145ec <smp_pairing_req+0x30c>)
		if (bt_auth && bt_auth->passkey_display) {
   14568:	4f1f      	ldr	r7, [pc, #124]	; (145e8 <smp_pairing_req+0x308>)
			passkey %= 1000000;
   1456a:	fbb3 f1f2 	udiv	r1, r3, r2
   1456e:	fb02 3311 	mls	r3, r2, r1, r3
   14572:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
   14574:	683b      	ldr	r3, [r7, #0]
   14576:	b153      	cbz	r3, 1458e <smp_pairing_req+0x2ae>
   14578:	681b      	ldr	r3, [r3, #0]
   1457a:	b143      	cbz	r3, 1458e <smp_pairing_req+0x2ae>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1457c:	210b      	movs	r1, #11
   1457e:	4628      	mov	r0, r5
   14580:	f017 fb1f 	bl	2bbc2 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
   14584:	683b      	ldr	r3, [r7, #0]
   14586:	9901      	ldr	r1, [sp, #4]
   14588:	681b      	ldr	r3, [r3, #0]
   1458a:	4630      	mov	r0, r6
   1458c:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1458e:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
   14590:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   14594:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   14598:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1459a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1459e:	0a1b      	lsrs	r3, r3, #8
   145a0:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   145a4:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   145a8:	e7b9      	b.n	1451e <smp_pairing_req+0x23e>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   145aa:	4628      	mov	r0, r5
   145ac:	210a      	movs	r1, #10
   145ae:	f017 fb08 	bl	2bbc2 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
   145b2:	4b0d      	ldr	r3, [pc, #52]	; (145e8 <smp_pairing_req+0x308>)
   145b4:	681b      	ldr	r3, [r3, #0]
   145b6:	4630      	mov	r0, r6
   145b8:	685b      	ldr	r3, [r3, #4]
   145ba:	4798      	blx	r3
	if (ret) {
   145bc:	e7af      	b.n	1451e <smp_pairing_req+0x23e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   145be:	2702      	movs	r7, #2
   145c0:	e697      	b.n	142f2 <smp_pairing_req+0x12>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   145c2:	2103      	movs	r1, #3
   145c4:	4620      	mov	r0, r4
   145c6:	f017 fafc 	bl	2bbc2 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   145ca:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   145cc:	f017 faf9 	bl	2bbc2 <atomic_set_bit>
}
   145d0:	b002      	add	sp, #8
   145d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
   145d6:	f017 bb65 	b.w	2bca4 <send_pairing_rsp>
   145da:	bf00      	nop
   145dc:	20002d7b 	.word	0x20002d7b
   145e0:	00030ca3 	.word	0x00030ca3
   145e4:	00030cbc 	.word	0x00030cbc
   145e8:	20001688 	.word	0x20001688
   145ec:	000f4240 	.word	0x000f4240
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   145f0:	7a27      	ldrb	r7, [r4, #8]
   145f2:	b9a7      	cbnz	r7, 1461e <smp_pairing_req+0x33e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   145f4:	210f      	movs	r1, #15
   145f6:	4628      	mov	r0, r5
   145f8:	f017 f9f0 	bl	2b9dc <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   145fc:	b978      	cbnz	r0, 1461e <smp_pairing_req+0x33e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   145fe:	f8df 8024 	ldr.w	r8, [pc, #36]	; 14624 <smp_pairing_req+0x344>
   14602:	f8d8 3000 	ldr.w	r3, [r8]
   14606:	b153      	cbz	r3, 1461e <smp_pairing_req+0x33e>
	    bt_auth && bt_auth->pairing_confirm) {
   14608:	695b      	ldr	r3, [r3, #20]
   1460a:	b143      	cbz	r3, 1461e <smp_pairing_req+0x33e>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1460c:	4628      	mov	r0, r5
   1460e:	210a      	movs	r1, #10
   14610:	f017 fad7 	bl	2bbc2 <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   14614:	f8d8 3000 	ldr.w	r3, [r8]
   14618:	4630      	mov	r0, r6
   1461a:	695b      	ldr	r3, [r3, #20]
   1461c:	e798      	b.n	14550 <smp_pairing_req+0x270>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1461e:	210c      	movs	r1, #12
   14620:	4620      	mov	r0, r4
   14622:	e7d3      	b.n	145cc <smp_pairing_req+0x2ec>
   14624:	20001688 	.word	0x20001688

00014628 <compute_and_check_and_send_periph_dhcheck>:
{
   14628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)memset(r, 0, sizeof(r));
   1462c:	2210      	movs	r2, #16
{
   1462e:	b0a3      	sub	sp, #140	; 0x8c
   14630:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   14632:	2100      	movs	r1, #0
   14634:	eb0d 0002 	add.w	r0, sp, r2
   14638:	f014 fe90 	bl	2935c <memset>
	switch (smp->method) {
   1463c:	7a23      	ldrb	r3, [r4, #8]
   1463e:	2b05      	cmp	r3, #5
   14640:	d87f      	bhi.n	14742 <compute_and_check_and_send_periph_dhcheck+0x11a>
   14642:	e8df f003 	tbb	[pc, r3]
   14646:	0309      	.short	0x0309
   14648:	807e0903 	.word	0x807e0903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1464c:	2204      	movs	r2, #4
   1464e:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
   14652:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   14654:	f014 fe77 	bl	29346 <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
   14658:	4b63      	ldr	r3, [pc, #396]	; (147e8 <compute_and_check_and_send_periph_dhcheck+0x1c0>)
		   &smp->chan.chan.conn->le.init_addr,
   1465a:	f8d4 90f0 	ldr.w	r9, [r4, #240]	; 0xf0
	uint8_t m[53] = { 0x00, /* counter */
   1465e:	aa14      	add	r2, sp, #80	; 0x50
   14660:	f103 0630 	add.w	r6, r3, #48	; 0x30
   14664:	6818      	ldr	r0, [r3, #0]
   14666:	6859      	ldr	r1, [r3, #4]
   14668:	4615      	mov	r5, r2
   1466a:	c503      	stmia	r5!, {r0, r1}
   1466c:	3308      	adds	r3, #8
   1466e:	42b3      	cmp	r3, r6
   14670:	462a      	mov	r2, r5
   14672:	d1f7      	bne.n	14664 <compute_and_check_and_send_periph_dhcheck+0x3c>
   14674:	6818      	ldr	r0, [r3, #0]
   14676:	791b      	ldrb	r3, [r3, #4]
   14678:	6028      	str	r0, [r5, #0]
   1467a:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
   1467c:	ad0c      	add	r5, sp, #48	; 0x30
   1467e:	2220      	movs	r2, #32
   14680:	f104 0197 	add.w	r1, r4, #151	; 0x97
   14684:	4628      	mov	r0, r5
   14686:	f017 f996 	bl	2b9b6 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   1468a:	4858      	ldr	r0, [pc, #352]	; (147ec <compute_and_check_and_send_periph_dhcheck+0x1c4>)
   1468c:	ab08      	add	r3, sp, #32
   1468e:	2220      	movs	r2, #32
   14690:	4629      	mov	r1, r5
   14692:	f017 f9dc 	bl	2ba4e <bt_smp_aes_cmac>
	if (err) {
   14696:	2800      	cmp	r0, #0
   14698:	d153      	bne.n	14742 <compute_and_check_and_send_periph_dhcheck+0x11a>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1469a:	f104 0737 	add.w	r7, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
   1469e:	2210      	movs	r2, #16
   146a0:	4639      	mov	r1, r7
   146a2:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   146a6:	f104 0827 	add.w	r8, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
   146aa:	f017 f984 	bl	2b9b6 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   146ae:	2210      	movs	r2, #16
   146b0:	4641      	mov	r1, r8
   146b2:	f10d 0065 	add.w	r0, sp, #101	; 0x65
   146b6:	f017 f97e 	bl	2b9b6 <sys_memcpy_swap>
	m[37] = a1->type;
   146ba:	f899 308f 	ldrb.w	r3, [r9, #143]	; 0x8f
   146be:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   146c2:	2206      	movs	r2, #6
   146c4:	f109 0190 	add.w	r1, r9, #144	; 0x90
   146c8:	f10d 0076 	add.w	r0, sp, #118	; 0x76
   146cc:	f017 f973 	bl	2b9b6 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   146d0:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	m[44] = a2->type;
   146d4:	f899 3096 	ldrb.w	r3, [r9, #150]	; 0x96
   146d8:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   146dc:	2206      	movs	r2, #6
   146de:	f109 0197 	add.w	r1, r9, #151	; 0x97
   146e2:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
   146e6:	f017 f966 	bl	2b9b6 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   146ea:	4633      	mov	r3, r6
   146ec:	2235      	movs	r2, #53	; 0x35
   146ee:	a914      	add	r1, sp, #80	; 0x50
   146f0:	a808      	add	r0, sp, #32
   146f2:	f017 f9ac 	bl	2ba4e <bt_smp_aes_cmac>
	if (err) {
   146f6:	bb20      	cbnz	r0, 14742 <compute_and_check_and_send_periph_dhcheck+0x11a>
	sys_mem_swap(mackey, 16);
   146f8:	4630      	mov	r0, r6
   146fa:	f017 f9e3 	bl	2bac4 <sys_mem_swap.constprop.0>
		   smp->tk)) {
   146fe:	f104 0947 	add.w	r9, r4, #71	; 0x47
	m[0] = 0x01;
   14702:	2301      	movs	r3, #1
   14704:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   14708:	2235      	movs	r2, #53	; 0x35
   1470a:	464b      	mov	r3, r9
   1470c:	a914      	add	r1, sp, #80	; 0x50
   1470e:	a808      	add	r0, sp, #32
   14710:	f017 f99d 	bl	2ba4e <bt_smp_aes_cmac>
	if (err) {
   14714:	b9a8      	cbnz	r0, 14742 <compute_and_check_and_send_periph_dhcheck+0x11a>
	sys_mem_swap(ltk, 16);
   14716:	4648      	mov	r0, r9
   14718:	f017 f9d4 	bl	2bac4 <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.resp_addr,
   1471c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   14720:	aa14      	add	r2, sp, #80	; 0x50
   14722:	9203      	str	r2, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
   14724:	f103 028f 	add.w	r2, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
   14728:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1472a:	9301      	str	r3, [sp, #4]
   1472c:	f104 0311 	add.w	r3, r4, #17
   14730:	9202      	str	r2, [sp, #8]
   14732:	9300      	str	r3, [sp, #0]
   14734:	463a      	mov	r2, r7
   14736:	ab04      	add	r3, sp, #16
   14738:	4641      	mov	r1, r8
   1473a:	4630      	mov	r0, r6
   1473c:	f017 f9d0 	bl	2bae0 <smp_f6>
   14740:	b148      	cbz	r0, 14756 <compute_and_check_and_send_periph_dhcheck+0x12e>
		return BT_SMP_ERR_UNSPECIFIED;
   14742:	2008      	movs	r0, #8
   14744:	e047      	b.n	147d6 <compute_and_check_and_send_periph_dhcheck+0x1ae>
		if (smp->oobd_remote) {
   14746:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   1474a:	2900      	cmp	r1, #0
   1474c:	d084      	beq.n	14658 <compute_and_check_and_send_periph_dhcheck+0x30>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1474e:	2210      	movs	r2, #16
   14750:	eb0d 0002 	add.w	r0, sp, r2
   14754:	e77e      	b.n	14654 <compute_and_check_and_send_periph_dhcheck+0x2c>
	if (smp->method == LE_SC_OOB) {
   14756:	7a23      	ldrb	r3, [r4, #8]
   14758:	2b05      	cmp	r3, #5
   1475a:	d108      	bne.n	1476e <compute_and_check_and_send_periph_dhcheck+0x146>
		if (smp->oobd_local) {
   1475c:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   14760:	2210      	movs	r2, #16
   14762:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
   14766:	2900      	cmp	r1, #0
   14768:	d038      	beq.n	147dc <compute_and_check_and_send_periph_dhcheck+0x1b4>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1476a:	f014 fdec 	bl	29346 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   1476e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   14772:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   14774:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   14778:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1477a:	9301      	str	r3, [sp, #4]
   1477c:	f104 030a 	add.w	r3, r4, #10
   14780:	9202      	str	r2, [sp, #8]
   14782:	9300      	str	r3, [sp, #0]
   14784:	4642      	mov	r2, r8
   14786:	ab04      	add	r3, sp, #16
   14788:	4639      	mov	r1, r7
   1478a:	4630      	mov	r0, r6
   1478c:	f017 f9a8 	bl	2bae0 <smp_f6>
   14790:	2800      	cmp	r0, #0
   14792:	d1d6      	bne.n	14742 <compute_and_check_and_send_periph_dhcheck+0x11a>
	if (memcmp(smp->e, re, 16)) {
   14794:	4629      	mov	r1, r5
   14796:	2210      	movs	r2, #16
   14798:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1479c:	f014 fdc2 	bl	29324 <memcmp>
   147a0:	4605      	mov	r5, r0
   147a2:	b9f0      	cbnz	r0, 147e2 <compute_and_check_and_send_periph_dhcheck+0x1ba>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   147a4:	210d      	movs	r1, #13
   147a6:	4620      	mov	r0, r4
   147a8:	f017 fa5d 	bl	2bc66 <smp_create_pdu.constprop.0>
	if (!buf) {
   147ac:	4606      	mov	r6, r0
   147ae:	2800      	cmp	r0, #0
   147b0:	d0c7      	beq.n	14742 <compute_and_check_and_send_periph_dhcheck+0x11a>
   147b2:	2110      	movs	r1, #16
   147b4:	3008      	adds	r0, #8
   147b6:	f018 fe0c 	bl	2d3d2 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   147ba:	2210      	movs	r2, #16
   147bc:	a914      	add	r1, sp, #80	; 0x50
   147be:	f014 fdc2 	bl	29346 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   147c2:	462a      	mov	r2, r5
   147c4:	4631      	mov	r1, r6
   147c6:	4620      	mov	r0, r4
   147c8:	f017 f95f 	bl	2ba8a <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   147cc:	1d20      	adds	r0, r4, #4
   147ce:	2101      	movs	r1, #1
   147d0:	f017 f9f7 	bl	2bbc2 <atomic_set_bit>
	return 0;
   147d4:	4628      	mov	r0, r5
}
   147d6:	b023      	add	sp, #140	; 0x8c
   147d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			memset(r, 0, sizeof(r));
   147dc:	f014 fdbe 	bl	2935c <memset>
   147e0:	e7c5      	b.n	1476e <compute_and_check_and_send_periph_dhcheck+0x146>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   147e2:	200b      	movs	r0, #11
   147e4:	e7f7      	b.n	147d6 <compute_and_check_and_send_periph_dhcheck+0x1ae>
   147e6:	bf00      	nop
   147e8:	0002f2b2 	.word	0x0002f2b2
   147ec:	00030cd5 	.word	0x00030cd5

000147f0 <bt_smp_connected>:
{
   147f0:	b510      	push	{r4, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   147f2:	4905      	ldr	r1, [pc, #20]	; (14808 <bt_smp_connected+0x18>)
   147f4:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   147f8:	30e8      	adds	r0, #232	; 0xe8
   147fa:	f01a f853 	bl	2e8a4 <k_work_init_delayable>
	smp_reset(smp);
   147fe:	4620      	mov	r0, r4
}
   14800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
   14804:	f017 bac3 	b.w	2bd8e <smp_reset>
   14808:	0002c36f 	.word	0x0002c36f

0001480c <smp_pairing_random>:
{
   1480c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14810:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   14812:	f100 0737 	add.w	r7, r0, #55	; 0x37
   14816:	6889      	ldr	r1, [r1, #8]
{
   14818:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1481a:	2210      	movs	r2, #16
   1481c:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1481e:	1d26      	adds	r6, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   14820:	f014 fd91 	bl	29346 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   14824:	2105      	movs	r1, #5
   14826:	4630      	mov	r0, r6
   14828:	f017 f8d8 	bl	2b9dc <atomic_test_bit>
   1482c:	2800      	cmp	r0, #0
   1482e:	d13e      	bne.n	148ae <smp_pairing_random+0xa2>
	struct bt_conn *conn = smp->chan.chan.conn;
   14830:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   14834:	f104 0847 	add.w	r8, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   14838:	f103 0296 	add.w	r2, r3, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1483c:	ad0a      	add	r5, sp, #40	; 0x28
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1483e:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   14840:	9201      	str	r2, [sp, #4]
   14842:	9300      	str	r3, [sp, #0]
   14844:	9502      	str	r5, [sp, #8]
   14846:	f104 0310 	add.w	r3, r4, #16
   1484a:	f104 0209 	add.w	r2, r4, #9
   1484e:	4639      	mov	r1, r7
   14850:	4640      	mov	r0, r8
   14852:	f017 fabf 	bl	2bdd4 <smp_c1>
	if (err) {
   14856:	b108      	cbz	r0, 1485c <smp_pairing_random+0x50>
	switch (smp->method) {
   14858:	2508      	movs	r5, #8
   1485a:	e096      	b.n	1498a <smp_pairing_random+0x17e>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1485c:	2210      	movs	r2, #16
   1485e:	4629      	mov	r1, r5
   14860:	f104 0017 	add.w	r0, r4, #23
   14864:	f014 fd5e 	bl	29324 <memcmp>
   14868:	2800      	cmp	r0, #0
   1486a:	f040 808d 	bne.w	14988 <smp_pairing_random+0x17c>
	memcpy(out, r2, 8);
   1486e:	2208      	movs	r2, #8
   14870:	4639      	mov	r1, r7
   14872:	4628      	mov	r0, r5
   14874:	f014 fd67 	bl	29346 <memcpy>
	memcpy(out + 8, r1, 8);
   14878:	2208      	movs	r2, #8
   1487a:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1487e:	a80c      	add	r0, sp, #48	; 0x30
   14880:	f014 fd61 	bl	29346 <memcpy>
	return bt_encrypt_le(k, out, out);
   14884:	462a      	mov	r2, r5
   14886:	4629      	mov	r1, r5
   14888:	4640      	mov	r0, r8
   1488a:	f003 fb19 	bl	17ec0 <bt_encrypt_le>
		if (err) {
   1488e:	2800      	cmp	r0, #0
   14890:	d1e2      	bne.n	14858 <smp_pairing_random+0x4c>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   14892:	4629      	mov	r1, r5
   14894:	2210      	movs	r2, #16
   14896:	4640      	mov	r0, r8
   14898:	f014 fd55 	bl	29346 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1489c:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1489e:	4630      	mov	r0, r6
   148a0:	f017 f98f 	bl	2bbc2 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   148a4:	4620      	mov	r0, r4
   148a6:	f017 fa16 	bl	2bcd6 <smp_send_pairing_random>
   148aa:	4605      	mov	r5, r0
   148ac:	e06d      	b.n	1498a <smp_pairing_random+0x17e>
	switch (smp->method) {
   148ae:	7a23      	ldrb	r3, [r4, #8]
   148b0:	2b05      	cmp	r3, #5
   148b2:	d8d1      	bhi.n	14858 <smp_pairing_random+0x4c>
   148b4:	a201      	add	r2, pc, #4	; (adr r2, 148bc <smp_pairing_random+0xb0>)
   148b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   148ba:	bf00      	nop
   148bc:	00014945 	.word	0x00014945
   148c0:	00014951 	.word	0x00014951
   148c4:	00014951 	.word	0x00014951
   148c8:	000148d5 	.word	0x000148d5
   148cc:	00014859 	.word	0x00014859
   148d0:	000149d7 	.word	0x000149d7
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   148d4:	4b59      	ldr	r3, [pc, #356]	; (14a3c <smp_pairing_random+0x230>)
   148d6:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
   148d8:	2220      	movs	r2, #32
   148da:	f104 0157 	add.w	r1, r4, #87	; 0x57
   148de:	a80a      	add	r0, sp, #40	; 0x28
   148e0:	f017 f869 	bl	2b9b6 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   148e4:	2220      	movs	r2, #32
   148e6:	4629      	mov	r1, r5
   148e8:	a812      	add	r0, sp, #72	; 0x48
   148ea:	f017 f864 	bl	2b9b6 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   148ee:	2210      	movs	r2, #16
   148f0:	f104 0127 	add.w	r1, r4, #39	; 0x27
   148f4:	a81a      	add	r0, sp, #104	; 0x68
   148f6:	f017 f85e 	bl	2b9b6 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   148fa:	2210      	movs	r2, #16
   148fc:	4639      	mov	r1, r7
   148fe:	a806      	add	r0, sp, #24
   14900:	f017 f859 	bl	2b9b6 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   14904:	ab06      	add	r3, sp, #24
   14906:	2250      	movs	r2, #80	; 0x50
   14908:	a90a      	add	r1, sp, #40	; 0x28
   1490a:	4618      	mov	r0, r3
   1490c:	f017 f89f 	bl	2ba4e <bt_smp_aes_cmac>
	if (err) {
   14910:	2800      	cmp	r0, #0
   14912:	d1a1      	bne.n	14858 <smp_pairing_random+0x4c>
	memcpy(passkey, xs + 12, 4);
   14914:	2204      	movs	r2, #4
   14916:	a909      	add	r1, sp, #36	; 0x24
   14918:	a805      	add	r0, sp, #20
   1491a:	f014 fd14 	bl	29346 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1491e:	9b05      	ldr	r3, [sp, #20]
   14920:	4a47      	ldr	r2, [pc, #284]	; (14a40 <smp_pairing_random+0x234>)
   14922:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   14924:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   14926:	fbb3 f1f2 	udiv	r1, r3, r2
   1492a:	fb02 3311 	mls	r3, r2, r1, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1492e:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   14930:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   14932:	f017 f946 	bl	2bbc2 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   14936:	4b43      	ldr	r3, [pc, #268]	; (14a44 <smp_pairing_random+0x238>)
   14938:	9905      	ldr	r1, [sp, #20]
   1493a:	681b      	ldr	r3, [r3, #0]
   1493c:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   14940:	689b      	ldr	r3, [r3, #8]
   14942:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   14944:	210d      	movs	r1, #13
   14946:	4620      	mov	r0, r4
   14948:	f017 f93b 	bl	2bbc2 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1494c:	2110      	movs	r1, #16
   1494e:	e7a6      	b.n	1489e <smp_pairing_random+0x92>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   14950:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   14954:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   14958:	4938      	ldr	r1, [pc, #224]	; (14a3c <smp_pairing_random+0x230>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1495a:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1495c:	ad0a      	add	r5, sp, #40	; 0x28
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1495e:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   14962:	9500      	str	r5, [sp, #0]
   14964:	6809      	ldr	r1, [r1, #0]
   14966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1496a:	463a      	mov	r2, r7
   1496c:	f104 0057 	add.w	r0, r4, #87	; 0x57
   14970:	f017 f902 	bl	2bb78 <smp_f4>
   14974:	2800      	cmp	r0, #0
   14976:	f47f af6f 	bne.w	14858 <smp_pairing_random+0x4c>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1497a:	2210      	movs	r2, #16
   1497c:	4629      	mov	r1, r5
   1497e:	f104 0017 	add.w	r0, r4, #23
   14982:	f014 fccf 	bl	29324 <memcmp>
   14986:	b120      	cbz	r0, 14992 <smp_pairing_random+0x186>
		return BT_SMP_ERR_CONFIRM_FAILED;
   14988:	2504      	movs	r5, #4
}
   1498a:	4628      	mov	r0, r5
   1498c:	b01e      	add	sp, #120	; 0x78
   1498e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(smp->allowed_cmds,
   14992:	2103      	movs	r1, #3
   14994:	4620      	mov	r0, r4
   14996:	f017 f914 	bl	2bbc2 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   1499a:	f017 f99c 	bl	2bcd6 <smp_send_pairing_random>
		if (err) {
   1499e:	4605      	mov	r5, r0
   149a0:	2800      	cmp	r0, #0
   149a2:	d1f2      	bne.n	1498a <smp_pairing_random+0x17e>
		smp->passkey_round++;
   149a4:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   149a8:	3301      	adds	r3, #1
   149aa:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   149ac:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   149ae:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   149b2:	d108      	bne.n	149c6 <smp_pairing_random+0x1ba>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   149b4:	4620      	mov	r0, r4
   149b6:	210d      	movs	r1, #13
   149b8:	f017 f903 	bl	2bbc2 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   149bc:	2110      	movs	r1, #16
   149be:	4630      	mov	r0, r6
   149c0:	f017 f8ff 	bl	2bbc2 <atomic_set_bit>
			return 0;
   149c4:	e7e1      	b.n	1498a <smp_pairing_random+0x17e>
		if (bt_rand(smp->prnd, 16)) {
   149c6:	2110      	movs	r1, #16
   149c8:	f104 0027 	add.w	r0, r4, #39	; 0x27
   149cc:	f003 fa76 	bl	17ebc <bt_rand>
   149d0:	2800      	cmp	r0, #0
   149d2:	d0da      	beq.n	1498a <smp_pairing_random+0x17e>
   149d4:	e740      	b.n	14858 <smp_pairing_random+0x4c>
		if (bt_rand(smp->prnd, 16)) {
   149d6:	2110      	movs	r1, #16
   149d8:	f104 0027 	add.w	r0, r4, #39	; 0x27
   149dc:	f003 fa6e 	bl	17ebc <bt_rand>
   149e0:	2800      	cmp	r0, #0
   149e2:	f47f af39 	bne.w	14858 <smp_pairing_random+0x4c>
		if (bt_auth && bt_auth->oob_data_request) {
   149e6:	4f17      	ldr	r7, [pc, #92]	; (14a44 <smp_pairing_random+0x238>)
   149e8:	683b      	ldr	r3, [r7, #0]
   149ea:	b18b      	cbz	r3, 14a10 <smp_pairing_random+0x204>
   149ec:	68db      	ldr	r3, [r3, #12]
   149ee:	b17b      	cbz	r3, 14a10 <smp_pairing_random+0x204>
			struct bt_conn_oob_info info = {
   149f0:	4b15      	ldr	r3, [pc, #84]	; (14a48 <smp_pairing_random+0x23c>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   149f2:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   149f4:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
   149f8:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   149fc:	7ca3      	ldrb	r3, [r4, #18]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   149fe:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   14a00:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   14a04:	d406      	bmi.n	14a14 <smp_pairing_random+0x208>
				     BT_CONN_OOB_BOTH_PEERS :
   14a06:	2b00      	cmp	r3, #0
   14a08:	bf0c      	ite	eq
   14a0a:	2003      	moveq	r0, #3
   14a0c:	2001      	movne	r0, #1
   14a0e:	e004      	b.n	14a1a <smp_pairing_random+0x20e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   14a10:	2502      	movs	r5, #2
   14a12:	e7ba      	b.n	1498a <smp_pairing_random+0x17e>
				     BT_CONN_OOB_BOTH_PEERS :
   14a14:	2b00      	cmp	r3, #0
   14a16:	bf18      	it	ne
   14a18:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
   14a1a:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
   14a1c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
			smp->oobd_remote = NULL;
   14a20:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   14a24:	4630      	mov	r0, r6
   14a26:	210c      	movs	r1, #12
   14a28:	f017 f8cb 	bl	2bbc2 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   14a2c:	683b      	ldr	r3, [r7, #0]
   14a2e:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   14a32:	68db      	ldr	r3, [r3, #12]
   14a34:	a90a      	add	r1, sp, #40	; 0x28
   14a36:	4798      	blx	r3
			return 0;
   14a38:	e7a7      	b.n	1498a <smp_pairing_random+0x17e>
   14a3a:	bf00      	nop
   14a3c:	20001734 	.word	0x20001734
   14a40:	000f4240 	.word	0x000f4240
   14a44:	20001688 	.word	0x20001688
   14a48:	0002f2b2 	.word	0x0002f2b2

00014a4c <bt_smp_start_security>:
{
   14a4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   14a50:	78c4      	ldrb	r4, [r0, #3]
   14a52:	2c01      	cmp	r4, #1
{
   14a54:	4605      	mov	r5, r0
	switch (conn->role) {
   14a56:	d005      	beq.n	14a64 <bt_smp_start_security+0x18>
		return -EINVAL;
   14a58:	f06f 0415 	mvn.w	r4, #21
}
   14a5c:	4620      	mov	r0, r4
   14a5e:	b003      	add	sp, #12
   14a60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   14a64:	f016 ffb3 	bl	2b9ce <smp_chan_get>
	if (!smp) {
   14a68:	4606      	mov	r6, r0
   14a6a:	2800      	cmp	r0, #0
   14a6c:	f000 80a4 	beq.w	14bb8 <bt_smp_start_security+0x16c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   14a70:	1d07      	adds	r7, r0, #4
   14a72:	2104      	movs	r1, #4
   14a74:	4638      	mov	r0, r7
   14a76:	f016 ffb1 	bl	2b9dc <atomic_test_bit>
   14a7a:	2800      	cmp	r0, #0
   14a7c:	f040 809f 	bne.w	14bbe <bt_smp_start_security+0x172>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   14a80:	2103      	movs	r1, #3
   14a82:	4638      	mov	r0, r7
   14a84:	f016 ffaa 	bl	2b9dc <atomic_test_bit>
   14a88:	b110      	cbz	r0, 14a90 <bt_smp_start_security+0x44>
		return -EBUSY;
   14a8a:	f06f 040f 	mvn.w	r4, #15
   14a8e:	e7e5      	b.n	14a5c <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   14a90:	4621      	mov	r1, r4
   14a92:	4638      	mov	r0, r7
   14a94:	f016 ffa2 	bl	2b9dc <atomic_test_bit>
   14a98:	2800      	cmp	r0, #0
   14a9a:	d1f6      	bne.n	14a8a <bt_smp_start_security+0x3e>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   14a9c:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
   14a9e:	2b03      	cmp	r3, #3
   14aa0:	d03d      	beq.n	14b1e <bt_smp_start_security+0xd2>
   14aa2:	d82c      	bhi.n	14afe <bt_smp_start_security+0xb2>
   14aa4:	3b01      	subs	r3, #1
   14aa6:	2b01      	cmp	r3, #1
   14aa8:	d946      	bls.n	14b38 <bt_smp_start_security+0xec>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   14aaa:	210a      	movs	r1, #10
   14aac:	1d28      	adds	r0, r5, #4
   14aae:	f016 ff95 	bl	2b9dc <atomic_test_bit>
   14ab2:	2800      	cmp	r0, #0
   14ab4:	d1d0      	bne.n	14a58 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   14ab6:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   14aba:	b983      	cbnz	r3, 14ade <bt_smp_start_security+0x92>
						     conn->id, &conn->le.dst);
   14abc:	f105 0488 	add.w	r4, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   14ac0:	7a29      	ldrb	r1, [r5, #8]
   14ac2:	4622      	mov	r2, r4
   14ac4:	2020      	movs	r0, #32
   14ac6:	f000 fab7 	bl	15038 <bt_keys_find>
   14aca:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   14ace:	b930      	cbnz	r0, 14ade <bt_smp_start_security+0x92>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   14ad0:	7a29      	ldrb	r1, [r5, #8]
   14ad2:	4622      	mov	r2, r4
   14ad4:	2004      	movs	r0, #4
   14ad6:	f000 faaf 	bl	15038 <bt_keys_find>
   14ada:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   14ade:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   14ae2:	2b00      	cmp	r3, #0
   14ae4:	d0b8      	beq.n	14a58 <bt_smp_start_security+0xc>
   14ae6:	89da      	ldrh	r2, [r3, #14]
   14ae8:	f002 0224 	and.w	r2, r2, #36	; 0x24
   14aec:	2a00      	cmp	r2, #0
   14aee:	d0b3      	beq.n	14a58 <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   14af0:	7aaa      	ldrb	r2, [r5, #10]
   14af2:	2a02      	cmp	r2, #2
   14af4:	d920      	bls.n	14b38 <bt_smp_start_security+0xec>
   14af6:	7b5b      	ldrb	r3, [r3, #13]
   14af8:	07db      	lsls	r3, r3, #31
   14afa:	d5ad      	bpl.n	14a58 <bt_smp_start_security+0xc>
   14afc:	e01c      	b.n	14b38 <bt_smp_start_security+0xec>
	switch (conn->required_sec_level) {
   14afe:	2b04      	cmp	r3, #4
   14b00:	d1d3      	bne.n	14aaa <bt_smp_start_security+0x5e>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   14b02:	f7ff fa33 	bl	13f6c <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   14b06:	2803      	cmp	r0, #3
   14b08:	d104      	bne.n	14b14 <bt_smp_start_security+0xc8>
   14b0a:	4b2e      	ldr	r3, [pc, #184]	; (14bc4 <bt_smp_start_security+0x178>)
   14b0c:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   14b0e:	b1f3      	cbz	r3, 14b4e <bt_smp_start_security+0x102>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   14b10:	68dc      	ldr	r4, [r3, #12]
   14b12:	b10c      	cbz	r4, 14b18 <bt_smp_start_security+0xcc>
   14b14:	4b2c      	ldr	r3, [pc, #176]	; (14bc8 <bt_smp_start_security+0x17c>)
   14b16:	781c      	ldrb	r4, [r3, #0]
   14b18:	f004 0401 	and.w	r4, r4, #1
   14b1c:	e00a      	b.n	14b34 <bt_smp_start_security+0xe8>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   14b1e:	f7ff fa25 	bl	13f6c <get_io_capa>
   14b22:	2803      	cmp	r0, #3
   14b24:	d106      	bne.n	14b34 <bt_smp_start_security+0xe8>
		       (bt_auth && bt_auth->oob_data_request);
   14b26:	4b27      	ldr	r3, [pc, #156]	; (14bc4 <bt_smp_start_security+0x178>)
   14b28:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   14b2a:	b11c      	cbz	r4, 14b34 <bt_smp_start_security+0xe8>
		       (bt_auth && bt_auth->oob_data_request);
   14b2c:	68e4      	ldr	r4, [r4, #12]
   14b2e:	3c00      	subs	r4, #0
   14b30:	bf18      	it	ne
   14b32:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   14b34:	2c00      	cmp	r4, #0
   14b36:	d0b8      	beq.n	14aaa <bt_smp_start_security+0x5e>
	if (!conn->le.keys) {
   14b38:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   14b3c:	b14b      	cbz	r3, 14b52 <bt_smp_start_security+0x106>
	if (smp_init(smp) != 0) {
   14b3e:	4630      	mov	r0, r6
   14b40:	f7ff fa78 	bl	14034 <smp_init>
   14b44:	4604      	mov	r4, r0
   14b46:	b180      	cbz	r0, 14b6a <bt_smp_start_security+0x11e>
		return -ENOBUFS;
   14b48:	f06f 0468 	mvn.w	r4, #104	; 0x68
   14b4c:	e786      	b.n	14a5c <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   14b4e:	2400      	movs	r4, #0
   14b50:	e7e2      	b.n	14b18 <bt_smp_start_security+0xcc>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   14b52:	7a28      	ldrb	r0, [r5, #8]
   14b54:	f105 0188 	add.w	r1, r5, #136	; 0x88
   14b58:	f000 fa2e 	bl	14fb8 <bt_keys_get_addr>
   14b5c:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   14b60:	2800      	cmp	r0, #0
   14b62:	d1ec      	bne.n	14b3e <bt_smp_start_security+0xf2>
			return -ENOMEM;
   14b64:	f06f 040b 	mvn.w	r4, #11
   14b68:	e778      	b.n	14a5c <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   14b6a:	210b      	movs	r1, #11
   14b6c:	4630      	mov	r0, r6
   14b6e:	f017 f87a 	bl	2bc66 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   14b72:	4680      	mov	r8, r0
   14b74:	2800      	cmp	r0, #0
   14b76:	d0e7      	beq.n	14b48 <bt_smp_start_security+0xfc>
   14b78:	2101      	movs	r1, #1
   14b7a:	3008      	adds	r0, #8
   14b7c:	f018 fc29 	bl	2d3d2 <net_buf_simple_add>
   14b80:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   14b82:	2009      	movs	r0, #9
   14b84:	f7ff fa38 	bl	13ff8 <get_auth.constprop.0>
   14b88:	4623      	mov	r3, r4
   14b8a:	f889 0000 	strb.w	r0, [r9]
   14b8e:	4642      	mov	r2, r8
   14b90:	9400      	str	r4, [sp, #0]
   14b92:	2106      	movs	r1, #6
   14b94:	4628      	mov	r0, r5
   14b96:	f015 fcdb 	bl	2a550 <bt_l2cap_send_cb>
	if (err) {
   14b9a:	4604      	mov	r4, r0
   14b9c:	b118      	cbz	r0, 14ba6 <bt_smp_start_security+0x15a>
		net_buf_unref(req_buf);
   14b9e:	4640      	mov	r0, r8
   14ba0:	f00e fc7a 	bl	23498 <net_buf_unref>
		return err;
   14ba4:	e75a      	b.n	14a5c <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   14ba6:	4638      	mov	r0, r7
   14ba8:	210f      	movs	r1, #15
   14baa:	f017 f80a 	bl	2bbc2 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   14bae:	2101      	movs	r1, #1
   14bb0:	4630      	mov	r0, r6
   14bb2:	f017 f806 	bl	2bbc2 <atomic_set_bit>
	return 0;
   14bb6:	e751      	b.n	14a5c <bt_smp_start_security+0x10>
		return -ENOTCONN;
   14bb8:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   14bbc:	e74e      	b.n	14a5c <bt_smp_start_security+0x10>
		return -EIO;
   14bbe:	f06f 0404 	mvn.w	r4, #4
   14bc2:	e74b      	b.n	14a5c <bt_smp_start_security+0x10>
   14bc4:	20001688 	.word	0x20001688
   14bc8:	20002d7c 	.word	0x20002d7c

00014bcc <smp_pairing_complete>:
{
   14bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   14bce:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
{
   14bd2:	4606      	mov	r6, r0
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   14bd4:	1d05      	adds	r5, r0, #4
	if (!status) {
   14bd6:	b9f1      	cbnz	r1, 14c16 <smp_pairing_complete+0x4a>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   14bd8:	210d      	movs	r1, #13
   14bda:	4628      	mov	r0, r5
   14bdc:	f016 fefe 	bl	2b9dc <atomic_test_bit>
		if (bond_flag) {
   14be0:	4607      	mov	r7, r0
   14be2:	b118      	cbz	r0, 14bec <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   14be4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   14be8:	f000 faac 	bl	15144 <bt_keys_store>
	return list->head;
   14bec:	4b31      	ldr	r3, [pc, #196]	; (14cb4 <smp_pairing_complete+0xe8>)
   14bee:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   14bf0:	2b00      	cmp	r3, #0
   14bf2:	d051      	beq.n	14c98 <smp_pairing_complete+0xcc>
	return node->next;
   14bf4:	f853 590c 	ldr.w	r5, [r3], #-12
   14bf8:	b105      	cbz	r5, 14bfc <smp_pairing_complete+0x30>
   14bfa:	3d0c      	subs	r5, #12
			if (listener->pairing_complete) {
   14bfc:	681b      	ldr	r3, [r3, #0]
   14bfe:	b113      	cbz	r3, 14c06 <smp_pairing_complete+0x3a>
				listener->pairing_complete(conn, bond_flag);
   14c00:	4639      	mov	r1, r7
   14c02:	4620      	mov	r0, r4
   14c04:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   14c06:	2d00      	cmp	r5, #0
   14c08:	d046      	beq.n	14c98 <smp_pairing_complete+0xcc>
   14c0a:	68ea      	ldr	r2, [r5, #12]
   14c0c:	b102      	cbz	r2, 14c10 <smp_pairing_complete+0x44>
   14c0e:	3a0c      	subs	r2, #12
{
   14c10:	462b      	mov	r3, r5
   14c12:	4615      	mov	r5, r2
   14c14:	e7f2      	b.n	14bfc <smp_pairing_complete+0x30>
	switch (smp_err) {
   14c16:	3901      	subs	r1, #1
   14c18:	b2c9      	uxtb	r1, r1
   14c1a:	290e      	cmp	r1, #14
   14c1c:	bf9c      	itt	ls
   14c1e:	4b26      	ldrls	r3, [pc, #152]	; (14cb8 <smp_pairing_complete+0xec>)
   14c20:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   14c22:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
   14c26:	bf88      	it	hi
   14c28:	2709      	movhi	r7, #9
		if (conn->le.keys &&
   14c2a:	b143      	cbz	r3, 14c3e <smp_pairing_complete+0x72>
   14c2c:	7b1b      	ldrb	r3, [r3, #12]
   14c2e:	bb63      	cbnz	r3, 14c8a <smp_pairing_complete+0xbe>
			bt_keys_clear(conn->le.keys);
   14c30:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   14c34:	f000 fa5e 	bl	150f4 <bt_keys_clear>
			conn->le.keys = NULL;
   14c38:	2300      	movs	r3, #0
   14c3a:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   14c3e:	2102      	movs	r1, #2
   14c40:	4628      	mov	r0, r5
   14c42:	f016 fecb 	bl	2b9dc <atomic_test_bit>
   14c46:	b940      	cbnz	r0, 14c5a <smp_pairing_complete+0x8e>
	switch (err) {
   14c48:	2f07      	cmp	r7, #7
   14c4a:	bf96      	itet	ls
   14c4c:	4b1b      	ldrls	r3, [pc, #108]	; (14cbc <smp_pairing_complete+0xf0>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   14c4e:	211f      	movhi	r1, #31
   14c50:	5dd9      	ldrbls	r1, [r3, r7]
			bt_conn_security_changed(conn,
   14c52:	463a      	mov	r2, r7
   14c54:	4620      	mov	r0, r4
   14c56:	f7fd f8e5 	bl	11e24 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   14c5a:	2103      	movs	r1, #3
   14c5c:	4628      	mov	r0, r5
   14c5e:	f016 febd 	bl	2b9dc <atomic_test_bit>
   14c62:	b1c8      	cbz	r0, 14c98 <smp_pairing_complete+0xcc>
	return list->head;
   14c64:	4b13      	ldr	r3, [pc, #76]	; (14cb4 <smp_pairing_complete+0xe8>)
   14c66:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   14c68:	b1b3      	cbz	r3, 14c98 <smp_pairing_complete+0xcc>
	return node->next;
   14c6a:	f853 590c 	ldr.w	r5, [r3], #-12
   14c6e:	b105      	cbz	r5, 14c72 <smp_pairing_complete+0xa6>
   14c70:	3d0c      	subs	r5, #12
				if (listener->pairing_failed) {
   14c72:	685b      	ldr	r3, [r3, #4]
   14c74:	b113      	cbz	r3, 14c7c <smp_pairing_complete+0xb0>
					listener->pairing_failed(conn, security_err);
   14c76:	4639      	mov	r1, r7
   14c78:	4620      	mov	r0, r4
   14c7a:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   14c7c:	b165      	cbz	r5, 14c98 <smp_pairing_complete+0xcc>
   14c7e:	68ea      	ldr	r2, [r5, #12]
   14c80:	b102      	cbz	r2, 14c84 <smp_pairing_complete+0xb8>
   14c82:	3a0c      	subs	r2, #12
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   14c84:	462b      	mov	r3, r5
   14c86:	4615      	mov	r5, r2
   14c88:	e7f3      	b.n	14c72 <smp_pairing_complete+0xa6>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   14c8a:	2102      	movs	r1, #2
   14c8c:	4628      	mov	r0, r5
   14c8e:	f016 fea5 	bl	2b9dc <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   14c92:	2800      	cmp	r0, #0
   14c94:	d1cc      	bne.n	14c30 <smp_pairing_complete+0x64>
   14c96:	e7d2      	b.n	14c3e <smp_pairing_complete+0x72>
	smp_reset(smp);
   14c98:	4630      	mov	r0, r6
   14c9a:	f017 f878 	bl	2bd8e <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   14c9e:	7a62      	ldrb	r2, [r4, #9]
   14ca0:	7aa3      	ldrb	r3, [r4, #10]
   14ca2:	429a      	cmp	r2, r3
   14ca4:	d004      	beq.n	14cb0 <smp_pairing_complete+0xe4>
		bt_smp_start_security(conn);
   14ca6:	4620      	mov	r0, r4
}
   14ca8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   14cac:	f7ff bece 	b.w	14a4c <bt_smp_start_security>
}
   14cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14cb2:	bf00      	nop
   14cb4:	2000168c 	.word	0x2000168c
   14cb8:	00030c83 	.word	0x00030c83
   14cbc:	00030c9b 	.word	0x00030c9b

00014cc0 <bt_smp_recv>:
{
   14cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   14cc2:	898b      	ldrh	r3, [r1, #12]
{
   14cc4:	4607      	mov	r7, r0
   14cc6:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   14cc8:	b393      	cbz	r3, 14d30 <bt_smp_recv+0x70>
	return net_buf_simple_pull_mem(&buf->b, len);
   14cca:	2101      	movs	r1, #1
   14ccc:	f105 0008 	add.w	r0, r5, #8
   14cd0:	f018 fba6 	bl	2d420 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   14cd4:	2104      	movs	r1, #4
   14cd6:	4606      	mov	r6, r0
   14cd8:	f1a7 00ec 	sub.w	r0, r7, #236	; 0xec
   14cdc:	f1a7 04f0 	sub.w	r4, r7, #240	; 0xf0
   14ce0:	f016 fe7c 	bl	2b9dc <atomic_test_bit>
   14ce4:	bb20      	cbnz	r0, 14d30 <bt_smp_recv+0x70>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   14ce6:	7831      	ldrb	r1, [r6, #0]
   14ce8:	290e      	cmp	r1, #14
   14cea:	d821      	bhi.n	14d30 <bt_smp_recv+0x70>
	if (!handlers[hdr->code].func) {
   14cec:	4f11      	ldr	r7, [pc, #68]	; (14d34 <bt_smp_recv+0x74>)
   14cee:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
   14cf2:	b923      	cbnz	r3, 14cfe <bt_smp_recv+0x3e>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   14cf4:	2107      	movs	r1, #7
		smp_error(smp, err);
   14cf6:	4620      	mov	r0, r4
   14cf8:	f017 f9dc 	bl	2c0b4 <smp_error>
   14cfc:	e018      	b.n	14d30 <bt_smp_recv+0x70>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   14cfe:	4620      	mov	r0, r4
   14d00:	f017 f82d 	bl	2bd5e <atomic_test_and_clear_bit>
   14d04:	7833      	ldrb	r3, [r6, #0]
   14d06:	b918      	cbnz	r0, 14d10 <bt_smp_recv+0x50>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   14d08:	2b05      	cmp	r3, #5
   14d0a:	d011      	beq.n	14d30 <bt_smp_recv+0x70>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   14d0c:	2108      	movs	r1, #8
   14d0e:	e7f2      	b.n	14cf6 <bt_smp_recv+0x36>
	if (buf->len != handlers[hdr->code].expect_len) {
   14d10:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   14d14:	89a9      	ldrh	r1, [r5, #12]
   14d16:	7912      	ldrb	r2, [r2, #4]
   14d18:	4291      	cmp	r1, r2
   14d1a:	d001      	beq.n	14d20 <bt_smp_recv+0x60>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   14d1c:	210a      	movs	r1, #10
   14d1e:	e7ea      	b.n	14cf6 <bt_smp_recv+0x36>
	err = handlers[hdr->code].func(smp, buf);
   14d20:	4629      	mov	r1, r5
   14d22:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
   14d26:	4620      	mov	r0, r4
   14d28:	4798      	blx	r3
	if (err) {
   14d2a:	4601      	mov	r1, r0
   14d2c:	2800      	cmp	r0, #0
   14d2e:	d1e2      	bne.n	14cf6 <bt_smp_recv+0x36>
}
   14d30:	2000      	movs	r0, #0
   14d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14d34:	0002f7c4 	.word	0x0002f7c4

00014d38 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   14d38:	4b0c      	ldr	r3, [pc, #48]	; (14d6c <bt_smp_pkey_ready+0x34>)
{
   14d3a:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   14d3c:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   14d3e:	b1a0      	cbz	r0, 14d6a <bt_smp_pkey_ready+0x32>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14d40:	4c0b      	ldr	r4, [pc, #44]	; (14d70 <bt_smp_pkey_ready+0x38>)
	z_impl_k_sem_give(sem);
   14d42:	480c      	ldr	r0, [pc, #48]	; (14d74 <bt_smp_pkey_ready+0x3c>)
   14d44:	f011 f818 	bl	25d78 <z_impl_k_sem_give>
   14d48:	f3bf 8f5b 	dmb	ish
   14d4c:	6863      	ldr	r3, [r4, #4]
   14d4e:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   14d52:	065b      	lsls	r3, r3, #25
   14d54:	d509      	bpl.n	14d6a <bt_smp_pkey_ready+0x32>
		err = smp_public_key_periph(smp);
   14d56:	4620      	mov	r0, r4
   14d58:	f7ff f9dc 	bl	14114 <smp_public_key_periph>
		if (err) {
   14d5c:	4601      	mov	r1, r0
   14d5e:	b120      	cbz	r0, 14d6a <bt_smp_pkey_ready+0x32>
			smp_error(smp, err);
   14d60:	4620      	mov	r0, r4
}
   14d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
   14d66:	f017 b9a5 	b.w	2c0b4 <smp_error>
}
   14d6a:	bd10      	pop	{r4, pc}
   14d6c:	20001734 	.word	0x20001734
   14d70:	20000eb8 	.word	0x20000eb8
   14d74:	20000970 	.word	0x20000970

00014d78 <smp_pairing_failed>:
{
   14d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   14d7a:	1d05      	adds	r5, r0, #4
	struct bt_conn *conn = smp->chan.chan.conn;
   14d7c:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   14d80:	688e      	ldr	r6, [r1, #8]
{
   14d82:	4604      	mov	r4, r0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   14d84:	210a      	movs	r1, #10
   14d86:	4628      	mov	r0, r5
   14d88:	f016 ffe9 	bl	2bd5e <atomic_test_and_clear_bit>
   14d8c:	b140      	cbz	r0, 14da0 <smp_pairing_failed+0x28>
		if (bt_auth && bt_auth->cancel) {
   14d8e:	4b0b      	ldr	r3, [pc, #44]	; (14dbc <smp_pairing_failed+0x44>)
   14d90:	681b      	ldr	r3, [r3, #0]
   14d92:	b963      	cbnz	r3, 14dae <smp_pairing_failed+0x36>
	smp_pairing_complete(smp, req->reason);
   14d94:	4620      	mov	r0, r4
   14d96:	7831      	ldrb	r1, [r6, #0]
   14d98:	f7ff ff18 	bl	14bcc <smp_pairing_complete>
}
   14d9c:	2000      	movs	r0, #0
   14d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   14da0:	210b      	movs	r1, #11
   14da2:	4628      	mov	r0, r5
   14da4:	f016 ffdb 	bl	2bd5e <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   14da8:	2800      	cmp	r0, #0
   14daa:	d1f0      	bne.n	14d8e <smp_pairing_failed+0x16>
   14dac:	e7f2      	b.n	14d94 <smp_pairing_failed+0x1c>
		if (bt_auth && bt_auth->cancel) {
   14dae:	691b      	ldr	r3, [r3, #16]
   14db0:	2b00      	cmp	r3, #0
   14db2:	d0ef      	beq.n	14d94 <smp_pairing_failed+0x1c>
			bt_auth->cancel(conn);
   14db4:	4638      	mov	r0, r7
   14db6:	4798      	blx	r3
   14db8:	e7ec      	b.n	14d94 <smp_pairing_failed+0x1c>
   14dba:	bf00      	nop
   14dbc:	20001688 	.word	0x20001688

00014dc0 <bt_smp_encrypt_change>:
{
   14dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = chan->conn;
   14dc4:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   14dc6:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
{
   14dca:	b088      	sub	sp, #32
   14dcc:	4604      	mov	r4, r0
   14dce:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   14dd0:	4630      	mov	r0, r6
   14dd2:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   14dd4:	f855 89f0 	ldr.w	r8, [r5], #-240
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   14dd8:	f016 ffc1 	bl	2bd5e <atomic_test_and_clear_bit>
   14ddc:	2800      	cmp	r0, #0
   14dde:	f000 80c6 	beq.w	14f6e <bt_smp_encrypt_change+0x1ae>
	if (hci_status) {
   14de2:	b1df      	cbz	r7, 14e1c <bt_smp_encrypt_change+0x5c>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   14de4:	2103      	movs	r1, #3
   14de6:	4630      	mov	r0, r6
   14de8:	f016 fdf8 	bl	2b9dc <atomic_test_bit>
   14dec:	2800      	cmp	r0, #0
   14dee:	f000 80be 	beq.w	14f6e <bt_smp_encrypt_change+0x1ae>
			uint8_t smp_err = smp_err_get(
   14df2:	4638      	mov	r0, r7
   14df4:	f7fb fd52 	bl	1089c <bt_security_err_get>
	switch (auth_err) {
   14df8:	3801      	subs	r0, #1
   14dfa:	b2c0      	uxtb	r0, r0
   14dfc:	2808      	cmp	r0, #8
   14dfe:	bf9a      	itte	ls
   14e00:	4b60      	ldrls	r3, [pc, #384]	; (14f84 <bt_smp_encrypt_change+0x1c4>)
   14e02:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
   14e04:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   14e06:	2102      	movs	r1, #2
   14e08:	4630      	mov	r0, r6
   14e0a:	f016 feda 	bl	2bbc2 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   14e0e:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   14e10:	4628      	mov	r0, r5
}
   14e12:	b008      	add	sp, #32
   14e14:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		smp_pairing_complete(smp, 0);
   14e18:	f7ff bed8 	b.w	14bcc <smp_pairing_complete>
	if (!conn->encrypt) {
   14e1c:	f898 300b 	ldrb.w	r3, [r8, #11]
   14e20:	2b00      	cmp	r3, #0
   14e22:	f000 80a4 	beq.w	14f6e <bt_smp_encrypt_change+0x1ae>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   14e26:	2103      	movs	r1, #3
   14e28:	4630      	mov	r0, r6
   14e2a:	f016 fdd7 	bl	2b9dc <atomic_test_bit>
   14e2e:	b928      	cbnz	r0, 14e3c <bt_smp_encrypt_change+0x7c>
		smp_reset(smp);
   14e30:	4628      	mov	r0, r5
}
   14e32:	b008      	add	sp, #32
   14e34:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		smp_reset(smp);
   14e38:	f016 bfa9 	b.w	2bd8e <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   14e3c:	2105      	movs	r1, #5
   14e3e:	4630      	mov	r0, r6
   14e40:	f016 fdcc 	bl	2b9dc <atomic_test_bit>
   14e44:	b1b8      	cbz	r0, 14e76 <bt_smp_encrypt_change+0xb6>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   14e46:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   14e4a:	071b      	lsls	r3, r3, #28
   14e4c:	d507      	bpl.n	14e5e <bt_smp_encrypt_change+0x9e>
   14e4e:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   14e52:	071f      	lsls	r7, r3, #28
   14e54:	d503      	bpl.n	14e5e <bt_smp_encrypt_change+0x9e>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   14e56:	2111      	movs	r1, #17
   14e58:	4630      	mov	r0, r6
   14e5a:	f016 feb2 	bl	2bbc2 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   14e5e:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   14e62:	f023 0308 	bic.w	r3, r3, #8
   14e66:	f804 3c08 	strb.w	r3, [r4, #-8]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   14e6a:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   14e6e:	f023 0308 	bic.w	r3, r3, #8
   14e72:	f804 3c07 	strb.w	r3, [r4, #-7]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   14e76:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   14e7a:	07d8      	lsls	r0, r3, #31
   14e7c:	d57a      	bpl.n	14f74 <bt_smp_encrypt_change+0x1b4>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   14e7e:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   14e80:	4628      	mov	r0, r5
   14e82:	f016 fe9e 	bl	2bbc2 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   14e86:	2102      	movs	r1, #2
   14e88:	4630      	mov	r0, r6
   14e8a:	f016 fe9a 	bl	2bbc2 <atomic_set_bit>
	struct bt_keys *keys = conn->le.keys;
   14e8e:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   14e90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   14e94:	2b00      	cmp	r3, #0
   14e96:	d06a      	beq.n	14f6e <bt_smp_encrypt_change+0x1ae>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   14e98:	2105      	movs	r1, #5
   14e9a:	f016 fd9f 	bl	2b9dc <atomic_test_bit>
   14e9e:	2800      	cmp	r0, #0
   14ea0:	d160      	bne.n	14f64 <bt_smp_encrypt_change+0x1a4>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   14ea2:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   14ea6:	07db      	lsls	r3, r3, #31
   14ea8:	d55c      	bpl.n	14f64 <bt_smp_encrypt_change+0x1a4>
	struct bt_keys *keys = conn->le.keys;
   14eaa:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   14eac:	211a      	movs	r1, #26
   14eae:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
   14eb0:	f8d3 70b4 	ldr.w	r7, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
   14eb4:	f003 f802 	bl	17ebc <bt_rand>
   14eb8:	4681      	mov	r9, r0
   14eba:	2800      	cmp	r0, #0
   14ebc:	d152      	bne.n	14f64 <bt_smp_encrypt_change+0x1a4>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   14ebe:	2106      	movs	r1, #6
   14ec0:	4628      	mov	r0, r5
   14ec2:	f016 fed0 	bl	2bc66 <smp_create_pdu.constprop.0>
		if (!buf) {
   14ec6:	4680      	mov	r8, r0
   14ec8:	2800      	cmp	r0, #0
   14eca:	d04b      	beq.n	14f64 <bt_smp_encrypt_change+0x1a4>
	return net_buf_simple_add(&buf->b, len);
   14ecc:	2110      	movs	r1, #16
   14ece:	3008      	adds	r0, #8
   14ed0:	f018 fa7f 	bl	2d3d2 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   14ed4:	7b3a      	ldrb	r2, [r7, #12]
   14ed6:	a901      	add	r1, sp, #4
   14ed8:	4682      	mov	sl, r0
   14eda:	f014 fa34 	bl	29346 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   14ede:	7b38      	ldrb	r0, [r7, #12]
   14ee0:	280f      	cmp	r0, #15
   14ee2:	d805      	bhi.n	14ef0 <bt_smp_encrypt_change+0x130>
			(void)memset(info->ltk + keys->enc_size, 0,
   14ee4:	f1c0 0210 	rsb	r2, r0, #16
   14ee8:	4649      	mov	r1, r9
   14eea:	4450      	add	r0, sl
   14eec:	f014 fa36 	bl	2935c <memset>
		smp_send(smp, buf, NULL, NULL);
   14ef0:	4641      	mov	r1, r8
   14ef2:	2200      	movs	r2, #0
   14ef4:	4628      	mov	r0, r5
   14ef6:	f016 fdc8 	bl	2ba8a <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   14efa:	2107      	movs	r1, #7
   14efc:	4628      	mov	r0, r5
   14efe:	f016 feb2 	bl	2bc66 <smp_create_pdu.constprop.0>
		if (!buf) {
   14f02:	4680      	mov	r8, r0
   14f04:	b370      	cbz	r0, 14f64 <bt_smp_encrypt_change+0x1a4>
   14f06:	210a      	movs	r1, #10
   14f08:	3008      	adds	r0, #8
   14f0a:	f018 fa62 	bl	2d3d2 <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   14f0e:	2208      	movs	r2, #8
   14f10:	4681      	mov	r9, r0
   14f12:	a905      	add	r1, sp, #20
   14f14:	3002      	adds	r0, #2
   14f16:	f014 fa16 	bl	29346 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   14f1a:	2202      	movs	r2, #2
   14f1c:	a907      	add	r1, sp, #28
   14f1e:	4648      	mov	r0, r9
   14f20:	f014 fa11 	bl	29346 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   14f24:	4641      	mov	r1, r8
   14f26:	4628      	mov	r0, r5
   14f28:	4a17      	ldr	r2, [pc, #92]	; (14f88 <bt_smp_encrypt_change+0x1c8>)
   14f2a:	f016 fdae 	bl	2ba8a <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   14f2e:	210d      	movs	r1, #13
   14f30:	4630      	mov	r0, r6
   14f32:	f016 fd53 	bl	2b9dc <atomic_test_bit>
   14f36:	b1a8      	cbz	r0, 14f64 <bt_smp_encrypt_change+0x1a4>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   14f38:	2101      	movs	r1, #1
   14f3a:	4638      	mov	r0, r7
   14f3c:	f017 fac0 	bl	2c4c0 <bt_keys_add_type>
			memcpy(keys->periph_ltk.val, rand.key,
   14f40:	2210      	movs	r2, #16
   14f42:	a901      	add	r1, sp, #4
   14f44:	f107 004a 	add.w	r0, r7, #74	; 0x4a
   14f48:	f014 f9fd 	bl	29346 <memcpy>
			memcpy(keys->periph_ltk.rand, rand.rand,
   14f4c:	2208      	movs	r2, #8
   14f4e:	a905      	add	r1, sp, #20
   14f50:	f107 0040 	add.w	r0, r7, #64	; 0x40
   14f54:	f014 f9f7 	bl	29346 <memcpy>
			memcpy(keys->periph_ltk.ediv, rand.ediv,
   14f58:	2202      	movs	r2, #2
   14f5a:	a907      	add	r1, sp, #28
   14f5c:	f107 0048 	add.w	r0, r7, #72	; 0x48
   14f60:	f014 f9f1 	bl	29346 <memcpy>
	if (!smp->local_dist && !smp->remote_dist) {
   14f64:	f834 1c08 	ldrh.w	r1, [r4, #-8]
   14f68:	2900      	cmp	r1, #0
   14f6a:	f43f af51 	beq.w	14e10 <bt_smp_encrypt_change+0x50>
}
   14f6e:	b008      	add	sp, #32
   14f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   14f74:	0799      	lsls	r1, r3, #30
   14f76:	d501      	bpl.n	14f7c <bt_smp_encrypt_change+0x1bc>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   14f78:	2108      	movs	r1, #8
   14f7a:	e781      	b.n	14e80 <bt_smp_encrypt_change+0xc0>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   14f7c:	075a      	lsls	r2, r3, #29
   14f7e:	d582      	bpl.n	14e86 <bt_smp_encrypt_change+0xc6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   14f80:	210a      	movs	r1, #10
   14f82:	e77d      	b.n	14e80 <bt_smp_encrypt_change+0xc0>
   14f84:	00030c92 	.word	0x00030c92
   14f88:	0002c38b 	.word	0x0002c38b

00014f8c <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   14f8c:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   14f8e:	4b07      	ldr	r3, [pc, #28]	; (14fac <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   14f90:	4807      	ldr	r0, [pc, #28]	; (14fb0 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   14f92:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   14f96:	f003 0306 	and.w	r3, r3, #6
   14f9a:	1f9a      	subs	r2, r3, #6
   14f9c:	4253      	negs	r3, r2
   14f9e:	4153      	adcs	r3, r2
   14fa0:	4a04      	ldr	r2, [pc, #16]	; (14fb4 <bt_smp_init+0x28>)
   14fa2:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   14fa4:	f7fc fb78 	bl	11698 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   14fa8:	2000      	movs	r0, #0
   14faa:	bd08      	pop	{r3, pc}
   14fac:	20000000 	.word	0x20000000
   14fb0:	20000270 	.word	0x20000270
   14fb4:	20002d7c 	.word	0x20002d7c

00014fb8 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   14fb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   14fba:	4d11      	ldr	r5, [pc, #68]	; (15000 <bt_keys_get_addr+0x48>)
   14fbc:	782b      	ldrb	r3, [r5, #0]
   14fbe:	4283      	cmp	r3, r0
{
   14fc0:	4606      	mov	r6, r0
   14fc2:	460f      	mov	r7, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   14fc4:	d00b      	beq.n	14fde <bt_keys_get_addr+0x26>
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   14fc6:	2400      	movs	r4, #0
   14fc8:	480e      	ldr	r0, [pc, #56]	; (15004 <bt_keys_get_addr+0x4c>)
   14fca:	9400      	str	r4, [sp, #0]
   14fcc:	2207      	movs	r2, #7
   14fce:	4669      	mov	r1, sp
   14fd0:	f8cd 4003 	str.w	r4, [sp, #3]
   14fd4:	f014 f9a6 	bl	29324 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   14fd8:	b150      	cbz	r0, 14ff0 <bt_keys_get_addr+0x38>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   14fda:	4620      	mov	r0, r4
   14fdc:	e006      	b.n	14fec <bt_keys_get_addr+0x34>
   14fde:	2207      	movs	r2, #7
   14fe0:	1c68      	adds	r0, r5, #1
   14fe2:	f014 f99f 	bl	29324 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   14fe6:	2800      	cmp	r0, #0
   14fe8:	d1ed      	bne.n	14fc6 <bt_keys_get_addr+0xe>
		keys = &key_pool[i];
   14fea:	4628      	mov	r0, r5
}
   14fec:	b003      	add	sp, #12
   14fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(dst, src, sizeof(*dst));
   14ff0:	4804      	ldr	r0, [pc, #16]	; (15004 <bt_keys_get_addr+0x4c>)
		keys->id = id;
   14ff2:	702e      	strb	r6, [r5, #0]
   14ff4:	2207      	movs	r2, #7
   14ff6:	4639      	mov	r1, r7
   14ff8:	f014 f9a5 	bl	29346 <memcpy>
		return keys;
   14ffc:	4800      	ldr	r0, [pc, #0]	; (15000 <bt_keys_get_addr+0x48>)
}
   14ffe:	e7f5      	b.n	14fec <bt_keys_get_addr+0x34>
   15000:	20001738 	.word	0x20001738
   15004:	20001739 	.word	0x20001739

00015008 <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   15008:	460b      	mov	r3, r1
   1500a:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   1500c:	4a04      	ldr	r2, [pc, #16]	; (15020 <bt_keys_foreach+0x18>)
{
   1500e:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   15010:	89d4      	ldrh	r4, [r2, #14]
   15012:	4204      	tst	r4, r0
   15014:	d002      	beq.n	1501c <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
   15016:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   15018:	4610      	mov	r0, r2
   1501a:	4718      	bx	r3
}
   1501c:	bc10      	pop	{r4}
   1501e:	4770      	bx	lr
   15020:	20001738 	.word	0x20001738

00015024 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   15024:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   15026:	4903      	ldr	r1, [pc, #12]	; (15034 <keys_commit+0x10>)
   15028:	2200      	movs	r2, #0
   1502a:	2002      	movs	r0, #2
   1502c:	f7ff ffec 	bl	15008 <bt_keys_foreach>
	}

	return 0;
}
   15030:	2000      	movs	r0, #0
   15032:	bd08      	pop	{r3, pc}
   15034:	0002c49d 	.word	0x0002c49d

00015038 <bt_keys_find>:
{
   15038:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1503a:	4c09      	ldr	r4, [pc, #36]	; (15060 <bt_keys_find+0x28>)
{
   1503c:	460b      	mov	r3, r1
   1503e:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   15040:	89e2      	ldrh	r2, [r4, #14]
   15042:	4202      	tst	r2, r0
   15044:	d007      	beq.n	15056 <bt_keys_find+0x1e>
   15046:	7822      	ldrb	r2, [r4, #0]
   15048:	429a      	cmp	r2, r3
   1504a:	d104      	bne.n	15056 <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   1504c:	2207      	movs	r2, #7
   1504e:	1c60      	adds	r0, r4, #1
   15050:	f014 f968 	bl	29324 <memcmp>
   15054:	b108      	cbz	r0, 1505a <bt_keys_find+0x22>
	return NULL;
   15056:	2000      	movs	r0, #0
}
   15058:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1505a:	4620      	mov	r0, r4
   1505c:	e7fc      	b.n	15058 <bt_keys_find+0x20>
   1505e:	bf00      	nop
   15060:	20001738 	.word	0x20001738

00015064 <bt_keys_find_irk>:
{
   15064:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return true if address is a random private resolvable address.
 */
static inline bool bt_addr_le_is_rpa(const bt_addr_le_t *addr)
{
	if (addr->type != BT_ADDR_LE_RANDOM) {
   15066:	780b      	ldrb	r3, [r1, #0]
   15068:	2b01      	cmp	r3, #1
   1506a:	4606      	mov	r6, r0
   1506c:	460d      	mov	r5, r1
   1506e:	d001      	beq.n	15074 <bt_keys_find_irk+0x10>
		return NULL;
   15070:	2000      	movs	r0, #0
}
   15072:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   15074:	798b      	ldrb	r3, [r1, #6]
   15076:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1507a:	2b40      	cmp	r3, #64	; 0x40
   1507c:	d1f8      	bne.n	15070 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1507e:	4c12      	ldr	r4, [pc, #72]	; (150c8 <bt_keys_find_irk+0x64>)
   15080:	89e3      	ldrh	r3, [r4, #14]
   15082:	079b      	lsls	r3, r3, #30
   15084:	d5f4      	bpl.n	15070 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   15086:	7823      	ldrb	r3, [r4, #0]
   15088:	42b3      	cmp	r3, r6
   1508a:	d10b      	bne.n	150a4 <bt_keys_find_irk+0x40>
	return memcmp(a, b, sizeof(*a));
   1508c:	2206      	movs	r2, #6
   1508e:	f104 013a 	add.w	r1, r4, #58	; 0x3a
   15092:	1c68      	adds	r0, r5, #1
   15094:	f014 f946 	bl	29324 <memcmp>
   15098:	b908      	cbnz	r0, 1509e <bt_keys_find_irk+0x3a>
			return &key_pool[i];
   1509a:	4620      	mov	r0, r4
   1509c:	e7e9      	b.n	15072 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1509e:	89e3      	ldrh	r3, [r4, #14]
   150a0:	079a      	lsls	r2, r3, #30
   150a2:	d5e5      	bpl.n	15070 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   150a4:	7823      	ldrb	r3, [r4, #0]
   150a6:	42b3      	cmp	r3, r6
   150a8:	d1e2      	bne.n	15070 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   150aa:	3501      	adds	r5, #1
   150ac:	4807      	ldr	r0, [pc, #28]	; (150cc <bt_keys_find_irk+0x68>)
   150ae:	4629      	mov	r1, r5
   150b0:	f014 f98f 	bl	293d2 <bt_rpa_irk_matches>
   150b4:	2800      	cmp	r0, #0
   150b6:	d0db      	beq.n	15070 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   150b8:	4805      	ldr	r0, [pc, #20]	; (150d0 <bt_keys_find_irk+0x6c>)
   150ba:	2206      	movs	r2, #6
   150bc:	4629      	mov	r1, r5
   150be:	f014 f942 	bl	29346 <memcpy>
			return &key_pool[i];
   150c2:	4801      	ldr	r0, [pc, #4]	; (150c8 <bt_keys_find_irk+0x64>)
}
   150c4:	e7d5      	b.n	15072 <bt_keys_find_irk+0xe>
   150c6:	bf00      	nop
   150c8:	20001738 	.word	0x20001738
   150cc:	20001762 	.word	0x20001762
   150d0:	20001772 	.word	0x20001772

000150d4 <bt_keys_find_addr>:
{
   150d4:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
   150d6:	4c06      	ldr	r4, [pc, #24]	; (150f0 <bt_keys_find_addr+0x1c>)
   150d8:	7823      	ldrb	r3, [r4, #0]
   150da:	4283      	cmp	r3, r0
   150dc:	d104      	bne.n	150e8 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   150de:	2207      	movs	r2, #7
   150e0:	1c60      	adds	r0, r4, #1
   150e2:	f014 f91f 	bl	29324 <memcmp>
   150e6:	b108      	cbz	r0, 150ec <bt_keys_find_addr+0x18>
	return NULL;
   150e8:	2000      	movs	r0, #0
}
   150ea:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   150ec:	4620      	mov	r0, r4
   150ee:	e7fc      	b.n	150ea <bt_keys_find_addr+0x16>
   150f0:	20001738 	.word	0x20001738

000150f4 <bt_keys_clear>:
{
   150f4:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   150f6:	7a03      	ldrb	r3, [r0, #8]
   150f8:	075b      	lsls	r3, r3, #29
{
   150fa:	b08c      	sub	sp, #48	; 0x30
   150fc:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   150fe:	d501      	bpl.n	15104 <bt_keys_clear+0x10>
		bt_id_del(keys);
   15100:	f7fb fe7e 	bl	10e00 <bt_id_del>
		if (keys->id) {
   15104:	4625      	mov	r5, r4
   15106:	f815 2b01 	ldrb.w	r2, [r5], #1
   1510a:	b1b2      	cbz	r2, 1513a <bt_keys_clear+0x46>
			u8_to_dec(id, sizeof(id), keys->id);
   1510c:	ae02      	add	r6, sp, #8
   1510e:	2104      	movs	r1, #4
   15110:	4630      	mov	r0, r6
   15112:	f011 fe46 	bl	26da2 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   15116:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   15118:	4a09      	ldr	r2, [pc, #36]	; (15140 <bt_keys_clear+0x4c>)
   1511a:	462b      	mov	r3, r5
   1511c:	2124      	movs	r1, #36	; 0x24
   1511e:	a803      	add	r0, sp, #12
   15120:	f7fa ff70 	bl	10004 <bt_settings_encode_key>
		settings_delete(key);
   15124:	a803      	add	r0, sp, #12
   15126:	f012 fe0c 	bl	27d42 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   1512a:	225c      	movs	r2, #92	; 0x5c
   1512c:	2100      	movs	r1, #0
   1512e:	4620      	mov	r0, r4
}
   15130:	b00c      	add	sp, #48	; 0x30
   15132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(keys, 0, sizeof(*keys));
   15136:	f014 b911 	b.w	2935c <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1513a:	9200      	str	r2, [sp, #0]
   1513c:	e7ec      	b.n	15118 <bt_keys_clear+0x24>
   1513e:	bf00      	nop
   15140:	00030ce8 	.word	0x00030ce8

00015144 <bt_keys_store>:
{
   15144:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
   15146:	4605      	mov	r5, r0
{
   15148:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   1514a:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1514e:	4604      	mov	r4, r0
	if (keys->id) {
   15150:	b19a      	cbz	r2, 1517a <bt_keys_store+0x36>
		u8_to_dec(id, sizeof(id), keys->id);
   15152:	ae02      	add	r6, sp, #8
   15154:	2104      	movs	r1, #4
   15156:	4630      	mov	r0, r6
   15158:	f011 fe23 	bl	26da2 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1515c:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1515e:	462b      	mov	r3, r5
   15160:	a803      	add	r0, sp, #12
   15162:	4a07      	ldr	r2, [pc, #28]	; (15180 <bt_keys_store+0x3c>)
   15164:	2124      	movs	r1, #36	; 0x24
   15166:	f7fa ff4d 	bl	10004 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1516a:	2250      	movs	r2, #80	; 0x50
   1516c:	f104 010c 	add.w	r1, r4, #12
   15170:	a803      	add	r0, sp, #12
   15172:	f7f9 fcf7 	bl	eb64 <settings_save_one>
}
   15176:	b00c      	add	sp, #48	; 0x30
   15178:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1517a:	9200      	str	r2, [sp, #0]
   1517c:	e7ef      	b.n	1515e <bt_keys_store+0x1a>
   1517e:	bf00      	nop
   15180:	00030ce8 	.word	0x00030ce8

00015184 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
   15184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15188:	4616      	mov	r6, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   1518a:	1dc2      	adds	r2, r0, #7
   1518c:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   15190:	1e75      	subs	r5, r6, #1
{
   15192:	460f      	mov	r7, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   15194:	b2ad      	uxth	r5, r5
	*mem_head = mem_pool;
   15196:	6018      	str	r0, [r3, #0]
{
   15198:	b082      	sub	sp, #8
   1519a:	4604      	mov	r4, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   1519c:	8016      	strh	r6, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   1519e:	2100      	movs	r1, #0
   151a0:	2204      	movs	r2, #4
   151a2:	fb07 0005 	mla	r0, r7, r5, r0
   151a6:	f014 f8d9 	bl	2935c <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   151aa:	b1bd      	cbz	r5, 151dc <mem_init+0x58>
   151ac:	3e02      	subs	r6, #2
   151ae:	b2b6      	uxth	r6, r6
   151b0:	fb06 7307 	mla	r3, r6, r7, r7
   151b4:	fb06 f807 	mul.w	r8, r6, r7
   151b8:	441c      	add	r4, r3
   151ba:	eba8 0803 	sub.w	r8, r8, r3
   151be:	2500      	movs	r5, #0
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   151c0:	2204      	movs	r2, #4
   151c2:	eb04 0008 	add.w	r0, r4, r8
   151c6:	eb0d 0102 	add.w	r1, sp, r2
		next = (uint32_t)((uint8_t *) mem_pool +
   151ca:	9401      	str	r4, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   151cc:	f014 f8bb 	bl	29346 <memcpy>
	while (mem_count--) {
   151d0:	42b5      	cmp	r5, r6
   151d2:	eba4 0407 	sub.w	r4, r4, r7
   151d6:	f105 0501 	add.w	r5, r5, #1
   151da:	d1f1      	bne.n	151c0 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
   151dc:	b002      	add	sp, #8
   151de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   151e2:	bf00      	nop

000151e4 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   151e4:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
   151e6:	6805      	ldr	r5, [r0, #0]
{
   151e8:	b082      	sub	sp, #8
	if (*mem_head) {
   151ea:	b195      	cbz	r5, 15212 <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   151ec:	1deb      	adds	r3, r5, #7
   151ee:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   151f2:	2204      	movs	r2, #4
   151f4:	4604      	mov	r4, r0
   151f6:	4629      	mov	r1, r5
   151f8:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   151fc:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   151fe:	f014 f8a2 	bl	29346 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   15202:	9b01      	ldr	r3, [sp, #4]
   15204:	b123      	cbz	r3, 15210 <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   15206:	1dda      	adds	r2, r3, #7
   15208:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   1520c:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   1520e:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
   15210:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
   15212:	4628      	mov	r0, r5
   15214:	b002      	add	sp, #8
   15216:	bd70      	pop	{r4, r5, r6, pc}

00015218 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   15218:	680b      	ldr	r3, [r1, #0]
{
   1521a:	b570      	push	{r4, r5, r6, lr}
   1521c:	460c      	mov	r4, r1
   1521e:	4605      	mov	r5, r0
	if (*mem_head) {
   15220:	b183      	cbz	r3, 15244 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   15222:	3307      	adds	r3, #7
   15224:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
   15228:	881e      	ldrh	r6, [r3, #0]
   1522a:	3601      	adds	r6, #1
   1522c:	b2b6      	uxth	r6, r6

	memcpy(mem, mem_head, sizeof(mem));
   1522e:	2204      	movs	r2, #4
   15230:	4621      	mov	r1, r4
   15232:	4628      	mov	r0, r5
   15234:	f014 f887 	bl	29346 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   15238:	1deb      	adds	r3, r5, #7
   1523a:	f023 0303 	bic.w	r3, r3, #3
   1523e:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
   15240:	6025      	str	r5, [r4, #0]
}
   15242:	bd70      	pop	{r4, r5, r6, pc}
   15244:	2601      	movs	r6, #1
   15246:	e7f2      	b.n	1522e <mem_release+0x16>

00015248 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   15248:	fb02 0001 	mla	r0, r2, r1, r0
   1524c:	4770      	bx	lr
   1524e:	bf00      	nop

00015250 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size;
   15250:	1a40      	subs	r0, r0, r1
   15252:	fb90 f0f2 	sdiv	r0, r0, r2
}
   15256:	b280      	uxth	r0, r0
   15258:	4770      	bx	lr
   1525a:	bf00      	nop

0001525c <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
   1525c:	1e53      	subs	r3, r2, #1
	src += len;
   1525e:	4411      	add	r1, r2
	while (len--) {
   15260:	b29b      	uxth	r3, r3
   15262:	b142      	cbz	r2, 15276 <mem_rcopy+0x1a>
   15264:	43db      	mvns	r3, r3
   15266:	3801      	subs	r0, #1
   15268:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
   1526a:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   1526e:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
   15272:	4291      	cmp	r1, r2
   15274:	d1f9      	bne.n	1526a <mem_rcopy+0xe>
	}
}
   15276:	4770      	bx	lr

00015278 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   15278:	4401      	add	r1, r0
   1527a:	e002      	b.n	15282 <mem_nz+0xa>
		if (*src++) {
   1527c:	f810 3b01 	ldrb.w	r3, [r0], #1
   15280:	b91b      	cbnz	r3, 1528a <mem_nz+0x12>
	while (len--) {
   15282:	4288      	cmp	r0, r1
   15284:	d1fa      	bne.n	1527c <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
   15286:	2000      	movs	r0, #0
   15288:	4770      	bx	lr
			return 1;
   1528a:	2001      	movs	r0, #1
}
   1528c:	4770      	bx	lr
   1528e:	bf00      	nop

00015290 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   15290:	6010      	str	r0, [r2, #0]
   15292:	6008      	str	r0, [r1, #0]

	return link;
}
   15294:	4770      	bx	lr
   15296:	bf00      	nop

00015298 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   15298:	680a      	ldr	r2, [r1, #0]
{
   1529a:	4603      	mov	r3, r0
	if (*head != *tail) {
   1529c:	6800      	ldr	r0, [r0, #0]
   1529e:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
   152a0:	bf05      	ittet	eq
   152a2:	2200      	moveq	r2, #0
   152a4:	600a      	streq	r2, [r1, #0]
		return NULL;
   152a6:	2000      	movne	r0, #0
	*head = *tail = NULL;
   152a8:	601a      	streq	r2, [r3, #0]

	return old_head;
}
   152aa:	4770      	bx	lr

000152ac <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   152ac:	f8d2 c000 	ldr.w	ip, [r2]
   152b0:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   152b4:	f8d2 c000 	ldr.w	ip, [r2]
   152b8:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
   152bc:	6010      	str	r0, [r2, #0]

	return link;
}
   152be:	4770      	bx	lr

000152c0 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   152c0:	4288      	cmp	r0, r1
   152c2:	d003      	beq.n	152cc <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   152c4:	b11a      	cbz	r2, 152ce <memq_peek+0xe>
		*mem = head->mem;
   152c6:	6843      	ldr	r3, [r0, #4]
   152c8:	6013      	str	r3, [r2, #0]
   152ca:	4770      	bx	lr
		return NULL;
   152cc:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   152ce:	4770      	bx	lr

000152d0 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   152d0:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   152d2:	4283      	cmp	r3, r0
   152d4:	d009      	beq.n	152ea <memq_dequeue+0x1a>
	if (mem) {
   152d6:	b12a      	cbz	r2, 152e4 <memq_dequeue+0x14>
		*mem = head->mem;
   152d8:	6858      	ldr	r0, [r3, #4]
   152da:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   152dc:	681a      	ldr	r2, [r3, #0]
   152de:	600a      	str	r2, [r1, #0]

	return old_head;
}
   152e0:	4618      	mov	r0, r3
   152e2:	4770      	bx	lr
	if (old_head == NULL) {
   152e4:	2b00      	cmp	r3, #0
   152e6:	d1f9      	bne.n	152dc <memq_dequeue+0xc>
   152e8:	e7fa      	b.n	152e0 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
   152ea:	2300      	movs	r3, #0
   152ec:	e7f8      	b.n	152e0 <memq_dequeue+0x10>
   152ee:	bf00      	nop

000152f0 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   152f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   152f4:	f8df 8030 	ldr.w	r8, [pc, #48]	; 15328 <mayfly_init+0x38>
   152f8:	4e0c      	ldr	r6, [pc, #48]	; (1532c <mayfly_init+0x3c>)
   152fa:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
   152fc:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
   15300:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
   15302:	1d22      	adds	r2, r4, #4
   15304:	4621      	mov	r1, r4
   15306:	4628      	mov	r0, r5
		while (caller_id--) {
   15308:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
   1530a:	f7ff ffc1 	bl	15290 <memq_init>
		while (caller_id--) {
   1530e:	42b4      	cmp	r4, r6
   15310:	f1a5 0508 	sub.w	r5, r5, #8
   15314:	d1f5      	bne.n	15302 <mayfly_init+0x12>
	while (callee_id--) {
   15316:	3f04      	subs	r7, #4
   15318:	1d3b      	adds	r3, r7, #4
   1531a:	f1a8 0820 	sub.w	r8, r8, #32
   1531e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   15322:	d1eb      	bne.n	152fc <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   15324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15328:	2000180c 	.word	0x2000180c
   1532c:	2000189c 	.word	0x2000189c

00015330 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
   15330:	b410      	push	{r4}
   15332:	4603      	mov	r3, r0
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
   15334:	4c15      	ldr	r4, [pc, #84]	; (1538c <mayfly_enable+0x5c>)
{
   15336:	468c      	mov	ip, r1
	if (enable) {
   15338:	b192      	cbz	r2, 15360 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
   1533a:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   1533e:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
   15342:	0100      	lsls	r0, r0, #4
   15344:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   15348:	4421      	add	r1, r4
   1534a:	7a48      	ldrb	r0, [r1, #9]
   1534c:	7a0c      	ldrb	r4, [r1, #8]
   1534e:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   15350:	bf04      	itt	eq
   15352:	3001      	addeq	r0, #1
   15354:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
   15356:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
   15358:	4661      	mov	r1, ip
   1535a:	4618      	mov	r0, r3
   1535c:	f00d b82e 	b.w	223bc <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   15360:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   15364:	0112      	lsls	r2, r2, #4
   15366:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1536a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1536e:	4423      	add	r3, r4
   15370:	7a9c      	ldrb	r4, [r3, #10]
   15372:	7ada      	ldrb	r2, [r3, #11]
   15374:	42a2      	cmp	r2, r4
   15376:	d001      	beq.n	1537c <mayfly_enable+0x4c>
}
   15378:	bc10      	pop	{r4}
   1537a:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
   1537c:	3201      	adds	r2, #1
   1537e:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   15380:	4b03      	ldr	r3, [pc, #12]	; (15390 <mayfly_enable+0x60>)
   15382:	2201      	movs	r2, #1
   15384:	545a      	strb	r2, [r3, r1]
}
   15386:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
   15388:	f00d b86e 	b.w	22468 <mayfly_pend>
   1538c:	20001818 	.word	0x20001818
   15390:	20001814 	.word	0x20001814

00015394 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
   15394:	b570      	push	{r4, r5, r6, lr}
   15396:	b082      	sub	sp, #8
   15398:	4606      	mov	r6, r0
   1539a:	9101      	str	r1, [sp, #4]
   1539c:	461c      	mov	r4, r3
   1539e:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   153a0:	b32a      	cbz	r2, 153ee <mayfly_enqueue+0x5a>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   153a2:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   153a4:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   153a6:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   153a8:	f012 0203 	ands.w	r2, r2, #3
   153ac:	d005      	beq.n	153ba <mayfly_enqueue+0x26>
		if (chain) {
			if (state != 1U) {
   153ae:	2a01      	cmp	r2, #1
   153b0:	d042      	beq.n	15438 <mayfly_enqueue+0xa4>
				/* mark as ready in queue */
				m->_req = ack + 1;
   153b2:	3301      	adds	r3, #1
   153b4:	b2db      	uxtb	r3, r3
   153b6:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
   153b8:	e00f      	b.n	153da <mayfly_enqueue+0x46>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
   153ba:	3301      	adds	r3, #1
   153bc:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   153be:	2130      	movs	r1, #48	; 0x30
	m->_req = ack + 1;
   153c0:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   153c2:	2304      	movs	r3, #4
   153c4:	fb11 3105 	smlabb	r1, r1, r5, r3
   153c8:	4a1c      	ldr	r2, [pc, #112]	; (1543c <mayfly_enqueue+0xa8>)
   153ca:	6860      	ldr	r0, [r4, #4]
   153cc:	230c      	movs	r3, #12
   153ce:	fb13 1306 	smlabb	r3, r3, r6, r1
   153d2:	441a      	add	r2, r3
   153d4:	4621      	mov	r1, r4
   153d6:	f7ff ff69 	bl	152ac <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
   153da:	4b19      	ldr	r3, [pc, #100]	; (15440 <mayfly_enqueue+0xac>)
   153dc:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   153de:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
   153e0:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
   153e2:	4629      	mov	r1, r5
   153e4:	f00d f840 	bl	22468 <mayfly_pend>

	return 0;
   153e8:	2000      	movs	r0, #0
}
   153ea:	b002      	add	sp, #8
   153ec:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   153ee:	f00d f825 	bl	2243c <mayfly_prio_is_equal>
   153f2:	2800      	cmp	r0, #0
   153f4:	d0d5      	beq.n	153a2 <mayfly_enqueue+0xe>
		!mayfly_is_enabled(caller_id, callee_id) ||
   153f6:	4629      	mov	r1, r5
   153f8:	4630      	mov	r0, r6
   153fa:	f00c ffff 	bl	223fc <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   153fe:	2800      	cmp	r0, #0
   15400:	d0cf      	beq.n	153a2 <mayfly_enqueue+0xe>
		(mft[callee_id][caller_id].disable_req !=
   15402:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   15406:	0112      	lsls	r2, r2, #4
   15408:	490c      	ldr	r1, [pc, #48]	; (1543c <mayfly_enqueue+0xa8>)
   1540a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   1540e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   15412:	440b      	add	r3, r1
		!mayfly_is_enabled(caller_id, callee_id) ||
   15414:	7a9a      	ldrb	r2, [r3, #10]
   15416:	7adb      	ldrb	r3, [r3, #11]
   15418:	429a      	cmp	r2, r3
   1541a:	d1c2      	bne.n	153a2 <mayfly_enqueue+0xe>
	state = (m->_req - ack) & 0x03;
   1541c:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   1541e:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   15420:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   15422:	0792      	lsls	r2, r2, #30
   15424:	d002      	beq.n	1542c <mayfly_enqueue+0x98>
		m->_req = ack + 2;
   15426:	3302      	adds	r3, #2
   15428:	b2db      	uxtb	r3, r3
   1542a:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
   1542c:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   15430:	4798      	blx	r3
		return 0;
   15432:	2000      	movs	r0, #0
}
   15434:	b002      	add	sp, #8
   15436:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   15438:	4610      	mov	r0, r2
   1543a:	e7d6      	b.n	153ea <mayfly_enqueue+0x56>
   1543c:	20001818 	.word	0x20001818
   15440:	20001814 	.word	0x20001814

00015444 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
   15444:	4a50      	ldr	r2, [pc, #320]	; (15588 <mayfly_run+0x144>)
   15446:	5c13      	ldrb	r3, [r2, r0]
   15448:	2b00      	cmp	r3, #0
   1544a:	f000 809b 	beq.w	15584 <mayfly_run+0x140>
{
   1544e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return;
	}
	mfp[callee_id] = 0U;
   15452:	2300      	movs	r3, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   15454:	4f4d      	ldr	r7, [pc, #308]	; (1558c <mayfly_run+0x148>)
	mfp[callee_id] = 0U;
   15456:	5413      	strb	r3, [r2, r0]
{
   15458:	b087      	sub	sp, #28
	uint8_t enable = 0U;
   1545a:	461a      	mov	r2, r3
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1545c:	f04f 0b3c 	mov.w	fp, #60	; 0x3c

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;
   15460:	e9cd 2001 	strd	r2, r0, [sp, #4]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   15464:	fb0b 7b00 	mla	fp, fp, r0, r7
	uint8_t enable = 0U;
   15468:	9303      	str	r3, [sp, #12]
   1546a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1546e:	f10b 0804 	add.w	r8, fp, #4
   15472:	eb07 1703 	add.w	r7, r7, r3, lsl #4
	while (caller_id--) {
   15476:	f04f 0903 	mov.w	r9, #3
		struct mayfly *m = 0;
   1547a:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
   1547c:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   15480:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
   15482:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
   15484:	f7ff ff1c 	bl	152c0 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
   15488:	f107 0624 	add.w	r6, r7, #36	; 0x24
   1548c:	4683      	mov	fp, r0
   1548e:	2800      	cmp	r0, #0
   15490:	d034      	beq.n	154fc <mayfly_run+0xb8>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
   15492:	9c05      	ldr	r4, [sp, #20]
   15494:	7863      	ldrb	r3, [r4, #1]
   15496:	7825      	ldrb	r5, [r4, #0]
   15498:	1aed      	subs	r5, r5, r3
   1549a:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
   1549e:	2d01      	cmp	r5, #1
   154a0:	d106      	bne.n	154b0 <mayfly_run+0x6c>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
   154a2:	3b01      	subs	r3, #1
   154a4:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
   154a6:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
   154aa:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
   154ac:	9c05      	ldr	r4, [sp, #20]
	if (((req - m->_ack) & 0x03) != 1U) {
   154ae:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
   154b0:	7820      	ldrb	r0, [r4, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
   154b2:	1ac3      	subs	r3, r0, r3
   154b4:	f003 0303 	and.w	r3, r3, #3
   154b8:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
   154ba:	f04f 0200 	mov.w	r2, #0
   154be:	4631      	mov	r1, r6
	req = m->_req;
   154c0:	fa5f fa80 	uxtb.w	sl, r0
	if (((req - m->_ack) & 0x03) != 1U) {
   154c4:	d00f      	beq.n	154e6 <mayfly_run+0xa2>
		memq_dequeue(mft[callee_id][caller_id].tail,
   154c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   154c8:	f7ff ff02 	bl	152d0 <memq_dequeue>
		ack = m->_ack;
   154cc:	f894 c001 	ldrb.w	ip, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   154d0:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
   154d2:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   154d6:	eba3 030c 	sub.w	r3, r3, ip
   154da:	f003 0303 	and.w	r3, r3, #3
   154de:	2b01      	cmp	r3, #1
		m->_ack = req;
   154e0:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   154e4:	d046      	beq.n	15574 <mayfly_run+0x130>

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
   154e6:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   154ea:	aa05      	add	r2, sp, #20
   154ec:	f7ff fee8 	bl	152c0 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
   154f0:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   154f2:	9000      	str	r0, [sp, #0]
   154f4:	4683      	mov	fp, r0
			if (state == 1U) {
   154f6:	d02b      	beq.n	15550 <mayfly_run+0x10c>
		while (link) {
   154f8:	2800      	cmp	r0, #0
   154fa:	d1ca      	bne.n	15492 <mayfly_run+0x4e>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
   154fc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   15500:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   15504:	429a      	cmp	r2, r3
   15506:	d003      	beq.n	15510 <mayfly_run+0xcc>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
   15508:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
   1550c:	2301      	movs	r3, #1
   1550e:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
   15510:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   15514:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   15518:	429a      	cmp	r2, r3
   1551a:	d003      	beq.n	15524 <mayfly_run+0xe0>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
   1551c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
   15520:	2301      	movs	r3, #1
   15522:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
   15524:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   15528:	fa5f f989 	uxtb.w	r9, r9
   1552c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   15530:	f1a7 070c 	sub.w	r7, r7, #12
   15534:	d1a1      	bne.n	1547a <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   15536:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
   1553a:	b1c3      	cbz	r3, 1556e <mayfly_run+0x12a>
   1553c:	9b03      	ldr	r3, [sp, #12]
   1553e:	b9b3      	cbnz	r3, 1556e <mayfly_run+0x12a>
		mayfly_enable_cb(callee_id, callee_id, 0);
   15540:	461a      	mov	r2, r3
   15542:	4651      	mov	r1, sl
   15544:	4650      	mov	r0, sl
	}
}
   15546:	b007      	add	sp, #28
   15548:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
   1554c:	f00c bf36 	b.w	223bc <mayfly_enable_cb>
				if (caller_id || link) {
   15550:	f1b9 0f00 	cmp.w	r9, #0
   15554:	d101      	bne.n	1555a <mayfly_run+0x116>
   15556:	2800      	cmp	r0, #0
   15558:	d0d0      	beq.n	154fc <mayfly_run+0xb8>
					mfp[callee_id] = 1U;
   1555a:	f8dd a008 	ldr.w	sl, [sp, #8]
   1555e:	4a0a      	ldr	r2, [pc, #40]	; (15588 <mayfly_run+0x144>)
   15560:	2301      	movs	r3, #1
   15562:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
   15566:	4651      	mov	r1, sl
   15568:	4650      	mov	r0, sl
   1556a:	f00c ff7d 	bl	22468 <mayfly_pend>
}
   1556e:	b007      	add	sp, #28
   15570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   15574:	4642      	mov	r2, r8
   15576:	4621      	mov	r1, r4
   15578:	4658      	mov	r0, fp
			m->_ack = ack;
   1557a:	f884 c001 	strb.w	ip, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1557e:	f7ff fe95 	bl	152ac <memq_enqueue>
   15582:	e7b0      	b.n	154e6 <mayfly_run+0xa2>
   15584:	4770      	bx	lr
   15586:	bf00      	nop
   15588:	20001814 	.word	0x20001814
   1558c:	20001818 	.word	0x20001818

00015590 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(const uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
   15590:	1e4b      	subs	r3, r1, #1
   15592:	b2db      	uxtb	r3, r3
   15594:	b171      	cbz	r1, 155b4 <util_ones_count_get+0x24>
   15596:	1e41      	subs	r1, r0, #1
   15598:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
   1559c:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
   1559e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
   155a2:	b123      	cbz	r3, 155ae <util_ones_count_get+0x1e>
			bite &= (bite - 1);
   155a4:	1e5a      	subs	r2, r3, #1
			one_count++;
   155a6:	3001      	adds	r0, #1
		while (bite) {
   155a8:	4013      	ands	r3, r2
			one_count++;
   155aa:	b2c0      	uxtb	r0, r0
		while (bite) {
   155ac:	d1fa      	bne.n	155a4 <util_ones_count_get+0x14>
	while (octets_len--) {
   155ae:	4561      	cmp	r1, ip
   155b0:	d1f5      	bne.n	1559e <util_ones_count_get+0xe>
   155b2:	4770      	bx	lr
	uint8_t one_count = 0U;
   155b4:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
   155b6:	4770      	bx	lr

000155b8 <ticker_dequeue>:
 * @return Total ticks until expiration for dequeued ticker node, or 0 if
 * node was not found
 * @internal
 */
static uint32_t ticker_dequeue(struct ticker_instance *instance, uint8_t id)
{
   155b8:	b530      	push	{r4, r5, lr}

	/* Find the ticker's position in ticker node list while accumulating
	 * ticks_to_expire
	 */
	node = &instance->nodes[0];
	previous = instance->ticker_id_head;
   155ba:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->nodes[0];
   155bc:	6805      	ldr	r5, [r0, #0]
	current = previous;
	total = 0U;
	ticker_current = 0;
	while (current != TICKER_NULL) {
   155be:	2bff      	cmp	r3, #255	; 0xff
   155c0:	d014      	beq.n	155ec <ticker_dequeue+0x34>
		ticker_current = &node[current];
   155c2:	eb03 0243 	add.w	r2, r3, r3, lsl #1

		if (current == id) {
   155c6:	428b      	cmp	r3, r1
		ticker_current = &node[current];
   155c8:	eb05 1202 	add.w	r2, r5, r2, lsl #4
		if (current == id) {
   155cc:	d028      	beq.n	15620 <ticker_dequeue+0x68>
	total = 0U;
   155ce:	f04f 0c00 	mov.w	ip, #0
   155d2:	e001      	b.n	155d8 <ticker_dequeue+0x20>
		if (current == id) {
   155d4:	4299      	cmp	r1, r3
   155d6:	d00b      	beq.n	155f0 <ticker_dequeue+0x38>
			break;
		}

		total += ticker_current->ticks_to_expire;
   155d8:	469e      	mov	lr, r3
		previous = current;
		current = ticker_current->next;
   155da:	7813      	ldrb	r3, [r2, #0]
		total += ticker_current->ticks_to_expire;
   155dc:	6894      	ldr	r4, [r2, #8]
	while (current != TICKER_NULL) {
   155de:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
   155e0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
   155e4:	44a4      	add	ip, r4
		ticker_current = &node[current];
   155e6:	eb05 1202 	add.w	r2, r5, r2, lsl #4
	while (current != TICKER_NULL) {
   155ea:	d1f3      	bne.n	155d4 <ticker_dequeue+0x1c>
	}

	if (current == TICKER_NULL) {
		/* Ticker not in active list */
		return 0;
   155ec:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
   155ee:	bd30      	pop	{r4, r5, pc}
	if (previous == current) {
   155f0:	4571      	cmp	r1, lr
   155f2:	d018      	beq.n	15626 <ticker_dequeue+0x6e>
	node[previous].next = ticker_current->next;
   155f4:	7813      	ldrb	r3, [r2, #0]
	timeout = ticker_current->ticks_to_expire;
   155f6:	6890      	ldr	r0, [r2, #8]
	node[previous].next = ticker_current->next;
   155f8:	fa0f fe8e 	sxth.w	lr, lr
   155fc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   15600:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   15604:	f805 300e 	strb.w	r3, [r5, lr]
	if (ticker_current->next != TICKER_NULL) {
   15608:	7813      	ldrb	r3, [r2, #0]
   1560a:	2bff      	cmp	r3, #255	; 0xff
   1560c:	d006      	beq.n	1561c <ticker_dequeue+0x64>
		node[ticker_current->next].ticks_to_expire += timeout;
   1560e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   15612:	eb05 1503 	add.w	r5, r5, r3, lsl #4
   15616:	68ab      	ldr	r3, [r5, #8]
   15618:	4403      	add	r3, r0
   1561a:	60ab      	str	r3, [r5, #8]
	return (total + timeout);
   1561c:	4460      	add	r0, ip
}
   1561e:	bd30      	pop	{r4, r5, pc}
		if (current == id) {
   15620:	469e      	mov	lr, r3
	total = 0U;
   15622:	f04f 0c00 	mov.w	ip, #0
		instance->ticker_id_head = ticker_current->next;
   15626:	7813      	ldrb	r3, [r2, #0]
   15628:	7743      	strb	r3, [r0, #29]
   1562a:	e7e4      	b.n	155f6 <ticker_dequeue+0x3e>

0001562c <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   1562c:	eba2 0c01 	sub.w	ip, r2, r1
   15630:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
   15634:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   15636:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   15638:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   1563a:	d10a      	bne.n	15652 <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1563c:	f02c 417f 	bic.w	r1, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   15640:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   15642:	42a3      	cmp	r3, r4
   15644:	d914      	bls.n	15670 <ticks_to_expire_prep+0x44>
		ticks_to_expire -= ticks_to_expire_minus;
   15646:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
   15648:	2100      	movs	r1, #0
}
   1564a:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
   1564c:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   1564e:	6141      	str	r1, [r0, #20]
}
   15650:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15652:	1a89      	subs	r1, r1, r2
   15654:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   15658:	428b      	cmp	r3, r1
   1565a:	d806      	bhi.n	1566a <ticks_to_expire_prep+0x3e>
			ticks_to_expire_minus +=
   1565c:	4421      	add	r1, r4
   1565e:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
   15660:	2300      	movs	r3, #0
}
   15662:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
   15664:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   15666:	6141      	str	r1, [r0, #20]
}
   15668:	4770      	bx	lr
			ticks_to_expire -= delta_current_start;
   1566a:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   1566c:	42a3      	cmp	r3, r4
   1566e:	d8ea      	bhi.n	15646 <ticks_to_expire_prep+0x1a>
		ticks_to_expire_minus -= ticks_to_expire;
   15670:	1ae1      	subs	r1, r4, r3
   15672:	e7f5      	b.n	15660 <ticks_to_expire_prep+0x34>

00015674 <ticker_job_list_insert>:
{
   15674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15678:	b087      	sub	sp, #28
   1567a:	4603      	mov	r3, r0
	count_user = instance->count_user;
   1567c:	7a42      	ldrb	r2, [r0, #9]
{
   1567e:	9001      	str	r0, [sp, #4]
	node = &instance->nodes[0];
   15680:	6800      	ldr	r0, [r0, #0]
   15682:	9002      	str	r0, [sp, #8]
	users = &instance->users[0];
   15684:	6858      	ldr	r0, [r3, #4]
   15686:	9005      	str	r0, [sp, #20]
	while (count_user--) {
   15688:	2a00      	cmp	r2, #0
   1568a:	f000 80f4 	beq.w	15876 <ticker_job_list_insert+0x202>
   1568e:	1e53      	subs	r3, r2, #1
   15690:	b2db      	uxtb	r3, r3
   15692:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   15696:	460f      	mov	r7, r1
   15698:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
   1569a:	9b03      	ldr	r3, [sp, #12]
   1569c:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
   1569e:	785e      	ldrb	r6, [r3, #1]
		user_ops = (void *)&user->user_op[0];
   156a0:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
   156a2:	2fff      	cmp	r7, #255	; 0xff
   156a4:	d05e      	beq.n	15764 <ticker_job_list_insert+0xf0>
				ticker = &node[id_insert];
   156a6:	eb07 0447 	add.w	r4, r7, r7, lsl #1
   156aa:	9b02      	ldr	r3, [sp, #8]
   156ac:	ea4f 1a04 	mov.w	sl, r4, lsl #4
   156b0:	46b8      	mov	r8, r7
				insert_head = ticker->next;
   156b2:	f813 700a 	ldrb.w	r7, [r3, sl]
				ticker = &node[id_insert];
   156b6:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				user_op = NULL;
   156ba:	2500      	movs	r5, #0
	node = &instance->nodes[0];
   156bc:	9b01      	ldr	r3, [sp, #4]
	ticker->next = TICKER_NULL;
   156be:	f04f 09ff 	mov.w	r9, #255	; 0xff
   156c2:	f884 9000 	strb.w	r9, [r4]
	node = &instance->nodes[0];
   156c6:	f8d3 e000 	ldr.w	lr, [r3]
	current = instance->ticker_id_head;
   156ca:	7f5a      	ldrb	r2, [r3, #29]
	ticker_new = &node[id];
   156cc:	eb0e 0b0a 	add.w	fp, lr, sl
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   156d0:	454a      	cmp	r2, r9
	ticks_to_expire = ticker_new->ticks_to_expire;
   156d2:	f8db 1008 	ldr.w	r1, [fp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   156d6:	d10f      	bne.n	156f8 <ticker_job_list_insert+0x84>
   156d8:	e0c8      	b.n	1586c <ticker_job_list_insert+0x1f8>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   156da:	1a09      	subs	r1, r1, r0
   156dc:	d106      	bne.n	156ec <ticker_job_list_insert+0x78>
   156de:	f8bb a01e 	ldrh.w	sl, [fp, #30]
   156e2:	f8bc c01e 	ldrh.w	ip, [ip, #30]
   156e6:	45e2      	cmp	sl, ip
   156e8:	f200 8086 	bhi.w	157f8 <ticker_job_list_insert+0x184>
		current = ticker_current->next;
   156ec:	f81e 3003 	ldrb.w	r3, [lr, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   156f0:	2bff      	cmp	r3, #255	; 0xff
   156f2:	4691      	mov	r9, r2
   156f4:	d072      	beq.n	157dc <ticker_job_list_insert+0x168>
   156f6:	461a      	mov	r2, r3
		(ticker_current = &node[current])->ticks_to_expire))) {
   156f8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   156fc:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
   15700:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
   15702:	f8dc 0008 	ldr.w	r0, [ip, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   15706:	4288      	cmp	r0, r1
   15708:	d9e7      	bls.n	156da <ticker_job_list_insert+0x66>
	if (previous == TICKER_NULL) {
   1570a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
   1570e:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   15712:	f88b 2000 	strb.w	r2, [fp]
	if (previous == TICKER_NULL) {
   15716:	d166      	bne.n	157e6 <ticker_job_list_insert+0x172>
		instance->ticker_id_head = id;
   15718:	9b01      	ldr	r3, [sp, #4]
   1571a:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
   1571e:	2aff      	cmp	r2, #255	; 0xff
   15720:	d008      	beq.n	15734 <ticker_job_list_insert+0xc0>
		node[current].ticks_to_expire -= ticks_to_expire;
   15722:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   15726:	eb0e 1e02 	add.w	lr, lr, r2, lsl #4
   1572a:	f8de 3008 	ldr.w	r3, [lr, #8]
   1572e:	1a5b      	subs	r3, r3, r1
   15730:	f8ce 3008 	str.w	r3, [lr, #8]
	ticker->req = ticker->ack + 1;
   15734:	78a3      	ldrb	r3, [r4, #2]
   15736:	3301      	adds	r3, #1
   15738:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   1573a:	2d00      	cmp	r5, #0
   1573c:	d0b1      	beq.n	156a2 <ticker_job_list_insert+0x2e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1573e:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
   15742:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   15744:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   15746:	2200      	movs	r2, #0
   15748:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   1574a:	b113      	cbz	r3, 15752 <ticker_job_list_insert+0xde>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1574c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1574e:	4610      	mov	r0, r2
   15750:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   15752:	6863      	ldr	r3, [r4, #4]
   15754:	2b00      	cmp	r3, #0
   15756:	d1a4      	bne.n	156a2 <ticker_job_list_insert+0x2e>
					ticker->op_context =
   15758:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
		while ((insert_head != TICKER_NULL) ||
   1575c:	2fff      	cmp	r7, #255	; 0xff
					ticker->op_context =
   1575e:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
   15762:	d1a0      	bne.n	156a6 <ticker_job_list_insert+0x32>
   15764:	9b03      	ldr	r3, [sp, #12]
   15766:	7898      	ldrb	r0, [r3, #2]
   15768:	42b0      	cmp	r0, r6
   1576a:	d02f      	beq.n	157cc <ticker_job_list_insert+0x158>
   1576c:	e9dd b903 	ldrd	fp, r9, [sp, #12]
				user_op = &user_ops[user_ops_first];
   15770:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   15774:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				if (first == user->count_user_op) {
   15778:	f89b 1000 	ldrb.w	r1, [fp]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   1577c:	f819 3022 	ldrb.w	r3, [r9, r2, lsl #2]
				first = user_ops_first + 1;
   15780:	3601      	adds	r6, #1
   15782:	b2f6      	uxtb	r6, r6
					first = 0U;
   15784:	42b1      	cmp	r1, r6
   15786:	bf08      	it	eq
   15788:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   1578a:	2b04      	cmp	r3, #4
				user_op = &user_ops[user_ops_first];
   1578c:	eb09 0582 	add.w	r5, r9, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   15790:	d11a      	bne.n	157c8 <ticker_job_list_insert+0x154>
				id_insert = user_op->id;
   15792:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
   15796:	9902      	ldr	r1, [sp, #8]
   15798:	eb08 0348 	add.w	r3, r8, r8, lsl #1
   1579c:	eb01 1403 	add.w	r4, r1, r3, lsl #4
   157a0:	ea4f 1a03 	mov.w	sl, r3, lsl #4
				      ticker->ack) & 0xff) != 0U) {
   157a4:	78a1      	ldrb	r1, [r4, #2]
				if (((ticker->req -
   157a6:	7863      	ldrb	r3, [r4, #1]
   157a8:	1a5b      	subs	r3, r3, r1
   157aa:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   157ae:	d025      	beq.n	157fc <ticker_job_list_insert+0x188>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   157b0:	f04f 0300 	mov.w	r3, #0
   157b4:	f809 3022 	strb.w	r3, [r9, r2, lsl #2]
	if (user_op->fp_op_func) {
   157b8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		user_op->fp_op_func(user_op->status, user_op->op_context);
   157ba:	2001      	movs	r0, #1
	user_op->status = status;
   157bc:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   157be:	b10b      	cbz	r3, 157c4 <ticker_job_list_insert+0x150>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   157c0:	6b29      	ldr	r1, [r5, #48]	; 0x30
   157c2:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
   157c4:	f89b 0002 	ldrb.w	r0, [fp, #2]
   157c8:	42b0      	cmp	r0, r6
   157ca:	d1d1      	bne.n	15770 <ticker_job_list_insert+0xfc>
	while (count_user--) {
   157cc:	9a03      	ldr	r2, [sp, #12]
   157ce:	9905      	ldr	r1, [sp, #20]
   157d0:	4291      	cmp	r1, r2
   157d2:	f1a2 0308 	sub.w	r3, r2, #8
   157d6:	d04e      	beq.n	15876 <ticker_job_list_insert+0x202>
   157d8:	9303      	str	r3, [sp, #12]
   157da:	e75e      	b.n	1569a <ticker_job_list_insert+0x26>
	ticker_new->ticks_to_expire = ticks_to_expire;
   157dc:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   157e0:	f88b 3000 	strb.w	r3, [fp]
   157e4:	461a      	mov	r2, r3
		node[previous].next = id;
   157e6:	fa0f f989 	sxth.w	r9, r9
   157ea:	eb09 0949 	add.w	r9, r9, r9, lsl #1
   157ee:	ea4f 1909 	mov.w	r9, r9, lsl #4
   157f2:	f80e 8009 	strb.w	r8, [lr, r9]
   157f6:	e792      	b.n	1571e <ticker_job_list_insert+0xaa>
   157f8:	4601      	mov	r1, r0
   157fa:	e786      	b.n	1570a <ticker_job_list_insert+0x96>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   157fc:	8aaa      	ldrh	r2, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   157fe:	9901      	ldr	r1, [sp, #4]
	ticker->ext_data = start->ext_data;
   15800:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
				ticker_job_op_start(ticker, user_op,
   15804:	6949      	ldr	r1, [r1, #20]
	ticker->remainder_periodic = start->remainder_periodic;
   15806:	e9d5 ec03 	ldrd	lr, ip, [r5, #12]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   1580a:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   1580e:	4282      	cmp	r2, r0
	ticker->ext_data = start->ext_data;
   15810:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   15814:	f8c4 e004 	str.w	lr, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   15818:	f8c4 c020 	str.w	ip, [r4, #32]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   1581c:	d024      	beq.n	15868 <ticker_job_list_insert+0x1f4>
		ticker->must_expire =
   1581e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15822:	1ad3      	subs	r3, r2, r3
   15824:	fab3 f383 	clz	r3, r3
   15828:	095b      	lsrs	r3, r3, #5
   1582a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->lazy_periodic =
   1582e:	f64f 73fd 	movw	r3, #65533	; 0xfffd
   15832:	429a      	cmp	r2, r3
   15834:	bf88      	it	hi
   15836:	2200      	movhi	r2, #0
	ticker->ticks_slot = start->ticks_slot;
   15838:	69ab      	ldr	r3, [r5, #24]
   1583a:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   1583c:	69eb      	ldr	r3, [r5, #28]
   1583e:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   15840:	6a2b      	ldr	r3, [r5, #32]
   15842:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
   15844:	68ab      	ldr	r3, [r5, #8]
   15846:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
   15848:	2300      	movs	r3, #0
	ticker->lazy_periodic =
   1584a:	83a2      	strh	r2, [r4, #28]
	ticker->ticks_to_expire_minus = 0U;
   1584c:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   1584e:	686a      	ldr	r2, [r5, #4]
   15850:	4620      	mov	r0, r4
	ticker->ticks_to_expire_minus = 0U;
   15852:	4699      	mov	r9, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   15854:	f7ff feea 	bl	1562c <ticks_to_expire_prep>
	ticker->force = 1U;
   15858:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
   1585c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   15860:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
   15864:	70e3      	strb	r3, [r4, #3]
}
   15866:	e729      	b.n	156bc <ticker_job_list_insert+0x48>
	ticker->lazy_periodic =
   15868:	461a      	mov	r2, r3
   1586a:	e7e5      	b.n	15838 <ticker_job_list_insert+0x1c4>
	ticker_new->next = current;
   1586c:	f80e 200a 	strb.w	r2, [lr, sl]
		instance->ticker_id_head = id;
   15870:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
   15874:	e75e      	b.n	15734 <ticker_job_list_insert+0xc0>
}
   15876:	b007      	add	sp, #28
   15878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001587c <ticker_worker>:
{
   1587c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   15880:	7f82      	ldrb	r2, [r0, #30]
{
   15882:	b08f      	sub	sp, #60	; 0x3c
	instance->worker_trigger = 1U;
   15884:	2301      	movs	r3, #1
	if (instance->job_guard) {
   15886:	9206      	str	r2, [sp, #24]
	instance->worker_trigger = 1U;
   15888:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   1588a:	2a00      	cmp	r2, #0
   1588c:	d15b      	bne.n	15946 <ticker_worker+0xca>
	if (instance->ticker_id_head == TICKER_NULL) {
   1588e:	7f43      	ldrb	r3, [r0, #29]
   15890:	2bff      	cmp	r3, #255	; 0xff
   15892:	4681      	mov	r9, r0
   15894:	d056      	beq.n	15944 <ticker_worker+0xc8>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   15896:	f00c f8c7 	bl	21a28 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1589a:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1589e:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
   158a2:	f899 801d 	ldrb.w	r8, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   158a6:	1a80      	subs	r0, r0, r2
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   158a8:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   158aa:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   158ae:	f000 813c 	beq.w	15b2a <ticker_worker+0x2ae>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   158b2:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
   158b6:	42bb      	cmp	r3, r7
   158b8:	bf94      	ite	ls
   158ba:	2300      	movls	r3, #0
   158bc:	2301      	movhi	r3, #1
   158be:	9303      	str	r3, [sp, #12]
	while (ticker_id_head != TICKER_NULL) {
   158c0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
	node = &instance->nodes[0];
   158c4:	f8d9 b000 	ldr.w	fp, [r9]
	while (ticker_id_head != TICKER_NULL) {
   158c8:	f000 8145 	beq.w	15b56 <ticker_worker+0x2da>
	ticks_expired = 0U;
   158cc:	f04f 0a00 	mov.w	sl, #0
			must_expire_skip = 1U;
   158d0:	f8cd 9010 	str.w	r9, [sp, #16]
		ticker = &node[ticker_id_head];
   158d4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
   158d8:	eb0b 1408 	add.w	r4, fp, r8, lsl #4
   158dc:	ea4f 1808 	mov.w	r8, r8, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
   158e0:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   158e2:	42bb      	cmp	r3, r7
   158e4:	d837      	bhi.n	15956 <ticker_worker+0xda>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   158e6:	78a1      	ldrb	r1, [r4, #2]
		ticker_id_head = ticker->next;
   158e8:	f81b 8008 	ldrb.w	r8, [fp, r8]
		ticks_elapsed -= ticks_to_expire;
   158ec:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
   158ee:	449a      	add	sl, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   158f0:	7863      	ldrb	r3, [r4, #1]
   158f2:	1a5b      	subs	r3, r3, r1
   158f4:	b2db      	uxtb	r3, r3
   158f6:	2b01      	cmp	r3, #1
   158f8:	d12a      	bne.n	15950 <ticker_worker+0xd4>
		if (ticker->ticks_slot != 0U &&
   158fa:	69a6      	ldr	r6, [r4, #24]
   158fc:	2e00      	cmp	r6, #0
   158fe:	d054      	beq.n	159aa <ticker_worker+0x12e>
   15900:	9b03      	ldr	r3, [sp, #12]
   15902:	2b00      	cmp	r3, #0
   15904:	d04c      	beq.n	159a0 <ticker_worker+0x124>
		int32_t lazy_current = ticker->lazy_current;
   15906:	8be3      	ldrh	r3, [r4, #30]
   15908:	9305      	str	r3, [sp, #20]
			struct ticker_ext *ext_data = ticker->ext_data;
   1590a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
   1590c:	b13b      	cbz	r3, 1591e <ticker_worker+0xa2>
   1590e:	681a      	ldr	r2, [r3, #0]
   15910:	b11a      	cbz	r2, 1591a <ticker_worker+0x9e>
			    ext_data->ticks_slot_window != 0U &&
   15912:	7a1a      	ldrb	r2, [r3, #8]
   15914:	2a00      	cmp	r2, #0
   15916:	f000 80ef 	beq.w	15af8 <ticker_worker+0x27c>
				ext_data->reschedule_state =
   1591a:	2200      	movs	r2, #0
   1591c:	721a      	strb	r2, [r3, #8]
			ticker->lazy_current++;
   1591e:	9a05      	ldr	r2, [sp, #20]
			if ((ticker->must_expire == 0U) ||
   15920:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   15924:	3201      	adds	r2, #1
   15926:	b292      	uxth	r2, r2
   15928:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   1592a:	b178      	cbz	r0, 1594c <ticker_worker+0xd0>
   1592c:	8ba0      	ldrh	r0, [r4, #28]
   1592e:	4290      	cmp	r0, r2
   15930:	d20c      	bcs.n	1594c <ticker_worker+0xd0>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   15932:	2b00      	cmp	r3, #0
   15934:	f000 80fc 	beq.w	15b30 <ticker_worker+0x2b4>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   15938:	7a1a      	ldrb	r2, [r3, #8]
   1593a:	2a01      	cmp	r2, #1
   1593c:	d006      	beq.n	1594c <ticker_worker+0xd0>
			must_expire_skip = 1U;
   1593e:	f04f 0c01 	mov.w	ip, #1
   15942:	e036      	b.n	159b2 <ticker_worker+0x136>
		instance->worker_trigger = 0U;
   15944:	77c2      	strb	r2, [r0, #31]
}
   15946:	b00f      	add	sp, #60	; 0x3c
   15948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
   1594c:	3901      	subs	r1, #1
   1594e:	70a1      	strb	r1, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
   15950:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   15954:	d1be      	bne.n	158d4 <ticker_worker+0x58>
   15956:	f8dd 9010 	ldr.w	r9, [sp, #16]
   1595a:	4651      	mov	r1, sl
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   1595c:	f899 300b 	ldrb.w	r3, [r9, #11]
   15960:	f899 200a 	ldrb.w	r2, [r9, #10]
   15964:	429a      	cmp	r2, r3
   15966:	d10a      	bne.n	1597e <ticker_worker+0x102>
	uint8_t idx = *ticks_elapsed_index + 1;
   15968:	3201      	adds	r2, #1
   1596a:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
   1596c:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1596e:	bf1c      	itt	ne
   15970:	4613      	movne	r3, r2
   15972:	9306      	strne	r3, [sp, #24]
	*ticks_elapsed_index = idx;
   15974:	9a06      	ldr	r2, [sp, #24]
   15976:	f889 200b 	strb.w	r2, [r9, #11]
   1597a:	bf08      	it	eq
   1597c:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1597e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   15982:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   15986:	60d9      	str	r1, [r3, #12]
	instance->worker_trigger = 0U;
   15988:	2200      	movs	r2, #0
   1598a:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1598e:	464b      	mov	r3, r9
   15990:	2201      	movs	r2, #1
   15992:	2104      	movs	r1, #4
   15994:	2003      	movs	r0, #3
   15996:	46a4      	mov	ip, r4
}
   15998:	b00f      	add	sp, #60	; 0x3c
   1599a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1599e:	4760      	bx	ip
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   159a0:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   159a4:	9307      	str	r3, [sp, #28]
   159a6:	3380      	adds	r3, #128	; 0x80
   159a8:	d141      	bne.n	15a2e <ticker_worker+0x1b2>
		if (ticker->ext_data) {
   159aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   159ac:	b1f3      	cbz	r3, 159ec <ticker_worker+0x170>
   159ae:	f04f 0c00 	mov.w	ip, #0
			ticker->ext_data->ticks_drift = 0U;
   159b2:	2200      	movs	r2, #0
			ticker->ext_data->reschedule_state =
   159b4:	721a      	strb	r2, [r3, #8]
		if (ticker->timeout_func) {
   159b6:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   159b8:	1e48      	subs	r0, r1, #1
			ticks_drift = ticker->ext_data->ticks_drift;
   159ba:	6859      	ldr	r1, [r3, #4]
			ticker->ext_data->ticks_drift = 0U;
   159bc:	605a      	str	r2, [r3, #4]
		ticker->ack--;
   159be:	70a0      	strb	r0, [r4, #2]
		if (ticker->timeout_func) {
   159c0:	2d00      	cmp	r5, #0
   159c2:	d0c5      	beq.n	15950 <ticker_worker+0xd4>
					   ticks_expired -
   159c4:	9b04      	ldr	r3, [sp, #16]
   159c6:	6960      	ldr	r0, [r4, #20]
   159c8:	695b      	ldr	r3, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
   159ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
   159cc:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
   159ce:	ebaa 0000 	sub.w	r0, sl, r0
   159d2:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   159d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			uint8_t next_force = (ticker_next->force > ticker->force);
   159d8:	78e3      	ldrb	r3, [r4, #3]
			ticker->timeout_func(ticks_at_expire,
   159da:	f1bc 0f00 	cmp.w	ip, #0
   159de:	d016      	beq.n	15a0e <ticker_worker+0x192>
   159e0:	e9cd 3600 	strd	r3, r6, [sp]
   159e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   159e8:	47a8      	blx	r5
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   159ea:	e7b1      	b.n	15950 <ticker_worker+0xd4>
		if (ticker->timeout_func) {
   159ec:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   159ee:	3901      	subs	r1, #1
   159f0:	70a1      	strb	r1, [r4, #2]
		if (ticker->timeout_func) {
   159f2:	2d00      	cmp	r5, #0
   159f4:	d0ac      	beq.n	15950 <ticker_worker+0xd4>
			ticks_drift = 0U;
   159f6:	4619      	mov	r1, r3
					   ticks_expired -
   159f8:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   159fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
   159fc:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
   159fe:	ebaa 0003 	sub.w	r0, sl, r3
   15a02:	9b04      	ldr	r3, [sp, #16]
   15a04:	695b      	ldr	r3, [r3, #20]
   15a06:	4418      	add	r0, r3
			uint8_t next_force = (ticker_next->force > ticker->force);
   15a08:	78e3      	ldrb	r3, [r4, #3]
			ticks_at_expire = (instance->ticks_current +
   15a0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   15a0e:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
   15a12:	e9cd 3600 	strd	r3, r6, [sp]
   15a16:	4663      	mov	r3, ip
   15a18:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
   15a1a:	69a3      	ldr	r3, [r4, #24]
					slot_reserved = 1U;
   15a1c:	2b00      	cmp	r3, #0
   15a1e:	9b03      	ldr	r3, [sp, #12]
   15a20:	bf18      	it	ne
   15a22:	2301      	movne	r3, #1
   15a24:	9303      	str	r3, [sp, #12]
				ticker->lazy_current = 0U;
   15a26:	2300      	movs	r3, #0
   15a28:	83e3      	strh	r3, [r4, #30]
				ticker->force = 0U;
   15a2a:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
   15a2c:	e790      	b.n	15950 <ticker_worker+0xd4>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   15a2e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   15a32:	d0ba      	beq.n	159aa <ticker_worker+0x12e>
		int32_t lazy_current = ticker->lazy_current;
   15a34:	8be2      	ldrh	r2, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   15a36:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
   15a38:	6865      	ldr	r5, [r4, #4]
		int32_t lazy_current = ticker->lazy_current;
   15a3a:	9205      	str	r2, [sp, #20]
		if (lazy_current >= ticker->lazy_periodic) {
   15a3c:	429a      	cmp	r2, r3
			lazy_current -= ticker->lazy_periodic;
   15a3e:	bf28      	it	cs
   15a40:	1ad2      	subcs	r2, r2, r3
		uint32_t current_age = ticker->ticks_periodic +
   15a42:	fb02 5005 	mla	r0, r2, r5, r5
   15a46:	9008      	str	r0, [sp, #32]
				(lazy_current - ticker->priority);
   15a48:	9807      	ldr	r0, [sp, #28]
		uint32_t acc_ticks_to_expire = 0U;
   15a4a:	e9cd 170a 	strd	r1, r7, [sp, #40]	; 0x28
				(lazy_current - ticker->priority);
   15a4e:	1a12      	subs	r2, r2, r0
		uint32_t acc_ticks_to_expire = 0U;
   15a50:	e9cd a80c 	strd	sl, r8, [sp, #48]	; 0x30
		uint32_t current_age = ticker->ticks_periodic +
   15a54:	4643      	mov	r3, r8
				(lazy_current - ticker->priority);
   15a56:	9209      	str	r2, [sp, #36]	; 0x24
		uint32_t acc_ticks_to_expire = 0U;
   15a58:	46a0      	mov	r8, r4
   15a5a:	f04f 0c00 	mov.w	ip, #0
   15a5e:	462c      	mov	r4, r5
			struct ticker_node *ticker_next = &nodes[id_head];
   15a60:	b21b      	sxth	r3, r3
   15a62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   15a66:	eb0b 1203 	add.w	r2, fp, r3, lsl #4
   15a6a:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   15a6c:	f8d2 e008 	ldr.w	lr, [r2, #8]
   15a70:	44f4      	add	ip, lr
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   15a72:	4566      	cmp	r6, ip
   15a74:	d339      	bcc.n	15aea <ticker_worker+0x26e>
			if (ticker_next->ticks_slot == 0U) {
   15a76:	6991      	ldr	r1, [r2, #24]
   15a78:	b399      	cbz	r1, 15ae2 <ticker_worker+0x266>
			int32_t lazy_next = ticker_next->lazy_current;
   15a7a:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
   15a7c:	8b90      	ldrh	r0, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   15a7e:	f8d2 9004 	ldr.w	r9, [r2, #4]
				ticker_next->priority;
   15a82:	f992 702d 	ldrsb.w	r7, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
   15a86:	4281      	cmp	r1, r0
			int32_t lazy_next = ticker_next->lazy_current;
   15a88:	460d      	mov	r5, r1
				lazy_next -= ticker_next->lazy_periodic;
   15a8a:	bf28      	it	cs
   15a8c:	1a0d      	subcs	r5, r1, r0
					  0U :
   15a8e:	f1b9 0f00 	cmp.w	r9, #0
   15a92:	d03e      	beq.n	15b12 <ticker_worker+0x296>
   15a94:	eba9 0e0e 	sub.w	lr, r9, lr
				(ticker->ticks_periodic == 0U) ||
   15a98:	b3bc      	cbz	r4, 15b0a <ticker_worker+0x28e>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   15a9a:	fb09 ee05 	mla	lr, r9, r5, lr
				(ticker->ticks_periodic == 0U) ||
   15a9e:	f8dd 9020 	ldr.w	r9, [sp, #32]
   15aa2:	45f1      	cmp	r9, lr
   15aa4:	bf8c      	ite	hi
   15aa6:	f04f 0e01 	movhi.w	lr, #1
   15aaa:	f04f 0e00 	movls.w	lr, #0
					(ticker->ticks_periodic != 0U) &&
   15aae:	bf34      	ite	cc
   15ab0:	f04f 0901 	movcc.w	r9, #1
   15ab4:	f04f 0900 	movcs.w	r9, #0
			if (!lazy_next_periodic_skip &&
   15ab8:	4281      	cmp	r1, r0
			uint8_t next_force = (ticker_next->force > ticker->force);
   15aba:	f892 a003 	ldrb.w	sl, [r2, #3]
   15abe:	f898 2003 	ldrb.w	r2, [r8, #3]
			if (!lazy_next_periodic_skip &&
   15ac2:	d30e      	bcc.n	15ae2 <ticker_worker+0x266>
   15ac4:	4592      	cmp	sl, r2
   15ac6:	d829      	bhi.n	15b1c <ticker_worker+0x2a0>
			    (next_force ||
   15ac8:	f117 0f80 	cmn.w	r7, #128	; 0x80
   15acc:	d026      	beq.n	15b1c <ticker_worker+0x2a0>
			     next_is_critical ||
   15ace:	9a09      	ldr	r2, [sp, #36]	; 0x24
				(lazy_next - ticker_next->priority) >
   15ad0:	1bed      	subs	r5, r5, r7
			     next_is_critical ||
   15ad2:	4295      	cmp	r5, r2
   15ad4:	dd02      	ble.n	15adc <ticker_worker+0x260>
			     (next_has_priority && !current_is_older) ||
   15ad6:	f1be 0f00 	cmp.w	lr, #0
   15ada:	d01f      	beq.n	15b1c <ticker_worker+0x2a0>
   15adc:	9a07      	ldr	r2, [sp, #28]
   15ade:	42ba      	cmp	r2, r7
   15ae0:	d019      	beq.n	15b16 <ticker_worker+0x29a>
			id_head = ticker_next->next;
   15ae2:	f81b 3003 	ldrb.w	r3, [fp, r3]
		while (id_head != TICKER_NULL) {
   15ae6:	2bff      	cmp	r3, #255	; 0xff
   15ae8:	d1ba      	bne.n	15a60 <ticker_worker+0x1e4>
   15aea:	4644      	mov	r4, r8
   15aec:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
   15af0:	990a      	ldr	r1, [sp, #40]	; 0x28
   15af2:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   15af6:	e758      	b.n	159aa <ticker_worker+0x12e>
			    TICKER_RESCHEDULE_STATE_NONE &&
   15af8:	8ba2      	ldrh	r2, [r4, #28]
   15afa:	9805      	ldr	r0, [sp, #20]
   15afc:	4282      	cmp	r2, r0
   15afe:	f63f af0c 	bhi.w	1591a <ticker_worker+0x9e>
				ext_data->reschedule_state =
   15b02:	f04f 0201 	mov.w	r2, #1
   15b06:	721a      	strb	r2, [r3, #8]
   15b08:	e709      	b.n	1591e <ticker_worker+0xa2>
				(ticker->ticks_periodic == 0U) ||
   15b0a:	f04f 0e01 	mov.w	lr, #1
					(ticker->ticks_periodic != 0U) &&
   15b0e:	46a1      	mov	r9, r4
   15b10:	e7d2      	b.n	15ab8 <ticker_worker+0x23c>
					  0U :
   15b12:	46ce      	mov	lr, r9
   15b14:	e7c0      	b.n	15a98 <ticker_worker+0x21c>
			     (equal_priority && next_is_older))) {
   15b16:	f1b9 0f00 	cmp.w	r9, #0
   15b1a:	d0e2      	beq.n	15ae2 <ticker_worker+0x266>
   15b1c:	4644      	mov	r4, r8
   15b1e:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
   15b22:	990a      	ldr	r1, [sp, #40]	; 0x28
   15b24:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   15b28:	e6ef      	b.n	1590a <ticker_worker+0x8e>
	uint8_t slot_reserved = 0;
   15b2a:	9b06      	ldr	r3, [sp, #24]
   15b2c:	9303      	str	r3, [sp, #12]
   15b2e:	e6c7      	b.n	158c0 <ticker_worker+0x44>
		if (ticker->timeout_func) {
   15b30:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   15b32:	3901      	subs	r1, #1
   15b34:	70a1      	strb	r1, [r4, #2]
		if (ticker->timeout_func) {
   15b36:	2d00      	cmp	r5, #0
   15b38:	f43f af0a 	beq.w	15950 <ticker_worker+0xd4>
			ticks_drift = 0U;
   15b3c:	4619      	mov	r1, r3
					   ticks_expired -
   15b3e:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   15b40:	6a62      	ldr	r2, [r4, #36]	; 0x24
   15b42:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
   15b44:	ebaa 0003 	sub.w	r0, sl, r3
   15b48:	9b04      	ldr	r3, [sp, #16]
   15b4a:	695b      	ldr	r3, [r3, #20]
   15b4c:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   15b4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			uint8_t next_force = (ticker_next->force > ticker->force);
   15b52:	78e3      	ldrb	r3, [r4, #3]
   15b54:	e744      	b.n	159e0 <ticker_worker+0x164>
	ticks_expired = 0U;
   15b56:	2300      	movs	r3, #0
   15b58:	4619      	mov	r1, r3
   15b5a:	e6ff      	b.n	1595c <ticker_worker+0xe0>

00015b5c <ticker_job>:
	if (instance->worker_trigger) {
   15b5c:	7fc3      	ldrb	r3, [r0, #31]
   15b5e:	2b00      	cmp	r3, #0
   15b60:	f040 8439 	bne.w	163d6 <ticker_job+0x87a>
{
   15b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   15b68:	7f82      	ldrb	r2, [r0, #30]
{
   15b6a:	b08d      	sub	sp, #52	; 0x34
   15b6c:	4683      	mov	fp, r0
	if (instance->job_guard) {
   15b6e:	2a00      	cmp	r2, #0
   15b70:	d17d      	bne.n	15c6e <ticker_job+0x112>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   15b72:	7a83      	ldrb	r3, [r0, #10]
   15b74:	7ac1      	ldrb	r1, [r0, #11]
	instance->job_guard = 1U;
   15b76:	2001      	movs	r0, #1
   15b78:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   15b7c:	4299      	cmp	r1, r3
	ticks_previous = instance->ticks_current;
   15b7e:	f8db 0014 	ldr.w	r0, [fp, #20]
   15b82:	9007      	str	r0, [sp, #28]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   15b84:	f000 844d 	beq.w	16422 <ticker_job+0x8c6>
	uint8_t idx = *ticks_elapsed_index + 1;
   15b88:	3301      	adds	r3, #1
   15b8a:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
   15b8c:	2b02      	cmp	r3, #2
		idx = 0U;
   15b8e:	bf08      	it	eq
   15b90:	4613      	moveq	r3, r2
		ticks_elapsed =
   15b92:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
   15b96:	f88b 300a 	strb.w	r3, [fp, #10]
	ticker_id_old_head = instance->ticker_id_head;
   15b9a:	f89b 301d 	ldrb.w	r3, [fp, #29]
		ticks_elapsed =
   15b9e:	68d2      	ldr	r2, [r2, #12]
	ticker_id_old_head = instance->ticker_id_head;
   15ba0:	9309      	str	r3, [sp, #36]	; 0x24
		instance->ticks_current += ticks_elapsed;
   15ba2:	9b07      	ldr	r3, [sp, #28]
		ticks_elapsed =
   15ba4:	9203      	str	r2, [sp, #12]
		instance->ticks_current += ticks_elapsed;
   15ba6:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   15ba8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	count_user = instance->count_user;
   15bac:	f89b 2009 	ldrb.w	r2, [fp, #9]
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   15bb0:	f8cb 3014 	str.w	r3, [fp, #20]
	node = &instance->nodes[0];
   15bb4:	f8db 3000 	ldr.w	r3, [fp]
   15bb8:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
   15bba:	f8db 3004 	ldr.w	r3, [fp, #4]
   15bbe:	9305      	str	r3, [sp, #20]
	while (count_user--) {
   15bc0:	1e53      	subs	r3, r2, #1
	count_user = instance->count_user;
   15bc2:	9206      	str	r2, [sp, #24]
	while (count_user--) {
   15bc4:	b2db      	uxtb	r3, r3
   15bc6:	2a00      	cmp	r2, #0
   15bc8:	f000 81de 	beq.w	15f88 <ticker_job+0x42c>
		flag_elapsed = 1U;
   15bcc:	2201      	movs	r2, #1
   15bce:	920b      	str	r2, [sp, #44]	; 0x2c
   15bd0:	9a05      	ldr	r2, [sp, #20]
   15bd2:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
	pending = 0U;
   15bd6:	2300      	movs	r3, #0
   15bd8:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   15bda:	23ff      	movs	r3, #255	; 0xff
   15bdc:	9301      	str	r3, [sp, #4]
   15bde:	46ca      	mov	sl, r9
		user_ops = &user->user_op[0];
   15be0:	f8da 8004 	ldr.w	r8, [sl, #4]
		while (user->middle != user->last) {
   15be4:	f89a c003 	ldrb.w	ip, [sl, #3]
   15be8:	f89a 7002 	ldrb.w	r7, [sl, #2]
   15bec:	4567      	cmp	r7, ip
   15bee:	d037      	beq.n	15c60 <ticker_job+0x104>
			if (middle == user->count_user_op) {
   15bf0:	f89a 2000 	ldrb.w	r2, [sl]
			middle = user->middle + 1;
   15bf4:	1c7b      	adds	r3, r7, #1
			user_op = &user_ops[user->middle];
   15bf6:	b23e      	sxth	r6, r7
			middle = user->middle + 1;
   15bf8:	b2db      	uxtb	r3, r3
				middle = 0U;
   15bfa:	429a      	cmp	r2, r3
   15bfc:	bf08      	it	eq
   15bfe:	2300      	moveq	r3, #0
			user_op = &user_ops[user->middle];
   15c00:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   15c04:	eb06 0682 	add.w	r6, r6, r2, lsl #2
			user->middle = middle;
   15c08:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   15c0c:	f818 0026 	ldrb.w	r0, [r8, r6, lsl #2]
   15c10:	2804      	cmp	r0, #4
			user_op = &user_ops[user->middle];
   15c12:	eb08 0486 	add.w	r4, r8, r6, lsl #2
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   15c16:	d934      	bls.n	15c82 <ticker_job+0x126>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   15c18:	2808      	cmp	r0, #8
   15c1a:	d85c      	bhi.n	15cd6 <ticker_job+0x17a>
			ticker = &node[user_op->id];
   15c1c:	7861      	ldrb	r1, [r4, #1]
   15c1e:	9a00      	ldr	r2, [sp, #0]
   15c20:	eb01 0541 	add.w	r5, r1, r1, lsl #1
   15c24:	eb02 1505 	add.w	r5, r2, r5, lsl #4
			state = (ticker->req - ticker->ack) & 0xff;
   15c28:	786a      	ldrb	r2, [r5, #1]
   15c2a:	f895 e002 	ldrb.w	lr, [r5, #2]
   15c2e:	eba2 020e 	sub.w	r2, r2, lr
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   15c32:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   15c36:	d126      	bne.n	15c86 <ticker_job+0x12a>
			    ((state == 0U) &&
   15c38:	2806      	cmp	r0, #6
   15c3a:	d14c      	bne.n	15cd6 <ticker_job+0x17a>
		if (instance->ticker_id_slot_previous == user_op->id) {
   15c3c:	f89b 301c 	ldrb.w	r3, [fp, #28]
   15c40:	428b      	cmp	r3, r1
   15c42:	d02a      	beq.n	15c9a <ticker_job+0x13e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   15c44:	2000      	movs	r0, #0
   15c46:	f808 0026 	strb.w	r0, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
   15c4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	user_op->status = status;
   15c4c:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
   15c4e:	b10b      	cbz	r3, 15c54 <ticker_job+0xf8>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   15c50:	6b21      	ldr	r1, [r4, #48]	; 0x30
   15c52:	4798      	blx	r3
		while (user->middle != user->last) {
   15c54:	f89a c003 	ldrb.w	ip, [sl, #3]
   15c58:	f89a 7002 	ldrb.w	r7, [sl, #2]
   15c5c:	4567      	cmp	r7, ip
   15c5e:	d1c7      	bne.n	15bf0 <ticker_job+0x94>
	while (count_user--) {
   15c60:	9a05      	ldr	r2, [sp, #20]
   15c62:	4552      	cmp	r2, sl
   15c64:	f1aa 0308 	sub.w	r3, sl, #8
   15c68:	d06c      	beq.n	15d44 <ticker_job+0x1e8>
   15c6a:	469a      	mov	sl, r3
   15c6c:	e7b8      	b.n	15be0 <ticker_job+0x84>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
   15c6e:	6a44      	ldr	r4, [r0, #36]	; 0x24
   15c70:	2104      	movs	r1, #4
   15c72:	4603      	mov	r3, r0
   15c74:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   15c76:	2004      	movs	r0, #4
   15c78:	46a4      	mov	ip, r4
}
   15c7a:	b00d      	add	sp, #52	; 0x34
   15c7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   15c80:	4760      	bx	ip
   15c82:	461f      	mov	r7, r3
   15c84:	e7b2      	b.n	15bec <ticker_job+0x90>
			     (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS)) ||
   15c86:	2805      	cmp	r0, #5
   15c88:	d03e      	beq.n	15d08 <ticker_job+0x1ac>
			if ((state == 1U) ||
   15c8a:	2a01      	cmp	r2, #1
   15c8c:	d032      	beq.n	15cf4 <ticker_job+0x198>
   15c8e:	2806      	cmp	r0, #6
   15c90:	d148      	bne.n	15d24 <ticker_job+0x1c8>
		if (instance->ticker_id_slot_previous == user_op->id) {
   15c92:	f89b 301c 	ldrb.w	r3, [fp, #28]
   15c96:	428b      	cmp	r3, r1
   15c98:	d1d4      	bne.n	15c44 <ticker_job+0xe8>
			instance->ticker_id_slot_previous = TICKER_NULL;
   15c9a:	23ff      	movs	r3, #255	; 0xff
   15c9c:	f88b 301c 	strb.w	r3, [fp, #28]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
   15ca0:	f818 3026 	ldrb.w	r3, [r8, r6, lsl #2]
   15ca4:	2b06      	cmp	r3, #6
   15ca6:	f000 814d 	beq.w	15f44 <ticker_job+0x3e8>
   15caa:	2b08      	cmp	r3, #8
   15cac:	f000 814a 	beq.w	15f44 <ticker_job+0x3e8>
				ticks_at_yield = cntr_cnt_get();
   15cb0:	f00b feba 	bl	21a28 <cntr_cnt_get>
			ticks_current = instance->ticks_current;
   15cb4:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
   15cb8:	1a83      	subs	r3, r0, r2
   15cba:	021d      	lsls	r5, r3, #8
   15cbc:	f100 8149 	bmi.w	15f52 <ticker_job+0x3f6>
				ticks_used = ticks_elapsed +
   15cc0:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15cc2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   15cc6:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
   15cc8:	f8db 2018 	ldr.w	r2, [fp, #24]
   15ccc:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
   15cce:	bf88      	it	hi
   15cd0:	f8cb 3018 	strhi.w	r3, [fp, #24]
   15cd4:	e7b6      	b.n	15c44 <ticker_job+0xe8>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   15cd6:	2200      	movs	r2, #0
   15cd8:	f808 2026 	strb.w	r2, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
   15cdc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	user_op->status = status;
   15cde:	2001      	movs	r0, #1
   15ce0:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
   15ce2:	2a00      	cmp	r2, #0
   15ce4:	d0cd      	beq.n	15c82 <ticker_job+0x126>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   15ce6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   15ce8:	4790      	blx	r2
		while (user->middle != user->last) {
   15cea:	f89a c003 	ldrb.w	ip, [sl, #3]
   15cee:	f89a 7002 	ldrb.w	r7, [sl, #2]
   15cf2:	e77b      	b.n	15bec <ticker_job+0x90>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
   15cf4:	2806      	cmp	r0, #6
   15cf6:	d0a1      	beq.n	15c3c <ticker_job+0xe0>
			ticker->ticks_to_expire = ticker_dequeue(instance,
   15cf8:	4658      	mov	r0, fp
   15cfa:	f7ff fc5d 	bl	155b8 <ticker_dequeue>
			ticker->req = ticker->ack;
   15cfe:	78ab      	ldrb	r3, [r5, #2]
			ticker->ticks_to_expire = ticker_dequeue(instance,
   15d00:	60a8      	str	r0, [r5, #8]
			ticker->req = ticker->ack;
   15d02:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   15d04:	7861      	ldrb	r1, [r4, #1]
   15d06:	e799      	b.n	15c3c <ticker_job+0xe0>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   15d08:	6860      	ldr	r0, [r4, #4]
   15d0a:	b948      	cbnz	r0, 15d20 <ticker_job+0x1c4>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   15d0c:	68a0      	ldr	r0, [r4, #8]
   15d0e:	b938      	cbnz	r0, 15d20 <ticker_job+0x1c4>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   15d10:	68e0      	ldr	r0, [r4, #12]
   15d12:	b928      	cbnz	r0, 15d20 <ticker_job+0x1c4>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   15d14:	6920      	ldr	r0, [r4, #16]
   15d16:	b918      	cbnz	r0, 15d20 <ticker_job+0x1c4>
			     (user_op->params.update.lazy == 0U) &&
   15d18:	6960      	ldr	r0, [r4, #20]
   15d1a:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
   15d1e:	d0da      	beq.n	15cd6 <ticker_job+0x17a>
			if ((state == 1U) ||
   15d20:	2a01      	cmp	r2, #1
   15d22:	d076      	beq.n	15e12 <ticker_job+0x2b6>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   15d24:	2104      	movs	r1, #4
   15d26:	465b      	mov	r3, fp
   15d28:	2201      	movs	r2, #1
   15d2a:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   15d2e:	4608      	mov	r0, r1
   15d30:	47a0      	blx	r4
	while (count_user--) {
   15d32:	9a05      	ldr	r2, [sp, #20]
				user->middle = prev;
   15d34:	f88a 7002 	strb.w	r7, [sl, #2]
				pending = 1U;
   15d38:	2301      	movs	r3, #1
	while (count_user--) {
   15d3a:	4552      	cmp	r2, sl
				pending = 1U;
   15d3c:	9308      	str	r3, [sp, #32]
	while (count_user--) {
   15d3e:	f1aa 0308 	sub.w	r3, sl, #8
   15d42:	d192      	bne.n	15c6a <ticker_job+0x10e>
	if (instance->ticker_id_head != ticker_id_old_head) {
   15d44:	f89b 301d 	ldrb.w	r3, [fp, #29]
		flag_compare_update = 1U;
   15d48:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15d4a:	1a9b      	subs	r3, r3, r2
   15d4c:	bf18      	it	ne
   15d4e:	2301      	movne	r3, #1
   15d50:	9306      	str	r3, [sp, #24]
	if (flag_elapsed) {
   15d52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15d54:	2b00      	cmp	r3, #0
   15d56:	f040 811b 	bne.w	15f90 <ticker_job+0x434>
		ticker_job_list_insert(instance, insert_head);
   15d5a:	9901      	ldr	r1, [sp, #4]
   15d5c:	4658      	mov	r0, fp
   15d5e:	f7ff fc89 	bl	15674 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
   15d62:	f89b 301d 	ldrb.w	r3, [fp, #29]
   15d66:	9300      	str	r3, [sp, #0]
   15d68:	9b00      	ldr	r3, [sp, #0]
   15d6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15d6c:	4293      	cmp	r3, r2
   15d6e:	f000 831c 	beq.w	163aa <ticker_job+0x84e>
	if (!pending) {
   15d72:	9b08      	ldr	r3, [sp, #32]
   15d74:	2b00      	cmp	r3, #0
   15d76:	f000 8296 	beq.w	162a6 <ticker_job+0x74a>
	if (instance->ticker_id_head == TICKER_NULL) {
   15d7a:	f89b 301d 	ldrb.w	r3, [fp, #29]
   15d7e:	9300      	str	r3, [sp, #0]
   15d80:	9b00      	ldr	r3, [sp, #0]
   15d82:	2bff      	cmp	r3, #255	; 0xff
   15d84:	f000 8378 	beq.w	16478 <ticker_job+0x91c>
	if (ticker_id_old_head == TICKER_NULL) {
   15d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15d8a:	2bff      	cmp	r3, #255	; 0xff
   15d8c:	f000 837f 	beq.w	1648e <ticker_job+0x932>
	ticker = &instance->nodes[instance->ticker_id_head];
   15d90:	9a00      	ldr	r2, [sp, #0]
	ticks_to_expire = ticker->ticks_to_expire;
   15d92:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
   15d96:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 15f74 <ticker_job+0x418>
   15d9a:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 15f78 <ticker_job+0x41c>
   15d9e:	4f77      	ldr	r7, [pc, #476]	; (15f7c <ticker_job+0x420>)
	ticker = &instance->nodes[instance->ticker_id_head];
   15da0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   15da4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	i = 10U;
   15da8:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
   15daa:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
   15dac:	f00b fe3c 	bl	21a28 <cntr_cnt_get>
		cc = instance->ticks_current;
   15db0:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15db4:	1b03      	subs	r3, r0, r4
   15db6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   15dba:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   15dbc:	42b3      	cmp	r3, r6
   15dbe:	bf2c      	ite	cs
   15dc0:	18e4      	addcs	r4, r4, r3
   15dc2:	19a4      	addcc	r4, r4, r6
		cc &= HAL_TICKER_CNTR_MASK;
   15dc4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
   15dc8:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
		ctr = cntr_cnt_get();
   15dcc:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
   15dce:	4620      	mov	r0, r4
   15dd0:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   15dd2:	f00b fe29 	bl	21a28 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15dd6:	eba0 030a 	sub.w	r3, r0, sl
   15dda:	eba4 040a 	sub.w	r4, r4, sl
   15dde:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   15de2:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15de4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
   15de8:	42a3      	cmp	r3, r4
		i--;
   15dea:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
   15dee:	f240 82e3 	bls.w	163b8 <ticker_job+0x85c>
		LL_ASSERT(i);
   15df2:	2d00      	cmp	r5, #0
   15df4:	d1da      	bne.n	15dac <ticker_job+0x250>
   15df6:	f44f 6314 	mov.w	r3, #2368	; 0x940
   15dfa:	464a      	mov	r2, r9
   15dfc:	4641      	mov	r1, r8
   15dfe:	4638      	mov	r0, r7
   15e00:	f011 fb98 	bl	27534 <assert_print>
   15e04:	4040      	eors	r0, r0
   15e06:	f380 8811 	msr	BASEPRI, r0
   15e0a:	f04f 0003 	mov.w	r0, #3
   15e0e:	df02      	svc	2
   15e10:	e7cc      	b.n	15dac <ticker_job+0x250>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   15e12:	4658      	mov	r0, fp
   15e14:	f7ff fbd0 	bl	155b8 <ticker_dequeue>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   15e18:	f8db 3014 	ldr.w	r3, [fp, #20]
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   15e1c:	60a8      	str	r0, [r5, #8]
   15e1e:	4607      	mov	r7, r0
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   15e20:	9302      	str	r3, [sp, #8]
	ticks_now = cntr_cnt_get();
   15e22:	f00b fe01 	bl	21a28 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15e26:	9b02      	ldr	r3, [sp, #8]
   15e28:	1ac2      	subs	r2, r0, r3
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   15e2a:	9b03      	ldr	r3, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15e2c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   15e30:	18d1      	adds	r1, r2, r3
	if (ticks_to_expire > ticks_elapsed) {
   15e32:	428f      	cmp	r7, r1
	ticks_now = cntr_cnt_get();
   15e34:	4681      	mov	r9, r0
	if (ticks_to_expire > ticks_elapsed) {
   15e36:	f240 8095 	bls.w	15f64 <ticker_job+0x408>
	ticker->ticks_to_expire_minus +=
   15e3a:	696b      	ldr	r3, [r5, #20]
   15e3c:	9304      	str	r3, [sp, #16]
		ticks_to_expire -= ticks_elapsed;
   15e3e:	1a7a      	subs	r2, r7, r1
	if ((ticker->ticks_periodic != 0U) &&
   15e40:	f8d5 c004 	ldr.w	ip, [r5, #4]
   15e44:	f1bc 0f00 	cmp.w	ip, #0
   15e48:	d051      	beq.n	15eee <ticker_job+0x392>
	    (user_op->params.update.lazy != 0U)) {
   15e4a:	8aa3      	ldrh	r3, [r4, #20]
	if ((ticker->ticks_periodic != 0U) &&
   15e4c:	2b00      	cmp	r3, #0
   15e4e:	d04e      	beq.n	15eee <ticker_job+0x392>
		user_op->params.update.lazy--;
   15e50:	3b01      	subs	r3, #1
   15e52:	b29f      	uxth	r7, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   15e54:	4594      	cmp	ip, r2
		while (ticker->lazy_current < user_op->params.update.lazy) {
   15e56:	8beb      	ldrh	r3, [r5, #30]
		user_op->params.update.lazy--;
   15e58:	82a7      	strh	r7, [r4, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   15e5a:	d223      	bcs.n	15ea4 <ticker_job+0x348>
   15e5c:	f10c 0e01 	add.w	lr, ip, #1
   15e60:	f8cd 8018 	str.w	r8, [sp, #24]
   15e64:	940a      	str	r4, [sp, #40]	; 0x28
   15e66:	e018      	b.n	15e9a <ticker_job+0x33e>
	if ((ticker->remainder_current >= BIT(31)) ||
   15e68:	6a69      	ldr	r1, [r5, #36]	; 0x24
   15e6a:	f8df 8114 	ldr.w	r8, [pc, #276]	; 15f80 <ticker_job+0x424>
   15e6e:	4c45      	ldr	r4, [pc, #276]	; (15f84 <ticker_job+0x428>)
   15e70:	4488      	add	r8, r1
   15e72:	45a0      	cmp	r8, r4
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   15e74:	bf84      	itt	hi
   15e76:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
   15e7a:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
   15e7e:	4670      	mov	r0, lr
	ticker->remainder_current -= ticker->remainder_periodic;
   15e80:	6a2c      	ldr	r4, [r5, #32]
   15e82:	bf94      	ite	ls
   15e84:	4660      	movls	r0, ip
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   15e86:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
			ticker->lazy_current--;
   15e8a:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
   15e8c:	1a12      	subs	r2, r2, r0
	ticker->remainder_current -= ticker->remainder_periodic;
   15e8e:	1b09      	subs	r1, r1, r4
			ticker->lazy_current--;
   15e90:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   15e92:	4594      	cmp	ip, r2
	ticker->remainder_current -= ticker->remainder_periodic;
   15e94:	6269      	str	r1, [r5, #36]	; 0x24
			ticker->lazy_current--;
   15e96:	83eb      	strh	r3, [r5, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   15e98:	d201      	bcs.n	15e9e <ticker_job+0x342>
   15e9a:	429f      	cmp	r7, r3
   15e9c:	d3e4      	bcc.n	15e68 <ticker_job+0x30c>
   15e9e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   15ea2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		while (ticker->lazy_current < user_op->params.update.lazy) {
   15ea4:	429f      	cmp	r7, r3
   15ea6:	d921      	bls.n	15eec <ticker_job+0x390>
			ticks_to_expire += ticker->ticks_periodic +
   15ea8:	f10c 0001 	add.w	r0, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
   15eac:	e9d5 e108 	ldrd	lr, r1, [r5, #32]
			ticks_to_expire += ticker->ticks_periodic +
   15eb0:	9006      	str	r0, [sp, #24]
   15eb2:	940a      	str	r4, [sp, #40]	; 0x28
   15eb4:	e005      	b.n	15ec2 <ticker_job+0x366>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   15eb6:	3301      	adds	r3, #1
   15eb8:	b29b      	uxth	r3, r3
   15eba:	4660      	mov	r0, ip
   15ebc:	429f      	cmp	r7, r3
			ticks_to_expire += ticker->ticks_periodic +
   15ebe:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   15ec0:	d011      	beq.n	15ee6 <ticker_job+0x38a>
	if ((ticker->remainder_current < BIT(31)) &&
   15ec2:	482f      	ldr	r0, [pc, #188]	; (15f80 <ticker_job+0x424>)
   15ec4:	4c2f      	ldr	r4, [pc, #188]	; (15f84 <ticker_job+0x428>)
	ticker->remainder_current += ticker->remainder_periodic;
   15ec6:	4471      	add	r1, lr
	if ((ticker->remainder_current < BIT(31)) &&
   15ec8:	1808      	adds	r0, r1, r0
   15eca:	42a0      	cmp	r0, r4
   15ecc:	d8f3      	bhi.n	15eb6 <ticker_job+0x35a>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   15ece:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
   15ed0:	9806      	ldr	r0, [sp, #24]
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   15ed2:	f1a1 71e8 	sub.w	r1, r1, #30408704	; 0x1d00000
		while (ticker->lazy_current < user_op->params.update.lazy) {
   15ed6:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   15ed8:	f5a1 31d4 	sub.w	r1, r1, #108544	; 0x1a800
		while (ticker->lazy_current < user_op->params.update.lazy) {
   15edc:	429f      	cmp	r7, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   15ede:	f5a1 71a5 	sub.w	r1, r1, #330	; 0x14a
			ticks_to_expire += ticker->ticks_periodic +
   15ee2:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   15ee4:	d1ed      	bne.n	15ec2 <ticker_job+0x366>
   15ee6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   15ee8:	6269      	str	r1, [r5, #36]	; 0x24
   15eea:	83ef      	strh	r7, [r5, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
   15eec:	83af      	strh	r7, [r5, #28]
				  user_op->params.update.ticks_drift_plus;
   15eee:	6861      	ldr	r1, [r4, #4]
				user_op->params.update.ticks_drift_minus;
   15ef0:	68a0      	ldr	r0, [r4, #8]
	ticker->ticks_to_expire_minus +=
   15ef2:	9b04      	ldr	r3, [sp, #16]
	ticker->ticks_to_expire = ticks_to_expire +
   15ef4:	440a      	add	r2, r1
   15ef6:	60aa      	str	r2, [r5, #8]
	struct ticker_ext *ext_data = ticker->ext_data;
   15ef8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	ticker->ticks_to_expire_minus +=
   15efa:	4403      	add	r3, r0
   15efc:	616b      	str	r3, [r5, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   15efe:	b11a      	cbz	r2, 15f08 <ticker_job+0x3ac>
   15f00:	6813      	ldr	r3, [r2, #0]
   15f02:	b10b      	cbz	r3, 15f08 <ticker_job+0x3ac>
			user_op->params.update.ticks_drift_plus -
   15f04:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
   15f06:	6051      	str	r1, [r2, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   15f08:	464a      	mov	r2, r9
   15f0a:	9902      	ldr	r1, [sp, #8]
   15f0c:	4628      	mov	r0, r5
   15f0e:	f7ff fb8d 	bl	1562c <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   15f12:	68e2      	ldr	r2, [r4, #12]
   15f14:	69ab      	ldr	r3, [r5, #24]
   15f16:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   15f18:	6922      	ldr	r2, [r4, #16]
   15f1a:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   15f1c:	bf8c      	ite	hi
   15f1e:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   15f20:	2300      	movls	r3, #0
   15f22:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
   15f24:	7da3      	ldrb	r3, [r4, #22]
   15f26:	b103      	cbz	r3, 15f2a <ticker_job+0x3ce>
		ticker->force = user_op->params.update.force;
   15f28:	70eb      	strb	r3, [r5, #3]
	if (user_op->params.update.must_expire) {
   15f2a:	7de3      	ldrb	r3, [r4, #23]
   15f2c:	b113      	cbz	r3, 15f34 <ticker_job+0x3d8>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
   15f2e:	3b01      	subs	r3, #1
   15f30:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	ticker->next = *insert_head;
   15f34:	9b01      	ldr	r3, [sp, #4]
   15f36:	702b      	strb	r3, [r5, #0]
		ticker->req++;
   15f38:	786b      	ldrb	r3, [r5, #1]
	*insert_head = user_op->id;
   15f3a:	7862      	ldrb	r2, [r4, #1]
   15f3c:	9201      	str	r2, [sp, #4]
		ticker->req++;
   15f3e:	3301      	adds	r3, #1
   15f40:	706b      	strb	r3, [r5, #1]
   15f42:	e67f      	b.n	15c44 <ticker_job+0xe8>
				ticks_at_yield =
   15f44:	6860      	ldr	r0, [r4, #4]
			ticks_current = instance->ticks_current;
   15f46:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
   15f4a:	1a83      	subs	r3, r0, r2
   15f4c:	021d      	lsls	r5, r3, #8
   15f4e:	f57f aeb7 	bpl.w	15cc0 <ticker_job+0x164>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15f52:	1a13      	subs	r3, r2, r0
				if (ticks_elapsed > ticks_used) {
   15f54:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15f56:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   15f5a:	4293      	cmp	r3, r2
					ticks_used = ticks_elapsed -
   15f5c:	bf34      	ite	cc
   15f5e:	1ad3      	subcc	r3, r2, r3
					ticks_used = 0;
   15f60:	2300      	movcs	r3, #0
   15f62:	e6b1      	b.n	15cc8 <ticker_job+0x16c>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   15f64:	696b      	ldr	r3, [r5, #20]
   15f66:	1bda      	subs	r2, r3, r7
   15f68:	1853      	adds	r3, r2, r1
   15f6a:	9304      	str	r3, [sp, #16]
   15f6c:	616b      	str	r3, [r5, #20]
		ticks_to_expire = 0U;
   15f6e:	2200      	movs	r2, #0
   15f70:	e766      	b.n	15e40 <ticker_job+0x2e4>
   15f72:	bf00      	nop
   15f74:	0002f860 	.word	0x0002f860
   15f78:	0002f90c 	.word	0x0002f90c
   15f7c:	0002f8a0 	.word	0x0002f8a0
   15f80:	ff172b5a 	.word	0xff172b5a
   15f84:	7f172b59 	.word	0x7f172b59
	pending = 0U;
   15f88:	9b06      	ldr	r3, [sp, #24]
   15f8a:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   15f8c:	23ff      	movs	r3, #255	; 0xff
   15f8e:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
   15f90:	f00b fd4a 	bl	21a28 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15f94:	9b07      	ldr	r3, [sp, #28]
	while (instance->ticker_id_head != TICKER_NULL) {
   15f96:	f89b 601d 	ldrb.w	r6, [fp, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15f9a:	1ac3      	subs	r3, r0, r3
   15f9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   15fa0:	9304      	str	r3, [sp, #16]
	while (instance->ticker_id_head != TICKER_NULL) {
   15fa2:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
   15fa4:	f8db 3000 	ldr.w	r3, [fp]
   15fa8:	9300      	str	r3, [sp, #0]
	while (instance->ticker_id_head != TICKER_NULL) {
   15faa:	d04f      	beq.n	1604c <ticker_job+0x4f0>
	if ((ticker->remainder_current < BIT(31)) &&
   15fac:	f8df 8290 	ldr.w	r8, [pc, #656]	; 16240 <ticker_job+0x6e4>
   15fb0:	f8df 9290 	ldr.w	r9, [pc, #656]	; 16244 <ticker_job+0x6e8>
	while (instance->ticker_id_head != TICKER_NULL) {
   15fb4:	9f03      	ldr	r7, [sp, #12]
	ticks_expired = 0U;
   15fb6:	f04f 0a00 	mov.w	sl, #0
		ticker = &node[id_expired];
   15fba:	9a00      	ldr	r2, [sp, #0]
   15fbc:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   15fc0:	eb02 1403 	add.w	r4, r2, r3, lsl #4
   15fc4:	011b      	lsls	r3, r3, #4
   15fc6:	9302      	str	r3, [sp, #8]
		ticks_to_expire = ticker->ticks_to_expire;
   15fc8:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   15fca:	429f      	cmp	r7, r3
   15fcc:	f0c0 8246 	bcc.w	1645c <ticker_job+0x900>
		ticks_latency -= ticks_to_expire;
   15fd0:	9a04      	ldr	r2, [sp, #16]
		skip_collision = (ticker->lazy_current != 0U);
   15fd2:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		instance->ticker_id_head = ticker->next;
   15fd6:	f8dd c008 	ldr.w	ip, [sp, #8]
		ticks_latency -= ticks_to_expire;
   15fda:	1ad2      	subs	r2, r2, r3
   15fdc:	9204      	str	r2, [sp, #16]
		if (instance->ticks_slot_previous > ticks_to_expire) {
   15fde:	f8db 2018 	ldr.w	r2, [fp, #24]
   15fe2:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
   15fe4:	eba7 0703 	sub.w	r7, r7, r3
		ticks_expired += ticks_to_expire;
   15fe8:	449a      	add	sl, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   15fea:	bf25      	ittet	cs
   15fec:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
   15ff0:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
   15ff4:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
   15ff6:	2300      	movcs	r3, #0
   15ff8:	f8cb 3018 	str.w	r3, [fp, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   15ffc:	78a2      	ldrb	r2, [r4, #2]
   15ffe:	7863      	ldrb	r3, [r4, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   16000:	69a0      	ldr	r0, [r4, #24]
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   16002:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		if ((ticker->ticks_periodic != 0U) ||
   16004:	6865      	ldr	r5, [r4, #4]
		state = (ticker->req - ticker->ack) & 0xff;
   16006:	1a9b      	subs	r3, r3, r2
   16008:	b2db      	uxtb	r3, r3
   1600a:	9305      	str	r3, [sp, #20]
		instance->ticker_id_head = ticker->next;
   1600c:	9b00      	ldr	r3, [sp, #0]
   1600e:	f813 c00c 	ldrb.w	ip, [r3, ip]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   16012:	b118      	cbz	r0, 1601c <ticker_job+0x4c0>
   16014:	9b05      	ldr	r3, [sp, #20]
   16016:	2b02      	cmp	r3, #2
   16018:	f000 8135 	beq.w	16286 <ticker_job+0x72a>
		ticker->ticks_to_expire = 0U;
   1601c:	2300      	movs	r3, #0
   1601e:	60a3      	str	r3, [r4, #8]
		instance->ticker_id_head = ticker->next;
   16020:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   16024:	2d00      	cmp	r5, #0
   16026:	f040 80da 	bne.w	161de <ticker_job+0x682>
   1602a:	b119      	cbz	r1, 16034 <ticker_job+0x4d8>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   1602c:	7a09      	ldrb	r1, [r1, #8]
   1602e:	2901      	cmp	r1, #1
   16030:	f000 8111 	beq.w	16256 <ticker_job+0x6fa>
			if (state && ((state == 1U) || skip_collision) &&
   16034:	9b05      	ldr	r3, [sp, #20]
   16036:	b123      	cbz	r3, 16042 <ticker_job+0x4e6>
   16038:	2b01      	cmp	r3, #1
   1603a:	d045      	beq.n	160c8 <ticker_job+0x56c>
   1603c:	f1be 0f00 	cmp.w	lr, #0
   16040:	d142      	bne.n	160c8 <ticker_job+0x56c>
			ticker->req = ticker->ack;
   16042:	7062      	strb	r2, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   16044:	f89b 601d 	ldrb.w	r6, [fp, #29]
   16048:	2eff      	cmp	r6, #255	; 0xff
   1604a:	d1b6      	bne.n	15fba <ticker_job+0x45e>
			flag_compare_update = 1U;
   1604c:	9b06      	ldr	r3, [sp, #24]
   1604e:	9a09      	ldr	r2, [sp, #36]	; 0x24
		ticker_job_list_insert(instance, insert_head);
   16050:	9901      	ldr	r1, [sp, #4]
			flag_compare_update = 1U;
   16052:	4296      	cmp	r6, r2
   16054:	bf18      	it	ne
   16056:	2301      	movne	r3, #1
		ticker_job_list_insert(instance, insert_head);
   16058:	4658      	mov	r0, fp
			flag_compare_update = 1U;
   1605a:	9306      	str	r3, [sp, #24]
		ticker_job_list_insert(instance, insert_head);
   1605c:	f7ff fb0a 	bl	15674 <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
   16060:	f89b 301d 	ldrb.w	r3, [fp, #29]
	nodes = &instance->nodes[0];
   16064:	f8db a000 	ldr.w	sl, [fp]
	while (rescheduling) {
   16068:	e9cd 3b00 	strd	r3, fp, [sp]
	uint8_t  rescheduled = 0U;
   1606c:	2200      	movs	r2, #0
		while (ticker_id_head != TICKER_NULL) {
   1606e:	9b00      	ldr	r3, [sp, #0]
   16070:	2bff      	cmp	r3, #255	; 0xff
   16072:	d00f      	beq.n	16094 <ticker_job+0x538>
   16074:	9e00      	ldr	r6, [sp, #0]
			ticker = &nodes[ticker_id_head];
   16076:	b233      	sxth	r3, r6
   16078:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1607c:	eb0a 1503 	add.w	r5, sl, r3, lsl #4
   16080:	011b      	lsls	r3, r3, #4
			ext_data = ticker->ext_data;
   16082:	6aaf      	ldr	r7, [r5, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   16084:	b117      	cbz	r7, 1608c <ticker_job+0x530>
   16086:	7a39      	ldrb	r1, [r7, #8]
   16088:	2901      	cmp	r1, #1
   1608a:	d025      	beq.n	160d8 <ticker_job+0x57c>
			ticker_id_head = ticker->next;
   1608c:	f81a 6003 	ldrb.w	r6, [sl, r3]
		while (ticker_id_head != TICKER_NULL) {
   16090:	2eff      	cmp	r6, #255	; 0xff
   16092:	d1f0      	bne.n	16076 <ticker_job+0x51a>
	return rescheduled;
   16094:	f8dd b004 	ldr.w	fp, [sp, #4]
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   16098:	2a00      	cmp	r2, #0
   1609a:	f43f ae65 	beq.w	15d68 <ticker_job+0x20c>
	if (instance->ticker_id_head != ticker_id_old_head) {
   1609e:	9b00      	ldr	r3, [sp, #0]
   160a0:	9909      	ldr	r1, [sp, #36]	; 0x24
   160a2:	428b      	cmp	r3, r1
   160a4:	f47f ae65 	bne.w	15d72 <ticker_job+0x216>
	if (!pending) {
   160a8:	9b08      	ldr	r3, [sp, #32]
   160aa:	2b00      	cmp	r3, #0
   160ac:	f47f ae68 	bne.w	15d80 <ticker_job+0x224>
	users = &instance->users[0];
   160b0:	f8db 3004 	ldr.w	r3, [fp, #4]
   160b4:	9301      	str	r3, [sp, #4]
	count_user = instance->count_user;
   160b6:	f89b 3009 	ldrb.w	r3, [fp, #9]
	while (count_user--) {
   160ba:	1e5f      	subs	r7, r3, #1
   160bc:	b2ff      	uxtb	r7, r7
   160be:	2b00      	cmp	r3, #0
   160c0:	f43f ae5e 	beq.w	15d80 <ticker_job+0x224>
			flag_compare_update = 1U;
   160c4:	9206      	str	r2, [sp, #24]
   160c6:	e0fa      	b.n	162be <ticker_job+0x762>
			    ticker->fp_op_func) {
   160c8:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
   160ca:	2b00      	cmp	r3, #0
   160cc:	d0b9      	beq.n	16042 <ticker_job+0x4e6>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   160ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
   160d0:	2001      	movs	r0, #1
   160d2:	4798      	blx	r3
			ticker->req = ticker->ack;
   160d4:	78a2      	ldrb	r2, [r4, #2]
   160d6:	e7b4      	b.n	16042 <ticker_job+0x4e6>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   160d8:	9b01      	ldr	r3, [sp, #4]
   160da:	7f1b      	ldrb	r3, [r3, #28]
   160dc:	2bff      	cmp	r3, #255	; 0xff
   160de:	d04b      	beq.n	16178 <ticker_job+0x61c>
			instance->ticks_slot_previous > ticks_elapsed) {
   160e0:	9b01      	ldr	r3, [sp, #4]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   160e2:	9a03      	ldr	r2, [sp, #12]
			instance->ticks_slot_previous > ticks_elapsed) {
   160e4:	699b      	ldr	r3, [r3, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   160e6:	4293      	cmp	r3, r2
   160e8:	d946      	bls.n	16178 <ticker_job+0x61c>
			window_start_ticks = instance->ticks_slot_previous -
   160ea:	eba3 0c02 	sub.w	ip, r3, r2
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   160ee:	687a      	ldr	r2, [r7, #4]
   160f0:	68ab      	ldr	r3, [r5, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
   160f2:	f895 b000 	ldrb.w	fp, [r5]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   160f6:	1ad3      	subs	r3, r2, r3
   160f8:	9302      	str	r3, [sp, #8]
   160fa:	683b      	ldr	r3, [r7, #0]
   160fc:	429a      	cmp	r2, r3
   160fe:	f080 80bd 	bcs.w	1627c <ticker_job+0x720>
		while (ticker_id_iter != TICKER_NULL &&
   16102:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
   16106:	eba3 0802 	sub.w	r8, r3, r2
		while (ticker_id_iter != TICKER_NULL &&
   1610a:	f000 80b7 	beq.w	1627c <ticker_job+0x720>
		       ticks_start_offset + ticker->ticks_slot <=
   1610e:	f8d5 e018 	ldr.w	lr, [r5, #24]
		while (ticker_id_iter != TICKER_NULL &&
   16112:	45f0      	cmp	r8, lr
   16114:	f04f 0300 	mov.w	r3, #0
   16118:	d331      	bcc.n	1617e <ticker_job+0x622>
   1611a:	46f1      	mov	r9, lr
   1611c:	465a      	mov	r2, fp
   1611e:	461c      	mov	r4, r3
   16120:	e01c      	b.n	1615c <ticker_job+0x600>
			if (node->ticks_to_expire >
   16122:	6881      	ldr	r1, [r0, #8]
					MIN(ticks_slot_window,
   16124:	1f0b      	subs	r3, r1, #4
			if (node->ticks_to_expire >
   16126:	2904      	cmp	r1, #4
					MIN(ticks_slot_window,
   16128:	4423      	add	r3, r4
			if (node->ticks_to_expire >
   1612a:	d909      	bls.n	16140 <ticker_job+0x5e4>
				window_end_ticks =
   1612c:	4543      	cmp	r3, r8
   1612e:	bf28      	it	cs
   16130:	4643      	movcs	r3, r8
			if (window_end_ticks > ticks_start_offset +
   16132:	4599      	cmp	r9, r3
   16134:	d204      	bcs.n	16140 <ticker_job+0x5e4>
			if (ticks_to_expire != 0U &&
   16136:	ebb3 030e 	subs.w	r3, r3, lr
   1613a:	d001      	beq.n	16140 <ticker_job+0x5e4>
   1613c:	459c      	cmp	ip, r3
   1613e:	d91e      	bls.n	1617e <ticker_job+0x622>
			window_start_ticks  = node->ticks_to_expire +
   16140:	6983      	ldr	r3, [r0, #24]
			ticker_id_iter = node->next;
   16142:	f81a 2002 	ldrb.w	r2, [sl, r2]
			window_start_ticks  = node->ticks_to_expire +
   16146:	eb01 0c03 	add.w	ip, r1, r3
			ticks_start_offset += node->ticks_to_expire;
   1614a:	440c      	add	r4, r1
			ticks_to_expire     = ticks_slot_window -
   1614c:	eba8 030e 	sub.w	r3, r8, lr
		while (ticker_id_iter != TICKER_NULL &&
   16150:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
   16152:	eb04 090e 	add.w	r9, r4, lr
		while (ticker_id_iter != TICKER_NULL &&
   16156:	d012      	beq.n	1617e <ticker_job+0x622>
   16158:	45c8      	cmp	r8, r9
   1615a:	d310      	bcc.n	1617e <ticker_job+0x622>
			node = &nodes[ticker_id_iter];
   1615c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   16160:	eb0a 1002 	add.w	r0, sl, r2, lsl #4
   16164:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
   16166:	6a81      	ldr	r1, [r0, #40]	; 0x28
   16168:	2900      	cmp	r1, #0
   1616a:	d0da      	beq.n	16122 <ticker_job+0x5c6>
   1616c:	7a09      	ldrb	r1, [r1, #8]
   1616e:	2901      	cmp	r1, #1
   16170:	d1d7      	bne.n	16122 <ticker_job+0x5c6>
				ticker_id_iter = node->next;
   16172:	f81a 2002 	ldrb.w	r2, [sl, r2]
				continue;
   16176:	e7eb      	b.n	16150 <ticker_job+0x5f4>
		window_start_ticks = 0U;
   16178:	f04f 0c00 	mov.w	ip, #0
   1617c:	e7b7      	b.n	160ee <ticker_job+0x592>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   1617e:	9a02      	ldr	r2, [sp, #8]
   16180:	441a      	add	r2, r3
   16182:	607a      	str	r2, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   16184:	465c      	mov	r4, fp
   16186:	60ab      	str	r3, [r5, #8]
   16188:	f04f 0eff 	mov.w	lr, #255	; 0xff
   1618c:	e000      	b.n	16190 <ticker_job+0x634>
   1618e:	4614      	mov	r4, r2
			node = &nodes[ticker_id_iter];
   16190:	b221      	sxth	r1, r4
   16192:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   16196:	eb0a 1c02 	add.w	ip, sl, r2, lsl #4
   1619a:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   1619c:	f8dc 0008 	ldr.w	r0, [ip, #8]
   161a0:	4283      	cmp	r3, r0
   161a2:	f240 8151 	bls.w	16448 <ticker_job+0x8ec>
				ticker->ticks_to_expire -=
   161a6:	1a1b      	subs	r3, r3, r0
   161a8:	60ab      	str	r3, [r5, #8]
			ticker_id_iter = node->next;
   161aa:	f81a 2002 	ldrb.w	r2, [sl, r2]
		while (ticker_id_iter != TICKER_NULL) {
   161ae:	2aff      	cmp	r2, #255	; 0xff
   161b0:	46a6      	mov	lr, r4
   161b2:	d1ec      	bne.n	1618e <ticker_job+0x632>
			instance->ticker_id_head = nodes[ticker_id_head].next;
   161b4:	9b01      	ldr	r3, [sp, #4]
			nodes[ticker_id_prev].next = ticker_id_head;
   161b6:	f8cd b000 	str.w	fp, [sp]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   161ba:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   161be:	0109      	lsls	r1, r1, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
   161c0:	f883 b01d 	strb.w	fp, [r3, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   161c4:	f81a 3001 	ldrb.w	r3, [sl, r1]
   161c8:	702b      	strb	r3, [r5, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
   161ca:	f80a 6001 	strb.w	r6, [sl, r1]
		ticker->lazy_current--;
   161ce:	8beb      	ldrh	r3, [r5, #30]
   161d0:	3b01      	subs	r3, #1
   161d2:	83eb      	strh	r3, [r5, #30]
		ext_data->reschedule_state =
   161d4:	f04f 0302 	mov.w	r3, #2
   161d8:	723b      	strb	r3, [r7, #8]
		rescheduled  = 1U;
   161da:	2201      	movs	r2, #1
   161dc:	e747      	b.n	1606e <ticker_job+0x512>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   161de:	b111      	cbz	r1, 161e6 <ticker_job+0x68a>
   161e0:	7a0b      	ldrb	r3, [r1, #8]
   161e2:	2b01      	cmp	r3, #1
   161e4:	d037      	beq.n	16256 <ticker_job+0x6fa>
				if (!ticker->lazy_current) {
   161e6:	f1be 0f00 	cmp.w	lr, #0
   161ea:	d159      	bne.n	162a0 <ticker_job+0x744>
					lazy_periodic = ticker->lazy_periodic;
   161ec:	f8b4 e01c 	ldrh.w	lr, [r4, #28]
   161f0:	4672      	mov	r2, lr
				while (count--) {
   161f2:	1c68      	adds	r0, r5, #1
	ticker->remainder_current += ticker->remainder_periodic;
   161f4:	e9d4 c308 	ldrd	ip, r3, [r4, #32]
				ticks_to_expire = 0U;
   161f8:	2100      	movs	r1, #0
   161fa:	9005      	str	r0, [sp, #20]
   161fc:	e004      	b.n	16208 <ticker_job+0x6ac>
   161fe:	4628      	mov	r0, r5
				while (count--) {
   16200:	3a01      	subs	r2, #1
					ticks_to_expire +=
   16202:	4401      	add	r1, r0
				while (count--) {
   16204:	1c50      	adds	r0, r2, #1
   16206:	d00f      	beq.n	16228 <ticker_job+0x6cc>
	ticker->remainder_current += ticker->remainder_periodic;
   16208:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   1620a:	eb03 0008 	add.w	r0, r3, r8
   1620e:	4548      	cmp	r0, r9
   16210:	d8f5      	bhi.n	161fe <ticker_job+0x6a2>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   16212:	9805      	ldr	r0, [sp, #20]
   16214:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
   16218:	3a01      	subs	r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1621a:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
					ticks_to_expire +=
   1621e:	4401      	add	r1, r0
				while (count--) {
   16220:	1c50      	adds	r0, r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   16222:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
				while (count--) {
   16226:	d1ef      	bne.n	16208 <ticker_job+0x6ac>
				} else if (!ticker->must_expire) {
   16228:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   1622c:	6263      	str	r3, [r4, #36]	; 0x24
   1622e:	2a00      	cmp	r2, #0
   16230:	f000 80d2 	beq.w	163d8 <ticker_job+0x87c>
				lazy = 0U;
   16234:	2200      	movs	r2, #0
				ticker->lazy_current += (lazy_periodic + lazy);
   16236:	4472      	add	r2, lr
				ticker->ticks_to_expire = ticks_to_expire;
   16238:	60a1      	str	r1, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
   1623a:	83e2      	strh	r2, [r4, #30]
   1623c:	e00d      	b.n	1625a <ticker_job+0x6fe>
   1623e:	bf00      	nop
   16240:	ff172b5a 	.word	0xff172b5a
   16244:	7f172b59 	.word	0x7f172b59
		ticker->ticks_to_expire = 0U;
   16248:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
   1624c:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   16250:	2d00      	cmp	r5, #0
   16252:	f43f aeeb 	beq.w	1602c <ticker_job+0x4d0>
				ticker->req = ticker->ack;
   16256:	7062      	strb	r2, [r4, #1]
				ticker->ticks_to_expire = ticks_elapsed;
   16258:	60a7      	str	r7, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   1625a:	9b07      	ldr	r3, [sp, #28]
   1625c:	f8db 1014 	ldr.w	r1, [fp, #20]
   16260:	eb03 020a 	add.w	r2, r3, sl
   16264:	4620      	mov	r0, r4
   16266:	f7ff f9e1 	bl	1562c <ticks_to_expire_prep>
			ticker->next = *insert_head;
   1626a:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
   1626e:	9a00      	ldr	r2, [sp, #0]
			ticker->req++;
   16270:	9601      	str	r6, [sp, #4]
			ticker->next = *insert_head;
   16272:	5453      	strb	r3, [r2, r1]
			ticker->req++;
   16274:	7863      	ldrb	r3, [r4, #1]
   16276:	3301      	adds	r3, #1
   16278:	7063      	strb	r3, [r4, #1]
   1627a:	e6e3      	b.n	16044 <ticker_job+0x4e8>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   1627c:	9b02      	ldr	r3, [sp, #8]
   1627e:	607b      	str	r3, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   16280:	2300      	movs	r3, #0
   16282:	60ab      	str	r3, [r5, #8]
		while (ticker_id_iter != TICKER_NULL) {
   16284:	e7a3      	b.n	161ce <ticker_job+0x672>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   16286:	f1be 0f00 	cmp.w	lr, #0
   1628a:	f47f aec7 	bne.w	1601c <ticker_job+0x4c0>
   1628e:	b111      	cbz	r1, 16296 <ticker_job+0x73a>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   16290:	7a0b      	ldrb	r3, [r1, #8]
   16292:	2b01      	cmp	r3, #1
   16294:	d0d8      	beq.n	16248 <ticker_job+0x6ec>
			instance->ticks_slot_previous = ticker->ticks_slot;
   16296:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticker_id_slot_previous = id_expired;
   1629a:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   1629e:	e6bd      	b.n	1601c <ticker_job+0x4c0>
					ticker->req = ticker->ack;
   162a0:	7062      	strb	r2, [r4, #1]
   162a2:	2200      	movs	r2, #0
   162a4:	e7a5      	b.n	161f2 <ticker_job+0x696>
	count_user = instance->count_user;
   162a6:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   162aa:	f8db 2004 	ldr.w	r2, [fp, #4]
   162ae:	9201      	str	r2, [sp, #4]
	while (count_user--) {
   162b0:	1e5f      	subs	r7, r3, #1
   162b2:	b2ff      	uxtb	r7, r7
   162b4:	2b00      	cmp	r3, #0
   162b6:	f43f ad60 	beq.w	15d7a <ticker_job+0x21e>
		flag_compare_update = 1U;
   162ba:	2301      	movs	r3, #1
   162bc:	9306      	str	r3, [sp, #24]
   162be:	9b01      	ldr	r3, [sp, #4]
		uop->status = TICKER_STATUS_SUCCESS;
   162c0:	2500      	movs	r5, #0
   162c2:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
			uop->status = TICKER_STATUS_FAILURE;
   162c6:	f04f 0a01 	mov.w	sl, #1
		while (user->first != user->last) {
   162ca:	787b      	ldrb	r3, [r7, #1]
   162cc:	78fa      	ldrb	r2, [r7, #3]
		user_op = &user->user_op[0];
   162ce:	687e      	ldr	r6, [r7, #4]
		while (user->first != user->last) {
   162d0:	429a      	cmp	r2, r3
   162d2:	d10c      	bne.n	162ee <ticker_job+0x792>
   162d4:	e05b      	b.n	1638e <ticker_job+0x832>
	switch (uop->op) {
   162d6:	2b01      	cmp	r3, #1
   162d8:	d053      	beq.n	16382 <ticker_job+0x826>
			first = user->first + 1;
   162da:	787b      	ldrb	r3, [r7, #1]
			if (first == user->count_user_op) {
   162dc:	7839      	ldrb	r1, [r7, #0]
			first = user->first + 1;
   162de:	3301      	adds	r3, #1
   162e0:	b2db      	uxtb	r3, r3
				first = 0U;
   162e2:	4299      	cmp	r1, r3
   162e4:	bf08      	it	eq
   162e6:	2300      	moveq	r3, #0
		while (user->first != user->last) {
   162e8:	429a      	cmp	r2, r3
			user->first = first;
   162ea:	707b      	strb	r3, [r7, #1]
		while (user->first != user->last) {
   162ec:	d04f      	beq.n	1638e <ticker_job+0x832>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   162ee:	b21b      	sxth	r3, r3
   162f0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   162f4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   162f8:	eb06 0083 	add.w	r0, r6, r3, lsl #2
	switch (uop->op) {
   162fc:	f816 3023 	ldrb.w	r3, [r6, r3, lsl #2]
   16300:	2b02      	cmp	r3, #2
   16302:	d017      	beq.n	16334 <ticker_job+0x7d8>
   16304:	2b03      	cmp	r3, #3
   16306:	d1e6      	bne.n	162d6 <ticker_job+0x77a>
		if (uop->id < instance->count_node) {
   16308:	7843      	ldrb	r3, [r0, #1]
   1630a:	f89b 2008 	ldrb.w	r2, [fp, #8]
   1630e:	429a      	cmp	r2, r3
   16310:	d93a      	bls.n	16388 <ticker_job+0x82c>
			node[uop->id].priority =
   16312:	f8db 2000 	ldr.w	r2, [fp]
   16316:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1631a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   1631e:	7902      	ldrb	r2, [r0, #4]
   16320:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
   16324:	6285      	str	r5, [r0, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
   16326:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (fp_op_func) {
   16328:	b113      	cbz	r3, 16330 <ticker_job+0x7d4>
		fp_op_func(uop->status, uop->op_context);
   1632a:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1632c:	6a80      	ldr	r0, [r0, #40]	; 0x28
   1632e:	4798      	blx	r3
   16330:	78fa      	ldrb	r2, [r7, #3]
   16332:	e7d2      	b.n	162da <ticker_job+0x77e>
		ticker_by_next_slot_get(instance,
   16334:	e9d0 c101 	ldrd	ip, r1, [r0, #4]
	_ticker_id_head = *ticker_id_head;
   16338:	f89c 2000 	ldrb.w	r2, [ip]
		ticker_by_next_slot_get(instance,
   1633c:	f8d0 e00c 	ldr.w	lr, [r0, #12]
	node = instance->nodes;
   16340:	f8db 4000 	ldr.w	r4, [fp]
	    (*ticks_current != instance->ticks_current)) {
   16344:	f8db 3014 	ldr.w	r3, [fp, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
   16348:	2aff      	cmp	r2, #255	; 0xff
   1634a:	d003      	beq.n	16354 <ticker_job+0x7f8>
   1634c:	f8d1 8000 	ldr.w	r8, [r1]
   16350:	4598      	cmp	r8, r3
   16352:	d023      	beq.n	1639c <ticker_job+0x840>
		_ticker_id_head = instance->ticker_id_head;
   16354:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
   16358:	600b      	str	r3, [r1, #0]
		_ticks_to_expire = 0U;
   1635a:	f04f 0800 	mov.w	r8, #0
   1635e:	e00a      	b.n	16376 <ticker_job+0x81a>
		ticker = &node[_ticker_id_head];
   16360:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   16364:	eb04 1103 	add.w	r1, r4, r3, lsl #4
   16368:	011b      	lsls	r3, r3, #4
		_ticks_to_expire += ticker->ticks_to_expire;
   1636a:	f8d1 9008 	ldr.w	r9, [r1, #8]
			if (ticker->ticks_slot) {
   1636e:	6989      	ldr	r1, [r1, #24]
		_ticks_to_expire += ticker->ticks_to_expire;
   16370:	44c8      	add	r8, r9
			if (ticker->ticks_slot) {
   16372:	b911      	cbnz	r1, 1637a <ticker_job+0x81e>
		_ticker_id_head = ticker->next;
   16374:	5ce2      	ldrb	r2, [r4, r3]
	while (_ticker_id_head != TICKER_NULL) {
   16376:	2aff      	cmp	r2, #255	; 0xff
   16378:	d1f2      	bne.n	16360 <ticker_job+0x804>
	*ticker_id_head = _ticker_id_head;
   1637a:	f88c 2000 	strb.w	r2, [ip]
	*ticks_to_expire = _ticks_to_expire;
   1637e:	f8ce 8000 	str.w	r8, [lr]
		fp_op_func = uop->fp_op_func;
   16382:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
   16384:	6285      	str	r5, [r0, #40]	; 0x28
		break;
   16386:	e7cf      	b.n	16328 <ticker_job+0x7cc>
			uop->status = TICKER_STATUS_FAILURE;
   16388:	f8c0 a028 	str.w	sl, [r0, #40]	; 0x28
   1638c:	e7cb      	b.n	16326 <ticker_job+0x7ca>
	while (count_user--) {
   1638e:	9a01      	ldr	r2, [sp, #4]
   16390:	42ba      	cmp	r2, r7
   16392:	f1a7 0308 	sub.w	r3, r7, #8
   16396:	d00b      	beq.n	163b0 <ticker_job+0x854>
   16398:	461f      	mov	r7, r3
   1639a:	e796      	b.n	162ca <ticker_job+0x76e>
		ticker = &node[_ticker_id_head];
   1639c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   163a0:	0113      	lsls	r3, r2, #4
	_ticks_to_expire = *ticks_to_expire;
   163a2:	f8de 8000 	ldr.w	r8, [lr]
		_ticker_id_head = ticker->next;
   163a6:	5ce2      	ldrb	r2, [r4, r3]
	while (_ticker_id_head != TICKER_NULL) {
   163a8:	e7e5      	b.n	16376 <ticker_job+0x81a>
	if (!pending) {
   163aa:	9b08      	ldr	r3, [sp, #32]
   163ac:	2b00      	cmp	r3, #0
   163ae:	d058      	beq.n	16462 <ticker_job+0x906>
	if (flag_compare_update) {
   163b0:	9b06      	ldr	r3, [sp, #24]
   163b2:	2b00      	cmp	r3, #0
   163b4:	f47f ace1 	bne.w	15d7a <ticker_job+0x21e>
	if (instance->worker_trigger) {
   163b8:	f89b 301f 	ldrb.w	r3, [fp, #31]
	instance->job_guard = 0U;
   163bc:	2200      	movs	r2, #0
   163be:	f88b 201e 	strb.w	r2, [fp, #30]
	if (instance->worker_trigger) {
   163c2:	b12b      	cbz	r3, 163d0 <ticker_job+0x874>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   163c4:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   163c8:	465b      	mov	r3, fp
   163ca:	2201      	movs	r2, #1
   163cc:	2103      	movs	r1, #3
   163ce:	e452      	b.n	15c76 <ticker_job+0x11a>
}
   163d0:	b00d      	add	sp, #52	; 0x34
   163d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163d6:	4770      	bx	lr
					while (ticks_to_expire <
   163d8:	9804      	ldr	r0, [sp, #16]
   163da:	4288      	cmp	r0, r1
   163dc:	f67f af2b 	bls.w	16236 <ticker_job+0x6da>
   163e0:	1c68      	adds	r0, r5, #1
   163e2:	9705      	str	r7, [sp, #20]
   163e4:	940a      	str	r4, [sp, #40]	; 0x28
   163e6:	9f04      	ldr	r7, [sp, #16]
   163e8:	4604      	mov	r4, r0
   163ea:	e005      	b.n	163f8 <ticker_job+0x89c>
   163ec:	4628      	mov	r0, r5
						ticks_to_expire +=
   163ee:	4401      	add	r1, r0
						lazy++;
   163f0:	3201      	adds	r2, #1
					while (ticks_to_expire <
   163f2:	428f      	cmp	r7, r1
						lazy++;
   163f4:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   163f6:	d910      	bls.n	1641a <ticker_job+0x8be>
	ticker->remainder_current += ticker->remainder_periodic;
   163f8:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   163fa:	eb03 0008 	add.w	r0, r3, r8
   163fe:	4548      	cmp	r0, r9
   16400:	d8f4      	bhi.n	163ec <ticker_job+0x890>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   16402:	4620      	mov	r0, r4
   16404:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
   16408:	4401      	add	r1, r0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1640a:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
   1640e:	3201      	adds	r2, #1
					while (ticks_to_expire <
   16410:	428f      	cmp	r7, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   16412:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
   16416:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   16418:	d8ee      	bhi.n	163f8 <ticker_job+0x89c>
   1641a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1641c:	9f05      	ldr	r7, [sp, #20]
   1641e:	6263      	str	r3, [r4, #36]	; 0x24
   16420:	e709      	b.n	16236 <ticker_job+0x6da>
	ticker_id_old_head = instance->ticker_id_head;
   16422:	f89b 301d 	ldrb.w	r3, [fp, #29]
	count_user = instance->count_user;
   16426:	f89b 1009 	ldrb.w	r1, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
   1642a:	9309      	str	r3, [sp, #36]	; 0x24
	node = &instance->nodes[0];
   1642c:	f8db 3000 	ldr.w	r3, [fp]
   16430:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
   16432:	f8db 3004 	ldr.w	r3, [fp, #4]
   16436:	9305      	str	r3, [sp, #20]
	while (count_user--) {
   16438:	1e4b      	subs	r3, r1, #1
	count_user = instance->count_user;
   1643a:	9108      	str	r1, [sp, #32]
	while (count_user--) {
   1643c:	b2db      	uxtb	r3, r3
   1643e:	b3a1      	cbz	r1, 164aa <ticker_job+0x94e>
		flag_elapsed = 0U;
   16440:	920b      	str	r2, [sp, #44]	; 0x2c
		ticks_elapsed = 0U;
   16442:	9203      	str	r2, [sp, #12]
   16444:	f7ff bbc4 	b.w	15bd0 <ticker_job+0x74>
				node->ticks_to_expire -=
   16448:	1ac3      	subs	r3, r0, r3
		if (ticker_id_prev != TICKER_NULL) {
   1644a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
				node->ticks_to_expire -=
   1644e:	f8cc 3008 	str.w	r3, [ip, #8]
		if (ticker_id_prev != TICKER_NULL) {
   16452:	f43f aebc 	beq.w	161ce <ticker_job+0x672>
   16456:	fa0f f18e 	sxth.w	r1, lr
   1645a:	e6ab      	b.n	161b4 <ticker_job+0x658>
			ticker->ticks_to_expire -= ticks_elapsed;
   1645c:	1bdb      	subs	r3, r3, r7
   1645e:	60a3      	str	r3, [r4, #8]
			break;
   16460:	e5f4      	b.n	1604c <ticker_job+0x4f0>
	count_user = instance->count_user;
   16462:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   16466:	f8db 2004 	ldr.w	r2, [fp, #4]
   1646a:	9201      	str	r2, [sp, #4]
	while (count_user--) {
   1646c:	1e5f      	subs	r7, r3, #1
   1646e:	b2ff      	uxtb	r7, r7
   16470:	2b00      	cmp	r3, #0
   16472:	f47f af24 	bne.w	162be <ticker_job+0x762>
   16476:	e79b      	b.n	163b0 <ticker_job+0x854>
		if (cntr_stop() == 0) {
   16478:	f00b fab0 	bl	219dc <cntr_stop>
   1647c:	2800      	cmp	r0, #0
   1647e:	d19b      	bne.n	163b8 <ticker_job+0x85c>
			instance->ticks_slot_previous = 0U;
   16480:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
   16484:	f00b fad0 	bl	21a28 <cntr_cnt_get>
   16488:	f8cb 0014 	str.w	r0, [fp, #20]
   1648c:	e794      	b.n	163b8 <ticker_job+0x85c>
		ticks_current = cntr_cnt_get();
   1648e:	f00b facb 	bl	21a28 <cntr_cnt_get>
   16492:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   16494:	f00b fa92 	bl	219bc <cntr_start>
	ticker = &instance->nodes[instance->ticker_id_head];
   16498:	f89b 301d 	ldrb.w	r3, [fp, #29]
   1649c:	9300      	str	r3, [sp, #0]
		if (cntr_start() == 0) {
   1649e:	2800      	cmp	r0, #0
   164a0:	f47f ac76 	bne.w	15d90 <ticker_job+0x234>
			instance->ticks_current = ticks_current;
   164a4:	f8cb 4014 	str.w	r4, [fp, #20]
   164a8:	e472      	b.n	15d90 <ticker_job+0x234>
	insert_head = TICKER_NULL;
   164aa:	23ff      	movs	r3, #255	; 0xff
	while (count_user--) {
   164ac:	9106      	str	r1, [sp, #24]
	insert_head = TICKER_NULL;
   164ae:	9301      	str	r3, [sp, #4]
   164b0:	e453      	b.n	15d5a <ticker_job+0x1fe>
   164b2:	bf00      	nop

000164b4 <ticker_init>:
{
   164b4:	b4f0      	push	{r4, r5, r6, r7}
   164b6:	9d04      	ldr	r5, [sp, #16]
   164b8:	f89d 7014 	ldrb.w	r7, [sp, #20]
   164bc:	9c06      	ldr	r4, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   164be:	2800      	cmp	r0, #0
   164c0:	d137      	bne.n	16532 <ticker_init+0x7e>
	instance->count_node = count_node;
   164c2:	4e1d      	ldr	r6, [pc, #116]	; (16538 <ticker_init+0x84>)
	while (count_node--) {
   164c4:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
	instance->count_node = count_node;
   164c8:	7231      	strb	r1, [r6, #8]
	instance->nodes = node;
   164ca:	6032      	str	r2, [r6, #0]
	while (count_node--) {
   164cc:	fa5f fc8c 	uxtb.w	ip, ip
   164d0:	b149      	cbz	r1, 164e6 <ticker_init+0x32>
   164d2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   164d6:	eb02 110c 	add.w	r1, r2, ip, lsl #4
   164da:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
   164dc:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
   164e0:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
   164e4:	d1f9      	bne.n	164da <ticker_init+0x26>
	while (count_user--) {
   164e6:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
   164e8:	7273      	strb	r3, [r6, #9]
	instance->users = user;
   164ea:	6075      	str	r5, [r6, #4]
	while (count_user--) {
   164ec:	b2d2      	uxtb	r2, r2
   164ee:	b183      	cbz	r3, 16512 <ticker_init+0x5e>
   164f0:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
		users[count_user].user_op = user_op_;
   164f4:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
   164f6:	4610      	mov	r0, r2
   164f8:	f812 3908 	ldrb.w	r3, [r2], #-8
   164fc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   16500:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	while (count_user--) {
   16504:	4285      	cmp	r5, r0
		count_op -= users[count_user].count_user_op;
   16506:	eba7 0303 	sub.w	r3, r7, r3
		user_op_ += users[count_user].count_user_op;
   1650a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		count_op -= users[count_user].count_user_op;
   1650e:	b2df      	uxtb	r7, r3
	while (count_user--) {
   16510:	d1f0      	bne.n	164f4 <ticker_init+0x40>
	if (count_op) {
   16512:	b977      	cbnz	r7, 16532 <ticker_init+0x7e>
	instance->caller_id_get_cb = caller_id_get_cb;
   16514:	9a07      	ldr	r2, [sp, #28]
   16516:	6232      	str	r2, [r6, #32]
	instance->sched_cb = sched_cb;
   16518:	9a08      	ldr	r2, [sp, #32]
   1651a:	6272      	str	r2, [r6, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
   1651c:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
   16520:	9a09      	ldr	r2, [sp, #36]	; 0x24
   16522:	62b2      	str	r2, [r6, #40]	; 0x28
	return TICKER_STATUS_SUCCESS;
   16524:	4638      	mov	r0, r7
	instance->ticks_slot_previous = 0U;
   16526:	e9c6 7705 	strd	r7, r7, [r6, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
   1652a:	83b3      	strh	r3, [r6, #28]
	instance->ticks_elapsed_first = 0U;
   1652c:	8177      	strh	r7, [r6, #10]
}
   1652e:	bcf0      	pop	{r4, r5, r6, r7}
   16530:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
   16532:	2001      	movs	r0, #1
}
   16534:	bcf0      	pop	{r4, r5, r6, r7}
   16536:	4770      	bx	lr
   16538:	200018d8 	.word	0x200018d8

0001653c <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
   1653c:	4b04      	ldr	r3, [pc, #16]	; (16550 <ticker_is_initialized+0x14>)
   1653e:	222c      	movs	r2, #44	; 0x2c
   16540:	fb02 3300 	mla	r3, r2, r0, r3
   16544:	7a18      	ldrb	r0, [r3, #8]
}
   16546:	3800      	subs	r0, #0
   16548:	bf18      	it	ne
   1654a:	2001      	movne	r0, #1
   1654c:	4770      	bx	lr
   1654e:	bf00      	nop
   16550:	200018d8 	.word	0x200018d8

00016554 <ticker_trigger>:
	if (instance->sched_cb) {
   16554:	4b0a      	ldr	r3, [pc, #40]	; (16580 <ticker_trigger+0x2c>)
   16556:	222c      	movs	r2, #44	; 0x2c
   16558:	fb02 3200 	mla	r2, r2, r0, r3
{
   1655c:	b410      	push	{r4}
	if (instance->sched_cb) {
   1655e:	6a54      	ldr	r4, [r2, #36]	; 0x24
   16560:	b15c      	cbz	r4, 1657a <ticker_trigger+0x26>
	instance = &_instance[instance_index];
   16562:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   16566:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   1656a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1656e:	46a4      	mov	ip, r4
   16570:	2201      	movs	r2, #1
}
   16572:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   16574:	2103      	movs	r1, #3
   16576:	2002      	movs	r0, #2
   16578:	4760      	bx	ip
}
   1657a:	bc10      	pop	{r4}
   1657c:	4770      	bx	lr
   1657e:	bf00      	nop
   16580:	200018d8 	.word	0x200018d8

00016584 <ticker_start_ext>:
{
   16584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   16588:	4e28      	ldr	r6, [pc, #160]	; (1662c <ticker_start_ext+0xa8>)
{
   1658a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   1658e:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   16590:	252c      	movs	r5, #44	; 0x2c
   16592:	fb05 6504 	mla	r5, r5, r4, r6
{
   16596:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   16598:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   1659c:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
   165a0:	6869      	ldr	r1, [r5, #4]
   165a2:	eb01 07c0 	add.w	r7, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
   165a6:	eb06 0684 	add.w	r6, r6, r4, lsl #2
	last = user->last + 1;
   165aa:	f897 e003 	ldrb.w	lr, [r7, #3]
	if (last >= user->count_user_op) {
   165ae:	f811 4030 	ldrb.w	r4, [r1, r0, lsl #3]
	if (last == user->first) {
   165b2:	7879      	ldrb	r1, [r7, #1]
	last = user->last + 1;
   165b4:	f10e 0c01 	add.w	ip, lr, #1
   165b8:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   165bc:	4564      	cmp	r4, ip
   165be:	bf98      	it	ls
   165c0:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   165c4:	4561      	cmp	r1, ip
   165c6:	d02e      	beq.n	16626 <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
   165c8:	6879      	ldr	r1, [r7, #4]
   165ca:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   165ce:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   165d2:	eb01 048e 	add.w	r4, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
   165d6:	f04f 0904 	mov.w	r9, #4
   165da:	f801 902e 	strb.w	r9, [r1, lr, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
   165de:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   165e0:	9b08      	ldr	r3, [sp, #32]
   165e2:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   165e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   165e6:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   165e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   165ea:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   165ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   165ee:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
   165f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   165f2:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   165f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   165f6:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   165f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   165fa:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   165fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   165fe:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   16600:	9b10      	ldr	r3, [sp, #64]	; 0x40
   16602:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   16604:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   16606:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   16608:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.start.lazy = lazy;
   1660a:	f8a4 8014 	strh.w	r8, [r4, #20]
	user->last = last;
   1660e:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   16612:	e9d5 3508 	ldrd	r3, r5, [r5, #32]
   16616:	4798      	blx	r3
   16618:	4633      	mov	r3, r6
   1661a:	4649      	mov	r1, r9
   1661c:	2200      	movs	r2, #0
   1661e:	47a8      	blx	r5
	return user_op->status;
   16620:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   16622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   16626:	2001      	movs	r0, #1
}
   16628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1662c:	200018d8 	.word	0x200018d8

00016630 <ticker_start>:
{
   16630:	b510      	push	{r4, lr}
   16632:	b08a      	sub	sp, #40	; 0x28
   16634:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
   16636:	9400      	str	r4, [sp, #0]
{
   16638:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1663a:	9401      	str	r4, [sp, #4]
{
   1663c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1663e:	9402      	str	r4, [sp, #8]
{
   16640:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   16644:	9403      	str	r4, [sp, #12]
{
   16646:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
   16648:	9404      	str	r4, [sp, #16]
{
   1664a:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1664c:	9405      	str	r4, [sp, #20]
{
   1664e:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
   16650:	9406      	str	r4, [sp, #24]
{
   16652:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   16654:	9407      	str	r4, [sp, #28]
{
   16656:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
   16658:	9408      	str	r4, [sp, #32]
   1665a:	2400      	movs	r4, #0
   1665c:	9409      	str	r4, [sp, #36]	; 0x24
   1665e:	f7ff ff91 	bl	16584 <ticker_start_ext>
}
   16662:	b00a      	add	sp, #40	; 0x28
   16664:	bd10      	pop	{r4, pc}
   16666:	bf00      	nop

00016668 <ticker_update_ext>:
{
   16668:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   1666c:	4d28      	ldr	r5, [pc, #160]	; (16710 <ticker_update_ext+0xa8>)
{
   1666e:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
   16672:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   16676:	4604      	mov	r4, r0
   16678:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   1667a:	212c      	movs	r1, #44	; 0x2c
   1667c:	fb01 5104 	mla	r1, r1, r4, r5
	struct ticker_instance *instance = &_instance[instance_index];
   16680:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   16684:	eb04 0446 	add.w	r4, r4, r6, lsl #1
   16688:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	user = &instance->users[user_id];
   1668c:	684c      	ldr	r4, [r1, #4]
   1668e:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
   16692:	f814 9030 	ldrb.w	r9, [r4, r0, lsl #3]
	last = user->last + 1;
   16696:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   1669a:	7874      	ldrb	r4, [r6, #1]
	last = user->last + 1;
   1669c:	f10e 0c01 	add.w	ip, lr, #1
   166a0:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   166a4:	45e1      	cmp	r9, ip
   166a6:	bf98      	it	ls
   166a8:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   166ac:	4564      	cmp	r4, ip
{
   166ae:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
	if (last == user->first) {
   166b2:	d02a      	beq.n	1670a <ticker_update_ext+0xa2>
	user_op = &user->user_op[user->last];
   166b4:	f8d6 a004 	ldr.w	sl, [r6, #4]
   166b8:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   166bc:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   166c0:	eb0a 048e 	add.w	r4, sl, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   166c4:	f04f 0b05 	mov.w	fp, #5
   166c8:	f80a b02e 	strb.w	fp, [sl, lr, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   166cc:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   166ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   166d0:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   166d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   166d4:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   166d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   166d8:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
   166da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   166dc:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   166de:	9b10      	ldr	r3, [sp, #64]	; 0x40
   166e0:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   166e2:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   166e4:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   166e6:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.update.lazy = lazy;
   166e8:	82a7      	strh	r7, [r4, #20]
	user_op->params.update.force = force;
   166ea:	f884 8016 	strb.w	r8, [r4, #22]
	user_op->params.update.must_expire = must_expire;
   166ee:	f884 9017 	strb.w	r9, [r4, #23]
	user->last = last;
   166f2:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   166f6:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   166fa:	4798      	blx	r3
   166fc:	462b      	mov	r3, r5
   166fe:	2200      	movs	r2, #0
   16700:	2104      	movs	r1, #4
   16702:	47b0      	blx	r6
	return user_op->status;
   16704:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   16706:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
   1670a:	2001      	movs	r0, #1
}
   1670c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16710:	200018d8 	.word	0x200018d8

00016714 <ticker_update>:
{
   16714:	b510      	push	{r4, lr}
   16716:	b088      	sub	sp, #32
   16718:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
   1671a:	9400      	str	r4, [sp, #0]
{
   1671c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   1671e:	9401      	str	r4, [sp, #4]
{
   16720:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
   16722:	9402      	str	r4, [sp, #8]
{
   16724:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
   16728:	9403      	str	r4, [sp, #12]
{
   1672a:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
   1672e:	9404      	str	r4, [sp, #16]
{
   16730:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   16732:	9405      	str	r4, [sp, #20]
{
   16734:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
   16736:	9406      	str	r4, [sp, #24]
   16738:	2400      	movs	r4, #0
   1673a:	9407      	str	r4, [sp, #28]
   1673c:	f7ff ff94 	bl	16668 <ticker_update_ext>
}
   16740:	b008      	add	sp, #32
   16742:	bd10      	pop	{r4, pc}

00016744 <ticker_stop>:
{
   16744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   16748:	4c1e      	ldr	r4, [pc, #120]	; (167c4 <ticker_stop+0x80>)
{
   1674a:	4684      	mov	ip, r0
   1674c:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   1674e:	212c      	movs	r1, #44	; 0x2c
   16750:	fb01 410c 	mla	r1, r1, ip, r4
	struct ticker_instance *instance = &_instance[instance_index];
   16754:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
   16758:	eb0c 0c45 	add.w	ip, ip, r5, lsl #1
	user = &instance->users[user_id];
   1675c:	684d      	ldr	r5, [r1, #4]
   1675e:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	if (last >= user->count_user_op) {
   16762:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
   16766:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   1676a:	7875      	ldrb	r5, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   1676c:	eb04 048c 	add.w	r4, r4, ip, lsl #2
	last = user->last + 1;
   16770:	f10e 0c01 	add.w	ip, lr, #1
   16774:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   16778:	4567      	cmp	r7, ip
   1677a:	bf98      	it	ls
   1677c:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   16780:	4565      	cmp	r5, ip
   16782:	d01c      	beq.n	167be <ticker_stop+0x7a>
	user_op = &user->user_op[user->last];
   16784:	6877      	ldr	r7, [r6, #4]
   16786:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
   1678a:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
   1678e:	eb07 058e 	add.w	r5, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   16792:	f04f 0807 	mov.w	r8, #7
   16796:	f807 802e 	strb.w	r8, [r7, lr, lsl #2]
	user_op->fp_op_func = fp_op_func;
   1679a:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
   1679c:	9b06      	ldr	r3, [sp, #24]
   1679e:	632b      	str	r3, [r5, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   167a0:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   167a2:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
   167a4:	62ab      	str	r3, [r5, #40]	; 0x28
	user->last = last;
   167a6:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   167aa:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   167ae:	4798      	blx	r3
   167b0:	4623      	mov	r3, r4
   167b2:	2200      	movs	r2, #0
   167b4:	2104      	movs	r1, #4
   167b6:	47b0      	blx	r6
	return user_op->status;
   167b8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
   167ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   167be:	2001      	movs	r0, #1
}
   167c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   167c4:	200018d8 	.word	0x200018d8

000167c8 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   167c8:	f00b b92e 	b.w	21a28 <cntr_cnt_get>

000167cc <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   167cc:	1a40      	subs	r0, r0, r1
}
   167ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   167d2:	4770      	bx	lr

000167d4 <ll_addr_set>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   167d4:	b570      	push	{r4, r5, r6, lr}
   167d6:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
   167d8:	2000      	movs	r0, #0
{
   167da:	460e      	mov	r6, r1
		if (ull_adv_is_enabled(0)) {
   167dc:	f003 f954 	bl	19a88 <ull_adv_is_enabled>
   167e0:	b978      	cbnz	r0, 16802 <ll_addr_set+0x2e>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
   167e2:	b13c      	cbz	r4, 167f4 <ll_addr_set+0x20>
   167e4:	4605      	mov	r5, r0
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   167e6:	2206      	movs	r2, #6
   167e8:	4631      	mov	r1, r6
   167ea:	4807      	ldr	r0, [pc, #28]	; (16808 <ll_addr_set+0x34>)
   167ec:	f012 fdab 	bl	29346 <memcpy>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
   167f0:	4628      	mov	r0, r5
}
   167f2:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   167f4:	2206      	movs	r2, #6
   167f6:	4631      	mov	r1, r6
   167f8:	4804      	ldr	r0, [pc, #16]	; (1680c <ll_addr_set+0x38>)
   167fa:	f012 fda4 	bl	29346 <memcpy>
	return 0;
   167fe:	4620      	mov	r0, r4
}
   16800:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   16802:	200c      	movs	r0, #12
}
   16804:	bd70      	pop	{r4, r5, r6, pc}
   16806:	bf00      	nop
   16808:	2000190c 	.word	0x2000190c
   1680c:	20001904 	.word	0x20001904

00016810 <ll_addr_get>:

uint8_t *ll_addr_get(uint8_t addr_type)
{
	if (addr_type > BT_ADDR_LE_RANDOM) {
   16810:	2801      	cmp	r0, #1
{
   16812:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   16814:	d805      	bhi.n	16822 <ll_addr_get+0x12>
		return NULL;
	}

	if (addr_type) {
		return rnd_addr;
   16816:	4a04      	ldr	r2, [pc, #16]	; (16828 <ll_addr_get+0x18>)
   16818:	4804      	ldr	r0, [pc, #16]	; (1682c <ll_addr_get+0x1c>)
   1681a:	2b00      	cmp	r3, #0
   1681c:	bf18      	it	ne
   1681e:	4610      	movne	r0, r2
   16820:	4770      	bx	lr
		return NULL;
   16822:	2000      	movs	r0, #0
	}

	return pub_addr;
}
   16824:	4770      	bx	lr
   16826:	bf00      	nop
   16828:	2000190c 	.word	0x2000190c
   1682c:	20001904 	.word	0x20001904

00016830 <ll_addr_read>:
	if (addr_type > BT_ADDR_LE_RANDOM) {
   16830:	2801      	cmp	r0, #1

uint8_t *ll_addr_read(uint8_t addr_type, uint8_t *const bdaddr)
{
   16832:	b510      	push	{r4, lr}
   16834:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   16836:	d80b      	bhi.n	16850 <ll_addr_read+0x20>
	if (addr_type) {
   16838:	4608      	mov	r0, r1
		return rnd_addr;
   1683a:	4c07      	ldr	r4, [pc, #28]	; (16858 <ll_addr_read+0x28>)
   1683c:	4907      	ldr	r1, [pc, #28]	; (1685c <ll_addr_read+0x2c>)
   1683e:	2b00      	cmp	r3, #0
   16840:	bf18      	it	ne
   16842:	460c      	movne	r4, r1
	uint8_t *addr;

	addr = ll_addr_get(addr_type);
	if (addr) {
		memcpy(bdaddr, addr, BDADDR_SIZE);
   16844:	2206      	movs	r2, #6
   16846:	4621      	mov	r1, r4
   16848:	f012 fd7d 	bl	29346 <memcpy>
	}

	return addr;
}
   1684c:	4620      	mov	r0, r4
   1684e:	bd10      	pop	{r4, pc}
		return NULL;
   16850:	2400      	movs	r4, #0
}
   16852:	4620      	mov	r0, r4
   16854:	bd10      	pop	{r4, pc}
   16856:	bf00      	nop
   16858:	20001904 	.word	0x20001904
   1685c:	2000190c 	.word	0x2000190c

00016860 <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   16860:	2802      	cmp	r0, #2
   16862:	d001      	beq.n	16868 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
   16864:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   16866:	4770      	bx	lr
{
   16868:	b538      	push	{r3, r4, r5, lr}
   1686a:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
   1686c:	4608      	mov	r0, r1
   1686e:	461d      	mov	r5, r3
   16870:	f004 f830 	bl	1a8d4 <ll_connected_get>
			if (!conn) {
   16874:	b110      	cbz	r0, 1687c <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   16876:	2000      	movs	r0, #0
   16878:	7028      	strb	r0, [r5, #0]
}
   1687a:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1687c:	4620      	mov	r0, r4
}
   1687e:	bd38      	pop	{r3, r4, r5, pc}

00016880 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   16880:	2300      	movs	r3, #0
   16882:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   16884:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   16886:	4770      	bx	lr

00016888 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   16888:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   1688a:	4802      	ldr	r0, [pc, #8]	; (16894 <hci_driver_init+0xc>)
   1688c:	f7fa f902 	bl	10a94 <bt_hci_driver_register>

	return 0;
}
   16890:	2000      	movs	r0, #0
   16892:	bd08      	pop	{r3, pc}
   16894:	0002f924 	.word	0x0002f924

00016898 <hci_driver_send>:
{
   16898:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
   1689a:	8983      	ldrh	r3, [r0, #12]
{
   1689c:	b083      	sub	sp, #12
	if (!buf->len) {
   1689e:	b123      	cbz	r3, 168aa <hci_driver_send+0x12>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   168a0:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   168a2:	4604      	mov	r4, r0
   168a4:	b1c3      	cbz	r3, 168d8 <hci_driver_send+0x40>
   168a6:	2b02      	cmp	r3, #2
   168a8:	d004      	beq.n	168b4 <hci_driver_send+0x1c>
   168aa:	f06f 0515 	mvn.w	r5, #21
}
   168ae:	4628      	mov	r0, r5
   168b0:	b003      	add	sp, #12
   168b2:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
   168b4:	a901      	add	r1, sp, #4
   168b6:	f000 ff11 	bl	176dc <hci_acl_handle>
	if (evt) {
   168ba:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
   168bc:	4605      	mov	r5, r0
	if (evt) {
   168be:	b113      	cbz	r3, 168c6 <hci_driver_send+0x2e>
		bt_recv_prio(evt);
   168c0:	4618      	mov	r0, r3
   168c2:	f7fa f8c9 	bl	10a58 <bt_recv_prio>
	if (!err) {
   168c6:	2d00      	cmp	r5, #0
   168c8:	d1f1      	bne.n	168ae <hci_driver_send+0x16>
		net_buf_unref(buf);
   168ca:	4620      	mov	r0, r4
   168cc:	f00c fde4 	bl	23498 <net_buf_unref>
   168d0:	2500      	movs	r5, #0
}
   168d2:	4628      	mov	r0, r5
   168d4:	b003      	add	sp, #12
   168d6:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   168d8:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
   168da:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   168dc:	f000 fa40 	bl	16d60 <hci_cmd_handle>
	if (evt) {
   168e0:	2800      	cmp	r0, #0
   168e2:	d0f2      	beq.n	168ca <hci_driver_send+0x32>
		bt_recv_prio(evt);
   168e4:	f7fa f8b8 	bl	10a58 <bt_recv_prio>
		if (node_rx) {
   168e8:	9d01      	ldr	r5, [sp, #4]
   168ea:	2d00      	cmp	r5, #0
   168ec:	d0ed      	beq.n	168ca <hci_driver_send+0x32>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   168ee:	4628      	mov	r0, r5
   168f0:	f001 faae 	bl	17e50 <hci_get_class>
   168f4:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
   168f6:	9901      	ldr	r1, [sp, #4]
   168f8:	4801      	ldr	r0, [pc, #4]	; (16900 <hci_driver_send+0x68>)
   168fa:	f017 fedc 	bl	2e6b6 <k_queue_append>
	if (!err) {
   168fe:	e7e4      	b.n	168ca <hci_driver_send+0x32>
   16900:	200009b8 	.word	0x200009b8

00016904 <recv_thread>:
{
   16904:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   16906:	4e41      	ldr	r6, [pc, #260]	; (16a0c <recv_thread+0x108>)
		LL_ASSERT(0);
   16908:	4f41      	ldr	r7, [pc, #260]	; (16a10 <recv_thread+0x10c>)
{
   1690a:	b083      	sub	sp, #12
   1690c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16910:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16914:	4630      	mov	r0, r6
   16916:	f00f f9fb 	bl	25d10 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   1691a:	2800      	cmp	r0, #0
   1691c:	d0f6      	beq.n	1690c <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
   1691e:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   16920:	9001      	str	r0, [sp, #4]
	switch (class) {
   16922:	2b04      	cmp	r3, #4
   16924:	d821      	bhi.n	1696a <recv_thread+0x66>
   16926:	2b00      	cmp	r3, #0
   16928:	d14b      	bne.n	169c2 <recv_thread+0xbe>
		LL_ASSERT(0);
   1692a:	493a      	ldr	r1, [pc, #232]	; (16a14 <recv_thread+0x110>)
   1692c:	483a      	ldr	r0, [pc, #232]	; (16a18 <recv_thread+0x114>)
   1692e:	f240 13a3 	movw	r3, #419	; 0x1a3
   16932:	463a      	mov	r2, r7
   16934:	f010 fdfe 	bl	27534 <assert_print>
   16938:	4040      	eors	r0, r0
   1693a:	f380 8811 	msr	BASEPRI, r0
   1693e:	f04f 0003 	mov.w	r0, #3
   16942:	df02      	svc	2
	node_rx->hdr.next = NULL;
   16944:	9b01      	ldr	r3, [sp, #4]
   16946:	2200      	movs	r2, #0
   16948:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   1694a:	a801      	add	r0, sp, #4
   1694c:	f001 fea6 	bl	1869c <ll_rx_mem_release>
   16950:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16954:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16958:	4630      	mov	r0, r6
   1695a:	f00f f9d9 	bl	25d10 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   1695e:	2800      	cmp	r0, #0
   16960:	d0d4      	beq.n	1690c <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
   16962:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   16964:	9001      	str	r0, [sp, #4]
	switch (class) {
   16966:	2b04      	cmp	r3, #4
   16968:	d9dd      	bls.n	16926 <recv_thread+0x22>
   1696a:	2b05      	cmp	r3, #5
   1696c:	d1dd      	bne.n	1692a <recv_thread+0x26>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1696e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16976:	2003      	movs	r0, #3
   16978:	f7f9 fbea 	bl	10150 <bt_buf_get_rx>
   1697c:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   1697e:	4621      	mov	r1, r4
   16980:	9801      	ldr	r0, [sp, #4]
   16982:	f000 ff37 	bl	177f4 <hci_acl_encode>
	node_rx->hdr.next = NULL;
   16986:	9b01      	ldr	r3, [sp, #4]
   16988:	2200      	movs	r2, #0
   1698a:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   1698c:	a801      	add	r0, sp, #4
   1698e:	f001 fe85 	bl	1869c <ll_rx_mem_release>
		while (buf) {
   16992:	2c00      	cmp	r4, #0
   16994:	d0ba      	beq.n	1690c <recv_thread+0x8>
			frag = net_buf_ref(buf);
   16996:	4620      	mov	r0, r4
   16998:	f016 fce9 	bl	2d36e <net_buf_ref>
			buf = net_buf_frag_del(NULL, buf);
   1699c:	4621      	mov	r1, r4
			frag = net_buf_ref(buf);
   1699e:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
   169a0:	2000      	movs	r0, #0
   169a2:	f016 fd0a 	bl	2d3ba <net_buf_frag_del>
			if (frag->len) {
   169a6:	89ab      	ldrh	r3, [r5, #12]
			buf = net_buf_frag_del(NULL, buf);
   169a8:	4604      	mov	r4, r0
				bt_recv(frag);
   169aa:	4628      	mov	r0, r5
			if (frag->len) {
   169ac:	b133      	cbz	r3, 169bc <recv_thread+0xb8>
				bt_recv(frag);
   169ae:	f7f9 ffcf 	bl	10950 <bt_recv>
	z_impl_k_yield();
   169b2:	f00f fe3f 	bl	26634 <z_impl_k_yield>
		while (buf) {
   169b6:	2c00      	cmp	r4, #0
   169b8:	d1ed      	bne.n	16996 <recv_thread+0x92>
   169ba:	e7a7      	b.n	1690c <recv_thread+0x8>
				net_buf_unref(frag);
   169bc:	f00c fd6c 	bl	23498 <net_buf_unref>
   169c0:	e7f7      	b.n	169b2 <recv_thread+0xae>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   169c2:	2b02      	cmp	r3, #2
   169c4:	d013      	beq.n	169ee <recv_thread+0xea>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   169c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   169ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   169ce:	2001      	movs	r0, #1
   169d0:	f7f9 fbbe 	bl	10150 <bt_buf_get_rx>
   169d4:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
   169d6:	9801      	ldr	r0, [sp, #4]
		if (buf) {
   169d8:	b19c      	cbz	r4, 16a02 <recv_thread+0xfe>
			hci_evt_encode(node_rx, buf);
   169da:	4621      	mov	r1, r4
   169dc:	f000 ff44 	bl	17868 <hci_evt_encode>
	node_rx->hdr.next = NULL;
   169e0:	9b01      	ldr	r3, [sp, #4]
   169e2:	2200      	movs	r2, #0
   169e4:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   169e6:	a801      	add	r0, sp, #4
   169e8:	f001 fe58 	bl	1869c <ll_rx_mem_release>
		while (buf) {
   169ec:	e7d3      	b.n	16996 <recv_thread+0x92>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   169ee:	2200      	movs	r2, #0
   169f0:	2300      	movs	r3, #0
   169f2:	2101      	movs	r1, #1
   169f4:	2000      	movs	r0, #0
   169f6:	f7f9 fbd5 	bl	101a4 <bt_buf_get_evt>
   169fa:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
   169fc:	9801      	ldr	r0, [sp, #4]
		if (buf) {
   169fe:	2c00      	cmp	r4, #0
   16a00:	d1eb      	bne.n	169da <recv_thread+0xd6>
	node_rx->hdr.next = NULL;
   16a02:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
   16a04:	a801      	add	r0, sp, #4
   16a06:	f001 fe49 	bl	1869c <ll_rx_mem_release>
		while (buf) {
   16a0a:	e77f      	b.n	1690c <recv_thread+0x8>
   16a0c:	200009b8 	.word	0x200009b8
   16a10:	0002f8c0 	.word	0x0002f8c0
   16a14:	0002f900 	.word	0x0002f900
   16a18:	0002f8a0 	.word	0x0002f8a0

00016a1c <prio_recv_thread>:
{
   16a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   16a20:	4f2e      	ldr	r7, [pc, #184]	; (16adc <prio_recv_thread+0xc0>)
				k_fifo_put(&recv_fifo, node_rx);
   16a22:	4e2f      	ldr	r6, [pc, #188]	; (16ae0 <prio_recv_thread+0xc4>)
{
   16a24:	b082      	sub	sp, #8
   16a26:	e00c      	b.n	16a42 <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   16a28:	f7f9 fbbc 	bl	101a4 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   16a2c:	4622      	mov	r2, r4
   16a2e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   16a32:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   16a34:	f001 f9f4 	bl	17e20 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   16a38:	4620      	mov	r0, r4
   16a3a:	f7fa f80d 	bl	10a58 <bt_recv_prio>
	z_impl_k_yield();
   16a3e:	f00f fdf9 	bl	26634 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   16a42:	f10d 0102 	add.w	r1, sp, #2
   16a46:	a801      	add	r0, sp, #4
   16a48:	f001 fce2 	bl	18410 <ll_rx_get>
   16a4c:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   16a4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16a56:	2100      	movs	r1, #0
   16a58:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   16a5a:	2c00      	cmp	r4, #0
   16a5c:	d1e4      	bne.n	16a28 <prio_recv_thread+0xc>
		if (node_rx) {
   16a5e:	9b01      	ldr	r3, [sp, #4]
   16a60:	b1b3      	cbz	r3, 16a90 <prio_recv_thread+0x74>
			ll_rx_dequeue();
   16a62:	f001 fd4b 	bl	184fc <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   16a66:	f8dd 8004 	ldr.w	r8, [sp, #4]
   16a6a:	4640      	mov	r0, r8
   16a6c:	f001 f9f0 	bl	17e50 <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
   16a70:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   16a72:	f888 0005 	strb.w	r0, [r8, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   16a76:	796b      	ldrb	r3, [r5, #5]
   16a78:	2b03      	cmp	r3, #3
   16a7a:	d102      	bne.n	16a82 <prio_recv_thread+0x66>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   16a7c:	792b      	ldrb	r3, [r5, #4]
   16a7e:	2b18      	cmp	r3, #24
   16a80:	d00e      	beq.n	16aa0 <prio_recv_thread+0x84>
				k_fifo_put(&recv_fifo, node_rx);
   16a82:	4629      	mov	r1, r5
   16a84:	4630      	mov	r0, r6
   16a86:	f017 fe16 	bl	2e6b6 <k_queue_append>
		if (iso_received || node_rx) {
   16a8a:	9b01      	ldr	r3, [sp, #4]
   16a8c:	2b00      	cmp	r3, #0
   16a8e:	d1d8      	bne.n	16a42 <prio_recv_thread+0x26>
	return z_impl_k_sem_take(sem, timeout);
   16a90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16a94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16a98:	4638      	mov	r0, r7
   16a9a:	f00f f993 	bl	25dc4 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   16a9e:	e7d0      	b.n	16a42 <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   16aa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16aa4:	4621      	mov	r1, r4
   16aa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16aaa:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   16aac:	f8b5 8006 	ldrh.w	r8, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   16ab0:	f7f9 fb78 	bl	101a4 <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
   16ab4:	4641      	mov	r1, r8
   16ab6:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   16ab8:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   16aba:	f105 001c 	add.w	r0, r5, #28
   16abe:	f000 fe71 	bl	177a4 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   16ac2:	4640      	mov	r0, r8
   16ac4:	f000 fe8e 	bl	177e4 <hci_disconn_complete_process>
				bt_recv_prio(buf);
   16ac8:	4620      	mov	r0, r4
			if (buf) {
   16aca:	b124      	cbz	r4, 16ad6 <prio_recv_thread+0xba>
				bt_recv_prio(buf);
   16acc:	f7f9 ffc4 	bl	10a58 <bt_recv_prio>
					net_buf_unref(buf);
   16ad0:	4620      	mov	r0, r4
   16ad2:	f00c fce1 	bl	23498 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
   16ad6:	9d01      	ldr	r5, [sp, #4]
   16ad8:	e7d3      	b.n	16a82 <prio_recv_thread+0x66>
   16ada:	bf00      	nop
   16adc:	20000988 	.word	0x20000988
   16ae0:	200009b8 	.word	0x200009b8

00016ae4 <hci_driver_open>:
{
   16ae4:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   16ae6:	481a      	ldr	r0, [pc, #104]	; (16b50 <hci_driver_open+0x6c>)
{
   16ae8:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
   16aea:	f002 fa51 	bl	18f90 <ll_init>
	if (err) {
   16aee:	4604      	mov	r4, r0
   16af0:	bb58      	cbnz	r0, 16b4a <hci_driver_open+0x66>
	hci_init(NULL);
   16af2:	f001 f9c3 	bl	17e7c <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   16af6:	2600      	movs	r6, #0
   16af8:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   16afa:	f06f 0209 	mvn.w	r2, #9
   16afe:	e9cd 2403 	strd	r2, r4, [sp, #12]
   16b02:	e9cd 6706 	strd	r6, r7, [sp, #24]
   16b06:	e9cd 4401 	strd	r4, r4, [sp, #4]
   16b0a:	4b12      	ldr	r3, [pc, #72]	; (16b54 <hci_driver_open+0x70>)
   16b0c:	4912      	ldr	r1, [pc, #72]	; (16b58 <hci_driver_open+0x74>)
   16b0e:	9400      	str	r4, [sp, #0]
   16b10:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   16b14:	4811      	ldr	r0, [pc, #68]	; (16b5c <hci_driver_open+0x78>)
   16b16:	f00e ff9d 	bl	25a54 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   16b1a:	4911      	ldr	r1, [pc, #68]	; (16b60 <hci_driver_open+0x7c>)
   16b1c:	480f      	ldr	r0, [pc, #60]	; (16b5c <hci_driver_open+0x78>)
   16b1e:	f017 fd33 	bl	2e588 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   16b22:	f06f 0207 	mvn.w	r2, #7
   16b26:	e9cd 2403 	strd	r2, r4, [sp, #12]
   16b2a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   16b2e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   16b32:	4b0c      	ldr	r3, [pc, #48]	; (16b64 <hci_driver_open+0x80>)
   16b34:	490c      	ldr	r1, [pc, #48]	; (16b68 <hci_driver_open+0x84>)
   16b36:	9400      	str	r4, [sp, #0]
   16b38:	f640 0298 	movw	r2, #2200	; 0x898
   16b3c:	480b      	ldr	r0, [pc, #44]	; (16b6c <hci_driver_open+0x88>)
   16b3e:	f00e ff89 	bl	25a54 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   16b42:	490b      	ldr	r1, [pc, #44]	; (16b70 <hci_driver_open+0x8c>)
   16b44:	4809      	ldr	r0, [pc, #36]	; (16b6c <hci_driver_open+0x88>)
   16b46:	f017 fd1f 	bl	2e588 <z_impl_k_thread_name_set>
}
   16b4a:	4620      	mov	r0, r4
   16b4c:	b008      	add	sp, #32
   16b4e:	bdd0      	pop	{r4, r6, r7, pc}
   16b50:	20000988 	.word	0x20000988
   16b54:	00016a1d 	.word	0x00016a1d
   16b58:	200038e0 	.word	0x200038e0
   16b5c:	200010c0 	.word	0x200010c0
   16b60:	0002f904 	.word	0x0002f904
   16b64:	00016905 	.word	0x00016905
   16b68:	20003ac0 	.word	0x20003ac0
   16b6c:	20001140 	.word	0x20001140
   16b70:	0002f910 	.word	0x0002f910

00016b74 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   16b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   16b76:	4c19      	ldr	r4, [pc, #100]	; (16bdc <le_remote_feat_complete+0x68>)
   16b78:	6864      	ldr	r4, [r4, #4]
   16b7a:	00a4      	lsls	r4, r4, #2
   16b7c:	d504      	bpl.n	16b88 <le_remote_feat_complete+0x14>
   16b7e:	4615      	mov	r5, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   16b80:	4a17      	ldr	r2, [pc, #92]	; (16be0 <le_remote_feat_complete+0x6c>)
   16b82:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   16b84:	0712      	lsls	r2, r2, #28
   16b86:	d400      	bmi.n	16b8a <le_remote_feat_complete+0x16>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   16b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16b8a:	f103 0408 	add.w	r4, r3, #8
   16b8e:	4607      	mov	r7, r0
   16b90:	460e      	mov	r6, r1
   16b92:	4620      	mov	r0, r4
   16b94:	2102      	movs	r1, #2
   16b96:	f016 fc1c 	bl	2d3d2 <net_buf_simple_add>
	hdr->evt = evt;
   16b9a:	233e      	movs	r3, #62	; 0x3e
   16b9c:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   16b9e:	230c      	movs	r3, #12
   16ba0:	7043      	strb	r3, [r0, #1]
   16ba2:	2101      	movs	r1, #1
   16ba4:	4620      	mov	r0, r4
   16ba6:	f016 fc14 	bl	2d3d2 <net_buf_simple_add>
   16baa:	4603      	mov	r3, r0
	me->subevent = subevt;
   16bac:	2204      	movs	r2, #4
   16bae:	701a      	strb	r2, [r3, #0]
   16bb0:	4620      	mov	r0, r4
   16bb2:	210b      	movs	r1, #11
   16bb4:	f016 fc0d 	bl	2d3d2 <net_buf_simple_add>
		memcpy(&sep->features[0],
   16bb8:	2208      	movs	r2, #8
	sep->status = status;
   16bba:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   16bbc:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
   16bc0:	b92f      	cbnz	r7, 16bce <le_remote_feat_complete+0x5a>
		memcpy(&sep->features[0],
   16bc2:	1d31      	adds	r1, r6, #4
   16bc4:	3003      	adds	r0, #3
}
   16bc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
   16bca:	f012 bbbc 	b.w	29346 <memcpy>
}
   16bce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   16bd2:	2100      	movs	r1, #0
   16bd4:	3003      	adds	r0, #3
   16bd6:	f012 bbc1 	b.w	2935c <memset>
   16bda:	bf00      	nop
   16bdc:	20000158 	.word	0x20000158
   16be0:	20000160 	.word	0x20000160

00016be4 <hci_vendor_cmd_handle_common>:
{
   16be4:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (ocf) {
   16be6:	3801      	subs	r0, #1
{
   16be8:	b087      	sub	sp, #28
   16bea:	4615      	mov	r5, r2
	switch (ocf) {
   16bec:	2809      	cmp	r0, #9
   16bee:	d806      	bhi.n	16bfe <hci_vendor_cmd_handle_common+0x1a>
   16bf0:	e8df f000 	tbb	[pc, r0]
   16bf4:	05442709 	.word	0x05442709
   16bf8:	6c055805 	.word	0x6c055805
   16bfc:	9e89      	.short	0x9e89
   16bfe:	f06f 0015 	mvn.w	r0, #21
}
   16c02:	b007      	add	sp, #28
   16c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   16c06:	4b54      	ldr	r3, [pc, #336]	; (16d58 <hci_vendor_cmd_handle_common+0x174>)
   16c08:	210d      	movs	r1, #13
   16c0a:	8818      	ldrh	r0, [r3, #0]
   16c0c:	f013 f830 	bl	29c70 <bt_hci_cmd_complete_create>
   16c10:	210d      	movs	r1, #13
   16c12:	6028      	str	r0, [r5, #0]
   16c14:	3008      	adds	r0, #8
   16c16:	f016 fbdc 	bl	2d3d2 <net_buf_simple_add>
   16c1a:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   16c1c:	2202      	movs	r2, #2
	rp->status = 0x00;
   16c1e:	2000      	movs	r0, #0
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   16c20:	2403      	movs	r4, #3
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   16c22:	2163      	movs	r1, #99	; 0x63
	rp->status = 0x00;
   16c24:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   16c26:	705a      	strb	r2, [r3, #1]
   16c28:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   16c2a:	70da      	strb	r2, [r3, #3]
   16c2c:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
   16c2e:	7158      	strb	r0, [r3, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   16c30:	719c      	strb	r4, [r3, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   16c32:	71d8      	strb	r0, [r3, #7]
   16c34:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   16c36:	7259      	strb	r1, [r3, #9]
   16c38:	7298      	strb	r0, [r3, #10]
   16c3a:	72d8      	strb	r0, [r3, #11]
   16c3c:	7318      	strb	r0, [r3, #12]
}
   16c3e:	b007      	add	sp, #28
   16c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   16c42:	4b45      	ldr	r3, [pc, #276]	; (16d58 <hci_vendor_cmd_handle_common+0x174>)
   16c44:	2141      	movs	r1, #65	; 0x41
   16c46:	8818      	ldrh	r0, [r3, #0]
   16c48:	f013 f812 	bl	29c70 <bt_hci_cmd_complete_create>
   16c4c:	2141      	movs	r1, #65	; 0x41
   16c4e:	6028      	str	r0, [r5, #0]
   16c50:	3008      	adds	r0, #8
   16c52:	f016 fbbe 	bl	2d3d2 <net_buf_simple_add>
	rp->status = 0x00;
   16c56:	2400      	movs	r4, #0
   16c58:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   16c5a:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   16c5c:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   16c60:	4621      	mov	r1, r4
   16c62:	f012 fb7b 	bl	2935c <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   16c66:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   16c68:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
   16c6a:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
   16c6e:	f043 0303 	orr.w	r3, r3, #3
	return 0;
   16c72:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
   16c74:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   16c76:	70ab      	strb	r3, [r5, #2]
}
   16c78:	b007      	add	sp, #28
   16c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   16c7c:	4b36      	ldr	r3, [pc, #216]	; (16d58 <hci_vendor_cmd_handle_common+0x174>)
   16c7e:	2109      	movs	r1, #9
   16c80:	8818      	ldrh	r0, [r3, #0]
   16c82:	f012 fff5 	bl	29c70 <bt_hci_cmd_complete_create>
   16c86:	2109      	movs	r1, #9
   16c88:	6028      	str	r0, [r5, #0]
   16c8a:	3008      	adds	r0, #8
   16c8c:	f016 fba1 	bl	2d3d2 <net_buf_simple_add>
	rp->status = 0x00;
   16c90:	2400      	movs	r4, #0
   16c92:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   16c96:	2208      	movs	r2, #8
   16c98:	4621      	mov	r1, r4
   16c9a:	f012 fb5f 	bl	2935c <memset>
	return 0;
   16c9e:	4620      	mov	r0, r4
}
   16ca0:	b007      	add	sp, #28
   16ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   16ca4:	6889      	ldr	r1, [r1, #8]
   16ca6:	2000      	movs	r0, #0
   16ca8:	f7ff fd94 	bl	167d4 <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   16cac:	4b2a      	ldr	r3, [pc, #168]	; (16d58 <hci_vendor_cmd_handle_common+0x174>)
   16cae:	2101      	movs	r1, #1
   16cb0:	8818      	ldrh	r0, [r3, #0]
   16cb2:	f012 ffdd 	bl	29c70 <bt_hci_cmd_complete_create>
   16cb6:	2101      	movs	r1, #1
   16cb8:	4604      	mov	r4, r0
   16cba:	3008      	adds	r0, #8
   16cbc:	f016 fb89 	bl	2d3d2 <net_buf_simple_add>
   16cc0:	4603      	mov	r3, r0
	ccst->status = status;
   16cc2:	2000      	movs	r0, #0
   16cc4:	7018      	strb	r0, [r3, #0]
	*evt = cmd_complete_status(0x00);
   16cc6:	602c      	str	r4, [r5, #0]
}
   16cc8:	b007      	add	sp, #28
   16cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
   16ccc:	4e23      	ldr	r6, [pc, #140]	; (16d5c <hci_vendor_cmd_handle_common+0x178>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   16cce:	4f22      	ldr	r7, [pc, #136]	; (16d58 <hci_vendor_cmd_handle_common+0x174>)
	const char build_info[] = HCI_VS_BUILD_INFO;
   16cd0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   16cd2:	f10d 0c04 	add.w	ip, sp, #4
   16cd6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   16cda:	6833      	ldr	r3, [r6, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   16cdc:	8838      	ldrh	r0, [r7, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
   16cde:	f8ac 3000 	strh.w	r3, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   16ce2:	2113      	movs	r1, #19
   16ce4:	f012 ffc4 	bl	29c70 <bt_hci_cmd_complete_create>
   16ce8:	2113      	movs	r1, #19
   16cea:	6028      	str	r0, [r5, #0]
   16cec:	3008      	adds	r0, #8
   16cee:	f016 fb70 	bl	2d3d2 <net_buf_simple_add>
	rp->status = 0x00;
   16cf2:	2400      	movs	r4, #0
   16cf4:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   16cf8:	2212      	movs	r2, #18
   16cfa:	a901      	add	r1, sp, #4
   16cfc:	f012 fb23 	bl	29346 <memcpy>
	return 0;
   16d00:	4620      	mov	r0, r4
}
   16d02:	b007      	add	sp, #28
   16d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   16d06:	4b14      	ldr	r3, [pc, #80]	; (16d58 <hci_vendor_cmd_handle_common+0x174>)
   16d08:	2118      	movs	r1, #24
   16d0a:	8818      	ldrh	r0, [r3, #0]
   16d0c:	f012 ffb0 	bl	29c70 <bt_hci_cmd_complete_create>
   16d10:	2118      	movs	r1, #24
   16d12:	6028      	str	r0, [r5, #0]
   16d14:	3008      	adds	r0, #8
   16d16:	f016 fb5c 	bl	2d3d2 <net_buf_simple_add>
	rp->status = 0x00;
   16d1a:	2400      	movs	r4, #0
   16d1c:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   16d1e:	2101      	movs	r1, #1
	rp->status = 0x00;
   16d20:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   16d24:	f00b fca6 	bl	22674 <hci_vendor_read_static_addr>
   16d28:	7068      	strb	r0, [r5, #1]
	return 0;
   16d2a:	4620      	mov	r0, r4
}
   16d2c:	b007      	add	sp, #28
   16d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   16d30:	4b09      	ldr	r3, [pc, #36]	; (16d58 <hci_vendor_cmd_handle_common+0x174>)
   16d32:	2121      	movs	r1, #33	; 0x21
   16d34:	8818      	ldrh	r0, [r3, #0]
   16d36:	f012 ff9b 	bl	29c70 <bt_hci_cmd_complete_create>
   16d3a:	2121      	movs	r1, #33	; 0x21
   16d3c:	6028      	str	r0, [r5, #0]
   16d3e:	3008      	adds	r0, #8
   16d40:	f016 fb47 	bl	2d3d2 <net_buf_simple_add>
	rp->status = 0x00;
   16d44:	4601      	mov	r1, r0
   16d46:	2400      	movs	r4, #0
   16d48:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   16d4c:	3001      	adds	r0, #1
   16d4e:	f00b fd05 	bl	2275c <hci_vendor_read_key_hierarchy_roots>
	return 0;
   16d52:	4620      	mov	r0, r4
}
   16d54:	b007      	add	sp, #28
   16d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16d58:	20002cd0 	.word	0x20002cd0
   16d5c:	0002f93c 	.word	0x0002f93c

00016d60 <hci_cmd_handle>:
{
   16d60:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   16d62:	8983      	ldrh	r3, [r0, #12]
{
   16d64:	b08d      	sub	sp, #52	; 0x34
	struct net_buf *evt = NULL;
   16d66:	2200      	movs	r2, #0
	if (cmd->len < sizeof(*chdr)) {
   16d68:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
   16d6a:	9207      	str	r2, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
   16d6c:	d92f      	bls.n	16dce <hci_cmd_handle+0x6e>
	return net_buf_simple_pull_mem(&buf->b, len);
   16d6e:	4604      	mov	r4, r0
   16d70:	2103      	movs	r1, #3
   16d72:	3008      	adds	r0, #8
   16d74:	f016 fb54 	bl	2d420 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   16d78:	89a2      	ldrh	r2, [r4, #12]
   16d7a:	7883      	ldrb	r3, [r0, #2]
   16d7c:	429a      	cmp	r2, r3
   16d7e:	d326      	bcc.n	16dce <hci_cmd_handle+0x6e>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   16d80:	8802      	ldrh	r2, [r0, #0]
   16d82:	4eb6      	ldr	r6, [pc, #728]	; (1705c <hci_cmd_handle+0x2fc>)
	switch (BT_OGF(_opcode)) {
   16d84:	f3c2 2385 	ubfx	r3, r2, #10, #6
   16d88:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
   16d8a:	8032      	strh	r2, [r6, #0]
   16d8c:	b290      	uxth	r0, r2
	ocf = BT_OCF(_opcode);
   16d8e:	f3c2 0509 	ubfx	r5, r2, #0, #10
	switch (BT_OGF(_opcode)) {
   16d92:	d809      	bhi.n	16da8 <hci_cmd_handle+0x48>
   16d94:	b1a3      	cbz	r3, 16dc0 <hci_cmd_handle+0x60>
   16d96:	3b01      	subs	r3, #1
   16d98:	2b07      	cmp	r3, #7
   16d9a:	d811      	bhi.n	16dc0 <hci_cmd_handle+0x60>
   16d9c:	e8df f003 	tbb	[pc, r3]
   16da0:	4d2a101b 	.word	0x4d2a101b
   16da4:	66101010 	.word	0x66101010
   16da8:	2b3f      	cmp	r3, #63	; 0x3f
   16daa:	d109      	bne.n	16dc0 <hci_cmd_handle+0x60>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   16dac:	4621      	mov	r1, r4
   16dae:	aa07      	add	r2, sp, #28
   16db0:	4628      	mov	r0, r5
   16db2:	f7ff ff17 	bl	16be4 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   16db6:	3016      	adds	r0, #22
	return evt;
   16db8:	bf18      	it	ne
   16dba:	9c07      	ldrne	r4, [sp, #28]
	if (err == -EINVAL) {
   16dbc:	d104      	bne.n	16dc8 <hci_cmd_handle+0x68>
	return bt_hci_cmd_status_create(_opcode, status);
   16dbe:	8830      	ldrh	r0, [r6, #0]
   16dc0:	2101      	movs	r1, #1
   16dc2:	f012 ff67 	bl	29c94 <bt_hci_cmd_status_create>
   16dc6:	4604      	mov	r4, r0
}
   16dc8:	4620      	mov	r0, r4
   16dca:	b00d      	add	sp, #52	; 0x34
   16dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
   16dce:	2400      	movs	r4, #0
}
   16dd0:	4620      	mov	r0, r4
   16dd2:	b00d      	add	sp, #52	; 0x34
   16dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   16dd6:	2d06      	cmp	r5, #6
   16dd8:	f000 8420 	beq.w	1761c <hci_cmd_handle+0x8bc>
   16ddc:	2d1d      	cmp	r5, #29
   16dde:	d1ef      	bne.n	16dc0 <hci_cmd_handle+0x60>
	handle = sys_le16_to_cpu(cmd->handle);
   16de0:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   16de2:	8818      	ldrh	r0, [r3, #0]
   16de4:	f003 ff04 	bl	1abf0 <ll_version_ind_send>
   16de8:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   16dea:	8830      	ldrh	r0, [r6, #0]
   16dec:	f012 ff52 	bl	29c94 <bt_hci_cmd_status_create>
   16df0:	4604      	mov	r4, r0
}
   16df2:	e7e9      	b.n	16dc8 <hci_cmd_handle+0x68>
	switch (ocf) {
   16df4:	2d63      	cmp	r5, #99	; 0x63
   16df6:	f000 845a 	beq.w	176ae <hci_cmd_handle+0x94e>
   16dfa:	f200 80ed 	bhi.w	16fd8 <hci_cmd_handle+0x278>
   16dfe:	2d03      	cmp	r5, #3
   16e00:	f000 8433 	beq.w	1766a <hci_cmd_handle+0x90a>
   16e04:	2d2d      	cmp	r5, #45	; 0x2d
   16e06:	f040 80d3 	bne.w	16fb0 <hci_cmd_handle+0x250>
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
   16e0a:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   16e0c:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
   16e0e:	881e      	ldrh	r6, [r3, #0]
	type = cmd->type;
   16e10:	789f      	ldrb	r7, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   16e12:	f012 ff2d 	bl	29c70 <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
   16e16:	2104      	movs	r1, #4
   16e18:	9007      	str	r0, [sp, #28]
   16e1a:	3008      	adds	r0, #8
   16e1c:	f016 fad9 	bl	2d3d2 <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
   16e20:	b2b4      	uxth	r4, r6
   16e22:	4605      	mov	r5, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   16e24:	1cc3      	adds	r3, r0, #3
   16e26:	4621      	mov	r1, r4
   16e28:	463a      	mov	r2, r7
   16e2a:	2002      	movs	r0, #2
   16e2c:	f7ff fd18 	bl	16860 <ll_tx_pwr_lvl_get>
	rp->status = status;
   16e30:	7028      	strb	r0, [r5, #0]
	return evt;
   16e32:	9c07      	ldr	r4, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
   16e34:	f8a5 6001 	strh.w	r6, [r5, #1]
}
   16e38:	e7c6      	b.n	16dc8 <hci_cmd_handle+0x68>
	switch (ocf) {
   16e3a:	1e6a      	subs	r2, r5, #1
   16e3c:	2a08      	cmp	r2, #8
   16e3e:	d8bf      	bhi.n	16dc0 <hci_cmd_handle+0x60>
   16e40:	a301      	add	r3, pc, #4	; (adr r3, 16e48 <hci_cmd_handle+0xe8>)
   16e42:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   16e46:	bf00      	nop
   16e48:	00017121 	.word	0x00017121
   16e4c:	00017065 	.word	0x00017065
   16e50:	00017033 	.word	0x00017033
   16e54:	00016dc1 	.word	0x00016dc1
   16e58:	00016dc1 	.word	0x00016dc1
   16e5c:	00016dc1 	.word	0x00016dc1
   16e60:	00016dc1 	.word	0x00016dc1
   16e64:	00016dc1 	.word	0x00016dc1
   16e68:	00017011 	.word	0x00017011
	switch (ocf) {
   16e6c:	1e6a      	subs	r2, r5, #1
   16e6e:	2a4d      	cmp	r2, #77	; 0x4d
   16e70:	d8a6      	bhi.n	16dc0 <hci_cmd_handle+0x60>
   16e72:	a301      	add	r3, pc, #4	; (adr r3, 16e78 <hci_cmd_handle+0x118>)
   16e74:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   16e78:	0001717b 	.word	0x0001717b
   16e7c:	00017157 	.word	0x00017157
   16e80:	00017223 	.word	0x00017223
   16e84:	00016dc1 	.word	0x00016dc1
   16e88:	00017219 	.word	0x00017219
   16e8c:	000171fd 	.word	0x000171fd
   16e90:	000171e1 	.word	0x000171e1
   16e94:	000171d5 	.word	0x000171d5
   16e98:	000171c9 	.word	0x000171c9
   16e9c:	000171a9 	.word	0x000171a9
   16ea0:	00016dc1 	.word	0x00016dc1
   16ea4:	00016dc1 	.word	0x00016dc1
   16ea8:	00016dc1 	.word	0x00016dc1
   16eac:	00016dc1 	.word	0x00016dc1
   16eb0:	00017187 	.word	0x00017187
   16eb4:	00017617 	.word	0x00017617
   16eb8:	0001760f 	.word	0x0001760f
   16ebc:	00017607 	.word	0x00017607
   16ec0:	000175df 	.word	0x000175df
   16ec4:	00016dc1 	.word	0x00016dc1
   16ec8:	000175b3 	.word	0x000175b3
   16ecc:	0001759f 	.word	0x0001759f
   16ed0:	0001756b 	.word	0x0001756b
   16ed4:	00017549 	.word	0x00017549
   16ed8:	00016dc1 	.word	0x00016dc1
   16edc:	0001753f 	.word	0x0001753f
   16ee0:	0001752f 	.word	0x0001752f
   16ee4:	000174f9 	.word	0x000174f9
   16ee8:	00016dc1 	.word	0x00016dc1
   16eec:	00016dc1 	.word	0x00016dc1
   16ef0:	00016dc1 	.word	0x00016dc1
   16ef4:	000174db 	.word	0x000174db
   16ef8:	000174c3 	.word	0x000174c3
   16efc:	000174b3 	.word	0x000174b3
   16f00:	0001747d 	.word	0x0001747d
   16f04:	0001746b 	.word	0x0001746b
   16f08:	00016dc1 	.word	0x00016dc1
   16f0c:	00016dc1 	.word	0x00016dc1
   16f10:	0001745d 	.word	0x0001745d
   16f14:	00017455 	.word	0x00017455
   16f18:	0001744f 	.word	0x0001744f
   16f1c:	0001742d 	.word	0x0001742d
   16f20:	000173ff 	.word	0x000173ff
   16f24:	000173d1 	.word	0x000173d1
   16f28:	000173c7 	.word	0x000173c7
   16f2c:	000173b9 	.word	0x000173b9
   16f30:	0001736d 	.word	0x0001736d
   16f34:	00017313 	.word	0x00017313
   16f38:	000172f5 	.word	0x000172f5
   16f3c:	00017299 	.word	0x00017299
   16f40:	00016dc1 	.word	0x00016dc1
   16f44:	00016dc1 	.word	0x00016dc1
   16f48:	00016dc1 	.word	0x00016dc1
   16f4c:	00016dc1 	.word	0x00016dc1
   16f50:	00016dc1 	.word	0x00016dc1
   16f54:	00016dc1 	.word	0x00016dc1
   16f58:	00016dc1 	.word	0x00016dc1
   16f5c:	00016dc1 	.word	0x00016dc1
   16f60:	00016dc1 	.word	0x00016dc1
   16f64:	00016dc1 	.word	0x00016dc1
   16f68:	00016dc1 	.word	0x00016dc1
   16f6c:	00016dc1 	.word	0x00016dc1
   16f70:	00016dc1 	.word	0x00016dc1
   16f74:	00016dc1 	.word	0x00016dc1
   16f78:	00016dc1 	.word	0x00016dc1
   16f7c:	00016dc1 	.word	0x00016dc1
   16f80:	00016dc1 	.word	0x00016dc1
   16f84:	00016dc1 	.word	0x00016dc1
   16f88:	00016dc1 	.word	0x00016dc1
   16f8c:	00016dc1 	.word	0x00016dc1
   16f90:	00016dc1 	.word	0x00016dc1
   16f94:	00016dc1 	.word	0x00016dc1
   16f98:	00016dc1 	.word	0x00016dc1
   16f9c:	00016dc1 	.word	0x00016dc1
   16fa0:	00017275 	.word	0x00017275
   16fa4:	00016dc1 	.word	0x00016dc1
   16fa8:	00016dc1 	.word	0x00016dc1
   16fac:	0001726b 	.word	0x0001726b
	switch (ocf) {
   16fb0:	2d01      	cmp	r5, #1
   16fb2:	f47f af05 	bne.w	16dc0 <hci_cmd_handle+0x60>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   16fb6:	68a2      	ldr	r2, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
   16fb8:	4b29      	ldr	r3, [pc, #164]	; (17060 <hci_cmd_handle+0x300>)
   16fba:	6811      	ldr	r1, [r2, #0]
   16fbc:	6852      	ldr	r2, [r2, #4]
   16fbe:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   16fc0:	2101      	movs	r1, #1
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   16fc2:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   16fc4:	f012 fe54 	bl	29c70 <bt_hci_cmd_complete_create>
   16fc8:	2101      	movs	r1, #1
   16fca:	4604      	mov	r4, r0
   16fcc:	3008      	adds	r0, #8
   16fce:	f016 fa00 	bl	2d3d2 <net_buf_simple_add>
	ccst->status = status;
   16fd2:	2300      	movs	r3, #0
   16fd4:	7003      	strb	r3, [r0, #0]
}
   16fd6:	e6f7      	b.n	16dc8 <hci_cmd_handle+0x68>
	switch (ocf) {
   16fd8:	2d7b      	cmp	r5, #123	; 0x7b
   16fda:	f000 832b 	beq.w	17634 <hci_cmd_handle+0x8d4>
   16fde:	2d7c      	cmp	r5, #124	; 0x7c
   16fe0:	f47f aeee 	bne.w	16dc0 <hci_cmd_handle+0x60>
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
   16fe4:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   16fe6:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   16fe8:	8859      	ldrh	r1, [r3, #2]
   16fea:	b2a8      	uxth	r0, r5
   16fec:	f003 ff3a 	bl	1ae64 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   16ff0:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   16ff2:	2103      	movs	r1, #3
   16ff4:	8830      	ldrh	r0, [r6, #0]
   16ff6:	f012 fe3b 	bl	29c70 <bt_hci_cmd_complete_create>
   16ffa:	2103      	movs	r1, #3
   16ffc:	4603      	mov	r3, r0
   16ffe:	3008      	adds	r0, #8
   17000:	9307      	str	r3, [sp, #28]
   17002:	f016 f9e6 	bl	2d3d2 <net_buf_simple_add>
	rp->status = status;
   17006:	7004      	strb	r4, [r0, #0]
	return evt;
   17008:	9c07      	ldr	r4, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
   1700a:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
   1700e:	e6db      	b.n	16dc8 <hci_cmd_handle+0x68>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   17010:	2107      	movs	r1, #7
   17012:	f012 fe2d 	bl	29c70 <bt_hci_cmd_complete_create>
   17016:	2107      	movs	r1, #7
   17018:	4603      	mov	r3, r0
   1701a:	3008      	adds	r0, #8
   1701c:	9307      	str	r3, [sp, #28]
   1701e:	f016 f9d8 	bl	2d3d2 <net_buf_simple_add>
	rp->status = 0x00;
   17022:	4601      	mov	r1, r0
   17024:	2000      	movs	r0, #0
   17026:	f801 0b01 	strb.w	r0, [r1], #1
	(void)ll_addr_read(0, &rp->bdaddr.val[0]);
   1702a:	f7ff fc01 	bl	16830 <ll_addr_read>
	return evt;
   1702e:	9c07      	ldr	r4, [sp, #28]
   17030:	e6ca      	b.n	16dc8 <hci_cmd_handle+0x68>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   17032:	2109      	movs	r1, #9
   17034:	f012 fe1c 	bl	29c70 <bt_hci_cmd_complete_create>
   17038:	2109      	movs	r1, #9
   1703a:	4603      	mov	r3, r0
   1703c:	3008      	adds	r0, #8
   1703e:	9307      	str	r3, [sp, #28]
   17040:	f016 f9c7 	bl	2d3d2 <net_buf_simple_add>
	rp->status = 0x00;
   17044:	2100      	movs	r1, #0
   17046:	4605      	mov	r5, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   17048:	2208      	movs	r2, #8
	rp->status = 0x00;
   1704a:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1704e:	f012 f985 	bl	2935c <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   17052:	2360      	movs	r3, #96	; 0x60
	return evt;
   17054:	9c07      	ldr	r4, [sp, #28]
	rp->features[4] = (1 << 5) | (1 << 6);
   17056:	716b      	strb	r3, [r5, #5]
	if (err == -EINVAL) {
   17058:	e6b6      	b.n	16dc8 <hci_cmd_handle+0x68>
   1705a:	bf00      	nop
   1705c:	20002cd0 	.word	0x20002cd0
   17060:	20000158 	.word	0x20000158
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   17064:	2141      	movs	r1, #65	; 0x41
   17066:	f012 fe03 	bl	29c70 <bt_hci_cmd_complete_create>
   1706a:	2141      	movs	r1, #65	; 0x41
   1706c:	4603      	mov	r3, r0
   1706e:	3008      	adds	r0, #8
   17070:	9307      	str	r3, [sp, #28]
   17072:	f016 f9ae 	bl	2d3d2 <net_buf_simple_add>
	rp->status = 0x00;
   17076:	2100      	movs	r1, #0
   17078:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1707a:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   1707c:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   17080:	f012 f96c 	bl	2935c <memset>
	rp->commands[15] |= BIT(1);
   17084:	7c23      	ldrb	r3, [r4, #16]
	rp->commands[5] |= BIT(6) | BIT(7);
   17086:	79a0      	ldrb	r0, [r4, #6]
	rp->commands[10] |= BIT(2);
   17088:	7ae1      	ldrb	r1, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
   1708a:	7be2      	ldrb	r2, [r4, #15]
	rp->commands[15] |= BIT(1);
   1708c:	f043 0302 	orr.w	r3, r3, #2
   17090:	7423      	strb	r3, [r4, #16]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   17092:	7ea3      	ldrb	r3, [r4, #26]
	rp->commands[5] |= BIT(6) | BIT(7);
   17094:	f060 003f 	orn	r0, r0, #63	; 0x3f
	rp->commands[10] |= BIT(2);
   17098:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   1709c:	f063 0308 	orn	r3, r3, #8
	rp->commands[5] |= BIT(6) | BIT(7);
   170a0:	71a0      	strb	r0, [r4, #6]
	rp->commands[10] |= BIT(2);
   170a2:	72e1      	strb	r1, [r4, #11]
	rp->commands[26] |= BIT(6) | BIT(7);
   170a4:	7ee0      	ldrb	r0, [r4, #27]
	rp->commands[22] |= BIT(2);
   170a6:	7de1      	ldrb	r1, [r4, #23]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   170a8:	76a3      	strb	r3, [r4, #26]
	rp->commands[33] |= BIT(4) | BIT(5);
   170aa:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[14] |= BIT(3) | BIT(5);
   170ae:	f042 0228 	orr.w	r2, r2, #40	; 0x28
	rp->commands[22] |= BIT(2);
   170b2:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[26] |= BIT(0) | BIT(1);
   170b6:	f060 003c 	orn	r0, r0, #60	; 0x3c
	rp->commands[33] |= BIT(6) | BIT(7);
   170ba:	f063 030f 	orn	r3, r3, #15
	rp->commands[26] |= BIT(0) | BIT(1);
   170be:	76e0      	strb	r0, [r4, #27]
	rp->commands[14] |= BIT(3) | BIT(5);
   170c0:	73e2      	strb	r2, [r4, #15]
	rp->commands[28] |= BIT(3);
   170c2:	7f60      	ldrb	r0, [r4, #29]
	rp->commands[27] |= BIT(0) | BIT(1);
   170c4:	7f22      	ldrb	r2, [r4, #28]
	rp->commands[22] |= BIT(2);
   170c6:	75e1      	strb	r1, [r4, #23]
	rp->commands[33] |= BIT(6) | BIT(7);
   170c8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[0] |= BIT(5);
   170cc:	7861      	ldrb	r1, [r4, #1]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   170ce:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
	rp->commands[28] |= BIT(1) | BIT(2);
   170d2:	f040 000e 	orr.w	r0, r0, #14
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   170d6:	f062 0208 	orn	r2, r2, #8
	rp->commands[0] |= BIT(5);
   170da:	f041 0120 	orr.w	r1, r1, #32
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   170de:	f063 0306 	orn	r3, r3, #6
	rp->commands[0] |= BIT(5);
   170e2:	7061      	strb	r1, [r4, #1]
	rp->commands[28] |= BIT(1) | BIT(2);
   170e4:	7760      	strb	r0, [r4, #29]
	rp->commands[35] |= BIT(3);
   170e6:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
   170ea:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   170ee:	7722      	strb	r2, [r4, #28]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   170f0:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	rp->commands[39] |= BIT(2);
   170f4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   170f8:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   170fc:	f041 017f 	orr.w	r1, r1, #127	; 0x7f
	rp->commands[32] |= BIT(4) | BIT(5);
   17100:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	rp->commands[39] |= BIT(2);
   17104:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[38] |= BIT(7);
   17108:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[32] |= BIT(4) | BIT(5);
   1710c:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   17110:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   17114:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   17118:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	return evt;
   1711c:	9c07      	ldr	r4, [sp, #28]
   1711e:	e653      	b.n	16dc8 <hci_cmd_handle+0x68>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   17120:	2109      	movs	r1, #9
   17122:	f012 fda5 	bl	29c70 <bt_hci_cmd_complete_create>
   17126:	2109      	movs	r1, #9
   17128:	4603      	mov	r3, r0
   1712a:	3008      	adds	r0, #8
   1712c:	9307      	str	r3, [sp, #28]
   1712e:	f016 f950 	bl	2d3d2 <net_buf_simple_add>
	rp->status = 0x00;
   17132:	2300      	movs	r3, #0
	rp->hci_version = LL_VERSION_NUMBER;
   17134:	210c      	movs	r1, #12
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   17136:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	rp->status = 0x00;
   1713a:	7003      	strb	r3, [r0, #0]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   1713c:	f06f 040e 	mvn.w	r4, #14
	rp->hci_version = LL_VERSION_NUMBER;
   17140:	7041      	strb	r1, [r0, #1]
	rp->hci_revision = sys_cpu_to_le16(0);
   17142:	7083      	strb	r3, [r0, #2]
   17144:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   17146:	2305      	movs	r3, #5
   17148:	7144      	strb	r4, [r0, #5]
	rp->lmp_version = LL_VERSION_NUMBER;
   1714a:	7101      	strb	r1, [r0, #4]
	return evt;
   1714c:	9c07      	ldr	r4, [sp, #28]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   1714e:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   17150:	71c2      	strb	r2, [r0, #7]
   17152:	7202      	strb	r2, [r0, #8]
	if (err == -EINVAL) {
   17154:	e638      	b.n	16dc8 <hci_cmd_handle+0x68>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   17156:	2104      	movs	r1, #4
   17158:	f012 fd8a 	bl	29c70 <bt_hci_cmd_complete_create>
   1715c:	2104      	movs	r1, #4
   1715e:	4603      	mov	r3, r0
   17160:	3008      	adds	r0, #8
   17162:	9307      	str	r3, [sp, #28]
   17164:	f016 f935 	bl	2d3d2 <net_buf_simple_add>
	rp->status = 0x00;
   17168:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   1716a:	2103      	movs	r1, #3
	rp->status = 0x00;
   1716c:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   1716e:	221b      	movs	r2, #27
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   17170:	70c1      	strb	r1, [r0, #3]
	return evt;
   17172:	9c07      	ldr	r4, [sp, #28]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   17174:	7042      	strb	r2, [r0, #1]
   17176:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
   17178:	e626      	b.n	16dc8 <hci_cmd_handle+0x68>
   1717a:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
   1717c:	4bbe      	ldr	r3, [pc, #760]	; (17478 <hci_cmd_handle+0x718>)
   1717e:	6811      	ldr	r1, [r2, #0]
   17180:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   17182:	6019      	str	r1, [r3, #0]
   17184:	e71c      	b.n	16fc0 <hci_cmd_handle+0x260>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   17186:	2102      	movs	r1, #2
   17188:	f012 fd72 	bl	29c70 <bt_hci_cmd_complete_create>
   1718c:	2102      	movs	r1, #2
   1718e:	4603      	mov	r3, r0
   17190:	3008      	adds	r0, #8
   17192:	9307      	str	r3, [sp, #28]
   17194:	f016 f91d 	bl	2d3d2 <net_buf_simple_add>
	rp->status = 0x00;
   17198:	2300      	movs	r3, #0
   1719a:	7003      	strb	r3, [r0, #0]
   1719c:	4604      	mov	r4, r0
	rp->fal_size = ll_fal_size_get();
   1719e:	f007 fcc5 	bl	1eb2c <ll_fal_size_get>
   171a2:	7060      	strb	r0, [r4, #1]
	return evt;
   171a4:	9c07      	ldr	r4, [sp, #28]
   171a6:	e60f      	b.n	16dc8 <hci_cmd_handle+0x68>
	status = ll_adv_enable(cmd->enable);
   171a8:	68a3      	ldr	r3, [r4, #8]
   171aa:	7818      	ldrb	r0, [r3, #0]
   171ac:	f7f5 fc70 	bl	ca90 <ll_adv_enable>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   171b0:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   171b2:	2101      	movs	r1, #1
   171b4:	8830      	ldrh	r0, [r6, #0]
   171b6:	f012 fd5b 	bl	29c70 <bt_hci_cmd_complete_create>
   171ba:	2101      	movs	r1, #1
   171bc:	4604      	mov	r4, r0
   171be:	3008      	adds	r0, #8
   171c0:	f016 f907 	bl	2d3d2 <net_buf_simple_add>
	ccst->status = status;
   171c4:	7005      	strb	r5, [r0, #0]
	if (err == -EINVAL) {
   171c6:	e5ff      	b.n	16dc8 <hci_cmd_handle+0x68>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   171c8:	68a1      	ldr	r1, [r4, #8]
   171ca:	f811 0b01 	ldrb.w	r0, [r1], #1
   171ce:	f002 fd4b 	bl	19c68 <ll_adv_scan_rsp_set>
   171d2:	e7ed      	b.n	171b0 <hci_cmd_handle+0x450>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   171d4:	68a1      	ldr	r1, [r4, #8]
   171d6:	f811 0b01 	ldrb.w	r0, [r1], #1
   171da:	f002 fcfb 	bl	19bd4 <ll_adv_data_set>
   171de:	e7e7      	b.n	171b0 <hci_cmd_handle+0x450>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   171e0:	2102      	movs	r1, #2
   171e2:	f012 fd45 	bl	29c70 <bt_hci_cmd_complete_create>
   171e6:	2102      	movs	r1, #2
   171e8:	4603      	mov	r3, r0
   171ea:	3008      	adds	r0, #8
   171ec:	9307      	str	r3, [sp, #28]
   171ee:	f016 f8f0 	bl	2d3d2 <net_buf_simple_add>
	rp->status = 0x00;
   171f2:	2300      	movs	r3, #0
   171f4:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   171f6:	7043      	strb	r3, [r0, #1]
	return evt;
   171f8:	9c07      	ldr	r4, [sp, #28]
   171fa:	e5e5      	b.n	16dc8 <hci_cmd_handle+0x68>
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
   171fc:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   171fe:	7ba5      	ldrb	r5, [r4, #14]
   17200:	79a3      	ldrb	r3, [r4, #6]
   17202:	7962      	ldrb	r2, [r4, #5]
   17204:	7921      	ldrb	r1, [r4, #4]
   17206:	8820      	ldrh	r0, [r4, #0]
   17208:	9502      	str	r5, [sp, #8]
   1720a:	7b65      	ldrb	r5, [r4, #13]
   1720c:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   1720e:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   17210:	9400      	str	r4, [sp, #0]
   17212:	f002 fae3 	bl	197dc <ll_adv_params_set>
   17216:	e7cb      	b.n	171b0 <hci_cmd_handle+0x450>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   17218:	68a1      	ldr	r1, [r4, #8]
   1721a:	2001      	movs	r0, #1
   1721c:	f7ff fada 	bl	167d4 <ll_addr_set>
   17220:	e7c6      	b.n	171b0 <hci_cmd_handle+0x450>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   17222:	2109      	movs	r1, #9
   17224:	f012 fd24 	bl	29c70 <bt_hci_cmd_complete_create>
   17228:	2109      	movs	r1, #9
   1722a:	4603      	mov	r3, r0
   1722c:	3008      	adds	r0, #8
   1722e:	9307      	str	r3, [sp, #28]
   17230:	f016 f8cf 	bl	2d3d2 <net_buf_simple_add>
	rp->status = 0x00;
   17234:	2100      	movs	r1, #0
   17236:	4605      	mov	r5, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   17238:	2208      	movs	r2, #8
	rp->status = 0x00;
   1723a:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1723e:	f012 f88d 	bl	2935c <memset>
	sys_put_le64(ll_feat_get(), rp->features);
   17242:	f000 fe43 	bl	17ecc <ll_feat_get>
	sys_put_le16(val >> 16, &dst[2]);
   17246:	0c03      	lsrs	r3, r0, #16
	dst[1] = val >> 8;
   17248:	f3c0 2407 	ubfx	r4, r0, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1724c:	0c0a      	lsrs	r2, r1, #16
	dst[0] = val;
   1724e:	70eb      	strb	r3, [r5, #3]
	dst[1] = val >> 8;
   17250:	0a1b      	lsrs	r3, r3, #8
	dst[0] = val;
   17252:	7068      	strb	r0, [r5, #1]
	dst[1] = val >> 8;
   17254:	70ac      	strb	r4, [r5, #2]
   17256:	f3c1 2007 	ubfx	r0, r1, #8, #8
   1725a:	712b      	strb	r3, [r5, #4]
   1725c:	0a13      	lsrs	r3, r2, #8
	return evt;
   1725e:	9c07      	ldr	r4, [sp, #28]
	dst[0] = val;
   17260:	7169      	strb	r1, [r5, #5]
	dst[1] = val >> 8;
   17262:	71a8      	strb	r0, [r5, #6]
	dst[0] = val;
   17264:	71ea      	strb	r2, [r5, #7]
	dst[1] = val >> 8;
   17266:	722b      	strb	r3, [r5, #8]
	if (err == -EINVAL) {
   17268:	e5ae      	b.n	16dc8 <hci_cmd_handle+0x68>
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
   1726a:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   1726c:	79c1      	ldrb	r1, [r0, #7]
   1726e:	f007 ff6f 	bl	1f150 <ll_priv_mode_set>
   17272:	e79d      	b.n	171b0 <hci_cmd_handle+0x450>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   17274:	2103      	movs	r1, #3
   17276:	f012 fcfb 	bl	29c70 <bt_hci_cmd_complete_create>
   1727a:	2103      	movs	r1, #3
   1727c:	4603      	mov	r3, r0
   1727e:	3008      	adds	r0, #8
   17280:	9307      	str	r3, [sp, #28]
   17282:	f016 f8a6 	bl	2d3d2 <net_buf_simple_add>
	rp->status = 0x00;
   17286:	4601      	mov	r1, r0
   17288:	2300      	movs	r3, #0
   1728a:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   1728e:	3001      	adds	r0, #1
   17290:	f7ff faf6 	bl	16880 <ll_tx_pwr_get>
	return evt;
   17294:	9c07      	ldr	r4, [sp, #28]
   17296:	e597      	b.n	16dc8 <hci_cmd_handle+0x68>
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
   17298:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   1729a:	7895      	ldrb	r5, [r2, #2]
	return ((uint16_t)src[1] << 8) | src[0];
   1729c:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
   1729e:	8817      	ldrh	r7, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   172a0:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   172a4:	07eb      	lsls	r3, r5, #31
		cmd->tx_phys |= mask_phys;
   172a6:	bf48      	it	mi
   172a8:	f041 0103 	orrmi.w	r1, r1, #3
   172ac:	7913      	ldrb	r3, [r2, #4]
   172ae:	bf48      	it	mi
   172b0:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   172b2:	07ad      	lsls	r5, r5, #30
		cmd->rx_phys |= mask_phys;
   172b4:	bf44      	itt	mi
   172b6:	f043 0303 	orrmi.w	r3, r3, #3
   172ba:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   172bc:	ea43 0201 	orr.w	r2, r3, r1
   172c0:	f032 0203 	bics.w	r2, r2, #3
   172c4:	f040 81fc 	bne.w	176c0 <hci_cmd_handle+0x960>
	if (!(cmd->tx_phys & 0x07) ||
   172c8:	074d      	lsls	r5, r1, #29
   172ca:	f000 81f3 	beq.w	176b4 <hci_cmd_handle+0x954>
   172ce:	075a      	lsls	r2, r3, #29
   172d0:	f000 81f0 	beq.w	176b4 <hci_cmd_handle+0x954>
	if (phy_opts & 0x03) {
   172d4:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
   172d8:	bf1c      	itt	ne
   172da:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
   172de:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   172e2:	4638      	mov	r0, r7
   172e4:	f003 fd48 	bl	1ad78 <ll_phy_req_send>
   172e8:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   172ea:	8830      	ldrh	r0, [r6, #0]
   172ec:	f012 fcd2 	bl	29c94 <bt_hci_cmd_status_create>
   172f0:	4604      	mov	r4, r0
	if (err == -EINVAL) {
   172f2:	e569      	b.n	16dc8 <hci_cmd_handle+0x68>
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
   172f4:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   172f6:	781a      	ldrb	r2, [r3, #0]
   172f8:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   172fa:	bf4a      	itet	mi
   172fc:	2007      	movmi	r0, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   172fe:	7858      	ldrbpl	r0, [r3, #1]
		cmd->tx_phys = 0x07;
   17300:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   17302:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   17304:	bf4a      	itet	mi
   17306:	2107      	movmi	r1, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   17308:	7899      	ldrbpl	r1, [r3, #2]
		cmd->rx_phys = 0x07;
   1730a:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   1730c:	f003 fd2a 	bl	1ad64 <ll_phy_default_set>
   17310:	e74e      	b.n	171b0 <hci_cmd_handle+0x450>
	handle = sys_le16_to_cpu(cmd->handle);
   17312:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   17314:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
   17316:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   17318:	f012 fcaa 	bl	29c70 <bt_hci_cmd_complete_create>
   1731c:	2105      	movs	r1, #5
   1731e:	4603      	mov	r3, r0
   17320:	3008      	adds	r0, #8
   17322:	9307      	str	r3, [sp, #28]
   17324:	f016 f855 	bl	2d3d2 <net_buf_simple_add>
   17328:	4605      	mov	r5, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   1732a:	1d2a      	adds	r2, r5, #4
	handle = sys_le16_to_cpu(cmd->handle);
   1732c:	b2b0      	uxth	r0, r6
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   1732e:	1ce9      	adds	r1, r5, #3
   17330:	f003 fcfa 	bl	1ad28 <ll_phy_get>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
   17334:	78eb      	ldrb	r3, [r5, #3]
	rp->status = status;
   17336:	7028      	strb	r0, [r5, #0]
   17338:	2b00      	cmp	r3, #0
   1733a:	fa93 f2a3 	rbit	r2, r3
   1733e:	792b      	ldrb	r3, [r5, #4]
   17340:	fab2 f282 	clz	r2, r2
   17344:	bf08      	it	eq
   17346:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   1734a:	2b00      	cmp	r3, #0
   1734c:	fa93 f3a3 	rbit	r3, r3
   17350:	fab3 f383 	clz	r3, r3
   17354:	f102 0201 	add.w	r2, r2, #1
   17358:	bf08      	it	eq
   1735a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   1735e:	70ea      	strb	r2, [r5, #3]
   17360:	3301      	adds	r3, #1
	return evt;
   17362:	9c07      	ldr	r4, [sp, #28]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   17364:	712b      	strb	r3, [r5, #4]
	rp->handle = sys_cpu_to_le16(handle);
   17366:	f8a5 6001 	strh.w	r6, [r5, #1]
	if (err == -EINVAL) {
   1736a:	e52d      	b.n	16dc8 <hci_cmd_handle+0x68>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1736c:	2109      	movs	r1, #9
   1736e:	f012 fc7f 	bl	29c70 <bt_hci_cmd_complete_create>
   17372:	2109      	movs	r1, #9
   17374:	4603      	mov	r3, r0
   17376:	3008      	adds	r0, #8
   17378:	9307      	str	r3, [sp, #28]
   1737a:	f016 f82a 	bl	2d3d2 <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   1737e:	ab08      	add	r3, sp, #32
   17380:	4605      	mov	r5, r0
   17382:	f10d 021a 	add.w	r2, sp, #26
   17386:	a906      	add	r1, sp, #24
   17388:	f10d 0016 	add.w	r0, sp, #22
   1738c:	f003 fcc0 	bl	1ad10 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   17390:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   17394:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   17398:	f8a5 2001 	strh.w	r2, [r5, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   1739c:	f8a5 3003 	strh.w	r3, [r5, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   173a0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   173a4:	f8a5 3005 	strh.w	r3, [r5, #5]
	rp->status = 0x00;
   173a8:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   173aa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
   173ae:	702a      	strb	r2, [r5, #0]
	return evt;
   173b0:	9c07      	ldr	r4, [sp, #28]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   173b2:	f8a5 3007 	strh.w	r3, [r5, #7]
	if (err == -EINVAL) {
   173b6:	e507      	b.n	16dc8 <hci_cmd_handle+0x68>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   173b8:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
   173ba:	8818      	ldrh	r0, [r3, #0]
   173bc:	f007 febe 	bl	1f13c <ll_rl_timeout_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   173c0:	8830      	ldrh	r0, [r6, #0]
   173c2:	2101      	movs	r1, #1
   173c4:	e5fe      	b.n	16fc4 <hci_cmd_handle+0x264>
	status = ll_rl_enable(cmd->enable);
   173c6:	68a3      	ldr	r3, [r4, #8]
   173c8:	7818      	ldrb	r0, [r3, #0]
   173ca:	f007 fea1 	bl	1f110 <ll_rl_enable>
   173ce:	e6ef      	b.n	171b0 <hci_cmd_handle+0x450>
	memcpy(dst, src, sizeof(*dst));
   173d0:	2207      	movs	r2, #7
   173d2:	68a1      	ldr	r1, [r4, #8]
   173d4:	a808      	add	r0, sp, #32
   173d6:	f011 ffb6 	bl	29346 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   173da:	2107      	movs	r1, #7
   173dc:	8830      	ldrh	r0, [r6, #0]
   173de:	f012 fc47 	bl	29c70 <bt_hci_cmd_complete_create>
   173e2:	2107      	movs	r1, #7
   173e4:	4603      	mov	r3, r0
   173e6:	3008      	adds	r0, #8
   173e8:	9307      	str	r3, [sp, #28]
   173ea:	f015 fff2 	bl	2d3d2 <net_buf_simple_add>
   173ee:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   173f0:	1c41      	adds	r1, r0, #1
   173f2:	a808      	add	r0, sp, #32
   173f4:	f007 fe5a 	bl	1f0ac <ll_rl_lrpa_get>
   173f8:	7020      	strb	r0, [r4, #0]
	return evt;
   173fa:	9c07      	ldr	r4, [sp, #28]
   173fc:	e4e4      	b.n	16dc8 <hci_cmd_handle+0x68>
   173fe:	2207      	movs	r2, #7
   17400:	68a1      	ldr	r1, [r4, #8]
   17402:	a808      	add	r0, sp, #32
   17404:	f011 ff9f 	bl	29346 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   17408:	2107      	movs	r1, #7
   1740a:	8830      	ldrh	r0, [r6, #0]
   1740c:	f012 fc30 	bl	29c70 <bt_hci_cmd_complete_create>
   17410:	2107      	movs	r1, #7
   17412:	4603      	mov	r3, r0
   17414:	3008      	adds	r0, #8
   17416:	9307      	str	r3, [sp, #28]
   17418:	f015 ffdb 	bl	2d3d2 <net_buf_simple_add>
   1741c:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   1741e:	1c41      	adds	r1, r0, #1
   17420:	a808      	add	r0, sp, #32
   17422:	f007 fe09 	bl	1f038 <ll_rl_crpa_get>
   17426:	7020      	strb	r0, [r4, #0]
	return evt;
   17428:	9c07      	ldr	r4, [sp, #28]
   1742a:	e4cd      	b.n	16dc8 <hci_cmd_handle+0x68>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1742c:	2102      	movs	r1, #2
   1742e:	f012 fc1f 	bl	29c70 <bt_hci_cmd_complete_create>
   17432:	2102      	movs	r1, #2
   17434:	4603      	mov	r3, r0
   17436:	3008      	adds	r0, #8
   17438:	9307      	str	r3, [sp, #28]
   1743a:	f015 ffca 	bl	2d3d2 <net_buf_simple_add>
   1743e:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
   17440:	f007 fcc0 	bl	1edc4 <ll_rl_size_get>
	rp->status = 0x00;
   17444:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   17446:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
   17448:	7023      	strb	r3, [r4, #0]
	return evt;
   1744a:	9c07      	ldr	r4, [sp, #28]
   1744c:	e4bc      	b.n	16dc8 <hci_cmd_handle+0x68>
	status = ll_rl_clear();
   1744e:	f007 fcbb 	bl	1edc8 <ll_rl_clear>
   17452:	e6ad      	b.n	171b0 <hci_cmd_handle+0x450>
	status = ll_rl_remove(&cmd->peer_id_addr);
   17454:	68a0      	ldr	r0, [r4, #8]
   17456:	f007 fcf5 	bl	1ee44 <ll_rl_remove>
   1745a:	e6a9      	b.n	171b0 <hci_cmd_handle+0x450>
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
   1745c:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   1745e:	f100 0217 	add.w	r2, r0, #23
   17462:	1dc1      	adds	r1, r0, #7
   17464:	f008 f906 	bl	1f674 <ll_rl_add>
   17468:	e6a2      	b.n	171b0 <hci_cmd_handle+0x450>
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
   1746a:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   1746c:	8859      	ldrh	r1, [r3, #2]
   1746e:	8818      	ldrh	r0, [r3, #0]
   17470:	f003 fc44 	bl	1acfc <ll_length_default_set>
   17474:	e69c      	b.n	171b0 <hci_cmd_handle+0x450>
   17476:	bf00      	nop
   17478:	20000160 	.word	0x20000160
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1747c:	2105      	movs	r1, #5
   1747e:	f012 fbf7 	bl	29c70 <bt_hci_cmd_complete_create>
   17482:	2105      	movs	r1, #5
   17484:	4603      	mov	r3, r0
   17486:	3008      	adds	r0, #8
   17488:	9307      	str	r3, [sp, #28]
   1748a:	f015 ffa2 	bl	2d3d2 <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   1748e:	a908      	add	r1, sp, #32
   17490:	4605      	mov	r5, r0
   17492:	f10d 001a 	add.w	r0, sp, #26
   17496:	f003 fc25 	bl	1ace4 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   1749a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1749e:	f8a5 3001 	strh.w	r3, [r5, #1]
	rp->status = 0x00;
   174a2:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   174a4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
   174a8:	702a      	strb	r2, [r5, #0]
	return evt;
   174aa:	9c07      	ldr	r4, [sp, #28]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   174ac:	f8a5 3003 	strh.w	r3, [r5, #3]
	if (err == -EINVAL) {
   174b0:	e48a      	b.n	16dc8 <hci_cmd_handle+0x68>
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
   174b2:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   174b4:	881d      	ldrh	r5, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   174b6:	889a      	ldrh	r2, [r3, #4]
   174b8:	8859      	ldrh	r1, [r3, #2]
   174ba:	b2a8      	uxth	r0, r5
   174bc:	f003 fbbe 	bl	1ac3c <ll_length_req_send>
   174c0:	e596      	b.n	16ff0 <hci_cmd_handle+0x290>
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
   174c2:	68a2      	ldr	r2, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   174c4:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   174c6:	7892      	ldrb	r2, [r2, #2]
   174c8:	2300      	movs	r3, #0
   174ca:	e9cd 3301 	strd	r3, r3, [sp, #4]
   174ce:	9300      	str	r3, [sp, #0]
   174d0:	2102      	movs	r1, #2
   174d2:	b2a8      	uxth	r0, r5
   174d4:	f003 fa68 	bl	1a9a8 <ll_conn_update>
   174d8:	e58a      	b.n	16ff0 <hci_cmd_handle+0x290>
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
   174da:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   174dc:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   174de:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   174e0:	8853      	ldrh	r3, [r2, #2]
   174e2:	9102      	str	r1, [sp, #8]
   174e4:	88d1      	ldrh	r1, [r2, #6]
   174e6:	9101      	str	r1, [sp, #4]
   174e8:	8891      	ldrh	r1, [r2, #4]
   174ea:	9100      	str	r1, [sp, #0]
   174ec:	2200      	movs	r2, #0
   174ee:	2102      	movs	r1, #2
   174f0:	b2a8      	uxth	r0, r5
   174f2:	f003 fa59 	bl	1a9a8 <ll_conn_update>
   174f6:	e57b      	b.n	16ff0 <hci_cmd_handle+0x290>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   174f8:	2109      	movs	r1, #9
   174fa:	f012 fbb9 	bl	29c70 <bt_hci_cmd_complete_create>
   174fe:	2109      	movs	r1, #9
   17500:	4603      	mov	r3, r0
   17502:	3008      	adds	r0, #8
   17504:	9307      	str	r3, [sp, #28]
   17506:	f015 ff64 	bl	2d3d2 <net_buf_simple_add>
	dst[0] = val;
   1750a:	248f      	movs	r4, #143	; 0x8f
	rp->status = 0x00;
   1750c:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   1750e:	21cc      	movs	r1, #204	; 0xcc
	dst[0] = val;
   17510:	2230      	movs	r2, #48	; 0x30
   17512:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
   17514:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
   17516:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
   17518:	24ec      	movs	r4, #236	; 0xec
   1751a:	7003      	strb	r3, [r0, #0]
	dst[0] = val;
   1751c:	21c0      	movs	r1, #192	; 0xc0
	dst[1] = val >> 8;
   1751e:	2201      	movs	r2, #1
   17520:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
   17522:	7141      	strb	r1, [r0, #5]
	return evt;
   17524:	9c07      	ldr	r4, [sp, #28]
	dst[1] = val >> 8;
   17526:	7182      	strb	r2, [r0, #6]
	dst[0] = val;
   17528:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
   1752a:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   1752c:	e44c      	b.n	16dc8 <hci_cmd_handle+0x68>
	handle = sys_le16_to_cpu(cmd->handle);
   1752e:	68a3      	ldr	r3, [r4, #8]
   17530:	881d      	ldrh	r5, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   17532:	2200      	movs	r2, #0
   17534:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   17536:	b2a8      	uxth	r0, r5
   17538:	f007 f980 	bl	1e83c <ll_start_enc_req_send>
   1753c:	e558      	b.n	16ff0 <hci_cmd_handle+0x290>
	handle = sys_le16_to_cpu(cmd->handle);
   1753e:	68a2      	ldr	r2, [r4, #8]
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   17540:	2100      	movs	r1, #0
	handle = sys_le16_to_cpu(cmd->handle);
   17542:	f832 5b02 	ldrh.w	r5, [r2], #2
   17546:	e7f6      	b.n	17536 <hci_cmd_handle+0x7d6>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   17548:	2109      	movs	r1, #9
   1754a:	f012 fb91 	bl	29c70 <bt_hci_cmd_complete_create>
   1754e:	2109      	movs	r1, #9
   17550:	4603      	mov	r3, r0
   17552:	3008      	adds	r0, #8
   17554:	9307      	str	r3, [sp, #28]
   17556:	f015 ff3c 	bl	2d3d2 <net_buf_simple_add>
	rp->status = 0x00;
   1755a:	2300      	movs	r3, #0
   1755c:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   17560:	2108      	movs	r1, #8
   17562:	f008 fca9 	bl	1feb8 <lll_csrand_get>
	return evt;
   17566:	9c07      	ldr	r4, [sp, #28]
   17568:	e42e      	b.n	16dc8 <hci_cmd_handle+0x68>
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
   1756a:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   1756c:	aa08      	add	r2, sp, #32
   1756e:	2300      	movs	r3, #0
   17570:	f100 0110 	add.w	r1, r0, #16
   17574:	f00a fa8e 	bl	21a94 <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   17578:	2111      	movs	r1, #17
   1757a:	8830      	ldrh	r0, [r6, #0]
   1757c:	f012 fb78 	bl	29c70 <bt_hci_cmd_complete_create>
   17580:	2111      	movs	r1, #17
   17582:	4603      	mov	r3, r0
   17584:	3008      	adds	r0, #8
   17586:	9307      	str	r3, [sp, #28]
   17588:	f015 ff23 	bl	2d3d2 <net_buf_simple_add>
	rp->status = 0x00;
   1758c:	2300      	movs	r3, #0
   1758e:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   17592:	2210      	movs	r2, #16
   17594:	a908      	add	r1, sp, #32
   17596:	f011 fed6 	bl	29346 <memcpy>
	return evt;
   1759a:	9c07      	ldr	r4, [sp, #28]
   1759c:	e414      	b.n	16dc8 <hci_cmd_handle+0x68>
	handle = sys_le16_to_cpu(cmd->handle);
   1759e:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   175a0:	8818      	ldrh	r0, [r3, #0]
   175a2:	f003 faff 	bl	1aba4 <ll_feature_req_send>
   175a6:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   175a8:	8830      	ldrh	r0, [r6, #0]
   175aa:	f012 fb73 	bl	29c94 <bt_hci_cmd_status_create>
   175ae:	4604      	mov	r4, r0
	if (err == -EINVAL) {
   175b0:	e40a      	b.n	16dc8 <hci_cmd_handle+0x68>
	handle = sys_le16_to_cpu(cmd->handle);
   175b2:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   175b4:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
   175b6:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   175b8:	f012 fb5a 	bl	29c70 <bt_hci_cmd_complete_create>
   175bc:	2108      	movs	r1, #8
   175be:	4603      	mov	r3, r0
   175c0:	4408      	add	r0, r1
   175c2:	9307      	str	r3, [sp, #28]
   175c4:	f015 ff05 	bl	2d3d2 <net_buf_simple_add>
   175c8:	4605      	mov	r5, r0
	status = ll_chm_get(handle, rp->ch_map);
   175ca:	1ce9      	adds	r1, r5, #3
	handle = sys_le16_to_cpu(cmd->handle);
   175cc:	b2b0      	uxth	r0, r6
	status = ll_chm_get(handle, rp->ch_map);
   175ce:	f003 fa7f 	bl	1aad0 <ll_chm_get>
	rp->status = status;
   175d2:	7028      	strb	r0, [r5, #0]
	return evt;
   175d4:	9c07      	ldr	r4, [sp, #28]
	rp->handle = sys_le16_to_cpu(handle);
   175d6:	f8a5 6001 	strh.w	r6, [r5, #1]
	if (err == -EINVAL) {
   175da:	f7ff bbf5 	b.w	16dc8 <hci_cmd_handle+0x68>
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
   175de:	68a1      	ldr	r1, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   175e0:	890a      	ldrh	r2, [r1, #8]
   175e2:	884b      	ldrh	r3, [r1, #2]
   175e4:	8808      	ldrh	r0, [r1, #0]
   175e6:	9202      	str	r2, [sp, #8]
   175e8:	88ca      	ldrh	r2, [r1, #6]
   175ea:	9201      	str	r2, [sp, #4]
   175ec:	8889      	ldrh	r1, [r1, #4]
   175ee:	9100      	str	r1, [sp, #0]
   175f0:	2200      	movs	r2, #0
   175f2:	4611      	mov	r1, r2
   175f4:	f003 f9d8 	bl	1a9a8 <ll_conn_update>
   175f8:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   175fa:	8830      	ldrh	r0, [r6, #0]
   175fc:	f012 fb4a 	bl	29c94 <bt_hci_cmd_status_create>
   17600:	4604      	mov	r4, r0
	if (err == -EINVAL) {
   17602:	f7ff bbe1 	b.w	16dc8 <hci_cmd_handle+0x68>
	status = ll_fal_remove(&cmd->addr);
   17606:	68a0      	ldr	r0, [r4, #8]
   17608:	f007 fb50 	bl	1ecac <ll_fal_remove>
   1760c:	e5d0      	b.n	171b0 <hci_cmd_handle+0x450>
	status = ll_fal_add(&cmd->addr);
   1760e:	68a0      	ldr	r0, [r4, #8]
   17610:	f007 fab4 	bl	1eb7c <ll_fal_add>
   17614:	e5cc      	b.n	171b0 <hci_cmd_handle+0x450>
	status = ll_fal_clear();
   17616:	f007 fa8b 	bl	1eb30 <ll_fal_clear>
   1761a:	e5c9      	b.n	171b0 <hci_cmd_handle+0x450>
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
   1761c:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   1761e:	7899      	ldrb	r1, [r3, #2]
   17620:	8818      	ldrh	r0, [r3, #0]
   17622:	f003 fa75 	bl	1ab10 <ll_terminate_ind_send>
   17626:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   17628:	8830      	ldrh	r0, [r6, #0]
   1762a:	f012 fb33 	bl	29c94 <bt_hci_cmd_status_create>
   1762e:	4604      	mov	r4, r0
	if (err == -EINVAL) {
   17630:	f7ff bbca 	b.w	16dc8 <hci_cmd_handle+0x68>
	handle = sys_le16_to_cpu(cmd->handle);
   17634:	68a3      	ldr	r3, [r4, #8]
   17636:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   17638:	a908      	add	r1, sp, #32
   1763a:	b2a8      	uxth	r0, r5
   1763c:	f003 fbee 	bl	1ae1c <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   17640:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   17642:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   17644:	8830      	ldrh	r0, [r6, #0]
   17646:	f012 fb13 	bl	29c70 <bt_hci_cmd_complete_create>
   1764a:	2105      	movs	r1, #5
   1764c:	4603      	mov	r3, r0
   1764e:	3008      	adds	r0, #8
   17650:	9307      	str	r3, [sp, #28]
   17652:	f015 febe 	bl	2d3d2 <net_buf_simple_add>
	rp->status = status;
   17656:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   17658:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   1765c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	return evt;
   17660:	9c07      	ldr	r4, [sp, #28]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   17662:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   17666:	f7ff bbaf 	b.w	16dc8 <hci_cmd_handle+0x68>
	event_mask = DEFAULT_EVENT_MASK;
   1766a:	4b18      	ldr	r3, [pc, #96]	; (176cc <hci_cmd_handle+0x96c>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   1766c:	4a18      	ldr	r2, [pc, #96]	; (176d0 <hci_cmd_handle+0x970>)
	event_mask = DEFAULT_EVENT_MASK;
   1766e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17672:	f641 71ff 	movw	r1, #8191	; 0x1fff
   17676:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   1767a:	4b16      	ldr	r3, [pc, #88]	; (176d4 <hci_cmd_handle+0x974>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   1767c:	2000      	movs	r0, #0
   1767e:	2100      	movs	r1, #0
   17680:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   17684:	201f      	movs	r0, #31
   17686:	2100      	movs	r1, #0
   17688:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   1768c:	f001 fcf0 	bl	19070 <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   17690:	2101      	movs	r1, #1
   17692:	8830      	ldrh	r0, [r6, #0]
   17694:	f012 faec 	bl	29c70 <bt_hci_cmd_complete_create>
   17698:	2101      	movs	r1, #1
   1769a:	4604      	mov	r4, r0
   1769c:	3008      	adds	r0, #8
   1769e:	f015 fe98 	bl	2d3d2 <net_buf_simple_add>
	conn_count = 0U;
   176a2:	4a0d      	ldr	r2, [pc, #52]	; (176d8 <hci_cmd_handle+0x978>)
	ccst->status = status;
   176a4:	2300      	movs	r3, #0
   176a6:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
   176a8:	6013      	str	r3, [r2, #0]
}
   176aa:	f7ff bb8d 	b.w	16dc8 <hci_cmd_handle+0x68>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   176ae:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   176b0:	4b07      	ldr	r3, [pc, #28]	; (176d0 <hci_cmd_handle+0x970>)
   176b2:	e564      	b.n	1717e <hci_cmd_handle+0x41e>
	return bt_hci_cmd_status_create(_opcode, status);
   176b4:	2112      	movs	r1, #18
   176b6:	f012 faed 	bl	29c94 <bt_hci_cmd_status_create>
   176ba:	4604      	mov	r4, r0
	if (err == -EINVAL) {
   176bc:	f7ff bb84 	b.w	16dc8 <hci_cmd_handle+0x68>
	return bt_hci_cmd_status_create(_opcode, status);
   176c0:	2111      	movs	r1, #17
   176c2:	f012 fae7 	bl	29c94 <bt_hci_cmd_status_create>
   176c6:	4604      	mov	r4, r0
	if (err == -EINVAL) {
   176c8:	f7ff bb7e 	b.w	16dc8 <hci_cmd_handle+0x68>
   176cc:	20000158 	.word	0x20000158
   176d0:	200011c0 	.word	0x200011c0
   176d4:	20000160 	.word	0x20000160
   176d8:	20001914 	.word	0x20001914

000176dc <hci_acl_handle>:
{
   176dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*acl)) {
   176e0:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   176e2:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
   176e4:	2b03      	cmp	r3, #3
	*evt = NULL;
   176e6:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   176e8:	d918      	bls.n	1771c <hci_acl_handle+0x40>
	return net_buf_simple_pull_mem(&buf->b, len);
   176ea:	4605      	mov	r5, r0
   176ec:	4688      	mov	r8, r1
   176ee:	3008      	adds	r0, #8
   176f0:	2104      	movs	r1, #4
   176f2:	f015 fe95 	bl	2d420 <net_buf_simple_pull_mem>
	if (buf->len < len) {
   176f6:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   176f8:	8846      	ldrh	r6, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   176fa:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
   176fe:	42b3      	cmp	r3, r6
   17700:	d30c      	bcc.n	1771c <hci_acl_handle+0x40>
	if (len > LL_LENGTH_OCTETS_TX_MAX) {
   17702:	2e1b      	cmp	r6, #27
   17704:	d80a      	bhi.n	1771c <hci_acl_handle+0x40>
	node_tx = ll_tx_mem_acquire();
   17706:	f003 f8f7 	bl	1a8f8 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   1770a:	ea4f 3719 	mov.w	r7, r9, lsr #12
	if (!node_tx) {
   1770e:	4604      	mov	r4, r0
   17710:	b318      	cbz	r0, 1775a <hci_acl_handle+0x7e>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   17712:	08bb      	lsrs	r3, r7, #2
   17714:	d102      	bne.n	1771c <hci_acl_handle+0x40>
	switch (bt_acl_flags_pb(flags)) {
   17716:	b1d7      	cbz	r7, 1774e <hci_acl_handle+0x72>
   17718:	2f01      	cmp	r7, #1
   1771a:	d003      	beq.n	17724 <hci_acl_handle+0x48>
		return -EINVAL;
   1771c:	f06f 0015 	mvn.w	r0, #21
}
   17720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   17724:	7903      	ldrb	r3, [r0, #4]
   17726:	f367 0301 	bfi	r3, r7, #0, #2
   1772a:	7103      	strb	r3, [r0, #4]
	pdu_data->len = len;
   1772c:	7166      	strb	r6, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   1772e:	68a9      	ldr	r1, [r5, #8]
   17730:	4632      	mov	r2, r6
   17732:	1de0      	adds	r0, r4, #7
   17734:	f011 fe07 	bl	29346 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   17738:	4621      	mov	r1, r4
   1773a:	f3c9 000b 	ubfx	r0, r9, #0, #12
   1773e:	f003 f8e7 	bl	1a910 <ll_tx_mem_enqueue>
   17742:	2800      	cmp	r0, #0
   17744:	d0ec      	beq.n	17720 <hci_acl_handle+0x44>
		ll_tx_mem_release(node_tx);
   17746:	4620      	mov	r0, r4
   17748:	f003 f8dc 	bl	1a904 <ll_tx_mem_release>
   1774c:	e7e6      	b.n	1771c <hci_acl_handle+0x40>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   1774e:	7903      	ldrb	r3, [r0, #4]
   17750:	2202      	movs	r2, #2
   17752:	f362 0301 	bfi	r3, r2, #0, #2
   17756:	7103      	strb	r3, [r0, #4]
		break;
   17758:	e7e8      	b.n	1772c <hci_acl_handle+0x50>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   1775a:	4b11      	ldr	r3, [pc, #68]	; (177a0 <hci_acl_handle+0xc4>)
   1775c:	681b      	ldr	r3, [r3, #0]
   1775e:	019b      	lsls	r3, r3, #6
   17760:	d402      	bmi.n	17768 <hci_acl_handle+0x8c>
		return -ENOBUFS;
   17762:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17766:	e7db      	b.n	17720 <hci_acl_handle+0x44>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   17768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1776c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17770:	2001      	movs	r0, #1
   17772:	f7f8 fced 	bl	10150 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   17776:	2102      	movs	r1, #2
   17778:	f8c8 0000 	str.w	r0, [r8]
   1777c:	3008      	adds	r0, #8
   1777e:	f015 fe28 	bl	2d3d2 <net_buf_simple_add>
	hdr->len = len;
   17782:	2401      	movs	r4, #1
	hdr->evt = evt;
   17784:	221a      	movs	r2, #26
   17786:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   17788:	7044      	strb	r4, [r0, #1]
   1778a:	f8d8 0000 	ldr.w	r0, [r8]
   1778e:	4621      	mov	r1, r4
   17790:	3008      	adds	r0, #8
   17792:	f015 fe1e 	bl	2d3d2 <net_buf_simple_add>
   17796:	4603      	mov	r3, r0
		return -ENOBUFS;
   17798:	f06f 0068 	mvn.w	r0, #104	; 0x68
	ep->link_type = link_type;
   1779c:	701c      	strb	r4, [r3, #0]
   1779e:	e7bf      	b.n	17720 <hci_acl_handle+0x44>
   177a0:	20000158 	.word	0x20000158

000177a4 <hci_disconn_complete_encode>:
{
   177a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   177a6:	4b0e      	ldr	r3, [pc, #56]	; (177e0 <hci_disconn_complete_encode+0x3c>)
   177a8:	681b      	ldr	r3, [r3, #0]
   177aa:	06db      	lsls	r3, r3, #27
   177ac:	d400      	bmi.n	177b0 <hci_disconn_complete_encode+0xc>
}
   177ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   177b0:	f102 0408 	add.w	r4, r2, #8
   177b4:	4605      	mov	r5, r0
   177b6:	460e      	mov	r6, r1
   177b8:	4620      	mov	r0, r4
   177ba:	2102      	movs	r1, #2
   177bc:	f015 fe09 	bl	2d3d2 <net_buf_simple_add>
   177c0:	4603      	mov	r3, r0
	hdr->len = len;
   177c2:	2104      	movs	r1, #4
	hdr->evt = evt;
   177c4:	2205      	movs	r2, #5
	hdr->len = len;
   177c6:	7059      	strb	r1, [r3, #1]
	hdr->evt = evt;
   177c8:	701a      	strb	r2, [r3, #0]
   177ca:	4620      	mov	r0, r4
   177cc:	f015 fe01 	bl	2d3d2 <net_buf_simple_add>
   177d0:	2700      	movs	r7, #0
	ep->status = 0x00;
   177d2:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   177d4:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   177d8:	782b      	ldrb	r3, [r5, #0]
   177da:	70c3      	strb	r3, [r0, #3]
}
   177dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   177de:	bf00      	nop
   177e0:	20000158 	.word	0x20000158

000177e4 <hci_disconn_complete_process>:
	conn_count--;
   177e4:	4a02      	ldr	r2, [pc, #8]	; (177f0 <hci_disconn_complete_process+0xc>)
   177e6:	6813      	ldr	r3, [r2, #0]
   177e8:	3b01      	subs	r3, #1
   177ea:	6013      	str	r3, [r2, #0]
}
   177ec:	4770      	bx	lr
   177ee:	bf00      	nop
   177f0:	20001914 	.word	0x20001914

000177f4 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   177f4:	7f03      	ldrb	r3, [r0, #28]
   177f6:	f003 0303 	and.w	r3, r3, #3
   177fa:	3b01      	subs	r3, #1
   177fc:	2b01      	cmp	r3, #1
{
   177fe:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
   17800:	d90d      	bls.n	1781e <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   17802:	4a16      	ldr	r2, [pc, #88]	; (1785c <hci_acl_encode+0x68>)
   17804:	4916      	ldr	r1, [pc, #88]	; (17860 <hci_acl_encode+0x6c>)
   17806:	4817      	ldr	r0, [pc, #92]	; (17864 <hci_acl_encode+0x70>)
   17808:	f641 7326 	movw	r3, #7974	; 0x1f26
   1780c:	f00f fe92 	bl	27534 <assert_print>
   17810:	4040      	eors	r0, r0
   17812:	f380 8811 	msr	BASEPRI, r0
   17816:	f04f 0003 	mov.w	r0, #3
   1781a:	df02      	svc	2
		break;
	}
}
   1781c:	bd70      	pop	{r4, r5, r6, pc}
   1781e:	4604      	mov	r4, r0
   17820:	f101 0508 	add.w	r5, r1, #8
   17824:	4628      	mov	r0, r5
   17826:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
   17828:	88e6      	ldrh	r6, [r4, #6]
   1782a:	f015 fdd2 	bl	2d3d2 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   1782e:	7f23      	ldrb	r3, [r4, #28]
   17830:	f003 0303 	and.w	r3, r3, #3
   17834:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   17836:	bf0c      	ite	eq
   17838:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   1783c:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   17840:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   17842:	7f61      	ldrb	r1, [r4, #29]
   17844:	8041      	strh	r1, [r0, #2]
   17846:	4628      	mov	r0, r5
   17848:	f015 fdc3 	bl	2d3d2 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   1784c:	7f62      	ldrb	r2, [r4, #29]
   1784e:	f104 011f 	add.w	r1, r4, #31
}
   17852:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   17856:	f011 bd76 	b.w	29346 <memcpy>
   1785a:	bf00      	nop
   1785c:	0002f950 	.word	0x0002f950
   17860:	0002f900 	.word	0x0002f900
   17864:	0002f8a0 	.word	0x0002f8a0

00017868 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   17868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1786c:	f890 c004 	ldrb.w	ip, [r0, #4]
   17870:	88c6      	ldrh	r6, [r0, #6]
   17872:	f1bc 0f03 	cmp.w	ip, #3
{
   17876:	b085      	sub	sp, #20
   17878:	4604      	mov	r4, r0
   1787a:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   1787c:	f100 071c 	add.w	r7, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   17880:	d00e      	beq.n	178a0 <hci_evt_encode+0x38>
	switch (node_rx->hdr.type) {
   17882:	f1ac 0c17 	sub.w	ip, ip, #23
   17886:	f1bc 0f06 	cmp.w	ip, #6
   1788a:	f200 82ac 	bhi.w	17de6 <hci_evt_encode+0x57e>
   1788e:	e8df f01c 	tbh	[pc, ip, lsl #1]
   17892:	002b      	.short	0x002b
   17894:	008f0087 	.word	0x008f0087
   17898:	00bd0021 	.word	0x00bd0021
   1789c:	00f100d0 	.word	0x00f100d0
	switch (pdu_data->llctrl.opcode) {
   178a0:	7fc3      	ldrb	r3, [r0, #31]
   178a2:	3b03      	subs	r3, #3
   178a4:	2b12      	cmp	r3, #18
   178a6:	f200 811d 	bhi.w	17ae4 <hci_evt_encode+0x27c>
   178aa:	e8df f013 	tbh	[pc, r3, lsl #1]
   178ae:	0160      	.short	0x0160
   178b0:	011b011b 	.word	0x011b011b
   178b4:	01b6019d 	.word	0x01b6019d
   178b8:	01e9011b 	.word	0x01e9011b
   178bc:	011b011b 	.word	0x011b011b
   178c0:	01ee011b 	.word	0x01ee011b
   178c4:	01c4011b 	.word	0x01c4011b
   178c8:	001a011b 	.word	0x001a011b
   178cc:	011b011b 	.word	0x011b011b
   178d0:	01290129 	.word	0x01290129
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   178d4:	4bbd      	ldr	r3, [pc, #756]	; (17bcc <hci_evt_encode+0x364>)
   178d6:	685b      	ldr	r3, [r3, #4]
   178d8:	0418      	lsls	r0, r3, #16
   178da:	f04f 0400 	mov.w	r4, #0
   178de:	f100 8136 	bmi.w	17b4e <hci_evt_encode+0x2e6>
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   178e2:	b005      	add	sp, #20
   178e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   178e8:	07f8      	lsls	r0, r7, #31
   178ea:	f100 81f2 	bmi.w	17cd2 <hci_evt_encode+0x46a>
	status = cc->status;
   178ee:	7f27      	ldrb	r7, [r4, #28]
	if (!status) {
   178f0:	2f00      	cmp	r7, #0
   178f2:	f000 81e5 	beq.w	17cc0 <hci_evt_encode+0x458>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   178f6:	4bb5      	ldr	r3, [pc, #724]	; (17bcc <hci_evt_encode+0x364>)
   178f8:	685b      	ldr	r3, [r3, #4]
   178fa:	0099      	lsls	r1, r3, #2
   178fc:	d5f1      	bpl.n	178e2 <hci_evt_encode+0x7a>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   178fe:	4bb4      	ldr	r3, [pc, #720]	; (17bd0 <hci_evt_encode+0x368>)
   17900:	681b      	ldr	r3, [r3, #0]
   17902:	f240 2201 	movw	r2, #513	; 0x201
   17906:	4213      	tst	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   17908:	f403 7800 	and.w	r8, r3, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   1790c:	d0e9      	beq.n	178e2 <hci_evt_encode+0x7a>
   1790e:	3508      	adds	r5, #8
	if (!status) {
   17910:	2f00      	cmp	r7, #0
   17912:	f040 81f6 	bne.w	17d02 <hci_evt_encode+0x49a>
		conn_count++;
   17916:	4aaf      	ldr	r2, [pc, #700]	; (17bd4 <hci_evt_encode+0x36c>)
   17918:	6813      	ldr	r3, [r2, #0]
   1791a:	3301      	adds	r3, #1
		ll_rl_crpa_set(cc->peer_addr_type,
   1791c:	f104 091f 	add.w	r9, r4, #31
		conn_count++;
   17920:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   17922:	f1b8 0f00 	cmp.w	r8, #0
   17926:	f000 8208 	beq.w	17d3a <hci_evt_encode+0x4d2>
   1792a:	2102      	movs	r1, #2
   1792c:	4628      	mov	r0, r5
   1792e:	f015 fd50 	bl	2d3d2 <net_buf_simple_add>
	hdr->evt = evt;
   17932:	233e      	movs	r3, #62	; 0x3e
   17934:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   17936:	231f      	movs	r3, #31
   17938:	7043      	strb	r3, [r0, #1]
   1793a:	2101      	movs	r1, #1
   1793c:	4628      	mov	r0, r5
   1793e:	f015 fd48 	bl	2d3d2 <net_buf_simple_add>
   17942:	4603      	mov	r3, r0
	me->subevent = subevt;
   17944:	220a      	movs	r2, #10
   17946:	701a      	strb	r2, [r3, #0]
   17948:	4628      	mov	r0, r5
   1794a:	211e      	movs	r1, #30
   1794c:	f015 fd41 	bl	2d3d2 <net_buf_simple_add>
		leecc->status = 0x00;
   17950:	7007      	strb	r7, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
   17952:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = cc->role;
   17956:	7f63      	ldrb	r3, [r4, #29]
   17958:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
   1795a:	7fa3      	ldrb	r3, [r4, #30]
   1795c:	7103      	strb	r3, [r0, #4]
   1795e:	4605      	mov	r5, r0
		memcpy(&leecc->peer_addr.a.val[0], &cc->peer_addr[0],
   17960:	4649      	mov	r1, r9
   17962:	2206      	movs	r2, #6
   17964:	3005      	adds	r0, #5
   17966:	f011 fcee 	bl	29346 <memcpy>
		memcpy(&leecc->local_rpa.val[0], &cc->local_rpa[0],
   1796a:	2206      	movs	r2, #6
   1796c:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   17970:	f105 000b 	add.w	r0, r5, #11
   17974:	f011 fce7 	bl	29346 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &cc->peer_rpa[0],
   17978:	2206      	movs	r2, #6
   1797a:	f104 0125 	add.w	r1, r4, #37	; 0x25
   1797e:	f105 0011 	add.w	r0, r5, #17
   17982:	f011 fce0 	bl	29346 <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   17986:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
   17988:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
   1798a:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   1798c:	f8a5 2019 	strh.w	r2, [r5, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
   17990:	f8a5 1017 	strh.w	r1, [r5, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   17994:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = cc->sca;
   17998:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1799c:	776b      	strb	r3, [r5, #29]
		return;
   1799e:	e7a0      	b.n	178e2 <hci_evt_encode+0x7a>
		hci_disconn_complete_encode(pdu_data, handle, buf);
   179a0:	460a      	mov	r2, r1
   179a2:	4638      	mov	r0, r7
   179a4:	4631      	mov	r1, r6
}
   179a6:	b005      	add	sp, #20
   179a8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
   179ac:	f7ff befa 	b.w	177a4 <hci_disconn_complete_encode>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   179b0:	4b86      	ldr	r3, [pc, #536]	; (17bcc <hci_evt_encode+0x364>)
   179b2:	685b      	ldr	r3, [r3, #4]
   179b4:	009a      	lsls	r2, r3, #2
   179b6:	d594      	bpl.n	178e2 <hci_evt_encode+0x7a>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   179b8:	4b85      	ldr	r3, [pc, #532]	; (17bd0 <hci_evt_encode+0x368>)
   179ba:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   179bc:	075b      	lsls	r3, r3, #29
   179be:	d590      	bpl.n	178e2 <hci_evt_encode+0x7a>
   179c0:	3508      	adds	r5, #8
   179c2:	2102      	movs	r1, #2
   179c4:	4628      	mov	r0, r5
   179c6:	f015 fd04 	bl	2d3d2 <net_buf_simple_add>
	hdr->evt = evt;
   179ca:	233e      	movs	r3, #62	; 0x3e
   179cc:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   179ce:	230a      	movs	r3, #10
   179d0:	7043      	strb	r3, [r0, #1]
   179d2:	2101      	movs	r1, #1
   179d4:	4628      	mov	r0, r5
   179d6:	f015 fcfc 	bl	2d3d2 <net_buf_simple_add>
   179da:	4603      	mov	r3, r0
	me->subevent = subevt;
   179dc:	2203      	movs	r2, #3
   179de:	4628      	mov	r0, r5
   179e0:	701a      	strb	r2, [r3, #0]
   179e2:	2109      	movs	r1, #9
   179e4:	f015 fcf5 	bl	2d3d2 <net_buf_simple_add>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   179e8:	07ff      	lsls	r7, r7, #31
   179ea:	4605      	mov	r5, r0
   179ec:	f100 81ed 	bmi.w	17dca <hci_evt_encode+0x562>
	sep->status = cu->status;
   179f0:	7f23      	ldrb	r3, [r4, #28]
   179f2:	702b      	strb	r3, [r5, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   179f4:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
   179f6:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   179f8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   179fa:	f8a5 3007 	strh.w	r3, [r5, #7]
	sep->handle = sys_cpu_to_le16(handle);
   179fe:	f8a5 6001 	strh.w	r6, [r5, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   17a02:	f8a5 1003 	strh.w	r1, [r5, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   17a06:	f8a5 2005 	strh.w	r2, [r5, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   17a0a:	e76a      	b.n	178e2 <hci_evt_encode+0x7a>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   17a0c:	4b72      	ldr	r3, [pc, #456]	; (17bd8 <hci_evt_encode+0x370>)
   17a0e:	681b      	ldr	r3, [r3, #0]
   17a10:	0219      	lsls	r1, r3, #8
   17a12:	f57f af66 	bpl.w	178e2 <hci_evt_encode+0x7a>
   17a16:	3508      	adds	r5, #8
   17a18:	2102      	movs	r1, #2
   17a1a:	4628      	mov	r0, r5
   17a1c:	f015 fcd9 	bl	2d3d2 <net_buf_simple_add>
	hdr->len = len;
   17a20:	2102      	movs	r1, #2
	hdr->evt = evt;
   17a22:	2357      	movs	r3, #87	; 0x57
   17a24:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   17a26:	7041      	strb	r1, [r0, #1]
   17a28:	4628      	mov	r0, r5
   17a2a:	f015 fcd2 	bl	2d3d2 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   17a2e:	8006      	strh	r6, [r0, #0]
   17a30:	e757      	b.n	178e2 <hci_evt_encode+0x7a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17a32:	4b66      	ldr	r3, [pc, #408]	; (17bcc <hci_evt_encode+0x364>)
   17a34:	685b      	ldr	r3, [r3, #4]
   17a36:	009a      	lsls	r2, r3, #2
   17a38:	f57f af53 	bpl.w	178e2 <hci_evt_encode+0x7a>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   17a3c:	4b64      	ldr	r3, [pc, #400]	; (17bd0 <hci_evt_encode+0x368>)
   17a3e:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17a40:	031b      	lsls	r3, r3, #12
   17a42:	f57f af4e 	bpl.w	178e2 <hci_evt_encode+0x7a>
   17a46:	3508      	adds	r5, #8
   17a48:	2102      	movs	r1, #2
   17a4a:	4628      	mov	r0, r5
   17a4c:	f015 fcc1 	bl	2d3d2 <net_buf_simple_add>
	hdr->evt = evt;
   17a50:	233e      	movs	r3, #62	; 0x3e
   17a52:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   17a54:	2304      	movs	r3, #4
   17a56:	7043      	strb	r3, [r0, #1]
   17a58:	2101      	movs	r1, #1
   17a5a:	4628      	mov	r0, r5
   17a5c:	f015 fcb9 	bl	2d3d2 <net_buf_simple_add>
	me->subevent = subevt;
   17a60:	2314      	movs	r3, #20
   17a62:	7003      	strb	r3, [r0, #0]
   17a64:	2103      	movs	r1, #3
   17a66:	4628      	mov	r0, r5
   17a68:	f015 fcb3 	bl	2d3d2 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   17a6c:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   17a6e:	7f23      	ldrb	r3, [r4, #28]
   17a70:	7083      	strb	r3, [r0, #2]
   17a72:	e736      	b.n	178e2 <hci_evt_encode+0x7a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17a74:	4b55      	ldr	r3, [pc, #340]	; (17bcc <hci_evt_encode+0x364>)
   17a76:	685b      	ldr	r3, [r3, #4]
   17a78:	009f      	lsls	r7, r3, #2
   17a7a:	f57f af32 	bpl.w	178e2 <hci_evt_encode+0x7a>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   17a7e:	4b54      	ldr	r3, [pc, #336]	; (17bd0 <hci_evt_encode+0x368>)
   17a80:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17a82:	0518      	lsls	r0, r3, #20
   17a84:	f57f af2d 	bpl.w	178e2 <hci_evt_encode+0x7a>
   17a88:	3508      	adds	r5, #8
   17a8a:	2102      	movs	r1, #2
   17a8c:	4628      	mov	r0, r5
   17a8e:	f015 fca0 	bl	2d3d2 <net_buf_simple_add>
	hdr->evt = evt;
   17a92:	233e      	movs	r3, #62	; 0x3e
   17a94:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   17a96:	2306      	movs	r3, #6
   17a98:	7043      	strb	r3, [r0, #1]
   17a9a:	2101      	movs	r1, #1
   17a9c:	4628      	mov	r0, r5
   17a9e:	f015 fc98 	bl	2d3d2 <net_buf_simple_add>
	me->subevent = subevt;
   17aa2:	230c      	movs	r3, #12
   17aa4:	7003      	strb	r3, [r0, #0]
   17aa6:	2105      	movs	r1, #5
   17aa8:	4628      	mov	r0, r5
   17aaa:	f015 fc92 	bl	2d3d2 <net_buf_simple_add>
	sep->status = pu->status;
   17aae:	7f23      	ldrb	r3, [r4, #28]
   17ab0:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   17ab2:	f8a0 6001 	strh.w	r6, [r0, #1]
   17ab6:	7f62      	ldrb	r2, [r4, #29]
   17ab8:	2a00      	cmp	r2, #0
   17aba:	fa92 f3a2 	rbit	r3, r2
   17abe:	fab3 f383 	clz	r3, r3
   17ac2:	bf08      	it	eq
   17ac4:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   17ac8:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   17aca:	70c3      	strb	r3, [r0, #3]
   17acc:	7fa2      	ldrb	r2, [r4, #30]
   17ace:	fa92 f3a2 	rbit	r3, r2
   17ad2:	2a00      	cmp	r2, #0
   17ad4:	fab3 f383 	clz	r3, r3
   17ad8:	bf08      	it	eq
   17ada:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   17ade:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   17ae0:	7103      	strb	r3, [r0, #4]
   17ae2:	e6fe      	b.n	178e2 <hci_evt_encode+0x7a>
		LL_ASSERT(0);
   17ae4:	4a3d      	ldr	r2, [pc, #244]	; (17bdc <hci_evt_encode+0x374>)
   17ae6:	493e      	ldr	r1, [pc, #248]	; (17be0 <hci_evt_encode+0x378>)
   17ae8:	483e      	ldr	r0, [pc, #248]	; (17be4 <hci_evt_encode+0x37c>)
   17aea:	f641 63fa 	movw	r3, #7930	; 0x1efa
   17aee:	f00f fd21 	bl	27534 <assert_print>
   17af2:	4040      	eors	r0, r0
   17af4:	f380 8811 	msr	BASEPRI, r0
   17af8:	f04f 0003 	mov.w	r0, #3
   17afc:	df02      	svc	2
}
   17afe:	e6f0      	b.n	178e2 <hci_evt_encode+0x7a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17b00:	4b32      	ldr	r3, [pc, #200]	; (17bcc <hci_evt_encode+0x364>)
   17b02:	685b      	ldr	r3, [r3, #4]
   17b04:	009a      	lsls	r2, r3, #2
   17b06:	f57f aeec 	bpl.w	178e2 <hci_evt_encode+0x7a>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   17b0a:	4b31      	ldr	r3, [pc, #196]	; (17bd0 <hci_evt_encode+0x368>)
   17b0c:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17b0e:	065b      	lsls	r3, r3, #25
   17b10:	f57f aee7 	bpl.w	178e2 <hci_evt_encode+0x7a>
   17b14:	3508      	adds	r5, #8
   17b16:	2102      	movs	r1, #2
   17b18:	4628      	mov	r0, r5
   17b1a:	f015 fc5a 	bl	2d3d2 <net_buf_simple_add>
	hdr->evt = evt;
   17b1e:	233e      	movs	r3, #62	; 0x3e
   17b20:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   17b22:	230b      	movs	r3, #11
   17b24:	7043      	strb	r3, [r0, #1]
   17b26:	2101      	movs	r1, #1
   17b28:	4628      	mov	r0, r5
   17b2a:	f015 fc52 	bl	2d3d2 <net_buf_simple_add>
	me->subevent = subevt;
   17b2e:	2307      	movs	r3, #7
   17b30:	7003      	strb	r3, [r0, #0]
   17b32:	210a      	movs	r1, #10
   17b34:	4628      	mov	r0, r5
   17b36:	f015 fc4c 	bl	2d3d2 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   17b3a:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   17b3c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   17b3e:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   17b40:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   17b42:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   17b44:	8c23      	ldrh	r3, [r4, #32]
   17b46:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   17b48:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   17b4a:	8103      	strh	r3, [r0, #8]
   17b4c:	e6c9      	b.n	178e2 <hci_evt_encode+0x7a>
   17b4e:	3508      	adds	r5, #8
   17b50:	2102      	movs	r1, #2
   17b52:	4628      	mov	r0, r5
   17b54:	f015 fc3d 	bl	2d3d2 <net_buf_simple_add>
	hdr->evt = evt;
   17b58:	2330      	movs	r3, #48	; 0x30
	hdr->len = len;
   17b5a:	2103      	movs	r1, #3
	hdr->evt = evt;
   17b5c:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   17b5e:	7041      	strb	r1, [r0, #1]
   17b60:	4628      	mov	r0, r5
   17b62:	f015 fc36 	bl	2d3d2 <net_buf_simple_add>
	ep->status = 0x00;
   17b66:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   17b68:	f8a0 6001 	strh.w	r6, [r0, #1]
   17b6c:	e6b9      	b.n	178e2 <hci_evt_encode+0x7a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17b6e:	4b17      	ldr	r3, [pc, #92]	; (17bcc <hci_evt_encode+0x364>)
   17b70:	685b      	ldr	r3, [r3, #4]
   17b72:	0099      	lsls	r1, r3, #2
   17b74:	f57f aeb5 	bpl.w	178e2 <hci_evt_encode+0x7a>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   17b78:	4b15      	ldr	r3, [pc, #84]	; (17bd0 <hci_evt_encode+0x368>)
   17b7a:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17b7c:	06da      	lsls	r2, r3, #27
   17b7e:	f57f aeb0 	bpl.w	178e2 <hci_evt_encode+0x7a>
   17b82:	3508      	adds	r5, #8
   17b84:	2102      	movs	r1, #2
   17b86:	4628      	mov	r0, r5
   17b88:	f015 fc23 	bl	2d3d2 <net_buf_simple_add>
	hdr->evt = evt;
   17b8c:	233e      	movs	r3, #62	; 0x3e
   17b8e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   17b90:	230d      	movs	r3, #13
   17b92:	7043      	strb	r3, [r0, #1]
   17b94:	2101      	movs	r1, #1
   17b96:	4628      	mov	r0, r5
   17b98:	f015 fc1b 	bl	2d3d2 <net_buf_simple_add>
	me->subevent = subevt;
   17b9c:	2305      	movs	r3, #5
   17b9e:	7003      	strb	r3, [r0, #0]
   17ba0:	210c      	movs	r1, #12
   17ba2:	4628      	mov	r0, r5
   17ba4:	f015 fc15 	bl	2d3d2 <net_buf_simple_add>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   17ba8:	f104 0120 	add.w	r1, r4, #32
   17bac:	4605      	mov	r5, r0
   17bae:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   17bb0:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   17bb4:	f011 fbc7 	bl	29346 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   17bb8:	2202      	movs	r2, #2
   17bba:	f104 0128 	add.w	r1, r4, #40	; 0x28
   17bbe:	f105 000a 	add.w	r0, r5, #10
}
   17bc2:	b005      	add	sp, #20
   17bc4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   17bc8:	f011 bbbd 	b.w	29346 <memcpy>
   17bcc:	20000158 	.word	0x20000158
   17bd0:	20000160 	.word	0x20000160
   17bd4:	20001914 	.word	0x20001914
   17bd8:	200011c0 	.word	0x200011c0
   17bdc:	0002f950 	.word	0x0002f950
   17be0:	0002f900 	.word	0x0002f900
   17be4:	0002f8a0 	.word	0x0002f8a0
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   17be8:	4b86      	ldr	r3, [pc, #536]	; (17e04 <hci_evt_encode+0x59c>)
   17bea:	681b      	ldr	r3, [r3, #0]
   17bec:	061b      	lsls	r3, r3, #24
   17bee:	f04f 0400 	mov.w	r4, #0
   17bf2:	f57f ae76 	bpl.w	178e2 <hci_evt_encode+0x7a>
   17bf6:	3508      	adds	r5, #8
   17bf8:	2102      	movs	r1, #2
   17bfa:	4628      	mov	r0, r5
   17bfc:	f015 fbe9 	bl	2d3d2 <net_buf_simple_add>
	hdr->evt = evt;
   17c00:	2308      	movs	r3, #8
	hdr->len = len;
   17c02:	2104      	movs	r1, #4
	hdr->evt = evt;
   17c04:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   17c06:	7041      	strb	r1, [r0, #1]
   17c08:	4628      	mov	r0, r5
   17c0a:	f015 fbe2 	bl	2d3d2 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   17c0e:	2301      	movs	r3, #1
	ep->status = err;
   17c10:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   17c12:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   17c16:	70c3      	strb	r3, [r0, #3]
   17c18:	e663      	b.n	178e2 <hci_evt_encode+0x7a>
	switch (pdu_data->llctrl.unknown_rsp.type) {
   17c1a:	f890 3020 	ldrb.w	r3, [r0, #32]
   17c1e:	2b0e      	cmp	r3, #14
   17c20:	f47f ae5f 	bne.w	178e2 <hci_evt_encode+0x7a>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   17c24:	460b      	mov	r3, r1
   17c26:	4632      	mov	r2, r6
   17c28:	2100      	movs	r1, #0
   17c2a:	201a      	movs	r0, #26
}
   17c2c:	b005      	add	sp, #20
   17c2e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   17c32:	f7fe bf9f 	b.w	16b74 <le_remote_feat_complete>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17c36:	4b73      	ldr	r3, [pc, #460]	; (17e04 <hci_evt_encode+0x59c>)
   17c38:	685b      	ldr	r3, [r3, #4]
   17c3a:	0098      	lsls	r0, r3, #2
   17c3c:	d557      	bpl.n	17cee <hci_evt_encode+0x486>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   17c3e:	4b72      	ldr	r3, [pc, #456]	; (17e08 <hci_evt_encode+0x5a0>)
   17c40:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17c42:	0699      	lsls	r1, r3, #26
   17c44:	d553      	bpl.n	17cee <hci_evt_encode+0x486>
   17c46:	3508      	adds	r5, #8
   17c48:	2102      	movs	r1, #2
   17c4a:	4628      	mov	r0, r5
   17c4c:	f015 fbc1 	bl	2d3d2 <net_buf_simple_add>
	hdr->evt = evt;
   17c50:	233e      	movs	r3, #62	; 0x3e
   17c52:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   17c54:	230b      	movs	r3, #11
   17c56:	7043      	strb	r3, [r0, #1]
   17c58:	2101      	movs	r1, #1
   17c5a:	4628      	mov	r0, r5
   17c5c:	f015 fbb9 	bl	2d3d2 <net_buf_simple_add>
	me->subevent = subevt;
   17c60:	2306      	movs	r3, #6
   17c62:	7003      	strb	r3, [r0, #0]
   17c64:	210a      	movs	r1, #10
   17c66:	4628      	mov	r0, r5
   17c68:	f015 fbb3 	bl	2d3d2 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   17c6c:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   17c6e:	8c23      	ldrh	r3, [r4, #32]
   17c70:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   17c72:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   17c74:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   17c76:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   17c78:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   17c7a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   17c7c:	8103      	strh	r3, [r0, #8]
   17c7e:	e630      	b.n	178e2 <hci_evt_encode+0x7a>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   17c80:	460b      	mov	r3, r1
   17c82:	4632      	mov	r2, r6
   17c84:	4639      	mov	r1, r7
   17c86:	2000      	movs	r0, #0
   17c88:	e7d0      	b.n	17c2c <hci_evt_encode+0x3c4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   17c8a:	4b5e      	ldr	r3, [pc, #376]	; (17e04 <hci_evt_encode+0x59c>)
   17c8c:	681b      	ldr	r3, [r3, #0]
   17c8e:	061f      	lsls	r7, r3, #24
   17c90:	f57f ae27 	bpl.w	178e2 <hci_evt_encode+0x7a>
   17c94:	3508      	adds	r5, #8
   17c96:	2102      	movs	r1, #2
   17c98:	4628      	mov	r0, r5
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
   17c9a:	f894 4020 	ldrb.w	r4, [r4, #32]
   17c9e:	f015 fb98 	bl	2d3d2 <net_buf_simple_add>
	hdr->evt = evt;
   17ca2:	2308      	movs	r3, #8
	hdr->len = len;
   17ca4:	2104      	movs	r1, #4
	hdr->evt = evt;
   17ca6:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   17ca8:	7041      	strb	r1, [r0, #1]
   17caa:	4628      	mov	r0, r5
   17cac:	f015 fb91 	bl	2d3d2 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   17cb0:	fab4 f384 	clz	r3, r4
   17cb4:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   17cb6:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   17cb8:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   17cbc:	70c3      	strb	r3, [r0, #3]
   17cbe:	e610      	b.n	178e2 <hci_evt_encode+0x7a>
		ll_rl_crpa_set(cc->peer_addr_type,
   17cc0:	7fa0      	ldrb	r0, [r4, #30]
   17cc2:	f104 0325 	add.w	r3, r4, #37	; 0x25
   17cc6:	22ff      	movs	r2, #255	; 0xff
   17cc8:	f104 011f 	add.w	r1, r4, #31
   17ccc:	f007 f96e 	bl	1efac <ll_rl_crpa_set>
   17cd0:	e611      	b.n	178f6 <hci_evt_encode+0x8e>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   17cd2:	4a4e      	ldr	r2, [pc, #312]	; (17e0c <hci_evt_encode+0x5a4>)
   17cd4:	494e      	ldr	r1, [pc, #312]	; (17e10 <hci_evt_encode+0x5a8>)
   17cd6:	484f      	ldr	r0, [pc, #316]	; (17e14 <hci_evt_encode+0x5ac>)
   17cd8:	f641 435a 	movw	r3, #7258	; 0x1c5a
   17cdc:	f00f fc2a 	bl	27534 <assert_print>
   17ce0:	4040      	eors	r0, r0
   17ce2:	f380 8811 	msr	BASEPRI, r0
   17ce6:	f04f 0003 	mov.w	r0, #3
   17cea:	df02      	svc	2
   17cec:	e5ff      	b.n	178ee <hci_evt_encode+0x86>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   17cee:	2300      	movs	r3, #0
   17cf0:	e9cd 3301 	strd	r3, r3, [sp, #4]
   17cf4:	9300      	str	r3, [sp, #0]
   17cf6:	221a      	movs	r2, #26
   17cf8:	2102      	movs	r1, #2
   17cfa:	4630      	mov	r0, r6
   17cfc:	f002 fe54 	bl	1a9a8 <ll_conn_update>
		return;
   17d00:	e5ef      	b.n	178e2 <hci_evt_encode+0x7a>
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   17d02:	f1b8 0f00 	cmp.w	r8, #0
   17d06:	d147      	bne.n	17d98 <hci_evt_encode+0x530>
   17d08:	2102      	movs	r1, #2
   17d0a:	4628      	mov	r0, r5
   17d0c:	f015 fb61 	bl	2d3d2 <net_buf_simple_add>
	hdr->evt = evt;
   17d10:	233e      	movs	r3, #62	; 0x3e
   17d12:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   17d14:	2313      	movs	r3, #19
   17d16:	7043      	strb	r3, [r0, #1]
   17d18:	2101      	movs	r1, #1
   17d1a:	4628      	mov	r0, r5
   17d1c:	f015 fb59 	bl	2d3d2 <net_buf_simple_add>
	me->subevent = subevt;
   17d20:	2301      	movs	r3, #1
   17d22:	7003      	strb	r3, [r0, #0]
   17d24:	2112      	movs	r1, #18
   17d26:	4628      	mov	r0, r5
   17d28:	f015 fb53 	bl	2d3d2 <net_buf_simple_add>
   17d2c:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
   17d2e:	2212      	movs	r2, #18
   17d30:	4641      	mov	r1, r8
   17d32:	f011 fb13 	bl	2935c <memset>
		lecc->status = status;
   17d36:	7027      	strb	r7, [r4, #0]
		return;
   17d38:	e5d3      	b.n	178e2 <hci_evt_encode+0x7a>
   17d3a:	2102      	movs	r1, #2
   17d3c:	4628      	mov	r0, r5
   17d3e:	f015 fb48 	bl	2d3d2 <net_buf_simple_add>
	hdr->evt = evt;
   17d42:	233e      	movs	r3, #62	; 0x3e
   17d44:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   17d46:	2313      	movs	r3, #19
   17d48:	7043      	strb	r3, [r0, #1]
   17d4a:	2101      	movs	r1, #1
   17d4c:	4628      	mov	r0, r5
   17d4e:	f015 fb40 	bl	2d3d2 <net_buf_simple_add>
   17d52:	4603      	mov	r3, r0
	me->subevent = subevt;
   17d54:	2201      	movs	r2, #1
   17d56:	701a      	strb	r2, [r3, #0]
   17d58:	4628      	mov	r0, r5
   17d5a:	2112      	movs	r1, #18
   17d5c:	f015 fb39 	bl	2d3d2 <net_buf_simple_add>
	lecc->status = 0x00;
   17d60:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   17d62:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
   17d66:	7f63      	ldrb	r3, [r4, #29]
   17d68:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   17d6a:	7fa3      	ldrb	r3, [r4, #30]
   17d6c:	f003 0301 	and.w	r3, r3, #1
   17d70:	4605      	mov	r5, r0
   17d72:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
   17d74:	4649      	mov	r1, r9
   17d76:	2206      	movs	r2, #6
   17d78:	3005      	adds	r0, #5
   17d7a:	f011 fae4 	bl	29346 <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   17d7e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
   17d80:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
   17d82:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   17d84:	f8a5 200d 	strh.w	r2, [r5, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
   17d88:	f8a5 100b 	strh.w	r1, [r5, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   17d8c:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
   17d90:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   17d94:	746b      	strb	r3, [r5, #17]
   17d96:	e5a4      	b.n	178e2 <hci_evt_encode+0x7a>
   17d98:	2102      	movs	r1, #2
   17d9a:	4628      	mov	r0, r5
   17d9c:	f015 fb19 	bl	2d3d2 <net_buf_simple_add>
	hdr->evt = evt;
   17da0:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   17da2:	231f      	movs	r3, #31
	hdr->evt = evt;
   17da4:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   17da6:	7043      	strb	r3, [r0, #1]
   17da8:	2101      	movs	r1, #1
   17daa:	4628      	mov	r0, r5
   17dac:	f015 fb11 	bl	2d3d2 <net_buf_simple_add>
	me->subevent = subevt;
   17db0:	230a      	movs	r3, #10
   17db2:	7003      	strb	r3, [r0, #0]
   17db4:	211e      	movs	r1, #30
   17db6:	4628      	mov	r0, r5
   17db8:	f015 fb0b 	bl	2d3d2 <net_buf_simple_add>
   17dbc:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
   17dbe:	221e      	movs	r2, #30
   17dc0:	2100      	movs	r1, #0
   17dc2:	f011 facb 	bl	2935c <memset>
			leecc->status = status;
   17dc6:	7027      	strb	r7, [r4, #0]
			return;
   17dc8:	e58b      	b.n	178e2 <hci_evt_encode+0x7a>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   17dca:	4a10      	ldr	r2, [pc, #64]	; (17e0c <hci_evt_encode+0x5a4>)
   17dcc:	4912      	ldr	r1, [pc, #72]	; (17e18 <hci_evt_encode+0x5b0>)
   17dce:	4811      	ldr	r0, [pc, #68]	; (17e14 <hci_evt_encode+0x5ac>)
   17dd0:	f641 43df 	movw	r3, #7391	; 0x1cdf
   17dd4:	f00f fbae 	bl	27534 <assert_print>
   17dd8:	4040      	eors	r0, r0
   17dda:	f380 8811 	msr	BASEPRI, r0
   17dde:	f04f 0003 	mov.w	r0, #3
   17de2:	df02      	svc	2
   17de4:	e604      	b.n	179f0 <hci_evt_encode+0x188>
		LL_ASSERT(0);
   17de6:	4a09      	ldr	r2, [pc, #36]	; (17e0c <hci_evt_encode+0x5a4>)
   17de8:	490c      	ldr	r1, [pc, #48]	; (17e1c <hci_evt_encode+0x5b4>)
   17dea:	480a      	ldr	r0, [pc, #40]	; (17e14 <hci_evt_encode+0x5ac>)
   17dec:	f641 631a 	movw	r3, #7706	; 0x1e1a
   17df0:	f00f fba0 	bl	27534 <assert_print>
   17df4:	4040      	eors	r0, r0
   17df6:	f380 8811 	msr	BASEPRI, r0
   17dfa:	f04f 0003 	mov.w	r0, #3
   17dfe:	df02      	svc	2
		return;
   17e00:	e56f      	b.n	178e2 <hci_evt_encode+0x7a>
   17e02:	bf00      	nop
   17e04:	20000158 	.word	0x20000158
   17e08:	20000160 	.word	0x20000160
   17e0c:	0002f950 	.word	0x0002f950
   17e10:	0002f98c 	.word	0x0002f98c
   17e14:	0002f8a0 	.word	0x0002f8a0
   17e18:	0002f9c8 	.word	0x0002f9c8
   17e1c:	0002f900 	.word	0x0002f900

00017e20 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN) || defined(CONFIG_BT_CTLR_ADV_ISO) || \
	defined(CONFIG_BT_CTLR_CONN_ISO)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   17e20:	b570      	push	{r4, r5, r6, lr}
   17e22:	f100 0408 	add.w	r4, r0, #8
   17e26:	460e      	mov	r6, r1
   17e28:	4620      	mov	r0, r4
   17e2a:	2102      	movs	r1, #2
   17e2c:	4615      	mov	r5, r2
   17e2e:	f015 fad0 	bl	2d3d2 <net_buf_simple_add>
	hdr->evt = evt;
   17e32:	2313      	movs	r3, #19
	hdr->len = len;
   17e34:	2105      	movs	r1, #5
	hdr->evt = evt;
   17e36:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   17e38:	7041      	strb	r1, [r0, #1]
   17e3a:	4620      	mov	r0, r4
   17e3c:	f015 fac9 	bl	2d3d2 <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
   17e40:	2301      	movs	r3, #1
   17e42:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   17e44:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   17e48:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   17e4c:	bd70      	pop	{r4, r5, r6, pc}
   17e4e:	bf00      	nop

00017e50 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   17e50:	7903      	ldrb	r3, [r0, #4]
   17e52:	2b03      	cmp	r3, #3
   17e54:	d009      	beq.n	17e6a <hci_get_class+0x1a>

		switch (node_rx->hdr.type) {
   17e56:	2b17      	cmp	r3, #23
   17e58:	d005      	beq.n	17e66 <hci_get_class+0x16>
   17e5a:	3b18      	subs	r3, #24
		case NODE_RX_TYPE_USER_START ... NODE_RX_TYPE_USER_END - 1:
			return hci_user_ext_get_class(node_rx);
#endif /* CONFIG_BT_CTLR_USER_EVT_RANGE > 0 */

		default:
			return HCI_CLASS_NONE;
   17e5c:	2b05      	cmp	r3, #5
   17e5e:	bf94      	ite	ls
   17e60:	2003      	movls	r0, #3
   17e62:	2000      	movhi	r0, #0
   17e64:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
   17e66:	2001      	movs	r0, #1
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   17e68:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   17e6a:	7f03      	ldrb	r3, [r0, #28]
   17e6c:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_ACL_DATA;
   17e70:	2b03      	cmp	r3, #3
   17e72:	bf0c      	ite	eq
   17e74:	2004      	moveq	r0, #4
   17e76:	2005      	movne	r0, #5
   17e78:	4770      	bx	lr
   17e7a:	bf00      	nop

00017e7c <hci_init>:

void hci_init(struct k_poll_signal *signal_host_buf)
{
   17e7c:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   17e7e:	4b0b      	ldr	r3, [pc, #44]	; (17eac <hci_init+0x30>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   17e80:	490b      	ldr	r1, [pc, #44]	; (17eb0 <hci_init+0x34>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   17e82:	4a0c      	ldr	r2, [pc, #48]	; (17eb4 <hci_init+0x38>)
	event_mask = DEFAULT_EVENT_MASK;
   17e84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   17e88:	f641 75ff 	movw	r5, #8191	; 0x1fff
   17e8c:	e9c3 4500 	strd	r4, r5, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   17e90:	2400      	movs	r4, #0
   17e92:	2500      	movs	r5, #0
   17e94:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
   17e98:	4b07      	ldr	r3, [pc, #28]	; (17eb8 <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   17e9a:	201f      	movs	r0, #31
   17e9c:	2100      	movs	r1, #0
   17e9e:	e9c2 0100 	strd	r0, r1, [r2]
	conn_count = 0U;
   17ea2:	2200      	movs	r2, #0
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   17ea4:	bc30      	pop	{r4, r5}
	conn_count = 0U;
   17ea6:	601a      	str	r2, [r3, #0]
}
   17ea8:	4770      	bx	lr
   17eaa:	bf00      	nop
   17eac:	20000158 	.word	0x20000158
   17eb0:	200011c0 	.word	0x200011c0
   17eb4:	20000160 	.word	0x20000160
   17eb8:	20001914 	.word	0x20001914

00017ebc <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   17ebc:	f007 bffc 	b.w	1feb8 <lll_csrand_get>

00017ec0 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   17ec0:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   17ec2:	2300      	movs	r3, #0
   17ec4:	f009 fde6 	bl	21a94 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   17ec8:	2000      	movs	r0, #0
   17eca:	bd08      	pop	{r3, pc}

00017ecc <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
   17ecc:	4801      	ldr	r0, [pc, #4]	; (17ed4 <ll_feat_get+0x8>)
   17ece:	2100      	movs	r1, #0
   17ed0:	4770      	bx	lr
   17ed2:	bf00      	nop
   17ed4:	0001417f 	.word	0x0001417f

00017ed8 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   17ed8:	b510      	push	{r4, lr}
   17eda:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   17edc:	f008 f822 	bl	1ff24 <lll_reset>
	LL_ASSERT(!err);
   17ee0:	b950      	cbnz	r0, 17ef8 <perform_lll_reset+0x20>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   17ee2:	f008 fc1f 	bl	20724 <lll_adv_reset>
	LL_ASSERT(!err);
   17ee6:	b9c0      	cbnz	r0, 17f1a <perform_lll_reset+0x42>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   17ee8:	f009 f8cc 	bl	21084 <lll_conn_reset>
	LL_ASSERT(!err);
   17eec:	bb30      	cbnz	r0, 17f3c <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
   17eee:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   17ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17ef4:	f00d bf40 	b.w	25d78 <z_impl_k_sem_give>
	LL_ASSERT(!err);
   17ef8:	4a19      	ldr	r2, [pc, #100]	; (17f60 <perform_lll_reset+0x88>)
   17efa:	491a      	ldr	r1, [pc, #104]	; (17f64 <perform_lll_reset+0x8c>)
   17efc:	481a      	ldr	r0, [pc, #104]	; (17f68 <perform_lll_reset+0x90>)
   17efe:	f640 034f 	movw	r3, #2127	; 0x84f
   17f02:	f00f fb17 	bl	27534 <assert_print>
   17f06:	4040      	eors	r0, r0
   17f08:	f380 8811 	msr	BASEPRI, r0
   17f0c:	f04f 0003 	mov.w	r0, #3
   17f10:	df02      	svc	2
	err = lll_adv_reset();
   17f12:	f008 fc07 	bl	20724 <lll_adv_reset>
	LL_ASSERT(!err);
   17f16:	2800      	cmp	r0, #0
   17f18:	d0e6      	beq.n	17ee8 <perform_lll_reset+0x10>
   17f1a:	4a11      	ldr	r2, [pc, #68]	; (17f60 <perform_lll_reset+0x88>)
   17f1c:	4911      	ldr	r1, [pc, #68]	; (17f64 <perform_lll_reset+0x8c>)
   17f1e:	4812      	ldr	r0, [pc, #72]	; (17f68 <perform_lll_reset+0x90>)
   17f20:	f640 0354 	movw	r3, #2132	; 0x854
   17f24:	f00f fb06 	bl	27534 <assert_print>
   17f28:	4040      	eors	r0, r0
   17f2a:	f380 8811 	msr	BASEPRI, r0
   17f2e:	f04f 0003 	mov.w	r0, #3
   17f32:	df02      	svc	2
	err = lll_conn_reset();
   17f34:	f009 f8a6 	bl	21084 <lll_conn_reset>
	LL_ASSERT(!err);
   17f38:	2800      	cmp	r0, #0
   17f3a:	d0d8      	beq.n	17eee <perform_lll_reset+0x16>
   17f3c:	4a08      	ldr	r2, [pc, #32]	; (17f60 <perform_lll_reset+0x88>)
   17f3e:	4909      	ldr	r1, [pc, #36]	; (17f64 <perform_lll_reset+0x8c>)
   17f40:	4809      	ldr	r0, [pc, #36]	; (17f68 <perform_lll_reset+0x90>)
   17f42:	f44f 6306 	mov.w	r3, #2144	; 0x860
   17f46:	f00f faf5 	bl	27534 <assert_print>
   17f4a:	4040      	eors	r0, r0
   17f4c:	f380 8811 	msr	BASEPRI, r0
   17f50:	f04f 0003 	mov.w	r0, #3
   17f54:	df02      	svc	2
   17f56:	4620      	mov	r0, r4
}
   17f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17f5c:	f00d bf0c 	b.w	25d78 <z_impl_k_sem_give>
   17f60:	0002fa04 	.word	0x0002fa04
   17f64:	0002fa40 	.word	0x0002fa40
   17f68:	0002f8a0 	.word	0x0002f8a0

00017f6c <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   17f6c:	6008      	str	r0, [r1, #0]
   17f6e:	4801      	ldr	r0, [pc, #4]	; (17f74 <ull_ticker_status_give+0x8>)
   17f70:	f00d bf02 	b.w	25d78 <z_impl_k_sem_give>
   17f74:	20001bc8 	.word	0x20001bc8

00017f78 <disabled_cb>:
   17f78:	f00d befe 	b.w	25d78 <z_impl_k_sem_give>

00017f7c <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   17f7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   17f80:	4d2c      	ldr	r5, [pc, #176]	; (18034 <tx_cmplt_get+0xb8>)
{
   17f82:	460c      	mov	r4, r1
   17f84:	4691      	mov	r9, r2
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   17f86:	78a9      	ldrb	r1, [r5, #2]
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   17f88:	7822      	ldrb	r2, [r4, #0]
   17f8a:	782b      	ldrb	r3, [r5, #0]
   17f8c:	4291      	cmp	r1, r2
   17f8e:	bf9c      	itt	ls
   17f90:	792a      	ldrbls	r2, [r5, #4]
		*idx = first;
   17f92:	7022      	strbls	r2, [r4, #0]
	}

	if (*idx == last) {
   17f94:	454a      	cmp	r2, r9
{
   17f96:	4682      	mov	sl, r0
   17f98:	d042      	beq.n	18020 <tx_cmplt_get+0xa4>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   17f9a:	fb12 f303 	smulbb	r3, r2, r3
	i = *idx + 1;
   17f9e:	3201      	adds	r2, #1
   17fa0:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
   17fa2:	4f25      	ldr	r7, [pc, #148]	; (18038 <tx_cmplt_get+0xbc>)
		i = 0U;
   17fa4:	4291      	cmp	r1, r2
   17fa6:	bf08      	it	eq
   17fa8:	2200      	moveq	r2, #0

	*idx = i;
   17faa:	7022      	strb	r2, [r4, #0]
				    first);
	if (!tx) {
		return 0;
	}

	*handle = tx->handle;
   17fac:	5afa      	ldrh	r2, [r7, r3]
   17fae:	8002      	strh	r2, [r0, #0]
	cmplt = 0U;
   17fb0:	2600      	movs	r6, #0
	p = (void *)(fifo + (*idx) * size);
   17fb2:	443b      	add	r3, r7
   17fb4:	f04f 0b01 	mov.w	fp, #1
   17fb8:	f04f 0802 	mov.w	r8, #2
   17fbc:	e021      	b.n	18002 <tx_cmplt_get+0x86>
		struct node_tx *node_tx;
		struct pdu_data *p;

		node_tx = tx->node;
		p = (void *)node_tx->pdu;
		if (!node_tx || (node_tx == (void *)1) ||
   17fbe:	b362      	cbz	r2, 1801a <tx_cmplt_get+0x9e>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   17fc0:	7902      	ldrb	r2, [r0, #4]
   17fc2:	f002 0203 	and.w	r2, r2, #3
		    (((uint32_t)node_tx & ~3) &&
   17fc6:	3a01      	subs	r2, #1
   17fc8:	2a01      	cmp	r2, #1
   17fca:	d92d      	bls.n	18028 <tx_cmplt_get+0xac>
   17fcc:	f8c3 8004 	str.w	r8, [r3, #4]
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
			ll_tx_mem_release(node_tx);
   17fd0:	f002 fc98 	bl	1a904 <ll_tx_mem_release>
	if (*idx >= count) {
   17fd4:	7823      	ldrb	r3, [r4, #0]
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   17fd6:	78a9      	ldrb	r1, [r5, #2]
   17fd8:	7828      	ldrb	r0, [r5, #0]
   17fda:	4299      	cmp	r1, r3
   17fdc:	bf9c      	itt	ls
   17fde:	792b      	ldrbls	r3, [r5, #4]
		*idx = first;
   17fe0:	7023      	strbls	r3, [r4, #0]
	if (*idx == last) {
   17fe2:	4599      	cmp	r9, r3
   17fe4:	d01d      	beq.n	18022 <tx_cmplt_get+0xa6>
	i = *idx + 1;
   17fe6:	1c5a      	adds	r2, r3, #1
   17fe8:	b2d2      	uxtb	r2, r2
		i = 0U;
   17fea:	4291      	cmp	r1, r2
   17fec:	bf08      	it	eq
   17fee:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
   17ff0:	fb13 f300 	smulbb	r3, r3, r0
	*idx = i;
   17ff4:	7022      	strb	r2, [r4, #0]
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
   17ff6:	5af9      	ldrh	r1, [r7, r3]
   17ff8:	f8ba 2000 	ldrh.w	r2, [sl]
   17ffc:	4291      	cmp	r1, r2
	p = (void *)(fifo + (*idx) * size);
   17ffe:	443b      	add	r3, r7
   18000:	d10f      	bne.n	18022 <tx_cmplt_get+0xa6>
		node_tx = tx->node;
   18002:	6858      	ldr	r0, [r3, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   18004:	2801      	cmp	r0, #1
		    (((uint32_t)node_tx & ~3) &&
   18006:	f020 0203 	bic.w	r2, r0, #3
		if (!node_tx || (node_tx == (void *)1) ||
   1800a:	d8d8      	bhi.n	17fbe <tx_cmplt_get+0x42>
			cmplt++;
   1800c:	3601      	adds	r6, #1
   1800e:	b2f6      	uxtb	r6, r6
   18010:	f8c3 b004 	str.w	fp, [r3, #4]
		if (((uint32_t)node_tx & ~3)) {
   18014:	2a00      	cmp	r2, #0
   18016:	d0dd      	beq.n	17fd4 <tx_cmplt_get+0x58>
   18018:	e7da      	b.n	17fd0 <tx_cmplt_get+0x54>
   1801a:	f8c3 8004 	str.w	r8, [r3, #4]
   1801e:	e7d9      	b.n	17fd4 <tx_cmplt_get+0x58>
		return 0;
   18020:	2600      	movs	r6, #0

	return cmplt;
}
   18022:	4630      	mov	r0, r6
   18024:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
   18028:	3601      	adds	r6, #1
   1802a:	f8c3 b004 	str.w	fp, [r3, #4]
   1802e:	b2f6      	uxtb	r6, r6
		if (((uint32_t)node_tx & ~3)) {
   18030:	e7ce      	b.n	17fd0 <tx_cmplt_get+0x54>
   18032:	bf00      	nop
   18034:	200004a0 	.word	0x200004a0
   18038:	200004a8 	.word	0x200004a8

0001803c <rx_replenish>:
{
   1803c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (max > mem_link_rx.quota_pdu) {
   18040:	4f34      	ldr	r7, [pc, #208]	; (18114 <rx_replenish+0xd8>)
   18042:	883b      	ldrh	r3, [r7, #0]
   18044:	4298      	cmp	r0, r3
   18046:	d95c      	bls.n	18102 <rx_replenish+0xc6>
		max = mem_link_rx.quota_pdu;
   18048:	b2de      	uxtb	r6, r3
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1804a:	b34b      	cbz	r3, 180a0 <rx_replenish+0x64>
   1804c:	4d32      	ldr	r5, [pc, #200]	; (18118 <rx_replenish+0xdc>)
		link = mem_acquire(&mem_link_rx.free);
   1804e:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 1811c <rx_replenish+0xe0>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   18052:	796c      	ldrb	r4, [r5, #5]
		rx = mem_acquire(&mem_pdu_rx.free);
   18054:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 18120 <rx_replenish+0xe4>
	if (last == count) {
   18058:	78aa      	ldrb	r2, [r5, #2]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1805a:	792b      	ldrb	r3, [r5, #4]
	last = last + 1;
   1805c:	3401      	adds	r4, #1
   1805e:	b2e4      	uxtb	r4, r4
		last = 0U;
   18060:	42a2      	cmp	r2, r4
   18062:	bf08      	it	eq
   18064:	2400      	moveq	r4, #0
	if (last == first) {
   18066:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
   18068:	4640      	mov	r0, r8
   1806a:	d01b      	beq.n	180a4 <rx_replenish+0x68>
   1806c:	f7fd f8ba 	bl	151e4 <mem_acquire>
   18070:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   18072:	4648      	mov	r0, r9
		if (!link) {
   18074:	f1ba 0f00 	cmp.w	sl, #0
   18078:	d012      	beq.n	180a0 <rx_replenish+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
   1807a:	f7fd f8b3 	bl	151e4 <mem_acquire>
		if (!rx) {
   1807e:	2800      	cmp	r0, #0
   18080:	d041      	beq.n	18106 <rx_replenish+0xca>
		rx->link = link;
   18082:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   18086:	796a      	ldrb	r2, [r5, #5]
   18088:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1808a:	fb02 5303 	mla	r3, r2, r3, r5
   1808e:	6098      	str	r0, [r3, #8]
	mem_link_rx.quota_pdu += delta;
   18090:	883b      	ldrh	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   18092:	716c      	strb	r4, [r5, #5]
		max--;
   18094:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
   18096:	3b01      	subs	r3, #1
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   18098:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   1809c:	803b      	strh	r3, [r7, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1809e:	d1db      	bne.n	18058 <rx_replenish+0x1c>
}
   180a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while (mem_link_rx.quota_pdu &&
   180a4:	883b      	ldrh	r3, [r7, #0]
   180a6:	2b00      	cmp	r3, #0
   180a8:	d0fa      	beq.n	180a0 <rx_replenish+0x64>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   180aa:	4d1e      	ldr	r5, [pc, #120]	; (18124 <rx_replenish+0xe8>)
		link = mem_acquire(&mem_link_rx.free);
   180ac:	4e1b      	ldr	r6, [pc, #108]	; (1811c <rx_replenish+0xe0>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   180ae:	796c      	ldrb	r4, [r5, #5]
		rx = mem_acquire(&mem_pdu_rx.free);
   180b0:	f8df 806c 	ldr.w	r8, [pc, #108]	; 18120 <rx_replenish+0xe4>
		link->mem = NULL;
   180b4:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
   180b8:	78aa      	ldrb	r2, [r5, #2]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   180ba:	792b      	ldrb	r3, [r5, #4]
	last = last + 1;
   180bc:	3401      	adds	r4, #1
   180be:	b2e4      	uxtb	r4, r4
		last = 0U;
   180c0:	42a2      	cmp	r2, r4
   180c2:	bf08      	it	eq
   180c4:	2400      	moveq	r4, #0
	if (last == first) {
   180c6:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
   180c8:	4630      	mov	r0, r6
   180ca:	d0e9      	beq.n	180a0 <rx_replenish+0x64>
   180cc:	f7fd f88a 	bl	151e4 <mem_acquire>
   180d0:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   180d2:	4640      	mov	r0, r8
		if (!link) {
   180d4:	f1ba 0f00 	cmp.w	sl, #0
   180d8:	d0e2      	beq.n	180a0 <rx_replenish+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
   180da:	f7fd f883 	bl	151e4 <mem_acquire>
		if (!rx) {
   180de:	b190      	cbz	r0, 18106 <rx_replenish+0xca>
		link->mem = NULL;
   180e0:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
   180e4:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   180e8:	796a      	ldrb	r2, [r5, #5]
   180ea:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   180ec:	fb02 5303 	mla	r3, r2, r3, r5
   180f0:	6098      	str	r0, [r3, #8]
	mem_link_rx.quota_pdu += delta;
   180f2:	883b      	ldrh	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   180f4:	716c      	strb	r4, [r5, #5]
   180f6:	3b01      	subs	r3, #1
   180f8:	b29b      	uxth	r3, r3
   180fa:	803b      	strh	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
   180fc:	2b00      	cmp	r3, #0
   180fe:	d1db      	bne.n	180b8 <rx_replenish+0x7c>
   18100:	e7ce      	b.n	180a0 <rx_replenish+0x64>
   18102:	4606      	mov	r6, r0
   18104:	e7a2      	b.n	1804c <rx_replenish+0x10>
	mem_release(link, &mem_link_rx.free);
   18106:	4650      	mov	r0, sl
   18108:	4904      	ldr	r1, [pc, #16]	; (1811c <rx_replenish+0xe0>)
}
   1810a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	mem_release(link, &mem_link_rx.free);
   1810e:	f7fd b883 	b.w	15218 <mem_release>
   18112:	bf00      	nop
   18114:	2000197c 	.word	0x2000197c
   18118:	2000037c 	.word	0x2000037c
   1811c:	20001980 	.word	0x20001980
   18120:	200019cc 	.word	0x200019cc
   18124:	2000036c 	.word	0x2000036c

00018128 <ull_done>:
}
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
   18128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1812c:	4e3c      	ldr	r6, [pc, #240]	; (18220 <ull_done+0xf8>)
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
	if (ull_hdr) {
		LL_ASSERT(ull_ref_get(ull_hdr));
   1812e:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 18224 <ull_done+0xfc>
   18132:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 18228 <ull_done+0x100>
{
   18136:	b083      	sub	sp, #12
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   18138:	e9d6 0100 	ldrd	r0, r1, [r6]
   1813c:	aa01      	add	r2, sp, #4
   1813e:	f7fd f8bf 	bl	152c0 <memq_peek>
		if (link) {
   18142:	4604      	mov	r4, r0
   18144:	2800      	cmp	r0, #0
   18146:	d03e      	beq.n	181c6 <ull_done+0x9e>
			(void)memq_dequeue(memq_ull_done.tail,
   18148:	6870      	ldr	r0, [r6, #4]
   1814a:	2200      	movs	r2, #0
   1814c:	4631      	mov	r1, r6
   1814e:	f7fd f8bf 	bl	152d0 <memq_dequeue>
			rx_demux_event_done(link, done);
   18152:	9f01      	ldr	r7, [sp, #4]
	ull_hdr = done->param;
   18154:	69fd      	ldr	r5, [r7, #28]
	if (ull_hdr) {
   18156:	b135      	cbz	r5, 18166 <ull_done+0x3e>
	return hdr->ref;
   18158:	782b      	ldrb	r3, [r5, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
   1815a:	2b00      	cmp	r3, #0
   1815c:	d052      	beq.n	18204 <ull_done+0xdc>
	return hdr->ref--;
   1815e:	782b      	ldrb	r3, [r5, #0]
   18160:	3b01      	subs	r3, #1
   18162:	b2db      	uxtb	r3, r3
   18164:	702b      	strb	r3, [r5, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
   18166:	f897 3020 	ldrb.w	r3, [r7, #32]
   1816a:	b123      	cbz	r3, 18176 <ull_done+0x4e>
   1816c:	2b01      	cmp	r3, #1
   1816e:	d13b      	bne.n	181e8 <ull_done+0xc0>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
   18170:	4638      	mov	r0, r7
   18172:	f005 fe05 	bl	1dd80 <ull_conn_done>
		break;
	}

	/* Release done */
	done->extra.type = 0U;
	release = RXFIFO_RELEASE(done, link, done);
   18176:	4a2d      	ldr	r2, [pc, #180]	; (1822c <ull_done+0x104>)
	last = last + 1;
   18178:	7953      	ldrb	r3, [r2, #5]
	if (last == count) {
   1817a:	f892 c002 	ldrb.w	ip, [r2, #2]
   1817e:	7910      	ldrb	r0, [r2, #4]
	last = last + 1;
   18180:	3301      	adds	r3, #1
	done->extra.type = 0U;
   18182:	2100      	movs	r1, #0
   18184:	b2db      	uxtb	r3, r3
		last = 0U;
   18186:	459c      	cmp	ip, r3
   18188:	bf08      	it	eq
   1818a:	460b      	moveq	r3, r1
	if (last == first) {
   1818c:	4298      	cmp	r0, r3
   1818e:	f887 1020 	strb.w	r1, [r7, #32]
	release = RXFIFO_RELEASE(done, link, done);
   18192:	7811      	ldrb	r1, [r2, #0]
   18194:	d01a      	beq.n	181cc <ull_done+0xa4>

	if (!mfifo_enqueue_idx_get(n, f, *l, &idx)) {
		return NULL;
	}

	rx->link = link;
   18196:	603c      	str	r4, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   18198:	7950      	ldrb	r0, [r2, #5]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1819a:	fb00 2101 	mla	r1, r0, r1, r2
   1819e:	608f      	str	r7, [r1, #8]
	*last = idx; /* Commit: Update write index */
   181a0:	7153      	strb	r3, [r2, #5]
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   181a2:	2d00      	cmp	r5, #0
   181a4:	d0c8      	beq.n	18138 <ull_done+0x10>
	return hdr->ref;
   181a6:	782b      	ldrb	r3, [r5, #0]
   181a8:	2b00      	cmp	r3, #0
   181aa:	d1c5      	bne.n	18138 <ull_done+0x10>
   181ac:	696b      	ldr	r3, [r5, #20]
   181ae:	2b00      	cmp	r3, #0
   181b0:	d0c2      	beq.n	18138 <ull_done+0x10>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   181b2:	69a8      	ldr	r0, [r5, #24]
   181b4:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   181b6:	e9d6 0100 	ldrd	r0, r1, [r6]
   181ba:	aa01      	add	r2, sp, #4
   181bc:	f7fd f880 	bl	152c0 <memq_peek>
		if (link) {
   181c0:	4604      	mov	r4, r0
   181c2:	2800      	cmp	r0, #0
   181c4:	d1c0      	bne.n	18148 <ull_done+0x20>
}
   181c6:	b003      	add	sp, #12
   181c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(release == done);
   181cc:	4918      	ldr	r1, [pc, #96]	; (18230 <ull_done+0x108>)
   181ce:	4819      	ldr	r0, [pc, #100]	; (18234 <ull_done+0x10c>)
   181d0:	f44f 632c 	mov.w	r3, #2752	; 0xac0
   181d4:	4642      	mov	r2, r8
   181d6:	f00f f9ad 	bl	27534 <assert_print>
   181da:	4040      	eors	r0, r0
   181dc:	f380 8811 	msr	BASEPRI, r0
   181e0:	f04f 0003 	mov.w	r0, #3
   181e4:	df02      	svc	2
   181e6:	e7dc      	b.n	181a2 <ull_done+0x7a>
		LL_ASSERT(0);
   181e8:	4913      	ldr	r1, [pc, #76]	; (18238 <ull_done+0x110>)
   181ea:	4812      	ldr	r0, [pc, #72]	; (18234 <ull_done+0x10c>)
   181ec:	f640 23b9 	movw	r3, #2745	; 0xab9
   181f0:	4642      	mov	r2, r8
   181f2:	f00f f99f 	bl	27534 <assert_print>
   181f6:	4040      	eors	r0, r0
   181f8:	f380 8811 	msr	BASEPRI, r0
   181fc:	f04f 0003 	mov.w	r0, #3
   18200:	df02      	svc	2
		break;
   18202:	e7b8      	b.n	18176 <ull_done+0x4e>
		LL_ASSERT(ull_ref_get(ull_hdr));
   18204:	480b      	ldr	r0, [pc, #44]	; (18234 <ull_done+0x10c>)
   18206:	f640 2362 	movw	r3, #2658	; 0xa62
   1820a:	4642      	mov	r2, r8
   1820c:	4649      	mov	r1, r9
   1820e:	f00f f991 	bl	27534 <assert_print>
   18212:	4040      	eors	r0, r0
   18214:	f380 8811 	msr	BASEPRI, r0
   18218:	f04f 0003 	mov.w	r0, #3
   1821c:	df02      	svc	2
   1821e:	e79e      	b.n	1815e <ull_done+0x36>
   18220:	20001bb4 	.word	0x20001bb4
   18224:	0002fa04 	.word	0x0002fa04
   18228:	0002fa48 	.word	0x0002fa48
   1822c:	20000350 	.word	0x20000350
   18230:	0002fa60 	.word	0x0002fa60
   18234:	0002f8a0 	.word	0x0002f8a0
   18238:	0002f900 	.word	0x0002f900

0001823c <rx_demux>:
{
   1823c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18240:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 183f0 <rx_demux+0x1b4>
	k_sem_give(sem_recv);
   18244:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 183f4 <rx_demux+0x1b8>
		LL_ASSERT(0);
   18248:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 183f8 <rx_demux+0x1bc>
   1824c:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 183fc <rx_demux+0x1c0>
{
   18250:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   18252:	e9d8 0100 	ldrd	r0, r1, [r8]
   18256:	aa03      	add	r2, sp, #12
   18258:	f7fd f832 	bl	152c0 <memq_peek>
		if (link) {
   1825c:	4605      	mov	r5, r0
   1825e:	2800      	cmp	r0, #0
   18260:	d035      	beq.n	182ce <rx_demux+0x92>
			LL_ASSERT(rx);
   18262:	9b03      	ldr	r3, [sp, #12]
   18264:	2b00      	cmp	r3, #0
   18266:	f000 80a6 	beq.w	183b6 <rx_demux+0x17a>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   1826a:	7818      	ldrb	r0, [r3, #0]
   1826c:	aa04      	add	r2, sp, #16
   1826e:	a902      	add	r1, sp, #8
   18270:	f006 f83c 	bl	1e2ec <ull_conn_ack_by_last_peek>
			if (link_tx) {
   18274:	4604      	mov	r4, r0
   18276:	2800      	cmp	r0, #0
   18278:	d055      	beq.n	18326 <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   1827a:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   1827e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   18282:	780f      	ldrb	r7, [r1, #0]
   18284:	f8ad 200a 	strh.w	r2, [sp, #10]
   18288:	ae05      	add	r6, sp, #20
   1828a:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   1828c:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   18290:	f006 f846 	bl	1e320 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   18294:	4621      	mov	r1, r4
   18296:	9a05      	ldr	r2, [sp, #20]
   18298:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   1829c:	f006 f88a 	bl	1e3b4 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   182a0:	4620      	mov	r0, r4
   182a2:	f005 fffb 	bl	1e29c <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   182a6:	4632      	mov	r2, r6
   182a8:	4629      	mov	r1, r5
   182aa:	4638      	mov	r0, r7
   182ac:	f006 f81e 	bl	1e2ec <ull_conn_ack_by_last_peek>
	} while (link);
   182b0:	4604      	mov	r4, r0
   182b2:	2800      	cmp	r0, #0
   182b4:	d1ec      	bne.n	18290 <rx_demux+0x54>
	k_sem_give(sem_recv);
   182b6:	f8d9 0000 	ldr.w	r0, [r9]
   182ba:	f00d fd5d 	bl	25d78 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   182be:	e9d8 0100 	ldrd	r0, r1, [r8]
   182c2:	aa03      	add	r2, sp, #12
   182c4:	f7fc fffc 	bl	152c0 <memq_peek>
		if (link) {
   182c8:	4605      	mov	r5, r0
   182ca:	2800      	cmp	r0, #0
   182cc:	d1c9      	bne.n	18262 <rx_demux+0x26>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   182ce:	aa04      	add	r2, sp, #16
   182d0:	a902      	add	r1, sp, #8
   182d2:	f10d 0007 	add.w	r0, sp, #7
   182d6:	f005 ffed 	bl	1e2b4 <ull_conn_ack_peek>
			if (link) {
   182da:	4604      	mov	r4, r0
   182dc:	2800      	cmp	r0, #0
   182de:	d067      	beq.n	183b0 <rx_demux+0x174>
				rx_demux_conn_tx_ack(ack_last, handle,
   182e0:	9b04      	ldr	r3, [sp, #16]
   182e2:	9305      	str	r3, [sp, #20]
   182e4:	f89d 7007 	ldrb.w	r7, [sp, #7]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   182e8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   182ec:	f8ad 300a 	strh.w	r3, [sp, #10]
   182f0:	ae05      	add	r6, sp, #20
   182f2:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   182f6:	f006 f813 	bl	1e320 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   182fa:	4621      	mov	r1, r4
   182fc:	9a05      	ldr	r2, [sp, #20]
   182fe:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   18302:	f006 f857 	bl	1e3b4 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   18306:	4620      	mov	r0, r4
   18308:	f005 ffc8 	bl	1e29c <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   1830c:	4632      	mov	r2, r6
   1830e:	4629      	mov	r1, r5
   18310:	4638      	mov	r0, r7
   18312:	f005 ffeb 	bl	1e2ec <ull_conn_ack_by_last_peek>
	} while (link);
   18316:	4604      	mov	r4, r0
   18318:	2800      	cmp	r0, #0
   1831a:	d1ec      	bne.n	182f6 <rx_demux+0xba>
	k_sem_give(sem_recv);
   1831c:	f8d9 0000 	ldr.w	r0, [r9]
   18320:	f00d fd2a 	bl	25d78 <z_impl_k_sem_give>
			if (nack) {
   18324:	e7cb      	b.n	182be <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
   18326:	9b03      	ldr	r3, [sp, #12]
   18328:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   1832a:	791b      	ldrb	r3, [r3, #4]
   1832c:	3b01      	subs	r3, #1
   1832e:	2b17      	cmp	r3, #23
   18330:	d80d      	bhi.n	1834e <rx_demux+0x112>
   18332:	e8df f003 	tbb	[pc, r3]
   18336:	0c1a      	.short	0x0c1a
   18338:	0c0c0c38 	.word	0x0c0c0c38
   1833c:	0c0c0c0c 	.word	0x0c0c0c0c
   18340:	0c0c0c0c 	.word	0x0c0c0c0c
   18344:	0c0c0c0c 	.word	0x0c0c0c0c
   18348:	0c0c0c0c 	.word	0x0c0c0c0c
   1834c:	1a2d      	.short	0x1a2d
		LL_ASSERT(0);
   1834e:	482c      	ldr	r0, [pc, #176]	; (18400 <rx_demux+0x1c4>)
   18350:	f640 234f 	movw	r3, #2639	; 0xa4f
   18354:	4652      	mov	r2, sl
   18356:	4659      	mov	r1, fp
   18358:	f00f f8ec 	bl	27534 <assert_print>
   1835c:	4040      	eors	r0, r0
   1835e:	f380 8811 	msr	BASEPRI, r0
   18362:	f04f 0003 	mov.w	r0, #3
   18366:	df02      	svc	2
			if (nack) {
   18368:	e773      	b.n	18252 <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   1836a:	4921      	ldr	r1, [pc, #132]	; (183f0 <rx_demux+0x1b4>)
   1836c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   18370:	2200      	movs	r2, #0
   18372:	f7fc ffad 	bl	152d0 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   18376:	4b23      	ldr	r3, [pc, #140]	; (18404 <rx_demux+0x1c8>)
		ll_rx_put(link, rx);
   18378:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1837a:	795b      	ldrb	r3, [r3, #5]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1837c:	4628      	mov	r0, r5
   1837e:	4a22      	ldr	r2, [pc, #136]	; (18408 <rx_demux+0x1cc>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   18380:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   18382:	f7fc ff93 	bl	152ac <memq_enqueue>
	k_sem_give(sem_recv);
   18386:	f8d9 0000 	ldr.w	r0, [r9]
   1838a:	f00d fcf5 	bl	25d78 <z_impl_k_sem_give>
			if (nack) {
   1838e:	e796      	b.n	182be <rx_demux+0x82>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   18390:	4917      	ldr	r1, [pc, #92]	; (183f0 <rx_demux+0x1b4>)
   18392:	f8d8 0004 	ldr.w	r0, [r8, #4]
   18396:	2200      	movs	r2, #0
   18398:	f7fc ff9a 	bl	152d0 <memq_dequeue>
		ull_conn_setup(link, rx);
   1839c:	9905      	ldr	r1, [sp, #20]
   1839e:	4628      	mov	r0, r5
   183a0:	f002 fdda 	bl	1af58 <ull_conn_setup>
			if (nack) {
   183a4:	e755      	b.n	18252 <rx_demux+0x16>
		nack = ull_conn_rx(link, (void *)&rx);
   183a6:	a905      	add	r1, sp, #20
   183a8:	4628      	mov	r0, r5
   183aa:	f002 fdfd 	bl	1afa8 <ull_conn_rx>
		if (nack) {
   183ae:	b188      	cbz	r0, 183d4 <rx_demux+0x198>
}
   183b0:	b007      	add	sp, #28
   183b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
   183b6:	4915      	ldr	r1, [pc, #84]	; (1840c <rx_demux+0x1d0>)
   183b8:	4811      	ldr	r0, [pc, #68]	; (18400 <rx_demux+0x1c4>)
   183ba:	f640 03fd 	movw	r3, #2301	; 0x8fd
   183be:	4652      	mov	r2, sl
   183c0:	f00f f8b8 	bl	27534 <assert_print>
   183c4:	4040      	eors	r0, r0
   183c6:	f380 8811 	msr	BASEPRI, r0
   183ca:	f04f 0003 	mov.w	r0, #3
   183ce:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   183d0:	9b03      	ldr	r3, [sp, #12]
   183d2:	e74a      	b.n	1826a <rx_demux+0x2e>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   183d4:	4906      	ldr	r1, [pc, #24]	; (183f0 <rx_demux+0x1b4>)
   183d6:	4602      	mov	r2, r0
   183d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
   183dc:	f7fc ff78 	bl	152d0 <memq_dequeue>
		if (rx) {
   183e0:	9905      	ldr	r1, [sp, #20]
   183e2:	2900      	cmp	r1, #0
   183e4:	f43f af35 	beq.w	18252 <rx_demux+0x16>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   183e8:	4b06      	ldr	r3, [pc, #24]	; (18404 <rx_demux+0x1c8>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   183ea:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
   183ec:	795b      	ldrb	r3, [r3, #5]
   183ee:	e7c6      	b.n	1837e <rx_demux+0x142>
   183f0:	20001bbc 	.word	0x20001bbc
   183f4:	20001bc4 	.word	0x20001bc4
   183f8:	0002fa04 	.word	0x0002fa04
   183fc:	0002f900 	.word	0x0002f900
   18400:	0002f8a0 	.word	0x0002f8a0
   18404:	200004a0 	.word	0x200004a0
   18408:	20001bb0 	.word	0x20001bb0
   1840c:	0002fa70 	.word	0x0002fa70

00018410 <ll_rx_get>:
{
   18410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18414:	4c31      	ldr	r4, [pc, #196]	; (184dc <ll_rx_get+0xcc>)
	mem_release(link, &mem_link_rx.free);
   18416:	4f32      	ldr	r7, [pc, #200]	; (184e0 <ll_rx_get+0xd0>)
   18418:	4e32      	ldr	r6, [pc, #200]	; (184e4 <ll_rx_get+0xd4>)
{
   1841a:	b085      	sub	sp, #20
   1841c:	4689      	mov	r9, r1
   1841e:	9001      	str	r0, [sp, #4]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   18420:	f104 0a04 	add.w	sl, r4, #4
	mem_release(link, &mem_link_rx.free);
   18424:	f107 0b04 	add.w	fp, r7, #4
	*node_rx = NULL;
   18428:	9a01      	ldr	r2, [sp, #4]
   1842a:	2300      	movs	r3, #0
   1842c:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   1842e:	e9d6 0100 	ldrd	r0, r1, [r6]
   18432:	aa03      	add	r2, sp, #12
   18434:	f7fc ff44 	bl	152c0 <memq_peek>
	if (link) {
   18438:	4605      	mov	r5, r0
   1843a:	2800      	cmp	r0, #0
   1843c:	d03f      	beq.n	184be <ll_rx_get+0xae>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   1843e:	9b03      	ldr	r3, [sp, #12]
   18440:	4651      	mov	r1, sl
   18442:	781a      	ldrb	r2, [r3, #0]
   18444:	4648      	mov	r0, r9
   18446:	f7ff fd99 	bl	17f7c <tx_cmplt_get>
		if (!cmplt) {
   1844a:	2800      	cmp	r0, #0
   1844c:	d13c      	bne.n	184c8 <ll_rx_get+0xb8>
			f = mfifo_tx_ack.f;
   1844e:	7923      	ldrb	r3, [r4, #4]
   18450:	f88d 3009 	strb.w	r3, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   18454:	7962      	ldrb	r2, [r4, #5]
   18456:	4680      	mov	r8, r0
   18458:	f10d 0109 	add.w	r1, sp, #9
   1845c:	f10d 000a 	add.w	r0, sp, #10
   18460:	f7ff fd8c 	bl	17f7c <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
   18464:	ea48 0200 	orr.w	r2, r8, r0
   18468:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   1846c:	d1f2      	bne.n	18454 <ll_rx_get+0x44>
			} else if (rx->type == NODE_RX_TYPE_RELEASE) {
   1846e:	9b03      	ldr	r3, [sp, #12]
   18470:	7919      	ldrb	r1, [r3, #4]
   18472:	2901      	cmp	r1, #1
   18474:	d12b      	bne.n	184ce <ll_rx_get+0xbe>
	(void)memq_dequeue(memq_ll_rx.tail,
   18476:	491b      	ldr	r1, [pc, #108]	; (184e4 <ll_rx_get+0xd4>)
   18478:	6870      	ldr	r0, [r6, #4]
   1847a:	f7fc ff29 	bl	152d0 <memq_dequeue>
	mem_release(link, &mem_link_rx.free);
   1847e:	4659      	mov	r1, fp
   18480:	4628      	mov	r0, r5
   18482:	f7fc fec9 	bl	15218 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   18486:	883b      	ldrh	r3, [r7, #0]
   18488:	2b04      	cmp	r3, #4
   1848a:	d809      	bhi.n	184a0 <ll_rx_get+0x90>
	mem_release(node_rx, &mem_pdu_rx.free);
   1848c:	9803      	ldr	r0, [sp, #12]
   1848e:	4916      	ldr	r1, [pc, #88]	; (184e8 <ll_rx_get+0xd8>)
	mem_link_rx.quota_pdu += delta;
   18490:	3301      	adds	r3, #1
   18492:	803b      	strh	r3, [r7, #0]
	mem_release(node_rx, &mem_pdu_rx.free);
   18494:	f7fc fec0 	bl	15218 <mem_release>
	rx_replenish(1U);
   18498:	2001      	movs	r0, #1
   1849a:	f7ff fdcf 	bl	1803c <rx_replenish>
				goto ll_rx_get_again;
   1849e:	e7c3      	b.n	18428 <ll_rx_get+0x18>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   184a0:	4a12      	ldr	r2, [pc, #72]	; (184ec <ll_rx_get+0xdc>)
   184a2:	4913      	ldr	r1, [pc, #76]	; (184f0 <ll_rx_get+0xe0>)
   184a4:	4813      	ldr	r0, [pc, #76]	; (184f4 <ll_rx_get+0xe4>)
   184a6:	f240 6327 	movw	r3, #1575	; 0x627
   184aa:	f00f f843 	bl	27534 <assert_print>
   184ae:	4040      	eors	r0, r0
   184b0:	f380 8811 	msr	BASEPRI, r0
   184b4:	f04f 0003 	mov.w	r0, #3
   184b8:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   184ba:	883b      	ldrh	r3, [r7, #0]
   184bc:	e7e6      	b.n	1848c <ll_rx_get+0x7c>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   184be:	7962      	ldrb	r2, [r4, #5]
   184c0:	490d      	ldr	r1, [pc, #52]	; (184f8 <ll_rx_get+0xe8>)
   184c2:	4648      	mov	r0, r9
   184c4:	f7ff fd5a 	bl	17f7c <tx_cmplt_get>
}
   184c8:	b005      	add	sp, #20
   184ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*node_rx = rx;
   184ce:	9901      	ldr	r1, [sp, #4]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   184d0:	4610      	mov	r0, r2
			*node_rx = rx;
   184d2:	600b      	str	r3, [r1, #0]
}
   184d4:	b005      	add	sp, #20
   184d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184da:	bf00      	nop
   184dc:	200004a0 	.word	0x200004a0
   184e0:	2000197c 	.word	0x2000197c
   184e4:	20001bac 	.word	0x20001bac
   184e8:	200019cc 	.word	0x200019cc
   184ec:	0002fa04 	.word	0x0002fa04
   184f0:	0002fa74 	.word	0x0002fa74
   184f4:	0002f8a0 	.word	0x0002f8a0
   184f8:	200004a4 	.word	0x200004a4

000184fc <ll_rx_dequeue>:
{
   184fc:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   184fe:	495d      	ldr	r1, [pc, #372]	; (18674 <ll_rx_dequeue+0x178>)
{
   18500:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   18502:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   18504:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   18506:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   18508:	aa01      	add	r2, sp, #4
   1850a:	f7fc fee1 	bl	152d0 <memq_dequeue>
	LL_ASSERT(link);
   1850e:	4604      	mov	r4, r0
   18510:	2800      	cmp	r0, #0
   18512:	d063      	beq.n	185dc <ll_rx_dequeue+0xe0>
	mem_release(link, &mem_link_rx.free);
   18514:	4958      	ldr	r1, [pc, #352]	; (18678 <ll_rx_dequeue+0x17c>)
   18516:	4620      	mov	r0, r4
   18518:	f7fc fe7e 	bl	15218 <mem_release>
	switch (rx->type) {
   1851c:	9a01      	ldr	r2, [sp, #4]
   1851e:	7913      	ldrb	r3, [r2, #4]
   18520:	2b1d      	cmp	r3, #29
   18522:	d810      	bhi.n	18546 <ll_rx_dequeue+0x4a>
   18524:	e8df f003 	tbb	[pc, r3]
   18528:	1e0f0f1e 	.word	0x1e0f0f1e
   1852c:	0f0f0f0f 	.word	0x0f0f0f0f
   18530:	0f0f0f0f 	.word	0x0f0f0f0f
   18534:	0f0f0f0f 	.word	0x0f0f0f0f
   18538:	0f0f0f0f 	.word	0x0f0f0f0f
   1853c:	2f0f0f0f 	.word	0x2f0f0f0f
   18540:	1e1e1e1e 	.word	0x1e1e1e1e
   18544:	1e1e      	.short	0x1e1e
		LL_ASSERT(0);
   18546:	4a4d      	ldr	r2, [pc, #308]	; (1867c <ll_rx_dequeue+0x180>)
   18548:	494d      	ldr	r1, [pc, #308]	; (18680 <ll_rx_dequeue+0x184>)
   1854a:	484e      	ldr	r0, [pc, #312]	; (18684 <ll_rx_dequeue+0x188>)
   1854c:	f240 43e6 	movw	r3, #1254	; 0x4e6
   18550:	f00e fff0 	bl	27534 <assert_print>
   18554:	4040      	eors	r0, r0
   18556:	f380 8811 	msr	BASEPRI, r0
   1855a:	f04f 0003 	mov.w	r0, #3
   1855e:	df02      	svc	2
}
   18560:	b002      	add	sp, #8
   18562:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   18564:	2b00      	cmp	r3, #0
   18566:	d1fb      	bne.n	18560 <ll_rx_dequeue+0x64>
   18568:	4a44      	ldr	r2, [pc, #272]	; (1867c <ll_rx_dequeue+0x180>)
   1856a:	4947      	ldr	r1, [pc, #284]	; (18688 <ll_rx_dequeue+0x18c>)
   1856c:	4845      	ldr	r0, [pc, #276]	; (18684 <ll_rx_dequeue+0x188>)
   1856e:	f240 43e2 	movw	r3, #1250	; 0x4e2
   18572:	f00e ffdf 	bl	27534 <assert_print>
   18576:	4040      	eors	r0, r0
   18578:	f380 8811 	msr	BASEPRI, r0
   1857c:	f04f 0003 	mov.w	r0, #3
   18580:	df02      	svc	2
}
   18582:	b002      	add	sp, #8
   18584:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   18586:	7f13      	ldrb	r3, [r2, #28]
   18588:	2b3c      	cmp	r3, #60	; 0x3c
   1858a:	d035      	beq.n	185f8 <ll_rx_dequeue+0xfc>
   1858c:	7f53      	ldrb	r3, [r2, #29]
   1858e:	b1bb      	cbz	r3, 185c0 <ll_rx_dequeue+0xc4>
			adv = HDR_LLL2ULL(lll);
   18590:	6893      	ldr	r3, [r2, #8]
   18592:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
   18594:	6e60      	ldr	r0, [r4, #100]	; 0x64
   18596:	b120      	cbz	r0, 185a2 <ll_rx_dequeue+0xa6>
					adv->node_rx_cc_free = NULL;
   18598:	2300      	movs	r3, #0
	mem_release(node_rx, &mem_pdu_rx.free);
   1859a:	493c      	ldr	r1, [pc, #240]	; (1868c <ll_rx_dequeue+0x190>)
					adv->node_rx_cc_free = NULL;
   1859c:	6663      	str	r3, [r4, #100]	; 0x64
	mem_release(node_rx, &mem_pdu_rx.free);
   1859e:	f7fc fe3b 	bl	15218 <mem_release>
			adv->is_enabled = 0U;
   185a2:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   185a6:	f36f 0300 	bfc	r3, #0, #1
   185aa:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
			      ull_adv_is_enabled(0));
   185ae:	2000      	movs	r0, #0
   185b0:	f001 fa6a 	bl	19a88 <ull_adv_is_enabled>
			if (!bm) {
   185b4:	2800      	cmp	r0, #0
   185b6:	d1d3      	bne.n	18560 <ll_rx_dequeue+0x64>
				ull_filter_adv_scan_state_cb(0);
   185b8:	f006 fe90 	bl	1f2dc <ull_filter_adv_scan_state_cb>
}
   185bc:	b002      	add	sp, #8
   185be:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
   185c0:	4a2e      	ldr	r2, [pc, #184]	; (1867c <ll_rx_dequeue+0x180>)
   185c2:	492f      	ldr	r1, [pc, #188]	; (18680 <ll_rx_dequeue+0x184>)
   185c4:	482f      	ldr	r0, [pc, #188]	; (18684 <ll_rx_dequeue+0x188>)
   185c6:	f240 436f 	movw	r3, #1135	; 0x46f
   185ca:	f00e ffb3 	bl	27534 <assert_print>
   185ce:	4040      	eors	r0, r0
   185d0:	f380 8811 	msr	BASEPRI, r0
   185d4:	f04f 0003 	mov.w	r0, #3
   185d8:	df02      	svc	2
   185da:	e7e8      	b.n	185ae <ll_rx_dequeue+0xb2>
	LL_ASSERT(link);
   185dc:	4a27      	ldr	r2, [pc, #156]	; (1867c <ll_rx_dequeue+0x180>)
   185de:	492c      	ldr	r1, [pc, #176]	; (18690 <ll_rx_dequeue+0x194>)
   185e0:	4828      	ldr	r0, [pc, #160]	; (18684 <ll_rx_dequeue+0x188>)
   185e2:	f44f 736f 	mov.w	r3, #956	; 0x3bc
   185e6:	f00e ffa5 	bl	27534 <assert_print>
   185ea:	4040      	eors	r0, r0
   185ec:	f380 8811 	msr	BASEPRI, r0
   185f0:	f04f 0003 	mov.w	r0, #3
   185f4:	df02      	svc	2
   185f6:	e78d      	b.n	18514 <ll_rx_dequeue+0x18>
			lll = ftr->param;
   185f8:	6896      	ldr	r6, [r2, #8]
			adv = HDR_LLL2ULL(lll);
   185fa:	e9d6 4500 	ldrd	r4, r5, [r6]
				LL_ASSERT(conn_lll);
   185fe:	b1ed      	cbz	r5, 1863c <ll_rx_dequeue+0x140>
				LL_ASSERT(!conn_lll->link_tx_free);
   18600:	6dab      	ldr	r3, [r5, #88]	; 0x58
				lll->conn = NULL;
   18602:	2200      	movs	r2, #0
   18604:	6072      	str	r2, [r6, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
   18606:	b163      	cbz	r3, 18622 <ll_rx_dequeue+0x126>
   18608:	4a1c      	ldr	r2, [pc, #112]	; (1867c <ll_rx_dequeue+0x180>)
   1860a:	4922      	ldr	r1, [pc, #136]	; (18694 <ll_rx_dequeue+0x198>)
   1860c:	481d      	ldr	r0, [pc, #116]	; (18684 <ll_rx_dequeue+0x188>)
   1860e:	f240 4335 	movw	r3, #1077	; 0x435
   18612:	f00e ff8f 	bl	27534 <assert_print>
   18616:	4040      	eors	r0, r0
   18618:	f380 8811 	msr	BASEPRI, r0
   1861c:	f04f 0003 	mov.w	r0, #3
   18620:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   18622:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   18626:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1862a:	f7fc fe35 	bl	15298 <memq_deinit>
				LL_ASSERT(link);
   1862e:	4606      	mov	r6, r0
   18630:	b190      	cbz	r0, 18658 <ll_rx_dequeue+0x15c>
				ll_conn_release(conn);
   18632:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
   18634:	65ae      	str	r6, [r5, #88]	; 0x58
				ll_conn_release(conn);
   18636:	f002 f937 	bl	1a8a8 <ll_conn_release>
   1863a:	e7b2      	b.n	185a2 <ll_rx_dequeue+0xa6>
				LL_ASSERT(conn_lll);
   1863c:	4a0f      	ldr	r2, [pc, #60]	; (1867c <ll_rx_dequeue+0x180>)
   1863e:	4916      	ldr	r1, [pc, #88]	; (18698 <ll_rx_dequeue+0x19c>)
   18640:	4810      	ldr	r0, [pc, #64]	; (18684 <ll_rx_dequeue+0x188>)
   18642:	f240 4332 	movw	r3, #1074	; 0x432
   18646:	f00e ff75 	bl	27534 <assert_print>
   1864a:	4040      	eors	r0, r0
   1864c:	f380 8811 	msr	BASEPRI, r0
   18650:	f04f 0003 	mov.w	r0, #3
   18654:	df02      	svc	2
   18656:	e7d3      	b.n	18600 <ll_rx_dequeue+0x104>
				LL_ASSERT(link);
   18658:	4a08      	ldr	r2, [pc, #32]	; (1867c <ll_rx_dequeue+0x180>)
   1865a:	490d      	ldr	r1, [pc, #52]	; (18690 <ll_rx_dequeue+0x194>)
   1865c:	4809      	ldr	r0, [pc, #36]	; (18684 <ll_rx_dequeue+0x188>)
   1865e:	f44f 6387 	mov.w	r3, #1080	; 0x438
   18662:	f00e ff67 	bl	27534 <assert_print>
   18666:	4040      	eors	r0, r0
   18668:	f380 8811 	msr	BASEPRI, r0
   1866c:	f04f 0003 	mov.w	r0, #3
   18670:	df02      	svc	2
   18672:	e7de      	b.n	18632 <ll_rx_dequeue+0x136>
   18674:	20001bac 	.word	0x20001bac
   18678:	20001980 	.word	0x20001980
   1867c:	0002fa04 	.word	0x0002fa04
   18680:	0002f900 	.word	0x0002f900
   18684:	0002f8a0 	.word	0x0002f8a0
   18688:	0002fad4 	.word	0x0002fad4
   1868c:	200019cc 	.word	0x200019cc
   18690:	0002fda8 	.word	0x0002fda8
   18694:	0002fabc 	.word	0x0002fabc
   18698:	0002fab0 	.word	0x0002fab0

0001869c <ll_rx_mem_release>:
{
   1869c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   186a0:	6804      	ldr	r4, [r0, #0]
{
   186a2:	4680      	mov	r8, r0
	while (rx) {
   186a4:	b344      	cbz	r4, 186f8 <ll_rx_mem_release+0x5c>
			LL_ASSERT(0);
   186a6:	4f56      	ldr	r7, [pc, #344]	; (18800 <ll_rx_mem_release+0x164>)
   186a8:	f8df 9158 	ldr.w	r9, [pc, #344]	; 18804 <ll_rx_mem_release+0x168>
   186ac:	4e56      	ldr	r6, [pc, #344]	; (18808 <ll_rx_mem_release+0x16c>)
		rx = rx->next;
   186ae:	4625      	mov	r5, r4
   186b0:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   186b2:	792b      	ldrb	r3, [r5, #4]
   186b4:	2b1d      	cmp	r3, #29
   186b6:	d810      	bhi.n	186da <ll_rx_mem_release+0x3e>
   186b8:	e8df f003 	tbb	[pc, r3]
   186bc:	380f0f38 	.word	0x380f0f38
   186c0:	0f0f0f0f 	.word	0x0f0f0f0f
   186c4:	0f0f0f0f 	.word	0x0f0f0f0f
   186c8:	0f0f0f0f 	.word	0x0f0f0f0f
   186cc:	0f0f0f0f 	.word	0x0f0f0f0f
   186d0:	260f0f0f 	.word	0x260f0f0f
   186d4:	38383856 	.word	0x38383856
   186d8:	3838      	.short	0x3838
			LL_ASSERT(0);
   186da:	f240 631b 	movw	r3, #1563	; 0x61b
   186de:	463a      	mov	r2, r7
   186e0:	4649      	mov	r1, r9
   186e2:	4630      	mov	r0, r6
   186e4:	f00e ff26 	bl	27534 <assert_print>
   186e8:	4040      	eors	r0, r0
   186ea:	f380 8811 	msr	BASEPRI, r0
   186ee:	f04f 0003 	mov.w	r0, #3
   186f2:	df02      	svc	2
	while (rx) {
   186f4:	2c00      	cmp	r4, #0
   186f6:	d1da      	bne.n	186ae <ll_rx_mem_release+0x12>
	*node_rx = rx;
   186f8:	2300      	movs	r3, #0
   186fa:	f8c8 3000 	str.w	r3, [r8]
	rx_replenish(UINT8_MAX);
   186fe:	20ff      	movs	r0, #255	; 0xff
}
   18700:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_replenish(UINT8_MAX);
   18704:	f7ff bc9a 	b.w	1803c <rx_replenish>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   18708:	7f2b      	ldrb	r3, [r5, #28]
   1870a:	2b3c      	cmp	r3, #60	; 0x3c
   1870c:	d062      	beq.n	187d4 <ll_rx_mem_release+0x138>
				LL_ASSERT(!cc->status);
   1870e:	b1db      	cbz	r3, 18748 <ll_rx_mem_release+0xac>
   18710:	493e      	ldr	r1, [pc, #248]	; (1880c <ll_rx_mem_release+0x170>)
   18712:	f240 534a 	movw	r3, #1354	; 0x54a
   18716:	463a      	mov	r2, r7
   18718:	4630      	mov	r0, r6
   1871a:	f00e ff0b 	bl	27534 <assert_print>
   1871e:	4040      	eors	r0, r0
   18720:	f380 8811 	msr	BASEPRI, r0
   18724:	f04f 0003 	mov.w	r0, #3
   18728:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   1872a:	792b      	ldrb	r3, [r5, #4]
   1872c:	b963      	cbnz	r3, 18748 <ll_rx_mem_release+0xac>
   1872e:	4938      	ldr	r1, [pc, #224]	; (18810 <ll_rx_mem_release+0x174>)
   18730:	f240 539c 	movw	r3, #1436	; 0x59c
   18734:	463a      	mov	r2, r7
   18736:	4630      	mov	r0, r6
   18738:	f00e fefc 	bl	27534 <assert_print>
   1873c:	4040      	eors	r0, r0
   1873e:	f380 8811 	msr	BASEPRI, r0
   18742:	f04f 0003 	mov.w	r0, #3
   18746:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   18748:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 18814 <ll_rx_mem_release+0x178>
   1874c:	f8ba 3000 	ldrh.w	r3, [sl]
   18750:	2b04      	cmp	r3, #4
   18752:	d82f      	bhi.n	187b4 <ll_rx_mem_release+0x118>
	mem_link_rx.quota_pdu += delta;
   18754:	3301      	adds	r3, #1
	mem_release(node_rx, &mem_pdu_rx.free);
   18756:	4930      	ldr	r1, [pc, #192]	; (18818 <ll_rx_mem_release+0x17c>)
	mem_link_rx.quota_pdu += delta;
   18758:	f8aa 3000 	strh.w	r3, [sl]
	mem_release(node_rx, &mem_pdu_rx.free);
   1875c:	4628      	mov	r0, r5
   1875e:	f7fc fd5b 	bl	15218 <mem_release>
	while (rx) {
   18762:	2c00      	cmp	r4, #0
   18764:	d1a3      	bne.n	186ae <ll_rx_mem_release+0x12>
   18766:	e7c7      	b.n	186f8 <ll_rx_mem_release+0x5c>
			if (IS_ACL_HANDLE(rx_free->handle)) {
   18768:	88e8      	ldrh	r0, [r5, #6]
   1876a:	2800      	cmp	r0, #0
   1876c:	d1c2      	bne.n	186f4 <ll_rx_mem_release+0x58>
				conn = ll_conn_get(rx_free->handle);
   1876e:	f002 f8a9 	bl	1a8c4 <ll_conn_get>
				LL_ASSERT(!conn->lll.link_tx_free);
   18772:	6f43      	ldr	r3, [r0, #116]	; 0x74
				conn = ll_conn_get(rx_free->handle);
   18774:	4605      	mov	r5, r0
				LL_ASSERT(!conn->lll.link_tx_free);
   18776:	b163      	cbz	r3, 18792 <ll_rx_mem_release+0xf6>
   18778:	4928      	ldr	r1, [pc, #160]	; (1881c <ll_rx_mem_release+0x180>)
   1877a:	f240 630d 	movw	r3, #1549	; 0x60d
   1877e:	463a      	mov	r2, r7
   18780:	4630      	mov	r0, r6
   18782:	f00e fed7 	bl	27534 <assert_print>
   18786:	4040      	eors	r0, r0
   18788:	f380 8811 	msr	BASEPRI, r0
   1878c:	f04f 0003 	mov.w	r0, #3
   18790:	df02      	svc	2
				link = memq_deinit(&conn->lll.memq_tx.head,
   18792:	f105 0168 	add.w	r1, r5, #104	; 0x68
   18796:	f105 0064 	add.w	r0, r5, #100	; 0x64
   1879a:	f7fc fd7d 	bl	15298 <memq_deinit>
				LL_ASSERT(link);
   1879e:	4682      	mov	sl, r0
   187a0:	b300      	cbz	r0, 187e4 <ll_rx_mem_release+0x148>
				conn->lll.link_tx_free = link;
   187a2:	f8c5 a074 	str.w	sl, [r5, #116]	; 0x74
				ll_conn_release(conn);
   187a6:	4628      	mov	r0, r5
   187a8:	f002 f87e 	bl	1a8a8 <ll_conn_release>
	while (rx) {
   187ac:	2c00      	cmp	r4, #0
   187ae:	f47f af7e 	bne.w	186ae <ll_rx_mem_release+0x12>
   187b2:	e7a1      	b.n	186f8 <ll_rx_mem_release+0x5c>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   187b4:	491a      	ldr	r1, [pc, #104]	; (18820 <ll_rx_mem_release+0x184>)
   187b6:	f240 6327 	movw	r3, #1575	; 0x627
   187ba:	463a      	mov	r2, r7
   187bc:	4630      	mov	r0, r6
   187be:	f00e feb9 	bl	27534 <assert_print>
   187c2:	4040      	eors	r0, r0
   187c4:	f380 8811 	msr	BASEPRI, r0
   187c8:	f04f 0003 	mov.w	r0, #3
   187cc:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   187ce:	f8ba 3000 	ldrh.w	r3, [sl]
   187d2:	e7bf      	b.n	18754 <ll_rx_mem_release+0xb8>
	mem_release(node_rx, &mem_pdu_rx.free);
   187d4:	4910      	ldr	r1, [pc, #64]	; (18818 <ll_rx_mem_release+0x17c>)
   187d6:	4628      	mov	r0, r5
   187d8:	f7fc fd1e 	bl	15218 <mem_release>
	while (rx) {
   187dc:	2c00      	cmp	r4, #0
   187de:	f47f af66 	bne.w	186ae <ll_rx_mem_release+0x12>
   187e2:	e789      	b.n	186f8 <ll_rx_mem_release+0x5c>
				LL_ASSERT(link);
   187e4:	490f      	ldr	r1, [pc, #60]	; (18824 <ll_rx_mem_release+0x188>)
   187e6:	f44f 63c2 	mov.w	r3, #1552	; 0x610
   187ea:	463a      	mov	r2, r7
   187ec:	4630      	mov	r0, r6
   187ee:	f00e fea1 	bl	27534 <assert_print>
   187f2:	4040      	eors	r0, r0
   187f4:	f380 8811 	msr	BASEPRI, r0
   187f8:	f04f 0003 	mov.w	r0, #3
   187fc:	df02      	svc	2
   187fe:	e7d0      	b.n	187a2 <ll_rx_mem_release+0x106>
   18800:	0002fa04 	.word	0x0002fa04
   18804:	0002f900 	.word	0x0002f900
   18808:	0002f8a0 	.word	0x0002f8a0
   1880c:	0002faf4 	.word	0x0002faf4
   18810:	0002fb00 	.word	0x0002fb00
   18814:	2000197c 	.word	0x2000197c
   18818:	200019cc 	.word	0x200019cc
   1881c:	0002fb24 	.word	0x0002fb24
   18820:	0002fa74 	.word	0x0002fa74
   18824:	0002fda8 	.word	0x0002fda8

00018828 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   18828:	4801      	ldr	r0, [pc, #4]	; (18830 <ll_rx_link_alloc+0x8>)
   1882a:	f7fc bcdb 	b.w	151e4 <mem_acquire>
   1882e:	bf00      	nop
   18830:	20001980 	.word	0x20001980

00018834 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   18834:	4901      	ldr	r1, [pc, #4]	; (1883c <ll_rx_link_release+0x8>)
   18836:	f7fc bcef 	b.w	15218 <mem_release>
   1883a:	bf00      	nop
   1883c:	20001980 	.word	0x20001980

00018840 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   18840:	4801      	ldr	r0, [pc, #4]	; (18848 <ll_rx_alloc+0x8>)
   18842:	f7fc bccf 	b.w	151e4 <mem_acquire>
   18846:	bf00      	nop
   18848:	200019cc 	.word	0x200019cc

0001884c <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   1884c:	4901      	ldr	r1, [pc, #4]	; (18854 <ll_rx_release+0x8>)
   1884e:	f7fc bce3 	b.w	15218 <mem_release>
   18852:	bf00      	nop
   18854:	200019cc 	.word	0x200019cc

00018858 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   18858:	4b02      	ldr	r3, [pc, #8]	; (18864 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1885a:	4a03      	ldr	r2, [pc, #12]	; (18868 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1885c:	795b      	ldrb	r3, [r3, #5]
   1885e:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   18860:	f7fc bd24 	b.w	152ac <memq_enqueue>
   18864:	200004a0 	.word	0x200004a0
   18868:	20001bb0 	.word	0x20001bb0

0001886c <ll_rx_sched>:
	k_sem_give(sem_recv);
   1886c:	4b01      	ldr	r3, [pc, #4]	; (18874 <ll_rx_sched+0x8>)
   1886e:	6818      	ldr	r0, [r3, #0]
   18870:	f00d ba82 	b.w	25d78 <z_impl_k_sem_give>
   18874:	20001bc4 	.word	0x20001bc4

00018878 <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   18878:	4b0e      	ldr	r3, [pc, #56]	; (188b4 <ll_pdu_rx_alloc_peek+0x3c>)
   1887a:	7919      	ldrb	r1, [r3, #4]
   1887c:	795a      	ldrb	r2, [r3, #5]
	if (last >= first) {
   1887e:	4291      	cmp	r1, r2
   18880:	d80a      	bhi.n	18898 <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
   18882:	eba2 0c01 	sub.w	ip, r2, r1
   18886:	fa5f fc8c 	uxtb.w	ip, ip
   1888a:	4560      	cmp	r0, ip
   1888c:	d802      	bhi.n	18894 <ll_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   1888e:	4291      	cmp	r1, r2
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   18890:	7818      	ldrb	r0, [r3, #0]
   18892:	d10a      	bne.n	188aa <ll_pdu_rx_alloc_peek+0x32>
		return NULL;
   18894:	2000      	movs	r0, #0
}
   18896:	4770      	bx	lr
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   18898:	f8b3 c002 	ldrh.w	ip, [r3, #2]
		return count - first + last;
   1889c:	ebac 0c01 	sub.w	ip, ip, r1
   188a0:	4462      	add	r2, ip
   188a2:	b2d2      	uxtb	r2, r2
   188a4:	4290      	cmp	r0, r2
   188a6:	d8f5      	bhi.n	18894 <ll_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   188a8:	7818      	ldrb	r0, [r3, #0]
	return *((void **)(fifo + first * size));
   188aa:	fb01 3300 	mla	r3, r1, r0, r3
   188ae:	6898      	ldr	r0, [r3, #8]
   188b0:	4770      	bx	lr
   188b2:	bf00      	nop
   188b4:	2000036c 	.word	0x2000036c

000188b8 <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   188b8:	4b09      	ldr	r3, [pc, #36]	; (188e0 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   188ba:	7919      	ldrb	r1, [r3, #4]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   188bc:	795a      	ldrb	r2, [r3, #5]
   188be:	7818      	ldrb	r0, [r3, #0]
   188c0:	f893 c002 	ldrb.w	ip, [r3, #2]
   188c4:	428a      	cmp	r2, r1
   188c6:	d009      	beq.n	188dc <ll_pdu_rx_alloc+0x24>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   188c8:	1c4a      	adds	r2, r1, #1
   188ca:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   188cc:	fb01 3100 	mla	r1, r1, r0, r3
	if (_first == count) {
		_first = 0U;
   188d0:	4594      	cmp	ip, r2
   188d2:	bf08      	it	eq
   188d4:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   188d6:	6888      	ldr	r0, [r1, #8]
	}

	*first = _first; /* Write back read-index */
   188d8:	711a      	strb	r2, [r3, #4]

	return mem;
   188da:	4770      	bx	lr
		return NULL;
   188dc:	2000      	movs	r0, #0
}
   188de:	4770      	bx	lr
   188e0:	2000036c 	.word	0x2000036c

000188e4 <ll_tx_ack_put>:
{
   188e4:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   188e6:	4a15      	ldr	r2, [pc, #84]	; (1893c <ll_tx_ack_put+0x58>)
   188e8:	f892 c005 	ldrb.w	ip, [r2, #5]
	if (last == count) {
   188ec:	7894      	ldrb	r4, [r2, #2]
   188ee:	f892 e004 	ldrb.w	lr, [r2, #4]
   188f2:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
   188f4:	f10c 0301 	add.w	r3, ip, #1
   188f8:	b2db      	uxtb	r3, r3
		last = 0U;
   188fa:	429c      	cmp	r4, r3
   188fc:	bf08      	it	eq
   188fe:	2300      	moveq	r3, #0
	if (last == first) {
   18900:	459e      	cmp	lr, r3
   18902:	d00a      	beq.n	1891a <ll_tx_ack_put+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   18904:	fb1c fc05 	smulbb	ip, ip, r5
   18908:	f102 0e08 	add.w	lr, r2, #8
	tx->handle = handle;
   1890c:	f82e 000c 	strh.w	r0, [lr, ip]
   18910:	44f4      	add	ip, lr
	tx->node = node_tx;
   18912:	f8cc 1004 	str.w	r1, [ip, #4]
	*last = idx; /* Commit: Update write index */
   18916:	7153      	strb	r3, [r2, #5]
}
   18918:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(tx);
   1891a:	4a09      	ldr	r2, [pc, #36]	; (18940 <ll_tx_ack_put+0x5c>)
   1891c:	4909      	ldr	r1, [pc, #36]	; (18944 <ll_tx_ack_put+0x60>)
   1891e:	480a      	ldr	r0, [pc, #40]	; (18948 <ll_tx_ack_put+0x64>)
   18920:	f240 6379 	movw	r3, #1657	; 0x679
   18924:	f00e fe06 	bl	27534 <assert_print>
   18928:	4040      	eors	r0, r0
   1892a:	f380 8811 	msr	BASEPRI, r0
   1892e:	f04f 0003 	mov.w	r0, #3
   18932:	df02      	svc	2
	tx->handle = handle;
   18934:	2300      	movs	r3, #0
   18936:	801b      	strh	r3, [r3, #0]
   18938:	deff      	udf	#255	; 0xff
   1893a:	bf00      	nop
   1893c:	200004a0 	.word	0x200004a0
   18940:	0002fa04 	.word	0x0002fa04
   18944:	0002fd9c 	.word	0x0002fd9c
   18948:	0002f8a0 	.word	0x0002f8a0

0001894c <ll_timeslice_ticker_id_get>:
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   1894c:	2200      	movs	r2, #0
	*ticker_id = (TICKER_NODES - FLASH_TICKER_NODES);
   1894e:	2304      	movs	r3, #4
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   18950:	7002      	strb	r2, [r0, #0]
	*ticker_id = (TICKER_NODES - FLASH_TICKER_NODES);
   18952:	700b      	strb	r3, [r1, #0]
}
   18954:	4770      	bx	lr
   18956:	bf00      	nop

00018958 <ll_radio_state_abort>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   18958:	2200      	movs	r2, #0
{
   1895a:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   1895c:	4611      	mov	r1, r2
   1895e:	4b0a      	ldr	r3, [pc, #40]	; (18988 <ll_radio_state_abort+0x30>)
   18960:	2001      	movs	r0, #1
   18962:	f7fc fd17 	bl	15394 <mayfly_enqueue>
	LL_ASSERT(!ret);
   18966:	b900      	cbnz	r0, 1896a <ll_radio_state_abort+0x12>
}
   18968:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   1896a:	4a08      	ldr	r2, [pc, #32]	; (1898c <ll_radio_state_abort+0x34>)
   1896c:	4908      	ldr	r1, [pc, #32]	; (18990 <ll_radio_state_abort+0x38>)
   1896e:	4809      	ldr	r0, [pc, #36]	; (18994 <ll_radio_state_abort+0x3c>)
   18970:	f240 6391 	movw	r3, #1681	; 0x691
   18974:	f00e fdde 	bl	27534 <assert_print>
   18978:	4040      	eors	r0, r0
   1897a:	f380 8811 	msr	BASEPRI, r0
   1897e:	f04f 0003 	mov.w	r0, #3
   18982:	df02      	svc	2
}
   18984:	bd08      	pop	{r3, pc}
   18986:	bf00      	nop
   18988:	20000518 	.word	0x20000518
   1898c:	0002fa04 	.word	0x0002fa04
   18990:	0002fb3c 	.word	0x0002fb3c
   18994:	0002f8a0 	.word	0x0002f8a0

00018998 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   18998:	f030 0302 	bics.w	r3, r0, #2
{
   1899c:	b510      	push	{r4, lr}
   1899e:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   189a0:	d002      	beq.n	189a8 <ull_ticker_status_take+0x10>
   189a2:	680b      	ldr	r3, [r1, #0]
   189a4:	2b02      	cmp	r3, #2
   189a6:	d008      	beq.n	189ba <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
   189a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   189ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   189b0:	4809      	ldr	r0, [pc, #36]	; (189d8 <ull_ticker_status_take+0x40>)
   189b2:	f00d fa07 	bl	25dc4 <z_impl_k_sem_take>
	return *ret_cb;
   189b6:	6820      	ldr	r0, [r4, #0]
}
   189b8:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   189ba:	4a08      	ldr	r2, [pc, #32]	; (189dc <ull_ticker_status_take+0x44>)
   189bc:	4908      	ldr	r1, [pc, #32]	; (189e0 <ull_ticker_status_take+0x48>)
   189be:	4809      	ldr	r0, [pc, #36]	; (189e4 <ull_ticker_status_take+0x4c>)
   189c0:	f240 63ad 	movw	r3, #1709	; 0x6ad
   189c4:	f00e fdb6 	bl	27534 <assert_print>
   189c8:	4040      	eors	r0, r0
   189ca:	f380 8811 	msr	BASEPRI, r0
   189ce:	f04f 0003 	mov.w	r0, #3
   189d2:	df02      	svc	2
   189d4:	e7e8      	b.n	189a8 <ull_ticker_status_take+0x10>
   189d6:	bf00      	nop
   189d8:	20001bc8 	.word	0x20001bc8
   189dc:	0002fa04 	.word	0x0002fa04
   189e0:	0002fb44 	.word	0x0002fb44
   189e4:	0002f8a0 	.word	0x0002f8a0

000189e8 <ull_disable_mark>:
	if (!*m) {
   189e8:	4a03      	ldr	r2, [pc, #12]	; (189f8 <ull_disable_mark+0x10>)
{
   189ea:	4603      	mov	r3, r0
	if (!*m) {
   189ec:	6810      	ldr	r0, [r2, #0]
   189ee:	b100      	cbz	r0, 189f2 <ull_disable_mark+0xa>
}
   189f0:	4770      	bx	lr
		*m = param;
   189f2:	6013      	str	r3, [r2, #0]
   189f4:	4618      	mov	r0, r3
}
   189f6:	4770      	bx	lr
   189f8:	20001948 	.word	0x20001948

000189fc <ull_disable_unmark>:
	if (*m && *m == param) {
   189fc:	4a04      	ldr	r2, [pc, #16]	; (18a10 <ull_disable_unmark+0x14>)
   189fe:	6813      	ldr	r3, [r2, #0]
   18a00:	b123      	cbz	r3, 18a0c <ull_disable_unmark+0x10>
   18a02:	4298      	cmp	r0, r3
		*m = NULL;
   18a04:	bf06      	itte	eq
   18a06:	2100      	moveq	r1, #0
   18a08:	6011      	streq	r1, [r2, #0]
	return NULL;
   18a0a:	2300      	movne	r3, #0
}
   18a0c:	4618      	mov	r0, r3
   18a0e:	4770      	bx	lr
   18a10:	20001948 	.word	0x20001948

00018a14 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   18a14:	4b01      	ldr	r3, [pc, #4]	; (18a1c <ull_disable_mark_get+0x8>)
}
   18a16:	6818      	ldr	r0, [r3, #0]
   18a18:	4770      	bx	lr
   18a1a:	bf00      	nop
   18a1c:	20001948 	.word	0x20001948

00018a20 <ull_update_mark>:
	if (!*m) {
   18a20:	4a03      	ldr	r2, [pc, #12]	; (18a30 <ull_update_mark+0x10>)
{
   18a22:	4603      	mov	r3, r0
	if (!*m) {
   18a24:	6810      	ldr	r0, [r2, #0]
   18a26:	b100      	cbz	r0, 18a2a <ull_update_mark+0xa>
}
   18a28:	4770      	bx	lr
		*m = param;
   18a2a:	6013      	str	r3, [r2, #0]
   18a2c:	4618      	mov	r0, r3
}
   18a2e:	4770      	bx	lr
   18a30:	2000194c 	.word	0x2000194c

00018a34 <ull_update_unmark>:
	if (*m && *m == param) {
   18a34:	4a04      	ldr	r2, [pc, #16]	; (18a48 <ull_update_unmark+0x14>)
   18a36:	6813      	ldr	r3, [r2, #0]
   18a38:	b123      	cbz	r3, 18a44 <ull_update_unmark+0x10>
   18a3a:	4298      	cmp	r0, r3
		*m = NULL;
   18a3c:	bf06      	itte	eq
   18a3e:	2100      	moveq	r1, #0
   18a40:	6011      	streq	r1, [r2, #0]
	return NULL;
   18a42:	2300      	movne	r3, #0
}
   18a44:	4618      	mov	r0, r3
   18a46:	4770      	bx	lr
   18a48:	2000194c 	.word	0x2000194c

00018a4c <ull_update_mark_get>:
	return mark_get(mark_update);
   18a4c:	4b01      	ldr	r3, [pc, #4]	; (18a54 <ull_update_mark_get+0x8>)
}
   18a4e:	6818      	ldr	r0, [r3, #0]
   18a50:	4770      	bx	lr
   18a52:	bf00      	nop
   18a54:	2000194c 	.word	0x2000194c

00018a58 <ull_disable>:
{
   18a58:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
   18a5a:	6805      	ldr	r5, [r0, #0]
   18a5c:	782b      	ldrb	r3, [r5, #0]
{
   18a5e:	b087      	sub	sp, #28
	if (!ull_ref_get(hdr)) {
   18a60:	b353      	cbz	r3, 18ab8 <ull_disable+0x60>
	compiler_barrier();
   18a62:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   18a64:	2201      	movs	r2, #1
   18a66:	2100      	movs	r1, #0
   18a68:	4668      	mov	r0, sp
   18a6a:	f015 fe75 	bl	2e758 <z_impl_k_sem_init>
   18a6e:	782b      	ldrb	r3, [r5, #0]
	hdr->disabled_cb = disabled_cb;
   18a70:	4a13      	ldr	r2, [pc, #76]	; (18ac0 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   18a72:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   18a76:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
   18a78:	b1f3      	cbz	r3, 18ab8 <ull_disable+0x60>
	mfy.param = lll;
   18a7a:	4b12      	ldr	r3, [pc, #72]	; (18ac4 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   18a7c:	2200      	movs	r2, #0
   18a7e:	4611      	mov	r1, r2
   18a80:	2003      	movs	r0, #3
	mfy.param = lll;
   18a82:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   18a84:	f7fc fc86 	bl	15394 <mayfly_enqueue>
	LL_ASSERT(!ret);
   18a88:	b940      	cbnz	r0, 18a9c <ull_disable+0x44>
	return z_impl_k_sem_take(sem, timeout);
   18a8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18a8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18a92:	4668      	mov	r0, sp
   18a94:	f00d f996 	bl	25dc4 <z_impl_k_sem_take>
}
   18a98:	b007      	add	sp, #28
   18a9a:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   18a9c:	4a0a      	ldr	r2, [pc, #40]	; (18ac8 <ull_disable+0x70>)
   18a9e:	490b      	ldr	r1, [pc, #44]	; (18acc <ull_disable+0x74>)
   18aa0:	480b      	ldr	r0, [pc, #44]	; (18ad0 <ull_disable+0x78>)
   18aa2:	f240 732a 	movw	r3, #1834	; 0x72a
   18aa6:	f00e fd45 	bl	27534 <assert_print>
   18aaa:	4040      	eors	r0, r0
   18aac:	f380 8811 	msr	BASEPRI, r0
   18ab0:	f04f 0003 	mov.w	r0, #3
   18ab4:	df02      	svc	2
   18ab6:	e7e8      	b.n	18a8a <ull_disable+0x32>
		return -EALREADY;
   18ab8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   18abc:	e7ec      	b.n	18a98 <ull_disable+0x40>
   18abe:	bf00      	nop
   18ac0:	00017f79 	.word	0x00017f79
   18ac4:	20000508 	.word	0x20000508
   18ac8:	0002fa04 	.word	0x0002fa04
   18acc:	0002fb3c 	.word	0x0002fb3c
   18ad0:	0002f8a0 	.word	0x0002f8a0

00018ad4 <ull_ticker_stop_with_mark>:
{
   18ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
   18ad6:	4e20      	ldr	r6, [pc, #128]	; (18b58 <ull_ticker_stop_with_mark+0x84>)
   18ad8:	6833      	ldr	r3, [r6, #0]
{
   18ada:	b085      	sub	sp, #20
   18adc:	460c      	mov	r4, r1
   18ade:	4617      	mov	r7, r2
	if (!*m) {
   18ae0:	b353      	cbz	r3, 18b38 <ull_ticker_stop_with_mark+0x64>
	if (mark != param) {
   18ae2:	4299      	cmp	r1, r3
   18ae4:	d113      	bne.n	18b0e <ull_ticker_stop_with_mark+0x3a>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   18ae6:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   18ae8:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   18aea:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
   18aec:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   18aee:	9500      	str	r5, [sp, #0]
   18af0:	4b1a      	ldr	r3, [pc, #104]	; (18b5c <ull_ticker_stop_with_mark+0x88>)
   18af2:	2103      	movs	r1, #3
   18af4:	2000      	movs	r0, #0
   18af6:	f7fd fe25 	bl	16744 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   18afa:	4629      	mov	r1, r5
   18afc:	f7ff ff4c 	bl	18998 <ull_ticker_status_take>
	if (ret) {
   18b00:	4605      	mov	r5, r0
   18b02:	b140      	cbz	r0, 18b16 <ull_ticker_stop_with_mark+0x42>
	if (*m && *m == param) {
   18b04:	6833      	ldr	r3, [r6, #0]
   18b06:	b10b      	cbz	r3, 18b0c <ull_ticker_stop_with_mark+0x38>
   18b08:	429c      	cmp	r4, r3
   18b0a:	d017      	beq.n	18b3c <ull_ticker_stop_with_mark+0x68>
		if (mark != param) {
   18b0c:	b304      	cbz	r4, 18b50 <ull_ticker_stop_with_mark+0x7c>
			return -ENOLCK;
   18b0e:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
   18b12:	b005      	add	sp, #20
   18b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = ull_disable(lll_disable);
   18b16:	4638      	mov	r0, r7
   18b18:	f7ff ff9e 	bl	18a58 <ull_disable>
	if (*m && *m == param) {
   18b1c:	6833      	ldr	r3, [r6, #0]
   18b1e:	b10b      	cbz	r3, 18b24 <ull_ticker_stop_with_mark+0x50>
   18b20:	429c      	cmp	r4, r3
   18b22:	d011      	beq.n	18b48 <ull_ticker_stop_with_mark+0x74>
	if (mark != param) {
   18b24:	2c00      	cmp	r4, #0
   18b26:	d1f2      	bne.n	18b0e <ull_ticker_stop_with_mark+0x3a>
	if (err && (err != -EALREADY)) {
   18b28:	2800      	cmp	r0, #0
   18b2a:	d0f2      	beq.n	18b12 <ull_ticker_stop_with_mark+0x3e>
	return 0;
   18b2c:	f110 0f78 	cmn.w	r0, #120	; 0x78
   18b30:	bf08      	it	eq
   18b32:	2000      	moveq	r0, #0
}
   18b34:	b005      	add	sp, #20
   18b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
   18b38:	6031      	str	r1, [r6, #0]
	if (mark != param) {
   18b3a:	e7d4      	b.n	18ae6 <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
   18b3c:	2300      	movs	r3, #0
		return -EALREADY;
   18b3e:	f06f 0077 	mvn.w	r0, #119	; 0x77
		*m = NULL;
   18b42:	6033      	str	r3, [r6, #0]
}
   18b44:	b005      	add	sp, #20
   18b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
   18b48:	6035      	str	r5, [r6, #0]
	if (err && (err != -EALREADY)) {
   18b4a:	2800      	cmp	r0, #0
   18b4c:	d0e1      	beq.n	18b12 <ull_ticker_stop_with_mark+0x3e>
   18b4e:	e7ed      	b.n	18b2c <ull_ticker_stop_with_mark+0x58>
		return -EALREADY;
   18b50:	f06f 0077 	mvn.w	r0, #119	; 0x77
   18b54:	e7dd      	b.n	18b12 <ull_ticker_stop_with_mark+0x3e>
   18b56:	bf00      	nop
   18b58:	20001948 	.word	0x20001948
   18b5c:	00017f6d 	.word	0x00017f6d

00018b60 <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   18b60:	4b0e      	ldr	r3, [pc, #56]	; (18b9c <ull_pdu_rx_alloc_peek+0x3c>)
   18b62:	7919      	ldrb	r1, [r3, #4]
   18b64:	795a      	ldrb	r2, [r3, #5]
	if (last >= first) {
   18b66:	4291      	cmp	r1, r2
   18b68:	d80a      	bhi.n	18b80 <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
   18b6a:	eba2 0c01 	sub.w	ip, r2, r1
   18b6e:	fa5f fc8c 	uxtb.w	ip, ip
   18b72:	4560      	cmp	r0, ip
   18b74:	d802      	bhi.n	18b7c <ull_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   18b76:	4291      	cmp	r1, r2
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   18b78:	7818      	ldrb	r0, [r3, #0]
   18b7a:	d10a      	bne.n	18b92 <ull_pdu_rx_alloc_peek+0x32>
		return NULL;
   18b7c:	2000      	movs	r0, #0
}
   18b7e:	4770      	bx	lr
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   18b80:	f8b3 c002 	ldrh.w	ip, [r3, #2]
		return count - first + last;
   18b84:	ebac 0c01 	sub.w	ip, ip, r1
   18b88:	4462      	add	r2, ip
   18b8a:	b2d2      	uxtb	r2, r2
   18b8c:	4290      	cmp	r0, r2
   18b8e:	d8f5      	bhi.n	18b7c <ull_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   18b90:	7818      	ldrb	r0, [r3, #0]
	return *((void **)(fifo + first * size));
   18b92:	fb01 3300 	mla	r3, r1, r0, r3
   18b96:	6898      	ldr	r0, [r3, #8]
   18b98:	4770      	bx	lr
   18b9a:	bf00      	nop
   18b9c:	2000037c 	.word	0x2000037c

00018ba0 <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
   18ba0:	4b09      	ldr	r3, [pc, #36]	; (18bc8 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   18ba2:	7919      	ldrb	r1, [r3, #4]
	if (_first == last) {
   18ba4:	795a      	ldrb	r2, [r3, #5]
   18ba6:	7818      	ldrb	r0, [r3, #0]
   18ba8:	f893 c002 	ldrb.w	ip, [r3, #2]
   18bac:	428a      	cmp	r2, r1
   18bae:	d009      	beq.n	18bc4 <ull_pdu_rx_alloc+0x24>
	_first += 1U;
   18bb0:	1c4a      	adds	r2, r1, #1
   18bb2:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   18bb4:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   18bb8:	4594      	cmp	ip, r2
   18bba:	bf08      	it	eq
   18bbc:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   18bbe:	6888      	ldr	r0, [r1, #8]
	*first = _first; /* Write back read-index */
   18bc0:	711a      	strb	r2, [r3, #4]
	return mem;
   18bc2:	4770      	bx	lr
		return NULL;
   18bc4:	2000      	movs	r0, #0
}
   18bc6:	4770      	bx	lr
   18bc8:	2000037c 	.word	0x2000037c

00018bcc <ull_rx_put>:
{
   18bcc:	b538      	push	{r3, r4, r5, lr}
   18bce:	460c      	mov	r4, r1
   18bd0:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   18bd2:	f005 fb69 	bl	1e2a8 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   18bd6:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   18bd8:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   18bda:	4a03      	ldr	r2, [pc, #12]	; (18be8 <ull_rx_put+0x1c>)
   18bdc:	4628      	mov	r0, r5
}
   18bde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   18be2:	f7fc bb63 	b.w	152ac <memq_enqueue>
   18be6:	bf00      	nop
   18be8:	20001bc0 	.word	0x20001bc0

00018bec <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   18bec:	2201      	movs	r2, #1
   18bee:	4b02      	ldr	r3, [pc, #8]	; (18bf8 <ull_rx_sched+0xc>)
   18bf0:	4611      	mov	r1, r2
   18bf2:	2000      	movs	r0, #0
   18bf4:	f7fc bbce 	b.w	15394 <mayfly_enqueue>
   18bf8:	200004f8 	.word	0x200004f8

00018bfc <ull_prepare_enqueue>:
{
   18bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   18c00:	4e16      	ldr	r6, [pc, #88]	; (18c5c <ull_prepare_enqueue+0x60>)
{
   18c02:	f89d a020 	ldrb.w	sl, [sp, #32]
   18c06:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   18c08:	7973      	ldrb	r3, [r6, #5]
{
   18c0a:	460f      	mov	r7, r1
	last = last + 1;
   18c0c:	1c5d      	adds	r5, r3, #1
   18c0e:	4611      	mov	r1, r2
	if (last == count) {
   18c10:	78b2      	ldrb	r2, [r6, #2]
	last = last + 1;
   18c12:	b2ed      	uxtb	r5, r5
		last = 0U;
   18c14:	42aa      	cmp	r2, r5
   18c16:	bf08      	it	eq
   18c18:	2500      	moveq	r5, #0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   18c1a:	7932      	ldrb	r2, [r6, #4]
	if (last == first) {
   18c1c:	42aa      	cmp	r2, r5
{
   18c1e:	4680      	mov	r8, r0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   18c20:	7830      	ldrb	r0, [r6, #0]
   18c22:	d016      	beq.n	18c52 <ull_prepare_enqueue+0x56>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   18c24:	f106 0408 	add.w	r4, r6, #8
   18c28:	fb03 4400 	mla	r4, r3, r0, r4
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   18c2c:	2210      	movs	r2, #16
   18c2e:	4620      	mov	r0, r4
   18c30:	f010 fb89 	bl	29346 <memcpy>
	e->is_resume = is_resume;
   18c34:	7f23      	ldrb	r3, [r4, #28]
	e->abort_cb = abort_cb;
   18c36:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
   18c38:	f00a 0a01 	and.w	sl, sl, #1
   18c3c:	f023 0303 	bic.w	r3, r3, #3
   18c40:	ea43 030a 	orr.w	r3, r3, sl
	e->is_abort_cb = is_abort_cb;
   18c44:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
   18c48:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
   18c4a:	7175      	strb	r5, [r6, #5]
}
   18c4c:	4620      	mov	r0, r4
   18c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return NULL;
   18c52:	2400      	movs	r4, #0
}
   18c54:	4620      	mov	r0, r4
   18c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18c5a:	bf00      	nop
   18c5c:	20000398 	.word	0x20000398

00018c60 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   18c60:	4b05      	ldr	r3, [pc, #20]	; (18c78 <ull_prepare_dequeue_get+0x18>)
   18c62:	7918      	ldrb	r0, [r3, #4]
	if (first == last) {
   18c64:	795a      	ldrb	r2, [r3, #5]
   18c66:	7819      	ldrb	r1, [r3, #0]
   18c68:	4282      	cmp	r2, r0
	return (void *)(fifo + first * size);
   18c6a:	bf1a      	itte	ne
   18c6c:	3308      	addne	r3, #8
   18c6e:	fb00 3001 	mlane	r0, r0, r1, r3
		return NULL;
   18c72:	2000      	moveq	r0, #0
}
   18c74:	4770      	bx	lr
   18c76:	bf00      	nop
   18c78:	20000398 	.word	0x20000398

00018c7c <ull_prepare_dequeue_iter>:
{
   18c7c:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   18c7e:	4b0d      	ldr	r3, [pc, #52]	; (18cb4 <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
   18c80:	7802      	ldrb	r2, [r0, #0]
   18c82:	7899      	ldrb	r1, [r3, #2]
   18c84:	f893 c005 	ldrb.w	ip, [r3, #5]
   18c88:	f893 e000 	ldrb.w	lr, [r3]
   18c8c:	4291      	cmp	r1, r2
   18c8e:	bf9c      	itt	ls
   18c90:	791a      	ldrbls	r2, [r3, #4]
		*idx = first;
   18c92:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   18c94:	4594      	cmp	ip, r2
   18c96:	d00a      	beq.n	18cae <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
   18c98:	1c53      	adds	r3, r2, #1
   18c9a:	b2db      	uxtb	r3, r3
		i = 0U;
   18c9c:	4299      	cmp	r1, r3
   18c9e:	bf08      	it	eq
   18ca0:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
   18ca2:	4905      	ldr	r1, [pc, #20]	; (18cb8 <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
   18ca4:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   18ca6:	fb02 100e 	mla	r0, r2, lr, r1
}
   18caa:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   18cae:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   18cb0:	e7fb      	b.n	18caa <ull_prepare_dequeue_iter+0x2e>
   18cb2:	bf00      	nop
   18cb4:	20000398 	.word	0x20000398
   18cb8:	200003a0 	.word	0x200003a0

00018cbc <ull_prepare_dequeue>:
{
   18cbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return MFIFO_DEQUEUE_GET(prep);
   18cc0:	4c24      	ldr	r4, [pc, #144]	; (18d54 <ull_prepare_dequeue+0x98>)
   18cc2:	7922      	ldrb	r2, [r4, #4]
	if (first == last) {
   18cc4:	7961      	ldrb	r1, [r4, #5]
   18cc6:	7823      	ldrb	r3, [r4, #0]
   18cc8:	4291      	cmp	r1, r2
   18cca:	d028      	beq.n	18d1e <ull_prepare_dequeue+0x62>
	return (void *)(fifo + first * size);
   18ccc:	f104 0708 	add.w	r7, r4, #8
			mfy.param = next;
   18cd0:	f8df 9084 	ldr.w	r9, [pc, #132]	; 18d58 <ull_prepare_dequeue+0x9c>
			LL_ASSERT(!ret);
   18cd4:	f8df b084 	ldr.w	fp, [pc, #132]	; 18d5c <ull_prepare_dequeue+0xa0>
   18cd8:	f8df a084 	ldr.w	sl, [pc, #132]	; 18d60 <ull_prepare_dequeue+0xa4>
   18cdc:	4680      	mov	r8, r0
   18cde:	fb02 7003 	mla	r0, r2, r3, r7
		uint8_t is_aborted = next->is_aborted;
   18ce2:	7f03      	ldrb	r3, [r0, #28]
		if (!is_aborted) {
   18ce4:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
   18ce6:	f3c3 0540 	ubfx	r5, r3, #1, #1
		uint8_t is_resume = next->is_resume;
   18cea:	f003 0601 	and.w	r6, r3, #1
		if (!is_aborted) {
   18cee:	d518      	bpl.n	18d22 <ull_prepare_dequeue+0x66>
	uint8_t _first = *first; /* Copy read-index */
   18cf0:	7922      	ldrb	r2, [r4, #4]
		MFIFO_DEQUEUE(prep);
   18cf2:	7961      	ldrb	r1, [r4, #5]
   18cf4:	7820      	ldrb	r0, [r4, #0]
   18cf6:	f894 c002 	ldrb.w	ip, [r4, #2]
	_first += 1U;
   18cfa:	1c53      	adds	r3, r2, #1
	if (_first == last) {
   18cfc:	4291      	cmp	r1, r2
	_first += 1U;
   18cfe:	b2db      	uxtb	r3, r3
	if (_first == last) {
   18d00:	d00d      	beq.n	18d1e <ull_prepare_dequeue+0x62>
		_first = 0U;
   18d02:	459c      	cmp	ip, r3
   18d04:	bf08      	it	eq
   18d06:	2300      	moveq	r3, #0
	if (first == last) {
   18d08:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
   18d0a:	7123      	strb	r3, [r4, #4]
	if (first == last) {
   18d0c:	d007      	beq.n	18d1e <ull_prepare_dequeue+0x62>
	return (void *)(fifo + first * size);
   18d0e:	fb03 7000 	mla	r0, r3, r0, r7
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   18d12:	2d00      	cmp	r5, #0
   18d14:	d1e5      	bne.n	18ce2 <ull_prepare_dequeue+0x26>
   18d16:	b116      	cbz	r6, 18d1e <ull_prepare_dequeue+0x62>
   18d18:	7f03      	ldrb	r3, [r0, #28]
   18d1a:	07db      	lsls	r3, r3, #31
   18d1c:	d5e1      	bpl.n	18ce2 <ull_prepare_dequeue+0x26>
}
   18d1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mfy.param = next;
   18d22:	f8c9 0008 	str.w	r0, [r9, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
   18d26:	4b0c      	ldr	r3, [pc, #48]	; (18d58 <ull_prepare_dequeue+0x9c>)
   18d28:	462a      	mov	r2, r5
   18d2a:	4629      	mov	r1, r5
   18d2c:	4640      	mov	r0, r8
   18d2e:	f7fc fb31 	bl	15394 <mayfly_enqueue>
			LL_ASSERT(!ret);
   18d32:	2800      	cmp	r0, #0
   18d34:	d0dc      	beq.n	18cf0 <ull_prepare_dequeue+0x34>
   18d36:	480b      	ldr	r0, [pc, #44]	; (18d64 <ull_prepare_dequeue+0xa8>)
   18d38:	f240 73a1 	movw	r3, #1953	; 0x7a1
   18d3c:	465a      	mov	r2, fp
   18d3e:	4651      	mov	r1, sl
   18d40:	f00e fbf8 	bl	27534 <assert_print>
   18d44:	4040      	eors	r0, r0
   18d46:	f380 8811 	msr	BASEPRI, r0
   18d4a:	f04f 0003 	mov.w	r0, #3
   18d4e:	df02      	svc	2
   18d50:	e7ce      	b.n	18cf0 <ull_prepare_dequeue+0x34>
   18d52:	bf00      	nop
   18d54:	20000398 	.word	0x20000398
   18d58:	200004c8 	.word	0x200004c8
   18d5c:	0002fa04 	.word	0x0002fa04
   18d60:	0002fb3c 	.word	0x0002fb3c
   18d64:	0002f8a0 	.word	0x0002f8a0

00018d68 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   18d68:	4b06      	ldr	r3, [pc, #24]	; (18d84 <ull_event_done_extra_get+0x1c>)
   18d6a:	791a      	ldrb	r2, [r3, #4]
	if (first == last) {
   18d6c:	7959      	ldrb	r1, [r3, #5]
   18d6e:	7818      	ldrb	r0, [r3, #0]
   18d70:	4291      	cmp	r1, r2
   18d72:	d005      	beq.n	18d80 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   18d74:	fb02 3300 	mla	r3, r2, r0, r3
   18d78:	6898      	ldr	r0, [r3, #8]
	if (!evdone) {
   18d7a:	b110      	cbz	r0, 18d82 <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   18d7c:	3020      	adds	r0, #32
   18d7e:	4770      	bx	lr
		return NULL;
   18d80:	2000      	movs	r0, #0
}
   18d82:	4770      	bx	lr
   18d84:	20000350 	.word	0x20000350

00018d88 <ull_event_done>:
{
   18d88:	b570      	push	{r4, r5, r6, lr}
	evdone = MFIFO_DEQUEUE(done);
   18d8a:	4a13      	ldr	r2, [pc, #76]	; (18dd8 <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
   18d8c:	7913      	ldrb	r3, [r2, #4]
	if (_first == last) {
   18d8e:	7954      	ldrb	r4, [r2, #5]
   18d90:	7811      	ldrb	r1, [r2, #0]
   18d92:	429c      	cmp	r4, r3
{
   18d94:	4606      	mov	r6, r0
	evdone = MFIFO_DEQUEUE(done);
   18d96:	7890      	ldrb	r0, [r2, #2]
   18d98:	d01b      	beq.n	18dd2 <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
   18d9a:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   18d9e:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   18da0:	688c      	ldr	r4, [r1, #8]
	_first += 1U;
   18da2:	b2db      	uxtb	r3, r3
		_first = 0U;
   18da4:	4298      	cmp	r0, r3
   18da6:	bf08      	it	eq
   18da8:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   18daa:	7113      	strb	r3, [r2, #4]
	if (!evdone) {
   18dac:	b17c      	cbz	r4, 18dce <ull_event_done+0x46>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   18dae:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
   18db0:	2500      	movs	r5, #0
	link = evdone->hdr.link;
   18db2:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   18db4:	4a09      	ldr	r2, [pc, #36]	; (18ddc <ull_event_done+0x54>)
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   18db6:	7123      	strb	r3, [r4, #4]
	memq_enqueue(link, done, &memq_ull_done.tail);
   18db8:	4621      	mov	r1, r4
	evdone->hdr.link = NULL;
   18dba:	6025      	str	r5, [r4, #0]
	evdone->param = param;
   18dbc:	61e6      	str	r6, [r4, #28]
	memq_enqueue(link, done, &memq_ull_done.tail);
   18dbe:	f7fc fa75 	bl	152ac <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   18dc2:	2201      	movs	r2, #1
   18dc4:	4b06      	ldr	r3, [pc, #24]	; (18de0 <ull_event_done+0x58>)
   18dc6:	4611      	mov	r1, r2
   18dc8:	4628      	mov	r0, r5
   18dca:	f7fc fae3 	bl	15394 <mayfly_enqueue>
}
   18dce:	4620      	mov	r0, r4
   18dd0:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   18dd2:	2400      	movs	r4, #0
   18dd4:	e7fb      	b.n	18dce <ull_event_done+0x46>
   18dd6:	bf00      	nop
   18dd8:	20000350 	.word	0x20000350
   18ddc:	20001bb8 	.word	0x20001bb8
   18de0:	200004e8 	.word	0x200004e8

00018de4 <ull_rxfifo_alloc>:
{
   18de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18de8:	b083      	sub	sp, #12
   18dea:	461d      	mov	r5, r3
   18dec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   18dee:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   18df2:	e9cd 0400 	strd	r0, r4, [sp]
   18df6:	e9dd a90d 	ldrd	sl, r9, [sp, #52]	; 0x34
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   18dfa:	b33b      	cbz	r3, 18e4c <ull_rxfifo_alloc+0x68>
   18dfc:	1e5c      	subs	r4, r3, #1
   18dfe:	f895 b000 	ldrb.w	fp, [r5]
   18e02:	4688      	mov	r8, r1
   18e04:	4617      	mov	r7, r2
   18e06:	b2e4      	uxtb	r4, r4
	last = last + 1;
   18e08:	f10b 0301 	add.w	r3, fp, #1
   18e0c:	fa5f fb83 	uxtb.w	fp, r3
		last = 0U;
   18e10:	45d8      	cmp	r8, fp
   18e12:	bf08      	it	eq
   18e14:	f04f 0b00 	moveq.w	fp, #0
	if (last == first) {
   18e18:	455f      	cmp	r7, fp
		link = mem_acquire(link_free);
   18e1a:	4648      	mov	r0, r9
   18e1c:	d016      	beq.n	18e4c <ull_rxfifo_alloc+0x68>
   18e1e:	f7fc f9e1 	bl	151e4 <mem_acquire>
   18e22:	4606      	mov	r6, r0
		rx = mem_acquire(mem_free);
   18e24:	4650      	mov	r0, sl
		if (!link) {
   18e26:	b18e      	cbz	r6, 18e4c <ull_rxfifo_alloc+0x68>
		rx = mem_acquire(mem_free);
   18e28:	f7fc f9dc 	bl	151e4 <mem_acquire>
		if (!rx) {
   18e2c:	b188      	cbz	r0, 18e52 <ull_rxfifo_alloc+0x6e>
		link->mem = NULL;
   18e2e:	2300      	movs	r3, #0
   18e30:	6073      	str	r3, [r6, #4]
		rx->link = link;
   18e32:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   18e34:	782a      	ldrb	r2, [r5, #0]
   18e36:	9b00      	ldr	r3, [sp, #0]
   18e38:	fb12 f203 	smulbb	r2, r2, r3
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   18e3c:	9b01      	ldr	r3, [sp, #4]
   18e3e:	5098      	str	r0, [r3, r2]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   18e40:	3c01      	subs	r4, #1
   18e42:	b2e4      	uxtb	r4, r4
   18e44:	2cff      	cmp	r4, #255	; 0xff
	*last = idx; /* Commit: Update write index */
   18e46:	f885 b000 	strb.w	fp, [r5]
   18e4a:	d1dd      	bne.n	18e08 <ull_rxfifo_alloc+0x24>
}
   18e4c:	b003      	add	sp, #12
   18e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, link_free);
   18e52:	4649      	mov	r1, r9
   18e54:	4630      	mov	r0, r6
}
   18e56:	b003      	add	sp, #12
   18e58:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, link_free);
   18e5c:	f7fc b9dc 	b.w	15218 <mem_release>

00018e60 <init_reset>:
{
   18e60:	b570      	push	{r4, r5, r6, lr}
	RXFIFO_INIT_ALLOC(done);
   18e62:	4c3f      	ldr	r4, [pc, #252]	; (18f60 <init_reset+0x100>)
   18e64:	4d3f      	ldr	r5, [pc, #252]	; (18f64 <init_reset+0x104>)
   18e66:	79a2      	ldrb	r2, [r4, #6]
   18e68:	88a1      	ldrh	r1, [r4, #4]
   18e6a:	4e3f      	ldr	r6, [pc, #252]	; (18f68 <init_reset+0x108>)
   18e6c:	2000      	movs	r0, #0
{
   18e6e:	b084      	sub	sp, #16
	RXFIFO_INIT_ALLOC(done);
   18e70:	4623      	mov	r3, r4
   18e72:	80a8      	strh	r0, [r5, #4]
   18e74:	f104 0008 	add.w	r0, r4, #8
   18e78:	f7fc f984 	bl	15184 <mem_init>
   18e7c:	79e3      	ldrb	r3, [r4, #7]
   18e7e:	79a2      	ldrb	r2, [r4, #6]
   18e80:	1d30      	adds	r0, r6, #4
   18e82:	441a      	add	r2, r3
   18e84:	2108      	movs	r1, #8
   18e86:	4633      	mov	r3, r6
   18e88:	f7fc f97c 	bl	15184 <mem_init>
   18e8c:	9602      	str	r6, [sp, #8]
   18e8e:	462e      	mov	r6, r5
   18e90:	79a3      	ldrb	r3, [r4, #6]
   18e92:	f816 0b08 	ldrb.w	r0, [r6], #8
   18e96:	792a      	ldrb	r2, [r5, #4]
   18e98:	78a9      	ldrb	r1, [r5, #2]
   18e9a:	9303      	str	r3, [sp, #12]
   18e9c:	e9cd 6400 	strd	r6, r4, [sp]
   18ea0:	1d6b      	adds	r3, r5, #5
   18ea2:	f7ff ff9f 	bl	18de4 <ull_rxfifo_alloc>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   18ea6:	4b31      	ldr	r3, [pc, #196]	; (18f6c <init_reset+0x10c>)
   18ea8:	2207      	movs	r2, #7
   18eaa:	1d18      	adds	r0, r3, #4
   18eac:	2144      	movs	r1, #68	; 0x44
   18eae:	f7fc f969 	bl	15184 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   18eb2:	4b2f      	ldr	r3, [pc, #188]	; (18f70 <init_reset+0x110>)
   18eb4:	2209      	movs	r2, #9
   18eb6:	1d18      	adds	r0, r3, #4
   18eb8:	2108      	movs	r1, #8
   18eba:	f7fc f963 	bl	15184 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   18ebe:	482c      	ldr	r0, [pc, #176]	; (18f70 <init_reset+0x110>)
   18ec0:	f7fc f990 	bl	151e4 <mem_acquire>
	LL_ASSERT(link);
   18ec4:	4604      	mov	r4, r0
   18ec6:	b308      	cbz	r0, 18f0c <init_reset+0xac>
	MEMQ_INIT(ull_rx, link);
   18ec8:	4a2a      	ldr	r2, [pc, #168]	; (18f74 <init_reset+0x114>)
   18eca:	4620      	mov	r0, r4
   18ecc:	1f11      	subs	r1, r2, #4
   18ece:	f7fc f9df 	bl	15290 <memq_init>
	link = mem_acquire(&mem_link_done.free);
   18ed2:	4825      	ldr	r0, [pc, #148]	; (18f68 <init_reset+0x108>)
   18ed4:	f7fc f986 	bl	151e4 <mem_acquire>
	LL_ASSERT(link);
   18ed8:	4604      	mov	r4, r0
   18eda:	b328      	cbz	r0, 18f28 <init_reset+0xc8>
	MEMQ_INIT(ull_done, link);
   18edc:	4a26      	ldr	r2, [pc, #152]	; (18f78 <init_reset+0x118>)
   18ede:	4620      	mov	r0, r4
   18ee0:	1f11      	subs	r1, r2, #4
   18ee2:	f7fc f9d5 	bl	15290 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   18ee6:	4822      	ldr	r0, [pc, #136]	; (18f70 <init_reset+0x110>)
   18ee8:	f7fc f97c 	bl	151e4 <mem_acquire>
	LL_ASSERT(link);
   18eec:	4604      	mov	r4, r0
   18eee:	b348      	cbz	r0, 18f44 <init_reset+0xe4>
	MEMQ_INIT(ll_rx, link);
   18ef0:	4a22      	ldr	r2, [pc, #136]	; (18f7c <init_reset+0x11c>)
   18ef2:	4620      	mov	r0, r4
   18ef4:	1f11      	subs	r1, r2, #4
   18ef6:	f7fc f9cb 	bl	15290 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   18efa:	4b21      	ldr	r3, [pc, #132]	; (18f80 <init_reset+0x120>)
   18efc:	2205      	movs	r2, #5
	rx_replenish(UINT8_MAX);
   18efe:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   18f00:	801a      	strh	r2, [r3, #0]
	rx_replenish(UINT8_MAX);
   18f02:	f7ff f89b 	bl	1803c <rx_replenish>
}
   18f06:	2000      	movs	r0, #0
   18f08:	b004      	add	sp, #16
   18f0a:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   18f0c:	4a1d      	ldr	r2, [pc, #116]	; (18f84 <init_reset+0x124>)
   18f0e:	491e      	ldr	r1, [pc, #120]	; (18f88 <init_reset+0x128>)
   18f10:	481e      	ldr	r0, [pc, #120]	; (18f8c <init_reset+0x12c>)
   18f12:	f640 032d 	movw	r3, #2093	; 0x82d
   18f16:	f00e fb0d 	bl	27534 <assert_print>
   18f1a:	4040      	eors	r0, r0
   18f1c:	f380 8811 	msr	BASEPRI, r0
   18f20:	f04f 0003 	mov.w	r0, #3
   18f24:	df02      	svc	2
   18f26:	e7cf      	b.n	18ec8 <init_reset+0x68>
	LL_ASSERT(link);
   18f28:	4a16      	ldr	r2, [pc, #88]	; (18f84 <init_reset+0x124>)
   18f2a:	4917      	ldr	r1, [pc, #92]	; (18f88 <init_reset+0x128>)
   18f2c:	4817      	ldr	r0, [pc, #92]	; (18f8c <init_reset+0x12c>)
   18f2e:	f640 0335 	movw	r3, #2101	; 0x835
   18f32:	f00e faff 	bl	27534 <assert_print>
   18f36:	4040      	eors	r0, r0
   18f38:	f380 8811 	msr	BASEPRI, r0
   18f3c:	f04f 0003 	mov.w	r0, #3
   18f40:	df02      	svc	2
   18f42:	e7cb      	b.n	18edc <init_reset+0x7c>
	LL_ASSERT(link);
   18f44:	4a0f      	ldr	r2, [pc, #60]	; (18f84 <init_reset+0x124>)
   18f46:	4910      	ldr	r1, [pc, #64]	; (18f88 <init_reset+0x128>)
   18f48:	4810      	ldr	r0, [pc, #64]	; (18f8c <init_reset+0x12c>)
   18f4a:	f640 033d 	movw	r3, #2109	; 0x83d
   18f4e:	f00e faf1 	bl	27534 <assert_print>
   18f52:	4040      	eors	r0, r0
   18f54:	f380 8811 	msr	BASEPRI, r0
   18f58:	f04f 0003 	mov.w	r0, #3
   18f5c:	df02      	svc	2
   18f5e:	e7c7      	b.n	18ef0 <init_reset+0x90>
   18f60:	20000278 	.word	0x20000278
   18f64:	20000350 	.word	0x20000350
   18f68:	20001950 	.word	0x20001950
   18f6c:	200019cc 	.word	0x200019cc
   18f70:	20001980 	.word	0x20001980
   18f74:	20001bc0 	.word	0x20001bc0
   18f78:	20001bb8 	.word	0x20001bb8
   18f7c:	20001bb0 	.word	0x20001bb0
   18f80:	2000197c 	.word	0x2000197c
   18f84:	0002fa04 	.word	0x0002fa04
   18f88:	0002fda8 	.word	0x0002fda8
   18f8c:	0002f8a0 	.word	0x0002f8a0

00018f90 <ll_init>:
{
   18f90:	b530      	push	{r4, r5, lr}
	sem_recv = sem_rx;
   18f92:	4b2c      	ldr	r3, [pc, #176]	; (19044 <ll_init+0xb4>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   18f94:	4d2c      	ldr	r5, [pc, #176]	; (19048 <ll_init+0xb8>)
	sem_recv = sem_rx;
   18f96:	6018      	str	r0, [r3, #0]
{
   18f98:	b087      	sub	sp, #28
	cntr_init();
   18f9a:	f008 fd01 	bl	219a0 <cntr_init>
	mayfly_init();
   18f9e:	f7fc f9a7 	bl	152f0 <mayfly_init>
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   18fa2:	492a      	ldr	r1, [pc, #168]	; (1904c <ll_init+0xbc>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   18fa4:	4a2a      	ldr	r2, [pc, #168]	; (19050 <ll_init+0xc0>)
   18fa6:	9505      	str	r5, [sp, #20]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   18fa8:	f04f 0c05 	mov.w	ip, #5
   18fac:	f881 c008 	strb.w	ip, [r1, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   18fb0:	4c28      	ldr	r4, [pc, #160]	; (19054 <ll_init+0xc4>)
   18fb2:	9204      	str	r2, [sp, #16]
   18fb4:	4a28      	ldr	r2, [pc, #160]	; (19058 <ll_init+0xc8>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   18fb6:	2002      	movs	r0, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   18fb8:	e9cd 2402 	strd	r2, r4, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   18fbc:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   18fbe:	240d      	movs	r4, #13
   18fc0:	e9cd 1400 	strd	r1, r4, [sp]
   18fc4:	4a25      	ldr	r2, [pc, #148]	; (1905c <ll_init+0xcc>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   18fc6:	7408      	strb	r0, [r1, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
   18fc8:	7608      	strb	r0, [r1, #24]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   18fca:	700b      	strb	r3, [r1, #0]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   18fcc:	2000      	movs	r0, #0
   18fce:	2106      	movs	r1, #6
   18fd0:	f7fd fa70 	bl	164b4 <ticker_init>
	LL_ASSERT(!err);
   18fd4:	bb40      	cbnz	r0, 19028 <ll_init+0x98>
	return z_impl_k_sem_init(sem, initial_count, limit);
   18fd6:	2201      	movs	r2, #1
   18fd8:	2100      	movs	r1, #0
   18fda:	4821      	ldr	r0, [pc, #132]	; (19060 <ll_init+0xd0>)
   18fdc:	f015 fbbc 	bl	2e758 <z_impl_k_sem_init>
	err = lll_init();
   18fe0:	f006 ff36 	bl	1fe50 <lll_init>
	if (err) {
   18fe4:	4604      	mov	r4, r0
   18fe6:	b110      	cbz	r0, 18fee <ll_init+0x5e>
}
   18fe8:	4620      	mov	r0, r4
   18fea:	b007      	add	sp, #28
   18fec:	bd30      	pop	{r4, r5, pc}
	err = init_reset();
   18fee:	f7ff ff37 	bl	18e60 <init_reset>
	if (err) {
   18ff2:	4604      	mov	r4, r0
   18ff4:	2800      	cmp	r0, #0
   18ff6:	d1f7      	bne.n	18fe8 <ll_init+0x58>
	err = lll_adv_init();
   18ff8:	f007 fb7c 	bl	206f4 <lll_adv_init>
	if (err) {
   18ffc:	4604      	mov	r4, r0
   18ffe:	2800      	cmp	r0, #0
   19000:	d1f2      	bne.n	18fe8 <ll_init+0x58>
	err = ull_adv_init();
   19002:	f000 fcd7 	bl	199b4 <ull_adv_init>
	if (err) {
   19006:	4604      	mov	r4, r0
   19008:	2800      	cmp	r0, #0
   1900a:	d1ed      	bne.n	18fe8 <ll_init+0x58>
	err = lll_conn_init();
   1900c:	f008 f82e 	bl	2106c <lll_conn_init>
	if (err) {
   19010:	4604      	mov	r4, r0
   19012:	2800      	cmp	r0, #0
   19014:	d1e8      	bne.n	18fe8 <ll_init+0x58>
	err = ull_conn_init();
   19016:	f001 ff47 	bl	1aea8 <ull_conn_init>
	if (err) {
   1901a:	4604      	mov	r4, r0
   1901c:	2800      	cmp	r0, #0
   1901e:	d1e3      	bne.n	18fe8 <ll_init+0x58>
		ull_filter_reset(true);
   19020:	2001      	movs	r0, #1
   19022:	f006 f8db 	bl	1f1dc <ull_filter_reset>
	return  0;
   19026:	e7df      	b.n	18fe8 <ll_init+0x58>
	LL_ASSERT(!err);
   19028:	4a0e      	ldr	r2, [pc, #56]	; (19064 <ll_init+0xd4>)
   1902a:	490f      	ldr	r1, [pc, #60]	; (19068 <ll_init+0xd8>)
   1902c:	480f      	ldr	r0, [pc, #60]	; (1906c <ll_init+0xdc>)
   1902e:	f240 231f 	movw	r3, #543	; 0x21f
   19032:	f00e fa7f 	bl	27534 <assert_print>
   19036:	4040      	eors	r0, r0
   19038:	f380 8811 	msr	BASEPRI, r0
   1903c:	f04f 0003 	mov.w	r0, #3
   19040:	df02      	svc	2
   19042:	e7c8      	b.n	18fd6 <ll_init+0x46>
   19044:	20001bc4 	.word	0x20001bc4
   19048:	0002266d 	.word	0x0002266d
   1904c:	20001fa4 	.word	0x20001fa4
   19050:	0002251d 	.word	0x0002251d
   19054:	000224b9 	.word	0x000224b9
   19058:	20001d00 	.word	0x20001d00
   1905c:	20001be0 	.word	0x20001be0
   19060:	20001bc8 	.word	0x20001bc8
   19064:	0002fa04 	.word	0x0002fa04
   19068:	0002fa40 	.word	0x0002fa40
   1906c:	0002f8a0 	.word	0x0002f8a0

00019070 <ll_reset>:
{
   19070:	b510      	push	{r4, lr}
   19072:	b086      	sub	sp, #24
	err = ull_adv_reset();
   19074:	f000 fcae 	bl	199d4 <ull_adv_reset>
	LL_ASSERT(!err);
   19078:	bb70      	cbnz	r0, 190d8 <ll_reset+0x68>
	err = ull_conn_reset();
   1907a:	f001 ff17 	bl	1aeac <ull_conn_reset>
	LL_ASSERT(!err);
   1907e:	2800      	cmp	r0, #0
   19080:	d13b      	bne.n	190fa <ll_reset+0x8a>
	MFIFO_INIT(tx_ack);
   19082:	4b3a      	ldr	r3, [pc, #232]	; (1916c <ll_reset+0xfc>)
   19084:	2400      	movs	r4, #0
   19086:	809c      	strh	r4, [r3, #4]
		ull_filter_reset(false);
   19088:	4620      	mov	r0, r4
   1908a:	f006 f8a7 	bl	1f1dc <ull_filter_reset>
	MFIFO_INIT(prep);
   1908e:	4938      	ldr	r1, [pc, #224]	; (19170 <ll_reset+0x100>)
	MFIFO_INIT(pdu_rx_free);
   19090:	4a38      	ldr	r2, [pc, #224]	; (19174 <ll_reset+0x104>)
	MFIFO_INIT(ll_pdu_rx_free);
   19092:	4b39      	ldr	r3, [pc, #228]	; (19178 <ll_reset+0x108>)
	MFIFO_INIT(prep);
   19094:	808c      	strh	r4, [r1, #4]
	MFIFO_INIT(pdu_rx_free);
   19096:	8094      	strh	r4, [r2, #4]
	MFIFO_INIT(ll_pdu_rx_free);
   19098:	809c      	strh	r4, [r3, #4]
   1909a:	2201      	movs	r2, #1
   1909c:	4621      	mov	r1, r4
   1909e:	4668      	mov	r0, sp
   190a0:	f015 fb5a 	bl	2e758 <z_impl_k_sem_init>
		mfy.param = &sem;
   190a4:	4b35      	ldr	r3, [pc, #212]	; (1917c <ll_reset+0x10c>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   190a6:	4622      	mov	r2, r4
   190a8:	4621      	mov	r1, r4
   190aa:	2003      	movs	r0, #3
		mfy.param = &sem;
   190ac:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   190b0:	f7fc f970 	bl	15394 <mayfly_enqueue>
		LL_ASSERT(!retval);
   190b4:	2800      	cmp	r0, #0
   190b6:	d14b      	bne.n	19150 <ll_reset+0xe0>
	return z_impl_k_sem_take(sem, timeout);
   190b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   190bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   190c0:	4668      	mov	r0, sp
   190c2:	f00c fe7f 	bl	25dc4 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   190c6:	f000 fc9f 	bl	19a08 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   190ca:	2800      	cmp	r0, #0
   190cc:	d132      	bne.n	19134 <ll_reset+0xc4>
	err = init_reset();
   190ce:	f7ff fec7 	bl	18e60 <init_reset>
	LL_ASSERT(!err);
   190d2:	bb00      	cbnz	r0, 19116 <ll_reset+0xa6>
}
   190d4:	b006      	add	sp, #24
   190d6:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   190d8:	4a29      	ldr	r2, [pc, #164]	; (19180 <ll_reset+0x110>)
   190da:	492a      	ldr	r1, [pc, #168]	; (19184 <ll_reset+0x114>)
   190dc:	482a      	ldr	r0, [pc, #168]	; (19188 <ll_reset+0x118>)
   190de:	f240 23bf 	movw	r3, #703	; 0x2bf
   190e2:	f00e fa27 	bl	27534 <assert_print>
   190e6:	4040      	eors	r0, r0
   190e8:	f380 8811 	msr	BASEPRI, r0
   190ec:	f04f 0003 	mov.w	r0, #3
   190f0:	df02      	svc	2
	err = ull_conn_reset();
   190f2:	f001 fedb 	bl	1aeac <ull_conn_reset>
	LL_ASSERT(!err);
   190f6:	2800      	cmp	r0, #0
   190f8:	d0c3      	beq.n	19082 <ll_reset+0x12>
   190fa:	4a21      	ldr	r2, [pc, #132]	; (19180 <ll_reset+0x110>)
   190fc:	4921      	ldr	r1, [pc, #132]	; (19184 <ll_reset+0x114>)
   190fe:	4822      	ldr	r0, [pc, #136]	; (19188 <ll_reset+0x118>)
   19100:	f240 23f1 	movw	r3, #753	; 0x2f1
   19104:	f00e fa16 	bl	27534 <assert_print>
   19108:	4040      	eors	r0, r0
   1910a:	f380 8811 	msr	BASEPRI, r0
   1910e:	f04f 0003 	mov.w	r0, #3
   19112:	df02      	svc	2
   19114:	e7b5      	b.n	19082 <ll_reset+0x12>
	LL_ASSERT(!err);
   19116:	4a1a      	ldr	r2, [pc, #104]	; (19180 <ll_reset+0x110>)
   19118:	491a      	ldr	r1, [pc, #104]	; (19184 <ll_reset+0x114>)
   1911a:	481b      	ldr	r0, [pc, #108]	; (19188 <ll_reset+0x118>)
   1911c:	f240 333a 	movw	r3, #826	; 0x33a
   19120:	f00e fa08 	bl	27534 <assert_print>
   19124:	4040      	eors	r0, r0
   19126:	f380 8811 	msr	BASEPRI, r0
   1912a:	f04f 0003 	mov.w	r0, #3
   1912e:	df02      	svc	2
}
   19130:	b006      	add	sp, #24
   19132:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   19134:	4a12      	ldr	r2, [pc, #72]	; (19180 <ll_reset+0x110>)
   19136:	4913      	ldr	r1, [pc, #76]	; (19184 <ll_reset+0x114>)
   19138:	4813      	ldr	r0, [pc, #76]	; (19188 <ll_reset+0x118>)
   1913a:	f240 332d 	movw	r3, #813	; 0x32d
   1913e:	f00e f9f9 	bl	27534 <assert_print>
   19142:	4040      	eors	r0, r0
   19144:	f380 8811 	msr	BASEPRI, r0
   19148:	f04f 0003 	mov.w	r0, #3
   1914c:	df02      	svc	2
   1914e:	e7be      	b.n	190ce <ll_reset+0x5e>
		LL_ASSERT(!retval);
   19150:	4a0b      	ldr	r2, [pc, #44]	; (19180 <ll_reset+0x110>)
   19152:	490e      	ldr	r1, [pc, #56]	; (1918c <ll_reset+0x11c>)
   19154:	480c      	ldr	r0, [pc, #48]	; (19188 <ll_reset+0x118>)
   19156:	f44f 7348 	mov.w	r3, #800	; 0x320
   1915a:	f00e f9eb 	bl	27534 <assert_print>
   1915e:	4040      	eors	r0, r0
   19160:	f380 8811 	msr	BASEPRI, r0
   19164:	f04f 0003 	mov.w	r0, #3
   19168:	df02      	svc	2
   1916a:	e7a5      	b.n	190b8 <ll_reset+0x48>
   1916c:	200004a0 	.word	0x200004a0
   19170:	20000398 	.word	0x20000398
   19174:	2000037c 	.word	0x2000037c
   19178:	2000036c 	.word	0x2000036c
   1917c:	200004d8 	.word	0x200004d8
   19180:	0002fa04 	.word	0x0002fa04
   19184:	0002fa40 	.word	0x0002fa40
   19188:	0002f8a0 	.word	0x0002f8a0
   1918c:	0002fb64 	.word	0x0002fb64

00019190 <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
   19190:	b510      	push	{r4, lr}
   19192:	b082      	sub	sp, #8
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
   19194:	2400      	movs	r4, #0
   19196:	e9cd 4400 	strd	r4, r4, [sp]
   1919a:	9b04      	ldr	r3, [sp, #16]
   1919c:	f007 f86c 	bl	20278 <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
   191a0:	b002      	add	sp, #8
   191a2:	bd10      	pop	{r4, pc}

000191a4 <lll_resume>:

void lll_resume(void *param)
{
   191a4:	b510      	push	{r4, lr}
   191a6:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
   191a8:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   191aa:	691a      	ldr	r2, [r3, #16]
   191ac:	6999      	ldr	r1, [r3, #24]
   191ae:	2401      	movs	r4, #1
{
   191b0:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   191b2:	4020      	ands	r0, r4
   191b4:	e9cd 0400 	strd	r0, r4, [sp]
   191b8:	6958      	ldr	r0, [r3, #20]
   191ba:	f007 f85d 	bl	20278 <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   191be:	b108      	cbz	r0, 191c4 <lll_resume+0x20>
   191c0:	3077      	adds	r0, #119	; 0x77
   191c2:	d101      	bne.n	191c8 <lll_resume+0x24>
}
   191c4:	b002      	add	sp, #8
   191c6:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   191c8:	4a06      	ldr	r2, [pc, #24]	; (191e4 <lll_resume+0x40>)
   191ca:	4907      	ldr	r1, [pc, #28]	; (191e8 <lll_resume+0x44>)
   191cc:	4807      	ldr	r0, [pc, #28]	; (191ec <lll_resume+0x48>)
   191ce:	234f      	movs	r3, #79	; 0x4f
   191d0:	f00e f9b0 	bl	27534 <assert_print>
   191d4:	4040      	eors	r0, r0
   191d6:	f380 8811 	msr	BASEPRI, r0
   191da:	f04f 0003 	mov.w	r0, #3
   191de:	df02      	svc	2
}
   191e0:	b002      	add	sp, #8
   191e2:	bd10      	pop	{r4, pc}
   191e4:	0002fb6c 	.word	0x0002fb6c
   191e8:	0002fbb0 	.word	0x0002fbb0
   191ec:	0002f8a0 	.word	0x0002f8a0

000191f0 <ticker_stop_cb>:
{
   191f0:	b530      	push	{r4, r5, lr}
   191f2:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   191f4:	4b19      	ldr	r3, [pc, #100]	; (1925c <ticker_stop_cb+0x6c>)
{
   191f6:	9d07      	ldr	r5, [sp, #28]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   191f8:	4a19      	ldr	r2, [pc, #100]	; (19260 <ticker_stop_cb+0x70>)
   191fa:	1aeb      	subs	r3, r5, r3
   191fc:	fba2 2303 	umull	r2, r3, r2, r3
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   19200:	f413 5f7f 	tst.w	r3, #16320	; 0x3fc0
	handle = ull_adv_handle_get(adv);
   19204:	f3c3 1487 	ubfx	r4, r3, #6, #8
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   19208:	d119      	bne.n	1923e <ticker_stop_cb+0x4e>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   1920a:	1ca2      	adds	r2, r4, #2
   1920c:	4b15      	ldr	r3, [pc, #84]	; (19264 <ticker_stop_cb+0x74>)
   1920e:	9500      	str	r5, [sp, #0]
   19210:	b2d2      	uxtb	r2, r2
   19212:	2101      	movs	r1, #1
   19214:	2000      	movs	r0, #0
   19216:	f7fd fa95 	bl	16744 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1921a:	f030 0302 	bics.w	r3, r0, #2
   1921e:	d00c      	beq.n	1923a <ticker_stop_cb+0x4a>
   19220:	4a11      	ldr	r2, [pc, #68]	; (19268 <ticker_stop_cb+0x78>)
   19222:	4912      	ldr	r1, [pc, #72]	; (1926c <ticker_stop_cb+0x7c>)
   19224:	4812      	ldr	r0, [pc, #72]	; (19270 <ticker_stop_cb+0x80>)
   19226:	f44f 630f 	mov.w	r3, #2288	; 0x8f0
   1922a:	f00e f983 	bl	27534 <assert_print>
   1922e:	4040      	eors	r0, r0
   19230:	f380 8811 	msr	BASEPRI, r0
   19234:	f04f 0003 	mov.w	r0, #3
   19238:	df02      	svc	2
}
   1923a:	b003      	add	sp, #12
   1923c:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   1923e:	4a0a      	ldr	r2, [pc, #40]	; (19268 <ticker_stop_cb+0x78>)
   19240:	490c      	ldr	r1, [pc, #48]	; (19274 <ticker_stop_cb+0x84>)
   19242:	480b      	ldr	r0, [pc, #44]	; (19270 <ticker_stop_cb+0x80>)
   19244:	f640 03eb 	movw	r3, #2283	; 0x8eb
   19248:	f00e f974 	bl	27534 <assert_print>
   1924c:	4040      	eors	r0, r0
   1924e:	f380 8811 	msr	BASEPRI, r0
   19252:	f04f 0003 	mov.w	r0, #3
   19256:	df02      	svc	2
   19258:	e7d7      	b.n	1920a <ticker_stop_cb+0x1a>
   1925a:	bf00      	nop
   1925c:	20001fdc 	.word	0x20001fdc
   19260:	8d3dcb09 	.word	0x8d3dcb09
   19264:	0001930d 	.word	0x0001930d
   19268:	0002fbc4 	.word	0x0002fbc4
   1926c:	0002fc10 	.word	0x0002fc10
   19270:	0002f8a0 	.word	0x0002f8a0
   19274:	0002fc04 	.word	0x0002fc04

00019278 <disabled_cb>:
{
   19278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
   1927a:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
   1927c:	6e2f      	ldr	r7, [r5, #96]	; 0x60
{
   1927e:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   19280:	b1d7      	cbz	r7, 192b8 <disabled_cb+0x40>
	LL_ASSERT(adv->node_rx_cc_free);
   19282:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	adv->link_cc_free = NULL;
   19284:	2300      	movs	r3, #0
   19286:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   19288:	b34c      	cbz	r4, 192de <disabled_cb+0x66>
	adv->node_rx_cc_free = NULL;
   1928a:	2100      	movs	r1, #0
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1928c:	2317      	movs	r3, #23
	adv->node_rx_cc_free = NULL;
   1928e:	6669      	str	r1, [r5, #100]	; 0x64
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   19290:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
   19292:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19296:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   19298:	221e      	movs	r2, #30
   1929a:	f104 001c 	add.w	r0, r4, #28
   1929e:	f010 f85d 	bl	2935c <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   192a2:	233c      	movs	r3, #60	; 0x3c
   192a4:	7723      	strb	r3, [r4, #28]
	rx->hdr.rx_ftr.param = param;
   192a6:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
   192a8:	4621      	mov	r1, r4
   192aa:	4638      	mov	r0, r7
   192ac:	f7ff fad4 	bl	18858 <ll_rx_put>
}
   192b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   192b4:	f7ff bada 	b.w	1886c <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
   192b8:	4a10      	ldr	r2, [pc, #64]	; (192fc <disabled_cb+0x84>)
   192ba:	4911      	ldr	r1, [pc, #68]	; (19300 <disabled_cb+0x88>)
   192bc:	4811      	ldr	r0, [pc, #68]	; (19304 <disabled_cb+0x8c>)
   192be:	f640 1338 	movw	r3, #2360	; 0x938
   192c2:	f00e f937 	bl	27534 <assert_print>
   192c6:	4040      	eors	r0, r0
   192c8:	f380 8811 	msr	BASEPRI, r0
   192cc:	f04f 0003 	mov.w	r0, #3
   192d0:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
   192d2:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	link = adv->link_cc_free;
   192d4:	6e2f      	ldr	r7, [r5, #96]	; 0x60
	adv->link_cc_free = NULL;
   192d6:	2300      	movs	r3, #0
   192d8:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   192da:	2c00      	cmp	r4, #0
   192dc:	d1d5      	bne.n	1928a <disabled_cb+0x12>
   192de:	4a07      	ldr	r2, [pc, #28]	; (192fc <disabled_cb+0x84>)
   192e0:	4909      	ldr	r1, [pc, #36]	; (19308 <disabled_cb+0x90>)
   192e2:	4808      	ldr	r0, [pc, #32]	; (19304 <disabled_cb+0x8c>)
   192e4:	f640 133c 	movw	r3, #2364	; 0x93c
   192e8:	f00e f924 	bl	27534 <assert_print>
   192ec:	4040      	eors	r0, r0
   192ee:	f380 8811 	msr	BASEPRI, r0
   192f2:	f04f 0003 	mov.w	r0, #3
   192f6:	df02      	svc	2
	rx = adv->node_rx_cc_free;
   192f8:	6e6c      	ldr	r4, [r5, #100]	; 0x64
   192fa:	e7c6      	b.n	1928a <disabled_cb+0x12>
   192fc:	0002fbc4 	.word	0x0002fbc4
   19300:	0002fc2c 	.word	0x0002fc2c
   19304:	0002f8a0 	.word	0x0002f8a0
   19308:	0002fc40 	.word	0x0002fc40

0001930c <ticker_stop_op_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
   1930c:	b100      	cbz	r0, 19310 <ticker_stop_op_cb+0x4>
   1930e:	4770      	bx	lr
	mfy.param = param;
   19310:	4b0c      	ldr	r3, [pc, #48]	; (19344 <ticker_stop_op_cb+0x38>)
{
   19312:	b510      	push	{r4, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   19314:	4602      	mov	r2, r0
   19316:	460c      	mov	r4, r1
   19318:	2002      	movs	r0, #2
   1931a:	2101      	movs	r1, #1
	mfy.param = param;
   1931c:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1931e:	f7fc f839 	bl	15394 <mayfly_enqueue>
	LL_ASSERT(!ret);
   19322:	b900      	cbnz	r0, 19326 <ticker_stop_op_cb+0x1a>
}
   19324:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   19326:	4a08      	ldr	r2, [pc, #32]	; (19348 <ticker_stop_op_cb+0x3c>)
   19328:	4908      	ldr	r1, [pc, #32]	; (1934c <ticker_stop_op_cb+0x40>)
   1932a:	4809      	ldr	r0, [pc, #36]	; (19350 <ticker_stop_op_cb+0x44>)
   1932c:	f640 130c 	movw	r3, #2316	; 0x90c
   19330:	f00e f900 	bl	27534 <assert_print>
   19334:	4040      	eors	r0, r0
   19336:	f380 8811 	msr	BASEPRI, r0
   1933a:	f04f 0003 	mov.w	r0, #3
   1933e:	df02      	svc	2
}
   19340:	bd10      	pop	{r4, pc}
   19342:	bf00      	nop
   19344:	20000548 	.word	0x20000548
   19348:	0002fbc4 	.word	0x0002fbc4
   1934c:	0002fb3c 	.word	0x0002fb3c
   19350:	0002f8a0 	.word	0x0002f8a0

00019354 <adv_disable>:
{
   19354:	b538      	push	{r3, r4, r5, lr}
   19356:	4604      	mov	r4, r0
   19358:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   1935c:	b353      	cbz	r3, 193b4 <adv_disable+0x60>
		mfy.param = &adv->lll;
   1935e:	4d17      	ldr	r5, [pc, #92]	; (193bc <adv_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   19360:	6963      	ldr	r3, [r4, #20]
		mfy.param = &adv->lll;
   19362:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   19364:	b16b      	cbz	r3, 19382 <adv_disable+0x2e>
   19366:	4a16      	ldr	r2, [pc, #88]	; (193c0 <adv_disable+0x6c>)
   19368:	4916      	ldr	r1, [pc, #88]	; (193c4 <adv_disable+0x70>)
   1936a:	4817      	ldr	r0, [pc, #92]	; (193c8 <adv_disable+0x74>)
   1936c:	f640 1321 	movw	r3, #2337	; 0x921
   19370:	f00e f8e0 	bl	27534 <assert_print>
   19374:	4040      	eors	r0, r0
   19376:	f380 8811 	msr	BASEPRI, r0
   1937a:	f04f 0003 	mov.w	r0, #3
   1937e:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   19380:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   19382:	4912      	ldr	r1, [pc, #72]	; (193cc <adv_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   19384:	4b0d      	ldr	r3, [pc, #52]	; (193bc <adv_disable+0x68>)
   19386:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   19388:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1938c:	4611      	mov	r1, r2
   1938e:	2001      	movs	r0, #1
   19390:	f7fc f800 	bl	15394 <mayfly_enqueue>
		LL_ASSERT(!ret);
   19394:	b900      	cbnz	r0, 19398 <adv_disable+0x44>
}
   19396:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   19398:	4a09      	ldr	r2, [pc, #36]	; (193c0 <adv_disable+0x6c>)
   1939a:	490d      	ldr	r1, [pc, #52]	; (193d0 <adv_disable+0x7c>)
   1939c:	480a      	ldr	r0, [pc, #40]	; (193c8 <adv_disable+0x74>)
   1939e:	f640 1328 	movw	r3, #2344	; 0x928
   193a2:	f00e f8c7 	bl	27534 <assert_print>
   193a6:	4040      	eors	r0, r0
   193a8:	f380 8811 	msr	BASEPRI, r0
   193ac:	f04f 0003 	mov.w	r0, #3
   193b0:	df02      	svc	2
}
   193b2:	bd38      	pop	{r3, r4, r5, pc}
   193b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&adv->lll);
   193b8:	f7ff bf5e 	b.w	19278 <disabled_cb>
   193bc:	20000538 	.word	0x20000538
   193c0:	0002fbc4 	.word	0x0002fbc4
   193c4:	0002fc58 	.word	0x0002fc58
   193c8:	0002f8a0 	.word	0x0002f8a0
   193cc:	00019279 	.word	0x00019279
   193d0:	0002fb3c 	.word	0x0002fb3c

000193d4 <ticker_update_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   193d4:	b900      	cbnz	r0, 193d8 <ticker_update_op_cb+0x4>
   193d6:	4770      	bx	lr
{
   193d8:	b510      	push	{r4, lr}
   193da:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   193dc:	f7ff fb1a 	bl	18a14 <ull_disable_mark_get>
   193e0:	4284      	cmp	r4, r0
   193e2:	d00c      	beq.n	193fe <ticker_update_op_cb+0x2a>
   193e4:	4a06      	ldr	r2, [pc, #24]	; (19400 <ticker_update_op_cb+0x2c>)
   193e6:	4907      	ldr	r1, [pc, #28]	; (19404 <ticker_update_op_cb+0x30>)
   193e8:	4807      	ldr	r0, [pc, #28]	; (19408 <ticker_update_op_cb+0x34>)
   193ea:	f640 03dd 	movw	r3, #2269	; 0x8dd
   193ee:	f00e f8a1 	bl	27534 <assert_print>
   193f2:	4040      	eors	r0, r0
   193f4:	f380 8811 	msr	BASEPRI, r0
   193f8:	f04f 0003 	mov.w	r0, #3
   193fc:	df02      	svc	2
}
   193fe:	bd10      	pop	{r4, pc}
   19400:	0002fbc4 	.word	0x0002fbc4
   19404:	0002fc6c 	.word	0x0002fc6c
   19408:	0002f8a0 	.word	0x0002f8a0

0001940c <init_set.constprop.0>:
	pdu->tx_addr = 0;
	pdu->rx_addr = 0;
	pdu->len = BDADDR_SIZE;
}

static void init_set(struct ll_adv_set *adv)
   1940c:	b500      	push	{lr}
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   1940e:	4b13      	ldr	r3, [pc, #76]	; (1945c <init_set.constprop.0+0x50>)
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   19410:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   19412:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   19416:	f893 c06a 	ldrb.w	ip, [r3, #106]	; 0x6a
   1941a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   1941e:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
   19422:	f022 0202 	bic.w	r2, r2, #2
   19426:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   19428:	f042 020e 	orr.w	r2, r2, #14
   1942c:	849a      	strh	r2, [r3, #36]	; 0x24
	pdu->len = BDADDR_SIZE;
   1942e:	2006      	movs	r0, #6
	pdu->type = pdu_type;
   19430:	2200      	movs	r2, #0
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   19432:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   19436:	f36f 0c42 	bfc	ip, #1, #2
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   1943a:	f8a3 e068 	strh.w	lr, [r3, #104]	; 0x68
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   1943e:	f883 c06a 	strb.w	ip, [r3, #106]	; 0x6a
	pdu->len = BDADDR_SIZE;
   19442:	7048      	strb	r0, [r1, #1]
	pdu->type = pdu_type;
   19444:	700a      	strb	r2, [r1, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   19446:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
   1944a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1944e:	2204      	movs	r2, #4
   19450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	pdu->len = BDADDR_SIZE;
   19452:	7058      	strb	r0, [r3, #1]
	pdu->type = pdu_type;
   19454:	701a      	strb	r2, [r3, #0]
	adv->delay_remain = ULL_ADV_RANDOM_DELAY;
#endif /* ONFIG_BT_CTLR_JIT_SCHEDULING */

	init_pdu(lll_adv_data_peek(&ll_adv[0].lll), PDU_ADV_TYPE_ADV_IND);
	init_pdu(lll_adv_scan_rsp_peek(&ll_adv[0].lll), PDU_ADV_TYPE_SCAN_RSP);
}
   19456:	f85d fb04 	ldr.w	pc, [sp], #4
   1945a:	bf00      	nop
   1945c:	20001fdc 	.word	0x20001fdc

00019460 <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
   19460:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   19462:	4c1b      	ldr	r4, [pc, #108]	; (194d0 <conn_release.constprop.0+0x70>)
   19464:	6a25      	ldr	r5, [r4, #32]
	LL_ASSERT(!lll->link_tx_free);
   19466:	6dab      	ldr	r3, [r5, #88]	; 0x58
   19468:	b163      	cbz	r3, 19484 <conn_release.constprop.0+0x24>
   1946a:	4a1a      	ldr	r2, [pc, #104]	; (194d4 <conn_release.constprop.0+0x74>)
   1946c:	491a      	ldr	r1, [pc, #104]	; (194d8 <conn_release.constprop.0+0x78>)
   1946e:	481b      	ldr	r0, [pc, #108]	; (194dc <conn_release.constprop.0+0x7c>)
   19470:	f640 1366 	movw	r3, #2406	; 0x966
   19474:	f00e f85e 	bl	27534 <assert_print>
   19478:	4040      	eors	r0, r0
   1947a:	f380 8811 	msr	BASEPRI, r0
   1947e:	f04f 0003 	mov.w	r0, #3
   19482:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   19484:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   19488:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1948c:	f7fb ff04 	bl	15298 <memq_deinit>
	LL_ASSERT(link);
   19490:	4606      	mov	r6, r0
   19492:	b170      	cbz	r0, 194b2 <conn_release.constprop.0+0x52>
	ll_conn_release(lll->hdr.parent);
   19494:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   19496:	65ae      	str	r6, [r5, #88]	; 0x58
	ll_conn_release(lll->hdr.parent);
   19498:	f001 fa06 	bl	1a8a8 <ll_conn_release>
	adv->lll.conn = NULL;
   1949c:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
   1949e:	6e60      	ldr	r0, [r4, #100]	; 0x64
	adv->lll.conn = NULL;
   194a0:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
   194a2:	f7ff f9d3 	bl	1884c <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
   194a6:	6e20      	ldr	r0, [r4, #96]	; 0x60
	adv->node_rx_cc_free = NULL;
   194a8:	6665      	str	r5, [r4, #100]	; 0x64
	ll_rx_link_release(adv->link_cc_free);
   194aa:	f7ff f9c3 	bl	18834 <ll_rx_link_release>
	adv->link_cc_free = NULL;
   194ae:	6625      	str	r5, [r4, #96]	; 0x60
}
   194b0:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   194b2:	4a08      	ldr	r2, [pc, #32]	; (194d4 <conn_release.constprop.0+0x74>)
   194b4:	490a      	ldr	r1, [pc, #40]	; (194e0 <conn_release.constprop.0+0x80>)
   194b6:	4809      	ldr	r0, [pc, #36]	; (194dc <conn_release.constprop.0+0x7c>)
   194b8:	f640 1368 	movw	r3, #2408	; 0x968
   194bc:	f00e f83a 	bl	27534 <assert_print>
   194c0:	4040      	eors	r0, r0
   194c2:	f380 8811 	msr	BASEPRI, r0
   194c6:	f04f 0003 	mov.w	r0, #3
   194ca:	df02      	svc	2
   194cc:	e7e2      	b.n	19494 <conn_release.constprop.0+0x34>
   194ce:	bf00      	nop
   194d0:	20001fdc 	.word	0x20001fdc
   194d4:	0002fbc4 	.word	0x0002fbc4
   194d8:	0002fc9c 	.word	0x0002fc9c
   194dc:	0002f8a0 	.word	0x0002f8a0
   194e0:	0002fda8 	.word	0x0002fda8

000194e4 <disable.part.0>:
static inline uint8_t disable(uint8_t handle)
   194e4:	b530      	push	{r4, r5, lr}
	mark = ull_disable_mark(adv);
   194e6:	4c4c      	ldr	r4, [pc, #304]	; (19618 <disable.part.0+0x134>)
static inline uint8_t disable(uint8_t handle)
   194e8:	b085      	sub	sp, #20
	mark = ull_disable_mark(adv);
   194ea:	4620      	mov	r0, r4
   194ec:	f7ff fa7c 	bl	189e8 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   194f0:	4284      	cmp	r4, r0
   194f2:	d00c      	beq.n	1950e <disable.part.0+0x2a>
   194f4:	4a49      	ldr	r2, [pc, #292]	; (1961c <disable.part.0+0x138>)
   194f6:	494a      	ldr	r1, [pc, #296]	; (19620 <disable.part.0+0x13c>)
   194f8:	484a      	ldr	r0, [pc, #296]	; (19624 <disable.part.0+0x140>)
   194fa:	f640 231d 	movw	r3, #2589	; 0xa1d
   194fe:	f00e f819 	bl	27534 <assert_print>
   19502:	4040      	eors	r0, r0
   19504:	f380 8811 	msr	BASEPRI, r0
   19508:	f04f 0003 	mov.w	r0, #3
   1950c:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   1950e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   19512:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   19514:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
   19516:	d50d      	bpl.n	19534 <disable.part.0+0x50>
		ret_cb = TICKER_STATUS_BUSY;
   19518:	2102      	movs	r1, #2
   1951a:	9103      	str	r1, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1951c:	4b42      	ldr	r3, [pc, #264]	; (19628 <disable.part.0+0x144>)
   1951e:	9500      	str	r5, [sp, #0]
   19520:	2103      	movs	r1, #3
   19522:	2201      	movs	r2, #1
   19524:	2000      	movs	r0, #0
   19526:	f7fd f90d 	bl	16744 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   1952a:	4629      	mov	r1, r5
   1952c:	f7ff fa34 	bl	18998 <ull_ticker_status_take>
		if (ret) {
   19530:	2800      	cmp	r0, #0
   19532:	d15b      	bne.n	195ec <disable.part.0+0x108>
	ret_cb = TICKER_STATUS_BUSY;
   19534:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   19536:	2103      	movs	r1, #3
   19538:	4b3b      	ldr	r3, [pc, #236]	; (19628 <disable.part.0+0x144>)
   1953a:	9500      	str	r5, [sp, #0]
   1953c:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
   1953e:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   19540:	f7fd f900 	bl	16744 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   19544:	4629      	mov	r1, r5
   19546:	f7ff fa27 	bl	18998 <ull_ticker_status_take>
	if (ret) {
   1954a:	bb38      	cbnz	r0, 1959c <disable.part.0+0xb8>
	err = ull_disable(&adv->lll);
   1954c:	4837      	ldr	r0, [pc, #220]	; (1962c <disable.part.0+0x148>)
   1954e:	f7ff fa83 	bl	18a58 <ull_disable>
	LL_ASSERT(!err || (err == -EALREADY));
   19552:	b108      	cbz	r0, 19558 <disable.part.0+0x74>
   19554:	3078      	adds	r0, #120	; 0x78
   19556:	d136      	bne.n	195c6 <disable.part.0+0xe2>
	mark = ull_disable_unmark(adv);
   19558:	482f      	ldr	r0, [pc, #188]	; (19618 <disable.part.0+0x134>)
   1955a:	f7ff fa4f 	bl	189fc <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   1955e:	4284      	cmp	r4, r0
   19560:	d00c      	beq.n	1957c <disable.part.0+0x98>
   19562:	4a2e      	ldr	r2, [pc, #184]	; (1961c <disable.part.0+0x138>)
   19564:	492e      	ldr	r1, [pc, #184]	; (19620 <disable.part.0+0x13c>)
   19566:	482f      	ldr	r0, [pc, #188]	; (19624 <disable.part.0+0x140>)
   19568:	f640 233f 	movw	r3, #2623	; 0xa3f
   1956c:	f00d ffe2 	bl	27534 <assert_print>
   19570:	4040      	eors	r0, r0
   19572:	f380 8811 	msr	BASEPRI, r0
   19576:	f04f 0003 	mov.w	r0, #3
   1957a:	df02      	svc	2
	if (adv->lll.conn) {
   1957c:	6a23      	ldr	r3, [r4, #32]
   1957e:	b10b      	cbz	r3, 19584 <disable.part.0+0xa0>
		conn_release(adv);
   19580:	f7ff ff6e 	bl	19460 <conn_release.constprop.0>
	adv->is_enabled = 0U;
   19584:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
		ull_filter_adv_scan_state_cb(0);
   19588:	2000      	movs	r0, #0
	adv->is_enabled = 0U;
   1958a:	f36f 0300 	bfc	r3, #0, #1
   1958e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
		ull_filter_adv_scan_state_cb(0);
   19592:	f005 fea3 	bl	1f2dc <ull_filter_adv_scan_state_cb>
	return 0;
   19596:	2000      	movs	r0, #0
}
   19598:	b005      	add	sp, #20
   1959a:	bd30      	pop	{r4, r5, pc}
		mark = ull_disable_unmark(adv);
   1959c:	481e      	ldr	r0, [pc, #120]	; (19618 <disable.part.0+0x134>)
   1959e:	f7ff fa2d 	bl	189fc <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   195a2:	4284      	cmp	r4, r0
   195a4:	d034      	beq.n	19610 <disable.part.0+0x12c>
   195a6:	4a1d      	ldr	r2, [pc, #116]	; (1961c <disable.part.0+0x138>)
   195a8:	491d      	ldr	r1, [pc, #116]	; (19620 <disable.part.0+0x13c>)
   195aa:	481e      	ldr	r0, [pc, #120]	; (19624 <disable.part.0+0x140>)
   195ac:	f640 2336 	movw	r3, #2614	; 0xa36
   195b0:	f00d ffc0 	bl	27534 <assert_print>
   195b4:	4040      	eors	r0, r0
   195b6:	f380 8811 	msr	BASEPRI, r0
   195ba:	f04f 0003 	mov.w	r0, #3
   195be:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   195c0:	200c      	movs	r0, #12
}
   195c2:	b005      	add	sp, #20
   195c4:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!err || (err == -EALREADY));
   195c6:	4a15      	ldr	r2, [pc, #84]	; (1961c <disable.part.0+0x138>)
   195c8:	4919      	ldr	r1, [pc, #100]	; (19630 <disable.part.0+0x14c>)
   195ca:	4816      	ldr	r0, [pc, #88]	; (19624 <disable.part.0+0x140>)
   195cc:	f640 233c 	movw	r3, #2620	; 0xa3c
   195d0:	f00d ffb0 	bl	27534 <assert_print>
   195d4:	4040      	eors	r0, r0
   195d6:	f380 8811 	msr	BASEPRI, r0
   195da:	f04f 0003 	mov.w	r0, #3
   195de:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   195e0:	480d      	ldr	r0, [pc, #52]	; (19618 <disable.part.0+0x134>)
   195e2:	f7ff fa0b 	bl	189fc <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   195e6:	4284      	cmp	r4, r0
   195e8:	d1bb      	bne.n	19562 <disable.part.0+0x7e>
   195ea:	e7c7      	b.n	1957c <disable.part.0+0x98>
			mark = ull_disable_unmark(adv);
   195ec:	480a      	ldr	r0, [pc, #40]	; (19618 <disable.part.0+0x134>)
   195ee:	f7ff fa05 	bl	189fc <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   195f2:	4284      	cmp	r4, r0
   195f4:	d00c      	beq.n	19610 <disable.part.0+0x12c>
   195f6:	4a09      	ldr	r2, [pc, #36]	; (1961c <disable.part.0+0x138>)
   195f8:	4909      	ldr	r1, [pc, #36]	; (19620 <disable.part.0+0x13c>)
   195fa:	480a      	ldr	r0, [pc, #40]	; (19624 <disable.part.0+0x140>)
   195fc:	f640 2328 	movw	r3, #2600	; 0xa28
   19600:	f00d ff98 	bl	27534 <assert_print>
   19604:	4040      	eors	r0, r0
   19606:	f380 8811 	msr	BASEPRI, r0
   1960a:	f04f 0003 	mov.w	r0, #3
   1960e:	df02      	svc	2
			return BT_HCI_ERR_CMD_DISALLOWED;
   19610:	200c      	movs	r0, #12
}
   19612:	b005      	add	sp, #20
   19614:	bd30      	pop	{r4, r5, pc}
   19616:	bf00      	nop
   19618:	20001fdc 	.word	0x20001fdc
   1961c:	0002fbc4 	.word	0x0002fbc4
   19620:	0002fcb0 	.word	0x0002fcb0
   19624:	0002f8a0 	.word	0x0002f8a0
   19628:	00017f6d 	.word	0x00017f6d
   1962c:	20001ff8 	.word	0x20001ff8
   19630:	0002fcbc 	.word	0x0002fcbc

00019634 <adv_time_get.constprop.0.isra.0>:
static uint16_t adv_time_get(struct pdu_adv *pdu, struct pdu_adv *pdu_scan,
   19634:	b410      	push	{r4}
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   19636:	7804      	ldrb	r4, [r0, #0]
   19638:	f004 040f 	and.w	r4, r4, #15
				   rxtx_turn_us * (adv_chn_cnt - 1);
   1963c:	1e53      	subs	r3, r2, #1
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   1963e:	2c02      	cmp	r4, #2
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   19640:	fa1f fc83 	uxth.w	ip, r3
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   19644:	d01f      	beq.n	19686 <adv_time_get.constprop.0.isra.0+0x52>
			if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   19646:	2c01      	cmp	r4, #1
   19648:	d009      	beq.n	1965e <adv_time_get.constprop.0.isra.0+0x2a>
			BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
   1964a:	3110      	adds	r1, #16
		const uint16_t scan_rsp_us =
   1964c:	00c9      	lsls	r1, r1, #3
			} else if (pdu->type == PDU_ADV_TYPE_ADV_IND) {
   1964e:	b18c      	cbz	r4, 19674 <adv_time_get.constprop.0.isra.0+0x40>
			} else if (pdu->type == PDU_ADV_TYPE_SCAN_IND) {
   19650:	2c06      	cmp	r4, #6
   19652:	d00f      	beq.n	19674 <adv_time_get.constprop.0.isra.0+0x40>
   19654:	f44f 732a 	mov.w	r3, #680	; 0x2a8
   19658:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
   1965c:	e003      	b.n	19666 <adv_time_get.constprop.0.isra.0+0x32>
   1965e:	f44f 6387 	mov.w	r3, #1080	; 0x438
   19662:	f240 2216 	movw	r2, #534	; 0x216
			time_us += (BYTES2US(adv_size, PHY_1M) +
   19666:	fb0c 3302 	mla	r3, ip, r2, r3
   1966a:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   1966e:	4018      	ands	r0, r3
}
   19670:	bc10      	pop	{r4}
   19672:	4770      	bx	lr
				adv_size += pdu->len;
   19674:	7843      	ldrb	r3, [r0, #1]
   19676:	3310      	adds	r3, #16
			time_us += (BYTES2US(adv_size, PHY_1M) +
   19678:	00db      	lsls	r3, r3, #3
   1967a:	f501 715c 	add.w	r1, r1, #880	; 0x370
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
   1967e:	f503 72b3 	add.w	r2, r3, #358	; 0x166
   19682:	440b      	add	r3, r1
   19684:	e7ef      	b.n	19666 <adv_time_get.constprop.0.isra.0+0x32>
			adv_size += pdu->len;
   19686:	7840      	ldrb	r0, [r0, #1]
}
   19688:	bc10      	pop	{r4}
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   1968a:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
   1968e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   19692:	3010      	adds	r0, #16
   19694:	005b      	lsls	r3, r3, #1
   19696:	00c1      	lsls	r1, r0, #3
   19698:	f503 70c8 	add.w	r0, r3, #400	; 0x190
   1969c:	fb01 0002 	mla	r0, r1, r2, r0
   196a0:	b280      	uxth	r0, r0
}
   196a2:	4770      	bx	lr

000196a4 <ticker_cb>:
{
   196a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   196a8:	461d      	mov	r5, r3
   196aa:	b08a      	sub	sp, #40	; 0x28
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   196ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
   196b0:	429d      	cmp	r5, r3
{
   196b2:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   196b6:	9c11      	ldr	r4, [sp, #68]	; 0x44
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   196b8:	d018      	beq.n	196ec <ticker_cb+0x48>
	return ++hdr->ref;
   196ba:	7823      	ldrb	r3, [r4, #0]
   196bc:	3301      	adds	r3, #1
   196be:	b2db      	uxtb	r3, r3
   196c0:	4607      	mov	r7, r0
   196c2:	4616      	mov	r6, r2
   196c4:	7023      	strb	r3, [r4, #0]
		LL_ASSERT(ref);
   196c6:	2b00      	cmp	r3, #0
   196c8:	d063      	beq.n	19792 <ticker_cb+0xee>
		p.ticks_at_expire = ticks_at_expire;
   196ca:	4939      	ldr	r1, [pc, #228]	; (197b0 <ticker_cb+0x10c>)
		mfy.param = &p;
   196cc:	4b39      	ldr	r3, [pc, #228]	; (197b4 <ticker_cb+0x110>)
		p.lazy = lazy;
   196ce:	810d      	strh	r5, [r1, #8]
	lll = &adv->lll;
   196d0:	f104 001c 	add.w	r0, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   196d4:	2200      	movs	r2, #0
		p.param = lll;
   196d6:	60c8      	str	r0, [r1, #12]
		p.remainder = remainder;
   196d8:	e9c1 7600 	strd	r7, r6, [r1]
		p.force = force;
   196dc:	f881 800a 	strb.w	r8, [r1, #10]
		mfy.param = &p;
   196e0:	6099      	str	r1, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   196e2:	2001      	movs	r0, #1
   196e4:	4611      	mov	r1, r2
   196e6:	f7fb fe55 	bl	15394 <mayfly_enqueue>
		LL_ASSERT(!ret);
   196ea:	b938      	cbnz	r0, 196fc <ticker_cb+0x58>
	if (!lll->is_hdcd)
   196ec:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   196f0:	f010 0501 	ands.w	r5, r0, #1
   196f4:	d014      	beq.n	19720 <ticker_cb+0x7c>
}
   196f6:	b00a      	add	sp, #40	; 0x28
   196f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
   196fc:	4a2e      	ldr	r2, [pc, #184]	; (197b8 <ticker_cb+0x114>)
   196fe:	492f      	ldr	r1, [pc, #188]	; (197bc <ticker_cb+0x118>)
   19700:	482f      	ldr	r0, [pc, #188]	; (197c0 <ticker_cb+0x11c>)
   19702:	f640 03af 	movw	r3, #2223	; 0x8af
   19706:	f00d ff15 	bl	27534 <assert_print>
   1970a:	4040      	eors	r0, r0
   1970c:	f380 8811 	msr	BASEPRI, r0
   19710:	f04f 0003 	mov.w	r0, #3
   19714:	df02      	svc	2
	if (!lll->is_hdcd)
   19716:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   1971a:	f010 0501 	ands.w	r5, r0, #1
   1971e:	d1ea      	bne.n	196f6 <ticker_cb+0x52>
	lll_rand_isr_get(&random_delay, sizeof(random_delay));
   19720:	2104      	movs	r1, #4
   19722:	a809      	add	r0, sp, #36	; 0x24
   19724:	f006 fbea 	bl	1fefc <lll_rand_isr_get>
	random_delay %= ticks_delay_window;
   19728:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1972a:	4a26      	ldr	r2, [pc, #152]	; (197c4 <ticker_cb+0x120>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1972c:	9406      	str	r4, [sp, #24]
	random_delay %= ticks_delay_window;
   1972e:	fba2 1203 	umull	r1, r2, r2, r3
   19732:	1a99      	subs	r1, r3, r2
   19734:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   19738:	0a12      	lsrs	r2, r2, #8
   1973a:	f240 1147 	movw	r1, #327	; 0x147
   1973e:	fb01 3312 	mls	r3, r1, r2, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   19742:	4a21      	ldr	r2, [pc, #132]	; (197c8 <ticker_cb+0x124>)
   19744:	4921      	ldr	r1, [pc, #132]	; (197cc <ticker_cb+0x128>)
   19746:	1aa2      	subs	r2, r4, r2
   19748:	fba1 1202 	umull	r1, r2, r1, r2
   1974c:	0992      	lsrs	r2, r2, #6
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1974e:	4920      	ldr	r1, [pc, #128]	; (197d0 <ticker_cb+0x12c>)
   19750:	3202      	adds	r2, #2
	random_delay += (ticks_delay_window_offset + 1);
   19752:	3301      	adds	r3, #1
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   19754:	e9cd 5104 	strd	r5, r1, [sp, #16]
   19758:	e9cd 5502 	strd	r5, r5, [sp, #8]
   1975c:	e9cd 5500 	strd	r5, r5, [sp]
   19760:	b2d2      	uxtb	r2, r2
   19762:	2101      	movs	r1, #1
   19764:	4628      	mov	r0, r5
	random_delay += (ticks_delay_window_offset + 1);
   19766:	9309      	str	r3, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   19768:	f7fc ffd4 	bl	16714 <ticker_update>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1976c:	f030 0302 	bics.w	r3, r0, #2
   19770:	d0c1      	beq.n	196f6 <ticker_cb+0x52>
   19772:	4a11      	ldr	r2, [pc, #68]	; (197b8 <ticker_cb+0x114>)
   19774:	4917      	ldr	r1, [pc, #92]	; (197d4 <ticker_cb+0x130>)
   19776:	4812      	ldr	r0, [pc, #72]	; (197c0 <ticker_cb+0x11c>)
   19778:	f240 7344 	movw	r3, #1860	; 0x744
   1977c:	f00d feda 	bl	27534 <assert_print>
   19780:	4040      	eors	r0, r0
   19782:	f380 8811 	msr	BASEPRI, r0
   19786:	f04f 0003 	mov.w	r0, #3
   1978a:	df02      	svc	2
}
   1978c:	b00a      	add	sp, #40	; 0x28
   1978e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(ref);
   19792:	4a09      	ldr	r2, [pc, #36]	; (197b8 <ticker_cb+0x114>)
   19794:	4910      	ldr	r1, [pc, #64]	; (197d8 <ticker_cb+0x134>)
   19796:	480a      	ldr	r0, [pc, #40]	; (197c0 <ticker_cb+0x11c>)
   19798:	f640 03a2 	movw	r3, #2210	; 0x8a2
   1979c:	f00d feca 	bl	27534 <assert_print>
   197a0:	4040      	eors	r0, r0
   197a2:	f380 8811 	msr	BASEPRI, r0
   197a6:	f04f 0003 	mov.w	r0, #3
   197aa:	df02      	svc	2
   197ac:	e78d      	b.n	196ca <ticker_cb+0x26>
   197ae:	bf00      	nop
   197b0:	2000205c 	.word	0x2000205c
   197b4:	20000528 	.word	0x20000528
   197b8:	0002fbc4 	.word	0x0002fbc4
   197bc:	0002fb3c 	.word	0x0002fb3c
   197c0:	0002f8a0 	.word	0x0002f8a0
   197c4:	90d4f121 	.word	0x90d4f121
   197c8:	20001fdc 	.word	0x20001fdc
   197cc:	8d3dcb09 	.word	0x8d3dcb09
   197d0:	000193d5 	.word	0x000193d5
   197d4:	0002fcd8 	.word	0x0002fcd8
   197d8:	0002fcd4 	.word	0x0002fcd4

000197dc <ll_adv_params_set>:
{
   197dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!adv || adv->is_enabled) {
   197e0:	4c6d      	ldr	r4, [pc, #436]	; (19998 <ll_adv_params_set+0x1bc>)
{
   197e2:	461f      	mov	r7, r3
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   197e4:	4b6d      	ldr	r3, [pc, #436]	; (1999c <ll_adv_params_set+0x1c0>)
	if (!adv || adv->is_enabled) {
   197e6:	f894 606a 	ldrb.w	r6, [r4, #106]	; 0x6a
{
   197ea:	4680      	mov	r8, r0
   197ec:	468e      	mov	lr, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   197ee:	e893 0003 	ldmia.w	r3, {r0, r1}
{
   197f2:	b082      	sub	sp, #8
	if (!adv || adv->is_enabled) {
   197f4:	f016 0601 	ands.w	r6, r6, #1
{
   197f8:	4615      	mov	r5, r2
   197fa:	f89d c02c 	ldrb.w	ip, [sp, #44]	; 0x2c
   197fe:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   19802:	9000      	str	r0, [sp, #0]
   19804:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
   19808:	f040 8089 	bne.w	1991e <ll_adv_params_set+0x142>
	adv->lll.chan_map = chan_map;
   1980c:	f00c 0c07 	and.w	ip, ip, #7
   19810:	f002 0203 	and.w	r2, r2, #3
   19814:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   19818:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1981c:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
		adv->interval = 0;
   19820:	f1be 0f01 	cmp.w	lr, #1
   19824:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   19828:	bf08      	it	eq
   1982a:	f04f 0800 	moveq.w	r8, #0
	pdu->type = pdu_adv_type[adv_type];
   1982e:	ab02      	add	r3, sp, #8
   19830:	f8a4 8068 	strh.w	r8, [r4, #104]	; 0x68
   19834:	449e      	add	lr, r3
   19836:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
	adv->lll.chan_map = chan_map;
   1983a:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
	pdu_type_prev = pdu->type;
   1983c:	f898 9000 	ldrb.w	r9, [r8]
	pdu->type = pdu_adv_type[adv_type];
   19840:	f81e 3c08 	ldrb.w	r3, [lr, #-8]
	adv->lll.chan_map = chan_map;
   19844:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   19848:	f013 0f0e 	tst.w	r3, #14
	adv->lll.chan_map = chan_map;
   1984c:	f022 0202 	bic.w	r2, r2, #2
	pdu->type = pdu_adv_type[adv_type];
   19850:	f029 011f 	bic.w	r1, r9, #31
   19854:	f003 030f 	and.w	r3, r3, #15
	adv->lll.chan_map = chan_map;
   19858:	ea4c 0c02 	orr.w	ip, ip, r2
   1985c:	ea43 0301 	orr.w	r3, r3, r1
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   19860:	bf0c      	ite	eq
   19862:	2201      	moveq	r2, #1
   19864:	2200      	movne	r2, #0
   19866:	f362 1345 	bfi	r3, r2, #5, #1
	adv->lll.chan_map = chan_map;
   1986a:	f8a4 c024 	strh.w	ip, [r4, #36]	; 0x24
	pdu_type_prev = pdu->type;
   1986e:	f888 3000 	strb.w	r3, [r8]
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   19872:	f003 030f 	and.w	r3, r3, #15
   19876:	2b01      	cmp	r3, #1
	pdu_type_prev = pdu->type;
   19878:	f009 090f 	and.w	r9, r9, #15
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1987c:	d046      	beq.n	1990c <ll_adv_params_set+0x130>
	adv->own_addr_type = own_addr_type;
   1987e:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   19882:	f365 0342 	bfi	r3, r5, #1, #2
   19886:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1988a:	b2da      	uxtb	r2, r3
   1988c:	075b      	lsls	r3, r3, #29
   1988e:	d508      	bpl.n	198a2 <ll_adv_params_set+0xc6>
		adv->peer_addr_type = direct_addr_type;
   19890:	f367 02c3 	bfi	r2, r7, #3, #1
   19894:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
		memcpy(&adv->peer_addr, direct_addr, BDADDR_SIZE);
   19898:	4841      	ldr	r0, [pc, #260]	; (199a0 <ll_adv_params_set+0x1c4>)
   1989a:	990a      	ldr	r1, [sp, #40]	; 0x28
   1989c:	2206      	movs	r2, #6
   1989e:	f00f fd52 	bl	29346 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   198a2:	f898 3000 	ldrb.w	r3, [r8]
   198a6:	f003 020f 	and.w	r2, r3, #15
   198aa:	2a01      	cmp	r2, #1
		pdu->tx_addr = own_addr_type & 0x1;
   198ac:	f005 0a01 	and.w	sl, r5, #1
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   198b0:	d03a      	beq.n	19928 <ll_adv_params_set+0x14c>
	} else if (pdu->len == 0) {
   198b2:	f898 2001 	ldrb.w	r2, [r8, #1]
   198b6:	b1fa      	cbz	r2, 198f8 <ll_adv_params_set+0x11c>
		if (((pdu_type_prev == PDU_ADV_TYPE_DIRECT_IND) ||
   198b8:	f1b9 0f01 	cmp.w	r9, #1
   198bc:	d04f      	beq.n	1995e <ll_adv_params_set+0x182>
		pdu->tx_addr = own_addr_type & 0x1;
   198be:	f898 3000 	ldrb.w	r3, [r8]
   198c2:	f36a 1386 	bfi	r3, sl, #6, #1
		pdu->rx_addr = 0;
   198c6:	f36f 13c7 	bfc	r3, #7, #1
   198ca:	f888 3000 	strb.w	r3, [r8]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   198ce:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   198d2:	61e4      	str	r4, [r4, #28]
   198d4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   198d8:	01ad      	lsls	r5, r5, #6
   198da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   198dc:	f005 0540 	and.w	r5, r5, #64	; 0x40
		if (pdu->len == 0) {
   198e0:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   198e2:	f045 0504 	orr.w	r5, r5, #4
   198e6:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
   198e8:	b912      	cbnz	r2, 198f0 <ll_adv_params_set+0x114>
			pdu->len = BDADDR_SIZE;
   198ea:	2106      	movs	r1, #6
   198ec:	7059      	strb	r1, [r3, #1]
	return 0;
   198ee:	4616      	mov	r6, r2
}
   198f0:	4630      	mov	r0, r6
   198f2:	b002      	add	sp, #8
   198f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pdu->tx_addr = own_addr_type & 0x1;
   198f8:	f36a 1386 	bfi	r3, sl, #6, #1
		pdu->rx_addr = 0;
   198fc:	f362 13c7 	bfi	r3, r2, #7, #1
   19900:	f888 3000 	strb.w	r3, [r8]
		pdu->len = BDADDR_SIZE;
   19904:	2306      	movs	r3, #6
   19906:	f888 3001 	strb.w	r3, [r8, #1]
   1990a:	e7e0      	b.n	198ce <ll_adv_params_set+0xf2>
	    (pdu_type_prev != PDU_ADV_TYPE_DIRECT_IND) &&
   1990c:	f1b9 0f01 	cmp.w	r9, #1
   19910:	d0b5      	beq.n	1987e <ll_adv_params_set+0xa2>
		if (pdu->len == 0U) {
   19912:	f898 2001 	ldrb.w	r2, [r8, #1]
   19916:	b9b2      	cbnz	r2, 19946 <ll_adv_params_set+0x16a>
			adv->ad_data_backup.len = 0U;
   19918:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
   1991c:	e7af      	b.n	1987e <ll_adv_params_set+0xa2>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1991e:	260c      	movs	r6, #12
}
   19920:	4630      	mov	r0, r6
   19922:	b002      	add	sp, #8
   19924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pdu->rx_addr = direct_addr_type;
   19928:	4640      	mov	r0, r8
		pdu->tx_addr = own_addr_type & 0x1;
   1992a:	f36a 1386 	bfi	r3, sl, #6, #1
		pdu->rx_addr = direct_addr_type;
   1992e:	f367 13c7 	bfi	r3, r7, #7, #1
   19932:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   19936:	990a      	ldr	r1, [sp, #40]	; 0x28
   19938:	2206      	movs	r2, #6
   1993a:	f00f fd04 	bl	29346 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   1993e:	230c      	movs	r3, #12
   19940:	f888 3001 	strb.w	r3, [r8, #1]
   19944:	e7c3      	b.n	198ce <ll_adv_params_set+0xf2>
			LL_ASSERT(pdu->len >=
   19946:	2a05      	cmp	r2, #5
   19948:	d916      	bls.n	19978 <ll_adv_params_set+0x19c>
			adv->ad_data_backup.len = pdu->len -
   1994a:	3a06      	subs	r2, #6
   1994c:	b2d2      	uxtb	r2, r2
   1994e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
   19952:	f108 0108 	add.w	r1, r8, #8
   19956:	4813      	ldr	r0, [pc, #76]	; (199a4 <ll_adv_params_set+0x1c8>)
   19958:	f00f fcf5 	bl	29346 <memcpy>
   1995c:	e78f      	b.n	1987e <ll_adv_params_set+0xa2>
			memcpy(pdu->adv_ind.data, adv->ad_data_backup.data,
   1995e:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   19962:	4910      	ldr	r1, [pc, #64]	; (199a4 <ll_adv_params_set+0x1c8>)
   19964:	f108 0008 	add.w	r0, r8, #8
   19968:	f00f fced 	bl	29346 <memcpy>
			pdu->len = offsetof(struct pdu_adv_adv_ind, data) +
   1996c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   19970:	3306      	adds	r3, #6
   19972:	f888 3001 	strb.w	r3, [r8, #1]
   19976:	e7a2      	b.n	198be <ll_adv_params_set+0xe2>
			LL_ASSERT(pdu->len >=
   19978:	4a0b      	ldr	r2, [pc, #44]	; (199a8 <ll_adv_params_set+0x1cc>)
   1997a:	490c      	ldr	r1, [pc, #48]	; (199ac <ll_adv_params_set+0x1d0>)
   1997c:	480c      	ldr	r0, [pc, #48]	; (199b0 <ll_adv_params_set+0x1d4>)
   1997e:	f44f 73ce 	mov.w	r3, #412	; 0x19c
   19982:	f00d fdd7 	bl	27534 <assert_print>
   19986:	4040      	eors	r0, r0
   19988:	f380 8811 	msr	BASEPRI, r0
   1998c:	f04f 0003 	mov.w	r0, #3
   19990:	df02      	svc	2
			adv->ad_data_backup.len = pdu->len -
   19992:	f898 2001 	ldrb.w	r2, [r8, #1]
   19996:	e7d8      	b.n	1994a <ll_adv_params_set+0x16e>
   19998:	20001fdc 	.word	0x20001fdc
   1999c:	0002f290 	.word	0x0002f290
   199a0:	20002047 	.word	0x20002047
   199a4:	2000201d 	.word	0x2000201d
   199a8:	0002fbc4 	.word	0x0002fbc4
   199ac:	0002fd10 	.word	0x0002fd10
   199b0:	0002f8a0 	.word	0x0002f8a0

000199b4 <ull_adv_init>:
{
   199b4:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   199b6:	4c06      	ldr	r4, [pc, #24]	; (199d0 <ull_adv_init+0x1c>)
   199b8:	f104 0028 	add.w	r0, r4, #40	; 0x28
   199bc:	f006 feca 	bl	20754 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   199c0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   199c4:	f006 fec6 	bl	20754 <lll_adv_data_init>
	init_set(&ll_adv[0]);
   199c8:	f7ff fd20 	bl	1940c <init_set.constprop.0>
}
   199cc:	2000      	movs	r0, #0
   199ce:	bd10      	pop	{r4, pc}
   199d0:	20001fdc 	.word	0x20001fdc

000199d4 <ull_adv_reset>:
{
   199d4:	b508      	push	{r3, lr}
	if (!adv || !adv->is_enabled) {
   199d6:	4b0b      	ldr	r3, [pc, #44]	; (19a04 <ull_adv_reset+0x30>)
   199d8:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
   199dc:	07d2      	lsls	r2, r2, #31
   199de:	d50e      	bpl.n	199fe <ull_adv_reset+0x2a>
	if (adv->lll.conn) {
   199e0:	6a1a      	ldr	r2, [r3, #32]
   199e2:	b152      	cbz	r2, 199fa <ull_adv_reset+0x26>
		adv->lll.conn->periph.cancelled = 1U;
   199e4:	f892 1020 	ldrb.w	r1, [r2, #32]
   199e8:	f041 0102 	orr.w	r1, r1, #2
   199ec:	f882 1020 	strb.w	r1, [r2, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
   199f0:	6a1b      	ldr	r3, [r3, #32]
   199f2:	f893 3020 	ldrb.w	r3, [r3, #32]
   199f6:	07db      	lsls	r3, r3, #31
   199f8:	d401      	bmi.n	199fe <ull_adv_reset+0x2a>
   199fa:	f7ff fd73 	bl	194e4 <disable.part.0>
}
   199fe:	2000      	movs	r0, #0
   19a00:	bd08      	pop	{r3, pc}
   19a02:	bf00      	nop
   19a04:	20001fdc 	.word	0x20001fdc

00019a08 <ull_adv_reset_finalize>:
{
   19a08:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&lll->adv_data);
   19a0a:	4c0a      	ldr	r4, [pc, #40]	; (19a34 <ull_adv_reset_finalize+0x2c>)
   19a0c:	f104 0528 	add.w	r5, r4, #40	; 0x28
   19a10:	4628      	mov	r0, r5
		lll_adv_data_reset(&lll->scan_rsp);
   19a12:	3434      	adds	r4, #52	; 0x34
		lll_adv_data_reset(&lll->adv_data);
   19a14:	f006 feae 	bl	20774 <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
   19a18:	4620      	mov	r0, r4
   19a1a:	f006 feab 	bl	20774 <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   19a1e:	4628      	mov	r0, r5
   19a20:	f006 fe98 	bl	20754 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   19a24:	4620      	mov	r0, r4
   19a26:	f006 fe95 	bl	20754 <lll_adv_data_init>
	init_set(&ll_adv[0]);
   19a2a:	f7ff fcef 	bl	1940c <init_set.constprop.0>
}
   19a2e:	2000      	movs	r0, #0
   19a30:	bd38      	pop	{r3, r4, r5, pc}
   19a32:	bf00      	nop
   19a34:	20001fdc 	.word	0x20001fdc

00019a38 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   19a38:	4a03      	ldr	r2, [pc, #12]	; (19a48 <ull_adv_handle_get+0x10>)
   19a3a:	4b04      	ldr	r3, [pc, #16]	; (19a4c <ull_adv_handle_get+0x14>)
   19a3c:	1a80      	subs	r0, r0, r2
   19a3e:	fba3 3000 	umull	r3, r0, r3, r0
}
   19a42:	f3c0 108f 	ubfx	r0, r0, #6, #16
   19a46:	4770      	bx	lr
   19a48:	20001fdc 	.word	0x20001fdc
   19a4c:	8d3dcb09 	.word	0x8d3dcb09

00019a50 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   19a50:	4a04      	ldr	r2, [pc, #16]	; (19a64 <ull_adv_lll_handle_get+0x14>)
   19a52:	6800      	ldr	r0, [r0, #0]
   19a54:	4b04      	ldr	r3, [pc, #16]	; (19a68 <ull_adv_lll_handle_get+0x18>)
   19a56:	1a80      	subs	r0, r0, r2
   19a58:	fba3 3000 	umull	r3, r0, r3, r0
}
   19a5c:	f3c0 108f 	ubfx	r0, r0, #6, #16
   19a60:	4770      	bx	lr
   19a62:	bf00      	nop
   19a64:	20001fdc 	.word	0x20001fdc
   19a68:	8d3dcb09 	.word	0x8d3dcb09

00019a6c <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   19a6c:	b938      	cbnz	r0, 19a7e <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   19a6e:	4805      	ldr	r0, [pc, #20]	; (19a84 <ull_adv_is_enabled_get+0x18>)
   19a70:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
	return &ll_adv[handle];
   19a74:	f013 0f01 	tst.w	r3, #1
   19a78:	bf08      	it	eq
   19a7a:	2000      	moveq	r0, #0
   19a7c:	4770      	bx	lr
		return NULL;
   19a7e:	2000      	movs	r0, #0
}
   19a80:	4770      	bx	lr
   19a82:	bf00      	nop
   19a84:	20001fdc 	.word	0x20001fdc

00019a88 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
   19a88:	b928      	cbnz	r0, 19a96 <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   19a8a:	4b04      	ldr	r3, [pc, #16]	; (19a9c <ull_adv_is_enabled+0x14>)
   19a8c:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
   19a90:	f000 0001 	and.w	r0, r0, #1
   19a94:	4770      	bx	lr
   19a96:	2000      	movs	r0, #0
}
   19a98:	4770      	bx	lr
   19a9a:	bf00      	nop
   19a9c:	20001fdc 	.word	0x20001fdc

00019aa0 <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   19aa0:	b950      	cbnz	r0, 19ab8 <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
   19aa2:	4b06      	ldr	r3, [pc, #24]	; (19abc <ull_adv_filter_pol_get+0x1c>)
   19aa4:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
   19aa8:	f010 0001 	ands.w	r0, r0, #1
   19aac:	d005      	beq.n	19aba <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
   19aae:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
   19ab2:	f000 0003 	and.w	r0, r0, #3
   19ab6:	4770      	bx	lr
		return 0;
   19ab8:	2000      	movs	r0, #0
}
   19aba:	4770      	bx	lr
   19abc:	20001fdc 	.word	0x20001fdc

00019ac0 <ull_adv_pdu_update_addrs>:
{
   19ac0:	b570      	push	{r4, r5, r6, lr}
   19ac2:	4605      	mov	r5, r0
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
   19ac4:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
{
   19ac8:	460c      	mov	r4, r1
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
   19aca:	f005 fd53 	bl	1f574 <ull_filter_adva_get>
	if (!rpa || IS_ENABLED(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)) {
   19ace:	b310      	cbz	r0, 19b16 <ull_adv_pdu_update_addrs+0x56>
		pdu->tx_addr = 1;
   19ad0:	7823      	ldrb	r3, [r4, #0]
   19ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19ad6:	4601      	mov	r1, r0
   19ad8:	7023      	strb	r3, [r4, #0]
	return pdu->adv_ind.addr;
   19ada:	1ca6      	adds	r6, r4, #2
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   19adc:	2206      	movs	r2, #6
   19ade:	4630      	mov	r0, r6
   19ae0:	f00f fc31 	bl	29346 <memcpy>
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   19ae4:	7823      	ldrb	r3, [r4, #0]
   19ae6:	f003 030f 	and.w	r3, r3, #15
   19aea:	2b01      	cmp	r3, #1
   19aec:	d001      	beq.n	19af2 <ull_adv_pdu_update_addrs+0x32>
}
   19aee:	4630      	mov	r0, r6
   19af0:	bd70      	pop	{r4, r5, r6, pc}
	rx_addr = ull_filter_tgta_get(adv->lll.rl_idx);
   19af2:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
   19af6:	f005 fd6b 	bl	1f5d0 <ull_filter_tgta_get>
	if (rx_addr) {
   19afa:	4601      	mov	r1, r0
   19afc:	2800      	cmp	r0, #0
   19afe:	d0f6      	beq.n	19aee <ull_adv_pdu_update_addrs+0x2e>
		pdu->rx_addr = 1;
   19b00:	7823      	ldrb	r3, [r4, #0]
   19b02:	4620      	mov	r0, r4
   19b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19b08:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(tgt_addr, rx_addr, BDADDR_SIZE);
   19b0c:	2206      	movs	r2, #6
   19b0e:	f00f fc1a 	bl	29346 <memcpy>
}
   19b12:	4630      	mov	r0, r6
   19b14:	bd70      	pop	{r4, r5, r6, pc}
			own_id_addr = ll_addr_get(pdu->tx_addr);
   19b16:	7820      	ldrb	r0, [r4, #0]
   19b18:	f3c0 1080 	ubfx	r0, r0, #6, #1
   19b1c:	f7fc fe78 	bl	16810 <ll_addr_get>
   19b20:	4601      	mov	r1, r0
	if (rpa) {
   19b22:	e7da      	b.n	19ada <ull_adv_pdu_update_addrs+0x1a>

00019b24 <ull_adv_data_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   19b24:	291f      	cmp	r1, #31
   19b26:	d849      	bhi.n	19bbc <ull_adv_data_set+0x98>
{
   19b28:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   19b2a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   19b2e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   19b32:	b083      	sub	sp, #12
   19b34:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   19b36:	7833      	ldrb	r3, [r6, #0]
   19b38:	f003 030f 	and.w	r3, r3, #15
   19b3c:	2b01      	cmp	r3, #1
   19b3e:	460d      	mov	r5, r1
   19b40:	4604      	mov	r4, r0
   19b42:	4617      	mov	r7, r2
   19b44:	d03c      	beq.n	19bc0 <ull_adv_data_set+0x9c>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   19b46:	f10d 0107 	add.w	r1, sp, #7
   19b4a:	3028      	adds	r0, #40	; 0x28
   19b4c:	f006 fe92 	bl	20874 <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
   19b50:	4631      	mov	r1, r6
   19b52:	4606      	mov	r6, r0
   19b54:	f811 2b02 	ldrb.w	r2, [r1], #2
   19b58:	f3c2 1040 	ubfx	r0, r2, #5, #1
	pdu->type = prev->type;
   19b5c:	f3c2 0303 	ubfx	r3, r2, #0, #4
   19b60:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	pdu->tx_addr = prev->tx_addr;
   19b64:	f3c2 1080 	ubfx	r0, r2, #6, #1
	pdu->type = prev->type;
   19b68:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
   19b6c:	f002 0280 	and.w	r2, r2, #128	; 0x80
   19b70:	4630      	mov	r0, r6
   19b72:	4313      	orrs	r3, r2
   19b74:	f800 3b02 	strb.w	r3, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   19b78:	2206      	movs	r2, #6
   19b7a:	f00f fbe4 	bl	29346 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   19b7e:	462a      	mov	r2, r5
   19b80:	4639      	mov	r1, r7
   19b82:	f106 0008 	add.w	r0, r6, #8
	pdu->len = BDADDR_SIZE + len;
   19b86:	3506      	adds	r5, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   19b88:	f00f fbdd 	bl	29346 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   19b8c:	7075      	strb	r5, [r6, #1]
	if (adv->is_enabled) {
   19b8e:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   19b92:	07db      	lsls	r3, r3, #31
   19b94:	d406      	bmi.n	19ba4 <ull_adv_data_set+0x80>
	pdu->last = idx;
   19b96:	f89d 3007 	ldrb.w	r3, [sp, #7]
   19b9a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	return 0;
   19b9e:	2000      	movs	r0, #0
}
   19ba0:	b003      	add	sp, #12
   19ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   19ba4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   19ba8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		err = ull_adv_time_update(adv, pdu, pdu_scan);
   19bac:	4631      	mov	r1, r6
   19bae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   19bb0:	4620      	mov	r0, r4
   19bb2:	f7f3 f995 	bl	cee0 <ull_adv_time_update>
		if (err) {
   19bb6:	2800      	cmp	r0, #0
   19bb8:	d0ed      	beq.n	19b96 <ull_adv_data_set+0x72>
   19bba:	e7f1      	b.n	19ba0 <ull_adv_data_set+0x7c>
		return BT_HCI_ERR_INVALID_PARAM;
   19bbc:	2012      	movs	r0, #18
}
   19bbe:	4770      	bx	lr
		adv->ad_data_backup.len = len;
   19bc0:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
		memcpy(adv->ad_data_backup.data, data, adv->ad_data_backup.len);
   19bc4:	460a      	mov	r2, r1
   19bc6:	3041      	adds	r0, #65	; 0x41
   19bc8:	4639      	mov	r1, r7
   19bca:	f00f fbbc 	bl	29346 <memcpy>
		return 0;
   19bce:	2000      	movs	r0, #0
}
   19bd0:	b003      	add	sp, #12
   19bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00019bd4 <ll_adv_data_set>:
{
   19bd4:	4603      	mov	r3, r0
   19bd6:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
   19bd8:	4801      	ldr	r0, [pc, #4]	; (19be0 <ll_adv_data_set+0xc>)
   19bda:	4619      	mov	r1, r3
   19bdc:	f7ff bfa2 	b.w	19b24 <ull_adv_data_set>
   19be0:	20001fdc 	.word	0x20001fdc

00019be4 <ull_scan_rsp_set.part.0>:
uint8_t ull_scan_rsp_set(struct ll_adv_set *adv, uint8_t len,
   19be4:	b5f0      	push	{r4, r5, r6, r7, lr}
   19be6:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   19bea:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   19bee:	b083      	sub	sp, #12
   19bf0:	6b9d      	ldr	r5, [r3, #56]	; 0x38
   19bf2:	460e      	mov	r6, r1
   19bf4:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   19bf6:	f10d 0107 	add.w	r1, sp, #7
   19bfa:	3034      	adds	r0, #52	; 0x34
   19bfc:	4617      	mov	r7, r2
   19bfe:	f006 fe39 	bl	20874 <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
   19c02:	4629      	mov	r1, r5
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   19c04:	2206      	movs	r2, #6
	pdu->tx_addr = prev->tx_addr;
   19c06:	f811 3b02 	ldrb.w	r3, [r1], #2
   19c0a:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   19c0e:	019b      	lsls	r3, r3, #6
   19c10:	f043 0304 	orr.w	r3, r3, #4
   19c14:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
   19c16:	1db3      	adds	r3, r6, #6
   19c18:	7043      	strb	r3, [r0, #1]
   19c1a:	4605      	mov	r5, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   19c1c:	3002      	adds	r0, #2
   19c1e:	f00f fb92 	bl	29346 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   19c22:	4632      	mov	r2, r6
   19c24:	4639      	mov	r1, r7
   19c26:	f105 0008 	add.w	r0, r5, #8
   19c2a:	f00f fb8c 	bl	29346 <memcpy>
	if (adv->is_enabled) {
   19c2e:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   19c32:	07db      	lsls	r3, r3, #31
   19c34:	d50a      	bpl.n	19c4c <ull_scan_rsp_set.part.0+0x68>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   19c36:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   19c3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   19c3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
		if ((pdu_adv_scan->type == PDU_ADV_TYPE_ADV_IND) ||
   19c40:	780b      	ldrb	r3, [r1, #0]
   19c42:	f013 030f 	ands.w	r3, r3, #15
   19c46:	d008      	beq.n	19c5a <ull_scan_rsp_set.part.0+0x76>
   19c48:	2b06      	cmp	r3, #6
   19c4a:	d006      	beq.n	19c5a <ull_scan_rsp_set.part.0+0x76>
	pdu->last = idx;
   19c4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   19c50:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return 0;
   19c54:	2000      	movs	r0, #0
}
   19c56:	b003      	add	sp, #12
   19c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = ull_adv_time_update(adv, pdu_adv_scan, pdu);
   19c5a:	462a      	mov	r2, r5
   19c5c:	4620      	mov	r0, r4
   19c5e:	f7f3 f93f 	bl	cee0 <ull_adv_time_update>
			if (err) {
   19c62:	2800      	cmp	r0, #0
   19c64:	d0f2      	beq.n	19c4c <ull_scan_rsp_set.part.0+0x68>
   19c66:	e7f6      	b.n	19c56 <ull_scan_rsp_set.part.0+0x72>

00019c68 <ll_adv_scan_rsp_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   19c68:	281f      	cmp	r0, #31
{
   19c6a:	4603      	mov	r3, r0
   19c6c:	460a      	mov	r2, r1
	if (len > PDU_AC_DATA_SIZE_MAX) {
   19c6e:	d803      	bhi.n	19c78 <ll_adv_scan_rsp_set+0x10>
   19c70:	4802      	ldr	r0, [pc, #8]	; (19c7c <ll_adv_scan_rsp_set+0x14>)
   19c72:	4619      	mov	r1, r3
   19c74:	f7ff bfb6 	b.w	19be4 <ull_scan_rsp_set.part.0>
}
   19c78:	2012      	movs	r0, #18
   19c7a:	4770      	bx	lr
   19c7c:	20001fdc 	.word	0x20001fdc

00019c80 <init_reset>:
{
   19c80:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   19c82:	4b15      	ldr	r3, [pc, #84]	; (19cd8 <init_reset+0x58>)
   19c84:	4815      	ldr	r0, [pc, #84]	; (19cdc <init_reset+0x5c>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   19c86:	4c16      	ldr	r4, [pc, #88]	; (19ce0 <init_reset+0x60>)
	mem_init(conn_pool, sizeof(struct ll_conn),
   19c88:	2201      	movs	r2, #1
   19c8a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   19c8e:	f7fb fa79 	bl	15184 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_BUF_ACL_TX_COUNT,
   19c92:	4b14      	ldr	r3, [pc, #80]	; (19ce4 <init_reset+0x64>)
   19c94:	2203      	movs	r2, #3
   19c96:	1d18      	adds	r0, r3, #4
   19c98:	2124      	movs	r1, #36	; 0x24
   19c9a:	f7fb fa73 	bl	15184 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   19c9e:	4b12      	ldr	r3, [pc, #72]	; (19ce8 <init_reset+0x68>)
   19ca0:	2204      	movs	r2, #4
   19ca2:	1898      	adds	r0, r3, r2
   19ca4:	212c      	movs	r1, #44	; 0x2c
   19ca6:	f7fb fa6d 	bl	15184 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   19caa:	4b10      	ldr	r3, [pc, #64]	; (19cec <init_reset+0x6c>)
   19cac:	2207      	movs	r2, #7
   19cae:	1d18      	adds	r0, r3, #4
   19cb0:	2108      	movs	r1, #8
   19cb2:	f7fb fa67 	bl	15184 <mem_init>
	default_phy_tx |= PHY_2M;
   19cb6:	490e      	ldr	r1, [pc, #56]	; (19cf0 <init_reset+0x70>)
	default_phy_rx |= PHY_2M;
   19cb8:	4a0e      	ldr	r2, [pc, #56]	; (19cf4 <init_reset+0x74>)
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   19cba:	480f      	ldr	r0, [pc, #60]	; (19cf8 <init_reset+0x78>)
	default_phy_tx |= PHY_2M;
   19cbc:	2303      	movs	r3, #3
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   19cbe:	f04f 0c1b 	mov.w	ip, #27
   19cc2:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= PHY_2M;
   19cc6:	700b      	strb	r3, [r1, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   19cc8:	f44f 7ca4 	mov.w	ip, #328	; 0x148
	default_phy_rx |= PHY_2M;
   19ccc:	7013      	strb	r3, [r2, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   19cce:	f8a0 c000 	strh.w	ip, [r0]
}
   19cd2:	2000      	movs	r0, #0
   19cd4:	bd10      	pop	{r4, pc}
   19cd6:	bf00      	nop
   19cd8:	2000206c 	.word	0x2000206c
   19cdc:	200011c8 	.word	0x200011c8
   19ce0:	20002cd2 	.word	0x20002cd2
   19ce4:	20002094 	.word	0x20002094
   19ce8:	20002104 	.word	0x20002104
   19cec:	200021b8 	.word	0x200021b8
   19cf0:	20002d7e 	.word	0x20002d7e
   19cf4:	20002d7d 	.word	0x20002d7d
   19cf8:	20002cd4 	.word	0x20002cd4

00019cfc <ctrl_tx_pause_enqueue>:
{
   19cfc:	b538      	push	{r3, r4, r5, lr}
   19cfe:	4604      	mov	r4, r0
		if (!conn->tx_ctrl) {
   19d00:	e9d0 3071 	ldrd	r3, r0, [r0, #452]	; 0x1c4
{
   19d04:	460d      	mov	r5, r1
	if (
   19d06:	b11b      	cbz	r3, 19d10 <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
   19d08:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   19d0c:	0789      	lsls	r1, r1, #30
   19d0e:	d50c      	bpl.n	19d2a <ctrl_tx_pause_enqueue+0x2e>
		if (!conn->tx_ctrl) {
   19d10:	b340      	cbz	r0, 19d64 <ctrl_tx_pause_enqueue+0x68>
			LL_ASSERT(!pause);
   19d12:	2a00      	cmp	r2, #0
   19d14:	d130      	bne.n	19d78 <ctrl_tx_pause_enqueue+0x7c>
	tx->next = conn->tx_ctrl_last->next;
   19d16:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   19d1a:	681a      	ldr	r2, [r3, #0]
   19d1c:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   19d1e:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   19d20:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   19d22:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
   19d26:	b1d3      	cbz	r3, 19d5e <ctrl_tx_pause_enqueue+0x62>
}
   19d28:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
   19d2a:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   19d2e:	07c9      	lsls	r1, r1, #31
   19d30:	d4ee      	bmi.n	19d10 <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   19d32:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   19d36:	428b      	cmp	r3, r1
   19d38:	d02c      	beq.n	19d94 <ctrl_tx_pause_enqueue+0x98>
		} else if (!conn->tx_ctrl) {
   19d3a:	2800      	cmp	r0, #0
   19d3c:	d036      	beq.n	19dac <ctrl_tx_pause_enqueue+0xb0>
			LL_ASSERT(!pause);
   19d3e:	2a00      	cmp	r2, #0
   19d40:	d0e9      	beq.n	19d16 <ctrl_tx_pause_enqueue+0x1a>
   19d42:	4a22      	ldr	r2, [pc, #136]	; (19dcc <ctrl_tx_pause_enqueue+0xd0>)
   19d44:	4922      	ldr	r1, [pc, #136]	; (19dd0 <ctrl_tx_pause_enqueue+0xd4>)
   19d46:	4823      	ldr	r0, [pc, #140]	; (19dd4 <ctrl_tx_pause_enqueue+0xd8>)
   19d48:	f640 238e 	movw	r3, #2702	; 0xa8e
   19d4c:	f00d fbf2 	bl	27534 <assert_print>
   19d50:	4040      	eors	r0, r0
   19d52:	f380 8811 	msr	BASEPRI, r0
   19d56:	f04f 0003 	mov.w	r0, #3
   19d5a:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
   19d5c:	e7db      	b.n	19d16 <ctrl_tx_pause_enqueue+0x1a>
		conn->tx_data_last = tx;
   19d5e:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
}
   19d62:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
   19d64:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   19d66:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
			if (!pause) {
   19d6a:	2a00      	cmp	r2, #0
   19d6c:	d1db      	bne.n	19d26 <ctrl_tx_pause_enqueue+0x2a>
				conn->tx_ctrl_last = tx;
   19d6e:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
	if (!tx->next) {
   19d72:	2b00      	cmp	r3, #0
   19d74:	d1d8      	bne.n	19d28 <ctrl_tx_pause_enqueue+0x2c>
   19d76:	e7f2      	b.n	19d5e <ctrl_tx_pause_enqueue+0x62>
			LL_ASSERT(!pause);
   19d78:	4a14      	ldr	r2, [pc, #80]	; (19dcc <ctrl_tx_pause_enqueue+0xd0>)
   19d7a:	4915      	ldr	r1, [pc, #84]	; (19dd0 <ctrl_tx_pause_enqueue+0xd4>)
   19d7c:	4815      	ldr	r0, [pc, #84]	; (19dd4 <ctrl_tx_pause_enqueue+0xd8>)
   19d7e:	f44f 632a 	mov.w	r3, #2720	; 0xaa0
   19d82:	f00d fbd7 	bl	27534 <assert_print>
   19d86:	4040      	eors	r0, r0
   19d88:	f380 8811 	msr	BASEPRI, r0
   19d8c:	f04f 0003 	mov.w	r0, #3
   19d90:	df02      	svc	2
   19d92:	e7c0      	b.n	19d16 <ctrl_tx_pause_enqueue+0x1a>
			conn->tx_data = conn->tx_data->next;
   19d94:	6819      	ldr	r1, [r3, #0]
   19d96:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   19d9a:	2800      	cmp	r0, #0
   19d9c:	d1cf      	bne.n	19d3e <ctrl_tx_pause_enqueue+0x42>
			tx->next = conn->tx_head->next;
   19d9e:	6819      	ldr	r1, [r3, #0]
   19da0:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   19da2:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   19da4:	682b      	ldr	r3, [r5, #0]
			if (!pause) {
   19da6:	2a00      	cmp	r2, #0
   19da8:	d0e1      	beq.n	19d6e <ctrl_tx_pause_enqueue+0x72>
   19daa:	e7bc      	b.n	19d26 <ctrl_tx_pause_enqueue+0x2a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   19dac:	7919      	ldrb	r1, [r3, #4]
   19dae:	f001 0103 	and.w	r1, r1, #3
   19db2:	2903      	cmp	r1, #3
   19db4:	d004      	beq.n	19dc0 <ctrl_tx_pause_enqueue+0xc4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   19db6:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
			LL_ASSERT(!pause);
   19dba:	2a00      	cmp	r2, #0
   19dbc:	d0ab      	beq.n	19d16 <ctrl_tx_pause_enqueue+0x1a>
   19dbe:	e7c0      	b.n	19d42 <ctrl_tx_pause_enqueue+0x46>
	    ((pdu_data_tx->llctrl.opcode !=
   19dc0:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   19dc2:	2903      	cmp	r1, #3
   19dc4:	d0eb      	beq.n	19d9e <ctrl_tx_pause_enqueue+0xa2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   19dc6:	290a      	cmp	r1, #10
   19dc8:	d1f5      	bne.n	19db6 <ctrl_tx_pause_enqueue+0xba>
   19dca:	e7e8      	b.n	19d9e <ctrl_tx_pause_enqueue+0xa2>
   19dcc:	0002fd50 	.word	0x0002fd50
   19dd0:	0002fd90 	.word	0x0002fd90
   19dd4:	0002f8a0 	.word	0x0002f8a0

00019dd8 <tx_lll_flush>:
{
   19dd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = HDR_LLL2ULL(lll);
   19ddc:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   19de0:	4934      	ldr	r1, [pc, #208]	; (19eb4 <tx_lll_flush+0xdc>)
{
   19de2:	b083      	sub	sp, #12
   19de4:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   19de6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   19dea:	4640      	mov	r0, r8
   19dec:	f7fb fa30 	bl	15250 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   19df0:	f105 0648 	add.w	r6, r5, #72	; 0x48
	lll_conn_flush(handle, lll);
   19df4:	4629      	mov	r1, r5
   19df6:	f007 f947 	bl	21088 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   19dfa:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   19dfc:	aa01      	add	r2, sp, #4
   19dfe:	4631      	mov	r1, r6
   19e00:	f7fb fa66 	bl	152d0 <memq_dequeue>
	while (link) {
   19e04:	b328      	cbz	r0, 19e52 <tx_lll_flush+0x7a>
   19e06:	4c2c      	ldr	r4, [pc, #176]	; (19eb8 <tx_lll_flush+0xe0>)
		lll_tx->handle = LLL_HANDLE_INVALID;
   19e08:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   19e0c:	f104 0908 	add.w	r9, r4, #8
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   19e10:	7962      	ldrb	r2, [r4, #5]
	if (last == count) {
   19e12:	f894 c002 	ldrb.w	ip, [r4, #2]
   19e16:	7921      	ldrb	r1, [r4, #4]
	last = last + 1;
   19e18:	1c53      	adds	r3, r2, #1
   19e1a:	b2db      	uxtb	r3, r3
		last = 0U;
   19e1c:	459c      	cmp	ip, r3
   19e1e:	bf08      	it	eq
   19e20:	2300      	moveq	r3, #0
	if (last == first) {
   19e22:	4299      	cmp	r1, r3
   19e24:	f894 c000 	ldrb.w	ip, [r4]
   19e28:	d033      	beq.n	19e92 <tx_lll_flush+0xba>
		lll_tx->node = tx;
   19e2a:	9901      	ldr	r1, [sp, #4]
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   19e2c:	fb12 f20c 	smulbb	r2, r2, ip
   19e30:	eb09 0c02 	add.w	ip, r9, r2
		lll_tx->handle = LLL_HANDLE_INVALID;
   19e34:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   19e38:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
   19e3a:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   19e3e:	6002      	str	r2, [r0, #0]
		tx->next = link;
   19e40:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   19e42:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
	*last = idx; /* Commit: Update write index */
   19e44:	7163      	strb	r3, [r4, #5]
   19e46:	aa01      	add	r2, sp, #4
   19e48:	4631      	mov	r1, r6
   19e4a:	f7fb fa41 	bl	152d0 <memq_dequeue>
	while (link) {
   19e4e:	2800      	cmp	r0, #0
   19e50:	d1de      	bne.n	19e10 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   19e52:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
	rx = (void *)&conn->llcp_terminate.node_rx;
   19e56:	f508 74a2 	add.w	r4, r8, #324	; 0x144
	LL_ASSERT(rx->hdr.link);
   19e5a:	b150      	cbz	r0, 19e72 <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
   19e5c:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   19e5e:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   19e60:	f8c8 3144 	str.w	r3, [r8, #324]	; 0x144
	ull_rx_put(link, rx);
   19e64:	f7fe feb2 	bl	18bcc <ull_rx_put>
	ull_rx_sched();
   19e68:	f7fe fec0 	bl	18bec <ull_rx_sched>
}
   19e6c:	b003      	add	sp, #12
   19e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   19e72:	4a12      	ldr	r2, [pc, #72]	; (19ebc <tx_lll_flush+0xe4>)
   19e74:	4912      	ldr	r1, [pc, #72]	; (19ec0 <tx_lll_flush+0xe8>)
   19e76:	4813      	ldr	r0, [pc, #76]	; (19ec4 <tx_lll_flush+0xec>)
   19e78:	f640 13fa 	movw	r3, #2554	; 0x9fa
   19e7c:	f00d fb5a 	bl	27534 <assert_print>
   19e80:	4040      	eors	r0, r0
   19e82:	f380 8811 	msr	BASEPRI, r0
   19e86:	f04f 0003 	mov.w	r0, #3
   19e8a:	df02      	svc	2
	link = rx->hdr.link;
   19e8c:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
   19e90:	e7e4      	b.n	19e5c <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
   19e92:	4a0a      	ldr	r2, [pc, #40]	; (19ebc <tx_lll_flush+0xe4>)
   19e94:	490c      	ldr	r1, [pc, #48]	; (19ec8 <tx_lll_flush+0xf0>)
   19e96:	480b      	ldr	r0, [pc, #44]	; (19ec4 <tx_lll_flush+0xec>)
   19e98:	f640 13e6 	movw	r3, #2534	; 0x9e6
   19e9c:	f00d fb4a 	bl	27534 <assert_print>
   19ea0:	4040      	eors	r0, r0
   19ea2:	f380 8811 	msr	BASEPRI, r0
   19ea6:	f04f 0003 	mov.w	r0, #3
   19eaa:	df02      	svc	2
		lll_tx->handle = LLL_HANDLE_INVALID;
   19eac:	2300      	movs	r3, #0
   19eae:	801b      	strh	r3, [r3, #0]
   19eb0:	deff      	udf	#255	; 0xff
   19eb2:	bf00      	nop
   19eb4:	200011c8 	.word	0x200011c8
   19eb8:	20000558 	.word	0x20000558
   19ebc:	0002fd50 	.word	0x0002fd50
   19ec0:	0002fda0 	.word	0x0002fda0
   19ec4:	0002f8a0 	.word	0x0002f8a0
   19ec8:	0002fd98 	.word	0x0002fd98

00019ecc <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   19ecc:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   19ed0:	f012 0202 	ands.w	r2, r2, #2
   19ed4:	d00a      	beq.n	19eec <ctrl_tx_sec_enqueue+0x20>
		if (!conn->tx_ctrl) {
   19ed6:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
   19eda:	b1d3      	cbz	r3, 19f12 <ctrl_tx_sec_enqueue+0x46>
			tx->next = conn->tx_ctrl_last->next;
   19edc:	f8d0 31cc 	ldr.w	r3, [r0, #460]	; 0x1cc
   19ee0:	681a      	ldr	r2, [r3, #0]
   19ee2:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   19ee4:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   19ee6:	680b      	ldr	r3, [r1, #0]
   19ee8:	b1d3      	cbz	r3, 19f20 <ctrl_tx_sec_enqueue+0x54>
   19eea:	4770      	bx	lr
		if (conn->tx_head) {
   19eec:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   19ef0:	b1cb      	cbz	r3, 19f26 <ctrl_tx_sec_enqueue+0x5a>
{
   19ef2:	b500      	push	{lr}
			if ((conn->llcp_req != conn->llcp_ack) &&
   19ef4:	f890 c0e5 	ldrb.w	ip, [r0, #229]	; 0xe5
   19ef8:	f890 e0e4 	ldrb.w	lr, [r0, #228]	; 0xe4
   19efc:	45e6      	cmp	lr, ip
   19efe:	d004      	beq.n	19f0a <ctrl_tx_sec_enqueue+0x3e>
   19f00:	f890 c0e6 	ldrb.w	ip, [r0, #230]	; 0xe6
   19f04:	f1bc 0f03 	cmp.w	ip, #3
   19f08:	d010      	beq.n	19f2c <ctrl_tx_sec_enqueue+0x60>
}
   19f0a:	f85d eb04 	ldr.w	lr, [sp], #4
		ctrl_tx_pause_enqueue(conn, tx, pause);
   19f0e:	f7ff bef5 	b.w	19cfc <ctrl_tx_pause_enqueue>
			tx->next = conn->tx_head;
   19f12:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   19f16:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   19f18:	f8c0 11c4 	str.w	r1, [r0, #452]	; 0x1c4
		if (!tx->next) {
   19f1c:	2b00      	cmp	r3, #0
   19f1e:	d1e4      	bne.n	19eea <ctrl_tx_sec_enqueue+0x1e>
			conn->tx_data_last = tx;
   19f20:	f8c0 11d4 	str.w	r1, [r0, #468]	; 0x1d4
   19f24:	4770      	bx	lr
	bool pause = false;
   19f26:	461a      	mov	r2, r3
		ctrl_tx_pause_enqueue(conn, tx, pause);
   19f28:	f7ff bee8 	b.w	19cfc <ctrl_tx_pause_enqueue>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   19f2c:	f893 c004 	ldrb.w	ip, [r3, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   19f30:	f00c 0c03 	and.w	ip, ip, #3
   19f34:	f1bc 0f03 	cmp.w	ip, #3
   19f38:	d1e7      	bne.n	19f0a <ctrl_tx_sec_enqueue+0x3e>
			    ((pdu_data_tx->llctrl.opcode ==
   19f3a:	79da      	ldrb	r2, [r3, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   19f3c:	2a03      	cmp	r2, #3
   19f3e:	d005      	beq.n	19f4c <ctrl_tx_sec_enqueue+0x80>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   19f40:	f1a2 020a 	sub.w	r2, r2, #10
   19f44:	fab2 f282 	clz	r2, r2
   19f48:	0952      	lsrs	r2, r2, #5
   19f4a:	e7de      	b.n	19f0a <ctrl_tx_sec_enqueue+0x3e>
				pause = true;
   19f4c:	2201      	movs	r2, #1
   19f4e:	e7dc      	b.n	19f0a <ctrl_tx_sec_enqueue+0x3e>

00019f50 <ticker_stop_op_cb>:
{
   19f50:	b510      	push	{r4, lr}
   19f52:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   19f54:	b9b0      	cbnz	r0, 19f84 <ticker_stop_op_cb+0x34>
	mfy.param = param;
   19f56:	4b12      	ldr	r3, [pc, #72]	; (19fa0 <ticker_stop_op_cb+0x50>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   19f58:	2200      	movs	r2, #0
   19f5a:	2101      	movs	r1, #1
   19f5c:	2002      	movs	r0, #2
	mfy.param = param;
   19f5e:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   19f60:	f7fb fa18 	bl	15394 <mayfly_enqueue>
	LL_ASSERT(!ret);
   19f64:	b900      	cbnz	r0, 19f68 <ticker_stop_op_cb+0x18>
}
   19f66:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   19f68:	4a0e      	ldr	r2, [pc, #56]	; (19fa4 <ticker_stop_op_cb+0x54>)
   19f6a:	490f      	ldr	r1, [pc, #60]	; (19fa8 <ticker_stop_op_cb+0x58>)
   19f6c:	480f      	ldr	r0, [pc, #60]	; (19fac <ticker_stop_op_cb+0x5c>)
   19f6e:	f44f 631a 	mov.w	r3, #2464	; 0x9a0
   19f72:	f00d fadf 	bl	27534 <assert_print>
   19f76:	4040      	eors	r0, r0
   19f78:	f380 8811 	msr	BASEPRI, r0
   19f7c:	f04f 0003 	mov.w	r0, #3
   19f80:	df02      	svc	2
}
   19f82:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   19f84:	4a07      	ldr	r2, [pc, #28]	; (19fa4 <ticker_stop_op_cb+0x54>)
   19f86:	490a      	ldr	r1, [pc, #40]	; (19fb0 <ticker_stop_op_cb+0x60>)
   19f88:	4808      	ldr	r0, [pc, #32]	; (19fac <ticker_stop_op_cb+0x5c>)
   19f8a:	f640 139a 	movw	r3, #2458	; 0x99a
   19f8e:	f00d fad1 	bl	27534 <assert_print>
   19f92:	4040      	eors	r0, r0
   19f94:	f380 8811 	msr	BASEPRI, r0
   19f98:	f04f 0003 	mov.w	r0, #3
   19f9c:	df02      	svc	2
   19f9e:	e7da      	b.n	19f56 <ticker_stop_op_cb+0x6>
   19fa0:	200005e8 	.word	0x200005e8
   19fa4:	0002fd50 	.word	0x0002fd50
   19fa8:	0002fb3c 	.word	0x0002fb3c
   19fac:	0002f8a0 	.word	0x0002f8a0
   19fb0:	0002fdb0 	.word	0x0002fdb0

00019fb4 <disabled_cb>:
{
   19fb4:	b508      	push	{r3, lr}
	mfy.param = param;
   19fb6:	4b0b      	ldr	r3, [pc, #44]	; (19fe4 <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   19fb8:	2200      	movs	r2, #0
	mfy.param = param;
   19fba:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   19fbc:	4611      	mov	r1, r2
   19fbe:	2001      	movs	r0, #1
   19fc0:	f7fb f9e8 	bl	15394 <mayfly_enqueue>
	LL_ASSERT(!ret);
   19fc4:	b900      	cbnz	r0, 19fc8 <disabled_cb+0x14>
}
   19fc6:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   19fc8:	4a07      	ldr	r2, [pc, #28]	; (19fe8 <disabled_cb+0x34>)
   19fca:	4908      	ldr	r1, [pc, #32]	; (19fec <disabled_cb+0x38>)
   19fcc:	4808      	ldr	r0, [pc, #32]	; (19ff0 <disabled_cb+0x3c>)
   19fce:	f640 13cc 	movw	r3, #2508	; 0x9cc
   19fd2:	f00d faaf 	bl	27534 <assert_print>
   19fd6:	4040      	eors	r0, r0
   19fd8:	f380 8811 	msr	BASEPRI, r0
   19fdc:	f04f 0003 	mov.w	r0, #3
   19fe0:	df02      	svc	2
}
   19fe2:	bd08      	pop	{r3, pc}
   19fe4:	200005c8 	.word	0x200005c8
   19fe8:	0002fd50 	.word	0x0002fd50
   19fec:	0002fb3c 	.word	0x0002fb3c
   19ff0:	0002f8a0 	.word	0x0002f8a0

00019ff4 <conn_disable>:
{
   19ff4:	b538      	push	{r3, r4, r5, lr}
   19ff6:	4604      	mov	r4, r0
	return hdr->ref;
   19ff8:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   19ffc:	b353      	cbz	r3, 1a054 <conn_disable+0x60>
		mfy.param = &conn->lll;
   19ffe:	4d17      	ldr	r5, [pc, #92]	; (1a05c <conn_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   1a000:	6963      	ldr	r3, [r4, #20]
		mfy.param = &conn->lll;
   1a002:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   1a004:	b16b      	cbz	r3, 1a022 <conn_disable+0x2e>
   1a006:	4a16      	ldr	r2, [pc, #88]	; (1a060 <conn_disable+0x6c>)
   1a008:	4916      	ldr	r1, [pc, #88]	; (1a064 <conn_disable+0x70>)
   1a00a:	4817      	ldr	r0, [pc, #92]	; (1a068 <conn_disable+0x74>)
   1a00c:	f640 13b5 	movw	r3, #2485	; 0x9b5
   1a010:	f00d fa90 	bl	27534 <assert_print>
   1a014:	4040      	eors	r0, r0
   1a016:	f380 8811 	msr	BASEPRI, r0
   1a01a:	f04f 0003 	mov.w	r0, #3
   1a01e:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   1a020:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   1a022:	4912      	ldr	r1, [pc, #72]	; (1a06c <conn_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1a024:	4b0d      	ldr	r3, [pc, #52]	; (1a05c <conn_disable+0x68>)
   1a026:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   1a028:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1a02c:	4611      	mov	r1, r2
   1a02e:	2001      	movs	r0, #1
   1a030:	f7fb f9b0 	bl	15394 <mayfly_enqueue>
		LL_ASSERT(!ret);
   1a034:	b900      	cbnz	r0, 1a038 <conn_disable+0x44>
}
   1a036:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   1a038:	4a09      	ldr	r2, [pc, #36]	; (1a060 <conn_disable+0x6c>)
   1a03a:	490d      	ldr	r1, [pc, #52]	; (1a070 <conn_disable+0x7c>)
   1a03c:	480a      	ldr	r0, [pc, #40]	; (1a068 <conn_disable+0x74>)
   1a03e:	f640 13bc 	movw	r3, #2492	; 0x9bc
   1a042:	f00d fa77 	bl	27534 <assert_print>
   1a046:	4040      	eors	r0, r0
   1a048:	f380 8811 	msr	BASEPRI, r0
   1a04c:	f04f 0003 	mov.w	r0, #3
   1a050:	df02      	svc	2
}
   1a052:	bd38      	pop	{r3, r4, r5, pc}
   1a054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&conn->lll);
   1a058:	f7ff bfac 	b.w	19fb4 <disabled_cb>
   1a05c:	200005d8 	.word	0x200005d8
   1a060:	0002fd50 	.word	0x0002fd50
   1a064:	0002fc58 	.word	0x0002fc58
   1a068:	0002f8a0 	.word	0x0002f8a0
   1a06c:	00019fb5 	.word	0x00019fb5
   1a070:	0002fb3c 	.word	0x0002fb3c

0001a074 <conn_setup_adv_scan_disabled_cb>:
{
   1a074:	b508      	push	{r3, lr}
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   1a076:	6883      	ldr	r3, [r0, #8]
   1a078:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
   1a07a:	7f53      	ldrb	r3, [r2, #29]
   1a07c:	09db      	lsrs	r3, r3, #7
   1a07e:	d10d      	bne.n	1a09c <conn_setup_adv_scan_disabled_cb+0x28>
		LL_ASSERT(0);
   1a080:	4a09      	ldr	r2, [pc, #36]	; (1a0a8 <conn_setup_adv_scan_disabled_cb+0x34>)
   1a082:	490a      	ldr	r1, [pc, #40]	; (1a0ac <conn_setup_adv_scan_disabled_cb+0x38>)
   1a084:	480a      	ldr	r0, [pc, #40]	; (1a0b0 <conn_setup_adv_scan_disabled_cb+0x3c>)
   1a086:	f640 03f5 	movw	r3, #2293	; 0x8f5
   1a08a:	f00d fa53 	bl	27534 <assert_print>
   1a08e:	4040      	eors	r0, r0
   1a090:	f380 8811 	msr	BASEPRI, r0
   1a094:	f04f 0003 	mov.w	r0, #3
   1a098:	df02      	svc	2
}
   1a09a:	bd08      	pop	{r3, pc}
		ull_periph_setup(rx, ftr, lll);
   1a09c:	4601      	mov	r1, r0
}
   1a09e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ull_periph_setup(rx, ftr, lll);
   1a0a2:	3108      	adds	r1, #8
   1a0a4:	f7f3 ba24 	b.w	d4f0 <ull_periph_setup>
   1a0a8:	0002fd50 	.word	0x0002fd50
   1a0ac:	0002f900 	.word	0x0002f900
   1a0b0:	0002f8a0 	.word	0x0002f8a0

0001a0b4 <ticker_start_conn_op_cb>:
{
   1a0b4:	b510      	push	{r4, lr}
   1a0b6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1a0b8:	b990      	cbnz	r0, 1a0e0 <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   1a0ba:	4620      	mov	r0, r4
   1a0bc:	f7fe fcba 	bl	18a34 <ull_update_unmark>
	LL_ASSERT(p == param);
   1a0c0:	4284      	cmp	r4, r0
   1a0c2:	d00c      	beq.n	1a0de <ticker_start_conn_op_cb+0x2a>
   1a0c4:	4a0d      	ldr	r2, [pc, #52]	; (1a0fc <ticker_start_conn_op_cb+0x48>)
   1a0c6:	490e      	ldr	r1, [pc, #56]	; (1a100 <ticker_start_conn_op_cb+0x4c>)
   1a0c8:	480e      	ldr	r0, [pc, #56]	; (1a104 <ticker_start_conn_op_cb+0x50>)
   1a0ca:	f640 03ce 	movw	r3, #2254	; 0x8ce
   1a0ce:	f00d fa31 	bl	27534 <assert_print>
   1a0d2:	4040      	eors	r0, r0
   1a0d4:	f380 8811 	msr	BASEPRI, r0
   1a0d8:	f04f 0003 	mov.w	r0, #3
   1a0dc:	df02      	svc	2
}
   1a0de:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1a0e0:	4a06      	ldr	r2, [pc, #24]	; (1a0fc <ticker_start_conn_op_cb+0x48>)
   1a0e2:	4909      	ldr	r1, [pc, #36]	; (1a108 <ticker_start_conn_op_cb+0x54>)
   1a0e4:	4807      	ldr	r0, [pc, #28]	; (1a104 <ticker_start_conn_op_cb+0x50>)
   1a0e6:	f640 03cb 	movw	r3, #2251	; 0x8cb
   1a0ea:	f00d fa23 	bl	27534 <assert_print>
   1a0ee:	4040      	eors	r0, r0
   1a0f0:	f380 8811 	msr	BASEPRI, r0
   1a0f4:	f04f 0003 	mov.w	r0, #3
   1a0f8:	df02      	svc	2
   1a0fa:	e7de      	b.n	1a0ba <ticker_start_conn_op_cb+0x6>
   1a0fc:	0002fd50 	.word	0x0002fd50
   1a100:	0002fdbc 	.word	0x0002fdbc
   1a104:	0002f8a0 	.word	0x0002f8a0
   1a108:	0002fdb0 	.word	0x0002fdb0

0001a10c <ticker_stop_conn_op_cb>:
{
   1a10c:	b510      	push	{r4, lr}
   1a10e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1a110:	b990      	cbnz	r0, 1a138 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   1a112:	4620      	mov	r0, r4
   1a114:	f7fe fc84 	bl	18a20 <ull_update_mark>
	LL_ASSERT(p == param);
   1a118:	4284      	cmp	r4, r0
   1a11a:	d00c      	beq.n	1a136 <ticker_stop_conn_op_cb+0x2a>
   1a11c:	4a0d      	ldr	r2, [pc, #52]	; (1a154 <ticker_stop_conn_op_cb+0x48>)
   1a11e:	490e      	ldr	r1, [pc, #56]	; (1a158 <ticker_stop_conn_op_cb+0x4c>)
   1a120:	480e      	ldr	r0, [pc, #56]	; (1a15c <ticker_stop_conn_op_cb+0x50>)
   1a122:	f640 03c4 	movw	r3, #2244	; 0x8c4
   1a126:	f00d fa05 	bl	27534 <assert_print>
   1a12a:	4040      	eors	r0, r0
   1a12c:	f380 8811 	msr	BASEPRI, r0
   1a130:	f04f 0003 	mov.w	r0, #3
   1a134:	df02      	svc	2
}
   1a136:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1a138:	4a06      	ldr	r2, [pc, #24]	; (1a154 <ticker_stop_conn_op_cb+0x48>)
   1a13a:	4909      	ldr	r1, [pc, #36]	; (1a160 <ticker_stop_conn_op_cb+0x54>)
   1a13c:	4807      	ldr	r0, [pc, #28]	; (1a15c <ticker_stop_conn_op_cb+0x50>)
   1a13e:	f640 03c1 	movw	r3, #2241	; 0x8c1
   1a142:	f00d f9f7 	bl	27534 <assert_print>
   1a146:	4040      	eors	r0, r0
   1a148:	f380 8811 	msr	BASEPRI, r0
   1a14c:	f04f 0003 	mov.w	r0, #3
   1a150:	df02      	svc	2
   1a152:	e7de      	b.n	1a112 <ticker_stop_conn_op_cb+0x6>
   1a154:	0002fd50 	.word	0x0002fd50
   1a158:	0002fdbc 	.word	0x0002fdbc
   1a15c:	0002f8a0 	.word	0x0002f8a0
   1a160:	0002fdb0 	.word	0x0002fdb0

0001a164 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   1a164:	b900      	cbnz	r0, 1a168 <ticker_update_conn_op_cb+0x4>
   1a166:	4770      	bx	lr
{
   1a168:	b510      	push	{r4, lr}
   1a16a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   1a16c:	f7fe fc6e 	bl	18a4c <ull_update_mark_get>
   1a170:	4284      	cmp	r4, r0
   1a172:	d010      	beq.n	1a196 <ticker_update_conn_op_cb+0x32>
   1a174:	f7fe fc4e 	bl	18a14 <ull_disable_mark_get>
   1a178:	4284      	cmp	r4, r0
   1a17a:	d00c      	beq.n	1a196 <ticker_update_conn_op_cb+0x32>
   1a17c:	4a06      	ldr	r2, [pc, #24]	; (1a198 <ticker_update_conn_op_cb+0x34>)
   1a17e:	4907      	ldr	r1, [pc, #28]	; (1a19c <ticker_update_conn_op_cb+0x38>)
   1a180:	4807      	ldr	r0, [pc, #28]	; (1a1a0 <ticker_update_conn_op_cb+0x3c>)
   1a182:	f640 03b8 	movw	r3, #2232	; 0x8b8
   1a186:	f00d f9d5 	bl	27534 <assert_print>
   1a18a:	4040      	eors	r0, r0
   1a18c:	f380 8811 	msr	BASEPRI, r0
   1a190:	f04f 0003 	mov.w	r0, #3
   1a194:	df02      	svc	2
}
   1a196:	bd10      	pop	{r4, pc}
   1a198:	0002fd50 	.word	0x0002fd50
   1a19c:	0002fdc8 	.word	0x0002fdc8
   1a1a0:	0002f8a0 	.word	0x0002f8a0

0001a1a4 <tx_ull_dequeue>:
{
   1a1a4:	b410      	push	{r4}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   1a1a6:	e9d0 2471 	ldrd	r2, r4, [r0, #452]	; 0x1c4
{
   1a1aa:	4603      	mov	r3, r0
   1a1ac:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   1a1ae:	b164      	cbz	r4, 1a1ca <tx_ull_dequeue+0x26>
	if (conn->tx_head == conn->tx_ctrl) {
   1a1b0:	4294      	cmp	r4, r2
   1a1b2:	d021      	beq.n	1a1f8 <tx_ull_dequeue+0x54>
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   1a1b4:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
   1a1b8:	428a      	cmp	r2, r1
   1a1ba:	d00b      	beq.n	1a1d4 <tx_ull_dequeue+0x30>
		conn->tx_head = conn->tx_head->next;
   1a1bc:	6811      	ldr	r1, [r2, #0]
   1a1be:	f8c3 11c4 	str.w	r1, [r3, #452]	; 0x1c4
		tx->next = NULL;
   1a1c2:	2200      	movs	r2, #0
}
   1a1c4:	bc10      	pop	{r4}
		tx->next = NULL;
   1a1c6:	6002      	str	r2, [r0, #0]
}
   1a1c8:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   1a1ca:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
   1a1ce:	4291      	cmp	r1, r2
   1a1d0:	d104      	bne.n	1a1dc <tx_ull_dequeue+0x38>
	if (conn->tx_head == conn->tx_ctrl) {
   1a1d2:	b18a      	cbz	r2, 1a1f8 <tx_ull_dequeue+0x54>
			conn->tx_data = conn->tx_data->next;
   1a1d4:	6809      	ldr	r1, [r1, #0]
   1a1d6:	f8c3 11d0 	str.w	r1, [r3, #464]	; 0x1d0
   1a1da:	e7ef      	b.n	1a1bc <tx_ull_dequeue+0x18>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a1dc:	7911      	ldrb	r1, [r2, #4]
   1a1de:	f001 0103 	and.w	r1, r1, #3
   1a1e2:	2903      	cmp	r1, #3
   1a1e4:	d013      	beq.n	1a20e <tx_ull_dequeue+0x6a>
		conn->tx_head = conn->tx_head->next;
   1a1e6:	6812      	ldr	r2, [r2, #0]
   1a1e8:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
			conn->tx_ctrl = NULL;
   1a1ec:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   1a1ee:	e9c3 2272 	strd	r2, r2, [r3, #456]	; 0x1c8
}
   1a1f2:	bc10      	pop	{r4}
		tx->next = tx;
   1a1f4:	6000      	str	r0, [r0, #0]
}
   1a1f6:	4770      	bx	lr
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   1a1f8:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
		conn->tx_head = conn->tx_head->next;
   1a1fc:	6812      	ldr	r2, [r2, #0]
   1a1fe:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   1a202:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
   1a204:	bf18      	it	ne
   1a206:	f8c3 21c8 	strne.w	r2, [r3, #456]	; 0x1c8
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   1a20a:	d1f2      	bne.n	1a1f2 <tx_ull_dequeue+0x4e>
   1a20c:	e7ee      	b.n	1a1ec <tx_ull_dequeue+0x48>
	    ((pdu_data_tx->llctrl.opcode !=
   1a20e:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a210:	2903      	cmp	r1, #3
   1a212:	d0d3      	beq.n	1a1bc <tx_ull_dequeue+0x18>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1a214:	290a      	cmp	r1, #10
   1a216:	d1e6      	bne.n	1a1e6 <tx_ull_dequeue+0x42>
   1a218:	e7d0      	b.n	1a1bc <tx_ull_dequeue+0x18>
   1a21a:	bf00      	nop

0001a21c <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
   1a21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a21e:	4604      	mov	r4, r0
	if (conn->common.txn_lock) {
   1a220:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
   1a224:	0787      	lsls	r7, r0, #30
{
   1a226:	460d      	mov	r5, r1
	if (conn->common.txn_lock) {
   1a228:	d433      	bmi.n	1a292 <reject_ext_ind_send+0x76>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1a22a:	482e      	ldr	r0, [pc, #184]	; (1a2e4 <reject_ext_ind_send+0xc8>)
   1a22c:	4617      	mov	r7, r2
   1a22e:	461e      	mov	r6, r3
   1a230:	f7fa ffd8 	bl	151e4 <mem_acquire>
	if (!tx) {
   1a234:	2800      	cmp	r0, #0
   1a236:	d038      	beq.n	1a2aa <reject_ext_ind_send+0x8e>
	conn->common.txn_lock = 1U;
   1a238:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1a23c:	f043 0302 	orr.w	r3, r3, #2
   1a240:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_ctrl_tx = (void *)tx->pdu;

	ull_pdu_data_init(pdu_ctrl_tx);

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   1a244:	2303      	movs	r3, #3
   1a246:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   1a248:	2211      	movs	r2, #17
	    conn->tx_head &&
   1a24a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   1a24e:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1a250:	7902      	ldrb	r2, [r0, #4]
		if (!conn->tx_ctrl) {
   1a252:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   1a256:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1a258:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   1a25c:	7246      	strb	r6, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1a25e:	7102      	strb	r2, [r0, #4]
	if (
   1a260:	b1db      	cbz	r3, 1a29a <reject_ext_ind_send+0x7e>
	    !conn->llcp_enc.pause_tx &&
   1a262:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1a266:	0796      	lsls	r6, r2, #30
   1a268:	d417      	bmi.n	1a29a <reject_ext_ind_send+0x7e>
	    !conn->llcp_phy.pause_tx &&
   1a26a:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1a26e:	07d2      	lsls	r2, r2, #31
   1a270:	d413      	bmi.n	1a29a <reject_ext_ind_send+0x7e>
		if (conn->tx_head == conn->tx_data) {
   1a272:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   1a276:	4293      	cmp	r3, r2
   1a278:	d022      	beq.n	1a2c0 <reject_ext_ind_send+0xa4>
		} else if (!conn->tx_ctrl) {
   1a27a:	b1c9      	cbz	r1, 1a2b0 <reject_ext_ind_send+0x94>
	tx->next = conn->tx_ctrl_last->next;
   1a27c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1a280:	681a      	ldr	r2, [r3, #0]
   1a282:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1a284:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1a286:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   1a288:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1a28c:	b90b      	cbnz	r3, 1a292 <reject_ext_ind_send+0x76>
		conn->tx_data_last = tx;
   1a28e:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1a292:	2301      	movs	r3, #1
   1a294:	712b      	strb	r3, [r5, #4]
		*err = 0U;
   1a296:	2000      	movs	r0, #0

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;

	return 0;
}
   1a298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!conn->tx_ctrl) {
   1a29a:	2900      	cmp	r1, #0
   1a29c:	d1ee      	bne.n	1a27c <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head;
   1a29e:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   1a2a0:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1a2a4:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   1a2a8:	e7f0      	b.n	1a28c <reject_ext_ind_send+0x70>
		*err = -ENOBUFS;
   1a2aa:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1a2ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a2b0:	791a      	ldrb	r2, [r3, #4]
   1a2b2:	f002 0203 	and.w	r2, r2, #3
   1a2b6:	2a03      	cmp	r2, #3
   1a2b8:	d00e      	beq.n	1a2d8 <reject_ext_ind_send+0xbc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1a2ba:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   1a2be:	e7df      	b.n	1a280 <reject_ext_ind_send+0x64>
			conn->tx_data = conn->tx_data->next;
   1a2c0:	681a      	ldr	r2, [r3, #0]
   1a2c2:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1a2c6:	2900      	cmp	r1, #0
   1a2c8:	d1d8      	bne.n	1a27c <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head->next;
   1a2ca:	681a      	ldr	r2, [r3, #0]
   1a2cc:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1a2ce:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1a2d0:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   1a2d2:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   1a2d6:	e7d9      	b.n	1a28c <reject_ext_ind_send+0x70>
	    ((pdu_data_tx->llctrl.opcode !=
   1a2d8:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a2da:	2a03      	cmp	r2, #3
   1a2dc:	d0f5      	beq.n	1a2ca <reject_ext_ind_send+0xae>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1a2de:	2a0a      	cmp	r2, #10
   1a2e0:	d1eb      	bne.n	1a2ba <reject_ext_ind_send+0x9e>
   1a2e2:	e7f2      	b.n	1a2ca <reject_ext_ind_send+0xae>
   1a2e4:	20002104 	.word	0x20002104

0001a2e8 <event_len_prep>:
{
   1a2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp_length.state) {
   1a2ea:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   1a2ee:	f003 0207 	and.w	r2, r3, #7
{
   1a2f2:	4604      	mov	r4, r0
	switch (conn->llcp_length.state) {
   1a2f4:	2a06      	cmp	r2, #6
   1a2f6:	f200 80d4 	bhi.w	1a4a2 <event_len_prep+0x1ba>
   1a2fa:	e8df f002 	tbb	[pc, r2]
   1a2fe:	4704      	.short	0x4704
   1a300:	48484747 	.word	0x48484747
   1a304:	47          	.byte	0x47
   1a305:	00          	.byte	0x00
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1a306:	486e      	ldr	r0, [pc, #440]	; (1a4c0 <event_len_prep+0x1d8>)
   1a308:	f7fa ff6c 	bl	151e4 <mem_acquire>
		if (!tx) {
   1a30c:	2800      	cmp	r0, #0
   1a30e:	d03d      	beq.n	1a38c <event_len_prep+0xa4>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   1a310:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   1a314:	f8b4 21b2 	ldrh.w	r2, [r4, #434]	; 0x1b2
		conn->default_tx_time = conn->llcp_length.tx_time;
   1a318:	f8b4 51b6 	ldrh.w	r5, [r4, #438]	; 0x1b6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   1a31c:	f8a4 20d2 	strh.w	r2, [r4, #210]	; 0xd2
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   1a320:	2301      	movs	r3, #1
   1a322:	f363 0102 	bfi	r1, r3, #0, #3
		conn->default_tx_time = conn->llcp_length.tx_time;
   1a326:	f8a4 50d4 	strh.w	r5, [r4, #212]	; 0xd4
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   1a32a:	f884 11ae 	strb.w	r1, [r4, #430]	; 0x1ae
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   1a32e:	8182      	strh	r2, [r0, #12]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   1a330:	72c3      	strb	r3, [r0, #11]
   1a332:	2248      	movs	r2, #72	; 0x48
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   1a334:	73c3      	strb	r3, [r0, #15]
		pdu_ctrl_tx->len =
   1a336:	2309      	movs	r3, #9
   1a338:	7143      	strb	r3, [r0, #5]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   1a33a:	7282      	strb	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   1a33c:	7382      	strb	r2, [r0, #14]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   1a33e:	2214      	movs	r2, #20
	    conn->tx_head &&
   1a340:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   1a344:	71c2      	strb	r2, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   1a346:	2100      	movs	r1, #0
   1a348:	221b      	movs	r2, #27
   1a34a:	7241      	strb	r1, [r0, #9]
		if (!conn->tx_ctrl) {
   1a34c:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   1a350:	7202      	strb	r2, [r0, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1a352:	7902      	ldrb	r2, [r0, #4]
   1a354:	f042 0203 	orr.w	r2, r2, #3
   1a358:	7102      	strb	r2, [r0, #4]
	if (
   1a35a:	b13b      	cbz	r3, 1a36c <event_len_prep+0x84>
	    !conn->llcp_enc.pause_tx &&
   1a35c:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1a360:	0795      	lsls	r5, r2, #30
   1a362:	d403      	bmi.n	1a36c <event_len_prep+0x84>
	    !conn->llcp_phy.pause_tx &&
   1a364:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1a368:	07d2      	lsls	r2, r2, #31
   1a36a:	d573      	bpl.n	1a454 <event_len_prep+0x16c>
		if (!conn->tx_ctrl) {
   1a36c:	2900      	cmp	r1, #0
   1a36e:	d07f      	beq.n	1a470 <event_len_prep+0x188>
	tx->next = conn->tx_ctrl_last->next;
   1a370:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1a374:	681a      	ldr	r2, [r3, #0]
   1a376:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1a378:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1a37a:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   1a37c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1a380:	2b00      	cmp	r3, #0
   1a382:	d056      	beq.n	1a432 <event_len_prep+0x14a>
		conn->procedure_expire = conn->procedure_reload;
   1a384:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   1a388:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
}
   1a38c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   1a38e:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   1a392:	f8b0 c1b0 	ldrh.w	ip, [r0, #432]	; 0x1b0
		lll->max_rx_time = conn->llcp_length.rx_time;
   1a396:	f8b0 11b4 	ldrh.w	r1, [r0, #436]	; 0x1b4
		tx_octets = conn->llcp_length.tx_octets;
   1a39a:	f8b0 71b2 	ldrh.w	r7, [r0, #434]	; 0x1b2
		uint16_t tx_time = conn->llcp_length.tx_time;
   1a39e:	f8b0 61b6 	ldrh.w	r6, [r0, #438]	; 0x1b6
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   1a3a2:	f8a0 c05a 	strh.w	ip, [r0, #90]	; 0x5a
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   1a3a6:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
   1a3a8:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   1a3ac:	d024      	beq.n	1a3f8 <event_len_prep+0x110>
			conn->llcp_length.state =
   1a3ae:	2206      	movs	r2, #6
   1a3b0:	f362 0302 	bfi	r3, r2, #0, #3
   1a3b4:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
		rx = conn->llcp_rx;
   1a3b8:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   1a3bc:	b335      	cbz	r5, 1a40c <event_len_prep+0x124>
   1a3be:	6828      	ldr	r0, [r5, #0]
   1a3c0:	b320      	cbz	r0, 1a40c <event_len_prep+0x124>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   1a3c2:	7f2b      	ldrb	r3, [r5, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   1a3c4:	6842      	ldr	r2, [r0, #4]
   1a3c6:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   1a3ca:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.handle = conn->lll.handle;
   1a3ce:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   1a3d0:	772b      	strb	r3, [r5, #28]
		pdu_ctrl_rx->len =
   1a3d2:	2309      	movs	r3, #9
		rx->hdr.handle = conn->lll.handle;
   1a3d4:	80ea      	strh	r2, [r5, #6]
		pdu_ctrl_rx->len =
   1a3d6:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1a3d8:	2203      	movs	r2, #3
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1a3da:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   1a3dc:	8469      	strh	r1, [r5, #34]	; 0x22
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   1a3de:	f8a5 c020 	strh.w	ip, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   1a3e2:	84af      	strh	r7, [r5, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   1a3e4:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   1a3e6:	4629      	mov	r1, r5
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1a3e8:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1a3ea:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   1a3ec:	f7fe fa34 	bl	18858 <ll_rx_put>
}
   1a3f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_sched();
   1a3f4:	f7fe ba3a 	b.w	1886c <ll_rx_sched>
			if (!conn->llcp_length.cache.tx_octets) {
   1a3f8:	f8b0 21b8 	ldrh.w	r2, [r0, #440]	; 0x1b8
   1a3fc:	b9e2      	cbnz	r2, 1a438 <event_len_prep+0x150>
				conn->llcp_length.ack = conn->llcp_length.req;
   1a3fe:	f890 31ac 	ldrb.w	r3, [r0, #428]	; 0x1ac
				conn->procedure_expire = 0U;
   1a402:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
				conn->llcp_length.ack = conn->llcp_length.req;
   1a406:	f880 31ad 	strb.w	r3, [r0, #429]	; 0x1ad
				conn->procedure_expire = 0U;
   1a40a:	e7d5      	b.n	1a3b8 <event_len_prep+0xd0>
		LL_ASSERT(rx && rx->hdr.link);
   1a40c:	4a2d      	ldr	r2, [pc, #180]	; (1a4c4 <event_len_prep+0x1dc>)
   1a40e:	492e      	ldr	r1, [pc, #184]	; (1a4c8 <event_len_prep+0x1e0>)
   1a410:	482e      	ldr	r0, [pc, #184]	; (1a4cc <event_len_prep+0x1e4>)
   1a412:	f44f 5387 	mov.w	r3, #4320	; 0x10e0
   1a416:	f00d f88d 	bl	27534 <assert_print>
   1a41a:	4040      	eors	r0, r0
   1a41c:	f380 8811 	msr	BASEPRI, r0
   1a420:	f04f 0003 	mov.w	r0, #3
   1a424:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   1a426:	6828      	ldr	r0, [r5, #0]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   1a428:	f8b4 c05a 	ldrh.w	ip, [r4, #90]	; 0x5a
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   1a42c:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
   1a430:	e7c7      	b.n	1a3c2 <event_len_prep+0xda>
		conn->tx_data_last = tx;
   1a432:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   1a436:	e7a5      	b.n	1a384 <event_len_prep+0x9c>
				conn->llcp_length.tx_octets =
   1a438:	f8a0 21b2 	strh.w	r2, [r0, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
   1a43c:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1a43e:	f362 0302 	bfi	r3, r2, #0, #3
   1a442:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
				conn->llcp_length.tx_time =
   1a446:	f8b0 31ba 	ldrh.w	r3, [r0, #442]	; 0x1ba
				conn->llcp_length.cache.tx_octets = 0;
   1a44a:	f8a0 21b8 	strh.w	r2, [r0, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   1a44e:	f8a0 31b6 	strh.w	r3, [r0, #438]	; 0x1b6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1a452:	e7b1      	b.n	1a3b8 <event_len_prep+0xd0>
		if (conn->tx_head == conn->tx_data) {
   1a454:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   1a458:	4293      	cmp	r3, r2
   1a45a:	d00f      	beq.n	1a47c <event_len_prep+0x194>
		} else if (!conn->tx_ctrl) {
   1a45c:	2900      	cmp	r1, #0
   1a45e:	d187      	bne.n	1a370 <event_len_prep+0x88>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a460:	791a      	ldrb	r2, [r3, #4]
   1a462:	f002 0203 	and.w	r2, r2, #3
   1a466:	2a03      	cmp	r2, #3
   1a468:	d015      	beq.n	1a496 <event_len_prep+0x1ae>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1a46a:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   1a46e:	e781      	b.n	1a374 <event_len_prep+0x8c>
			tx->next = conn->tx_head;
   1a470:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   1a472:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1a476:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   1a47a:	e781      	b.n	1a380 <event_len_prep+0x98>
			conn->tx_data = conn->tx_data->next;
   1a47c:	681a      	ldr	r2, [r3, #0]
   1a47e:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1a482:	2900      	cmp	r1, #0
   1a484:	f47f af74 	bne.w	1a370 <event_len_prep+0x88>
			tx->next = conn->tx_head->next;
   1a488:	681a      	ldr	r2, [r3, #0]
   1a48a:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1a48c:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1a48e:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   1a490:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   1a494:	e774      	b.n	1a380 <event_len_prep+0x98>
	    ((pdu_data_tx->llctrl.opcode !=
   1a496:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a498:	2a03      	cmp	r2, #3
   1a49a:	d0f5      	beq.n	1a488 <event_len_prep+0x1a0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1a49c:	2a0a      	cmp	r2, #10
   1a49e:	d1e4      	bne.n	1a46a <event_len_prep+0x182>
   1a4a0:	e7f2      	b.n	1a488 <event_len_prep+0x1a0>
		LL_ASSERT(0);
   1a4a2:	4a08      	ldr	r2, [pc, #32]	; (1a4c4 <event_len_prep+0x1dc>)
   1a4a4:	490a      	ldr	r1, [pc, #40]	; (1a4d0 <event_len_prep+0x1e8>)
   1a4a6:	4809      	ldr	r0, [pc, #36]	; (1a4cc <event_len_prep+0x1e4>)
   1a4a8:	f241 130a 	movw	r3, #4362	; 0x110a
   1a4ac:	f00d f842 	bl	27534 <assert_print>
   1a4b0:	4040      	eors	r0, r0
   1a4b2:	f380 8811 	msr	BASEPRI, r0
   1a4b6:	f04f 0003 	mov.w	r0, #3
   1a4ba:	df02      	svc	2
}
   1a4bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a4be:	bf00      	nop
   1a4c0:	20002104 	.word	0x20002104
   1a4c4:	0002fd50 	.word	0x0002fd50
   1a4c8:	0002fe1c 	.word	0x0002fe1c
   1a4cc:	0002f8a0 	.word	0x0002f8a0
   1a4d0:	0002f900 	.word	0x0002f900

0001a4d4 <event_phy_upd_ind_prep>:
{
   1a4d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->llcp.phy_upd_ind.initiate) {
   1a4d8:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
   1a4dc:	f013 0601 	ands.w	r6, r3, #1
{
   1a4e0:	4604      	mov	r4, r0
   1a4e2:	460d      	mov	r5, r1
	if (conn->llcp.phy_upd_ind.initiate) {
   1a4e4:	f040 8092 	bne.w	1a60c <event_phy_upd_ind_prep+0x138>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
   1a4e8:	f8b0 10ea 	ldrh.w	r1, [r0, #234]	; 0xea
   1a4ec:	1a69      	subs	r1, r5, r1
   1a4ee:	0409      	lsls	r1, r1, #16
   1a4f0:	f100 8093 	bmi.w	1a61a <event_phy_upd_ind_prep+0x146>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1a4f4:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
   1a4f8:	2900      	cmp	r1, #0
   1a4fa:	f2c0 8110 	blt.w	1a71e <event_phy_upd_ind_prep+0x24a>
		rx = conn->llcp_rx;
   1a4fe:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
   1a502:	461a      	mov	r2, r3
			conn->llcp_ack = conn->llcp_req;
   1a504:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
   1a508:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
		old_tx = lll->phy_tx;
   1a50c:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		old_rx = lll->phy_rx;
   1a510:	f894 8061 	ldrb.w	r8, [r4, #97]	; 0x61
		uint16_t eff_rx_time = lll->max_rx_time;
   1a514:	f8b4 705e 	ldrh.w	r7, [r4, #94]	; 0x5e
		if (conn->llcp.phy_upd_ind.tx) {
   1a518:	f013 0f1c 	tst.w	r3, #28
		old_rx = lll->phy_rx;
   1a51c:	f008 0807 	and.w	r8, r8, #7
		old_tx = lll->phy_tx;
   1a520:	f001 0907 	and.w	r9, r1, #7
		if (conn->llcp.phy_upd_ind.tx) {
   1a524:	d17b      	bne.n	1a61e <event_phy_upd_ind_prep+0x14a>
		uint16_t eff_tx_time = lll->max_tx_time;
   1a526:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
		if (conn->llcp.phy_upd_ind.rx) {
   1a52a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   1a52e:	d008      	beq.n	1a542 <event_phy_upd_ind_prep+0x6e>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
   1a530:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
   1a534:	095b      	lsrs	r3, r3, #5
   1a536:	f363 0102 	bfi	r1, r3, #0, #3
   1a53a:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
   1a53e:	f44f 77a4 	mov.w	r7, #328	; 0x148
		LL_ASSERT(rx && rx->hdr.link);
   1a542:	2d00      	cmp	r5, #0
   1a544:	f000 80cb 	beq.w	1a6de <event_phy_upd_ind_prep+0x20a>
   1a548:	6828      	ldr	r0, [r5, #0]
   1a54a:	2800      	cmp	r0, #0
   1a54c:	f000 80c7 	beq.w	1a6de <event_phy_upd_ind_prep+0x20a>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   1a550:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		    (lll->phy_rx == old_rx)) {
   1a554:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
		conn->llcp_rx = rx->hdr.link->mem;
   1a558:	f8d0 c004 	ldr.w	ip, [r0, #4]
   1a55c:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   1a560:	0792      	lsls	r2, r2, #30
   1a562:	f3c3 0c02 	ubfx	ip, r3, #0, #3
		    (lll->phy_rx == old_rx)) {
   1a566:	f3c1 0e02 	ubfx	lr, r1, #0, #3
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   1a56a:	f003 0307 	and.w	r3, r3, #7
		    (lll->phy_rx == old_rx)) {
   1a56e:	f001 0107 	and.w	r1, r1, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   1a572:	d402      	bmi.n	1a57a <event_phy_upd_ind_prep+0xa6>
   1a574:	4599      	cmp	r9, r3
   1a576:	f000 80ee 	beq.w	1a756 <event_phy_upd_ind_prep+0x282>
		rx->hdr.handle = lll->handle;
   1a57a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   1a57c:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1a57e:	231d      	movs	r3, #29
   1a580:	712b      	strb	r3, [r5, #4]
		upd->status = 0U;
   1a582:	2300      	movs	r3, #0
		upd->tx = lll->phy_tx;
   1a584:	f885 c01d 	strb.w	ip, [r5, #29]
		upd->rx = lll->phy_rx;
   1a588:	f885 e01e 	strb.w	lr, [r5, #30]
		upd->status = 0U;
   1a58c:	772b      	strb	r3, [r5, #28]
		ll_rx_put(rx->hdr.link, rx);
   1a58e:	4629      	mov	r1, r5
   1a590:	f7fe f962 	bl	18858 <ll_rx_put>
		rx = conn->llcp_rx;
   1a594:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   1a598:	2d00      	cmp	r5, #0
   1a59a:	f000 80b1 	beq.w	1a700 <event_phy_upd_ind_prep+0x22c>
   1a59e:	6828      	ldr	r0, [r5, #0]
   1a5a0:	2800      	cmp	r0, #0
   1a5a2:	f000 80ad 	beq.w	1a700 <event_phy_upd_ind_prep+0x22c>
		if ((eff_tx_time <= lll->max_tx_time) &&
   1a5a6:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
		conn->llcp_rx = rx->hdr.link->mem;
   1a5aa:	6842      	ldr	r2, [r0, #4]
   1a5ac:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		if ((eff_tx_time <= lll->max_tx_time) &&
   1a5b0:	42b3      	cmp	r3, r6
   1a5b2:	d30a      	bcc.n	1a5ca <event_phy_upd_ind_prep+0xf6>
   1a5b4:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   1a5b8:	d807      	bhi.n	1a5ca <event_phy_upd_ind_prep+0xf6>
		    (eff_rx_time <= lll->max_rx_time) &&
   1a5ba:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		    (lll->max_tx_time <= max_tx_time) &&
   1a5be:	42bb      	cmp	r3, r7
   1a5c0:	d303      	bcc.n	1a5ca <event_phy_upd_ind_prep+0xf6>
		    (eff_rx_time <= lll->max_rx_time) &&
   1a5c2:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   1a5c6:	f240 80ff 	bls.w	1a7c8 <event_phy_upd_ind_prep+0x2f4>
		lll->max_tx_time = eff_tx_time;
   1a5ca:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
		lll->max_rx_time = eff_rx_time;
   1a5ce:	f8a4 705e 	strh.w	r7, [r4, #94]	; 0x5e
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   1a5d2:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
   1a5d4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   1a5d6:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   1a5d8:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1a5dc:	f04f 0c03 	mov.w	ip, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1a5e0:	2109      	movs	r1, #9
   1a5e2:	7769      	strb	r1, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1a5e4:	f885 c004 	strb.w	ip, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   1a5e8:	772b      	strb	r3, [r5, #28]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   1a5ea:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
   1a5ee:	842b      	strh	r3, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
   1a5f0:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
   1a5f4:	84ab      	strh	r3, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1a5f6:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   1a5f8:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
   1a5fa:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   1a5fc:	4629      	mov	r1, r5
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1a5fe:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   1a600:	f7fe f92a 	bl	18858 <ll_rx_put>
}
   1a604:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		ll_rx_sched();
   1a608:	f7fe b930 	b.w	1886c <ll_rx_sched>
		if (memq_peek(conn->lll.memq_tx.head, conn->lll.memq_tx.tail,
   1a60c:	e9d0 0119 	ldrd	r0, r1, [r0, #100]	; 0x64
   1a610:	2200      	movs	r2, #0
   1a612:	f7fa fe55 	bl	152c0 <memq_peek>
   1a616:	4606      	mov	r6, r0
   1a618:	b150      	cbz	r0, 1a630 <event_phy_upd_ind_prep+0x15c>
}
   1a61a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
   1a61e:	f3c3 0082 	ubfx	r0, r3, #2, #3
   1a622:	f360 0102 	bfi	r1, r0, #0, #3
   1a626:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
   1a62a:	f44f 76a4 	mov.w	r6, #328	; 0x148
   1a62e:	e77c      	b.n	1a52a <event_phy_upd_ind_prep+0x56>
		rx = ll_pdu_rx_alloc_peek(2);
   1a630:	2002      	movs	r0, #2
   1a632:	f7fe f921 	bl	18878 <ll_pdu_rx_alloc_peek>
		if (!rx) {
   1a636:	4680      	mov	r8, r0
   1a638:	2800      	cmp	r0, #0
   1a63a:	d0ee      	beq.n	1a61a <event_phy_upd_ind_prep+0x146>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1a63c:	4893      	ldr	r0, [pc, #588]	; (1a88c <event_phy_upd_ind_prep+0x3b8>)
   1a63e:	f7fa fdd1 	bl	151e4 <mem_acquire>
		if (!tx) {
   1a642:	4607      	mov	r7, r0
   1a644:	2800      	cmp	r0, #0
   1a646:	d0e8      	beq.n	1a61a <event_phy_upd_ind_prep+0x146>
		conn->llcp.phy_upd_ind.initiate = 0U;
   1a648:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1a64c:	f366 0300 	bfi	r3, r6, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
   1a650:	f3c3 1642 	ubfx	r6, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
   1a654:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
   1a658:	f016 0607 	ands.w	r6, r6, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
   1a65c:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		if (!((conn->llcp.phy_upd_ind.tx |
   1a660:	b2db      	uxtb	r3, r3
   1a662:	f040 8093 	bne.w	1a78c <event_phy_upd_ind_prep+0x2b8>
			conn->llcp_ack = conn->llcp_req;
   1a666:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
			conn->llcp.phy_upd_ind.instant = 0U;
   1a66a:	f8a4 60ea 	strh.w	r6, [r4, #234]	; 0xea
			if (conn->llcp.phy_upd_ind.cmd) {
   1a66e:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
   1a670:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			if (conn->llcp.phy_upd_ind.cmd) {
   1a674:	f100 80ba 	bmi.w	1a7ec <event_phy_upd_ind_prep+0x318>
   1a678:	4633      	mov	r3, r6
   1a67a:	4632      	mov	r2, r6
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   1a67c:	727b      	strb	r3, [r7, #9]
		pdu_ctrl_tx->len =
   1a67e:	2305      	movs	r3, #5
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   1a680:	723e      	strb	r6, [r7, #8]
		pdu_ctrl_tx->len =
   1a682:	717b      	strb	r3, [r7, #5]
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   1a684:	817a      	strh	r2, [r7, #10]
		pdu_ctrl_tx->llctrl.opcode =
   1a686:	2218      	movs	r2, #24
	    conn->tx_head &&
   1a688:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		if (!conn->tx_ctrl) {
   1a68c:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		pdu_ctrl_tx->llctrl.opcode =
   1a690:	71fa      	strb	r2, [r7, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1a692:	793a      	ldrb	r2, [r7, #4]
   1a694:	f042 0203 	orr.w	r2, r2, #3
   1a698:	713a      	strb	r2, [r7, #4]
	if (
   1a69a:	2b00      	cmp	r3, #0
   1a69c:	f000 809d 	beq.w	1a7da <event_phy_upd_ind_prep+0x306>
	    !conn->llcp_enc.pause_tx &&
   1a6a0:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1a6a4:	0795      	lsls	r5, r2, #30
   1a6a6:	f100 8098 	bmi.w	1a7da <event_phy_upd_ind_prep+0x306>
	    !conn->llcp_phy.pause_tx &&
   1a6aa:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1a6ae:	07d0      	lsls	r0, r2, #31
   1a6b0:	f100 8093 	bmi.w	1a7da <event_phy_upd_ind_prep+0x306>
		if (conn->tx_head == conn->tx_data) {
   1a6b4:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   1a6b8:	4293      	cmp	r3, r2
   1a6ba:	f000 80cb 	beq.w	1a854 <event_phy_upd_ind_prep+0x380>
		} else if (!conn->tx_ctrl) {
   1a6be:	2900      	cmp	r1, #0
   1a6c0:	f000 80d5 	beq.w	1a86e <event_phy_upd_ind_prep+0x39a>
	tx->next = conn->tx_ctrl_last->next;
   1a6c4:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1a6c8:	681a      	ldr	r2, [r3, #0]
   1a6ca:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   1a6cc:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   1a6ce:	683b      	ldr	r3, [r7, #0]
	conn->tx_ctrl_last = tx;
   1a6d0:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1a6d4:	2b00      	cmp	r3, #0
   1a6d6:	d1a0      	bne.n	1a61a <event_phy_upd_ind_prep+0x146>
		conn->tx_data_last = tx;
   1a6d8:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
   1a6dc:	e79d      	b.n	1a61a <event_phy_upd_ind_prep+0x146>
		LL_ASSERT(rx && rx->hdr.link);
   1a6de:	4a6c      	ldr	r2, [pc, #432]	; (1a890 <event_phy_upd_ind_prep+0x3bc>)
   1a6e0:	496c      	ldr	r1, [pc, #432]	; (1a894 <event_phy_upd_ind_prep+0x3c0>)
   1a6e2:	486d      	ldr	r0, [pc, #436]	; (1a898 <event_phy_upd_ind_prep+0x3c4>)
   1a6e4:	f241 233a 	movw	r3, #4666	; 0x123a
   1a6e8:	f00c ff24 	bl	27534 <assert_print>
   1a6ec:	4040      	eors	r0, r0
   1a6ee:	f380 8811 	msr	BASEPRI, r0
   1a6f2:	f04f 0003 	mov.w	r0, #3
   1a6f6:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   1a6f8:	6828      	ldr	r0, [r5, #0]
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   1a6fa:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   1a6fe:	e727      	b.n	1a550 <event_phy_upd_ind_prep+0x7c>
		LL_ASSERT(rx && rx->hdr.link);
   1a700:	4a63      	ldr	r2, [pc, #396]	; (1a890 <event_phy_upd_ind_prep+0x3bc>)
   1a702:	4964      	ldr	r1, [pc, #400]	; (1a894 <event_phy_upd_ind_prep+0x3c0>)
   1a704:	4864      	ldr	r0, [pc, #400]	; (1a898 <event_phy_upd_ind_prep+0x3c4>)
   1a706:	f241 2369 	movw	r3, #4713	; 0x1269
   1a70a:	f00c ff13 	bl	27534 <assert_print>
   1a70e:	4040      	eors	r0, r0
   1a710:	f380 8811 	msr	BASEPRI, r0
   1a714:	f04f 0003 	mov.w	r0, #3
   1a718:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   1a71a:	6828      	ldr	r0, [r5, #0]
   1a71c:	e743      	b.n	1a5a6 <event_phy_upd_ind_prep+0xd2>
			rx = ll_pdu_rx_alloc();
   1a71e:	f7fe f8cb 	bl	188b8 <ll_pdu_rx_alloc>
			if (!rx) {
   1a722:	4605      	mov	r5, r0
   1a724:	2800      	cmp	r0, #0
   1a726:	f43f af78 	beq.w	1a61a <event_phy_upd_ind_prep+0x146>
			rx->hdr.link->mem = conn->llcp_rx;
   1a72a:	6803      	ldr	r3, [r0, #0]
   1a72c:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   1a730:	605a      	str	r2, [r3, #4]
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   1a732:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
			conn->llcp_rx = rx;
   1a736:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   1a73a:	2b00      	cmp	r3, #0
		if (conn->llcp.phy_upd_ind.tx) {
   1a73c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1a740:	461a      	mov	r2, r3
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   1a742:	f6bf aedf 	bge.w	1a504 <event_phy_upd_ind_prep+0x30>
   1a746:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
   1a74a:	2900      	cmp	r1, #0
   1a74c:	f43f aeda 	beq.w	1a504 <event_phy_upd_ind_prep+0x30>
			conn->periph.llcp_type = LLCP_NONE;
   1a750:	f884 60d9 	strb.w	r6, [r4, #217]	; 0xd9
   1a754:	e6da      	b.n	1a50c <event_phy_upd_ind_prep+0x38>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   1a756:	4588      	cmp	r8, r1
   1a758:	f47f af0f 	bne.w	1a57a <event_phy_upd_ind_prep+0xa6>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1a75c:	2301      	movs	r3, #1
   1a75e:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   1a760:	4629      	mov	r1, r5
   1a762:	f7fe f879 	bl	18858 <ll_rx_put>
				rx = conn->llcp_rx;
   1a766:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
				LL_ASSERT(rx && rx->hdr.link);
   1a76a:	2d00      	cmp	r5, #0
   1a76c:	d063      	beq.n	1a836 <event_phy_upd_ind_prep+0x362>
   1a76e:	6828      	ldr	r0, [r5, #0]
   1a770:	2800      	cmp	r0, #0
   1a772:	d060      	beq.n	1a836 <event_phy_upd_ind_prep+0x362>
				conn->llcp_rx = rx->hdr.link->mem;
   1a774:	6842      	ldr	r2, [r0, #4]
   1a776:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1a77a:	2301      	movs	r3, #1
				ll_rx_put(rx->hdr.link, rx);
   1a77c:	4629      	mov	r1, r5
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1a77e:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
   1a780:	f7fe f86a 	bl	18858 <ll_rx_put>
}
   1a784:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   1a788:	f7fe b870 	b.w	1886c <ll_rx_sched>
							 lll->latency +
   1a78c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   1a78e:	1da9      	adds	r1, r5, #6
   1a790:	4419      	add	r1, r3
			conn->llcp.phy_upd_ind.instant = event_counter +
   1a792:	f8a4 10ea 	strh.w	r1, [r4, #234]	; 0xea
			(void)ll_pdu_rx_alloc();
   1a796:	f7fe f88f 	bl	188b8 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   1a79a:	f8d8 3000 	ldr.w	r3, [r8]
   1a79e:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   1a7a2:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   1a7a4:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
				rx = ll_pdu_rx_alloc();
   1a7a8:	f7fe f886 	bl	188b8 <ll_pdu_rx_alloc>
				rx->hdr.link->mem = conn->llcp_rx;
   1a7ac:	6803      	ldr	r3, [r0, #0]
   1a7ae:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   1a7b2:	605a      	str	r2, [r3, #4]
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   1a7b4:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   1a7b8:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
				conn->llcp_rx = rx;
   1a7bc:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   1a7c0:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   1a7c4:	095b      	lsrs	r3, r3, #5
   1a7c6:	e759      	b.n	1a67c <event_phy_upd_ind_prep+0x1a8>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1a7c8:	2301      	movs	r3, #1
   1a7ca:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   1a7cc:	4629      	mov	r1, r5
   1a7ce:	f7fe f843 	bl	18858 <ll_rx_put>
}
   1a7d2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   1a7d6:	f7fe b849 	b.w	1886c <ll_rx_sched>
		if (!conn->tx_ctrl) {
   1a7da:	2900      	cmp	r1, #0
   1a7dc:	f47f af72 	bne.w	1a6c4 <event_phy_upd_ind_prep+0x1f0>
			tx->next = conn->tx_head;
   1a7e0:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   1a7e2:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1a7e6:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
   1a7ea:	e773      	b.n	1a6d4 <event_phy_upd_ind_prep+0x200>
				(void)ll_pdu_rx_alloc();
   1a7ec:	f7fe f864 	bl	188b8 <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
   1a7f0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   1a7f2:	f8a8 3006 	strh.w	r3, [r8, #6]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1a7f6:	231d      	movs	r3, #29
				upd->status = 0U;
   1a7f8:	f888 601c 	strb.w	r6, [r8, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1a7fc:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
   1a800:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
				ll_rx_put(rx->hdr.link, rx);
   1a804:	f8d8 0000 	ldr.w	r0, [r8]
				upd->tx = lll->phy_tx;
   1a808:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1a80c:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
   1a810:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   1a814:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1a818:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
   1a81c:	4641      	mov	r1, r8
   1a81e:	f7fe f81b 	bl	18858 <ll_rx_put>
				ll_rx_sched();
   1a822:	f7fe f823 	bl	1886c <ll_rx_sched>
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   1a826:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   1a82a:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   1a82e:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   1a832:	095b      	lsrs	r3, r3, #5
   1a834:	e722      	b.n	1a67c <event_phy_upd_ind_prep+0x1a8>
				LL_ASSERT(rx && rx->hdr.link);
   1a836:	4a16      	ldr	r2, [pc, #88]	; (1a890 <event_phy_upd_ind_prep+0x3bc>)
   1a838:	4916      	ldr	r1, [pc, #88]	; (1a894 <event_phy_upd_ind_prep+0x3c0>)
   1a83a:	4817      	ldr	r0, [pc, #92]	; (1a898 <event_phy_upd_ind_prep+0x3c4>)
   1a83c:	f241 234c 	movw	r3, #4684	; 0x124c
   1a840:	f00c fe78 	bl	27534 <assert_print>
   1a844:	4040      	eors	r0, r0
   1a846:	f380 8811 	msr	BASEPRI, r0
   1a84a:	f04f 0003 	mov.w	r0, #3
   1a84e:	df02      	svc	2
				conn->llcp_rx = rx->hdr.link->mem;
   1a850:	6828      	ldr	r0, [r5, #0]
   1a852:	e78f      	b.n	1a774 <event_phy_upd_ind_prep+0x2a0>
			conn->tx_data = conn->tx_data->next;
   1a854:	681a      	ldr	r2, [r3, #0]
   1a856:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1a85a:	2900      	cmp	r1, #0
   1a85c:	f47f af32 	bne.w	1a6c4 <event_phy_upd_ind_prep+0x1f0>
			tx->next = conn->tx_head->next;
   1a860:	681a      	ldr	r2, [r3, #0]
   1a862:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
   1a864:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   1a866:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
   1a868:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
   1a86c:	e732      	b.n	1a6d4 <event_phy_upd_ind_prep+0x200>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a86e:	791a      	ldrb	r2, [r3, #4]
   1a870:	f002 0203 	and.w	r2, r2, #3
   1a874:	2a03      	cmp	r2, #3
   1a876:	d002      	beq.n	1a87e <event_phy_upd_ind_prep+0x3aa>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1a878:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1a87c:	e722      	b.n	1a6c4 <event_phy_upd_ind_prep+0x1f0>
	    ((pdu_data_tx->llctrl.opcode !=
   1a87e:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a880:	2a03      	cmp	r2, #3
   1a882:	d0ed      	beq.n	1a860 <event_phy_upd_ind_prep+0x38c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1a884:	2a0a      	cmp	r2, #10
   1a886:	d1f7      	bne.n	1a878 <event_phy_upd_ind_prep+0x3a4>
   1a888:	e7ea      	b.n	1a860 <event_phy_upd_ind_prep+0x38c>
   1a88a:	bf00      	nop
   1a88c:	20002104 	.word	0x20002104
   1a890:	0002fd50 	.word	0x0002fd50
   1a894:	0002fe1c 	.word	0x0002fe1c
   1a898:	0002f8a0 	.word	0x0002f8a0

0001a89c <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   1a89c:	4801      	ldr	r0, [pc, #4]	; (1a8a4 <ll_conn_acquire+0x8>)
   1a89e:	f7fa bca1 	b.w	151e4 <mem_acquire>
   1a8a2:	bf00      	nop
   1a8a4:	2000206c 	.word	0x2000206c

0001a8a8 <ll_conn_release>:
	mem_release(conn, &conn_free);
   1a8a8:	4901      	ldr	r1, [pc, #4]	; (1a8b0 <ll_conn_release+0x8>)
   1a8aa:	f7fa bcb5 	b.w	15218 <mem_release>
   1a8ae:	bf00      	nop
   1a8b0:	2000206c 	.word	0x2000206c

0001a8b4 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   1a8b4:	4902      	ldr	r1, [pc, #8]	; (1a8c0 <ll_conn_handle_get+0xc>)
   1a8b6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1a8ba:	f7fa bcc9 	b.w	15250 <mem_index_get>
   1a8be:	bf00      	nop
   1a8c0:	200011c8 	.word	0x200011c8

0001a8c4 <ll_conn_get>:
{
   1a8c4:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a8c6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1a8ca:	4801      	ldr	r0, [pc, #4]	; (1a8d0 <ll_conn_get+0xc>)
   1a8cc:	f7fa bcbc 	b.w	15248 <mem_get>
   1a8d0:	200011c8 	.word	0x200011c8

0001a8d4 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1a8d4:	b958      	cbnz	r0, 1a8ee <ll_connected_get+0x1a>
{
   1a8d6:	b508      	push	{r3, lr}
   1a8d8:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a8da:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1a8de:	4805      	ldr	r0, [pc, #20]	; (1a8f4 <ll_connected_get+0x20>)
   1a8e0:	f7fa fcb2 	bl	15248 <mem_get>
	if (conn->lll.handle != handle) {
   1a8e4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   1a8e6:	b903      	cbnz	r3, 1a8ea <ll_connected_get+0x16>
}
   1a8e8:	bd08      	pop	{r3, pc}
		return NULL;
   1a8ea:	2000      	movs	r0, #0
}
   1a8ec:	bd08      	pop	{r3, pc}
		return NULL;
   1a8ee:	2000      	movs	r0, #0
}
   1a8f0:	4770      	bx	lr
   1a8f2:	bf00      	nop
   1a8f4:	200011c8 	.word	0x200011c8

0001a8f8 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   1a8f8:	4801      	ldr	r0, [pc, #4]	; (1a900 <ll_tx_mem_acquire+0x8>)
   1a8fa:	f7fa bc73 	b.w	151e4 <mem_acquire>
   1a8fe:	bf00      	nop
   1a900:	20002094 	.word	0x20002094

0001a904 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   1a904:	4901      	ldr	r1, [pc, #4]	; (1a90c <ll_tx_mem_release+0x8>)
   1a906:	f7fa bc87 	b.w	15218 <mem_release>
   1a90a:	bf00      	nop
   1a90c:	20002094 	.word	0x20002094

0001a910 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1a910:	2800      	cmp	r0, #0
   1a912:	d140      	bne.n	1a996 <ll_tx_mem_enqueue+0x86>
{
   1a914:	b570      	push	{r4, r5, r6, lr}
   1a916:	4602      	mov	r2, r0
   1a918:	460e      	mov	r6, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a91a:	4820      	ldr	r0, [pc, #128]	; (1a99c <ll_tx_mem_enqueue+0x8c>)
   1a91c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1a920:	f7fa fc92 	bl	15248 <mem_get>
	if (conn->lll.handle != handle) {
   1a924:	8d02      	ldrh	r2, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a926:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   1a928:	bb7a      	cbnz	r2, 1a98a <ll_tx_mem_enqueue+0x7a>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   1a92a:	4c1d      	ldr	r4, [pc, #116]	; (1a9a0 <ll_tx_mem_enqueue+0x90>)
   1a92c:	f894 c005 	ldrb.w	ip, [r4, #5]
	if (last == count) {
   1a930:	78a1      	ldrb	r1, [r4, #2]
   1a932:	7820      	ldrb	r0, [r4, #0]
	last = last + 1;
   1a934:	f10c 0301 	add.w	r3, ip, #1
   1a938:	b2db      	uxtb	r3, r3
		last = 0U;
   1a93a:	4299      	cmp	r1, r3
   1a93c:	bf08      	it	eq
   1a93e:	2300      	moveq	r3, #0
   1a940:	7921      	ldrb	r1, [r4, #4]
	if (last == first) {
   1a942:	4299      	cmp	r1, r3
   1a944:	d024      	beq.n	1a990 <ll_tx_mem_enqueue+0x80>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1a946:	fb1c fc00 	smulbb	ip, ip, r0
   1a94a:	f104 0008 	add.w	r0, r4, #8
	lll_tx->handle = handle;
   1a94e:	f820 200c 	strh.w	r2, [r0, ip]
   1a952:	4484      	add	ip, r0
	lll_tx->node = tx;
   1a954:	f8cc 6004 	str.w	r6, [ip, #4]
	*last = idx; /* Commit: Update write index */
   1a958:	7163      	strb	r3, [r4, #5]
   1a95a:	782b      	ldrb	r3, [r5, #0]
	if (ull_ref_get(&conn->ull)) {
   1a95c:	b92b      	cbnz	r3, 1a96a <ll_tx_mem_enqueue+0x5a>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1a95e:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   1a962:	2b00      	cmp	r3, #0
   1a964:	db0b      	blt.n	1a97e <ll_tx_mem_enqueue+0x6e>
	return 0;
   1a966:	2000      	movs	r0, #0
}
   1a968:	bd70      	pop	{r4, r5, r6, pc}
	mfy.param = conn;
   1a96a:	4b0e      	ldr	r3, [pc, #56]	; (1a9a4 <ll_tx_mem_enqueue+0x94>)
	mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U, &mfy);
   1a96c:	2101      	movs	r1, #1
   1a96e:	2003      	movs	r0, #3
	mfy.param = conn;
   1a970:	609d      	str	r5, [r3, #8]
	mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U, &mfy);
   1a972:	f7fa fd0f 	bl	15394 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1a976:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   1a97a:	2b00      	cmp	r3, #0
   1a97c:	daf3      	bge.n	1a966 <ll_tx_mem_enqueue+0x56>
		ull_periph_latency_cancel(conn, handle);
   1a97e:	4628      	mov	r0, r5
   1a980:	2100      	movs	r1, #0
   1a982:	f003 ff23 	bl	1e7cc <ull_periph_latency_cancel>
	return 0;
   1a986:	2000      	movs	r0, #0
}
   1a988:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1a98a:	f06f 0015 	mvn.w	r0, #21
}
   1a98e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   1a990:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1a994:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1a996:	f06f 0015 	mvn.w	r0, #21
}
   1a99a:	4770      	bx	lr
   1a99c:	200011c8 	.word	0x200011c8
   1a9a0:	200005a0 	.word	0x200005a0
   1a9a4:	200005f8 	.word	0x200005f8

0001a9a8 <ll_conn_update>:
{
   1a9a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a9ac:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   1a9b0:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   1a9b4:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   1a9b8:	2800      	cmp	r0, #0
   1a9ba:	d155      	bne.n	1aa68 <ll_conn_update+0xc0>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a9bc:	460c      	mov	r4, r1
   1a9be:	4615      	mov	r5, r2
   1a9c0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1a9c4:	4602      	mov	r2, r0
   1a9c6:	4841      	ldr	r0, [pc, #260]	; (1aacc <ll_conn_update+0x124>)
   1a9c8:	461e      	mov	r6, r3
   1a9ca:	f7fa fc3d 	bl	15248 <mem_get>
   1a9ce:	4684      	mov	ip, r0
	if (conn->lll.handle != handle) {
   1a9d0:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   1a9d2:	2800      	cmp	r0, #0
   1a9d4:	d148      	bne.n	1aa68 <ll_conn_update+0xc0>
	if (!cmd) {
   1a9d6:	bb3c      	cbnz	r4, 1aa28 <ll_conn_update+0x80>
		if (!conn->llcp_conn_param.disabled &&
   1a9d8:	f89c 3186 	ldrb.w	r3, [ip, #390]	; 0x186
   1a9dc:	0699      	lsls	r1, r3, #26
   1a9de:	d44a      	bmi.n	1aa76 <ll_conn_update+0xce>
		    (!conn->common.fex_valid ||
   1a9e0:	f89c 30d8 	ldrb.w	r3, [ip, #216]	; 0xd8
		if (!conn->llcp_conn_param.disabled &&
   1a9e4:	07da      	lsls	r2, r3, #31
   1a9e6:	d442      	bmi.n	1aa6e <ll_conn_update+0xc6>
			if (conn->llcp_conn_param.req !=
   1a9e8:	f89c 2184 	ldrb.w	r2, [ip, #388]	; 0x184
   1a9ec:	f89c 3185 	ldrb.w	r3, [ip, #389]	; 0x185
   1a9f0:	4293      	cmp	r3, r2
   1a9f2:	d136      	bne.n	1aa62 <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   1a9f4:	f8bc 2186 	ldrh.w	r2, [ip, #390]	; 0x186
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1a9f8:	f99c 1039 	ldrsb.w	r1, [ip, #57]	; 0x39
			conn->llcp_conn_param.interval_min = interval_min;
   1a9fc:	f8ac 6188 	strh.w	r6, [ip, #392]	; 0x188
			conn->llcp_conn_param.state = cmd;
   1aa00:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
			conn->llcp_conn_param.req++;
   1aa04:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
   1aa06:	f042 0210 	orr.w	r2, r2, #16
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1aa0a:	2900      	cmp	r1, #0
			conn->llcp_conn_param.interval_max = interval_max;
   1aa0c:	f8ac 918a 	strh.w	r9, [ip, #394]	; 0x18a
			conn->llcp_conn_param.latency = latency;
   1aa10:	f8ac 818c 	strh.w	r8, [ip, #396]	; 0x18c
			conn->llcp_conn_param.timeout = timeout;
   1aa14:	f8ac 718e 	strh.w	r7, [ip, #398]	; 0x18e
			conn->llcp_conn_param.state = cmd;
   1aa18:	f8ac 2186 	strh.w	r2, [ip, #390]	; 0x186
			conn->llcp_conn_param.req++;
   1aa1c:	f88c 3184 	strb.w	r3, [ip, #388]	; 0x184
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1aa20:	db4e      	blt.n	1aac0 <ll_conn_update+0x118>
	return 0;
   1aa22:	2000      	movs	r0, #0
}
   1aa24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cmd--;
   1aa28:	3c01      	subs	r4, #1
		if (cmd) {
   1aa2a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1aa2e:	d0db      	beq.n	1a9e8 <ll_conn_update+0x40>
			if ((conn->llcp_conn_param.req ==
   1aa30:	f89c 2185 	ldrb.w	r2, [ip, #389]	; 0x185
   1aa34:	f89c 3184 	ldrb.w	r3, [ip, #388]	; 0x184
   1aa38:	429a      	cmp	r2, r3
   1aa3a:	d012      	beq.n	1aa62 <ll_conn_update+0xba>
			    (conn->llcp_conn_param.state !=
   1aa3c:	f89c 3186 	ldrb.w	r3, [ip, #390]	; 0x186
			     conn->llcp_conn_param.ack) ||
   1aa40:	f003 020f 	and.w	r2, r3, #15
   1aa44:	2a03      	cmp	r2, #3
   1aa46:	d10c      	bne.n	1aa62 <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   1aa48:	f004 040f 	and.w	r4, r4, #15
   1aa4c:	f023 031f 	bic.w	r3, r3, #31
   1aa50:	f044 0410 	orr.w	r4, r4, #16
   1aa54:	431c      	orrs	r4, r3
			conn->llcp_conn_param.status = status;
   1aa56:	f88c 5187 	strb.w	r5, [ip, #391]	; 0x187
			conn->llcp_conn_param.state = cmd;
   1aa5a:	f88c 4186 	strb.w	r4, [ip, #390]	; 0x186
}
   1aa5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   1aa62:	200c      	movs	r0, #12
}
   1aa64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1aa68:	2002      	movs	r0, #2
}
   1aa6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		     (conn->llcp_feature.features_conn &
   1aa6e:	f8dc 3128 	ldr.w	r3, [ip, #296]	; 0x128
		    (!conn->common.fex_valid ||
   1aa72:	079b      	lsls	r3, r3, #30
   1aa74:	d4b8      	bmi.n	1a9e8 <ll_conn_update+0x40>
		} else if (conn->lll.role) {
   1aa76:	f99c 3039 	ldrsb.w	r3, [ip, #57]	; 0x39
   1aa7a:	2b00      	cmp	r3, #0
   1aa7c:	db1e      	blt.n	1aabc <ll_conn_update+0x114>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   1aa7e:	f89c 210c 	ldrb.w	r2, [ip, #268]	; 0x10c
   1aa82:	f89c 310d 	ldrb.w	r3, [ip, #269]	; 0x10d
   1aa86:	4293      	cmp	r3, r2
   1aa88:	d1eb      	bne.n	1aa62 <ll_conn_update+0xba>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1aa8a:	f89c 210e 	ldrb.w	r2, [ip, #270]	; 0x10e
		conn->llcp_cu.interval = interval_max;
   1aa8e:	f8ac 9110 	strh.w	r9, [ip, #272]	; 0x110
		conn->llcp_cu.req++;
   1aa92:	3301      	adds	r3, #1
   1aa94:	f88c 310c 	strb.w	r3, [ip, #268]	; 0x10c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1aa98:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.win_size = 1U;
   1aa9c:	2301      	movs	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1aa9e:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
   1aaa2:	2000      	movs	r0, #0
		conn->llcp_cu.win_size = 1U;
   1aaa4:	f88c 311c 	strb.w	r3, [ip, #284]	; 0x11c
		conn->llcp_cu.latency = latency;
   1aaa8:	f8ac 8112 	strh.w	r8, [ip, #274]	; 0x112
		conn->llcp_cu.timeout = timeout;
   1aaac:	f8ac 7114 	strh.w	r7, [ip, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1aab0:	f88c 210e 	strb.w	r2, [ip, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
   1aab4:	f8cc 0118 	str.w	r0, [ip, #280]	; 0x118
}
   1aab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1aabc:	201a      	movs	r0, #26
   1aabe:	e7d1      	b.n	1aa64 <ll_conn_update+0xbc>
				ull_periph_latency_cancel(conn, handle);
   1aac0:	4660      	mov	r0, ip
   1aac2:	2100      	movs	r1, #0
   1aac4:	f003 fe82 	bl	1e7cc <ull_periph_latency_cancel>
	return 0;
   1aac8:	2000      	movs	r0, #0
   1aaca:	e7cb      	b.n	1aa64 <ll_conn_update+0xbc>
   1aacc:	200011c8 	.word	0x200011c8

0001aad0 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1aad0:	b9d0      	cbnz	r0, 1ab08 <ll_chm_get+0x38>
{
   1aad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aad4:	4602      	mov	r2, r0
   1aad6:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1aad8:	480c      	ldr	r0, [pc, #48]	; (1ab0c <ll_chm_get+0x3c>)
   1aada:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1aade:	f7fa fbb3 	bl	15248 <mem_get>
	if (conn->lll.handle != handle) {
   1aae2:	8d06      	ldrh	r6, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1aae4:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   1aae6:	b96e      	cbnz	r6, 1ab04 <ll_chm_get+0x34>
		memcpy(chm, conn->lll.data_chan_map,
   1aae8:	f100 0734 	add.w	r7, r0, #52	; 0x34
		conn->chm_updated = 0U;
   1aaec:	f884 61d8 	strb.w	r6, [r4, #472]	; 0x1d8
		memcpy(chm, conn->lll.data_chan_map,
   1aaf0:	2205      	movs	r2, #5
   1aaf2:	4639      	mov	r1, r7
   1aaf4:	4628      	mov	r0, r5
   1aaf6:	f00e fc26 	bl	29346 <memcpy>
	} while (conn->chm_updated);
   1aafa:	f894 01d8 	ldrb.w	r0, [r4, #472]	; 0x1d8
   1aafe:	2800      	cmp	r0, #0
   1ab00:	d1f4      	bne.n	1aaec <ll_chm_get+0x1c>
}
   1ab02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ab04:	2002      	movs	r0, #2
}
   1ab06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ab08:	2002      	movs	r0, #2
}
   1ab0a:	4770      	bx	lr
   1ab0c:	200011c8 	.word	0x200011c8

0001ab10 <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1ab10:	2800      	cmp	r0, #0
   1ab12:	d13e      	bne.n	1ab92 <ll_terminate_ind_send+0x82>
{
   1ab14:	b510      	push	{r4, lr}
   1ab16:	4602      	mov	r2, r0
   1ab18:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1ab1a:	4821      	ldr	r0, [pc, #132]	; (1aba0 <ll_terminate_ind_send+0x90>)
   1ab1c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1ab20:	f7fa fb92 	bl	15248 <mem_get>
	if (conn->lll.handle != handle) {
   1ab24:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   1ab26:	bb93      	cbnz	r3, 1ab8e <ll_terminate_ind_send+0x7e>
	if (conn->llcp_terminate.req != conn->llcp_terminate.ack) {
   1ab28:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
   1ab2c:	f890 2141 	ldrb.w	r2, [r0, #321]	; 0x141
   1ab30:	429a      	cmp	r2, r3
   1ab32:	d12a      	bne.n	1ab8a <ll_terminate_ind_send+0x7a>
	switch (reason) {
   1ab34:	2c29      	cmp	r4, #41	; 0x29
   1ab36:	d819      	bhi.n	1ab6c <ll_terminate_ind_send+0x5c>
   1ab38:	2c04      	cmp	r4, #4
   1ab3a:	d919      	bls.n	1ab70 <ll_terminate_ind_send+0x60>
   1ab3c:	1f62      	subs	r2, r4, #5
   1ab3e:	2a24      	cmp	r2, #36	; 0x24
   1ab40:	d816      	bhi.n	1ab70 <ll_terminate_ind_send+0x60>
   1ab42:	e8df f002 	tbb	[pc, r2]
   1ab46:	1517      	.short	0x1517
   1ab48:	15151515 	.word	0x15151515
   1ab4c:	15151515 	.word	0x15151515
   1ab50:	15151515 	.word	0x15151515
   1ab54:	15171717 	.word	0x15171717
   1ab58:	17151515 	.word	0x17151515
   1ab5c:	15151515 	.word	0x15151515
   1ab60:	15151515 	.word	0x15151515
   1ab64:	15151515 	.word	0x15151515
   1ab68:	1515      	.short	0x1515
   1ab6a:	17          	.byte	0x17
   1ab6b:	00          	.byte	0x00
   1ab6c:	2c3b      	cmp	r4, #59	; 0x3b
   1ab6e:	d001      	beq.n	1ab74 <ll_terminate_ind_send+0x64>
   1ab70:	2012      	movs	r0, #18
}
   1ab72:	bd10      	pop	{r4, pc}
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1ab74:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	conn->llcp_terminate.reason_own = reason;
   1ab78:	f880 4142 	strb.w	r4, [r0, #322]	; 0x142
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   1ab7c:	3301      	adds	r3, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1ab7e:	2a00      	cmp	r2, #0
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   1ab80:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1ab84:	db07      	blt.n	1ab96 <ll_terminate_ind_send+0x86>
	return 0;
   1ab86:	2000      	movs	r0, #0
}
   1ab88:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ab8a:	200c      	movs	r0, #12
}
   1ab8c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ab8e:	2002      	movs	r0, #2
}
   1ab90:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ab92:	2002      	movs	r0, #2
}
   1ab94:	4770      	bx	lr
		ull_periph_latency_cancel(conn, handle);
   1ab96:	2100      	movs	r1, #0
   1ab98:	f003 fe18 	bl	1e7cc <ull_periph_latency_cancel>
	return 0;
   1ab9c:	2000      	movs	r0, #0
}
   1ab9e:	bd10      	pop	{r4, pc}
   1aba0:	200011c8 	.word	0x200011c8

0001aba4 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1aba4:	bb00      	cbnz	r0, 1abe8 <ll_feature_req_send+0x44>
{
   1aba6:	b510      	push	{r4, lr}
   1aba8:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1abaa:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1abae:	480f      	ldr	r0, [pc, #60]	; (1abec <ll_feature_req_send+0x48>)
   1abb0:	f7fa fb4a 	bl	15248 <mem_get>
	if (conn->lll.handle != handle) {
   1abb4:	8d04      	ldrh	r4, [r0, #40]	; 0x28
   1abb6:	b984      	cbnz	r4, 1abda <ll_feature_req_send+0x36>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   1abb8:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
   1abbc:	f890 2121 	ldrb.w	r2, [r0, #289]	; 0x121
   1abc0:	428a      	cmp	r2, r1
   1abc2:	d108      	bne.n	1abd6 <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1abc4:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_feature.req++;
   1abc8:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1abca:	2900      	cmp	r1, #0
	conn->llcp_feature.req++;
   1abcc:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1abd0:	db05      	blt.n	1abde <ll_feature_req_send+0x3a>
	return 0;
   1abd2:	4620      	mov	r0, r4
}
   1abd4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1abd6:	200c      	movs	r0, #12
}
   1abd8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1abda:	2002      	movs	r0, #2
}
   1abdc:	bd10      	pop	{r4, pc}
		ull_periph_latency_cancel(conn, handle);
   1abde:	4621      	mov	r1, r4
   1abe0:	f003 fdf4 	bl	1e7cc <ull_periph_latency_cancel>
	return 0;
   1abe4:	4620      	mov	r0, r4
}
   1abe6:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1abe8:	2002      	movs	r0, #2
}
   1abea:	4770      	bx	lr
   1abec:	200011c8 	.word	0x200011c8

0001abf0 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1abf0:	bb00      	cbnz	r0, 1ac34 <ll_version_ind_send+0x44>
{
   1abf2:	b510      	push	{r4, lr}
   1abf4:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1abf6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1abfa:	480f      	ldr	r0, [pc, #60]	; (1ac38 <ll_version_ind_send+0x48>)
   1abfc:	f7fa fb24 	bl	15248 <mem_get>
	if (conn->lll.handle != handle) {
   1ac00:	8d04      	ldrh	r4, [r0, #40]	; 0x28
   1ac02:	b984      	cbnz	r4, 1ac26 <ll_version_ind_send+0x36>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   1ac04:	f890 1138 	ldrb.w	r1, [r0, #312]	; 0x138
   1ac08:	f890 2139 	ldrb.w	r2, [r0, #313]	; 0x139
   1ac0c:	428a      	cmp	r2, r1
   1ac0e:	d108      	bne.n	1ac22 <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1ac10:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_version.req++;
   1ac14:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1ac16:	2900      	cmp	r1, #0
	conn->llcp_version.req++;
   1ac18:	f880 2138 	strb.w	r2, [r0, #312]	; 0x138
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1ac1c:	db05      	blt.n	1ac2a <ll_version_ind_send+0x3a>
	return 0;
   1ac1e:	4620      	mov	r0, r4
}
   1ac20:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ac22:	200c      	movs	r0, #12
}
   1ac24:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ac26:	2002      	movs	r0, #2
}
   1ac28:	bd10      	pop	{r4, pc}
		ull_periph_latency_cancel(conn, handle);
   1ac2a:	4621      	mov	r1, r4
   1ac2c:	f003 fdce 	bl	1e7cc <ull_periph_latency_cancel>
	return 0;
   1ac30:	4620      	mov	r0, r4
}
   1ac32:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ac34:	2002      	movs	r0, #2
}
   1ac36:	4770      	bx	lr
   1ac38:	200011c8 	.word	0x200011c8

0001ac3c <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1ac3c:	2800      	cmp	r0, #0
   1ac3e:	d14c      	bne.n	1acda <ll_length_req_send+0x9e>
{
   1ac40:	b538      	push	{r3, r4, r5, lr}
   1ac42:	460d      	mov	r5, r1
   1ac44:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1ac46:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1ac4a:	4602      	mov	r2, r0
   1ac4c:	4824      	ldr	r0, [pc, #144]	; (1ace0 <ll_length_req_send+0xa4>)
   1ac4e:	f7fa fafb 	bl	15248 <mem_get>
	if (conn->lll.handle != handle) {
   1ac52:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   1ac54:	bbc3      	cbnz	r3, 1acc8 <ll_length_req_send+0x8c>
	if (conn->llcp_length.disabled ||
   1ac56:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   1ac5a:	071a      	lsls	r2, r3, #28
   1ac5c:	d432      	bmi.n	1acc4 <ll_length_req_send+0x88>
	    (conn->common.fex_valid &&
   1ac5e:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
	if (conn->llcp_length.disabled ||
   1ac62:	07d1      	lsls	r1, r2, #31
   1ac64:	d503      	bpl.n	1ac6e <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_DLE)))) {
   1ac66:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
	    (conn->common.fex_valid &&
   1ac6a:	0692      	lsls	r2, r2, #26
   1ac6c:	d52a      	bpl.n	1acc4 <ll_length_req_send+0x88>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   1ac6e:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
   1ac72:	f890 21ad 	ldrb.w	r2, [r0, #429]	; 0x1ad
   1ac76:	428a      	cmp	r2, r1
   1ac78:	d011      	beq.n	1ac9e <ll_length_req_send+0x62>
		switch (conn->llcp_length.state) {
   1ac7a:	f003 0307 	and.w	r3, r3, #7
   1ac7e:	2b03      	cmp	r3, #3
   1ac80:	d004      	beq.n	1ac8c <ll_length_req_send+0x50>
   1ac82:	3303      	adds	r3, #3
   1ac84:	f003 0307 	and.w	r3, r3, #7
   1ac88:	2b01      	cmp	r3, #1
   1ac8a:	d824      	bhi.n	1acd6 <ll_length_req_send+0x9a>
			if (!conn->llcp_length.cache.tx_octets) {
   1ac8c:	f8b0 31b8 	ldrh.w	r3, [r0, #440]	; 0x1b8
   1ac90:	bb0b      	cbnz	r3, 1acd6 <ll_length_req_send+0x9a>
				conn->llcp_length.cache.tx_octets = tx_octets;
   1ac92:	f8a0 51b8 	strh.w	r5, [r0, #440]	; 0x1b8
				conn->llcp_length.cache.tx_time = tx_time;
   1ac96:	f8a0 41ba 	strh.w	r4, [r0, #442]	; 0x1ba
				return 0;
   1ac9a:	4618      	mov	r0, r3
}
   1ac9c:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1ac9e:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
	conn->llcp_length.tx_octets = tx_octets;
   1aca2:	f8a0 51b2 	strh.w	r5, [r0, #434]	; 0x1b2
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1aca6:	f36f 0302 	bfc	r3, #0, #3
   1acaa:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1acae:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_length.tx_time = tx_time;
   1acb2:	f8a0 41b6 	strh.w	r4, [r0, #438]	; 0x1b6
	conn->llcp_length.req++;
   1acb6:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1acb8:	2b00      	cmp	r3, #0
	conn->llcp_length.req++;
   1acba:	f880 21ac 	strb.w	r2, [r0, #428]	; 0x1ac
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1acbe:	db05      	blt.n	1accc <ll_length_req_send+0x90>
	return 0;
   1acc0:	2000      	movs	r0, #0
}
   1acc2:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1acc4:	201a      	movs	r0, #26
}
   1acc6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1acc8:	2002      	movs	r0, #2
}
   1acca:	bd38      	pop	{r3, r4, r5, pc}
		ull_periph_latency_cancel(conn, handle);
   1accc:	2100      	movs	r1, #0
   1acce:	f003 fd7d 	bl	1e7cc <ull_periph_latency_cancel>
	return 0;
   1acd2:	2000      	movs	r0, #0
}
   1acd4:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   1acd6:	200c      	movs	r0, #12
}
   1acd8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1acda:	2002      	movs	r0, #2
}
   1acdc:	4770      	bx	lr
   1acde:	bf00      	nop
   1ace0:	200011c8 	.word	0x200011c8

0001ace4 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   1ace4:	4a03      	ldr	r2, [pc, #12]	; (1acf4 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   1ace6:	4b04      	ldr	r3, [pc, #16]	; (1acf8 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   1ace8:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   1acea:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   1acec:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   1acee:	800b      	strh	r3, [r1, #0]
}
   1acf0:	4770      	bx	lr
   1acf2:	bf00      	nop
   1acf4:	20002cd2 	.word	0x20002cd2
   1acf8:	20002cd4 	.word	0x20002cd4

0001acfc <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   1acfc:	4a02      	ldr	r2, [pc, #8]	; (1ad08 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   1acfe:	4b03      	ldr	r3, [pc, #12]	; (1ad0c <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   1ad00:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   1ad02:	8019      	strh	r1, [r3, #0]
}
   1ad04:	2000      	movs	r0, #0
   1ad06:	4770      	bx	lr
   1ad08:	20002cd2 	.word	0x20002cd2
   1ad0c:	20002cd4 	.word	0x20002cd4

0001ad10 <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   1ad10:	f04f 0c1b 	mov.w	ip, #27
   1ad14:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   1ad18:	f44f 70a4 	mov.w	r0, #328	; 0x148
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   1ad1c:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   1ad20:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   1ad22:	8018      	strh	r0, [r3, #0]
}
   1ad24:	4770      	bx	lr
   1ad26:	bf00      	nop

0001ad28 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1ad28:	b9c0      	cbnz	r0, 1ad5c <ll_phy_get+0x34>
{
   1ad2a:	b538      	push	{r3, r4, r5, lr}
   1ad2c:	460d      	mov	r5, r1
   1ad2e:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1ad30:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1ad34:	4602      	mov	r2, r0
   1ad36:	480a      	ldr	r0, [pc, #40]	; (1ad60 <ll_phy_get+0x38>)
   1ad38:	f7fa fa86 	bl	15248 <mem_get>
   1ad3c:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   1ad3e:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   1ad40:	b950      	cbnz	r0, 1ad58 <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   1ad42:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   1ad46:	f3c2 0202 	ubfx	r2, r2, #0, #3
   1ad4a:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   1ad4c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   1ad50:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1ad54:	7023      	strb	r3, [r4, #0]
}
   1ad56:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ad58:	2002      	movs	r0, #2
}
   1ad5a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ad5c:	2002      	movs	r0, #2
}
   1ad5e:	4770      	bx	lr
   1ad60:	200011c8 	.word	0x200011c8

0001ad64 <ll_phy_default_set>:
	default_phy_tx = tx;
   1ad64:	4a02      	ldr	r2, [pc, #8]	; (1ad70 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   1ad66:	4b03      	ldr	r3, [pc, #12]	; (1ad74 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   1ad68:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   1ad6a:	7019      	strb	r1, [r3, #0]
}
   1ad6c:	2000      	movs	r0, #0
   1ad6e:	4770      	bx	lr
   1ad70:	20002d7e 	.word	0x20002d7e
   1ad74:	20002d7d 	.word	0x20002d7d

0001ad78 <ll_phy_req_send>:
{
   1ad78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   1ad7a:	2800      	cmp	r0, #0
   1ad7c:	d143      	bne.n	1ae06 <ll_phy_req_send+0x8e>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1ad7e:	460c      	mov	r4, r1
   1ad80:	4616      	mov	r6, r2
   1ad82:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1ad86:	4602      	mov	r2, r0
   1ad88:	4823      	ldr	r0, [pc, #140]	; (1ae18 <ll_phy_req_send+0xa0>)
   1ad8a:	461f      	mov	r7, r3
   1ad8c:	f7fa fa5c 	bl	15248 <mem_get>
	if (conn->lll.handle != handle) {
   1ad90:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   1ad92:	bbc3      	cbnz	r3, 1ae06 <ll_phy_req_send+0x8e>
	if (conn->llcp_phy.disabled ||
   1ad94:	f890 51bf 	ldrb.w	r5, [r0, #447]	; 0x1bf
   1ad98:	f015 0508 	ands.w	r5, r5, #8
   1ad9c:	d130      	bne.n	1ae00 <ll_phy_req_send+0x88>
	    (conn->common.fex_valid &&
   1ad9e:	f890 30d8 	ldrb.w	r3, [r0, #216]	; 0xd8
	if (conn->llcp_phy.disabled ||
   1ada2:	07db      	lsls	r3, r3, #31
   1ada4:	d504      	bpl.n	1adb0 <ll_phy_req_send+0x38>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_PHY_2M)) &&
   1ada6:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   1adaa:	f413 6f10 	tst.w	r3, #2304	; 0x900
   1adae:	d027      	beq.n	1ae00 <ll_phy_req_send+0x88>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
   1adb0:	f890 31bc 	ldrb.w	r3, [r0, #444]	; 0x1bc
   1adb4:	f890 11bd 	ldrb.w	r1, [r0, #445]	; 0x1bd
   1adb8:	4299      	cmp	r1, r3
   1adba:	d11e      	bne.n	1adfa <ll_phy_req_send+0x82>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   1adbc:	f004 0407 	and.w	r4, r4, #7
   1adc0:	f8b0 21be 	ldrh.w	r2, [r0, #446]	; 0x1be
   1adc4:	00a4      	lsls	r4, r4, #2
   1adc6:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   1adca:	f007 0307 	and.w	r3, r7, #7
   1adce:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
   1add2:	f006 0601 	and.w	r6, r6, #1
   1add6:	f422 62df 	bic.w	r2, r2, #1784	; 0x6f8
   1adda:	f022 0207 	bic.w	r2, r2, #7
   1adde:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
   1ade2:	4313      	orrs	r3, r2
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1ade4:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   1ade8:	f8a0 31be 	strh.w	r3, [r0, #446]	; 0x1be
	conn->llcp_phy.req++;
   1adec:	3101      	adds	r1, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1adee:	2a00      	cmp	r2, #0
	conn->llcp_phy.req++;
   1adf0:	f880 11bc 	strb.w	r1, [r0, #444]	; 0x1bc
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1adf4:	db0a      	blt.n	1ae0c <ll_phy_req_send+0x94>
}
   1adf6:	4628      	mov	r0, r5
   1adf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1adfa:	250c      	movs	r5, #12
}
   1adfc:	4628      	mov	r0, r5
   1adfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1ae00:	251a      	movs	r5, #26
}
   1ae02:	4628      	mov	r0, r5
   1ae04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ae06:	2502      	movs	r5, #2
}
   1ae08:	4628      	mov	r0, r5
   1ae0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ull_periph_latency_cancel(conn, handle);
   1ae0c:	2100      	movs	r1, #0
   1ae0e:	f003 fcdd 	bl	1e7cc <ull_periph_latency_cancel>
}
   1ae12:	4628      	mov	r0, r5
   1ae14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ae16:	bf00      	nop
   1ae18:	200011c8 	.word	0x200011c8

0001ae1c <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1ae1c:	b9d8      	cbnz	r0, 1ae56 <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1ae1e:	4602      	mov	r2, r0
{
   1ae20:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1ae22:	480e      	ldr	r0, [pc, #56]	; (1ae5c <ll_apto_get+0x40>)
   1ae24:	460c      	mov	r4, r1
   1ae26:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1ae2a:	f7fa fa0d 	bl	15248 <mem_get>
   1ae2e:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   1ae30:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   1ae32:	b970      	cbnz	r0, 1ae52 <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   1ae34:	f8b2 30ce 	ldrh.w	r3, [r2, #206]	; 0xce
   1ae38:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
   1ae3a:	fb02 f303 	mul.w	r3, r2, r3
   1ae3e:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   1ae42:	4a07      	ldr	r2, [pc, #28]	; (1ae60 <ll_apto_get+0x44>)
   1ae44:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1ae48:	fba2 2303 	umull	r2, r3, r2, r3
   1ae4c:	099b      	lsrs	r3, r3, #6
   1ae4e:	8023      	strh	r3, [r4, #0]
}
   1ae50:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ae52:	2002      	movs	r0, #2
}
   1ae54:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ae56:	2002      	movs	r0, #2
}
   1ae58:	4770      	bx	lr
   1ae5a:	bf00      	nop
   1ae5c:	200011c8 	.word	0x200011c8
   1ae60:	10624dd3 	.word	0x10624dd3

0001ae64 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1ae64:	b9e0      	cbnz	r0, 1aea0 <ll_apto_set+0x3c>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1ae66:	4602      	mov	r2, r0
{
   1ae68:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1ae6a:	480e      	ldr	r0, [pc, #56]	; (1aea4 <ll_apto_set+0x40>)
   1ae6c:	460c      	mov	r4, r1
   1ae6e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1ae72:	f7fa f9e9 	bl	15248 <mem_get>
   1ae76:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   1ae78:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   1ae7a:	b978      	cbnz	r0, 1ae9c <ll_apto_set+0x38>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   1ae7c:	f8b2 c02a 	ldrh.w	ip, [r2, #42]	; 0x2a
   1ae80:	f240 43e2 	movw	r3, #1250	; 0x4e2
   1ae84:	fb03 fc0c 	mul.w	ip, r3, ip
   1ae88:	f242 7310 	movw	r3, #10000	; 0x2710
   1ae8c:	fb03 c304 	mla	r3, r3, r4, ip
   1ae90:	3b01      	subs	r3, #1
   1ae92:	fbb3 f3fc 	udiv	r3, r3, ip
   1ae96:	f8a2 30ce 	strh.w	r3, [r2, #206]	; 0xce
}
   1ae9a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ae9c:	2002      	movs	r0, #2
}
   1ae9e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1aea0:	2002      	movs	r0, #2
}
   1aea2:	4770      	bx	lr
   1aea4:	200011c8 	.word	0x200011c8

0001aea8 <ull_conn_init>:
	err = init_reset();
   1aea8:	f7fe beea 	b.w	19c80 <init_reset>

0001aeac <ull_conn_reset>:
{
   1aeac:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1aeae:	2200      	movs	r2, #0
   1aeb0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1aeb4:	4815      	ldr	r0, [pc, #84]	; (1af0c <ull_conn_reset+0x60>)
   1aeb6:	f7fa f9c7 	bl	15248 <mem_get>
   1aeba:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   1aebc:	f100 021c 	add.w	r2, r0, #28
   1aec0:	4601      	mov	r1, r0
   1aec2:	2003      	movs	r0, #3
   1aec4:	f7fd fe06 	bl	18ad4 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   1aec8:	b108      	cbz	r0, 1aece <ull_conn_reset+0x22>
   1aeca:	3078      	adds	r0, #120	; 0x78
   1aecc:	d10f      	bne.n	1aeee <ull_conn_reset+0x42>
	MFIFO_INIT(conn_tx);
   1aece:	4810      	ldr	r0, [pc, #64]	; (1af10 <ull_conn_reset+0x64>)
	MFIFO_INIT(conn_ack);
   1aed0:	4910      	ldr	r1, [pc, #64]	; (1af14 <ull_conn_reset+0x68>)
	conn_upd_curr = NULL;
   1aed2:	4a11      	ldr	r2, [pc, #68]	; (1af18 <ull_conn_reset+0x6c>)
	conn->lll.link_tx_free = NULL;
   1aed4:	2300      	movs	r3, #0
	conn->lll.handle = LLL_HANDLE_INVALID;
   1aed6:	f64f 7cff 	movw	ip, #65535	; 0xffff
	MFIFO_INIT(conn_tx);
   1aeda:	8083      	strh	r3, [r0, #4]
	MFIFO_INIT(conn_ack);
   1aedc:	808b      	strh	r3, [r1, #4]
	conn->lll.handle = LLL_HANDLE_INVALID;
   1aede:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
	conn->lll.link_tx_free = NULL;
   1aee2:	6763      	str	r3, [r4, #116]	; 0x74
}
   1aee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
   1aee8:	6013      	str	r3, [r2, #0]
	err = init_reset();
   1aeea:	f7fe bec9 	b.w	19c80 <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
   1aeee:	4a0b      	ldr	r2, [pc, #44]	; (1af1c <ull_conn_reset+0x70>)
   1aef0:	490b      	ldr	r1, [pc, #44]	; (1af20 <ull_conn_reset+0x74>)
   1aef2:	480c      	ldr	r0, [pc, #48]	; (1af24 <ull_conn_reset+0x78>)
   1aef4:	f640 1303 	movw	r3, #2307	; 0x903
   1aef8:	f00c fb1c 	bl	27534 <assert_print>
   1aefc:	4040      	eors	r0, r0
   1aefe:	f380 8811 	msr	BASEPRI, r0
   1af02:	f04f 0003 	mov.w	r0, #3
   1af06:	df02      	svc	2
   1af08:	e7e1      	b.n	1aece <ull_conn_reset+0x22>
   1af0a:	bf00      	nop
   1af0c:	200011c8 	.word	0x200011c8
   1af10:	200005a0 	.word	0x200005a0
   1af14:	20000558 	.word	0x20000558
   1af18:	20002070 	.word	0x20002070
   1af1c:	0002fd50 	.word	0x0002fd50
   1af20:	0002fe60 	.word	0x0002fe60
   1af24:	0002f8a0 	.word	0x0002f8a0

0001af28 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   1af28:	4b01      	ldr	r3, [pc, #4]	; (1af30 <ull_conn_default_tx_octets_get+0x8>)
}
   1af2a:	8818      	ldrh	r0, [r3, #0]
   1af2c:	4770      	bx	lr
   1af2e:	bf00      	nop
   1af30:	20002cd2 	.word	0x20002cd2

0001af34 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   1af34:	4b01      	ldr	r3, [pc, #4]	; (1af3c <ull_conn_default_tx_time_get+0x8>)
}
   1af36:	8818      	ldrh	r0, [r3, #0]
   1af38:	4770      	bx	lr
   1af3a:	bf00      	nop
   1af3c:	20002cd4 	.word	0x20002cd4

0001af40 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   1af40:	4b01      	ldr	r3, [pc, #4]	; (1af48 <ull_conn_default_phy_tx_get+0x8>)
}
   1af42:	7818      	ldrb	r0, [r3, #0]
   1af44:	4770      	bx	lr
   1af46:	bf00      	nop
   1af48:	20002d7e 	.word	0x20002d7e

0001af4c <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   1af4c:	4b01      	ldr	r3, [pc, #4]	; (1af54 <ull_conn_default_phy_rx_get+0x8>)
}
   1af4e:	7818      	ldrb	r0, [r3, #0]
   1af50:	4770      	bx	lr
   1af52:	bf00      	nop
   1af54:	20002d7d 	.word	0x20002d7d

0001af58 <ull_conn_setup>:
{
   1af58:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
   1af5a:	688b      	ldr	r3, [r1, #8]
	rx->link = rx_link;
   1af5c:	6008      	str	r0, [r1, #0]
	hdr = HDR_LLL2ULL(ftr->param);
   1af5e:	681d      	ldr	r5, [r3, #0]
   1af60:	782b      	ldrb	r3, [r5, #0]
{
   1af62:	460c      	mov	r4, r1
	if (ull_ref_get(hdr)) {
   1af64:	b193      	cbz	r3, 1af8c <ull_conn_setup+0x34>
		LL_ASSERT(!hdr->disabled_cb);
   1af66:	696b      	ldr	r3, [r5, #20]
   1af68:	b163      	cbz	r3, 1af84 <ull_conn_setup+0x2c>
   1af6a:	4a0b      	ldr	r2, [pc, #44]	; (1af98 <ull_conn_setup+0x40>)
   1af6c:	490b      	ldr	r1, [pc, #44]	; (1af9c <ull_conn_setup+0x44>)
   1af6e:	480c      	ldr	r0, [pc, #48]	; (1afa0 <ull_conn_setup+0x48>)
   1af70:	f44f 737b 	mov.w	r3, #1004	; 0x3ec
   1af74:	f00c fade 	bl	27534 <assert_print>
   1af78:	4040      	eors	r0, r0
   1af7a:	f380 8811 	msr	BASEPRI, r0
   1af7e:	f04f 0003 	mov.w	r0, #3
   1af82:	df02      	svc	2
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
   1af84:	4b07      	ldr	r3, [pc, #28]	; (1afa4 <ull_conn_setup+0x4c>)
   1af86:	e9c5 3405 	strd	r3, r4, [r5, #20]
}
   1af8a:	bd38      	pop	{r3, r4, r5, pc}
   1af8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		conn_setup_adv_scan_disabled_cb(rx);
   1af90:	4608      	mov	r0, r1
   1af92:	f7ff b86f 	b.w	1a074 <conn_setup_adv_scan_disabled_cb>
   1af96:	bf00      	nop
   1af98:	0002fd50 	.word	0x0002fd50
   1af9c:	0002fc58 	.word	0x0002fc58
   1afa0:	0002f8a0 	.word	0x0002f8a0
   1afa4:	0001a075 	.word	0x0001a075

0001afa8 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   1afa8:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   1afaa:	88da      	ldrh	r2, [r3, #6]
   1afac:	2a00      	cmp	r2, #0
   1afae:	f040 80cd 	bne.w	1b14c <ull_conn_rx+0x1a4>
{
   1afb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1afb6:	460e      	mov	r6, r1
   1afb8:	b085      	sub	sp, #20
   1afba:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1afbc:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1afc0:	48bb      	ldr	r0, [pc, #748]	; (1b2b0 <ull_conn_rx+0x308>)
   1afc2:	f7fa f941 	bl	15248 <mem_get>
	if (conn->lll.handle != handle) {
   1afc6:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1afc8:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   1afca:	2b00      	cmp	r3, #0
   1afcc:	f040 80b7 	bne.w	1b13e <ull_conn_rx+0x196>
	pdu_rx = (void *)(*rx)->pdu;
   1afd0:	6835      	ldr	r5, [r6, #0]

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   1afd2:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
	switch (pdu_rx->ll_id) {
   1afd6:	7f29      	ldrb	r1, [r5, #28]
   1afd8:	f001 0103 	and.w	r1, r1, #3
   1afdc:	2903      	cmp	r1, #3
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   1afde:	f002 0001 	and.w	r0, r2, #1
	switch (pdu_rx->ll_id) {
   1afe2:	d128      	bne.n	1b036 <ull_conn_rx+0x8e>
	opcode = pdu_rx->llctrl.opcode;
   1afe4:	f895 801f 	ldrb.w	r8, [r5, #31]
	pdu_rx = (void *)(*rx)->pdu;
   1afe8:	f105 0c1c 	add.w	ip, r5, #28
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   1afec:	b3c8      	cbz	r0, 1b062 <ull_conn_rx+0xba>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   1afee:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1aff2:	2b00      	cmp	r3, #0
		((!conn->llcp_enc.refresh &&
   1aff4:	f002 0104 	and.w	r1, r2, #4
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   1aff8:	f2c0 80ac 	blt.w	1b154 <ull_conn_rx+0x1ac>
	return (!conn->lll.role &&
   1affc:	2900      	cmp	r1, #0
   1affe:	f040 80fd 	bne.w	1b1fc <ull_conn_rx+0x254>
		((!conn->llcp_enc.refresh &&
   1b002:	f1b8 0f02 	cmp.w	r8, #2
   1b006:	f000 810d 	beq.w	1b224 <ull_conn_rx+0x27c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1b00a:	f1b8 0f05 	cmp.w	r8, #5
   1b00e:	d04a      	beq.n	1b0a6 <ull_conn_rx+0xfe>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1b010:	f1b8 0f06 	cmp.w	r8, #6
   1b014:	f000 836a 	beq.w	1b6ec <ull_conn_rx+0x744>
   1b018:	f1b8 0f0d 	cmp.w	r8, #13
   1b01c:	f000 81da 	beq.w	1b3d4 <ull_conn_rx+0x42c>
   1b020:	f1b8 0f11 	cmp.w	r8, #17
   1b024:	f000 826c 	beq.w	1b500 <ull_conn_rx+0x558>
		conn->llcp_terminate.reason_final =
   1b028:	223d      	movs	r2, #61	; 0x3d
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1b02a:	2301      	movs	r3, #1
		conn->llcp_terminate.reason_final =
   1b02c:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143

		return 0;
   1b030:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1b032:	712b      	strb	r3, [r5, #4]
		return 0;
   1b034:	e007      	b.n	1b046 <ull_conn_rx+0x9e>
	switch (pdu_rx->ll_id) {
   1b036:	b949      	cbnz	r1, 1b04c <ull_conn_rx+0xa4>
		if (conn->llcp_enc.pause_rx) {
   1b038:	b110      	cbz	r0, 1b040 <ull_conn_rx+0x98>
			conn->llcp_terminate.reason_final =
   1b03a:	233d      	movs	r3, #61	; 0x3d
   1b03c:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1b040:	2301      	movs	r3, #1
   1b042:	712b      	strb	r3, [r5, #4]
	return 0;
   1b044:	2000      	movs	r0, #0
}
   1b046:	b005      	add	sp, #20
   1b048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   1b04c:	2800      	cmp	r0, #0
   1b04e:	d0f9      	beq.n	1b044 <ull_conn_rx+0x9c>
			conn->llcp_terminate.reason_final =
   1b050:	213d      	movs	r1, #61	; 0x3d
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1b052:	2201      	movs	r2, #1
	return 0;
   1b054:	4618      	mov	r0, r3
			conn->llcp_terminate.reason_final =
   1b056:	f884 1143 	strb.w	r1, [r4, #323]	; 0x143
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1b05a:	712a      	strb	r2, [r5, #4]
}
   1b05c:	b005      	add	sp, #20
   1b05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   1b062:	f1b8 0f18 	cmp.w	r8, #24
   1b066:	d81e      	bhi.n	1b0a6 <ull_conn_rx+0xfe>
   1b068:	e8df f018 	tbh	[pc, r8, lsl #1]
   1b06c:	02800126 	.word	0x02800126
   1b070:	001900dc 	.word	0x001900dc
   1b074:	001d001d 	.word	0x001d001d
   1b078:	03e80340 	.word	0x03e80340
   1b07c:	0303036b 	.word	0x0303036b
   1b080:	047a02ba 	.word	0x047a02ba
   1b084:	01b401f7 	.word	0x01b401f7
   1b088:	019f001d 	.word	0x019f001d
   1b08c:	024a001d 	.word	0x024a001d
   1b090:	01950226 	.word	0x01950226
   1b094:	00e800e8 	.word	0x00e800e8
   1b098:	001d044b 	.word	0x001d044b
   1b09c:	040e      	.short	0x040e
		break;

#if defined(CONFIG_BT_CTLR_LE_ENC)
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		if (!conn->lll.role ||
   1b09e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1b0a2:	2b00      	cmp	r3, #0
   1b0a4:	db63      	blt.n	1b16e <ull_conn_rx+0x1c6>
	if (conn->common.txn_lock) {
   1b0a6:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1b0aa:	0798      	lsls	r0, r3, #30
   1b0ac:	d4c8      	bmi.n	1b040 <ull_conn_rx+0x98>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1b0ae:	4881      	ldr	r0, [pc, #516]	; (1b2b4 <ull_conn_rx+0x30c>)
   1b0b0:	f7fa f898 	bl	151e4 <mem_acquire>
	if (!tx) {
   1b0b4:	2800      	cmp	r0, #0
   1b0b6:	f000 851f 	beq.w	1baf8 <ull_conn_rx+0xb50>
	conn->common.txn_lock = 1U;
   1b0ba:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1b0be:	f043 0302 	orr.w	r3, r3, #2
   1b0c2:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1b0c6:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   1b0c8:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1b0cc:	f043 0303 	orr.w	r3, r3, #3
   1b0d0:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   1b0d2:	2302      	movs	r3, #2
   1b0d4:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   1b0d6:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   1b0da:	2307      	movs	r3, #7
   1b0dc:	71c3      	strb	r3, [r0, #7]
	if (
   1b0de:	b1f2      	cbz	r2, 1b11e <ull_conn_rx+0x176>
	    !conn->llcp_enc.pause_tx &&
   1b0e0:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   1b0e4:	0799      	lsls	r1, r3, #30
   1b0e6:	d41a      	bmi.n	1b11e <ull_conn_rx+0x176>
	    !conn->llcp_phy.pause_tx &&
   1b0e8:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   1b0ec:	07db      	lsls	r3, r3, #31
   1b0ee:	d416      	bmi.n	1b11e <ull_conn_rx+0x176>
		if (conn->tx_head == conn->tx_data) {
   1b0f0:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   1b0f4:	429a      	cmp	r2, r3
   1b0f6:	f000 8508 	beq.w	1bb0a <ull_conn_rx+0xb62>
		} else if (!conn->tx_ctrl) {
   1b0fa:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   1b0fe:	2b00      	cmp	r3, #0
   1b100:	f000 8556 	beq.w	1bbb0 <ull_conn_rx+0xc08>
	tx->next = conn->tx_ctrl_last->next;
   1b104:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   1b108:	6813      	ldr	r3, [r2, #0]
   1b10a:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1b10c:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   1b10e:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   1b110:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1b114:	2a00      	cmp	r2, #0
   1b116:	d193      	bne.n	1b040 <ull_conn_rx+0x98>
		conn->tx_data_last = tx;
   1b118:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1b11c:	e790      	b.n	1b040 <ull_conn_rx+0x98>
		if (!conn->tx_ctrl) {
   1b11e:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   1b122:	2b00      	cmp	r3, #0
   1b124:	f000 84de 	beq.w	1bae4 <ull_conn_rx+0xb3c>
	tx->next = conn->tx_ctrl_last->next;
   1b128:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1b12c:	681a      	ldr	r2, [r3, #0]
   1b12e:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1b130:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1b132:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   1b134:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1b138:	2a00      	cmp	r2, #0
   1b13a:	d181      	bne.n	1b040 <ull_conn_rx+0x98>
   1b13c:	e7ec      	b.n	1b118 <ull_conn_rx+0x170>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1b13e:	6833      	ldr	r3, [r6, #0]
   1b140:	2201      	movs	r2, #1
		return 0;
   1b142:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1b144:	711a      	strb	r2, [r3, #4]
}
   1b146:	b005      	add	sp, #20
   1b148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1b14c:	2201      	movs	r2, #1
   1b14e:	711a      	strb	r2, [r3, #4]
		return 0;
   1b150:	2000      	movs	r0, #0
}
   1b152:	4770      	bx	lr
	       (conn->lll.role &&
   1b154:	2900      	cmp	r1, #0
   1b156:	d05d      	beq.n	1b214 <ull_conn_rx+0x26c>
		 (conn->llcp_enc.refresh &&
   1b158:	f1b8 0f02 	cmp.w	r8, #2
   1b15c:	d062      	beq.n	1b224 <ull_conn_rx+0x27c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   1b15e:	f1b8 0f0b 	cmp.w	r8, #11
   1b162:	f000 84e5 	beq.w	1bb30 <ull_conn_rx+0xb88>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   1b166:	f1b8 0f03 	cmp.w	r8, #3
   1b16a:	f47f af51 	bne.w	1b010 <ull_conn_rx+0x68>
		if (!conn->lll.role ||
   1b16e:	7f6b      	ldrb	r3, [r5, #29]
   1b170:	2b17      	cmp	r3, #23
   1b172:	d198      	bne.n	1b0a6 <ull_conn_rx+0xfe>

#if defined(CONFIG_BT_CTLR_PHY)
		/* LL_ENC_REQ was received while local peripheral initiated
		 * procedure is in progress.
		 */
		if (unlikely(((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   1b174:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   1b178:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1b17c:	1a9b      	subs	r3, r3, r2
   1b17e:	f003 0303 	and.w	r3, r3, #3
   1b182:	2b02      	cmp	r3, #2
   1b184:	f001 8190 	beq.w	1c4a8 <ull_conn_rx+0x1500>

		/* Start Enc Req to be scheduled by LL api */
		conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
#else /* CONFIG_BT_CTLR_FAST_ENC */
		/* back up rand and ediv for deferred generation of Enc Req */
		memcpy(&conn->llcp_enc.rand[0],
   1b188:	2208      	movs	r2, #8
   1b18a:	f105 0120 	add.w	r1, r5, #32
   1b18e:	f204 1069 	addw	r0, r4, #361	; 0x169
   1b192:	f00e f8d8 	bl	29346 <memcpy>
		       &pdu_rx->llctrl.enc_req.rand[0],
		       sizeof(conn->llcp_enc.rand));
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   1b196:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   1b19a:	f884 3167 	strb.w	r3, [r4, #359]	; 0x167
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   1b19e:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29

		/* Enc rsp to be scheduled in central prepare */
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1b1a2:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   1b1a6:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1b1aa:	6831      	ldr	r1, [r6, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1b1ac:	2301      	movs	r3, #1
   1b1ae:	f363 0201 	bfi	r2, r3, #0, #2
   1b1b2:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1b1b6:	710b      	strb	r3, [r1, #4]
#endif /* CONFIG_BT_CTLR_FAST_ENC */

		/* Enc Setup state machine active */
		conn->llcp_type = LLCP_ENCRYPTION;
		conn->llcp_ack -= 2U;
   1b1b8:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
		conn->llcp_type = LLCP_ENCRYPTION;
   1b1bc:	2103      	movs	r1, #3
		conn->llcp_ack -= 2U;
   1b1be:	3b02      	subs	r3, #2
   1b1c0:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5

		/* things from central stored for session key calculation */
		memcpy(&conn->llcp.encryption.skd[0],
   1b1c4:	2208      	movs	r2, #8
		conn->llcp_type = LLCP_ENCRYPTION;
   1b1c6:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
		memcpy(&conn->llcp.encryption.skd[0],
   1b1ca:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
   1b1ce:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   1b1d2:	f00e f8b8 	bl	29346 <memcpy>
		       &pdu_rx->llctrl.enc_req.skdm[0], 8);
		memcpy(&conn->lll.ccm_rx.iv[0],
   1b1d6:	2204      	movs	r2, #4
   1b1d8:	f105 0132 	add.w	r1, r5, #50	; 0x32
   1b1dc:	f104 0094 	add.w	r0, r4, #148	; 0x94
   1b1e0:	f00e f8b1 	bl	29346 <memcpy>
		       &pdu_rx->llctrl.enc_req.ivm[0], 4);

		/* pause rx data packets */
		conn->llcp_enc.pause_rx = 1U;
   1b1e4:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166

		/* Start Procedure Timeout (TODO: this shall not replace
		 * terminate procedure).
		 */
		conn->procedure_expire = conn->procedure_reload;
   1b1e8:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
   1b1ec:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->llcp_enc.pause_rx = 1U;
   1b1f0:	f043 0301 	orr.w	r3, r3, #1
   1b1f4:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	int nack = 0;
   1b1f8:	2000      	movs	r0, #0

		break;
   1b1fa:	e724      	b.n	1b046 <ull_conn_rx+0x9e>
		 (conn->llcp_enc.refresh &&
   1b1fc:	f1b8 0f02 	cmp.w	r8, #2
   1b200:	d010      	beq.n	1b224 <ull_conn_rx+0x27c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   1b202:	f1b8 0f0b 	cmp.w	r8, #11
   1b206:	f000 847b 	beq.w	1bb00 <ull_conn_rx+0xb58>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   1b20a:	f1b8 0f04 	cmp.w	r8, #4
   1b20e:	f47f aefc 	bne.w	1b00a <ull_conn_rx+0x62>
   1b212:	e748      	b.n	1b0a6 <ull_conn_rx+0xfe>
		((!conn->llcp_enc.refresh &&
   1b214:	f1b8 0f07 	cmp.w	r8, #7
   1b218:	f000 8310 	beq.w	1b83c <ull_conn_rx+0x894>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   1b21c:	f1b8 0f02 	cmp.w	r8, #2
   1b220:	f47f aef6 	bne.w	1b010 <ull_conn_rx+0x68>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
   1b224:	7f6b      	ldrb	r3, [r5, #29]
   1b226:	2b02      	cmp	r3, #2
   1b228:	f47f af3d 	bne.w	1b0a6 <ull_conn_rx+0xfe>
	conn->llcp_terminate.reason_final =
   1b22c:	f895 2020 	ldrb.w	r2, [r5, #32]
   1b230:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1b234:	2301      	movs	r3, #1
	int nack = 0;
   1b236:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1b238:	712b      	strb	r3, [r5, #4]
}
   1b23a:	e704      	b.n	1b046 <ull_conn_rx+0x9e>
		break;

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_RSP:
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if (PDU_DATA_LLCTRL_LEN(length_req) != pdu_rx->len) {
   1b23c:	7f6b      	ldrb	r3, [r5, #29]
   1b23e:	2b09      	cmp	r3, #9
   1b240:	f47f af31 	bne.w	1b0a6 <ull_conn_rx+0xfe>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   1b244:	f1b8 0f14 	cmp.w	r8, #20
   1b248:	f000 84bc 	beq.w	1bbc4 <ull_conn_rx+0xc1c>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   1b24c:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
   1b250:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
   1b254:	4293      	cmp	r3, r2
   1b256:	f001 804e 	beq.w	1c2f6 <ull_conn_rx+0x134e>
	eff_rx_octets = conn->lll.max_rx_octets;
   1b25a:	f8b4 b05a 	ldrh.w	fp, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   1b25e:	f8b4 a058 	ldrh.w	sl, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   1b262:	f8b4 905e 	ldrh.w	r9, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   1b266:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   1b26a:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
	struct node_tx *tx = NULL;
   1b26e:	2300      	movs	r3, #0
	       tx) ||
   1b270:	f001 0107 	and.w	r1, r1, #7
   1b274:	2902      	cmp	r1, #2
   1b276:	f000 84c5 	beq.w	1bc04 <ull_conn_rx+0xc5c>
   1b27a:	f895 801f 	ldrb.w	r8, [r5, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   1b27e:	f1b8 0f15 	cmp.w	r8, #21
   1b282:	f43f aedf 	beq.w	1b044 <ull_conn_rx+0x9c>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1b286:	4618      	mov	r0, r3
   1b288:	490a      	ldr	r1, [pc, #40]	; (1b2b4 <ull_conn_rx+0x30c>)
   1b28a:	f7f9 ffc5 	bl	15218 <mem_release>
			if (conn->llcp_length.state ==
   1b28e:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->common.txn_lock = 0U;
   1b292:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
   1b296:	f003 0307 	and.w	r3, r3, #7
			conn->common.txn_lock = 0U;
   1b29a:	f36f 0241 	bfc	r2, #1, #1
			if (conn->llcp_length.state ==
   1b29e:	2b04      	cmp	r3, #4
			conn->common.txn_lock = 0U;
   1b2a0:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
   1b2a4:	f47f aece 	bne.w	1b044 <ull_conn_rx+0x9c>
				return -EBUSY;
   1b2a8:	f06f 000f 	mvn.w	r0, #15
   1b2ac:	e6cb      	b.n	1b046 <ull_conn_rx+0x9e>
   1b2ae:	bf00      	nop
   1b2b0:	200011c8 	.word	0x200011c8
   1b2b4:	20002104 	.word	0x20002104
		if (!conn->lll.role ||
   1b2b8:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1b2bc:	2b00      	cmp	r3, #0
   1b2be:	f6bf aef2 	bge.w	1b0a6 <ull_conn_rx+0xfe>
   1b2c2:	7f6b      	ldrb	r3, [r5, #29]
   1b2c4:	2b0c      	cmp	r3, #12
   1b2c6:	f47f aeee 	bne.w	1b0a6 <ull_conn_rx+0xfe>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   1b2ca:	f8b5 2029 	ldrh.w	r2, [r5, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   1b2ce:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1b2d0:	1ad3      	subs	r3, r2, r3
   1b2d2:	041b      	lsls	r3, r3, #16
   1b2d4:	f100 8748 	bmi.w	1c168 <ull_conn_rx+0x11c0>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1b2d8:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1b2dc:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   1b2e0:	1a5b      	subs	r3, r3, r1
   1b2e2:	f003 0303 	and.w	r3, r3, #3
   1b2e6:	2b02      	cmp	r3, #2
   1b2e8:	f000 87c8 	beq.w	1c27c <ull_conn_rx+0x12d4>
	if (!conn_upd_curr) {
   1b2ec:	4bba      	ldr	r3, [pc, #744]	; (1b5d8 <ull_conn_rx+0x630>)
   1b2ee:	6819      	ldr	r1, [r3, #0]
   1b2f0:	2900      	cmp	r1, #0
   1b2f2:	f000 87ed 	beq.w	1c2d0 <ull_conn_rx+0x1328>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   1b2f6:	f895 3020 	ldrb.w	r3, [r5, #32]
   1b2fa:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   1b2fe:	f8b5 3021 	ldrh.w	r3, [r5, #33]	; 0x21
   1b302:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1b306:	fb01 f303 	mul.w	r3, r1, r3
	conn->llcp_cu.win_offset_us =
   1b30a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   1b30e:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
   1b312:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   1b316:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.interval =
   1b31a:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   1b31e:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
   1b322:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   1b326:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.latency =
   1b32a:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   1b32e:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   1b332:	f895 1027 	ldrb.w	r1, [r5, #39]	; 0x27
   1b336:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   1b33a:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   1b33e:	f023 030f 	bic.w	r3, r3, #15
   1b342:	f043 0308 	orr.w	r3, r3, #8
   1b346:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
	conn->llcp_cu.ack--;
   1b34a:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   1b34e:	ea41 2200 	orr.w	r2, r1, r0, lsl #8
	conn->llcp_cu.timeout =
   1b352:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
	conn->llcp_cu.ack--;
   1b356:	3b01      	subs	r3, #1
	link->mem = conn->llcp_rx;
   1b358:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
	conn->llcp_cu.ack--;
   1b35c:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
	link->mem = conn->llcp_rx;
   1b360:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
   1b362:	6832      	ldr	r2, [r6, #0]
   1b364:	6017      	str	r7, [r2, #0]
	conn->llcp_rx = *rx;
   1b366:	6832      	ldr	r2, [r6, #0]
   1b368:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	*rx = NULL;
   1b36c:	2300      	movs	r3, #0
   1b36e:	6033      	str	r3, [r6, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   1b370:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   1b374:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   1b378:	4293      	cmp	r3, r2
   1b37a:	d007      	beq.n	1b38c <ull_conn_rx+0x3e4>
	    ((conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) ||
   1b37c:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   1b380:	f003 030e 	and.w	r3, r3, #14
   1b384:	2b04      	cmp	r3, #4
   1b386:	d101      	bne.n	1b38c <ull_conn_rx+0x3e4>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1b388:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
		conn->procedure_expire = 0U;
   1b38c:	2300      	movs	r3, #0
   1b38e:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   1b392:	4618      	mov	r0, r3
		break;
   1b394:	e657      	b.n	1b046 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(ping_rsp) != pdu_rx->len) {
   1b396:	7f6a      	ldrb	r2, [r5, #29]
   1b398:	2a01      	cmp	r2, #1
   1b39a:	f47f ae84 	bne.w	1b0a6 <ull_conn_rx+0xfe>
		conn->procedure_expire = 0U;
   1b39e:	2300      	movs	r3, #0
   1b3a0:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   1b3a4:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1b3a6:	712a      	strb	r2, [r5, #4]
		break;
   1b3a8:	e64d      	b.n	1b046 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
   1b3aa:	7f6b      	ldrb	r3, [r5, #29]
   1b3ac:	2b18      	cmp	r3, #24
   1b3ae:	f47f ae7a 	bne.w	1b0a6 <ull_conn_rx+0xfe>
	return conn_upd_curr && (conn_upd_curr != conn);
   1b3b2:	4889      	ldr	r0, [pc, #548]	; (1b5d8 <ull_conn_rx+0x630>)
   1b3b4:	6803      	ldr	r3, [r0, #0]
   1b3b6:	2b00      	cmp	r3, #0
   1b3b8:	f000 83c6 	beq.w	1bb48 <ull_conn_rx+0xba0>
   1b3bc:	429c      	cmp	r4, r3
   1b3be:	f000 83c3 	beq.w	1bb48 <ull_conn_rx+0xba0>
			nack = reject_ext_ind_send(conn, *rx,
   1b3c2:	2320      	movs	r3, #32
   1b3c4:	220f      	movs	r2, #15
   1b3c6:	4629      	mov	r1, r5
   1b3c8:	4620      	mov	r0, r4
}
   1b3ca:	b005      	add	sp, #20
   1b3cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			nack = reject_ext_ind_send(conn, *rx,
   1b3d0:	f7fe bf24 	b.w	1a21c <reject_ext_ind_send>
		if (PDU_DATA_LLCTRL_LEN(reject_ind) != pdu_rx->len) {
   1b3d4:	7f6b      	ldrb	r3, [r5, #29]
   1b3d6:	2b02      	cmp	r3, #2
   1b3d8:	f47f ae65 	bne.w	1b0a6 <ull_conn_rx+0xfe>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   1b3dc:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   1b3e0:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   1b3e4:	4293      	cmp	r3, r2
   1b3e6:	d004      	beq.n	1b3f2 <ull_conn_rx+0x44a>
   1b3e8:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   1b3ec:	2b03      	cmp	r3, #3
   1b3ee:	f000 86a5 	beq.w	1c13c <ull_conn_rx+0x1194>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   1b3f2:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   1b3f6:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   1b3fa:	4293      	cmp	r3, r2
   1b3fc:	f000 84ef 	beq.w	1bdde <ull_conn_rx+0xe36>
		rej_ext_ind->error_code = rej_ind->error_code;
   1b400:	f895 1020 	ldrb.w	r1, [r5, #32]
   1b404:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1b408:	2923      	cmp	r1, #35	; 0x23
   1b40a:	d012      	beq.n	1b432 <ull_conn_rx+0x48a>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1b40c:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   1b410:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1b414:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   1b418:	f36f 0200 	bfc	r2, #0, #1
   1b41c:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
   1b420:	2200      	movs	r2, #0
   1b422:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1b426:	f3c3 0202 	ubfx	r2, r3, #0, #3
   1b42a:	f362 1306 	bfi	r3, r2, #4, #3
   1b42e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
   1b432:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   1b436:	075e      	lsls	r6, r3, #29
   1b438:	f57f ae02 	bpl.w	1b040 <ull_conn_rx+0x98>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1b43c:	231d      	movs	r3, #29
   1b43e:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   1b440:	7729      	strb	r1, [r5, #28]
	p->tx = conn->lll.phy_tx;
   1b442:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   1b446:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1b44a:	776b      	strb	r3, [r5, #29]
	p->rx = conn->lll.phy_rx;
   1b44c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   1b450:	f3c3 0302 	ubfx	r3, r3, #0, #3
	int nack = 0;
   1b454:	2000      	movs	r0, #0
	p->rx = conn->lll.phy_rx;
   1b456:	77ab      	strb	r3, [r5, #30]
	if (err) {
   1b458:	e5f5      	b.n	1b046 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
   1b45a:	7f6e      	ldrb	r6, [r5, #29]
   1b45c:	2e06      	cmp	r6, #6
   1b45e:	f47f ae22 	bne.w	1b0a6 <ull_conn_rx+0xfe>
	if (!conn->llcp_version.tx) {
   1b462:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   1b466:	07df      	lsls	r7, r3, #31
   1b468:	f140 85ae 	bpl.w	1bfc8 <ull_conn_rx+0x1020>
	} else if (!conn->llcp_version.rx) {
   1b46c:	f013 0302 	ands.w	r3, r3, #2
   1b470:	f47f ade6 	bne.w	1b040 <ull_conn_rx+0x98>
		conn->llcp_version.ack = conn->llcp_version.req;
   1b474:	f894 2138 	ldrb.w	r2, [r4, #312]	; 0x138
   1b478:	f884 2139 	strb.w	r2, [r4, #313]	; 0x139
		conn->procedure_expire = 0U;
   1b47c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_version.version_number = v->version_number;
   1b480:	f895 3020 	ldrb.w	r3, [r5, #32]
   1b484:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   1b488:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
   1b48c:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   1b490:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   1b494:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1b498:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
		sys_le16_to_cpu(v->sub_version_number);
   1b49c:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
   1b4a0:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   1b4a4:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   1b4a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   1b4ac:	f8a4 213e 	strh.w	r2, [r4, #318]	; 0x13e
	conn->llcp_version.rx = 1U;
   1b4b0:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	return 0;
   1b4b4:	2000      	movs	r0, #0
   1b4b6:	e5c6      	b.n	1b046 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
   1b4b8:	7f6f      	ldrb	r7, [r5, #29]
   1b4ba:	2f01      	cmp	r7, #1
   1b4bc:	f47f adf3 	bne.w	1b0a6 <ull_conn_rx+0xfe>
	if (conn->common.txn_lock) {
   1b4c0:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1b4c4:	f013 0602 	ands.w	r6, r3, #2
   1b4c8:	f040 85a9 	bne.w	1c01e <ull_conn_rx+0x1076>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1b4cc:	4843      	ldr	r0, [pc, #268]	; (1b5dc <ull_conn_rx+0x634>)
   1b4ce:	f7f9 fe89 	bl	151e4 <mem_acquire>
	if (!tx) {
   1b4d2:	4601      	mov	r1, r0
   1b4d4:	2800      	cmp	r0, #0
   1b4d6:	f000 830f 	beq.w	1baf8 <ull_conn_rx+0xb50>
	conn->common.txn_lock = 1U;
   1b4da:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1b4de:	f043 0302 	orr.w	r3, r3, #2
   1b4e2:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1b4e6:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   1b4e8:	714f      	strb	r7, [r1, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1b4ea:	f043 0303 	orr.w	r3, r3, #3
   1b4ee:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   1b4f0:	2313      	movs	r3, #19
	ctrl_tx_sec_enqueue(conn, tx);
   1b4f2:	4620      	mov	r0, r4
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   1b4f4:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   1b4f6:	f7fe fce9 	bl	19ecc <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1b4fa:	712f      	strb	r7, [r5, #4]
	return 0;
   1b4fc:	4630      	mov	r0, r6
   1b4fe:	e5a2      	b.n	1b046 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
   1b500:	7f6b      	ldrb	r3, [r5, #29]
   1b502:	2b03      	cmp	r3, #3
   1b504:	f47f adcf 	bne.w	1b0a6 <ull_conn_rx+0xfe>
	switch (rej_ext_ind->reject_opcode) {
   1b508:	f895 3020 	ldrb.w	r3, [r5, #32]
   1b50c:	3b03      	subs	r3, #3
   1b50e:	2b13      	cmp	r3, #19
   1b510:	f63f ad96 	bhi.w	1b040 <ull_conn_rx+0x98>
   1b514:	a201      	add	r2, pc, #4	; (adr r2, 1b51c <ull_conn_rx+0x574>)
   1b516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1b51a:	bf00      	nop
   1b51c:	0001ba57 	.word	0x0001ba57
   1b520:	0001b041 	.word	0x0001b041
   1b524:	0001b041 	.word	0x0001b041
   1b528:	0001b041 	.word	0x0001b041
   1b52c:	0001b041 	.word	0x0001b041
   1b530:	0001b041 	.word	0x0001b041
   1b534:	0001b041 	.word	0x0001b041
   1b538:	0001b041 	.word	0x0001b041
   1b53c:	0001b041 	.word	0x0001b041
   1b540:	0001b041 	.word	0x0001b041
   1b544:	0001b041 	.word	0x0001b041
   1b548:	0001b041 	.word	0x0001b041
   1b54c:	0001b9dd 	.word	0x0001b9dd
   1b550:	0001b041 	.word	0x0001b041
   1b554:	0001b041 	.word	0x0001b041
   1b558:	0001b041 	.word	0x0001b041
   1b55c:	0001b041 	.word	0x0001b041
   1b560:	0001b99f 	.word	0x0001b99f
   1b564:	0001b041 	.word	0x0001b041
   1b568:	0001ba97 	.word	0x0001ba97
		if (!conn->lll.role ||
   1b56c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1b570:	2b00      	cmp	r3, #0
   1b572:	f6bf ad98 	bge.w	1b0a6 <ull_conn_rx+0xfe>
   1b576:	7f6b      	ldrb	r3, [r5, #29]
   1b578:	2b08      	cmp	r3, #8
   1b57a:	f47f ad94 	bne.w	1b0a6 <ull_conn_rx+0xfe>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   1b57e:	f8b5 6025 	ldrh.w	r6, [r5, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   1b582:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1b584:	1af3      	subs	r3, r6, r3
   1b586:	041f      	lsls	r7, r3, #16
   1b588:	f100 85ee 	bmi.w	1c168 <ull_conn_rx+0x11c0>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1b58c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1b590:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   1b594:	1a9b      	subs	r3, r3, r2
   1b596:	f003 0303 	and.w	r3, r3, #3
   1b59a:	2b02      	cmp	r3, #2
   1b59c:	f000 866e 	beq.w	1c27c <ull_conn_rx+0x12d4>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   1b5a0:	2205      	movs	r2, #5
   1b5a2:	f105 0120 	add.w	r1, r5, #32
   1b5a6:	f104 00e9 	add.w	r0, r4, #233	; 0xe9
   1b5aa:	f00d fecc 	bl	29346 <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   1b5ae:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_ack -= 2U;
   1b5b2:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
	conn->llcp.chan_map.instant = instant;
   1b5b6:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
	conn->llcp.chan_map.initiate = 0U;
   1b5ba:	f36f 0200 	bfc	r2, #0, #1
   1b5be:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_type = LLCP_CHAN_MAP;
   1b5c2:	2102      	movs	r1, #2
	conn->llcp_ack -= 2U;
   1b5c4:	3b02      	subs	r3, #2
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1b5c6:	2201      	movs	r2, #1
	conn->llcp_type = LLCP_CHAN_MAP;
   1b5c8:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	conn->llcp_ack -= 2U;
   1b5cc:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	int nack = 0;
   1b5d0:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1b5d2:	712a      	strb	r2, [r5, #4]
		if (err) {
   1b5d4:	e537      	b.n	1b046 <ull_conn_rx+0x9e>
   1b5d6:	bf00      	nop
   1b5d8:	20002070 	.word	0x20002070
   1b5dc:	20002104 	.word	0x20002104
		if (!conn->lll.role ||
   1b5e0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1b5e4:	2b00      	cmp	r3, #0
   1b5e6:	f6bf ad5e 	bge.w	1b0a6 <ull_conn_rx+0xfe>
   1b5ea:	7f6e      	ldrb	r6, [r5, #29]
   1b5ec:	2e01      	cmp	r6, #1
   1b5ee:	f47f ad5a 	bne.w	1b0a6 <ull_conn_rx+0xfe>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1b5f2:	48d9      	ldr	r0, [pc, #868]	; (1b958 <ull_conn_rx+0x9b0>)
   1b5f4:	f7f9 fdf6 	bl	151e4 <mem_acquire>
		if (!tx) {
   1b5f8:	2800      	cmp	r0, #0
   1b5fa:	f000 827d 	beq.w	1baf8 <ull_conn_rx+0xb50>
	conn->llcp_enc.pause_rx = 1U;
   1b5fe:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   1b602:	f023 0305 	bic.w	r3, r3, #5
   1b606:	f043 0305 	orr.w	r3, r3, #5
   1b60a:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   1b60e:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   1b612:	f36f 03c3 	bfc	r3, #3, #1
   1b616:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1b61a:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1b61c:	7146      	strb	r6, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1b61e:	f043 0303 	orr.w	r3, r3, #3
   1b622:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
   1b624:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   1b628:	220b      	movs	r2, #11
   1b62a:	71c2      	strb	r2, [r0, #7]
	if (
   1b62c:	2b00      	cmp	r3, #0
   1b62e:	f000 82b4 	beq.w	1bb9a <ull_conn_rx+0xbf2>
	    !conn->llcp_enc.pause_tx &&
   1b632:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1b636:	0791      	lsls	r1, r2, #30
   1b638:	f100 82af 	bmi.w	1bb9a <ull_conn_rx+0xbf2>
	    !conn->llcp_phy.pause_tx &&
   1b63c:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1b640:	07d2      	lsls	r2, r2, #31
   1b642:	f100 82aa 	bmi.w	1bb9a <ull_conn_rx+0xbf2>
		if (conn->tx_head == conn->tx_data) {
   1b646:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   1b64a:	4293      	cmp	r3, r2
   1b64c:	f000 8756 	beq.w	1c4fc <ull_conn_rx+0x1554>
		} else if (!conn->tx_ctrl) {
   1b650:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1b654:	2a00      	cmp	r2, #0
   1b656:	f000 8769 	beq.w	1c52c <ull_conn_rx+0x1584>
	tx->next = conn->tx_ctrl_last->next;
   1b65a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1b65e:	681a      	ldr	r2, [r3, #0]
   1b660:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1b662:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   1b664:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1b668:	6803      	ldr	r3, [r0, #0]
   1b66a:	2b00      	cmp	r3, #0
   1b66c:	f47f ace8 	bne.w	1b040 <ull_conn_rx+0x98>
   1b670:	e552      	b.n	1b118 <ull_conn_rx+0x170>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG) &&
   1b672:	7f6b      	ldrb	r3, [r5, #29]
   1b674:	2b09      	cmp	r3, #9
   1b676:	f47f ad16 	bne.w	1b0a6 <ull_conn_rx+0xfe>
   1b67a:	6a2a      	ldr	r2, [r5, #32]
	feat &= LL_FEAT_BIT_MASK;
   1b67c:	49b7      	ldr	r1, [pc, #732]	; (1b95c <ull_conn_rx+0x9b4>)
   1b67e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1b680:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   1b682:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
   1b686:	400a      	ands	r2, r1
   1b688:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
   1b68c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   1b690:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
	feat &= LL_FEAT_BIT_MASK;
   1b694:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   1b698:	4013      	ands	r3, r2
   1b69a:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
   1b69e:	6a2e      	ldr	r6, [r5, #32]
   1b6a0:	6a6d      	ldr	r5, [r5, #36]	; 0x24
		feat_land_octet0(feat_get(&rsp->features[0]), ll_feat_get());
   1b6a2:	f7fc fc13 	bl	17ecc <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   1b6a6:	f005 03ff 	and.w	r3, r5, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1b6aa:	f043 0310 	orr.w	r3, r3, #16
	feat &= LL_FEAT_BIT_MASK;
   1b6ae:	4aab      	ldr	r2, [pc, #684]	; (1b95c <ull_conn_rx+0x9b4>)
	conn->llcp_feature.features_peer =
   1b6b0:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
	conn->common.fex_valid = 1U;
   1b6b4:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	feat &= LL_FEAT_BIT_MASK;
   1b6b8:	4332      	orrs	r2, r6
	conn->common.fex_valid = 1U;
   1b6ba:	f043 0301 	orr.w	r3, r3, #1
	feat_result = feat_to_keep & feat_octet0;
   1b6be:	4002      	ands	r2, r0
	conn->common.fex_valid = 1U;
   1b6c0:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	conn->llcp_feature.ack = conn->llcp_feature.req;
   1b6c4:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
   1b6c8:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
	feat_result &= 0xFF;
   1b6cc:	f002 02ff 	and.w	r2, r2, #255	; 0xff
   1b6d0:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
   1b6d4:	431a      	orrs	r2, r3
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1b6d6:	f042 6207 	orr.w	r2, r2, #141557760	; 0x8700000
	feat_result &= 0xFF;
   1b6da:	2300      	movs	r3, #0
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1b6dc:	f442 2203 	orr.w	r2, r2, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   1b6e0:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
	conn->procedure_expire = 0U;
   1b6e4:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   1b6e8:	4618      	mov	r0, r3
}
   1b6ea:	e4ac      	b.n	1b046 <ull_conn_rx+0x9e>
		if ((conn->llcp_req == conn->llcp_ack) ||
   1b6ec:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1b6f0:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   1b6f4:	4299      	cmp	r1, r3
   1b6f6:	f43f acd6 	beq.w	1b0a6 <ull_conn_rx+0xfe>
   1b6fa:	f894 10e6 	ldrb.w	r1, [r4, #230]	; 0xe6
   1b6fe:	2903      	cmp	r1, #3
   1b700:	f47f acd1 	bne.w	1b0a6 <ull_conn_rx+0xfe>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   1b704:	7f69      	ldrb	r1, [r5, #29]
   1b706:	2901      	cmp	r1, #1
   1b708:	f47f accd 	bne.w	1b0a6 <ull_conn_rx+0xfe>
		if (conn->lll.role) {
   1b70c:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   1b710:	2900      	cmp	r1, #0
   1b712:	f2c0 84e3 	blt.w	1c0dc <ull_conn_rx+0x1134>
			conn->llcp_enc.pause_rx = 0U;
   1b716:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
			conn->llcp_ack = conn->llcp_req;
   1b71a:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
			conn->procedure_expire = 0U;
   1b71e:	2100      	movs	r1, #0
			conn->llcp_enc.pause_rx = 0U;
   1b720:	f022 0203 	bic.w	r2, r2, #3
   1b724:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
			conn->procedure_expire = 0U;
   1b728:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
		if (conn->llcp_enc.refresh) {
   1b72c:	0750      	lsls	r0, r2, #29
   1b72e:	f57f ac89 	bpl.w	1b044 <ull_conn_rx+0x9c>
			conn->llcp_enc.refresh = 0U;
   1b732:	f36f 0282 	bfc	r2, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   1b736:	231a      	movs	r3, #26
			conn->llcp_enc.refresh = 0U;
   1b738:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	int nack = 0;
   1b73c:	2000      	movs	r0, #0
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   1b73e:	712b      	strb	r3, [r5, #4]
   1b740:	e481      	b.n	1b046 <ull_conn_rx+0x9e>
		if (!conn->lll.role ||
   1b742:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1b746:	2b00      	cmp	r3, #0
   1b748:	f6bf acad 	bge.w	1b0a6 <ull_conn_rx+0xfe>
   1b74c:	f895 901d 	ldrb.w	r9, [r5, #29]
   1b750:	f1b9 0f09 	cmp.w	r9, #9
   1b754:	f47f aca7 	bne.w	1b0a6 <ull_conn_rx+0xfe>
	if (conn->common.txn_lock) {
   1b758:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   1b75c:	f010 0602 	ands.w	r6, r0, #2
   1b760:	f47f ac6e 	bne.w	1b040 <ull_conn_rx+0x98>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1b764:	487c      	ldr	r0, [pc, #496]	; (1b958 <ull_conn_rx+0x9b0>)
   1b766:	f7f9 fd3d 	bl	151e4 <mem_acquire>
	if (!tx) {
   1b76a:	4607      	mov	r7, r0
   1b76c:	2800      	cmp	r0, #0
   1b76e:	f000 81c3 	beq.w	1baf8 <ull_conn_rx+0xb50>
	conn->common.txn_lock = 1U;
   1b772:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	feat &= LL_FEAT_BIT_MASK;
   1b776:	4979      	ldr	r1, [pc, #484]	; (1b95c <ull_conn_rx+0x9b4>)
	conn->common.txn_lock = 1U;
   1b778:	f043 0302 	orr.w	r3, r3, #2
   1b77c:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
   1b780:	6a2a      	ldr	r2, [r5, #32]
   1b782:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	feat &= LL_FEAT_BIT_MASK;
   1b784:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   1b786:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
   1b78a:	400a      	ands	r2, r1
   1b78c:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
   1b790:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   1b794:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
	feat &= LL_FEAT_BIT_MASK;
   1b798:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   1b79c:	4013      	ands	r3, r2
   1b79e:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
   1b7a2:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
   1b7a6:	f8d5 a020 	ldr.w	sl, [r5, #32]
		feat_land_octet0(feat_get(&req->features[0]), ll_feat_get());
   1b7aa:	f7fc fb8f 	bl	17ecc <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   1b7ae:	f008 03ff 	and.w	r3, r8, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1b7b2:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_peer =
   1b7b6:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
	feat &= LL_FEAT_BIT_MASK;
   1b7ba:	4b68      	ldr	r3, [pc, #416]	; (1b95c <ull_conn_rx+0x9b4>)
   1b7bc:	ea4a 0303 	orr.w	r3, sl, r3
	feat_result = feat_to_keep & feat_octet0;
   1b7c0:	4003      	ands	r3, r0
	feat_result &= 0xFF;
   1b7c2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1b7c6:	f02a 0aff 	bic.w	sl, sl, #255	; 0xff
   1b7ca:	ea43 030a 	orr.w	r3, r3, sl
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1b7ce:	f043 6307 	orr.w	r3, r3, #141557760	; 0x8700000
   1b7d2:	f443 2303 	orr.w	r3, r3, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   1b7d6:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
	conn->common.fex_valid = 1U;
   1b7da:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1b7de:	f043 0301 	orr.w	r3, r3, #1
   1b7e2:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1b7e6:	793b      	ldrb	r3, [r7, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   1b7e8:	f887 9005 	strb.w	r9, [r7, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1b7ec:	f043 0303 	orr.w	r3, r3, #3
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   1b7f0:	2208      	movs	r2, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1b7f2:	713b      	strb	r3, [r7, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   1b7f4:	18b8      	adds	r0, r7, r2
   1b7f6:	4631      	mov	r1, r6
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   1b7f8:	f887 9007 	strb.w	r9, [r7, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   1b7fc:	f00d fdae 	bl	2935c <memset>
	feat = feat_land_octet0(ll_feat_get(),
   1b800:	f7fc fb64 	bl	17ecc <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   1b804:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
	dst[0] = val;
   1b808:	7339      	strb	r1, [r7, #12]
   1b80a:	4002      	ands	r2, r0
	feat_result &= 0xFF;
   1b80c:	f002 02ff 	and.w	r2, r2, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1b810:	f020 03ff 	bic.w	r3, r0, #255	; 0xff
   1b814:	4313      	orrs	r3, r2
	sys_put_le16(val >> 16, &dst[2]);
   1b816:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   1b818:	723b      	strb	r3, [r7, #8]
   1b81a:	72ba      	strb	r2, [r7, #10]
	dst[1] = val >> 8;
   1b81c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1b820:	0a12      	lsrs	r2, r2, #8
	ctrl_tx_sec_enqueue(conn, tx);
   1b822:	4620      	mov	r0, r4
   1b824:	727b      	strb	r3, [r7, #9]
   1b826:	737e      	strb	r6, [r7, #13]
	dst[0] = val;
   1b828:	73be      	strb	r6, [r7, #14]
	dst[1] = val >> 8;
   1b82a:	73fe      	strb	r6, [r7, #15]
   1b82c:	72fa      	strb	r2, [r7, #11]
   1b82e:	4639      	mov	r1, r7
   1b830:	f7fe fb4c 	bl	19ecc <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1b834:	2301      	movs	r3, #1
   1b836:	712b      	strb	r3, [r5, #4]
	return 0;
   1b838:	4630      	mov	r0, r6
   1b83a:	e404      	b.n	1b046 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
   1b83c:	7f6b      	ldrb	r3, [r5, #29]
   1b83e:	2b02      	cmp	r3, #2
   1b840:	f47f ac31 	bne.w	1b0a6 <ull_conn_rx+0xfe>
			    conn->llcp_conn_param.req) &&
   1b844:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
		} else if ((conn->llcp_conn_param.ack !=
   1b848:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   1b84c:	f895 3020 	ldrb.w	r3, [r5, #32]
		} else if ((conn->llcp_conn_param.ack !=
   1b850:	4291      	cmp	r1, r2
   1b852:	d002      	beq.n	1b85a <ull_conn_rx+0x8b2>
			    conn->llcp_conn_param.req) &&
   1b854:	2b0f      	cmp	r3, #15
   1b856:	f000 836c 	beq.w	1bf32 <ull_conn_rx+0xf8a>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   1b85a:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   1b85e:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
   1b862:	4291      	cmp	r1, r2
   1b864:	d002      	beq.n	1b86c <ull_conn_rx+0x8c4>
   1b866:	2b14      	cmp	r3, #20
   1b868:	f000 83e0 	beq.w	1c02c <ull_conn_rx+0x1084>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   1b86c:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   1b870:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
   1b874:	4291      	cmp	r1, r2
   1b876:	d002      	beq.n	1b87e <ull_conn_rx+0x8d6>
   1b878:	2b16      	cmp	r3, #22
   1b87a:	f000 843b 	beq.w	1c0f4 <ull_conn_rx+0x114c>
			switch (llctrl->unknown_rsp.type) {
   1b87e:	2b12      	cmp	r3, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1b880:	bf04      	itt	eq
   1b882:	2301      	moveq	r3, #1
   1b884:	712b      	strbeq	r3, [r5, #4]
				break;
   1b886:	e581      	b.n	1b38c <ull_conn_rx+0x3e4>
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND:
	{
		uint8_t err;

		if (!conn->lll.role ||
   1b888:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1b88c:	2b00      	cmp	r3, #0
   1b88e:	f6bf ac0a 	bge.w	1b0a6 <ull_conn_rx+0xfe>
   1b892:	7f6b      	ldrb	r3, [r5, #29]
   1b894:	2b05      	cmp	r3, #5
   1b896:	f47f ac06 	bne.w	1b0a6 <ull_conn_rx+0xfe>
	if (!((ind->c_to_p_phy | ind->p_to_c_phy) & 0x07)) {
   1b89a:	f895 2020 	ldrb.w	r2, [r5, #32]
   1b89e:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1b8a2:	4313      	orrs	r3, r2
   1b8a4:	f013 0307 	ands.w	r3, r3, #7
   1b8a8:	f040 8470 	bne.w	1c18c <ull_conn_rx+0x11e4>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   1b8ac:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   1b8b0:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   1b8b4:	428a      	cmp	r2, r1
   1b8b6:	f43f abc3 	beq.w	1b040 <ull_conn_rx+0x98>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   1b8ba:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   1b8be:	f002 0203 	and.w	r2, r2, #3
   1b8c2:	2a02      	cmp	r2, #2
   1b8c4:	f47f abbc 	bne.w	1b040 <ull_conn_rx+0x98>
		conn->llcp_phy.pause_tx = 0U;
   1b8c8:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1b8cc:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1b8d0:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		conn->procedure_expire = 0U;
   1b8d4:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
		conn->llcp_phy.pause_tx = 0U;
   1b8d8:	f363 0200 	bfi	r2, r3, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1b8dc:	4608      	mov	r0, r1
   1b8de:	f361 1006 	bfi	r0, r1, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   1b8e2:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
		if (!conn->llcp_phy.cmd) {
   1b8e6:	f012 0204 	ands.w	r2, r2, #4
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1b8ea:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
   1b8ee:	f3c1 0102 	ubfx	r1, r1, #0, #3
		if (!conn->llcp_phy.cmd) {
   1b8f2:	f040 85e6 	bne.w	1c4c2 <ull_conn_rx+0x151a>
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1b8f6:	6833      	ldr	r3, [r6, #0]
   1b8f8:	2101      	movs	r1, #1
   1b8fa:	7119      	strb	r1, [r3, #4]
	int nack = 0;
   1b8fc:	4610      	mov	r0, r2
   1b8fe:	f7ff bba2 	b.w	1b046 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(phy_req) != pdu_rx->len) {
   1b902:	7f6b      	ldrb	r3, [r5, #29]
   1b904:	2b03      	cmp	r3, #3
   1b906:	f47f abce 	bne.w	1b0a6 <ull_conn_rx+0xfe>
		if (!conn->lll.role) {
   1b90a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1b90e:	2b00      	cmp	r3, #0
   1b910:	f2c0 828c 	blt.w	1be2c <ull_conn_rx+0xe84>
			if ((conn->llcp_phy.ack !=
   1b914:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
			     conn->llcp_phy.req) &&
   1b918:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
			if ((conn->llcp_phy.ack !=
   1b91c:	4281      	cmp	r1, r0
   1b91e:	d007      	beq.n	1b930 <ull_conn_rx+0x988>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   1b920:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
   1b924:	f002 0203 	and.w	r2, r2, #3
			     conn->llcp_phy.req) &&
   1b928:	3a01      	subs	r2, #1
   1b92a:	2a02      	cmp	r2, #2
   1b92c:	f240 83de 	bls.w	1c0ec <ull_conn_rx+0x1144>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   1b930:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1b934:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   1b938:	1a9b      	subs	r3, r3, r2
   1b93a:	f003 0303 	and.w	r3, r3, #3
   1b93e:	2b02      	cmp	r3, #2
   1b940:	f000 8367 	beq.w	1c012 <ull_conn_rx+0x106a>
				     LLCP_ENCRYPTION)) ||
   1b944:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   1b948:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   1b94c:	429a      	cmp	r2, r3
   1b94e:	f000 8382 	beq.w	1c056 <ull_conn_rx+0x10ae>
				nack = reject_ext_ind_send(conn, *rx,
   1b952:	232a      	movs	r3, #42	; 0x2a
   1b954:	2216      	movs	r2, #22
   1b956:	e536      	b.n	1b3c6 <ull_conn_rx+0x41e>
   1b958:	20002104 	.word	0x20002104
   1b95c:	087830d0 	.word	0x087830d0
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   1b960:	7f6b      	ldrb	r3, [r5, #29]
   1b962:	2b01      	cmp	r3, #1
   1b964:	f47f ab9f 	bne.w	1b0a6 <ull_conn_rx+0xfe>
	} else if (!conn->lll.role) {
   1b968:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1b96c:	2b00      	cmp	r3, #0
   1b96e:	f2c0 80e3 	blt.w	1bb38 <ull_conn_rx+0xb90>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1b972:	48d0      	ldr	r0, [pc, #832]	; (1bcb4 <ull_conn_rx+0xd0c>)
   1b974:	f7f9 fc36 	bl	151e4 <mem_acquire>
		if (!tx) {
   1b978:	2800      	cmp	r0, #0
   1b97a:	f000 80bd 	beq.w	1baf8 <ull_conn_rx+0xb50>
	conn->llcp_enc.pause_rx = 1U;
   1b97e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   1b982:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
	conn->llcp_enc.pause_rx = 1U;
   1b986:	f042 0201 	orr.w	r2, r2, #1
	conn->lll.enc_rx = 0;
   1b98a:	f023 0318 	bic.w	r3, r3, #24
	conn->llcp_enc.pause_rx = 1U;
   1b98e:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1b992:	2201      	movs	r2, #1
	conn->lll.enc_rx = 0;
   1b994:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1b998:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1b99a:	7142      	strb	r2, [r0, #5]
   1b99c:	e63f      	b.n	1b61e <ull_conn_rx+0x676>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   1b99e:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   1b9a2:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
   1b9a6:	4293      	cmp	r3, r2
   1b9a8:	f43f ab4a 	beq.w	1b040 <ull_conn_rx+0x98>
	conn->procedure_expire = 0U;
   1b9ac:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1b9ae:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   1b9b0:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
	conn->procedure_expire = 0U;
   1b9b4:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1b9b8:	7769      	strb	r1, [r5, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   1b9ba:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   1b9be:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   1b9c2:	842a      	strh	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1b9c4:	2115      	movs	r1, #21
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   1b9c6:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1b9ca:	77e9      	strb	r1, [r5, #31]
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   1b9cc:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
   1b9d0:	8469      	strh	r1, [r5, #34]	; 0x22
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   1b9d2:	84a8      	strh	r0, [r5, #36]	; 0x24
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   1b9d4:	84ea      	strh	r2, [r5, #38]	; 0x26
	int nack = 0;
   1b9d6:	4618      	mov	r0, r3
   1b9d8:	f7ff bb35 	b.w	1b046 <ull_conn_rx+0x9e>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   1b9dc:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   1b9e0:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
   1b9e4:	429a      	cmp	r2, r3
   1b9e6:	f43f ab2b 	beq.w	1b040 <ull_conn_rx+0x98>
	if (!lll->role && (rej_ext_ind->error_code ==
   1b9ea:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
	return ((uint16_t)src[1] << 8) | src[0];
   1b9ee:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   1b9f2:	2900      	cmp	r1, #0
   1b9f4:	f2c0 8591 	blt.w	1c51a <ull_conn_rx+0x1572>
   1b9f8:	2a1a      	cmp	r2, #26
   1b9fa:	f000 8620 	beq.w	1c63e <ull_conn_rx+0x1696>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   1b9fe:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   1ba02:	f002 010f 	and.w	r1, r2, #15
   1ba06:	2904      	cmp	r1, #4
   1ba08:	d106      	bne.n	1ba18 <ull_conn_rx+0xa70>
	conn_upd_curr = NULL;
   1ba0a:	49ab      	ldr	r1, [pc, #684]	; (1bcb8 <ull_conn_rx+0xd10>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1ba0c:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   1ba10:	2300      	movs	r3, #0
   1ba12:	600b      	str	r3, [r1, #0]
		conn->procedure_expire = 0U;
   1ba14:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (!conn->llcp_conn_param.cmd) {
   1ba18:	06d2      	lsls	r2, r2, #27
   1ba1a:	f57f ab11 	bpl.w	1b040 <ull_conn_rx+0x98>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1ba1e:	2319      	movs	r3, #25
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   1ba20:	f01c 0f01 	tst.w	ip, #1
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1ba24:	712b      	strb	r3, [r5, #4]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   1ba26:	f040 8472 	bne.w	1c30e <ull_conn_rx+0x1366>
	cu->status = rej_ext_ind->error_code;
   1ba2a:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1ba2e:	772b      	strb	r3, [r5, #28]
	cu->interval = lll->interval;
   1ba30:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
	cu->timeout = conn->supervision_reload *
   1ba32:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
	cu->latency = lll->latency;
   1ba36:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   1ba38:	8429      	strh	r1, [r5, #32]
		      lll->interval * 125U / 1000;
   1ba3a:	207d      	movs	r0, #125	; 0x7d
	cu->timeout = conn->supervision_reload *
   1ba3c:	fb02 f303 	mul.w	r3, r2, r3
		      lll->interval * 125U / 1000;
   1ba40:	fb00 f303 	mul.w	r3, r0, r3
	cu->interval = lll->interval;
   1ba44:	83ea      	strh	r2, [r5, #30]
		      lll->interval * 125U / 1000;
   1ba46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1ba4a:	fbb3 f3f0 	udiv	r3, r3, r0
	int nack = 0;
   1ba4e:	2000      	movs	r0, #0
	cu->timeout = conn->supervision_reload *
   1ba50:	846b      	strh	r3, [r5, #34]	; 0x22
	if (err) {
   1ba52:	f7ff baf8 	b.w	1b046 <ull_conn_rx+0x9e>
		if ((conn->llcp_ack != conn->llcp_req) &&
   1ba56:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
   1ba5a:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   1ba5e:	428b      	cmp	r3, r1
   1ba60:	f43f aaee 	beq.w	1b040 <ull_conn_rx+0x98>
   1ba64:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   1ba68:	2b03      	cmp	r3, #3
   1ba6a:	f47f aae9 	bne.w	1b040 <ull_conn_rx+0x98>
	conn->llcp_enc.pause_rx = 0U;
   1ba6e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
   1ba72:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	conn->procedure_expire = 0U;
   1ba76:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   1ba78:	f022 0203 	bic.w	r2, r2, #3
   1ba7c:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
   1ba80:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   1ba84:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   1ba88:	f885 2020 	strb.w	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   1ba8c:	210d      	movs	r1, #13
   1ba8e:	77e9      	strb	r1, [r5, #31]
	int nack = 0;
   1ba90:	4618      	mov	r0, r3
   1ba92:	f7ff bad8 	b.w	1b046 <ull_conn_rx+0x9e>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   1ba96:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   1ba9a:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   1ba9e:	428b      	cmp	r3, r1
   1baa0:	f43f aace 	beq.w	1b040 <ull_conn_rx+0x98>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1baa4:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   1baa8:	2a23      	cmp	r2, #35	; 0x23
   1baaa:	d012      	beq.n	1bad2 <ull_conn_rx+0xb2a>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1baac:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   1bab0:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1bab4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   1bab8:	f36f 0100 	bfc	r1, #0, #1
   1babc:	f884 11bf 	strb.w	r1, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
   1bac0:	2100      	movs	r1, #0
   1bac2:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1bac6:	f3c3 0102 	ubfx	r1, r3, #0, #3
   1baca:	f361 1306 	bfi	r3, r1, #4, #3
   1bace:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
   1bad2:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   1bad6:	0759      	lsls	r1, r3, #29
   1bad8:	f57f aab2 	bpl.w	1b040 <ull_conn_rx+0x98>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1badc:	231d      	movs	r3, #29
   1bade:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   1bae0:	772a      	strb	r2, [r5, #28]
   1bae2:	e4ae      	b.n	1b442 <ull_conn_rx+0x49a>
			tx->next = conn->tx_head;
   1bae4:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   1bae6:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1baea:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1baee:	2a00      	cmp	r2, #0
   1baf0:	f47f aaa6 	bne.w	1b040 <ull_conn_rx+0x98>
   1baf4:	f7ff bb10 	b.w	1b118 <ull_conn_rx+0x170>
		*err = -ENOBUFS;
   1baf8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1bafc:	f7ff baa3 	b.w	1b046 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   1bb00:	7f6b      	ldrb	r3, [r5, #29]
   1bb02:	2b01      	cmp	r3, #1
   1bb04:	f47f aacf 	bne.w	1b0a6 <ull_conn_rx+0xfe>
   1bb08:	e733      	b.n	1b972 <ull_conn_rx+0x9ca>
			conn->tx_data = conn->tx_data->next;
   1bb0a:	6813      	ldr	r3, [r2, #0]
   1bb0c:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1bb10:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   1bb14:	2b00      	cmp	r3, #0
   1bb16:	f47f aaf5 	bne.w	1b104 <ull_conn_rx+0x15c>
			tx->next = conn->tx_head->next;
   1bb1a:	6813      	ldr	r3, [r2, #0]
   1bb1c:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   1bb1e:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   1bb20:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
   1bb22:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
   1bb26:	2a00      	cmp	r2, #0
   1bb28:	f47f aa8a 	bne.w	1b040 <ull_conn_rx+0x98>
   1bb2c:	f7ff baf4 	b.w	1b118 <ull_conn_rx+0x170>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   1bb30:	7f6b      	ldrb	r3, [r5, #29]
   1bb32:	2b01      	cmp	r3, #1
   1bb34:	f47f aab7 	bne.w	1b0a6 <ull_conn_rx+0xfe>
		conn->lll.enc_tx = 0;
   1bb38:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   1bb3c:	f36f 1304 	bfc	r3, #4, #1
   1bb40:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		goto pause_enc_rsp_send_exit;
   1bb44:	f7ff ba7c 	b.w	1b040 <ull_conn_rx+0x98>
		if (!conn->lll.role) {
   1bb48:	f994 7039 	ldrsb.w	r7, [r4, #57]	; 0x39
			if ((conn->llcp_conn_param.req !=
   1bb4c:	f894 6184 	ldrb.w	r6, [r4, #388]	; 0x184
					conn->llcp_conn_param.ack) &&
   1bb50:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
		if (!conn->lll.role) {
   1bb54:	2f00      	cmp	r7, #0
   1bb56:	f2c0 80b1 	blt.w	1bcbc <ull_conn_rx+0xd14>
			if ((conn->llcp_conn_param.req !=
   1bb5a:	42b1      	cmp	r1, r6
   1bb5c:	d00a      	beq.n	1bb74 <ull_conn_rx+0xbcc>
			    ((conn->llcp_conn_param.state ==
   1bb5e:	f894 6186 	ldrb.w	r6, [r4, #390]	; 0x186
					conn->llcp_conn_param.ack) &&
   1bb62:	f016 0f0b 	tst.w	r6, #11
   1bb66:	f000 825e 	beq.w	1c026 <ull_conn_rx+0x107e>
			      LLCP_CPR_STATE_RSP_WAIT) ||
   1bb6a:	f006 060f 	and.w	r6, r6, #15
   1bb6e:	2e06      	cmp	r6, #6
   1bb70:	f000 8259 	beq.w	1c026 <ull_conn_rx+0x107e>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   1bb74:	f894 60e4 	ldrb.w	r6, [r4, #228]	; 0xe4
   1bb78:	f894 70e5 	ldrb.w	r7, [r4, #229]	; 0xe5
   1bb7c:	1bf6      	subs	r6, r6, r7
   1bb7e:	f006 0603 	and.w	r6, r6, #3
   1bb82:	2e02      	cmp	r6, #2
   1bb84:	f000 83d2 	beq.w	1c32c <ull_conn_rx+0x1384>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   1bb88:	f894 71bc 	ldrb.w	r7, [r4, #444]	; 0x1bc
   1bb8c:	f894 61bd 	ldrb.w	r6, [r4, #445]	; 0x1bd
   1bb90:	42b7      	cmp	r7, r6
   1bb92:	f000 83e5 	beq.w	1c360 <ull_conn_rx+0x13b8>
				nack = reject_ext_ind_send(conn, *rx,
   1bb96:	232a      	movs	r3, #42	; 0x2a
   1bb98:	e414      	b.n	1b3c4 <ull_conn_rx+0x41c>
		if (!conn->tx_ctrl) {
   1bb9a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1bb9e:	2a00      	cmp	r2, #0
   1bba0:	f47f ad5b 	bne.w	1b65a <ull_conn_rx+0x6b2>
			tx->next = conn->tx_head;
   1bba4:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   1bba6:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1bbaa:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   1bbae:	e55b      	b.n	1b668 <ull_conn_rx+0x6c0>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1bbb0:	7913      	ldrb	r3, [r2, #4]
   1bbb2:	f003 0303 	and.w	r3, r3, #3
   1bbb6:	2b03      	cmp	r3, #3
   1bbb8:	f000 82ce 	beq.w	1c158 <ull_conn_rx+0x11b0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1bbbc:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
   1bbc0:	f7ff baa2 	b.w	1b108 <ull_conn_rx+0x160>
	if (conn->common.txn_lock) {
   1bbc4:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1bbc8:	079b      	lsls	r3, r3, #30
   1bbca:	f53f aa39 	bmi.w	1b040 <ull_conn_rx+0x98>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1bbce:	4839      	ldr	r0, [pc, #228]	; (1bcb4 <ull_conn_rx+0xd0c>)
   1bbd0:	f7f9 fb08 	bl	151e4 <mem_acquire>
	if (!tx) {
   1bbd4:	4603      	mov	r3, r0
   1bbd6:	2800      	cmp	r0, #0
   1bbd8:	d08e      	beq.n	1baf8 <ull_conn_rx+0xb50>
	conn->common.txn_lock = 1U;
   1bbda:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   1bbde:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
	eff_rx_octets = conn->lll.max_rx_octets;
   1bbe2:	f8b4 b05a 	ldrh.w	fp, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   1bbe6:	f8b4 a058 	ldrh.w	sl, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   1bbea:	f8b4 905e 	ldrh.w	r9, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   1bbee:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
	conn->common.txn_lock = 1U;
   1bbf2:	f042 0202 	orr.w	r2, r2, #2
   1bbf6:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   1bbfa:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
   1bbfe:	428a      	cmp	r2, r1
   1bc00:	f040 855b 	bne.w	1c6ba <ull_conn_rx+0x1712>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   1bc04:	8c29      	ldrh	r1, [r5, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   1bc06:	291a      	cmp	r1, #26
   1bc08:	f240 8223 	bls.w	1c052 <ull_conn_rx+0x10aa>
			eff_tx_octets = MIN(max_rx_octets,
   1bc0c:	f8b4 00d2 	ldrh.w	r0, [r4, #210]	; 0xd2
   1bc10:	4281      	cmp	r1, r0
   1bc12:	bf28      	it	cs
   1bc14:	4601      	movcs	r1, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   1bc16:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   1bc18:	f8b5 c026 	ldrh.w	ip, [r5, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
   1bc1c:	281b      	cmp	r0, #27
		if (lr_rx_time >= PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN,
   1bc1e:	8c68      	ldrh	r0, [r5, #34]	; 0x22
			eff_rx_octets = MIN(max_tx_octets,
   1bc20:	bf34      	ite	cc
   1bc22:	46de      	movcc	lr, fp
   1bc24:	f04f 0e1b 	movcs.w	lr, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   1bc28:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   1bc2c:	bf34      	ite	cc
   1bc2e:	4640      	movcc	r0, r8
   1bc30:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   1bc34:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   1bc38:	bf34      	ite	cc
   1bc3a:	46cc      	movcc	ip, r9
   1bc3c:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   1bc40:	45de      	cmp	lr, fp
   1bc42:	f000 831f 	beq.w	1c284 <ull_conn_rx+0x12dc>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   1bc46:	3a01      	subs	r2, #1
   1bc48:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->llcp_length.rx_octets = eff_rx_octets;
   1bc4c:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
			conn->llcp_length.tx_octets = eff_tx_octets;
   1bc50:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
			conn->llcp_length.rx_time = eff_rx_time;
   1bc54:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
			conn->llcp_length.tx_time = eff_tx_time;
   1bc58:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
			if (tx) {
   1bc5c:	2b00      	cmp	r3, #0
   1bc5e:	f000 836b 	beq.w	1c338 <ull_conn_rx+0x1390>
				conn->llcp_length.state =
   1bc62:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
   1bc66:	2505      	movs	r5, #5
   1bc68:	f365 0202 	bfi	r2, r5, #0, #3
   1bc6c:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
			link->mem = conn->llcp_rx;
   1bc70:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   1bc74:	607a      	str	r2, [r7, #4]
			(*rx)->hdr.link = link;
   1bc76:	6832      	ldr	r2, [r6, #0]
   1bc78:	6017      	str	r7, [r2, #0]
			conn->llcp_rx = *rx;
   1bc7a:	6832      	ldr	r2, [r6, #0]
   1bc7c:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
			*rx = NULL;
   1bc80:	2200      	movs	r2, #0
   1bc82:	6032      	str	r2, [r6, #0]
	if (tx) {
   1bc84:	2b00      	cmp	r3, #0
   1bc86:	f43f a9dd 	beq.w	1b044 <ull_conn_rx+0x9c>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1bc8a:	791a      	ldrb	r2, [r3, #4]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   1bc8c:	81d8      	strh	r0, [r3, #14]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1bc8e:	f042 0203 	orr.w	r2, r2, #3
	ctrl_tx_sec_enqueue(conn, tx);
   1bc92:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1bc94:	711a      	strb	r2, [r3, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1bc96:	2409      	movs	r4, #9
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1bc98:	2215      	movs	r2, #21
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   1bc9a:	8199      	strh	r1, [r3, #12]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   1bc9c:	f8a3 e008 	strh.w	lr, [r3, #8]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   1bca0:	f8a3 c00a 	strh.w	ip, [r3, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   1bca4:	4619      	mov	r1, r3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1bca6:	715c      	strb	r4, [r3, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1bca8:	71da      	strb	r2, [r3, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   1bcaa:	f7fe f90f 	bl	19ecc <ctrl_tx_sec_enqueue>
	return 0;
   1bcae:	2000      	movs	r0, #0
}
   1bcb0:	f7ff b9c9 	b.w	1b046 <ull_conn_rx+0x9e>
   1bcb4:	20002104 	.word	0x20002104
   1bcb8:	20002070 	.word	0x20002070
		} else if ((conn->llcp_conn_param.req ==
   1bcbc:	42b1      	cmp	r1, r6
   1bcbe:	d005      	beq.n	1bccc <ull_conn_rx+0xd24>
			    conn->llcp_conn_param.ack) ||
   1bcc0:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   1bcc4:	f012 0f0b 	tst.w	r2, #11
   1bcc8:	f47f a9ba 	bne.w	1b040 <ull_conn_rx+0x98>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   1bccc:	f8b5 a020 	ldrh.w	sl, [r5, #32]
   1bcd0:	fa1f f28a 	uxth.w	r2, sl
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1bcd4:	2a05      	cmp	r2, #5
   1bcd6:	f240 80a6 	bls.w	1be26 <ull_conn_rx+0xe7e>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   1bcda:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
   1bcde:	fa1f f689 	uxth.w	r6, r9
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1bce2:	f5b6 6f48 	cmp.w	r6, #3200	; 0xc80
   1bce6:	f200 809e 	bhi.w	1be26 <ull_conn_rx+0xe7e>
			    (interval_max > 3200) ||
   1bcea:	42b2      	cmp	r2, r6
   1bcec:	f200 809b 	bhi.w	1be26 <ull_conn_rx+0xe7e>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   1bcf0:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
   1bcf4:	fa1f fc88 	uxth.w	ip, r8
			    (interval_min > interval_max) ||
   1bcf8:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   1bcfc:	f080 8093 	bcs.w	1be26 <ull_conn_rx+0xe7e>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   1bd00:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
   1bd04:	fa1f f28e 	uxth.w	r2, lr
			    (latency > 499) ||
   1bd08:	f1a2 070a 	sub.w	r7, r2, #10
   1bd0c:	f640 4b76 	movw	fp, #3190	; 0xc76
   1bd10:	b2bf      	uxth	r7, r7
   1bd12:	455f      	cmp	r7, fp
   1bd14:	f200 8087 	bhi.w	1be26 <ull_conn_rx+0xe7e>
			     ((latency + 1) * interval_max)) ||
   1bd18:	f10c 0701 	add.w	r7, ip, #1
   1bd1c:	b2bf      	uxth	r7, r7
   1bd1e:	fb06 f707 	mul.w	r7, r6, r7
			    (timeout < 10) || (timeout > 3200) ||
   1bd22:	ebb7 0f82 	cmp.w	r7, r2, lsl #2
   1bd26:	d27e      	bcs.n	1be26 <ull_conn_rx+0xe7e>
			     ((latency + 1) * interval_max)) ||
   1bd28:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   1bd2c:	455e      	cmp	r6, fp
   1bd2e:	d37a      	bcc.n	1be26 <ull_conn_rx+0xe7e>
			conn->llcp_conn_param.interval_min = interval_min;
   1bd30:	f8a4 a188 	strh.w	sl, [r4, #392]	; 0x188
			conn->llcp_conn_param.interval_max = interval_max;
   1bd34:	f8a4 918a 	strh.w	r9, [r4, #394]	; 0x18a
			conn->llcp_conn_param.latency =	latency;
   1bd38:	f8a4 818c 	strh.w	r8, [r4, #396]	; 0x18c
			conn->llcp_conn_param.timeout =	timeout;
   1bd3c:	f8a4 e18e 	strh.w	lr, [r4, #398]	; 0x18e
			conn->llcp_conn_param.preferred_periodicity =
   1bd40:	f884 b190 	strb.w	fp, [r4, #400]	; 0x190
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   1bd44:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
   1bd48:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   1bd4c:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   1bd50:	f8a4 7192 	strh.w	r7, [r4, #402]	; 0x192
				sys_le16_to_cpu(cpr->offset0);
   1bd54:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
   1bd58:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   1bd5c:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   1bd60:	f8a4 7194 	strh.w	r7, [r4, #404]	; 0x194
				sys_le16_to_cpu(cpr->offset1);
   1bd64:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   1bd68:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   1bd6c:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   1bd70:	f8a4 7196 	strh.w	r7, [r4, #406]	; 0x196
				sys_le16_to_cpu(cpr->offset2);
   1bd74:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   1bd78:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   1bd7c:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   1bd80:	f8a4 7198 	strh.w	r7, [r4, #408]	; 0x198
				sys_le16_to_cpu(cpr->offset3);
   1bd84:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   1bd88:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   1bd8c:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   1bd90:	f8a4 719a 	strh.w	r7, [r4, #410]	; 0x19a
				sys_le16_to_cpu(cpr->offset4);
   1bd94:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   1bd98:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   1bd9c:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   1bda0:	f8a4 719c 	strh.w	r7, [r4, #412]	; 0x19c
				sys_le16_to_cpu(cpr->offset5);
   1bda4:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   1bda8:	f895 e036 	ldrb.w	lr, [r5, #54]	; 0x36
   1bdac:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset5 =
   1bdb0:	f8a4 719e 	strh.w	r7, [r4, #414]	; 0x19e
			     lll->interval) ||
   1bdb4:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
			if ((conn->llcp_conn_param.interval_max !=
   1bdb6:	42be      	cmp	r6, r7
   1bdb8:	f000 840b 	beq.w	1c5d2 <ull_conn_rx+0x162a>
				conn->llcp_conn_param.state =
   1bdbc:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   1bdc0:	2503      	movs	r5, #3
   1bdc2:	f365 0203 	bfi	r2, r5, #0, #4
   1bdc6:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			conn->llcp_conn_param.ack--;
   1bdca:	3901      	subs	r1, #1
   1bdcc:	f884 1185 	strb.w	r1, [r4, #389]	; 0x185
	if (!conn_upd_curr) {
   1bdd0:	2b00      	cmp	r3, #0
   1bdd2:	f47f a937 	bne.w	1b044 <ull_conn_rx+0x9c>
		conn_upd_curr = conn;
   1bdd6:	6004      	str	r4, [r0, #0]
	int nack = 0;
   1bdd8:	4618      	mov	r0, r3
   1bdda:	f7ff b934 	b.w	1b046 <ull_conn_rx+0x9e>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   1bdde:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   1bde2:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   1bde6:	4293      	cmp	r3, r2
   1bde8:	f43f add9 	beq.w	1b99e <ull_conn_rx+0x9f6>
		rej_ext_ind->error_code = rej_ind->error_code;
   1bdec:	f895 3020 	ldrb.w	r3, [r5, #32]
   1bdf0:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   1bdf4:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   1bdf8:	2900      	cmp	r1, #0
   1bdfa:	f2c0 82a9 	blt.w	1c350 <ull_conn_rx+0x13a8>
   1bdfe:	2b1a      	cmp	r3, #26
   1be00:	f000 841d 	beq.w	1c63e <ull_conn_rx+0x1696>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   1be04:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   1be08:	f003 010f 	and.w	r1, r3, #15
   1be0c:	2904      	cmp	r1, #4
   1be0e:	d106      	bne.n	1be1e <ull_conn_rx+0xe76>
	conn_upd_curr = NULL;
   1be10:	49d9      	ldr	r1, [pc, #868]	; (1c178 <ull_conn_rx+0x11d0>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1be12:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   1be16:	2200      	movs	r2, #0
   1be18:	600a      	str	r2, [r1, #0]
		conn->procedure_expire = 0U;
   1be1a:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	if (!conn->llcp_conn_param.cmd) {
   1be1e:	06d8      	lsls	r0, r3, #27
   1be20:	f57f a90e 	bpl.w	1b040 <ull_conn_rx+0x98>
   1be24:	e5fb      	b.n	1ba1e <ull_conn_rx+0xa76>
				nack = reject_ext_ind_send(conn, *rx,
   1be26:	231e      	movs	r3, #30
   1be28:	f7ff bacc 	b.w	1b3c4 <ull_conn_rx+0x41c>
	if (conn->common.txn_lock) {
   1be2c:	f894 70d8 	ldrb.w	r7, [r4, #216]	; 0xd8
   1be30:	f017 0702 	ands.w	r7, r7, #2
   1be34:	f47f a904 	bne.w	1b040 <ull_conn_rx+0x98>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1be38:	48d0      	ldr	r0, [pc, #832]	; (1c17c <ull_conn_rx+0x11d4>)
   1be3a:	f7f9 f9d3 	bl	151e4 <mem_acquire>
	if (!tx) {
   1be3e:	4602      	mov	r2, r0
   1be40:	2800      	cmp	r0, #0
   1be42:	f43f ae59 	beq.w	1baf8 <ull_conn_rx+0xb50>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   1be46:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	conn->common.txn_lock = 1U;
   1be4a:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	if (conn->llcp_phy.ack ==
   1be4e:	f894 e1bd 	ldrb.w	lr, [r4, #445]	; 0x1bd
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   1be52:	2002      	movs	r0, #2
   1be54:	f360 0101 	bfi	r1, r0, #0, #2
	conn->common.txn_lock = 1U;
   1be58:	f043 0302 	orr.w	r3, r3, #2
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   1be5c:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
	if (conn->llcp_phy.ack ==
   1be60:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
	conn->common.txn_lock = 1U;
   1be64:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
			conn->phy_pref_tx;
   1be68:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
	if (conn->llcp_phy.ack ==
   1be6c:	4571      	cmp	r1, lr
			conn->phy_pref_tx;
   1be6e:	f3c3 0602 	ubfx	r6, r3, #0, #3
   1be72:	f003 0c07 	and.w	ip, r3, #7
			conn->phy_pref_rx;
   1be76:	f3c3 00c2 	ubfx	r0, r3, #3, #3
	if (conn->llcp_phy.ack ==
   1be7a:	d114      	bne.n	1bea6 <ull_conn_rx+0xefe>
		conn->llcp_phy.ack--;
   1be7c:	3901      	subs	r1, #1
		conn->llcp_phy.cmd = 0U;
   1be7e:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack--;
   1be82:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->llcp_phy.tx =
   1be86:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
		conn->llcp_phy.cmd = 0U;
   1be8a:	f367 0382 	bfi	r3, r7, #2, #1
		conn->llcp_phy.tx =
   1be8e:	f36c 0184 	bfi	r1, ip, #2, #3
		conn->llcp_phy.rx =
   1be92:	f360 1147 	bfi	r1, r0, #5, #3
		conn->llcp_phy.cmd = 0U;
   1be96:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		conn->procedure_expire =
   1be9a:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
		conn->llcp_phy.rx =
   1be9e:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
		conn->procedure_expire =
   1bea2:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_phy.rx &= p->tx_phys;
   1bea6:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	conn->llcp_phy.tx &= p->rx_phys;
   1beaa:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
   1beae:	f895 7020 	ldrb.w	r7, [r5, #32]
	conn->llcp_phy.tx &= p->rx_phys;
   1beb2:	f3c1 0c82 	ubfx	ip, r1, #2, #3
   1beb6:	ea03 030c 	and.w	r3, r3, ip
	conn->llcp_phy.rx &= p->tx_phys;
   1beba:	ea07 1751 	and.w	r7, r7, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   1bebe:	009b      	lsls	r3, r3, #2
   1bec0:	f001 0103 	and.w	r1, r1, #3
   1bec4:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   1bec8:	430b      	orrs	r3, r1
   1beca:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   1bece:	2303      	movs	r3, #3
   1bed0:	7153      	strb	r3, [r2, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   1bed2:	7250      	strb	r0, [r2, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1bed4:	7910      	ldrb	r0, [r2, #4]
	    conn->tx_head &&
   1bed6:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   1beda:	7216      	strb	r6, [r2, #8]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   1bedc:	2117      	movs	r1, #23
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1bede:	f040 0003 	orr.w	r0, r0, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   1bee2:	71d1      	strb	r1, [r2, #7]
		if (!conn->tx_ctrl) {
   1bee4:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1bee8:	7110      	strb	r0, [r2, #4]
	if (
   1beea:	2b00      	cmp	r3, #0
   1beec:	f000 80a8 	beq.w	1c040 <ull_conn_rx+0x1098>
	    !conn->llcp_enc.pause_tx &&
   1bef0:	f894 0166 	ldrb.w	r0, [r4, #358]	; 0x166
	    conn->tx_head &&
   1bef4:	0786      	lsls	r6, r0, #30
   1bef6:	f100 80a3 	bmi.w	1c040 <ull_conn_rx+0x1098>
	    !conn->llcp_phy.pause_tx &&
   1befa:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
   1befe:	07c0      	lsls	r0, r0, #31
   1bf00:	f100 809e 	bmi.w	1c040 <ull_conn_rx+0x1098>
		if (conn->tx_head == conn->tx_data) {
   1bf04:	f8d4 01d0 	ldr.w	r0, [r4, #464]	; 0x1d0
   1bf08:	4283      	cmp	r3, r0
   1bf0a:	f000 8334 	beq.w	1c576 <ull_conn_rx+0x15ce>
		} else if (!conn->tx_ctrl) {
   1bf0e:	2900      	cmp	r1, #0
   1bf10:	f000 8375 	beq.w	1c5fe <ull_conn_rx+0x1656>
	tx->next = conn->tx_ctrl_last->next;
   1bf14:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1bf18:	6819      	ldr	r1, [r3, #0]
   1bf1a:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   1bf1c:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   1bf1e:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1bf22:	6813      	ldr	r3, [r2, #0]
   1bf24:	2b00      	cmp	r3, #0
   1bf26:	f47f a88b 	bne.w	1b040 <ull_conn_rx+0x98>
		conn->tx_data_last = tx;
   1bf2a:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1bf2e:	f7ff b887 	b.w	1b040 <ull_conn_rx+0x98>
			conn->llcp_conn_param.disabled = 1U;
   1bf32:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   1bf36:	f043 0320 	orr.w	r3, r3, #32
   1bf3a:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
			if (!conn->lll.role) {
   1bf3e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1bf42:	2b00      	cmp	r3, #0
   1bf44:	f2c0 81c7 	blt.w	1c2d6 <ull_conn_rx+0x132e>
				LL_ASSERT(conn->llcp_cu.req ==
   1bf48:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   1bf4c:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   1bf50:	429a      	cmp	r2, r3
   1bf52:	d00e      	beq.n	1bf72 <ull_conn_rx+0xfca>
   1bf54:	4a8a      	ldr	r2, [pc, #552]	; (1c180 <ull_conn_rx+0x11d8>)
   1bf56:	498b      	ldr	r1, [pc, #556]	; (1c184 <ull_conn_rx+0x11dc>)
   1bf58:	488b      	ldr	r0, [pc, #556]	; (1c188 <ull_conn_rx+0x11e0>)
   1bf5a:	f641 4315 	movw	r3, #7189	; 0x1c15
   1bf5e:	f00b fae9 	bl	27534 <assert_print>
   1bf62:	4040      	eors	r0, r0
   1bf64:	f380 8811 	msr	BASEPRI, r0
   1bf68:	f04f 0003 	mov.w	r0, #3
   1bf6c:	df02      	svc	2
   1bf6e:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_conn_param.state =
   1bf72:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   1bf76:	2106      	movs	r1, #6
   1bf78:	f361 0203 	bfi	r2, r1, #0, #4
				conn->llcp_cu.ack--;
   1bf7c:	3b01      	subs	r3, #1
				conn->llcp_cu.win_size = 1U;
   1bf7e:	2101      	movs	r1, #1
				conn->llcp_cu.ack--;
   1bf80:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_cu.win_size = 1U;
   1bf84:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1bf88:	6835      	ldr	r5, [r6, #0]
				conn->llcp_conn_param.state =
   1bf8a:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1bf8e:	f3c2 1300 	ubfx	r3, r2, #4, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1bf92:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
   1bf96:	00db      	lsls	r3, r3, #3
   1bf98:	f022 020f 	bic.w	r2, r2, #15
   1bf9c:	430b      	orrs	r3, r1
   1bf9e:	4313      	orrs	r3, r2
   1bfa0:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
				conn->llcp_cu.latency =
   1bfa4:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
				conn->llcp_cu.interval =
   1bfa8:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
				conn->llcp_cu.latency =
   1bfac:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
				conn->llcp_cu.win_offset_us = 0U;
   1bfb0:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
   1bfb2:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
				conn->llcp_cu.interval =
   1bfb6:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
				conn->llcp_cu.timeout =
   1bfba:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
				conn->llcp_cu.win_offset_us = 0U;
   1bfbe:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1bfc2:	7129      	strb	r1, [r5, #4]
				break;
   1bfc4:	f7ff b83f 	b.w	1b046 <ull_conn_rx+0x9e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1bfc8:	486c      	ldr	r0, [pc, #432]	; (1c17c <ull_conn_rx+0x11d4>)
   1bfca:	f7f9 f90b 	bl	151e4 <mem_acquire>
		if (!tx) {
   1bfce:	4601      	mov	r1, r0
   1bfd0:	2800      	cmp	r0, #0
   1bfd2:	f43f ad91 	beq.w	1baf8 <ull_conn_rx+0xb50>
		conn->llcp_version.tx = 1U;
   1bfd6:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   1bfda:	f043 0301 	orr.w	r3, r3, #1
   1bfde:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1bfe2:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->len =
   1bfe4:	7146      	strb	r6, [r0, #5]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   1bfe6:	220c      	movs	r2, #12
   1bfe8:	71c2      	strb	r2, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   1bfea:	7202      	strb	r2, [r0, #8]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1bfec:	f043 0303 	orr.w	r3, r3, #3
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   1bff0:	f06f 020e 	mvn.w	r2, #14
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1bff4:	7103      	strb	r3, [r0, #4]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   1bff6:	7242      	strb	r2, [r0, #9]
		v->sub_version_number =
   1bff8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   1bffc:	2205      	movs	r2, #5
		v->sub_version_number =
   1bffe:	72c3      	strb	r3, [r0, #11]
   1c000:	7303      	strb	r3, [r0, #12]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   1c002:	7282      	strb	r2, [r0, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   1c004:	4620      	mov	r0, r4
   1c006:	f7fd ff61 	bl	19ecc <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1c00a:	2301      	movs	r3, #1
   1c00c:	712b      	strb	r3, [r5, #4]
   1c00e:	f7ff ba37 	b.w	1b480 <ull_conn_rx+0x4d8>
				      0x03) == 0x02) &&
   1c012:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   1c016:	2b03      	cmp	r3, #3
   1c018:	f47f ac9b 	bne.w	1b952 <ull_conn_rx+0x9aa>
   1c01c:	e492      	b.n	1b944 <ull_conn_rx+0x99c>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1c01e:	712f      	strb	r7, [r5, #4]
		*err = 0U;
   1c020:	2000      	movs	r0, #0
   1c022:	f7ff b810 	b.w	1b046 <ull_conn_rx+0x9e>
				nack = reject_ext_ind_send(conn, *rx,
   1c026:	2323      	movs	r3, #35	; 0x23
   1c028:	f7ff b9cc 	b.w	1b3c4 <ull_conn_rx+0x41c>
			conn->llcp_length.disabled = 1U;
   1c02c:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
   1c030:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->llcp_length.disabled = 1U;
   1c034:	f043 0308 	orr.w	r3, r3, #8
   1c038:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
   1c03c:	f7ff b9a6 	b.w	1b38c <ull_conn_rx+0x3e4>
		if (!conn->tx_ctrl) {
   1c040:	2900      	cmp	r1, #0
   1c042:	f47f af67 	bne.w	1bf14 <ull_conn_rx+0xf6c>
			tx->next = conn->tx_head;
   1c046:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   1c048:	e9c4 2271 	strd	r2, r2, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1c04c:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
   1c050:	e767      	b.n	1bf22 <ull_conn_rx+0xf7a>
   1c052:	4651      	mov	r1, sl
   1c054:	e5df      	b.n	1bc16 <ull_conn_rx+0xc6e>
				conn->llcp_phy.state =
   1c056:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
   1c05a:	4281      	cmp	r1, r0
				conn->llcp_phy.state =
   1c05c:	f043 0303 	orr.w	r3, r3, #3
   1c060:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
   1c064:	d111      	bne.n	1c08a <ull_conn_rx+0x10e2>
					conn->llcp_phy.tx =
   1c066:	f8b4 21be 	ldrh.w	r2, [r4, #446]	; 0x1be
						conn->phy_pref_rx;
   1c06a:	f894 01c0 	ldrb.w	r0, [r4, #448]	; 0x1c0
					conn->llcp_phy.ack--;
   1c06e:	1e4b      	subs	r3, r1, #1
					conn->llcp_phy.tx =
   1c070:	f422 629f 	bic.w	r2, r2, #1272	; 0x4f8
					conn->llcp_phy.ack--;
   1c074:	f884 31bd 	strb.w	r3, [r4, #445]	; 0x1bd
					conn->llcp_phy.tx =
   1c078:	f240 43fc 	movw	r3, #1276	; 0x4fc
   1c07c:	f022 0204 	bic.w	r2, r2, #4
   1c080:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   1c084:	4313      	orrs	r3, r2
   1c086:	f8a4 31be 	strh.w	r3, [r4, #446]	; 0x1be
				conn->llcp_phy.rx &= p->tx_phys;
   1c08a:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   1c08e:	f895 1020 	ldrb.w	r1, [r5, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   1c092:	f3c3 0082 	ubfx	r0, r3, #2, #3
				conn->llcp_phy.rx &= p->tx_phys;
   1c096:	ea01 1153 	and.w	r1, r1, r3, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   1c09a:	f003 0203 	and.w	r2, r3, #3
   1c09e:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1c0a2:	4003      	ands	r3, r0
   1c0a4:	009b      	lsls	r3, r3, #2
   1c0a6:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   1c0aa:	4313      	orrs	r3, r2
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   1c0ac:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   1c0b0:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   1c0b4:	d002      	beq.n	1c0bc <ull_conn_rx+0x1114>
   1c0b6:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   1c0ba:	d105      	bne.n	1c0c8 <ull_conn_rx+0x1120>
					conn->llcp_phy.tx = 0;
   1c0bc:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   1c0c0:	f003 0303 	and.w	r3, r3, #3
   1c0c4:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				conn->llcp_phy.pause_tx = 1U;
   1c0c8:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1c0cc:	2201      	movs	r2, #1
				conn->llcp_phy.pause_tx = 1U;
   1c0ce:	4313      	orrs	r3, r2
   1c0d0:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
	int nack = 0;
   1c0d4:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1c0d6:	712a      	strb	r2, [r5, #4]
   1c0d8:	f7fe bfb5 	b.w	1b046 <ull_conn_rx+0x9e>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1c0dc:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   1c0e0:	f36f 0301 	bfc	r3, #0, #2
   1c0e4:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   1c0e8:	f7ff bb20 	b.w	1b72c <ull_conn_rx+0x784>
				nack = reject_ext_ind_send(conn, *rx,
   1c0ec:	2323      	movs	r3, #35	; 0x23
   1c0ee:	2216      	movs	r2, #22
   1c0f0:	f7ff b969 	b.w	1b3c6 <ull_conn_rx+0x41e>
			lll->phy_tx_time = lll->phy_tx;
   1c0f4:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
			conn->llcp_phy.pause_tx = 0U;
   1c0f8:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
			conn->llcp_phy.ack = conn->llcp_phy.req;
   1c0fc:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
			conn->llcp_phy.pause_tx = 0U;
   1c100:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   1c104:	460a      	mov	r2, r1
			conn->llcp_phy.pause_tx = 0U;
   1c106:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   1c10a:	f361 1206 	bfi	r2, r1, #4, #3
   1c10e:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			if (conn->llcp_phy.cmd) {
   1c112:	f013 0f04 	tst.w	r3, #4
			conn->llcp_phy.pause_tx = 0U;
   1c116:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
			lll->phy_tx_time = lll->phy_tx;
   1c11a:	f3c1 0102 	ubfx	r1, r1, #0, #3
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1c11e:	6833      	ldr	r3, [r6, #0]
			if (conn->llcp_phy.cmd) {
   1c120:	f000 80ec 	beq.w	1c2fc <ull_conn_rx+0x1354>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1c124:	221d      	movs	r2, #29
   1c126:	711a      	strb	r2, [r3, #4]
				p->status = 0U;
   1c128:	2300      	movs	r3, #0
   1c12a:	772b      	strb	r3, [r5, #28]
				p->tx = lll->phy_tx;
   1c12c:	7769      	strb	r1, [r5, #29]
				p->rx = lll->phy_rx;
   1c12e:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   1c132:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1c136:	77ab      	strb	r3, [r5, #30]
   1c138:	f7ff b928 	b.w	1b38c <ull_conn_rx+0x3e4>
	conn->llcp_enc.pause_rx = 0U;
   1c13c:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
   1c140:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
	conn->procedure_expire = 0U;
   1c144:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   1c146:	f021 0103 	bic.w	r1, r1, #3
   1c14a:	f884 1166 	strb.w	r1, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
   1c14e:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   1c152:	4618      	mov	r0, r3
   1c154:	f7fe bf77 	b.w	1b046 <ull_conn_rx+0x9e>
	    ((pdu_data_tx->llctrl.opcode !=
   1c158:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1c15a:	2b03      	cmp	r3, #3
   1c15c:	f43f acdd 	beq.w	1bb1a <ull_conn_rx+0xb72>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1c160:	2b0a      	cmp	r3, #10
   1c162:	f47f ad2b 	bne.w	1bbbc <ull_conn_rx+0xc14>
   1c166:	e4d8      	b.n	1bb1a <ull_conn_rx+0xb72>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1c168:	2301      	movs	r3, #1
   1c16a:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_INSTANT_PASSED;
   1c16c:	2328      	movs	r3, #40	; 0x28
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = phy_upd_ind_recv(conn, link, rx, pdu_rx);
		if (err) {
			conn->llcp_terminate.reason_final = err;
   1c16e:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
	int nack = 0;
   1c172:	2000      	movs	r0, #0
   1c174:	f7fe bf67 	b.w	1b046 <ull_conn_rx+0x9e>
   1c178:	20002070 	.word	0x20002070
   1c17c:	20002104 	.word	0x20002104
   1c180:	0002fd50 	.word	0x0002fd50
   1c184:	0002fe9c 	.word	0x0002fe9c
   1c188:	0002f8a0 	.word	0x0002f8a0
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   1c18c:	2101      	movs	r1, #1
   1c18e:	f10d 000f 	add.w	r0, sp, #15
	phy = ind->c_to_p_phy;
   1c192:	f88d 200f 	strb.w	r2, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   1c196:	f7f9 f9fb 	bl	15590 <util_ones_count_get>
   1c19a:	2801      	cmp	r0, #1
   1c19c:	f200 80b2 	bhi.w	1c304 <ull_conn_rx+0x135c>
	phy = ind->p_to_c_phy;
   1c1a0:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1c1a4:	f88d 300f 	strb.w	r3, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   1c1a8:	f10d 000f 	add.w	r0, sp, #15
   1c1ac:	2101      	movs	r1, #1
   1c1ae:	f7f9 f9ef 	bl	15590 <util_ones_count_get>
   1c1b2:	2801      	cmp	r0, #1
   1c1b4:	f200 80a6 	bhi.w	1c304 <ull_conn_rx+0x135c>
	instant = sys_le16_to_cpu(ind->instant);
   1c1b8:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   1c1ba:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1c1bc:	1ad3      	subs	r3, r2, r3
   1c1be:	041b      	lsls	r3, r3, #16
   1c1c0:	f100 8288 	bmi.w	1c6d4 <ull_conn_rx+0x172c>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1c1c4:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   1c1c8:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1c1cc:	1a5b      	subs	r3, r3, r1
   1c1ce:	f003 0303 	and.w	r3, r3, #3
   1c1d2:	2b02      	cmp	r3, #2
   1c1d4:	f000 8279 	beq.w	1c6ca <ull_conn_rx+0x1722>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   1c1d8:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
   1c1dc:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   1c1e0:	4283      	cmp	r3, r0
   1c1e2:	d018      	beq.n	1c216 <ull_conn_rx+0x126e>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   1c1e4:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   1c1e8:	f003 0303 	and.w	r3, r3, #3
   1c1ec:	2b02      	cmp	r3, #2
   1c1ee:	d112      	bne.n	1c216 <ull_conn_rx+0x126e>
		conn->llcp_phy.pause_tx = 0U;
   1c1f0:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1c1f4:	f884 01bd 	strb.w	r0, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   1c1f8:	f36f 0300 	bfc	r3, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1c1fc:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
		conn->llcp_phy.pause_tx = 0U;
   1c200:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1c204:	f3c3 0380 	ubfx	r3, r3, #2, #1
   1c208:	f363 0041 	bfi	r0, r3, #1, #1
		conn->procedure_expire = 0U;
   1c20c:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1c20e:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
		conn->procedure_expire = 0U;
   1c212:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp.phy_upd_ind.tx = ind->p_to_c_phy;
   1c216:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	conn->llcp.phy_upd_ind.rx = ind->c_to_p_phy;
   1c21a:	f895 0020 	ldrb.w	r0, [r5, #32]
	conn->llcp.phy_upd_ind.instant = instant;
   1c21e:	f8a4 20ea 	strh.w	r2, [r4, #234]	; 0xea
	conn->llcp.phy_upd_ind.initiate = 0U;
   1c222:	009b      	lsls	r3, r3, #2
   1c224:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   1c228:	f003 031c 	and.w	r3, r3, #28
   1c22c:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   1c230:	f002 0202 	and.w	r2, r2, #2
   1c234:	4313      	orrs	r3, r2
   1c236:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	link->mem = conn->llcp_rx;
   1c23a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1c23e:	607b      	str	r3, [r7, #4]
	(*rx)->hdr.link = link;
   1c240:	6833      	ldr	r3, [r6, #0]
   1c242:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   1c244:	6832      	ldr	r2, [r6, #0]
   1c246:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	*rx = NULL;
   1c24a:	2300      	movs	r3, #0
   1c24c:	6033      	str	r3, [r6, #0]
	if (conn->llcp.phy_upd_ind.tx) {
   1c24e:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_type = LLCP_PHY_UPD;
   1c252:	2006      	movs	r0, #6
	conn->llcp_ack -= 2U;
   1c254:	3902      	subs	r1, #2
	conn->llcp_type = LLCP_PHY_UPD;
   1c256:	f884 00e6 	strb.w	r0, [r4, #230]	; 0xe6
	if (conn->llcp.phy_upd_ind.tx) {
   1c25a:	f012 001c 	ands.w	r0, r2, #28
	conn->llcp_ack -= 2U;
   1c25e:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	if (conn->llcp.phy_upd_ind.tx) {
   1c262:	f43e aef0 	beq.w	1b046 <ull_conn_rx+0x9e>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   1c266:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
   1c26a:	f3c2 0282 	ubfx	r2, r2, #2, #3
   1c26e:	f362 1106 	bfi	r1, r2, #4, #3
   1c272:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
	int nack = 0;
   1c276:	4618      	mov	r0, r3
   1c278:	f7fe bee5 	b.w	1b046 <ull_conn_rx+0x9e>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1c27c:	2301      	movs	r3, #1
   1c27e:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_DIFF_TRANS_COLLISION;
   1c280:	232a      	movs	r3, #42	; 0x2a
   1c282:	e774      	b.n	1c16e <ull_conn_rx+0x11c6>
			conn->procedure_expire = 0U;
   1c284:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   1c286:	4551      	cmp	r1, sl
			conn->llcp_length.ack = conn->llcp_length.req;
   1c288:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->procedure_expire = 0U;
   1c28c:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   1c290:	f000 8129 	beq.w	1c4e6 <ull_conn_rx+0x153e>
			conn->lll.max_rx_time = eff_rx_time;
   1c294:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
			if (tx) {
   1c298:	2b00      	cmp	r3, #0
   1c29a:	f000 811f 	beq.w	1c4dc <ull_conn_rx+0x1534>
					(conn->llcp_length.req - 1);
   1c29e:	3a01      	subs	r2, #1
				conn->llcp_length.ack =
   1c2a0:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
				conn->llcp_length.state =
   1c2a4:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
				conn->llcp_length.rx_octets = eff_rx_octets;
   1c2a8:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
				conn->llcp_length.state =
   1c2ac:	2603      	movs	r6, #3
   1c2ae:	f366 0202 	bfi	r2, r6, #0, #3
				conn->llcp_length.tx_octets = eff_tx_octets;
   1c2b2:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
				conn->llcp_length.rx_time = eff_rx_time;
   1c2b6:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
				conn->llcp_length.tx_time = eff_tx_time;
   1c2ba:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
				conn->llcp_length.state =
   1c2be:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   1c2c2:	f8a5 e020 	strh.w	lr, [r5, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   1c2c6:	84a9      	strh	r1, [r5, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   1c2c8:	f8a5 c022 	strh.w	ip, [r5, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   1c2cc:	84e8      	strh	r0, [r5, #38]	; 0x26
   1c2ce:	e4d9      	b.n	1bc84 <ull_conn_rx+0xcdc>
		conn_upd_curr = conn;
   1c2d0:	601c      	str	r4, [r3, #0]
   1c2d2:	f7ff b810 	b.w	1b2f6 <ull_conn_rx+0x34e>
	conn_upd_curr = NULL;
   1c2d6:	4bce      	ldr	r3, [pc, #824]	; (1c610 <ull_conn_rx+0x1668>)
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1c2d8:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   1c2dc:	2200      	movs	r2, #0
   1c2de:	601a      	str	r2, [r3, #0]
			if (!conn->llcp_conn_param.cmd) {
   1c2e0:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   1c2e4:	f013 0310 	ands.w	r3, r3, #16
   1c2e8:	f040 80c5 	bne.w	1c476 <ull_conn_rx+0x14ce>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1c2ec:	2201      	movs	r2, #1
   1c2ee:	712a      	strb	r2, [r5, #4]
	int nack = 0;
   1c2f0:	4618      	mov	r0, r3
				break;
   1c2f2:	f7fe bea8 	b.w	1b046 <ull_conn_rx+0x9e>
	struct node_tx *tx = NULL;
   1c2f6:	2300      	movs	r3, #0
   1c2f8:	f7fe bfc1 	b.w	1b27e <ull_conn_rx+0x2d6>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1c2fc:	2201      	movs	r2, #1
   1c2fe:	711a      	strb	r2, [r3, #4]
   1c300:	f7ff b844 	b.w	1b38c <ull_conn_rx+0x3e4>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1c304:	6833      	ldr	r3, [r6, #0]
   1c306:	2201      	movs	r2, #1
   1c308:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INVALID_LL_PARAM;
   1c30a:	231e      	movs	r3, #30
   1c30c:	e72f      	b.n	1c16e <ull_conn_rx+0x11c6>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   1c30e:	4ac1      	ldr	r2, [pc, #772]	; (1c614 <ull_conn_rx+0x166c>)
   1c310:	49c1      	ldr	r1, [pc, #772]	; (1c618 <ull_conn_rx+0x1670>)
   1c312:	48c2      	ldr	r0, [pc, #776]	; (1c61c <ull_conn_rx+0x1674>)
   1c314:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
   1c318:	f00b f90c 	bl	27534 <assert_print>
   1c31c:	4040      	eors	r0, r0
   1c31e:	f380 8811 	msr	BASEPRI, r0
   1c322:	f04f 0003 	mov.w	r0, #3
   1c326:	df02      	svc	2
   1c328:	f7ff bb7f 	b.w	1ba2a <ull_conn_rx+0xa82>
				      0x03) == 0x02) &&
   1c32c:	f894 60e6 	ldrb.w	r6, [r4, #230]	; 0xe6
   1c330:	2e03      	cmp	r6, #3
   1c332:	f47f ac30 	bne.w	1bb96 <ull_conn_rx+0xbee>
   1c336:	e427      	b.n	1bb88 <ull_conn_rx+0xbe0>
				conn->llcp_length.state =
   1c338:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
				conn->lll.max_tx_octets = eff_tx_octets;
   1c33c:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->llcp_length.state =
   1c340:	2504      	movs	r5, #4
   1c342:	f365 0202 	bfi	r2, r5, #0, #3
				conn->lll.max_tx_time = eff_tx_time;
   1c346:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
				conn->llcp_length.state =
   1c34a:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
   1c34e:	e48f      	b.n	1bc70 <ull_conn_rx+0xcc8>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1c350:	2b23      	cmp	r3, #35	; 0x23
   1c352:	f43f ad57 	beq.w	1be04 <ull_conn_rx+0xe5c>
			conn->periph.ticks_to_offset =
   1c356:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
   1c35a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
   1c35e:	e551      	b.n	1be04 <ull_conn_rx+0xe5c>
				uint16_t interval_min =
   1c360:	f8b5 9020 	ldrh.w	r9, [r5, #32]
   1c364:	fa1f f689 	uxth.w	r6, r9
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1c368:	2e05      	cmp	r6, #5
   1c36a:	f67f ad5c 	bls.w	1be26 <ull_conn_rx+0xe7e>
				uint16_t interval_max =
   1c36e:	f8b5 8022 	ldrh.w	r8, [r5, #34]	; 0x22
   1c372:	fa1f fe88 	uxth.w	lr, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1c376:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
   1c37a:	f63f ad54 	bhi.w	1be26 <ull_conn_rx+0xe7e>
				    (interval_max > 3200) ||
   1c37e:	4576      	cmp	r6, lr
   1c380:	f63f ad51 	bhi.w	1be26 <ull_conn_rx+0xe7e>
				uint16_t latency =
   1c384:	8cae      	ldrh	r6, [r5, #36]	; 0x24
   1c386:	f8ad 6006 	strh.w	r6, [sp, #6]
   1c38a:	b2b6      	uxth	r6, r6
				    (interval_min > interval_max) ||
   1c38c:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
   1c390:	f4bf ad49 	bcs.w	1be26 <ull_conn_rx+0xe7e>
				uint16_t timeout =
   1c394:	8cef      	ldrh	r7, [r5, #38]	; 0x26
   1c396:	fa1f fc87 	uxth.w	ip, r7
				    (latency > 499) ||
   1c39a:	f1ac 0a0a 	sub.w	sl, ip, #10
   1c39e:	f640 4b76 	movw	fp, #3190	; 0xc76
   1c3a2:	fa1f fa8a 	uxth.w	sl, sl
   1c3a6:	45da      	cmp	sl, fp
   1c3a8:	f63f ad3d 	bhi.w	1be26 <ull_conn_rx+0xe7e>
				     ((latency + 1) * interval_max)) ||
   1c3ac:	f106 0a01 	add.w	sl, r6, #1
   1c3b0:	fa1f fa8a 	uxth.w	sl, sl
   1c3b4:	fb0e fa0a 	mul.w	sl, lr, sl
				    (timeout > 3200) ||
   1c3b8:	ebba 0f8c 	cmp.w	sl, ip, lsl #2
   1c3bc:	f4bf ad33 	bcs.w	1be26 <ull_conn_rx+0xe7e>
				     ((latency + 1) * interval_max)) ||
   1c3c0:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   1c3c4:	45de      	cmp	lr, fp
   1c3c6:	f4ff ad2e 	bcc.w	1be26 <ull_conn_rx+0xe7e>
				conn->llcp_conn_param.interval_max =
   1c3ca:	f8a4 818a 	strh.w	r8, [r4, #394]	; 0x18a
				conn->llcp_conn_param.latency =	latency;
   1c3ce:	f8bd 8006 	ldrh.w	r8, [sp, #6]
				conn->llcp_conn_param.interval_min =
   1c3d2:	f8a4 9188 	strh.w	r9, [r4, #392]	; 0x188
				conn->llcp_conn_param.latency =	latency;
   1c3d6:	f8a4 818c 	strh.w	r8, [r4, #396]	; 0x18c
				conn->llcp_conn_param.timeout =	timeout;
   1c3da:	f8a4 718e 	strh.w	r7, [r4, #398]	; 0x18e
				conn->llcp_conn_param.preferred_periodicity =
   1c3de:	f884 b190 	strb.w	fp, [r4, #400]	; 0x190
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   1c3e2:	f895 802a 	ldrb.w	r8, [r5, #42]	; 0x2a
   1c3e6:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   1c3ea:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   1c3ee:	f8a4 7192 	strh.w	r7, [r4, #402]	; 0x192
					sys_le16_to_cpu(cpr->offset0);
   1c3f2:	f895 802c 	ldrb.w	r8, [r5, #44]	; 0x2c
   1c3f6:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   1c3fa:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset0 =
   1c3fe:	f8a4 7194 	strh.w	r7, [r4, #404]	; 0x194
					sys_le16_to_cpu(cpr->offset1);
   1c402:	f895 802e 	ldrb.w	r8, [r5, #46]	; 0x2e
   1c406:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   1c40a:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset1 =
   1c40e:	f8a4 7196 	strh.w	r7, [r4, #406]	; 0x196
					sys_le16_to_cpu(cpr->offset2);
   1c412:	f895 8030 	ldrb.w	r8, [r5, #48]	; 0x30
   1c416:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   1c41a:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset2 =
   1c41e:	f8a4 7198 	strh.w	r7, [r4, #408]	; 0x198
					sys_le16_to_cpu(cpr->offset3);
   1c422:	f895 8032 	ldrb.w	r8, [r5, #50]	; 0x32
   1c426:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   1c42a:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset3 =
   1c42e:	f8a4 719a 	strh.w	r7, [r4, #410]	; 0x19a
					sys_le16_to_cpu(cpr->offset4);
   1c432:	f895 8034 	ldrb.w	r8, [r5, #52]	; 0x34
   1c436:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   1c43a:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset4 =
   1c43e:	f8a4 719c 	strh.w	r7, [r4, #412]	; 0x19c
					sys_le16_to_cpu(cpr->offset5);
   1c442:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   1c446:	f895 8036 	ldrb.w	r8, [r5, #54]	; 0x36
   1c44a:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset5 =
   1c44e:	f8a4 719e 	strh.w	r7, [r4, #414]	; 0x19e
				     lll->interval) ||
   1c452:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
				if ((conn->llcp_conn_param.interval_max !=
   1c454:	45be      	cmp	lr, r7
   1c456:	f000 809a 	beq.w	1c58e <ull_conn_rx+0x15e6>
					if (conn->llcp_enc.pause_tx) {
   1c45a:	f012 0f02 	tst.w	r2, #2
						conn->llcp_conn_param.state =
   1c45e:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
					if (conn->llcp_enc.pause_tx) {
   1c462:	f43f acad 	beq.w	1bdc0 <ull_conn_rx+0xe18>
						conn->llcp_conn_param.state =
   1c466:	2602      	movs	r6, #2
   1c468:	f366 0203 	bfi	r2, r6, #0, #4
   1c46c:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
						(*rx)->hdr.type =
   1c470:	2201      	movs	r2, #1
   1c472:	712a      	strb	r2, [r5, #4]
   1c474:	e4a9      	b.n	1bdca <ull_conn_rx+0xe22>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1c476:	2319      	movs	r3, #25
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   1c478:	f01c 0f01 	tst.w	ip, #1
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1c47c:	712b      	strb	r3, [r5, #4]
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   1c47e:	d15e      	bne.n	1c53e <ull_conn_rx+0x1596>
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1c480:	231a      	movs	r3, #26
   1c482:	772b      	strb	r3, [r5, #28]
			cu->interval = lll->interval;
   1c484:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			cu->timeout = conn->supervision_reload *
   1c486:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			cu->latency = lll->latency;
   1c48a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			cu->interval = lll->interval;
   1c48c:	83ea      	strh	r2, [r5, #30]
			cu->timeout = conn->supervision_reload *
   1c48e:	fb02 f303 	mul.w	r3, r2, r3
				      lll->interval * 125U / 1000;
   1c492:	227d      	movs	r2, #125	; 0x7d
   1c494:	fb02 f303 	mul.w	r3, r2, r3
			cu->latency = lll->latency;
   1c498:	8429      	strh	r1, [r5, #32]
				      lll->interval * 125U / 1000;
   1c49a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c49e:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   1c4a2:	846b      	strh	r3, [r5, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   1c4a4:	f7fe bf72 	b.w	1b38c <ull_conn_rx+0x3e4>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   1c4a8:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
			conn->llcp_ack += 2U;
   1c4ac:	3202      	adds	r2, #2
   1c4ae:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   1c4b2:	2b00      	cmp	r3, #0
   1c4b4:	d151      	bne.n	1c55a <ull_conn_rx+0x15b2>
			conn->periph.llcp_type = conn->llcp_type;
   1c4b6:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   1c4ba:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
   1c4be:	f7fe be63 	b.w	1b188 <ull_conn_rx+0x1e0>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1c4c2:	6832      	ldr	r2, [r6, #0]
   1c4c4:	201d      	movs	r0, #29
   1c4c6:	7110      	strb	r0, [r2, #4]
		p->status = 0U;
   1c4c8:	772b      	strb	r3, [r5, #28]
		p->tx = conn->lll.phy_tx;
   1c4ca:	7769      	strb	r1, [r5, #29]
		p->rx = conn->lll.phy_rx;
   1c4cc:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
	int nack = 0;
   1c4d0:	4618      	mov	r0, r3
		p->rx = conn->lll.phy_rx;
   1c4d2:	f3c2 0302 	ubfx	r3, r2, #0, #3
   1c4d6:	77ab      	strb	r3, [r5, #30]
		if (err) {
   1c4d8:	f7fe bdb5 	b.w	1b046 <ull_conn_rx+0x9e>
				conn->lll.max_tx_octets = eff_tx_octets;
   1c4dc:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->lll.max_tx_time = eff_tx_time;
   1c4e0:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
   1c4e4:	e6ed      	b.n	1c2c2 <ull_conn_rx+0x131a>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   1c4e6:	4540      	cmp	r0, r8
   1c4e8:	f47f aed4 	bne.w	1c294 <ull_conn_rx+0x12ec>
			    eff_rx_time == conn->lll.max_rx_time &&
   1c4ec:	45cc      	cmp	ip, r9
   1c4ee:	f47f aed1 	bne.w	1c294 <ull_conn_rx+0x12ec>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1c4f2:	6832      	ldr	r2, [r6, #0]
   1c4f4:	2501      	movs	r5, #1
   1c4f6:	7115      	strb	r5, [r2, #4]
				goto send_length_resp;
   1c4f8:	f7ff bbc4 	b.w	1bc84 <ull_conn_rx+0xcdc>
			conn->tx_data = conn->tx_data->next;
   1c4fc:	681a      	ldr	r2, [r3, #0]
   1c4fe:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1c502:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1c506:	2a00      	cmp	r2, #0
   1c508:	f47f a8a7 	bne.w	1b65a <ull_conn_rx+0x6b2>
			tx->next = conn->tx_head->next;
   1c50c:	681a      	ldr	r2, [r3, #0]
   1c50e:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1c510:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   1c512:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   1c516:	f7ff b8a7 	b.w	1b668 <ull_conn_rx+0x6c0>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1c51a:	2a23      	cmp	r2, #35	; 0x23
   1c51c:	f43f aa6f 	beq.w	1b9fe <ull_conn_rx+0xa56>
			conn->periph.ticks_to_offset =
   1c520:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
   1c524:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
   1c528:	f7ff ba69 	b.w	1b9fe <ull_conn_rx+0xa56>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1c52c:	791a      	ldrb	r2, [r3, #4]
   1c52e:	f002 0203 	and.w	r2, r2, #3
   1c532:	2a03      	cmp	r2, #3
   1c534:	d076      	beq.n	1c624 <ull_conn_rx+0x167c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1c536:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1c53a:	f7ff b88e 	b.w	1b65a <ull_conn_rx+0x6b2>
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   1c53e:	4a35      	ldr	r2, [pc, #212]	; (1c614 <ull_conn_rx+0x166c>)
   1c540:	4935      	ldr	r1, [pc, #212]	; (1c618 <ull_conn_rx+0x1670>)
   1c542:	4836      	ldr	r0, [pc, #216]	; (1c61c <ull_conn_rx+0x1674>)
   1c544:	f641 4342 	movw	r3, #7234	; 0x1c42
   1c548:	f00a fff4 	bl	27534 <assert_print>
   1c54c:	4040      	eors	r0, r0
   1c54e:	f380 8811 	msr	BASEPRI, r0
   1c552:	f04f 0003 	mov.w	r0, #3
   1c556:	df02      	svc	2
   1c558:	e792      	b.n	1c480 <ull_conn_rx+0x14d8>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   1c55a:	4a2e      	ldr	r2, [pc, #184]	; (1c614 <ull_conn_rx+0x166c>)
   1c55c:	4930      	ldr	r1, [pc, #192]	; (1c620 <ull_conn_rx+0x1678>)
   1c55e:	482f      	ldr	r0, [pc, #188]	; (1c61c <ull_conn_rx+0x1674>)
   1c560:	f641 13cd 	movw	r3, #6605	; 0x19cd
   1c564:	f00a ffe6 	bl	27534 <assert_print>
   1c568:	4040      	eors	r0, r0
   1c56a:	f380 8811 	msr	BASEPRI, r0
   1c56e:	f04f 0003 	mov.w	r0, #3
   1c572:	df02      	svc	2
   1c574:	e79f      	b.n	1c4b6 <ull_conn_rx+0x150e>
			conn->tx_data = conn->tx_data->next;
   1c576:	6818      	ldr	r0, [r3, #0]
   1c578:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1c57c:	2900      	cmp	r1, #0
   1c57e:	f47f acc9 	bne.w	1bf14 <ull_conn_rx+0xf6c>
			tx->next = conn->tx_head->next;
   1c582:	6819      	ldr	r1, [r3, #0]
   1c584:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   1c586:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   1c588:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   1c58c:	e4c9      	b.n	1bf22 <ull_conn_rx+0xf7a>
				     lll->interval) ||
   1c58e:	f8b4 e02c 	ldrh.w	lr, [r4, #44]	; 0x2c
   1c592:	45b6      	cmp	lr, r6
   1c594:	f47f af61 	bne.w	1c45a <ull_conn_rx+0x14b2>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1c598:	f240 46e2 	movw	r6, #1250	; 0x4e2
   1c59c:	fb06 f707 	mul.w	r7, r6, r7
   1c5a0:	f242 7610 	movw	r6, #10000	; 0x2710
   1c5a4:	fb06 760c 	mla	r6, r6, ip, r7
   1c5a8:	3e01      	subs	r6, #1
   1c5aa:	fbb6 f6f7 	udiv	r6, r6, r7
				     lll->latency) ||
   1c5ae:	f8b4 70c2 	ldrh.w	r7, [r4, #194]	; 0xc2
   1c5b2:	b2b6      	uxth	r6, r6
   1c5b4:	42b7      	cmp	r7, r6
   1c5b6:	f47f af50 	bne.w	1c45a <ull_conn_rx+0x14b2>
				conn->llcp_conn_param.state =
   1c5ba:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   1c5be:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   1c5c2:	f042 0201 	orr.w	r2, r2, #1
   1c5c6:	f8a4 2186 	strh.w	r2, [r4, #390]	; 0x186
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1c5ca:	2201      	movs	r2, #1
   1c5cc:	712a      	strb	r2, [r5, #4]
   1c5ce:	f7ff bbfc 	b.w	1bdca <ull_conn_rx+0xe22>
			     lll->interval) ||
   1c5d2:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
   1c5d4:	4567      	cmp	r7, ip
   1c5d6:	f47f abf1 	bne.w	1bdbc <ull_conn_rx+0xe14>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1c5da:	f240 47e2 	movw	r7, #1250	; 0x4e2
   1c5de:	fb07 f606 	mul.w	r6, r7, r6
   1c5e2:	f242 7710 	movw	r7, #10000	; 0x2710
   1c5e6:	fb07 6202 	mla	r2, r7, r2, r6
   1c5ea:	3a01      	subs	r2, #1
   1c5ec:	fbb2 f2f6 	udiv	r2, r2, r6
			    (conn->llcp_conn_param.latency != lll->latency) ||
   1c5f0:	f8b4 60c2 	ldrh.w	r6, [r4, #194]	; 0xc2
   1c5f4:	b292      	uxth	r2, r2
   1c5f6:	4296      	cmp	r6, r2
   1c5f8:	f47f abe0 	bne.w	1bdbc <ull_conn_rx+0xe14>
   1c5fc:	e7dd      	b.n	1c5ba <ull_conn_rx+0x1612>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1c5fe:	7919      	ldrb	r1, [r3, #4]
   1c600:	f001 0103 	and.w	r1, r1, #3
   1c604:	2903      	cmp	r1, #3
   1c606:	d014      	beq.n	1c632 <ull_conn_rx+0x168a>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1c608:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1c60c:	e482      	b.n	1bf14 <ull_conn_rx+0xf6c>
   1c60e:	bf00      	nop
   1c610:	20002070 	.word	0x20002070
   1c614:	0002fd50 	.word	0x0002fd50
   1c618:	0002f9c8 	.word	0x0002f9c8
   1c61c:	0002f8a0 	.word	0x0002f8a0
   1c620:	0002fe78 	.word	0x0002fe78
	    ((pdu_data_tx->llctrl.opcode !=
   1c624:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1c626:	2a03      	cmp	r2, #3
   1c628:	f43f af70 	beq.w	1c50c <ull_conn_rx+0x1564>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1c62c:	2a0a      	cmp	r2, #10
   1c62e:	d182      	bne.n	1c536 <ull_conn_rx+0x158e>
   1c630:	e76c      	b.n	1c50c <ull_conn_rx+0x1564>
	    ((pdu_data_tx->llctrl.opcode !=
   1c632:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1c634:	2903      	cmp	r1, #3
   1c636:	d0a4      	beq.n	1c582 <ull_conn_rx+0x15da>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1c638:	290a      	cmp	r1, #10
   1c63a:	d1e5      	bne.n	1c608 <ull_conn_rx+0x1660>
   1c63c:	e7a1      	b.n	1c582 <ull_conn_rx+0x15da>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   1c63e:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   1c642:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   1c646:	429a      	cmp	r2, r3
   1c648:	d00e      	beq.n	1c668 <ull_conn_rx+0x16c0>
   1c64a:	4a25      	ldr	r2, [pc, #148]	; (1c6e0 <ull_conn_rx+0x1738>)
   1c64c:	4925      	ldr	r1, [pc, #148]	; (1c6e4 <ull_conn_rx+0x173c>)
   1c64e:	4826      	ldr	r0, [pc, #152]	; (1c6e8 <ull_conn_rx+0x1740>)
   1c650:	f241 43cf 	movw	r3, #5327	; 0x14cf
   1c654:	f00a ff6e 	bl	27534 <assert_print>
   1c658:	4040      	eors	r0, r0
   1c65a:	f380 8811 	msr	BASEPRI, r0
   1c65e:	f04f 0003 	mov.w	r0, #3
   1c662:	df02      	svc	2
   1c664:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1c668:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   1c66c:	2106      	movs	r1, #6
   1c66e:	f361 0203 	bfi	r2, r1, #0, #4
		conn->llcp_cu.ack--;
   1c672:	3b01      	subs	r3, #1
   1c674:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1c678:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1c67c:	f3c2 1300 	ubfx	r3, r2, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1c680:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.win_size = 1U;
   1c684:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1c686:	00db      	lsls	r3, r3, #3
   1c688:	430b      	orrs	r3, r1
   1c68a:	f022 020f 	bic.w	r2, r2, #15
   1c68e:	4313      	orrs	r3, r2
		conn->llcp_cu.win_size = 1U;
   1c690:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1c694:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   1c698:	f8b4 118a 	ldrh.w	r1, [r4, #394]	; 0x18a
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1c69c:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
   1c6a0:	2000      	movs	r0, #0
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1c6a2:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
		conn->llcp_cu.win_offset_us = 0U;
   1c6a6:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   1c6aa:	f8a4 1110 	strh.w	r1, [r4, #272]	; 0x110
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1c6ae:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1c6b2:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
	if (err) {
   1c6b6:	f7fe bcc3 	b.w	1b040 <ull_conn_rx+0x98>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   1c6ba:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   1c6be:	f011 0f06 	tst.w	r1, #6
   1c6c2:	f43f aa9f 	beq.w	1bc04 <ull_conn_rx+0xc5c>
   1c6c6:	f7fe bdd3 	b.w	1b270 <ull_conn_rx+0x2c8>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1c6ca:	6833      	ldr	r3, [r6, #0]
   1c6cc:	2201      	movs	r2, #1
   1c6ce:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   1c6d0:	232a      	movs	r3, #42	; 0x2a
   1c6d2:	e54c      	b.n	1c16e <ull_conn_rx+0x11c6>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1c6d4:	6833      	ldr	r3, [r6, #0]
   1c6d6:	2201      	movs	r2, #1
   1c6d8:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   1c6da:	2328      	movs	r3, #40	; 0x28
   1c6dc:	e547      	b.n	1c16e <ull_conn_rx+0x11c6>
   1c6de:	bf00      	nop
   1c6e0:	0002fd50 	.word	0x0002fd50
   1c6e4:	0002fe9c 	.word	0x0002fe9c
   1c6e8:	0002f8a0 	.word	0x0002f8a0

0001c6ec <ull_conn_llcp>:
{
   1c6ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c6f0:	4604      	mov	r4, r0
	if ((conn->llcp_ack == conn->llcp_req) &&
   1c6f2:	f890 00e5 	ldrb.w	r0, [r0, #229]	; 0xe5
   1c6f6:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1c6fa:	4298      	cmp	r0, r3
{
   1c6fc:	460d      	mov	r5, r1
   1c6fe:	4616      	mov	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
   1c700:	d030      	beq.n	1c764 <ull_conn_llcp+0x78>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1c702:	1a1b      	subs	r3, r3, r0
   1c704:	f003 0303 	and.w	r3, r3, #3
   1c708:	2b02      	cmp	r3, #2
   1c70a:	d010      	beq.n	1c72e <ull_conn_llcp+0x42>
   1c70c:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   1c710:	4694      	mov	ip, r2
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   1c712:	f1bc 0f00 	cmp.w	ip, #0
   1c716:	db4e      	blt.n	1c7b6 <ull_conn_llcp+0xca>
	if (((conn->llcp_terminate.req - conn->llcp_terminate.ack) & 0xFF) ==
   1c718:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
   1c71c:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   1c720:	1a9b      	subs	r3, r3, r2
   1c722:	b2db      	uxtb	r3, r3
   1c724:	2b01      	cmp	r3, #1
   1c726:	d05f      	beq.n	1c7e8 <ull_conn_llcp+0xfc>
	return 0;
   1c728:	2000      	movs	r0, #0
}
   1c72a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   1c72e:	f894 21ad 	ldrb.w	r2, [r4, #429]	; 0x1ad
   1c732:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   1c736:	429a      	cmp	r2, r3
   1c738:	d006      	beq.n	1c748 <ull_conn_llcp+0x5c>
			     LLCP_LENGTH_STATE_RESIZE) ||
   1c73a:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			if ((conn->llcp_length.state ==
   1c73e:	f003 0306 	and.w	r3, r3, #6
   1c742:	2b04      	cmp	r3, #4
   1c744:	f000 81f4 	beq.w	1cb30 <ull_conn_llcp+0x444>
		switch (conn->llcp_type) {
   1c748:	f894 70e6 	ldrb.w	r7, [r4, #230]	; 0xe6
   1c74c:	1e7b      	subs	r3, r7, #1
   1c74e:	2b05      	cmp	r3, #5
   1c750:	f200 81d8 	bhi.w	1cb04 <ull_conn_llcp+0x418>
   1c754:	e8df f013 	tbh	[pc, r3, lsl #1]
   1c758:	01720024 	.word	0x01720024
   1c75c:	01d600eb 	.word	0x01d600eb
   1c760:	00a500b0 	.word	0x00a500b0
   1c764:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
	if ((conn->llcp_ack == conn->llcp_req) &&
   1c768:	2a00      	cmp	r2, #0
   1c76a:	4694      	mov	ip, r2
   1c76c:	f2c0 81da 	blt.w	1cb24 <ull_conn_llcp+0x438>
	    !conn->llcp_enc.pause_rx) {
   1c770:	f894 7166 	ldrb.w	r7, [r4, #358]	; 0x166
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
   1c774:	f017 0801 	ands.w	r8, r7, #1
   1c778:	d1cb      	bne.n	1c712 <ull_conn_llcp+0x26>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
   1c77a:	f894 910d 	ldrb.w	r9, [r4, #269]	; 0x10d
   1c77e:	f894 e10c 	ldrb.w	lr, [r4, #268]	; 0x10c
   1c782:	45ce      	cmp	lr, r9
   1c784:	f000 8304 	beq.w	1cd90 <ull_conn_llcp+0x6a4>
			conn->llcp_type = LLCP_CONN_UPD;
   1c788:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
   1c78a:	1e83      	subs	r3, r0, #2
			conn->llcp_type = LLCP_CONN_UPD;
   1c78c:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
   1c790:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   1c794:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   1c798:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
   1c79c:	429a      	cmp	r2, r3
   1c79e:	d1cc      	bne.n	1c73a <ull_conn_llcp+0x4e>
			if (event_conn_upd_prep(conn, lazy,
   1c7a0:	462a      	mov	r2, r5
   1c7a2:	4631      	mov	r1, r6
   1c7a4:	4620      	mov	r0, r4
   1c7a6:	f7f0 fbf3 	bl	cf90 <event_conn_upd_prep>
   1c7aa:	2800      	cmp	r0, #0
   1c7ac:	f040 81b7 	bne.w	1cb1e <ull_conn_llcp+0x432>
				return -ECANCELED;
   1c7b0:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1c7b4:	e7b9      	b.n	1c72a <ull_conn_llcp+0x3e>
   1c7b6:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   1c7ba:	2900      	cmp	r1, #0
   1c7bc:	d0ac      	beq.n	1c718 <ull_conn_llcp+0x2c>
		switch (conn->periph.llcp_type) {
   1c7be:	2902      	cmp	r1, #2
   1c7c0:	f000 816e 	beq.w	1caa0 <ull_conn_llcp+0x3b4>
   1c7c4:	2906      	cmp	r1, #6
   1c7c6:	d05a      	beq.n	1c87e <ull_conn_llcp+0x192>
   1c7c8:	2901      	cmp	r1, #1
   1c7ca:	d061      	beq.n	1c890 <ull_conn_llcp+0x1a4>
			LL_ASSERT(0);
   1c7cc:	4ac9      	ldr	r2, [pc, #804]	; (1caf4 <ull_conn_llcp+0x408>)
   1c7ce:	49ca      	ldr	r1, [pc, #808]	; (1caf8 <ull_conn_llcp+0x40c>)
   1c7d0:	48ca      	ldr	r0, [pc, #808]	; (1cafc <ull_conn_llcp+0x410>)
   1c7d2:	f240 5311 	movw	r3, #1297	; 0x511
   1c7d6:	f00a fead 	bl	27534 <assert_print>
   1c7da:	4040      	eors	r0, r0
   1c7dc:	f380 8811 	msr	BASEPRI, r0
   1c7e0:	f04f 0003 	mov.w	r0, #3
   1c7e4:	df02      	svc	2
			break;
   1c7e6:	e797      	b.n	1c718 <ull_conn_llcp+0x2c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1c7e8:	48c5      	ldr	r0, [pc, #788]	; (1cb00 <ull_conn_llcp+0x414>)
   1c7ea:	f7f8 fcfb 	bl	151e4 <mem_acquire>
		if (tx) {
   1c7ee:	2800      	cmp	r0, #0
   1c7f0:	d038      	beq.n	1c864 <ull_conn_llcp+0x178>
			conn->llcp_terminate.ack--;
   1c7f2:	f894 3141 	ldrb.w	r3, [r4, #321]	; 0x141
   1c7f6:	3b01      	subs	r3, #1
   1c7f8:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1c7fc:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
   1c7fe:	2202      	movs	r2, #2
   1c800:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1c802:	f043 0303 	orr.w	r3, r3, #3
   1c806:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
   1c808:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
   1c80a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_tx->llctrl.terminate_ind.error_code =
   1c80e:	f894 2142 	ldrb.w	r2, [r4, #322]	; 0x142
		if (!conn->tx_ctrl) {
   1c812:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
			pdu_tx->llctrl.terminate_ind.error_code =
   1c816:	7202      	strb	r2, [r0, #8]
	if (
   1c818:	b1b3      	cbz	r3, 1c848 <ull_conn_llcp+0x15c>
	    !conn->llcp_enc.pause_tx &&
   1c81a:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1c81e:	0795      	lsls	r5, r2, #30
   1c820:	d412      	bmi.n	1c848 <ull_conn_llcp+0x15c>
	    !conn->llcp_phy.pause_tx &&
   1c822:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1c826:	07d2      	lsls	r2, r2, #31
   1c828:	d40e      	bmi.n	1c848 <ull_conn_llcp+0x15c>
		if (conn->tx_head == conn->tx_data) {
   1c82a:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   1c82e:	4293      	cmp	r3, r2
   1c830:	f000 8568 	beq.w	1d304 <ull_conn_llcp+0xc18>
		} else if (!conn->tx_ctrl) {
   1c834:	b959      	cbnz	r1, 1c84e <ull_conn_llcp+0x162>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1c836:	791a      	ldrb	r2, [r3, #4]
   1c838:	f002 0203 	and.w	r2, r2, #3
   1c83c:	2a03      	cmp	r2, #3
   1c83e:	f000 8705 	beq.w	1d64c <ull_conn_llcp+0xf60>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1c842:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   1c846:	e004      	b.n	1c852 <ull_conn_llcp+0x166>
		if (!conn->tx_ctrl) {
   1c848:	2900      	cmp	r1, #0
   1c84a:	f000 82f5 	beq.w	1ce38 <ull_conn_llcp+0x74c>
	tx->next = conn->tx_ctrl_last->next;
   1c84e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1c852:	681a      	ldr	r2, [r3, #0]
   1c854:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1c856:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1c858:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   1c85a:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1c85e:	2b00      	cmp	r3, #0
   1c860:	f000 816a 	beq.w	1cb38 <ull_conn_llcp+0x44c>
		if (!conn->procedure_expire) {
   1c864:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
   1c868:	2800      	cmp	r0, #0
   1c86a:	f47f af5d 	bne.w	1c728 <ull_conn_llcp+0x3c>
			conn->procedure_expire = conn->supervision_reload;
   1c86e:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			if (conn->procedure_expire <= 1U) {
   1c872:	2b01      	cmp	r3, #1
   1c874:	f240 82dc 	bls.w	1ce30 <ull_conn_llcp+0x744>
			conn->procedure_expire = conn->supervision_reload;
   1c878:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   1c87c:	e754      	b.n	1c728 <ull_conn_llcp+0x3c>
			event_counter = lll->event_counter +
   1c87e:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
   1c880:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   1c882:	440a      	add	r2, r1
   1c884:	4432      	add	r2, r6
			event_phy_upd_ind_prep(conn, event_counter);
   1c886:	4620      	mov	r0, r4
   1c888:	b291      	uxth	r1, r2
   1c88a:	f7fd fe23 	bl	1a4d4 <event_phy_upd_ind_prep>
		break;
   1c88e:	e743      	b.n	1c718 <ull_conn_llcp+0x2c>
			if (event_conn_upd_prep(conn, lazy,
   1c890:	462a      	mov	r2, r5
   1c892:	4631      	mov	r1, r6
   1c894:	4620      	mov	r0, r4
   1c896:	f7f0 fb7b 	bl	cf90 <event_conn_upd_prep>
   1c89a:	2800      	cmp	r0, #0
   1c89c:	f47f af3c 	bne.w	1c718 <ull_conn_llcp+0x2c>
   1c8a0:	e786      	b.n	1c7b0 <ull_conn_llcp+0xc4>
			event_counter = lll->event_counter +
   1c8a2:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   1c8a4:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   1c8a6:	4419      	add	r1, r3
   1c8a8:	4431      	add	r1, r6
			event_phy_upd_ind_prep(conn, event_counter);
   1c8aa:	b289      	uxth	r1, r1
   1c8ac:	4620      	mov	r0, r4
   1c8ae:	f7fd fe11 	bl	1a4d4 <event_phy_upd_ind_prep>
		break;
   1c8b2:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1c8b6:	e72c      	b.n	1c712 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1c8b8:	4891      	ldr	r0, [pc, #580]	; (1cb00 <ull_conn_llcp+0x414>)
   1c8ba:	f7f8 fc93 	bl	151e4 <mem_acquire>
	if (tx) {
   1c8be:	2800      	cmp	r0, #0
   1c8c0:	f000 812d 	beq.w	1cb1e <ull_conn_llcp+0x432>
		conn->llcp_ack = conn->llcp_req;
   1c8c4:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1c8c8:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1c8cc:	7903      	ldrb	r3, [r0, #4]
   1c8ce:	f043 0303 	orr.w	r3, r3, #3
   1c8d2:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   1c8d4:	2301      	movs	r3, #1
   1c8d6:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   1c8d8:	2312      	movs	r3, #18
   1c8da:	71c3      	strb	r3, [r0, #7]
		if (!conn->tx_ctrl) {
   1c8dc:	e9d4 3271 	ldrd	r3, r2, [r4, #452]	; 0x1c4
	if (
   1c8e0:	2b00      	cmp	r3, #0
   1c8e2:	f000 82b2 	beq.w	1ce4a <ull_conn_llcp+0x75e>
	    !conn->llcp_enc.pause_tx &&
   1c8e6:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   1c8ea:	078f      	lsls	r7, r1, #30
   1c8ec:	f100 82ad 	bmi.w	1ce4a <ull_conn_llcp+0x75e>
	    !conn->llcp_phy.pause_tx &&
   1c8f0:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   1c8f4:	07c9      	lsls	r1, r1, #31
   1c8f6:	f100 82a8 	bmi.w	1ce4a <ull_conn_llcp+0x75e>
		if (conn->tx_head == conn->tx_data) {
   1c8fa:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   1c8fe:	428b      	cmp	r3, r1
   1c900:	f000 8681 	beq.w	1d606 <ull_conn_llcp+0xf1a>
		} else if (!conn->tx_ctrl) {
   1c904:	2a00      	cmp	r2, #0
   1c906:	f000 86ac 	beq.w	1d662 <ull_conn_llcp+0xf76>
	tx->next = conn->tx_ctrl_last->next;
   1c90a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1c90e:	681a      	ldr	r2, [r3, #0]
   1c910:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1c912:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1c914:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   1c916:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1c91a:	2b00      	cmp	r3, #0
   1c91c:	f000 83e2 	beq.w	1d0e4 <ull_conn_llcp+0x9f8>
		conn->procedure_expire = conn->procedure_reload;
   1c920:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   1c924:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1c928:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   1c92c:	e6f1      	b.n	1c712 <ull_conn_llcp+0x26>
	if (conn->llcp.encryption.state) {
   1c92e:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   1c932:	f013 0803 	ands.w	r8, r3, #3
   1c936:	f000 8151 	beq.w	1cbdc <ull_conn_llcp+0x4f0>
		if (lll->role &&
   1c93a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1c93e:	2b00      	cmp	r3, #0
   1c940:	f6bf aeea 	bge.w	1c718 <ull_conn_llcp+0x2c>
   1c944:	f1b8 0f01 	cmp.w	r8, #1
   1c948:	f47f af35 	bne.w	1c7b6 <ull_conn_llcp+0xca>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1c94c:	486c      	ldr	r0, [pc, #432]	; (1cb00 <ull_conn_llcp+0x414>)
   1c94e:	f7f8 fc49 	bl	151e4 <mem_acquire>
	if (!tx) {
   1c952:	4607      	mov	r7, r0
   1c954:	2800      	cmp	r0, #0
   1c956:	f000 80e2 	beq.w	1cb1e <ull_conn_llcp+0x432>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1c95a:	7903      	ldrb	r3, [r0, #4]
   1c95c:	f043 0303 	orr.w	r3, r3, #3
   1c960:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   1c962:	f04f 0904 	mov.w	r9, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   1c966:	230d      	movs	r3, #13
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   1c968:	f100 0808 	add.w	r8, r0, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   1c96c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   1c96e:	f880 9007 	strb.w	r9, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   1c972:	210c      	movs	r1, #12
   1c974:	4640      	mov	r0, r8
   1c976:	f003 faad 	bl	1fed4 <lll_csrand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
   1c97a:	4641      	mov	r1, r8
   1c97c:	2208      	movs	r2, #8
   1c97e:	f104 00fe 	add.w	r0, r4, #254	; 0xfe
   1c982:	f00c fce0 	bl	29346 <memcpy>
	memcpy(&conn->lll.ccm_rx.iv[4],
   1c986:	464a      	mov	r2, r9
   1c988:	f107 0110 	add.w	r1, r7, #16
   1c98c:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1c990:	f00c fcd9 	bl	29346 <memcpy>
	    conn->tx_head &&
   1c994:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   1c998:	2b00      	cmp	r3, #0
   1c99a:	f000 84a7 	beq.w	1d2ec <ull_conn_llcp+0xc00>
	    !conn->llcp_enc.pause_tx &&
   1c99e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1c9a2:	0791      	lsls	r1, r2, #30
   1c9a4:	f100 84a2 	bmi.w	1d2ec <ull_conn_llcp+0xc00>
	    !conn->llcp_phy.pause_tx &&
   1c9a8:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1c9ac:	07d2      	lsls	r2, r2, #31
   1c9ae:	f100 849d 	bmi.w	1d2ec <ull_conn_llcp+0xc00>
		if (conn->tx_head == conn->tx_data) {
   1c9b2:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1c9b6:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1c9ba:	428b      	cmp	r3, r1
   1c9bc:	f000 8682 	beq.w	1d6c4 <ull_conn_llcp+0xfd8>
		} else if (!conn->tx_ctrl) {
   1c9c0:	2a00      	cmp	r2, #0
   1c9c2:	f000 874a 	beq.w	1d85a <ull_conn_llcp+0x116e>
	tx->next = conn->tx_ctrl_last->next;
   1c9c6:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1c9ca:	681a      	ldr	r2, [r3, #0]
   1c9cc:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   1c9ce:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   1c9d0:	683b      	ldr	r3, [r7, #0]
	conn->tx_ctrl_last = tx;
   1c9d2:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1c9d6:	2b00      	cmp	r3, #0
   1c9d8:	f000 85a6 	beq.w	1d528 <ull_conn_llcp+0xe3c>
			rx = ll_pdu_rx_alloc();
   1c9dc:	f7fb ff6c 	bl	188b8 <ll_pdu_rx_alloc>
			if (!rx) {
   1c9e0:	4607      	mov	r7, r0
   1c9e2:	2800      	cmp	r0, #0
   1c9e4:	f000 809b 	beq.w	1cb1e <ull_conn_llcp+0x432>
			rx->hdr.handle = conn->lll.handle;
   1c9e8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   1c9ea:	80fb      	strh	r3, [r7, #6]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1c9ec:	2303      	movs	r3, #3
   1c9ee:	713b      	strb	r3, [r7, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   1c9f0:	77fb      	strb	r3, [r7, #31]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   1c9f2:	7f3b      	ldrb	r3, [r7, #28]
   1c9f4:	f043 0303 	orr.w	r3, r3, #3
   1c9f8:	773b      	strb	r3, [r7, #28]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   1c9fa:	2317      	movs	r3, #23
			memcpy(&pdu->llctrl.enc_req.rand[0],
   1c9fc:	2208      	movs	r2, #8
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   1c9fe:	777b      	strb	r3, [r7, #29]
			memcpy(&pdu->llctrl.enc_req.rand[0],
   1ca00:	f204 1169 	addw	r1, r4, #361	; 0x169
   1ca04:	f107 0020 	add.w	r0, r7, #32
   1ca08:	f00c fc9d 	bl	29346 <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   1ca0c:	f894 3167 	ldrb.w	r3, [r4, #359]	; 0x167
   1ca10:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   1ca14:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
   1ca18:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
   1ca1c:	6838      	ldr	r0, [r7, #0]
   1ca1e:	4639      	mov	r1, r7
   1ca20:	f7fb ff1a 	bl	18858 <ll_rx_put>
			ll_rx_sched();
   1ca24:	f7fb ff22 	bl	1886c <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
   1ca28:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   1ca2c:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1ca30:	2202      	movs	r2, #2
   1ca32:	f362 0301 	bfi	r3, r2, #0, #2
   1ca36:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   1ca3a:	e66a      	b.n	1c712 <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
   1ca3c:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   1ca3e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1ca40:	4413      	add	r3, r2
	if (conn->llcp.chan_map.initiate) {
   1ca42:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
   1ca46:	4433      	add	r3, r6
	if (conn->llcp.chan_map.initiate) {
   1ca48:	f012 0201 	ands.w	r2, r2, #1
			event_counter = lll->event_counter +
   1ca4c:	b29f      	uxth	r7, r3
	if (conn->llcp.chan_map.initiate) {
   1ca4e:	d176      	bne.n	1cb3e <ull_conn_llcp+0x452>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   1ca50:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   1ca54:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1ca58:	1afb      	subs	r3, r7, r3
   1ca5a:	0418      	lsls	r0, r3, #16
   1ca5c:	f53f ae59 	bmi.w	1c712 <ull_conn_llcp+0x26>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   1ca60:	f1bc 0f00 	cmp.w	ip, #0
   1ca64:	f2c0 8336 	blt.w	1d0d4 <ull_conn_llcp+0x9e8>
			conn->llcp_ack = conn->llcp_req;
   1ca68:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1ca6c:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		memcpy(&lll->data_chan_map[0],
   1ca70:	f104 0734 	add.w	r7, r4, #52	; 0x34
   1ca74:	2205      	movs	r2, #5
   1ca76:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   1ca7a:	4638      	mov	r0, r7
   1ca7c:	f00c fc63 	bl	29346 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   1ca80:	2105      	movs	r1, #5
   1ca82:	4638      	mov	r0, r7
   1ca84:	f7f8 fd84 	bl	15590 <util_ones_count_get>
		lll->data_chan_count =
   1ca88:	f894 c039 	ldrb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   1ca8c:	2301      	movs	r3, #1
		lll->data_chan_count =
   1ca8e:	f360 0c05 	bfi	ip, r0, #0, #6
   1ca92:	f884 c039 	strb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   1ca96:	f884 31d8 	strb.w	r3, [r4, #472]	; 0x1d8
   1ca9a:	fa4f fc8c 	sxtb.w	ip, ip
   1ca9e:	e638      	b.n	1c712 <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
   1caa0:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   1caa2:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
   1caa4:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
   1caa8:	440a      	add	r2, r1
   1caaa:	4432      	add	r2, r6
	if (conn->llcp.chan_map.initiate) {
   1caac:	f013 0301 	ands.w	r3, r3, #1
			event_counter = lll->event_counter +
   1cab0:	b296      	uxth	r6, r2
	if (conn->llcp.chan_map.initiate) {
   1cab2:	f040 8122 	bne.w	1ccfa <ull_conn_llcp+0x60e>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   1cab6:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   1caba:	1ab6      	subs	r6, r6, r2
   1cabc:	0436      	lsls	r6, r6, #16
   1cabe:	f53f ae2b 	bmi.w	1c718 <ull_conn_llcp+0x2c>
		memcpy(&lll->data_chan_map[0],
   1cac2:	f104 0534 	add.w	r5, r4, #52	; 0x34
   1cac6:	2205      	movs	r2, #5
			conn->periph.llcp_type = LLCP_NONE;
   1cac8:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
		memcpy(&lll->data_chan_map[0],
   1cacc:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   1cad0:	4628      	mov	r0, r5
   1cad2:	f00c fc38 	bl	29346 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   1cad6:	2105      	movs	r1, #5
   1cad8:	4628      	mov	r0, r5
   1cada:	f7f8 fd59 	bl	15590 <util_ones_count_get>
		lll->data_chan_count =
   1cade:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   1cae2:	2201      	movs	r2, #1
		lll->data_chan_count =
   1cae4:	f360 0305 	bfi	r3, r0, #0, #6
   1cae8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   1caec:	f884 21d8 	strb.w	r2, [r4, #472]	; 0x1d8
   1caf0:	e612      	b.n	1c718 <ull_conn_llcp+0x2c>
   1caf2:	bf00      	nop
   1caf4:	0002fd50 	.word	0x0002fd50
   1caf8:	0002f900 	.word	0x0002f900
   1cafc:	0002f8a0 	.word	0x0002f8a0
   1cb00:	20002104 	.word	0x20002104
			LL_ASSERT(0);
   1cb04:	4ad5      	ldr	r2, [pc, #852]	; (1ce5c <ull_conn_llcp+0x770>)
   1cb06:	49d6      	ldr	r1, [pc, #856]	; (1ce60 <ull_conn_llcp+0x774>)
   1cb08:	48d6      	ldr	r0, [pc, #856]	; (1ce64 <ull_conn_llcp+0x778>)
   1cb0a:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
   1cb0e:	f00a fd11 	bl	27534 <assert_print>
   1cb12:	4040      	eors	r0, r0
   1cb14:	f380 8811 	msr	BASEPRI, r0
   1cb18:	f04f 0003 	mov.w	r0, #3
   1cb1c:	df02      	svc	2
			break;
   1cb1e:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1cb22:	e5f6      	b.n	1c712 <ull_conn_llcp+0x26>
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
   1cb24:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
   1cb28:	2900      	cmp	r1, #0
   1cb2a:	f47f ae48 	bne.w	1c7be <ull_conn_llcp+0xd2>
   1cb2e:	e61f      	b.n	1c770 <ull_conn_llcp+0x84>
				event_len_prep(conn);
   1cb30:	4620      	mov	r0, r4
   1cb32:	f7fd fbd9 	bl	1a2e8 <event_len_prep>
   1cb36:	e607      	b.n	1c748 <ull_conn_llcp+0x5c>
		conn->tx_data_last = tx;
   1cb38:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   1cb3c:	e692      	b.n	1c864 <ull_conn_llcp+0x178>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1cb3e:	48ca      	ldr	r0, [pc, #808]	; (1ce68 <ull_conn_llcp+0x77c>)
   1cb40:	f7f8 fb50 	bl	151e4 <mem_acquire>
		if (tx) {
   1cb44:	4680      	mov	r8, r0
   1cb46:	2800      	cmp	r0, #0
   1cb48:	d0e9      	beq.n	1cb1e <ull_conn_llcp+0x432>
						      conn->lll.latency + 6;
   1cb4a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   1cb4c:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
						      conn->lll.latency + 6;
   1cb50:	3306      	adds	r3, #6
   1cb52:	443b      	add	r3, r7
			conn->llcp.chan_map.instant = event_counter +
   1cb54:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1cb58:	7903      	ldrb	r3, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
   1cb5a:	f36f 0200 	bfc	r2, #0, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1cb5e:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.initiate = 0U;
   1cb62:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1cb66:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   1cb68:	2308      	movs	r3, #8
   1cb6a:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   1cb6c:	2301      	movs	r3, #1
   1cb6e:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   1cb70:	2205      	movs	r2, #5
   1cb72:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   1cb76:	3008      	adds	r0, #8
   1cb78:	f00c fbe5 	bl	29346 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   1cb7c:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   1cb80:	f8a8 300d 	strh.w	r3, [r8, #13]
	    conn->tx_head &&
   1cb84:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   1cb88:	2b00      	cmp	r3, #0
   1cb8a:	f000 82ae 	beq.w	1d0ea <ull_conn_llcp+0x9fe>
	    !conn->llcp_enc.pause_tx &&
   1cb8e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1cb92:	0792      	lsls	r2, r2, #30
   1cb94:	f100 82a9 	bmi.w	1d0ea <ull_conn_llcp+0x9fe>
	    !conn->llcp_phy.pause_tx &&
   1cb98:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1cb9c:	07d7      	lsls	r7, r2, #31
   1cb9e:	f100 82a4 	bmi.w	1d0ea <ull_conn_llcp+0x9fe>
		if (conn->tx_head == conn->tx_data) {
   1cba2:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1cba6:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1cbaa:	428b      	cmp	r3, r1
   1cbac:	f000 8563 	beq.w	1d676 <ull_conn_llcp+0xf8a>
		} else if (!conn->tx_ctrl) {
   1cbb0:	2a00      	cmp	r2, #0
   1cbb2:	f000 8607 	beq.w	1d7c4 <ull_conn_llcp+0x10d8>
	tx->next = conn->tx_ctrl_last->next;
   1cbb6:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1cbba:	681a      	ldr	r2, [r3, #0]
   1cbbc:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   1cbc0:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   1cbc4:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   1cbc8:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1cbcc:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1cbd0:	2b00      	cmp	r3, #0
   1cbd2:	f47f ad9e 	bne.w	1c712 <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
   1cbd6:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
   1cbda:	e59a      	b.n	1c712 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1cbdc:	48a2      	ldr	r0, [pc, #648]	; (1ce68 <ull_conn_llcp+0x77c>)
   1cbde:	f7f8 fb01 	bl	151e4 <mem_acquire>
	if (!tx) {
   1cbe2:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1cbe6:	4681      	mov	r9, r0
   1cbe8:	2800      	cmp	r0, #0
   1cbea:	f43f ad92 	beq.w	1c712 <ull_conn_llcp+0x26>
	if (!lll->role) {
   1cbee:	f1bc 0f00 	cmp.w	ip, #0
   1cbf2:	f280 82ff 	bge.w	1d1f4 <ull_conn_llcp+0xb08>
	else if (!lll->enc_rx) {
   1cbf6:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   1cbfa:	071a      	lsls	r2, r3, #28
   1cbfc:	f100 83fb 	bmi.w	1d3f6 <ull_conn_llcp+0xd0a>
		if (conn->llcp.encryption.error_code) {
   1cc00:	f894 80f5 	ldrb.w	r8, [r4, #245]	; 0xf5
   1cc04:	f1b8 0f00 	cmp.w	r8, #0
   1cc08:	f040 8492 	bne.w	1d530 <ull_conn_llcp+0xe44>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
   1cc0c:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   1cc10:	463b      	mov	r3, r7
   1cc12:	4642      	mov	r2, r8
   1cc14:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
   1cc18:	f204 1071 	addw	r0, r4, #369	; 0x171
   1cc1c:	f004 ff3a 	bl	21a94 <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
   1cc20:	4639      	mov	r1, r7
   1cc22:	2210      	movs	r2, #16
   1cc24:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1cc28:	f00c fb8d 	bl	29346 <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   1cc2c:	2208      	movs	r2, #8
   1cc2e:	f104 0194 	add.w	r1, r4, #148	; 0x94
   1cc32:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
   1cc36:	f00c fb86 	bl	29346 <memcpy>
			lll->ccm_rx.direction = 1U;
   1cc3a:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
			lll->ccm_rx.counter = 0U;
   1cc3e:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
			lll->ccm_rx.direction = 1U;
   1cc42:	f043 0301 	orr.w	r3, r3, #1
   1cc46:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
			lll->ccm_tx.direction = 0U;
   1cc4a:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			lll->ccm_rx.counter = 0U;
   1cc4e:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
			lll->ccm_tx.direction = 0U;
   1cc52:	f368 0300 	bfi	r3, r8, #0, #1
   1cc56:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			lll->enc_rx = 1U;
   1cc5a:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
			lll->ccm_rx.counter = 0U;
   1cc5e:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
			lll->enc_rx = 1U;
   1cc62:	f043 0308 	orr.w	r3, r3, #8
   1cc66:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1cc6a:	f899 3004 	ldrb.w	r3, [r9, #4]
			lll->ccm_rx.counter = 0U;
   1cc6e:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1cc72:	f043 0303 	orr.w	r3, r3, #3
			lll->ccm_tx.counter = 0U;
   1cc76:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
			lll->ccm_rx.counter = 0U;
   1cc7a:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   1cc7e:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   1cc82:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   1cc86:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1cc8a:	f889 3004 	strb.w	r3, [r9, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   1cc8e:	2301      	movs	r3, #1
   1cc90:	f889 3005 	strb.w	r3, [r9, #5]
			pdu_ctrl_tx->llctrl.opcode =
   1cc94:	2305      	movs	r3, #5
   1cc96:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
   1cc9a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   1cc9e:	2b00      	cmp	r3, #0
   1cca0:	f000 8357 	beq.w	1d352 <ull_conn_llcp+0xc66>
	    !conn->llcp_enc.pause_tx &&
   1cca4:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1cca8:	0797      	lsls	r7, r2, #30
   1ccaa:	f100 8352 	bmi.w	1d352 <ull_conn_llcp+0xc66>
	    !conn->llcp_phy.pause_tx &&
   1ccae:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1ccb2:	07d0      	lsls	r0, r2, #31
   1ccb4:	f100 834d 	bmi.w	1d352 <ull_conn_llcp+0xc66>
		if (conn->tx_head == conn->tx_data) {
   1ccb8:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1ccbc:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1ccc0:	428b      	cmp	r3, r1
   1ccc2:	f000 85db 	beq.w	1d87c <ull_conn_llcp+0x1190>
		} else if (!conn->tx_ctrl) {
   1ccc6:	2a00      	cmp	r2, #0
   1ccc8:	f000 86d3 	beq.w	1da72 <ull_conn_llcp+0x1386>
	tx->next = conn->tx_ctrl_last->next;
   1cccc:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1ccd0:	681a      	ldr	r2, [r3, #0]
   1ccd2:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   1ccd6:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   1ccda:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1ccde:	f8d9 3000 	ldr.w	r3, [r9]
   1cce2:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1cce6:	2b00      	cmp	r3, #0
   1cce8:	f000 82f3 	beq.w	1d2d2 <ull_conn_llcp+0xbe6>
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   1ccec:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   1ccf0:	f043 0303 	orr.w	r3, r3, #3
   1ccf4:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   1ccf8:	e50b      	b.n	1c712 <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1ccfa:	485b      	ldr	r0, [pc, #364]	; (1ce68 <ull_conn_llcp+0x77c>)
   1ccfc:	f7f8 fa72 	bl	151e4 <mem_acquire>
		if (tx) {
   1cd00:	4605      	mov	r5, r0
   1cd02:	2800      	cmp	r0, #0
   1cd04:	f43f ad08 	beq.w	1c718 <ull_conn_llcp+0x2c>
						      conn->lll.latency + 6;
   1cd08:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   1cd0a:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1cd0e:	7903      	ldrb	r3, [r0, #4]
						      conn->lll.latency + 6;
   1cd10:	3206      	adds	r2, #6
			conn->llcp.chan_map.initiate = 0U;
   1cd12:	f36f 0100 	bfc	r1, #0, #1
						      conn->lll.latency + 6;
   1cd16:	4432      	add	r2, r6
			conn->llcp.chan_map.initiate = 0U;
   1cd18:	f884 10e8 	strb.w	r1, [r4, #232]	; 0xe8
			conn->llcp.chan_map.instant = event_counter +
   1cd1c:	f8a4 20ee 	strh.w	r2, [r4, #238]	; 0xee
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1cd20:	f043 0303 	orr.w	r3, r3, #3
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   1cd24:	2108      	movs	r1, #8
			pdu_ctrl_tx->llctrl.opcode =
   1cd26:	2201      	movs	r2, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1cd28:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   1cd2a:	7141      	strb	r1, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   1cd2c:	71c2      	strb	r2, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   1cd2e:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   1cd32:	2205      	movs	r2, #5
   1cd34:	3008      	adds	r0, #8
   1cd36:	f00c fb06 	bl	29346 <memcpy>
	    conn->tx_head &&
   1cd3a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   1cd3e:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   1cd42:	f8a5 200d 	strh.w	r2, [r5, #13]
	if (
   1cd46:	2b00      	cmp	r3, #0
   1cd48:	f000 81db 	beq.w	1d102 <ull_conn_llcp+0xa16>
	    !conn->llcp_enc.pause_tx &&
   1cd4c:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1cd50:	0792      	lsls	r2, r2, #30
   1cd52:	f100 81d6 	bmi.w	1d102 <ull_conn_llcp+0xa16>
	    !conn->llcp_phy.pause_tx &&
   1cd56:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1cd5a:	07d7      	lsls	r7, r2, #31
   1cd5c:	f100 81d1 	bmi.w	1d102 <ull_conn_llcp+0xa16>
		if (conn->tx_head == conn->tx_data) {
   1cd60:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1cd64:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1cd68:	428b      	cmp	r3, r1
   1cd6a:	f000 8495 	beq.w	1d698 <ull_conn_llcp+0xfac>
		} else if (!conn->tx_ctrl) {
   1cd6e:	2a00      	cmp	r2, #0
   1cd70:	f000 85a1 	beq.w	1d8b6 <ull_conn_llcp+0x11ca>
	tx->next = conn->tx_ctrl_last->next;
   1cd74:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1cd78:	681a      	ldr	r2, [r3, #0]
   1cd7a:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   1cd7c:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   1cd7e:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   1cd80:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1cd84:	2b00      	cmp	r3, #0
   1cd86:	f47f acc7 	bne.w	1c718 <ull_conn_llcp+0x2c>
		conn->tx_data_last = tx;
   1cd8a:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
   1cd8e:	e4c3      	b.n	1c718 <ull_conn_llcp+0x2c>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
   1cd90:	f894 1121 	ldrb.w	r1, [r4, #289]	; 0x121
   1cd94:	f894 e120 	ldrb.w	lr, [r4, #288]	; 0x120
   1cd98:	4571      	cmp	r1, lr
   1cd9a:	d067      	beq.n	1ce6c <ull_conn_llcp+0x780>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
   1cd9c:	eba1 010e 	sub.w	r1, r1, lr
   1cda0:	07c8      	lsls	r0, r1, #31
   1cda2:	f57f acb6 	bpl.w	1c712 <ull_conn_llcp+0x26>
	if (conn->common.fex_valid) {
   1cda6:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1cdaa:	f013 0701 	ands.w	r7, r3, #1
   1cdae:	f000 81b3 	beq.w	1d118 <ull_conn_llcp+0xa2c>
		rx = ll_pdu_rx_alloc();
   1cdb2:	f7fb fd81 	bl	188b8 <ll_pdu_rx_alloc>
		if (!rx) {
   1cdb6:	4607      	mov	r7, r0
   1cdb8:	2800      	cmp	r0, #0
   1cdba:	f000 8185 	beq.w	1d0c8 <ull_conn_llcp+0x9dc>
		conn->llcp_feature.ack = conn->llcp_feature.req;
   1cdbe:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
   1cdc2:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   1cdc6:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
   1cdc8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   1cdca:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   1cdcc:	f043 0303 	orr.w	r3, r3, #3
   1cdd0:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   1cdd2:	2309      	movs	r3, #9
   1cdd4:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   1cdd6:	77c3      	strb	r3, [r0, #31]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1cdd8:	2303      	movs	r3, #3
   1cdda:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
   1cddc:	4641      	mov	r1, r8
   1cdde:	2208      	movs	r2, #8
   1cde0:	3020      	adds	r0, #32
   1cde2:	f00c fabb 	bl	2935c <memset>
		sys_put_le64(conn->llcp_feature.features_peer,
   1cde6:	e9d4 234c 	ldrd	r2, r3, [r4, #304]	; 0x130
	sys_put_le16(val >> 16, &dst[2]);
   1cdea:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   1cdec:	f887 2020 	strb.w	r2, [r7, #32]
	dst[1] = val >> 8;
   1cdf0:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1cdf4:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
	sys_put_le16(val >> 16, &dst[2]);
   1cdf8:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   1cdfa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
   1cdfe:	f887 1022 	strb.w	r1, [r7, #34]	; 0x22
	dst[1] = val >> 8;
   1ce02:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1ce06:	0a09      	lsrs	r1, r1, #8
	dst[0] = val;
   1ce08:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
	dst[1] = val >> 8;
   1ce0c:	0a12      	lsrs	r2, r2, #8
   1ce0e:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
   1ce12:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
   1ce16:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
		ll_rx_put(rx->hdr.link, rx);
   1ce1a:	4639      	mov	r1, r7
	ll_rx_put(rx->hdr.link, rx);
   1ce1c:	6808      	ldr	r0, [r1, #0]
   1ce1e:	f7fb fd1b 	bl	18858 <ll_rx_put>
	ll_rx_sched();
   1ce22:	f7fb fd23 	bl	1886c <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1ce26:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1ce2a:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   1ce2e:	e468      	b.n	1c702 <ull_conn_llcp+0x16>
				conn->procedure_expire++;
   1ce30:	3301      	adds	r3, #1
   1ce32:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   1ce36:	e478      	b.n	1c72a <ull_conn_llcp+0x3e>
			tx->next = conn->tx_head;
   1ce38:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   1ce3a:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1ce3e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1ce42:	2b00      	cmp	r3, #0
   1ce44:	f47f ad0e 	bne.w	1c864 <ull_conn_llcp+0x178>
   1ce48:	e676      	b.n	1cb38 <ull_conn_llcp+0x44c>
		if (!conn->tx_ctrl) {
   1ce4a:	2a00      	cmp	r2, #0
   1ce4c:	f47f ad5d 	bne.w	1c90a <ull_conn_llcp+0x21e>
			tx->next = conn->tx_head;
   1ce50:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   1ce52:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1ce56:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   1ce5a:	e55e      	b.n	1c91a <ull_conn_llcp+0x22e>
   1ce5c:	0002fd50 	.word	0x0002fd50
   1ce60:	0002f900 	.word	0x0002f900
   1ce64:	0002f8a0 	.word	0x0002f8a0
   1ce68:	20002104 	.word	0x20002104
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
   1ce6c:	f894 1139 	ldrb.w	r1, [r4, #313]	; 0x139
   1ce70:	f894 e138 	ldrb.w	lr, [r4, #312]	; 0x138
   1ce74:	4571      	cmp	r1, lr
   1ce76:	d02f      	beq.n	1ced8 <ull_conn_llcp+0x7ec>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
   1ce78:	eba1 010e 	sub.w	r1, r1, lr
   1ce7c:	07cf      	lsls	r7, r1, #31
   1ce7e:	f57f ac48 	bpl.w	1c712 <ull_conn_llcp+0x26>
	if (conn->llcp_version.tx == 0U) {
   1ce82:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   1ce86:	07d8      	lsls	r0, r3, #31
   1ce88:	f140 82f9 	bpl.w	1d47e <ull_conn_llcp+0xd92>
	} else if (conn->llcp_version.rx) {
   1ce8c:	079b      	lsls	r3, r3, #30
   1ce8e:	f140 82e3 	bpl.w	1d458 <ull_conn_llcp+0xd6c>
		rx = ll_pdu_rx_alloc();
   1ce92:	f7fb fd11 	bl	188b8 <ll_pdu_rx_alloc>
		if (!rx) {
   1ce96:	4601      	mov	r1, r0
   1ce98:	2800      	cmp	r0, #0
   1ce9a:	f000 8115 	beq.w	1d0c8 <ull_conn_llcp+0x9dc>
		conn->llcp_version.ack = conn->llcp_version.req;
   1ce9e:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
   1cea2:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
		rx->hdr.handle = conn->lll.handle;
   1cea6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   1cea8:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1ceaa:	2303      	movs	r3, #3
   1ceac:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   1ceae:	7f03      	ldrb	r3, [r0, #28]
   1ceb0:	f043 0303 	orr.w	r3, r3, #3
   1ceb4:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   1ceb6:	2306      	movs	r3, #6
   1ceb8:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   1ceba:	230c      	movs	r3, #12
   1cebc:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
   1cebe:	f894 313b 	ldrb.w	r3, [r4, #315]	; 0x13b
   1cec2:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
   1cec6:	f8b4 313c 	ldrh.w	r3, [r4, #316]	; 0x13c
   1ceca:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
   1cece:	f8b4 313e 	ldrh.w	r3, [r4, #318]	; 0x13e
   1ced2:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
		ll_rx_put(rx->hdr.link, rx);
   1ced6:	e7a1      	b.n	1ce1c <ull_conn_llcp+0x730>
		} else if (conn->llcp_conn_param.ack !=
   1ced8:	f894 e185 	ldrb.w	lr, [r4, #389]	; 0x185
   1cedc:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   1cee0:	458e      	cmp	lr, r1
   1cee2:	f000 81f9 	beq.w	1d2d8 <ull_conn_llcp+0xbec>
	return conn_upd_curr && (conn_upd_curr != conn);
   1cee6:	f8df 8304 	ldr.w	r8, [pc, #772]	; 1d1ec <ull_conn_llcp+0xb00>
   1ceea:	f8d8 1000 	ldr.w	r1, [r8]
   1ceee:	2900      	cmp	r1, #0
   1cef0:	f000 8365 	beq.w	1d5be <ull_conn_llcp+0xed2>
   1cef4:	428c      	cmp	r4, r1
   1cef6:	f47f ac0c 	bne.w	1c712 <ull_conn_llcp+0x26>
	switch (conn->llcp_conn_param.state) {
   1cefa:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
   1cefe:	f001 010f 	and.w	r1, r1, #15
   1cf02:	2906      	cmp	r1, #6
   1cf04:	f200 8671 	bhi.w	1dbea <ull_conn_llcp+0x14fe>
   1cf08:	f20f 0e04 	addw	lr, pc, #4
   1cf0c:	f85e f021 	ldr.w	pc, [lr, r1, lsl #2]
   1cf10:	0001d003 	.word	0x0001d003
   1cf14:	0001cf7d 	.word	0x0001cf7d
   1cf18:	0001cf2d 	.word	0x0001cf2d
   1cf1c:	0001c703 	.word	0x0001c703
   1cf20:	0001c703 	.word	0x0001c703
   1cf24:	0001c703 	.word	0x0001c703
   1cf28:	0001c703 	.word	0x0001c703
	if (conn->llcp_enc.pause_tx) {
   1cf2c:	07bb      	lsls	r3, r7, #30
   1cf2e:	f53f abf0 	bmi.w	1c712 <ull_conn_llcp+0x26>
	rx = ll_pdu_rx_alloc();
   1cf32:	f7fb fcc1 	bl	188b8 <ll_pdu_rx_alloc>
	if (!rx) {
   1cf36:	4601      	mov	r1, r0
   1cf38:	2800      	cmp	r0, #0
   1cf3a:	f000 80c5 	beq.w	1d0c8 <ull_conn_llcp+0x9dc>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   1cf3e:	f894 0186 	ldrb.w	r0, [r4, #390]	; 0x186
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1cf42:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   1cf44:	2203      	movs	r2, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1cf46:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   1cf4a:	f362 0003 	bfi	r0, r2, #0, #4
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   1cf4e:	2718      	movs	r7, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   1cf50:	f884 0186 	strb.w	r0, [r4, #390]	; 0x186
	rx->hdr.handle = conn->lll.handle;
   1cf54:	8d20      	ldrh	r0, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1cf56:	710a      	strb	r2, [r1, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1cf58:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   1cf5a:	774f      	strb	r7, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   1cf5c:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
   1cf60:	840b      	strh	r3, [r1, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   1cf62:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
   1cf66:	844b      	strh	r3, [r1, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   1cf68:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
   1cf6c:	848b      	strh	r3, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   1cf6e:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
   1cf72:	84cb      	strh	r3, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   1cf74:	230f      	movs	r3, #15
	rx->hdr.handle = conn->lll.handle;
   1cf76:	80c8      	strh	r0, [r1, #6]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   1cf78:	77cb      	strb	r3, [r1, #31]
   1cf7a:	e74f      	b.n	1ce1c <ull_conn_llcp+0x730>
	if (conn->llcp_conn_param.status) {
   1cf7c:	f894 3187 	ldrb.w	r3, [r4, #391]	; 0x187
   1cf80:	2b00      	cmp	r3, #0
   1cf82:	f040 83b8 	bne.w	1d6f6 <ull_conn_llcp+0x100a>
	if (!conn->lll.role) {
   1cf86:	2a00      	cmp	r2, #0
   1cf88:	f2c0 84e2 	blt.w	1d950 <ull_conn_llcp+0x1264>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1cf8c:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.win_offset_us = 0U;
   1cf90:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1cf94:	2106      	movs	r1, #6
   1cf96:	f361 0203 	bfi	r2, r1, #0, #4
		preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
   1cf9a:	f894 1190 	ldrb.w	r1, [r4, #400]	; 0x190
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1cf9e:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.win_size = 1U;
   1cfa2:	2001      	movs	r0, #1
		interval_max = conn->llcp_conn_param.interval_max;
   1cfa4:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
		conn->llcp_cu.win_size = 1U;
   1cfa8:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
		if (preferred_periodicity) {
   1cfac:	2900      	cmp	r1, #0
   1cfae:	f000 8571 	beq.w	1da94 <ull_conn_llcp+0x13a8>
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   1cfb2:	fbb2 f3f1 	udiv	r3, r2, r1
   1cfb6:	fb13 f301 	smulbb	r3, r3, r1
			if (conn->llcp_cu.interval < conn->llcp_conn_param.interval_min) {
   1cfba:	f8b4 1188 	ldrh.w	r1, [r4, #392]	; 0x188
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   1cfbe:	b29b      	uxth	r3, r3
				conn->llcp_cu.interval = interval_max;
   1cfc0:	4299      	cmp	r1, r3
   1cfc2:	bf98      	it	ls
   1cfc4:	461a      	movls	r2, r3
   1cfc6:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1cfca:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   1cfce:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1cfd2:	f8b4 118c 	ldrh.w	r1, [r4, #396]	; 0x18c
   1cfd6:	f8a4 1112 	strh.w	r1, [r4, #274]	; 0x112
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1cfda:	f3c3 1300 	ubfx	r3, r3, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   1cfde:	00db      	lsls	r3, r3, #3
   1cfe0:	f022 020f 	bic.w	r2, r2, #15
   1cfe4:	f043 0302 	orr.w	r3, r3, #2
   1cfe8:	4313      	orrs	r3, r2
		conn->llcp_cu.ack--;
   1cfea:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1cfee:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
   1cff2:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   1cff6:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.ack--;
   1cffa:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   1cffe:	f7ff bb8b 	b.w	1c718 <ull_conn_llcp+0x2c>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1d002:	487b      	ldr	r0, [pc, #492]	; (1d1f0 <ull_conn_llcp+0xb04>)
			event_counter = lll->event_counter +
   1d004:	8e67      	ldrh	r7, [r4, #50]	; 0x32
					lll->latency_prepare + lazy;
   1d006:	f8b4 902e 	ldrh.w	r9, [r4, #46]	; 0x2e
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1d00a:	f7f8 f8eb 	bl	151e4 <mem_acquire>
	if (!tx) {
   1d00e:	4602      	mov	r2, r0
   1d010:	2800      	cmp	r0, #0
   1d012:	d059      	beq.n	1d0c8 <ull_conn_llcp+0x9dc>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1d014:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
   1d016:	f8c8 4000 	str.w	r4, [r8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1d01a:	f043 0303 	orr.w	r3, r3, #3
   1d01e:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   1d020:	2318      	movs	r3, #24
   1d022:	7143      	strb	r3, [r0, #5]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   1d024:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
   1d028:	8110      	strh	r0, [r2, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   1d02a:	f8b4 018a 	ldrh.w	r0, [r4, #394]	; 0x18a
   1d02e:	8150      	strh	r0, [r2, #10]
	p->preferred_periodicity = 0U;
   1d030:	2300      	movs	r3, #0
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   1d032:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
   1d036:	8190      	strh	r0, [r2, #12]
			event_counter = lll->event_counter +
   1d038:	eb07 0109 	add.w	r1, r7, r9
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   1d03c:	f8b4 018e 	ldrh.w	r0, [r4, #398]	; 0x18e
	p->preferred_periodicity = 0U;
   1d040:	7413      	strb	r3, [r2, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
   1d042:	74d3      	strb	r3, [r2, #19]
   1d044:	7513      	strb	r3, [r2, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
   1d046:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   1d04a:	81d0      	strh	r0, [r2, #14]
	p->offset1 = sys_cpu_to_le16(0xffff);
   1d04c:	7553      	strb	r3, [r2, #21]
   1d04e:	7593      	strb	r3, [r2, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
   1d050:	75d3      	strb	r3, [r2, #23]
   1d052:	7613      	strb	r3, [r2, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
   1d054:	7653      	strb	r3, [r2, #25]
   1d056:	7693      	strb	r3, [r2, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
   1d058:	76d3      	strb	r3, [r2, #27]
   1d05a:	7713      	strb	r3, [r2, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
   1d05c:	7753      	strb	r3, [r2, #29]
   1d05e:	7793      	strb	r3, [r2, #30]
			event_counter = lll->event_counter +
   1d060:	4431      	add	r1, r6
	conn->procedure_expire = conn->procedure_reload;
   1d062:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   1d066:	200f      	movs	r0, #15
   1d068:	71d0      	strb	r0, [r2, #7]
	conn->procedure_expire = conn->procedure_reload;
   1d06a:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
   1d06e:	f8a2 1011 	strh.w	r1, [r2, #17]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   1d072:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   1d076:	2104      	movs	r1, #4
   1d078:	f361 0303 	bfi	r3, r1, #0, #4
   1d07c:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
	    conn->tx_head &&
   1d080:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   1d084:	2b00      	cmp	r3, #0
   1d086:	f000 832b 	beq.w	1d6e0 <ull_conn_llcp+0xff4>
	    !conn->llcp_enc.pause_tx &&
   1d08a:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   1d08e:	078f      	lsls	r7, r1, #30
   1d090:	f100 8326 	bmi.w	1d6e0 <ull_conn_llcp+0xff4>
	    !conn->llcp_phy.pause_tx &&
   1d094:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   1d098:	07c8      	lsls	r0, r1, #31
   1d09a:	f100 8321 	bmi.w	1d6e0 <ull_conn_llcp+0xff4>
		if (conn->tx_head == conn->tx_data) {
   1d09e:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   1d0a2:	428b      	cmp	r3, r1
		if (!conn->tx_ctrl) {
   1d0a4:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1d0a8:	f000 8501 	beq.w	1daae <ull_conn_llcp+0x13c2>
		} else if (!conn->tx_ctrl) {
   1d0ac:	2900      	cmp	r1, #0
   1d0ae:	f000 857b 	beq.w	1dba8 <ull_conn_llcp+0x14bc>
	tx->next = conn->tx_ctrl_last->next;
   1d0b2:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1d0b6:	6819      	ldr	r1, [r3, #0]
   1d0b8:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   1d0ba:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   1d0bc:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1d0c0:	6813      	ldr	r3, [r2, #0]
   1d0c2:	2b00      	cmp	r3, #0
   1d0c4:	f000 8376 	beq.w	1d7b4 <ull_conn_llcp+0x10c8>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1d0c8:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1d0cc:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		return;
   1d0d0:	f7ff bb17 	b.w	1c702 <ull_conn_llcp+0x16>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   1d0d4:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
   1d0d8:	2b00      	cmp	r3, #0
   1d0da:	f43f acc5 	beq.w	1ca68 <ull_conn_llcp+0x37c>
			conn->periph.llcp_type = LLCP_NONE;
   1d0de:	f884 20d9 	strb.w	r2, [r4, #217]	; 0xd9
   1d0e2:	e4c5      	b.n	1ca70 <ull_conn_llcp+0x384>
		conn->tx_data_last = tx;
   1d0e4:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   1d0e8:	e41a      	b.n	1c920 <ull_conn_llcp+0x234>
		if (!conn->tx_ctrl) {
   1d0ea:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1d0ee:	2a00      	cmp	r2, #0
   1d0f0:	f47f ad61 	bne.w	1cbb6 <ull_conn_llcp+0x4ca>
			tx->next = conn->tx_head;
   1d0f4:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   1d0f8:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1d0fc:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   1d100:	e564      	b.n	1cbcc <ull_conn_llcp+0x4e0>
		if (!conn->tx_ctrl) {
   1d102:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1d106:	2a00      	cmp	r2, #0
   1d108:	f47f ae34 	bne.w	1cd74 <ull_conn_llcp+0x688>
			tx->next = conn->tx_head;
   1d10c:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
   1d10e:	e9c4 5571 	strd	r5, r5, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1d112:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   1d116:	e635      	b.n	1cd84 <ull_conn_llcp+0x698>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1d118:	4835      	ldr	r0, [pc, #212]	; (1d1f0 <ull_conn_llcp+0xb04>)
   1d11a:	f7f8 f863 	bl	151e4 <mem_acquire>
	if (tx) {
   1d11e:	4680      	mov	r8, r0
   1d120:	2800      	cmp	r0, #0
   1d122:	d0d1      	beq.n	1d0c8 <ull_conn_llcp+0x9dc>
		conn->llcp_feature.ack--;
   1d124:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
   1d128:	3b01      	subs	r3, #1
   1d12a:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   1d12e:	2309      	movs	r3, #9
   1d130:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
   1d132:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1d136:	2b00      	cmp	r3, #0
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   1d138:	7903      	ldrb	r3, [r0, #4]
   1d13a:	f043 0303 	orr.w	r3, r3, #3
   1d13e:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   1d140:	f04f 0208 	mov.w	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
   1d144:	bfac      	ite	ge
   1d146:	2308      	movge	r3, #8
   1d148:	230e      	movlt	r3, #14
   1d14a:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   1d14c:	4639      	mov	r1, r7
   1d14e:	4410      	add	r0, r2
   1d150:	f00c f904 	bl	2935c <memset>
		sys_put_le64(conn->llcp_feature.features_conn,
   1d154:	e9d4 234a 	ldrd	r2, r3, [r4, #296]	; 0x128
	sys_put_le16(val >> 16, &dst[2]);
   1d158:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   1d15a:	f888 2008 	strb.w	r2, [r8, #8]
	dst[1] = val >> 8;
   1d15e:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1d162:	f888 2009 	strb.w	r2, [r8, #9]
	sys_put_le16(val >> 16, &dst[2]);
   1d166:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   1d168:	f888 300c 	strb.w	r3, [r8, #12]
   1d16c:	f888 100a 	strb.w	r1, [r8, #10]
	dst[1] = val >> 8;
   1d170:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1d174:	f888 200e 	strb.w	r2, [r8, #14]
	dst[1] = val >> 8;
   1d178:	0a09      	lsrs	r1, r1, #8
   1d17a:	0a12      	lsrs	r2, r2, #8
   1d17c:	f888 100b 	strb.w	r1, [r8, #11]
   1d180:	f888 300d 	strb.w	r3, [r8, #13]
   1d184:	f888 200f 	strb.w	r2, [r8, #15]
	    conn->tx_head &&
   1d188:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   1d18c:	2b00      	cmp	r3, #0
   1d18e:	f000 80d4 	beq.w	1d33a <ull_conn_llcp+0xc4e>
	    !conn->llcp_enc.pause_tx &&
   1d192:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1d196:	0791      	lsls	r1, r2, #30
   1d198:	f100 80cf 	bmi.w	1d33a <ull_conn_llcp+0xc4e>
	    !conn->llcp_phy.pause_tx &&
   1d19c:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1d1a0:	07d2      	lsls	r2, r2, #31
   1d1a2:	f100 80ca 	bmi.w	1d33a <ull_conn_llcp+0xc4e>
		if (conn->tx_head == conn->tx_data) {
   1d1a6:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1d1aa:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1d1ae:	428b      	cmp	r3, r1
   1d1b0:	f000 82f0 	beq.w	1d794 <ull_conn_llcp+0x10a8>
		} else if (!conn->tx_ctrl) {
   1d1b4:	2a00      	cmp	r2, #0
   1d1b6:	f000 83b4 	beq.w	1d922 <ull_conn_llcp+0x1236>
	tx->next = conn->tx_ctrl_last->next;
   1d1ba:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1d1be:	681a      	ldr	r2, [r3, #0]
   1d1c0:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   1d1c4:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   1d1c8:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   1d1cc:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1d1d0:	2b00      	cmp	r3, #0
   1d1d2:	f000 8226 	beq.w	1d622 <ull_conn_llcp+0xf36>
		conn->procedure_expire = conn->procedure_reload;
   1d1d6:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1d1da:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1d1de:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		conn->procedure_expire = conn->procedure_reload;
   1d1e2:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	break;
   1d1e6:	f7ff ba8c 	b.w	1c702 <ull_conn_llcp+0x16>
   1d1ea:	bf00      	nop
   1d1ec:	20002070 	.word	0x20002070
   1d1f0:	20002104 	.word	0x20002104
		ecb_encrypt(&conn->llcp_enc.ltk[0],
   1d1f4:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   1d1f8:	463b      	mov	r3, r7
   1d1fa:	4642      	mov	r2, r8
   1d1fc:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
   1d200:	f204 1071 	addw	r0, r4, #369	; 0x171
   1d204:	f004 fc46 	bl	21a94 <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
   1d208:	4639      	mov	r1, r7
   1d20a:	2210      	movs	r2, #16
   1d20c:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1d210:	f00c f899 	bl	29346 <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   1d214:	2208      	movs	r2, #8
   1d216:	f104 0194 	add.w	r1, r4, #148	; 0x94
   1d21a:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
   1d21e:	f00c f892 	bl	29346 <memcpy>
		lll->enc_rx = 1;
   1d222:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.counter = 0;
   1d226:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
		lll->enc_rx = 1;
   1d22a:	f023 0318 	bic.w	r3, r3, #24
   1d22e:	f043 0318 	orr.w	r3, r3, #24
   1d232:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.direction = 0;
   1d236:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
		lll->ccm_rx.counter = 0;
   1d23a:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
		lll->ccm_rx.direction = 0;
   1d23e:	f368 0300 	bfi	r3, r8, #0, #1
   1d242:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		lll->ccm_tx.direction = 1;
   1d246:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
		lll->ccm_rx.counter = 0;
   1d24a:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
		lll->ccm_tx.direction = 1;
   1d24e:	f043 0301 	orr.w	r3, r3, #1
   1d252:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1d256:	2301      	movs	r3, #1
		lll->ccm_tx.counter = 0;
   1d258:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
		lll->ccm_rx.counter = 0;
   1d25c:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
   1d260:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   1d264:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   1d268:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   1d26c:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1d270:	f899 2004 	ldrb.w	r2, [r9, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1d274:	f889 3005 	strb.w	r3, [r9, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   1d278:	2306      	movs	r3, #6
   1d27a:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
   1d27e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1d282:	f042 0203 	orr.w	r2, r2, #3
   1d286:	f889 2004 	strb.w	r2, [r9, #4]
	if (
   1d28a:	2b00      	cmp	r3, #0
   1d28c:	d04a      	beq.n	1d324 <ull_conn_llcp+0xc38>
	    !conn->llcp_enc.pause_tx &&
   1d28e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1d292:	0790      	lsls	r0, r2, #30
   1d294:	d446      	bmi.n	1d324 <ull_conn_llcp+0xc38>
	    !conn->llcp_phy.pause_tx &&
   1d296:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1d29a:	07d1      	lsls	r1, r2, #31
   1d29c:	d442      	bmi.n	1d324 <ull_conn_llcp+0xc38>
		if (conn->tx_head == conn->tx_data) {
   1d29e:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   1d2a2:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   1d2a4:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1d2a8:	f000 8264 	beq.w	1d774 <ull_conn_llcp+0x1088>
		} else if (!conn->tx_ctrl) {
   1d2ac:	2a00      	cmp	r2, #0
   1d2ae:	f000 83b9 	beq.w	1da24 <ull_conn_llcp+0x1338>
	tx->next = conn->tx_ctrl_last->next;
   1d2b2:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1d2b6:	681a      	ldr	r2, [r3, #0]
   1d2b8:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   1d2bc:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   1d2c0:	f8d9 3000 	ldr.w	r3, [r9]
	conn->tx_ctrl_last = tx;
   1d2c4:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1d2c8:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1d2cc:	2b00      	cmp	r3, #0
   1d2ce:	f47f ad0d 	bne.w	1ccec <ull_conn_llcp+0x600>
		conn->tx_data_last = tx;
   1d2d2:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
   1d2d6:	e509      	b.n	1ccec <ull_conn_llcp+0x600>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   1d2d8:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
   1d2dc:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   1d2e0:	4299      	cmp	r1, r3
   1d2e2:	d042      	beq.n	1d36a <ull_conn_llcp+0xc7e>
			event_len_prep(conn);
   1d2e4:	4620      	mov	r0, r4
   1d2e6:	f7fc ffff 	bl	1a2e8 <event_len_prep>
   1d2ea:	e6ed      	b.n	1d0c8 <ull_conn_llcp+0x9dc>
		if (!conn->tx_ctrl) {
   1d2ec:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1d2f0:	2a00      	cmp	r2, #0
   1d2f2:	f47f ab68 	bne.w	1c9c6 <ull_conn_llcp+0x2da>
			tx->next = conn->tx_head;
   1d2f6:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   1d2f8:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1d2fc:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
   1d300:	f7ff bb69 	b.w	1c9d6 <ull_conn_llcp+0x2ea>
			conn->tx_data = conn->tx_data->next;
   1d304:	681a      	ldr	r2, [r3, #0]
   1d306:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1d30a:	2900      	cmp	r1, #0
   1d30c:	f47f aa9f 	bne.w	1c84e <ull_conn_llcp+0x162>
			tx->next = conn->tx_head->next;
   1d310:	681a      	ldr	r2, [r3, #0]
   1d312:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1d314:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1d316:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   1d318:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
   1d31c:	2b00      	cmp	r3, #0
   1d31e:	f47f aaa1 	bne.w	1c864 <ull_conn_llcp+0x178>
   1d322:	e409      	b.n	1cb38 <ull_conn_llcp+0x44c>
		if (!conn->tx_ctrl) {
   1d324:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1d328:	2a00      	cmp	r2, #0
   1d32a:	d1c2      	bne.n	1d2b2 <ull_conn_llcp+0xbc6>
			tx->next = conn->tx_head;
   1d32c:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   1d330:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1d334:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   1d338:	e7c6      	b.n	1d2c8 <ull_conn_llcp+0xbdc>
		if (!conn->tx_ctrl) {
   1d33a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1d33e:	2a00      	cmp	r2, #0
   1d340:	f47f af3b 	bne.w	1d1ba <ull_conn_llcp+0xace>
			tx->next = conn->tx_head;
   1d344:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   1d348:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1d34c:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   1d350:	e73e      	b.n	1d1d0 <ull_conn_llcp+0xae4>
		if (!conn->tx_ctrl) {
   1d352:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1d356:	2a00      	cmp	r2, #0
   1d358:	f47f acb8 	bne.w	1cccc <ull_conn_llcp+0x5e0>
			tx->next = conn->tx_head;
   1d35c:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   1d360:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1d364:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   1d368:	e4b9      	b.n	1ccde <ull_conn_llcp+0x5f2>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   1d36a:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   1d36e:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   1d372:	428b      	cmp	r3, r1
   1d374:	f43f a9cd 	beq.w	1c712 <ull_conn_llcp+0x26>
	switch (conn->llcp_phy.state) {
   1d378:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   1d37c:	f003 0703 	and.w	r7, r3, #3
   1d380:	2f03      	cmp	r7, #3
   1d382:	f000 8229 	beq.w	1d7d8 <ull_conn_llcp+0x10ec>
   1d386:	2f00      	cmp	r7, #0
   1d388:	f47f a9c2 	bne.w	1c710 <ull_conn_llcp+0x24>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1d38c:	48c9      	ldr	r0, [pc, #804]	; (1d6b4 <ull_conn_llcp+0xfc8>)
   1d38e:	f7f7 ff29 	bl	151e4 <mem_acquire>
		if (!tx) {
   1d392:	4601      	mov	r1, r0
   1d394:	2800      	cmp	r0, #0
   1d396:	f43f ae97 	beq.w	1d0c8 <ull_conn_llcp+0x9dc>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   1d39a:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		conn->lll.phy_flags = conn->llcp_phy.flags;
   1d39e:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   1d3a2:	2201      	movs	r2, #1
   1d3a4:	f362 0301 	bfi	r3, r2, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
   1d3a8:	f894 21c0 	ldrb.w	r2, [r4, #448]	; 0x1c0
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   1d3ac:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		conn->phy_pref_tx = conn->llcp_phy.tx;
   1d3b0:	f3c3 0782 	ubfx	r7, r3, #2, #3
   1d3b4:	f367 0202 	bfi	r2, r7, #0, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
   1d3b8:	f894 7060 	ldrb.w	r7, [r4, #96]	; 0x60
   1d3bc:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1d3c0:	f360 07c3 	bfi	r7, r0, #3, #1
   1d3c4:	f884 7060 	strb.w	r7, [r4, #96]	; 0x60
		conn->phy_pref_rx = conn->llcp_phy.rx;
   1d3c8:	f3c3 1742 	ubfx	r7, r3, #5, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1d3cc:	7908      	ldrb	r0, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
   1d3ce:	f367 02c5 	bfi	r2, r7, #3, #3
   1d3d2:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
		conn->phy_pref_tx = conn->llcp_phy.tx;
   1d3d6:	f3c3 0282 	ubfx	r2, r3, #2, #3
		pdu_ctrl_tx->len =
   1d3da:	2303      	movs	r3, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1d3dc:	f040 0003 	orr.w	r0, r0, #3
		pdu_ctrl_tx->len =
   1d3e0:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   1d3e2:	2316      	movs	r3, #22
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1d3e4:	7108      	strb	r0, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
   1d3e6:	720a      	strb	r2, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
   1d3e8:	724f      	strb	r7, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
   1d3ea:	2200      	movs	r2, #0
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   1d3ec:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_pause_enqueue(conn, tx, false);
   1d3ee:	4620      	mov	r0, r4
   1d3f0:	f7fc fc84 	bl	19cfc <ctrl_tx_pause_enqueue>
   1d3f4:	e6ef      	b.n	1d1d6 <ull_conn_llcp+0xaea>
	conn->lll.enc_tx = 1;
   1d3f6:	f043 0310 	orr.w	r3, r3, #16
   1d3fa:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1d3fe:	2301      	movs	r3, #1
   1d400:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1d402:	7903      	ldrb	r3, [r0, #4]
   1d404:	f043 0303 	orr.w	r3, r3, #3
   1d408:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
   1d40a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   1d40e:	2206      	movs	r2, #6
   1d410:	71c2      	strb	r2, [r0, #7]
	if (
   1d412:	2b00      	cmp	r3, #0
   1d414:	d07d      	beq.n	1d512 <ull_conn_llcp+0xe26>
	    !conn->llcp_enc.pause_tx &&
   1d416:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1d41a:	0791      	lsls	r1, r2, #30
   1d41c:	d479      	bmi.n	1d512 <ull_conn_llcp+0xe26>
	    !conn->llcp_phy.pause_tx &&
   1d41e:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1d422:	07d2      	lsls	r2, r2, #31
   1d424:	d475      	bmi.n	1d512 <ull_conn_llcp+0xe26>
		if (conn->tx_head == conn->tx_data) {
   1d426:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   1d42a:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   1d42c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1d430:	f000 8233 	beq.w	1d89a <ull_conn_llcp+0x11ae>
		} else if (!conn->tx_ctrl) {
   1d434:	2a00      	cmp	r2, #0
   1d436:	f000 8325 	beq.w	1da84 <ull_conn_llcp+0x1398>
	tx->next = conn->tx_ctrl_last->next;
   1d43a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1d43e:	681a      	ldr	r2, [r3, #0]
   1d440:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   1d444:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   1d448:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1d44c:	f8d9 3000 	ldr.w	r3, [r9]
   1d450:	2b00      	cmp	r3, #0
   1d452:	f47f ac4b 	bne.w	1ccec <ull_conn_llcp+0x600>
   1d456:	e73c      	b.n	1d2d2 <ull_conn_llcp+0xbe6>
		LL_ASSERT(0);
   1d458:	4a97      	ldr	r2, [pc, #604]	; (1d6b8 <ull_conn_llcp+0xfcc>)
   1d45a:	4998      	ldr	r1, [pc, #608]	; (1d6bc <ull_conn_llcp+0xfd0>)
   1d45c:	f640 63c1 	movw	r3, #3777	; 0xec1
		LL_ASSERT(0);
   1d460:	4897      	ldr	r0, [pc, #604]	; (1d6c0 <ull_conn_llcp+0xfd4>)
   1d462:	f00a f867 	bl	27534 <assert_print>
   1d466:	4040      	eors	r0, r0
   1d468:	f380 8811 	msr	BASEPRI, r0
   1d46c:	f04f 0003 	mov.w	r0, #3
   1d470:	df02      	svc	2
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1d472:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1d476:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		break;
   1d47a:	f7ff b942 	b.w	1c702 <ull_conn_llcp+0x16>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1d47e:	488d      	ldr	r0, [pc, #564]	; (1d6b4 <ull_conn_llcp+0xfc8>)
   1d480:	f7f7 feb0 	bl	151e4 <mem_acquire>
		if (tx) {
   1d484:	2800      	cmp	r0, #0
   1d486:	f43f ae1f 	beq.w	1d0c8 <ull_conn_llcp+0x9dc>
			conn->llcp_version.ack--;
   1d48a:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
   1d48e:	3b01      	subs	r3, #1
   1d490:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
			conn->llcp_version.tx = 1U;
   1d494:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   1d498:	f043 0301 	orr.w	r3, r3, #1
   1d49c:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   1d4a0:	7903      	ldrb	r3, [r0, #4]
   1d4a2:	f043 0303 	orr.w	r3, r3, #3
   1d4a6:	7103      	strb	r3, [r0, #4]
			pdu->len =
   1d4a8:	2306      	movs	r3, #6
   1d4aa:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
   1d4ac:	230c      	movs	r3, #12
   1d4ae:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
   1d4b0:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
   1d4b2:	f06f 030e 	mvn.w	r3, #14
   1d4b6:	7243      	strb	r3, [r0, #9]
   1d4b8:	2305      	movs	r3, #5
   1d4ba:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
   1d4bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d4c0:	72c3      	strb	r3, [r0, #11]
   1d4c2:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
   1d4c4:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   1d4c8:	2b00      	cmp	r3, #0
   1d4ca:	f000 80b4 	beq.w	1d636 <ull_conn_llcp+0xf4a>
	    !conn->llcp_enc.pause_tx &&
   1d4ce:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1d4d2:	0791      	lsls	r1, r2, #30
   1d4d4:	f100 80af 	bmi.w	1d636 <ull_conn_llcp+0xf4a>
	    !conn->llcp_phy.pause_tx &&
   1d4d8:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1d4dc:	07d2      	lsls	r2, r2, #31
   1d4de:	f100 80aa 	bmi.w	1d636 <ull_conn_llcp+0xf4a>
		if (conn->tx_head == conn->tx_data) {
   1d4e2:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   1d4e6:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   1d4e8:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1d4ec:	f000 82b5 	beq.w	1da5a <ull_conn_llcp+0x136e>
		} else if (!conn->tx_ctrl) {
   1d4f0:	2a00      	cmp	r2, #0
   1d4f2:	f000 82d3 	beq.w	1da9c <ull_conn_llcp+0x13b0>
	tx->next = conn->tx_ctrl_last->next;
   1d4f6:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1d4fa:	681a      	ldr	r2, [r3, #0]
   1d4fc:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1d4fe:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   1d500:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1d504:	6803      	ldr	r3, [r0, #0]
   1d506:	2b00      	cmp	r3, #0
   1d508:	f47f ae65 	bne.w	1d1d6 <ull_conn_llcp+0xaea>
		conn->tx_data_last = tx;
   1d50c:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
			conn->procedure_expire = conn->procedure_reload;
   1d510:	e661      	b.n	1d1d6 <ull_conn_llcp+0xaea>
		if (!conn->tx_ctrl) {
   1d512:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1d516:	2a00      	cmp	r2, #0
   1d518:	d18f      	bne.n	1d43a <ull_conn_llcp+0xd4e>
			tx->next = conn->tx_head;
   1d51a:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   1d51e:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1d522:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   1d526:	e791      	b.n	1d44c <ull_conn_llcp+0xd60>
		conn->tx_data_last = tx;
   1d528:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
   1d52c:	f7ff ba56 	b.w	1c9dc <ull_conn_llcp+0x2f0>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1d530:	7903      	ldrb	r3, [r0, #4]
   1d532:	f043 0303 	orr.w	r3, r3, #3
   1d536:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   1d538:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1d53c:	07db      	lsls	r3, r3, #31
   1d53e:	d573      	bpl.n	1d628 <ull_conn_llcp+0xf3c>
	    (conn->llcp_feature.features_conn &
   1d540:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	if (conn->common.fex_valid &&
   1d544:	0758      	lsls	r0, r3, #29
   1d546:	d56f      	bpl.n	1d628 <ull_conn_llcp+0xf3c>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   1d548:	2311      	movs	r3, #17
   1d54a:	f889 3007 	strb.w	r3, [r9, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   1d54e:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
   1d550:	f889 8009 	strb.w	r8, [r9, #9]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   1d554:	f889 3008 	strb.w	r3, [r9, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   1d558:	f889 7005 	strb.w	r7, [r9, #5]
	conn->llcp.encryption.error_code = 0U;
   1d55c:	2300      	movs	r3, #0
   1d55e:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
	    conn->tx_head &&
   1d562:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   1d566:	2b00      	cmp	r3, #0
   1d568:	d042      	beq.n	1d5f0 <ull_conn_llcp+0xf04>
	    !conn->llcp_enc.pause_tx &&
   1d56a:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1d56e:	0791      	lsls	r1, r2, #30
   1d570:	d43e      	bmi.n	1d5f0 <ull_conn_llcp+0xf04>
	    !conn->llcp_phy.pause_tx &&
   1d572:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1d576:	07d2      	lsls	r2, r2, #31
   1d578:	d43a      	bmi.n	1d5f0 <ull_conn_llcp+0xf04>
		if (conn->tx_head == conn->tx_data) {
   1d57a:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   1d57e:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   1d580:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1d584:	f000 81d6 	beq.w	1d934 <ull_conn_llcp+0x1248>
		} else if (!conn->tx_ctrl) {
   1d588:	2a00      	cmp	r2, #0
   1d58a:	f000 82c3 	beq.w	1db14 <ull_conn_llcp+0x1428>
	tx->next = conn->tx_ctrl_last->next;
   1d58e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1d592:	681a      	ldr	r2, [r3, #0]
   1d594:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   1d598:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   1d59c:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1d5a0:	f8d9 3000 	ldr.w	r3, [r9]
   1d5a4:	2b00      	cmp	r3, #0
   1d5a6:	d059      	beq.n	1d65c <ull_conn_llcp+0xf70>
			conn->llcp_ack = conn->llcp_req;
   1d5a8:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
   1d5ac:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1d5b0:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   1d5b4:	2900      	cmp	r1, #0
   1d5b6:	f43f a8af 	beq.w	1c718 <ull_conn_llcp+0x2c>
   1d5ba:	f7ff b900 	b.w	1c7be <ull_conn_llcp+0xd2>
	switch (conn->llcp_conn_param.state) {
   1d5be:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   1d5c2:	f003 030f 	and.w	r3, r3, #15
   1d5c6:	2b06      	cmp	r3, #6
   1d5c8:	f200 830f 	bhi.w	1dbea <ull_conn_llcp+0x14fe>
   1d5cc:	a101      	add	r1, pc, #4	; (adr r1, 1d5d4 <ull_conn_llcp+0xee8>)
   1d5ce:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1d5d2:	bf00      	nop
   1d5d4:	0001d003 	.word	0x0001d003
   1d5d8:	0001cf7d 	.word	0x0001cf7d
   1d5dc:	0001cf2d 	.word	0x0001cf2d
   1d5e0:	0001c713 	.word	0x0001c713
   1d5e4:	0001c713 	.word	0x0001c713
   1d5e8:	0001c713 	.word	0x0001c713
   1d5ec:	0001c713 	.word	0x0001c713
		if (!conn->tx_ctrl) {
   1d5f0:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1d5f4:	2a00      	cmp	r2, #0
   1d5f6:	d1ca      	bne.n	1d58e <ull_conn_llcp+0xea2>
			tx->next = conn->tx_head;
   1d5f8:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   1d5fc:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1d600:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   1d604:	e7cc      	b.n	1d5a0 <ull_conn_llcp+0xeb4>
			conn->tx_data = conn->tx_data->next;
   1d606:	6819      	ldr	r1, [r3, #0]
   1d608:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1d60c:	2a00      	cmp	r2, #0
   1d60e:	f47f a97c 	bne.w	1c90a <ull_conn_llcp+0x21e>
			tx->next = conn->tx_head->next;
   1d612:	681a      	ldr	r2, [r3, #0]
   1d614:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1d616:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1d618:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   1d61a:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   1d61e:	f7ff b97c 	b.w	1c91a <ull_conn_llcp+0x22e>
		conn->tx_data_last = tx;
   1d622:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
		conn->procedure_expire = conn->procedure_reload;
   1d626:	e5d6      	b.n	1d1d6 <ull_conn_llcp+0xaea>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   1d628:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
   1d62a:	f889 8008 	strb.w	r8, [r9, #8]
   1d62e:	2702      	movs	r7, #2
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   1d630:	f889 3007 	strb.w	r3, [r9, #7]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   1d634:	e790      	b.n	1d558 <ull_conn_llcp+0xe6c>
		if (!conn->tx_ctrl) {
   1d636:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1d63a:	2a00      	cmp	r2, #0
   1d63c:	f47f af5b 	bne.w	1d4f6 <ull_conn_llcp+0xe0a>
			tx->next = conn->tx_head;
   1d640:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   1d642:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1d646:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   1d64a:	e75b      	b.n	1d504 <ull_conn_llcp+0xe18>
	    ((pdu_data_tx->llctrl.opcode !=
   1d64c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1d64e:	2a03      	cmp	r2, #3
   1d650:	f43f ae5e 	beq.w	1d310 <ull_conn_llcp+0xc24>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1d654:	2a0a      	cmp	r2, #10
   1d656:	f47f a8f4 	bne.w	1c842 <ull_conn_llcp+0x156>
   1d65a:	e659      	b.n	1d310 <ull_conn_llcp+0xc24>
		conn->tx_data_last = tx;
   1d65c:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
   1d660:	e7a2      	b.n	1d5a8 <ull_conn_llcp+0xebc>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1d662:	791a      	ldrb	r2, [r3, #4]
   1d664:	f002 0203 	and.w	r2, r2, #3
   1d668:	2a03      	cmp	r2, #3
   1d66a:	f000 80ff 	beq.w	1d86c <ull_conn_llcp+0x1180>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1d66e:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1d672:	f7ff b94a 	b.w	1c90a <ull_conn_llcp+0x21e>
			conn->tx_data = conn->tx_data->next;
   1d676:	6819      	ldr	r1, [r3, #0]
   1d678:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1d67c:	2a00      	cmp	r2, #0
   1d67e:	f47f aa9a 	bne.w	1cbb6 <ull_conn_llcp+0x4ca>
			tx->next = conn->tx_head->next;
   1d682:	681a      	ldr	r2, [r3, #0]
   1d684:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   1d688:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   1d68c:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   1d690:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
   1d694:	f7ff ba9a 	b.w	1cbcc <ull_conn_llcp+0x4e0>
			conn->tx_data = conn->tx_data->next;
   1d698:	6819      	ldr	r1, [r3, #0]
   1d69a:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1d69e:	2a00      	cmp	r2, #0
   1d6a0:	f47f ab68 	bne.w	1cd74 <ull_conn_llcp+0x688>
			tx->next = conn->tx_head->next;
   1d6a4:	681a      	ldr	r2, [r3, #0]
   1d6a6:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
   1d6a8:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   1d6aa:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   1d6ac:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
   1d6b0:	f7ff bb68 	b.w	1cd84 <ull_conn_llcp+0x698>
   1d6b4:	20002104 	.word	0x20002104
   1d6b8:	0002fd50 	.word	0x0002fd50
   1d6bc:	0002f900 	.word	0x0002f900
   1d6c0:	0002f8a0 	.word	0x0002f8a0
			conn->tx_data = conn->tx_data->next;
   1d6c4:	6819      	ldr	r1, [r3, #0]
   1d6c6:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1d6ca:	2a00      	cmp	r2, #0
   1d6cc:	f47f a97b 	bne.w	1c9c6 <ull_conn_llcp+0x2da>
			tx->next = conn->tx_head->next;
   1d6d0:	681a      	ldr	r2, [r3, #0]
   1d6d2:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
   1d6d4:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   1d6d6:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
   1d6d8:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
   1d6dc:	f7ff b97b 	b.w	1c9d6 <ull_conn_llcp+0x2ea>
		if (!conn->tx_ctrl) {
   1d6e0:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   1d6e4:	2900      	cmp	r1, #0
   1d6e6:	f47f ace4 	bne.w	1d0b2 <ull_conn_llcp+0x9c6>
			tx->next = conn->tx_head;
   1d6ea:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   1d6ec:	e9c4 2271 	strd	r2, r2, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1d6f0:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
   1d6f4:	e4e4      	b.n	1d0c0 <ull_conn_llcp+0x9d4>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1d6f6:	48ca      	ldr	r0, [pc, #808]	; (1da20 <ull_conn_llcp+0x1334>)
   1d6f8:	f7f7 fd74 	bl	151e4 <mem_acquire>
		if (!tx) {
   1d6fc:	2800      	cmp	r0, #0
   1d6fe:	f43f ace3 	beq.w	1d0c8 <ull_conn_llcp+0x9dc>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   1d702:	7902      	ldrb	r2, [r0, #4]
   1d704:	f042 0203 	orr.w	r2, r2, #3
   1d708:	7102      	strb	r2, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   1d70a:	2211      	movs	r2, #17
   1d70c:	71c2      	strb	r2, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   1d70e:	2203      	movs	r2, #3
   1d710:	7142      	strb	r2, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   1d712:	220f      	movs	r2, #15
   1d714:	7202      	strb	r2, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
   1d716:	f894 2187 	ldrb.w	r2, [r4, #391]	; 0x187
   1d71a:	7242      	strb	r2, [r0, #9]
	    conn->tx_head &&
   1d71c:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	if (
   1d720:	2a00      	cmp	r2, #0
   1d722:	f000 80df 	beq.w	1d8e4 <ull_conn_llcp+0x11f8>
	    !conn->llcp_enc.pause_tx &&
   1d726:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   1d72a:	0789      	lsls	r1, r1, #30
   1d72c:	f100 80da 	bmi.w	1d8e4 <ull_conn_llcp+0x11f8>
	    !conn->llcp_phy.pause_tx &&
   1d730:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   1d734:	07cb      	lsls	r3, r1, #31
   1d736:	f100 80d5 	bmi.w	1d8e4 <ull_conn_llcp+0x11f8>
		if (conn->tx_head == conn->tx_data) {
   1d73a:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   1d73e:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
   1d740:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1d744:	f000 81cb 	beq.w	1dade <ull_conn_llcp+0x13f2>
		} else if (!conn->tx_ctrl) {
   1d748:	2900      	cmp	r1, #0
   1d74a:	f000 81c0 	beq.w	1dace <ull_conn_llcp+0x13e2>
	tx->next = conn->tx_ctrl_last->next;
   1d74e:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   1d752:	6811      	ldr	r1, [r2, #0]
   1d754:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1d756:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   1d758:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1d75c:	6802      	ldr	r2, [r0, #0]
   1d75e:	2a00      	cmp	r2, #0
   1d760:	f000 81b2 	beq.w	1dac8 <ull_conn_llcp+0x13dc>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1d764:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   1d768:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   1d76c:	2300      	movs	r3, #0
   1d76e:	f8c8 3000 	str.w	r3, [r8]
   1d772:	e4a9      	b.n	1d0c8 <ull_conn_llcp+0x9dc>
			conn->tx_data = conn->tx_data->next;
   1d774:	6819      	ldr	r1, [r3, #0]
   1d776:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1d77a:	2a00      	cmp	r2, #0
   1d77c:	f47f ad99 	bne.w	1d2b2 <ull_conn_llcp+0xbc6>
			tx->next = conn->tx_head->next;
   1d780:	681a      	ldr	r2, [r3, #0]
   1d782:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   1d786:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   1d78a:	f8d9 3000 	ldr.w	r3, [r9]
				conn->tx_ctrl_last = tx;
   1d78e:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   1d792:	e599      	b.n	1d2c8 <ull_conn_llcp+0xbdc>
			conn->tx_data = conn->tx_data->next;
   1d794:	6819      	ldr	r1, [r3, #0]
   1d796:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1d79a:	2a00      	cmp	r2, #0
   1d79c:	f47f ad0d 	bne.w	1d1ba <ull_conn_llcp+0xace>
			tx->next = conn->tx_head->next;
   1d7a0:	681a      	ldr	r2, [r3, #0]
   1d7a2:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   1d7a6:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   1d7aa:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   1d7ae:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
   1d7b2:	e50d      	b.n	1d1d0 <ull_conn_llcp+0xae4>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1d7b4:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1d7b8:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		conn->tx_data_last = tx;
   1d7bc:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
   1d7c0:	f7fe bf9f 	b.w	1c702 <ull_conn_llcp+0x16>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1d7c4:	791a      	ldrb	r2, [r3, #4]
   1d7c6:	f002 0203 	and.w	r2, r2, #3
   1d7ca:	2a03      	cmp	r2, #3
   1d7cc:	f000 813d 	beq.w	1da4a <ull_conn_llcp+0x135e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1d7d0:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1d7d4:	f7ff b9ef 	b.w	1cbb6 <ull_conn_llcp+0x4ca>
		if (conn->llcp_phy.tx & PHY_2M) {
   1d7d8:	071f      	lsls	r7, r3, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1d7da:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		if (conn->llcp_phy.tx & PHY_2M) {
   1d7de:	f3c3 0282 	ubfx	r2, r3, #2, #3
   1d7e2:	f140 8093 	bpl.w	1d90c <ull_conn_llcp+0x1220>
			conn->llcp_phy.tx = PHY_2M;
   1d7e6:	2202      	movs	r2, #2
   1d7e8:	f362 0384 	bfi	r3, r2, #2, #3
   1d7ec:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		if (conn->llcp_phy.rx & PHY_2M) {
   1d7f0:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   1d7f4:	065f      	lsls	r7, r3, #25
   1d7f6:	ea4f 1253 	mov.w	r2, r3, lsr #5
   1d7fa:	d57e      	bpl.n	1d8fa <ull_conn_llcp+0x120e>
			conn->llcp_phy.rx = PHY_2M;
   1d7fc:	2202      	movs	r2, #2
   1d7fe:	f362 1347 	bfi	r3, r2, #5, #3
   1d802:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		conn->llcp_ack -= 2U;
   1d806:	1e83      	subs	r3, r0, #2
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   1d808:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
   1d80c:	f894 7060 	ldrb.w	r7, [r4, #96]	; 0x60
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   1d810:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
		conn->llcp_ack -= 2U;
   1d814:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1d818:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   1d81c:	f3c2 0182 	ubfx	r1, r2, #2, #3
   1d820:	f007 0707 	and.w	r7, r7, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   1d824:	f000 0007 	and.w	r0, r0, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1d828:	f3c3 0380 	ubfx	r3, r3, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
   1d82c:	428f      	cmp	r7, r1
   1d82e:	bf08      	it	eq
   1d830:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   1d832:	005b      	lsls	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
   1d834:	ebb0 1f52 	cmp.w	r0, r2, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
   1d838:	f043 0301 	orr.w	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   1d83c:	ea4f 1252 	mov.w	r2, r2, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
   1d840:	bf08      	it	eq
   1d842:	2200      	moveq	r2, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   1d844:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   1d848:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
   1d84c:	2206      	movs	r2, #6
		conn->llcp.phy_upd_ind.initiate = 1U;
   1d84e:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		conn->llcp_type = LLCP_PHY_UPD;
   1d852:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   1d856:	f7fe bf77 	b.w	1c748 <ull_conn_llcp+0x5c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1d85a:	791a      	ldrb	r2, [r3, #4]
   1d85c:	f002 0203 	and.w	r2, r2, #3
   1d860:	2a03      	cmp	r2, #3
   1d862:	d031      	beq.n	1d8c8 <ull_conn_llcp+0x11dc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1d864:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1d868:	f7ff b8ad 	b.w	1c9c6 <ull_conn_llcp+0x2da>
	    ((pdu_data_tx->llctrl.opcode !=
   1d86c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1d86e:	2a03      	cmp	r2, #3
   1d870:	f43f aecf 	beq.w	1d612 <ull_conn_llcp+0xf26>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1d874:	2a0a      	cmp	r2, #10
   1d876:	f47f aefa 	bne.w	1d66e <ull_conn_llcp+0xf82>
   1d87a:	e6ca      	b.n	1d612 <ull_conn_llcp+0xf26>
			conn->tx_data = conn->tx_data->next;
   1d87c:	6819      	ldr	r1, [r3, #0]
   1d87e:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1d882:	2a00      	cmp	r2, #0
   1d884:	f47f aa22 	bne.w	1cccc <ull_conn_llcp+0x5e0>
			tx->next = conn->tx_head->next;
   1d888:	681a      	ldr	r2, [r3, #0]
   1d88a:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   1d88e:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   1d892:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   1d896:	f7ff ba22 	b.w	1ccde <ull_conn_llcp+0x5f2>
			conn->tx_data = conn->tx_data->next;
   1d89a:	6819      	ldr	r1, [r3, #0]
   1d89c:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1d8a0:	2a00      	cmp	r2, #0
   1d8a2:	f47f adca 	bne.w	1d43a <ull_conn_llcp+0xd4e>
			tx->next = conn->tx_head->next;
   1d8a6:	681a      	ldr	r2, [r3, #0]
   1d8a8:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   1d8ac:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   1d8b0:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   1d8b4:	e5ca      	b.n	1d44c <ull_conn_llcp+0xd60>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1d8b6:	791a      	ldrb	r2, [r3, #4]
   1d8b8:	f002 0203 	and.w	r2, r2, #3
   1d8bc:	2a03      	cmp	r2, #3
   1d8be:	d00a      	beq.n	1d8d6 <ull_conn_llcp+0x11ea>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1d8c0:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1d8c4:	f7ff ba56 	b.w	1cd74 <ull_conn_llcp+0x688>
	    ((pdu_data_tx->llctrl.opcode !=
   1d8c8:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1d8ca:	2a03      	cmp	r2, #3
   1d8cc:	f43f af00 	beq.w	1d6d0 <ull_conn_llcp+0xfe4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1d8d0:	2a0a      	cmp	r2, #10
   1d8d2:	d1c7      	bne.n	1d864 <ull_conn_llcp+0x1178>
   1d8d4:	e6fc      	b.n	1d6d0 <ull_conn_llcp+0xfe4>
	    ((pdu_data_tx->llctrl.opcode !=
   1d8d6:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1d8d8:	2a03      	cmp	r2, #3
   1d8da:	f43f aee3 	beq.w	1d6a4 <ull_conn_llcp+0xfb8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1d8de:	2a0a      	cmp	r2, #10
   1d8e0:	d1ee      	bne.n	1d8c0 <ull_conn_llcp+0x11d4>
   1d8e2:	e6df      	b.n	1d6a4 <ull_conn_llcp+0xfb8>
		if (!conn->tx_ctrl) {
   1d8e4:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   1d8e8:	2900      	cmp	r1, #0
   1d8ea:	f47f af30 	bne.w	1d74e <ull_conn_llcp+0x1062>
			tx->next = conn->tx_head;
   1d8ee:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   1d8f0:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1d8f4:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   1d8f8:	e730      	b.n	1d75c <ull_conn_llcp+0x1070>
		} else if (conn->llcp_phy.rx & PHY_1M) {
   1d8fa:	07d1      	lsls	r1, r2, #31
   1d8fc:	f140 80fb 	bpl.w	1daf6 <ull_conn_llcp+0x140a>
			conn->llcp_phy.rx = PHY_1M;
   1d900:	2201      	movs	r2, #1
   1d902:	f362 1347 	bfi	r3, r2, #5, #3
   1d906:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   1d90a:	e77c      	b.n	1d806 <ull_conn_llcp+0x111a>
		} else if (conn->llcp_phy.tx & PHY_1M) {
   1d90c:	07d1      	lsls	r1, r2, #31
			conn->llcp_phy.tx = PHY_1M;
   1d90e:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		} else if (conn->llcp_phy.tx & PHY_1M) {
   1d912:	f140 8152 	bpl.w	1dbba <ull_conn_llcp+0x14ce>
			conn->llcp_phy.tx = PHY_1M;
   1d916:	2201      	movs	r2, #1
   1d918:	f362 0384 	bfi	r3, r2, #2, #3
   1d91c:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   1d920:	e766      	b.n	1d7f0 <ull_conn_llcp+0x1104>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1d922:	791a      	ldrb	r2, [r3, #4]
   1d924:	f002 0203 	and.w	r2, r2, #3
   1d928:	2a03      	cmp	r2, #3
   1d92a:	f000 80fb 	beq.w	1db24 <ull_conn_llcp+0x1438>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1d92e:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1d932:	e442      	b.n	1d1ba <ull_conn_llcp+0xace>
			conn->tx_data = conn->tx_data->next;
   1d934:	6819      	ldr	r1, [r3, #0]
   1d936:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1d93a:	2a00      	cmp	r2, #0
   1d93c:	f47f ae27 	bne.w	1d58e <ull_conn_llcp+0xea2>
			tx->next = conn->tx_head->next;
   1d940:	681a      	ldr	r2, [r3, #0]
   1d942:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   1d946:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   1d94a:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   1d94e:	e627      	b.n	1d5a0 <ull_conn_llcp+0xeb4>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1d950:	4833      	ldr	r0, [pc, #204]	; (1da20 <ull_conn_llcp+0x1334>)
   1d952:	f7f7 fc47 	bl	151e4 <mem_acquire>
	if (!tx) {
   1d956:	2800      	cmp	r0, #0
   1d958:	f43f abb6 	beq.w	1d0c8 <ull_conn_llcp+0x9dc>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1d95c:	7902      	ldrb	r2, [r0, #4]
   1d95e:	f042 0203 	orr.w	r2, r2, #3
   1d962:	7102      	strb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   1d964:	2218      	movs	r2, #24
   1d966:	7142      	strb	r2, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   1d968:	2210      	movs	r2, #16
   1d96a:	71c2      	strb	r2, [r0, #7]
	rsp->interval_min =
   1d96c:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
   1d970:	8102      	strh	r2, [r0, #8]
	rsp->interval_max =
   1d972:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
   1d976:	8142      	strh	r2, [r0, #10]
	rsp->latency =
   1d978:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
   1d97c:	8182      	strh	r2, [r0, #12]
	rsp->timeout =
   1d97e:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
   1d982:	81c2      	strh	r2, [r0, #14]
	rsp->preferred_periodicity =
   1d984:	f894 2190 	ldrb.w	r2, [r4, #400]	; 0x190
   1d988:	7402      	strb	r2, [r0, #16]
	rsp->reference_conn_event_count =
   1d98a:	f8b4 2192 	ldrh.w	r2, [r4, #402]	; 0x192
   1d98e:	f8a0 2011 	strh.w	r2, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
   1d992:	f8b4 2194 	ldrh.w	r2, [r4, #404]	; 0x194
   1d996:	f8a0 2013 	strh.w	r2, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
   1d99a:	f8b4 2196 	ldrh.w	r2, [r4, #406]	; 0x196
   1d99e:	f8a0 2015 	strh.w	r2, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
   1d9a2:	f8b4 2198 	ldrh.w	r2, [r4, #408]	; 0x198
   1d9a6:	f8a0 2017 	strh.w	r2, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
   1d9aa:	f8b4 219a 	ldrh.w	r2, [r4, #410]	; 0x19a
   1d9ae:	f8a0 2019 	strh.w	r2, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
   1d9b2:	f8b4 219c 	ldrh.w	r2, [r4, #412]	; 0x19c
   1d9b6:	f8a0 201b 	strh.w	r2, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
   1d9ba:	f8b4 219e 	ldrh.w	r2, [r4, #414]	; 0x19e
   1d9be:	f8a0 201d 	strh.w	r2, [r0, #29]
	    conn->tx_head &&
   1d9c2:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	if (
   1d9c6:	2a00      	cmp	r2, #0
   1d9c8:	d035      	beq.n	1da36 <ull_conn_llcp+0x134a>
	    !conn->llcp_enc.pause_tx &&
   1d9ca:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   1d9ce:	078f      	lsls	r7, r1, #30
   1d9d0:	d431      	bmi.n	1da36 <ull_conn_llcp+0x134a>
	    !conn->llcp_phy.pause_tx &&
   1d9d2:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   1d9d6:	07c9      	lsls	r1, r1, #31
   1d9d8:	d42d      	bmi.n	1da36 <ull_conn_llcp+0x134a>
		if (conn->tx_head == conn->tx_data) {
   1d9da:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   1d9de:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
   1d9e0:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1d9e4:	f000 80c6 	beq.w	1db74 <ull_conn_llcp+0x1488>
		} else if (!conn->tx_ctrl) {
   1d9e8:	2900      	cmp	r1, #0
   1d9ea:	f000 80bb 	beq.w	1db64 <ull_conn_llcp+0x1478>
	tx->next = conn->tx_ctrl_last->next;
   1d9ee:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   1d9f2:	6811      	ldr	r1, [r2, #0]
   1d9f4:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1d9f6:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   1d9f8:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1d9fc:	6802      	ldr	r2, [r0, #0]
   1d9fe:	2a00      	cmp	r2, #0
   1da00:	f000 80ad 	beq.w	1db5e <ull_conn_llcp+0x1472>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
   1da04:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1da08:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
   1da0c:	2305      	movs	r3, #5
   1da0e:	f363 0203 	bfi	r2, r3, #0, #4
   1da12:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1da16:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1da1a:	f7fe be72 	b.w	1c702 <ull_conn_llcp+0x16>
   1da1e:	bf00      	nop
   1da20:	20002104 	.word	0x20002104
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1da24:	791a      	ldrb	r2, [r3, #4]
   1da26:	f002 0203 	and.w	r2, r2, #3
   1da2a:	2a03      	cmp	r2, #3
   1da2c:	f000 80ae 	beq.w	1db8c <ull_conn_llcp+0x14a0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1da30:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1da34:	e43d      	b.n	1d2b2 <ull_conn_llcp+0xbc6>
		if (!conn->tx_ctrl) {
   1da36:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   1da3a:	2900      	cmp	r1, #0
   1da3c:	d1d7      	bne.n	1d9ee <ull_conn_llcp+0x1302>
			tx->next = conn->tx_head;
   1da3e:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   1da40:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1da44:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   1da48:	e7d8      	b.n	1d9fc <ull_conn_llcp+0x1310>
	    ((pdu_data_tx->llctrl.opcode !=
   1da4a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1da4c:	2a03      	cmp	r2, #3
   1da4e:	f43f ae18 	beq.w	1d682 <ull_conn_llcp+0xf96>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1da52:	2a0a      	cmp	r2, #10
   1da54:	f47f aebc 	bne.w	1d7d0 <ull_conn_llcp+0x10e4>
   1da58:	e613      	b.n	1d682 <ull_conn_llcp+0xf96>
			conn->tx_data = conn->tx_data->next;
   1da5a:	6819      	ldr	r1, [r3, #0]
   1da5c:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1da60:	2a00      	cmp	r2, #0
   1da62:	f47f ad48 	bne.w	1d4f6 <ull_conn_llcp+0xe0a>
			tx->next = conn->tx_head->next;
   1da66:	681a      	ldr	r2, [r3, #0]
   1da68:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1da6a:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   1da6c:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   1da70:	e548      	b.n	1d504 <ull_conn_llcp+0xe18>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1da72:	791a      	ldrb	r2, [r3, #4]
   1da74:	f002 0203 	and.w	r2, r2, #3
   1da78:	2a03      	cmp	r2, #3
   1da7a:	d062      	beq.n	1db42 <ull_conn_llcp+0x1456>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1da7c:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1da80:	f7ff b924 	b.w	1cccc <ull_conn_llcp+0x5e0>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1da84:	791a      	ldrb	r2, [r3, #4]
   1da86:	f002 0203 	and.w	r2, r2, #3
   1da8a:	2a03      	cmp	r2, #3
   1da8c:	d060      	beq.n	1db50 <ull_conn_llcp+0x1464>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1da8e:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1da92:	e4d2      	b.n	1d43a <ull_conn_llcp+0xd4e>
			conn->llcp_cu.interval = interval_max;
   1da94:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
   1da98:	f7ff ba97 	b.w	1cfca <ull_conn_llcp+0x8de>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1da9c:	791a      	ldrb	r2, [r3, #4]
   1da9e:	f002 0203 	and.w	r2, r2, #3
   1daa2:	2a03      	cmp	r2, #3
   1daa4:	f000 8099 	beq.w	1dbda <ull_conn_llcp+0x14ee>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1daa8:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1daac:	e523      	b.n	1d4f6 <ull_conn_llcp+0xe0a>
			conn->tx_data = conn->tx_data->next;
   1daae:	6818      	ldr	r0, [r3, #0]
   1dab0:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1dab4:	2900      	cmp	r1, #0
   1dab6:	f47f aafc 	bne.w	1d0b2 <ull_conn_llcp+0x9c6>
			tx->next = conn->tx_head->next;
   1daba:	6819      	ldr	r1, [r3, #0]
   1dabc:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   1dabe:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   1dac0:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   1dac4:	f7ff bafc 	b.w	1d0c0 <ull_conn_llcp+0x9d4>
		conn->tx_data_last = tx;
   1dac8:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   1dacc:	e64a      	b.n	1d764 <ull_conn_llcp+0x1078>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1dace:	7911      	ldrb	r1, [r2, #4]
   1dad0:	f001 0103 	and.w	r1, r1, #3
   1dad4:	2903      	cmp	r1, #3
   1dad6:	d017      	beq.n	1db08 <ull_conn_llcp+0x141c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1dad8:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   1dadc:	e637      	b.n	1d74e <ull_conn_llcp+0x1062>
			conn->tx_data = conn->tx_data->next;
   1dade:	6813      	ldr	r3, [r2, #0]
   1dae0:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1dae4:	2900      	cmp	r1, #0
   1dae6:	f47f ae32 	bne.w	1d74e <ull_conn_llcp+0x1062>
			tx->next = conn->tx_head->next;
   1daea:	6811      	ldr	r1, [r2, #0]
   1daec:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   1daee:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   1daf0:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   1daf4:	e632      	b.n	1d75c <ull_conn_llcp+0x1070>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
   1daf6:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = PHY_CODED;
   1dafa:	bf18      	it	ne
   1dafc:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
   1dafe:	f362 1347 	bfi	r3, r2, #5, #3
   1db02:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   1db06:	e67e      	b.n	1d806 <ull_conn_llcp+0x111a>
	    ((pdu_data_tx->llctrl.opcode !=
   1db08:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1db0a:	2903      	cmp	r1, #3
   1db0c:	d0ed      	beq.n	1daea <ull_conn_llcp+0x13fe>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1db0e:	290a      	cmp	r1, #10
   1db10:	d1e2      	bne.n	1dad8 <ull_conn_llcp+0x13ec>
   1db12:	e7ea      	b.n	1daea <ull_conn_llcp+0x13fe>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1db14:	791a      	ldrb	r2, [r3, #4]
   1db16:	f002 0203 	and.w	r2, r2, #3
   1db1a:	2a03      	cmp	r2, #3
   1db1c:	d00a      	beq.n	1db34 <ull_conn_llcp+0x1448>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1db1e:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1db22:	e534      	b.n	1d58e <ull_conn_llcp+0xea2>
	    ((pdu_data_tx->llctrl.opcode !=
   1db24:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1db26:	2a03      	cmp	r2, #3
   1db28:	f43f ae3a 	beq.w	1d7a0 <ull_conn_llcp+0x10b4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1db2c:	2a0a      	cmp	r2, #10
   1db2e:	f47f aefe 	bne.w	1d92e <ull_conn_llcp+0x1242>
   1db32:	e635      	b.n	1d7a0 <ull_conn_llcp+0x10b4>
	    ((pdu_data_tx->llctrl.opcode !=
   1db34:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1db36:	2a03      	cmp	r2, #3
   1db38:	f43f af02 	beq.w	1d940 <ull_conn_llcp+0x1254>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1db3c:	2a0a      	cmp	r2, #10
   1db3e:	d1ee      	bne.n	1db1e <ull_conn_llcp+0x1432>
   1db40:	e6fe      	b.n	1d940 <ull_conn_llcp+0x1254>
	    ((pdu_data_tx->llctrl.opcode !=
   1db42:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1db44:	2a03      	cmp	r2, #3
   1db46:	f43f ae9f 	beq.w	1d888 <ull_conn_llcp+0x119c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1db4a:	2a0a      	cmp	r2, #10
   1db4c:	d196      	bne.n	1da7c <ull_conn_llcp+0x1390>
   1db4e:	e69b      	b.n	1d888 <ull_conn_llcp+0x119c>
	    ((pdu_data_tx->llctrl.opcode !=
   1db50:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1db52:	2a03      	cmp	r2, #3
   1db54:	f43f aea7 	beq.w	1d8a6 <ull_conn_llcp+0x11ba>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1db58:	2a0a      	cmp	r2, #10
   1db5a:	d198      	bne.n	1da8e <ull_conn_llcp+0x13a2>
   1db5c:	e6a3      	b.n	1d8a6 <ull_conn_llcp+0x11ba>
		conn->tx_data_last = tx;
   1db5e:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   1db62:	e74f      	b.n	1da04 <ull_conn_llcp+0x1318>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1db64:	7911      	ldrb	r1, [r2, #4]
   1db66:	f001 0103 	and.w	r1, r1, #3
   1db6a:	2903      	cmp	r1, #3
   1db6c:	d016      	beq.n	1db9c <ull_conn_llcp+0x14b0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1db6e:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   1db72:	e73c      	b.n	1d9ee <ull_conn_llcp+0x1302>
			conn->tx_data = conn->tx_data->next;
   1db74:	6813      	ldr	r3, [r2, #0]
   1db76:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1db7a:	2900      	cmp	r1, #0
   1db7c:	f47f af37 	bne.w	1d9ee <ull_conn_llcp+0x1302>
			tx->next = conn->tx_head->next;
   1db80:	6811      	ldr	r1, [r2, #0]
   1db82:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   1db84:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   1db86:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   1db8a:	e737      	b.n	1d9fc <ull_conn_llcp+0x1310>
	    ((pdu_data_tx->llctrl.opcode !=
   1db8c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1db8e:	2a03      	cmp	r2, #3
   1db90:	f43f adf6 	beq.w	1d780 <ull_conn_llcp+0x1094>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1db94:	2a0a      	cmp	r2, #10
   1db96:	f47f af4b 	bne.w	1da30 <ull_conn_llcp+0x1344>
   1db9a:	e5f1      	b.n	1d780 <ull_conn_llcp+0x1094>
	    ((pdu_data_tx->llctrl.opcode !=
   1db9c:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1db9e:	2903      	cmp	r1, #3
   1dba0:	d0ee      	beq.n	1db80 <ull_conn_llcp+0x1494>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1dba2:	290a      	cmp	r1, #10
   1dba4:	d1e3      	bne.n	1db6e <ull_conn_llcp+0x1482>
   1dba6:	e7eb      	b.n	1db80 <ull_conn_llcp+0x1494>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1dba8:	7919      	ldrb	r1, [r3, #4]
   1dbaa:	f001 0103 	and.w	r1, r1, #3
   1dbae:	2903      	cmp	r1, #3
   1dbb0:	d00c      	beq.n	1dbcc <ull_conn_llcp+0x14e0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1dbb2:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1dbb6:	f7ff ba7c 	b.w	1d0b2 <ull_conn_llcp+0x9c6>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
   1dbba:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = PHY_CODED;
   1dbbe:	bf18      	it	ne
   1dbc0:	2204      	movne	r2, #4
			conn->llcp_phy.tx = 0U;
   1dbc2:	f362 0384 	bfi	r3, r2, #2, #3
   1dbc6:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   1dbca:	e611      	b.n	1d7f0 <ull_conn_llcp+0x1104>
	    ((pdu_data_tx->llctrl.opcode !=
   1dbcc:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1dbce:	2903      	cmp	r1, #3
   1dbd0:	f43f af73 	beq.w	1daba <ull_conn_llcp+0x13ce>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1dbd4:	290a      	cmp	r1, #10
   1dbd6:	d1ec      	bne.n	1dbb2 <ull_conn_llcp+0x14c6>
   1dbd8:	e76f      	b.n	1daba <ull_conn_llcp+0x13ce>
	    ((pdu_data_tx->llctrl.opcode !=
   1dbda:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1dbdc:	2a03      	cmp	r2, #3
   1dbde:	f43f af42 	beq.w	1da66 <ull_conn_llcp+0x137a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1dbe2:	2a0a      	cmp	r2, #10
   1dbe4:	f47f af60 	bne.w	1daa8 <ull_conn_llcp+0x13bc>
   1dbe8:	e73d      	b.n	1da66 <ull_conn_llcp+0x137a>
		LL_ASSERT(0);
   1dbea:	4a02      	ldr	r2, [pc, #8]	; (1dbf4 <ull_conn_llcp+0x1508>)
   1dbec:	4902      	ldr	r1, [pc, #8]	; (1dbf8 <ull_conn_llcp+0x150c>)
   1dbee:	f241 0301 	movw	r3, #4097	; 0x1001
   1dbf2:	e435      	b.n	1d460 <ull_conn_llcp+0xd74>
   1dbf4:	0002fd50 	.word	0x0002fd50
   1dbf8:	0002f900 	.word	0x0002f900

0001dbfc <ull_conn_tx_demux>:
{
   1dbfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   1dc00:	4c24      	ldr	r4, [pc, #144]	; (1dc94 <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1dc02:	4f25      	ldr	r7, [pc, #148]	; (1dc98 <ull_conn_tx_demux+0x9c>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   1dc04:	7962      	ldrb	r2, [r4, #5]
{
   1dc06:	4605      	mov	r5, r0
	return (void *)(fifo + first * size);
   1dc08:	f104 0608 	add.w	r6, r4, #8
   1dc0c:	e021      	b.n	1dc52 <ull_conn_tx_demux+0x56>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1dc0e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1dc12:	4638      	mov	r0, r7
   1dc14:	f7f7 fb18 	bl	15248 <mem_get>
	if (conn->lll.handle != handle) {
   1dc18:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   1dc1a:	bb2a      	cbnz	r2, 1dc68 <ull_conn_tx_demux+0x6c>
			struct node_tx *tx = lll_tx->node;
   1dc1c:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   1dc20:	f8d0 11d0 	ldr.w	r1, [r0, #464]	; 0x1d0
			tx->next = NULL;
   1dc24:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   1dc26:	b351      	cbz	r1, 1dc7e <ull_conn_tx_demux+0x82>
			if (conn->tx_data_last) {
   1dc28:	f8d0 21d4 	ldr.w	r2, [r0, #468]	; 0x1d4
   1dc2c:	b102      	cbz	r2, 1dc30 <ull_conn_tx_demux+0x34>
				conn->tx_data_last->next = tx;
   1dc2e:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   1dc30:	f8c0 31d4 	str.w	r3, [r0, #468]	; 0x1d4
		MFIFO_DEQUEUE(conn_tx);
   1dc34:	7962      	ldrb	r2, [r4, #5]
	uint8_t _first = *first; /* Copy read-index */
   1dc36:	7923      	ldrb	r3, [r4, #4]
   1dc38:	78a1      	ldrb	r1, [r4, #2]
	if (_first == last) {
   1dc3a:	429a      	cmp	r2, r3
   1dc3c:	d005      	beq.n	1dc4a <ull_conn_tx_demux+0x4e>
	_first += 1U;
   1dc3e:	3301      	adds	r3, #1
   1dc40:	b2db      	uxtb	r3, r3
		_first = 0U;
   1dc42:	4299      	cmp	r1, r3
   1dc44:	bf08      	it	eq
   1dc46:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1dc48:	7123      	strb	r3, [r4, #4]
	} while (--count);
   1dc4a:	3d01      	subs	r5, #1
   1dc4c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   1dc50:	d01e      	beq.n	1dc90 <ull_conn_tx_demux+0x94>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   1dc52:	7923      	ldrb	r3, [r4, #4]
   1dc54:	7821      	ldrb	r1, [r4, #0]
	if (first == last) {
   1dc56:	4293      	cmp	r3, r2
   1dc58:	d01a      	beq.n	1dc90 <ull_conn_tx_demux+0x94>
	return (void *)(fifo + first * size);
   1dc5a:	fb13 f301 	smulbb	r3, r3, r1
   1dc5e:	eb06 0803 	add.w	r8, r6, r3
	if (handle >= CONFIG_BT_MAX_CONN) {
   1dc62:	5af2      	ldrh	r2, [r6, r3]
   1dc64:	2a00      	cmp	r2, #0
   1dc66:	d0d2      	beq.n	1dc0e <ull_conn_tx_demux+0x12>
			struct node_tx *tx = lll_tx->node;
   1dc68:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   1dc6c:	790b      	ldrb	r3, [r1, #4]
   1dc6e:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   1dc72:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
   1dc76:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   1dc78:	f7fa fe34 	bl	188e4 <ll_tx_ack_put>
   1dc7c:	e7da      	b.n	1dc34 <ull_conn_tx_demux+0x38>
				if (!conn->tx_head) {
   1dc7e:	f8d0 21c4 	ldr.w	r2, [r0, #452]	; 0x1c4
				conn->tx_data = tx;
   1dc82:	f8c0 31d0 	str.w	r3, [r0, #464]	; 0x1d0
				if (!conn->tx_head) {
   1dc86:	2a00      	cmp	r2, #0
   1dc88:	d1ce      	bne.n	1dc28 <ull_conn_tx_demux+0x2c>
					conn->tx_head = tx;
   1dc8a:	f8c0 31c4 	str.w	r3, [r0, #452]	; 0x1c4
			if (conn->tx_data_last) {
   1dc8e:	e7cf      	b.n	1dc30 <ull_conn_tx_demux+0x34>
}
   1dc90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dc94:	200005a0 	.word	0x200005a0
   1dc98:	200011c8 	.word	0x200011c8

0001dc9c <conn_cleanup_finalize>:
{
   1dc9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = conn->llcp_rx;
   1dca0:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
{
   1dca4:	b082      	sub	sp, #8
   1dca6:	4606      	mov	r6, r0
	while (rx) {
   1dca8:	b144      	cbz	r4, 1dcbc <conn_cleanup_finalize+0x20>
		hdr->type = NODE_RX_TYPE_RELEASE;
   1dcaa:	2501      	movs	r5, #1
		rx = hdr->link->mem;
   1dcac:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   1dcae:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   1dcb0:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   1dcb2:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   1dcb4:	f7fa fdd0 	bl	18858 <ll_rx_put>
	while (rx) {
   1dcb8:	2c00      	cmp	r4, #0
   1dcba:	d1f7      	bne.n	1dcac <conn_cleanup_finalize+0x10>
	while (conn->tx_head) {
   1dcbc:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   1dcc0:	b381      	cbz	r1, 1dd24 <conn_cleanup_finalize+0x88>
		link = mem_acquire(&mem_link_tx.free);
   1dcc2:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 1dd68 <conn_cleanup_finalize+0xcc>
		LL_ASSERT(link);
   1dcc6:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 1dd6c <conn_cleanup_finalize+0xd0>
   1dcca:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 1dd70 <conn_cleanup_finalize+0xd4>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1dcce:	f106 0768 	add.w	r7, r6, #104	; 0x68
   1dcd2:	e007      	b.n	1dce4 <conn_cleanup_finalize+0x48>
   1dcd4:	4629      	mov	r1, r5
   1dcd6:	463a      	mov	r2, r7
   1dcd8:	4620      	mov	r0, r4
   1dcda:	f7f7 fae7 	bl	152ac <memq_enqueue>
	while (conn->tx_head) {
   1dcde:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   1dce2:	b1f9      	cbz	r1, 1dd24 <conn_cleanup_finalize+0x88>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1dce4:	4630      	mov	r0, r6
   1dce6:	f7fc fa5d 	bl	1a1a4 <tx_ull_dequeue>
   1dcea:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   1dcec:	4640      	mov	r0, r8
   1dcee:	f7f7 fa79 	bl	151e4 <mem_acquire>
		LL_ASSERT(link);
   1dcf2:	4604      	mov	r4, r0
   1dcf4:	2800      	cmp	r0, #0
   1dcf6:	d1ed      	bne.n	1dcd4 <conn_cleanup_finalize+0x38>
   1dcf8:	481e      	ldr	r0, [pc, #120]	; (1dd74 <conn_cleanup_finalize+0xd8>)
   1dcfa:	f640 137e 	movw	r3, #2430	; 0x97e
   1dcfe:	4652      	mov	r2, sl
   1dd00:	4649      	mov	r1, r9
   1dd02:	f009 fc17 	bl	27534 <assert_print>
   1dd06:	4040      	eors	r0, r0
   1dd08:	f380 8811 	msr	BASEPRI, r0
   1dd0c:	f04f 0003 	mov.w	r0, #3
   1dd10:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1dd12:	4629      	mov	r1, r5
   1dd14:	463a      	mov	r2, r7
   1dd16:	4620      	mov	r0, r4
   1dd18:	f7f7 fac8 	bl	152ac <memq_enqueue>
	while (conn->tx_head) {
   1dd1c:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   1dd20:	2900      	cmp	r1, #0
   1dd22:	d1df      	bne.n	1dce4 <conn_cleanup_finalize+0x48>
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1dd24:	8d32      	ldrh	r2, [r6, #40]	; 0x28
   1dd26:	4b14      	ldr	r3, [pc, #80]	; (1dd78 <conn_cleanup_finalize+0xdc>)
   1dd28:	9600      	str	r6, [sp, #0]
   1dd2a:	3203      	adds	r2, #3
   1dd2c:	b2d2      	uxtb	r2, r2
   1dd2e:	2101      	movs	r1, #1
   1dd30:	2000      	movs	r0, #0
   1dd32:	f7f8 fd07 	bl	16744 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1dd36:	f030 0302 	bics.w	r3, r0, #2
   1dd3a:	d00c      	beq.n	1dd56 <conn_cleanup_finalize+0xba>
   1dd3c:	4a0b      	ldr	r2, [pc, #44]	; (1dd6c <conn_cleanup_finalize+0xd0>)
   1dd3e:	490f      	ldr	r1, [pc, #60]	; (1dd7c <conn_cleanup_finalize+0xe0>)
   1dd40:	480c      	ldr	r0, [pc, #48]	; (1dd74 <conn_cleanup_finalize+0xd8>)
   1dd42:	f640 1343 	movw	r3, #2371	; 0x943
   1dd46:	f009 fbf5 	bl	27534 <assert_print>
   1dd4a:	4040      	eors	r0, r0
   1dd4c:	f380 8811 	msr	BASEPRI, r0
   1dd50:	f04f 0003 	mov.w	r0, #3
   1dd54:	df02      	svc	2
	lll->handle = LLL_HANDLE_INVALID;
   1dd56:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   1dd5a:	20ff      	movs	r0, #255	; 0xff
	lll->handle = LLL_HANDLE_INVALID;
   1dd5c:	8533      	strh	r3, [r6, #40]	; 0x28
}
   1dd5e:	b002      	add	sp, #8
   1dd60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull_conn_tx_demux(UINT8_MAX);
   1dd64:	f7ff bf4a 	b.w	1dbfc <ull_conn_tx_demux>
   1dd68:	200021b8 	.word	0x200021b8
   1dd6c:	0002fd50 	.word	0x0002fd50
   1dd70:	0002fda8 	.word	0x0002fda8
   1dd74:	0002f8a0 	.word	0x0002f8a0
   1dd78:	00019f51 	.word	0x00019f51
   1dd7c:	0002fe30 	.word	0x0002fe30

0001dd80 <ull_conn_done>:
{
   1dd80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
   1dd84:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   1dd86:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   1dd88:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1dd8c:	429a      	cmp	r2, r3
{
   1dd8e:	b08a      	sub	sp, #40	; 0x28
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   1dd90:	f000 808f 	beq.w	1deb2 <ull_conn_done+0x132>
	switch (done->extra.mic_state) {
   1dd94:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   1dd98:	2b01      	cmp	r3, #1
   1dd9a:	4605      	mov	r5, r0
   1dd9c:	f000 80e5 	beq.w	1df6a <ull_conn_done+0x1ea>
   1dda0:	2b02      	cmp	r3, #2
   1dda2:	f000 80cc 	beq.w	1df3e <ull_conn_done+0x1be>
   1dda6:	2b00      	cmp	r3, #0
   1dda8:	f000 80af 	beq.w	1df0a <ull_conn_done+0x18a>
	reason_final = conn->llcp_terminate.reason_final;
   1ddac:	f894 6143 	ldrb.w	r6, [r4, #323]	; 0x143
	if (reason_final && (
   1ddb0:	2e00      	cmp	r6, #0
   1ddb2:	f040 80c7 	bne.w	1df44 <ull_conn_done+0x1c4>
	latency_event = lll->latency_event;
   1ddb6:	f8b4 8030 	ldrh.w	r8, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
   1ddba:	8cab      	ldrh	r3, [r5, #36]	; 0x24
	elapsed_event = latency_event + 1;
   1ddbc:	f108 0701 	add.w	r7, r8, #1
	ticks_drift_minus = 0U;
   1ddc0:	e9cd 6608 	strd	r6, r6, [sp, #32]
	elapsed_event = latency_event + 1;
   1ddc4:	b2bf      	uxth	r7, r7
	if (done->extra.trx_cnt) {
   1ddc6:	2b00      	cmp	r3, #0
   1ddc8:	d076      	beq.n	1deb8 <ull_conn_done+0x138>
		} else if (lll->role) {
   1ddca:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1ddce:	2b00      	cmp	r3, #0
   1ddd0:	f2c0 8111 	blt.w	1dff6 <ull_conn_done+0x276>
	if (done->extra.crc_valid) {
   1ddd4:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
		conn->connect_expire = 0U;
   1ddd8:	2200      	movs	r2, #0
	if (done->extra.crc_valid) {
   1ddda:	07db      	lsls	r3, r3, #31
		conn->connect_expire = 0U;
   1dddc:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	if (done->extra.crc_valid) {
   1dde0:	f140 80c9 	bpl.w	1df76 <ull_conn_done+0x1f6>
		conn->supervision_expire = 0U;
   1dde4:	2300      	movs	r3, #0
   1dde6:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
	if (conn->procedure_expire != 0U) {
   1ddea:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   1ddee:	b12b      	cbz	r3, 1ddfc <ull_conn_done+0x7c>
		if (conn->procedure_expire > elapsed_event) {
   1ddf0:	42bb      	cmp	r3, r7
   1ddf2:	f240 8127 	bls.w	1e044 <ull_conn_done+0x2c4>
			conn->procedure_expire -= elapsed_event;
   1ddf6:	1bdb      	subs	r3, r3, r7
   1ddf8:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->apto_expire != 0U) {
   1ddfc:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   1de00:	b12b      	cbz	r3, 1de0e <ull_conn_done+0x8e>
		if (conn->apto_expire > elapsed_event) {
   1de02:	42bb      	cmp	r3, r7
   1de04:	f240 80e3 	bls.w	1dfce <ull_conn_done+0x24e>
			conn->apto_expire -= elapsed_event;
   1de08:	1bdb      	subs	r3, r3, r7
   1de0a:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	if (conn->appto_expire != 0U) {
   1de0e:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
			    (conn->llcp_req == conn->llcp_ack)) {
   1de12:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1de16:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
	if (conn->appto_expire != 0U) {
   1de1a:	b15a      	cbz	r2, 1de34 <ull_conn_done+0xb4>
		if (conn->appto_expire > elapsed_event) {
   1de1c:	42ba      	cmp	r2, r7
   1de1e:	f200 80ba 	bhi.w	1df96 <ull_conn_done+0x216>
			if ((conn->procedure_expire == 0U) &&
   1de22:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
			conn->appto_expire = 0U;
   1de26:	2000      	movs	r0, #0
   1de28:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
			if ((conn->procedure_expire == 0U) &&
   1de2c:	b912      	cbnz	r2, 1de34 <ull_conn_done+0xb4>
   1de2e:	4299      	cmp	r1, r3
   1de30:	f000 8124 	beq.w	1e07c <ull_conn_done+0x2fc>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1de34:	1a5b      	subs	r3, r3, r1
   1de36:	f003 0303 	and.w	r3, r3, #3
   1de3a:	2b02      	cmp	r3, #2
   1de3c:	f000 80b4 	beq.w	1dfa8 <ull_conn_done+0x228>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   1de40:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   1de44:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   1de48:	429a      	cmp	r2, r3
   1de4a:	f000 80d2 	beq.w	1dff2 <ull_conn_done+0x272>
		lll->latency_event = 0U;
   1de4e:	2200      	movs	r2, #0
   1de50:	8622      	strh	r2, [r4, #48]	; 0x30
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   1de52:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
	if ((force) || (latency_event != lll->latency_event)) {
   1de56:	b916      	cbnz	r6, 1de5e <ull_conn_done+0xde>
   1de58:	4590      	cmp	r8, r2
   1de5a:	f000 80b2 	beq.w	1dfc2 <ull_conn_done+0x242>
		lazy = lll->latency_event + 1U;
   1de5e:	3201      	adds	r2, #1
   1de60:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   1de62:	b913      	cbnz	r3, 1de6a <ull_conn_done+0xea>
   1de64:	2d00      	cmp	r5, #0
   1de66:	f000 808f 	beq.w	1df88 <ull_conn_done+0x208>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   1de6a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		struct ll_conn *conn = lll->hdr.parent;
   1de6c:	69e4      	ldr	r4, [r4, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1de6e:	9500      	str	r5, [sp, #0]
   1de70:	2000      	movs	r0, #0
   1de72:	4d99      	ldr	r5, [pc, #612]	; (1e0d8 <ull_conn_done+0x358>)
   1de74:	9103      	str	r1, [sp, #12]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   1de76:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1de78:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1de7c:	9604      	str	r6, [sp, #16]
   1de7e:	9406      	str	r4, [sp, #24]
   1de80:	b2d2      	uxtb	r2, r2
   1de82:	2101      	movs	r1, #1
   1de84:	9505      	str	r5, [sp, #20]
   1de86:	f7f8 fc45 	bl	16714 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1de8a:	f030 0302 	bics.w	r3, r0, #2
   1de8e:	d010      	beq.n	1deb2 <ull_conn_done+0x132>
   1de90:	f7fa fdc0 	bl	18a14 <ull_disable_mark_get>
   1de94:	4284      	cmp	r4, r0
   1de96:	d00c      	beq.n	1deb2 <ull_conn_done+0x132>
   1de98:	4a90      	ldr	r2, [pc, #576]	; (1e0dc <ull_conn_done+0x35c>)
   1de9a:	4991      	ldr	r1, [pc, #580]	; (1e0e0 <ull_conn_done+0x360>)
   1de9c:	4891      	ldr	r0, [pc, #580]	; (1e0e4 <ull_conn_done+0x364>)
   1de9e:	f240 63cc 	movw	r3, #1740	; 0x6cc
   1dea2:	f009 fb47 	bl	27534 <assert_print>
   1dea6:	4040      	eors	r0, r0
   1dea8:	f380 8811 	msr	BASEPRI, r0
   1deac:	f04f 0003 	mov.w	r0, #3
   1deb0:	df02      	svc	2
}
   1deb2:	b00a      	add	sp, #40	; 0x28
   1deb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (done->extra.crc_valid) {
   1deb8:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   1debc:	f013 0301 	ands.w	r3, r3, #1
   1dec0:	d190      	bne.n	1dde4 <ull_conn_done+0x64>
	else if (conn->connect_expire) {
   1dec2:	f8b4 10c0 	ldrh.w	r1, [r4, #192]	; 0xc0
   1dec6:	2900      	cmp	r1, #0
   1dec8:	d055      	beq.n	1df76 <ull_conn_done+0x1f6>
		if (conn->connect_expire > elapsed_event) {
   1deca:	42b9      	cmp	r1, r7
   1decc:	f240 80dd 	bls.w	1e08a <ull_conn_done+0x30a>
			conn->connect_expire -= elapsed_event;
   1ded0:	1bc9      	subs	r1, r1, r7
	if (conn->supervision_expire) {
   1ded2:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
			conn->connect_expire -= elapsed_event;
   1ded6:	f8a4 10c0 	strh.w	r1, [r4, #192]	; 0xc0
	if (conn->supervision_expire) {
   1deda:	2b00      	cmp	r3, #0
   1dedc:	d085      	beq.n	1ddea <ull_conn_done+0x6a>
		if (conn->supervision_expire > elapsed_event) {
   1dede:	429f      	cmp	r7, r3
   1dee0:	f080 809b 	bcs.w	1e01a <ull_conn_done+0x29a>
			conn->supervision_expire -= elapsed_event;
   1dee4:	1bdb      	subs	r3, r3, r7
   1dee6:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   1dee8:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   1deea:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   1deec:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
			lll->latency_event = 0U;
   1def0:	8622      	strh	r2, [r4, #48]	; 0x30
			if (conn->supervision_expire <= 6U) {
   1def2:	d908      	bls.n	1df06 <ull_conn_done+0x186>
			else if (lll->role) {
   1def4:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1def8:	4293      	cmp	r3, r2
   1defa:	f6bf af76 	bge.w	1ddea <ull_conn_done+0x6a>
				if (latency_event) {
   1defe:	f1b8 0f00 	cmp.w	r8, #0
   1df02:	f000 80ad 	beq.w	1e060 <ull_conn_done+0x2e0>
				force = 1U;
   1df06:	2601      	movs	r6, #1
   1df08:	e76f      	b.n	1ddea <ull_conn_done+0x6a>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   1df0a:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   1df0e:	0718      	lsls	r0, r3, #28
   1df10:	d551      	bpl.n	1dfb6 <ull_conn_done+0x236>
					    (lll->latency + 6)) ?
   1df12:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
			appto_reload_new = (conn->apto_reload >
   1df14:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
					    (lll->latency + 6)) ?
   1df18:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
   1df1a:	4299      	cmp	r1, r3
   1df1c:	bfc4      	itt	gt
   1df1e:	1f8b      	subgt	r3, r1, #6
   1df20:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
   1df22:	f8b4 00ca 	ldrh.w	r0, [r4, #202]	; 0xca
			appto_reload_new = (conn->apto_reload >
   1df26:	bfcc      	ite	gt
   1df28:	b29b      	uxthgt	r3, r3
   1df2a:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
   1df2c:	4298      	cmp	r0, r3
   1df2e:	d06e      	beq.n	1e00e <ull_conn_done+0x28e>
				conn->appto_reload = appto_reload_new;
   1df30:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
				conn->appto_expire = conn->appto_reload;
   1df34:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
				conn->apto_expire = conn->apto_reload;
   1df38:	f8a4 10d0 	strh.w	r1, [r4, #208]	; 0xd0
   1df3c:	e736      	b.n	1ddac <ull_conn_done+0x2c>
		conn->llcp_terminate.reason_final =
   1df3e:	263d      	movs	r6, #61	; 0x3d
   1df40:	f884 6143 	strb.w	r6, [r4, #323]	; 0x143
	if (conn == conn_upd_curr) {
   1df44:	4b68      	ldr	r3, [pc, #416]	; (1e0e8 <ull_conn_done+0x368>)
	rx->hdr.handle = conn->lll.handle;
   1df46:	f8a4 214a 	strh.w	r2, [r4, #330]	; 0x14a
	if (conn == conn_upd_curr) {
   1df4a:	6819      	ldr	r1, [r3, #0]
	*((uint8_t *)rx->pdu) = reason;
   1df4c:	f884 6160 	strb.w	r6, [r4, #352]	; 0x160
	if (conn == conn_upd_curr) {
   1df50:	428c      	cmp	r4, r1
		conn_upd_curr = NULL;
   1df52:	bf04      	itt	eq
   1df54:	2100      	moveq	r1, #0
   1df56:	6019      	streq	r1, [r3, #0]
	conn_cleanup_finalize(conn);
   1df58:	4620      	mov	r0, r4
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1df5a:	2318      	movs	r3, #24
   1df5c:	f884 3148 	strb.w	r3, [r4, #328]	; 0x148
}
   1df60:	b00a      	add	sp, #40	; 0x28
   1df62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	conn_cleanup_finalize(conn);
   1df66:	f7ff be99 	b.w	1dc9c <conn_cleanup_finalize>
		conn->appto_expire = conn->apto_expire = 0U;
   1df6a:	2300      	movs	r3, #0
   1df6c:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   1df70:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		break;
   1df74:	e71a      	b.n	1ddac <ull_conn_done+0x2c>
		if (!conn->supervision_expire) {
   1df76:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   1df7a:	2b00      	cmp	r3, #0
   1df7c:	d1af      	bne.n	1dede <ull_conn_done+0x15e>
			conn->supervision_expire = conn->supervision_reload;
   1df7e:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
   1df82:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
   1df86:	e7a8      	b.n	1deda <ull_conn_done+0x15a>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   1df88:	2900      	cmp	r1, #0
   1df8a:	f47f af6e 	bne.w	1de6a <ull_conn_done+0xea>
   1df8e:	2e00      	cmp	r6, #0
   1df90:	f47f af6b 	bne.w	1de6a <ull_conn_done+0xea>
   1df94:	e78d      	b.n	1deb2 <ull_conn_done+0x132>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1df96:	1a5b      	subs	r3, r3, r1
   1df98:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
   1df9c:	1bd2      	subs	r2, r2, r7
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1df9e:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
   1dfa0:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1dfa4:	f47f af4c 	bne.w	1de40 <ull_conn_done+0xc0>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   1dfa8:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1dfac:	3b01      	subs	r3, #1
   1dfae:	2b01      	cmp	r3, #1
   1dfb0:	f63f af46 	bhi.w	1de40 <ull_conn_done+0xc0>
   1dfb4:	e74b      	b.n	1de4e <ull_conn_done+0xce>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   1dfb6:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   1dfba:	07d9      	lsls	r1, r3, #31
   1dfbc:	f57f aef6 	bpl.w	1ddac <ull_conn_done+0x2c>
   1dfc0:	e7a7      	b.n	1df12 <ull_conn_done+0x192>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   1dfc2:	b913      	cbnz	r3, 1dfca <ull_conn_done+0x24a>
   1dfc4:	2d00      	cmp	r5, #0
   1dfc6:	f43f af74 	beq.w	1deb2 <ull_conn_done+0x132>
	lazy = 0U;
   1dfca:	4631      	mov	r1, r6
   1dfcc:	e74d      	b.n	1de6a <ull_conn_done+0xea>
			rx = ll_pdu_rx_alloc();
   1dfce:	f7fa fc73 	bl	188b8 <ll_pdu_rx_alloc>
			if (rx) {
   1dfd2:	4601      	mov	r1, r0
   1dfd4:	2800      	cmp	r0, #0
   1dfd6:	d03f      	beq.n	1e058 <ull_conn_done+0x2d8>
				rx->handle = lll->handle;
   1dfd8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				conn->apto_expire = 0U;
   1dfda:	2200      	movs	r2, #0
   1dfdc:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
				rx->handle = lll->handle;
   1dfe0:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   1dfe2:	231b      	movs	r3, #27
   1dfe4:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   1dfe6:	6800      	ldr	r0, [r0, #0]
   1dfe8:	f7fa fc36 	bl	18858 <ll_rx_put>
				ll_rx_sched();
   1dfec:	f7fa fc3e 	bl	1886c <ll_rx_sched>
   1dff0:	e70d      	b.n	1de0e <ull_conn_done+0x8e>
	if ((force) || (latency_event != lll->latency_event)) {
   1dff2:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   1dff4:	e72d      	b.n	1de52 <ull_conn_done+0xd2>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   1dff6:	aa08      	add	r2, sp, #32
   1dff8:	a909      	add	r1, sp, #36	; 0x24
   1dffa:	4628      	mov	r0, r5
   1dffc:	f7ee fd00 	bl	ca00 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   1e000:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   1e004:	2b00      	cmp	r3, #0
   1e006:	d051      	beq.n	1e0ac <ull_conn_done+0x32c>
				lll->latency_event = 0;
   1e008:	2300      	movs	r3, #0
   1e00a:	8623      	strh	r3, [r4, #48]	; 0x30
   1e00c:	e6e2      	b.n	1ddd4 <ull_conn_done+0x54>
			if (conn->apto_expire == 0U) {
   1e00e:	f8b4 00d0 	ldrh.w	r0, [r4, #208]	; 0xd0
   1e012:	2800      	cmp	r0, #0
   1e014:	f47f aeca 	bne.w	1ddac <ull_conn_done+0x2c>
   1e018:	e78c      	b.n	1df34 <ull_conn_done+0x1b4>
	if (conn == conn_upd_curr) {
   1e01a:	4b33      	ldr	r3, [pc, #204]	; (1e0e8 <ull_conn_done+0x368>)
	rx->hdr.handle = conn->lll.handle;
   1e01c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
	if (conn == conn_upd_curr) {
   1e01e:	681a      	ldr	r2, [r3, #0]
   1e020:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   1e022:	bf04      	itt	eq
   1e024:	2200      	moveq	r2, #0
   1e026:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1e028:	2218      	movs	r2, #24
	*((uint8_t *)rx->pdu) = reason;
   1e02a:	2308      	movs	r3, #8
	rx->hdr.handle = conn->lll.handle;
   1e02c:	f8a4 114a 	strh.w	r1, [r4, #330]	; 0x14a
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1e030:	f884 2148 	strb.w	r2, [r4, #328]	; 0x148
	*((uint8_t *)rx->pdu) = reason;
   1e034:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
	conn_cleanup_finalize(conn);
   1e038:	4620      	mov	r0, r4
   1e03a:	f7ff fe2f 	bl	1dc9c <conn_cleanup_finalize>
}
   1e03e:	b00a      	add	sp, #40	; 0x28
   1e040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn == conn_upd_curr) {
   1e044:	4b28      	ldr	r3, [pc, #160]	; (1e0e8 <ull_conn_done+0x368>)
	rx->hdr.handle = conn->lll.handle;
   1e046:	8d21      	ldrh	r1, [r4, #40]	; 0x28
	if (conn == conn_upd_curr) {
   1e048:	681a      	ldr	r2, [r3, #0]
   1e04a:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   1e04c:	bf04      	itt	eq
   1e04e:	2200      	moveq	r2, #0
   1e050:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1e052:	2218      	movs	r2, #24
	*((uint8_t *)rx->pdu) = reason;
   1e054:	2322      	movs	r3, #34	; 0x22
   1e056:	e7e9      	b.n	1e02c <ull_conn_done+0x2ac>
				conn->apto_expire = 1U;
   1e058:	2301      	movs	r3, #1
   1e05a:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   1e05e:	e6d6      	b.n	1de0e <ull_conn_done+0x8e>
					force = conn->periph.force & 0x01;
   1e060:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
					conn->periph.force >>= 1U;
   1e064:	085a      	lsrs	r2, r3, #1
					if (force) {
   1e066:	f013 0301 	ands.w	r3, r3, #1
						conn->periph.force |= BIT(31);
   1e06a:	bf17      	itett	ne
   1e06c:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->periph.force >>= 1U;
   1e070:	f8c4 20dc 	streq.w	r2, [r4, #220]	; 0xdc
						conn->periph.force |= BIT(31);
   1e074:	f8c4 20dc 	strne.w	r2, [r4, #220]	; 0xdc
					force = conn->periph.force & 0x01;
   1e078:	461e      	movne	r6, r3
   1e07a:	e6b6      	b.n	1ddea <ull_conn_done+0x6a>
				conn->llcp_type = LLCP_PING;
   1e07c:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   1e07e:	1e8b      	subs	r3, r1, #2
				conn->llcp_type = LLCP_PING;
   1e080:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
				conn->llcp_ack -= 2U;
   1e084:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1e088:	e6da      	b.n	1de40 <ull_conn_done+0xc0>
	if (conn == conn_upd_curr) {
   1e08a:	4917      	ldr	r1, [pc, #92]	; (1e0e8 <ull_conn_done+0x368>)
	rx->hdr.handle = conn->lll.handle;
   1e08c:	f8a4 214a 	strh.w	r2, [r4, #330]	; 0x14a
	if (conn == conn_upd_curr) {
   1e090:	6808      	ldr	r0, [r1, #0]
   1e092:	4284      	cmp	r4, r0
		conn_upd_curr = NULL;
   1e094:	bf08      	it	eq
   1e096:	600b      	streq	r3, [r1, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1e098:	2118      	movs	r1, #24
	*((uint8_t *)rx->pdu) = reason;
   1e09a:	233e      	movs	r3, #62	; 0x3e
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1e09c:	f884 1148 	strb.w	r1, [r4, #328]	; 0x148
	*((uint8_t *)rx->pdu) = reason;
   1e0a0:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
	conn_cleanup_finalize(conn);
   1e0a4:	4620      	mov	r0, r4
   1e0a6:	f7ff fdf9 	bl	1dc9c <conn_cleanup_finalize>
}
   1e0aa:	e702      	b.n	1deb2 <ull_conn_done+0x132>
				ull_conn_tx_demux(UINT8_MAX);
   1e0ac:	20ff      	movs	r0, #255	; 0xff
   1e0ae:	f7ff fda5 	bl	1dbfc <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   1e0b2:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   1e0b6:	2b00      	cmp	r3, #0
   1e0b8:	d1a6      	bne.n	1e008 <ull_conn_done+0x288>
   1e0ba:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
   1e0be:	4632      	mov	r2, r6
   1e0c0:	f7f7 f8fe 	bl	152c0 <memq_peek>
   1e0c4:	2800      	cmp	r0, #0
   1e0c6:	d19f      	bne.n	1e008 <ull_conn_done+0x288>
			} else if (lll->periph.latency_enabled) {
   1e0c8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1e0cc:	075a      	lsls	r2, r3, #29
				lll->latency_event = lll->latency;
   1e0ce:	bf44      	itt	mi
   1e0d0:	8da3      	ldrhmi	r3, [r4, #44]	; 0x2c
   1e0d2:	8623      	strhmi	r3, [r4, #48]	; 0x30
   1e0d4:	e67e      	b.n	1ddd4 <ull_conn_done+0x54>
   1e0d6:	bf00      	nop
   1e0d8:	0001a165 	.word	0x0001a165
   1e0dc:	0002fd50 	.word	0x0002fd50
   1e0e0:	0002fec4 	.word	0x0002fec4
   1e0e4:	0002f8a0 	.word	0x0002f8a0
   1e0e8:	20002070 	.word	0x20002070

0001e0ec <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   1e0ec:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   1e0f0:	2b00      	cmp	r3, #0
   1e0f2:	f000 80be 	beq.w	1e272 <ull_conn_tx_lll_enqueue+0x186>
   1e0f6:	3901      	subs	r1, #1
{
   1e0f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   1e0fc:	f8df 8174 	ldr.w	r8, [pc, #372]	; 1e274 <ull_conn_tx_lll_enqueue+0x188>
		LL_ASSERT(link);
   1e100:	f8df a174 	ldr.w	sl, [pc, #372]	; 1e278 <ull_conn_tx_lll_enqueue+0x18c>
   1e104:	f8df 9174 	ldr.w	r9, [pc, #372]	; 1e27c <ull_conn_tx_lll_enqueue+0x190>
   1e108:	4604      	mov	r4, r0
   1e10a:	b2cd      	uxtb	r5, r1
   1e10c:	e010      	b.n	1e130 <ull_conn_tx_lll_enqueue+0x44>
		link = mem_acquire(&mem_link_tx.free);
   1e10e:	4640      	mov	r0, r8
   1e110:	f7f7 f868 	bl	151e4 <mem_acquire>
		LL_ASSERT(link);
   1e114:	4607      	mov	r7, r0
   1e116:	b3b0      	cbz	r0, 1e186 <ull_conn_tx_lll_enqueue+0x9a>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1e118:	f104 0268 	add.w	r2, r4, #104	; 0x68
   1e11c:	4631      	mov	r1, r6
   1e11e:	4638      	mov	r0, r7
   1e120:	f7f7 f8c4 	bl	152ac <memq_enqueue>
	while (conn->tx_head &&
   1e124:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   1e128:	3d01      	subs	r5, #1
   1e12a:	b2ed      	uxtb	r5, r5
   1e12c:	2b00      	cmp	r3, #0
   1e12e:	d05c      	beq.n	1e1ea <ull_conn_tx_lll_enqueue+0xfe>
		 !conn->llcp_phy.pause_tx &&
   1e130:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
	while (conn->tx_head &&
   1e134:	07d1      	lsls	r1, r2, #31
   1e136:	d403      	bmi.n	1e140 <ull_conn_tx_lll_enqueue+0x54>
		 !conn->llcp_enc.pause_tx &&
   1e138:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
		 !conn->llcp_phy.pause_tx &&
   1e13c:	0792      	lsls	r2, r2, #30
   1e13e:	d53a      	bpl.n	1e1b6 <ull_conn_tx_lll_enqueue+0xca>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   1e140:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1e144:	4293      	cmp	r3, r2
   1e146:	d150      	bne.n	1e1ea <ull_conn_tx_lll_enqueue+0xfe>
   1e148:	2dff      	cmp	r5, #255	; 0xff
   1e14a:	d04e      	beq.n	1e1ea <ull_conn_tx_lll_enqueue+0xfe>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1e14c:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
   1e150:	4620      	mov	r0, r4
   1e152:	f7fc f827 	bl	1a1a4 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1e156:	7903      	ldrb	r3, [r0, #4]
   1e158:	f003 0303 	and.w	r3, r3, #3
   1e15c:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1e15e:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1e160:	d1d5      	bne.n	1e10e <ull_conn_tx_lll_enqueue+0x22>
			ctrl_tx_pre_ack(conn, pdu_tx);
   1e162:	79c3      	ldrb	r3, [r0, #7]
	switch (pdu_tx->llctrl.opcode) {
   1e164:	2b0b      	cmp	r3, #11
   1e166:	d042      	beq.n	1e1ee <ull_conn_tx_lll_enqueue+0x102>
   1e168:	d81b      	bhi.n	1e1a2 <ull_conn_tx_lll_enqueue+0xb6>
   1e16a:	2b04      	cmp	r3, #4
   1e16c:	d1cf      	bne.n	1e10e <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   1e16e:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   1e172:	f043 0302 	orr.w	r3, r3, #2
   1e176:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
		link = mem_acquire(&mem_link_tx.free);
   1e17a:	4640      	mov	r0, r8
   1e17c:	f7f7 f832 	bl	151e4 <mem_acquire>
		LL_ASSERT(link);
   1e180:	4607      	mov	r7, r0
   1e182:	2800      	cmp	r0, #0
   1e184:	d1c8      	bne.n	1e118 <ull_conn_tx_lll_enqueue+0x2c>
   1e186:	483e      	ldr	r0, [pc, #248]	; (1e280 <ull_conn_tx_lll_enqueue+0x194>)
   1e188:	f240 7331 	movw	r3, #1841	; 0x731
   1e18c:	4652      	mov	r2, sl
   1e18e:	4649      	mov	r1, r9
   1e190:	f009 f9d0 	bl	27534 <assert_print>
   1e194:	4040      	eors	r0, r0
   1e196:	f380 8811 	msr	BASEPRI, r0
   1e19a:	f04f 0003 	mov.w	r0, #3
   1e19e:	df02      	svc	2
   1e1a0:	e7ba      	b.n	1e118 <ull_conn_tx_lll_enqueue+0x2c>
	switch (pdu_tx->llctrl.opcode) {
   1e1a2:	3b16      	subs	r3, #22
   1e1a4:	2b01      	cmp	r3, #1
   1e1a6:	d8b2      	bhi.n	1e10e <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_phy.pause_tx = 1U;
   1e1a8:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   1e1ac:	f043 0301 	orr.w	r3, r3, #1
   1e1b0:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		break;
   1e1b4:	e7ab      	b.n	1e10e <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   1e1b6:	791a      	ldrb	r2, [r3, #4]
   1e1b8:	f002 0203 	and.w	r2, r2, #3
   1e1bc:	2a03      	cmp	r2, #3
   1e1be:	d1c3      	bne.n	1e148 <ull_conn_tx_lll_enqueue+0x5c>
	    ((pdu_data_tx->llctrl.opcode ==
   1e1c0:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   1e1c2:	2a03      	cmp	r2, #3
   1e1c4:	d001      	beq.n	1e1ca <ull_conn_tx_lll_enqueue+0xde>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   1e1c6:	2a0a      	cmp	r2, #10
   1e1c8:	d1be      	bne.n	1e148 <ull_conn_tx_lll_enqueue+0x5c>
		if (((conn->llcp_req != conn->llcp_ack) &&
   1e1ca:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   1e1ce:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   1e1d2:	428a      	cmp	r2, r1
   1e1d4:	d010      	beq.n	1e1f8 <ull_conn_tx_lll_enqueue+0x10c>
   1e1d6:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   1e1da:	2a03      	cmp	r2, #3
   1e1dc:	d0b4      	beq.n	1e148 <ull_conn_tx_lll_enqueue+0x5c>
			if ((tx->next != NULL) &&
   1e1de:	681a      	ldr	r2, [r3, #0]
   1e1e0:	b11a      	cbz	r2, 1e1ea <ull_conn_tx_lll_enqueue+0xfe>
   1e1e2:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   1e1e6:	428a      	cmp	r2, r1
   1e1e8:	d032      	beq.n	1e250 <ull_conn_tx_lll_enqueue+0x164>
}
   1e1ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!conn->lll.role) {
   1e1ee:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1e1f2:	2b00      	cmp	r3, #0
   1e1f4:	da8b      	bge.n	1e10e <ull_conn_tx_lll_enqueue+0x22>
   1e1f6:	e7ba      	b.n	1e16e <ull_conn_tx_lll_enqueue+0x82>
		    ((conn->llcp_req == conn->llcp_ack) &&
   1e1f8:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
   1e1fc:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
   1e200:	4288      	cmp	r0, r1
   1e202:	d1ec      	bne.n	1e1de <ull_conn_tx_lll_enqueue+0xf2>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   1e204:	f894 0139 	ldrb.w	r0, [r4, #313]	; 0x139
   1e208:	f894 1138 	ldrb.w	r1, [r4, #312]	; 0x138
   1e20c:	4288      	cmp	r0, r1
   1e20e:	d1e6      	bne.n	1e1de <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   1e210:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
   1e214:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   1e218:	4288      	cmp	r0, r1
   1e21a:	d1e0      	bne.n	1e1de <ull_conn_tx_lll_enqueue+0xf2>
		       conn->llcp_conn_param.req) ||
   1e21c:	f894 01ad 	ldrb.w	r0, [r4, #429]	; 0x1ad
   1e220:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
   1e224:	4288      	cmp	r0, r1
   1e226:	d1da      	bne.n	1e1de <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   1e228:	f894 01bd 	ldrb.w	r0, [r4, #445]	; 0x1bd
   1e22c:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   1e230:	4288      	cmp	r0, r1
   1e232:	d1d4      	bne.n	1e1de <ull_conn_tx_lll_enqueue+0xf2>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1e234:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_ack -= 2U;
   1e238:	3a02      	subs	r2, #2
   1e23a:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1e23e:	2201      	movs	r2, #1
   1e240:	f362 0301 	bfi	r3, r2, #0, #2
   1e244:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_type = LLCP_ENCRYPTION;
   1e248:	2303      	movs	r3, #3
   1e24a:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
   1e24e:	e77b      	b.n	1e148 <ull_conn_tx_lll_enqueue+0x5c>
				conn->tx_head = tx->next;
   1e250:	f8c4 21c4 	str.w	r2, [r4, #452]	; 0x1c4
				tx->next = conn->tx_ctrl_last->next;
   1e254:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
				if (!conn->tx_data_last) {
   1e258:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
				tx->next = conn->tx_ctrl_last->next;
   1e25c:	6810      	ldr	r0, [r2, #0]
   1e25e:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   1e260:	6013      	str	r3, [r2, #0]
				conn->tx_data = tx;
   1e262:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
				if (!conn->tx_data_last) {
   1e266:	2900      	cmp	r1, #0
   1e268:	f47f af6e 	bne.w	1e148 <ull_conn_tx_lll_enqueue+0x5c>
					conn->tx_data_last = tx;
   1e26c:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
   1e270:	e76a      	b.n	1e148 <ull_conn_tx_lll_enqueue+0x5c>
   1e272:	4770      	bx	lr
   1e274:	200021b8 	.word	0x200021b8
   1e278:	0002fd50 	.word	0x0002fd50
   1e27c:	0002fda8 	.word	0x0002fda8
   1e280:	0002f8a0 	.word	0x0002f8a0

0001e284 <tx_demux>:
{
   1e284:	b510      	push	{r4, lr}
   1e286:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   1e288:	2001      	movs	r0, #1
   1e28a:	f7ff fcb7 	bl	1dbfc <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   1e28e:	4620      	mov	r0, r4
   1e290:	2101      	movs	r1, #1
}
   1e292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   1e296:	f7ff bf29 	b.w	1e0ec <ull_conn_tx_lll_enqueue>
   1e29a:	bf00      	nop

0001e29c <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   1e29c:	4901      	ldr	r1, [pc, #4]	; (1e2a4 <ull_conn_link_tx_release+0x8>)
   1e29e:	f7f6 bfbb 	b.w	15218 <mem_release>
   1e2a2:	bf00      	nop
   1e2a4:	200021b8 	.word	0x200021b8

0001e2a8 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   1e2a8:	4b01      	ldr	r3, [pc, #4]	; (1e2b0 <ull_conn_ack_last_idx_get+0x8>)
}
   1e2aa:	7958      	ldrb	r0, [r3, #5]
   1e2ac:	4770      	bx	lr
   1e2ae:	bf00      	nop
   1e2b0:	20000558 	.word	0x20000558

0001e2b4 <ull_conn_ack_peek>:
{
   1e2b4:	b510      	push	{r4, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   1e2b6:	4b0c      	ldr	r3, [pc, #48]	; (1e2e8 <ull_conn_ack_peek+0x34>)
   1e2b8:	f893 c004 	ldrb.w	ip, [r3, #4]
   1e2bc:	f893 e005 	ldrb.w	lr, [r3, #5]
   1e2c0:	781c      	ldrb	r4, [r3, #0]
	if (first == last) {
   1e2c2:	45f4      	cmp	ip, lr
   1e2c4:	d00d      	beq.n	1e2e2 <ull_conn_ack_peek+0x2e>
	return (void *)(fifo + first * size);
   1e2c6:	fb1c fc04 	smulbb	ip, ip, r4
   1e2ca:	3308      	adds	r3, #8
   1e2cc:	eb03 040c 	add.w	r4, r3, ip
	*ack_last = mfifo_conn_ack.l;
   1e2d0:	f880 e000 	strb.w	lr, [r0]
	*handle = lll_tx->handle;
   1e2d4:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   1e2d8:	6863      	ldr	r3, [r4, #4]
	*handle = lll_tx->handle;
   1e2da:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   1e2dc:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   1e2de:	6818      	ldr	r0, [r3, #0]
}
   1e2e0:	bd10      	pop	{r4, pc}
		return NULL;
   1e2e2:	2000      	movs	r0, #0
}
   1e2e4:	bd10      	pop	{r4, pc}
   1e2e6:	bf00      	nop
   1e2e8:	20000558 	.word	0x20000558

0001e2ec <ull_conn_ack_by_last_peek>:
{
   1e2ec:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   1e2ee:	4b0b      	ldr	r3, [pc, #44]	; (1e31c <ull_conn_ack_by_last_peek+0x30>)
   1e2f0:	f893 c004 	ldrb.w	ip, [r3, #4]
   1e2f4:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
   1e2f8:	4584      	cmp	ip, r0
   1e2fa:	d00d      	beq.n	1e318 <ull_conn_ack_by_last_peek+0x2c>
	return (void *)(fifo + first * size);
   1e2fc:	3308      	adds	r3, #8
   1e2fe:	fb1c fc0e 	smulbb	ip, ip, lr
   1e302:	eb03 0e0c 	add.w	lr, r3, ip
	*handle = lll_tx->handle;
   1e306:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   1e30a:	f8de 3004 	ldr.w	r3, [lr, #4]
	*handle = lll_tx->handle;
   1e30e:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   1e310:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   1e312:	6818      	ldr	r0, [r3, #0]
}
   1e314:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1e318:	2000      	movs	r0, #0
   1e31a:	e7fb      	b.n	1e314 <ull_conn_ack_by_last_peek+0x28>
   1e31c:	20000558 	.word	0x20000558

0001e320 <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
   1e320:	4b09      	ldr	r3, [pc, #36]	; (1e348 <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   1e322:	7919      	ldrb	r1, [r3, #4]
	if (_first == last) {
   1e324:	795a      	ldrb	r2, [r3, #5]
   1e326:	7818      	ldrb	r0, [r3, #0]
   1e328:	f893 c002 	ldrb.w	ip, [r3, #2]
   1e32c:	428a      	cmp	r2, r1
   1e32e:	d009      	beq.n	1e344 <ull_conn_ack_dequeue+0x24>
	_first += 1U;
   1e330:	1c4a      	adds	r2, r1, #1
   1e332:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   1e334:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   1e338:	4594      	cmp	ip, r2
   1e33a:	bf08      	it	eq
   1e33c:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   1e33e:	6888      	ldr	r0, [r1, #8]
	*first = _first; /* Write back read-index */
   1e340:	711a      	strb	r2, [r3, #4]
	return mem;
   1e342:	4770      	bx	lr
		return NULL;
   1e344:	2000      	movs	r0, #0
}
   1e346:	4770      	bx	lr
   1e348:	20000558 	.word	0x20000558

0001e34c <ull_conn_lll_ack_enqueue>:
{
   1e34c:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1e34e:	4a15      	ldr	r2, [pc, #84]	; (1e3a4 <ull_conn_lll_ack_enqueue+0x58>)
   1e350:	f892 c005 	ldrb.w	ip, [r2, #5]
	if (last == count) {
   1e354:	7894      	ldrb	r4, [r2, #2]
   1e356:	f892 e004 	ldrb.w	lr, [r2, #4]
   1e35a:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
   1e35c:	f10c 0301 	add.w	r3, ip, #1
   1e360:	b2db      	uxtb	r3, r3
		last = 0U;
   1e362:	429c      	cmp	r4, r3
   1e364:	bf08      	it	eq
   1e366:	2300      	moveq	r3, #0
	if (last == first) {
   1e368:	459e      	cmp	lr, r3
   1e36a:	d00a      	beq.n	1e382 <ull_conn_lll_ack_enqueue+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1e36c:	fb1c fc05 	smulbb	ip, ip, r5
   1e370:	f102 0e08 	add.w	lr, r2, #8
	lll_tx->handle = handle;
   1e374:	f82e 000c 	strh.w	r0, [lr, ip]
   1e378:	44f4      	add	ip, lr
	lll_tx->node = tx;
   1e37a:	f8cc 1004 	str.w	r1, [ip, #4]
	*last = idx; /* Commit: Update write index */
   1e37e:	7153      	strb	r3, [r2, #5]
}
   1e380:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(lll_tx);
   1e382:	4a09      	ldr	r2, [pc, #36]	; (1e3a8 <ull_conn_lll_ack_enqueue+0x5c>)
   1e384:	4909      	ldr	r1, [pc, #36]	; (1e3ac <ull_conn_lll_ack_enqueue+0x60>)
   1e386:	480a      	ldr	r0, [pc, #40]	; (1e3b0 <ull_conn_lll_ack_enqueue+0x64>)
   1e388:	f240 7381 	movw	r3, #1921	; 0x781
   1e38c:	f009 f8d2 	bl	27534 <assert_print>
   1e390:	4040      	eors	r0, r0
   1e392:	f380 8811 	msr	BASEPRI, r0
   1e396:	f04f 0003 	mov.w	r0, #3
   1e39a:	df02      	svc	2
	lll_tx->handle = handle;
   1e39c:	2300      	movs	r3, #0
   1e39e:	801b      	strh	r3, [r3, #0]
   1e3a0:	deff      	udf	#255	; 0xff
   1e3a2:	bf00      	nop
   1e3a4:	20000558 	.word	0x20000558
   1e3a8:	0002fd50 	.word	0x0002fd50
   1e3ac:	0002fd98 	.word	0x0002fd98
   1e3b0:	0002f8a0 	.word	0x0002f8a0

0001e3b4 <ull_conn_tx_ack>:
{
   1e3b4:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(pdu_tx->len);
   1e3b6:	7953      	ldrb	r3, [r2, #5]
{
   1e3b8:	b082      	sub	sp, #8
   1e3ba:	4614      	mov	r4, r2
   1e3bc:	4605      	mov	r5, r0
   1e3be:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   1e3c0:	b37b      	cbz	r3, 1e422 <ull_conn_tx_ack+0x6e>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1e3c2:	7923      	ldrb	r3, [r4, #4]
   1e3c4:	f003 0203 	and.w	r2, r3, #3
   1e3c8:	2a03      	cmp	r2, #3
   1e3ca:	d00d      	beq.n	1e3e8 <ull_conn_tx_ack+0x34>
	} else if (handle == LLL_HANDLE_INVALID) {
   1e3cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1e3d0:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   1e3d2:	bf04      	itt	eq
   1e3d4:	f36f 0301 	bfceq	r3, #0, #2
   1e3d8:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   1e3da:	4621      	mov	r1, r4
   1e3dc:	4628      	mov	r0, r5
}
   1e3de:	b002      	add	sp, #8
   1e3e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   1e3e4:	f7fa ba7e 	b.w	188e4 <ll_tx_ack_put>
		if (handle != LLL_HANDLE_INVALID) {
   1e3e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e3ec:	429d      	cmp	r5, r3
   1e3ee:	d126      	bne.n	1e43e <ull_conn_tx_ack+0x8a>
		if (link->next == (void *)tx) {
   1e3f0:	6833      	ldr	r3, [r6, #0]
   1e3f2:	429c      	cmp	r4, r3
   1e3f4:	d03e      	beq.n	1e474 <ull_conn_tx_ack+0xc0>
		LL_ASSERT(!link->next);
   1e3f6:	2b00      	cmp	r3, #0
   1e3f8:	d0ef      	beq.n	1e3da <ull_conn_tx_ack+0x26>
   1e3fa:	4a85      	ldr	r2, [pc, #532]	; (1e610 <ull_conn_tx_ack+0x25c>)
   1e3fc:	4985      	ldr	r1, [pc, #532]	; (1e614 <ull_conn_tx_ack+0x260>)
   1e3fe:	4886      	ldr	r0, [pc, #536]	; (1e618 <ull_conn_tx_ack+0x264>)
   1e400:	f240 73ab 	movw	r3, #1963	; 0x7ab
   1e404:	f009 f896 	bl	27534 <assert_print>
   1e408:	4040      	eors	r0, r0
   1e40a:	f380 8811 	msr	BASEPRI, r0
   1e40e:	f04f 0003 	mov.w	r0, #3
   1e412:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   1e414:	4621      	mov	r1, r4
   1e416:	4628      	mov	r0, r5
}
   1e418:	b002      	add	sp, #8
   1e41a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   1e41e:	f7fa ba61 	b.w	188e4 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   1e422:	4a7b      	ldr	r2, [pc, #492]	; (1e610 <ull_conn_tx_ack+0x25c>)
   1e424:	497d      	ldr	r1, [pc, #500]	; (1e61c <ull_conn_tx_ack+0x268>)
   1e426:	487c      	ldr	r0, [pc, #496]	; (1e618 <ull_conn_tx_ack+0x264>)
   1e428:	f240 738e 	movw	r3, #1934	; 0x78e
   1e42c:	f009 f882 	bl	27534 <assert_print>
   1e430:	4040      	eors	r0, r0
   1e432:	f380 8811 	msr	BASEPRI, r0
   1e436:	f04f 0003 	mov.w	r0, #3
   1e43a:	df02      	svc	2
   1e43c:	e7c1      	b.n	1e3c2 <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1e43e:	462a      	mov	r2, r5
   1e440:	4877      	ldr	r0, [pc, #476]	; (1e620 <ull_conn_tx_ack+0x26c>)
   1e442:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1e446:	f7f6 feff 	bl	15248 <mem_get>
	switch (pdu_tx->llctrl.opcode) {
   1e44a:	79e2      	ldrb	r2, [r4, #7]
   1e44c:	3a02      	subs	r2, #2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1e44e:	4603      	mov	r3, r0
	switch (pdu_tx->llctrl.opcode) {
   1e450:	2a15      	cmp	r2, #21
   1e452:	d80c      	bhi.n	1e46e <ull_conn_tx_ack+0xba>
   1e454:	e8df f002 	tbb	[pc, r2]
   1e458:	261f0b4e 	.word	0x261f0b4e
   1e45c:	180b185a 	.word	0x180b185a
   1e460:	2d0b1f0b 	.word	0x2d0b1f0b
   1e464:	150b0b0b 	.word	0x150b0b0b
   1e468:	8e42180b 	.word	0x8e42180b
   1e46c:	376c      	.short	0x376c
		if (link->next == (void *)tx) {
   1e46e:	6833      	ldr	r3, [r6, #0]
   1e470:	42a3      	cmp	r3, r4
   1e472:	d1c0      	bne.n	1e3f6 <ull_conn_tx_ack+0x42>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1e474:	496b      	ldr	r1, [pc, #428]	; (1e624 <ull_conn_tx_ack+0x270>)
   1e476:	4620      	mov	r0, r4
}
   1e478:	b002      	add	sp, #8
   1e47a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1e47e:	f7f6 becb 	b.w	15218 <mem_release>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   1e482:	7a22      	ldrb	r2, [r4, #8]
   1e484:	2a03      	cmp	r2, #3
   1e486:	d014      	beq.n	1e4b2 <ull_conn_tx_ack+0xfe>
			conn->common.txn_lock = 0U;
   1e488:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
   1e48c:	f36f 0241 	bfc	r2, #1, #1
   1e490:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
			break;
   1e494:	e7ac      	b.n	1e3f0 <ull_conn_tx_ack+0x3c>
			conn->llcp_enc.pause_tx = 1U;
   1e496:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   1e49a:	f042 0202 	orr.w	r2, r2, #2
   1e49e:	f880 2166 	strb.w	r2, [r0, #358]	; 0x166
		break;
   1e4a2:	e7a5      	b.n	1e3f0 <ull_conn_tx_ack+0x3c>
			conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   1e4a4:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
   1e4a8:	f042 0203 	orr.w	r2, r2, #3
   1e4ac:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
   1e4b0:	e79e      	b.n	1e3f0 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
   1e4b2:	f893 2166 	ldrb.w	r2, [r3, #358]	; 0x166
   1e4b6:	f022 0203 	bic.w	r2, r2, #3
   1e4ba:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
		conn->procedure_expire = 0U;
   1e4be:	2200      	movs	r2, #0
   1e4c0:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		break;
   1e4c4:	e794      	b.n	1e3f0 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   1e4c6:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   1e4ca:	2a00      	cmp	r2, #0
   1e4cc:	db7f      	blt.n	1e5ce <ull_conn_tx_ack+0x21a>
		conn->llcp_phy.pause_tx = 0U;
   1e4ce:	f893 21bf 	ldrb.w	r2, [r3, #447]	; 0x1bf
   1e4d2:	f36f 0200 	bfc	r2, #0, #1
   1e4d6:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
		break;
   1e4da:	e789      	b.n	1e3f0 <ull_conn_tx_ack+0x3c>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_REQ_ACK_WAIT) {
   1e4dc:	f890 21ae 	ldrb.w	r2, [r0, #430]	; 0x1ae
   1e4e0:	f002 0107 	and.w	r1, r2, #7
   1e4e4:	2901      	cmp	r1, #1
   1e4e6:	d183      	bne.n	1e3f0 <ull_conn_tx_ack+0x3c>
			conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   1e4e8:	2102      	movs	r1, #2
   1e4ea:	f361 0202 	bfi	r2, r1, #0, #3
   1e4ee:	f880 21ae 	strb.w	r2, [r0, #430]	; 0x1ae
   1e4f2:	e77d      	b.n	1e3f0 <ull_conn_tx_ack+0x3c>
		if (pdu_tx->llctrl.terminate_ind.error_code ==
   1e4f4:	7a22      	ldrb	r2, [r4, #8]
			conn->llcp_terminate.reason_final =
   1e4f6:	2a13      	cmp	r2, #19
   1e4f8:	bf08      	it	eq
   1e4fa:	2216      	moveq	r2, #22
   1e4fc:	f880 2143 	strb.w	r2, [r0, #323]	; 0x143
		conn->llcp_terminate.ack--;
   1e500:	f890 2141 	ldrb.w	r2, [r0, #321]	; 0x141
   1e504:	3a01      	subs	r2, #1
   1e506:	f880 2141 	strb.w	r2, [r0, #321]	; 0x141
	break;
   1e50a:	e771      	b.n	1e3f0 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   1e50c:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   1e510:	2a00      	cmp	r2, #0
   1e512:	dac7      	bge.n	1e4a4 <ull_conn_tx_ack+0xf0>
			conn->llcp_enc.pause_rx = 0U;
   1e514:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   1e518:	f022 0203 	bic.w	r2, r2, #3
   1e51c:	f880 2166 	strb.w	r2, [r0, #358]	; 0x166
			conn->procedure_expire = 0U;
   1e520:	2200      	movs	r2, #0
   1e522:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
			conn->llcp_ack = conn->llcp_req;
   1e526:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   1e52a:	f880 20e5 	strb.w	r2, [r0, #229]	; 0xe5
   1e52e:	e75f      	b.n	1e3f0 <ull_conn_tx_ack+0x3c>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   1e530:	f890 21be 	ldrb.w	r2, [r0, #446]	; 0x1be
   1e534:	2102      	movs	r1, #2
   1e536:	f361 0201 	bfi	r2, r1, #0, #2
   1e53a:	f880 21be 	strb.w	r2, [r0, #446]	; 0x1be
		if (conn->lll.role) {
   1e53e:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   1e542:	2a00      	cmp	r2, #0
   1e544:	dac3      	bge.n	1e4ce <ull_conn_tx_ack+0x11a>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   1e546:	4a38      	ldr	r2, [pc, #224]	; (1e628 <ull_conn_tx_ack+0x274>)
   1e548:	e892 0003 	ldmia.w	r2, {r0, r1}
   1e54c:	aa02      	add	r2, sp, #8
   1e54e:	e902 0003 	stmdb	r2, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   1e552:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
   1e556:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
   1e55a:	ea41 0292 	orr.w	r2, r1, r2, lsr #2
			lll->phy_tx_time = phy_tx_time[phys];
   1e55e:	f002 0207 	and.w	r2, r2, #7
   1e562:	a802      	add	r0, sp, #8
   1e564:	4402      	add	r2, r0
   1e566:	f812 2c08 	ldrb.w	r2, [r2, #-8]
   1e56a:	f362 1106 	bfi	r1, r2, #4, #3
   1e56e:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
   1e572:	e7ac      	b.n	1e4ce <ull_conn_tx_ack+0x11a>
		conn->common.txn_lock = 0U;
   1e574:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
   1e578:	f36f 0241 	bfc	r2, #1, #1
   1e57c:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   1e580:	f893 21ad 	ldrb.w	r2, [r3, #429]	; 0x1ad
   1e584:	f890 01ac 	ldrb.w	r0, [r0, #428]	; 0x1ac
   1e588:	4282      	cmp	r2, r0
   1e58a:	f43f af31 	beq.w	1e3f0 <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   1e58e:	f893 11ae 	ldrb.w	r1, [r3, #430]	; 0x1ae
   1e592:	f001 0207 	and.w	r2, r1, #7
   1e596:	2a03      	cmp	r2, #3
   1e598:	d005      	beq.n	1e5a6 <ull_conn_tx_ack+0x1f2>
   1e59a:	3203      	adds	r2, #3
   1e59c:	f002 0207 	and.w	r2, r2, #7
   1e5a0:	2a01      	cmp	r2, #1
   1e5a2:	f63f af64 	bhi.w	1e46e <ull_conn_tx_ack+0xba>
				conn->lll.max_tx_octets =
   1e5a6:	f8b3 21b2 	ldrh.w	r2, [r3, #434]	; 0x1b2
   1e5aa:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
				conn->lll.max_tx_time =
   1e5ae:	f8b3 21b6 	ldrh.w	r2, [r3, #438]	; 0x1b6
   1e5b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
				if (conn->llcp_length.state ==
   1e5b6:	f001 0207 	and.w	r2, r1, #7
   1e5ba:	2a05      	cmp	r2, #5
   1e5bc:	d022      	beq.n	1e604 <ull_conn_tx_ack+0x250>
				if (!conn->llcp_length.cache.tx_octets) {
   1e5be:	f8b3 21b8 	ldrh.w	r2, [r3, #440]	; 0x1b8
   1e5c2:	b98a      	cbnz	r2, 1e5e8 <ull_conn_tx_ack+0x234>
					conn->llcp_length.ack =
   1e5c4:	f883 01ad 	strb.w	r0, [r3, #429]	; 0x1ad
					conn->procedure_expire = 0U;
   1e5c8:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
					break;
   1e5cc:	e710      	b.n	1e3f0 <ull_conn_tx_ack+0x3c>
				conn->common.txn_lock = 0U;
   1e5ce:	f890 10d8 	ldrb.w	r1, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   1e5d2:	4a15      	ldr	r2, [pc, #84]	; (1e628 <ull_conn_tx_ack+0x274>)
				conn->common.txn_lock = 0U;
   1e5d4:	f36f 0141 	bfc	r1, #1, #1
   1e5d8:	f880 10d8 	strb.w	r1, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   1e5dc:	e892 0003 	ldmia.w	r2, {r0, r1}
   1e5e0:	aa02      	add	r2, sp, #8
   1e5e2:	e902 0003 	stmdb	r2, {r0, r1}
				conn->common.txn_lock = 0U;
   1e5e6:	e7b4      	b.n	1e552 <ull_conn_tx_ack+0x19e>
				conn->llcp_length.tx_octets =
   1e5e8:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
   1e5ec:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1e5ee:	f362 0102 	bfi	r1, r2, #0, #3
				conn->llcp_length.cache.tx_octets = 0;
   1e5f2:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   1e5f6:	f8b3 21ba 	ldrh.w	r2, [r3, #442]	; 0x1ba
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1e5fa:	f883 11ae 	strb.w	r1, [r3, #430]	; 0x1ae
				conn->llcp_length.tx_time =
   1e5fe:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6
				break;
   1e602:	e6f5      	b.n	1e3f0 <ull_conn_tx_ack+0x3c>
					conn->llcp_length.state =
   1e604:	2204      	movs	r2, #4
   1e606:	f362 0102 	bfi	r1, r2, #0, #3
   1e60a:	f883 11ae 	strb.w	r1, [r3, #430]	; 0x1ae
					break;
   1e60e:	e6ef      	b.n	1e3f0 <ull_conn_tx_ack+0x3c>
   1e610:	0002fd50 	.word	0x0002fd50
   1e614:	0002ff2c 	.word	0x0002ff2c
   1e618:	0002f8a0 	.word	0x0002f8a0
   1e61c:	0002ff20 	.word	0x0002ff20
   1e620:	200011c8 	.word	0x200011c8
   1e624:	20002104 	.word	0x20002104
   1e628:	0002ff38 	.word	0x0002ff38

0001e62c <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   1e62c:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   1e630:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
	switch (lll->phy_tx_time) {
   1e634:	f3c2 1202 	ubfx	r2, r2, #4, #3
   1e638:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   1e63a:	bf14      	ite	ne
   1e63c:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   1e63e:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
   1e640:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	return max_tx_octets;
   1e644:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   1e646:	bf14      	ite	ne
   1e648:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   1e64a:	3b0b      	subeq	r3, #11
   1e64c:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   1e64e:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   1e650:	bf44      	itt	mi
   1e652:	3b04      	submi	r3, #4
   1e654:	b29b      	uxthmi	r3, r3
}
   1e656:	4298      	cmp	r0, r3
   1e658:	bf28      	it	cs
   1e65a:	4618      	movcs	r0, r3
   1e65c:	4770      	bx	lr
   1e65e:	bf00      	nop

0001e660 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param)
{
   1e660:	b510      	push	{r4, lr}
   1e662:	460c      	mov	r4, r1
	struct ll_conn *conn = param;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   1e664:	b930      	cbnz	r0, 1e674 <ticker_update_latency_cancel_op_cb+0x14>

	conn->periph.latency_cancel = 0U;
   1e666:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1e66a:	f36f 0382 	bfc	r3, #2, #1
   1e66e:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   1e672:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   1e674:	4a09      	ldr	r2, [pc, #36]	; (1e69c <ticker_update_latency_cancel_op_cb+0x3c>)
   1e676:	490a      	ldr	r1, [pc, #40]	; (1e6a0 <ticker_update_latency_cancel_op_cb+0x40>)
   1e678:	480a      	ldr	r0, [pc, #40]	; (1e6a4 <ticker_update_latency_cancel_op_cb+0x44>)
   1e67a:	f240 23af 	movw	r3, #687	; 0x2af
   1e67e:	f008 ff59 	bl	27534 <assert_print>
   1e682:	4040      	eors	r0, r0
   1e684:	f380 8811 	msr	BASEPRI, r0
   1e688:	f04f 0003 	mov.w	r0, #3
   1e68c:	df02      	svc	2
	conn->periph.latency_cancel = 0U;
   1e68e:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1e692:	f36f 0382 	bfc	r3, #2, #1
   1e696:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   1e69a:	bd10      	pop	{r4, pc}
   1e69c:	0002ff44 	.word	0x0002ff44
   1e6a0:	0002ff8c 	.word	0x0002ff8c
   1e6a4:	0002f8a0 	.word	0x0002f8a0

0001e6a8 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1e6a8:	b900      	cbnz	r0, 1e6ac <ticker_op_cb+0x4>
   1e6aa:	4770      	bx	lr
{
   1e6ac:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1e6ae:	4a07      	ldr	r2, [pc, #28]	; (1e6cc <ticker_op_cb+0x24>)
   1e6b0:	4907      	ldr	r1, [pc, #28]	; (1e6d0 <ticker_op_cb+0x28>)
   1e6b2:	4808      	ldr	r0, [pc, #32]	; (1e6d4 <ticker_op_cb+0x2c>)
   1e6b4:	f240 23a7 	movw	r3, #679	; 0x2a7
   1e6b8:	f008 ff3c 	bl	27534 <assert_print>
   1e6bc:	4040      	eors	r0, r0
   1e6be:	f380 8811 	msr	BASEPRI, r0
   1e6c2:	f04f 0003 	mov.w	r0, #3
   1e6c6:	df02      	svc	2
}
   1e6c8:	bd08      	pop	{r3, pc}
   1e6ca:	bf00      	nop
   1e6cc:	0002ff44 	.word	0x0002ff44
   1e6d0:	0002fdb0 	.word	0x0002fdb0
   1e6d4:	0002f8a0 	.word	0x0002f8a0

0001e6d8 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   1e6d8:	2801      	cmp	r0, #1
   1e6da:	d000      	beq.n	1e6de <ticker_op_stop_adv_cb+0x6>
   1e6dc:	4770      	bx	lr
{
   1e6de:	b510      	push	{r4, lr}
   1e6e0:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   1e6e2:	f7fa f997 	bl	18a14 <ull_disable_mark_get>
   1e6e6:	4284      	cmp	r4, r0
   1e6e8:	d00c      	beq.n	1e704 <ticker_op_stop_adv_cb+0x2c>
   1e6ea:	4a07      	ldr	r2, [pc, #28]	; (1e708 <ticker_op_stop_adv_cb+0x30>)
   1e6ec:	4907      	ldr	r1, [pc, #28]	; (1e70c <ticker_op_stop_adv_cb+0x34>)
   1e6ee:	4808      	ldr	r0, [pc, #32]	; (1e710 <ticker_op_stop_adv_cb+0x38>)
   1e6f0:	f240 239f 	movw	r3, #671	; 0x29f
   1e6f4:	f008 ff1e 	bl	27534 <assert_print>
   1e6f8:	4040      	eors	r0, r0
   1e6fa:	f380 8811 	msr	BASEPRI, r0
   1e6fe:	f04f 0003 	mov.w	r0, #3
   1e702:	df02      	svc	2
}
   1e704:	bd10      	pop	{r4, pc}
   1e706:	bf00      	nop
   1e708:	0002ff44 	.word	0x0002ff44
   1e70c:	0002ffa0 	.word	0x0002ffa0
   1e710:	0002f8a0 	.word	0x0002f8a0

0001e714 <ull_periph_ticker_cb>:
{
   1e714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e718:	9c07      	ldr	r4, [sp, #28]
   1e71a:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1e71e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   1e720:	461d      	mov	r5, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1e722:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e726:	4299      	cmp	r1, r3
   1e728:	d026      	beq.n	1e778 <ull_periph_ticker_cb+0x64>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   1e72a:	4606      	mov	r6, r0
   1e72c:	4617      	mov	r7, r2
   1e72e:	4601      	mov	r1, r0
   1e730:	462a      	mov	r2, r5
   1e732:	4620      	mov	r0, r4
   1e734:	f7fd ffda 	bl	1c6ec <ull_conn_llcp>
		if (ret) {
   1e738:	b9f0      	cbnz	r0, 1e778 <ull_periph_ticker_cb+0x64>
	return ++hdr->ref;
   1e73a:	7823      	ldrb	r3, [r4, #0]
   1e73c:	3301      	adds	r3, #1
   1e73e:	b2db      	uxtb	r3, r3
   1e740:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
   1e742:	b34b      	cbz	r3, 1e798 <ull_periph_ticker_cb+0x84>
	p.ticks_at_expire = ticks_at_expire;
   1e744:	491b      	ldr	r1, [pc, #108]	; (1e7b4 <ull_periph_ticker_cb+0xa0>)
	mfy.param = &p;
   1e746:	4b1c      	ldr	r3, [pc, #112]	; (1e7b8 <ull_periph_ticker_cb+0xa4>)
	p.lazy = lazy;
   1e748:	810d      	strh	r5, [r1, #8]
	p.param = &conn->lll;
   1e74a:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1e74e:	2200      	movs	r2, #0
	p.param = &conn->lll;
   1e750:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
   1e752:	e9c1 6700 	strd	r6, r7, [r1]
	p.force = force;
   1e756:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
   1e75a:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1e75c:	2001      	movs	r0, #1
   1e75e:	4611      	mov	r1, r2
   1e760:	f7f6 fe18 	bl	15394 <mayfly_enqueue>
	LL_ASSERT(!err);
   1e764:	b950      	cbnz	r0, 1e77c <ull_periph_ticker_cb+0x68>
	ull_conn_tx_demux(UINT8_MAX);
   1e766:	20ff      	movs	r0, #255	; 0xff
   1e768:	f7ff fa48 	bl	1dbfc <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1e76c:	4620      	mov	r0, r4
   1e76e:	21ff      	movs	r1, #255	; 0xff
}
   1e770:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1e774:	f7ff bcba 	b.w	1e0ec <ull_conn_tx_lll_enqueue>
}
   1e778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   1e77c:	4a0f      	ldr	r2, [pc, #60]	; (1e7bc <ull_periph_ticker_cb+0xa8>)
   1e77e:	4910      	ldr	r1, [pc, #64]	; (1e7c0 <ull_periph_ticker_cb+0xac>)
   1e780:	4810      	ldr	r0, [pc, #64]	; (1e7c4 <ull_periph_ticker_cb+0xb0>)
   1e782:	f240 232a 	movw	r3, #554	; 0x22a
   1e786:	f008 fed5 	bl	27534 <assert_print>
   1e78a:	4040      	eors	r0, r0
   1e78c:	f380 8811 	msr	BASEPRI, r0
   1e790:	f04f 0003 	mov.w	r0, #3
   1e794:	df02      	svc	2
   1e796:	e7e6      	b.n	1e766 <ull_periph_ticker_cb+0x52>
	LL_ASSERT(ref);
   1e798:	4a08      	ldr	r2, [pc, #32]	; (1e7bc <ull_periph_ticker_cb+0xa8>)
   1e79a:	490b      	ldr	r1, [pc, #44]	; (1e7c8 <ull_periph_ticker_cb+0xb4>)
   1e79c:	4809      	ldr	r0, [pc, #36]	; (1e7c4 <ull_periph_ticker_cb+0xb0>)
   1e79e:	f240 231d 	movw	r3, #541	; 0x21d
   1e7a2:	f008 fec7 	bl	27534 <assert_print>
   1e7a6:	4040      	eors	r0, r0
   1e7a8:	f380 8811 	msr	BASEPRI, r0
   1e7ac:	f04f 0003 	mov.w	r0, #3
   1e7b0:	df02      	svc	2
   1e7b2:	e7c7      	b.n	1e744 <ull_periph_ticker_cb+0x30>
   1e7b4:	200021fc 	.word	0x200021fc
   1e7b8:	20000608 	.word	0x20000608
   1e7bc:	0002ff44 	.word	0x0002ff44
   1e7c0:	0002fa40 	.word	0x0002fa40
   1e7c4:	0002f8a0 	.word	0x0002f8a0
   1e7c8:	0002fcd4 	.word	0x0002fcd4

0001e7cc <ull_periph_latency_cancel>:
	if (conn->lll.latency_event && !conn->periph.latency_cancel) {
   1e7cc:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   1e7ce:	b123      	cbz	r3, 1e7da <ull_periph_latency_cancel+0xe>
   1e7d0:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
   1e7d4:	f012 0304 	ands.w	r3, r2, #4
   1e7d8:	d000      	beq.n	1e7dc <ull_periph_latency_cancel+0x10>
   1e7da:	4770      	bx	lr
{
   1e7dc:	b510      	push	{r4, lr}
		conn->periph.latency_cancel = 1U;
   1e7de:	f042 0204 	orr.w	r2, r2, #4
{
   1e7e2:	b088      	sub	sp, #32
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   1e7e4:	4c11      	ldr	r4, [pc, #68]	; (1e82c <ull_periph_latency_cancel+0x60>)
		conn->periph.latency_cancel = 1U;
   1e7e6:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   1e7ea:	3103      	adds	r1, #3
   1e7ec:	2201      	movs	r2, #1
   1e7ee:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1e7f2:	e9cd 3404 	strd	r3, r4, [sp, #16]
   1e7f6:	e9cd 3300 	strd	r3, r3, [sp]
   1e7fa:	9006      	str	r0, [sp, #24]
   1e7fc:	b2ca      	uxtb	r2, r1
   1e7fe:	4618      	mov	r0, r3
   1e800:	2103      	movs	r1, #3
   1e802:	f7f7 ff87 	bl	16714 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1e806:	f030 0302 	bics.w	r3, r0, #2
   1e80a:	d00c      	beq.n	1e826 <ull_periph_latency_cancel+0x5a>
   1e80c:	4a08      	ldr	r2, [pc, #32]	; (1e830 <ull_periph_latency_cancel+0x64>)
   1e80e:	4909      	ldr	r1, [pc, #36]	; (1e834 <ull_periph_latency_cancel+0x68>)
   1e810:	4809      	ldr	r0, [pc, #36]	; (1e838 <ull_periph_latency_cancel+0x6c>)
   1e812:	f240 13e3 	movw	r3, #483	; 0x1e3
   1e816:	f008 fe8d 	bl	27534 <assert_print>
   1e81a:	4040      	eors	r0, r0
   1e81c:	f380 8811 	msr	BASEPRI, r0
   1e820:	f04f 0003 	mov.w	r0, #3
   1e824:	df02      	svc	2
}
   1e826:	b008      	add	sp, #32
   1e828:	bd10      	pop	{r4, pc}
   1e82a:	bf00      	nop
   1e82c:	0001e661 	.word	0x0001e661
   1e830:	0002ff44 	.word	0x0002ff44
   1e834:	0002fe30 	.word	0x0002fe30
   1e838:	0002f8a0 	.word	0x0002f8a0

0001e83c <ll_start_enc_req_send>:
{
   1e83c:	b570      	push	{r4, r5, r6, lr}
   1e83e:	460e      	mov	r6, r1
   1e840:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   1e842:	f7fc f847 	bl	1a8d4 <ll_connected_get>
	if (!conn) {
   1e846:	2800      	cmp	r0, #0
   1e848:	d040      	beq.n	1e8cc <ll_start_enc_req_send+0x90>
	if (error_code) {
   1e84a:	4604      	mov	r4, r0
   1e84c:	b95e      	cbnz	r6, 1e866 <ll_start_enc_req_send+0x2a>
		if ((conn->llcp_req == conn->llcp_ack) ||
   1e84e:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   1e852:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
   1e856:	429a      	cmp	r2, r3
   1e858:	d003      	beq.n	1e862 <ll_start_enc_req_send+0x26>
   1e85a:	f890 30e6 	ldrb.w	r3, [r0, #230]	; 0xe6
   1e85e:	2b03      	cmp	r3, #3
   1e860:	d026      	beq.n	1e8b0 <ll_start_enc_req_send+0x74>
				return BT_HCI_ERR_CMD_DISALLOWED;
   1e862:	200c      	movs	r0, #12
}
   1e864:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->llcp_enc.refresh == 0U) {
   1e866:	f890 0166 	ldrb.w	r0, [r0, #358]	; 0x166
   1e86a:	f010 0004 	ands.w	r0, r0, #4
   1e86e:	d112      	bne.n	1e896 <ll_start_enc_req_send+0x5a>
			if ((conn->llcp_req == conn->llcp_ack) ||
   1e870:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   1e874:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   1e878:	429a      	cmp	r2, r3
   1e87a:	d0f2      	beq.n	1e862 <ll_start_enc_req_send+0x26>
   1e87c:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   1e880:	2b03      	cmp	r3, #3
   1e882:	d1ee      	bne.n	1e862 <ll_start_enc_req_send+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1e884:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->llcp.encryption.error_code = error_code;
   1e888:	f884 60f5 	strb.w	r6, [r4, #245]	; 0xf5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1e88c:	f360 0301 	bfi	r3, r0, #0, #2
   1e890:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
}
   1e894:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
   1e896:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
			if (conn->llcp_terminate.ack !=
   1e89a:	f894 3141 	ldrb.w	r3, [r4, #321]	; 0x141
   1e89e:	4293      	cmp	r3, r2
   1e8a0:	d1df      	bne.n	1e862 <ll_start_enc_req_send+0x26>
			conn->llcp_terminate.req++;
   1e8a2:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
   1e8a4:	f884 6142 	strb.w	r6, [r4, #322]	; 0x142
			conn->llcp_terminate.req++;
   1e8a8:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
	return 0;
   1e8ac:	2000      	movs	r0, #0
}
   1e8ae:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp_enc.ltk[0], ltk,
   1e8b0:	2210      	movs	r2, #16
   1e8b2:	4629      	mov	r1, r5
   1e8b4:	f200 1071 	addw	r0, r0, #369	; 0x171
   1e8b8:	f00a fd45 	bl	29346 <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1e8bc:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
   1e8c0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   1e8c4:	f8a4 30f4 	strh.w	r3, [r4, #244]	; 0xf4
	return 0;
   1e8c8:	4630      	mov	r0, r6
}
   1e8ca:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1e8cc:	2002      	movs	r0, #2
}
   1e8ce:	bd70      	pop	{r4, r5, r6, pc}

0001e8d0 <lll_chan_sel_1>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.2
 * Channel Selection algorithm #1
 */
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   1e8d0:	b530      	push	{r4, r5, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1e8d2:	fb02 1c01 	mla	ip, r2, r1, r1
   1e8d6:	7802      	ldrb	r2, [r0, #0]
   1e8d8:	491c      	ldr	r1, [pc, #112]	; (1e94c <lll_chan_sel_1+0x7c>)
{
   1e8da:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1e8de:	4494      	add	ip, r2
   1e8e0:	fb81 210c 	smull	r2, r1, r1, ip
   1e8e4:	4461      	add	r1, ip
   1e8e6:	1149      	asrs	r1, r1, #5
   1e8e8:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
   1e8ec:	eb01 018e 	add.w	r1, r1, lr, lsl #2
{
   1e8f0:	4604      	mov	r4, r0
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1e8f2:	ebac 0101 	sub.w	r1, ip, r1
   1e8f6:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
   1e8f8:	7020      	strb	r0, [r4, #0]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1e8fa:	08c4      	lsrs	r4, r0, #3
   1e8fc:	f001 0107 	and.w	r1, r1, #7
   1e900:	f813 c004 	ldrb.w	ip, [r3, r4]
   1e904:	fa4c f101 	asr.w	r1, ip, r1
   1e908:	f011 0101 	ands.w	r1, r1, #1
   1e90c:	d11d      	bne.n	1e94a <lll_chan_sel_1+0x7a>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   1e90e:	fbb0 f2f5 	udiv	r2, r0, r5
   1e912:	fb05 0212 	mls	r2, r5, r2, r0
   1e916:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   1e918:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
   1e91c:	1d1c      	adds	r4, r3, #4
	chan_next = 0U;
   1e91e:	4608      	mov	r0, r1
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   1e920:	f100 0c08 	add.w	ip, r0, #8
   1e924:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		bit_count = 8U;
		while (bit_count--) {
   1e928:	fa5f fc8c 	uxtb.w	ip, ip
			if (bite & 0x01) {
   1e92c:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   1e930:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   1e934:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   1e938:	d002      	beq.n	1e940 <lll_chan_sel_1+0x70>
				if (chan_index == 0U) {
   1e93a:	b132      	cbz	r2, 1e94a <lll_chan_sel_1+0x7a>
				chan_index--;
   1e93c:	3a01      	subs	r2, #1
   1e93e:	b2d2      	uxtb	r2, r2
			chan_next++;
   1e940:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   1e942:	4584      	cmp	ip, r0
   1e944:	d1f2      	bne.n	1e92c <lll_chan_sel_1+0x5c>
	while (byte_count--) {
   1e946:	45a6      	cmp	lr, r4
   1e948:	d1ea      	bne.n	1e920 <lll_chan_sel_1+0x50>
}
   1e94a:	bd30      	pop	{r4, r5, pc}
   1e94c:	dd67c8a7 	.word	0xdd67c8a7

0001e950 <lll_chan_id>:
	return aa_ms ^ aa_ls;
   1e950:	8842      	ldrh	r2, [r0, #2]
   1e952:	8800      	ldrh	r0, [r0, #0]
}
   1e954:	4050      	eors	r0, r2
   1e956:	4770      	bx	lr

0001e958 <lll_chan_sel_2>:
{
   1e958:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.3.2
 * Inputs and basic components, for below operations
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1e95a:	4d2f      	ldr	r5, [pc, #188]	; (1ea18 <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1e95c:	4c2f      	ldr	r4, [pc, #188]	; (1ea1c <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn_s(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_s;

	prn_s = counter ^ chan_id;
   1e95e:	4048      	eors	r0, r1
   1e960:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1e964:	0a07      	lsrs	r7, r0, #8
   1e966:	b2c0      	uxtb	r0, r0
   1e968:	eb07 2787 	add.w	r7, r7, r7, lsl #10
   1e96c:	eb00 2e80 	add.w	lr, r0, r0, lsl #10
   1e970:	ea05 0647 	and.w	r6, r5, r7, lsl #1
   1e974:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1e978:	ea04 1747 	and.w	r7, r4, r7, lsl #5
   1e97c:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1e980:	433e      	orrs	r6, r7
   1e982:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1e986:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   1e98a:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   1e98e:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   1e992:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   1e996:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   1e998:	f3c0 4007 	ubfx	r0, r0, #16, #8
   1e99c:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1e9a0:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   1e9a4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1e9a8:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   1e9aa:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1e9ae:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   1e9b0:	d1d8      	bne.n	1e964 <lll_chan_sel_2+0xc>
static uint16_t chan_prn_e(uint16_t counter, uint16_t chan_id)
{
	uint16_t prn_e;

	prn_e = chan_prn_s(counter, chan_id);
	prn_e ^= chan_id;
   1e9b2:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   1e9b4:	481a      	ldr	r0, [pc, #104]	; (1ea20 <lll_chan_sel_2+0xc8>)
   1e9b6:	fba0 4001 	umull	r4, r0, r0, r1
   1e9ba:	1a0c      	subs	r4, r1, r0
   1e9bc:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   1e9c0:	0940      	lsrs	r0, r0, #5
   1e9c2:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   1e9c6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   1e9ca:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1e9cc:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   1e9d0:	f000 0507 	and.w	r5, r0, #7
   1e9d4:	5d14      	ldrb	r4, [r2, r4]
   1e9d6:	412c      	asrs	r4, r5
   1e9d8:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   1e9da:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1e9dc:	d41a      	bmi.n	1ea14 <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   1e9de:	fb01 f303 	mul.w	r3, r1, r3
   1e9e2:	1e56      	subs	r6, r2, #1
   1e9e4:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   1e9e8:	3204      	adds	r2, #4
	chan_next = 0U;
   1e9ea:	4660      	mov	r0, ip
		bite = *chan_map;
   1e9ec:	f100 0508 	add.w	r5, r0, #8
   1e9f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   1e9f4:	b2ed      	uxtb	r5, r5
			if (bite & 0x01) {
   1e9f6:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   1e9fa:	f100 0401 	add.w	r4, r0, #1
			bite >>= 1;
   1e9fe:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   1ea02:	d002      	beq.n	1ea0a <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   1ea04:	b133      	cbz	r3, 1ea14 <lll_chan_sel_2+0xbc>
				chan_index--;
   1ea06:	3b01      	subs	r3, #1
   1ea08:	b2db      	uxtb	r3, r3
			chan_next++;
   1ea0a:	b2e0      	uxtb	r0, r4
		while (bit_count--) {
   1ea0c:	42a8      	cmp	r0, r5
   1ea0e:	d1f2      	bne.n	1e9f6 <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   1ea10:	42b2      	cmp	r2, r6
   1ea12:	d1eb      	bne.n	1e9ec <lll_chan_sel_2+0x94>
}
   1ea14:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ea16:	bf00      	nop
   1ea18:	00022110 	.word	0x00022110
   1ea1c:	00088440 	.word	0x00088440
   1ea20:	bacf914d 	.word	0xbacf914d

0001ea24 <rl_update>:
		}
	}
}

static void rl_update(void)
{
   1ea24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ea28:	4d18      	ldr	r5, [pc, #96]	; (1ea8c <rl_update+0x68>)
   1ea2a:	4e19      	ldr	r6, [pc, #100]	; (1ea90 <rl_update+0x6c>)
   1ea2c:	2400      	movs	r4, #0
   1ea2e:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
}

static void filter_insert(struct lll_filter *const filter, int index,
			  uint8_t addr_type, const uint8_t *const bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   1ea32:	1eaf      	subs	r7, r5, #2
   1ea34:	f04f 0801 	mov.w	r8, #1
   1ea38:	e006      	b.n	1ea48 <rl_update+0x24>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1ea3a:	3401      	adds	r4, #1
   1ea3c:	2c08      	cmp	r4, #8
   1ea3e:	f105 0506 	add.w	r5, r5, #6
   1ea42:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1ea46:	d01e      	beq.n	1ea86 <rl_update+0x62>
		if (rl[i].taken) {
   1ea48:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1ea4c:	f819 3033 	ldrb.w	r3, [r9, r3, lsl #3]
   1ea50:	07da      	lsls	r2, r3, #31
   1ea52:	d5f2      	bpl.n	1ea3a <rl_update+0x16>
	filter->enable_bitmask |= BIT(index);
   1ea54:	7839      	ldrb	r1, [r7, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1ea56:	787a      	ldrb	r2, [r7, #1]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   1ea58:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   1ea5c:	fa08 fc04 	lsl.w	ip, r8, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1ea60:	40a3      	lsls	r3, r4
	filter->enable_bitmask |= BIT(index);
   1ea62:	ea41 0c0c 	orr.w	ip, r1, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1ea66:	4313      	orrs	r3, r2
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1ea68:	4631      	mov	r1, r6
   1ea6a:	4628      	mov	r0, r5
   1ea6c:	2206      	movs	r2, #6
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1ea6e:	3401      	adds	r4, #1
	filter->enable_bitmask |= BIT(index);
   1ea70:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1ea74:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1ea76:	f00a fc66 	bl	29346 <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1ea7a:	2c08      	cmp	r4, #8
   1ea7c:	f105 0506 	add.w	r5, r5, #6
   1ea80:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1ea84:	d1e0      	bne.n	1ea48 <rl_update+0x24>
}
   1ea86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ea8a:	bf00      	nop
   1ea8c:	2000247a 	.word	0x2000247a
   1ea90:	20002339 	.word	0x20002339

0001ea94 <fal_update>:
{
   1ea94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ea98:	4e20      	ldr	r6, [pc, #128]	; (1eb1c <fal_update+0x88>)
   1ea9a:	4d21      	ldr	r5, [pc, #132]	; (1eb20 <fal_update+0x8c>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1ea9c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1eb24 <fal_update+0x90>
   1eaa0:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1eb28 <fal_update+0x94>
{
   1eaa4:	2400      	movs	r4, #0
   1eaa6:	f1a5 0a02 	sub.w	sl, r5, #2
	filter->enable_bitmask |= BIT(index);
   1eaaa:	1eb7      	subs	r7, r6, #2
		if (!fal[i].taken) {
   1eaac:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   1eab0:	f04f 0c01 	mov.w	ip, #1
		if (!fal[i].taken) {
   1eab4:	f013 0f01 	tst.w	r3, #1
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1eab8:	4630      	mov	r0, r6
	filter->enable_bitmask |= BIT(index);
   1eaba:	fa0c fc04 	lsl.w	ip, ip, r4
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1eabe:	4629      	mov	r1, r5
	for (i = 0U; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   1eac0:	f106 0606 	add.w	r6, r6, #6
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1eac4:	f04f 0206 	mov.w	r2, #6
		if (!fal[i].taken) {
   1eac8:	d021      	beq.n	1eb0e <fal_update+0x7a>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1eaca:	f898 3000 	ldrb.w	r3, [r8]
   1eace:	b163      	cbz	r3, 1eaea <fal_update+0x56>
		j = fal[i].rl_idx;
   1ead0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1ead4:	2b07      	cmp	r3, #7
   1ead6:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   1eada:	d806      	bhi.n	1eaea <fal_update+0x56>
   1eadc:	f819 303e 	ldrb.w	r3, [r9, lr, lsl #3]
   1eae0:	f013 0f04 	tst.w	r3, #4
   1eae4:	d001      	beq.n	1eaea <fal_update+0x56>
   1eae6:	06db      	lsls	r3, r3, #27
   1eae8:	d511      	bpl.n	1eb0e <fal_update+0x7a>
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   1eaea:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   1eaee:	f897 e000 	ldrb.w	lr, [r7]
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   1eaf2:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
   1eaf6:	ea4e 0c0c 	orr.w	ip, lr, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1eafa:	f897 e001 	ldrb.w	lr, [r7, #1]
	filter->enable_bitmask |= BIT(index);
   1eafe:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1eb02:	40a3      	lsls	r3, r4
   1eb04:	ea4e 0303 	orr.w	r3, lr, r3
   1eb08:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1eb0a:	f00a fc1c 	bl	29346 <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   1eb0e:	3401      	adds	r4, #1
   1eb10:	2c08      	cmp	r4, #8
   1eb12:	f105 0508 	add.w	r5, r5, #8
   1eb16:	d1c9      	bne.n	1eaac <fal_update+0x18>
}
   1eb18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1eb1c:	2000224e 	.word	0x2000224e
   1eb20:	2000220e 	.word	0x2000220e
   1eb24:	20002d80 	.word	0x20002d80
   1eb28:	20002338 	.word	0x20002338

0001eb2c <ll_fal_size_get>:
}
   1eb2c:	2008      	movs	r0, #8
   1eb2e:	4770      	bx	lr

0001eb30 <ll_fal_clear>:
{
   1eb30:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   1eb32:	2000      	movs	r0, #0
   1eb34:	f7fa ffb4 	bl	19aa0 <ull_adv_filter_pol_get>
   1eb38:	b9c8      	cbnz	r0, 1eb6e <ll_fal_clear+0x3e>
   1eb3a:	4a0e      	ldr	r2, [pc, #56]	; (1eb74 <ll_fal_clear+0x44>)
			rl[j].fal = 0U;
   1eb3c:	4c0e      	ldr	r4, [pc, #56]	; (1eb78 <ll_fal_clear+0x48>)
		uint8_t j = fal[i].rl_idx;
   1eb3e:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   1eb42:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   1eb44:	2b07      	cmp	r3, #7
			rl[j].fal = 0U;
   1eb46:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   1eb4a:	d805      	bhi.n	1eb58 <ll_fal_clear+0x28>
			rl[j].fal = 0U;
   1eb4c:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   1eb50:	f36f 1345 	bfc	r3, #5, #1
   1eb54:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		fal[i].taken = 0U;
   1eb58:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   1eb5c:	f36f 0300 	bfc	r3, #0, #1
   1eb60:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   1eb64:	3001      	adds	r0, #1
   1eb66:	2808      	cmp	r0, #8
   1eb68:	d1e9      	bne.n	1eb3e <ll_fal_clear+0xe>
	return 0;
   1eb6a:	2000      	movs	r0, #0
}
   1eb6c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1eb6e:	200c      	movs	r0, #12
}
   1eb70:	bd10      	pop	{r4, pc}
   1eb72:	bf00      	nop
   1eb74:	2000220c 	.word	0x2000220c
   1eb78:	20002338 	.word	0x20002338

0001eb7c <ll_fal_add>:
{
   1eb7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb80:	4681      	mov	r9, r0
   1eb82:	b083      	sub	sp, #12
	if (ull_adv_filter_pol_get(0)) {
   1eb84:	2000      	movs	r0, #0
   1eb86:	f7fa ff8b 	bl	19aa0 <ull_adv_filter_pol_get>
   1eb8a:	2800      	cmp	r0, #0
   1eb8c:	d16d      	bne.n	1ec6a <ll_fal_add+0xee>
	if (addr->type == ADDR_TYPE_ANON) {
   1eb8e:	f899 a000 	ldrb.w	sl, [r9]
   1eb92:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   1eb96:	4605      	mov	r5, r0
   1eb98:	d064      	beq.n	1ec64 <ll_fal_add+0xe8>
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   1eb9a:	4e42      	ldr	r6, [pc, #264]	; (1eca4 <ll_fal_add+0x128>)
   1eb9c:	f109 0b01 	add.w	fp, r9, #1
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1eba0:	f00a 0a01 	and.w	sl, sl, #1
		*free_idx = FILTER_IDX_NONE;
   1eba4:	f04f 08ff 	mov.w	r8, #255	; 0xff
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   1eba8:	4604      	mov	r4, r0
   1ebaa:	1eb7      	subs	r7, r6, #2
   1ebac:	e009      	b.n	1ebc2 <ll_fal_add+0x46>
		} else if (free_idx && !fal[i].taken &&
   1ebae:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1ebb2:	d101      	bne.n	1ebb8 <ll_fal_add+0x3c>
			*free_idx = i;
   1ebb4:	fa5f f884 	uxtb.w	r8, r4
	for (i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   1ebb8:	3401      	adds	r4, #1
   1ebba:	2c08      	cmp	r4, #8
   1ebbc:	f106 0608 	add.w	r6, r6, #8
   1ebc0:	d017      	beq.n	1ebf2 <ll_fal_add+0x76>
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1ebc2:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   1ebc6:	07d8      	lsls	r0, r3, #31
   1ebc8:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1ebcc:	d5ef      	bpl.n	1ebae <ll_fal_add+0x32>
   1ebce:	4552      	cmp	r2, sl
   1ebd0:	d1f2      	bne.n	1ebb8 <ll_fal_add+0x3c>
   1ebd2:	2206      	movs	r2, #6
   1ebd4:	4630      	mov	r0, r6
   1ebd6:	4659      	mov	r1, fp
   1ebd8:	f00a fba4 	bl	29324 <memcmp>
   1ebdc:	2800      	cmp	r0, #0
   1ebde:	d041      	beq.n	1ec64 <ll_fal_add+0xe8>
		} else if (free_idx && !fal[i].taken &&
   1ebe0:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   1ebe4:	07d9      	lsls	r1, r3, #31
   1ebe6:	d5e2      	bpl.n	1ebae <ll_fal_add+0x32>
	for (i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   1ebe8:	3401      	adds	r4, #1
   1ebea:	2c08      	cmp	r4, #8
   1ebec:	f106 0608 	add.w	r6, r6, #8
   1ebf0:	d1e7      	bne.n	1ebc2 <ll_fal_add+0x46>
	} else if (j >= ARRAY_SIZE(fal)) {
   1ebf2:	f1b8 0f07 	cmp.w	r8, #7
   1ebf6:	d850      	bhi.n	1ec9a <ll_fal_add+0x11e>
	fal[i].id_addr_type = id_addr->type & 0x1;
   1ebf8:	f899 2000 	ldrb.w	r2, [r9]
   1ebfc:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   1ec00:	4e29      	ldr	r6, [pc, #164]	; (1eca8 <ll_fal_add+0x12c>)
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   1ec02:	2002      	movs	r0, #2
	fal[i].id_addr_type = id_addr->type & 0x1;
   1ec04:	f362 0341 	bfi	r3, r2, #1, #1
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   1ec08:	fb14 0008 	smlabb	r0, r4, r8, r0
	fal[i].id_addr_type = id_addr->type & 0x1;
   1ec0c:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
	memcpy(dst, src, sizeof(*dst));
   1ec10:	4438      	add	r0, r7
   1ec12:	2206      	movs	r2, #6
   1ec14:	4659      	mov	r1, fp
   1ec16:	f00a fb96 	bl	29346 <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1ec1a:	f899 3000 	ldrb.w	r3, [r9]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1ec1e:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1ec22:	f003 0301 	and.w	r3, r3, #1
   1ec26:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   1ec2a:	fa5f fa85 	uxtb.w	sl, r5
   1ec2e:	f819 2034 	ldrb.w	r2, [r9, r4, lsl #3]
   1ec32:	f3c2 1180 	ubfx	r1, r2, #6, #1
   1ec36:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1ec38:	f105 0501 	add.w	r5, r5, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1ec3c:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   1ec40:	d501      	bpl.n	1ec46 <ll_fal_add+0xca>
   1ec42:	4299      	cmp	r1, r3
   1ec44:	d015      	beq.n	1ec72 <ll_fal_add+0xf6>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1ec46:	2d08      	cmp	r5, #8
   1ec48:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1ec4c:	d1eb      	bne.n	1ec26 <ll_fal_add+0xaa>
		fal[i].rl_idx = FILTER_IDX_NONE;
   1ec4e:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   1ec52:	22ff      	movs	r2, #255	; 0xff
   1ec54:	705a      	strb	r2, [r3, #1]
	fal[i].taken = 1U;
   1ec56:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   1ec5a:	f043 0301 	orr.w	r3, r3, #1
   1ec5e:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
	return 0;
   1ec62:	2000      	movs	r0, #0
}
   1ec64:	b003      	add	sp, #12
   1ec66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ec6a:	200c      	movs	r0, #12
}
   1ec6c:	b003      	add	sp, #12
   1ec6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1ec72:	4630      	mov	r0, r6
   1ec74:	2206      	movs	r2, #6
   1ec76:	4659      	mov	r1, fp
   1ec78:	9301      	str	r3, [sp, #4]
   1ec7a:	f00a fb53 	bl	29324 <memcmp>
   1ec7e:	9b01      	ldr	r3, [sp, #4]
   1ec80:	2800      	cmp	r0, #0
   1ec82:	d1e0      	bne.n	1ec46 <ll_fal_add+0xca>
		rl[j].fal = 1U;
   1ec84:	f819 3004 	ldrb.w	r3, [r9, r4]
   1ec88:	f043 0320 	orr.w	r3, r3, #32
   1ec8c:	f809 3004 	strb.w	r3, [r9, r4]
		fal[i].rl_idx = j;
   1ec90:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   1ec94:	f883 a001 	strb.w	sl, [r3, #1]
		rl[j].fal = 1U;
   1ec98:	e7dd      	b.n	1ec56 <ll_fal_add+0xda>
   1ec9a:	2007      	movs	r0, #7
}
   1ec9c:	b003      	add	sp, #12
   1ec9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eca2:	bf00      	nop
   1eca4:	2000220e 	.word	0x2000220e
   1eca8:	20002339 	.word	0x20002339

0001ecac <ll_fal_remove>:
{
   1ecac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ecb0:	4607      	mov	r7, r0
	if (ull_adv_filter_pol_get(0)) {
   1ecb2:	2000      	movs	r0, #0
   1ecb4:	f7fa fef4 	bl	19aa0 <ull_adv_filter_pol_get>
   1ecb8:	bbb8      	cbnz	r0, 1ed2a <ll_fal_remove+0x7e>
	if (addr->type == ADDR_TYPE_ANON) {
   1ecba:	783e      	ldrb	r6, [r7, #0]
   1ecbc:	2eff      	cmp	r6, #255	; 0xff
   1ecbe:	4604      	mov	r4, r0
   1ecc0:	d013      	beq.n	1ecea <ll_fal_remove+0x3e>
	uint8_t i = fal_find(id_addr->type, id_addr->a.val, NULL);
   1ecc2:	4d1b      	ldr	r5, [pc, #108]	; (1ed30 <ll_fal_remove+0x84>)
   1ecc4:	3701      	adds	r7, #1
	for (i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   1ecc6:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1ecca:	f006 0601 	and.w	r6, r6, #1
   1ecce:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   1ecd2:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1ecd6:	07db      	lsls	r3, r3, #31
   1ecd8:	d501      	bpl.n	1ecde <ll_fal_remove+0x32>
   1ecda:	42b2      	cmp	r2, r6
   1ecdc:	d007      	beq.n	1ecee <ll_fal_remove+0x42>
	for (i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   1ecde:	3401      	adds	r4, #1
   1ece0:	2c08      	cmp	r4, #8
   1ece2:	f105 0508 	add.w	r5, r5, #8
   1ece6:	d1f2      	bne.n	1ecce <ll_fal_remove+0x22>
   1ece8:	2002      	movs	r0, #2
}
   1ecea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1ecee:	2206      	movs	r2, #6
   1ecf0:	4628      	mov	r0, r5
   1ecf2:	4639      	mov	r1, r7
   1ecf4:	f00a fb16 	bl	29324 <memcmp>
   1ecf8:	2800      	cmp	r0, #0
   1ecfa:	d1f0      	bne.n	1ecde <ll_fal_remove+0x32>
		uint8_t j = fal[i].rl_idx;
   1ecfc:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   1ed00:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   1ed02:	2b07      	cmp	r3, #7
   1ed04:	d808      	bhi.n	1ed18 <ll_fal_remove+0x6c>
			rl[j].fal = 0U;
   1ed06:	4a0b      	ldr	r2, [pc, #44]	; (1ed34 <ll_fal_remove+0x88>)
   1ed08:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1ed0c:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   1ed10:	f360 1145 	bfi	r1, r0, #5, #1
   1ed14:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		fal[i].taken = 0U;
   1ed18:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   1ed1c:	f36f 0300 	bfc	r3, #0, #1
   1ed20:	f808 3034 	strb.w	r3, [r8, r4, lsl #3]
		return 0;
   1ed24:	2000      	movs	r0, #0
}
   1ed26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ed2a:	200c      	movs	r0, #12
}
   1ed2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ed30:	2000220e 	.word	0x2000220e
   1ed34:	20002338 	.word	0x20002338

0001ed38 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1ed38:	2807      	cmp	r0, #7
{
   1ed3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ed3e:	4604      	mov	r4, r0
   1ed40:	460e      	mov	r6, r1
   1ed42:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1ed44:	d817      	bhi.n	1ed76 <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   1ed46:	4d1a      	ldr	r5, [pc, #104]	; (1edb0 <ll_rl_id_addr_get+0x78>)
   1ed48:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1ed4c:	00a7      	lsls	r7, r4, #2
   1ed4e:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   1ed52:	07db      	lsls	r3, r3, #31
   1ed54:	d51d      	bpl.n	1ed92 <ll_rl_id_addr_get+0x5a>
	*id_addr_type = rl[rl_idx].id_addr_type;
   1ed56:	4427      	add	r7, r4
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1ed58:	2128      	movs	r1, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   1ed5a:	f815 3037 	ldrb.w	r3, [r5, r7, lsl #3]
   1ed5e:	f3c3 1380 	ubfx	r3, r3, #6, #1
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1ed62:	fb01 5104 	mla	r1, r1, r4, r5
	*id_addr_type = rl[rl_idx].id_addr_type;
   1ed66:	7033      	strb	r3, [r6, #0]
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1ed68:	4640      	mov	r0, r8
   1ed6a:	2206      	movs	r2, #6
}
   1ed6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1ed70:	3101      	adds	r1, #1
   1ed72:	f00a bae8 	b.w	29346 <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1ed76:	4a0f      	ldr	r2, [pc, #60]	; (1edb4 <ll_rl_id_addr_get+0x7c>)
   1ed78:	490f      	ldr	r1, [pc, #60]	; (1edb8 <ll_rl_id_addr_get+0x80>)
   1ed7a:	4810      	ldr	r0, [pc, #64]	; (1edbc <ll_rl_id_addr_get+0x84>)
   1ed7c:	f44f 7389 	mov.w	r3, #274	; 0x112
   1ed80:	f008 fbd8 	bl	27534 <assert_print>
   1ed84:	4040      	eors	r0, r0
   1ed86:	f380 8811 	msr	BASEPRI, r0
   1ed8a:	f04f 0003 	mov.w	r0, #3
   1ed8e:	df02      	svc	2
   1ed90:	e7d9      	b.n	1ed46 <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   1ed92:	4a08      	ldr	r2, [pc, #32]	; (1edb4 <ll_rl_id_addr_get+0x7c>)
   1ed94:	490a      	ldr	r1, [pc, #40]	; (1edc0 <ll_rl_id_addr_get+0x88>)
   1ed96:	4809      	ldr	r0, [pc, #36]	; (1edbc <ll_rl_id_addr_get+0x84>)
   1ed98:	f240 1313 	movw	r3, #275	; 0x113
   1ed9c:	f008 fbca 	bl	27534 <assert_print>
   1eda0:	4040      	eors	r0, r0
   1eda2:	f380 8811 	msr	BASEPRI, r0
   1eda6:	f04f 0003 	mov.w	r0, #3
   1edaa:	df02      	svc	2
   1edac:	e7d3      	b.n	1ed56 <ll_rl_id_addr_get+0x1e>
   1edae:	bf00      	nop
   1edb0:	20002338 	.word	0x20002338
   1edb4:	0002ffd0 	.word	0x0002ffd0
   1edb8:	00030014 	.word	0x00030014
   1edbc:	0002f8a0 	.word	0x0002f8a0
   1edc0:	00030020 	.word	0x00030020

0001edc4 <ll_rl_size_get>:
   1edc4:	2008      	movs	r0, #8
   1edc6:	4770      	bx	lr

0001edc8 <ll_rl_clear>:
{
   1edc8:	b510      	push	{r4, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1edca:	2000      	movs	r0, #0
   1edcc:	f7fa fe5c 	bl	19a88 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   1edd0:	bb88      	cbnz	r0, 1ee36 <ll_rl_clear+0x6e>
		rl[i].taken = 0U;
   1edd2:	4b1a      	ldr	r3, [pc, #104]	; (1ee3c <ll_rl_clear+0x74>)
	peer_irk_count = 0U;
   1edd4:	4c1a      	ldr	r4, [pc, #104]	; (1ee40 <ll_rl_clear+0x78>)
		rl[i].taken = 0U;
   1edd6:	7819      	ldrb	r1, [r3, #0]
   1edd8:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
	peer_irk_count = 0U;
   1eddc:	7020      	strb	r0, [r4, #0]
		rl[i].taken = 0U;
   1edde:	f360 0100 	bfi	r1, r0, #0, #1
   1ede2:	f360 0200 	bfi	r2, r0, #0, #1
   1ede6:	7019      	strb	r1, [r3, #0]
   1ede8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   1edec:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
   1edf0:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   1edf4:	f360 0100 	bfi	r1, r0, #0, #1
   1edf8:	f360 0200 	bfi	r2, r0, #0, #1
   1edfc:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
   1ee00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   1ee04:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
   1ee08:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   1ee0c:	f360 0100 	bfi	r1, r0, #0, #1
   1ee10:	f360 0200 	bfi	r2, r0, #0, #1
   1ee14:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
   1ee18:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   1ee1c:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   1ee20:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   1ee24:	f360 0100 	bfi	r1, r0, #0, #1
   1ee28:	f360 0200 	bfi	r2, r0, #0, #1
   1ee2c:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   1ee30:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   1ee34:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ee36:	200c      	movs	r0, #12
}
   1ee38:	bd10      	pop	{r4, pc}
   1ee3a:	bf00      	nop
   1ee3c:	20002338 	.word	0x20002338
   1ee40:	20002d7f 	.word	0x20002d7f

0001ee44 <ll_rl_remove>:
{
   1ee44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee48:	4681      	mov	r9, r0
   1ee4a:	b083      	sub	sp, #12
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1ee4c:	2000      	movs	r0, #0
   1ee4e:	f7fa fe1b 	bl	19a88 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   1ee52:	2800      	cmp	r0, #0
   1ee54:	d149      	bne.n	1eeea <ll_rl_remove+0xa6>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1ee56:	46ca      	mov	sl, r9
   1ee58:	4e4e      	ldr	r6, [pc, #312]	; (1ef94 <ll_rl_remove+0x150>)
   1ee5a:	f81a 8b01 	ldrb.w	r8, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1ee5e:	4604      	mov	r4, r0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1ee60:	f008 0801 	and.w	r8, r8, #1
   1ee64:	1e75      	subs	r5, r6, #1
   1ee66:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1ee6a:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
   1ee6e:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   1ee72:	f3c2 1380 	ubfx	r3, r2, #6, #1
   1ee76:	07d2      	lsls	r2, r2, #31
   1ee78:	ea4f 0784 	mov.w	r7, r4, lsl #2
   1ee7c:	d501      	bpl.n	1ee82 <ll_rl_remove+0x3e>
   1ee7e:	4543      	cmp	r3, r8
   1ee80:	d008      	beq.n	1ee94 <ll_rl_remove+0x50>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1ee82:	3401      	adds	r4, #1
   1ee84:	2c08      	cmp	r4, #8
   1ee86:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1ee8a:	d1ec      	bne.n	1ee66 <ll_rl_remove+0x22>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ee8c:	2002      	movs	r0, #2
}
   1ee8e:	b003      	add	sp, #12
   1ee90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1ee94:	4630      	mov	r0, r6
   1ee96:	2206      	movs	r2, #6
   1ee98:	4651      	mov	r1, sl
   1ee9a:	f00a fa43 	bl	29324 <memcmp>
   1ee9e:	4603      	mov	r3, r0
   1eea0:	2800      	cmp	r0, #0
   1eea2:	d1ee      	bne.n	1ee82 <ll_rl_remove+0x3e>
		if (rl[i].pirk) {
   1eea4:	f89b 2000 	ldrb.w	r2, [fp]
   1eea8:	0752      	lsls	r2, r2, #29
   1eeaa:	d430      	bmi.n	1ef0e <ll_rl_remove+0xca>
		j = fal_find(id_addr->type, id_addr->a.val, NULL);
   1eeac:	f899 9000 	ldrb.w	r9, [r9]
	for (i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   1eeb0:	4e39      	ldr	r6, [pc, #228]	; (1ef98 <ll_rl_remove+0x154>)
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1eeb2:	f009 0901 	and.w	r9, r9, #1
   1eeb6:	f1a6 0802 	sub.w	r8, r6, #2
   1eeba:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   1eebe:	07d0      	lsls	r0, r2, #31
   1eec0:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1eec4:	d501      	bpl.n	1eeca <ll_rl_remove+0x86>
   1eec6:	4549      	cmp	r1, r9
   1eec8:	d013      	beq.n	1eef2 <ll_rl_remove+0xae>
	for (i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   1eeca:	3301      	adds	r3, #1
   1eecc:	2b08      	cmp	r3, #8
   1eece:	f106 0608 	add.w	r6, r6, #8
   1eed2:	d1f2      	bne.n	1eeba <ll_rl_remove+0x76>
		rl[i].taken = 0U;
   1eed4:	443c      	add	r4, r7
		return 0;
   1eed6:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   1eed8:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   1eedc:	f36f 0300 	bfc	r3, #0, #1
   1eee0:	f805 3034 	strb.w	r3, [r5, r4, lsl #3]
}
   1eee4:	b003      	add	sp, #12
   1eee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1eeea:	200c      	movs	r0, #12
}
   1eeec:	b003      	add	sp, #12
   1eeee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1eef2:	2206      	movs	r2, #6
   1eef4:	4630      	mov	r0, r6
   1eef6:	4651      	mov	r1, sl
   1eef8:	9301      	str	r3, [sp, #4]
   1eefa:	f00a fa13 	bl	29324 <memcmp>
   1eefe:	9b01      	ldr	r3, [sp, #4]
   1ef00:	2800      	cmp	r0, #0
   1ef02:	d1e2      	bne.n	1eeca <ll_rl_remove+0x86>
			fal[j].rl_idx = FILTER_IDX_NONE;
   1ef04:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   1ef08:	22ff      	movs	r2, #255	; 0xff
   1ef0a:	705a      	strb	r2, [r3, #1]
   1ef0c:	e7e2      	b.n	1eed4 <ll_rl_remove+0x90>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1ef0e:	f8df 808c 	ldr.w	r8, [pc, #140]	; 1ef9c <ll_rl_remove+0x158>
   1ef12:	f898 6000 	ldrb.w	r6, [r8]
   1ef16:	3e01      	subs	r6, #1
			if (pj && pi != pj) {
   1ef18:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   1ef1c:	d003      	beq.n	1ef26 <ll_rl_remove+0xe2>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1ef1e:	f89b b017 	ldrb.w	fp, [fp, #23]
			if (pj && pi != pj) {
   1ef22:	45b3      	cmp	fp, r6
   1ef24:	d102      	bne.n	1ef2c <ll_rl_remove+0xe8>
			peer_irk_count--;
   1ef26:	f888 6000 	strb.w	r6, [r8]
   1ef2a:	e7bf      	b.n	1eeac <ll_rl_remove+0x68>
				(void)memcpy(peer_irks[pi], peer_irks[pj],
   1ef2c:	481c      	ldr	r0, [pc, #112]	; (1efa0 <ll_rl_remove+0x15c>)
   1ef2e:	9301      	str	r3, [sp, #4]
   1ef30:	2210      	movs	r2, #16
   1ef32:	eb00 1106 	add.w	r1, r0, r6, lsl #4
   1ef36:	eb00 100b 	add.w	r0, r0, fp, lsl #4
   1ef3a:	f00a fa04 	bl	29346 <memcpy>
   1ef3e:	9b01      	ldr	r3, [sp, #4]
   1ef40:	f8df c060 	ldr.w	ip, [pc, #96]	; 1efa4 <ll_rl_remove+0x160>
   1ef44:	461a      	mov	r2, r3
					if (rl[k].taken && rl[k].pirk &&
   1ef46:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   1ef4a:	fa5f fe82 	uxtb.w	lr, r2
   1ef4e:	f815 0031 	ldrb.w	r0, [r5, r1, lsl #3]
   1ef52:	f010 0f01 	tst.w	r0, #1
   1ef56:	f102 0201 	add.w	r2, r2, #1
   1ef5a:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
   1ef5e:	d005      	beq.n	1ef6c <ll_rl_remove+0x128>
   1ef60:	0740      	lsls	r0, r0, #29
   1ef62:	d503      	bpl.n	1ef6c <ll_rl_remove+0x128>
   1ef64:	f89c 0017 	ldrb.w	r0, [ip, #23]
   1ef68:	42b0      	cmp	r0, r6
   1ef6a:	d008      	beq.n	1ef7e <ll_rl_remove+0x13a>
				for (k = 0U;
   1ef6c:	2a08      	cmp	r2, #8
   1ef6e:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
   1ef72:	d1e8      	bne.n	1ef46 <ll_rl_remove+0x102>
			peer_irk_count--;
   1ef74:	f898 6000 	ldrb.w	r6, [r8]
   1ef78:	3e01      	subs	r6, #1
   1ef7a:	b2f6      	uxtb	r6, r6
   1ef7c:	e7d3      	b.n	1ef26 <ll_rl_remove+0xe2>
   1ef7e:	f898 6000 	ldrb.w	r6, [r8]
						peer_irk_rl_ids[pi] = k;
   1ef82:	4a09      	ldr	r2, [pc, #36]	; (1efa8 <ll_rl_remove+0x164>)
						rl[k].pirk_idx = pi;
   1ef84:	f881 b017 	strb.w	fp, [r1, #23]
			peer_irk_count--;
   1ef88:	3e01      	subs	r6, #1
						peer_irk_rl_ids[pi] = k;
   1ef8a:	f802 e00b 	strb.w	lr, [r2, fp]
			peer_irk_count--;
   1ef8e:	b2f6      	uxtb	r6, r6
						break;
   1ef90:	e7c9      	b.n	1ef26 <ll_rl_remove+0xe2>
   1ef92:	bf00      	nop
   1ef94:	20002339 	.word	0x20002339
   1ef98:	2000220e 	.word	0x2000220e
   1ef9c:	20002d7f 	.word	0x20002d7f
   1efa0:	200022b8 	.word	0x200022b8
   1efa4:	20002338 	.word	0x20002338
   1efa8:	200022b0 	.word	0x200022b0

0001efac <ll_rl_crpa_set>:
{
   1efac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   1efb0:	795c      	ldrb	r4, [r3, #5]
   1efb2:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   1efb6:	2c40      	cmp	r4, #64	; 0x40
   1efb8:	d001      	beq.n	1efbe <ll_rl_crpa_set+0x12>
}
   1efba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (id_addr) {
   1efbe:	461e      	mov	r6, r3
   1efc0:	460f      	mov	r7, r1
   1efc2:	b301      	cbz	r1, 1f006 <ll_rl_crpa_set+0x5a>
   1efc4:	f8df 9068 	ldr.w	r9, [pc, #104]	; 1f030 <ll_rl_crpa_set+0x84>
   1efc8:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1efca:	f000 0a01 	and.w	sl, r0, #1
   1efce:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   1efd2:	e003      	b.n	1efdc <ll_rl_crpa_set+0x30>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1efd4:	2c08      	cmp	r4, #8
   1efd6:	f109 0928 	add.w	r9, r9, #40	; 0x28
   1efda:	d0ee      	beq.n	1efba <ll_rl_crpa_set+0xe>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1efdc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1efe0:	4625      	mov	r5, r4
   1efe2:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   1efe6:	f3c2 1380 	ubfx	r3, r2, #6, #1
   1efea:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1efec:	f104 0401 	add.w	r4, r4, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1eff0:	d5f0      	bpl.n	1efd4 <ll_rl_crpa_set+0x28>
   1eff2:	4553      	cmp	r3, sl
   1eff4:	d1ee      	bne.n	1efd4 <ll_rl_crpa_set+0x28>
   1eff6:	4648      	mov	r0, r9
   1eff8:	2206      	movs	r2, #6
   1effa:	4639      	mov	r1, r7
   1effc:	f00a f992 	bl	29324 <memcmp>
   1f000:	2800      	cmp	r0, #0
   1f002:	d1e7      	bne.n	1efd4 <ll_rl_crpa_set+0x28>
   1f004:	e004      	b.n	1f010 <ll_rl_crpa_set+0x64>
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   1f006:	2a07      	cmp	r2, #7
   1f008:	d8d7      	bhi.n	1efba <ll_rl_crpa_set+0xe>
   1f00a:	f8df 8028 	ldr.w	r8, [pc, #40]	; 1f034 <ll_rl_crpa_set+0x88>
   1f00e:	4615      	mov	r5, r2
   1f010:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1f014:	00e8      	lsls	r0, r5, #3
   1f016:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   1f01a:	07db      	lsls	r3, r3, #31
   1f01c:	d5cd      	bpl.n	1efba <ll_rl_crpa_set+0xe>
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1f01e:	3018      	adds	r0, #24
   1f020:	4631      	mov	r1, r6
   1f022:	4440      	add	r0, r8
   1f024:	2206      	movs	r2, #6
}
   1f026:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1f02a:	f00a b98c 	b.w	29346 <memcpy>
   1f02e:	bf00      	nop
   1f030:	20002339 	.word	0x20002339
   1f034:	20002338 	.word	0x20002338

0001f038 <ll_rl_crpa_get>:
{
   1f038:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1f03c:	4682      	mov	sl, r0
   1f03e:	4e1a      	ldr	r6, [pc, #104]	; (1f0a8 <ll_rl_crpa_get+0x70>)
   1f040:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
   1f044:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1f046:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1f048:	f008 0801 	and.w	r8, r8, #1
   1f04c:	1e77      	subs	r7, r6, #1
   1f04e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1f052:	00d5      	lsls	r5, r2, #3
   1f054:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1f058:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1f05c:	07db      	lsls	r3, r3, #31
   1f05e:	f104 0401 	add.w	r4, r4, #1
   1f062:	d501      	bpl.n	1f068 <ll_rl_crpa_get+0x30>
   1f064:	4542      	cmp	r2, r8
   1f066:	d006      	beq.n	1f076 <ll_rl_crpa_get+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1f068:	2c08      	cmp	r4, #8
   1f06a:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1f06e:	d1ee      	bne.n	1f04e <ll_rl_crpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1f070:	2002      	movs	r0, #2
}
   1f072:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1f076:	4630      	mov	r0, r6
   1f078:	2206      	movs	r2, #6
   1f07a:	4651      	mov	r1, sl
   1f07c:	f00a f952 	bl	29324 <memcmp>
   1f080:	4683      	mov	fp, r0
   1f082:	2800      	cmp	r0, #0
   1f084:	d1f0      	bne.n	1f068 <ll_rl_crpa_get+0x30>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   1f086:	f105 0218 	add.w	r2, r5, #24
   1f08a:	4417      	add	r7, r2
   1f08c:	2106      	movs	r1, #6
   1f08e:	4638      	mov	r0, r7
   1f090:	f7f6 f8f2 	bl	15278 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   1f094:	2800      	cmp	r0, #0
   1f096:	d0eb      	beq.n	1f070 <ll_rl_crpa_get+0x38>
   1f098:	2206      	movs	r2, #6
   1f09a:	4639      	mov	r1, r7
   1f09c:	4648      	mov	r0, r9
   1f09e:	f00a f952 	bl	29346 <memcpy>
		return 0;
   1f0a2:	4658      	mov	r0, fp
}
   1f0a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f0a8:	20002339 	.word	0x20002339

0001f0ac <ll_rl_lrpa_get>:
{
   1f0ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1f0b0:	4681      	mov	r9, r0
   1f0b2:	4e16      	ldr	r6, [pc, #88]	; (1f10c <ll_rl_lrpa_get+0x60>)
   1f0b4:	f819 8b01 	ldrb.w	r8, [r9], #1
{
   1f0b8:	468a      	mov	sl, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1f0ba:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1f0bc:	f008 0801 	and.w	r8, r8, #1
   1f0c0:	1e77      	subs	r7, r6, #1
   1f0c2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1f0c6:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   1f0ca:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1f0ce:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1f0d2:	07db      	lsls	r3, r3, #31
   1f0d4:	f104 0401 	add.w	r4, r4, #1
   1f0d8:	d501      	bpl.n	1f0de <ll_rl_lrpa_get+0x32>
   1f0da:	4542      	cmp	r2, r8
   1f0dc:	d006      	beq.n	1f0ec <ll_rl_lrpa_get+0x40>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1f0de:	2c08      	cmp	r4, #8
   1f0e0:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1f0e4:	d1ed      	bne.n	1f0c2 <ll_rl_lrpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1f0e6:	2002      	movs	r0, #2
}
   1f0e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1f0ec:	4630      	mov	r0, r6
   1f0ee:	2206      	movs	r2, #6
   1f0f0:	4649      	mov	r1, r9
   1f0f2:	f00a f917 	bl	29324 <memcmp>
   1f0f6:	4683      	mov	fp, r0
   1f0f8:	2800      	cmp	r0, #0
   1f0fa:	d1f0      	bne.n	1f0de <ll_rl_lrpa_get+0x32>
   1f0fc:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1f0fe:	2206      	movs	r2, #6
   1f100:	4650      	mov	r0, sl
   1f102:	f00a f920 	bl	29346 <memcpy>
		return 0;
   1f106:	4658      	mov	r0, fp
}
   1f108:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f10c:	20002339 	.word	0x20002339

0001f110 <ll_rl_enable>:
{
   1f110:	b510      	push	{r4, lr}
   1f112:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1f114:	2000      	movs	r0, #0
   1f116:	f7fa fcb7 	bl	19a88 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   1f11a:	b958      	cbnz	r0, 1f134 <ll_rl_enable+0x24>
	switch (enable) {
   1f11c:	b134      	cbz	r4, 1f12c <ll_rl_enable+0x1c>
   1f11e:	2c01      	cmp	r4, #1
   1f120:	d001      	beq.n	1f126 <ll_rl_enable+0x16>
   1f122:	2012      	movs	r0, #18
}
   1f124:	bd10      	pop	{r4, pc}
		rl_enable = 1U;
   1f126:	4b04      	ldr	r3, [pc, #16]	; (1f138 <ll_rl_enable+0x28>)
   1f128:	701c      	strb	r4, [r3, #0]
}
   1f12a:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   1f12c:	4b02      	ldr	r3, [pc, #8]	; (1f138 <ll_rl_enable+0x28>)
   1f12e:	701c      	strb	r4, [r3, #0]
	return 0;
   1f130:	4620      	mov	r0, r4
}
   1f132:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1f134:	200c      	movs	r0, #12
}
   1f136:	bd10      	pop	{r4, pc}
   1f138:	20002d80 	.word	0x20002d80

0001f13c <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   1f13c:	4b03      	ldr	r3, [pc, #12]	; (1f14c <ll_rl_timeout_set+0x10>)
   1f13e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f142:	fb02 f000 	mul.w	r0, r2, r0
   1f146:	6018      	str	r0, [r3, #0]
}
   1f148:	4770      	bx	lr
   1f14a:	bf00      	nop
   1f14c:	200024ac 	.word	0x200024ac

0001f150 <ll_priv_mode_set>:
{
   1f150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f154:	4682      	mov	sl, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1f156:	2000      	movs	r0, #0
{
   1f158:	4688      	mov	r8, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1f15a:	f7fa fc95 	bl	19a88 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   1f15e:	bb68      	cbnz	r0, 1f1bc <ll_priv_mode_set+0x6c>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1f160:	4e1d      	ldr	r6, [pc, #116]	; (1f1d8 <ll_priv_mode_set+0x88>)
   1f162:	f81a 9b01 	ldrb.w	r9, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1f166:	4604      	mov	r4, r0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1f168:	f009 0901 	and.w	r9, r9, #1
   1f16c:	1e77      	subs	r7, r6, #1
   1f16e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1f172:	00d5      	lsls	r5, r2, #3
   1f174:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1f178:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1f17c:	07db      	lsls	r3, r3, #31
   1f17e:	f104 0401 	add.w	r4, r4, #1
   1f182:	d501      	bpl.n	1f188 <ll_priv_mode_set+0x38>
   1f184:	454a      	cmp	r2, r9
   1f186:	d006      	beq.n	1f196 <ll_priv_mode_set+0x46>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1f188:	2c08      	cmp	r4, #8
   1f18a:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1f18e:	d1ee      	bne.n	1f16e <ll_priv_mode_set+0x1e>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1f190:	2002      	movs	r0, #2
}
   1f192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1f196:	4630      	mov	r0, r6
   1f198:	2206      	movs	r2, #6
   1f19a:	4651      	mov	r1, sl
   1f19c:	f00a f8c2 	bl	29324 <memcmp>
   1f1a0:	2800      	cmp	r0, #0
   1f1a2:	d1f1      	bne.n	1f188 <ll_priv_mode_set+0x38>
		switch (mode) {
   1f1a4:	f1b8 0f00 	cmp.w	r8, #0
   1f1a8:	d00e      	beq.n	1f1c8 <ll_priv_mode_set+0x78>
   1f1aa:	f1b8 0f01 	cmp.w	r8, #1
   1f1ae:	d108      	bne.n	1f1c2 <ll_priv_mode_set+0x72>
			rl[i].dev = 1U;
   1f1b0:	5d7b      	ldrb	r3, [r7, r5]
   1f1b2:	f043 0310 	orr.w	r3, r3, #16
   1f1b6:	557b      	strb	r3, [r7, r5]
}
   1f1b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1f1bc:	200c      	movs	r0, #12
}
   1f1be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (mode) {
   1f1c2:	2012      	movs	r0, #18
}
   1f1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rl[i].dev = 0U;
   1f1c8:	5d7b      	ldrb	r3, [r7, r5]
   1f1ca:	f368 1304 	bfi	r3, r8, #4, #1
   1f1ce:	557b      	strb	r3, [r7, r5]
	return 0;
   1f1d0:	4640      	mov	r0, r8
}
   1f1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f1d6:	bf00      	nop
   1f1d8:	20002339 	.word	0x20002339

0001f1dc <ull_filter_reset>:
{
   1f1dc:	b4d0      	push	{r4, r6, r7}
   1f1de:	4930      	ldr	r1, [pc, #192]	; (1f2a0 <ull_filter_reset+0xc4>)
   1f1e0:	4c30      	ldr	r4, [pc, #192]	; (1f2a4 <ull_filter_reset+0xc8>)
	for (int i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   1f1e2:	2300      	movs	r3, #0
		uint8_t j = fal[i].rl_idx;
   1f1e4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1f1e8:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   1f1ea:	2a07      	cmp	r2, #7
			rl[j].fal = 0U;
   1f1ec:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   1f1f0:	d805      	bhi.n	1f1fe <ull_filter_reset+0x22>
			rl[j].fal = 0U;
   1f1f2:	f811 203c 	ldrb.w	r2, [r1, ip, lsl #3]
   1f1f6:	f36f 1245 	bfc	r2, #5, #1
   1f1fa:	f801 203c 	strb.w	r2, [r1, ip, lsl #3]
		fal[i].taken = 0U;
   1f1fe:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   1f202:	f36f 0200 	bfc	r2, #0, #1
   1f206:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   1f20a:	3301      	adds	r3, #1
   1f20c:	2b08      	cmp	r3, #8
   1f20e:	d1e9      	bne.n	1f1e4 <ull_filter_reset+0x8>
	rl_enable = 0U;
   1f210:	4a25      	ldr	r2, [pc, #148]	; (1f2a8 <ull_filter_reset+0xcc>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1f212:	4c26      	ldr	r4, [pc, #152]	; (1f2ac <ull_filter_reset+0xd0>)
	rl_enable = 0U;
   1f214:	2300      	movs	r3, #0
   1f216:	7013      	strb	r3, [r2, #0]
		rl[i].taken = 0U;
   1f218:	780a      	ldrb	r2, [r1, #0]
   1f21a:	f363 0200 	bfi	r2, r3, #0, #1
   1f21e:	700a      	strb	r2, [r1, #0]
   1f220:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
   1f224:	f363 0200 	bfi	r2, r3, #0, #1
   1f228:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
   1f22c:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
   1f230:	f363 0200 	bfi	r2, r3, #0, #1
   1f234:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
   1f238:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   1f23c:	f363 0200 	bfi	r2, r3, #0, #1
   1f240:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   1f244:	f891 20a0 	ldrb.w	r2, [r1, #160]	; 0xa0
   1f248:	f363 0200 	bfi	r2, r3, #0, #1
   1f24c:	f881 20a0 	strb.w	r2, [r1, #160]	; 0xa0
   1f250:	f891 20c8 	ldrb.w	r2, [r1, #200]	; 0xc8
   1f254:	f363 0200 	bfi	r2, r3, #0, #1
   1f258:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
   1f25c:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
   1f260:	f363 0200 	bfi	r2, r3, #0, #1
   1f264:	f881 20f0 	strb.w	r2, [r1, #240]	; 0xf0
   1f268:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
   1f26c:	f363 0200 	bfi	r2, r3, #0, #1
   1f270:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   1f274:	4a0e      	ldr	r2, [pc, #56]	; (1f2b0 <ull_filter_reset+0xd4>)
   1f276:	7013      	strb	r3, [r2, #0]
	rpa_last_ms = -1;
   1f278:	4b0e      	ldr	r3, [pc, #56]	; (1f2b4 <ull_filter_reset+0xd8>)
   1f27a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1f27e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1f282:	e9c3 6700 	strd	r6, r7, [r3]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1f286:	4b0c      	ldr	r3, [pc, #48]	; (1f2b8 <ull_filter_reset+0xdc>)
   1f288:	6023      	str	r3, [r4, #0]
	if (init) {
   1f28a:	b120      	cbz	r0, 1f296 <ull_filter_reset+0xba>
}
   1f28c:	bcd0      	pop	{r4, r6, r7}
		k_work_init_delayable(&rpa_work, rpa_timeout);
   1f28e:	490b      	ldr	r1, [pc, #44]	; (1f2bc <ull_filter_reset+0xe0>)
   1f290:	480b      	ldr	r0, [pc, #44]	; (1f2c0 <ull_filter_reset+0xe4>)
   1f292:	f00f bb07 	b.w	2e8a4 <k_work_init_delayable>
}
   1f296:	bcd0      	pop	{r4, r6, r7}
		k_work_cancel_delayable(&rpa_work);
   1f298:	4809      	ldr	r0, [pc, #36]	; (1f2c0 <ull_filter_reset+0xe4>)
   1f29a:	f00f bb0f 	b.w	2e8bc <k_work_cancel_delayable>
   1f29e:	bf00      	nop
   1f2a0:	20002338 	.word	0x20002338
   1f2a4:	2000220c 	.word	0x2000220c
   1f2a8:	20002d80 	.word	0x20002d80
   1f2ac:	200024ac 	.word	0x200024ac
   1f2b0:	20002d7f 	.word	0x20002d7f
   1f2b4:	200013a8 	.word	0x200013a8
   1f2b8:	000dbba0 	.word	0x000dbba0
   1f2bc:	0001f539 	.word	0x0001f539
   1f2c0:	200013b0 	.word	0x200013b0

0001f2c4 <ull_filter_lll_get>:
		return &fal_filter;
   1f2c4:	4a03      	ldr	r2, [pc, #12]	; (1f2d4 <ull_filter_lll_get+0x10>)
   1f2c6:	4b04      	ldr	r3, [pc, #16]	; (1f2d8 <ull_filter_lll_get+0x14>)
}
   1f2c8:	2800      	cmp	r0, #0
   1f2ca:	bf0c      	ite	eq
   1f2cc:	4610      	moveq	r0, r2
   1f2ce:	4618      	movne	r0, r3
   1f2d0:	4770      	bx	lr
   1f2d2:	bf00      	nop
   1f2d4:	20002478 	.word	0x20002478
   1f2d8:	2000224c 	.word	0x2000224c

0001f2dc <ull_filter_adv_scan_state_cb>:
	if (bm) {
   1f2dc:	b1a8      	cbz	r0, 1f30a <ull_filter_adv_scan_state_cb+0x2e>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   1f2de:	4a0c      	ldr	r2, [pc, #48]	; (1f310 <ull_filter_adv_scan_state_cb+0x34>)
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   1f2e0:	6812      	ldr	r2, [r2, #0]
{
   1f2e2:	b510      	push	{r4, lr}
   1f2e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1f2e8:	f240 30e7 	movw	r0, #999	; 0x3e7
   1f2ec:	2100      	movs	r1, #0
   1f2ee:	fbe2 0103 	umlal	r0, r1, r2, r3
   1f2f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f2f6:	2300      	movs	r3, #0
   1f2f8:	f7ed f802 	bl	c300 <__aeabi_uldivmod>
}
   1f2fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f300:	4602      	mov	r2, r0
   1f302:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   1f304:	4803      	ldr	r0, [pc, #12]	; (1f314 <ull_filter_adv_scan_state_cb+0x38>)
   1f306:	f006 bf0b 	b.w	26120 <k_work_schedule>
	k_work_cancel_delayable(&rpa_work);
   1f30a:	4802      	ldr	r0, [pc, #8]	; (1f314 <ull_filter_adv_scan_state_cb+0x38>)
   1f30c:	f00f bad6 	b.w	2e8bc <k_work_cancel_delayable>
   1f310:	200024ac 	.word	0x200024ac
   1f314:	200013b0 	.word	0x200013b0

0001f318 <ull_filter_adv_update>:
{
   1f318:	b508      	push	{r3, lr}
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   1f31a:	4b09      	ldr	r3, [pc, #36]	; (1f340 <ull_filter_adv_update+0x28>)
   1f31c:	2200      	movs	r2, #0
   1f31e:	801a      	strh	r2, [r3, #0]
	if (adv_fp &&
   1f320:	b930      	cbnz	r0, 1f330 <ull_filter_adv_update+0x18>
	if (rl_enable &&
   1f322:	4b08      	ldr	r3, [pc, #32]	; (1f344 <ull_filter_adv_update+0x2c>)
	filter->enable_bitmask = 0;
   1f324:	4a08      	ldr	r2, [pc, #32]	; (1f348 <ull_filter_adv_update+0x30>)
	if (rl_enable &&
   1f326:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   1f328:	2100      	movs	r1, #0
   1f32a:	8011      	strh	r1, [r2, #0]
	if (rl_enable &&
   1f32c:	b91b      	cbnz	r3, 1f336 <ull_filter_adv_update+0x1e>
}
   1f32e:	bd08      	pop	{r3, pc}
		fal_update();
   1f330:	f7ff fbb0 	bl	1ea94 <fal_update>
   1f334:	e7f5      	b.n	1f322 <ull_filter_adv_update+0xa>
}
   1f336:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   1f33a:	f7ff bb73 	b.w	1ea24 <rl_update>
   1f33e:	bf00      	nop
   1f340:	2000224c 	.word	0x2000224c
   1f344:	20002d80 	.word	0x20002d80
   1f348:	20002478 	.word	0x20002478

0001f34c <ull_filter_rpa_update>:
{
   1f34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f350:	4683      	mov	fp, r0
   1f352:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   1f354:	f00f fc32 	bl	2ebbc <z_impl_k_uptime_ticks>
   1f358:	014b      	lsls	r3, r1, #5
   1f35a:	0142      	lsls	r2, r0, #5
   1f35c:	1a12      	subs	r2, r2, r0
   1f35e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   1f362:	eb63 0301 	sbc.w	r3, r3, r1
   1f366:	009b      	lsls	r3, r3, #2
   1f368:	ea4f 0982 	mov.w	r9, r2, lsl #2
   1f36c:	eb19 0900 	adds.w	r9, r9, r0
   1f370:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
   1f374:	eb41 0103 	adc.w	r1, r1, r3
   1f378:	00cb      	lsls	r3, r1, #3
   1f37a:	ea43 7359 	orr.w	r3, r3, r9, lsr #29
   1f37e:	0bd9      	lsrs	r1, r3, #15
   1f380:	f3c9 3910 	ubfx	r9, r9, #12, #17
   1f384:	ea49 4943 	orr.w	r9, r9, r3, lsl #17
   1f388:	9101      	str	r1, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   1f38a:	f1bb 0f00 	cmp.w	fp, #0
   1f38e:	d117      	bne.n	1f3c0 <ull_filter_rpa_update+0x74>
   1f390:	4a61      	ldr	r2, [pc, #388]	; (1f518 <ull_filter_rpa_update+0x1cc>)
   1f392:	e9d2 3200 	ldrd	r3, r2, [r2]
   1f396:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   1f39a:	bf08      	it	eq
   1f39c:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   1f3a0:	d00e      	beq.n	1f3c0 <ull_filter_rpa_update+0x74>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   1f3a2:	ebb9 0303 	subs.w	r3, r9, r3
   1f3a6:	eb61 0202 	sbc.w	r2, r1, r2
   1f3aa:	495c      	ldr	r1, [pc, #368]	; (1f51c <ull_filter_rpa_update+0x1d0>)
   1f3ac:	6809      	ldr	r1, [r1, #0]
	bool all = timeout || (rpa_last_ms == -1) ||
   1f3ae:	428b      	cmp	r3, r1
   1f3b0:	f172 0300 	sbcs.w	r3, r2, #0
   1f3b4:	bfac      	ite	ge
   1f3b6:	f04f 0a01 	movge.w	sl, #1
   1f3ba:	f04f 0a00 	movlt.w	sl, #0
   1f3be:	e001      	b.n	1f3c4 <ull_filter_rpa_update+0x78>
   1f3c0:	f04f 0a01 	mov.w	sl, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1f3c4:	4e56      	ldr	r6, [pc, #344]	; (1f520 <ull_filter_rpa_update+0x1d4>)
   1f3c6:	f8df 815c 	ldr.w	r8, [pc, #348]	; 1f524 <ull_filter_rpa_update+0x1d8>
	bool all = timeout || (rpa_last_ms == -1) ||
   1f3ca:	2400      	movs	r4, #0
   1f3cc:	f1a6 071e 	sub.w	r7, r6, #30
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   1f3d0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1f3d4:	00a5      	lsls	r5, r4, #2
   1f3d6:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1f3da:	07da      	lsls	r2, r3, #31
   1f3dc:	d515      	bpl.n	1f40a <ull_filter_rpa_update+0xbe>
   1f3de:	f1ba 0f00 	cmp.w	sl, #0
   1f3e2:	d101      	bne.n	1f3e8 <ull_filter_rpa_update+0x9c>
   1f3e4:	0798      	lsls	r0, r3, #30
   1f3e6:	d410      	bmi.n	1f40a <ull_filter_rpa_update+0xbe>
			if (rl[i].pirk) {
   1f3e8:	192b      	adds	r3, r5, r4
   1f3ea:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1f3ee:	0759      	lsls	r1, r3, #29
   1f3f0:	d460      	bmi.n	1f4b4 <ull_filter_rpa_update+0x168>
			if (rl[i].lirk) {
   1f3f2:	192b      	adds	r3, r5, r4
   1f3f4:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1f3f8:	071a      	lsls	r2, r3, #28
   1f3fa:	d44a      	bmi.n	1f492 <ull_filter_rpa_update+0x146>
			rl[i].rpas_ready = 1U;
   1f3fc:	4425      	add	r5, r4
   1f3fe:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   1f402:	f043 0302 	orr.w	r3, r3, #2
   1f406:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1f40a:	3401      	adds	r4, #1
   1f40c:	2c08      	cmp	r4, #8
   1f40e:	f108 0806 	add.w	r8, r8, #6
   1f412:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1f416:	d1db      	bne.n	1f3d0 <ull_filter_rpa_update+0x84>
	if (all) {
   1f418:	f1ba 0f00 	cmp.w	sl, #0
   1f41c:	d004      	beq.n	1f428 <ull_filter_rpa_update+0xdc>
		rpa_last_ms = now;
   1f41e:	4b3e      	ldr	r3, [pc, #248]	; (1f518 <ull_filter_rpa_update+0x1cc>)
   1f420:	9a01      	ldr	r2, [sp, #4]
   1f422:	f8c3 9000 	str.w	r9, [r3]
   1f426:	605a      	str	r2, [r3, #4]
	if (timeout) {
   1f428:	f1bb 0f00 	cmp.w	fp, #0
   1f42c:	d008      	beq.n	1f440 <ull_filter_rpa_update+0xf4>
			adv = ull_adv_is_enabled_get(handle);
   1f42e:	2000      	movs	r0, #0
   1f430:	f7fa fb1c 	bl	19a6c <ull_adv_is_enabled_get>
			if (adv) {
   1f434:	4604      	mov	r4, r0
   1f436:	b118      	cbz	r0, 1f440 <ull_filter_rpa_update+0xf4>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   1f438:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   1f43c:	075b      	lsls	r3, r3, #29
   1f43e:	d402      	bmi.n	1f446 <ull_filter_rpa_update+0xfa>
}
   1f440:	b007      	add	sp, #28
   1f442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (lll->rl_idx >= ARRAY_SIZE(rl)) {
   1f446:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   1f44a:	2b07      	cmp	r3, #7
   1f44c:	d8f8      	bhi.n	1f440 <ull_filter_rpa_update+0xf4>
	pri_idx = UINT8_MAX;
   1f44e:	23ff      	movs	r3, #255	; 0xff
   1f450:	f88d 3008 	strb.w	r3, [sp, #8]
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1f454:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1f458:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   1f45c:	a902      	add	r1, sp, #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1f45e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   1f460:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1f464:	f001 fa06 	bl	20874 <lll_adv_pdu_alloc>
		(void)memcpy(pdu, prev, (PDU_AC_LL_HEADER_SIZE + prev->len));
   1f468:	7872      	ldrb	r2, [r6, #1]
   1f46a:	4605      	mov	r5, r0
   1f46c:	3202      	adds	r2, #2
   1f46e:	4631      	mov	r1, r6
   1f470:	f009 ff69 	bl	29346 <memcpy>
	if (pdu) {
   1f474:	2d00      	cmp	r5, #0
   1f476:	d0e3      	beq.n	1f440 <ull_filter_rpa_update+0xf4>
		ull_adv_pdu_update_addrs(adv, pdu);
   1f478:	4629      	mov	r1, r5
   1f47a:	4620      	mov	r0, r4
   1f47c:	f7fa fb20 	bl	19ac0 <ull_adv_pdu_update_addrs>
		if (pri_idx != UINT8_MAX) {
   1f480:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1f484:	2bff      	cmp	r3, #255	; 0xff
   1f486:	d0db      	beq.n	1f440 <ull_filter_rpa_update+0xf4>
	pdu->last = idx;
   1f488:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
   1f48c:	b007      	add	sp, #28
   1f48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   1f492:	a902      	add	r1, sp, #8
   1f494:	f1a6 0017 	sub.w	r0, r6, #23
   1f498:	f009 ffae 	bl	293f8 <bt_rpa_create>
				LL_ASSERT(!err);
   1f49c:	bb70      	cbnz	r0, 1f4fc <ull_filter_rpa_update+0x1b0>
				rl[i].local_rpa = &rpa;
   1f49e:	ab02      	add	r3, sp, #8
   1f4a0:	f8c6 3006 	str.w	r3, [r6, #6]
   1f4a4:	4619      	mov	r1, r3
   1f4a6:	2206      	movs	r2, #6
   1f4a8:	4640      	mov	r0, r8
   1f4aa:	f009 ff4c 	bl	29346 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   1f4ae:	f8c6 8006 	str.w	r8, [r6, #6]
   1f4b2:	e7a3      	b.n	1f3fc <ull_filter_rpa_update+0xb0>
	psrc += length - 1;
   1f4b4:	f816 3c07 	ldrb.w	r3, [r6, #-7]
   1f4b8:	4a1b      	ldr	r2, [pc, #108]	; (1f528 <ull_filter_rpa_update+0x1dc>)
   1f4ba:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1f4be:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   1f4c0:	f10d 0307 	add.w	r3, sp, #7
   1f4c4:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   1f4c8:	f812 1901 	ldrb.w	r1, [r2], #-1
   1f4cc:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   1f4d0:	4283      	cmp	r3, r0
   1f4d2:	d1f9      	bne.n	1f4c8 <ull_filter_rpa_update+0x17c>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   1f4d4:	4631      	mov	r1, r6
   1f4d6:	a802      	add	r0, sp, #8
   1f4d8:	f009 ff8e 	bl	293f8 <bt_rpa_create>
				LL_ASSERT(!err);
   1f4dc:	2800      	cmp	r0, #0
   1f4de:	d088      	beq.n	1f3f2 <ull_filter_rpa_update+0xa6>
   1f4e0:	4a12      	ldr	r2, [pc, #72]	; (1f52c <ull_filter_rpa_update+0x1e0>)
   1f4e2:	4913      	ldr	r1, [pc, #76]	; (1f530 <ull_filter_rpa_update+0x1e4>)
   1f4e4:	4813      	ldr	r0, [pc, #76]	; (1f534 <ull_filter_rpa_update+0x1e8>)
   1f4e6:	f240 23eb 	movw	r3, #747	; 0x2eb
   1f4ea:	f008 f823 	bl	27534 <assert_print>
   1f4ee:	4040      	eors	r0, r0
   1f4f0:	f380 8811 	msr	BASEPRI, r0
   1f4f4:	f04f 0003 	mov.w	r0, #3
   1f4f8:	df02      	svc	2
   1f4fa:	e77a      	b.n	1f3f2 <ull_filter_rpa_update+0xa6>
				LL_ASSERT(!err);
   1f4fc:	4a0b      	ldr	r2, [pc, #44]	; (1f52c <ull_filter_rpa_update+0x1e0>)
   1f4fe:	490c      	ldr	r1, [pc, #48]	; (1f530 <ull_filter_rpa_update+0x1e4>)
   1f500:	480c      	ldr	r0, [pc, #48]	; (1f534 <ull_filter_rpa_update+0x1e8>)
   1f502:	f44f 733e 	mov.w	r3, #760	; 0x2f8
   1f506:	f008 f815 	bl	27534 <assert_print>
   1f50a:	4040      	eors	r0, r0
   1f50c:	f380 8811 	msr	BASEPRI, r0
   1f510:	f04f 0003 	mov.w	r0, #3
   1f514:	df02      	svc	2
   1f516:	e7c2      	b.n	1f49e <ull_filter_rpa_update+0x152>
   1f518:	200013a8 	.word	0x200013a8
   1f51c:	200024ac 	.word	0x200024ac
   1f520:	20002356 	.word	0x20002356
   1f524:	20002280 	.word	0x20002280
   1f528:	200022b8 	.word	0x200022b8
   1f52c:	0002ffd0 	.word	0x0002ffd0
   1f530:	0002fa40 	.word	0x0002fa40
   1f534:	0002f8a0 	.word	0x0002f8a0

0001f538 <rpa_timeout>:
{
   1f538:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   1f53a:	2001      	movs	r0, #1
   1f53c:	f7ff ff06 	bl	1f34c <ull_filter_rpa_update>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   1f540:	4a0a      	ldr	r2, [pc, #40]	; (1f56c <rpa_timeout+0x34>)
   1f542:	6812      	ldr	r2, [r2, #0]
   1f544:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1f548:	f240 30e7 	movw	r0, #999	; 0x3e7
   1f54c:	2100      	movs	r1, #0
   1f54e:	fbe2 0103 	umlal	r0, r1, r2, r3
   1f552:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f556:	2300      	movs	r3, #0
   1f558:	f7ec fed2 	bl	c300 <__aeabi_uldivmod>
}
   1f55c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f560:	4602      	mov	r2, r0
   1f562:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   1f564:	4802      	ldr	r0, [pc, #8]	; (1f570 <rpa_timeout+0x38>)
   1f566:	f006 bddb 	b.w	26120 <k_work_schedule>
   1f56a:	bf00      	nop
   1f56c:	200024ac 	.word	0x200024ac
   1f570:	200013b0 	.word	0x200013b0

0001f574 <ull_filter_adva_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   1f574:	2807      	cmp	r0, #7
   1f576:	d813      	bhi.n	1f5a0 <ull_filter_adva_get+0x2c>
{
   1f578:	b570      	push	{r4, r5, r6, lr}
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   1f57a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1f57e:	4d10      	ldr	r5, [pc, #64]	; (1f5c0 <ull_filter_adva_get+0x4c>)
   1f580:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   1f584:	071a      	lsls	r2, r3, #28
   1f586:	4604      	mov	r4, r0
   1f588:	ea4f 0680 	mov.w	r6, r0, lsl #2
   1f58c:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   1f590:	d505      	bpl.n	1f59e <ull_filter_adva_get+0x2a>
		LL_ASSERT(rl[rl_idx].rpas_ready);
   1f592:	079b      	lsls	r3, r3, #30
   1f594:	d506      	bpl.n	1f5a4 <ull_filter_adva_get+0x30>
		return rl[rl_idx].local_rpa->val;
   1f596:	4434      	add	r4, r6
   1f598:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1f59c:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   1f59e:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   1f5a0:	2000      	movs	r0, #0
}
   1f5a2:	4770      	bx	lr
		LL_ASSERT(rl[rl_idx].rpas_ready);
   1f5a4:	4a07      	ldr	r2, [pc, #28]	; (1f5c4 <ull_filter_adva_get+0x50>)
   1f5a6:	4908      	ldr	r1, [pc, #32]	; (1f5c8 <ull_filter_adva_get+0x54>)
   1f5a8:	4808      	ldr	r0, [pc, #32]	; (1f5cc <ull_filter_adva_get+0x58>)
   1f5aa:	f240 331f 	movw	r3, #799	; 0x31f
   1f5ae:	f007 ffc1 	bl	27534 <assert_print>
   1f5b2:	4040      	eors	r0, r0
   1f5b4:	f380 8811 	msr	BASEPRI, r0
   1f5b8:	f04f 0003 	mov.w	r0, #3
   1f5bc:	df02      	svc	2
   1f5be:	e7ea      	b.n	1f596 <ull_filter_adva_get+0x22>
   1f5c0:	20002338 	.word	0x20002338
   1f5c4:	0002ffd0 	.word	0x0002ffd0
   1f5c8:	00030034 	.word	0x00030034
   1f5cc:	0002f8a0 	.word	0x0002f8a0

0001f5d0 <ull_filter_tgta_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].pirk) {
   1f5d0:	2807      	cmp	r0, #7
   1f5d2:	d80b      	bhi.n	1f5ec <ull_filter_tgta_get+0x1c>
   1f5d4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1f5d8:	4a05      	ldr	r2, [pc, #20]	; (1f5f0 <ull_filter_tgta_get+0x20>)
   1f5da:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   1f5de:	074b      	lsls	r3, r1, #29
   1f5e0:	d504      	bpl.n	1f5ec <ull_filter_tgta_get+0x1c>
		return rl[rl_idx].peer_rpa.val;
   1f5e2:	2328      	movs	r3, #40	; 0x28
   1f5e4:	fb03 2000 	mla	r0, r3, r0, r2
   1f5e8:	301e      	adds	r0, #30
   1f5ea:	4770      	bx	lr
	return NULL;
   1f5ec:	2000      	movs	r0, #0
   1f5ee:	4770      	bx	lr
   1f5f0:	20002338 	.word	0x20002338

0001f5f4 <ull_filter_rl_find>:
{
   1f5f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f5f8:	468b      	mov	fp, r1
	if (free_idx) {
   1f5fa:	4617      	mov	r7, r2
   1f5fc:	b10a      	cbz	r2, 1f602 <ull_filter_rl_find+0xe>
		*free_idx = FILTER_IDX_NONE;
   1f5fe:	23ff      	movs	r3, #255	; 0xff
   1f600:	7013      	strb	r3, [r2, #0]
   1f602:	4d1b      	ldr	r5, [pc, #108]	; (1f670 <ull_filter_rl_find+0x7c>)
{
   1f604:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1f606:	f000 0a01 	and.w	sl, r0, #1
   1f60a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   1f60e:	e006      	b.n	1f61e <ull_filter_rl_find+0x2a>
   1f610:	4552      	cmp	r2, sl
   1f612:	d01f      	beq.n	1f654 <ull_filter_rl_find+0x60>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1f614:	3401      	adds	r4, #1
   1f616:	2c08      	cmp	r4, #8
   1f618:	f105 0528 	add.w	r5, r5, #40	; 0x28
   1f61c:	d015      	beq.n	1f64a <ull_filter_rl_find+0x56>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1f61e:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   1f622:	fa5f f884 	uxtb.w	r8, r4
   1f626:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   1f62a:	07d9      	lsls	r1, r3, #31
   1f62c:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1f630:	d4ee      	bmi.n	1f610 <ull_filter_rl_find+0x1c>
		} else if (free_idx && !rl[i].taken &&
   1f632:	2f00      	cmp	r7, #0
   1f634:	d0ee      	beq.n	1f614 <ull_filter_rl_find+0x20>
   1f636:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1f638:	3401      	adds	r4, #1
		} else if (free_idx && !rl[i].taken &&
   1f63a:	2bff      	cmp	r3, #255	; 0xff
			*free_idx = i;
   1f63c:	bf08      	it	eq
   1f63e:	f887 8000 	strbeq.w	r8, [r7]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1f642:	2c08      	cmp	r4, #8
   1f644:	f105 0528 	add.w	r5, r5, #40	; 0x28
   1f648:	d1e9      	bne.n	1f61e <ull_filter_rl_find+0x2a>
	return FILTER_IDX_NONE;
   1f64a:	f04f 08ff 	mov.w	r8, #255	; 0xff
}
   1f64e:	4640      	mov	r0, r8
   1f650:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1f654:	4628      	mov	r0, r5
   1f656:	2206      	movs	r2, #6
   1f658:	4659      	mov	r1, fp
   1f65a:	f009 fe63 	bl	29324 <memcmp>
   1f65e:	2800      	cmp	r0, #0
   1f660:	d0f5      	beq.n	1f64e <ull_filter_rl_find+0x5a>
		} else if (free_idx && !rl[i].taken &&
   1f662:	2f00      	cmp	r7, #0
   1f664:	d0d6      	beq.n	1f614 <ull_filter_rl_find+0x20>
   1f666:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   1f66a:	07db      	lsls	r3, r3, #31
   1f66c:	d4d2      	bmi.n	1f614 <ull_filter_rl_find+0x20>
   1f66e:	e7e2      	b.n	1f636 <ull_filter_rl_find+0x42>
   1f670:	20002339 	.word	0x20002339

0001f674 <ll_rl_add>:
{
   1f674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f678:	4680      	mov	r8, r0
   1f67a:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1f67c:	2000      	movs	r0, #0
{
   1f67e:	460e      	mov	r6, r1
   1f680:	4691      	mov	r9, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1f682:	f7fa fa01 	bl	19a88 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   1f686:	2800      	cmp	r0, #0
   1f688:	d17d      	bne.n	1f786 <ll_rl_add+0x112>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   1f68a:	46c2      	mov	sl, r8
   1f68c:	4604      	mov	r4, r0
   1f68e:	f81a 0b01 	ldrb.w	r0, [sl], #1
   1f692:	f10d 020f 	add.w	r2, sp, #15
   1f696:	4651      	mov	r1, sl
   1f698:	f7ff ffac 	bl	1f5f4 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1f69c:	2807      	cmp	r0, #7
   1f69e:	f240 80b5 	bls.w	1f80c <ll_rl_add+0x198>
	} else if (j >= ARRAY_SIZE(rl)) {
   1f6a2:	f89d 700f 	ldrb.w	r7, [sp, #15]
   1f6a6:	2f07      	cmp	r7, #7
   1f6a8:	f200 8084 	bhi.w	1f7b4 <ll_rl_add+0x140>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1f6ac:	eb07 0b87 	add.w	fp, r7, r7, lsl #2
   1f6b0:	4d58      	ldr	r5, [pc, #352]	; (1f814 <ll_rl_add+0x1a0>)
   1f6b2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   1f6b6:	1c58      	adds	r0, r3, #1
   1f6b8:	2206      	movs	r2, #6
   1f6ba:	4651      	mov	r1, sl
   1f6bc:	4428      	add	r0, r5
   1f6be:	9300      	str	r3, [sp, #0]
   1f6c0:	f009 fe41 	bl	29346 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   1f6c4:	f898 3000 	ldrb.w	r3, [r8]
   1f6c8:	f815 103b 	ldrb.w	r1, [r5, fp, lsl #3]
   1f6cc:	465a      	mov	r2, fp
   1f6ce:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   1f6d2:	f363 1186 	bfi	r1, r3, #6, #1
   1f6d6:	f805 100b 	strb.w	r1, [r5, fp]
   1f6da:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1f6de:	2110      	movs	r1, #16
   1f6e0:	4630      	mov	r0, r6
	rl[i].id_addr_type = id_addr->type & 0x1;
   1f6e2:	9301      	str	r3, [sp, #4]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1f6e4:	f7f5 fdc8 	bl	15278 <mem_nz>
   1f6e8:	f815 200b 	ldrb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1f6ec:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1f6ee:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1f6f2:	4648      	mov	r0, r9
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1f6f4:	f805 200b 	strb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1f6f8:	f7f5 fdbe 	bl	15278 <mem_nz>
   1f6fc:	f815 200b 	ldrb.w	r2, [r5, fp]
   1f700:	f000 0001 	and.w	r0, r0, #1
   1f704:	f360 02c3 	bfi	r2, r0, #3, #1
   1f708:	f805 200b 	strb.w	r2, [r5, fp]
	if (rl[i].pirk) {
   1f70c:	0752      	lsls	r2, r2, #29
	rl[i].id_addr_type = id_addr->type & 0x1;
   1f70e:	ea4f 0b87 	mov.w	fp, r7, lsl #2
	if (rl[i].pirk) {
   1f712:	d453      	bmi.n	1f7bc <ll_rl_add+0x148>
	if (rl[i].lirk) {
   1f714:	2800      	cmp	r0, #0
   1f716:	d16b      	bne.n	1f7f0 <ll_rl_add+0x17c>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   1f718:	9800      	ldr	r0, [sp, #0]
   1f71a:	4e3f      	ldr	r6, [pc, #252]	; (1f818 <ll_rl_add+0x1a4>)
   1f71c:	3018      	adds	r0, #24
   1f71e:	2206      	movs	r2, #6
   1f720:	2100      	movs	r1, #0
   1f722:	4428      	add	r0, r5
   1f724:	f009 fe1a 	bl	2935c <memset>
	rl[i].dev = 0U;
   1f728:	eb0b 0207 	add.w	r2, fp, r7
	rl[i].rpas_ready = 0U;
   1f72c:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   1f730:	f021 0112 	bic.w	r1, r1, #18
   1f734:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	j = fal_find(id_addr->type, id_addr->a.val, NULL);
   1f738:	f898 9000 	ldrb.w	r9, [r8]
	for (i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   1f73c:	f1a6 0802 	sub.w	r8, r6, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1f740:	f009 0901 	and.w	r9, r9, #1
   1f744:	f818 2034 	ldrb.w	r2, [r8, r4, lsl #3]
   1f748:	07d3      	lsls	r3, r2, #31
   1f74a:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1f74e:	d501      	bpl.n	1f754 <ll_rl_add+0xe0>
   1f750:	4549      	cmp	r1, r9
   1f752:	d01c      	beq.n	1f78e <ll_rl_add+0x11a>
	for (i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   1f754:	3401      	adds	r4, #1
   1f756:	2c08      	cmp	r4, #8
   1f758:	f106 0608 	add.w	r6, r6, #8
   1f75c:	d1f2      	bne.n	1f744 <ll_rl_add+0xd0>
		rl[i].fal = 0U;
   1f75e:	eb0b 0207 	add.w	r2, fp, r7
   1f762:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   1f766:	f36f 1145 	bfc	r1, #5, #1
   1f76a:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	rl[i].taken = 1U;
   1f76e:	eb0b 0307 	add.w	r3, fp, r7
	return 0;
   1f772:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   1f774:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   1f778:	f042 0201 	orr.w	r2, r2, #1
   1f77c:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]
}
   1f780:	b005      	add	sp, #20
   1f782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1f786:	200c      	movs	r0, #12
}
   1f788:	b005      	add	sp, #20
   1f78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1f78e:	2206      	movs	r2, #6
   1f790:	4630      	mov	r0, r6
   1f792:	4651      	mov	r1, sl
   1f794:	f009 fdc6 	bl	29324 <memcmp>
   1f798:	2800      	cmp	r0, #0
   1f79a:	d1db      	bne.n	1f754 <ll_rl_add+0xe0>
		rl[i].fal = 1U;
   1f79c:	eb0b 0207 	add.w	r2, fp, r7
		fal[j].rl_idx = i;
   1f7a0:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
		rl[i].fal = 1U;
   1f7a4:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
		fal[j].rl_idx = i;
   1f7a8:	7067      	strb	r7, [r4, #1]
		rl[i].fal = 1U;
   1f7aa:	f041 0120 	orr.w	r1, r1, #32
   1f7ae:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
   1f7b2:	e7dc      	b.n	1f76e <ll_rl_add+0xfa>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1f7b4:	2007      	movs	r0, #7
}
   1f7b6:	b005      	add	sp, #20
   1f7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   1f7bc:	4b17      	ldr	r3, [pc, #92]	; (1f81c <ll_rl_add+0x1a8>)
		peer_irk_rl_ids[peer_irk_count] = i;
   1f7be:	4a18      	ldr	r2, [pc, #96]	; (1f820 <ll_rl_add+0x1ac>)
		rl[i].pirk_idx = peer_irk_count;
   1f7c0:	7819      	ldrb	r1, [r3, #0]
   1f7c2:	f8dd c004 	ldr.w	ip, [sp, #4]
		peer_irk_rl_ids[peer_irk_count] = i;
   1f7c6:	5457      	strb	r7, [r2, r1]
   1f7c8:	4a16      	ldr	r2, [pc, #88]	; (1f824 <ll_rl_add+0x1b0>)
		rl[i].pirk_idx = peer_irk_count;
   1f7ca:	f88c 1017 	strb.w	r1, [ip, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   1f7ce:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
   1f7d2:	3101      	adds	r1, #1
	psrc += length - 1;
   1f7d4:	f106 020f 	add.w	r2, r6, #15
   1f7d8:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
   1f7da:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   1f7de:	3e01      	subs	r6, #1
		*pdst++ = *psrc--;
   1f7e0:	f812 1901 	ldrb.w	r1, [r2], #-1
   1f7e4:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   1f7e8:	42b2      	cmp	r2, r6
   1f7ea:	d1f9      	bne.n	1f7e0 <ll_rl_add+0x16c>
	if (rl[i].lirk) {
   1f7ec:	2800      	cmp	r0, #0
   1f7ee:	d093      	beq.n	1f718 <ll_rl_add+0xa4>
		(void)memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   1f7f0:	9b00      	ldr	r3, [sp, #0]
   1f7f2:	1dd8      	adds	r0, r3, #7
   1f7f4:	4649      	mov	r1, r9
   1f7f6:	2210      	movs	r2, #16
   1f7f8:	4428      	add	r0, r5
   1f7fa:	f009 fda4 	bl	29346 <memcpy>
		rl[i].local_rpa = NULL;
   1f7fe:	eb0b 0207 	add.w	r2, fp, r7
   1f802:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
   1f806:	2100      	movs	r1, #0
   1f808:	6251      	str	r1, [r2, #36]	; 0x24
   1f80a:	e785      	b.n	1f718 <ll_rl_add+0xa4>
		return BT_HCI_ERR_INVALID_PARAM;
   1f80c:	2012      	movs	r0, #18
}
   1f80e:	b005      	add	sp, #20
   1f810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f814:	20002338 	.word	0x20002338
   1f818:	2000220e 	.word	0x2000220e
   1f81c:	20002d7f 	.word	0x20002d7f
   1f820:	200022b0 	.word	0x200022b0
   1f824:	200022b8 	.word	0x200022b8

0001f828 <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   1f828:	2807      	cmp	r0, #7
   1f82a:	d807      	bhi.n	1f83c <ull_filter_lll_lrpa_used+0x14>
   1f82c:	4b04      	ldr	r3, [pc, #16]	; (1f840 <ull_filter_lll_lrpa_used+0x18>)
   1f82e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1f832:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   1f836:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1f83a:	4770      	bx	lr
   1f83c:	2000      	movs	r0, #0
}
   1f83e:	4770      	bx	lr
   1f840:	20002338 	.word	0x20002338

0001f844 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   1f844:	4b02      	ldr	r3, [pc, #8]	; (1f850 <ull_filter_lll_irks_get+0xc>)
   1f846:	781b      	ldrb	r3, [r3, #0]
   1f848:	7003      	strb	r3, [r0, #0]
}
   1f84a:	4802      	ldr	r0, [pc, #8]	; (1f854 <ull_filter_lll_irks_get+0x10>)
   1f84c:	4770      	bx	lr
   1f84e:	bf00      	nop
   1f850:	20002d7f 	.word	0x20002d7f
   1f854:	200022b8 	.word	0x200022b8

0001f858 <ull_filter_lll_rl_irk_idx>:
{
   1f858:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1f85a:	4b20      	ldr	r3, [pc, #128]	; (1f8dc <ull_filter_lll_rl_irk_idx+0x84>)
   1f85c:	781b      	ldrb	r3, [r3, #0]
   1f85e:	4283      	cmp	r3, r0
{
   1f860:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1f862:	d90c      	bls.n	1f87e <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   1f864:	4b1e      	ldr	r3, [pc, #120]	; (1f8e0 <ull_filter_lll_rl_irk_idx+0x88>)
   1f866:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1f868:	2c07      	cmp	r4, #7
   1f86a:	d819      	bhi.n	1f8a0 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   1f86c:	4b1d      	ldr	r3, [pc, #116]	; (1f8e4 <ull_filter_lll_rl_irk_idx+0x8c>)
   1f86e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1f872:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   1f876:	07db      	lsls	r3, r3, #31
   1f878:	d520      	bpl.n	1f8bc <ull_filter_lll_rl_irk_idx+0x64>
}
   1f87a:	4620      	mov	r0, r4
   1f87c:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1f87e:	4a1a      	ldr	r2, [pc, #104]	; (1f8e8 <ull_filter_lll_rl_irk_idx+0x90>)
   1f880:	491a      	ldr	r1, [pc, #104]	; (1f8ec <ull_filter_lll_rl_irk_idx+0x94>)
   1f882:	481b      	ldr	r0, [pc, #108]	; (1f8f0 <ull_filter_lll_rl_irk_idx+0x98>)
   1f884:	f44f 735c 	mov.w	r3, #880	; 0x370
   1f888:	f007 fe54 	bl	27534 <assert_print>
   1f88c:	4040      	eors	r0, r0
   1f88e:	f380 8811 	msr	BASEPRI, r0
   1f892:	f04f 0003 	mov.w	r0, #3
   1f896:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   1f898:	4b11      	ldr	r3, [pc, #68]	; (1f8e0 <ull_filter_lll_rl_irk_idx+0x88>)
   1f89a:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1f89c:	2c07      	cmp	r4, #7
   1f89e:	d9e5      	bls.n	1f86c <ull_filter_lll_rl_irk_idx+0x14>
   1f8a0:	4a11      	ldr	r2, [pc, #68]	; (1f8e8 <ull_filter_lll_rl_irk_idx+0x90>)
   1f8a2:	4914      	ldr	r1, [pc, #80]	; (1f8f4 <ull_filter_lll_rl_irk_idx+0x9c>)
   1f8a4:	4812      	ldr	r0, [pc, #72]	; (1f8f0 <ull_filter_lll_rl_irk_idx+0x98>)
   1f8a6:	f240 3372 	movw	r3, #882	; 0x372
   1f8aa:	f007 fe43 	bl	27534 <assert_print>
   1f8ae:	4040      	eors	r0, r0
   1f8b0:	f380 8811 	msr	BASEPRI, r0
   1f8b4:	f04f 0003 	mov.w	r0, #3
   1f8b8:	df02      	svc	2
   1f8ba:	e7d7      	b.n	1f86c <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   1f8bc:	4a0a      	ldr	r2, [pc, #40]	; (1f8e8 <ull_filter_lll_rl_irk_idx+0x90>)
   1f8be:	490e      	ldr	r1, [pc, #56]	; (1f8f8 <ull_filter_lll_rl_irk_idx+0xa0>)
   1f8c0:	480b      	ldr	r0, [pc, #44]	; (1f8f0 <ull_filter_lll_rl_irk_idx+0x98>)
   1f8c2:	f240 3373 	movw	r3, #883	; 0x373
   1f8c6:	f007 fe35 	bl	27534 <assert_print>
   1f8ca:	4040      	eors	r0, r0
   1f8cc:	f380 8811 	msr	BASEPRI, r0
   1f8d0:	f04f 0003 	mov.w	r0, #3
   1f8d4:	df02      	svc	2
}
   1f8d6:	4620      	mov	r0, r4
   1f8d8:	bd10      	pop	{r4, pc}
   1f8da:	bf00      	nop
   1f8dc:	20002d7f 	.word	0x20002d7f
   1f8e0:	200022b0 	.word	0x200022b0
   1f8e4:	20002338 	.word	0x20002338
   1f8e8:	0002ffd0 	.word	0x0002ffd0
   1f8ec:	000301c4 	.word	0x000301c4
   1f8f0:	0002f8a0 	.word	0x0002f8a0
   1f8f4:	000301e4 	.word	0x000301e4
   1f8f8:	000301b8 	.word	0x000301b8

0001f8fc <ull_filter_lll_irk_in_fal>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   1f8fc:	2807      	cmp	r0, #7
   1f8fe:	d823      	bhi.n	1f948 <ull_filter_lll_irk_in_fal+0x4c>
{
   1f900:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   1f902:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1f906:	4e11      	ldr	r6, [pc, #68]	; (1f94c <ull_filter_lll_irk_in_fal+0x50>)
   1f908:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   1f90c:	07db      	lsls	r3, r3, #31
   1f90e:	4604      	mov	r4, r0
   1f910:	ea4f 0580 	mov.w	r5, r0, lsl #2
   1f914:	d505      	bpl.n	1f922 <ull_filter_lll_irk_in_fal+0x26>
	return rl[rl_idx].fal;
   1f916:	442c      	add	r4, r5
   1f918:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1f91c:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1f920:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   1f922:	4a0b      	ldr	r2, [pc, #44]	; (1f950 <ull_filter_lll_irk_in_fal+0x54>)
   1f924:	490b      	ldr	r1, [pc, #44]	; (1f954 <ull_filter_lll_irk_in_fal+0x58>)
   1f926:	480c      	ldr	r0, [pc, #48]	; (1f958 <ull_filter_lll_irk_in_fal+0x5c>)
   1f928:	f240 337e 	movw	r3, #894	; 0x37e
   1f92c:	f007 fe02 	bl	27534 <assert_print>
   1f930:	4040      	eors	r0, r0
   1f932:	f380 8811 	msr	BASEPRI, r0
   1f936:	f04f 0003 	mov.w	r0, #3
   1f93a:	df02      	svc	2
	return rl[rl_idx].fal;
   1f93c:	442c      	add	r4, r5
   1f93e:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1f942:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1f946:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   1f948:	2000      	movs	r0, #0
}
   1f94a:	4770      	bx	lr
   1f94c:	20002338 	.word	0x20002338
   1f950:	0002ffd0 	.word	0x0002ffd0
   1f954:	00030020 	.word	0x00030020
   1f958:	0002f8a0 	.word	0x0002f8a0

0001f95c <ull_filter_lll_rl_addr_allowed>:
	if (*rl_idx != FILTER_IDX_NONE) {
   1f95c:	7813      	ldrb	r3, [r2, #0]
   1f95e:	2bff      	cmp	r3, #255	; 0xff
   1f960:	d11b      	bne.n	1f99a <ull_filter_lll_rl_addr_allowed+0x3e>
{
   1f962:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f966:	4d19      	ldr	r5, [pc, #100]	; (1f9cc <ull_filter_lll_rl_addr_allowed+0x70>)
   1f968:	4604      	mov	r4, r0
   1f96a:	46ae      	mov	lr, r5
	if (*rl_idx != FILTER_IDX_NONE) {
   1f96c:	2300      	movs	r3, #0
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1f96e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   1f972:	b2df      	uxtb	r7, r3
   1f974:	f815 c03c 	ldrb.w	ip, [r5, ip, lsl #3]
   1f978:	f01c 0001 	ands.w	r0, ip, #1
   1f97c:	ea4f 0683 	mov.w	r6, r3, lsl #2
   1f980:	d003      	beq.n	1f98a <ull_filter_lll_rl_addr_allowed+0x2e>
   1f982:	f3cc 1c80 	ubfx	ip, ip, #6, #1
   1f986:	45a4      	cmp	ip, r4
   1f988:	d009      	beq.n	1f99e <ull_filter_lll_rl_addr_allowed+0x42>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1f98a:	3301      	adds	r3, #1
   1f98c:	2b08      	cmp	r3, #8
   1f98e:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
   1f992:	d1ec      	bne.n	1f96e <ull_filter_lll_rl_addr_allowed+0x12>
		return true;
   1f994:	2001      	movs	r0, #1
}
   1f996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true;
   1f99a:	2001      	movs	r0, #1
}
   1f99c:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1f99e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1f9a2:	46f4      	mov	ip, lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1f9a4:	f10e 0b06 	add.w	fp, lr, #6
				if (addr[j] != id_addr[j]) {
   1f9a8:	f81c af01 	ldrb.w	sl, [ip, #1]!
   1f9ac:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   1f9b0:	45ca      	cmp	sl, r9
   1f9b2:	d1ea      	bne.n	1f98a <ull_filter_lll_rl_addr_allowed+0x2e>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1f9b4:	45dc      	cmp	ip, fp
   1f9b6:	d1f7      	bne.n	1f9a8 <ull_filter_lll_rl_addr_allowed+0x4c>
				return !rl[i].pirk || rl[i].dev;
   1f9b8:	4433      	add	r3, r6
				*rl_idx = i;
   1f9ba:	7017      	strb	r7, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   1f9bc:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   1f9c0:	075a      	lsls	r2, r3, #29
   1f9c2:	d5e8      	bpl.n	1f996 <ull_filter_lll_rl_addr_allowed+0x3a>
   1f9c4:	f3c3 1000 	ubfx	r0, r3, #4, #1
   1f9c8:	e7e5      	b.n	1f996 <ull_filter_lll_rl_addr_allowed+0x3a>
   1f9ca:	bf00      	nop
   1f9cc:	20002338 	.word	0x20002338

0001f9d0 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   1f9d0:	4b02      	ldr	r3, [pc, #8]	; (1f9dc <ull_filter_lll_rl_enabled+0xc>)
   1f9d2:	7818      	ldrb	r0, [r3, #0]
}
   1f9d4:	3800      	subs	r0, #0
   1f9d6:	bf18      	it	ne
   1f9d8:	2001      	movne	r0, #1
   1f9da:	4770      	bx	lr
   1f9dc:	20002d80 	.word	0x20002d80

0001f9e0 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1f9e0:	4668      	mov	r0, sp
   1f9e2:	f020 0107 	bic.w	r1, r0, #7
   1f9e6:	468d      	mov	sp, r1
   1f9e8:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   1f9ea:	f002 f875 	bl	21ad8 <isr_radio>

	ISR_DIRECT_PM();
   1f9ee:	f7ef fd6d 	bl	f4cc <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   1f9f2:	f7ef fe55 	bl	f6a0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1f9f6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1f9fa:	4685      	mov	sp, r0
   1f9fc:	4770      	bx	lr
   1f9fe:	bf00      	nop

0001fa00 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   1fa00:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   1fa02:	4b09      	ldr	r3, [pc, #36]	; (1fa28 <rtc0_nrf5_isr+0x28>)
   1fa04:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1fa08:	b93a      	cbnz	r2, 1fa1a <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   1fa0a:	2001      	movs	r0, #1
   1fa0c:	f7f5 fd1a 	bl	15444 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   1fa10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   1fa14:	2002      	movs	r0, #2
   1fa16:	f7f5 bd15 	b.w	15444 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1fa1a:	2000      	movs	r0, #0
   1fa1c:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   1fa20:	f7f6 fd98 	bl	16554 <ticker_trigger>
   1fa24:	e7f1      	b.n	1fa0a <rtc0_nrf5_isr+0xa>
   1fa26:	bf00      	nop
   1fa28:	4000b000 	.word	0x4000b000

0001fa2c <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   1fa2c:	2000      	movs	r0, #0
   1fa2e:	f7f5 bd09 	b.w	15444 <mayfly_run>
   1fa32:	bf00      	nop

0001fa34 <ticker_stop_op_cb>:
static uint8_t preempt_stop_ack;
static uint8_t preempt_req;
static uint8_t volatile preempt_ack;

static void ticker_stop_op_cb(uint32_t status, void *param)
{
   1fa34:	b510      	push	{r4, lr}
	ARG_UNUSED(param);
	ARG_UNUSED(status);

	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   1fa36:	4b0e      	ldr	r3, [pc, #56]	; (1fa70 <ticker_stop_op_cb+0x3c>)
   1fa38:	4c0e      	ldr	r4, [pc, #56]	; (1fa74 <ticker_stop_op_cb+0x40>)
   1fa3a:	781a      	ldrb	r2, [r3, #0]
   1fa3c:	7823      	ldrb	r3, [r4, #0]
   1fa3e:	429a      	cmp	r2, r3
   1fa40:	d006      	beq.n	1fa50 <ticker_stop_op_cb+0x1c>
	preempt_stop_ack++;

	preempt_req = preempt_ack;
   1fa42:	490d      	ldr	r1, [pc, #52]	; (1fa78 <ticker_stop_op_cb+0x44>)
   1fa44:	4a0d      	ldr	r2, [pc, #52]	; (1fa7c <ticker_stop_op_cb+0x48>)
   1fa46:	7809      	ldrb	r1, [r1, #0]
   1fa48:	7011      	strb	r1, [r2, #0]
	preempt_stop_ack++;
   1fa4a:	3301      	adds	r3, #1
   1fa4c:	7023      	strb	r3, [r4, #0]
}
   1fa4e:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   1fa50:	4a0b      	ldr	r2, [pc, #44]	; (1fa80 <ticker_stop_op_cb+0x4c>)
   1fa52:	490c      	ldr	r1, [pc, #48]	; (1fa84 <ticker_stop_op_cb+0x50>)
   1fa54:	480c      	ldr	r0, [pc, #48]	; (1fa88 <ticker_stop_op_cb+0x54>)
   1fa56:	f240 3301 	movw	r3, #769	; 0x301
   1fa5a:	f007 fd6b 	bl	27534 <assert_print>
   1fa5e:	4040      	eors	r0, r0
   1fa60:	f380 8811 	msr	BASEPRI, r0
   1fa64:	f04f 0003 	mov.w	r0, #3
   1fa68:	df02      	svc	2
	preempt_stop_ack++;
   1fa6a:	7823      	ldrb	r3, [r4, #0]
   1fa6c:	e7e9      	b.n	1fa42 <ticker_stop_op_cb+0xe>
   1fa6e:	bf00      	nop
   1fa70:	20002d86 	.word	0x20002d86
   1fa74:	20002d85 	.word	0x20002d85
   1fa78:	20002d81 	.word	0x20002d81
   1fa7c:	20002d82 	.word	0x20002d82
   1fa80:	000301ec 	.word	0x000301ec
   1fa84:	00030234 	.word	0x00030234
   1fa88:	0002f8a0 	.word	0x0002f8a0

0001fa8c <ticker_start_op_cb>:

static void ticker_start_op_cb(uint32_t status, void *param)
{
   1fa8c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1fa8e:	b9f8      	cbnz	r0, 1fad0 <ticker_start_op_cb+0x44>

	LL_ASSERT(preempt_start_req != preempt_start_ack);
   1fa90:	4b1e      	ldr	r3, [pc, #120]	; (1fb0c <ticker_start_op_cb+0x80>)
   1fa92:	4d1f      	ldr	r5, [pc, #124]	; (1fb10 <ticker_start_op_cb+0x84>)
   1fa94:	781a      	ldrb	r2, [r3, #0]
   1fa96:	782b      	ldrb	r3, [r5, #0]
   1fa98:	429a      	cmp	r2, r3
   1fa9a:	d027      	beq.n	1faec <ticker_start_op_cb+0x60>
	preempt_start_ack++;

	LL_ASSERT(preempt_req == preempt_ack);
   1fa9c:	4a1d      	ldr	r2, [pc, #116]	; (1fb14 <ticker_start_op_cb+0x88>)
   1fa9e:	4c1e      	ldr	r4, [pc, #120]	; (1fb18 <ticker_start_op_cb+0x8c>)
   1faa0:	7812      	ldrb	r2, [r2, #0]
   1faa2:	7821      	ldrb	r1, [r4, #0]
	preempt_start_ack++;
   1faa4:	3301      	adds	r3, #1
	LL_ASSERT(preempt_req == preempt_ack);
   1faa6:	4291      	cmp	r1, r2
	preempt_start_ack++;
   1faa8:	702b      	strb	r3, [r5, #0]
	LL_ASSERT(preempt_req == preempt_ack);
   1faaa:	b2d3      	uxtb	r3, r2
   1faac:	d00d      	beq.n	1faca <ticker_start_op_cb+0x3e>
   1faae:	4a1b      	ldr	r2, [pc, #108]	; (1fb1c <ticker_start_op_cb+0x90>)
   1fab0:	491b      	ldr	r1, [pc, #108]	; (1fb20 <ticker_start_op_cb+0x94>)
   1fab2:	481c      	ldr	r0, [pc, #112]	; (1fb24 <ticker_start_op_cb+0x98>)
   1fab4:	f240 330f 	movw	r3, #783	; 0x30f
   1fab8:	f007 fd3c 	bl	27534 <assert_print>
   1fabc:	4040      	eors	r0, r0
   1fabe:	f380 8811 	msr	BASEPRI, r0
   1fac2:	f04f 0003 	mov.w	r0, #3
   1fac6:	df02      	svc	2
	preempt_req++;
   1fac8:	7823      	ldrb	r3, [r4, #0]
   1faca:	3301      	adds	r3, #1
   1facc:	7023      	strb	r3, [r4, #0]
}
   1face:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1fad0:	4a12      	ldr	r2, [pc, #72]	; (1fb1c <ticker_start_op_cb+0x90>)
   1fad2:	4915      	ldr	r1, [pc, #84]	; (1fb28 <ticker_start_op_cb+0x9c>)
   1fad4:	4813      	ldr	r0, [pc, #76]	; (1fb24 <ticker_start_op_cb+0x98>)
   1fad6:	f240 330a 	movw	r3, #778	; 0x30a
   1fada:	f007 fd2b 	bl	27534 <assert_print>
   1fade:	4040      	eors	r0, r0
   1fae0:	f380 8811 	msr	BASEPRI, r0
   1fae4:	f04f 0003 	mov.w	r0, #3
   1fae8:	df02      	svc	2
   1faea:	e7d1      	b.n	1fa90 <ticker_start_op_cb+0x4>
	LL_ASSERT(preempt_start_req != preempt_start_ack);
   1faec:	4a0b      	ldr	r2, [pc, #44]	; (1fb1c <ticker_start_op_cb+0x90>)
   1faee:	490f      	ldr	r1, [pc, #60]	; (1fb2c <ticker_start_op_cb+0xa0>)
   1faf0:	480c      	ldr	r0, [pc, #48]	; (1fb24 <ticker_start_op_cb+0x98>)
   1faf2:	f44f 7343 	mov.w	r3, #780	; 0x30c
   1faf6:	f007 fd1d 	bl	27534 <assert_print>
   1fafa:	4040      	eors	r0, r0
   1fafc:	f380 8811 	msr	BASEPRI, r0
   1fb00:	f04f 0003 	mov.w	r0, #3
   1fb04:	df02      	svc	2
	preempt_start_ack++;
   1fb06:	782b      	ldrb	r3, [r5, #0]
   1fb08:	e7c8      	b.n	1fa9c <ticker_start_op_cb+0x10>
   1fb0a:	bf00      	nop
   1fb0c:	20002d84 	.word	0x20002d84
   1fb10:	20002d83 	.word	0x20002d83
   1fb14:	20002d81 	.word	0x20002d81
   1fb18:	20002d82 	.word	0x20002d82
   1fb1c:	000301ec 	.word	0x000301ec
   1fb20:	00030284 	.word	0x00030284
   1fb24:	0002f8a0 	.word	0x0002f8a0
   1fb28:	0002fdb0 	.word	0x0002fdb0
   1fb2c:	0003025c 	.word	0x0003025c

0001fb30 <isr_race>:
	radio_status_reset();
   1fb30:	f002 b8e6 	b.w	21d00 <radio_status_reset>

0001fb34 <preempt_ticker_cb>:
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
			      uint32_t remainder, uint16_t lazy, uint8_t force,
			      void *param)
{
   1fb34:	b510      	push	{r4, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	LL_ASSERT(preempt_ack != preempt_req);
   1fb36:	4a18      	ldr	r2, [pc, #96]	; (1fb98 <preempt_ticker_cb+0x64>)
   1fb38:	4c18      	ldr	r4, [pc, #96]	; (1fb9c <preempt_ticker_cb+0x68>)
   1fb3a:	7812      	ldrb	r2, [r2, #0]
   1fb3c:	7823      	ldrb	r3, [r4, #0]
   1fb3e:	429a      	cmp	r2, r3
   1fb40:	d01b      	beq.n	1fb7a <preempt_ticker_cb+0x46>
	preempt_ack++;
   1fb42:	7821      	ldrb	r1, [r4, #0]

	mfy.param = param;
   1fb44:	4b16      	ldr	r3, [pc, #88]	; (1fba0 <preempt_ticker_cb+0x6c>)
	preempt_ack++;
   1fb46:	3101      	adds	r1, #1
   1fb48:	b2c9      	uxtb	r1, r1
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1fb4a:	2200      	movs	r2, #0
	preempt_ack++;
   1fb4c:	7021      	strb	r1, [r4, #0]
	mfy.param = param;
   1fb4e:	9903      	ldr	r1, [sp, #12]
   1fb50:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1fb52:	2001      	movs	r0, #1
   1fb54:	4611      	mov	r1, r2
   1fb56:	f7f5 fc1d 	bl	15394 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   1fb5a:	b900      	cbnz	r0, 1fb5e <preempt_ticker_cb+0x2a>
}
   1fb5c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   1fb5e:	4a11      	ldr	r2, [pc, #68]	; (1fba4 <preempt_ticker_cb+0x70>)
   1fb60:	4911      	ldr	r1, [pc, #68]	; (1fba8 <preempt_ticker_cb+0x74>)
   1fb62:	4812      	ldr	r0, [pc, #72]	; (1fbac <preempt_ticker_cb+0x78>)
   1fb64:	f240 3376 	movw	r3, #886	; 0x376
   1fb68:	f007 fce4 	bl	27534 <assert_print>
   1fb6c:	4040      	eors	r0, r0
   1fb6e:	f380 8811 	msr	BASEPRI, r0
   1fb72:	f04f 0003 	mov.w	r0, #3
   1fb76:	df02      	svc	2
}
   1fb78:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_ack != preempt_req);
   1fb7a:	4a0a      	ldr	r2, [pc, #40]	; (1fba4 <preempt_ticker_cb+0x70>)
   1fb7c:	490c      	ldr	r1, [pc, #48]	; (1fbb0 <preempt_ticker_cb+0x7c>)
   1fb7e:	480b      	ldr	r0, [pc, #44]	; (1fbac <preempt_ticker_cb+0x78>)
   1fb80:	f44f 735c 	mov.w	r3, #880	; 0x370
   1fb84:	f007 fcd6 	bl	27534 <assert_print>
   1fb88:	4040      	eors	r0, r0
   1fb8a:	f380 8811 	msr	BASEPRI, r0
   1fb8e:	f04f 0003 	mov.w	r0, #3
   1fb92:	df02      	svc	2
   1fb94:	e7d5      	b.n	1fb42 <preempt_ticker_cb+0xe>
   1fb96:	bf00      	nop
   1fb98:	20002d82 	.word	0x20002d82
   1fb9c:	20002d81 	.word	0x20002d81
   1fba0:	20000618 	.word	0x20000618
   1fba4:	000301ec 	.word	0x000301ec
   1fba8:	0002fb3c 	.word	0x0002fb3c
   1fbac:	0002f8a0 	.word	0x0002f8a0
   1fbb0:	000302a0 	.word	0x000302a0

0001fbb4 <preempt_ticker_stop>:
{
   1fbb4:	b510      	push	{r4, lr}
	if ((preempt_stop_req != preempt_stop_ack) ||
   1fbb6:	4917      	ldr	r1, [pc, #92]	; (1fc14 <preempt_ticker_stop+0x60>)
   1fbb8:	4a17      	ldr	r2, [pc, #92]	; (1fc18 <preempt_ticker_stop+0x64>)
   1fbba:	780b      	ldrb	r3, [r1, #0]
   1fbbc:	7812      	ldrb	r2, [r2, #0]
   1fbbe:	429a      	cmp	r2, r3
{
   1fbc0:	b082      	sub	sp, #8
	if ((preempt_stop_req != preempt_stop_ack) ||
   1fbc2:	d122      	bne.n	1fc0a <preempt_ticker_stop+0x56>
	    (preempt_req == preempt_ack)) {
   1fbc4:	4b15      	ldr	r3, [pc, #84]	; (1fc1c <preempt_ticker_stop+0x68>)
   1fbc6:	4a16      	ldr	r2, [pc, #88]	; (1fc20 <preempt_ticker_stop+0x6c>)
   1fbc8:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_stop_req != preempt_stop_ack) ||
   1fbca:	7812      	ldrb	r2, [r2, #0]
   1fbcc:	429a      	cmp	r2, r3
   1fbce:	d01c      	beq.n	1fc0a <preempt_ticker_stop+0x56>
	preempt_stop_req++;
   1fbd0:	7808      	ldrb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1fbd2:	4b14      	ldr	r3, [pc, #80]	; (1fc24 <preempt_ticker_stop+0x70>)
	preempt_stop_req++;
   1fbd4:	3001      	adds	r0, #1
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1fbd6:	2200      	movs	r2, #0
	preempt_stop_req++;
   1fbd8:	b2c0      	uxtb	r0, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1fbda:	9200      	str	r2, [sp, #0]
	preempt_stop_req++;
   1fbdc:	7008      	strb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1fbde:	4611      	mov	r1, r2
   1fbe0:	4610      	mov	r0, r2
   1fbe2:	f7f6 fdaf 	bl	16744 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1fbe6:	4604      	mov	r4, r0
   1fbe8:	b178      	cbz	r0, 1fc0a <preempt_ticker_stop+0x56>
   1fbea:	2802      	cmp	r0, #2
   1fbec:	d00e      	beq.n	1fc0c <preempt_ticker_stop+0x58>
   1fbee:	4a0e      	ldr	r2, [pc, #56]	; (1fc28 <preempt_ticker_stop+0x74>)
   1fbf0:	490e      	ldr	r1, [pc, #56]	; (1fc2c <preempt_ticker_stop+0x78>)
   1fbf2:	480f      	ldr	r0, [pc, #60]	; (1fc30 <preempt_ticker_stop+0x7c>)
   1fbf4:	f240 3362 	movw	r3, #866	; 0x362
   1fbf8:	f007 fc9c 	bl	27534 <assert_print>
   1fbfc:	4040      	eors	r0, r0
   1fbfe:	f380 8811 	msr	BASEPRI, r0
   1fc02:	f04f 0003 	mov.w	r0, #3
   1fc06:	df02      	svc	2
   1fc08:	e000      	b.n	1fc0c <preempt_ticker_stop+0x58>
		return TICKER_STATUS_SUCCESS;
   1fc0a:	2400      	movs	r4, #0
}
   1fc0c:	4620      	mov	r0, r4
   1fc0e:	b002      	add	sp, #8
   1fc10:	bd10      	pop	{r4, pc}
   1fc12:	bf00      	nop
   1fc14:	20002d86 	.word	0x20002d86
   1fc18:	20002d85 	.word	0x20002d85
   1fc1c:	20002d81 	.word	0x20002d81
   1fc20:	20002d82 	.word	0x20002d82
   1fc24:	0001fa35 	.word	0x0001fa35
   1fc28:	000301ec 	.word	0x000301ec
   1fc2c:	0002fc10 	.word	0x0002fc10
   1fc30:	0002f8a0 	.word	0x0002f8a0

0001fc34 <preempt_ticker_start>:
{
   1fc34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull = HDR_LLL2ULL(p->param);
   1fc38:	68cb      	ldr	r3, [r1, #12]
	preempt_anchor = p->ticks_at_expire;
   1fc3a:	f8d1 8000 	ldr.w	r8, [r1]
	ull = HDR_LLL2ULL(p->param);
   1fc3e:	681a      	ldr	r2, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   1fc40:	4b2a      	ldr	r3, [pc, #168]	; (1fcec <preempt_ticker_start+0xb8>)
   1fc42:	4f2b      	ldr	r7, [pc, #172]	; (1fcf0 <preempt_ticker_start+0xbc>)
	preempt_to = MAX(ull->ticks_active_to_start,
   1fc44:	68d6      	ldr	r6, [r2, #12]
{
   1fc46:	460d      	mov	r5, r1
   1fc48:	4604      	mov	r4, r0
	if ((preempt_start_req != preempt_start_ack) ||
   1fc4a:	7819      	ldrb	r1, [r3, #0]
	preempt_to = MAX(ull->ticks_active_to_start,
   1fc4c:	6890      	ldr	r0, [r2, #8]
   1fc4e:	6853      	ldr	r3, [r2, #4]
   1fc50:	4298      	cmp	r0, r3
   1fc52:	bf2c      	ite	cs
   1fc54:	ebc6 0600 	rsbcs	r6, r6, r0
   1fc58:	ebc6 0603 	rsbcc	r6, r6, r3
	if ((preempt_start_req != preempt_start_ack) ||
   1fc5c:	783b      	ldrb	r3, [r7, #0]
   1fc5e:	4299      	cmp	r1, r3
{
   1fc60:	b08a      	sub	sp, #40	; 0x28
	ticks_at_preempt_new = preempt_anchor + preempt_to;
   1fc62:	eb08 0906 	add.w	r9, r8, r6
	if ((preempt_start_req != preempt_start_ack) ||
   1fc66:	d033      	beq.n	1fcd0 <preempt_ticker_start+0x9c>
		if (!prev || prev->is_aborted ||
   1fc68:	2c00      	cmp	r4, #0
   1fc6a:	d03a      	beq.n	1fce2 <preempt_ticker_start+0xae>
   1fc6c:	7f23      	ldrb	r3, [r4, #28]
   1fc6e:	079b      	lsls	r3, r3, #30
   1fc70:	d437      	bmi.n	1fce2 <preempt_ticker_start+0xae>
		diff = ticks_at_preempt_new - ticks_at_preempt;
   1fc72:	f8df a080 	ldr.w	sl, [pc, #128]	; 1fcf4 <preempt_ticker_start+0xc0>
   1fc76:	f8da 0000 	ldr.w	r0, [sl]
   1fc7a:	eba9 0000 	sub.w	r0, r9, r0
		if (!prev || prev->is_aborted ||
   1fc7e:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
   1fc82:	d022      	beq.n	1fcca <preempt_ticker_start+0x96>
		preempt_ticker_stop();
   1fc84:	f7ff ff96 	bl	1fbb4 <preempt_ticker_stop>
		prev->is_aborted = 1U;
   1fc88:	7f23      	ldrb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   1fc8a:	68e1      	ldr	r1, [r4, #12]
		ticks_at_preempt = ticks_at_preempt_new;
   1fc8c:	f8ca 9000 	str.w	r9, [sl]
		prev->is_aborted = 1U;
   1fc90:	f043 0302 	orr.w	r3, r3, #2
   1fc94:	7723      	strb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   1fc96:	4620      	mov	r0, r4
   1fc98:	69a3      	ldr	r3, [r4, #24]
   1fc9a:	4798      	blx	r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1fc9c:	4b16      	ldr	r3, [pc, #88]	; (1fcf8 <preempt_ticker_start+0xc4>)
	preempt_start_req++;
   1fc9e:	783c      	ldrb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1fca0:	9600      	str	r6, [sp, #0]
   1fca2:	e9cd 3507 	strd	r3, r5, [sp, #28]
   1fca6:	4b15      	ldr	r3, [pc, #84]	; (1fcfc <preempt_ticker_start+0xc8>)
	ticks_at_preempt = ticks_at_preempt_new;
   1fca8:	f8ca 9000 	str.w	r9, [sl]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1fcac:	2200      	movs	r2, #0
	preempt_start_req++;
   1fcae:	3401      	adds	r4, #1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1fcb0:	e9cd 3505 	strd	r3, r5, [sp, #20]
	preempt_start_req++;
   1fcb4:	b2e4      	uxtb	r4, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1fcb6:	e9cd 2203 	strd	r2, r2, [sp, #12]
   1fcba:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1fcbe:	4643      	mov	r3, r8
   1fcc0:	4611      	mov	r1, r2
   1fcc2:	4610      	mov	r0, r2
	preempt_start_req++;
   1fcc4:	703c      	strb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1fcc6:	f7f6 fcb3 	bl	16630 <ticker_start>
}
   1fcca:	b00a      	add	sp, #40	; 0x28
   1fccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    (preempt_req != preempt_ack)) {
   1fcd0:	4b0b      	ldr	r3, [pc, #44]	; (1fd00 <preempt_ticker_start+0xcc>)
   1fcd2:	4a0c      	ldr	r2, [pc, #48]	; (1fd04 <preempt_ticker_start+0xd0>)
   1fcd4:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   1fcd6:	7812      	ldrb	r2, [r2, #0]
   1fcd8:	429a      	cmp	r2, r3
   1fcda:	d1c5      	bne.n	1fc68 <preempt_ticker_start+0x34>
   1fcdc:	f8df a014 	ldr.w	sl, [pc, #20]	; 1fcf4 <preempt_ticker_start+0xc0>
   1fce0:	e7dc      	b.n	1fc9c <preempt_ticker_start+0x68>
			return TICKER_STATUS_SUCCESS;
   1fce2:	2000      	movs	r0, #0
}
   1fce4:	b00a      	add	sp, #40	; 0x28
   1fce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1fcea:	bf00      	nop
   1fcec:	20002d83 	.word	0x20002d83
   1fcf0:	20002d84 	.word	0x20002d84
   1fcf4:	200024c8 	.word	0x200024c8
   1fcf8:	0001fa8d 	.word	0x0001fa8d
   1fcfc:	0001fb35 	.word	0x0001fb35
   1fd00:	20002d81 	.word	0x20002d81
   1fd04:	20002d82 	.word	0x20002d82

0001fd08 <preempt>:

static void preempt(void *param)
{
   1fd08:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   1fd0a:	4e4b      	ldr	r6, [pc, #300]	; (1fe38 <preempt+0x130>)
   1fd0c:	68b3      	ldr	r3, [r6, #8]
{
   1fd0e:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   1fd10:	b1b3      	cbz	r3, 1fd40 <preempt+0x38>
   1fd12:	6833      	ldr	r3, [r6, #0]
   1fd14:	b1a3      	cbz	r3, 1fd40 <preempt+0x38>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   1fd16:	23ff      	movs	r3, #255	; 0xff
   1fd18:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_iter(&idx);
   1fd1a:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   1fd1e:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   1fd22:	f7f8 ffab 	bl	18c7c <ull_prepare_dequeue_iter>
	if (!next) {
   1fd26:	4601      	mov	r1, r0
   1fd28:	b150      	cbz	r0, 1fd40 <preempt+0x38>
		return;
	}

	/* Find a prepare that is ready and not a resume */
	while (next && (next->is_aborted || next->is_resume)) {
   1fd2a:	7f0b      	ldrb	r3, [r1, #28]
   1fd2c:	f013 0403 	ands.w	r4, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   1fd30:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   1fd34:	d006      	beq.n	1fd44 <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   1fd36:	f7f8 ffa1 	bl	18c7c <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   1fd3a:	4601      	mov	r1, r0
   1fd3c:	2800      	cmp	r0, #0
   1fd3e:	d1f4      	bne.n	1fd2a <preempt+0x22>
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
	}
}
   1fd40:	b009      	add	sp, #36	; 0x24
   1fd42:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (next != param) {
   1fd44:	428d      	cmp	r5, r1
   1fd46:	d126      	bne.n	1fd96 <preempt+0x8e>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   1fd48:	6873      	ldr	r3, [r6, #4]
   1fd4a:	6831      	ldr	r1, [r6, #0]
   1fd4c:	68e8      	ldr	r0, [r5, #12]
   1fd4e:	aa03      	add	r2, sp, #12
   1fd50:	4798      	blx	r3
	if (!err) {
   1fd52:	4607      	mov	r7, r0
   1fd54:	b1b0      	cbz	r0, 1fd84 <preempt+0x7c>
	event.curr.abort_cb(NULL, event.curr.param);
   1fd56:	68b3      	ldr	r3, [r6, #8]
   1fd58:	6831      	ldr	r1, [r6, #0]
   1fd5a:	4620      	mov	r0, r4
   1fd5c:	4798      	blx	r3
	if (err == -EAGAIN) {
   1fd5e:	f117 0f0b 	cmn.w	r7, #11
   1fd62:	d02c      	beq.n	1fdbe <preempt+0xb6>
		LL_ASSERT(err == -ECANCELED);
   1fd64:	378c      	adds	r7, #140	; 0x8c
   1fd66:	d0eb      	beq.n	1fd40 <preempt+0x38>
   1fd68:	4a34      	ldr	r2, [pc, #208]	; (1fe3c <preempt+0x134>)
   1fd6a:	4935      	ldr	r1, [pc, #212]	; (1fe40 <preempt+0x138>)
   1fd6c:	4835      	ldr	r0, [pc, #212]	; (1fe44 <preempt+0x13c>)
   1fd6e:	f44f 7374 	mov.w	r3, #976	; 0x3d0
   1fd72:	f007 fbdf 	bl	27534 <assert_print>
   1fd76:	4040      	eors	r0, r0
   1fd78:	f380 8811 	msr	BASEPRI, r0
   1fd7c:	f04f 0003 	mov.w	r0, #3
   1fd80:	df02      	svc	2
   1fd82:	e7dd      	b.n	1fd40 <preempt+0x38>
		next->is_aborted = 1;
   1fd84:	7f2b      	ldrb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1fd86:	69aa      	ldr	r2, [r5, #24]
   1fd88:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   1fd8a:	f043 0302 	orr.w	r3, r3, #2
   1fd8e:	772b      	strb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1fd90:	4628      	mov	r0, r5
   1fd92:	4790      	blx	r2
		return;
   1fd94:	e7d4      	b.n	1fd40 <preempt+0x38>
		ret = preempt_ticker_start(NULL, next);
   1fd96:	4620      	mov	r0, r4
   1fd98:	f7ff ff4c 	bl	1fc34 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1fd9c:	f030 0302 	bics.w	r3, r0, #2
   1fda0:	d0ce      	beq.n	1fd40 <preempt+0x38>
   1fda2:	4a26      	ldr	r2, [pc, #152]	; (1fe3c <preempt+0x134>)
   1fda4:	4928      	ldr	r1, [pc, #160]	; (1fe48 <preempt+0x140>)
   1fda6:	4827      	ldr	r0, [pc, #156]	; (1fe44 <preempt+0x13c>)
   1fda8:	f44f 7367 	mov.w	r3, #924	; 0x39c
   1fdac:	f007 fbc2 	bl	27534 <assert_print>
   1fdb0:	4040      	eors	r0, r0
   1fdb2:	f380 8811 	msr	BASEPRI, r0
   1fdb6:	f04f 0003 	mov.w	r0, #3
   1fdba:	df02      	svc	2
   1fdbc:	e7c0      	b.n	1fd40 <preempt+0x38>
		iter_idx = UINT8_MAX;
   1fdbe:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1fdc0:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   1fdc4:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1fdc8:	f7f8 ff58 	bl	18c7c <ull_prepare_dequeue_iter>
		while (iter) {
   1fdcc:	b928      	cbnz	r0, 1fdda <preempt+0xd2>
   1fdce:	e013      	b.n	1fdf8 <preempt+0xf0>
			iter = ull_prepare_dequeue_iter(&iter_idx);
   1fdd0:	f10d 000b 	add.w	r0, sp, #11
   1fdd4:	f7f8 ff52 	bl	18c7c <ull_prepare_dequeue_iter>
		while (iter) {
   1fdd8:	b170      	cbz	r0, 1fdf8 <preempt+0xf0>
			if (!iter->is_aborted &&
   1fdda:	7f03      	ldrb	r3, [r0, #28]
   1fddc:	079a      	lsls	r2, r3, #30
   1fdde:	d4f7      	bmi.n	1fdd0 <preempt+0xc8>
			    event.curr.param == iter->prepare_param.param) {
   1fde0:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   1fde2:	6831      	ldr	r1, [r6, #0]
   1fde4:	4291      	cmp	r1, r2
   1fde6:	d1f3      	bne.n	1fdd0 <preempt+0xc8>
				iter->is_aborted = 1;
   1fde8:	f043 0302 	orr.w	r3, r3, #2
   1fdec:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   1fdee:	6983      	ldr	r3, [r0, #24]
   1fdf0:	4798      	blx	r3
				iter_idx = UINT8_MAX;
   1fdf2:	f88d 400b 	strb.w	r4, [sp, #11]
   1fdf6:	e7eb      	b.n	1fdd0 <preempt+0xc8>
	struct lll_prepare_param prepare_param = {0};
   1fdf8:	2100      	movs	r1, #0
	prepare_param.param = event.curr.param;
   1fdfa:	6830      	ldr	r0, [r6, #0]
	struct lll_prepare_param prepare_param = {0};
   1fdfc:	9106      	str	r1, [sp, #24]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1fdfe:	2301      	movs	r3, #1
	struct lll_prepare_param prepare_param = {0};
   1fe00:	e9cd 1104 	strd	r1, r1, [sp, #16]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1fe04:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
   1fe06:	9007      	str	r0, [sp, #28]
	event.curr.param = NULL;
   1fe08:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1fe0a:	9b03      	ldr	r3, [sp, #12]
   1fe0c:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   1fe10:	aa04      	add	r2, sp, #16
   1fe12:	f7f8 fef3 	bl	18bfc <ull_prepare_enqueue>
		LL_ASSERT(iter);
   1fe16:	2800      	cmp	r0, #0
   1fe18:	d192      	bne.n	1fd40 <preempt+0x38>
   1fe1a:	4a08      	ldr	r2, [pc, #32]	; (1fe3c <preempt+0x134>)
   1fe1c:	490b      	ldr	r1, [pc, #44]	; (1fe4c <preempt+0x144>)
   1fe1e:	4809      	ldr	r0, [pc, #36]	; (1fe44 <preempt+0x13c>)
   1fe20:	f240 33ce 	movw	r3, #974	; 0x3ce
   1fe24:	f007 fb86 	bl	27534 <assert_print>
   1fe28:	4040      	eors	r0, r0
   1fe2a:	f380 8811 	msr	BASEPRI, r0
   1fe2e:	f04f 0003 	mov.w	r0, #3
   1fe32:	df02      	svc	2
   1fe34:	e784      	b.n	1fd40 <preempt+0x38>
   1fe36:	bf00      	nop
   1fe38:	200024b4 	.word	0x200024b4
   1fe3c:	000301ec 	.word	0x000301ec
   1fe40:	000302c4 	.word	0x000302c4
   1fe44:	0002f8a0 	.word	0x0002f8a0
   1fe48:	0002fc10 	.word	0x0002fc10
   1fe4c:	000302bc 	.word	0x000302bc

0001fe50 <lll_init>:
{
   1fe50:	b510      	push	{r4, lr}
   1fe52:	4816      	ldr	r0, [pc, #88]	; (1feac <lll_init+0x5c>)
   1fe54:	f005 fc72 	bl	2573c <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1fe58:	4b15      	ldr	r3, [pc, #84]	; (1feb0 <lll_init+0x60>)
   1fe5a:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   1fe5c:	b310      	cbz	r0, 1fea4 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   1fe5e:	4b15      	ldr	r3, [pc, #84]	; (1feb4 <lll_init+0x64>)
   1fe60:	2400      	movs	r4, #0
   1fe62:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   1fe64:	f000 fafa 	bl	2045c <lll_clock_init>
	if (err < 0) {
   1fe68:	2800      	cmp	r0, #0
   1fe6a:	db1a      	blt.n	1fea2 <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   1fe6c:	4621      	mov	r1, r4
   1fe6e:	2001      	movs	r0, #1
   1fe70:	4622      	mov	r2, r4
   1fe72:	f7ef fb13 	bl	f49c <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   1fe76:	4622      	mov	r2, r4
   1fe78:	200b      	movs	r0, #11
   1fe7a:	2101      	movs	r1, #1
   1fe7c:	f7ef fb0e 	bl	f49c <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   1fe80:	4622      	mov	r2, r4
   1fe82:	4621      	mov	r1, r4
   1fe84:	2018      	movs	r0, #24
   1fe86:	f7ef fb09 	bl	f49c <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   1fe8a:	2001      	movs	r0, #1
   1fe8c:	f7ef fad4 	bl	f438 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   1fe90:	200b      	movs	r0, #11
   1fe92:	f7ef fad1 	bl	f438 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   1fe96:	2018      	movs	r0, #24
   1fe98:	f7ef face 	bl	f438 <arch_irq_enable>
	radio_setup();
   1fe9c:	f001 fe4c 	bl	21b38 <radio_setup>
	return 0;
   1fea0:	4620      	mov	r0, r4
}
   1fea2:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1fea4:	f06f 0012 	mvn.w	r0, #18
}
   1fea8:	bd10      	pop	{r4, pc}
   1feaa:	bf00      	nop
   1feac:	000302d0 	.word	0x000302d0
   1feb0:	200024b0 	.word	0x200024b0
   1feb4:	200024b4 	.word	0x200024b4

0001feb8 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   1feb8:	4a05      	ldr	r2, [pc, #20]	; (1fed0 <lll_csrand_get+0x18>)
{
   1feba:	b410      	push	{r4}
   1febc:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   1febe:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1fec0:	6884      	ldr	r4, [r0, #8]
   1fec2:	6824      	ldr	r4, [r4, #0]
   1fec4:	b28a      	uxth	r2, r1
   1fec6:	4619      	mov	r1, r3
   1fec8:	4623      	mov	r3, r4
}
   1feca:	bc10      	pop	{r4}
   1fecc:	4718      	bx	r3
   1fece:	bf00      	nop
   1fed0:	200024b0 	.word	0x200024b0

0001fed4 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1fed4:	4b08      	ldr	r3, [pc, #32]	; (1fef8 <lll_csrand_isr_get+0x24>)
{
   1fed6:	b430      	push	{r4, r5}
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1fed8:	681d      	ldr	r5, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1feda:	68ab      	ldr	r3, [r5, #8]
   1fedc:	685c      	ldr	r4, [r3, #4]
   1fede:	b13c      	cbz	r4, 1fef0 <lll_csrand_isr_get+0x1c>
   1fee0:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1fee2:	46a4      	mov	ip, r4
   1fee4:	4601      	mov	r1, r0
   1fee6:	b292      	uxth	r2, r2
   1fee8:	4628      	mov	r0, r5
   1feea:	2300      	movs	r3, #0
}
   1feec:	bc30      	pop	{r4, r5}
   1feee:	4760      	bx	ip
   1fef0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1fef4:	bc30      	pop	{r4, r5}
   1fef6:	4770      	bx	lr
   1fef8:	200024b0 	.word	0x200024b0

0001fefc <lll_rand_isr_get>:
   1fefc:	4b08      	ldr	r3, [pc, #32]	; (1ff20 <lll_rand_isr_get+0x24>)
   1fefe:	b430      	push	{r4, r5}
   1ff00:	681d      	ldr	r5, [r3, #0]
   1ff02:	68ab      	ldr	r3, [r5, #8]
   1ff04:	685c      	ldr	r4, [r3, #4]
   1ff06:	b13c      	cbz	r4, 1ff18 <lll_rand_isr_get+0x1c>
   1ff08:	460a      	mov	r2, r1
   1ff0a:	46a4      	mov	ip, r4
   1ff0c:	4601      	mov	r1, r0
   1ff0e:	b292      	uxth	r2, r2
   1ff10:	4628      	mov	r0, r5
   1ff12:	2300      	movs	r3, #0
   1ff14:	bc30      	pop	{r4, r5}
   1ff16:	4760      	bx	ip
   1ff18:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1ff1c:	bc30      	pop	{r4, r5}
   1ff1e:	4770      	bx	lr
   1ff20:	200024b0 	.word	0x200024b0

0001ff24 <lll_reset>:
}
   1ff24:	2000      	movs	r0, #0
   1ff26:	4770      	bx	lr

0001ff28 <lll_disable>:
{
   1ff28:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   1ff2a:	4604      	mov	r4, r0
{
   1ff2c:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   1ff2e:	b378      	cbz	r0, 1ff90 <lll_disable+0x68>
   1ff30:	4b23      	ldr	r3, [pc, #140]	; (1ffc0 <lll_disable+0x98>)
   1ff32:	681a      	ldr	r2, [r3, #0]
   1ff34:	4282      	cmp	r2, r0
   1ff36:	d025      	beq.n	1ff84 <lll_disable+0x5c>
		idx = UINT8_MAX;
   1ff38:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   1ff3a:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   1ff3e:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   1ff42:	f7f8 fe9b 	bl	18c7c <ull_prepare_dequeue_iter>
		while (next) {
   1ff46:	b938      	cbnz	r0, 1ff58 <lll_disable+0x30>
   1ff48:	e01a      	b.n	1ff80 <lll_disable+0x58>
			    (!param || (param == next->prepare_param.param))) {
   1ff4a:	428c      	cmp	r4, r1
   1ff4c:	d00a      	beq.n	1ff64 <lll_disable+0x3c>
			next = ull_prepare_dequeue_iter(&idx);
   1ff4e:	f10d 0007 	add.w	r0, sp, #7
   1ff52:	f7f8 fe93 	bl	18c7c <ull_prepare_dequeue_iter>
		while (next) {
   1ff56:	b198      	cbz	r0, 1ff80 <lll_disable+0x58>
			if (!next->is_aborted &&
   1ff58:	7f03      	ldrb	r3, [r0, #28]
   1ff5a:	079b      	lsls	r3, r3, #30
   1ff5c:	d4f7      	bmi.n	1ff4e <lll_disable+0x26>
			    (!param || (param == next->prepare_param.param))) {
   1ff5e:	68c1      	ldr	r1, [r0, #12]
			if (!next->is_aborted &&
   1ff60:	2c00      	cmp	r4, #0
   1ff62:	d1f2      	bne.n	1ff4a <lll_disable+0x22>
				next->is_aborted = 1;
   1ff64:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   1ff66:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   1ff68:	f043 0302 	orr.w	r3, r3, #2
   1ff6c:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   1ff6e:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   1ff70:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   1ff74:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   1ff78:	f7f8 fe80 	bl	18c7c <ull_prepare_dequeue_iter>
		while (next) {
   1ff7c:	2800      	cmp	r0, #0
   1ff7e:	d1eb      	bne.n	1ff58 <lll_disable+0x30>
}
   1ff80:	b003      	add	sp, #12
   1ff82:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   1ff84:	689b      	ldr	r3, [r3, #8]
   1ff86:	b16b      	cbz	r3, 1ffa4 <lll_disable+0x7c>
   1ff88:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   1ff8a:	2000      	movs	r0, #0
   1ff8c:	4798      	blx	r3
   1ff8e:	e7d3      	b.n	1ff38 <lll_disable+0x10>
		if (event.curr.abort_cb && event.curr.param) {
   1ff90:	4a0b      	ldr	r2, [pc, #44]	; (1ffc0 <lll_disable+0x98>)
   1ff92:	6893      	ldr	r3, [r2, #8]
   1ff94:	2b00      	cmp	r3, #0
   1ff96:	d0cf      	beq.n	1ff38 <lll_disable+0x10>
   1ff98:	6811      	ldr	r1, [r2, #0]
   1ff9a:	2900      	cmp	r1, #0
   1ff9c:	d0cc      	beq.n	1ff38 <lll_disable+0x10>
			event.curr.abort_cb(NULL, event.curr.param);
   1ff9e:	2000      	movs	r0, #0
   1ffa0:	4798      	blx	r3
   1ffa2:	e7c9      	b.n	1ff38 <lll_disable+0x10>
			LL_ASSERT(!param);
   1ffa4:	4a07      	ldr	r2, [pc, #28]	; (1ffc4 <lll_disable+0x9c>)
   1ffa6:	4908      	ldr	r1, [pc, #32]	; (1ffc8 <lll_disable+0xa0>)
   1ffa8:	4808      	ldr	r0, [pc, #32]	; (1ffcc <lll_disable+0xa4>)
   1ffaa:	23fd      	movs	r3, #253	; 0xfd
   1ffac:	f007 fac2 	bl	27534 <assert_print>
   1ffb0:	4040      	eors	r0, r0
   1ffb2:	f380 8811 	msr	BASEPRI, r0
   1ffb6:	f04f 0003 	mov.w	r0, #3
   1ffba:	df02      	svc	2
   1ffbc:	e7bc      	b.n	1ff38 <lll_disable+0x10>
   1ffbe:	bf00      	nop
   1ffc0:	200024b4 	.word	0x200024b4
   1ffc4:	000301ec 	.word	0x000301ec
   1ffc8:	000302d4 	.word	0x000302d4
   1ffcc:	0002f8a0 	.word	0x0002f8a0

0001ffd0 <lll_prepare_done>:
}
   1ffd0:	2000      	movs	r0, #0
   1ffd2:	4770      	bx	lr

0001ffd4 <lll_done>:
{
   1ffd4:	b538      	push	{r3, r4, r5, lr}
   1ffd6:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   1ffd8:	f7f8 fe42 	bl	18c60 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   1ffdc:	b154      	cbz	r4, 1fff4 <lll_done+0x20>
   1ffde:	b310      	cbz	r0, 20026 <lll_done+0x52>
			ull = HDR_LLL2ULL(param);
   1ffe0:	6824      	ldr	r4, [r4, #0]
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   1ffe2:	2000      	movs	r0, #0
   1ffe4:	f7f8 fe6a 	bl	18cbc <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   1ffe8:	4620      	mov	r0, r4
   1ffea:	f7f8 fecd 	bl	18d88 <ull_event_done>
	LL_ASSERT(evdone);
   1ffee:	b158      	cbz	r0, 20008 <lll_done+0x34>
}
   1fff0:	2000      	movs	r0, #0
   1fff2:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   1fff4:	4d1a      	ldr	r5, [pc, #104]	; (20060 <lll_done+0x8c>)
   1fff6:	68ab      	ldr	r3, [r5, #8]
   1fff8:	b31b      	cbz	r3, 20042 <lll_done+0x6e>
		param = event.curr.param;
   1fffa:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   1fffc:	2300      	movs	r3, #0
   1fffe:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   20000:	602b      	str	r3, [r5, #0]
		if (param) {
   20002:	2c00      	cmp	r4, #0
   20004:	d1ec      	bne.n	1ffe0 <lll_done+0xc>
   20006:	e7ec      	b.n	1ffe2 <lll_done+0xe>
	LL_ASSERT(evdone);
   20008:	4a16      	ldr	r2, [pc, #88]	; (20064 <lll_done+0x90>)
   2000a:	4917      	ldr	r1, [pc, #92]	; (20068 <lll_done+0x94>)
   2000c:	4817      	ldr	r0, [pc, #92]	; (2006c <lll_done+0x98>)
   2000e:	f240 136d 	movw	r3, #365	; 0x16d
   20012:	f007 fa8f 	bl	27534 <assert_print>
   20016:	4040      	eors	r0, r0
   20018:	f380 8811 	msr	BASEPRI, r0
   2001c:	f04f 0003 	mov.w	r0, #3
   20020:	df02      	svc	2
}
   20022:	2000      	movs	r0, #0
   20024:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   20026:	4a0f      	ldr	r2, [pc, #60]	; (20064 <lll_done+0x90>)
   20028:	4911      	ldr	r1, [pc, #68]	; (20070 <lll_done+0x9c>)
   2002a:	4810      	ldr	r0, [pc, #64]	; (2006c <lll_done+0x98>)
   2002c:	f240 1337 	movw	r3, #311	; 0x137
   20030:	f007 fa80 	bl	27534 <assert_print>
   20034:	4040      	eors	r0, r0
   20036:	f380 8811 	msr	BASEPRI, r0
   2003a:	f04f 0003 	mov.w	r0, #3
   2003e:	df02      	svc	2
   20040:	e7ce      	b.n	1ffe0 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   20042:	4a08      	ldr	r2, [pc, #32]	; (20064 <lll_done+0x90>)
   20044:	490b      	ldr	r1, [pc, #44]	; (20074 <lll_done+0xa0>)
   20046:	4809      	ldr	r0, [pc, #36]	; (2006c <lll_done+0x98>)
   20048:	f240 133d 	movw	r3, #317	; 0x13d
   2004c:	f007 fa72 	bl	27534 <assert_print>
   20050:	4040      	eors	r0, r0
   20052:	f380 8811 	msr	BASEPRI, r0
   20056:	f04f 0003 	mov.w	r0, #3
   2005a:	df02      	svc	2
   2005c:	e7cd      	b.n	1fffa <lll_done+0x26>
   2005e:	bf00      	nop
   20060:	200024b4 	.word	0x200024b4
   20064:	000301ec 	.word	0x000301ec
   20068:	00030300 	.word	0x00030300
   2006c:	0002f8a0 	.word	0x0002f8a0
   20070:	000302dc 	.word	0x000302dc
   20074:	000302ec 	.word	0x000302ec

00020078 <lll_is_abort_cb>:
}
   20078:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   2007c:	4770      	bx	lr
   2007e:	bf00      	nop

00020080 <lll_event_offset_get>:
		return MAX(ull->ticks_active_to_start,
   20080:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   20084:	2a00      	cmp	r2, #0
   20086:	db04      	blt.n	20092 <lll_event_offset_get+0x12>
		return MAX(ull->ticks_active_to_start,
   20088:	429a      	cmp	r2, r3
   2008a:	bf38      	it	cc
   2008c:	461a      	movcc	r2, r3
   2008e:	4610      	mov	r0, r2
}
   20090:	4770      	bx	lr
		return MAX(ull->ticks_active_to_start,
   20092:	68c0      	ldr	r0, [r0, #12]
   20094:	4298      	cmp	r0, r3
   20096:	bf38      	it	cc
   20098:	4618      	movcc	r0, r3
   2009a:	4770      	bx	lr

0002009c <lll_preempt_calc>:
{
   2009c:	b510      	push	{r4, lr}
   2009e:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   200a0:	f7f6 fb92 	bl	167c8 <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   200a4:	1b00      	subs	r0, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   200a6:	0203      	lsls	r3, r0, #8
   200a8:	d405      	bmi.n	200b6 <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   200aa:	3003      	adds	r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   200ac:	2809      	cmp	r0, #9
   200ae:	bf94      	ite	ls
   200b0:	2000      	movls	r0, #0
   200b2:	2001      	movhi	r0, #1
}
   200b4:	bd10      	pop	{r4, pc}
		return 0;
   200b6:	2000      	movs	r0, #0
}
   200b8:	bd10      	pop	{r4, pc}
   200ba:	bf00      	nop

000200bc <lll_chan_set>:
	switch (chan) {
   200bc:	2826      	cmp	r0, #38	; 0x26
{
   200be:	b510      	push	{r4, lr}
   200c0:	4604      	mov	r4, r0
	switch (chan) {
   200c2:	d01c      	beq.n	200fe <lll_chan_set+0x42>
   200c4:	2827      	cmp	r0, #39	; 0x27
   200c6:	d012      	beq.n	200ee <lll_chan_set+0x32>
   200c8:	2825      	cmp	r0, #37	; 0x25
   200ca:	d008      	beq.n	200de <lll_chan_set+0x22>
		if (chan < 11) {
   200cc:	280a      	cmp	r0, #10
   200ce:	d91e      	bls.n	2010e <lll_chan_set+0x52>
		} else if (chan < 40) {
   200d0:	2827      	cmp	r0, #39	; 0x27
   200d2:	d821      	bhi.n	20118 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   200d4:	3003      	adds	r0, #3
   200d6:	0040      	lsls	r0, r0, #1
   200d8:	f001 fd8a 	bl	21bf0 <radio_freq_chan_set>
   200dc:	e002      	b.n	200e4 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   200de:	2002      	movs	r0, #2
   200e0:	f001 fd86 	bl	21bf0 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   200e4:	4620      	mov	r0, r4
}
   200e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   200ea:	f001 bd87 	b.w	21bfc <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   200ee:	2050      	movs	r0, #80	; 0x50
   200f0:	f001 fd7e 	bl	21bf0 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   200f4:	4620      	mov	r0, r4
}
   200f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   200fa:	f001 bd7f 	b.w	21bfc <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   200fe:	201a      	movs	r0, #26
   20100:	f001 fd76 	bl	21bf0 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   20104:	4620      	mov	r0, r4
}
   20106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   2010a:	f001 bd77 	b.w	21bfc <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   2010e:	3002      	adds	r0, #2
   20110:	0040      	lsls	r0, r0, #1
   20112:	f001 fd6d 	bl	21bf0 <radio_freq_chan_set>
   20116:	e7e5      	b.n	200e4 <lll_chan_set+0x28>
			LL_ASSERT(0);
   20118:	4a06      	ldr	r2, [pc, #24]	; (20134 <lll_chan_set+0x78>)
   2011a:	4907      	ldr	r1, [pc, #28]	; (20138 <lll_chan_set+0x7c>)
   2011c:	4807      	ldr	r0, [pc, #28]	; (2013c <lll_chan_set+0x80>)
   2011e:	f240 13df 	movw	r3, #479	; 0x1df
   20122:	f007 fa07 	bl	27534 <assert_print>
   20126:	4040      	eors	r0, r0
   20128:	f380 8811 	msr	BASEPRI, r0
   2012c:	f04f 0003 	mov.w	r0, #3
   20130:	df02      	svc	2
   20132:	e7d7      	b.n	200e4 <lll_chan_set+0x28>
   20134:	000301ec 	.word	0x000301ec
   20138:	0002f900 	.word	0x0002f900
   2013c:	0002f8a0 	.word	0x0002f8a0

00020140 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   20140:	f001 bdbc 	b.w	21cbc <radio_rx_ready_delay_get>

00020144 <lll_isr_tx_status_reset>:
{
   20144:	b508      	push	{r3, lr}
	radio_status_reset();
   20146:	f001 fddb 	bl	21d00 <radio_status_reset>
}
   2014a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   2014e:	f001 bf29 	b.w	21fa4 <radio_tmr_status_reset>
   20152:	bf00      	nop

00020154 <lll_isr_rx_status_reset>:
{
   20154:	b508      	push	{r3, lr}
	radio_status_reset();
   20156:	f001 fdd3 	bl	21d00 <radio_status_reset>
	radio_tmr_status_reset();
   2015a:	f001 ff23 	bl	21fa4 <radio_tmr_status_reset>
}
   2015e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   20162:	f001 becb 	b.w	21efc <radio_rssi_status_reset>
   20166:	bf00      	nop

00020168 <lll_isr_status_reset>:
{
   20168:	b508      	push	{r3, lr}
	radio_status_reset();
   2016a:	f001 fdc9 	bl	21d00 <radio_status_reset>
	radio_tmr_status_reset();
   2016e:	f001 ff19 	bl	21fa4 <radio_tmr_status_reset>
	radio_filter_status_reset();
   20172:	f001 feff 	bl	21f74 <radio_filter_status_reset>
	radio_ar_status_reset();
   20176:	f002 f8df 	bl	22338 <radio_ar_status_reset>
}
   2017a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   2017e:	f001 bebd 	b.w	21efc <radio_rssi_status_reset>
   20182:	bf00      	nop

00020184 <lll_isr_cleanup>:
{
   20184:	b508      	push	{r3, lr}
   20186:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   20188:	4815      	ldr	r0, [pc, #84]	; (201e0 <lll_isr_cleanup+0x5c>)
   2018a:	f001 fcb5 	bl	21af8 <radio_isr_set>
	if (!radio_is_idle()) {
   2018e:	f001 fdd7 	bl	21d40 <radio_is_idle>
   20192:	b150      	cbz	r0, 201aa <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   20194:	f001 ffaa 	bl	220ec <radio_tmr_stop>
	err = lll_hfclock_off();
   20198:	f000 f9a4 	bl	204e4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   2019c:	2800      	cmp	r0, #0
   2019e:	db0c      	blt.n	201ba <lll_isr_cleanup+0x36>
}
   201a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   201a4:	2000      	movs	r0, #0
   201a6:	f7ff bf15 	b.w	1ffd4 <lll_done>
		radio_disable();
   201aa:	f001 fd95 	bl	21cd8 <radio_disable>
	radio_tmr_stop();
   201ae:	f001 ff9d 	bl	220ec <radio_tmr_stop>
	err = lll_hfclock_off();
   201b2:	f000 f997 	bl	204e4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   201b6:	2800      	cmp	r0, #0
   201b8:	daf2      	bge.n	201a0 <lll_isr_cleanup+0x1c>
   201ba:	4a0a      	ldr	r2, [pc, #40]	; (201e4 <lll_isr_cleanup+0x60>)
   201bc:	490a      	ldr	r1, [pc, #40]	; (201e8 <lll_isr_cleanup+0x64>)
   201be:	480b      	ldr	r0, [pc, #44]	; (201ec <lll_isr_cleanup+0x68>)
   201c0:	f240 2342 	movw	r3, #578	; 0x242
   201c4:	f007 f9b6 	bl	27534 <assert_print>
   201c8:	4040      	eors	r0, r0
   201ca:	f380 8811 	msr	BASEPRI, r0
   201ce:	f04f 0003 	mov.w	r0, #3
   201d2:	df02      	svc	2
	lll_done(NULL);
   201d4:	2000      	movs	r0, #0
}
   201d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   201da:	f7ff befb 	b.w	1ffd4 <lll_done>
   201de:	bf00      	nop
   201e0:	0001fb31 	.word	0x0001fb31
   201e4:	000301ec 	.word	0x000301ec
   201e8:	00030308 	.word	0x00030308
   201ec:	0002f8a0 	.word	0x0002f8a0

000201f0 <lll_isr_abort>:
{
   201f0:	b510      	push	{r4, lr}
   201f2:	4604      	mov	r4, r0
	radio_status_reset();
   201f4:	f001 fd84 	bl	21d00 <radio_status_reset>
	radio_tmr_status_reset();
   201f8:	f001 fed4 	bl	21fa4 <radio_tmr_status_reset>
	radio_filter_status_reset();
   201fc:	f001 feba 	bl	21f74 <radio_filter_status_reset>
	radio_ar_status_reset();
   20200:	f002 f89a 	bl	22338 <radio_ar_status_reset>
	radio_rssi_status_reset();
   20204:	f001 fe7a 	bl	21efc <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   20208:	4620      	mov	r0, r4
}
   2020a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   2020e:	f7ff bfb9 	b.w	20184 <lll_isr_cleanup>
   20212:	bf00      	nop

00020214 <lll_isr_early_abort>:
{
   20214:	b508      	push	{r3, lr}
   20216:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   20218:	4813      	ldr	r0, [pc, #76]	; (20268 <lll_isr_early_abort+0x54>)
   2021a:	f001 fc6d 	bl	21af8 <radio_isr_set>
	if (!radio_is_idle()) {
   2021e:	f001 fd8f 	bl	21d40 <radio_is_idle>
   20222:	b140      	cbz	r0, 20236 <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   20224:	f000 f95e 	bl	204e4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   20228:	2800      	cmp	r0, #0
   2022a:	db0a      	blt.n	20242 <lll_isr_early_abort+0x2e>
}
   2022c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   20230:	2000      	movs	r0, #0
   20232:	f7ff becf 	b.w	1ffd4 <lll_done>
		radio_disable();
   20236:	f001 fd4f 	bl	21cd8 <radio_disable>
	err = lll_hfclock_off();
   2023a:	f000 f953 	bl	204e4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   2023e:	2800      	cmp	r0, #0
   20240:	daf4      	bge.n	2022c <lll_isr_early_abort+0x18>
   20242:	4a0a      	ldr	r2, [pc, #40]	; (2026c <lll_isr_early_abort+0x58>)
   20244:	490a      	ldr	r1, [pc, #40]	; (20270 <lll_isr_early_abort+0x5c>)
   20246:	480b      	ldr	r0, [pc, #44]	; (20274 <lll_isr_early_abort+0x60>)
   20248:	f240 2351 	movw	r3, #593	; 0x251
   2024c:	f007 f972 	bl	27534 <assert_print>
   20250:	4040      	eors	r0, r0
   20252:	f380 8811 	msr	BASEPRI, r0
   20256:	f04f 0003 	mov.w	r0, #3
   2025a:	df02      	svc	2
	lll_done(NULL);
   2025c:	2000      	movs	r0, #0
}
   2025e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   20262:	f7ff beb7 	b.w	1ffd4 <lll_done>
   20266:	bf00      	nop
   20268:	0001fb31 	.word	0x0001fb31
   2026c:	000301ec 	.word	0x000301ec
   20270:	00030308 	.word	0x00030308
   20274:	0002f8a0 	.word	0x0002f8a0

00020278 <lll_prepare_resolve>:
{
   20278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2027c:	b084      	sub	sp, #16
   2027e:	4606      	mov	r6, r0
   20280:	461d      	mov	r5, r3
	p = ull_prepare_dequeue_iter(&idx);
   20282:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   20286:	23ff      	movs	r3, #255	; 0xff
{
   20288:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   2028c:	f88d 300f 	strb.w	r3, [sp, #15]
{
   20290:	460f      	mov	r7, r1
   20292:	4690      	mov	r8, r2
	p = ull_prepare_dequeue_iter(&idx);
   20294:	f7f8 fcf2 	bl	18c7c <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   20298:	4604      	mov	r4, r0
   2029a:	b920      	cbnz	r0, 202a6 <lll_prepare_resolve+0x2e>
   2029c:	e032      	b.n	20304 <lll_prepare_resolve+0x8c>
		p = ull_prepare_dequeue_iter(&idx);
   2029e:	f7f8 fced 	bl	18c7c <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   202a2:	4604      	mov	r4, r0
   202a4:	b370      	cbz	r0, 20304 <lll_prepare_resolve+0x8c>
   202a6:	f894 c01c 	ldrb.w	ip, [r4, #28]
   202aa:	f01c 0f03 	tst.w	ip, #3
		p = ull_prepare_dequeue_iter(&idx);
   202ae:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   202b2:	d1f4      	bne.n	2029e <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   202b4:	f8df a130 	ldr.w	sl, [pc, #304]	; 203e8 <lll_prepare_resolve+0x170>
	if ((!is_dequeue && !is_done_sync()) ||
   202b8:	f8da 3008 	ldr.w	r3, [sl, #8]
   202bc:	bb4b      	cbnz	r3, 20312 <lll_prepare_resolve+0x9a>
	    (p && is_resume)) {
   202be:	f1b9 0f00 	cmp.w	r9, #0
   202c2:	d048      	beq.n	20356 <lll_prepare_resolve+0xde>
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   202c4:	f8cd 9000 	str.w	r9, [sp]
   202c8:	4643      	mov	r3, r8
   202ca:	462a      	mov	r2, r5
   202cc:	4639      	mov	r1, r7
   202ce:	4630      	mov	r0, r6
   202d0:	f7f8 fc94 	bl	18bfc <ull_prepare_enqueue>
		LL_ASSERT(next);
   202d4:	b980      	cbnz	r0, 202f8 <lll_prepare_resolve+0x80>
   202d6:	4a45      	ldr	r2, [pc, #276]	; (203ec <lll_prepare_resolve+0x174>)
   202d8:	4945      	ldr	r1, [pc, #276]	; (203f0 <lll_prepare_resolve+0x178>)
   202da:	4846      	ldr	r0, [pc, #280]	; (203f4 <lll_prepare_resolve+0x17c>)
   202dc:	f240 238d 	movw	r3, #653	; 0x28d
   202e0:	f007 f928 	bl	27534 <assert_print>
   202e4:	4040      	eors	r0, r0
   202e6:	f380 8811 	msr	BASEPRI, r0
   202ea:	f04f 0003 	mov.w	r0, #3
   202ee:	df02      	svc	2
   202f0:	2000      	movs	r0, #0
		if (is_resume) {
   202f2:	f1b9 0f00 	cmp.w	r9, #0
   202f6:	d019      	beq.n	2032c <lll_prepare_resolve+0xb4>
		return -EINPROGRESS;
   202f8:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   202fc:	4620      	mov	r0, r4
   202fe:	b004      	add	sp, #16
   20300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    event.curr.abort_cb ||
   20304:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 203e8 <lll_prepare_resolve+0x170>
	if ((!is_dequeue && !is_done_sync()) ||
   20308:	f8da 3008 	ldr.w	r3, [sl, #8]
   2030c:	2b00      	cmp	r3, #0
   2030e:	d031      	beq.n	20374 <lll_prepare_resolve+0xfc>
   20310:	2400      	movs	r4, #0
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   20312:	f8cd 9000 	str.w	r9, [sp]
   20316:	4643      	mov	r3, r8
   20318:	462a      	mov	r2, r5
   2031a:	4639      	mov	r1, r7
   2031c:	4630      	mov	r0, r6
   2031e:	f7f8 fc6d 	bl	18bfc <ull_prepare_enqueue>
		LL_ASSERT(next);
   20322:	2800      	cmp	r0, #0
   20324:	d0d7      	beq.n	202d6 <lll_prepare_resolve+0x5e>
		if (is_resume) {
   20326:	f1b9 0f00 	cmp.w	r9, #0
   2032a:	d1e5      	bne.n	202f8 <lll_prepare_resolve+0x80>
		ret  = preempt_ticker_start(p, next);
   2032c:	4601      	mov	r1, r0
   2032e:	4620      	mov	r0, r4
   20330:	f7ff fc80 	bl	1fc34 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   20334:	f030 0302 	bics.w	r3, r0, #2
   20338:	d0de      	beq.n	202f8 <lll_prepare_resolve+0x80>
   2033a:	4a2c      	ldr	r2, [pc, #176]	; (203ec <lll_prepare_resolve+0x174>)
   2033c:	492e      	ldr	r1, [pc, #184]	; (203f8 <lll_prepare_resolve+0x180>)
   2033e:	482d      	ldr	r0, [pc, #180]	; (203f4 <lll_prepare_resolve+0x17c>)
   20340:	f44f 7326 	mov.w	r3, #664	; 0x298
   20344:	f007 f8f6 	bl	27534 <assert_print>
   20348:	4040      	eors	r0, r0
   2034a:	f380 8811 	msr	BASEPRI, r0
   2034e:	f04f 0003 	mov.w	r0, #3
   20352:	df02      	svc	2
   20354:	e7d0      	b.n	202f8 <lll_prepare_resolve+0x80>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   20356:	42ac      	cmp	r4, r5
   20358:	d00c      	beq.n	20374 <lll_prepare_resolve+0xfc>
   2035a:	4a24      	ldr	r2, [pc, #144]	; (203ec <lll_prepare_resolve+0x174>)
   2035c:	4927      	ldr	r1, [pc, #156]	; (203fc <lll_prepare_resolve+0x184>)
   2035e:	4825      	ldr	r0, [pc, #148]	; (203f4 <lll_prepare_resolve+0x17c>)
   20360:	f240 23be 	movw	r3, #702	; 0x2be
   20364:	f007 f8e6 	bl	27534 <assert_print>
   20368:	4040      	eors	r0, r0
   2036a:	f380 8811 	msr	BASEPRI, r0
   2036e:	f04f 0003 	mov.w	r0, #3
   20372:	df02      	svc	2
	event.curr.param = prepare_param->param;
   20374:	68eb      	ldr	r3, [r5, #12]
   20376:	f8ca 3000 	str.w	r3, [sl]
	event.curr.abort_cb = abort_cb;
   2037a:	e9ca 6701 	strd	r6, r7, [sl, #4]
	err = prepare_cb(prepare_param);
   2037e:	4628      	mov	r0, r5
   20380:	47c0      	blx	r8
   20382:	4604      	mov	r4, r0
	ret = preempt_ticker_stop();
   20384:	f7ff fc16 	bl	1fbb4 <preempt_ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   20388:	f030 0302 	bics.w	r3, r0, #2
   2038c:	d11e      	bne.n	203cc <lll_prepare_resolve+0x154>
		p = ull_prepare_dequeue_iter(&idx);
   2038e:	f10d 000f 	add.w	r0, sp, #15
   20392:	f7f8 fc73 	bl	18c7c <ull_prepare_dequeue_iter>
		if (!p) {
   20396:	2800      	cmp	r0, #0
   20398:	d0b0      	beq.n	202fc <lll_prepare_resolve+0x84>
	} while (p->is_aborted || p->is_resume);
   2039a:	7f03      	ldrb	r3, [r0, #28]
   2039c:	f013 0303 	ands.w	r3, r3, #3
   203a0:	d1f5      	bne.n	2038e <lll_prepare_resolve+0x116>
	ret = preempt_ticker_start(NULL, p);
   203a2:	4601      	mov	r1, r0
   203a4:	4618      	mov	r0, r3
   203a6:	f7ff fc45 	bl	1fc34 <preempt_ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   203aa:	f030 0302 	bics.w	r3, r0, #2
   203ae:	d0a5      	beq.n	202fc <lll_prepare_resolve+0x84>
   203b0:	4a0e      	ldr	r2, [pc, #56]	; (203ec <lll_prepare_resolve+0x174>)
   203b2:	4911      	ldr	r1, [pc, #68]	; (203f8 <lll_prepare_resolve+0x180>)
   203b4:	480f      	ldr	r0, [pc, #60]	; (203f4 <lll_prepare_resolve+0x17c>)
   203b6:	f44f 7336 	mov.w	r3, #728	; 0x2d8
   203ba:	f007 f8bb 	bl	27534 <assert_print>
   203be:	4040      	eors	r0, r0
   203c0:	f380 8811 	msr	BASEPRI, r0
   203c4:	f04f 0003 	mov.w	r0, #3
   203c8:	df02      	svc	2
   203ca:	e797      	b.n	202fc <lll_prepare_resolve+0x84>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   203cc:	4a07      	ldr	r2, [pc, #28]	; (203ec <lll_prepare_resolve+0x174>)
   203ce:	490a      	ldr	r1, [pc, #40]	; (203f8 <lll_prepare_resolve+0x180>)
   203d0:	4808      	ldr	r0, [pc, #32]	; (203f4 <lll_prepare_resolve+0x17c>)
   203d2:	f240 23cb 	movw	r3, #715	; 0x2cb
   203d6:	f007 f8ad 	bl	27534 <assert_print>
   203da:	4040      	eors	r0, r0
   203dc:	f380 8811 	msr	BASEPRI, r0
   203e0:	f04f 0003 	mov.w	r0, #3
   203e4:	df02      	svc	2
   203e6:	e7d2      	b.n	2038e <lll_prepare_resolve+0x116>
   203e8:	200024b4 	.word	0x200024b4
   203ec:	000301ec 	.word	0x000301ec
   203f0:	00030314 	.word	0x00030314
   203f4:	0002f8a0 	.word	0x0002f8a0
   203f8:	0002fc10 	.word	0x0002fc10
   203fc:	0003031c 	.word	0x0003031c

00020400 <clock_ready>:
	z_impl_k_sem_give(sem);
   20400:	f101 0010 	add.w	r0, r1, #16
   20404:	f005 bcb8 	b.w	25d78 <z_impl_k_sem_give>

00020408 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   20408:	b570      	push	{r4, r5, r6, lr}
   2040a:	4605      	mov	r5, r0
   2040c:	b08a      	sub	sp, #40	; 0x28
   2040e:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   20410:	2201      	movs	r2, #1
   20412:	2100      	movs	r1, #0
   20414:	a804      	add	r0, sp, #16
   20416:	f00e f99f 	bl	2e758 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   2041a:	4b0f      	ldr	r3, [pc, #60]	; (20458 <blocking_on+0x50>)
   2041c:	9301      	str	r3, [sp, #4]
   2041e:	2600      	movs	r6, #0
   20420:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   20422:	4669      	mov	r1, sp
   20424:	4628      	mov	r0, r5
   20426:	9603      	str	r6, [sp, #12]
   20428:	9302      	str	r3, [sp, #8]
   2042a:	f006 fde9 	bl	27000 <onoff_request>
	if (err < 0) {
   2042e:	2800      	cmp	r0, #0
   20430:	db10      	blt.n	20454 <blocking_on+0x4c>
   20432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   20436:	4631      	mov	r1, r6
   20438:	f240 30e7 	movw	r0, #999	; 0x3e7
   2043c:	fbe4 0103 	umlal	r0, r1, r4, r3
   20440:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20444:	2300      	movs	r3, #0
   20446:	f7eb ff5b 	bl	c300 <__aeabi_uldivmod>
   2044a:	4602      	mov	r2, r0
   2044c:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   2044e:	a804      	add	r0, sp, #16
   20450:	f005 fcb8 	bl	25dc4 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   20454:	b00a      	add	sp, #40	; 0x28
   20456:	bd70      	pop	{r4, r5, r6, pc}
   20458:	00020401 	.word	0x00020401

0002045c <lll_clock_init>:

int lll_clock_init(void)
{
   2045c:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   2045e:	2001      	movs	r0, #1
   20460:	f003 f940 	bl	236e4 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   20464:	4904      	ldr	r1, [pc, #16]	; (20478 <lll_clock_init+0x1c>)
   20466:	2300      	movs	r3, #0
   20468:	2401      	movs	r4, #1
   2046a:	608c      	str	r4, [r1, #8]
   2046c:	604b      	str	r3, [r1, #4]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   2046e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20472:	60cb      	str	r3, [r1, #12]
	return onoff_request(mgr, &lf_cli);
   20474:	f006 bdc4 	b.w	27000 <onoff_request>
   20478:	200024d0 	.word	0x200024d0

0002047c <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   2047c:	4b0c      	ldr	r3, [pc, #48]	; (204b0 <lll_clock_wait+0x34>)
   2047e:	781a      	ldrb	r2, [r3, #0]
   20480:	b10a      	cbz	r2, 20486 <lll_clock_wait+0xa>
		return 0;
   20482:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   20484:	4770      	bx	lr
{
   20486:	b510      	push	{r4, lr}
	done = true;
   20488:	2001      	movs	r0, #1
   2048a:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   2048c:	f003 f92a 	bl	236e4 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   20490:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   20494:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   20496:	f7ff ffb7 	bl	20408 <blocking_on>
	if (err) {
   2049a:	b938      	cbnz	r0, 204ac <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   2049c:	4620      	mov	r0, r4
   2049e:	f006 fdf8 	bl	27092 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   204a2:	2802      	cmp	r0, #2
		return 0;
   204a4:	bf0c      	ite	eq
   204a6:	2000      	moveq	r0, #0
		return -EIO;
   204a8:	f06f 0004 	mvnne.w	r0, #4
}
   204ac:	bd10      	pop	{r4, pc}
   204ae:	bf00      	nop
   204b0:	20002d87 	.word	0x20002d87

000204b4 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   204b4:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   204b6:	4b0a      	ldr	r3, [pc, #40]	; (204e0 <lll_hfclock_on+0x2c>)
   204b8:	f3bf 8f5b 	dmb	ish
   204bc:	e853 2f00 	ldrex	r2, [r3]
   204c0:	1c51      	adds	r1, r2, #1
   204c2:	e843 1000 	strex	r0, r1, [r3]
   204c6:	2800      	cmp	r0, #0
   204c8:	d1f8      	bne.n	204bc <lll_hfclock_on+0x8>
   204ca:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   204ce:	2a00      	cmp	r2, #0
   204d0:	dd01      	ble.n	204d6 <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   204d2:	2000      	movs	r0, #0
   204d4:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   204d6:	f003 f90d 	bl	236f4 <z_nrf_clock_bt_ctlr_hf_request>
}
   204da:	2000      	movs	r0, #0
   204dc:	bd08      	pop	{r3, pc}
   204de:	bf00      	nop
   204e0:	200024cc 	.word	0x200024cc

000204e4 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   204e4:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   204e6:	4b0d      	ldr	r3, [pc, #52]	; (2051c <lll_hfclock_off+0x38>)
   204e8:	681a      	ldr	r2, [r3, #0]
   204ea:	2a00      	cmp	r2, #0
   204ec:	dd12      	ble.n	20514 <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   204ee:	f3bf 8f5b 	dmb	ish
   204f2:	e853 2f00 	ldrex	r2, [r3]
   204f6:	1e51      	subs	r1, r2, #1
   204f8:	e843 1000 	strex	r0, r1, [r3]
   204fc:	2800      	cmp	r0, #0
   204fe:	d1f8      	bne.n	204f2 <lll_hfclock_off+0xe>
   20500:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   20504:	2a01      	cmp	r2, #1
   20506:	dd01      	ble.n	2050c <lll_hfclock_off+0x28>
		return 0;
   20508:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   2050a:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   2050c:	f003 f908 	bl	23720 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   20510:	2000      	movs	r0, #0
}
   20512:	bd08      	pop	{r3, pc}
		return -EALREADY;
   20514:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   20518:	bd08      	pop	{r3, pc}
   2051a:	bf00      	nop
   2051c:	200024cc 	.word	0x200024cc

00020520 <lll_clock_ppm_local_get>:
}

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   20520:	2032      	movs	r0, #50	; 0x32
   20522:	4770      	bx	lr

00020524 <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   20524:	4b01      	ldr	r3, [pc, #4]	; (2052c <lll_clock_ppm_get+0x8>)
}
   20526:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   2052a:	4770      	bx	lr
   2052c:	00030348 	.word	0x00030348

00020530 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   20530:	b510      	push	{r4, lr}
   20532:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   20534:	f7ff fe18 	bl	20168 <lll_isr_status_reset>

	radio_filter_disable();
   20538:	f001 fd12 	bl	21f60 <radio_filter_disable>

	lll_isr_cleanup(param);
   2053c:	4620      	mov	r0, r4
}
   2053e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   20542:	f7ff be1f 	b.w	20184 <lll_isr_cleanup>
   20546:	bf00      	nop

00020548 <isr_tx>:
{
   20548:	b530      	push	{r4, r5, lr}
   2054a:	b083      	sub	sp, #12
   2054c:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   2054e:	f7ff fdf9 	bl	20144 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   20552:	2096      	movs	r0, #150	; 0x96
   20554:	f001 fd36 	bl	21fc4 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, phy_flags);
   20558:	2300      	movs	r3, #0
   2055a:	4618      	mov	r0, r3
   2055c:	461a      	mov	r2, r3
   2055e:	4619      	mov	r1, r3
   20560:	f001 fc5e 	bl	21e20 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   20564:	2001      	movs	r0, #1
   20566:	f7f8 fafb 	bl	18b60 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   2056a:	4604      	mov	r4, r0
   2056c:	2800      	cmp	r0, #0
   2056e:	d043      	beq.n	205f8 <isr_tx+0xb0>
	radio_pkt_rx_set(node_rx->pdu);
   20570:	f104 001c 	add.w	r0, r4, #28
   20574:	f001 fb94 	bl	21ca0 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   20578:	f001 fbce 	bl	21d18 <radio_is_ready>
   2057c:	b9e0      	cbnz	r0, 205b8 <isr_tx+0x70>
	radio_isr_set(isr_rx, param);
   2057e:	4825      	ldr	r0, [pc, #148]	; (20614 <isr_tx+0xcc>)
   20580:	4629      	mov	r1, r5
   20582:	f001 fab9 	bl	21af8 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   20586:	f7ff fa23 	bl	1f9d0 <ull_filter_lll_rl_enabled>
   2058a:	bb50      	cbnz	r0, 205e2 <isr_tx+0x9a>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   2058c:	f001 fe02 	bl	22194 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   20590:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   20592:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   20594:	4608      	mov	r0, r1
   20596:	f001 fb93 	bl	21cc0 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   2059a:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   2059c:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   2059e:	4608      	mov	r0, r1
   205a0:	f001 fb8a 	bl	21cb8 <radio_tx_chain_delay_get>
   205a4:	442c      	add	r4, r5
   205a6:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   205a8:	1a20      	subs	r0, r4, r0
   205aa:	f001 fdab 	bl	22104 <radio_tmr_hcto_configure>
}
   205ae:	b003      	add	sp, #12
   205b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_tmr_end_capture();
   205b4:	f001 bde0 	b.w	22178 <radio_tmr_end_capture>
	LL_ASSERT(!radio_is_ready());
   205b8:	4a17      	ldr	r2, [pc, #92]	; (20618 <isr_tx+0xd0>)
   205ba:	4918      	ldr	r1, [pc, #96]	; (2061c <isr_tx+0xd4>)
   205bc:	4818      	ldr	r0, [pc, #96]	; (20620 <isr_tx+0xd8>)
   205be:	f240 437d 	movw	r3, #1149	; 0x47d
   205c2:	f006 ffb7 	bl	27534 <assert_print>
   205c6:	4040      	eors	r0, r0
   205c8:	f380 8811 	msr	BASEPRI, r0
   205cc:	f04f 0003 	mov.w	r0, #3
   205d0:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   205d2:	4810      	ldr	r0, [pc, #64]	; (20614 <isr_tx+0xcc>)
   205d4:	4629      	mov	r1, r5
   205d6:	f001 fa8f 	bl	21af8 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   205da:	f7ff f9f9 	bl	1f9d0 <ull_filter_lll_rl_enabled>
   205de:	2800      	cmp	r0, #0
   205e0:	d0d4      	beq.n	2058c <isr_tx+0x44>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   205e2:	f10d 0007 	add.w	r0, sp, #7
   205e6:	f7ff f92d 	bl	1f844 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   205ea:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   205ec:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   205ee:	f89d 0007 	ldrb.w	r0, [sp, #7]
   205f2:	f001 fe67 	bl	222c4 <radio_ar_configure>
   205f6:	e7c9      	b.n	2058c <isr_tx+0x44>
	LL_ASSERT(node_rx);
   205f8:	4a07      	ldr	r2, [pc, #28]	; (20618 <isr_tx+0xd0>)
   205fa:	490a      	ldr	r1, [pc, #40]	; (20624 <isr_tx+0xdc>)
   205fc:	4808      	ldr	r0, [pc, #32]	; (20620 <isr_tx+0xd8>)
   205fe:	f240 4379 	movw	r3, #1145	; 0x479
   20602:	f006 ff97 	bl	27534 <assert_print>
   20606:	4040      	eors	r0, r0
   20608:	f380 8811 	msr	BASEPRI, r0
   2060c:	f04f 0003 	mov.w	r0, #3
   20610:	df02      	svc	2
   20612:	e7ad      	b.n	20570 <isr_tx+0x28>
   20614:	00020d99 	.word	0x00020d99
   20618:	00030358 	.word	0x00030358
   2061c:	000303ac 	.word	0x000303ac
   20620:	0002f8a0 	.word	0x0002f8a0
   20624:	000303a4 	.word	0x000303a4

00020628 <is_abort_cb>:
	if (next != curr) {
   20628:	4281      	cmp	r1, r0
{
   2062a:	b508      	push	{r3, lr}
	if (next != curr) {
   2062c:	d00e      	beq.n	2064c <is_abort_cb+0x24>
		} else if (lll->is_hdcd) {
   2062e:	7a0b      	ldrb	r3, [r1, #8]
   20630:	07db      	lsls	r3, r3, #31
   20632:	d402      	bmi.n	2063a <is_abort_cb+0x12>
			return -ECANCELED;
   20634:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   20638:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   2063a:	4b13      	ldr	r3, [pc, #76]	; (20688 <is_abort_cb+0x60>)
   2063c:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   2063e:	f7ff ff39 	bl	204b4 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   20642:	2800      	cmp	r0, #0
   20644:	db0f      	blt.n	20666 <is_abort_cb+0x3e>
   20646:	f06f 000a 	mvn.w	r0, #10
}
   2064a:	bd08      	pop	{r3, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   2064c:	7b0b      	ldrb	r3, [r1, #12]
   2064e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   20652:	690b      	ldr	r3, [r1, #16]
   20654:	781b      	ldrb	r3, [r3, #0]
   20656:	f003 030f 	and.w	r3, r3, #15
		return 0;
   2065a:	2b01      	cmp	r3, #1
   2065c:	bf14      	ite	ne
   2065e:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   20662:	2000      	moveq	r0, #0
}
   20664:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   20666:	4a09      	ldr	r2, [pc, #36]	; (2068c <is_abort_cb+0x64>)
   20668:	4909      	ldr	r1, [pc, #36]	; (20690 <is_abort_cb+0x68>)
   2066a:	480a      	ldr	r0, [pc, #40]	; (20694 <is_abort_cb+0x6c>)
   2066c:	f240 4332 	movw	r3, #1074	; 0x432
   20670:	f006 ff60 	bl	27534 <assert_print>
   20674:	4040      	eors	r0, r0
   20676:	f380 8811 	msr	BASEPRI, r0
   2067a:	f04f 0003 	mov.w	r0, #3
   2067e:	df02      	svc	2
   20680:	f06f 000a 	mvn.w	r0, #10
}
   20684:	bd08      	pop	{r3, pc}
   20686:	bf00      	nop
   20688:	00020bb5 	.word	0x00020bb5
   2068c:	00030358 	.word	0x00030358
   20690:	00030308 	.word	0x00030308
   20694:	0002f8a0 	.word	0x0002f8a0

00020698 <abort_cb>:
{
   20698:	b510      	push	{r4, lr}
	if (!prepare_param) {
   2069a:	b1d8      	cbz	r0, 206d4 <abort_cb+0x3c>
	err = lll_hfclock_off();
   2069c:	460c      	mov	r4, r1
   2069e:	f7ff ff21 	bl	204e4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   206a2:	2800      	cmp	r0, #0
   206a4:	db04      	blt.n	206b0 <abort_cb+0x18>
	lll_done(param);
   206a6:	4620      	mov	r0, r4
}
   206a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   206ac:	f7ff bc92 	b.w	1ffd4 <lll_done>
	LL_ASSERT(err >= 0);
   206b0:	4a0c      	ldr	r2, [pc, #48]	; (206e4 <abort_cb+0x4c>)
   206b2:	490d      	ldr	r1, [pc, #52]	; (206e8 <abort_cb+0x50>)
   206b4:	480d      	ldr	r0, [pc, #52]	; (206ec <abort_cb+0x54>)
   206b6:	f44f 638b 	mov.w	r3, #1112	; 0x458
   206ba:	f006 ff3b 	bl	27534 <assert_print>
   206be:	4040      	eors	r0, r0
   206c0:	f380 8811 	msr	BASEPRI, r0
   206c4:	f04f 0003 	mov.w	r0, #3
   206c8:	df02      	svc	2
	lll_done(param);
   206ca:	4620      	mov	r0, r4
}
   206cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   206d0:	f7ff bc80 	b.w	1ffd4 <lll_done>
		radio_isr_set(isr_abort, param);
   206d4:	4806      	ldr	r0, [pc, #24]	; (206f0 <abort_cb+0x58>)
   206d6:	f001 fa0f 	bl	21af8 <radio_isr_set>
}
   206da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   206de:	f001 bafb 	b.w	21cd8 <radio_disable>
   206e2:	bf00      	nop
   206e4:	00030358 	.word	0x00030358
   206e8:	00030308 	.word	0x00030308
   206ec:	0002f8a0 	.word	0x0002f8a0
   206f0:	00020531 	.word	0x00020531

000206f4 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   206f4:	4b08      	ldr	r3, [pc, #32]	; (20718 <lll_adv_init+0x24>)
   206f6:	2204      	movs	r2, #4
{
   206f8:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   206fa:	1898      	adds	r0, r3, r2
   206fc:	2128      	movs	r1, #40	; 0x28
   206fe:	f7f4 fd41 	bl	15184 <mem_init>
	MFIFO_INIT(pdu_free);
   20702:	4b06      	ldr	r3, [pc, #24]	; (2071c <lll_adv_init+0x28>)
   20704:	2400      	movs	r4, #0
   20706:	809c      	strh	r4, [r3, #4]
	return z_impl_k_sem_init(sem, initial_count, limit);
   20708:	2202      	movs	r2, #2
   2070a:	4621      	mov	r1, r4
   2070c:	4804      	ldr	r0, [pc, #16]	; (20720 <lll_adv_init+0x2c>)
   2070e:	f00e f823 	bl	2e758 <z_impl_k_sem_init>
}
   20712:	4620      	mov	r0, r4
   20714:	bd10      	pop	{r4, pc}
   20716:	bf00      	nop
   20718:	200024e0 	.word	0x200024e0
   2071c:	20000628 	.word	0x20000628
   20720:	20002584 	.word	0x20002584

00020724 <lll_adv_reset>:
   20724:	4b08      	ldr	r3, [pc, #32]	; (20748 <lll_adv_reset+0x24>)
   20726:	2204      	movs	r2, #4
   20728:	b510      	push	{r4, lr}
   2072a:	1898      	adds	r0, r3, r2
   2072c:	2128      	movs	r1, #40	; 0x28
   2072e:	f7f4 fd29 	bl	15184 <mem_init>
   20732:	4b06      	ldr	r3, [pc, #24]	; (2074c <lll_adv_reset+0x28>)
   20734:	2400      	movs	r4, #0
   20736:	809c      	strh	r4, [r3, #4]
   20738:	2202      	movs	r2, #2
   2073a:	4621      	mov	r1, r4
   2073c:	4804      	ldr	r0, [pc, #16]	; (20750 <lll_adv_reset+0x2c>)
   2073e:	f00e f80b 	bl	2e758 <z_impl_k_sem_init>
   20742:	4620      	mov	r0, r4
   20744:	bd10      	pop	{r4, pc}
   20746:	bf00      	nop
   20748:	200024e0 	.word	0x200024e0
   2074c:	20000628 	.word	0x20000628
   20750:	20002584 	.word	0x20002584

00020754 <lll_adv_data_init>:
{
   20754:	b510      	push	{r4, lr}
   20756:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   20758:	4805      	ldr	r0, [pc, #20]	; (20770 <lll_adv_data_init+0x1c>)
   2075a:	f7f4 fd43 	bl	151e4 <mem_acquire>
	if (!p) {
   2075e:	b120      	cbz	r0, 2076a <lll_adv_data_init+0x16>
   20760:	4603      	mov	r3, r0
	p->len = 0U;
   20762:	2000      	movs	r0, #0
   20764:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   20766:	6063      	str	r3, [r4, #4]
}
   20768:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   2076a:	f06f 000b 	mvn.w	r0, #11
}
   2076e:	bd10      	pop	{r4, pc}
   20770:	200024e0 	.word	0x200024e0

00020774 <lll_adv_data_reset>:
{
   20774:	4603      	mov	r3, r0
	pdu->first = 0U;
   20776:	2000      	movs	r0, #0
   20778:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   2077a:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   2077c:	6098      	str	r0, [r3, #8]
}
   2077e:	4770      	bx	lr

00020780 <lll_adv_pdu_alloc_pdu_adv>:
{
   20780:	b538      	push	{r3, r4, r5, lr}
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   20782:	4c35      	ldr	r4, [pc, #212]	; (20858 <lll_adv_pdu_alloc_pdu_adv+0xd8>)
   20784:	7922      	ldrb	r2, [r4, #4]
	if (first == last) {
   20786:	7961      	ldrb	r1, [r4, #5]
   20788:	7823      	ldrb	r3, [r4, #0]
   2078a:	4291      	cmp	r1, r2
   2078c:	d003      	beq.n	20796 <lll_adv_pdu_alloc_pdu_adv+0x16>
	return *((void **)(fifo + first * size));
   2078e:	fb02 4303 	mla	r3, r2, r3, r4
   20792:	689d      	ldr	r5, [r3, #8]
	if (p) {
   20794:	b935      	cbnz	r5, 207a4 <lll_adv_pdu_alloc_pdu_adv+0x24>
	p = mem_acquire(&mem_pdu.free);
   20796:	4831      	ldr	r0, [pc, #196]	; (2085c <lll_adv_pdu_alloc_pdu_adv+0xdc>)
   20798:	f7f4 fd24 	bl	151e4 <mem_acquire>
	if (p) {
   2079c:	4605      	mov	r5, r0
   2079e:	b1a0      	cbz	r0, 207ca <lll_adv_pdu_alloc_pdu_adv+0x4a>
}
   207a0:	4628      	mov	r0, r5
   207a2:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_sem_take(sem, timeout);
   207a4:	482e      	ldr	r0, [pc, #184]	; (20860 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   207a6:	2200      	movs	r2, #0
   207a8:	2300      	movs	r3, #0
   207aa:	f005 fb0b 	bl	25dc4 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   207ae:	bb40      	cbnz	r0, 20802 <lll_adv_pdu_alloc_pdu_adv+0x82>
	uint8_t _first = *first; /* Copy read-index */
   207b0:	7923      	ldrb	r3, [r4, #4]
	if (_first == last) {
   207b2:	7962      	ldrb	r2, [r4, #5]
		MFIFO_DEQUEUE(pdu_free);
   207b4:	78a1      	ldrb	r1, [r4, #2]
   207b6:	429a      	cmp	r2, r3
   207b8:	d0f2      	beq.n	207a0 <lll_adv_pdu_alloc_pdu_adv+0x20>
	_first += 1U;
   207ba:	3301      	adds	r3, #1
   207bc:	b2db      	uxtb	r3, r3
		_first = 0U;
   207be:	4299      	cmp	r1, r3
   207c0:	bf08      	it	eq
   207c2:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   207c4:	7123      	strb	r3, [r4, #4]
}
   207c6:	4628      	mov	r0, r5
   207c8:	bd38      	pop	{r3, r4, r5, pc}
   207ca:	4825      	ldr	r0, [pc, #148]	; (20860 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   207cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   207d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   207d4:	f005 faf6 	bl	25dc4 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   207d8:	2800      	cmp	r0, #0
   207da:	d12e      	bne.n	2083a <lll_adv_pdu_alloc_pdu_adv+0xba>
	uint8_t _first = *first; /* Copy read-index */
   207dc:	7923      	ldrb	r3, [r4, #4]
	if (_first == last) {
   207de:	7961      	ldrb	r1, [r4, #5]
	p = MFIFO_DEQUEUE(pdu_free);
   207e0:	7822      	ldrb	r2, [r4, #0]
   207e2:	78a0      	ldrb	r0, [r4, #2]
   207e4:	4299      	cmp	r1, r3
   207e6:	d01a      	beq.n	2081e <lll_adv_pdu_alloc_pdu_adv+0x9e>
	mem = *((void **)(fifo + _first * size));
   207e8:	fb03 4202 	mla	r2, r3, r2, r4
	_first += 1U;
   207ec:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   207ee:	6892      	ldr	r2, [r2, #8]
	_first += 1U;
   207f0:	b2db      	uxtb	r3, r3
		_first = 0U;
   207f2:	4298      	cmp	r0, r3
   207f4:	bf08      	it	eq
   207f6:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   207f8:	7123      	strb	r3, [r4, #4]
	LL_ASSERT(p);
   207fa:	b182      	cbz	r2, 2081e <lll_adv_pdu_alloc_pdu_adv+0x9e>
   207fc:	4615      	mov	r5, r2
}
   207fe:	4628      	mov	r0, r5
   20800:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!err);
   20802:	4a18      	ldr	r2, [pc, #96]	; (20864 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   20804:	4918      	ldr	r1, [pc, #96]	; (20868 <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   20806:	4819      	ldr	r0, [pc, #100]	; (2086c <lll_adv_pdu_alloc_pdu_adv+0xec>)
   20808:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   2080c:	f006 fe92 	bl	27534 <assert_print>
   20810:	4040      	eors	r0, r0
   20812:	f380 8811 	msr	BASEPRI, r0
   20816:	f04f 0003 	mov.w	r0, #3
   2081a:	df02      	svc	2
   2081c:	e7c8      	b.n	207b0 <lll_adv_pdu_alloc_pdu_adv+0x30>
	LL_ASSERT(p);
   2081e:	4a11      	ldr	r2, [pc, #68]	; (20864 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   20820:	4913      	ldr	r1, [pc, #76]	; (20870 <lll_adv_pdu_alloc_pdu_adv+0xf0>)
   20822:	4812      	ldr	r0, [pc, #72]	; (2086c <lll_adv_pdu_alloc_pdu_adv+0xec>)
   20824:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
   20828:	f006 fe84 	bl	27534 <assert_print>
   2082c:	4040      	eors	r0, r0
   2082e:	f380 8811 	msr	BASEPRI, r0
   20832:	f04f 0003 	mov.w	r0, #3
   20836:	df02      	svc	2
   20838:	e7b2      	b.n	207a0 <lll_adv_pdu_alloc_pdu_adv+0x20>
	LL_ASSERT(!err);
   2083a:	4a0a      	ldr	r2, [pc, #40]	; (20864 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   2083c:	490a      	ldr	r1, [pc, #40]	; (20868 <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   2083e:	480b      	ldr	r0, [pc, #44]	; (2086c <lll_adv_pdu_alloc_pdu_adv+0xec>)
   20840:	f240 13ad 	movw	r3, #429	; 0x1ad
   20844:	f006 fe76 	bl	27534 <assert_print>
   20848:	4040      	eors	r0, r0
   2084a:	f380 8811 	msr	BASEPRI, r0
   2084e:	f04f 0003 	mov.w	r0, #3
   20852:	df02      	svc	2
   20854:	e7c2      	b.n	207dc <lll_adv_pdu_alloc_pdu_adv+0x5c>
   20856:	bf00      	nop
   20858:	20000628 	.word	0x20000628
   2085c:	200024e0 	.word	0x200024e0
   20860:	20002584 	.word	0x20002584
   20864:	00030358 	.word	0x00030358
   20868:	0002fa40 	.word	0x0002fa40
   2086c:	0002f8a0 	.word	0x0002f8a0
   20870:	000303c0 	.word	0x000303c0

00020874 <lll_adv_pdu_alloc>:
{
   20874:	b510      	push	{r4, lr}
	first = pdu->first;
   20876:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   20878:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   2087a:	429a      	cmp	r2, r3
   2087c:	d014      	beq.n	208a8 <lll_adv_pdu_alloc+0x34>
		pdu->last = first;
   2087e:	b2d4      	uxtb	r4, r2
   20880:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   20882:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   20884:	4294      	cmp	r4, r2
   20886:	d004      	beq.n	20892 <lll_adv_pdu_alloc+0x1e>
			last++;
   20888:	1c5a      	adds	r2, r3, #1
			pdu->last = last;
   2088a:	7043      	strb	r3, [r0, #1]
			last++;
   2088c:	b2d3      	uxtb	r3, r2
			if (last == DOUBLE_BUFFER_SIZE) {
   2088e:	2b02      	cmp	r3, #2
   20890:	d00e      	beq.n	208b0 <lll_adv_pdu_alloc+0x3c>
	p = (void *)pdu->pdu[last];
   20892:	461c      	mov	r4, r3
	*idx = last;
   20894:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   20898:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   2089a:	6860      	ldr	r0, [r4, #4]
	if (p) {
   2089c:	b100      	cbz	r0, 208a0 <lll_adv_pdu_alloc+0x2c>
}
   2089e:	bd10      	pop	{r4, pc}
	p = lll_adv_pdu_alloc_pdu_adv();
   208a0:	f7ff ff6e 	bl	20780 <lll_adv_pdu_alloc_pdu_adv>
	pdu->pdu[last] = (void *)p;
   208a4:	6060      	str	r0, [r4, #4]
}
   208a6:	bd10      	pop	{r4, pc}
		last++;
   208a8:	3301      	adds	r3, #1
   208aa:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   208ac:	2b02      	cmp	r3, #2
   208ae:	d1f0      	bne.n	20892 <lll_adv_pdu_alloc+0x1e>
{
   208b0:	2400      	movs	r4, #0
			last = 0U;
   208b2:	4623      	mov	r3, r4
   208b4:	e7ee      	b.n	20894 <lll_adv_pdu_alloc+0x20>
   208b6:	bf00      	nop

000208b8 <lll_adv_pdu_latest_get>:
{
   208b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   208ba:	4604      	mov	r4, r0
	first = pdu->first;
   208bc:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   208be:	7840      	ldrb	r0, [r0, #1]
   208c0:	4298      	cmp	r0, r3
   208c2:	d028      	beq.n	20916 <lll_adv_pdu_latest_get+0x5e>
			if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   208c4:	4a16      	ldr	r2, [pc, #88]	; (20920 <lll_adv_pdu_latest_get+0x68>)
   208c6:	460e      	mov	r6, r1
   208c8:	7951      	ldrb	r1, [r2, #5]
	if (last == count) {
   208ca:	f892 c002 	ldrb.w	ip, [r2, #2]
   208ce:	b2dd      	uxtb	r5, r3
	last = last + 1;
   208d0:	1c4b      	adds	r3, r1, #1
   208d2:	b2db      	uxtb	r3, r3
		last = 0U;
   208d4:	459c      	cmp	ip, r3
   208d6:	bf08      	it	eq
   208d8:	2300      	moveq	r3, #0
   208da:	f892 c004 	ldrb.w	ip, [r2, #4]
   208de:	eb04 0785 	add.w	r7, r4, r5, lsl #2
	if (last == first) {
   208e2:	459c      	cmp	ip, r3
		p = pdu->pdu[pdu_idx];
   208e4:	6878      	ldr	r0, [r7, #4]
   208e6:	d009      	beq.n	208fc <lll_adv_pdu_latest_get+0x44>
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   208e8:	f892 c000 	ldrb.w	ip, [r2]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   208ec:	fb0c 2101 	mla	r1, ip, r1, r2
   208f0:	6088      	str	r0, [r1, #8]
	*last = idx; /* Commit: Update write index */
   208f2:	7153      	strb	r3, [r2, #5]
	z_impl_k_sem_give(sem);
   208f4:	480b      	ldr	r0, [pc, #44]	; (20924 <lll_adv_pdu_latest_get+0x6c>)
   208f6:	f005 fa3f 	bl	25d78 <z_impl_k_sem_give>
			p = next;
   208fa:	2000      	movs	r0, #0
		first += 1U;
   208fc:	1c6b      	adds	r3, r5, #1
   208fe:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   20900:	2b02      	cmp	r3, #2
		pdu->pdu[pdu_idx] = p;
   20902:	6078      	str	r0, [r7, #4]
		if (first == DOUBLE_BUFFER_SIZE) {
   20904:	bf04      	itt	eq
   20906:	2000      	moveq	r0, #0
			first = 0U;
   20908:	4603      	moveq	r3, r0
		*is_modified = 1U;
   2090a:	f04f 0201 	mov.w	r2, #1
		pdu->first = first;
   2090e:	7023      	strb	r3, [r4, #0]
	return (void *)pdu->pdu[first];
   20910:	bf18      	it	ne
   20912:	4618      	movne	r0, r3
		*is_modified = 1U;
   20914:	7032      	strb	r2, [r6, #0]
	return (void *)pdu->pdu[first];
   20916:	eb04 0480 	add.w	r4, r4, r0, lsl #2
}
   2091a:	6860      	ldr	r0, [r4, #4]
   2091c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2091e:	bf00      	nop
   20920:	20000628 	.word	0x20000628
   20924:	20002584 	.word	0x20002584

00020928 <chan_prepare.isra.0>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   20928:	7a03      	ldrb	r3, [r0, #8]
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   2092a:	b570      	push	{r4, r5, r6, lr}
	chan = find_lsb_set(lll->chan_map_curr);
   2092c:	f3c3 1302 	ubfx	r3, r3, #4, #3
   20930:	2b00      	cmp	r3, #0
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   20932:	4604      	mov	r4, r0
   20934:	fa93 f0a3 	rbit	r0, r3
   20938:	fab0 f080 	clz	r0, r0
   2093c:	bf08      	it	eq
   2093e:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   20942:	1c45      	adds	r5, r0, #1
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   20944:	b082      	sub	sp, #8
	LL_ASSERT(chan);
   20946:	d043      	beq.n	209d0 <chan_prepare.isra.0+0xa8>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   20948:	7a21      	ldrb	r1, [r4, #8]
   2094a:	1e5a      	subs	r2, r3, #1
   2094c:	4013      	ands	r3, r2
   2094e:	f363 1106 	bfi	r1, r3, #4, #3

	lll_chan_set(36 + chan);
   20952:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   20956:	7221      	strb	r1, [r4, #8]
	lll_chan_set(36 + chan);
   20958:	f7ff fbb0 	bl	200bc <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   2095c:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   2095e:	f10d 0107 	add.w	r1, sp, #7
   20962:	f104 000c 	add.w	r0, r4, #12
   20966:	f88d 3007 	strb.w	r3, [sp, #7]
   2096a:	f7ff ffa5 	bl	208b8 <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   2096e:	4605      	mov	r5, r0
   20970:	2800      	cmp	r0, #0
   20972:	d03e      	beq.n	209f2 <chan_prepare.isra.0+0xca>

	radio_pkt_tx_set(pdu);
   20974:	4628      	mov	r0, r5
   20976:	f001 f999 	bl	21cac <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   2097a:	782b      	ldrb	r3, [r5, #0]
   2097c:	f003 030f 	and.w	r3, r3, #15
   20980:	2b02      	cmp	r3, #2
   20982:	d01d      	beq.n	209c0 <chan_prepare.isra.0+0x98>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   20984:	f10d 0107 	add.w	r1, sp, #7
   20988:	f104 0018 	add.w	r0, r4, #24
   2098c:	f7ff ff94 	bl	208b8 <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   20990:	4606      	mov	r6, r0
   20992:	2800      	cmp	r0, #0
   20994:	d03b      	beq.n	20a0e <chan_prepare.isra.0+0xe6>

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   20996:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2099a:	b95b      	cbnz	r3, 209b4 <chan_prepare.isra.0+0x8c>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   2099c:	4621      	mov	r1, r4
   2099e:	4823      	ldr	r0, [pc, #140]	; (20a2c <chan_prepare.isra.0+0x104>)
   209a0:	f001 f8aa 	bl	21af8 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   209a4:	2096      	movs	r0, #150	; 0x96
   209a6:	f001 fb0d 	bl	21fc4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   209aa:	2000      	movs	r0, #0
   209ac:	f001 f9f0 	bl	21d90 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   209b0:	b002      	add	sp, #8
   209b2:	bd70      	pop	{r4, r5, r6, pc}
			memcpy(&scan_pdu->scan_rsp.addr[0],
   209b4:	2206      	movs	r2, #6
   209b6:	1ca9      	adds	r1, r5, #2
   209b8:	1cb0      	adds	r0, r6, #2
   209ba:	f008 fcc4 	bl	29346 <memcpy>
   209be:	e7ed      	b.n	2099c <chan_prepare.isra.0+0x74>
		radio_isr_set(isr_done, lll);
   209c0:	481b      	ldr	r0, [pc, #108]	; (20a30 <chan_prepare.isra.0+0x108>)
   209c2:	4621      	mov	r1, r4
   209c4:	f001 f898 	bl	21af8 <radio_isr_set>
		radio_switch_complete_and_disable();
   209c8:	f001 fa8a 	bl	21ee0 <radio_switch_complete_and_disable>
}
   209cc:	b002      	add	sp, #8
   209ce:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(chan);
   209d0:	4a18      	ldr	r2, [pc, #96]	; (20a34 <chan_prepare.isra.0+0x10c>)
   209d2:	4919      	ldr	r1, [pc, #100]	; (20a38 <chan_prepare.isra.0+0x110>)
   209d4:	4819      	ldr	r0, [pc, #100]	; (20a3c <chan_prepare.isra.0+0x114>)
   209d6:	f240 536f 	movw	r3, #1391	; 0x56f
   209da:	f006 fdab 	bl	27534 <assert_print>
   209de:	4040      	eors	r0, r0
   209e0:	f380 8811 	msr	BASEPRI, r0
   209e4:	f04f 0003 	mov.w	r0, #3
   209e8:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   209ea:	7a23      	ldrb	r3, [r4, #8]
   209ec:	f3c3 1302 	ubfx	r3, r3, #4, #3
   209f0:	e7aa      	b.n	20948 <chan_prepare.isra.0+0x20>
	LL_ASSERT(pdu);
   209f2:	4a10      	ldr	r2, [pc, #64]	; (20a34 <chan_prepare.isra.0+0x10c>)
   209f4:	4912      	ldr	r1, [pc, #72]	; (20a40 <chan_prepare.isra.0+0x118>)
   209f6:	4811      	ldr	r0, [pc, #68]	; (20a3c <chan_prepare.isra.0+0x114>)
   209f8:	f44f 63af 	mov.w	r3, #1400	; 0x578
   209fc:	f006 fd9a 	bl	27534 <assert_print>
   20a00:	4040      	eors	r0, r0
   20a02:	f380 8811 	msr	BASEPRI, r0
   20a06:	f04f 0003 	mov.w	r0, #3
   20a0a:	df02      	svc	2
   20a0c:	e7b2      	b.n	20974 <chan_prepare.isra.0+0x4c>
		LL_ASSERT(scan_pdu);
   20a0e:	4a09      	ldr	r2, [pc, #36]	; (20a34 <chan_prepare.isra.0+0x10c>)
   20a10:	490c      	ldr	r1, [pc, #48]	; (20a44 <chan_prepare.isra.0+0x11c>)
   20a12:	480a      	ldr	r0, [pc, #40]	; (20a3c <chan_prepare.isra.0+0x114>)
   20a14:	f240 5382 	movw	r3, #1410	; 0x582
   20a18:	f006 fd8c 	bl	27534 <assert_print>
   20a1c:	4040      	eors	r0, r0
   20a1e:	f380 8811 	msr	BASEPRI, r0
   20a22:	f04f 0003 	mov.w	r0, #3
   20a26:	df02      	svc	2
   20a28:	e7b5      	b.n	20996 <chan_prepare.isra.0+0x6e>
   20a2a:	bf00      	nop
   20a2c:	00020549 	.word	0x00020549
   20a30:	00020a49 	.word	0x00020a49
   20a34:	00030358 	.word	0x00030358
   20a38:	000303c4 	.word	0x000303c4
   20a3c:	0002f8a0 	.word	0x0002f8a0
   20a40:	000303cc 	.word	0x000303cc
   20a44:	000303d0 	.word	0x000303d0

00020a48 <isr_done>:
{
   20a48:	b510      	push	{r4, lr}
   20a4a:	4604      	mov	r4, r0
	lll_isr_status_reset();
   20a4c:	f7ff fb8c 	bl	20168 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   20a50:	7a23      	ldrb	r3, [r4, #8]
   20a52:	f003 0271 	and.w	r2, r3, #113	; 0x71
   20a56:	2a01      	cmp	r2, #1
   20a58:	d105      	bne.n	20a66 <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   20a5a:	f3c3 0242 	ubfx	r2, r3, #1, #3
   20a5e:	f362 1306 	bfi	r3, r2, #4, #3
   20a62:	7223      	strb	r3, [r4, #8]
	if (lll->chan_map_curr &&
   20a64:	b2db      	uxtb	r3, r3
   20a66:	f013 0f70 	tst.w	r3, #112	; 0x70
   20a6a:	d005      	beq.n	20a78 <isr_done+0x30>
	    (!lll->conn || !lll->conn->periph.cancelled) &&
   20a6c:	6863      	ldr	r3, [r4, #4]
   20a6e:	b153      	cbz	r3, 20a86 <isr_done+0x3e>
   20a70:	f893 3020 	ldrb.w	r3, [r3, #32]
   20a74:	079b      	lsls	r3, r3, #30
   20a76:	d506      	bpl.n	20a86 <isr_done+0x3e>
	radio_filter_disable();
   20a78:	f001 fa72 	bl	21f60 <radio_filter_disable>
	lll_isr_cleanup(param);
   20a7c:	4620      	mov	r0, r4
}
   20a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   20a82:	f7ff bb7f 	b.w	20184 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   20a86:	4620      	mov	r0, r4
   20a88:	f7ff ff4e 	bl	20928 <chan_prepare.isra.0>
		radio_tx_enable();
   20a8c:	f001 f91e 	bl	21ccc <radio_tx_enable>
}
   20a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   20a94:	f001 bb70 	b.w	22178 <radio_tmr_end_capture>

00020a98 <prepare_cb>:
{
   20a98:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   20a9a:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn &&
   20a9c:	6863      	ldr	r3, [r4, #4]
{
   20a9e:	b083      	sub	sp, #12
   20aa0:	4605      	mov	r5, r0
	if (unlikely(lll->conn &&
   20aa2:	2b00      	cmp	r3, #0
   20aa4:	d16d      	bne.n	20b82 <prepare_cb+0xea>
	radio_reset();
   20aa6:	f001 f869 	bl	21b7c <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   20aaa:	2000      	movs	r0, #0
   20aac:	f001 f89a 	bl	21be4 <radio_tx_power_set>
	radio_phy_set(0, 0);
   20ab0:	2100      	movs	r1, #0
   20ab2:	4608      	mov	r0, r1
   20ab4:	f001 f886 	bl	21bc4 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   20ab8:	2200      	movs	r2, #0
   20aba:	2125      	movs	r1, #37	; 0x25
   20abc:	2008      	movs	r0, #8
   20abe:	f001 f8c7 	bl	21c50 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   20ac2:	4b35      	ldr	r3, [pc, #212]	; (20b98 <prepare_cb+0x100>)
   20ac4:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   20ac6:	a801      	add	r0, sp, #4
   20ac8:	f001 f8aa 	bl	21c20 <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   20acc:	4933      	ldr	r1, [pc, #204]	; (20b9c <prepare_cb+0x104>)
   20ace:	f240 605b 	movw	r0, #1627	; 0x65b
   20ad2:	f001 f93f 	bl	21d54 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   20ad6:	7a23      	ldrb	r3, [r4, #8]
   20ad8:	f3c3 0242 	ubfx	r2, r3, #1, #3
   20adc:	f362 1306 	bfi	r3, r2, #4, #3
	pdu = chan_prepare(lll);
   20ae0:	4620      	mov	r0, r4
	lll->chan_map_curr = lll->chan_map;
   20ae2:	7223      	strb	r3, [r4, #8]
	pdu = chan_prepare(lll);
   20ae4:	f7ff ff20 	bl	20928 <chan_prepare.isra.0>
	if (ull_filter_lll_rl_enabled()) {
   20ae8:	f7fe ff72 	bl	1f9d0 <ull_filter_lll_rl_enabled>
   20aec:	bb98      	cbnz	r0, 20b56 <prepare_cb+0xbe>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   20aee:	7a63      	ldrb	r3, [r4, #9]
   20af0:	079b      	lsls	r3, r3, #30
   20af2:	d127      	bne.n	20b44 <prepare_cb+0xac>
	ull = HDR_LLL2ULL(lll);
   20af4:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   20af6:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   20af8:	4638      	mov	r0, r7
   20afa:	f7ff fac1 	bl	20080 <lll_event_offset_get>
   20afe:	4406      	add	r6, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   20b00:	686a      	ldr	r2, [r5, #4]
   20b02:	f106 0109 	add.w	r1, r6, #9
   20b06:	2001      	movs	r0, #1
   20b08:	f001 fa68 	bl	21fdc <radio_tmr_start>
	radio_tmr_end_capture();
   20b0c:	f001 fb34 	bl	22178 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   20b10:	4620      	mov	r0, r4
   20b12:	f7f8 ff9d 	bl	19a50 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_ADV_BASE +
   20b16:	1c81      	adds	r1, r0, #2
   20b18:	4632      	mov	r2, r6
   20b1a:	b2c9      	uxtb	r1, r1
   20b1c:	4638      	mov	r0, r7
   20b1e:	f7ff fabd 	bl	2009c <lll_preempt_calc>
   20b22:	b930      	cbnz	r0, 20b32 <prepare_cb+0x9a>
		ret = lll_prepare_done(lll);
   20b24:	4620      	mov	r0, r4
   20b26:	f7ff fa53 	bl	1ffd0 <lll_prepare_done>
		LL_ASSERT(!ret);
   20b2a:	b9d0      	cbnz	r0, 20b62 <prepare_cb+0xca>
}
   20b2c:	2000      	movs	r0, #0
   20b2e:	b003      	add	sp, #12
   20b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   20b32:	481b      	ldr	r0, [pc, #108]	; (20ba0 <prepare_cb+0x108>)
   20b34:	4621      	mov	r1, r4
   20b36:	f000 ffdf 	bl	21af8 <radio_isr_set>
		radio_disable();
   20b3a:	f001 f8cd 	bl	21cd8 <radio_disable>
}
   20b3e:	2000      	movs	r0, #0
   20b40:	b003      	add	sp, #12
   20b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct lll_filter *fal = ull_filter_lll_get(true);
   20b44:	2001      	movs	r0, #1
   20b46:	f7fe fbbd 	bl	1f2c4 <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   20b4a:	7841      	ldrb	r1, [r0, #1]
   20b4c:	1c82      	adds	r2, r0, #2
   20b4e:	7800      	ldrb	r0, [r0, #0]
   20b50:	f001 f9e6 	bl	21f20 <radio_filter_configure>
   20b54:	e7ce      	b.n	20af4 <prepare_cb+0x5c>
			ull_filter_lll_get(!!(lll->filter_policy));
   20b56:	7a60      	ldrb	r0, [r4, #9]
   20b58:	f010 0003 	ands.w	r0, r0, #3
   20b5c:	bf18      	it	ne
   20b5e:	2001      	movne	r0, #1
   20b60:	e7f1      	b.n	20b46 <prepare_cb+0xae>
		LL_ASSERT(!ret);
   20b62:	4a10      	ldr	r2, [pc, #64]	; (20ba4 <prepare_cb+0x10c>)
   20b64:	4910      	ldr	r1, [pc, #64]	; (20ba8 <prepare_cb+0x110>)
   20b66:	4811      	ldr	r0, [pc, #68]	; (20bac <prepare_cb+0x114>)
   20b68:	f240 4309 	movw	r3, #1033	; 0x409
   20b6c:	f006 fce2 	bl	27534 <assert_print>
   20b70:	4040      	eors	r0, r0
   20b72:	f380 8811 	msr	BASEPRI, r0
   20b76:	f04f 0003 	mov.w	r0, #3
   20b7a:	df02      	svc	2
}
   20b7c:	2000      	movs	r0, #0
   20b7e:	b003      	add	sp, #12
   20b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (unlikely(lll->conn &&
   20b82:	f893 3020 	ldrb.w	r3, [r3, #32]
   20b86:	079a      	lsls	r2, r3, #30
   20b88:	d08d      	beq.n	20aa6 <prepare_cb+0xe>
		radio_isr_set(lll_isr_early_abort, lll);
   20b8a:	4809      	ldr	r0, [pc, #36]	; (20bb0 <prepare_cb+0x118>)
   20b8c:	4621      	mov	r1, r4
   20b8e:	f000 ffb3 	bl	21af8 <radio_isr_set>
		radio_disable();
   20b92:	f001 f8a1 	bl	21cd8 <radio_disable>
		return 0;
   20b96:	e7c9      	b.n	20b2c <prepare_cb+0x94>
   20b98:	8e89bed6 	.word	0x8e89bed6
   20b9c:	00555555 	.word	0x00555555
   20ba0:	00020531 	.word	0x00020531
   20ba4:	00030358 	.word	0x00030358
   20ba8:	0002fb3c 	.word	0x0002fb3c
   20bac:	0002f8a0 	.word	0x0002f8a0
   20bb0:	00020215 	.word	0x00020215

00020bb4 <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   20bb4:	68c3      	ldr	r3, [r0, #12]
{
   20bb6:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   20bb8:	681e      	ldr	r6, [r3, #0]
{
   20bba:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   20bbc:	f7f5 fe04 	bl	167c8 <ticker_ticks_now_get>
   20bc0:	4605      	mov	r5, r0
   20bc2:	4630      	mov	r0, r6
   20bc4:	f7ff fa5c 	bl	20080 <lll_event_offset_get>
	p->remainder = 0;
   20bc8:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   20bca:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   20bcc:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   20bd0:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   20bd2:	4620      	mov	r0, r4
}
   20bd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   20bd8:	f7ff bf5e 	b.w	20a98 <prepare_cb>

00020bdc <lll_adv_prepare>:
{
   20bdc:	b510      	push	{r4, lr}
   20bde:	b082      	sub	sp, #8
   20be0:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   20be2:	f7ff fc67 	bl	204b4 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   20be6:	2800      	cmp	r0, #0
   20be8:	db1a      	blt.n	20c20 <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   20bea:	4a14      	ldr	r2, [pc, #80]	; (20c3c <lll_adv_prepare+0x60>)
   20bec:	4914      	ldr	r1, [pc, #80]	; (20c40 <lll_adv_prepare+0x64>)
   20bee:	4815      	ldr	r0, [pc, #84]	; (20c44 <lll_adv_prepare+0x68>)
   20bf0:	9400      	str	r4, [sp, #0]
   20bf2:	2300      	movs	r3, #0
   20bf4:	f7f8 facc 	bl	19190 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   20bf8:	b108      	cbz	r0, 20bfe <lll_adv_prepare+0x22>
   20bfa:	3077      	adds	r0, #119	; 0x77
   20bfc:	d101      	bne.n	20c02 <lll_adv_prepare+0x26>
}
   20bfe:	b002      	add	sp, #8
   20c00:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   20c02:	4a11      	ldr	r2, [pc, #68]	; (20c48 <lll_adv_prepare+0x6c>)
   20c04:	4911      	ldr	r1, [pc, #68]	; (20c4c <lll_adv_prepare+0x70>)
   20c06:	4812      	ldr	r0, [pc, #72]	; (20c50 <lll_adv_prepare+0x74>)
   20c08:	f44f 7328 	mov.w	r3, #672	; 0x2a0
   20c0c:	f006 fc92 	bl	27534 <assert_print>
   20c10:	4040      	eors	r0, r0
   20c12:	f380 8811 	msr	BASEPRI, r0
   20c16:	f04f 0003 	mov.w	r0, #3
   20c1a:	df02      	svc	2
}
   20c1c:	b002      	add	sp, #8
   20c1e:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   20c20:	4a09      	ldr	r2, [pc, #36]	; (20c48 <lll_adv_prepare+0x6c>)
   20c22:	490c      	ldr	r1, [pc, #48]	; (20c54 <lll_adv_prepare+0x78>)
   20c24:	480a      	ldr	r0, [pc, #40]	; (20c50 <lll_adv_prepare+0x74>)
   20c26:	f240 239d 	movw	r3, #669	; 0x29d
   20c2a:	f006 fc83 	bl	27534 <assert_print>
   20c2e:	4040      	eors	r0, r0
   20c30:	f380 8811 	msr	BASEPRI, r0
   20c34:	f04f 0003 	mov.w	r0, #3
   20c38:	df02      	svc	2
   20c3a:	e7d6      	b.n	20bea <lll_adv_prepare+0xe>
   20c3c:	00020a99 	.word	0x00020a99
   20c40:	00020699 	.word	0x00020699
   20c44:	00020629 	.word	0x00020629
   20c48:	00030358 	.word	0x00030358
   20c4c:	000303dc 	.word	0x000303dc
   20c50:	0002f8a0 	.word	0x0002f8a0
   20c54:	00030308 	.word	0x00030308

00020c58 <lll_adv_scan_req_check>:
{
   20c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   20c5c:	f890 c009 	ldrb.w	ip, [r0, #9]
{
   20c60:	f89d 8018 	ldrb.w	r8, [sp, #24]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   20c64:	f01c 0f01 	tst.w	ip, #1
{
   20c68:	460f      	mov	r7, r1
   20c6a:	4616      	mov	r6, r2
   20c6c:	461d      	mov	r5, r3
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   20c6e:	d009      	beq.n	20c84 <lll_adv_scan_req_check+0x2c>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   20c70:	f1b8 0f00 	cmp.w	r8, #0
   20c74:	d016      	beq.n	20ca4 <lll_adv_scan_req_check+0x4c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   20c76:	783b      	ldrb	r3, [r7, #0]
   20c78:	ebb6 1fd3 	cmp.w	r6, r3, lsr #7
   20c7c:	d019      	beq.n	20cb2 <lll_adv_scan_req_check+0x5a>
{
   20c7e:	2000      	movs	r0, #0
}
   20c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20c84:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   20c86:	f811 0b02 	ldrb.w	r0, [r1], #2
   20c8a:	9a07      	ldr	r2, [sp, #28]
   20c8c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   20c90:	f7fe fe64 	bl	1f95c <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   20c94:	2800      	cmp	r0, #0
   20c96:	d1ee      	bne.n	20c76 <lll_adv_scan_req_check+0x1e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   20c98:	7a63      	ldrb	r3, [r4, #9]
						rl_idx)) ||
   20c9a:	07db      	lsls	r3, r3, #31
   20c9c:	d5ef      	bpl.n	20c7e <lll_adv_scan_req_check+0x26>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   20c9e:	f1b8 0f00 	cmp.w	r8, #0
   20ca2:	d1e8      	bne.n	20c76 <lll_adv_scan_req_check+0x1e>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   20ca4:	9b07      	ldr	r3, [sp, #28]
   20ca6:	7818      	ldrb	r0, [r3, #0]
   20ca8:	f7fe fe28 	bl	1f8fc <ull_filter_lll_irk_in_fal>
   20cac:	2800      	cmp	r0, #0
   20cae:	d1e2      	bne.n	20c76 <lll_adv_scan_req_check+0x1e>
   20cb0:	e7e5      	b.n	20c7e <lll_adv_scan_req_check+0x26>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   20cb2:	2206      	movs	r2, #6
   20cb4:	f107 0108 	add.w	r1, r7, #8
   20cb8:	4628      	mov	r0, r5
   20cba:	f008 fb33 	bl	29324 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   20cbe:	fab0 f080 	clz	r0, r0
   20cc2:	0940      	lsrs	r0, r0, #5
}
   20cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020cc8 <lll_adv_connect_ind_check>:
{
   20cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20ccc:	461f      	mov	r7, r3
	if (tgt_addr) {
   20cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
   20cd0:	f89d 9020 	ldrb.w	r9, [sp, #32]
   20cd4:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   20cd8:	4605      	mov	r5, r0
   20cda:	460c      	mov	r4, r1
   20cdc:	4690      	mov	r8, r2
	if (tgt_addr) {
   20cde:	b9fb      	cbnz	r3, 20d20 <lll_adv_connect_ind_check+0x58>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) &&
   20ce0:	7a43      	ldrb	r3, [r0, #9]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   20ce2:	079a      	lsls	r2, r3, #30
   20ce4:	d507      	bpl.n	20cf6 <lll_adv_connect_ind_check+0x2e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   20ce6:	b1a6      	cbz	r6, 20d12 <lll_adv_connect_ind_check+0x4a>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   20ce8:	7823      	ldrb	r3, [r4, #0]
   20cea:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   20cee:	d03a      	beq.n	20d66 <lll_adv_connect_ind_check+0x9e>
   20cf0:	2000      	movs	r0, #0
}
   20cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   20cf6:	f811 0b02 	ldrb.w	r0, [r1], #2
   20cfa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   20cfc:	f3c0 1080 	ubfx	r0, r0, #6, #1
   20d00:	f7fe fe2c 	bl	1f95c <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) &&
   20d04:	2800      	cmp	r0, #0
   20d06:	d1ef      	bne.n	20ce8 <lll_adv_connect_ind_check+0x20>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   20d08:	7a6b      	ldrb	r3, [r5, #9]
						rl_idx)) ||
   20d0a:	079b      	lsls	r3, r3, #30
   20d0c:	d5f0      	bpl.n	20cf0 <lll_adv_connect_ind_check+0x28>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   20d0e:	2e00      	cmp	r6, #0
   20d10:	d1ea      	bne.n	20ce8 <lll_adv_connect_ind_check+0x20>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   20d12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20d14:	7818      	ldrb	r0, [r3, #0]
   20d16:	f7fe fdf1 	bl	1f8fc <ull_filter_lll_irk_in_fal>
   20d1a:	2800      	cmp	r0, #0
   20d1c:	d1e4      	bne.n	20ce8 <lll_adv_connect_ind_check+0x20>
   20d1e:	e7e7      	b.n	20cf0 <lll_adv_connect_ind_check+0x28>
						      ci->connect_ind.init_addr,
   20d20:	468a      	mov	sl, r1
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   20d22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   20d24:	f81a 0b02 	ldrb.w	r0, [sl], #2
   20d28:	f3c0 1080 	ubfx	r0, r0, #6, #1
   20d2c:	4651      	mov	r1, sl
   20d2e:	f7fe fe15 	bl	1f95c <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   20d32:	2800      	cmp	r0, #0
   20d34:	d0dc      	beq.n	20cf0 <lll_adv_connect_ind_check+0x28>
	return (tx_addr == ci->rx_addr) &&
   20d36:	7823      	ldrb	r3, [r4, #0]
   20d38:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   20d3c:	d1d8      	bne.n	20cf0 <lll_adv_connect_ind_check+0x28>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   20d3e:	4638      	mov	r0, r7
   20d40:	2206      	movs	r2, #6
   20d42:	f104 0108 	add.w	r1, r4, #8
   20d46:	f008 faed 	bl	29324 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   20d4a:	2800      	cmp	r0, #0
   20d4c:	d1d0      	bne.n	20cf0 <lll_adv_connect_ind_check+0x28>
		       isr_rx_ci_tgta_check(lll, rx_addr, tgt_addr, ci,
   20d4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20d50:	7818      	ldrb	r0, [r3, #0]
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   20d52:	28ff      	cmp	r0, #255	; 0xff
   20d54:	d011      	beq.n	20d7a <lll_adv_connect_ind_check+0xb2>
   20d56:	7aab      	ldrb	r3, [r5, #10]
   20d58:	2bff      	cmp	r3, #255	; 0xff
   20d5a:	d00e      	beq.n	20d7a <lll_adv_connect_ind_check+0xb2>
		return rl_idx == lll->rl_idx;
   20d5c:	1ac0      	subs	r0, r0, r3
   20d5e:	fab0 f080 	clz	r0, r0
   20d62:	0940      	lsrs	r0, r0, #5
   20d64:	e7c5      	b.n	20cf2 <lll_adv_connect_ind_check+0x2a>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   20d66:	2206      	movs	r2, #6
   20d68:	f104 0108 	add.w	r1, r4, #8
   20d6c:	4638      	mov	r0, r7
   20d6e:	f008 fad9 	bl	29324 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   20d72:	fab0 f080 	clz	r0, r0
   20d76:	0940      	lsrs	r0, r0, #5
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   20d78:	e7bb      	b.n	20cf2 <lll_adv_connect_ind_check+0x2a>
	return (rx_addr == ci->tx_addr) &&
   20d7a:	7823      	ldrb	r3, [r4, #0]
   20d7c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   20d80:	454b      	cmp	r3, r9
   20d82:	d1b5      	bne.n	20cf0 <lll_adv_connect_ind_check+0x28>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   20d84:	9809      	ldr	r0, [sp, #36]	; 0x24
   20d86:	2206      	movs	r2, #6
   20d88:	4651      	mov	r1, sl
   20d8a:	f008 facb 	bl	29324 <memcmp>
	return (rx_addr == ci->tx_addr) &&
   20d8e:	fab0 f080 	clz	r0, r0
   20d92:	0940      	lsrs	r0, r0, #5
   20d94:	e7ad      	b.n	20cf2 <lll_adv_connect_ind_check+0x2a>
   20d96:	bf00      	nop

00020d98 <isr_rx>:
{
   20d98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20d9c:	b08b      	sub	sp, #44	; 0x2c
   20d9e:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   20da0:	f000 ffc4 	bl	21d2c <radio_is_done>
	if (trx_done) {
   20da4:	b2c0      	uxtb	r0, r0
   20da6:	b950      	cbnz	r0, 20dbe <isr_rx+0x26>
	lll_isr_status_reset();
   20da8:	f7ff f9de 	bl	20168 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   20dac:	487c      	ldr	r0, [pc, #496]	; (20fa0 <isr_rx+0x208>)
   20dae:	4621      	mov	r1, r4
   20db0:	f000 fea2 	bl	21af8 <radio_isr_set>
}
   20db4:	b00b      	add	sp, #44	; 0x2c
   20db6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	radio_disable();
   20dba:	f000 bf8d 	b.w	21cd8 <radio_disable>
		crc_ok = radio_crc_is_valid();
   20dbe:	f000 ffd5 	bl	21d6c <radio_crc_is_valid>
   20dc2:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   20dc4:	f001 f8de 	bl	21f84 <radio_filter_has_match>
   20dc8:	4681      	mov	r9, r0
		devmatch_id = radio_filter_match_get();
   20dca:	f001 f8e5 	bl	21f98 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   20dce:	f001 fac9 	bl	22364 <radio_ar_has_match>
   20dd2:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   20dd4:	f001 faaa 	bl	2232c <radio_ar_match_get>
	if (crc_ok) {
   20dd8:	b2ed      	uxtb	r5, r5
		irkmatch_id = radio_ar_match_get();
   20dda:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   20ddc:	f001 f896 	bl	21f0c <radio_rssi_is_ready>
	lll_isr_status_reset();
   20de0:	f7ff f9c2 	bl	20168 <lll_isr_status_reset>
	if (crc_ok) {
   20de4:	2d00      	cmp	r5, #0
   20de6:	d0e1      	beq.n	20dac <isr_rx+0x14>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   20de8:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   20dec:	d17a      	bne.n	20ee4 <isr_rx+0x14c>
   20dee:	23ff      	movs	r3, #255	; 0xff
	node_rx = ull_pdu_rx_alloc_peek(1);
   20df0:	2001      	movs	r0, #1
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   20df2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	node_rx = ull_pdu_rx_alloc_peek(1);
   20df6:	f7f7 feb3 	bl	18b60 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   20dfa:	4605      	mov	r5, r0
   20dfc:	2800      	cmp	r0, #0
   20dfe:	f000 80a2 	beq.w	20f46 <isr_rx+0x1ae>
   20e02:	7b23      	ldrb	r3, [r4, #12]
   20e04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	pdu_rx = (void *)node_rx->pdu;
   20e08:	f105 011c 	add.w	r1, r5, #28
   20e0c:	691f      	ldr	r7, [r3, #16]
	addr = pdu_adv->adv_ind.addr;
   20e0e:	463b      	mov	r3, r7
		devmatch_ok = radio_filter_has_match();
   20e10:	fa5f f989 	uxtb.w	r9, r9
	tx_addr = pdu_adv->tx_addr;
   20e14:	f813 0b02 	ldrb.w	r0, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   20e18:	f000 0c0f 	and.w	ip, r0, #15
   20e1c:	f1bc 0f01 	cmp.w	ip, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   20e20:	bf08      	it	eq
   20e22:	f107 0808 	addeq.w	r8, r7, #8
	tx_addr = pdu_adv->tx_addr;
   20e26:	f3c0 1280 	ubfx	r2, r0, #6, #1
	rx_addr = pdu_adv->rx_addr;
   20e2a:	ea4f 17d0 	mov.w	r7, r0, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   20e2e:	7f28      	ldrb	r0, [r5, #28]
   20e30:	f000 000f 	and.w	r0, r0, #15
		tgt_addr = NULL;
   20e34:	bf18      	it	ne
   20e36:	f04f 0800 	movne.w	r8, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   20e3a:	2803      	cmp	r0, #3
   20e3c:	d05a      	beq.n	20ef4 <isr_rx+0x15c>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   20e3e:	2805      	cmp	r0, #5
   20e40:	d1b4      	bne.n	20dac <isr_rx+0x14>
   20e42:	7f68      	ldrb	r0, [r5, #29]
   20e44:	2822      	cmp	r0, #34	; 0x22
   20e46:	d1b1      	bne.n	20dac <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   20e48:	6860      	ldr	r0, [r4, #4]
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   20e4a:	2800      	cmp	r0, #0
   20e4c:	d0ae      	beq.n	20dac <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   20e4e:	f890 0020 	ldrb.w	r0, [r0, #32]
   20e52:	0780      	lsls	r0, r0, #30
   20e54:	d4aa      	bmi.n	20dac <isr_rx+0x14>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   20e56:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   20e5a:	9003      	str	r0, [sp, #12]
   20e5c:	e9cd 8901 	strd	r8, r9, [sp, #4]
   20e60:	9700      	str	r7, [sp, #0]
   20e62:	4620      	mov	r0, r4
   20e64:	f7ff ff30 	bl	20cc8 <lll_adv_connect_ind_check>
		   lll->conn && !lll->conn->periph.cancelled &&
   20e68:	2800      	cmp	r0, #0
   20e6a:	d09f      	beq.n	20dac <isr_rx+0x14>
			rx = ull_pdu_rx_alloc_peek(4);
   20e6c:	2004      	movs	r0, #4
   20e6e:	f7f7 fe77 	bl	18b60 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   20e72:	2800      	cmp	r0, #0
   20e74:	d09a      	beq.n	20dac <isr_rx+0x14>
		radio_isr_set(isr_abort, lll);
   20e76:	484b      	ldr	r0, [pc, #300]	; (20fa4 <isr_rx+0x20c>)
   20e78:	4621      	mov	r1, r4
   20e7a:	f000 fe3d 	bl	21af8 <radio_isr_set>
		radio_disable();
   20e7e:	f000 ff2b 	bl	21cd8 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   20e82:	f000 ff49 	bl	21d18 <radio_is_ready>
   20e86:	2800      	cmp	r0, #0
   20e88:	d14f      	bne.n	20f2a <isr_rx+0x192>
		lll->conn->periph.initiated = 1;
   20e8a:	6862      	ldr	r2, [r4, #4]
   20e8c:	f892 3020 	ldrb.w	r3, [r2, #32]
   20e90:	f043 0301 	orr.w	r3, r3, #1
   20e94:	f882 3020 	strb.w	r3, [r2, #32]
		rx = ull_pdu_rx_alloc();
   20e98:	f7f7 fe82 	bl	18ba0 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   20e9c:	2217      	movs	r2, #23
		rx->hdr.handle = 0xffff;
   20e9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   20ea2:	7102      	strb	r2, [r0, #4]
		rx->hdr.handle = 0xffff;
   20ea4:	80c3      	strh	r3, [r0, #6]
		ftr->param = lll;
   20ea6:	6084      	str	r4, [r0, #8]
		rx = ull_pdu_rx_alloc();
   20ea8:	4605      	mov	r5, r0
		ftr->ticks_anchor = radio_tmr_start_get();
   20eaa:	f001 f919 	bl	220e0 <radio_tmr_start_get>
   20eae:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   20eb0:	f001 f96a 	bl	22188 <radio_tmr_end_get>
				    radio_rx_chain_delay_get(0, 0);
   20eb4:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   20eb6:	4604      	mov	r4, r0
				    radio_rx_chain_delay_get(0, 0);
   20eb8:	4608      	mov	r0, r1
   20eba:	f000 ff01 	bl	21cc0 <radio_rx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   20ebe:	1a24      	subs	r4, r4, r0
   20ec0:	616c      	str	r4, [r5, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   20ec2:	b1ae      	cbz	r6, 20ef0 <isr_rx+0x158>
   20ec4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   20ec8:	766b      	strb	r3, [r5, #25]
			ftr->extra = ull_pdu_rx_alloc();
   20eca:	f7f7 fe69 	bl	18ba0 <ull_pdu_rx_alloc>
   20ece:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
   20ed0:	4629      	mov	r1, r5
   20ed2:	6828      	ldr	r0, [r5, #0]
			ftr->extra = ull_pdu_rx_alloc();
   20ed4:	60eb      	str	r3, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
   20ed6:	f7f7 fe79 	bl	18bcc <ull_rx_put>
		ull_rx_sched();
   20eda:	f7f7 fe87 	bl	18bec <ull_rx_sched>
}
   20ede:	b00b      	add	sp, #44	; 0x2c
   20ee0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   20ee4:	fa5f f088 	uxtb.w	r0, r8
   20ee8:	f7fe fcb6 	bl	1f858 <ull_filter_lll_rl_irk_idx>
   20eec:	4603      	mov	r3, r0
   20eee:	e77f      	b.n	20df0 <isr_rx+0x58>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   20ef0:	23ff      	movs	r3, #255	; 0xff
   20ef2:	e7e9      	b.n	20ec8 <isr_rx+0x130>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   20ef4:	7f68      	ldrb	r0, [r5, #29]
   20ef6:	280c      	cmp	r0, #12
   20ef8:	f47f af58 	bne.w	20dac <isr_rx+0x14>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   20efc:	f1b8 0f00 	cmp.w	r8, #0
   20f00:	f47f af54 	bne.w	20dac <isr_rx+0x14>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   20f04:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   20f08:	9001      	str	r0, [sp, #4]
   20f0a:	f8cd 9000 	str.w	r9, [sp]
   20f0e:	4620      	mov	r0, r4
   20f10:	e9cd 2306 	strd	r2, r3, [sp, #24]
   20f14:	9105      	str	r1, [sp, #20]
   20f16:	f7ff fe9f 	bl	20c58 <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   20f1a:	bb10      	cbnz	r0, 20f62 <isr_rx+0x1ca>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   20f1c:	7f28      	ldrb	r0, [r5, #28]
   20f1e:	9b07      	ldr	r3, [sp, #28]
   20f20:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
   20f24:	f000 000f 	and.w	r0, r0, #15
   20f28:	e789      	b.n	20e3e <isr_rx+0xa6>
		LL_ASSERT(!radio_is_ready());
   20f2a:	4a1f      	ldr	r2, [pc, #124]	; (20fa8 <isr_rx+0x210>)
   20f2c:	491f      	ldr	r1, [pc, #124]	; (20fac <isr_rx+0x214>)
   20f2e:	4820      	ldr	r0, [pc, #128]	; (20fb0 <isr_rx+0x218>)
   20f30:	f240 6312 	movw	r3, #1554	; 0x612
   20f34:	f006 fafe 	bl	27534 <assert_print>
   20f38:	4040      	eors	r0, r0
   20f3a:	f380 8811 	msr	BASEPRI, r0
   20f3e:	f04f 0003 	mov.w	r0, #3
   20f42:	df02      	svc	2
   20f44:	e7a1      	b.n	20e8a <isr_rx+0xf2>
	LL_ASSERT(node_rx);
   20f46:	4a18      	ldr	r2, [pc, #96]	; (20fa8 <isr_rx+0x210>)
   20f48:	491a      	ldr	r1, [pc, #104]	; (20fb4 <isr_rx+0x21c>)
   20f4a:	4819      	ldr	r0, [pc, #100]	; (20fb0 <isr_rx+0x218>)
   20f4c:	f240 53b2 	movw	r3, #1458	; 0x5b2
   20f50:	f006 faf0 	bl	27534 <assert_print>
   20f54:	4040      	eors	r0, r0
   20f56:	f380 8811 	msr	BASEPRI, r0
   20f5a:	f04f 0003 	mov.w	r0, #3
   20f5e:	df02      	svc	2
   20f60:	e74f      	b.n	20e02 <isr_rx+0x6a>
		radio_isr_set(isr_done, lll);
   20f62:	4621      	mov	r1, r4
   20f64:	480e      	ldr	r0, [pc, #56]	; (20fa0 <isr_rx+0x208>)
   20f66:	f000 fdc7 	bl	21af8 <radio_isr_set>
		radio_switch_complete_and_disable();
   20f6a:	f000 ffb9 	bl	21ee0 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   20f6e:	7e23      	ldrb	r3, [r4, #24]
   20f70:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   20f74:	69e0      	ldr	r0, [r4, #28]
   20f76:	f000 fe99 	bl	21cac <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   20f7a:	f000 fecd 	bl	21d18 <radio_is_ready>
   20f7e:	2800      	cmp	r0, #0
   20f80:	d0ad      	beq.n	20ede <isr_rx+0x146>
   20f82:	4a09      	ldr	r2, [pc, #36]	; (20fa8 <isr_rx+0x210>)
   20f84:	4909      	ldr	r1, [pc, #36]	; (20fac <isr_rx+0x214>)
   20f86:	480a      	ldr	r0, [pc, #40]	; (20fb0 <isr_rx+0x218>)
   20f88:	f240 53cb 	movw	r3, #1483	; 0x5cb
   20f8c:	f006 fad2 	bl	27534 <assert_print>
   20f90:	4040      	eors	r0, r0
   20f92:	f380 8811 	msr	BASEPRI, r0
   20f96:	f04f 0003 	mov.w	r0, #3
   20f9a:	df02      	svc	2
		if (!err) {
   20f9c:	e79f      	b.n	20ede <isr_rx+0x146>
   20f9e:	bf00      	nop
   20fa0:	00020a49 	.word	0x00020a49
   20fa4:	00020531 	.word	0x00020531
   20fa8:	00030358 	.word	0x00030358
   20fac:	000303ac 	.word	0x000303ac
   20fb0:	0002f8a0 	.word	0x0002f8a0
   20fb4:	000303a4 	.word	0x000303a4

00020fb8 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   20fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20fba:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   20fbc:	f7ff f8d4 	bl	20168 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   20fc0:	f7f7 fed2 	bl	18d68 <ull_event_done_extra_get>
	LL_ASSERT(e);
   20fc4:	4604      	mov	r4, r0
   20fc6:	2800      	cmp	r0, #0
   20fc8:	d036      	beq.n	21038 <isr_done+0x80>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
	e->crc_valid = crc_valid;
   20fca:	4922      	ldr	r1, [pc, #136]	; (21054 <isr_done+0x9c>)
   20fcc:	79a2      	ldrb	r2, [r4, #6]
   20fce:	7808      	ldrb	r0, [r1, #0]
	e->trx_cnt = trx_cnt;
   20fd0:	4b21      	ldr	r3, [pc, #132]	; (21058 <isr_done+0xa0>)
	e->crc_valid = crc_valid;
   20fd2:	f360 0200 	bfi	r2, r0, #0, #1
   20fd6:	71a2      	strb	r2, [r4, #6]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   20fd8:	4a20      	ldr	r2, [pc, #128]	; (2105c <isr_done+0xa4>)
	e->trx_cnt = trx_cnt;
   20fda:	881b      	ldrh	r3, [r3, #0]
	e->mic_state = mic_state;
   20fdc:	7812      	ldrb	r2, [r2, #0]
	e->trx_cnt = trx_cnt;
   20fde:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   20fe0:	2101      	movs	r1, #1
   20fe2:	7021      	strb	r1, [r4, #0]
	e->mic_state = mic_state;
   20fe4:	71e2      	strb	r2, [r4, #7]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   20fe6:	b11b      	cbz	r3, 20ff0 <isr_done+0x38>
		struct lll_conn *lll = param;

		if (lll->role) {
   20fe8:	f995 301d 	ldrsb.w	r3, [r5, #29]
   20fec:	2b00      	cmp	r3, #0
   20fee:	db04      	blt.n	20ffa <isr_done+0x42>
			lll->periph.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   20ff0:	4628      	mov	r0, r5
}
   20ff2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   20ff6:	f7ff b8c5 	b.w	20184 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   20ffa:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
   20ffe:	f003 0307 	and.w	r3, r3, #7
 */
#define HCTO_START_DELAY_US 1U

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   21002:	2b02      	cmp	r3, #2
   21004:	d016      	beq.n	21034 <isr_done+0x7c>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   21006:	2b04      	cmp	r3, #4
   21008:	bf14      	ite	ne
   2100a:	2728      	movne	r7, #40	; 0x28
   2100c:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   21010:	f001 f8a6 	bl	22160 <radio_tmr_aa_restore>
   21014:	4606      	mov	r6, r0
   21016:	f001 f8a9 	bl	2216c <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   2101a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   2101c:	6127      	str	r7, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   2101e:	1a36      	subs	r6, r6, r0
			e->drift.window_widening_event_us =
   21020:	e9c4 6302 	strd	r6, r3, [r4, #8]
			lll->periph.window_widening_event_us = 0;
   21024:	2300      	movs	r3, #0
   21026:	632b      	str	r3, [r5, #48]	; 0x30
			lll->periph.window_size_event_us = 0;
   21028:	63ab      	str	r3, [r5, #56]	; 0x38
	lll_isr_cleanup(param);
   2102a:	4628      	mov	r0, r5
}
   2102c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   21030:	f7ff b8a8 	b.w	20184 <lll_isr_cleanup>
	switch (phy) {
   21034:	2718      	movs	r7, #24
   21036:	e7eb      	b.n	21010 <isr_done+0x58>
	LL_ASSERT(e);
   21038:	4a09      	ldr	r2, [pc, #36]	; (21060 <isr_done+0xa8>)
   2103a:	490a      	ldr	r1, [pc, #40]	; (21064 <isr_done+0xac>)
   2103c:	480a      	ldr	r0, [pc, #40]	; (21068 <isr_done+0xb0>)
   2103e:	f44f 7347 	mov.w	r3, #796	; 0x31c
   21042:	f006 fa77 	bl	27534 <assert_print>
   21046:	4040      	eors	r0, r0
   21048:	f380 8811 	msr	BASEPRI, r0
   2104c:	f04f 0003 	mov.w	r0, #3
   21050:	df02      	svc	2
   21052:	e7ba      	b.n	20fca <isr_done+0x12>
   21054:	20002d89 	.word	0x20002d89
   21058:	20002cd6 	.word	0x20002cd6
   2105c:	20002d8a 	.word	0x20002d8a
   21060:	000303f0 	.word	0x000303f0
   21064:	0002fc3c 	.word	0x0002fc3c
   21068:	0002f8a0 	.word	0x0002f8a0

0002106c <lll_conn_init>:
{
   2106c:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   2106e:	f000 fe87 	bl	21d80 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   21072:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   21074:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   21076:	2101      	movs	r1, #1
   21078:	f361 0201 	bfi	r2, r1, #0, #2
}
   2107c:	2000      	movs	r0, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   2107e:	701a      	strb	r2, [r3, #0]
}
   21080:	bd08      	pop	{r3, pc}
   21082:	bf00      	nop

00021084 <lll_conn_reset>:
}
   21084:	2000      	movs	r0, #0
   21086:	4770      	bx	lr

00021088 <lll_conn_flush>:
}
   21088:	4770      	bx	lr
   2108a:	bf00      	nop

0002108c <lll_conn_prepare_reset>:
	crc_valid = 0U;
   2108c:	4805      	ldr	r0, [pc, #20]	; (210a4 <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   2108e:	4906      	ldr	r1, [pc, #24]	; (210a8 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   21090:	4a06      	ldr	r2, [pc, #24]	; (210ac <lll_conn_prepare_reset+0x20>)
{
   21092:	b410      	push	{r4}
	trx_cnt = 0U;
   21094:	2300      	movs	r3, #0
   21096:	4c06      	ldr	r4, [pc, #24]	; (210b0 <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   21098:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   2109a:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   2109c:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   2109e:	8023      	strh	r3, [r4, #0]
}
   210a0:	bc10      	pop	{r4}
   210a2:	4770      	bx	lr
   210a4:	20002d89 	.word	0x20002d89
   210a8:	20002d88 	.word	0x20002d88
   210ac:	20002d8a 	.word	0x20002d8a
   210b0:	20002cd6 	.word	0x20002cd6

000210b4 <lll_conn_abort_cb>:
{
   210b4:	b538      	push	{r3, r4, r5, lr}
	if (!prepare_param) {
   210b6:	b1e8      	cbz	r0, 210f4 <lll_conn_abort_cb+0x40>
	err = lll_hfclock_off();
   210b8:	460d      	mov	r5, r1
   210ba:	4604      	mov	r4, r0
   210bc:	f7ff fa12 	bl	204e4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   210c0:	2800      	cmp	r0, #0
   210c2:	db0a      	blt.n	210da <lll_conn_abort_cb+0x26>
	lll = prepare_param->param;
   210c4:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   210c6:	8923      	ldrh	r3, [r4, #8]
   210c8:	8a51      	ldrh	r1, [r2, #18]
   210ca:	3301      	adds	r3, #1
   210cc:	440b      	add	r3, r1
   210ce:	8253      	strh	r3, [r2, #18]
	lll_done(param);
   210d0:	4628      	mov	r0, r5
}
   210d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   210d6:	f7fe bf7d 	b.w	1ffd4 <lll_done>
	LL_ASSERT(err >= 0);
   210da:	4a0a      	ldr	r2, [pc, #40]	; (21104 <lll_conn_abort_cb+0x50>)
   210dc:	490a      	ldr	r1, [pc, #40]	; (21108 <lll_conn_abort_cb+0x54>)
   210de:	480b      	ldr	r0, [pc, #44]	; (2110c <lll_conn_abort_cb+0x58>)
   210e0:	23aa      	movs	r3, #170	; 0xaa
   210e2:	f006 fa27 	bl	27534 <assert_print>
   210e6:	4040      	eors	r0, r0
   210e8:	f380 8811 	msr	BASEPRI, r0
   210ec:	f04f 0003 	mov.w	r0, #3
   210f0:	df02      	svc	2
   210f2:	e7e7      	b.n	210c4 <lll_conn_abort_cb+0x10>
		radio_isr_set(isr_done, param);
   210f4:	4806      	ldr	r0, [pc, #24]	; (21110 <lll_conn_abort_cb+0x5c>)
   210f6:	f000 fcff 	bl	21af8 <radio_isr_set>
}
   210fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   210fe:	f000 bdeb 	b.w	21cd8 <radio_disable>
   21102:	bf00      	nop
   21104:	000303f0 	.word	0x000303f0
   21108:	00030308 	.word	0x00030308
   2110c:	0002f8a0 	.word	0x0002f8a0
   21110:	00020fb9 	.word	0x00020fb9

00021114 <lll_conn_rx_pkt_set>:
{
   21114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21116:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   21118:	2001      	movs	r0, #1
   2111a:	f7f7 fd21 	bl	18b60 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   2111e:	4604      	mov	r4, r0
   21120:	b348      	cbz	r0, 21176 <lll_conn_rx_pkt_set+0x62>
	phy = lll->phy_rx;
   21122:	f895 6045 	ldrb.w	r6, [r5, #69]	; 0x45
	max_rx_octets = lll->max_rx_octets;
   21126:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
	phy = lll->phy_rx;
   21128:	f006 0607 	and.w	r6, r6, #7
	radio_phy_set(phy, 0);
   2112c:	2100      	movs	r1, #0
   2112e:	4630      	mov	r0, r6
   21130:	f000 fd48 	bl	21bc4 <radio_phy_set>
	} else if (lll->enc_rx) {
   21134:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
				    RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   21138:	0072      	lsls	r2, r6, #1
	} else if (lll->enc_rx) {
   2113a:	071b      	lsls	r3, r3, #28
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   2113c:	b2f9      	uxtb	r1, r7
   2113e:	f042 0201 	orr.w	r2, r2, #1
						      node_rx->pdu));
   21142:	f104 041c 	add.w	r4, r4, #28
	} else if (lll->enc_rx) {
   21146:	d50e      	bpl.n	21166 <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   21148:	3104      	adds	r1, #4
   2114a:	b2c9      	uxtb	r1, r1
   2114c:	2008      	movs	r0, #8
   2114e:	f000 fd7f 	bl	21c50 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   21152:	4622      	mov	r2, r4
   21154:	4631      	mov	r1, r6
   21156:	f105 005f 	add.w	r0, r5, #95	; 0x5f
   2115a:	f001 f821 	bl	221a0 <radio_ccm_rx_pkt_set>
}
   2115e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   21162:	f000 bd9d 	b.w	21ca0 <radio_pkt_rx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_rx_octets,
   21166:	2008      	movs	r0, #8
   21168:	f000 fd72 	bl	21c50 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   2116c:	4620      	mov	r0, r4
}
   2116e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   21172:	f000 bd95 	b.w	21ca0 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   21176:	4a07      	ldr	r2, [pc, #28]	; (21194 <lll_conn_rx_pkt_set+0x80>)
   21178:	4907      	ldr	r1, [pc, #28]	; (21198 <lll_conn_rx_pkt_set+0x84>)
   2117a:	4808      	ldr	r0, [pc, #32]	; (2119c <lll_conn_rx_pkt_set+0x88>)
   2117c:	f240 235f 	movw	r3, #607	; 0x25f
   21180:	f006 f9d8 	bl	27534 <assert_print>
   21184:	4040      	eors	r0, r0
   21186:	f380 8811 	msr	BASEPRI, r0
   2118a:	f04f 0003 	mov.w	r0, #3
   2118e:	df02      	svc	2
   21190:	e7c7      	b.n	21122 <lll_conn_rx_pkt_set+0xe>
   21192:	bf00      	nop
   21194:	000303f0 	.word	0x000303f0
   21198:	000303a4 	.word	0x000303a4
   2119c:	0002f8a0 	.word	0x0002f8a0

000211a0 <lll_conn_isr_tx>:
{
   211a0:	b538      	push	{r3, r4, r5, lr}
   211a2:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   211a4:	f7fe ffce 	bl	20144 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   211a8:	2096      	movs	r0, #150	; 0x96
   211aa:	f000 ff0b 	bl	21fc4 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   211ae:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   211b2:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   211b6:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   211ba:	f000 0007 	and.w	r0, r0, #7
   211be:	f002 0207 	and.w	r2, r2, #7
   211c2:	2100      	movs	r1, #0
   211c4:	f000 fe2c 	bl	21e20 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   211c8:	4620      	mov	r0, r4
   211ca:	f7ff ffa3 	bl	21114 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   211ce:	f000 fda3 	bl	21d18 <radio_is_ready>
   211d2:	bb58      	cbnz	r0, 2122c <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + (EVENT_CLOCK_JITTER_US << 1) +
   211d4:	f000 ffde 	bl	22194 <radio_tmr_tifs_base_get>
   211d8:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   211da:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   211de:	2101      	movs	r1, #1
   211e0:	f000 0007 	and.w	r0, r0, #7
   211e4:	f000 fd6c 	bl	21cc0 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   211e8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   211ec:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   211f0:	4405      	add	r5, r0
   211f2:	2b02      	cmp	r3, #2
   211f4:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   211f8:	d016      	beq.n	21228 <lll_conn_isr_tx+0x88>
		return 376;
   211fa:	2b04      	cmp	r3, #4
   211fc:	bf14      	ite	ne
   211fe:	2328      	movne	r3, #40	; 0x28
   21200:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   21204:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
   21208:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   2120c:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   21210:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   21212:	f000 fd51 	bl	21cb8 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   21216:	1a28      	subs	r0, r5, r0
   21218:	f000 ff74 	bl	22104 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   2121c:	4621      	mov	r1, r4
   2121e:	480a      	ldr	r0, [pc, #40]	; (21248 <lll_conn_isr_tx+0xa8>)
}
   21220:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   21224:	f000 bc68 	b.w	21af8 <radio_isr_set>
	switch (phy) {
   21228:	2318      	movs	r3, #24
   2122a:	e7eb      	b.n	21204 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   2122c:	4a07      	ldr	r2, [pc, #28]	; (2124c <lll_conn_isr_tx+0xac>)
   2122e:	4908      	ldr	r1, [pc, #32]	; (21250 <lll_conn_isr_tx+0xb0>)
   21230:	4808      	ldr	r0, [pc, #32]	; (21254 <lll_conn_isr_tx+0xb4>)
   21232:	f44f 7305 	mov.w	r3, #532	; 0x214
   21236:	f006 f97d 	bl	27534 <assert_print>
   2123a:	4040      	eors	r0, r0
   2123c:	f380 8811 	msr	BASEPRI, r0
   21240:	f04f 0003 	mov.w	r0, #3
   21244:	df02      	svc	2
   21246:	e7c5      	b.n	211d4 <lll_conn_isr_tx+0x34>
   21248:	00021391 	.word	0x00021391
   2124c:	000303f0 	.word	0x000303f0
   21250:	000303ac 	.word	0x000303ac
   21254:	0002f8a0 	.word	0x0002f8a0

00021258 <lll_conn_tx_pkt_set>:
{
   21258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2125a:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   2125c:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
	max_tx_octets = lll->max_tx_octets;
   21260:	8f86      	ldrh	r6, [r0, #60]	; 0x3c
	phy = lll->phy_tx;
   21262:	f001 0407 	and.w	r4, r1, #7
{
   21266:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   21268:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   2126c:	4620      	mov	r0, r4
   2126e:	f000 fca9 	bl	21bc4 <radio_phy_set>
	} else if (lll->enc_tx) {
   21272:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   21276:	0062      	lsls	r2, r4, #1
	} else if (lll->enc_tx) {
   21278:	06db      	lsls	r3, r3, #27
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   2127a:	f042 0201 	orr.w	r2, r2, #1
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   2127e:	b2f1      	uxtb	r1, r6
	} else if (lll->enc_tx) {
   21280:	d50d      	bpl.n	2129e <lll_conn_tx_pkt_set+0x46>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   21282:	3104      	adds	r1, #4
   21284:	b2c9      	uxtb	r1, r1
   21286:	2008      	movs	r0, #8
   21288:	f000 fce2 	bl	21c50 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   2128c:	4639      	mov	r1, r7
   2128e:	f105 0080 	add.w	r0, r5, #128	; 0x80
   21292:	f000 ffc3 	bl	2221c <radio_ccm_tx_pkt_set>
}
   21296:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   2129a:	f000 bd07 	b.w	21cac <radio_pkt_tx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_tx_octets, pkt_flags);
   2129e:	2008      	movs	r0, #8
   212a0:	f000 fcd6 	bl	21c50 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   212a4:	4638      	mov	r0, r7
}
   212a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   212aa:	f000 bcff 	b.w	21cac <radio_pkt_tx_set>
   212ae:	bf00      	nop

000212b0 <lll_conn_pdu_tx_prep>:
{
   212b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   212b4:	4604      	mov	r4, r0
   212b6:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   212b8:	aa01      	add	r2, sp, #4
   212ba:	6c80      	ldr	r0, [r0, #72]	; 0x48
{
   212bc:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   212be:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   212c0:	f7f3 fffe 	bl	152c0 <memq_peek>
	if (lll->empty || !link) {
   212c4:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   212c8:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   212ca:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   212cc:	d432      	bmi.n	21334 <lll_conn_pdu_tx_prep+0x84>
   212ce:	2800      	cmp	r0, #0
   212d0:	d04e      	beq.n	21370 <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   212d2:	9b01      	ldr	r3, [sp, #4]
   212d4:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
   212d8:	f103 0804 	add.w	r8, r3, #4
		if (!lll->packet_tx_head_len) {
   212dc:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   212e0:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   212e4:	b913      	cbnz	r3, 212ec <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   212e6:	786b      	ldrb	r3, [r5, #1]
   212e8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		if (lll->packet_tx_head_offset) {
   212ec:	b137      	cbz	r7, 212fc <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   212ee:	f818 2007 	ldrb.w	r2, [r8, r7]
   212f2:	2101      	movs	r1, #1
   212f4:	f361 0201 	bfi	r2, r1, #0, #2
   212f8:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   212fc:	1bdb      	subs	r3, r3, r7
   212fe:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   21300:	4620      	mov	r0, r4
   21302:	f7fd f993 	bl	1e62c <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   21306:	786b      	ldrb	r3, [r5, #1]
   21308:	4283      	cmp	r3, r0
   2130a:	d924      	bls.n	21356 <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   2130c:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   2130e:	f818 3007 	ldrb.w	r3, [r8, r7]
   21312:	f043 0310 	orr.w	r3, r3, #16
   21316:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   2131a:	f818 3007 	ldrb.w	r3, [r8, r7]
   2131e:	f36f 1347 	bfc	r3, #5, #3
   21322:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   21326:	2300      	movs	r3, #0
   21328:	70ab      	strb	r3, [r5, #2]
	*pdu_data_tx = p;
   2132a:	f8c9 5000 	str.w	r5, [r9]
}
   2132e:	b003      	add	sp, #12
   21330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   21334:	f043 0304 	orr.w	r3, r3, #4
   21338:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   2133c:	f000 fd20 	bl	21d80 <radio_pkt_empty_get>
   21340:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   21342:	b1e6      	cbz	r6, 2137e <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   21344:	7803      	ldrb	r3, [r0, #0]
   21346:	f043 0310 	orr.w	r3, r3, #16
   2134a:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   2134c:	f8c9 5000 	str.w	r5, [r9]
}
   21350:	b003      	add	sp, #12
   21352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   21356:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   21358:	6832      	ldr	r2, [r6, #0]
   2135a:	429a      	cmp	r2, r3
			p->md = 1U;
   2135c:	f818 3007 	ldrb.w	r3, [r8, r7]
   21360:	bf14      	ite	ne
   21362:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   21366:	f36f 1304 	bfceq	r3, #4, #1
   2136a:	f808 3007 	strb.w	r3, [r8, r7]
   2136e:	e7d4      	b.n	2131a <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   21370:	f043 0304 	orr.w	r3, r3, #4
   21374:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   21378:	f000 fd02 	bl	21d80 <radio_pkt_empty_get>
   2137c:	4605      	mov	r5, r0
			p->md = 0U;
   2137e:	782b      	ldrb	r3, [r5, #0]
   21380:	f36f 1304 	bfc	r3, #4, #1
   21384:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   21386:	f8c9 5000 	str.w	r5, [r9]
}
   2138a:	b003      	add	sp, #12
   2138c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00021390 <lll_conn_isr_rx>:
{
   21390:	b5f0      	push	{r4, r5, r6, r7, lr}
   21392:	b083      	sub	sp, #12
   21394:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   21396:	f000 fcc9 	bl	21d2c <radio_is_done>
	if (trx_done) {
   2139a:	b2c0      	uxtb	r0, r0
   2139c:	b950      	cbnz	r0, 213b4 <lll_conn_isr_rx+0x24>
	lll_isr_rx_status_reset();
   2139e:	f7fe fed9 	bl	20154 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   213a2:	48ae      	ldr	r0, [pc, #696]	; (2165c <lll_conn_isr_rx+0x2cc>)
   213a4:	4621      	mov	r1, r4
   213a6:	f000 fba7 	bl	21af8 <radio_isr_set>
}
   213aa:	b003      	add	sp, #12
   213ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		radio_disable();
   213b0:	f000 bc92 	b.w	21cd8 <radio_disable>
		crc_ok = radio_crc_is_valid();
   213b4:	f000 fcda 	bl	21d6c <radio_crc_is_valid>
   213b8:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   213ba:	f000 fda7 	bl	21f0c <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   213be:	f7fe fec9 	bl	20154 <lll_isr_rx_status_reset>
	trx_cnt++;
   213c2:	4aa7      	ldr	r2, [pc, #668]	; (21660 <lll_conn_isr_rx+0x2d0>)
   213c4:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   213c6:	2001      	movs	r0, #1
	trx_cnt++;
   213c8:	4403      	add	r3, r0
   213ca:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   213cc:	f7f7 fbc8 	bl	18b60 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   213d0:	4606      	mov	r6, r0
   213d2:	2800      	cmp	r0, #0
   213d4:	f000 80bf 	beq.w	21556 <lll_conn_isr_rx+0x1c6>
	if (crc_ok) {
   213d8:	2d00      	cmp	r5, #0
   213da:	d155      	bne.n	21488 <lll_conn_isr_rx+0xf8>
		if (crc_expire == 0U) {
   213dc:	4ba1      	ldr	r3, [pc, #644]	; (21664 <lll_conn_isr_rx+0x2d4>)
   213de:	781f      	ldrb	r7, [r3, #0]
   213e0:	2f00      	cmp	r7, #0
   213e2:	f040 80a7 	bne.w	21534 <lll_conn_isr_rx+0x1a4>
		crc_expire--;
   213e6:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   213e8:	a901      	add	r1, sp, #4
   213ea:	4620      	mov	r0, r4
		crc_expire--;
   213ec:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   213ee:	f7ff ff5f 	bl	212b0 <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   213f2:	2096      	movs	r0, #150	; 0x96
   213f4:	f000 fde6 	bl	21fc4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   213f8:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   213fc:	f000 0007 	and.w	r0, r0, #7
   21400:	f000 fcc6 	bl	21d90 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   21404:	4898      	ldr	r0, [pc, #608]	; (21668 <lll_conn_isr_rx+0x2d8>)
   21406:	4621      	mov	r1, r4
   21408:	f000 fb76 	bl	21af8 <radio_isr_set>
		radio_tmr_end_capture();
   2140c:	f000 feb4 	bl	22178 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   21410:	9901      	ldr	r1, [sp, #4]
   21412:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
	pdu_data_tx->nesn = lll->nesn;
   21416:	780b      	ldrb	r3, [r1, #0]
   21418:	f023 000c 	bic.w	r0, r3, #12
   2141c:	f3c2 0340 	ubfx	r3, r2, #1, #1
   21420:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   21422:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   21426:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   2142a:	4303      	orrs	r3, r0
   2142c:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   2142e:	4620      	mov	r0, r4
   21430:	f7ff ff12 	bl	21258 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   21434:	f000 fc70 	bl	21d18 <radio_is_ready>
   21438:	2800      	cmp	r0, #0
   2143a:	f040 80bb 	bne.w	215b4 <lll_conn_isr_rx+0x224>
	if (!radio_tmr_aa_restore()) {
   2143e:	f000 fe8f 	bl	22160 <radio_tmr_aa_restore>
   21442:	b170      	cbz	r0, 21462 <lll_conn_isr_rx+0xd2>
	if (tx_release) {
   21444:	b19d      	cbz	r5, 2146e <lll_conn_isr_rx+0xde>
		LL_ASSERT(lll->handle != 0xFFFF);
   21446:	89a0      	ldrh	r0, [r4, #12]
   21448:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2144c:	4298      	cmp	r0, r3
   2144e:	f000 80bf 	beq.w	215d0 <lll_conn_isr_rx+0x240>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   21452:	4629      	mov	r1, r5
   21454:	f7fc ff7a 	bl	1e34c <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   21458:	b95f      	cbnz	r7, 21472 <lll_conn_isr_rx+0xe2>
		ull_rx_sched();
   2145a:	f7f7 fbc7 	bl	18bec <ull_rx_sched>
}
   2145e:	b003      	add	sp, #12
   21460:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   21462:	f000 fe71 	bl	22148 <radio_tmr_aa_get>
   21466:	f000 fe75 	bl	22154 <radio_tmr_aa_save>
	if (tx_release) {
   2146a:	2d00      	cmp	r5, #0
   2146c:	d1eb      	bne.n	21446 <lll_conn_isr_rx+0xb6>
	if (is_rx_enqueue) {
   2146e:	2f00      	cmp	r7, #0
   21470:	d0f5      	beq.n	2145e <lll_conn_isr_rx+0xce>
		ull_pdu_rx_alloc();
   21472:	f7f7 fb95 	bl	18ba0 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   21476:	2303      	movs	r3, #3
   21478:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   2147a:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   2147c:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   2147e:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   21480:	4631      	mov	r1, r6
   21482:	f7f7 fba3 	bl	18bcc <ull_rx_put>
	if (is_ull_rx || is_iq_report) {
   21486:	e7e8      	b.n	2145a <lll_conn_isr_rx+0xca>
	if (pdu_data_rx->nesn != lll->sn) {
   21488:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   2148c:	7f32      	ldrb	r2, [r6, #28]
   2148e:	f003 0101 	and.w	r1, r3, #1
   21492:	f3c2 0080 	ubfx	r0, r2, #2, #1
   21496:	4288      	cmp	r0, r1
   21498:	d06d      	beq.n	21576 <lll_conn_isr_rx+0x1e6>
		if (lll->role) {
   2149a:	f994 201d 	ldrsb.w	r2, [r4, #29]
		lll->sn++;
   2149e:	f081 0101 	eor.w	r1, r1, #1
   214a2:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   214a6:	2a00      	cmp	r2, #0
		lll->sn++;
   214a8:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (lll->role) {
   214ac:	da05      	bge.n	214ba <lll_conn_isr_rx+0x12a>
			lll->periph.latency_enabled = 1;
   214ae:	f894 3020 	ldrb.w	r3, [r4, #32]
   214b2:	f043 0304 	orr.w	r3, r3, #4
   214b6:	f884 3020 	strb.w	r3, [r4, #32]
		if (!lll->empty) {
   214ba:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   214be:	075a      	lsls	r2, r3, #29
   214c0:	f100 8095 	bmi.w	215ee <lll_conn_isr_rx+0x25e>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   214c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   214c8:	aa01      	add	r2, sp, #4
   214ca:	f7f3 fef9 	bl	152c0 <memq_peek>
		if (link) {
   214ce:	4605      	mov	r5, r0
   214d0:	2800      	cmp	r0, #0
   214d2:	f000 80bf 	beq.w	21654 <lll_conn_isr_rx+0x2c4>
					       lll->packet_tx_head_offset);
   214d6:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
			pdu_data_tx_len = pdu_data_tx->len;
   214da:	9b01      	ldr	r3, [sp, #4]
   214dc:	4413      	add	r3, r2
   214de:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   214e0:	b171      	cbz	r1, 21500 <lll_conn_isr_rx+0x170>
				if (lll->enc_tx) {
   214e2:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   214e6:	06df      	lsls	r7, r3, #27
   214e8:	d50a      	bpl.n	21500 <lll_conn_isr_rx+0x170>
					lll->ccm_tx.counter++;
   214ea:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   214ee:	3301      	adds	r3, #1
   214f0:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   214f4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   214f8:	f143 0300 	adc.w	r3, r3, #0
   214fc:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
			if (offset < lll->packet_tx_head_len) {
   21500:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   21504:	440a      	add	r2, r1
   21506:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   21508:	429a      	cmp	r2, r3
   2150a:	d37b      	bcc.n	21604 <lll_conn_isr_rx+0x274>
			} else if (offset == lll->packet_tx_head_len) {
   2150c:	f000 8095 	beq.w	2163a <lll_conn_isr_rx+0x2aa>
				LL_ASSERT(0);
   21510:	4a56      	ldr	r2, [pc, #344]	; (2166c <lll_conn_isr_rx+0x2dc>)
   21512:	4957      	ldr	r1, [pc, #348]	; (21670 <lll_conn_isr_rx+0x2e0>)
   21514:	4857      	ldr	r0, [pc, #348]	; (21674 <lll_conn_isr_rx+0x2e4>)
   21516:	f44f 736a 	mov.w	r3, #936	; 0x3a8
   2151a:	f006 f80b 	bl	27534 <assert_print>
   2151e:	4040      	eors	r0, r0
   21520:	f380 8811 	msr	BASEPRI, r0
   21524:	f04f 0003 	mov.w	r0, #3
   21528:	df02      	svc	2
	tx_release = NULL;
   2152a:	2500      	movs	r5, #0
   2152c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   21530:	7f32      	ldrb	r2, [r6, #28]
   21532:	e021      	b.n	21578 <lll_conn_isr_rx+0x1e8>
		crc_expire--;
   21534:	3f01      	subs	r7, #1
   21536:	b2ff      	uxtb	r7, r7
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   21538:	a901      	add	r1, sp, #4
   2153a:	4620      	mov	r0, r4
		crc_expire--;
   2153c:	701f      	strb	r7, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   2153e:	f7ff feb7 	bl	212b0 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   21542:	2f00      	cmp	r7, #0
   21544:	f040 80eb 	bne.w	2171e <lll_conn_isr_rx+0x38e>
		radio_isr_set(isr_done, param);
   21548:	4844      	ldr	r0, [pc, #272]	; (2165c <lll_conn_isr_rx+0x2cc>)
   2154a:	4621      	mov	r1, r4
   2154c:	f000 fad4 	bl	21af8 <radio_isr_set>
			radio_switch_complete_and_disable();
   21550:	f000 fcc6 	bl	21ee0 <radio_switch_complete_and_disable>
   21554:	e75c      	b.n	21410 <lll_conn_isr_rx+0x80>
	LL_ASSERT(node_rx);
   21556:	4a45      	ldr	r2, [pc, #276]	; (2166c <lll_conn_isr_rx+0x2dc>)
   21558:	4947      	ldr	r1, [pc, #284]	; (21678 <lll_conn_isr_rx+0x2e8>)
   2155a:	4846      	ldr	r0, [pc, #280]	; (21674 <lll_conn_isr_rx+0x2e4>)
   2155c:	23f2      	movs	r3, #242	; 0xf2
   2155e:	f005 ffe9 	bl	27534 <assert_print>
   21562:	4040      	eors	r0, r0
   21564:	f380 8811 	msr	BASEPRI, r0
   21568:	f04f 0003 	mov.w	r0, #3
   2156c:	df02      	svc	2
	if (crc_ok) {
   2156e:	2d00      	cmp	r5, #0
   21570:	f43f af34 	beq.w	213dc <lll_conn_isr_rx+0x4c>
   21574:	e788      	b.n	21488 <lll_conn_isr_rx+0xf8>
	tx_release = NULL;
   21576:	2500      	movs	r5, #0
	if ((pdu_data_rx->sn == lll->nesn) &&
   21578:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   2157c:	f3c3 0340 	ubfx	r3, r3, #1, #1
   21580:	429a      	cmp	r2, r3
   21582:	d046      	beq.n	21612 <lll_conn_isr_rx+0x282>
	is_rx_enqueue = 0U;
   21584:	2700      	movs	r7, #0
		crc_expire = 0U;
   21586:	4a37      	ldr	r2, [pc, #220]	; (21664 <lll_conn_isr_rx+0x2d4>)
		crc_valid = 1U;
   21588:	4b3c      	ldr	r3, [pc, #240]	; (2167c <lll_conn_isr_rx+0x2ec>)
		crc_expire = 0U;
   2158a:	2100      	movs	r1, #0
   2158c:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   2158e:	4620      	mov	r0, r4
		crc_valid = 1U;
   21590:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   21592:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   21594:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   21596:	f7ff fe8b 	bl	212b0 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   2159a:	7f33      	ldrb	r3, [r6, #28]
   2159c:	06d9      	lsls	r1, r3, #27
   2159e:	f53f af28 	bmi.w	213f2 <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   215a2:	9b01      	ldr	r3, [sp, #4]
   215a4:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   215a6:	06d2      	lsls	r2, r2, #27
   215a8:	f53f af23 	bmi.w	213f2 <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   215ac:	785b      	ldrb	r3, [r3, #1]
   215ae:	2b00      	cmp	r3, #0
   215b0:	d0ca      	beq.n	21548 <lll_conn_isr_rx+0x1b8>
   215b2:	e71e      	b.n	213f2 <lll_conn_isr_rx+0x62>
	LL_ASSERT(!radio_is_ready());
   215b4:	4a2d      	ldr	r2, [pc, #180]	; (2166c <lll_conn_isr_rx+0x2dc>)
   215b6:	4932      	ldr	r1, [pc, #200]	; (21680 <lll_conn_isr_rx+0x2f0>)
   215b8:	482e      	ldr	r0, [pc, #184]	; (21674 <lll_conn_isr_rx+0x2e4>)
   215ba:	f240 1369 	movw	r3, #361	; 0x169
   215be:	f005 ffb9 	bl	27534 <assert_print>
   215c2:	4040      	eors	r0, r0
   215c4:	f380 8811 	msr	BASEPRI, r0
   215c8:	f04f 0003 	mov.w	r0, #3
   215cc:	df02      	svc	2
   215ce:	e736      	b.n	2143e <lll_conn_isr_rx+0xae>
		LL_ASSERT(lll->handle != 0xFFFF);
   215d0:	4a26      	ldr	r2, [pc, #152]	; (2166c <lll_conn_isr_rx+0x2dc>)
   215d2:	492c      	ldr	r1, [pc, #176]	; (21684 <lll_conn_isr_rx+0x2f4>)
   215d4:	4827      	ldr	r0, [pc, #156]	; (21674 <lll_conn_isr_rx+0x2e4>)
   215d6:	f44f 73bc 	mov.w	r3, #376	; 0x178
   215da:	f005 ffab 	bl	27534 <assert_print>
   215de:	4040      	eors	r0, r0
   215e0:	f380 8811 	msr	BASEPRI, r0
   215e4:	f04f 0003 	mov.w	r0, #3
   215e8:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   215ea:	89a0      	ldrh	r0, [r4, #12]
   215ec:	e731      	b.n	21452 <lll_conn_isr_rx+0xc2>
			lll->empty = 0;
   215ee:	f36f 0382 	bfc	r3, #2, #1
   215f2:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			pdu_data_tx = (void *)radio_pkt_empty_get();
   215f6:	f000 fbc3 	bl	21d80 <radio_pkt_empty_get>
	tx_release = NULL;
   215fa:	2500      	movs	r5, #0
   215fc:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   21600:	7f32      	ldrb	r2, [r6, #28]
   21602:	e7b9      	b.n	21578 <lll_conn_isr_rx+0x1e8>
				lll->packet_tx_head_offset = offset;
   21604:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
   21608:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   2160c:	7f32      	ldrb	r2, [r6, #28]
	tx_release = NULL;
   2160e:	2500      	movs	r5, #0
   21610:	e7b2      	b.n	21578 <lll_conn_isr_rx+0x1e8>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   21612:	2003      	movs	r0, #3
   21614:	f7f7 faa4 	bl	18b60 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   21618:	2800      	cmp	r0, #0
   2161a:	d0b3      	beq.n	21584 <lll_conn_isr_rx+0x1f4>
		lll->nesn++;
   2161c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   21620:	f083 0302 	eor.w	r3, r3, #2
   21624:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (pdu_data_rx->len != 0) {
   21628:	7f73      	ldrb	r3, [r6, #29]
   2162a:	2b00      	cmp	r3, #0
   2162c:	d0aa      	beq.n	21584 <lll_conn_isr_rx+0x1f4>
			if (lll->enc_rx) {
   2162e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   21632:	0718      	lsls	r0, r3, #28
   21634:	d428      	bmi.n	21688 <lll_conn_isr_rx+0x2f8>
			*is_rx_enqueue = 1U;
   21636:	2701      	movs	r7, #1
   21638:	e7a5      	b.n	21586 <lll_conn_isr_rx+0x1f6>
				lll->packet_tx_head_len = 0;
   2163a:	2200      	movs	r2, #0
   2163c:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				memq_dequeue(lll->memq_tx.tail,
   21640:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   21642:	f104 0148 	add.w	r1, r4, #72	; 0x48
   21646:	f7f3 fe43 	bl	152d0 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   2164a:	9b01      	ldr	r3, [sp, #4]
   2164c:	681a      	ldr	r2, [r3, #0]
   2164e:	602a      	str	r2, [r5, #0]
				tx->next = link;
   21650:	601d      	str	r5, [r3, #0]
				*tx_release = tx;
   21652:	9d01      	ldr	r5, [sp, #4]
				FORCE_MD_CNT_SET();
   21654:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   21658:	7f32      	ldrb	r2, [r6, #28]
   2165a:	e78d      	b.n	21578 <lll_conn_isr_rx+0x1e8>
   2165c:	00020fb9 	.word	0x00020fb9
   21660:	20002cd6 	.word	0x20002cd6
   21664:	20002d88 	.word	0x20002d88
   21668:	000211a1 	.word	0x000211a1
   2166c:	000303f0 	.word	0x000303f0
   21670:	0002f900 	.word	0x0002f900
   21674:	0002f8a0 	.word	0x0002f8a0
   21678:	000303a4 	.word	0x000303a4
   2167c:	20002d89 	.word	0x20002d89
   21680:	000303ac 	.word	0x000303ac
   21684:	00030444 	.word	0x00030444
				done = radio_ccm_is_done();
   21688:	f000 fdf0 	bl	2226c <radio_ccm_is_done>
				LL_ASSERT(done);
   2168c:	b3c8      	cbz	r0, 21702 <lll_conn_isr_rx+0x372>
				bool mic_failure = !radio_ccm_mic_is_valid();
   2168e:	f000 fe0f 	bl	222b0 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   21692:	bb30      	cbnz	r0, 216e2 <lll_conn_isr_rx+0x352>
				    lll->ccm_rx.counter == 0 &&
   21694:	f8d4 206f 	ldr.w	r2, [r4, #111]	; 0x6f
   21698:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
				if (mic_failure &&
   2169c:	4313      	orrs	r3, r2
   2169e:	d104      	bne.n	216aa <lll_conn_isr_rx+0x31a>
				    (pdu_data_rx->ll_id ==
   216a0:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   216a2:	f003 0303 	and.w	r3, r3, #3
   216a6:	2b03      	cmp	r3, #3
   216a8:	d004      	beq.n	216b4 <lll_conn_isr_rx+0x324>
					mic_state = LLL_CONN_MIC_FAIL;
   216aa:	4b1e      	ldr	r3, [pc, #120]	; (21724 <lll_conn_isr_rx+0x394>)
   216ac:	2202      	movs	r2, #2
   216ae:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   216b0:	2700      	movs	r7, #0
   216b2:	e6c4      	b.n	2143e <lll_conn_isr_rx+0xae>
						radio_pkt_scratch_get();
   216b4:	f000 fb68 	bl	21d88 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   216b8:	7843      	ldrb	r3, [r0, #1]
   216ba:	2b27      	cmp	r3, #39	; 0x27
						radio_pkt_scratch_get();
   216bc:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   216be:	d8f4      	bhi.n	216aa <lll_conn_isr_rx+0x31a>
						memcpy(pdu_data_rx,
   216c0:	3303      	adds	r3, #3
   216c2:	b2da      	uxtb	r2, r3
   216c4:	f106 001c 	add.w	r0, r6, #28
   216c8:	f007 fe3d 	bl	29346 <memcpy>
						lll->ccm_rx.counter--;
   216cc:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   216d0:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   216d4:	3b01      	subs	r3, #1
   216d6:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   216da:	f142 33ff 	adc.w	r3, r2, #4294967295	; 0xffffffff
   216de:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
				lll->ccm_rx.counter++;
   216e2:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
				mic_state = LLL_CONN_MIC_PASS;
   216e6:	4a0f      	ldr	r2, [pc, #60]	; (21724 <lll_conn_isr_rx+0x394>)
				lll->ccm_rx.counter++;
   216e8:	3301      	adds	r3, #1
   216ea:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   216ee:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
						lll->ccm_rx.counter--;
   216f2:	f104 016f 	add.w	r1, r4, #111	; 0x6f
				lll->ccm_rx.counter++;
   216f6:	f143 0300 	adc.w	r3, r3, #0
				mic_state = LLL_CONN_MIC_PASS;
   216fa:	2701      	movs	r7, #1
				lll->ccm_rx.counter++;
   216fc:	604b      	str	r3, [r1, #4]
				mic_state = LLL_CONN_MIC_PASS;
   216fe:	7017      	strb	r7, [r2, #0]
		if (err) {
   21700:	e741      	b.n	21586 <lll_conn_isr_rx+0x1f6>
				LL_ASSERT(done);
   21702:	4a09      	ldr	r2, [pc, #36]	; (21728 <lll_conn_isr_rx+0x398>)
   21704:	4909      	ldr	r1, [pc, #36]	; (2172c <lll_conn_isr_rx+0x39c>)
   21706:	480a      	ldr	r0, [pc, #40]	; (21730 <lll_conn_isr_rx+0x3a0>)
   21708:	f240 33c3 	movw	r3, #963	; 0x3c3
   2170c:	f005 ff12 	bl	27534 <assert_print>
   21710:	4040      	eors	r0, r0
   21712:	f380 8811 	msr	BASEPRI, r0
   21716:	f04f 0003 	mov.w	r0, #3
   2171a:	df02      	svc	2
   2171c:	e7b7      	b.n	2168e <lll_conn_isr_rx+0x2fe>
	is_rx_enqueue = 0U;
   2171e:	462f      	mov	r7, r5
   21720:	e667      	b.n	213f2 <lll_conn_isr_rx+0x62>
   21722:	bf00      	nop
   21724:	20002d8a 	.word	0x20002d8a
   21728:	000303f0 	.word	0x000303f0
   2172c:	0003043c 	.word	0x0003043c
   21730:	0002f8a0 	.word	0x0002f8a0

00021734 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   21734:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   21736:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   21738:	89a2      	ldrh	r2, [r4, #12]
   2173a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2173e:	429a      	cmp	r2, r3
{
   21740:	b083      	sub	sp, #12
	if (unlikely(lll->handle == 0xFFFF)) {
   21742:	f000 80d0 	beq.w	218e6 <prepare_cb+0x1b2>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   21746:	4605      	mov	r5, r0
   21748:	f7ff fca0 	bl	2108c <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   2174c:	892b      	ldrh	r3, [r5, #8]
   2174e:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   21750:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   21752:	441a      	add	r2, r3
   21754:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   21756:	4410      	add	r0, r2
	lll->event_counter = (event_counter + 1);

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   21758:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   2175a:	82a2      	strh	r2, [r4, #20]
	event_counter = lll->event_counter + lll->latency_event;
   2175c:	b280      	uxth	r0, r0
	lll->event_counter = (event_counter + 1);
   2175e:	1c41      	adds	r1, r0, #1
   21760:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   21762:	065e      	lsls	r6, r3, #25
	lll->latency_prepare = 0;
   21764:	f04f 0100 	mov.w	r1, #0
   21768:	8261      	strh	r1, [r4, #18]
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   2176a:	f104 0118 	add.w	r1, r4, #24
	if (lll->data_chan_sel) {
   2176e:	f100 808d 	bmi.w	2188c <prepare_cb+0x158>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   21772:	f003 003f 	and.w	r0, r3, #63	; 0x3f
   21776:	460b      	mov	r3, r1
   21778:	7fa1      	ldrb	r1, [r4, #30]
   2177a:	9000      	str	r0, [sp, #0]
   2177c:	f104 001f 	add.w	r0, r4, #31
   21780:	f7fd f8a6 	bl	1e8d0 <lll_chan_sel_1>
   21784:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->periph.window_widening_event_us +=
   21786:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
   2178a:	4419      	add	r1, r3
		lll->periph.window_widening_event_us =
			lll->periph.window_widening_max_us;
	}

	/* current window size */
	lll->periph.window_size_event_us +=
   2178c:	e9d4 030d 	ldrd	r0, r3, [r4, #52]	; 0x34
   21790:	4403      	add	r3, r0
	lll->periph.window_widening_prepare_us = 0;
   21792:	2200      	movs	r2, #0
	lll->periph.window_size_event_us +=
   21794:	63a3      	str	r3, [r4, #56]	; 0x38
	    lll->periph.window_widening_max_us) {
   21796:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	lll->periph.window_widening_prepare_us = 0;
   21798:	62e2      	str	r2, [r4, #44]	; 0x2c
		lll->periph.window_size_prepare_us;
	lll->periph.window_size_prepare_us = 0;
   2179a:	6362      	str	r2, [r4, #52]	; 0x34
	/* Ensure that empty flag reflects the state of the Tx queue, as a
	 * peripheral if this is the first connection event and as no prior PDU
	 * is transmitted, an incorrect acknowledgment by peer should not
	 * dequeue a PDU that has not been transmitted on air.
	 */
	if (!lll->empty) {
   2179c:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
		lll->periph.window_widening_event_us =
   217a0:	428b      	cmp	r3, r1
   217a2:	bf28      	it	cs
   217a4:	460b      	movcs	r3, r1
	if (!lll->empty) {
   217a6:	f012 0204 	ands.w	r2, r2, #4
		lll->periph.window_widening_event_us =
   217aa:	6323      	str	r3, [r4, #48]	; 0x30
	if (!lll->empty) {
   217ac:	f000 808d 	beq.w	218ca <prepare_cb+0x196>
			lll->empty = 1U;
		}
	}

	/* Start setting up Radio h/w */
	radio_reset();
   217b0:	f000 f9e4 	bl	21b7c <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   217b4:	2000      	movs	r0, #0
   217b6:	f000 fa15 	bl	21be4 <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   217ba:	4620      	mov	r0, r4
   217bc:	f7ff fcaa 	bl	21114 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   217c0:	1d20      	adds	r0, r4, #4
   217c2:	f000 fa2d 	bl	21c20 <radio_aa_set>
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
   217c6:	8923      	ldrh	r3, [r4, #8]
   217c8:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   217ca:	f240 605b 	movw	r0, #1627	; 0x65b
   217ce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   217d2:	f000 fabf 	bl	21d54 <radio_crc_configure>
				sys_get_le24(lll->crc_init));

	lll_chan_set(data_chan_use);
   217d6:	4630      	mov	r0, r6
   217d8:	f7fe fc70 	bl	200bc <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   217dc:	4621      	mov	r1, r4
   217de:	4846      	ldr	r0, [pc, #280]	; (218f8 <prepare_cb+0x1c4>)
   217e0:	f000 f98a 	bl	21af8 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   217e4:	2096      	movs	r0, #150	; 0x96
   217e6:	f000 fbed 	bl	21fc4 <radio_tmr_tifs_set>
	 * - CTE RX is not enabled,
	 * - SOC does not require compensation for PHYEND event delay.
	 */
	if (!IS_ENABLED(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)) {
#if defined(CONFIG_BT_CTLR_PHY)
		radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   217ea:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   217ee:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   217f2:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   217f6:	2100      	movs	r1, #0
   217f8:	f002 0207 	and.w	r2, r2, #7
   217fc:	f000 0007 	and.w	r0, r0, #7
   21800:	f000 fb0e 	bl	21e20 <radio_switch_complete_and_tx>
		radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */
	}

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   21804:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   21806:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   21808:	4638      	mov	r0, r7
   2180a:	f7fe fc39 	bl	20080 <lll_event_offset_get>
   2180e:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   21810:	686a      	ldr	r2, [r5, #4]
   21812:	f106 0109 	add.w	r1, r6, #9
   21816:	2000      	movs	r0, #0
   21818:	f000 fbe0 	bl	21fdc <radio_tmr_start>
   2181c:	4605      	mov	r5, r0

	radio_tmr_aa_capture();
   2181e:	f000 fc7f 	bl	22120 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   21822:	2000      	movs	r0, #0
   21824:	f000 fc96 	bl	22154 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   21828:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2182a:	f103 0030 	add.w	r0, r3, #48	; 0x30
	hcto = remainder_us +
   2182e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   21830:	eb03 0340 	add.w	r3, r3, r0, lsl #1
		 lll->periph.window_widening_event_us) << 1) +
	       lll->periph.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   21834:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   21838:	2101      	movs	r1, #1
   2183a:	f000 0007 	and.w	r0, r0, #7
	hcto = remainder_us +
   2183e:	441d      	add	r5, r3
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   21840:	f000 fa3c 	bl	21cbc <radio_rx_ready_delay_get>
   21844:	4405      	add	r5, r0
	hcto += addr_us_get(lll->phy_rx);
   21846:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   2184a:	f000 0007 	and.w	r0, r0, #7
   2184e:	2802      	cmp	r0, #2
   21850:	d039      	beq.n	218c6 <prepare_cb+0x192>
		return 40;
   21852:	2804      	cmp	r0, #4
   21854:	bf0c      	ite	eq
   21856:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   2185a:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   2185c:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   2185e:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   21860:	f000 fa2e 	bl	21cc0 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   21864:	4428      	add	r0, r5
   21866:	f000 fc4d 	bl	22104 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   2186a:	89a1      	ldrh	r1, [r4, #12]
   2186c:	3103      	adds	r1, #3
   2186e:	4632      	mov	r2, r6
   21870:	b2c9      	uxtb	r1, r1
   21872:	4638      	mov	r0, r7
   21874:	f7fe fc12 	bl	2009c <lll_preempt_calc>
   21878:	b180      	cbz	r0, 2189c <prepare_cb+0x168>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   2187a:	4820      	ldr	r0, [pc, #128]	; (218fc <prepare_cb+0x1c8>)
   2187c:	4621      	mov	r1, r4
   2187e:	f000 f93b 	bl	21af8 <radio_isr_set>
		radio_disable();
   21882:	f000 fa29 	bl	21cd8 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   21886:	2000      	movs	r0, #0
   21888:	b003      	add	sp, #12
   2188a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   2188c:	460a      	mov	r2, r1
   2188e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   21892:	8be1      	ldrh	r1, [r4, #30]
   21894:	f7fd f860 	bl	1e958 <lll_chan_sel_2>
   21898:	4606      	mov	r6, r0
   2189a:	e774      	b.n	21786 <prepare_cb+0x52>
		ret = lll_prepare_done(lll);
   2189c:	4620      	mov	r0, r4
   2189e:	f7fe fb97 	bl	1ffd0 <lll_prepare_done>
		LL_ASSERT(!ret);
   218a2:	2800      	cmp	r0, #0
   218a4:	d0ef      	beq.n	21886 <prepare_cb+0x152>
   218a6:	4a16      	ldr	r2, [pc, #88]	; (21900 <prepare_cb+0x1cc>)
   218a8:	4916      	ldr	r1, [pc, #88]	; (21904 <prepare_cb+0x1d0>)
   218aa:	4817      	ldr	r0, [pc, #92]	; (21908 <prepare_cb+0x1d4>)
   218ac:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   218b0:	f005 fe40 	bl	27534 <assert_print>
   218b4:	4040      	eors	r0, r0
   218b6:	f380 8811 	msr	BASEPRI, r0
   218ba:	f04f 0003 	mov.w	r0, #3
   218be:	df02      	svc	2
}
   218c0:	2000      	movs	r0, #0
   218c2:	b003      	add	sp, #12
   218c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (phy) {
   218c6:	2318      	movs	r3, #24
   218c8:	e7c8      	b.n	2185c <prepare_cb+0x128>
		link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL);
   218ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   218ce:	f7f3 fcf7 	bl	152c0 <memq_peek>
		if (!link) {
   218d2:	2800      	cmp	r0, #0
   218d4:	f47f af6c 	bne.w	217b0 <prepare_cb+0x7c>
			lll->empty = 1U;
   218d8:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   218dc:	f043 0304 	orr.w	r3, r3, #4
   218e0:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
   218e4:	e764      	b.n	217b0 <prepare_cb+0x7c>
		radio_isr_set(lll_isr_early_abort, lll);
   218e6:	4809      	ldr	r0, [pc, #36]	; (2190c <prepare_cb+0x1d8>)
   218e8:	4621      	mov	r1, r4
   218ea:	f000 f905 	bl	21af8 <radio_isr_set>
		radio_disable();
   218ee:	f000 f9f3 	bl	21cd8 <radio_disable>
}
   218f2:	2000      	movs	r0, #0
   218f4:	b003      	add	sp, #12
   218f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   218f8:	00021391 	.word	0x00021391
   218fc:	000201f1 	.word	0x000201f1
   21900:	0003045c 	.word	0x0003045c
   21904:	0002fb3c 	.word	0x0002fb3c
   21908:	0002f8a0 	.word	0x0002f8a0
   2190c:	00020215 	.word	0x00020215

00021910 <lll_periph_prepare>:
{
   21910:	b510      	push	{r4, lr}
   21912:	b082      	sub	sp, #8
   21914:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   21916:	f7fe fdcd 	bl	204b4 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   2191a:	2800      	cmp	r0, #0
   2191c:	db25      	blt.n	2196a <lll_periph_prepare+0x5a>
	lll = p->param;
   2191e:	68e1      	ldr	r1, [r4, #12]
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   21920:	8920      	ldrh	r0, [r4, #8]
   21922:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	lll->periph.window_widening_prepare_us +=
   21924:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   21926:	fb00 3303 	mla	r3, r0, r3, r3
	    lll->periph.window_widening_max_us) {
   2192a:	6a88      	ldr	r0, [r1, #40]	; 0x28
	lll->periph.window_widening_prepare_us +=
   2192c:	4413      	add	r3, r2
		lll->periph.window_widening_prepare_us =
   2192e:	4283      	cmp	r3, r0
   21930:	bf28      	it	cs
   21932:	4603      	movcs	r3, r0
   21934:	62cb      	str	r3, [r1, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   21936:	4a13      	ldr	r2, [pc, #76]	; (21984 <lll_periph_prepare+0x74>)
   21938:	4913      	ldr	r1, [pc, #76]	; (21988 <lll_periph_prepare+0x78>)
   2193a:	4814      	ldr	r0, [pc, #80]	; (2198c <lll_periph_prepare+0x7c>)
   2193c:	9400      	str	r4, [sp, #0]
   2193e:	2300      	movs	r3, #0
   21940:	f7f7 fc26 	bl	19190 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   21944:	b108      	cbz	r0, 2194a <lll_periph_prepare+0x3a>
   21946:	3077      	adds	r0, #119	; 0x77
   21948:	d101      	bne.n	2194e <lll_periph_prepare+0x3e>
}
   2194a:	b002      	add	sp, #8
   2194c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   2194e:	4a10      	ldr	r2, [pc, #64]	; (21990 <lll_periph_prepare+0x80>)
   21950:	4910      	ldr	r1, [pc, #64]	; (21994 <lll_periph_prepare+0x84>)
   21952:	4811      	ldr	r0, [pc, #68]	; (21998 <lll_periph_prepare+0x88>)
   21954:	235e      	movs	r3, #94	; 0x5e
   21956:	f005 fded 	bl	27534 <assert_print>
   2195a:	4040      	eors	r0, r0
   2195c:	f380 8811 	msr	BASEPRI, r0
   21960:	f04f 0003 	mov.w	r0, #3
   21964:	df02      	svc	2
}
   21966:	b002      	add	sp, #8
   21968:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   2196a:	4a09      	ldr	r2, [pc, #36]	; (21990 <lll_periph_prepare+0x80>)
   2196c:	490b      	ldr	r1, [pc, #44]	; (2199c <lll_periph_prepare+0x8c>)
   2196e:	480a      	ldr	r0, [pc, #40]	; (21998 <lll_periph_prepare+0x88>)
   21970:	234d      	movs	r3, #77	; 0x4d
   21972:	f005 fddf 	bl	27534 <assert_print>
   21976:	4040      	eors	r0, r0
   21978:	f380 8811 	msr	BASEPRI, r0
   2197c:	f04f 0003 	mov.w	r0, #3
   21980:	df02      	svc	2
   21982:	e7cc      	b.n	2191e <lll_periph_prepare+0xe>
   21984:	00021735 	.word	0x00021735
   21988:	000210b5 	.word	0x000210b5
   2198c:	00020079 	.word	0x00020079
   21990:	0003045c 	.word	0x0003045c
   21994:	000303dc 	.word	0x000303dc
   21998:	0002f8a0 	.word	0x0002f8a0
   2199c:	00030308 	.word	0x00030308

000219a0 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   219a0:	4b05      	ldr	r3, [pc, #20]	; (219b8 <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   219a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   219a6:	2100      	movs	r1, #0
   219a8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   219ac:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   219b0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   219b4:	4770      	bx	lr
   219b6:	bf00      	nop
   219b8:	4000b000 	.word	0x4000b000

000219bc <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   219bc:	4b05      	ldr	r3, [pc, #20]	; (219d4 <cntr_start+0x18>)
   219be:	7818      	ldrb	r0, [r3, #0]
   219c0:	1c42      	adds	r2, r0, #1
   219c2:	701a      	strb	r2, [r3, #0]
   219c4:	b918      	cbnz	r0, 219ce <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   219c6:	4b04      	ldr	r3, [pc, #16]	; (219d8 <cntr_start+0x1c>)
   219c8:	2201      	movs	r2, #1
   219ca:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   219cc:	4770      	bx	lr
		return 1;
   219ce:	2001      	movs	r0, #1
}
   219d0:	4770      	bx	lr
   219d2:	bf00      	nop
   219d4:	20002d8b 	.word	0x20002d8b
   219d8:	4000b000 	.word	0x4000b000

000219dc <cntr_stop>:

uint32_t cntr_stop(void)
{
   219dc:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   219de:	4c0d      	ldr	r4, [pc, #52]	; (21a14 <cntr_stop+0x38>)
   219e0:	7820      	ldrb	r0, [r4, #0]
   219e2:	b148      	cbz	r0, 219f8 <cntr_stop+0x1c>

	if (--_refcount) {
   219e4:	3801      	subs	r0, #1
   219e6:	b2c0      	uxtb	r0, r0
   219e8:	7020      	strb	r0, [r4, #0]
   219ea:	b918      	cbnz	r0, 219f4 <cntr_stop+0x18>
   219ec:	4b0a      	ldr	r3, [pc, #40]	; (21a18 <cntr_stop+0x3c>)
   219ee:	2201      	movs	r2, #1
   219f0:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   219f2:	bd10      	pop	{r4, pc}
		return 1;
   219f4:	2001      	movs	r0, #1
}
   219f6:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   219f8:	4a08      	ldr	r2, [pc, #32]	; (21a1c <cntr_stop+0x40>)
   219fa:	4909      	ldr	r1, [pc, #36]	; (21a20 <cntr_stop+0x44>)
   219fc:	4809      	ldr	r0, [pc, #36]	; (21a24 <cntr_stop+0x48>)
   219fe:	232d      	movs	r3, #45	; 0x2d
   21a00:	f005 fd98 	bl	27534 <assert_print>
   21a04:	4040      	eors	r0, r0
   21a06:	f380 8811 	msr	BASEPRI, r0
   21a0a:	f04f 0003 	mov.w	r0, #3
   21a0e:	df02      	svc	2
	if (--_refcount) {
   21a10:	7820      	ldrb	r0, [r4, #0]
   21a12:	e7e7      	b.n	219e4 <cntr_stop+0x8>
   21a14:	20002d8b 	.word	0x20002d8b
   21a18:	4000b000 	.word	0x4000b000
   21a1c:	000304b0 	.word	0x000304b0
   21a20:	000304fc 	.word	0x000304fc
   21a24:	0002f8a0 	.word	0x0002f8a0

00021a28 <cntr_cnt_get>:
     return p_reg->COUNTER;
   21a28:	4b01      	ldr	r3, [pc, #4]	; (21a30 <cntr_cnt_get+0x8>)
   21a2a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   21a2e:	4770      	bx	lr
   21a30:	4000b000 	.word	0x4000b000

00021a34 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   21a34:	4b02      	ldr	r3, [pc, #8]	; (21a40 <cntr_cmp_set+0xc>)
   21a36:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   21a3a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   21a3e:	4770      	bx	lr
   21a40:	4000b000 	.word	0x4000b000

00021a44 <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21a44:	4b12      	ldr	r3, [pc, #72]	; (21a90 <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   21a46:	b430      	push	{r4, r5}
   21a48:	2101      	movs	r1, #1
   21a4a:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   21a4c:	2000      	movs	r0, #0
   21a4e:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   21a50:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   21a54:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   21a58:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   21a5c:	6019      	str	r1, [r3, #0]
}
   21a5e:	e005      	b.n	21a6c <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   21a60:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   21a64:	b932      	cbnz	r2, 21a74 <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   21a66:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   21a6a:	b11a      	cbz	r2, 21a74 <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   21a6c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   21a70:	2a00      	cmp	r2, #0
   21a72:	d0f5      	beq.n	21a60 <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21a74:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   21a76:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   21a7a:	2a00      	cmp	r2, #0
   21a7c:	d1e7      	bne.n	21a4e <do_ecb+0xa>
   21a7e:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   21a82:	2d00      	cmp	r5, #0
   21a84:	d0e3      	beq.n	21a4e <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
}
   21a86:	bc30      	pop	{r4, r5}
	NRF_ECB->ECBDATAPTR = 0;
   21a88:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   21a8c:	4770      	bx	lr
   21a8e:	bf00      	nop
   21a90:	4000e000 	.word	0x4000e000

00021a94 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   21a94:	b570      	push	{r4, r5, r6, lr}
   21a96:	b08c      	sub	sp, #48	; 0x30
   21a98:	460e      	mov	r6, r1
   21a9a:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   21a9c:	4601      	mov	r1, r0
   21a9e:	2210      	movs	r2, #16
   21aa0:	4668      	mov	r0, sp
{
   21aa2:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   21aa4:	f7f3 fbda 	bl	1525c <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   21aa8:	2210      	movs	r2, #16
   21aaa:	eb0d 0002 	add.w	r0, sp, r2
   21aae:	4631      	mov	r1, r6
   21ab0:	f7f3 fbd4 	bl	1525c <mem_rcopy>

	do_ecb(&ecb);
   21ab4:	4668      	mov	r0, sp
   21ab6:	f7ff ffc5 	bl	21a44 <do_ecb>

	if (cipher_text_le) {
   21aba:	b125      	cbz	r5, 21ac6 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   21abc:	2210      	movs	r2, #16
   21abe:	a908      	add	r1, sp, #32
   21ac0:	4628      	mov	r0, r5
   21ac2:	f7f3 fbcb 	bl	1525c <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   21ac6:	b124      	cbz	r4, 21ad2 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   21ac8:	2210      	movs	r2, #16
   21aca:	a908      	add	r1, sp, #32
   21acc:	4620      	mov	r0, r4
   21ace:	f007 fc3a 	bl	29346 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   21ad2:	b00c      	add	sp, #48	; 0x30
   21ad4:	bd70      	pop	{r4, r5, r6, pc}
   21ad6:	bf00      	nop

00021ad8 <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   21ad8:	4b04      	ldr	r3, [pc, #16]	; (21aec <isr_radio+0x14>)
   21ada:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   21ade:	b123      	cbz	r3, 21aea <isr_radio+0x12>
		isr_cb(isr_cb_param);
   21ae0:	4a03      	ldr	r2, [pc, #12]	; (21af0 <isr_radio+0x18>)
   21ae2:	4b04      	ldr	r3, [pc, #16]	; (21af4 <isr_radio+0x1c>)
   21ae4:	6810      	ldr	r0, [r2, #0]
   21ae6:	681b      	ldr	r3, [r3, #0]
   21ae8:	4718      	bx	r3
}
   21aea:	4770      	bx	lr
   21aec:	40001000 	.word	0x40001000
   21af0:	200027b8 	.word	0x200027b8
   21af4:	200027b4 	.word	0x200027b4

00021af8 <radio_isr_set>:
{
   21af8:	b538      	push	{r3, r4, r5, lr}
   21afa:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   21afc:	2001      	movs	r0, #1
{
   21afe:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   21b00:	f7ed fcaa 	bl	f458 <arch_irq_disable>
	isr_cb = cb;
   21b04:	4b08      	ldr	r3, [pc, #32]	; (21b28 <radio_isr_set+0x30>)
	isr_cb_param = param;
   21b06:	4a09      	ldr	r2, [pc, #36]	; (21b2c <radio_isr_set+0x34>)
	isr_cb = cb;
   21b08:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   21b0a:	4909      	ldr	r1, [pc, #36]	; (21b30 <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   21b0c:	4b09      	ldr	r3, [pc, #36]	; (21b34 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   21b0e:	6015      	str	r5, [r2, #0]
   21b10:	2010      	movs	r0, #16
   21b12:	2202      	movs	r2, #2
   21b14:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   21b18:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   21b1c:	2001      	movs	r0, #1
}
   21b1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   21b22:	f7ed bc89 	b.w	f438 <arch_irq_enable>
   21b26:	bf00      	nop
   21b28:	200027b4 	.word	0x200027b4
   21b2c:	200027b8 	.word	0x200027b8
   21b30:	40001000 	.word	0x40001000
   21b34:	e000e100 	.word	0xe000e100

00021b38 <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   21b38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   21b3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   21b40:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   21b42:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   21b46:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   21b4a:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   21b4e:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   21b52:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   21b56:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   21b5a:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   21b5e:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   21b62:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   21b66:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   21b6a:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   21b6e:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   21b72:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   21b76:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   21b7a:	4770      	bx	lr

00021b7c <radio_reset>:
{
   21b7c:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   21b7e:	2001      	movs	r0, #1
   21b80:	f7ed fc6a 	bl	f458 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
   21b84:	4a0d      	ldr	r2, [pc, #52]	; (21bbc <radio_reset+0x40>)
   21b86:	2100      	movs	r1, #0
   21b88:	2301      	movs	r3, #1
   21b8a:	f8c2 1ffc 	str.w	r1, [r2, #4092]	; 0xffc
   21b8e:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   21b92:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   21b96:	490a      	ldr	r1, [pc, #40]	; (21bc0 <radio_reset+0x44>)
					 0xfffffffe) | 0x01000000;
   21b98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   21b9c:	f023 0301 	bic.w	r3, r3, #1
   21ba0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   21ba4:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PHYEND_DELAY_COMPENSATION_PPI(0)) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   21ba8:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   21bac:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   21bb0:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   21bb4:	f8c1 0804 	str.w	r0, [r1, #2052]	; 0x804
}
   21bb8:	bd10      	pop	{r4, pc}
   21bba:	bf00      	nop
   21bbc:	40001000 	.word	0x40001000
   21bc0:	4001f000 	.word	0x4001f000

00021bc4 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   21bc4:	4b06      	ldr	r3, [pc, #24]	; (21be0 <radio_phy_set+0x1c>)
#endif /* CONFIG_BT_CTLR_PHY_CODED */

		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   21bc6:	2802      	cmp	r0, #2
   21bc8:	bf14      	ite	ne
   21bca:	2203      	movne	r2, #3
   21bcc:	2204      	moveq	r2, #4
   21bce:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   21bd2:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   21bd6:	f042 0201 	orr.w	r2, r2, #1
   21bda:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   21bde:	4770      	bx	lr
   21be0:	40001000 	.word	0x40001000

00021be4 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   21be4:	4b01      	ldr	r3, [pc, #4]	; (21bec <radio_tx_power_set+0x8>)
   21be6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   21bea:	4770      	bx	lr
   21bec:	40001000 	.word	0x40001000

00021bf0 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   21bf0:	4b01      	ldr	r3, [pc, #4]	; (21bf8 <radio_freq_chan_set+0x8>)
   21bf2:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   21bf6:	4770      	bx	lr
   21bf8:	40001000 	.word	0x40001000

00021bfc <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   21bfc:	4b07      	ldr	r3, [pc, #28]	; (21c1c <radio_whiten_iv_set+0x20>)
   21bfe:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   21c02:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   21c06:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   21c0a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   21c0e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   21c12:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   21c16:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   21c1a:	4770      	bx	lr
   21c1c:	40001000 	.word	0x40001000

00021c20 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   21c20:	4a0a      	ldr	r2, [pc, #40]	; (21c4c <radio_aa_set+0x2c>)
   21c22:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   21c24:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   21c26:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   21c2a:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   21c2e:	78c3      	ldrb	r3, [r0, #3]
   21c30:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   21c34:	7843      	ldrb	r3, [r0, #1]
   21c36:	f890 c002 	ldrb.w	ip, [r0, #2]
   21c3a:	7801      	ldrb	r1, [r0, #0]
   21c3c:	041b      	lsls	r3, r3, #16
   21c3e:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   21c42:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   21c46:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   21c4a:	4770      	bx	lr
   21c4c:	40001000 	.word	0x40001000

00021c50 <radio_pkt_configure>:
	switch (phy) {
   21c50:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   21c54:	2b02      	cmp	r3, #2
   21c56:	bf14      	ite	ne
   21c58:	f04f 0c00 	movne.w	ip, #0
   21c5c:	f04f 7c80 	moveq.w	ip, #16777216	; 0x1000000
	if (pdu_type == RADIO_PKT_CONF_PDU_TYPE_DC) {
   21c60:	07d3      	lsls	r3, r2, #31
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   21c62:	bf48      	it	mi
   21c64:	f44c 1c80 	orrmi.w	ip, ip, #1048576	; 0x100000
		((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) & RADIO_PCNF0_LFLEN_Msk) |
   21c68:	f000 000f 	and.w	r0, r0, #15
	NRF_RADIO->PCNF0 =
   21c6c:	4b0a      	ldr	r3, [pc, #40]	; (21c98 <radio_pkt_configure+0x48>)
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   21c6e:	4a0b      	ldr	r2, [pc, #44]	; (21c9c <radio_pkt_configure+0x4c>)
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
   21c70:	ea40 000c 	orr.w	r0, r0, ip
   21c74:	f440 7080 	orr.w	r0, r0, #256	; 0x100
	NRF_RADIO->PCNF0 =
   21c78:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   21c7c:	f8d3 0518 	ldr.w	r0, [r3, #1304]	; 0x518
   21c80:	4002      	ands	r2, r0
   21c82:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |=
   21c86:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   21c8a:	4311      	orrs	r1, r2
   21c8c:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   21c90:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
}
   21c94:	4770      	bx	lr
   21c96:	bf00      	nop
   21c98:	40001000 	.word	0x40001000
   21c9c:	fef80000 	.word	0xfef80000

00021ca0 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   21ca0:	4b01      	ldr	r3, [pc, #4]	; (21ca8 <radio_pkt_rx_set+0x8>)
   21ca2:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   21ca6:	4770      	bx	lr
   21ca8:	40001000 	.word	0x40001000

00021cac <radio_pkt_tx_set>:
   21cac:	4b01      	ldr	r3, [pc, #4]	; (21cb4 <radio_pkt_tx_set+0x8>)
   21cae:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   21cb2:	4770      	bx	lr
   21cb4:	40001000 	.word	0x40001000

00021cb8 <radio_tx_chain_delay_get>:
}
   21cb8:	2001      	movs	r0, #1
   21cba:	4770      	bx	lr

00021cbc <radio_rx_ready_delay_get>:
}
   21cbc:	2029      	movs	r0, #41	; 0x29
   21cbe:	4770      	bx	lr

00021cc0 <radio_rx_chain_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_US;
   21cc0:	2802      	cmp	r0, #2
}
   21cc2:	bf14      	ite	ne
   21cc4:	200a      	movne	r0, #10
   21cc6:	2005      	moveq	r0, #5
   21cc8:	4770      	bx	lr
   21cca:	bf00      	nop

00021ccc <radio_tx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21ccc:	4b01      	ldr	r3, [pc, #4]	; (21cd4 <radio_tx_enable+0x8>)
   21cce:	2201      	movs	r2, #1
   21cd0:	601a      	str	r2, [r3, #0]
}
   21cd2:	4770      	bx	lr
   21cd4:	40001000 	.word	0x40001000

00021cd8 <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   21cd8:	4a07      	ldr	r2, [pc, #28]	; (21cf8 <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   21cda:	4908      	ldr	r1, [pc, #32]	; (21cfc <radio_disable+0x24>)
{
   21cdc:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   21cde:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   21ce0:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   21ce4:	2000      	movs	r0, #0
   21ce6:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   21cea:	6053      	str	r3, [r2, #4]
}
   21cec:	bc10      	pop	{r4}
   21cee:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   21cf0:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   21cf4:	610b      	str	r3, [r1, #16]
}
   21cf6:	4770      	bx	lr
   21cf8:	4001f000 	.word	0x4001f000
   21cfc:	40001000 	.word	0x40001000

00021d00 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   21d00:	4b04      	ldr	r3, [pc, #16]	; (21d14 <radio_status_reset+0x14>)
   21d02:	2200      	movs	r2, #0
   21d04:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   21d08:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   21d0c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   21d10:	4770      	bx	lr
   21d12:	bf00      	nop
   21d14:	40001000 	.word	0x40001000

00021d18 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   21d18:	4b03      	ldr	r3, [pc, #12]	; (21d28 <radio_is_ready+0x10>)
   21d1a:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   21d1e:	3800      	subs	r0, #0
   21d20:	bf18      	it	ne
   21d22:	2001      	movne	r0, #1
   21d24:	4770      	bx	lr
   21d26:	bf00      	nop
   21d28:	40001000 	.word	0x40001000

00021d2c <radio_is_done>:
	return (NRF_RADIO->NRF_RADIO_TXRX_END_EVENT != 0);
   21d2c:	4b03      	ldr	r3, [pc, #12]	; (21d3c <radio_is_done+0x10>)
   21d2e:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   21d32:	3800      	subs	r0, #0
   21d34:	bf18      	it	ne
   21d36:	2001      	movne	r0, #1
   21d38:	4770      	bx	lr
   21d3a:	bf00      	nop
   21d3c:	40001000 	.word	0x40001000

00021d40 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   21d40:	4b03      	ldr	r3, [pc, #12]	; (21d50 <radio_is_idle+0x10>)
   21d42:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   21d46:	fab0 f080 	clz	r0, r0
   21d4a:	0940      	lsrs	r0, r0, #5
   21d4c:	4770      	bx	lr
   21d4e:	bf00      	nop
   21d50:	40001000 	.word	0x40001000

00021d54 <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   21d54:	4b04      	ldr	r3, [pc, #16]	; (21d68 <radio_crc_configure+0x14>)
   21d56:	f240 1203 	movw	r2, #259	; 0x103
   21d5a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   21d5e:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   21d62:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   21d66:	4770      	bx	lr
   21d68:	40001000 	.word	0x40001000

00021d6c <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   21d6c:	4b03      	ldr	r3, [pc, #12]	; (21d7c <radio_crc_is_valid+0x10>)
   21d6e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   21d72:	3800      	subs	r0, #0
   21d74:	bf18      	it	ne
   21d76:	2001      	movne	r0, #1
   21d78:	4770      	bx	lr
   21d7a:	bf00      	nop
   21d7c:	40001000 	.word	0x40001000

00021d80 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   21d80:	4800      	ldr	r0, [pc, #0]	; (21d84 <radio_pkt_empty_get+0x4>)
   21d82:	4770      	bx	lr
   21d84:	200026ac 	.word	0x200026ac

00021d88 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   21d88:	4800      	ldr	r0, [pc, #0]	; (21d8c <radio_pkt_scratch_get+0x4>)
   21d8a:	4770      	bx	lr
   21d8c:	200026b0 	.word	0x200026b0

00021d90 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   21d90:	4b1d      	ldr	r3, [pc, #116]	; (21e08 <radio_switch_complete_and_rx+0x78>)
{
   21d92:	b4f0      	push	{r4, r5, r6, r7}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   21d94:	2203      	movs	r2, #3
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   21d96:	4d1d      	ldr	r5, [pc, #116]	; (21e0c <radio_switch_complete_and_rx+0x7c>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   21d98:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   21d9c:	782a      	ldrb	r2, [r5, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   21d9e:	4e1c      	ldr	r6, [pc, #112]	; (21e10 <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   21da0:	4c1c      	ldr	r4, [pc, #112]	; (21e14 <radio_switch_complete_and_rx+0x84>)
   21da2:	4f1d      	ldr	r7, [pc, #116]	; (21e18 <radio_switch_complete_and_rx+0x88>)
   21da4:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   21da8:	f102 030c 	add.w	r3, r2, #12
   21dac:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   21dae:	00d0      	lsls	r0, r2, #3
   21db0:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   21db2:	0091      	lsls	r1, r2, #2
   21db4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   21db8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   21dbc:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   21dc0:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   21dc4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   21dc8:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   21dcc:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   21dd0:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   21dd4:	4811      	ldr	r0, [pc, #68]	; (21e1c <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   21dd6:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   21dda:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   21dde:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
   21de2:	2b2d      	cmp	r3, #45	; 0x2d
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   21de4:	bf8a      	itet	hi
   21de6:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   21dea:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   21dec:	3b2d      	subhi	r3, #45	; 0x2d
   21dee:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   21df2:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   21df4:	4b06      	ldr	r3, [pc, #24]	; (21e10 <radio_switch_complete_and_rx+0x80>)
   21df6:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   21dfa:	f002 0201 	and.w	r2, r2, #1
   21dfe:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   21e02:	702a      	strb	r2, [r5, #0]
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_TX, SW_SWITCH_RX, SW_SWITCH_PHY_1M, SW_SWITCH_FLAGS_DONTCARE, phy_rx,
		  SW_SWITCH_FLAGS_DONTCARE, END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   21e04:	bcf0      	pop	{r4, r5, r6, r7}
   21e06:	4770      	bx	lr
   21e08:	40001000 	.word	0x40001000
   21e0c:	20002d8c 	.word	0x20002d8c
   21e10:	4001f000 	.word	0x4001f000
   21e14:	40009140 	.word	0x40009140
   21e18:	4000110c 	.word	0x4000110c
   21e1c:	40001004 	.word	0x40001004

00021e20 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   21e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   21e24:	4e28      	ldr	r6, [pc, #160]	; (21ec8 <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   21e26:	4c29      	ldr	r4, [pc, #164]	; (21ecc <radio_switch_complete_and_tx+0xac>)
   21e28:	4f29      	ldr	r7, [pc, #164]	; (21ed0 <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   21e2a:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 21ed4 <radio_switch_complete_and_tx+0xb4>
   21e2e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 21ed8 <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   21e32:	2303      	movs	r3, #3
   21e34:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   21e38:	7821      	ldrb	r1, [r4, #0]
   21e3a:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   21e3e:	f101 030c 	add.w	r3, r1, #12
   21e42:	b2db      	uxtb	r3, r3
   21e44:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   21e46:	00cd      	lsls	r5, r1, #3
   21e48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21e4c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   21e50:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   21e54:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   21e58:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   21e5c:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   21e60:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    p_reg->CH[(uint32_t) channel].EEP = eep;
   21e64:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   21e68:	f649 6534 	movw	r5, #40500	; 0x9e34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   21e6c:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   21e70:	f24a 13b8 	movw	r3, #41400	; 0xa1b8
   21e74:	2a02      	cmp	r2, #2
   21e76:	bf18      	it	ne
   21e78:	461d      	movne	r5, r3
	}
}

static inline uint32_t hal_radio_rx_chain_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   21e7a:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   21e7e:	f241 3288 	movw	r2, #5000	; 0x1388
   21e82:	f242 43b8 	movw	r3, #9400	; 0x24b8
   21e86:	2802      	cmp	r0, #2
   21e88:	bf08      	it	eq
   21e8a:	4613      	moveq	r3, r2
   21e8c:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
			delay = HAL_RADIO_NS2US_ROUND(
   21e90:	4a12      	ldr	r2, [pc, #72]	; (21edc <radio_switch_complete_and_tx+0xbc>)
   21e92:	442b      	add	r3, r5
   21e94:	fba2 2303 	umull	r2, r3, r2, r3
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   21e98:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
   21e9c:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   21ea0:	bf85      	ittet	hi
   21ea2:	0998      	lsrhi	r0, r3, #6
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   21ea4:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   21ea8:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   21eaa:	1a1b      	subhi	r3, r3, r0
   21eac:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   21eb0:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   21eb2:	4b08      	ldr	r3, [pc, #32]	; (21ed4 <radio_switch_complete_and_tx+0xb4>)
   21eb4:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   21eb8:	f001 0101 	and.w	r1, r1, #1
   21ebc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   21ec0:	7021      	strb	r1, [r4, #0]

	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx,
		  END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   21ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21ec6:	bf00      	nop
   21ec8:	40001000 	.word	0x40001000
   21ecc:	20002d8c 	.word	0x20002d8c
   21ed0:	40009140 	.word	0x40009140
   21ed4:	4001f000 	.word	0x4001f000
   21ed8:	4000110c 	.word	0x4000110c
   21edc:	10624dd3 	.word	0x10624dd3

00021ee0 <radio_switch_complete_and_disable>:
void radio_switch_complete_and_disable(void)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);
#else /* CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE);
   21ee0:	4904      	ldr	r1, [pc, #16]	; (21ef4 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   21ee2:	4b05      	ldr	r3, [pc, #20]	; (21ef8 <radio_switch_complete_and_disable+0x18>)
   21ee4:	2003      	movs	r0, #3
   21ee6:	f44f 6210 	mov.w	r2, #2304	; 0x900
   21eea:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   21eee:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   21ef2:	4770      	bx	lr
   21ef4:	40001000 	.word	0x40001000
   21ef8:	4001f000 	.word	0x4001f000

00021efc <radio_rssi_status_reset>:
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   21efc:	4b02      	ldr	r3, [pc, #8]	; (21f08 <radio_rssi_status_reset+0xc>)
   21efe:	2200      	movs	r2, #0
   21f00:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   21f04:	4770      	bx	lr
   21f06:	bf00      	nop
   21f08:	40001000 	.word	0x40001000

00021f0c <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   21f0c:	4b03      	ldr	r3, [pc, #12]	; (21f1c <radio_rssi_is_ready+0x10>)
   21f0e:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   21f12:	3800      	subs	r0, #0
   21f14:	bf18      	it	ne
   21f16:	2001      	movne	r0, #1
   21f18:	4770      	bx	lr
   21f1a:	bf00      	nop
   21f1c:	40001000 	.word	0x40001000

00021f20 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   21f20:	b410      	push	{r4}
   21f22:	f04f 0c00 	mov.w	ip, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   21f26:	ea4f 038c 	mov.w	r3, ip, lsl #2
   21f2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   21f32:	6814      	ldr	r4, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   21f34:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
	for (index = 0U; index < 8; index++) {
   21f38:	f10c 0c01 	add.w	ip, ip, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   21f3c:	8894      	ldrh	r4, [r2, #4]
   21f3e:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   21f42:	f1bc 0f08 	cmp.w	ip, #8
		bdaddr += 6;
   21f46:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   21f4a:	d1ec      	bne.n	21f26 <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   21f4c:	4b03      	ldr	r3, [pc, #12]	; (21f5c <radio_filter_configure+0x3c>)
}
   21f4e:	bc10      	pop	{r4}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   21f50:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   21f54:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   21f58:	4770      	bx	lr
   21f5a:	bf00      	nop
   21f5c:	40001000 	.word	0x40001000

00021f60 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   21f60:	4a03      	ldr	r2, [pc, #12]	; (21f70 <radio_filter_disable+0x10>)
   21f62:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   21f66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   21f6a:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   21f6e:	4770      	bx	lr
   21f70:	40001000 	.word	0x40001000

00021f74 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   21f74:	4b02      	ldr	r3, [pc, #8]	; (21f80 <radio_filter_status_reset+0xc>)
   21f76:	2200      	movs	r2, #0
   21f78:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   21f7c:	4770      	bx	lr
   21f7e:	bf00      	nop
   21f80:	40001000 	.word	0x40001000

00021f84 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   21f84:	4b03      	ldr	r3, [pc, #12]	; (21f94 <radio_filter_has_match+0x10>)
   21f86:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   21f8a:	3800      	subs	r0, #0
   21f8c:	bf18      	it	ne
   21f8e:	2001      	movne	r0, #1
   21f90:	4770      	bx	lr
   21f92:	bf00      	nop
   21f94:	40001000 	.word	0x40001000

00021f98 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   21f98:	4b01      	ldr	r3, [pc, #4]	; (21fa0 <radio_filter_match_get+0x8>)
   21f9a:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   21f9e:	4770      	bx	lr
   21fa0:	40001000 	.word	0x40001000

00021fa4 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   21fa4:	4904      	ldr	r1, [pc, #16]	; (21fb8 <radio_tmr_status_reset+0x14>)
   21fa6:	4b05      	ldr	r3, [pc, #20]	; (21fbc <radio_tmr_status_reset+0x18>)
   21fa8:	4a05      	ldr	r2, [pc, #20]	; (21fc0 <radio_tmr_status_reset+0x1c>)
   21faa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   21fae:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   21fb2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
			BIT(HAL_SW_SWITCH_TIMER_PHYEND_DELAY_COMPENSATION_DISABLE_PPI) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   21fb6:	4770      	bx	lr
   21fb8:	4000b000 	.word	0x4000b000
   21fbc:	4001f000 	.word	0x4001f000
   21fc0:	0e7000c0 	.word	0x0e7000c0

00021fc4 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   21fc4:	4b03      	ldr	r3, [pc, #12]	; (21fd4 <radio_tmr_tifs_set+0x10>)
   21fc6:	4a04      	ldr	r2, [pc, #16]	; (21fd8 <radio_tmr_tifs_set+0x14>)
   21fc8:	781b      	ldrb	r3, [r3, #0]
   21fca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   21fce:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   21fd2:	4770      	bx	lr
   21fd4:	20002d8c 	.word	0x20002d8c
   21fd8:	40009000 	.word	0x40009000

00021fdc <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   21fdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   21fe0:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   21fe4:	4d31      	ldr	r5, [pc, #196]	; (220ac <radio_tmr_start+0xd0>)
   21fe6:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   21fea:	42ab      	cmp	r3, r5
{
   21fec:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   21fee:	d906      	bls.n	21ffe <radio_tmr_start+0x22>
		ticks_start--;
		remainder += 30517578UL;
   21ff0:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   21ff4:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   21ff8:	3901      	subs	r1, #1
		remainder += 30517578UL;
   21ffa:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21ffe:	4b2c      	ldr	r3, [pc, #176]	; (220b0 <radio_tmr_start+0xd4>)
	}
	remainder /= 1000000UL;
   22000:	482c      	ldr	r0, [pc, #176]	; (220b4 <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   22002:	4d2d      	ldr	r5, [pc, #180]	; (220b8 <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   22004:	4e2d      	ldr	r6, [pc, #180]	; (220bc <radio_tmr_start+0xe0>)
   22006:	2701      	movs	r7, #1
   22008:	60df      	str	r7, [r3, #12]

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   2200a:	2700      	movs	r7, #0
   2200c:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	remainder /= 1000000UL;
   22010:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   22014:	2704      	movs	r7, #4
   22016:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   2201a:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   2201c:	2702      	movs	r7, #2
   2201e:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   22022:	4a27      	ldr	r2, [pc, #156]	; (220c0 <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   22024:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   22028:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   2202c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   22030:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   22034:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   22036:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2203a:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   2203e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   22042:	bb64      	cbnz	r4, 2209e <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   22044:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   22048:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   2204c:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   22050:	4b1b      	ldr	r3, [pc, #108]	; (220c0 <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22052:	4a1c      	ldr	r2, [pc, #112]	; (220c4 <radio_tmr_start+0xe8>)
   22054:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   22058:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   2205a:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2205c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 220c8 <radio_tmr_start+0xec>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   22060:	f8df e068 	ldr.w	lr, [pc, #104]	; 220cc <radio_tmr_start+0xf0>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   22064:	f8df c068 	ldr.w	ip, [pc, #104]	; 220d0 <radio_tmr_start+0xf4>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   22068:	4f1a      	ldr	r7, [pc, #104]	; (220d4 <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2206a:	4e1b      	ldr	r6, [pc, #108]	; (220d8 <radio_tmr_start+0xfc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2206c:	4d1b      	ldr	r5, [pc, #108]	; (220dc <radio_tmr_start+0x100>)
   2206e:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   22070:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   22074:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   22078:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   2207c:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   22080:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   22082:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   22086:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2208a:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2208e:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   22092:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   22096:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   2209a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   2209e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   220a2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   220a6:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
   220aa:	e7d1      	b.n	22050 <radio_tmr_start+0x74>
   220ac:	7ff0bdbf 	.word	0x7ff0bdbf
   220b0:	40008000 	.word	0x40008000
   220b4:	431bde83 	.word	0x431bde83
   220b8:	4000b000 	.word	0x4000b000
   220bc:	4000b148 	.word	0x4000b148
   220c0:	4001f000 	.word	0x4001f000
   220c4:	40009000 	.word	0x40009000
   220c8:	4000110c 	.word	0x4000110c
   220cc:	4000900c 	.word	0x4000900c
   220d0:	40009140 	.word	0x40009140
   220d4:	4001f004 	.word	0x4001f004
   220d8:	40009144 	.word	0x40009144
   220dc:	4001f00c 	.word	0x4001f00c

000220e0 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   220e0:	4b01      	ldr	r3, [pc, #4]	; (220e8 <radio_tmr_start_get+0x8>)
   220e2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   220e6:	4770      	bx	lr
   220e8:	4000b000 	.word	0x4000b000

000220ec <radio_tmr_stop>:
   220ec:	4903      	ldr	r1, [pc, #12]	; (220fc <radio_tmr_stop+0x10>)
   220ee:	4a04      	ldr	r2, [pc, #16]	; (22100 <radio_tmr_stop+0x14>)
   220f0:	2301      	movs	r3, #1
   220f2:	604b      	str	r3, [r1, #4]
   220f4:	610b      	str	r3, [r1, #16]
   220f6:	6053      	str	r3, [r2, #4]
   220f8:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   220fa:	4770      	bx	lr
   220fc:	40008000 	.word	0x40008000
   22100:	40009000 	.word	0x40009000

00022104 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   22104:	4904      	ldr	r1, [pc, #16]	; (22118 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   22106:	4b05      	ldr	r3, [pc, #20]	; (2211c <radio_tmr_hcto_configure+0x18>)
   22108:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   2210c:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   22110:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   22114:	4770      	bx	lr
   22116:	bf00      	nop
   22118:	40008000 	.word	0x40008000
   2211c:	4001f000 	.word	0x4001f000

00022120 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   22120:	4b05      	ldr	r3, [pc, #20]	; (22138 <radio_tmr_aa_capture+0x18>)
   22122:	4806      	ldr	r0, [pc, #24]	; (2213c <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   22124:	4906      	ldr	r1, [pc, #24]	; (22140 <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   22126:	4a07      	ldr	r2, [pc, #28]	; (22144 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   22128:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2212c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   22130:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   22134:	4770      	bx	lr
   22136:	bf00      	nop
   22138:	4001f000 	.word	0x4001f000
   2213c:	40001100 	.word	0x40001100
   22140:	40008040 	.word	0x40008040
   22144:	04000080 	.word	0x04000080

00022148 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   22148:	4b01      	ldr	r3, [pc, #4]	; (22150 <radio_tmr_aa_get+0x8>)
   2214a:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   2214e:	4770      	bx	lr
   22150:	40008000 	.word	0x40008000

00022154 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   22154:	4b01      	ldr	r3, [pc, #4]	; (2215c <radio_tmr_aa_save+0x8>)
   22156:	6018      	str	r0, [r3, #0]
}
   22158:	4770      	bx	lr
   2215a:	bf00      	nop
   2215c:	200027bc 	.word	0x200027bc

00022160 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   22160:	4b01      	ldr	r3, [pc, #4]	; (22168 <radio_tmr_aa_restore+0x8>)
}
   22162:	6818      	ldr	r0, [r3, #0]
   22164:	4770      	bx	lr
   22166:	bf00      	nop
   22168:	200027bc 	.word	0x200027bc

0002216c <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   2216c:	4b01      	ldr	r3, [pc, #4]	; (22174 <radio_tmr_ready_get+0x8>)
   2216e:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   22172:	4770      	bx	lr
   22174:	40008000 	.word	0x40008000

00022178 <radio_tmr_end_capture>:
   22178:	4b02      	ldr	r3, [pc, #8]	; (22184 <radio_tmr_end_capture+0xc>)
   2217a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   2217e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X ||
	* (CONFIG_SOC_SERIES_NRF53X && !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	*/
}
   22182:	4770      	bx	lr
   22184:	4001f000 	.word	0x4001f000

00022188 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   22188:	4b01      	ldr	r3, [pc, #4]	; (22190 <radio_tmr_end_get+0x8>)
   2218a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   2218e:	4770      	bx	lr
   22190:	40008000 	.word	0x40008000

00022194 <radio_tmr_tifs_base_get>:
   22194:	4b01      	ldr	r3, [pc, #4]	; (2219c <radio_tmr_tifs_base_get+0x8>)
   22196:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   2219a:	4770      	bx	lr
   2219c:	40008000 	.word	0x40008000

000221a0 <radio_ccm_rx_pkt_set>:

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   221a0:	4b17      	ldr	r3, [pc, #92]	; (22200 <radio_ccm_rx_pkt_set+0x60>)
{
   221a2:	b470      	push	{r4, r5, r6}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   221a4:	2400      	movs	r4, #0
{
   221a6:	4605      	mov	r5, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   221a8:	2602      	movs	r6, #2
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   221aa:	4816      	ldr	r0, [pc, #88]	; (22204 <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   221ac:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   221b0:	f8c3 6500 	str.w	r6, [r3, #1280]	; 0x500
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   221b4:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   221b8:	4e13      	ldr	r6, [pc, #76]	; (22208 <radio_ccm_rx_pkt_set+0x68>)
   221ba:	b2c0      	uxtb	r0, r0
			RADIO_PCNF1_MAXLEN_Pos;

	NRF_CCM->MAXPACKETSIZE = max_len;
   221bc:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   221c0:	4812      	ldr	r0, [pc, #72]	; (2220c <radio_ccm_rx_pkt_set+0x6c>)
   221c2:	2902      	cmp	r1, #2
   221c4:	bf08      	it	eq
   221c6:	4630      	moveq	r0, r6
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
   221c8:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   221cc:	4810      	ldr	r0, [pc, #64]	; (22210 <radio_ccm_rx_pkt_set+0x70>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   221ce:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   221d2:	4910      	ldr	r1, [pc, #64]	; (22214 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   221d4:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   221d8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   221dc:	4a0e      	ldr	r2, [pc, #56]	; (22218 <radio_ccm_rx_pkt_set+0x78>)
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   221de:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
   221e2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->SHORTS = 0;
   221e6:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   221ea:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   221ee:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   221f2:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   221f6:	2201      	movs	r2, #1
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   221f8:	bc70      	pop	{r4, r5, r6}
   221fa:	601a      	str	r2, [r3, #0]
   221fc:	4770      	bx	lr
   221fe:	bf00      	nop
   22200:	4000f000 	.word	0x4000f000
   22204:	40001000 	.word	0x40001000
   22208:	01010001 	.word	0x01010001
   2220c:	01000001 	.word	0x01000001
   22210:	200026b0 	.word	0x200026b0
   22214:	200025a0 	.word	0x200025a0
   22218:	4001f000 	.word	0x4001f000

0002221c <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   2221c:	4b0f      	ldr	r3, [pc, #60]	; (2225c <radio_ccm_tx_pkt_set+0x40>)
{
   2221e:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   22220:	2200      	movs	r2, #0
{
   22222:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   22224:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   22226:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   2222a:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   2222e:	480c      	ldr	r0, [pc, #48]	; (22260 <radio_ccm_tx_pkt_set+0x44>)
   22230:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   22234:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   22238:	480a      	ldr	r0, [pc, #40]	; (22264 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   2223a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   2223e:	4c0a      	ldr	r4, [pc, #40]	; (22268 <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   22240:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   22244:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   22246:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   2224a:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   2224e:	bc10      	pop	{r4}
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   22250:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   22254:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   22258:	6019      	str	r1, [r3, #0]
}
   2225a:	4770      	bx	lr
   2225c:	4000f000 	.word	0x4000f000
   22260:	01010000 	.word	0x01010000
   22264:	200026b0 	.word	0x200026b0
   22268:	200025a0 	.word	0x200025a0

0002226c <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   2226c:	4a0e      	ldr	r2, [pc, #56]	; (222a8 <radio_ccm_is_done+0x3c>)
   2226e:	2302      	movs	r3, #2
   22270:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   22274:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   22278:	b933      	cbnz	r3, 22288 <radio_ccm_is_done+0x1c>
		__WFE();
   2227a:	bf20      	wfe
		__SEV();
   2227c:	bf40      	sev
		__WFE();
   2227e:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   22280:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   22284:	2b00      	cmp	r3, #0
   22286:	d0f8      	beq.n	2227a <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   22288:	4b07      	ldr	r3, [pc, #28]	; (222a8 <radio_ccm_is_done+0x3c>)
   2228a:	4a08      	ldr	r2, [pc, #32]	; (222ac <radio_ccm_is_done+0x40>)
   2228c:	2002      	movs	r0, #2
   2228e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   22292:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   22296:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   2229a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   2229e:	fab0 f080 	clz	r0, r0
   222a2:	0940      	lsrs	r0, r0, #5
   222a4:	4770      	bx	lr
   222a6:	bf00      	nop
   222a8:	4000f000 	.word	0x4000f000
   222ac:	e000e100 	.word	0xe000e100

000222b0 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   222b0:	4b03      	ldr	r3, [pc, #12]	; (222c0 <radio_ccm_mic_is_valid+0x10>)
   222b2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   222b6:	3800      	subs	r0, #0
   222b8:	bf18      	it	ne
   222ba:	2001      	movne	r0, #1
   222bc:	4770      	bx	lr
   222be:	bf00      	nop
   222c0:	4000f000 	.word	0x4000f000

000222c4 <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   222c4:	4a15      	ldr	r2, [pc, #84]	; (2231c <radio_ar_configure+0x58>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   222c6:	4b16      	ldr	r3, [pc, #88]	; (22320 <radio_ar_configure+0x5c>)
{
   222c8:	b4f0      	push	{r4, r5, r6, r7}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   222ca:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   222ce:	4e15      	ldr	r6, [pc, #84]	; (22324 <radio_ar_configure+0x60>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   222d0:	2703      	movs	r7, #3
   222d2:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500

	NRF_AAR->EVENTS_END = 0;
   222d6:	2400      	movs	r4, #0
	NRF_AAR->NIRK = nirk;
   222d8:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		addrptr = NRF_RADIO->PACKETPTR - 1;
   222dc:	3d01      	subs	r5, #1
	NRF_AAR->IRKPTR = (uint32_t)irk;
   222de:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->BCC = radio_bcc;
   222e2:	2140      	movs	r1, #64	; 0x40
	NRF_AAR->ADDRPTR = addrptr;
   222e4:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   222e8:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   222ec:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   222f0:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   222f4:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   222f8:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   222fc:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   22300:	4909      	ldr	r1, [pc, #36]	; (22328 <radio_ar_configure+0x64>)
   22302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22306:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   2230a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   2230e:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   22312:	bcf0      	pop	{r4, r5, r6, r7}
   22314:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   22318:	4770      	bx	lr
   2231a:	bf00      	nop
   2231c:	40001000 	.word	0x40001000
   22320:	4000f000 	.word	0x4000f000
   22324:	2000259c 	.word	0x2000259c
   22328:	4001f000 	.word	0x4001f000

0002232c <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   2232c:	4b01      	ldr	r3, [pc, #4]	; (22334 <radio_ar_match_get+0x8>)
   2232e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   22332:	4770      	bx	lr
   22334:	4000f000 	.word	0x4000f000

00022338 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   22338:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   2233a:	4807      	ldr	r0, [pc, #28]	; (22358 <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   2233c:	4c07      	ldr	r4, [pc, #28]	; (2235c <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   2233e:	4a08      	ldr	r2, [pc, #32]	; (22360 <radio_ar_status_reset+0x28>)
   22340:	2300      	movs	r3, #0
   22342:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   22346:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   2234a:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   2234e:	bc10      	pop	{r4}
   22350:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   22354:	4770      	bx	lr
   22356:	bf00      	nop
   22358:	4000f000 	.word	0x4000f000
   2235c:	40001000 	.word	0x40001000
   22360:	4001f000 	.word	0x4001f000

00022364 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   22364:	4b12      	ldr	r3, [pc, #72]	; (223b0 <radio_ar_has_match+0x4c>)
   22366:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	if (!radio_bc_has_match()) {
   2236a:	b1fb      	cbz	r3, 223ac <radio_ar_has_match+0x48>
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)aar_event);
}

NRF_STATIC_INLINE void nrf_aar_int_enable(NRF_AAR_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   2236c:	4a11      	ldr	r2, [pc, #68]	; (223b4 <radio_ar_has_match+0x50>)
   2236e:	2301      	movs	r3, #1
   22370:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
		return 0U;
	}

	nrf_aar_int_enable(NRF_AAR, AAR_INTENSET_END_Msk);

	while (NRF_AAR->EVENTS_END == 0U) {
   22374:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   22378:	b933      	cbnz	r3, 22388 <radio_ar_has_match+0x24>
		__WFE();
   2237a:	bf20      	wfe
		__SEV();
   2237c:	bf40      	sev
		__WFE();
   2237e:	bf20      	wfe
	while (NRF_AAR->EVENTS_END == 0U) {
   22380:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   22384:	2b00      	cmp	r3, #0
   22386:	d0f8      	beq.n	2237a <radio_ar_has_match+0x16>
    return p_reg->INTENSET & mask;
}

NRF_STATIC_INLINE void nrf_aar_int_disable(NRF_AAR_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   22388:	4b0a      	ldr	r3, [pc, #40]	; (223b4 <radio_ar_has_match+0x50>)
   2238a:	4a0b      	ldr	r2, [pc, #44]	; (223b8 <radio_ar_has_match+0x54>)
   2238c:	2001      	movs	r0, #1
   2238e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   22392:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   22396:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180

	nrf_aar_int_disable(NRF_AAR, AAR_INTENCLR_END_Msk);

	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_AAR));

	if (NRF_AAR->EVENTS_RESOLVED && !NRF_AAR->EVENTS_NOTRESOLVED) {
   2239a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   2239e:	b12a      	cbz	r2, 223ac <radio_ar_has_match+0x48>
   223a0:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
   223a4:	fab0 f080 	clz	r0, r0
   223a8:	0940      	lsrs	r0, r0, #5
		return 1U;
	}

	return 0U;
}
   223aa:	4770      	bx	lr
		return 0U;
   223ac:	2000      	movs	r0, #0
   223ae:	4770      	bx	lr
   223b0:	40001000 	.word	0x40001000
   223b4:	4000f000 	.word	0x4000f000
   223b8:	e000e100 	.word	0xe000e100

000223bc <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   223bc:	2902      	cmp	r1, #2
{
   223be:	b510      	push	{r4, lr}
   223c0:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   223c2:	d00b      	beq.n	223dc <mayfly_enable_cb+0x20>
   223c4:	4a0a      	ldr	r2, [pc, #40]	; (223f0 <mayfly_enable_cb+0x34>)
   223c6:	490b      	ldr	r1, [pc, #44]	; (223f4 <mayfly_enable_cb+0x38>)
   223c8:	480b      	ldr	r0, [pc, #44]	; (223f8 <mayfly_enable_cb+0x3c>)
   223ca:	231e      	movs	r3, #30
   223cc:	f005 f8b2 	bl	27534 <assert_print>
   223d0:	4040      	eors	r0, r0
   223d2:	f380 8811 	msr	BASEPRI, r0
   223d6:	f04f 0003 	mov.w	r0, #3
   223da:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   223dc:	200b      	movs	r0, #11
	if (enable) {
   223de:	b11c      	cbz	r4, 223e8 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   223e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   223e4:	f7ed b828 	b.w	f438 <arch_irq_enable>
}
   223e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   223ec:	f7ed b834 	b.w	f458 <arch_irq_disable>
   223f0:	00030508 	.word	0x00030508
   223f4:	00030558 	.word	0x00030558
   223f8:	0002f8a0 	.word	0x0002f8a0

000223fc <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   223fc:	b129      	cbz	r1, 2240a <mayfly_is_enabled+0xe>
   223fe:	3901      	subs	r1, #1
   22400:	2901      	cmp	r1, #1
   22402:	d805      	bhi.n	22410 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   22404:	200b      	movs	r0, #11
   22406:	f7ed b83b 	b.w	f480 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   2240a:	2018      	movs	r0, #24
   2240c:	f7ed b838 	b.w	f480 <arch_irq_is_enabled>
{
   22410:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   22412:	4a07      	ldr	r2, [pc, #28]	; (22430 <mayfly_is_enabled+0x34>)
   22414:	4907      	ldr	r1, [pc, #28]	; (22434 <mayfly_is_enabled+0x38>)
   22416:	4808      	ldr	r0, [pc, #32]	; (22438 <mayfly_is_enabled+0x3c>)
   22418:	2336      	movs	r3, #54	; 0x36
   2241a:	f005 f88b 	bl	27534 <assert_print>
   2241e:	4040      	eors	r0, r0
   22420:	f380 8811 	msr	BASEPRI, r0
   22424:	f04f 0003 	mov.w	r0, #3
   22428:	df02      	svc	2
		break;
	}

	return 0;
}
   2242a:	2000      	movs	r0, #0
   2242c:	bd08      	pop	{r3, pc}
   2242e:	bf00      	nop
   22430:	00030508 	.word	0x00030508
   22434:	0002f900 	.word	0x0002f900
   22438:	0002f8a0 	.word	0x0002f8a0

0002243c <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   2243c:	4288      	cmp	r0, r1
   2243e:	d00b      	beq.n	22458 <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   22440:	2801      	cmp	r0, #1
   22442:	d003      	beq.n	2244c <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   22444:	2802      	cmp	r0, #2
   22446:	d009      	beq.n	2245c <mayfly_prio_is_equal+0x20>
   22448:	2000      	movs	r0, #0
#endif
	       0;
}
   2244a:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   2244c:	f1a1 0002 	sub.w	r0, r1, #2
   22450:	fab0 f080 	clz	r0, r0
   22454:	0940      	lsrs	r0, r0, #5
   22456:	4770      	bx	lr
   22458:	2001      	movs	r0, #1
   2245a:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   2245c:	f1a1 0001 	sub.w	r0, r1, #1
   22460:	fab0 f080 	clz	r0, r0
   22464:	0940      	lsrs	r0, r0, #5
   22466:	4770      	bx	lr

00022468 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   22468:	2901      	cmp	r1, #1
{
   2246a:	b508      	push	{r3, lr}
	switch (callee_id) {
   2246c:	d00f      	beq.n	2248e <mayfly_pend+0x26>
   2246e:	2902      	cmp	r1, #2
   22470:	d00d      	beq.n	2248e <mayfly_pend+0x26>
   22472:	b191      	cbz	r1, 2249a <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   22474:	4a0c      	ldr	r2, [pc, #48]	; (224a8 <mayfly_pend+0x40>)
   22476:	490d      	ldr	r1, [pc, #52]	; (224ac <mayfly_pend+0x44>)
   22478:	480d      	ldr	r0, [pc, #52]	; (224b0 <mayfly_pend+0x48>)
   2247a:	2367      	movs	r3, #103	; 0x67
   2247c:	f005 f85a 	bl	27534 <assert_print>
   22480:	4040      	eors	r0, r0
   22482:	f380 8811 	msr	BASEPRI, r0
   22486:	f04f 0003 	mov.w	r0, #3
   2248a:	df02      	svc	2
		break;
	}
}
   2248c:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2248e:	4b09      	ldr	r3, [pc, #36]	; (224b4 <mayfly_pend+0x4c>)
   22490:	f44f 6200 	mov.w	r2, #2048	; 0x800
   22494:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   22498:	bd08      	pop	{r3, pc}
   2249a:	4b06      	ldr	r3, [pc, #24]	; (224b4 <mayfly_pend+0x4c>)
   2249c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   224a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   224a4:	bd08      	pop	{r3, pc}
   224a6:	bf00      	nop
   224a8:	00030508 	.word	0x00030508
   224ac:	0002f900 	.word	0x0002f900
   224b0:	0002f8a0 	.word	0x0002f8a0
   224b4:	e000e100 	.word	0xe000e100

000224b8 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   224b8:	2803      	cmp	r0, #3
{
   224ba:	b510      	push	{r4, lr}
   224bc:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   224be:	d804      	bhi.n	224ca <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   224c0:	4b11      	ldr	r3, [pc, #68]	; (22508 <hal_ticker_instance0_caller_id_get+0x50>)
   224c2:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   224c4:	b18c      	cbz	r4, 224ea <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   224c6:	4620      	mov	r0, r4
   224c8:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   224ca:	4a10      	ldr	r2, [pc, #64]	; (2250c <hal_ticker_instance0_caller_id_get+0x54>)
   224cc:	4910      	ldr	r1, [pc, #64]	; (22510 <hal_ticker_instance0_caller_id_get+0x58>)
   224ce:	4811      	ldr	r0, [pc, #68]	; (22514 <hal_ticker_instance0_caller_id_get+0x5c>)
   224d0:	232b      	movs	r3, #43	; 0x2b
   224d2:	f005 f82f 	bl	27534 <assert_print>
   224d6:	4040      	eors	r0, r0
   224d8:	f380 8811 	msr	BASEPRI, r0
   224dc:	f04f 0003 	mov.w	r0, #3
   224e0:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   224e2:	4b09      	ldr	r3, [pc, #36]	; (22508 <hal_ticker_instance0_caller_id_get+0x50>)
   224e4:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   224e6:	2c00      	cmp	r4, #0
   224e8:	d1ed      	bne.n	224c6 <hal_ticker_instance0_caller_id_get+0xe>
   224ea:	4a08      	ldr	r2, [pc, #32]	; (2250c <hal_ticker_instance0_caller_id_get+0x54>)
   224ec:	490a      	ldr	r1, [pc, #40]	; (22518 <hal_ticker_instance0_caller_id_get+0x60>)
   224ee:	4809      	ldr	r0, [pc, #36]	; (22514 <hal_ticker_instance0_caller_id_get+0x5c>)
   224f0:	232e      	movs	r3, #46	; 0x2e
   224f2:	f005 f81f 	bl	27534 <assert_print>
   224f6:	4040      	eors	r0, r0
   224f8:	f380 8811 	msr	BASEPRI, r0
   224fc:	f04f 0003 	mov.w	r0, #3
   22500:	df02      	svc	2
}
   22502:	4620      	mov	r0, r4
   22504:	bd10      	pop	{r4, pc}
   22506:	bf00      	nop
   22508:	000305e8 	.word	0x000305e8
   2250c:	00030568 	.word	0x00030568
   22510:	000305b8 	.word	0x000305b8
   22514:	0002f8a0 	.word	0x0002f8a0
   22518:	000305d8 	.word	0x000305d8

0002251c <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   2251c:	3801      	subs	r0, #1
{
   2251e:	b510      	push	{r4, lr}
   22520:	461c      	mov	r4, r3
	switch (caller_id) {
   22522:	2804      	cmp	r0, #4
   22524:	f200 8082 	bhi.w	2262c <hal_ticker_instance0_sched+0x110>
   22528:	e8df f000 	tbb	[pc, r0]
   2252c:	3f302112 	.word	0x3f302112
   22530:	03          	.byte	0x03
   22531:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   22532:	2904      	cmp	r1, #4
   22534:	d04a      	beq.n	225cc <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   22536:	4a44      	ldr	r2, [pc, #272]	; (22648 <hal_ticker_instance0_sched+0x12c>)
   22538:	4944      	ldr	r1, [pc, #272]	; (2264c <hal_ticker_instance0_sched+0x130>)
   2253a:	4845      	ldr	r0, [pc, #276]	; (22650 <hal_ticker_instance0_sched+0x134>)
   2253c:	23ba      	movs	r3, #186	; 0xba
   2253e:	f004 fff9 	bl	27534 <assert_print>
   22542:	4040      	eors	r0, r0
   22544:	f380 8811 	msr	BASEPRI, r0
   22548:	f04f 0003 	mov.w	r0, #3
   2254c:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   2254e:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   22550:	2904      	cmp	r1, #4
   22552:	d043      	beq.n	225dc <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   22554:	4a3c      	ldr	r2, [pc, #240]	; (22648 <hal_ticker_instance0_sched+0x12c>)
   22556:	493d      	ldr	r1, [pc, #244]	; (2264c <hal_ticker_instance0_sched+0x130>)
   22558:	483d      	ldr	r0, [pc, #244]	; (22650 <hal_ticker_instance0_sched+0x134>)
   2255a:	234e      	movs	r3, #78	; 0x4e
   2255c:	f004 ffea 	bl	27534 <assert_print>
   22560:	4040      	eors	r0, r0
   22562:	f380 8811 	msr	BASEPRI, r0
   22566:	f04f 0003 	mov.w	r0, #3
   2256a:	df02      	svc	2
}
   2256c:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   2256e:	2903      	cmp	r1, #3
   22570:	d03c      	beq.n	225ec <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   22572:	4a35      	ldr	r2, [pc, #212]	; (22648 <hal_ticker_instance0_sched+0x12c>)
   22574:	4935      	ldr	r1, [pc, #212]	; (2264c <hal_ticker_instance0_sched+0x130>)
   22576:	4836      	ldr	r0, [pc, #216]	; (22650 <hal_ticker_instance0_sched+0x134>)
   22578:	2365      	movs	r3, #101	; 0x65
   2257a:	f004 ffdb 	bl	27534 <assert_print>
   2257e:	4040      	eors	r0, r0
   22580:	f380 8811 	msr	BASEPRI, r0
   22584:	f04f 0003 	mov.w	r0, #3
   22588:	df02      	svc	2
}
   2258a:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   2258c:	2904      	cmp	r1, #4
   2258e:	d035      	beq.n	225fc <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   22590:	4a2d      	ldr	r2, [pc, #180]	; (22648 <hal_ticker_instance0_sched+0x12c>)
   22592:	492e      	ldr	r1, [pc, #184]	; (2264c <hal_ticker_instance0_sched+0x130>)
   22594:	482e      	ldr	r0, [pc, #184]	; (22650 <hal_ticker_instance0_sched+0x134>)
   22596:	237c      	movs	r3, #124	; 0x7c
   22598:	f004 ffcc 	bl	27534 <assert_print>
   2259c:	4040      	eors	r0, r0
   2259e:	f380 8811 	msr	BASEPRI, r0
   225a2:	f04f 0003 	mov.w	r0, #3
   225a6:	df02      	svc	2
}
   225a8:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   225aa:	2903      	cmp	r1, #3
   225ac:	d036      	beq.n	2261c <hal_ticker_instance0_sched+0x100>
   225ae:	2904      	cmp	r1, #4
   225b0:	d02c      	beq.n	2260c <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   225b2:	4a25      	ldr	r2, [pc, #148]	; (22648 <hal_ticker_instance0_sched+0x12c>)
   225b4:	4925      	ldr	r1, [pc, #148]	; (2264c <hal_ticker_instance0_sched+0x130>)
   225b6:	4826      	ldr	r0, [pc, #152]	; (22650 <hal_ticker_instance0_sched+0x134>)
   225b8:	23a2      	movs	r3, #162	; 0xa2
   225ba:	f004 ffbb 	bl	27534 <assert_print>
   225be:	4040      	eors	r0, r0
   225c0:	f380 8811 	msr	BASEPRI, r0
   225c4:	f04f 0003 	mov.w	r0, #3
   225c8:	df02      	svc	2
}
   225ca:	bd10      	pop	{r4, pc}
			m.param = instance;
   225cc:	4b21      	ldr	r3, [pc, #132]	; (22654 <hal_ticker_instance0_sched+0x138>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   225ce:	2102      	movs	r1, #2
			m.param = instance;
   225d0:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   225d2:	2003      	movs	r0, #3
}
   225d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   225d8:	f7f2 bedc 	b.w	15394 <mayfly_enqueue>
			m.param = instance;
   225dc:	4b1e      	ldr	r3, [pc, #120]	; (22658 <hal_ticker_instance0_sched+0x13c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   225de:	2102      	movs	r1, #2
			m.param = instance;
   225e0:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   225e2:	2000      	movs	r0, #0
}
   225e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   225e8:	f7f2 bed4 	b.w	15394 <mayfly_enqueue>
			m.param = instance;
   225ec:	4b1b      	ldr	r3, [pc, #108]	; (2265c <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   225ee:	2101      	movs	r1, #1
			m.param = instance;
   225f0:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   225f2:	4608      	mov	r0, r1
}
   225f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   225f8:	f7f2 becc 	b.w	15394 <mayfly_enqueue>
			m.param = instance;
   225fc:	4b18      	ldr	r3, [pc, #96]	; (22660 <hal_ticker_instance0_sched+0x144>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   225fe:	2102      	movs	r1, #2
			m.param = instance;
   22600:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   22602:	2001      	movs	r0, #1
}
   22604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   22608:	f7f2 bec4 	b.w	15394 <mayfly_enqueue>
			m.param = instance;
   2260c:	4b15      	ldr	r3, [pc, #84]	; (22664 <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   2260e:	2102      	movs	r1, #2
			m.param = instance;
   22610:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   22612:	4608      	mov	r0, r1
}
   22614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   22618:	f7f2 bebc 	b.w	15394 <mayfly_enqueue>
			m.param = instance;
   2261c:	4b12      	ldr	r3, [pc, #72]	; (22668 <hal_ticker_instance0_sched+0x14c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   2261e:	2101      	movs	r1, #1
			m.param = instance;
   22620:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   22622:	2002      	movs	r0, #2
}
   22624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   22628:	f7f2 beb4 	b.w	15394 <mayfly_enqueue>
		LL_ASSERT(0);
   2262c:	4a06      	ldr	r2, [pc, #24]	; (22648 <hal_ticker_instance0_sched+0x12c>)
   2262e:	4907      	ldr	r1, [pc, #28]	; (2264c <hal_ticker_instance0_sched+0x130>)
   22630:	4807      	ldr	r0, [pc, #28]	; (22650 <hal_ticker_instance0_sched+0x134>)
   22632:	23c0      	movs	r3, #192	; 0xc0
   22634:	f004 ff7e 	bl	27534 <assert_print>
   22638:	4040      	eors	r0, r0
   2263a:	f380 8811 	msr	BASEPRI, r0
   2263e:	f04f 0003 	mov.w	r0, #3
   22642:	df02      	svc	2
}
   22644:	bd10      	pop	{r4, pc}
   22646:	bf00      	nop
   22648:	00030568 	.word	0x00030568
   2264c:	0002f900 	.word	0x0002f900
   22650:	0002f8a0 	.word	0x0002f8a0
   22654:	2000065c 	.word	0x2000065c
   22658:	2000064c 	.word	0x2000064c
   2265c:	2000063c 	.word	0x2000063c
   22660:	2000068c 	.word	0x2000068c
   22664:	2000066c 	.word	0x2000066c
   22668:	2000067c 	.word	0x2000067c

0002266c <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   2266c:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   2266e:	2000      	movs	r0, #0
   22670:	f7ff b9e0 	b.w	21a34 <cntr_cmp_set>

00022674 <hci_vendor_read_static_addr>:

#include <soc.h>

uint8_t hci_vendor_read_static_addr(struct bt_hci_vs_static_addr addrs[],
				 uint8_t size)
{
   22674:	b508      	push	{r3, lr}
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   22676:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2267a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   2267e:	3201      	adds	r2, #1
   22680:	d008      	beq.n	22694 <hci_vendor_read_static_addr+0x20>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   22682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   22686:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   2268a:	f013 0301 	ands.w	r3, r3, #1
   2268e:	d10a      	bne.n	226a6 <hci_vendor_read_static_addr+0x32>
		}

		return 1;
	}

	return 0;
   22690:	4618      	mov	r0, r3
}
   22692:	bd08      	pop	{r3, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   22694:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   22698:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2269c:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   2269e:	4293      	cmp	r3, r2
   226a0:	d1ef      	bne.n	22682 <hci_vendor_read_static_addr+0xe>
	return 0;
   226a2:	2000      	movs	r0, #0
}
   226a4:	bd08      	pop	{r3, pc}
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   226a6:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   226aa:	7003      	strb	r3, [r0, #0]
	sys_put_le16(val >> 16, &dst[2]);
   226ac:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   226ae:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   226b2:	f3c3 2307 	ubfx	r3, r3, #8, #8
   226b6:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   226b8:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   226ba:	f880 c003 	strb.w	ip, [r0, #3]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   226be:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   226c2:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   226c4:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   226c8:	f063 033f 	orn	r3, r3, #63	; 0x3f
   226cc:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   226ce:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   226d2:	3301      	adds	r3, #1
   226d4:	d03b      	beq.n	2274e <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   226d6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   226da:	3301      	adds	r3, #1
   226dc:	d037      	beq.n	2274e <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   226de:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   226e2:	3301      	adds	r3, #1
   226e4:	d033      	beq.n	2274e <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   226e6:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   226ea:	3301      	adds	r3, #1
   226ec:	d02f      	beq.n	2274e <hci_vendor_read_static_addr+0xda>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   226ee:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   226f2:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   226f4:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   226f6:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   226fa:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   226fe:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   22700:	f880 c009 	strb.w	ip, [r0, #9]
   22704:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   22706:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   2270a:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   2270c:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   2270e:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   22712:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   22716:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   22718:	f880 c00d 	strb.w	ip, [r0, #13]
   2271c:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   2271e:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   22722:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   22724:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   22726:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   2272a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   2272e:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   22730:	73c3      	strb	r3, [r0, #15]
   22732:	f880 c011 	strb.w	ip, [r0, #17]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   22736:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   2273a:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   2273c:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   2273e:	0a11      	lsrs	r1, r2, #8
   22740:	f3c3 2307 	ubfx	r3, r3, #8, #8
   22744:	74c3      	strb	r3, [r0, #19]
	dst[0] = val;
   22746:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   22748:	7541      	strb	r1, [r0, #21]
		return 1;
   2274a:	2001      	movs	r0, #1
}
   2274c:	bd08      	pop	{r3, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   2274e:	2210      	movs	r2, #16
   22750:	2100      	movs	r1, #0
   22752:	3006      	adds	r0, #6
   22754:	f006 fe02 	bl	2935c <memset>
		return 1;
   22758:	2001      	movs	r0, #1
}
   2275a:	bd08      	pop	{r3, pc}

0002275c <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   2275c:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   2275e:	2210      	movs	r2, #16
{
   22760:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   22762:	2100      	movs	r1, #0
   22764:	f006 fdfa 	bl	2935c <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   22768:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2276c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   22770:	3201      	adds	r2, #1
   22772:	d034      	beq.n	227de <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   22774:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   22778:	3201      	adds	r2, #1
   2277a:	d030      	beq.n	227de <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   2277c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   22780:	3201      	adds	r2, #1
   22782:	d02c      	beq.n	227de <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   22784:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   22788:	3201      	adds	r2, #1
   2278a:	d028      	beq.n	227de <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   2278c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   22790:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   22792:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   22794:	0a08      	lsrs	r0, r1, #8
   22796:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   2279a:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   2279c:	70e0      	strb	r0, [r4, #3]
   2279e:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   227a0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   227a4:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   227a6:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   227a8:	0a08      	lsrs	r0, r1, #8
   227aa:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   227ae:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   227b0:	71e0      	strb	r0, [r4, #7]
   227b2:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   227b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   227b8:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   227ba:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   227bc:	0a08      	lsrs	r0, r1, #8
   227be:	f3c2 2207 	ubfx	r2, r2, #8, #8
   227c2:	7262      	strb	r2, [r4, #9]
	dst[0] = val;
   227c4:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   227c6:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   227c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   227cc:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   227ce:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   227d0:	0a11      	lsrs	r1, r2, #8
   227d2:	f3c3 2307 	ubfx	r3, r3, #8, #8
   227d6:	7363      	strb	r3, [r4, #13]
	dst[0] = val;
   227d8:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   227da:	73e1      	strb	r1, [r4, #15]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   227dc:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   227de:	4620      	mov	r0, r4
   227e0:	2210      	movs	r2, #16
}
   227e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   227e6:	2100      	movs	r1, #0
   227e8:	f006 bdb8 	b.w	2935c <memset>

000227ec <mcumgr_buf_alloc>:
	return net_buf_alloc_fixed(pool, timeout);
   227ec:	4802      	ldr	r0, [pc, #8]	; (227f8 <mcumgr_buf_alloc+0xc>)
   227ee:	2200      	movs	r2, #0
   227f0:	2300      	movs	r3, #0
   227f2:	f00a bd8c 	b.w	2d30e <net_buf_alloc_fixed>
   227f6:	bf00      	nop
   227f8:	20000ad8 	.word	0x20000ad8

000227fc <cbor_nb_reader_init>:

void
cbor_nb_reader_init(struct cbor_nb_reader *cnr,
		    struct net_buf *nb)
{
	cnr->r.get8 = &cbor_nb_reader_get8;
   227fc:	4b07      	ldr	r3, [pc, #28]	; (2281c <cbor_nb_reader_init+0x20>)
   227fe:	6003      	str	r3, [r0, #0]
	cnr->r.get16 = &cbor_nb_reader_get16;
   22800:	4b07      	ldr	r3, [pc, #28]	; (22820 <cbor_nb_reader_init+0x24>)
   22802:	6043      	str	r3, [r0, #4]
	cnr->r.get32 = &cbor_nb_reader_get32;
   22804:	4b07      	ldr	r3, [pc, #28]	; (22824 <cbor_nb_reader_init+0x28>)
   22806:	6083      	str	r3, [r0, #8]
	cnr->r.get64 = &cbor_nb_reader_get64;
   22808:	4b07      	ldr	r3, [pc, #28]	; (22828 <cbor_nb_reader_init+0x2c>)
   2280a:	60c3      	str	r3, [r0, #12]
	cnr->r.cmp = &cbor_nb_reader_cmp;
   2280c:	4b07      	ldr	r3, [pc, #28]	; (2282c <cbor_nb_reader_init+0x30>)
   2280e:	6103      	str	r3, [r0, #16]
	cnr->r.cpy = &cbor_nb_reader_cpy;
   22810:	4b07      	ldr	r3, [pc, #28]	; (22830 <cbor_nb_reader_init+0x34>)
   22812:	6143      	str	r3, [r0, #20]

	cnr->nb = nb;
	cnr->r.message_size = nb->len;
   22814:	898b      	ldrh	r3, [r1, #12]
	cnr->nb = nb;
   22816:	61c1      	str	r1, [r0, #28]
	cnr->r.message_size = nb->len;
   22818:	6183      	str	r3, [r0, #24]
}
   2281a:	4770      	bx	lr
   2281c:	0002c557 	.word	0x0002c557
   22820:	0002c56d 	.word	0x0002c56d
   22824:	0002c58b 	.word	0x0002c58b
   22828:	0002c5a7 	.word	0x0002c5a7
   2282c:	0002c5fd 	.word	0x0002c5fd
   22830:	0002c5d3 	.word	0x0002c5d3

00022834 <cbor_nb_writer_init>:
	return CborNoError;
}

void
cbor_nb_writer_init(struct cbor_nb_writer *cnw, struct net_buf *nb)
{
   22834:	b538      	push	{r3, r4, r5, lr}
   22836:	4604      	mov	r4, r0
   22838:	460d      	mov	r5, r1
	net_buf_reset(nb);
   2283a:	4608      	mov	r0, r1
   2283c:	f00a fd62 	bl	2d304 <net_buf_reset>
	cnw->nb = nb;
	/* Reserve header space */
	cnw->nb->len = sizeof(struct mgmt_hdr);
   22840:	2308      	movs	r3, #8
	cnw->nb = nb;
   22842:	60a5      	str	r5, [r4, #8]
	cnw->nb->len = sizeof(struct mgmt_hdr);
   22844:	81ab      	strh	r3, [r5, #12]
	cnw->enc.bytes_written = sizeof(struct mgmt_hdr);
   22846:	6063      	str	r3, [r4, #4]
	cnw->enc.write = &cbor_nb_write;
   22848:	4b01      	ldr	r3, [pc, #4]	; (22850 <cbor_nb_writer_init+0x1c>)
   2284a:	6023      	str	r3, [r4, #0]
}
   2284c:	bd38      	pop	{r3, r4, r5, pc}
   2284e:	bf00      	nop
   22850:	0002c623 	.word	0x0002c623

00022854 <zephyr_smp_handle_reqs>:
/**
 * Processes all received SNP request packets.
 */
static void
zephyr_smp_handle_reqs(struct k_work *work)
{
   22854:	b5f0      	push	{r4, r5, r6, r7, lr}
	streamer = (struct smp_streamer) {
   22856:	4e0d      	ldr	r6, [pc, #52]	; (2288c <zephyr_smp_handle_reqs+0x38>)
   22858:	4f0d      	ldr	r7, [pc, #52]	; (22890 <zephyr_smp_handle_reqs+0x3c>)
{
   2285a:	b091      	sub	sp, #68	; 0x44
   2285c:	4604      	mov	r4, r0
	struct zephyr_smp_transport *zst;
	struct net_buf *nb;

	zst = (void *)work;

	while ((nb = net_buf_get(&zst->zst_fifo, K_NO_WAIT)) != NULL) {
   2285e:	f100 0510 	add.w	r5, r0, #16
   22862:	2200      	movs	r2, #0
   22864:	2300      	movs	r3, #0
   22866:	4628      	mov	r0, r5
   22868:	f00a fd56 	bl	2d318 <net_buf_get>
   2286c:	4601      	mov	r1, r0
   2286e:	b908      	cbnz	r0, 22874 <zephyr_smp_handle_reqs+0x20>
		zephyr_smp_process_packet(zst, nb);
	}
}
   22870:	b011      	add	sp, #68	; 0x44
   22872:	bdf0      	pop	{r4, r5, r6, r7, pc}
	streamer = (struct smp_streamer) {
   22874:	ab08      	add	r3, sp, #32
	rc = smp_process_request_packet(&streamer, nb);
   22876:	a803      	add	r0, sp, #12
	streamer = (struct smp_streamer) {
   22878:	e9cd 6403 	strd	r6, r4, [sp, #12]
   2287c:	9305      	str	r3, [sp, #20]
   2287e:	f8cd d018 	str.w	sp, [sp, #24]
   22882:	9707      	str	r7, [sp, #28]
	rc = smp_process_request_packet(&streamer, nb);
   22884:	f00a fbbe 	bl	2d004 <smp_process_request_packet>
	return rc;
   22888:	e7eb      	b.n	22862 <zephyr_smp_handle_reqs+0xe>
   2288a:	bf00      	nop
   2288c:	000305fc 	.word	0x000305fc
   22890:	0002c6d7 	.word	0x0002c6d7

00022894 <zephyr_smp_transport_init>:
zephyr_smp_transport_init(struct zephyr_smp_transport *zst,
			  zephyr_smp_transport_out_fn *output_func,
			  zephyr_smp_transport_get_mtu_fn *get_mtu_func,
			  zephyr_smp_transport_ud_copy_fn *ud_copy_func,
			  zephyr_smp_transport_ud_free_fn *ud_free_func)
{
   22894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22898:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2289c:	4604      	mov	r4, r0
   2289e:	461d      	mov	r5, r3
   228a0:	460f      	mov	r7, r1
   228a2:	4616      	mov	r6, r2
	*zst = (struct zephyr_smp_transport) {
   228a4:	2100      	movs	r1, #0
   228a6:	2238      	movs	r2, #56	; 0x38
   228a8:	f006 fd58 	bl	2935c <memset>
   228ac:	e9c4 760a 	strd	r7, r6, [r4, #40]	; 0x28
   228b0:	e9c4 580c 	strd	r5, r8, [r4, #48]	; 0x30

#ifdef CONFIG_MCUMGR_SMP_REASSEMBLY
	zephyr_smp_reassembly_init(zst);
#endif

	k_work_init(&zst->zst_work, zephyr_smp_handle_reqs);
   228b4:	4904      	ldr	r1, [pc, #16]	; (228c8 <zephyr_smp_transport_init+0x34>)
   228b6:	4620      	mov	r0, r4
   228b8:	f00b ffce 	bl	2e858 <k_work_init>
	z_impl_k_queue_init(queue);
   228bc:	f104 0010 	add.w	r0, r4, #16
	k_fifo_init(&zst->zst_fifo);
}
   228c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   228c4:	f00b beeb 	b.w	2e69e <z_impl_k_queue_init>
   228c8:	00022855 	.word	0x00022855

000228cc <smp_bt_init>:
		k_work_init_delayable(&conn_data[i].ework, conn_param_on_error_retry);
	}
}

static int smp_bt_init(const struct device *dev)
{
   228cc:	b507      	push	{r0, r1, r2, lr}

	if (IS_ENABLED(CONFIG_MCUMGR_SMP_BT_CONN_PARAM_CONTROL)) {
		conn_param_control_init();
	}

	zephyr_smp_transport_init(&smp_bt_transport, smp_bt_tx_pkt,
   228ce:	4b06      	ldr	r3, [pc, #24]	; (228e8 <smp_bt_init+0x1c>)
   228d0:	9300      	str	r3, [sp, #0]
   228d2:	4a06      	ldr	r2, [pc, #24]	; (228ec <smp_bt_init+0x20>)
   228d4:	4b06      	ldr	r3, [pc, #24]	; (228f0 <smp_bt_init+0x24>)
   228d6:	4907      	ldr	r1, [pc, #28]	; (228f4 <smp_bt_init+0x28>)
   228d8:	4807      	ldr	r0, [pc, #28]	; (228f8 <smp_bt_init+0x2c>)
   228da:	f7ff ffdb 	bl	22894 <zephyr_smp_transport_init>
				  smp_bt_get_mtu, smp_bt_ud_copy,
				  smp_bt_ud_free);
	return 0;
}
   228de:	2000      	movs	r0, #0
   228e0:	b003      	add	sp, #12
   228e2:	f85d fb04 	ldr.w	pc, [sp], #4
   228e6:	bf00      	nop
   228e8:	0002c75f 	.word	0x0002c75f
   228ec:	0002c771 	.word	0x0002c771
   228f0:	0002c74d 	.word	0x0002c74d
   228f4:	0002c797 	.word	0x0002c797
   228f8:	200027f0 	.word	0x200027f0

000228fc <smp_bt_chr_write>:
{
   228fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22900:	4606      	mov	r6, r0
   22902:	4617      	mov	r7, r2
   22904:	461c      	mov	r4, r3
	nb = mcumgr_buf_alloc();
   22906:	f7ff ff71 	bl	227ec <mcumgr_buf_alloc>
	if (!nb) {
   2290a:	4605      	mov	r5, r0
   2290c:	b148      	cbz	r0, 22922 <smp_bt_chr_write+0x26>
	return net_buf_simple_tailroom(&buf->b);
   2290e:	f100 0808 	add.w	r8, r0, #8
   22912:	4640      	mov	r0, r8
   22914:	f00a fd98 	bl	2d448 <net_buf_simple_tailroom>
	if (net_buf_tailroom(nb) < len) {
   22918:	4284      	cmp	r4, r0
   2291a:	d905      	bls.n	22928 <smp_bt_chr_write+0x2c>
		mcumgr_buf_free(nb);
   2291c:	4628      	mov	r0, r5
   2291e:	f009 fe98 	bl	2c652 <mcumgr_buf_free>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   22922:	f06f 0010 	mvn.w	r0, #16
   22926:	e00d      	b.n	22944 <smp_bt_chr_write+0x48>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   22928:	4622      	mov	r2, r4
   2292a:	4639      	mov	r1, r7
   2292c:	4640      	mov	r0, r8
   2292e:	f00a fd56 	bl	2d3de <net_buf_simple_add_mem>
	ud->conn = bt_conn_ref(conn);
   22932:	4630      	mov	r0, r6
   22934:	f007 fc83 	bl	2a23e <bt_conn_ref>
	zephyr_smp_rx_req(&smp_bt_transport, nb);
   22938:	4629      	mov	r1, r5
	ud->conn = bt_conn_ref(conn);
   2293a:	6168      	str	r0, [r5, #20]
	zephyr_smp_rx_req(&smp_bt_transport, nb);
   2293c:	4802      	ldr	r0, [pc, #8]	; (22948 <smp_bt_chr_write+0x4c>)
   2293e:	f009 fefa 	bl	2c736 <zephyr_smp_rx_req>
	return len;
   22942:	4620      	mov	r0, r4
}
   22944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22948:	200027f0 	.word	0x200027f0

0002294c <smp_bt_notify>:
{
   2294c:	b570      	push	{r4, r5, r6, lr}
   2294e:	b086      	sub	sp, #24
   22950:	4604      	mov	r4, r0
   22952:	460e      	mov	r6, r1
   22954:	4615      	mov	r5, r2
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
   22956:	2100      	movs	r1, #0
   22958:	2218      	movs	r2, #24
   2295a:	4668      	mov	r0, sp
   2295c:	f006 fcfe 	bl	2935c <memset>

	params.attr = attr;
   22960:	4b05      	ldr	r3, [pc, #20]	; (22978 <smp_bt_notify+0x2c>)
	params.data = data;
	params.len = len;
   22962:	f8ad 500c 	strh.w	r5, [sp, #12]

	return bt_gatt_notify_cb(conn, &params);
   22966:	4669      	mov	r1, sp
   22968:	4620      	mov	r0, r4
	params.data = data;
   2296a:	e9cd 3601 	strd	r3, r6, [sp, #4]
	return bt_gatt_notify_cb(conn, &params);
   2296e:	f7f1 f861 	bl	13a34 <bt_gatt_notify_cb>
}
   22972:	b006      	add	sp, #24
   22974:	bd70      	pop	{r4, r5, r6, pc}
   22976:	bf00      	nop
   22978:	200006e4 	.word	0x200006e4

0002297c <smp_bt_register>:
	return bt_gatt_service_register(&smp_bt_svc);
   2297c:	4801      	ldr	r0, [pc, #4]	; (22984 <smp_bt_register+0x8>)
   2297e:	f7f0 be47 	b.w	13610 <bt_gatt_service_register>
   22982:	bf00      	nop
   22984:	2000070c 	.word	0x2000070c

00022988 <img_mgmt_impl_write_image_data>:
}

int
img_mgmt_impl_write_image_data(unsigned int offset, const void *data, unsigned int num_bytes,
				   bool last)
{
   22988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2298c:	4c12      	ldr	r4, [pc, #72]	; (229d8 <img_mgmt_impl_write_image_data+0x50>)
   2298e:	460e      	mov	r6, r1
   22990:	4617      	mov	r7, r2
   22992:	4698      	mov	r8, r3

	if (CONFIG_HEAP_MEM_POOL_SIZE > 0 && offset != 0 && ctx == NULL) {
		return MGMT_ERR_EUNKNOWN;
	}

	if (offset == 0) {
   22994:	4605      	mov	r5, r0
   22996:	b180      	cbz	r0, 229ba <img_mgmt_impl_write_image_data+0x32>
			rc = MGMT_ERR_EUNKNOWN;
			goto out;
		}
	}

	if (offset != ctx->stream.bytes_written + ctx->stream.buf_bytes) {
   22998:	6820      	ldr	r0, [r4, #0]
   2299a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
   2299e:	f8d0 220c 	ldr.w	r2, [r0, #524]	; 0x20c
   229a2:	4413      	add	r3, r2
   229a4:	42ab      	cmp	r3, r5
   229a6:	d113      	bne.n	229d0 <img_mgmt_impl_write_image_data+0x48>
		rc = MGMT_ERR_EUNKNOWN;
		goto out;
	}

	/* Cast away const. */
	rc = flash_img_buffered_write(ctx, (void *)data, num_bytes, last);
   229a8:	4643      	mov	r3, r8
   229aa:	463a      	mov	r2, r7
   229ac:	4631      	mov	r1, r6
   229ae:	f005 f870 	bl	27a92 <flash_img_buffered_write>
	if (rc != 0) {
   229b2:	3800      	subs	r0, #0
   229b4:	bf18      	it	ne
   229b6:	2001      	movne	r0, #1
	if (CONFIG_HEAP_MEM_POOL_SIZE > 0 && (last || rc != 0)) {
		k_free(ctx);
		ctx = NULL;
	}

	return rc;
   229b8:	e00b      	b.n	229d2 <img_mgmt_impl_write_image_data+0x4a>
		if (ctx == NULL) {
   229ba:	6823      	ldr	r3, [r4, #0]
   229bc:	b90b      	cbnz	r3, 229c2 <img_mgmt_impl_write_image_data+0x3a>
			ctx = alloc_ctx();
   229be:	4b07      	ldr	r3, [pc, #28]	; (229dc <img_mgmt_impl_write_image_data+0x54>)
   229c0:	6023      	str	r3, [r4, #0]
		rc = flash_img_init_id(ctx, g_img_mgmt_state.area_id);
   229c2:	4b07      	ldr	r3, [pc, #28]	; (229e0 <img_mgmt_impl_write_image_data+0x58>)
   229c4:	6820      	ldr	r0, [r4, #0]
   229c6:	7819      	ldrb	r1, [r3, #0]
   229c8:	f005 f875 	bl	27ab6 <flash_img_init_id>
		if (rc != 0) {
   229cc:	2800      	cmp	r0, #0
   229ce:	d0e3      	beq.n	22998 <img_mgmt_impl_write_image_data+0x10>
			rc = MGMT_ERR_EUNKNOWN;
   229d0:	2001      	movs	r0, #1
}
   229d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   229d6:	bf00      	nop
   229d8:	20002828 	.word	0x20002828
   229dc:	2000282c 	.word	0x2000282c
   229e0:	20002a50 	.word	0x20002a50

000229e4 <img_mgmt_impl_erase_image_data>:

int
img_mgmt_impl_erase_image_data(unsigned int off, unsigned int num_bytes)
{
   229e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   229e6:	460c      	mov	r4, r1
	const struct flash_area *fa;
	int rc;

	if (off != 0) {
   229e8:	2800      	cmp	r0, #0
   229ea:	d13f      	bne.n	22a6c <img_mgmt_impl_erase_image_data+0x88>
		rc = MGMT_ERR_EINVAL;
		goto end;
	}

	rc = flash_area_open_ex(g_img_mgmt_state.area_id, &fa);
   229ec:	4b21      	ldr	r3, [pc, #132]	; (22a74 <img_mgmt_impl_erase_image_data+0x90>)
   229ee:	4669      	mov	r1, sp
   229f0:	7818      	ldrb	r0, [r3, #0]
   229f2:	f00a f8f0 	bl	2cbd6 <flash_area_open_ex>
	if (rc != 0) {
   229f6:	2800      	cmp	r0, #0
   229f8:	d13a      	bne.n	22a70 <img_mgmt_impl_erase_image_data+0x8c>
		rc = MGMT_ERR_EUNKNOWN;
		goto end;
	}

	/* align requested erase size to the erase-block-size */
	const struct device *dev = flash_area_get_device(fa);
   229fa:	9800      	ldr	r0, [sp, #0]
   229fc:	f005 f8d5 	bl	27baa <flash_area_get_device>
	if (dev == NULL) {
   22a00:	4606      	mov	r6, r0
   22a02:	b930      	cbnz	r0, 22a12 <img_mgmt_impl_erase_image_data+0x2e>
		rc = MGMT_ERR_EUNKNOWN;
   22a04:	2401      	movs	r4, #1
	}

	rc = 0;

end_fa:
	flash_area_close(fa);
   22a06:	9800      	ldr	r0, [sp, #0]
   22a08:	f005 f876 	bl	27af8 <flash_area_close>
end:
	return rc;
}
   22a0c:	4620      	mov	r0, r4
   22a0e:	b004      	add	sp, #16
   22a10:	bd70      	pop	{r4, r5, r6, pc}
	off_t page_offset = fa->fa_off + num_bytes - 1;
   22a12:	9b00      	ldr	r3, [sp, #0]
   22a14:	685b      	ldr	r3, [r3, #4]
   22a16:	3b01      	subs	r3, #1
   22a18:	1919      	adds	r1, r3, r4
   22a1a:	aa01      	add	r2, sp, #4
   22a1c:	f00a fe61 	bl	2d6e2 <z_impl_flash_get_page_info_by_offs>
	if (rc != 0) {
   22a20:	4601      	mov	r1, r0
   22a22:	2800      	cmp	r0, #0
   22a24:	d1ee      	bne.n	22a04 <img_mgmt_impl_erase_image_data+0x20>
	size_t erase_size = page.start_offset + page.size - fa->fa_off;
   22a26:	e9dd 0500 	ldrd	r0, r5, [sp]
   22a2a:	9a02      	ldr	r2, [sp, #8]
   22a2c:	4415      	add	r5, r2
   22a2e:	6842      	ldr	r2, [r0, #4]
   22a30:	1aad      	subs	r5, r5, r2
	rc = flash_area_erase(fa, 0, erase_size);
   22a32:	462a      	mov	r2, r5
   22a34:	f005 f899 	bl	27b6a <flash_area_erase>
	if (rc != 0) {
   22a38:	4604      	mov	r4, r0
   22a3a:	2800      	cmp	r0, #0
   22a3c:	d1e2      	bne.n	22a04 <img_mgmt_impl_erase_image_data+0x20>
	off = BOOT_TRAILER_IMG_STATUS_OFFS(fa);
   22a3e:	9b00      	ldr	r3, [sp, #0]
   22a40:	6899      	ldr	r1, [r3, #8]
   22a42:	3920      	subs	r1, #32
	if (off >= erase_size) {
   22a44:	42a9      	cmp	r1, r5
   22a46:	d3de      	bcc.n	22a06 <img_mgmt_impl_erase_image_data+0x22>
		rc = flash_get_page_info_by_offs(dev, fa->fa_off + off, &page);
   22a48:	685b      	ldr	r3, [r3, #4]
   22a4a:	4419      	add	r1, r3
   22a4c:	aa01      	add	r2, sp, #4
   22a4e:	4630      	mov	r0, r6
   22a50:	f00a fe47 	bl	2d6e2 <z_impl_flash_get_page_info_by_offs>
		off = page.start_offset - fa->fa_off;
   22a54:	9800      	ldr	r0, [sp, #0]
   22a56:	9901      	ldr	r1, [sp, #4]
   22a58:	6843      	ldr	r3, [r0, #4]
		erase_size = fa->fa_size - off;
   22a5a:	6882      	ldr	r2, [r0, #8]
		off = page.start_offset - fa->fa_off;
   22a5c:	1ac9      	subs	r1, r1, r3
		rc = flash_area_erase(fa, off, erase_size);
   22a5e:	1a52      	subs	r2, r2, r1
   22a60:	f005 f883 	bl	27b6a <flash_area_erase>
		if (rc != 0) {
   22a64:	1e04      	subs	r4, r0, #0
   22a66:	bf18      	it	ne
   22a68:	2401      	movne	r4, #1
   22a6a:	e7cc      	b.n	22a06 <img_mgmt_impl_erase_image_data+0x22>
		rc = MGMT_ERR_EINVAL;
   22a6c:	2403      	movs	r4, #3
   22a6e:	e7cd      	b.n	22a0c <img_mgmt_impl_erase_image_data+0x28>
		rc = MGMT_ERR_EUNKNOWN;
   22a70:	2401      	movs	r4, #1
	return rc;
   22a72:	e7cb      	b.n	22a0c <img_mgmt_impl_erase_image_data+0x28>
   22a74:	20002a50 	.word	0x20002a50

00022a78 <img_mgmt_impl_upload_inspect>:
 *	   instead.
 */
int
img_mgmt_impl_upload_inspect(const struct img_mgmt_upload_req *req,
				 struct img_mgmt_upload_action *action)
{
   22a78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   22a7a:	460d      	mov	r5, r1
   22a7c:	4604      	mov	r4, r0
	const struct image_header *hdr;
	struct image_version cur_ver;
	bool empty;
	int rc;

	memset(action, 0, sizeof(*action));
   22a7e:	2218      	movs	r2, #24
   22a80:	2100      	movs	r1, #0
   22a82:	4628      	mov	r0, r5
   22a84:	f006 fc6a 	bl	2935c <memset>

	if (req->off == -1) {
   22a88:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   22a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   22a90:	bf08      	it	eq
   22a92:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   22a96:	d102      	bne.n	22a9e <img_mgmt_impl_upload_inspect+0x26>
		/* Request did not include an `off` field. */
		IMG_MGMT_UPLOAD_ACTION_SET_RC_RSN(action, img_mgmt_err_str_hdr_malformed);
		return MGMT_ERR_EINVAL;
   22a98:	2003      	movs	r0, #3
	action->write_bytes = req->data_len;
	action->proceed = true;
	IMG_MGMT_UPLOAD_ACTION_SET_RC_RSN(action, NULL);

	return 0;
}
   22a9a:	b004      	add	sp, #16
   22a9c:	bd70      	pop	{r4, r5, r6, pc}
	if (req->off == 0) {
   22a9e:	ea52 0103 	orrs.w	r1, r2, r3
   22aa2:	d15a      	bne.n	22b5a <img_mgmt_impl_upload_inspect+0xe2>
		if (req->data_len < sizeof(struct image_header)) {
   22aa4:	69a3      	ldr	r3, [r4, #24]
   22aa6:	2b1f      	cmp	r3, #31
   22aa8:	d9f6      	bls.n	22a98 <img_mgmt_impl_upload_inspect+0x20>
		if (req->size == -1) {
   22aaa:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   22aae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   22ab2:	bf08      	it	eq
   22ab4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   22ab8:	d0ee      	beq.n	22a98 <img_mgmt_impl_upload_inspect+0x20>
		action->size = req->size;
   22aba:	e9c5 2300 	strd	r2, r3, [r5]
		if (hdr->ih_magic != IMAGE_MAGIC) {
   22abe:	6a22      	ldr	r2, [r4, #32]
   22ac0:	4b2c      	ldr	r3, [pc, #176]	; (22b74 <img_mgmt_impl_upload_inspect+0xfc>)
   22ac2:	429a      	cmp	r2, r3
   22ac4:	d1e8      	bne.n	22a98 <img_mgmt_impl_upload_inspect+0x20>
		if (req->data_sha_len > IMG_MGMT_DATA_SHA_LEN) {
   22ac6:	69e2      	ldr	r2, [r4, #28]
   22ac8:	2a20      	cmp	r2, #32
   22aca:	d8e5      	bhi.n	22a98 <img_mgmt_impl_upload_inspect+0x20>
		if ((req->data_sha_len > 0) && (g_img_mgmt_state.area_id != -1)) {
   22acc:	b932      	cbnz	r2, 22adc <img_mgmt_impl_upload_inspect+0x64>
		action->area_id = img_mgmt_get_unused_slot_area_id(req->image);
   22ace:	f00a f8dd 	bl	2cc8c <img_mgmt_get_unused_slot_area_id.constprop.0>
		if (action->area_id < 0) {
   22ad2:	2800      	cmp	r0, #0
		action->area_id = img_mgmt_get_unused_slot_area_id(req->image);
   22ad4:	60e8      	str	r0, [r5, #12]
		if (action->area_id < 0) {
   22ad6:	da11      	bge.n	22afc <img_mgmt_impl_upload_inspect+0x84>
			return MGMT_ERR_ENOENT;
   22ad8:	2005      	movs	r0, #5
   22ada:	e7de      	b.n	22a9a <img_mgmt_impl_upload_inspect+0x22>
		if ((req->data_sha_len > 0) && (g_img_mgmt_state.area_id != -1)) {
   22adc:	4826      	ldr	r0, [pc, #152]	; (22b78 <img_mgmt_impl_upload_inspect+0x100>)
   22ade:	6803      	ldr	r3, [r0, #0]
   22ae0:	3301      	adds	r3, #1
   22ae2:	d0f4      	beq.n	22ace <img_mgmt_impl_upload_inspect+0x56>
			if ((g_img_mgmt_state.data_sha_len == req->data_sha_len) &&
   22ae4:	7b03      	ldrb	r3, [r0, #12]
   22ae6:	429a      	cmp	r2, r3
   22ae8:	d1f1      	bne.n	22ace <img_mgmt_impl_upload_inspect+0x56>
			    !memcmp(g_img_mgmt_state.data_sha, req->data_sha, req->data_sha_len)) {
   22aea:	f504 7108 	add.w	r1, r4, #544	; 0x220
   22aee:	300d      	adds	r0, #13
   22af0:	f006 fc18 	bl	29324 <memcmp>
			if ((g_img_mgmt_state.data_sha_len == req->data_sha_len) &&
   22af4:	2800      	cmp	r0, #0
   22af6:	d1ea      	bne.n	22ace <img_mgmt_impl_upload_inspect+0x56>
	return 0;
   22af8:	2000      	movs	r0, #0
   22afa:	e7ce      	b.n	22a9a <img_mgmt_impl_upload_inspect+0x22>
		if (req->upgrade) {
   22afc:	f894 3240 	ldrb.w	r3, [r4, #576]	; 0x240
   22b00:	b93b      	cbnz	r3, 22b12 <img_mgmt_impl_upload_inspect+0x9a>
		rc = zephyr_img_mgmt_flash_check_empty(action->area_id, &empty);
   22b02:	7b28      	ldrb	r0, [r5, #12]
   22b04:	f10d 0107 	add.w	r1, sp, #7
   22b08:	f00a f878 	bl	2cbfc <zephyr_img_mgmt_flash_check_empty>
		if (rc) {
   22b0c:	b1d8      	cbz	r0, 22b46 <img_mgmt_impl_upload_inspect+0xce>
				return MGMT_ERR_EUNKNOWN;
   22b0e:	2001      	movs	r0, #1
   22b10:	e7c3      	b.n	22a9a <img_mgmt_impl_upload_inspect+0x22>
			rc = img_mgmt_my_version(&cur_ver);
   22b12:	a802      	add	r0, sp, #8
   22b14:	f00a f96f 	bl	2cdf6 <img_mgmt_my_version>
			if (rc != 0) {
   22b18:	2800      	cmp	r0, #0
   22b1a:	d1f8      	bne.n	22b0e <img_mgmt_impl_upload_inspect+0x96>
	if (a->iv_major < b->iv_major) {
   22b1c:	f89d 2008 	ldrb.w	r2, [sp, #8]
   22b20:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   22b24:	429a      	cmp	r2, r3
   22b26:	d3ec      	bcc.n	22b02 <img_mgmt_impl_upload_inspect+0x8a>
	} else if (a->iv_major > b->iv_major) {
   22b28:	d80b      	bhi.n	22b42 <img_mgmt_impl_upload_inspect+0xca>
	if (a->iv_minor < b->iv_minor) {
   22b2a:	f89d 2009 	ldrb.w	r2, [sp, #9]
   22b2e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   22b32:	429a      	cmp	r2, r3
   22b34:	d3e5      	bcc.n	22b02 <img_mgmt_impl_upload_inspect+0x8a>
	} else if (a->iv_minor > b->iv_minor) {
   22b36:	d804      	bhi.n	22b42 <img_mgmt_impl_upload_inspect+0xca>
	if (a->iv_revision < b->iv_revision) {
   22b38:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   22b3c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   22b3e:	429a      	cmp	r2, r3
   22b40:	d3df      	bcc.n	22b02 <img_mgmt_impl_upload_inspect+0x8a>
				return MGMT_ERR_EBADSTATE;
   22b42:	2006      	movs	r0, #6
   22b44:	e7a9      	b.n	22a9a <img_mgmt_impl_upload_inspect+0x22>
		action->erase = !empty;
   22b46:	f89d 3007 	ldrb.w	r3, [sp, #7]
   22b4a:	f083 0301 	eor.w	r3, r3, #1
   22b4e:	746b      	strb	r3, [r5, #17]
	action->write_bytes = req->data_len;
   22b50:	69a3      	ldr	r3, [r4, #24]
   22b52:	60ab      	str	r3, [r5, #8]
	action->proceed = true;
   22b54:	2301      	movs	r3, #1
   22b56:	742b      	strb	r3, [r5, #16]
   22b58:	e7ce      	b.n	22af8 <img_mgmt_impl_upload_inspect+0x80>
		action->area_id = g_img_mgmt_state.area_id;
   22b5a:	4907      	ldr	r1, [pc, #28]	; (22b78 <img_mgmt_impl_upload_inspect+0x100>)
   22b5c:	6808      	ldr	r0, [r1, #0]
		action->size = g_img_mgmt_state.size;
   22b5e:	688e      	ldr	r6, [r1, #8]
		if (req->off != g_img_mgmt_state.off) {
   22b60:	6849      	ldr	r1, [r1, #4]
		action->area_id = g_img_mgmt_state.area_id;
   22b62:	60e8      	str	r0, [r5, #12]
		action->size = g_img_mgmt_state.size;
   22b64:	2000      	movs	r0, #0
		if (req->off != g_img_mgmt_state.off) {
   22b66:	4283      	cmp	r3, r0
   22b68:	bf08      	it	eq
   22b6a:	428a      	cmpeq	r2, r1
		action->size = g_img_mgmt_state.size;
   22b6c:	e9c5 6000 	strd	r6, r0, [r5]
		if (req->off != g_img_mgmt_state.off) {
   22b70:	d1c2      	bne.n	22af8 <img_mgmt_impl_upload_inspect+0x80>
   22b72:	e7ed      	b.n	22b50 <img_mgmt_impl_upload_inspect+0xd8>
   22b74:	96f3b83d 	.word	0x96f3b83d
   22b78:	20002a50 	.word	0x20002a50

00022b7c <img_mgmt_upload_good_rsp>:
	return 0;
}

static int
img_mgmt_upload_good_rsp(struct mgmt_ctxt *ctxt)
{
   22b7c:	b538      	push	{r3, r4, r5, lr}
	CborError err = CborNoError;

	err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
   22b7e:	490e      	ldr	r1, [pc, #56]	; (22bb8 <img_mgmt_upload_good_rsp+0x3c>)
{
   22b80:	4605      	mov	r5, r0
	err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
   22b82:	f00a f90e 	bl	2cda2 <cbor_encode_text_stringz>
	err |= cbor_encode_int(&ctxt->encoder, MGMT_ERR_EOK);
   22b86:	2200      	movs	r2, #0
   22b88:	2300      	movs	r3, #0
	err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
   22b8a:	4604      	mov	r4, r0
	err |= cbor_encode_int(&ctxt->encoder, MGMT_ERR_EOK);
   22b8c:	4628      	mov	r0, r5
   22b8e:	f00b f95f 	bl	2de50 <cbor_encode_int>
	err |= cbor_encode_text_stringz(&ctxt->encoder, "off");
   22b92:	490a      	ldr	r1, [pc, #40]	; (22bbc <img_mgmt_upload_good_rsp+0x40>)
	err |= cbor_encode_int(&ctxt->encoder, MGMT_ERR_EOK);
   22b94:	4304      	orrs	r4, r0
	err |= cbor_encode_text_stringz(&ctxt->encoder, "off");
   22b96:	4628      	mov	r0, r5
   22b98:	f00a f903 	bl	2cda2 <cbor_encode_text_stringz>
	err |= cbor_encode_int(&ctxt->encoder, g_img_mgmt_state.off);
   22b9c:	4b08      	ldr	r3, [pc, #32]	; (22bc0 <img_mgmt_upload_good_rsp+0x44>)
	err |= cbor_encode_text_stringz(&ctxt->encoder, "off");
   22b9e:	4304      	orrs	r4, r0
	err |= cbor_encode_int(&ctxt->encoder, g_img_mgmt_state.off);
   22ba0:	685a      	ldr	r2, [r3, #4]
   22ba2:	4628      	mov	r0, r5
   22ba4:	2300      	movs	r3, #0
   22ba6:	f00b f953 	bl	2de50 <cbor_encode_int>

	if (err != 0) {
		return MGMT_ERR_ENOMEM;
   22baa:	ea54 0300 	orrs.w	r3, r4, r0
	}

	return 0;
}
   22bae:	bf14      	ite	ne
   22bb0:	2002      	movne	r0, #2
   22bb2:	2000      	moveq	r0, #0
   22bb4:	bd38      	pop	{r3, r4, r5, pc}
   22bb6:	bf00      	nop
   22bb8:	00030ced 	.word	0x00030ced
   22bbc:	00030cf0 	.word	0x00030cf0
   22bc0:	20002a50 	.word	0x20002a50

00022bc4 <img_mgmt_read_info>:
{
   22bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22bc8:	b08b      	sub	sp, #44	; 0x2c
   22bca:	460c      	mov	r4, r1
	rc = img_mgmt_impl_erased_val(image_slot, &erased_val);
   22bcc:	f10d 0103 	add.w	r1, sp, #3
{
   22bd0:	4606      	mov	r6, r0
   22bd2:	4617      	mov	r7, r2
   22bd4:	461d      	mov	r5, r3
	rc = img_mgmt_impl_erased_val(image_slot, &erased_val);
   22bd6:	f00a f8c2 	bl	2cd5e <img_mgmt_impl_erased_val>
	if (rc != 0) {
   22bda:	4601      	mov	r1, r0
   22bdc:	b108      	cbz	r0, 22be2 <img_mgmt_read_info+0x1e>
		return MGMT_ERR_EUNKNOWN;
   22bde:	2001      	movs	r0, #1
   22be0:	e049      	b.n	22c76 <img_mgmt_read_info+0xb2>
	rc = img_mgmt_impl_read(image_slot, 0, &hdr, sizeof(hdr));
   22be2:	2320      	movs	r3, #32
   22be4:	aa02      	add	r2, sp, #8
   22be6:	4630      	mov	r0, r6
   22be8:	f00a f88e 	bl	2cd08 <img_mgmt_impl_read>
	if (rc != 0) {
   22bec:	2800      	cmp	r0, #0
   22bee:	d1f6      	bne.n	22bde <img_mgmt_read_info+0x1a>
	if (ver != NULL) {
   22bf0:	b12c      	cbz	r4, 22bfe <img_mgmt_read_info+0x3a>
		memset(ver, erased_val, sizeof(*ver));
   22bf2:	f89d 1003 	ldrb.w	r1, [sp, #3]
   22bf6:	2208      	movs	r2, #8
   22bf8:	4620      	mov	r0, r4
   22bfa:	f006 fbaf 	bl	2935c <memset>
	if (hdr.ih_magic == IMAGE_MAGIC) {
   22bfe:	9902      	ldr	r1, [sp, #8]
   22c00:	4b3a      	ldr	r3, [pc, #232]	; (22cec <img_mgmt_read_info+0x128>)
   22c02:	4299      	cmp	r1, r3
   22c04:	d13a      	bne.n	22c7c <img_mgmt_read_info+0xb8>
		if (ver != NULL) {
   22c06:	b124      	cbz	r4, 22c12 <img_mgmt_read_info+0x4e>
			memcpy(ver, &hdr.ih_ver, sizeof(*ver));
   22c08:	2208      	movs	r2, #8
   22c0a:	a907      	add	r1, sp, #28
   22c0c:	4620      	mov	r0, r4
   22c0e:	f006 fb9a 	bl	29346 <memcpy>
	if (flags != NULL) {
   22c12:	b10d      	cbz	r5, 22c18 <img_mgmt_read_info+0x54>
		*flags = hdr.ih_flags;
   22c14:	9b06      	ldr	r3, [sp, #24]
   22c16:	602b      	str	r3, [r5, #0]
	data_off = hdr.ih_hdr_size + hdr.ih_img_size;
   22c18:	9905      	ldr	r1, [sp, #20]
   22c1a:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	rc = img_mgmt_impl_read(slot, *start_off, &tlv_info, sizeof(tlv_info));
   22c1e:	2304      	movs	r3, #4
	data_off = hdr.ih_hdr_size + hdr.ih_img_size;
   22c20:	440c      	add	r4, r1
	rc = img_mgmt_impl_read(slot, *start_off, &tlv_info, sizeof(tlv_info));
   22c22:	eb0d 0203 	add.w	r2, sp, r3
   22c26:	4621      	mov	r1, r4
   22c28:	4630      	mov	r0, r6
   22c2a:	f00a f86d 	bl	2cd08 <img_mgmt_impl_read>
	if (rc != 0) {
   22c2e:	b940      	cbnz	r0, 22c42 <img_mgmt_read_info+0x7e>
	if (tlv_info.it_magic != magic) {
   22c30:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   22c34:	f646 1308 	movw	r3, #26888	; 0x6908
   22c38:	429a      	cmp	r2, r3
	*end_off = *start_off + tlv_info.it_tlv_tot;
   22c3a:	bf04      	itt	eq
   22c3c:	f8bd 3006 	ldrheq.w	r3, [sp, #6]
		data_off = data_end - sizeof(struct image_tlv_info);
   22c40:	18e4      	addeq	r4, r4, r3
	rc = img_mgmt_impl_read(slot, *start_off, &tlv_info, sizeof(tlv_info));
   22c42:	2304      	movs	r3, #4
   22c44:	eb0d 0203 	add.w	r2, sp, r3
   22c48:	4621      	mov	r1, r4
   22c4a:	4630      	mov	r0, r6
   22c4c:	f00a f85c 	bl	2cd08 <img_mgmt_impl_read>
	if (rc != 0) {
   22c50:	4605      	mov	r5, r0
   22c52:	2800      	cmp	r0, #0
   22c54:	d1c3      	bne.n	22bde <img_mgmt_read_info+0x1a>
	if (tlv_info.it_magic != magic) {
   22c56:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   22c5a:	f646 1307 	movw	r3, #26887	; 0x6907
   22c5e:	429a      	cmp	r2, r3
   22c60:	d1bd      	bne.n	22bde <img_mgmt_read_info+0x1a>
	*end_off = *start_off + tlv_info.it_tlv_tot;
   22c62:	f8bd 8006 	ldrh.w	r8, [sp, #6]
	*start_off += sizeof(tlv_info);
   22c66:	3404      	adds	r4, #4
	*end_off = *start_off + tlv_info.it_tlv_tot;
   22c68:	44a0      	add	r8, r4
	while (data_off + sizeof(tlv) <= data_end) {
   22c6a:	f104 0904 	add.w	r9, r4, #4
   22c6e:	45c1      	cmp	r9, r8
   22c70:	d910      	bls.n	22c94 <img_mgmt_read_info+0xd0>
		return MGMT_ERR_EUNKNOWN;
   22c72:	f085 0001 	eor.w	r0, r5, #1
}
   22c76:	b00b      	add	sp, #44	; 0x2c
   22c78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	erased_val_32 = ERASED_VAL_32(erased_val);
   22c7c:	f89d 2003 	ldrb.w	r2, [sp, #3]
   22c80:	0413      	lsls	r3, r2, #16
   22c82:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   22c86:	4313      	orrs	r3, r2
   22c88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	} else if (hdr.ih_magic == erased_val_32) {
   22c8c:	4299      	cmp	r1, r3
   22c8e:	d1a6      	bne.n	22bde <img_mgmt_read_info+0x1a>
		return MGMT_ERR_ENOENT;
   22c90:	2005      	movs	r0, #5
   22c92:	e7f0      	b.n	22c76 <img_mgmt_read_info+0xb2>
		rc = img_mgmt_impl_read(image_slot, data_off, &tlv, sizeof(tlv));
   22c94:	2304      	movs	r3, #4
   22c96:	eb0d 0203 	add.w	r2, sp, r3
   22c9a:	4621      	mov	r1, r4
   22c9c:	4630      	mov	r0, r6
   22c9e:	f00a f833 	bl	2cd08 <img_mgmt_impl_read>
		if (rc != 0) {
   22ca2:	2800      	cmp	r0, #0
   22ca4:	d19b      	bne.n	22bde <img_mgmt_read_info+0x1a>
		if (tlv.it_type == 0xff && tlv.it_len == 0xffff) {
   22ca6:	f89d 2004 	ldrb.w	r2, [sp, #4]
   22caa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   22cae:	2aff      	cmp	r2, #255	; 0xff
   22cb0:	d108      	bne.n	22cc4 <img_mgmt_read_info+0x100>
   22cb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   22cb6:	4293      	cmp	r3, r2
   22cb8:	d091      	beq.n	22bde <img_mgmt_read_info+0x1a>
			data_off += sizeof(tlv) + tlv.it_len;
   22cba:	3304      	adds	r3, #4
   22cbc:	eb03 0904 	add.w	r9, r3, r4
		hash_found = true;
   22cc0:	464c      	mov	r4, r9
   22cc2:	e7d2      	b.n	22c6a <img_mgmt_read_info+0xa6>
		if (tlv.it_type != IMAGE_TLV_SHA256 || tlv.it_len != IMAGE_HASH_LEN) {
   22cc4:	2a10      	cmp	r2, #16
   22cc6:	d1f8      	bne.n	22cba <img_mgmt_read_info+0xf6>
   22cc8:	2b20      	cmp	r3, #32
   22cca:	d1f6      	bne.n	22cba <img_mgmt_read_info+0xf6>
		if (hash_found) {
   22ccc:	2d00      	cmp	r5, #0
   22cce:	d186      	bne.n	22bde <img_mgmt_read_info+0x1a>
		if (hash != NULL) {
   22cd0:	b157      	cbz	r7, 22ce8 <img_mgmt_read_info+0x124>
			if (data_off + IMAGE_HASH_LEN > data_end) {
   22cd2:	3424      	adds	r4, #36	; 0x24
   22cd4:	4544      	cmp	r4, r8
   22cd6:	d882      	bhi.n	22bde <img_mgmt_read_info+0x1a>
			rc = img_mgmt_impl_read(image_slot, data_off, hash,
   22cd8:	463a      	mov	r2, r7
   22cda:	4649      	mov	r1, r9
   22cdc:	4630      	mov	r0, r6
   22cde:	f00a f813 	bl	2cd08 <img_mgmt_impl_read>
			if (rc != 0) {
   22ce2:	2800      	cmp	r0, #0
   22ce4:	f47f af7b 	bne.w	22bde <img_mgmt_read_info+0x1a>
		hash_found = true;
   22ce8:	2501      	movs	r5, #1
   22cea:	e7e9      	b.n	22cc0 <img_mgmt_read_info+0xfc>
   22cec:	96f3b83d 	.word	0x96f3b83d

00022cf0 <img_mgmt_dfu_stopped>:
}

void
img_mgmt_dfu_stopped(void)
{
	if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_stopped_cb) {
   22cf0:	4b03      	ldr	r3, [pc, #12]	; (22d00 <img_mgmt_dfu_stopped+0x10>)
   22cf2:	681b      	ldr	r3, [r3, #0]
   22cf4:	b113      	cbz	r3, 22cfc <img_mgmt_dfu_stopped+0xc>
   22cf6:	685b      	ldr	r3, [r3, #4]
   22cf8:	b103      	cbz	r3, 22cfc <img_mgmt_dfu_stopped+0xc>
		img_mgmt_dfu_callbacks_fn->dfu_stopped_cb();
   22cfa:	4718      	bx	r3
	}
}
   22cfc:	4770      	bx	lr
   22cfe:	bf00      	nop
   22d00:	20002a80 	.word	0x20002a80

00022d04 <img_mgmt_erase>:
{
   22d04:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = img_mgmt_read_info(1, &ver, NULL, NULL);
   22d06:	2300      	movs	r3, #0
{
   22d08:	4604      	mov	r4, r0
	rc = img_mgmt_read_info(1, &ver, NULL, NULL);
   22d0a:	461a      	mov	r2, r3
   22d0c:	4669      	mov	r1, sp
   22d0e:	2001      	movs	r0, #1
   22d10:	f7ff ff58 	bl	22bc4 <img_mgmt_read_info>
	if (rc == 0) {
   22d14:	b1b0      	cbz	r0, 22d44 <img_mgmt_erase+0x40>
	rc = img_mgmt_impl_erase_slot();
   22d16:	f009 ffc9 	bl	2ccac <img_mgmt_impl_erase_slot>
	if (!rc) {
   22d1a:	4605      	mov	r5, r0
   22d1c:	b908      	cbnz	r0, 22d22 <img_mgmt_erase+0x1e>
		img_mgmt_dfu_stopped();
   22d1e:	f7ff ffe7 	bl	22cf0 <img_mgmt_dfu_stopped>
	err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
   22d22:	490c      	ldr	r1, [pc, #48]	; (22d54 <img_mgmt_erase+0x50>)
   22d24:	4620      	mov	r0, r4
   22d26:	f00a f83c 	bl	2cda2 <cbor_encode_text_stringz>
	err |= cbor_encode_int(&ctxt->encoder, rc);
   22d2a:	17eb      	asrs	r3, r5, #31
	err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
   22d2c:	4606      	mov	r6, r0
	err |= cbor_encode_int(&ctxt->encoder, rc);
   22d2e:	462a      	mov	r2, r5
   22d30:	4620      	mov	r0, r4
   22d32:	f00b f88d 	bl	2de50 <cbor_encode_int>
		return MGMT_ERR_ENOMEM;
   22d36:	ea56 0300 	orrs.w	r3, r6, r0
   22d3a:	bf0c      	ite	eq
   22d3c:	2000      	moveq	r0, #0
   22d3e:	2002      	movne	r0, #2
}
   22d40:	b002      	add	sp, #8
   22d42:	bd70      	pop	{r4, r5, r6, pc}
		if (img_mgmt_slot_in_use(1)) {
   22d44:	2001      	movs	r0, #1
   22d46:	f00a f898 	bl	2ce7a <img_mgmt_slot_in_use>
   22d4a:	2800      	cmp	r0, #0
   22d4c:	d0e3      	beq.n	22d16 <img_mgmt_erase+0x12>
			return MGMT_ERR_EBADSTATE;
   22d4e:	2006      	movs	r0, #6
   22d50:	e7f6      	b.n	22d40 <img_mgmt_erase+0x3c>
   22d52:	bf00      	nop
   22d54:	00030ced 	.word	0x00030ced

00022d58 <img_mgmt_dfu_started>:

void
img_mgmt_dfu_started(void)
{
	if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_started_cb) {
   22d58:	4b03      	ldr	r3, [pc, #12]	; (22d68 <img_mgmt_dfu_started+0x10>)
   22d5a:	681b      	ldr	r3, [r3, #0]
   22d5c:	b113      	cbz	r3, 22d64 <img_mgmt_dfu_started+0xc>
   22d5e:	681b      	ldr	r3, [r3, #0]
   22d60:	b103      	cbz	r3, 22d64 <img_mgmt_dfu_started+0xc>
		img_mgmt_dfu_callbacks_fn->dfu_started_cb();
   22d62:	4718      	bx	r3
	}
}
   22d64:	4770      	bx	lr
   22d66:	bf00      	nop
   22d68:	20002a80 	.word	0x20002a80

00022d6c <img_mgmt_dfu_pending>:

void
img_mgmt_dfu_pending(void)
{
	if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_pending_cb) {
   22d6c:	4b03      	ldr	r3, [pc, #12]	; (22d7c <img_mgmt_dfu_pending+0x10>)
   22d6e:	681b      	ldr	r3, [r3, #0]
   22d70:	b113      	cbz	r3, 22d78 <img_mgmt_dfu_pending+0xc>
   22d72:	689b      	ldr	r3, [r3, #8]
   22d74:	b103      	cbz	r3, 22d78 <img_mgmt_dfu_pending+0xc>
		img_mgmt_dfu_callbacks_fn->dfu_pending_cb();
   22d76:	4718      	bx	r3
	}
}
   22d78:	4770      	bx	lr
   22d7a:	bf00      	nop
   22d7c:	20002a80 	.word	0x20002a80

00022d80 <img_mgmt_upload>:
{
   22d80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22d84:	f5ad 7d77 	sub.w	sp, sp, #988	; 0x3dc
	struct img_mgmt_upload_req req = {
   22d88:	ad64      	add	r5, sp, #400	; 0x190
{
   22d8a:	4607      	mov	r7, r0
	struct img_mgmt_upload_req req = {
   22d8c:	f44f 7212 	mov.w	r2, #584	; 0x248
   22d90:	2100      	movs	r1, #0
   22d92:	4628      	mov	r0, r5
   22d94:	f006 fae2 	bl	2935c <memset>
   22d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22d9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22da0:	e9c5 2302 	strd	r2, r3, [r5, #8]
   22da4:	e9c5 2304 	strd	r2, r3, [r5, #16]
	const struct cbor_attr_t off_attr[] = {
   22da8:	2100      	movs	r1, #0
   22daa:	f44f 72a8 	mov.w	r2, #336	; 0x150
   22dae:	a810      	add	r0, sp, #64	; 0x40
   22db0:	f006 fad4 	bl	2935c <memset>
   22db4:	4b68      	ldr	r3, [pc, #416]	; (22f58 <img_mgmt_upload+0x1d8>)
   22db6:	4969      	ldr	r1, [pc, #420]	; (22f5c <img_mgmt_upload+0x1dc>)
   22db8:	9310      	str	r3, [sp, #64]	; 0x40
   22dba:	2301      	movs	r3, #1
   22dbc:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   22dc0:	911c      	str	r1, [sp, #112]	; 0x70
   22dc2:	f88d 30cc 	strb.w	r3, [sp, #204]	; 0xcc
   22dc6:	a96a      	add	r1, sp, #424	; 0x1a8
   22dc8:	f88d 30fc 	strb.w	r3, [sp, #252]	; 0xfc
   22dcc:	4b64      	ldr	r3, [pc, #400]	; (22f60 <img_mgmt_upload+0x1e0>)
   22dce:	911f      	str	r1, [sp, #124]	; 0x7c
   22dd0:	9340      	str	r3, [sp, #256]	; 0x100
   22dd2:	f44f 7100 	mov.w	r1, #512	; 0x200
   22dd6:	ab6b      	add	r3, sp, #428	; 0x1ac
   22dd8:	9126      	str	r1, [sp, #152]	; 0x98
   22dda:	9343      	str	r3, [sp, #268]	; 0x10c
   22ddc:	4961      	ldr	r1, [pc, #388]	; (22f64 <img_mgmt_upload+0x1e4>)
   22dde:	9128      	str	r1, [sp, #160]	; 0xa0
   22de0:	2320      	movs	r3, #32
   22de2:	a968      	add	r1, sp, #416	; 0x1a0
   22de4:	934a      	str	r3, [sp, #296]	; 0x128
   22de6:	4b60      	ldr	r3, [pc, #384]	; (22f68 <img_mgmt_upload+0x1e8>)
   22de8:	912a      	str	r1, [sp, #168]	; 0xa8
   22dea:	2202      	movs	r2, #2
   22dec:	495f      	ldr	r1, [pc, #380]	; (22f6c <img_mgmt_upload+0x1ec>)
   22dee:	934c      	str	r3, [sp, #304]	; 0x130
   22df0:	2305      	movs	r3, #5
   22df2:	2403      	movs	r4, #3
   22df4:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
   22df8:	f50d 78d8 	add.w	r8, sp, #432	; 0x1b0
   22dfc:	f88d 20a4 	strb.w	r2, [sp, #164]	; 0xa4
   22e00:	9134      	str	r1, [sp, #208]	; 0xd0
   22e02:	f88d 20d4 	strb.w	r2, [sp, #212]	; 0xd4
   22e06:	f50d 796c 	add.w	r9, sp, #944	; 0x3b0
   22e0a:	aa66      	add	r2, sp, #408	; 0x198
   22e0c:	f88d 3134 	strb.w	r3, [sp, #308]	; 0x134
	rc = cbor_read_object(&ctxt->it, off_attr);
   22e10:	a910      	add	r1, sp, #64	; 0x40
	const struct cbor_attr_t off_attr[] = {
   22e12:	abf4      	add	r3, sp, #976	; 0x3d0
	rc = cbor_read_object(&ctxt->it, off_attr);
   22e14:	f107 001c 	add.w	r0, r7, #28
	const struct cbor_attr_t off_attr[] = {
   22e18:	9512      	str	r5, [sp, #72]	; 0x48
   22e1a:	f88d 4074 	strb.w	r4, [sp, #116]	; 0x74
   22e1e:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
   22e22:	9236      	str	r2, [sp, #216]	; 0xd8
   22e24:	f88d 4104 	strb.w	r4, [sp, #260]	; 0x104
   22e28:	f8cd 9108 	str.w	r9, [sp, #264]	; 0x108
   22e2c:	934e      	str	r3, [sp, #312]	; 0x138
	rc = cbor_read_object(&ctxt->it, off_attr);
   22e2e:	f009 fece 	bl	2cbce <cbor_read_object>
	if (rc != 0) {
   22e32:	b938      	cbnz	r0, 22e44 <img_mgmt_upload+0xc4>
	rc = img_mgmt_impl_upload_inspect(&req, &action);
   22e34:	a902      	add	r1, sp, #8
   22e36:	4628      	mov	r0, r5
   22e38:	f7ff fe1e 	bl	22a78 <img_mgmt_impl_upload_inspect>
	if (rc != 0) {
   22e3c:	4604      	mov	r4, r0
   22e3e:	b130      	cbz	r0, 22e4e <img_mgmt_upload+0xce>
		img_mgmt_dfu_stopped();
   22e40:	f7ff ff56 	bl	22cf0 <img_mgmt_dfu_stopped>
}
   22e44:	4620      	mov	r0, r4
   22e46:	f50d 7d77 	add.w	sp, sp, #988	; 0x3dc
   22e4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!action.proceed) {
   22e4e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   22e52:	b923      	cbnz	r3, 22e5e <img_mgmt_upload+0xde>
	return img_mgmt_upload_good_rsp(ctxt);
   22e54:	4638      	mov	r0, r7
   22e56:	f7ff fe91 	bl	22b7c <img_mgmt_upload_good_rsp>
   22e5a:	4604      	mov	r4, r0
   22e5c:	e7f2      	b.n	22e44 <img_mgmt_upload+0xc4>
	if (img_mgmt_upload_cb != NULL) {
   22e5e:	4b44      	ldr	r3, [pc, #272]	; (22f70 <img_mgmt_upload+0x1f0>)
   22e60:	681b      	ldr	r3, [r3, #0]
   22e62:	bb3b      	cbnz	r3, 22eb4 <img_mgmt_upload+0x134>
	g_img_mgmt_state.area_id = action.area_id;
   22e64:	4e43      	ldr	r6, [pc, #268]	; (22f74 <img_mgmt_upload+0x1f4>)
   22e66:	9b05      	ldr	r3, [sp, #20]
   22e68:	6033      	str	r3, [r6, #0]
	g_img_mgmt_state.size = action.size;
   22e6a:	9b02      	ldr	r3, [sp, #8]
   22e6c:	60b3      	str	r3, [r6, #8]
	if (req.off == 0) {
   22e6e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   22e72:	4313      	orrs	r3, r2
   22e74:	d136      	bne.n	22ee4 <img_mgmt_upload+0x164>
		g_img_mgmt_state.off = 0;
   22e76:	2400      	movs	r4, #0
   22e78:	6074      	str	r4, [r6, #4]
		img_mgmt_dfu_started();
   22e7a:	f7ff ff6d 	bl	22d58 <img_mgmt_dfu_started>
		g_img_mgmt_state.data_sha_len = req.data_sha_len;
   22e7e:	69ea      	ldr	r2, [r5, #28]
   22e80:	7332      	strb	r2, [r6, #12]
		memcpy(g_img_mgmt_state.data_sha, req.data_sha, req.data_sha_len);
   22e82:	4649      	mov	r1, r9
   22e84:	f106 000d 	add.w	r0, r6, #13
		cmd_status_arg.status = IMG_MGMT_ID_UPLOAD_STATUS_START;
   22e88:	9401      	str	r4, [sp, #4]
		memcpy(g_img_mgmt_state.data_sha, req.data_sha, req.data_sha_len);
   22e8a:	f006 fa5c 	bl	29346 <memcpy>
		memset(&g_img_mgmt_state.data_sha[req.data_sha_len], 0,
   22e8e:	69ea      	ldr	r2, [r5, #28]
   22e90:	f102 000d 	add.w	r0, r2, #13
   22e94:	4621      	mov	r1, r4
   22e96:	f1c2 0220 	rsb	r2, r2, #32
   22e9a:	4430      	add	r0, r6
   22e9c:	f006 fa5e 	bl	2935c <memset>
		if (action.erase) {
   22ea0:	f89d 3019 	ldrb.w	r3, [sp, #25]
   22ea4:	b303      	cbz	r3, 22ee8 <img_mgmt_upload+0x168>
			rc = img_mgmt_impl_erase_image_data(0, req.size);
   22ea6:	6929      	ldr	r1, [r5, #16]
   22ea8:	4620      	mov	r0, r4
   22eaa:	f7ff fd9b 	bl	229e4 <img_mgmt_impl_erase_image_data>
			if (rc != 0) {
   22eae:	b1d8      	cbz	r0, 22ee8 <img_mgmt_upload+0x168>
				rc = MGMT_ERR_EUNKNOWN;
   22eb0:	2401      	movs	r4, #1
   22eb2:	e007      	b.n	22ec4 <img_mgmt_upload+0x144>
		rc = img_mgmt_upload_cb(req.off, action.size, img_mgmt_upload_arg);
   22eb4:	4a30      	ldr	r2, [pc, #192]	; (22f78 <img_mgmt_upload+0x1f8>)
   22eb6:	9902      	ldr	r1, [sp, #8]
   22eb8:	6812      	ldr	r2, [r2, #0]
   22eba:	68a8      	ldr	r0, [r5, #8]
   22ebc:	4798      	blx	r3
		if (rc != 0) {
   22ebe:	4604      	mov	r4, r0
   22ec0:	2800      	cmp	r0, #0
   22ec2:	d0cf      	beq.n	22e64 <img_mgmt_upload+0xe4>
	if (is_first) {
   22ec4:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   22ec8:	4313      	orrs	r3, r2
   22eca:	d12e      	bne.n	22f2a <img_mgmt_upload+0x1aa>
		return img_mgmt_impl_log_upload_start(status);
   22ecc:	4620      	mov	r0, r4
   22ece:	f009 ff60 	bl	2cd92 <img_mgmt_impl_log_upload_start>
	mgmt_evt(MGMT_EVT_OP_CMD_STATUS, MGMT_GROUP_ID_IMAGE, IMG_MGMT_ID_UPLOAD,
   22ed2:	2201      	movs	r2, #1
   22ed4:	ab01      	add	r3, sp, #4
   22ed6:	4611      	mov	r1, r2
   22ed8:	2002      	movs	r0, #2
   22eda:	f000 fa0d 	bl	232f8 <mgmt_evt>
	if (rc != 0) {
   22ede:	2c00      	cmp	r4, #0
   22ee0:	d0b8      	beq.n	22e54 <img_mgmt_upload+0xd4>
   22ee2:	e7ad      	b.n	22e40 <img_mgmt_upload+0xc0>
		cmd_status_arg.status = IMG_MGMT_ID_UPLOAD_STATUS_ONGOING;
   22ee4:	2301      	movs	r3, #1
   22ee6:	9301      	str	r3, [sp, #4]
	if (req.data_len != 0) {
   22ee8:	69ab      	ldr	r3, [r5, #24]
   22eea:	b90b      	cbnz	r3, 22ef0 <img_mgmt_upload+0x170>
{
   22eec:	2400      	movs	r4, #0
   22eee:	e7e9      	b.n	22ec4 <img_mgmt_upload+0x144>
		if (g_img_mgmt_state.off + req.data_len == g_img_mgmt_state.size) {
   22ef0:	6872      	ldr	r2, [r6, #4]
		rc = img_mgmt_impl_write_image_data(req.off, req.img_data, action.write_bytes,
   22ef2:	68a8      	ldr	r0, [r5, #8]
		if (g_img_mgmt_state.off + req.data_len == g_img_mgmt_state.size) {
   22ef4:	4413      	add	r3, r2
   22ef6:	68b2      	ldr	r2, [r6, #8]
		rc = img_mgmt_impl_write_image_data(req.off, req.img_data, action.write_bytes,
   22ef8:	1a9a      	subs	r2, r3, r2
   22efa:	4253      	negs	r3, r2
   22efc:	4153      	adcs	r3, r2
   22efe:	4641      	mov	r1, r8
   22f00:	9a04      	ldr	r2, [sp, #16]
   22f02:	f7ff fd41 	bl	22988 <img_mgmt_impl_write_image_data>
		if (rc != 0) {
   22f06:	4604      	mov	r4, r0
   22f08:	2800      	cmp	r0, #0
   22f0a:	d1d1      	bne.n	22eb0 <img_mgmt_upload+0x130>
			g_img_mgmt_state.off += action.write_bytes;
   22f0c:	6873      	ldr	r3, [r6, #4]
   22f0e:	9a04      	ldr	r2, [sp, #16]
   22f10:	4413      	add	r3, r2
			if (g_img_mgmt_state.off == g_img_mgmt_state.size) {
   22f12:	68b2      	ldr	r2, [r6, #8]
			g_img_mgmt_state.off += action.write_bytes;
   22f14:	6073      	str	r3, [r6, #4]
			if (g_img_mgmt_state.off == g_img_mgmt_state.size) {
   22f16:	4293      	cmp	r3, r2
   22f18:	d1e8      	bne.n	22eec <img_mgmt_upload+0x16c>
				img_mgmt_dfu_pending();
   22f1a:	f7ff ff27 	bl	22d6c <img_mgmt_dfu_pending>
				cmd_status_arg.status = IMG_MGMT_ID_UPLOAD_STATUS_COMPLETE;
   22f1e:	2302      	movs	r3, #2
   22f20:	9301      	str	r3, [sp, #4]
				g_img_mgmt_state.area_id = -1;
   22f22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22f26:	6033      	str	r3, [r6, #0]
   22f28:	e7cc      	b.n	22ec4 <img_mgmt_upload+0x144>
	img_mgmt_upload_log(req.off == 0, g_img_mgmt_state.off == g_img_mgmt_state.size, rc);
   22f2a:	4b12      	ldr	r3, [pc, #72]	; (22f74 <img_mgmt_upload+0x1f4>)
	if (is_last || status != 0) {
   22f2c:	e9d3 2301 	ldrd	r2, r3, [r3, #4]
   22f30:	429a      	cmp	r2, r3
   22f32:	d001      	beq.n	22f38 <img_mgmt_upload+0x1b8>
   22f34:	2c00      	cmp	r4, #0
   22f36:	d0cc      	beq.n	22ed2 <img_mgmt_upload+0x152>
		rc = img_mgmt_read_info(1, NULL, hash, NULL);
   22f38:	ad08      	add	r5, sp, #32
   22f3a:	2300      	movs	r3, #0
   22f3c:	4619      	mov	r1, r3
   22f3e:	462a      	mov	r2, r5
   22f40:	2001      	movs	r0, #1
   22f42:	f7ff fe3f 	bl	22bc4 <img_mgmt_read_info>
			hashp = hash;
   22f46:	2800      	cmp	r0, #0
		return img_mgmt_impl_log_upload_done(status, hashp);
   22f48:	bf0c      	ite	eq
   22f4a:	4629      	moveq	r1, r5
   22f4c:	2100      	movne	r1, #0
   22f4e:	4620      	mov	r0, r4
   22f50:	f009 ff21 	bl	2cd96 <img_mgmt_impl_log_upload_done>
   22f54:	e7bd      	b.n	22ed2 <img_mgmt_upload+0x152>
   22f56:	bf00      	nop
   22f58:	00030cf4 	.word	0x00030cf4
   22f5c:	00030cfa 	.word	0x00030cfa
   22f60:	00030d03 	.word	0x00030d03
   22f64:	00030cff 	.word	0x00030cff
   22f68:	00030d07 	.word	0x00030d07
   22f6c:	00030cf0 	.word	0x00030cf0
   22f70:	20002a88 	.word	0x20002a88
   22f74:	20002a50 	.word	0x20002a50
   22f78:	20002a84 	.word	0x20002a84

00022f7c <img_mgmt_dfu_confirmed>:

void
img_mgmt_dfu_confirmed(void)
{
	if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_confirmed_cb) {
   22f7c:	4b03      	ldr	r3, [pc, #12]	; (22f8c <img_mgmt_dfu_confirmed+0x10>)
   22f7e:	681b      	ldr	r3, [r3, #0]
   22f80:	b113      	cbz	r3, 22f88 <img_mgmt_dfu_confirmed+0xc>
   22f82:	68db      	ldr	r3, [r3, #12]
   22f84:	b103      	cbz	r3, 22f88 <img_mgmt_dfu_confirmed+0xc>
		img_mgmt_dfu_callbacks_fn->dfu_confirmed_cb();
   22f86:	4718      	bx	r3
	}
}
   22f88:	4770      	bx	lr
   22f8a:	bf00      	nop
   22f8c:	20002a80 	.word	0x20002a80

00022f90 <img_mgmt_register_group>:


void
img_mgmt_register_group(void)
{
	mgmt_register_group(&img_mgmt_group);
   22f90:	4801      	ldr	r0, [pc, #4]	; (22f98 <img_mgmt_register_group+0x8>)
   22f92:	f000 b975 	b.w	23280 <mgmt_register_group>
   22f96:	bf00      	nop
   22f98:	20000718 	.word	0x20000718

00022f9c <img_mgmt_state_read>:
/**
 * Command handler: image state read
 */
int
img_mgmt_state_read(struct mgmt_ctxt *ctxt)
{
   22f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t state_flags;
	int rc;
	int i;

	err = 0;
	err |= cbor_encode_text_stringz(&ctxt->encoder, "images");
   22fa0:	4956      	ldr	r1, [pc, #344]	; (230fc <img_mgmt_state_read+0x160>)

#if CONFIG_IMG_MGMT_UPDATABLE_IMAGE_NUMBER > 1
		err |= cbor_encode_text_stringz(&image, "image");
		err |= cbor_encode_int(&image, i >> 1);
#endif
		err |= cbor_encode_text_stringz(&image, "slot");
   22fa2:	f8df 815c 	ldr.w	r8, [pc, #348]	; 23100 <img_mgmt_state_read+0x164>
		err |= cbor_encode_int(&image, i % 2);

		err |= cbor_encode_text_stringz(&image, "version");
   22fa6:	f8df 915c 	ldr.w	r9, [pc, #348]	; 23104 <img_mgmt_state_read+0x168>
		img_mgmt_ver_str(&ver, vers_str);
		err |= cbor_encode_text_stringz(&image, vers_str);

		err |= cbor_encode_text_stringz(&image, "hash");
   22faa:	f8df a15c 	ldr.w	sl, [pc, #348]	; 23108 <img_mgmt_state_read+0x16c>
{
   22fae:	b09d      	sub	sp, #116	; 0x74
   22fb0:	4606      	mov	r6, r0
	err |= cbor_encode_text_stringz(&ctxt->encoder, "images");
   22fb2:	f009 ff26 	bl	2ce02 <cbor_encode_text_stringz>
	err |= cbor_encoder_create_array(&ctxt->encoder, &images, CborIndefiniteLength);
   22fb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	err |= cbor_encode_text_stringz(&ctxt->encoder, "images");
   22fba:	4604      	mov	r4, r0
	err |= cbor_encoder_create_array(&ctxt->encoder, &images, CborIndefiniteLength);
   22fbc:	a905      	add	r1, sp, #20
   22fbe:	4630      	mov	r0, r6
   22fc0:	f00a ff87 	bl	2ded2 <cbor_encoder_create_array>
   22fc4:	2700      	movs	r7, #0
   22fc6:	4304      	orrs	r4, r0
		rc = img_mgmt_read_info(i, &ver, hash, &flags);
   22fc8:	ab02      	add	r3, sp, #8
   22fca:	aa14      	add	r2, sp, #80	; 0x50
   22fcc:	a903      	add	r1, sp, #12
   22fce:	4638      	mov	r0, r7
   22fd0:	f7ff fdf8 	bl	22bc4 <img_mgmt_read_info>
		if (rc != 0) {
   22fd4:	4683      	mov	fp, r0
   22fd6:	2800      	cmp	r0, #0
   22fd8:	d174      	bne.n	230c4 <img_mgmt_state_read+0x128>
		state_flags = img_mgmt_state_flags(i);
   22fda:	4638      	mov	r0, r7
   22fdc:	f009 ff1e 	bl	2ce1c <img_mgmt_state_flags>
		err |= cbor_encoder_create_map(&images, &image, CborIndefiniteLength);
   22fe0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		state_flags = img_mgmt_state_flags(i);
   22fe4:	4605      	mov	r5, r0
		err |= cbor_encoder_create_map(&images, &image, CborIndefiniteLength);
   22fe6:	a909      	add	r1, sp, #36	; 0x24
   22fe8:	a805      	add	r0, sp, #20
   22fea:	f00a ff75 	bl	2ded8 <cbor_encoder_create_map>
		err |= cbor_encode_text_stringz(&image, "slot");
   22fee:	4641      	mov	r1, r8
		err |= cbor_encoder_create_map(&images, &image, CborIndefiniteLength);
   22ff0:	9001      	str	r0, [sp, #4]
		err |= cbor_encode_text_stringz(&image, "slot");
   22ff2:	a809      	add	r0, sp, #36	; 0x24
   22ff4:	f009 ff05 	bl	2ce02 <cbor_encode_text_stringz>
   22ff8:	9b01      	ldr	r3, [sp, #4]
   22ffa:	4318      	orrs	r0, r3
		err |= cbor_encode_int(&image, i % 2);
   22ffc:	463a      	mov	r2, r7
   22ffe:	465b      	mov	r3, fp
		err |= cbor_encode_text_stringz(&image, "slot");
   23000:	4304      	orrs	r4, r0
		err |= cbor_encode_int(&image, i % 2);
   23002:	a809      	add	r0, sp, #36	; 0x24
   23004:	f00a ff24 	bl	2de50 <cbor_encode_int>
		err |= cbor_encode_text_stringz(&image, "version");
   23008:	4649      	mov	r1, r9
		err |= cbor_encode_int(&image, i % 2);
   2300a:	4304      	orrs	r4, r0
		err |= cbor_encode_text_stringz(&image, "version");
   2300c:	a809      	add	r0, sp, #36	; 0x24
   2300e:	f009 fef8 	bl	2ce02 <cbor_encode_text_stringz>
		img_mgmt_ver_str(&ver, vers_str);
   23012:	a90d      	add	r1, sp, #52	; 0x34
		err |= cbor_encode_text_stringz(&image, "version");
   23014:	4304      	orrs	r4, r0
		img_mgmt_ver_str(&ver, vers_str);
   23016:	a803      	add	r0, sp, #12
   23018:	f009 ff75 	bl	2cf06 <img_mgmt_ver_str>
		err |= cbor_encode_text_stringz(&image, vers_str);
   2301c:	a90d      	add	r1, sp, #52	; 0x34
   2301e:	a809      	add	r0, sp, #36	; 0x24
   23020:	f009 feef 	bl	2ce02 <cbor_encode_text_stringz>
		err |= cbor_encode_text_stringz(&image, "hash");
   23024:	4651      	mov	r1, sl
		err |= cbor_encode_text_stringz(&image, vers_str);
   23026:	4304      	orrs	r4, r0
		err |= cbor_encode_text_stringz(&image, "hash");
   23028:	a809      	add	r0, sp, #36	; 0x24
   2302a:	f009 feea 	bl	2ce02 <cbor_encode_text_stringz>
		err |= cbor_encode_byte_string(&image, hash, IMAGE_HASH_LEN);
   2302e:	2220      	movs	r2, #32
		err |= cbor_encode_text_stringz(&image, "hash");
   23030:	4304      	orrs	r4, r0
		err |= cbor_encode_byte_string(&image, hash, IMAGE_HASH_LEN);
   23032:	a914      	add	r1, sp, #80	; 0x50
   23034:	a809      	add	r0, sp, #36	; 0x24
   23036:	f00a ff2a 	bl	2de8e <cbor_encode_byte_string>

		if (!IS_ENABLED(CONFIG_IMG_MGMT_FRUGAL_LIST) || !(flags & IMAGE_F_NON_BOOTABLE)) {
			err |= cbor_encode_text_stringz(&image, "bootable");
   2303a:	4934      	ldr	r1, [pc, #208]	; (2310c <img_mgmt_state_read+0x170>)
		err |= cbor_encode_byte_string(&image, hash, IMAGE_HASH_LEN);
   2303c:	4304      	orrs	r4, r0
			err |= cbor_encode_text_stringz(&image, "bootable");
   2303e:	a809      	add	r0, sp, #36	; 0x24
   23040:	f009 fedf 	bl	2ce02 <cbor_encode_text_stringz>
			err |= cbor_encode_boolean(&image, !(flags & IMAGE_F_NON_BOOTABLE));
   23044:	9902      	ldr	r1, [sp, #8]
   23046:	f081 0110 	eor.w	r1, r1, #16
   2304a:	f3c1 1100 	ubfx	r1, r1, #4, #1
			err |= cbor_encode_text_stringz(&image, "bootable");
   2304e:	4304      	orrs	r4, r0
                                          int iov_len);
CBOR_API CborError cbor_encode_floating_point(CborEncoder *encoder, CborType fpType, const void *value);
CBOR_INLINE_API int cbor_encode_bytes_written(CborEncoder *encoder)
{   return encoder->writer->bytes_written; }
CBOR_INLINE_API CborError cbor_encode_boolean(CborEncoder *encoder, bool value)
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   23050:	3114      	adds	r1, #20
   23052:	a809      	add	r0, sp, #36	; 0x24
   23054:	f00a ff0a 	bl	2de6c <cbor_encode_simple_value>
		}

		if (!IS_ENABLED(CONFIG_IMG_MGMT_FRUGAL_LIST) ||
		    (state_flags & IMG_MGMT_STATE_F_PENDING)) {
			err |= cbor_encode_text_stringz(&image, "pending");
   23058:	492d      	ldr	r1, [pc, #180]	; (23110 <img_mgmt_state_read+0x174>)
			err |= cbor_encode_boolean(&image, !(flags & IMAGE_F_NON_BOOTABLE));
   2305a:	4304      	orrs	r4, r0
			err |= cbor_encode_text_stringz(&image, "pending");
   2305c:	a809      	add	r0, sp, #36	; 0x24
   2305e:	f009 fed0 	bl	2ce02 <cbor_encode_text_stringz>
   23062:	f005 0101 	and.w	r1, r5, #1
   23066:	4304      	orrs	r4, r0
   23068:	3114      	adds	r1, #20
   2306a:	a809      	add	r0, sp, #36	; 0x24
   2306c:	f00a fefe 	bl	2de6c <cbor_encode_simple_value>
			err |= cbor_encode_boolean(&image, state_flags & IMG_MGMT_STATE_F_PENDING);
		}

		if (!IS_ENABLED(CONFIG_IMG_MGMT_FRUGAL_LIST) ||
		    (state_flags & IMG_MGMT_STATE_F_CONFIRMED)) {
			err |= cbor_encode_text_stringz(&image, "confirmed");
   23070:	4928      	ldr	r1, [pc, #160]	; (23114 <img_mgmt_state_read+0x178>)
			err |= cbor_encode_boolean(&image, state_flags & IMG_MGMT_STATE_F_PENDING);
   23072:	4304      	orrs	r4, r0
			err |= cbor_encode_text_stringz(&image, "confirmed");
   23074:	a809      	add	r0, sp, #36	; 0x24
   23076:	f009 fec4 	bl	2ce02 <cbor_encode_text_stringz>
			err |= cbor_encode_boolean(&image,
   2307a:	f3c5 0140 	ubfx	r1, r5, #1, #1
			err |= cbor_encode_text_stringz(&image, "confirmed");
   2307e:	4304      	orrs	r4, r0
   23080:	3114      	adds	r1, #20
   23082:	a809      	add	r0, sp, #36	; 0x24
   23084:	f00a fef2 	bl	2de6c <cbor_encode_simple_value>
						   state_flags & IMG_MGMT_STATE_F_CONFIRMED);
		}

		if (!IS_ENABLED(CONFIG_IMG_MGMT_FRUGAL_LIST) ||
		    (state_flags & IMG_MGMT_STATE_F_ACTIVE)) {
			err |= cbor_encode_text_stringz(&image, "active");
   23088:	4923      	ldr	r1, [pc, #140]	; (23118 <img_mgmt_state_read+0x17c>)
			err |= cbor_encode_boolean(&image,
   2308a:	4304      	orrs	r4, r0
			err |= cbor_encode_text_stringz(&image, "active");
   2308c:	a809      	add	r0, sp, #36	; 0x24
   2308e:	f009 feb8 	bl	2ce02 <cbor_encode_text_stringz>
			err |= cbor_encode_boolean(&image, state_flags & IMG_MGMT_STATE_F_ACTIVE);
   23092:	f3c5 0180 	ubfx	r1, r5, #2, #1
			err |= cbor_encode_text_stringz(&image, "active");
   23096:	4304      	orrs	r4, r0
   23098:	3114      	adds	r1, #20
   2309a:	a809      	add	r0, sp, #36	; 0x24
   2309c:	f00a fee6 	bl	2de6c <cbor_encode_simple_value>
		}

		if (!IS_ENABLED(CONFIG_IMG_MGMT_FRUGAL_LIST) ||
		    (state_flags & IMG_MGMT_STATE_F_PERMANENT)) {
			err |= cbor_encode_text_stringz(&image, "permanent");
   230a0:	491e      	ldr	r1, [pc, #120]	; (2311c <img_mgmt_state_read+0x180>)
			err |= cbor_encode_boolean(&image, state_flags & IMG_MGMT_STATE_F_ACTIVE);
   230a2:	4304      	orrs	r4, r0
			err |= cbor_encode_text_stringz(&image, "permanent");
   230a4:	a809      	add	r0, sp, #36	; 0x24
   230a6:	f009 feac 	bl	2ce02 <cbor_encode_text_stringz>
			err |= cbor_encode_boolean(&image,
   230aa:	f3c5 01c0 	ubfx	r1, r5, #3, #1
			err |= cbor_encode_text_stringz(&image, "permanent");
   230ae:	4304      	orrs	r4, r0
   230b0:	3114      	adds	r1, #20
   230b2:	a809      	add	r0, sp, #36	; 0x24
   230b4:	f00a feda 	bl	2de6c <cbor_encode_simple_value>
						   state_flags & IMG_MGMT_STATE_F_PERMANENT);
		}

		err |= cbor_encoder_close_container(&images, &image);
   230b8:	a909      	add	r1, sp, #36	; 0x24
			err |= cbor_encode_boolean(&image,
   230ba:	4304      	orrs	r4, r0
		err |= cbor_encoder_close_container(&images, &image);
   230bc:	a805      	add	r0, sp, #20
   230be:	f00a ff1a 	bl	2def6 <cbor_encoder_close_container>
   230c2:	4304      	orrs	r4, r0
	for (i = 0; i < 2 * CONFIG_IMG_MGMT_UPDATABLE_IMAGE_NUMBER; i++) {
   230c4:	b1bf      	cbz	r7, 230f6 <img_mgmt_state_read+0x15a>
	}

	err |= cbor_encoder_close_container(&ctxt->encoder, &images);
   230c6:	a905      	add	r1, sp, #20
   230c8:	4630      	mov	r0, r6
   230ca:	f00a ff14 	bl	2def6 <cbor_encoder_close_container>

	/* splitStatus is always 0 so in frugal list it is not present at all */
	if (!IS_ENABLED(CONFIG_IMG_MGMT_FRUGAL_LIST)) {
		err |= cbor_encode_text_stringz(&ctxt->encoder, "splitStatus");
   230ce:	4914      	ldr	r1, [pc, #80]	; (23120 <img_mgmt_state_read+0x184>)
	err |= cbor_encoder_close_container(&ctxt->encoder, &images);
   230d0:	4605      	mov	r5, r0
		err |= cbor_encode_text_stringz(&ctxt->encoder, "splitStatus");
   230d2:	4630      	mov	r0, r6
   230d4:	f009 fe95 	bl	2ce02 <cbor_encode_text_stringz>
   230d8:	432c      	orrs	r4, r5
   230da:	4304      	orrs	r4, r0
		err |= cbor_encode_int(&ctxt->encoder, 0);
   230dc:	2300      	movs	r3, #0
   230de:	2200      	movs	r2, #0
   230e0:	4630      	mov	r0, r6
   230e2:	f00a feb5 	bl	2de50 <cbor_encode_int>
	}

	if (err != 0) {
		return MGMT_ERR_ENOMEM;
   230e6:	ea54 0300 	orrs.w	r3, r4, r0
	}

	return 0;
}
   230ea:	bf14      	ite	ne
   230ec:	2002      	movne	r0, #2
   230ee:	2000      	moveq	r0, #0
   230f0:	b01d      	add	sp, #116	; 0x74
   230f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   230f6:	2701      	movs	r7, #1
   230f8:	e766      	b.n	22fc8 <img_mgmt_state_read+0x2c>
   230fa:	bf00      	nop
   230fc:	00030d0f 	.word	0x00030d0f
   23100:	00030d16 	.word	0x00030d16
   23104:	00030d1b 	.word	0x00030d1b
   23108:	00030c6b 	.word	0x00030c6b
   2310c:	00030d23 	.word	0x00030d23
   23110:	00030d2c 	.word	0x00030d2c
   23114:	00030d34 	.word	0x00030d34
   23118:	00030d3e 	.word	0x00030d3e
   2311c:	00030d45 	.word	0x00030d45
   23120:	00030d4f 	.word	0x00030d4f

00023124 <img_mgmt_state_write>:
/**
 * Command handler: image state write
 */
int
img_mgmt_state_write(struct mgmt_ctxt *ctxt)
{
   23124:	b530      	push	{r4, r5, lr}
   23126:	b0b1      	sub	sp, #196	; 0xc4
   23128:	4604      	mov	r4, r0
	size_t hash_len;
	bool confirm;
	int slot;
	int rc;

	const struct cbor_attr_t write_attr[] = {
   2312a:	228c      	movs	r2, #140	; 0x8c
   2312c:	2100      	movs	r1, #0
   2312e:	a80d      	add	r0, sp, #52	; 0x34
   23130:	f006 f914 	bl	2935c <memset>
   23134:	4b1c      	ldr	r3, [pc, #112]	; (231a8 <img_mgmt_state_write+0x84>)
   23136:	930c      	str	r3, [sp, #48]	; 0x30
   23138:	2303      	movs	r3, #3
   2313a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   2313e:	ab02      	add	r3, sp, #8
   23140:	930f      	str	r3, [sp, #60]	; 0x3c
   23142:	2321      	movs	r3, #33	; 0x21
   23144:	9316      	str	r3, [sp, #88]	; 0x58
   23146:	4b19      	ldr	r3, [pc, #100]	; (231ac <img_mgmt_state_write+0x88>)
   23148:	9318      	str	r3, [sp, #96]	; 0x60
   2314a:	2305      	movs	r3, #5
   2314c:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
   23150:	f10d 0307 	add.w	r3, sp, #7
   23154:	931a      	str	r3, [sp, #104]	; 0x68
		},
		[2] = { 0 },
	};

	hash_len = 0;
	rc = cbor_read_object(&ctxt->it, write_attr);
   23156:	a90c      	add	r1, sp, #48	; 0x30
	hash_len = 0;
   23158:	2300      	movs	r3, #0
	const struct cbor_attr_t write_attr[] = {
   2315a:	ad03      	add	r5, sp, #12
	rc = cbor_read_object(&ctxt->it, write_attr);
   2315c:	f104 001c 	add.w	r0, r4, #28
	const struct cbor_attr_t write_attr[] = {
   23160:	950e      	str	r5, [sp, #56]	; 0x38
	hash_len = 0;
   23162:	9302      	str	r3, [sp, #8]
	rc = cbor_read_object(&ctxt->it, write_attr);
   23164:	f009 fd33 	bl	2cbce <cbor_read_object>
	if (rc != 0) {
   23168:	4601      	mov	r1, r0
   2316a:	b110      	cbz	r0, 23172 <img_mgmt_state_write+0x4e>
		return MGMT_ERR_EINVAL;
   2316c:	2003      	movs	r0, #3
	if (rc != 0) {
		return rc;
	}

	return 0;
}
   2316e:	b031      	add	sp, #196	; 0xc4
   23170:	bd30      	pop	{r4, r5, pc}
	if (hash_len == 0) {
   23172:	9b02      	ldr	r3, [sp, #8]
   23174:	b95b      	cbnz	r3, 2318e <img_mgmt_state_write+0x6a>
		if (confirm) {
   23176:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2317a:	2b00      	cmp	r3, #0
   2317c:	d0f6      	beq.n	2316c <img_mgmt_state_write+0x48>
		rc = img_mgmt_state_confirm();
   2317e:	f009 feaf 	bl	2cee0 <img_mgmt_state_confirm>
	if (rc != 0) {
   23182:	2800      	cmp	r0, #0
   23184:	d1f3      	bne.n	2316e <img_mgmt_state_write+0x4a>
	rc = img_mgmt_state_read(ctxt);
   23186:	4620      	mov	r0, r4
   23188:	f7ff ff08 	bl	22f9c <img_mgmt_state_read>
	if (rc != 0) {
   2318c:	e7ef      	b.n	2316e <img_mgmt_state_write+0x4a>
		slot = img_mgmt_find_by_hash(hash, NULL);
   2318e:	4628      	mov	r0, r5
   23190:	f009 fe14 	bl	2cdbc <img_mgmt_find_by_hash>
		if (slot < 0) {
   23194:	2800      	cmp	r0, #0
   23196:	dbe9      	blt.n	2316c <img_mgmt_state_write+0x48>
	if (slot == IMG_MGMT_BOOT_CURR_SLOT && confirm) {
   23198:	f89d 1007 	ldrb.w	r1, [sp, #7]
   2319c:	d101      	bne.n	231a2 <img_mgmt_state_write+0x7e>
   2319e:	2900      	cmp	r1, #0
   231a0:	d1ed      	bne.n	2317e <img_mgmt_state_write+0x5a>
		rc = img_mgmt_state_set_pending(slot, confirm);
   231a2:	f009 fe74 	bl	2ce8e <img_mgmt_state_set_pending>
   231a6:	e7ec      	b.n	23182 <img_mgmt_state_write+0x5e>
   231a8:	00030c6b 	.word	0x00030c6b
   231ac:	00030d5b 	.word	0x00030d5b

000231b0 <zephyr_os_mgmt_reset_cb>:

static void
zephyr_os_mgmt_reset_cb(struct k_timer *timer)
{
	/* Reboot the system from the system workqueue thread. */
	k_work_submit(&zephyr_os_mgmt_reset_work);
   231b0:	4801      	ldr	r0, [pc, #4]	; (231b8 <zephyr_os_mgmt_reset_cb+0x8>)
   231b2:	f002 bf4d 	b.w	26050 <k_work_submit>
   231b6:	bf00      	nop
   231b8:	20000724 	.word	0x20000724

000231bc <os_mgmt_impl_reset>:
}

int
os_mgmt_impl_reset(unsigned int delay_ms)
{
   231bc:	b507      	push	{r0, r1, r2, lr}
   231be:	4601      	mov	r1, r0
   231c0:	f240 30e7 	movw	r0, #999	; 0x3e7
   231c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   231c8:	2300      	movs	r3, #0
   231ca:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   231ce:	0c49      	lsrs	r1, r1, #17
   231d0:	f7e9 f896 	bl	c300 <__aeabi_uldivmod>
   231d4:	4602      	mov	r2, r0
   231d6:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   231d8:	2100      	movs	r1, #0
   231da:	2000      	movs	r0, #0
   231dc:	e9cd 0100 	strd	r0, r1, [sp]
   231e0:	4803      	ldr	r0, [pc, #12]	; (231f0 <os_mgmt_impl_reset+0x34>)
   231e2:	f003 fcdb 	bl	26b9c <z_impl_k_timer_start>
	k_timer_start(&zephyr_os_mgmt_reset_timer, K_MSEC(delay_ms), K_NO_WAIT);
	return 0;
}
   231e6:	2000      	movs	r0, #0
   231e8:	b003      	add	sp, #12
   231ea:	f85d fb04 	ldr.w	pc, [sp], #4
   231ee:	bf00      	nop
   231f0:	200008b8 	.word	0x200008b8

000231f4 <os_mgmt_echo>:
 * Command handler: os echo
 */
#if CONFIG_OS_MGMT_ECHO
static int
os_mgmt_echo(struct mgmt_ctxt *ctxt)
{
   231f4:	b570      	push	{r4, r5, r6, lr}
   231f6:	b0ba      	sub	sp, #232	; 0xe8
   231f8:	4605      	mov	r5, r0
	char echo_buf[CONFIG_OS_MGMT_ECHO_LENGTH + 1];
	CborError err;

	const struct cbor_attr_t attrs[2] = {
   231fa:	225c      	movs	r2, #92	; 0x5c
   231fc:	2100      	movs	r1, #0
   231fe:	a801      	add	r0, sp, #4
   23200:	f006 f8ac 	bl	2935c <memset>
   23204:	4b19      	ldr	r3, [pc, #100]	; (2326c <os_mgmt_echo+0x78>)
   23206:	9300      	str	r3, [sp, #0]
   23208:	2304      	movs	r3, #4
   2320a:	f88d 3004 	strb.w	r3, [sp, #4]
   2320e:	2380      	movs	r3, #128	; 0x80
   23210:	930a      	str	r3, [sp, #40]	; 0x28
   23212:	2301      	movs	r3, #1
   23214:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   23218:	ae19      	add	r6, sp, #100	; 0x64
		[1] = {
			.attribute = NULL
		}
	};

	echo_buf[0] = '\0';
   2321a:	2300      	movs	r3, #0

	err = cbor_read_object(&ctxt->it, attrs);
   2321c:	4669      	mov	r1, sp
   2321e:	f105 001c 	add.w	r0, r5, #28
	const struct cbor_attr_t attrs[2] = {
   23222:	9602      	str	r6, [sp, #8]
	echo_buf[0] = '\0';
   23224:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
	err = cbor_read_object(&ctxt->it, attrs);
   23228:	f009 fcd1 	bl	2cbce <cbor_read_object>
	if (err != 0) {
   2322c:	4604      	mov	r4, r0
   2322e:	b128      	cbz	r0, 2323c <os_mgmt_echo+0x48>
		return mgmt_err_from_cbor(err);
   23230:	f009 febe 	bl	2cfb0 <mgmt_err_from_cbor>
   23234:	4604      	mov	r4, r0

	err = cbor_encode_text_stringz(&ctxt->encoder, "r")				||
	      cbor_encode_text_stringz(&ctxt->encoder, echo_buf);

	return (err == 0) ? 0 : MGMT_ERR_ENOMEM;
}
   23236:	4620      	mov	r0, r4
   23238:	b03a      	add	sp, #232	; 0xe8
   2323a:	bd70      	pop	{r4, r5, r6, pc}
	echo_buf[sizeof(echo_buf) - 1] = '\0';
   2323c:	f88d 00e4 	strb.w	r0, [sp, #228]	; 0xe4
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   23240:	480b      	ldr	r0, [pc, #44]	; (23270 <os_mgmt_echo+0x7c>)
   23242:	f006 f842 	bl	292ca <strlen>
   23246:	490a      	ldr	r1, [pc, #40]	; (23270 <os_mgmt_echo+0x7c>)
   23248:	4602      	mov	r2, r0
   2324a:	4628      	mov	r0, r5
   2324c:	f00a fe30 	bl	2deb0 <cbor_encode_text_string>
	err = cbor_encode_text_stringz(&ctxt->encoder, "r")				||
   23250:	b948      	cbnz	r0, 23266 <os_mgmt_echo+0x72>
   23252:	4630      	mov	r0, r6
   23254:	f006 f839 	bl	292ca <strlen>
   23258:	4631      	mov	r1, r6
   2325a:	4602      	mov	r2, r0
   2325c:	4628      	mov	r0, r5
   2325e:	f00a fe27 	bl	2deb0 <cbor_encode_text_string>
   23262:	2800      	cmp	r0, #0
   23264:	d0e7      	beq.n	23236 <os_mgmt_echo+0x42>
	return (err == 0) ? 0 : MGMT_ERR_ENOMEM;
   23266:	2402      	movs	r4, #2
   23268:	e7e5      	b.n	23236 <os_mgmt_echo+0x42>
   2326a:	bf00      	nop
   2326c:	00030d3c 	.word	0x00030d3c
   23270:	00030d63 	.word	0x00030d63

00023274 <os_mgmt_register_group>:


void
os_mgmt_register_group(void)
{
	mgmt_register_group(&os_mgmt_group);
   23274:	4801      	ldr	r0, [pc, #4]	; (2327c <os_mgmt_register_group+0x8>)
   23276:	f000 b803 	b.w	23280 <mgmt_register_group>
   2327a:	bf00      	nop
   2327c:	20000734 	.word	0x20000734

00023280 <mgmt_register_group>:
}

void
mgmt_register_group(struct mgmt_group *group)
{
	if (mgmt_group_list_end == NULL) {
   23280:	4b03      	ldr	r3, [pc, #12]	; (23290 <mgmt_register_group+0x10>)
   23282:	681a      	ldr	r2, [r3, #0]
   23284:	b902      	cbnz	r2, 23288 <mgmt_register_group+0x8>
		mgmt_group_list = group;
   23286:	4a03      	ldr	r2, [pc, #12]	; (23294 <mgmt_register_group+0x14>)
	} else {
		mgmt_group_list_end->mg_next = group;
   23288:	6010      	str	r0, [r2, #0]
	}
	mgmt_group_list_end = group;
   2328a:	6018      	str	r0, [r3, #0]
}
   2328c:	4770      	bx	lr
   2328e:	bf00      	nop
   23290:	20002a94 	.word	0x20002a94
   23294:	20002a90 	.word	0x20002a90

00023298 <mgmt_find_handler>:
	for (group = mgmt_group_list; group != NULL; group = group->mg_next) {
   23298:	4b0b      	ldr	r3, [pc, #44]	; (232c8 <mgmt_find_handler+0x30>)
   2329a:	681b      	ldr	r3, [r3, #0]

const struct mgmt_handler *
mgmt_find_handler(uint16_t group_id, uint16_t command_id)
{
   2329c:	b530      	push	{r4, r5, lr}
   2329e:	4602      	mov	r2, r0
			if (!group->mg_handlers[command_id].mh_read &&
   232a0:	00cc      	lsls	r4, r1, #3
	for (group = mgmt_group_list; group != NULL; group = group->mg_next) {
   232a2:	b90b      	cbnz	r3, 232a8 <mgmt_find_handler+0x10>
	const struct mgmt_group *group;

	group = mgmt_find_group(group_id, command_id);
	if (!group) {
		return NULL;
   232a4:	2000      	movs	r0, #0
	}

	return &group->mg_handlers[command_id];
}
   232a6:	bd30      	pop	{r4, r5, pc}
		if (group->mg_group_id == group_id) {
   232a8:	8958      	ldrh	r0, [r3, #10]
   232aa:	4290      	cmp	r0, r2
   232ac:	d10a      	bne.n	232c4 <mgmt_find_handler+0x2c>
			if (command_id >= group->mg_handlers_count) {
   232ae:	8918      	ldrh	r0, [r3, #8]
   232b0:	4288      	cmp	r0, r1
   232b2:	d9f7      	bls.n	232a4 <mgmt_find_handler+0xc>
			if (!group->mg_handlers[command_id].mh_read &&
   232b4:	685d      	ldr	r5, [r3, #4]
   232b6:	1928      	adds	r0, r5, r4
   232b8:	592d      	ldr	r5, [r5, r4]
   232ba:	2d00      	cmp	r5, #0
   232bc:	d1f3      	bne.n	232a6 <mgmt_find_handler+0xe>
   232be:	6845      	ldr	r5, [r0, #4]
   232c0:	2d00      	cmp	r5, #0
   232c2:	d1f0      	bne.n	232a6 <mgmt_find_handler+0xe>
	for (group = mgmt_group_list; group != NULL; group = group->mg_next) {
   232c4:	681b      	ldr	r3, [r3, #0]
   232c6:	e7ec      	b.n	232a2 <mgmt_find_handler+0xa>
   232c8:	20002a90 	.word	0x20002a90

000232cc <mgmt_write_rsp_status>:

int
mgmt_write_rsp_status(struct mgmt_ctxt *ctxt, int errcode)
{
   232cc:	b570      	push	{r4, r5, r6, lr}
   232ce:	4604      	mov	r4, r0
   232d0:	4808      	ldr	r0, [pc, #32]	; (232f4 <mgmt_write_rsp_status+0x28>)
   232d2:	460d      	mov	r5, r1
   232d4:	f005 fff9 	bl	292ca <strlen>
   232d8:	4906      	ldr	r1, [pc, #24]	; (232f4 <mgmt_write_rsp_status+0x28>)
   232da:	4602      	mov	r2, r0
   232dc:	4620      	mov	r0, r4
   232de:	f00a fde7 	bl	2deb0 <cbor_encode_text_string>
	int rc;

	rc = cbor_encode_text_stringz(&ctxt->encoder, "rc");
	if (rc != 0) {
   232e2:	b930      	cbnz	r0, 232f2 <mgmt_write_rsp_status+0x26>
		return rc;
	}

	rc = cbor_encode_int(&ctxt->encoder, errcode);
   232e4:	462a      	mov	r2, r5
   232e6:	17eb      	asrs	r3, r5, #31
   232e8:	4620      	mov	r0, r4
		}
	}
#endif

	return 0;
}
   232ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	rc = cbor_encode_int(&ctxt->encoder, errcode);
   232ee:	f00a bdaf 	b.w	2de50 <cbor_encode_int>
}
   232f2:	bd70      	pop	{r4, r5, r6, pc}
   232f4:	00030ced 	.word	0x00030ced

000232f8 <mgmt_evt>:
	evt_cb = cb;
}

void
mgmt_evt(uint8_t opcode, uint16_t group, uint8_t id, void *arg)
{
   232f8:	b410      	push	{r4}
	if (evt_cb) {
   232fa:	4c04      	ldr	r4, [pc, #16]	; (2330c <mgmt_evt+0x14>)
   232fc:	6824      	ldr	r4, [r4, #0]
   232fe:	b114      	cbz	r4, 23306 <mgmt_evt+0xe>
		evt_cb(opcode, group, id, arg);
   23300:	46a4      	mov	ip, r4
	}
}
   23302:	bc10      	pop	{r4}
		evt_cb(opcode, group, id, arg);
   23304:	4760      	bx	ip
}
   23306:	bc10      	pop	{r4}
   23308:	4770      	bx	lr
   2330a:	bf00      	nop
   2330c:	20002a8c 	.word	0x20002a8c

00023310 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   23310:	4b02      	ldr	r3, [pc, #8]	; (2331c <net_buf_pool_get+0xc>)
   23312:	222c      	movs	r2, #44	; 0x2c
   23314:	fb02 3000 	mla	r0, r2, r0, r3
   23318:	4770      	bx	lr
   2331a:	bf00      	nop
   2331c:	200009d0 	.word	0x200009d0

00023320 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   23320:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   23322:	4b06      	ldr	r3, [pc, #24]	; (2333c <net_buf_id+0x1c>)
   23324:	212c      	movs	r1, #44	; 0x2c
   23326:	fb01 3302 	mla	r3, r1, r2, r3
   2332a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2332c:	7f1b      	ldrb	r3, [r3, #28]
   2332e:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   23330:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   23332:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   23336:	fbb0 f0f3 	udiv	r0, r0, r3
   2333a:	4770      	bx	lr
   2333c:	200009d0 	.word	0x200009d0

00023340 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   23340:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   23342:	4b0a      	ldr	r3, [pc, #40]	; (2336c <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   23344:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   23346:	242c      	movs	r4, #44	; 0x2c
   23348:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   2334c:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   23350:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   23352:	6823      	ldr	r3, [r4, #0]
   23354:	429a      	cmp	r2, r3
   23356:	bf94      	ite	ls
   23358:	600a      	strls	r2, [r1, #0]
   2335a:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   2335c:	f7ff ffe0 	bl	23320 <net_buf_id>
   23360:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   23364:	fb02 3000 	mla	r0, r2, r0, r3
   23368:	bd10      	pop	{r4, pc}
   2336a:	bf00      	nop
   2336c:	200009d0 	.word	0x200009d0

00023370 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   23370:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23374:	4605      	mov	r5, r0
   23376:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   23378:	4610      	mov	r0, r2
   2337a:	4619      	mov	r1, r3
{
   2337c:	4691      	mov	r9, r2
   2337e:	4698      	mov	r8, r3
   23380:	4617      	mov	r7, r2
   23382:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   23384:	f00b fc20 	bl	2ebc8 <sys_clock_timeout_end_calc>
   23388:	4682      	mov	sl, r0
   2338a:	468b      	mov	fp, r1
	__asm__ volatile(
   2338c:	f04f 0320 	mov.w	r3, #32
   23390:	f3ef 8111 	mrs	r1, BASEPRI
   23394:	f383 8812 	msr	BASEPRI_MAX, r3
   23398:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   2339c:	8b6b      	ldrh	r3, [r5, #26]
   2339e:	2b00      	cmp	r3, #0
   233a0:	d05a      	beq.n	23458 <net_buf_alloc_len+0xe8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   233a2:	8b2a      	ldrh	r2, [r5, #24]
   233a4:	429a      	cmp	r2, r3
   233a6:	d93e      	bls.n	23426 <net_buf_alloc_len+0xb6>
   233a8:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   233aa:	2200      	movs	r2, #0
   233ac:	2300      	movs	r3, #0
   233ae:	4628      	mov	r0, r5
   233b0:	f002 fcae 	bl	25d10 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   233b4:	9900      	ldr	r1, [sp, #0]
   233b6:	4604      	mov	r4, r0
   233b8:	2800      	cmp	r0, #0
   233ba:	d034      	beq.n	23426 <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   233bc:	f381 8811 	msr	BASEPRI, r1
   233c0:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   233c4:	9b01      	ldr	r3, [sp, #4]
   233c6:	2b00      	cmp	r3, #0
   233c8:	d056      	beq.n	23478 <net_buf_alloc_len+0x108>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   233ca:	ea58 0309 	orrs.w	r3, r8, r9
   233ce:	d00f      	beq.n	233f0 <net_buf_alloc_len+0x80>
   233d0:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   233d4:	bf08      	it	eq
   233d6:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   233da:	d009      	beq.n	233f0 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   233dc:	f003 fb80 	bl	26ae0 <sys_clock_tick_get>
   233e0:	ebba 0700 	subs.w	r7, sl, r0
   233e4:	eb6b 0601 	sbc.w	r6, fp, r1
   233e8:	2e00      	cmp	r6, #0
   233ea:	bfbc      	itt	lt
   233ec:	2700      	movlt	r7, #0
   233ee:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   233f0:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   233f2:	f8df 809c 	ldr.w	r8, [pc, #156]	; 23490 <net_buf_alloc_len+0x120>
   233f6:	f04f 092c 	mov.w	r9, #44	; 0x2c
   233fa:	fb09 8303 	mla	r3, r9, r3, r8
   233fe:	463a      	mov	r2, r7
   23400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   23402:	681b      	ldr	r3, [r3, #0]
   23404:	a901      	add	r1, sp, #4
   23406:	681d      	ldr	r5, [r3, #0]
   23408:	4620      	mov	r0, r4
   2340a:	4633      	mov	r3, r6
   2340c:	47a8      	blx	r5
   2340e:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   23410:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   23412:	2800      	cmp	r0, #0
   23414:	d131      	bne.n	2347a <net_buf_alloc_len+0x10a>
	k_lifo_put(&pool->free, buf);
   23416:	79a0      	ldrb	r0, [r4, #6]
   23418:	4621      	mov	r1, r4
   2341a:	fb00 8009 	mla	r0, r0, r9, r8
   2341e:	f00b f955 	bl	2e6cc <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   23422:	462c      	mov	r4, r5
}
   23424:	e024      	b.n	23470 <net_buf_alloc_len+0x100>
		uninit_count = pool->uninit_count--;
   23426:	8b68      	ldrh	r0, [r5, #26]
   23428:	1e43      	subs	r3, r0, #1
   2342a:	836b      	strh	r3, [r5, #26]
   2342c:	f381 8811 	msr	BASEPRI, r1
   23430:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   23434:	7f2a      	ldrb	r2, [r5, #28]
   23436:	f102 0417 	add.w	r4, r2, #23
   2343a:	f024 0303 	bic.w	r3, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   2343e:	8b2c      	ldrh	r4, [r5, #24]
   23440:	1a20      	subs	r0, r4, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   23442:	6aac      	ldr	r4, [r5, #40]	; 0x28
   23444:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   23448:	4811      	ldr	r0, [pc, #68]	; (23490 <net_buf_alloc_len+0x120>)
   2344a:	4b12      	ldr	r3, [pc, #72]	; (23494 <net_buf_alloc_len+0x124>)
	buf->user_data_size = pool->user_data_size;
   2344c:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   2344e:	1a2d      	subs	r5, r5, r0
   23450:	10ad      	asrs	r5, r5, #2
   23452:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   23454:	71a5      	strb	r5, [r4, #6]
		goto success;
   23456:	e7b5      	b.n	233c4 <net_buf_alloc_len+0x54>
   23458:	f381 8811 	msr	BASEPRI, r1
   2345c:	f3bf 8f6f 	isb	sy
   23460:	464a      	mov	r2, r9
   23462:	4643      	mov	r3, r8
   23464:	4628      	mov	r0, r5
   23466:	f002 fc53 	bl	25d10 <z_impl_k_queue_get>
	if (!buf) {
   2346a:	4604      	mov	r4, r0
   2346c:	2800      	cmp	r0, #0
   2346e:	d1a9      	bne.n	233c4 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   23470:	4620      	mov	r0, r4
   23472:	b003      	add	sp, #12
   23474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   23478:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   2347a:	2300      	movs	r3, #0
	buf->ref   = 1U;
   2347c:	2201      	movs	r2, #1
	buf->frags = NULL;
   2347e:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   23480:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   23482:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   23484:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   23486:	6923      	ldr	r3, [r4, #16]
   23488:	81e2      	strh	r2, [r4, #14]
   2348a:	60a3      	str	r3, [r4, #8]
	return buf;
   2348c:	e7f0      	b.n	23470 <net_buf_alloc_len+0x100>
   2348e:	bf00      	nop
   23490:	200009d0 	.word	0x200009d0
   23494:	ba2e8ba3 	.word	0xba2e8ba3

00023498 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   23498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2349c:	4d16      	ldr	r5, [pc, #88]	; (234f8 <net_buf_unref+0x60>)
   2349e:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   234a0:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   234a2:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   234a4:	b90c      	cbnz	r4, 234aa <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   234a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   234aa:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   234ac:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   234b0:	3b01      	subs	r3, #1
   234b2:	b2db      	uxtb	r3, r3
   234b4:	7123      	strb	r3, [r4, #4]
   234b6:	2b00      	cmp	r3, #0
   234b8:	d1f5      	bne.n	234a6 <net_buf_unref+0xe>
		if (buf->__buf) {
   234ba:	6921      	ldr	r1, [r4, #16]
   234bc:	b159      	cbz	r1, 234d6 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   234be:	7963      	ldrb	r3, [r4, #5]
   234c0:	079b      	lsls	r3, r3, #30
   234c2:	d407      	bmi.n	234d4 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   234c4:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   234c6:	fb07 5303 	mla	r3, r7, r3, r5
   234ca:	4620      	mov	r0, r4
   234cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   234ce:	681b      	ldr	r3, [r3, #0]
   234d0:	689b      	ldr	r3, [r3, #8]
   234d2:	4798      	blx	r3
			buf->__buf = NULL;
   234d4:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   234d6:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   234d8:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   234da:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   234de:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   234e0:	6a1b      	ldr	r3, [r3, #32]
   234e2:	b11b      	cbz	r3, 234ec <net_buf_unref+0x54>
			pool->destroy(buf);
   234e4:	4620      	mov	r0, r4
   234e6:	4798      	blx	r3
{
   234e8:	4644      	mov	r4, r8
   234ea:	e7db      	b.n	234a4 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   234ec:	4621      	mov	r1, r4
   234ee:	fb00 5007 	mla	r0, r0, r7, r5
   234f2:	f00b f8eb 	bl	2e6cc <k_queue_prepend>
}
   234f6:	e7f7      	b.n	234e8 <net_buf_unref+0x50>
   234f8:	200009d0 	.word	0x200009d0

000234fc <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   234fc:	4b08      	ldr	r3, [pc, #32]	; (23520 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   234fe:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   23500:	1ac3      	subs	r3, r0, r3
{
   23502:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   23504:	4907      	ldr	r1, [pc, #28]	; (23524 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   23506:	109b      	asrs	r3, r3, #2
{
   23508:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   2350a:	4359      	muls	r1, r3
   2350c:	4806      	ldr	r0, [pc, #24]	; (23528 <onoff_stop+0x2c>)
   2350e:	2240      	movs	r2, #64	; 0x40
   23510:	f009 ffbe 	bl	2d490 <stop>
	notify(mgr, res);
   23514:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   23516:	4601      	mov	r1, r0
	notify(mgr, res);
   23518:	4620      	mov	r0, r4
}
   2351a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   2351e:	4718      	bx	r3
   23520:	20002aa8 	.word	0x20002aa8
   23524:	b6db6db7 	.word	0xb6db6db7
   23528:	0002ef50 	.word	0x0002ef50

0002352c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   2352c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   2352e:	4c0c      	ldr	r4, [pc, #48]	; (23560 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   23530:	4a0c      	ldr	r2, [pc, #48]	; (23564 <onoff_start+0x38>)
   23532:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   23534:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   23536:	9300      	str	r3, [sp, #0]
{
   23538:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2353a:	460b      	mov	r3, r1
   2353c:	490a      	ldr	r1, [pc, #40]	; (23568 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   2353e:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   23540:	4361      	muls	r1, r4
{
   23542:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   23544:	4809      	ldr	r0, [pc, #36]	; (2356c <onoff_start+0x40>)
   23546:	f009 ffcf 	bl	2d4e8 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   2354a:	1e01      	subs	r1, r0, #0
   2354c:	da05      	bge.n	2355a <onoff_start+0x2e>
		notify(mgr, err);
   2354e:	4630      	mov	r0, r6
   23550:	462b      	mov	r3, r5
	}
}
   23552:	b002      	add	sp, #8
   23554:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   23558:	4718      	bx	r3
}
   2355a:	b002      	add	sp, #8
   2355c:	bd70      	pop	{r4, r5, r6, pc}
   2355e:	bf00      	nop
   23560:	20002aa8 	.word	0x20002aa8
   23564:	0002d559 	.word	0x0002d559
   23568:	b6db6db7 	.word	0xb6db6db7
   2356c:	0002ef50 	.word	0x0002ef50

00023570 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   23570:	2200      	movs	r2, #0
{
   23572:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   23574:	2101      	movs	r1, #1
{
   23576:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   23578:	4610      	mov	r0, r2
   2357a:	f7eb ff8f 	bl	f49c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   2357e:	480f      	ldr	r0, [pc, #60]	; (235bc <clk_init+0x4c>)
   23580:	f001 fb8c 	bl	24c9c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   23584:	4b0e      	ldr	r3, [pc, #56]	; (235c0 <clk_init+0x50>)
   23586:	4298      	cmp	r0, r3
   23588:	d115      	bne.n	235b6 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   2358a:	f00a fa3b 	bl	2da04 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   2358e:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   23590:	490c      	ldr	r1, [pc, #48]	; (235c4 <clk_init+0x54>)
   23592:	4630      	mov	r0, r6
   23594:	f003 fd21 	bl	26fda <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   23598:	2800      	cmp	r0, #0
   2359a:	db0b      	blt.n	235b4 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
   2359c:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   2359e:	4909      	ldr	r1, [pc, #36]	; (235c4 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   235a0:	2501      	movs	r5, #1
   235a2:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   235a4:	f104 001c 	add.w	r0, r4, #28
   235a8:	f003 fd17 	bl	26fda <onoff_manager_init>
		if (err < 0) {
   235ac:	2800      	cmp	r0, #0
   235ae:	db01      	blt.n	235b4 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   235b0:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   235b2:	2000      	movs	r0, #0
}
   235b4:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   235b6:	f06f 0004 	mvn.w	r0, #4
   235ba:	e7fb      	b.n	235b4 <clk_init+0x44>
   235bc:	000235fd 	.word	0x000235fd
   235c0:	0bad0000 	.word	0x0bad0000
   235c4:	000306ac 	.word	0x000306ac

000235c8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   235c8:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   235ca:	230c      	movs	r3, #12
   235cc:	4809      	ldr	r0, [pc, #36]	; (235f4 <clkstarted_handle.constprop.0+0x2c>)
   235ce:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   235d0:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   235d2:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   235d4:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   235d8:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   235da:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   235dc:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   235de:	4418      	add	r0, r3
   235e0:	f009 ff43 	bl	2d46a <set_on_state>
	if (callback) {
   235e4:	b12d      	cbz	r5, 235f2 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   235e6:	4632      	mov	r2, r6
   235e8:	462b      	mov	r3, r5
   235ea:	4803      	ldr	r0, [pc, #12]	; (235f8 <clkstarted_handle.constprop.0+0x30>)
}
   235ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   235f0:	4718      	bx	r3
}
   235f2:	bd70      	pop	{r4, r5, r6, pc}
   235f4:	20002aa8 	.word	0x20002aa8
   235f8:	0002ef50 	.word	0x0002ef50

000235fc <clock_event_handler>:
	switch (event) {
   235fc:	b110      	cbz	r0, 23604 <clock_event_handler+0x8>
   235fe:	2801      	cmp	r0, #1
   23600:	d004      	beq.n	2360c <clock_event_handler+0x10>
   23602:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   23604:	4b03      	ldr	r3, [pc, #12]	; (23614 <clock_event_handler+0x18>)
   23606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   23608:	075b      	lsls	r3, r3, #29
   2360a:	d101      	bne.n	23610 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   2360c:	f7ff bfdc 	b.w	235c8 <clkstarted_handle.constprop.0>
}
   23610:	4770      	bx	lr
   23612:	bf00      	nop
   23614:	20002aa8 	.word	0x20002aa8

00023618 <generic_hfclk_start>:
{
   23618:	b508      	push	{r3, lr}
	__asm__ volatile(
   2361a:	f04f 0320 	mov.w	r3, #32
   2361e:	f3ef 8111 	mrs	r1, BASEPRI
   23622:	f383 8812 	msr	BASEPRI_MAX, r3
   23626:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   2362a:	4a12      	ldr	r2, [pc, #72]	; (23674 <generic_hfclk_start+0x5c>)
   2362c:	6813      	ldr	r3, [r2, #0]
   2362e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   23632:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   23636:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   23638:	d00c      	beq.n	23654 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   2363a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2363e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   23642:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   23646:	f013 0301 	ands.w	r3, r3, #1
   2364a:	d003      	beq.n	23654 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   2364c:	480a      	ldr	r0, [pc, #40]	; (23678 <generic_hfclk_start+0x60>)
   2364e:	f009 ff0c 	bl	2d46a <set_on_state>
			already_started = true;
   23652:	2301      	movs	r3, #1
	__asm__ volatile(
   23654:	f381 8811 	msr	BASEPRI, r1
   23658:	f3bf 8f6f 	isb	sy
	if (already_started) {
   2365c:	b123      	cbz	r3, 23668 <generic_hfclk_start+0x50>
}
   2365e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   23662:	2000      	movs	r0, #0
   23664:	f7ff bfb0 	b.w	235c8 <clkstarted_handle.constprop.0>
}
   23668:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   2366c:	2001      	movs	r0, #1
   2366e:	f00a b9d3 	b.w	2da18 <nrfx_clock_start>
   23672:	bf00      	nop
   23674:	20002af8 	.word	0x20002af8
   23678:	20002ae8 	.word	0x20002ae8

0002367c <api_blocking_start>:
{
   2367c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   2367e:	2200      	movs	r2, #0
   23680:	2301      	movs	r3, #1
   23682:	e9cd 2302 	strd	r2, r3, [sp, #8]
   23686:	ab04      	add	r3, sp, #16
   23688:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   2368c:	4a09      	ldr	r2, [pc, #36]	; (236b4 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   2368e:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   23692:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   23694:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   23698:	f009 ff57 	bl	2d54a <api_start>
	if (err < 0) {
   2369c:	2800      	cmp	r0, #0
   2369e:	db05      	blt.n	236ac <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   236a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   236a4:	2300      	movs	r3, #0
   236a6:	4668      	mov	r0, sp
   236a8:	f002 fb8c 	bl	25dc4 <z_impl_k_sem_take>
}
   236ac:	b007      	add	sp, #28
   236ae:	f85d fb04 	ldr.w	pc, [sp], #4
   236b2:	bf00      	nop
   236b4:	0002d577 	.word	0x0002d577

000236b8 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   236b8:	4b09      	ldr	r3, [pc, #36]	; (236e0 <generic_hfclk_stop+0x28>)
   236ba:	f3bf 8f5b 	dmb	ish
   236be:	e853 2f00 	ldrex	r2, [r3]
   236c2:	f022 0102 	bic.w	r1, r2, #2
   236c6:	e843 1000 	strex	r0, r1, [r3]
   236ca:	2800      	cmp	r0, #0
   236cc:	d1f7      	bne.n	236be <generic_hfclk_stop+0x6>
   236ce:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   236d2:	07d3      	lsls	r3, r2, #31
   236d4:	d402      	bmi.n	236dc <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   236d6:	2001      	movs	r0, #1
   236d8:	f001 baf0 	b.w	24cbc <nrfx_clock_stop>
}
   236dc:	4770      	bx	lr
   236de:	bf00      	nop
   236e0:	20002af8 	.word	0x20002af8

000236e4 <z_nrf_clock_control_get_onoff>:
}
   236e4:	4a02      	ldr	r2, [pc, #8]	; (236f0 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   236e6:	b2c3      	uxtb	r3, r0
}
   236e8:	201c      	movs	r0, #28
   236ea:	fb03 2000 	mla	r0, r3, r0, r2
   236ee:	4770      	bx	lr
   236f0:	20002aa8 	.word	0x20002aa8

000236f4 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   236f4:	4b09      	ldr	r3, [pc, #36]	; (2371c <z_nrf_clock_bt_ctlr_hf_request+0x28>)
   236f6:	f3bf 8f5b 	dmb	ish
   236fa:	e853 2f00 	ldrex	r2, [r3]
   236fe:	f042 0101 	orr.w	r1, r2, #1
   23702:	e843 1000 	strex	r0, r1, [r3]
   23706:	2800      	cmp	r0, #0
   23708:	d1f7      	bne.n	236fa <z_nrf_clock_bt_ctlr_hf_request+0x6>
   2370a:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   2370e:	0793      	lsls	r3, r2, #30
   23710:	d402      	bmi.n	23718 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   23712:	2001      	movs	r0, #1
   23714:	f00a b980 	b.w	2da18 <nrfx_clock_start>
}
   23718:	4770      	bx	lr
   2371a:	bf00      	nop
   2371c:	20002af8 	.word	0x20002af8

00023720 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23720:	4b09      	ldr	r3, [pc, #36]	; (23748 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
   23722:	f3bf 8f5b 	dmb	ish
   23726:	e853 2f00 	ldrex	r2, [r3]
   2372a:	f022 0101 	bic.w	r1, r2, #1
   2372e:	e843 1000 	strex	r0, r1, [r3]
   23732:	2800      	cmp	r0, #0
   23734:	d1f7      	bne.n	23726 <z_nrf_clock_bt_ctlr_hf_release+0x6>
   23736:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
   2373a:	0793      	lsls	r3, r2, #30
   2373c:	d402      	bmi.n	23744 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   2373e:	2001      	movs	r0, #1
   23740:	f001 babc 	b.w	24cbc <nrfx_clock_stop>
}
   23744:	4770      	bx	lr
   23746:	bf00      	nop
   23748:	20002af8 	.word	0x20002af8

0002374c <z_nrf_clock_control_lf_on>:
{
   2374c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   23750:	4939      	ldr	r1, [pc, #228]	; (23838 <z_nrf_clock_control_lf_on+0xec>)
   23752:	f3bf 8f5b 	dmb	ish
   23756:	4607      	mov	r7, r0
   23758:	2201      	movs	r2, #1
   2375a:	e851 3f00 	ldrex	r3, [r1]
   2375e:	e841 2000 	strex	r0, r2, [r1]
   23762:	2800      	cmp	r0, #0
   23764:	d1f9      	bne.n	2375a <z_nrf_clock_control_lf_on+0xe>
   23766:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   2376a:	b933      	cbnz	r3, 2377a <z_nrf_clock_control_lf_on+0x2e>
   2376c:	4933      	ldr	r1, [pc, #204]	; (2383c <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
   2376e:	4834      	ldr	r0, [pc, #208]	; (23840 <z_nrf_clock_control_lf_on+0xf4>)
   23770:	604b      	str	r3, [r1, #4]
   23772:	60cb      	str	r3, [r1, #12]
   23774:	608a      	str	r2, [r1, #8]
   23776:	f003 fc43 	bl	27000 <onoff_request>
	switch (start_mode) {
   2377a:	1e7b      	subs	r3, r7, #1
   2377c:	2b01      	cmp	r3, #1
   2377e:	d82f      	bhi.n	237e0 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   23780:	2f01      	cmp	r7, #1
   23782:	d107      	bne.n	23794 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   23784:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   23788:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   2378c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   23790:	2b01      	cmp	r3, #1
   23792:	d025      	beq.n	237e0 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   23794:	f00a fef2 	bl	2e57c <k_is_in_isr>
   23798:	4604      	mov	r4, r0
   2379a:	b918      	cbnz	r0, 237a4 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
   2379c:	4b29      	ldr	r3, [pc, #164]	; (23844 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
   2379e:	781b      	ldrb	r3, [r3, #0]
   237a0:	2b00      	cmp	r3, #0
   237a2:	d141      	bne.n	23828 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
   237a4:	f04f 0320 	mov.w	r3, #32
   237a8:	f3ef 8611 	mrs	r6, BASEPRI
   237ac:	f383 8812 	msr	BASEPRI_MAX, r3
   237b0:	f3bf 8f6f 	isb	sy
   237b4:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   237b6:	f8df 8090 	ldr.w	r8, [pc, #144]	; 23848 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   237ba:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   237be:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   237c2:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   237c6:	03d2      	lsls	r2, r2, #15
   237c8:	d50c      	bpl.n	237e4 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   237ca:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   237ce:	2b01      	cmp	r3, #1
   237d0:	d001      	beq.n	237d6 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   237d2:	2f01      	cmp	r7, #1
   237d4:	d106      	bne.n	237e4 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
   237d6:	b30c      	cbz	r4, 2381c <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   237d8:	f386 8811 	msr	BASEPRI, r6
   237dc:	f3bf 8f6f 	isb	sy
}
   237e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   237e4:	b1ac      	cbz	r4, 23812 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   237e6:	4630      	mov	r0, r6
   237e8:	f7eb fe1c 	bl	f424 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   237ec:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   237f0:	2b00      	cmp	r3, #0
   237f2:	d1e4      	bne.n	237be <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   237f4:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   237f8:	2a00      	cmp	r2, #0
   237fa:	d0e0      	beq.n	237be <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   237fc:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   23800:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   23804:	2301      	movs	r3, #1
   23806:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
   2380a:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2380e:	60ab      	str	r3, [r5, #8]
}
   23810:	e7d5      	b.n	237be <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
   23812:	2100      	movs	r1, #0
   23814:	2021      	movs	r0, #33	; 0x21
   23816:	f002 ff95 	bl	26744 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   2381a:	e7e7      	b.n	237ec <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
   2381c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   23820:	2202      	movs	r2, #2
   23822:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   23826:	e7db      	b.n	237e0 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
   23828:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2382c:	2202      	movs	r2, #2
   2382e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   23832:	4606      	mov	r6, r0
}
   23834:	e7bf      	b.n	237b6 <z_nrf_clock_control_lf_on+0x6a>
   23836:	bf00      	nop
   23838:	20002afc 	.word	0x20002afc
   2383c:	20002a98 	.word	0x20002a98
   23840:	20002ac4 	.word	0x20002ac4
   23844:	2000319e 	.word	0x2000319e
   23848:	e000e100 	.word	0xe000e100

0002384c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   2384c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   2384e:	4b08      	ldr	r3, [pc, #32]	; (23870 <uart_console_init+0x24>)
   23850:	4808      	ldr	r0, [pc, #32]	; (23874 <uart_console_init+0x28>)
   23852:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   23854:	f00a fdce 	bl	2e3f4 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   23858:	b138      	cbz	r0, 2386a <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   2385a:	4807      	ldr	r0, [pc, #28]	; (23878 <uart_console_init+0x2c>)
   2385c:	f7ec f984 	bl	fb68 <__stdout_hook_install>
	__printk_hook_install(console_out);
   23860:	4805      	ldr	r0, [pc, #20]	; (23878 <uart_console_init+0x2c>)
   23862:	f7ea f9bd 	bl	dbe0 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   23866:	2000      	movs	r0, #0
}
   23868:	bd08      	pop	{r3, pc}
		return -ENODEV;
   2386a:	f06f 0012 	mvn.w	r0, #18
   2386e:	e7fb      	b.n	23868 <uart_console_init+0x1c>
   23870:	20002b00 	.word	0x20002b00
   23874:	0002efc8 	.word	0x0002efc8
   23878:	0002387d 	.word	0x0002387d

0002387c <console_out>:
	if ('\n' == c) {
   2387c:	280a      	cmp	r0, #10
{
   2387e:	b538      	push	{r3, r4, r5, lr}
   23880:	4d07      	ldr	r5, [pc, #28]	; (238a0 <console_out+0x24>)
   23882:	4604      	mov	r4, r0
	if ('\n' == c) {
   23884:	d104      	bne.n	23890 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
   23886:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   23888:	6883      	ldr	r3, [r0, #8]
   2388a:	210d      	movs	r1, #13
   2388c:	685b      	ldr	r3, [r3, #4]
   2388e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   23890:	6828      	ldr	r0, [r5, #0]
   23892:	6883      	ldr	r3, [r0, #8]
   23894:	b2e1      	uxtb	r1, r4
   23896:	685b      	ldr	r3, [r3, #4]
   23898:	4798      	blx	r3
}
   2389a:	4620      	mov	r0, r4
   2389c:	bd38      	pop	{r3, r4, r5, pc}
   2389e:	bf00      	nop
   238a0:	20002b00 	.word	0x20002b00

000238a4 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   238a4:	b530      	push	{r4, r5, lr}
	return port->config;
   238a6:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   238a8:	7b04      	ldrb	r4, [r0, #12]
   238aa:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
   238ae:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   238b2:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   238b6:	b085      	sub	sp, #20
   238b8:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   238bc:	d104      	bne.n	238c8 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   238be:	4628      	mov	r0, r5
   238c0:	f001 fcaa 	bl	25218 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   238c4:	2000      	movs	r0, #0
   238c6:	e032      	b.n	2392e <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
   238c8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   238cc:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   238d0:	d12f      	bne.n	23932 <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   238d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   238d6:	bf0c      	ite	eq
   238d8:	2304      	moveq	r3, #4
   238da:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   238dc:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   238e0:	6883      	ldr	r3, [r0, #8]
   238e2:	fa23 f101 	lsr.w	r1, r3, r1
   238e6:	07c9      	lsls	r1, r1, #31
   238e8:	d42f      	bmi.n	2394a <gpio_nrfx_pin_interrupt_configure+0xa6>
   238ea:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   238ee:	d12c      	bne.n	2394a <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   238f0:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
   238f2:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   238f4:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
   238f8:	4a1c      	ldr	r2, [pc, #112]	; (2396c <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   238fa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   238fe:	bf18      	it	ne
   23900:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   23904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   23908:	07db      	lsls	r3, r3, #31
   2390a:	d41e      	bmi.n	2394a <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   2390c:	f10d 0407 	add.w	r4, sp, #7
   23910:	4621      	mov	r1, r4
   23912:	4628      	mov	r0, r5
   23914:	f001 fbe4 	bl	250e0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   23918:	4b15      	ldr	r3, [pc, #84]	; (23970 <gpio_nrfx_pin_interrupt_configure+0xcc>)
   2391a:	4298      	cmp	r0, r3
   2391c:	d114      	bne.n	23948 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
   2391e:	4620      	mov	r0, r4
   23920:	f001 fc2c 	bl	2517c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   23924:	4b13      	ldr	r3, [pc, #76]	; (23974 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   23926:	4298      	cmp	r0, r3
   23928:	d00e      	beq.n	23948 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
   2392a:	f06f 000b 	mvn.w	r0, #11
}
   2392e:	b005      	add	sp, #20
   23930:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   23932:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   23936:	d005      	beq.n	23944 <gpio_nrfx_pin_interrupt_configure+0xa0>
   23938:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   2393c:	bf0c      	ite	eq
   2393e:	2302      	moveq	r3, #2
   23940:	2301      	movne	r3, #1
   23942:	e7cb      	b.n	238dc <gpio_nrfx_pin_interrupt_configure+0x38>
   23944:	2303      	movs	r3, #3
   23946:	e7c9      	b.n	238dc <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   23948:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   2394a:	2300      	movs	r3, #0
   2394c:	4619      	mov	r1, r3
   2394e:	aa02      	add	r2, sp, #8
   23950:	4628      	mov	r0, r5
   23952:	f001 fa9f 	bl	24e94 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   23956:	4b07      	ldr	r3, [pc, #28]	; (23974 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   23958:	4298      	cmp	r0, r3
   2395a:	d104      	bne.n	23966 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   2395c:	2101      	movs	r1, #1
   2395e:	4628      	mov	r0, r5
   23960:	f001 fc12 	bl	25188 <nrfx_gpiote_trigger_enable>
   23964:	e7ae      	b.n	238c4 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   23966:	f06f 0004 	mvn.w	r0, #4
   2396a:	e7e0      	b.n	2392e <gpio_nrfx_pin_interrupt_configure+0x8a>
   2396c:	50000300 	.word	0x50000300
   23970:	0bad0004 	.word	0x0bad0004
   23974:	0bad0000 	.word	0x0bad0000

00023978 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   23978:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   2397a:	f001 fbef 	bl	2515c <nrfx_gpiote_is_init>
   2397e:	4604      	mov	r4, r0
   23980:	b968      	cbnz	r0, 2399e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   23982:	f001 fbc3 	bl	2510c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   23986:	4b08      	ldr	r3, [pc, #32]	; (239a8 <gpio_nrfx_init+0x30>)
   23988:	4298      	cmp	r0, r3
   2398a:	d10a      	bne.n	239a2 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   2398c:	4807      	ldr	r0, [pc, #28]	; (239ac <gpio_nrfx_init+0x34>)
   2398e:	4621      	mov	r1, r4
   23990:	f001 fba0 	bl	250d4 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   23994:	4622      	mov	r2, r4
   23996:	2105      	movs	r1, #5
   23998:	2006      	movs	r0, #6
   2399a:	f7eb fd7f 	bl	f49c <z_arm_irq_priority_set>
		return 0;
   2399e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   239a0:	bd10      	pop	{r4, pc}
		return -EIO;
   239a2:	f06f 0004 	mvn.w	r0, #4
   239a6:	e7fb      	b.n	239a0 <gpio_nrfx_init+0x28>
   239a8:	0bad0000 	.word	0x0bad0000
   239ac:	000239b1 	.word	0x000239b1

000239b0 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   239b0:	0942      	lsrs	r2, r0, #5
{
   239b2:	b570      	push	{r4, r5, r6, lr}
   239b4:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   239b6:	d002      	beq.n	239be <nrfx_gpio_handler+0xe>
   239b8:	2a01      	cmp	r2, #1
   239ba:	d015      	beq.n	239e8 <nrfx_gpio_handler+0x38>
}
   239bc:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   239be:	4e0b      	ldr	r6, [pc, #44]	; (239ec <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
   239c0:	6932      	ldr	r2, [r6, #16]
   239c2:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   239c4:	2900      	cmp	r1, #0
   239c6:	d0f9      	beq.n	239bc <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   239c8:	f003 031f 	and.w	r3, r3, #31
   239cc:	2501      	movs	r5, #1
   239ce:	680c      	ldr	r4, [r1, #0]
   239d0:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
   239d2:	688a      	ldr	r2, [r1, #8]
   239d4:	402a      	ands	r2, r5
   239d6:	d002      	beq.n	239de <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   239d8:	684b      	ldr	r3, [r1, #4]
   239da:	4630      	mov	r0, r6
   239dc:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   239de:	2c00      	cmp	r4, #0
   239e0:	d0ec      	beq.n	239bc <nrfx_gpio_handler+0xc>
   239e2:	4621      	mov	r1, r4
   239e4:	6824      	ldr	r4, [r4, #0]
   239e6:	e7f4      	b.n	239d2 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   239e8:	4e01      	ldr	r6, [pc, #4]	; (239f0 <nrfx_gpio_handler+0x40>)
   239ea:	e7e9      	b.n	239c0 <nrfx_gpio_handler+0x10>
   239ec:	0002ef68 	.word	0x0002ef68
   239f0:	0002ef80 	.word	0x0002ef80

000239f4 <gpio_nrfx_pin_configure>:
{
   239f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   239f8:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   239fa:	7b3b      	ldrb	r3, [r7, #12]
   239fc:	f001 051f 	and.w	r5, r1, #31
{
   23a00:	b085      	sub	sp, #20
   23a02:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   23a04:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   23a08:	4614      	mov	r4, r2
   23a0a:	b9ca      	cbnz	r2, 23a40 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   23a0c:	a902      	add	r1, sp, #8
   23a0e:	4628      	mov	r0, r5
   23a10:	f001 fb66 	bl	250e0 <nrfx_gpiote_channel_get>
   23a14:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   23a16:	4628      	mov	r0, r5
   23a18:	f001 fc26 	bl	25268 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   23a1c:	4b4a      	ldr	r3, [pc, #296]	; (23b48 <gpio_nrfx_pin_configure+0x154>)
   23a1e:	4298      	cmp	r0, r3
   23a20:	d004      	beq.n	23a2c <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   23a22:	f06f 0004 	mvn.w	r0, #4
}
   23a26:	b005      	add	sp, #20
   23a28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   23a2c:	4284      	cmp	r4, r0
   23a2e:	d105      	bne.n	23a3c <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   23a30:	f89d 0008 	ldrb.w	r0, [sp, #8]
   23a34:	f001 fb9c 	bl	25170 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   23a38:	42a0      	cmp	r0, r4
   23a3a:	d1f2      	bne.n	23a22 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   23a3c:	2000      	movs	r0, #0
   23a3e:	e7f2      	b.n	23a26 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   23a40:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   23a44:	f10d 0103 	add.w	r1, sp, #3
   23a48:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   23a4a:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   23a4e:	f001 fb47 	bl	250e0 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   23a52:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   23a54:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   23a56:	aa02      	add	r2, sp, #8
   23a58:	4649      	mov	r1, r9
   23a5a:	4628      	mov	r0, r5
   23a5c:	f001 fa1a 	bl	24e94 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   23a60:	4b39      	ldr	r3, [pc, #228]	; (23b48 <gpio_nrfx_pin_configure+0x154>)
   23a62:	4298      	cmp	r0, r3
   23a64:	d002      	beq.n	23a6c <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   23a66:	f06f 0015 	mvn.w	r0, #21
   23a6a:	e7dc      	b.n	23a26 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   23a6c:	4580      	cmp	r8, r0
   23a6e:	d103      	bne.n	23a78 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   23a70:	f89d 0003 	ldrb.w	r0, [sp, #3]
   23a74:	f001 fb7c 	bl	25170 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   23a78:	03a3      	lsls	r3, r4, #14
   23a7a:	d551      	bpl.n	23b20 <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   23a7c:	f240 6306 	movw	r3, #1542	; 0x606
   23a80:	4023      	ands	r3, r4
   23a82:	f240 2206 	movw	r2, #518	; 0x206
   23a86:	4293      	cmp	r3, r2
   23a88:	d03b      	beq.n	23b02 <gpio_nrfx_pin_configure+0x10e>
   23a8a:	d80c      	bhi.n	23aa6 <gpio_nrfx_pin_configure+0xb2>
   23a8c:	2b06      	cmp	r3, #6
   23a8e:	d015      	beq.n	23abc <gpio_nrfx_pin_configure+0xc8>
   23a90:	d804      	bhi.n	23a9c <gpio_nrfx_pin_configure+0xa8>
   23a92:	b19b      	cbz	r3, 23abc <gpio_nrfx_pin_configure+0xc8>
   23a94:	2b02      	cmp	r3, #2
   23a96:	d1e6      	bne.n	23a66 <gpio_nrfx_pin_configure+0x72>
   23a98:	2304      	movs	r3, #4
   23a9a:	e00f      	b.n	23abc <gpio_nrfx_pin_configure+0xc8>
   23a9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   23aa0:	d1e1      	bne.n	23a66 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   23aa2:	2301      	movs	r3, #1
   23aa4:	e00a      	b.n	23abc <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   23aa6:	f240 4202 	movw	r2, #1026	; 0x402
   23aaa:	4293      	cmp	r3, r2
   23aac:	d02b      	beq.n	23b06 <gpio_nrfx_pin_configure+0x112>
   23aae:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
   23ab2:	d02a      	beq.n	23b0a <gpio_nrfx_pin_configure+0x116>
   23ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   23ab8:	d1d5      	bne.n	23a66 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   23aba:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   23abc:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   23ac0:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   23ac4:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   23ac8:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   23aca:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   23ace:	bf54      	ite	pl
   23ad0:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   23ad4:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   23ad6:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   23ad8:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   23adc:	d517      	bpl.n	23b0e <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   23ade:	687b      	ldr	r3, [r7, #4]
   23ae0:	2101      	movs	r1, #1
   23ae2:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   23ae6:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   23aea:	2200      	movs	r2, #0
   23aec:	a901      	add	r1, sp, #4
   23aee:	4628      	mov	r0, r5
   23af0:	f001 fa7e 	bl	24ff0 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   23af4:	4b14      	ldr	r3, [pc, #80]	; (23b48 <gpio_nrfx_pin_configure+0x154>)
   23af6:	4298      	cmp	r0, r3
   23af8:	bf14      	ite	ne
   23afa:	f06f 0015 	mvnne.w	r0, #21
   23afe:	2000      	moveq	r0, #0
   23b00:	e791      	b.n	23a26 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   23b02:	2307      	movs	r3, #7
   23b04:	e7da      	b.n	23abc <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
   23b06:	2305      	movs	r3, #5
   23b08:	e7d8      	b.n	23abc <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
   23b0a:	2303      	movs	r3, #3
   23b0c:	e7d6      	b.n	23abc <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   23b0e:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   23b10:	bf41      	itttt	mi
   23b12:	687b      	ldrmi	r3, [r7, #4]
   23b14:	2101      	movmi	r1, #1
   23b16:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   23b1a:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   23b1e:	e7e4      	b.n	23aea <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
   23b20:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   23b22:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   23b26:	bf54      	ite	pl
   23b28:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   23b2c:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   23b2e:	461a      	mov	r2, r3
   23b30:	a901      	add	r1, sp, #4
   23b32:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   23b34:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   23b38:	f001 f9ac 	bl	24e94 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   23b3c:	4b02      	ldr	r3, [pc, #8]	; (23b48 <gpio_nrfx_pin_configure+0x154>)
   23b3e:	4298      	cmp	r0, r3
   23b40:	f43f af7c 	beq.w	23a3c <gpio_nrfx_pin_configure+0x48>
   23b44:	e78f      	b.n	23a66 <gpio_nrfx_pin_configure+0x72>
   23b46:	bf00      	nop
   23b48:	0bad0000 	.word	0x0bad0000

00023b4c <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   23b4c:	4b02      	ldr	r3, [pc, #8]	; (23b58 <flash_nrf_pages_layout+0xc>)
   23b4e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   23b50:	2301      	movs	r3, #1
   23b52:	6013      	str	r3, [r2, #0]
}
   23b54:	4770      	bx	lr
   23b56:	bf00      	nop
   23b58:	20002b1c 	.word	0x20002b1c

00023b5c <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   23b5c:	4800      	ldr	r0, [pc, #0]	; (23b60 <flash_nrf_get_parameters+0x4>)
   23b5e:	4770      	bx	lr
   23b60:	00030710 	.word	0x00030710

00023b64 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   23b64:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   23b66:	2201      	movs	r2, #1
   23b68:	4611      	mov	r1, r2
   23b6a:	4807      	ldr	r0, [pc, #28]	; (23b88 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   23b6c:	4c07      	ldr	r4, [pc, #28]	; (23b8c <nrf_flash_init+0x28>)
   23b6e:	f00a fdf3 	bl	2e758 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   23b72:	f000 f9c3 	bl	23efc <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   23b76:	f009 ffdb 	bl	2db30 <nrfx_nvmc_flash_page_count_get>
   23b7a:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   23b7c:	f009 ffd4 	bl	2db28 <nrfx_nvmc_flash_page_size_get>
   23b80:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   23b82:	2000      	movs	r0, #0
   23b84:	bd10      	pop	{r4, pc}
   23b86:	bf00      	nop
   23b88:	20002b24 	.word	0x20002b24
   23b8c:	20002b1c 	.word	0x20002b1c

00023b90 <restore_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
   23b90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   23b94:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
   23b98:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   23b9c:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   23ba0:	f023 031f 	bic.w	r3, r3, #31
   23ba4:	430b      	orrs	r3, r1
    pofcon |=
   23ba6:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   23baa:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
   23bae:	4b02      	ldr	r3, [pc, #8]	; (23bb8 <restore_pofwarn.part.0+0x28>)
   23bb0:	2200      	movs	r2, #0
   23bb2:	701a      	strb	r2, [r3, #0]
	}
}
   23bb4:	4770      	bx	lr
   23bb6:	bf00      	nop
   23bb8:	20002d8d 	.word	0x20002d8d

00023bbc <suspend_pofwarn>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   23bbc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   23bc0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   23bc4:	2b08      	cmp	r3, #8
   23bc6:	d122      	bne.n	23c0e <suspend_pofwarn+0x52>
    uint32_t pofcon = p_reg->POFCON;
   23bc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   23bcc:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
	if (enabled) {
   23bd0:	f011 0001 	ands.w	r0, r1, #1
   23bd4:	d01c      	beq.n	23c10 <suspend_pofwarn+0x54>
    uint32_t pofcon = p_reg->POFCON;
   23bd6:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   23bda:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   23bde:	f020 001f 	bic.w	r0, r0, #31
    pofcon |=
   23be2:	4308      	orrs	r0, r1
    p_reg->POFCON = pofcon;
   23be4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23be8:	f8d2 0108 	ldr.w	r0, [r2, #264]	; 0x108
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   23bec:	b158      	cbz	r0, 23c06 <suspend_pofwarn+0x4a>
    uint32_t pofcon = p_reg->POFCON;
   23bee:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   23bf2:	f023 031f 	bic.w	r3, r3, #31
   23bf6:	430b      	orrs	r3, r1
    pofcon |=
   23bf8:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   23bfc:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			return -ECANCELED;
   23c00:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   23c04:	4770      	bx	lr
		pofcon_enabled = enabled;
   23c06:	4b03      	ldr	r3, [pc, #12]	; (23c14 <suspend_pofwarn+0x58>)
   23c08:	2201      	movs	r2, #1
   23c0a:	701a      	strb	r2, [r3, #0]
   23c0c:	4770      	bx	lr
		return 0;
   23c0e:	2000      	movs	r0, #0
}
   23c10:	4770      	bx	lr
   23c12:	bf00      	nop
   23c14:	20002d8d 	.word	0x20002d8d

00023c18 <erase_op>:
{
   23c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23c1a:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   23c1c:	f009 ff84 	bl	2db28 <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   23c20:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   23c22:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   23c24:	b10b      	cbz	r3, 23c2a <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   23c26:	f000 f97b 	bl	23f20 <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   23c2a:	4f13      	ldr	r7, [pc, #76]	; (23c78 <erase_op+0x60>)
{
   23c2c:	2600      	movs	r6, #0
		if (SUSPEND_POFWARN()) {
   23c2e:	f7ff ffc5 	bl	23bbc <suspend_pofwarn>
   23c32:	b9e8      	cbnz	r0, 23c70 <erase_op+0x58>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   23c34:	6860      	ldr	r0, [r4, #4]
   23c36:	f001 fc1d 	bl	25474 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   23c3a:	68a3      	ldr	r3, [r4, #8]
   23c3c:	1b5b      	subs	r3, r3, r5
   23c3e:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   23c40:	6863      	ldr	r3, [r4, #4]
   23c42:	442b      	add	r3, r5
   23c44:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   23c46:	783b      	ldrb	r3, [r7, #0]
   23c48:	b10b      	cbz	r3, 23c4e <erase_op+0x36>
   23c4a:	f7ff ffa1 	bl	23b90 <restore_pofwarn.part.0>
		if (e_ctx->enable_time_limit) {
   23c4e:	7b23      	ldrb	r3, [r4, #12]
		i++;
   23c50:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   23c52:	b93b      	cbnz	r3, 23c64 <erase_op+0x4c>
	} while (e_ctx->len > 0);
   23c54:	68a3      	ldr	r3, [r4, #8]
   23c56:	2b00      	cmp	r3, #0
   23c58:	d1e9      	bne.n	23c2e <erase_op+0x16>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   23c5a:	68a0      	ldr	r0, [r4, #8]
   23c5c:	3800      	subs	r0, #0
   23c5e:	bf18      	it	ne
   23c60:	2001      	movne	r0, #1
}
   23c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   23c64:	4630      	mov	r0, r6
   23c66:	f7e9 ff07 	bl	da78 <nrf_flash_sync_check_time_limit>
   23c6a:	2800      	cmp	r0, #0
   23c6c:	d0f2      	beq.n	23c54 <erase_op+0x3c>
   23c6e:	e7f4      	b.n	23c5a <erase_op+0x42>
			return -ECANCELED;
   23c70:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   23c74:	e7f5      	b.n	23c62 <erase_op+0x4a>
   23c76:	bf00      	nop
   23c78:	20002d8d 	.word	0x20002d8d

00023c7c <flash_nrf_erase>:
{
   23c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   23c7e:	b087      	sub	sp, #28
   23c80:	460e      	mov	r6, r1
   23c82:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   23c84:	f009 ff50 	bl	2db28 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   23c88:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   23c8a:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   23c8c:	4630      	mov	r0, r6
   23c8e:	f009 fcc6 	bl	2d61e <is_regular_addr_valid>
   23c92:	b3c8      	cbz	r0, 23d08 <flash_nrf_erase+0x8c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   23c94:	fbb6 f3f7 	udiv	r3, r6, r7
   23c98:	fb07 6313 	mls	r3, r7, r3, r6
   23c9c:	bba3      	cbnz	r3, 23d08 <flash_nrf_erase+0x8c>
   23c9e:	fbb5 f4f7 	udiv	r4, r5, r7
   23ca2:	fb07 5414 	mls	r4, r7, r4, r5
   23ca6:	bb7c      	cbnz	r4, 23d08 <flash_nrf_erase+0x8c>
		if (!n_pages) {
   23ca8:	42bd      	cmp	r5, r7
   23caa:	d322      	bcc.n	23cf2 <flash_nrf_erase+0x76>
	return z_impl_k_sem_take(sem, timeout);
   23cac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   23cb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23cb4:	4816      	ldr	r0, [pc, #88]	; (23d10 <flash_nrf_erase+0x94>)
   23cb6:	f002 f885 	bl	25dc4 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   23cba:	f009 fcd7 	bl	2d66c <nrf_flash_sync_is_required>
   23cbe:	ab02      	add	r3, sp, #8
   23cc0:	4601      	mov	r1, r0
	struct flash_context context = {
   23cc2:	2210      	movs	r2, #16
	if (nrf_flash_sync_is_required()) {
   23cc4:	b1c0      	cbz	r0, 23cf8 <flash_nrf_erase+0x7c>
	struct flash_context context = {
   23cc6:	4621      	mov	r1, r4
   23cc8:	4618      	mov	r0, r3
   23cca:	f005 fb47 	bl	2935c <memset>
   23cce:	2201      	movs	r2, #1
   23cd0:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   23cd4:	4a0f      	ldr	r2, [pc, #60]	; (23d14 <flash_nrf_erase+0x98>)
   23cd6:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   23cda:	480f      	ldr	r0, [pc, #60]	; (23d18 <flash_nrf_erase+0x9c>)
	struct flash_context context = {
   23cdc:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   23ce0:	f000 f916 	bl	23f10 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   23ce4:	4668      	mov	r0, sp
   23ce6:	f7e9 fe4b 	bl	d980 <nrf_flash_sync_exe>
	return	erase_op(&context);
   23cea:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   23cec:	4808      	ldr	r0, [pc, #32]	; (23d10 <flash_nrf_erase+0x94>)
   23cee:	f002 f843 	bl	25d78 <z_impl_k_sem_give>
}
   23cf2:	4620      	mov	r0, r4
   23cf4:	b007      	add	sp, #28
   23cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct flash_context context = {
   23cf8:	4618      	mov	r0, r3
   23cfa:	f005 fb2f 	bl	2935c <memset>
   23cfe:	e9cd 6503 	strd	r6, r5, [sp, #12]
	return	erase_op(&context);
   23d02:	f7ff ff89 	bl	23c18 <erase_op>
   23d06:	e7f0      	b.n	23cea <flash_nrf_erase+0x6e>
		return -EINVAL;
   23d08:	f06f 0415 	mvn.w	r4, #21
   23d0c:	e7f1      	b.n	23cf2 <flash_nrf_erase+0x76>
   23d0e:	bf00      	nop
   23d10:	20002b24 	.word	0x20002b24
   23d14:	00023c19 	.word	0x00023c19
   23d18:	00015e64 	.word	0x00015e64

00023d1c <write_op>:
{
   23d1c:	b570      	push	{r4, r5, r6, lr}
	if (w_ctx->enable_time_limit) {
   23d1e:	7b03      	ldrb	r3, [r0, #12]
{
   23d20:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   23d22:	b10b      	cbz	r3, 23d28 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   23d24:	f000 f8fc 	bl	23f20 <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   23d28:	4e19      	ldr	r6, [pc, #100]	; (23d90 <write_op+0x74>)
{
   23d2a:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   23d2c:	68a3      	ldr	r3, [r4, #8]
   23d2e:	2b03      	cmp	r3, #3
   23d30:	d806      	bhi.n	23d40 <write_op+0x24>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   23d32:	4a18      	ldr	r2, [pc, #96]	; (23d94 <write_op+0x78>)
   23d34:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   23d38:	07db      	lsls	r3, r3, #31
   23d3a:	d5fb      	bpl.n	23d34 <write_op+0x18>
	return FLASH_OP_DONE;
   23d3c:	2000      	movs	r0, #0
}
   23d3e:	bd70      	pop	{r4, r5, r6, pc}
		if (SUSPEND_POFWARN()) {
   23d40:	f7ff ff3c 	bl	23bbc <suspend_pofwarn>
   23d44:	bb08      	cbnz	r0, 23d8a <write_op+0x6e>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   23d46:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   23d48:	6860      	ldr	r0, [r4, #4]
   23d4a:	6819      	ldr	r1, [r3, #0]
   23d4c:	f001 fbb2 	bl	254b4 <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   23d50:	7833      	ldrb	r3, [r6, #0]
   23d52:	b10b      	cbz	r3, 23d58 <write_op+0x3c>
   23d54:	f7ff ff1c 	bl	23b90 <restore_pofwarn.part.0>
	w_ctx->flash_addr += shift;
   23d58:	6863      	ldr	r3, [r4, #4]
   23d5a:	3304      	adds	r3, #4
   23d5c:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   23d5e:	6823      	ldr	r3, [r4, #0]
   23d60:	3304      	adds	r3, #4
   23d62:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   23d64:	68a3      	ldr	r3, [r4, #8]
   23d66:	3b04      	subs	r3, #4
   23d68:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   23d6a:	7b23      	ldrb	r3, [r4, #12]
		i++;
   23d6c:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   23d6e:	2b00      	cmp	r3, #0
   23d70:	d0dc      	beq.n	23d2c <write_op+0x10>
			if (nrf_flash_sync_check_time_limit(i)) {
   23d72:	4628      	mov	r0, r5
   23d74:	f7e9 fe80 	bl	da78 <nrf_flash_sync_check_time_limit>
   23d78:	2800      	cmp	r0, #0
   23d7a:	d0d7      	beq.n	23d2c <write_op+0x10>
   23d7c:	4a05      	ldr	r2, [pc, #20]	; (23d94 <write_op+0x78>)
   23d7e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   23d82:	07d9      	lsls	r1, r3, #31
   23d84:	d5fb      	bpl.n	23d7e <write_op+0x62>
				return FLASH_OP_ONGOING;
   23d86:	2001      	movs	r0, #1
   23d88:	e7d9      	b.n	23d3e <write_op+0x22>
			return -ECANCELED;
   23d8a:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   23d8e:	e7d6      	b.n	23d3e <write_op+0x22>
   23d90:	20002d8d 	.word	0x20002d8d
   23d94:	4001e000 	.word	0x4001e000

00023d98 <flash_nrf_write>:
{
   23d98:	b570      	push	{r4, r5, r6, lr}
   23d9a:	460d      	mov	r5, r1
   23d9c:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   23d9e:	4619      	mov	r1, r3
   23da0:	4628      	mov	r0, r5
{
   23da2:	4616      	mov	r6, r2
   23da4:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   23da6:	f009 fc3a 	bl	2d61e <is_regular_addr_valid>
   23daa:	b360      	cbz	r0, 23e06 <flash_nrf_write+0x6e>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   23dac:	ea45 0304 	orr.w	r3, r5, r4
   23db0:	079b      	lsls	r3, r3, #30
   23db2:	d128      	bne.n	23e06 <flash_nrf_write+0x6e>
	if (!len) {
   23db4:	b1fc      	cbz	r4, 23df6 <flash_nrf_write+0x5e>
	return z_impl_k_sem_take(sem, timeout);
   23db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23dba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   23dbe:	4813      	ldr	r0, [pc, #76]	; (23e0c <flash_nrf_write+0x74>)
   23dc0:	f002 f800 	bl	25dc4 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   23dc4:	f009 fc52 	bl	2d66c <nrf_flash_sync_is_required>
   23dc8:	4603      	mov	r3, r0
	struct flash_context context = {
   23dca:	e9cd 6502 	strd	r6, r5, [sp, #8]
   23dce:	a802      	add	r0, sp, #8
   23dd0:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   23dd2:	b19b      	cbz	r3, 23dfc <flash_nrf_write+0x64>
	struct flash_context context = {
   23dd4:	2301      	movs	r3, #1
   23dd6:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   23dda:	4b0d      	ldr	r3, [pc, #52]	; (23e10 <flash_nrf_write+0x78>)
   23ddc:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   23de0:	f641 504c 	movw	r0, #7500	; 0x1d4c
   23de4:	f000 f894 	bl	23f10 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   23de8:	4668      	mov	r0, sp
   23dea:	f7e9 fdc9 	bl	d980 <nrf_flash_sync_exe>
	return write_op(&context);
   23dee:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   23df0:	4806      	ldr	r0, [pc, #24]	; (23e0c <flash_nrf_write+0x74>)
   23df2:	f001 ffc1 	bl	25d78 <z_impl_k_sem_give>
}
   23df6:	4620      	mov	r0, r4
   23df8:	b006      	add	sp, #24
   23dfa:	bd70      	pop	{r4, r5, r6, pc}
	struct flash_context context = {
   23dfc:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   23e00:	f7ff ff8c 	bl	23d1c <write_op>
   23e04:	e7f3      	b.n	23dee <flash_nrf_write+0x56>
		return -EINVAL;
   23e06:	f06f 0415 	mvn.w	r4, #21
   23e0a:	e7f4      	b.n	23df6 <flash_nrf_write+0x5e>
   23e0c:	20002b24 	.word	0x20002b24
   23e10:	00023d1d 	.word	0x00023d1d

00023e14 <time_slot_callback_work>:
{
   23e14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   23e16:	9b07      	ldr	r3, [sp, #28]
	rc = op_desc->handler(op_desc->context);
   23e18:	e9d3 2000 	ldrd	r2, r0, [r3]
   23e1c:	4790      	blx	r2
	if (rc != FLASH_OP_ONGOING) {
   23e1e:	2801      	cmp	r0, #1
	rc = op_desc->handler(op_desc->context);
   23e20:	4604      	mov	r4, r0
	if (rc != FLASH_OP_ONGOING) {
   23e22:	d013      	beq.n	23e4c <time_slot_callback_work+0x38>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   23e24:	f10d 010f 	add.w	r1, sp, #15
   23e28:	f10d 000e 	add.w	r0, sp, #14
   23e2c:	f7f4 fd8e 	bl	1894c <ll_timeslice_ticker_id_get>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   23e30:	2300      	movs	r3, #0
   23e32:	9300      	str	r3, [sp, #0]
   23e34:	4619      	mov	r1, r3
   23e36:	f89d 200f 	ldrb.w	r2, [sp, #15]
   23e3a:	f89d 000e 	ldrb.w	r0, [sp, #14]
   23e3e:	f7f2 fc81 	bl	16744 <ticker_stop>
		_ticker_sync_context.result = (rc == FLASH_OP_DONE) ? 0 : rc;
   23e42:	4b03      	ldr	r3, [pc, #12]	; (23e50 <time_slot_callback_work+0x3c>)
   23e44:	60dc      	str	r4, [r3, #12]
   23e46:	4803      	ldr	r0, [pc, #12]	; (23e54 <time_slot_callback_work+0x40>)
   23e48:	f001 ff96 	bl	25d78 <z_impl_k_sem_give>
}
   23e4c:	b004      	add	sp, #16
   23e4e:	bd10      	pop	{r4, pc}
   23e50:	20002b3c 	.word	0x20002b3c
   23e54:	20002b4c 	.word	0x20002b4c

00023e58 <time_slot_delay>:
{
   23e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23e5c:	b08d      	sub	sp, #52	; 0x34
   23e5e:	4606      	mov	r6, r0
   23e60:	460f      	mov	r7, r1
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   23e62:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   23e66:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
{
   23e6a:	4690      	mov	r8, r2
   23e6c:	4699      	mov	r9, r3
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   23e6e:	f7f4 fd6d 	bl	1894c <ll_timeslice_ticker_id_get>
	err = ticker_start(instance_index, /* Radio instance ticker */
   23e72:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   23e76:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   23e7a:	9700      	str	r7, [sp, #0]
   23e7c:	2400      	movs	r4, #0
   23e7e:	3501      	adds	r5, #1
   23e80:	4633      	mov	r3, r6
   23e82:	e9cd 4407 	strd	r4, r4, [sp, #28]
   23e86:	e9cd 8905 	strd	r8, r9, [sp, #20]
   23e8a:	e9cd 4403 	strd	r4, r4, [sp, #12]
   23e8e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   23e92:	b2ea      	uxtb	r2, r5
   23e94:	2101      	movs	r1, #1
   23e96:	f7f2 fbcb 	bl	16630 <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   23e9a:	f030 0302 	bics.w	r3, r0, #2
   23e9e:	d00d      	beq.n	23ebc <time_slot_delay+0x64>
		_ticker_sync_context.result = 0;
   23ea0:	4b08      	ldr	r3, [pc, #32]	; (23ec4 <time_slot_delay+0x6c>)
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   23ea2:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
		_ticker_sync_context.result = 0;
   23ea6:	60dc      	str	r4, [r3, #12]
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   23ea8:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   23eac:	9400      	str	r4, [sp, #0]
   23eae:	4623      	mov	r3, r4
   23eb0:	4621      	mov	r1, r4
   23eb2:	f7f2 fc47 	bl	16744 <ticker_stop>
   23eb6:	4804      	ldr	r0, [pc, #16]	; (23ec8 <time_slot_delay+0x70>)
   23eb8:	f001 ff5e 	bl	25d78 <z_impl_k_sem_give>
}
   23ebc:	b00d      	add	sp, #52	; 0x34
   23ebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23ec2:	bf00      	nop
   23ec4:	20002b3c 	.word	0x20002b3c
   23ec8:	20002b4c 	.word	0x20002b4c

00023ecc <time_slot_callback_prepare>:
	time_slot_delay(ticks_at_expire,
   23ecc:	9b01      	ldr	r3, [sp, #4]
   23ece:	4a02      	ldr	r2, [pc, #8]	; (23ed8 <time_slot_callback_prepare+0xc>)
   23ed0:	2131      	movs	r1, #49	; 0x31
   23ed2:	f7ff bfc1 	b.w	23e58 <time_slot_delay>
   23ed6:	bf00      	nop
   23ed8:	00023edd 	.word	0x00023edd

00023edc <time_slot_callback_abort>:
{
   23edc:	b570      	push	{r4, r5, r6, lr}
   23ede:	9d05      	ldr	r5, [sp, #20]
   23ee0:	4604      	mov	r4, r0
	ll_radio_state_abort();
   23ee2:	f7f4 fd39 	bl	18958 <ll_radio_state_abort>
	time_slot_delay(ticks_at_expire,
   23ee6:	462b      	mov	r3, r5
   23ee8:	4620      	mov	r0, r4
   23eea:	4a03      	ldr	r2, [pc, #12]	; (23ef8 <time_slot_callback_abort+0x1c>)
}
   23eec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	time_slot_delay(ticks_at_expire,
   23ef0:	2106      	movs	r1, #6
   23ef2:	f7ff bfb1 	b.w	23e58 <time_slot_delay>
   23ef6:	bf00      	nop
   23ef8:	00023e15 	.word	0x00023e15

00023efc <nrf_flash_sync_init>:
{
   23efc:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   23efe:	2201      	movs	r2, #1
   23f00:	2100      	movs	r1, #0
   23f02:	4802      	ldr	r0, [pc, #8]	; (23f0c <nrf_flash_sync_init+0x10>)
   23f04:	f00a fc28 	bl	2e758 <z_impl_k_sem_init>
}
   23f08:	2000      	movs	r0, #0
   23f0a:	bd08      	pop	{r3, pc}
   23f0c:	20002b4c 	.word	0x20002b4c

00023f10 <nrf_flash_sync_set_context>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
   23f10:	4b02      	ldr	r3, [pc, #8]	; (23f1c <nrf_flash_sync_set_context+0xc>)
   23f12:	f2a0 62a4 	subw	r2, r0, #1700	; 0x6a4
	_ticker_sync_context.slot = duration;
   23f16:	e9c3 2000 	strd	r2, r0, [r3]
}
   23f1a:	4770      	bx	lr
   23f1c:	20002b3c 	.word	0x20002b3c

00023f20 <nrf_flash_sync_get_timestamp_begin>:
{
   23f20:	b508      	push	{r3, lr}
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
   23f22:	f7f2 fc51 	bl	167c8 <ticker_ticks_now_get>
   23f26:	4b01      	ldr	r3, [pc, #4]	; (23f2c <nrf_flash_sync_get_timestamp_begin+0xc>)
   23f28:	6098      	str	r0, [r3, #8]
}
   23f2a:	bd08      	pop	{r3, pc}
   23f2c:	20002b3c 	.word	0x20002b3c

00023f30 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   23f30:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   23f32:	794b      	ldrb	r3, [r1, #5]
   23f34:	2b01      	cmp	r3, #1
   23f36:	d026      	beq.n	23f86 <uarte_nrfx_configure+0x56>
   23f38:	2b03      	cmp	r3, #3
   23f3a:	d121      	bne.n	23f80 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   23f3c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   23f3e:	798b      	ldrb	r3, [r1, #6]
   23f40:	2b03      	cmp	r3, #3
   23f42:	d11d      	bne.n	23f80 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   23f44:	79cc      	ldrb	r4, [r1, #7]
   23f46:	b10c      	cbz	r4, 23f4c <uarte_nrfx_configure+0x1c>
   23f48:	2c01      	cmp	r4, #1
   23f4a:	d119      	bne.n	23f80 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   23f4c:	790a      	ldrb	r2, [r1, #4]
   23f4e:	b112      	cbz	r2, 23f56 <uarte_nrfx_configure+0x26>
   23f50:	2a02      	cmp	r2, #2
   23f52:	d115      	bne.n	23f80 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   23f54:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   23f56:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   23f58:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   23f5a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   23f5e:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   23f60:	d065      	beq.n	2402e <uarte_nrfx_configure+0xfe>
   23f62:	d82d      	bhi.n	23fc0 <uarte_nrfx_configure+0x90>
   23f64:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   23f68:	d064      	beq.n	24034 <uarte_nrfx_configure+0x104>
   23f6a:	d816      	bhi.n	23f9a <uarte_nrfx_configure+0x6a>
   23f6c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   23f70:	d062      	beq.n	24038 <uarte_nrfx_configure+0x108>
   23f72:	d80a      	bhi.n	23f8a <uarte_nrfx_configure+0x5a>
   23f74:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   23f78:	d061      	beq.n	2403e <uarte_nrfx_configure+0x10e>
   23f7a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   23f7e:	d061      	beq.n	24044 <uarte_nrfx_configure+0x114>
   23f80:	f06f 0085 	mvn.w	r0, #133	; 0x85
   23f84:	e052      	b.n	2402c <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
   23f86:	2600      	movs	r6, #0
   23f88:	e7d9      	b.n	23f3e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   23f8a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   23f8e:	d05c      	beq.n	2404a <uarte_nrfx_configure+0x11a>
   23f90:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   23f94:	d1f4      	bne.n	23f80 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   23f96:	4b37      	ldr	r3, [pc, #220]	; (24074 <uarte_nrfx_configure+0x144>)
   23f98:	e03c      	b.n	24014 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   23f9a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   23f9e:	d057      	beq.n	24050 <uarte_nrfx_configure+0x120>
   23fa0:	d807      	bhi.n	23fb2 <uarte_nrfx_configure+0x82>
   23fa2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   23fa6:	d055      	beq.n	24054 <uarte_nrfx_configure+0x124>
   23fa8:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   23fac:	d1e8      	bne.n	23f80 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   23fae:	4b32      	ldr	r3, [pc, #200]	; (24078 <uarte_nrfx_configure+0x148>)
   23fb0:	e030      	b.n	24014 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   23fb2:	f647 2712 	movw	r7, #31250	; 0x7a12
   23fb6:	42bb      	cmp	r3, r7
   23fb8:	d1e2      	bne.n	23f80 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   23fba:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   23fbe:	e029      	b.n	24014 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   23fc0:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   23fc4:	d048      	beq.n	24058 <uarte_nrfx_configure+0x128>
   23fc6:	d813      	bhi.n	23ff0 <uarte_nrfx_configure+0xc0>
   23fc8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   23fcc:	d047      	beq.n	2405e <uarte_nrfx_configure+0x12e>
   23fce:	d809      	bhi.n	23fe4 <uarte_nrfx_configure+0xb4>
   23fd0:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   23fd4:	42bb      	cmp	r3, r7
   23fd6:	d044      	beq.n	24062 <uarte_nrfx_configure+0x132>
   23fd8:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   23fdc:	d1d0      	bne.n	23f80 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   23fde:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   23fe2:	e017      	b.n	24014 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   23fe4:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   23fe8:	d1ca      	bne.n	23f80 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   23fea:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   23fee:	e011      	b.n	24014 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   23ff0:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   23ff4:	d038      	beq.n	24068 <uarte_nrfx_configure+0x138>
   23ff6:	d808      	bhi.n	2400a <uarte_nrfx_configure+0xda>
   23ff8:	4f20      	ldr	r7, [pc, #128]	; (2407c <uarte_nrfx_configure+0x14c>)
   23ffa:	42bb      	cmp	r3, r7
   23ffc:	d037      	beq.n	2406e <uarte_nrfx_configure+0x13e>
   23ffe:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   24002:	d1bd      	bne.n	23f80 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   24004:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   24008:	e004      	b.n	24014 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2400a:	4f1d      	ldr	r7, [pc, #116]	; (24080 <uarte_nrfx_configure+0x150>)
   2400c:	42bb      	cmp	r3, r7
   2400e:	d1b7      	bne.n	23f80 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   24010:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   24014:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   24016:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   2401a:	1d03      	adds	r3, r0, #4
   2401c:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   2401e:	4334      	orrs	r4, r6
   24020:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   24022:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   24026:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   2402a:	2000      	movs	r0, #0
}
   2402c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   2402e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   24032:	e7ef      	b.n	24014 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   24034:	4b13      	ldr	r3, [pc, #76]	; (24084 <uarte_nrfx_configure+0x154>)
   24036:	e7ed      	b.n	24014 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   24038:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   2403c:	e7ea      	b.n	24014 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   2403e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   24042:	e7e7      	b.n	24014 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   24044:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   24048:	e7e4      	b.n	24014 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   2404a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   2404e:	e7e1      	b.n	24014 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   24050:	4b0d      	ldr	r3, [pc, #52]	; (24088 <uarte_nrfx_configure+0x158>)
   24052:	e7df      	b.n	24014 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   24054:	4b0d      	ldr	r3, [pc, #52]	; (2408c <uarte_nrfx_configure+0x15c>)
   24056:	e7dd      	b.n	24014 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   24058:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   2405c:	e7da      	b.n	24014 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   2405e:	4b0c      	ldr	r3, [pc, #48]	; (24090 <uarte_nrfx_configure+0x160>)
   24060:	e7d8      	b.n	24014 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   24062:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   24066:	e7d5      	b.n	24014 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   24068:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   2406c:	e7d2      	b.n	24014 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   2406e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   24072:	e7cf      	b.n	24014 <uarte_nrfx_configure+0xe4>
   24074:	0013b000 	.word	0x0013b000
   24078:	004ea000 	.word	0x004ea000
   2407c:	0003d090 	.word	0x0003d090
   24080:	000f4240 	.word	0x000f4240
   24084:	00275000 	.word	0x00275000
   24088:	0075c000 	.word	0x0075c000
   2408c:	003af000 	.word	0x003af000
   24090:	013a9000 	.word	0x013a9000

00024094 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   24094:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
   24098:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   2409c:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   2409e:	f8d8 4000 	ldr.w	r4, [r8]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   240a2:	f8d8 900c 	ldr.w	r9, [r8, #12]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   240a6:	2100      	movs	r1, #0
   240a8:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
   240ac:	4607      	mov	r7, r0
	data->dev = dev;
   240ae:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   240b0:	aa01      	add	r2, sp, #4
   240b2:	4648      	mov	r0, r9
   240b4:	f009 fbcf 	bl	2d856 <pinctrl_lookup_state>
	if (ret < 0) {
   240b8:	1e05      	subs	r5, r0, #0
   240ba:	db56      	blt.n	2416a <uarte_instance_init.constprop.0+0xd6>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   240bc:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   240be:	f8d9 2000 	ldr.w	r2, [r9]
   240c2:	7919      	ldrb	r1, [r3, #4]
   240c4:	6818      	ldr	r0, [r3, #0]
   240c6:	f009 fbe3 	bl	2d890 <pinctrl_configure_pins>
	if (err < 0) {
   240ca:	1e05      	subs	r5, r0, #0
   240cc:	db4d      	blt.n	2416a <uarte_instance_init.constprop.0+0xd6>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   240ce:	1d31      	adds	r1, r6, #4
   240d0:	4638      	mov	r0, r7
   240d2:	f7ff ff2d 	bl	23f30 <uarte_nrfx_configure>
	if (err) {
   240d6:	4605      	mov	r5, r0
   240d8:	2800      	cmp	r0, #0
   240da:	d146      	bne.n	2416a <uarte_instance_init.constprop.0+0xd6>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   240dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   240e0:	0799      	lsls	r1, r3, #30
   240e2:	d519      	bpl.n	24118 <uarte_instance_init.constprop.0+0x84>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   240e4:	f106 0012 	add.w	r0, r6, #18
   240e8:	f001 f9f2 	bl	254d0 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   240ec:	4b22      	ldr	r3, [pc, #136]	; (24178 <uarte_instance_init.constprop.0+0xe4>)
   240ee:	4298      	cmp	r0, r3
   240f0:	d13f      	bne.n	24172 <uarte_instance_init.constprop.0+0xde>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   240f2:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   240f4:	00c3      	lsls	r3, r0, #3
   240f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   240fa:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   240fe:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   24102:	f504 7190 	add.w	r1, r4, #288	; 0x120
    p_reg->CH[(uint32_t) channel].EEP = eep;
   24106:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2410a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   2410e:	4a1b      	ldr	r2, [pc, #108]	; (2417c <uarte_instance_init.constprop.0+0xe8>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   24110:	2301      	movs	r3, #1
   24112:	4083      	lsls	r3, r0
   24114:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   24118:	2308      	movs	r3, #8
   2411a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   2411e:	f898 3008 	ldrb.w	r3, [r8, #8]
   24122:	b95b      	cbnz	r3, 2413c <uarte_instance_init.constprop.0+0xa8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24124:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   24128:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   2412c:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   24130:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   24134:	2301      	movs	r3, #1
   24136:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2413a:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   2413c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   24140:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   24142:	bf5c      	itt	pl
   24144:	f44f 7280 	movpl.w	r2, #256	; 0x100
   24148:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2414c:	06db      	lsls	r3, r3, #27
   2414e:	bf44      	itt	mi
   24150:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   24154:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   24158:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
   2415a:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2415c:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   24160:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24164:	2301      	movs	r3, #1
   24166:	60a3      	str	r3, [r4, #8]
   24168:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   2416a:	4628      	mov	r0, r5
   2416c:	b003      	add	sp, #12
   2416e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   24172:	f06f 0504 	mvn.w	r5, #4
   24176:	e7f8      	b.n	2416a <uarte_instance_init.constprop.0+0xd6>
   24178:	0bad0000 	.word	0x0bad0000
   2417c:	4001f000 	.word	0x4001f000

00024180 <uarte_nrfx_poll_out>:
{
   24180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   24182:	6906      	ldr	r6, [r0, #16]
{
   24184:	4605      	mov	r5, r0
   24186:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   24188:	f00a f9f8 	bl	2e57c <k_is_in_isr>
   2418c:	b910      	cbnz	r0, 24194 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   2418e:	4b2c      	ldr	r3, [pc, #176]	; (24240 <uarte_nrfx_poll_out+0xc0>)
	if (isr_mode) {
   24190:	781b      	ldrb	r3, [r3, #0]
   24192:	b983      	cbnz	r3, 241b6 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   24194:	f04f 0320 	mov.w	r3, #32
   24198:	f3ef 8411 	mrs	r4, BASEPRI
   2419c:	f383 8812 	msr	BASEPRI_MAX, r3
   241a0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   241a4:	6868      	ldr	r0, [r5, #4]
   241a6:	f009 faee 	bl	2d786 <is_tx_ready.isra.0>
   241aa:	bb28      	cbnz	r0, 241f8 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   241ac:	f384 8811 	msr	BASEPRI, r4
   241b0:	f3bf 8f6f 	isb	sy
}
   241b4:	e7ee      	b.n	24194 <uarte_nrfx_poll_out+0x14>
{
   241b6:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   241b8:	6868      	ldr	r0, [r5, #4]
   241ba:	f009 fae4 	bl	2d786 <is_tx_ready.isra.0>
   241be:	b970      	cbnz	r0, 241de <uarte_nrfx_poll_out+0x5e>
   241c0:	2001      	movs	r0, #1
   241c2:	f009 fc1d 	bl	2da00 <nrfx_busy_wait>
   241c6:	3c01      	subs	r4, #1
   241c8:	d1f6      	bne.n	241b8 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
   241ca:	2100      	movs	r1, #0
   241cc:	2021      	movs	r0, #33	; 0x21
   241ce:	f002 fab9 	bl	26744 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   241d2:	e7f0      	b.n	241b6 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   241d4:	f384 8811 	msr	BASEPRI, r4
   241d8:	f3bf 8f6f 	isb	sy
}
   241dc:	e7f5      	b.n	241ca <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   241de:	f04f 0320 	mov.w	r3, #32
   241e2:	f3ef 8411 	mrs	r4, BASEPRI
   241e6:	f383 8812 	msr	BASEPRI_MAX, r3
   241ea:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   241ee:	6868      	ldr	r0, [r5, #4]
   241f0:	f009 fac9 	bl	2d786 <is_tx_ready.isra.0>
   241f4:	2800      	cmp	r0, #0
   241f6:	d0ed      	beq.n	241d4 <uarte_nrfx_poll_out+0x54>
	data->char_out = c;
   241f8:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
   241fc:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
   241fe:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.MAXCNT = length;
   24200:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   24202:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   24206:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2420a:	2200      	movs	r2, #0
   2420c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   24210:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   24214:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   24218:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2421c:	684a      	ldr	r2, [r1, #4]
   2421e:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   24220:	bf41      	itttt	mi
   24222:	2208      	movmi	r2, #8
   24224:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   24228:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   2422c:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24230:	2201      	movs	r2, #1
   24232:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   24234:	f384 8811 	msr	BASEPRI, r4
   24238:	f3bf 8f6f 	isb	sy
}
   2423c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2423e:	bf00      	nop
   24240:	2000319e 	.word	0x2000319e

00024244 <random_byte_get>:
	__asm__ volatile(
   24244:	f04f 0320 	mov.w	r3, #32
   24248:	f3ef 8211 	mrs	r2, BASEPRI
   2424c:	f383 8812 	msr	BASEPRI_MAX, r3
   24250:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   24254:	4b09      	ldr	r3, [pc, #36]	; (2427c <random_byte_get+0x38>)
   24256:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   2425a:	b161      	cbz	r1, 24276 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   2425c:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   2425e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   24262:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   24266:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   2426a:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   2426c:	f382 8811 	msr	BASEPRI, r2
   24270:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   24274:	4770      	bx	lr
	int retval = -EAGAIN;
   24276:	f06f 000a 	mvn.w	r0, #10
   2427a:	e7f7      	b.n	2426c <random_byte_get+0x28>
   2427c:	4000d000 	.word	0x4000d000

00024280 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   24280:	b5f0      	push	{r4, r5, r6, r7, lr}
   24282:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   24284:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   24286:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   24288:	f04f 0020 	mov.w	r0, #32
   2428c:	f3ef 8e11 	mrs	lr, BASEPRI
   24290:	f380 8812 	msr	BASEPRI_MAX, r0
   24294:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   24298:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   2429a:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   2429e:	1ba4      	subs	r4, r4, r6
   242a0:	403c      	ands	r4, r7
	if (available < len) {
   242a2:	42a2      	cmp	r2, r4
		len = available;
   242a4:	bf88      	it	hi
   242a6:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   242a8:	18b0      	adds	r0, r6, r2
   242aa:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   242ac:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   242ae:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   242b0:	f38e 8811 	msr	BASEPRI, lr
   242b4:	f3bf 8f6f 	isb	sy
   242b8:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   242ba:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   242bc:	4290      	cmp	r0, r2
   242be:	d119      	bne.n	242f4 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   242c0:	4566      	cmp	r6, ip
   242c2:	d10d      	bne.n	242e0 <rng_pool_get+0x60>
	__asm__ volatile(
   242c4:	f04f 0520 	mov.w	r5, #32
   242c8:	f3ef 8011 	mrs	r0, BASEPRI
   242cc:	f385 8812 	msr	BASEPRI_MAX, r5
   242d0:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   242d4:	781d      	ldrb	r5, [r3, #0]
   242d6:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   242d8:	f380 8811 	msr	BASEPRI, r0
   242dc:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   242e0:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   242e2:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   242e4:	b290      	uxth	r0, r2
	available = available - len;
   242e6:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   242e8:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   242ea:	bf22      	ittt	cs
   242ec:	4b06      	ldrcs	r3, [pc, #24]	; (24308 <rng_pool_get+0x88>)
   242ee:	2201      	movcs	r2, #1
   242f0:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   242f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   242f4:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   242f8:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   242fa:	f89e e005 	ldrb.w	lr, [lr, #5]
   242fe:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   24302:	403d      	ands	r5, r7
   24304:	e7da      	b.n	242bc <rng_pool_get+0x3c>
   24306:	bf00      	nop
   24308:	4000d000 	.word	0x4000d000

0002430c <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   2430c:	43db      	mvns	r3, r3
{
   2430e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   24312:	f013 0501 	ands.w	r5, r3, #1
{
   24316:	460e      	mov	r6, r1
   24318:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   2431a:	d004      	beq.n	24326 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   2431c:	4821      	ldr	r0, [pc, #132]	; (243a4 <entropy_nrf5_get_entropy_isr+0x98>)
   2431e:	f7ff ffaf 	bl	24280 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   24322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   24326:	b3a2      	cbz	r2, 24392 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   24328:	f04f 0320 	mov.w	r3, #32
   2432c:	f3ef 8811 	mrs	r8, BASEPRI
   24330:	f383 8812 	msr	BASEPRI_MAX, r3
   24334:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   24338:	200d      	movs	r0, #13
   2433a:	f7eb f8a1 	bl	f480 <arch_irq_is_enabled>
   2433e:	4607      	mov	r7, r0
		irq_disable(IRQN);
   24340:	200d      	movs	r0, #13
   24342:	f7eb f889 	bl	f458 <arch_irq_disable>
	__asm__ volatile(
   24346:	f388 8811 	msr	BASEPRI, r8
   2434a:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   2434e:	f8df 8058 	ldr.w	r8, [pc, #88]	; 243a8 <entropy_nrf5_get_entropy_isr+0x9c>
   24352:	f8df 9058 	ldr.w	r9, [pc, #88]	; 243ac <entropy_nrf5_get_entropy_isr+0xa0>
   24356:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   2435a:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   2435e:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   24362:	2301      	movs	r3, #1
   24364:	f8c8 3000 	str.w	r3, [r8]
   24368:	4625      	mov	r5, r4
   2436a:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   2436e:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   24372:	b183      	cbz	r3, 24396 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   24374:	f7ff ff66 	bl	24244 <random_byte_get>
			if (byte < 0) {
   24378:	1e03      	subs	r3, r0, #0
   2437a:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   2437e:	dbf6      	blt.n	2436e <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   24380:	3d01      	subs	r5, #1
   24382:	b2ad      	uxth	r5, r5
   24384:	5573      	strb	r3, [r6, r5]
		} while (len);
   24386:	2d00      	cmp	r5, #0
   24388:	d1f1      	bne.n	2436e <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   2438a:	b117      	cbz	r7, 24392 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   2438c:	200d      	movs	r0, #13
   2438e:	f7eb f853 	bl	f438 <arch_irq_enable>
	return cnt;
   24392:	4620      	mov	r0, r4
   24394:	e7c5      	b.n	24322 <entropy_nrf5_get_entropy_isr+0x16>
   24396:	f3bf 8f4f 	dsb	sy
				__WFE();
   2439a:	bf20      	wfe
				__SEV();
   2439c:	bf40      	sev
				__WFE();
   2439e:	bf20      	wfe
   243a0:	e7e5      	b.n	2436e <entropy_nrf5_get_entropy_isr+0x62>
   243a2:	bf00      	nop
   243a4:	20002b94 	.word	0x20002b94
   243a8:	4000d000 	.word	0x4000d000
   243ac:	e000e100 	.word	0xe000e100

000243b0 <entropy_nrf5_get_entropy>:
{
   243b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   243b4:	4f13      	ldr	r7, [pc, #76]	; (24404 <entropy_nrf5_get_entropy+0x54>)
   243b6:	460d      	mov	r5, r1
   243b8:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   243ba:	f107 0845 	add.w	r8, r7, #69	; 0x45
   243be:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   243c2:	b914      	cbnz	r4, 243ca <entropy_nrf5_get_entropy+0x1a>
}
   243c4:	4620      	mov	r0, r4
   243c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   243ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   243ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   243d2:	4638      	mov	r0, r7
   243d4:	f001 fcf6 	bl	25dc4 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   243d8:	4622      	mov	r2, r4
   243da:	4629      	mov	r1, r5
   243dc:	4640      	mov	r0, r8
   243de:	f7ff ff4f 	bl	24280 <rng_pool_get>
   243e2:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   243e4:	4638      	mov	r0, r7
   243e6:	f001 fcc7 	bl	25d78 <z_impl_k_sem_give>
		if (bytes == 0U) {
   243ea:	b93e      	cbnz	r6, 243fc <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   243ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   243f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   243f4:	4648      	mov	r0, r9
   243f6:	f001 fce5 	bl	25dc4 <z_impl_k_sem_take>
			continue;
   243fa:	e7e2      	b.n	243c2 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   243fc:	1ba4      	subs	r4, r4, r6
   243fe:	b2a4      	uxth	r4, r4
		buf += bytes;
   24400:	4435      	add	r5, r6
   24402:	e7de      	b.n	243c2 <entropy_nrf5_get_entropy+0x12>
   24404:	20002b64 	.word	0x20002b64

00024408 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   24408:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   2440a:	4c19      	ldr	r4, [pc, #100]	; (24470 <entropy_nrf5_init+0x68>)
   2440c:	2201      	movs	r2, #1
   2440e:	4611      	mov	r1, r2
   24410:	4620      	mov	r0, r4
   24412:	f00a f9a1 	bl	2e758 <z_impl_k_sem_init>
   24416:	2201      	movs	r2, #1
   24418:	2100      	movs	r1, #0
   2441a:	f104 0018 	add.w	r0, r4, #24
   2441e:	f00a f99b 	bl	2e758 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   24422:	f240 4307 	movw	r3, #1031	; 0x407
   24426:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   2442a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   2442e:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   24430:	230c      	movs	r3, #12
   24432:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   24436:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   24438:	4b0e      	ldr	r3, [pc, #56]	; (24474 <entropy_nrf5_init+0x6c>)
   2443a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   2443e:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   24442:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   24446:	f042 0201 	orr.w	r2, r2, #1
   2444a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   2444e:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   24450:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   24454:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   24458:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   2445c:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   2445e:	6019      	str	r1, [r3, #0]
   24460:	200d      	movs	r0, #13
   24462:	f7eb f81b 	bl	f49c <z_arm_irq_priority_set>
	irq_enable(IRQN);
   24466:	200d      	movs	r0, #13
   24468:	f7ea ffe6 	bl	f438 <arch_irq_enable>

	return 0;
}
   2446c:	4628      	mov	r0, r5
   2446e:	bd38      	pop	{r3, r4, r5, pc}
   24470:	20002b64 	.word	0x20002b64
   24474:	4000d000 	.word	0x4000d000

00024478 <isr>:
{
   24478:	b510      	push	{r4, lr}
	byte = random_byte_get();
   2447a:	f7ff fee3 	bl	24244 <random_byte_get>
	if (byte < 0) {
   2447e:	2800      	cmp	r0, #0
   24480:	db20      	blt.n	244c4 <isr+0x4c>
	uint8_t last  = rngp->last;
   24482:	4b17      	ldr	r3, [pc, #92]	; (244e0 <isr+0x68>)
   24484:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   24488:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   2448c:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   24490:	1a51      	subs	r1, r2, r1
   24492:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   24496:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   24498:	d10d      	bne.n	244b6 <isr+0x3e>
	uint8_t last  = rngp->last;
   2449a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   2449e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   244a2:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   244a6:	1a51      	subs	r1, r2, r1
   244a8:	ea34 0101 	bics.w	r1, r4, r1
   244ac:	d10b      	bne.n	244c6 <isr+0x4e>
   244ae:	4b0d      	ldr	r3, [pc, #52]	; (244e4 <isr+0x6c>)
   244b0:	2201      	movs	r2, #1
   244b2:	605a      	str	r2, [r3, #4]
}
   244b4:	e00e      	b.n	244d4 <isr+0x5c>
	rngp->buffer[last] = byte;
   244b6:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   244b8:	3201      	adds	r2, #1
   244ba:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   244bc:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   244c0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   244c4:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   244c6:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   244c8:	3201      	adds	r2, #1
   244ca:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   244cc:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   244d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   244d4:	4804      	ldr	r0, [pc, #16]	; (244e8 <isr+0x70>)
}
   244d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   244da:	f001 bc4d 	b.w	25d78 <z_impl_k_sem_give>
   244de:	bf00      	nop
   244e0:	20002b64 	.word	0x20002b64
   244e4:	4000d000 	.word	0x4000d000
   244e8:	20002b7c 	.word	0x20002b7c

000244ec <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   244ec:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   244ee:	2301      	movs	r3, #1
   244f0:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   244f2:	4a11      	ldr	r2, [pc, #68]	; (24538 <compare_int_lock+0x4c>)
   244f4:	f3bf 8f5b 	dmb	ish
   244f8:	43dc      	mvns	r4, r3
   244fa:	e852 1f00 	ldrex	r1, [r2]
   244fe:	ea01 0c04 	and.w	ip, r1, r4
   24502:	e842 ce00 	strex	lr, ip, [r2]
   24506:	f1be 0f00 	cmp.w	lr, #0
   2450a:	d1f6      	bne.n	244fa <compare_int_lock+0xe>
   2450c:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   24510:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   24514:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   24518:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2451c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   24520:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   24524:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   24528:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   2452c:	420b      	tst	r3, r1
}
   2452e:	bf14      	ite	ne
   24530:	2001      	movne	r0, #1
   24532:	2000      	moveq	r0, #0
   24534:	bd10      	pop	{r4, pc}
   24536:	bf00      	nop
   24538:	20002bbc 	.word	0x20002bbc

0002453c <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   2453c:	4919      	ldr	r1, [pc, #100]	; (245a4 <sys_clock_timeout_handler+0x68>)
{
   2453e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24540:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   24542:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   24546:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   24548:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   2454c:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   24550:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   24552:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   24556:	d222      	bcs.n	2459e <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   24558:	4b13      	ldr	r3, [pc, #76]	; (245a8 <sys_clock_timeout_handler+0x6c>)
   2455a:	681b      	ldr	r3, [r3, #0]
   2455c:	0a1a      	lsrs	r2, r3, #8
   2455e:	061b      	lsls	r3, r3, #24
   24560:	195e      	adds	r6, r3, r5
   24562:	4b12      	ldr	r3, [pc, #72]	; (245ac <sys_clock_timeout_handler+0x70>)
   24564:	f142 0700 	adc.w	r7, r2, #0
   24568:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   2456c:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   2456e:	f002 fa5b 	bl	26a28 <sys_clock_announce>
    return p_reg->CC[ch];
   24572:	00a3      	lsls	r3, r4, #2
   24574:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   24578:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   2457c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   24580:	42aa      	cmp	r2, r5
   24582:	d10b      	bne.n	2459c <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   24584:	b91e      	cbnz	r6, 2458e <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   24586:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   2458a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   2458e:	4b08      	ldr	r3, [pc, #32]	; (245b0 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   24590:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   24594:	fa00 f404 	lsl.w	r4, r0, r4
   24598:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   2459c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   2459e:	2600      	movs	r6, #0
   245a0:	e7e5      	b.n	2456e <sys_clock_timeout_handler+0x32>
   245a2:	bf00      	nop
   245a4:	200013f8 	.word	0x200013f8
   245a8:	20002bc0 	.word	0x20002bc0
   245ac:	200013e0 	.word	0x200013e0
   245b0:	40011000 	.word	0x40011000

000245b4 <compare_int_unlock>:
	if (key) {
   245b4:	b319      	cbz	r1, 245fe <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   245b6:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   245ba:	2301      	movs	r3, #1
   245bc:	4a10      	ldr	r2, [pc, #64]	; (24600 <compare_int_unlock+0x4c>)
   245be:	4083      	lsls	r3, r0
   245c0:	e852 1f00 	ldrex	r1, [r2]
   245c4:	4319      	orrs	r1, r3
   245c6:	e842 1c00 	strex	ip, r1, [r2]
   245ca:	f1bc 0f00 	cmp.w	ip, #0
   245ce:	d1f7      	bne.n	245c0 <compare_int_unlock+0xc>
   245d0:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   245d4:	4a0b      	ldr	r2, [pc, #44]	; (24604 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   245d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   245da:	4083      	lsls	r3, r0
   245dc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   245e0:	4b09      	ldr	r3, [pc, #36]	; (24608 <compare_int_unlock+0x54>)
   245e2:	f3bf 8f5b 	dmb	ish
   245e6:	681b      	ldr	r3, [r3, #0]
   245e8:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   245ec:	fa23 f000 	lsr.w	r0, r3, r0
   245f0:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   245f2:	bf42      	ittt	mi
   245f4:	4b05      	ldrmi	r3, [pc, #20]	; (2460c <compare_int_unlock+0x58>)
   245f6:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   245fa:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   245fe:	4770      	bx	lr
   24600:	20002bbc 	.word	0x20002bbc
   24604:	40011000 	.word	0x40011000
   24608:	20002bb8 	.word	0x20002bb8
   2460c:	e000e100 	.word	0xe000e100

00024610 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   24610:	4b0d      	ldr	r3, [pc, #52]	; (24648 <z_nrf_rtc_timer_read+0x38>)
   24612:	6818      	ldr	r0, [r3, #0]
   24614:	0a01      	lsrs	r1, r0, #8
   24616:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   24618:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   2461c:	4b0b      	ldr	r3, [pc, #44]	; (2464c <z_nrf_rtc_timer_read+0x3c>)
   2461e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   24622:	1818      	adds	r0, r3, r0
   24624:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   24628:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   2462c:	d20a      	bcs.n	24644 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   2462e:	4b08      	ldr	r3, [pc, #32]	; (24650 <z_nrf_rtc_timer_read+0x40>)
   24630:	e9d3 2300 	ldrd	r2, r3, [r3]
   24634:	4290      	cmp	r0, r2
   24636:	eb71 0303 	sbcs.w	r3, r1, r3
   2463a:	d203      	bcs.n	24644 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   2463c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   24640:	f141 0100 	adc.w	r1, r1, #0
}
   24644:	4770      	bx	lr
   24646:	bf00      	nop
   24648:	20002bc0 	.word	0x20002bc0
   2464c:	40011000 	.word	0x40011000
   24650:	200013e0 	.word	0x200013e0

00024654 <compare_set>:
{
   24654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24658:	b085      	sub	sp, #20
   2465a:	4616      	mov	r6, r2
   2465c:	4698      	mov	r8, r3
   2465e:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   24660:	f7ff ff44 	bl	244ec <compare_int_lock>
   24664:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   24666:	f7ff ffd3 	bl	24610 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   2466a:	42b0      	cmp	r0, r6
   2466c:	eb71 0308 	sbcs.w	r3, r1, r8
   24670:	d278      	bcs.n	24764 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   24672:	4b46      	ldr	r3, [pc, #280]	; (2478c <compare_set+0x138>)
   24674:	1a30      	subs	r0, r6, r0
   24676:	eb68 0101 	sbc.w	r1, r8, r1
   2467a:	4298      	cmp	r0, r3
   2467c:	f171 0300 	sbcs.w	r3, r1, #0
   24680:	f080 8081 	bcs.w	24786 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   24684:	4b42      	ldr	r3, [pc, #264]	; (24790 <compare_set+0x13c>)
   24686:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   2468a:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   2468e:	45d8      	cmp	r8, fp
   24690:	bf08      	it	eq
   24692:	4556      	cmpeq	r6, sl
   24694:	d051      	beq.n	2473a <compare_set+0xe6>
   24696:	ea4f 0985 	mov.w	r9, r5, lsl #2
   2469a:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2469e:	f105 0750 	add.w	r7, r5, #80	; 0x50
   246a2:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   246a6:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   246a8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   246ac:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   246b0:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   246b2:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   246b6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   246ba:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   246bc:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   246c0:	4b34      	ldr	r3, [pc, #208]	; (24794 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   246c2:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   246c6:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   246c8:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   246cc:	1a40      	subs	r0, r0, r1
   246ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   246d2:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   246d6:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   246d8:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   246dc:	d107      	bne.n	246ee <compare_set+0x9a>
   246de:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   246e2:	2013      	movs	r0, #19
   246e4:	f00a fa6c 	bl	2ebc0 <z_impl_k_busy_wait>
   246e8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   246ec:	4b29      	ldr	r3, [pc, #164]	; (24794 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   246ee:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   246f2:	eba4 000c 	sub.w	r0, r4, ip
   246f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   246fa:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   246fe:	bf88      	it	hi
   24700:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   24702:	2000      	movs	r0, #0
   24704:	6038      	str	r0, [r7, #0]
   24706:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   24708:	9801      	ldr	r0, [sp, #4]
   2470a:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   2470e:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   24712:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   24716:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   2471a:	4281      	cmp	r1, r0
   2471c:	d006      	beq.n	2472c <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
   2471e:	1a20      	subs	r0, r4, r0
   24720:	3802      	subs	r0, #2
   24722:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   24726:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2472a:	d819      	bhi.n	24760 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   2472c:	1aa4      	subs	r4, r4, r2
   2472e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   24732:	eb14 0a06 	adds.w	sl, r4, r6
   24736:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   2473a:	4915      	ldr	r1, [pc, #84]	; (24790 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   2473c:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   2473e:	012b      	lsls	r3, r5, #4
   24740:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   24744:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   24748:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   2474a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2474c:	6053      	str	r3, [r2, #4]
	return ret;
   2474e:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   24750:	4628      	mov	r0, r5
   24752:	9900      	ldr	r1, [sp, #0]
   24754:	f7ff ff2e 	bl	245b4 <compare_int_unlock>
}
   24758:	4620      	mov	r0, r4
   2475a:	b005      	add	sp, #20
   2475c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24760:	4620      	mov	r0, r4
   24762:	e7b1      	b.n	246c8 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   24764:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   24766:	4a0c      	ldr	r2, [pc, #48]	; (24798 <compare_set+0x144>)
   24768:	f3bf 8f5b 	dmb	ish
   2476c:	40ab      	lsls	r3, r5
   2476e:	e852 1f00 	ldrex	r1, [r2]
   24772:	4319      	orrs	r1, r3
   24774:	e842 1000 	strex	r0, r1, [r2]
   24778:	2800      	cmp	r0, #0
   2477a:	d1f8      	bne.n	2476e <compare_set+0x11a>
   2477c:	f3bf 8f5b 	dmb	ish
   24780:	46b2      	mov	sl, r6
   24782:	46c3      	mov	fp, r8
   24784:	e7d9      	b.n	2473a <compare_set+0xe6>
			return -EINVAL;
   24786:	f06f 0415 	mvn.w	r4, #21
   2478a:	e7e1      	b.n	24750 <compare_set+0xfc>
   2478c:	01000001 	.word	0x01000001
   24790:	200013e8 	.word	0x200013e8
   24794:	40011000 	.word	0x40011000
   24798:	20002bb8 	.word	0x20002bb8

0002479c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   2479c:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   2479e:	4b19      	ldr	r3, [pc, #100]	; (24804 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   247a0:	4d19      	ldr	r5, [pc, #100]	; (24808 <sys_clock_driver_init+0x6c>)
   247a2:	2400      	movs	r4, #0
   247a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   247a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   247ac:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   247b0:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   247b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   247b8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   247bc:	4b13      	ldr	r3, [pc, #76]	; (2480c <sys_clock_driver_init+0x70>)
   247be:	2602      	movs	r6, #2
   247c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   247c4:	2101      	movs	r1, #1
   247c6:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   247ca:	2011      	movs	r0, #17
   247cc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   247d0:	4622      	mov	r2, r4
   247d2:	f7ea fe63 	bl	f49c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   247d6:	2011      	movs	r0, #17
   247d8:	f7ea fe2e 	bl	f438 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   247dc:	4a0c      	ldr	r2, [pc, #48]	; (24810 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   247de:	2301      	movs	r3, #1
   247e0:	60ab      	str	r3, [r5, #8]
   247e2:	602b      	str	r3, [r5, #0]
   247e4:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   247e6:	4b0b      	ldr	r3, [pc, #44]	; (24814 <sys_clock_driver_init+0x78>)
   247e8:	4a0b      	ldr	r2, [pc, #44]	; (24818 <sys_clock_driver_init+0x7c>)
   247ea:	9300      	str	r3, [sp, #0]
   247ec:	9401      	str	r4, [sp, #4]
   247ee:	2300      	movs	r3, #0
   247f0:	4620      	mov	r0, r4
   247f2:	f7ff ff2f 	bl	24654 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   247f6:	4630      	mov	r0, r6
   247f8:	f7fe ffa8 	bl	2374c <z_nrf_clock_control_lf_on>

	return 0;
}
   247fc:	4620      	mov	r0, r4
   247fe:	b002      	add	sp, #8
   24800:	bd70      	pop	{r4, r5, r6, pc}
   24802:	bf00      	nop
   24804:	200013e8 	.word	0x200013e8
   24808:	40011000 	.word	0x40011000
   2480c:	e000e100 	.word	0xe000e100
   24810:	20002bbc 	.word	0x20002bbc
   24814:	0002453d 	.word	0x0002453d
   24818:	007fffff 	.word	0x007fffff

0002481c <rtc_nrf_isr>:
{
   2481c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   24820:	4c35      	ldr	r4, [pc, #212]	; (248f8 <rtc_nrf_isr+0xdc>)
   24822:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   24826:	079a      	lsls	r2, r3, #30
   24828:	d50b      	bpl.n	24842 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2482a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   2482e:	b143      	cbz	r3, 24842 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   24830:	4a32      	ldr	r2, [pc, #200]	; (248fc <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   24832:	2300      	movs	r3, #0
   24834:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   24838:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   2483c:	6813      	ldr	r3, [r2, #0]
   2483e:	3301      	adds	r3, #1
   24840:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   24842:	f04f 0320 	mov.w	r3, #32
   24846:	f3ef 8211 	mrs	r2, BASEPRI
   2484a:	f383 8812 	msr	BASEPRI_MAX, r3
   2484e:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   24852:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   24856:	03db      	lsls	r3, r3, #15
   24858:	d512      	bpl.n	24880 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2485a:	f3bf 8f5b 	dmb	ish
   2485e:	4b28      	ldr	r3, [pc, #160]	; (24900 <rtc_nrf_isr+0xe4>)
   24860:	e853 1f00 	ldrex	r1, [r3]
   24864:	f021 0001 	bic.w	r0, r1, #1
   24868:	e843 0600 	strex	r6, r0, [r3]
   2486c:	2e00      	cmp	r6, #0
   2486e:	d1f7      	bne.n	24860 <rtc_nrf_isr+0x44>
   24870:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   24874:	2900      	cmp	r1, #0
   24876:	d136      	bne.n	248e6 <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24878:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
   2487c:	2b00      	cmp	r3, #0
   2487e:	d132      	bne.n	248e6 <rtc_nrf_isr+0xca>
{
   24880:	2300      	movs	r3, #0
	__asm__ volatile(
   24882:	f382 8811 	msr	BASEPRI, r2
   24886:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   2488a:	b34b      	cbz	r3, 248e0 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
   2488c:	f7ff fec0 	bl	24610 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   24890:	f04f 0320 	mov.w	r3, #32
   24894:	f3ef 8c11 	mrs	ip, BASEPRI
   24898:	f383 8812 	msr	BASEPRI_MAX, r3
   2489c:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   248a0:	4b18      	ldr	r3, [pc, #96]	; (24904 <rtc_nrf_isr+0xe8>)
   248a2:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   248a6:	42b0      	cmp	r0, r6
   248a8:	eb71 0207 	sbcs.w	r2, r1, r7
   248ac:	f04f 0200 	mov.w	r2, #0
   248b0:	d320      	bcc.n	248f4 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   248b2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   248b6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   248ba:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   248be:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
   248c2:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
   248c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   248c8:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
   248cc:	f38c 8811 	msr	BASEPRI, ip
   248d0:	f3bf 8f6f 	isb	sy
		if (handler) {
   248d4:	b121      	cbz	r1, 248e0 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
   248d6:	9500      	str	r5, [sp, #0]
   248d8:	4632      	mov	r2, r6
   248da:	463b      	mov	r3, r7
   248dc:	2000      	movs	r0, #0
   248de:	4788      	blx	r1
}
   248e0:	b003      	add	sp, #12
   248e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   248e6:	2300      	movs	r3, #0
   248e8:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
   248ec:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   248f0:	2301      	movs	r3, #1
}
   248f2:	e7c6      	b.n	24882 <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   248f4:	4611      	mov	r1, r2
   248f6:	e7e9      	b.n	248cc <rtc_nrf_isr+0xb0>
   248f8:	40011000 	.word	0x40011000
   248fc:	20002bc0 	.word	0x20002bc0
   24900:	20002bb8 	.word	0x20002bb8
   24904:	200013e8 	.word	0x200013e8

00024908 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   24908:	1c43      	adds	r3, r0, #1
{
   2490a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   2490c:	d021      	beq.n	24952 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   2490e:	2801      	cmp	r0, #1
   24910:	dd21      	ble.n	24956 <sys_clock_set_timeout+0x4e>
   24912:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   24916:	da20      	bge.n	2495a <sys_clock_set_timeout+0x52>
   24918:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   2491a:	f7ff fe79 	bl	24610 <z_nrf_rtc_timer_read>
   2491e:	4b10      	ldr	r3, [pc, #64]	; (24960 <sys_clock_set_timeout+0x58>)
   24920:	e9d3 1300 	ldrd	r1, r3, [r3]
   24924:	1a40      	subs	r0, r0, r1
		ticks = 0;
   24926:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2492a:	bf28      	it	cs
   2492c:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   2492e:	3001      	adds	r0, #1
   24930:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   24932:	480c      	ldr	r0, [pc, #48]	; (24964 <sys_clock_set_timeout+0x5c>)
   24934:	4282      	cmp	r2, r0
   24936:	bf28      	it	cs
   24938:	4602      	movcs	r2, r0
   2493a:	1852      	adds	r2, r2, r1
   2493c:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   24940:	4909      	ldr	r1, [pc, #36]	; (24968 <sys_clock_set_timeout+0x60>)
   24942:	9001      	str	r0, [sp, #4]
   24944:	9100      	str	r1, [sp, #0]
   24946:	f143 0300 	adc.w	r3, r3, #0
   2494a:	f7ff fe83 	bl	24654 <compare_set>
}
   2494e:	b002      	add	sp, #8
   24950:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   24952:	4804      	ldr	r0, [pc, #16]	; (24964 <sys_clock_set_timeout+0x5c>)
   24954:	e7e0      	b.n	24918 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   24956:	2400      	movs	r4, #0
   24958:	e7df      	b.n	2491a <sys_clock_set_timeout+0x12>
   2495a:	4c02      	ldr	r4, [pc, #8]	; (24964 <sys_clock_set_timeout+0x5c>)
   2495c:	e7dd      	b.n	2491a <sys_clock_set_timeout+0x12>
   2495e:	bf00      	nop
   24960:	200013f8 	.word	0x200013f8
   24964:	007fffff 	.word	0x007fffff
   24968:	0002453d 	.word	0x0002453d

0002496c <sys_clock_elapsed>:
{
   2496c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   2496e:	f7ff fe4f 	bl	24610 <z_nrf_rtc_timer_read>
   24972:	4b02      	ldr	r3, [pc, #8]	; (2497c <sys_clock_elapsed+0x10>)
   24974:	681b      	ldr	r3, [r3, #0]
}
   24976:	1ac0      	subs	r0, r0, r3
   24978:	bd08      	pop	{r3, pc}
   2497a:	bf00      	nop
   2497c:	200013f8 	.word	0x200013f8

00024980 <nrf_gpio_pin_clear>:
    *p_pin = pin_number & 0x1F;
   24980:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   24984:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   24986:	2801      	cmp	r0, #1
   24988:	4b04      	ldr	r3, [pc, #16]	; (2499c <nrf_gpio_pin_clear+0x1c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2498a:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
   2498e:	bf18      	it	ne
   24990:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   24994:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
   24996:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
   2499a:	4770      	bx	lr
   2499c:	50000300 	.word	0x50000300

000249a0 <nrf_pin_configure>:
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
   249a0:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   249a4:	2b00      	cmp	r3, #0
{
   249a6:	b530      	push	{r4, r5, lr}
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   249a8:	bf07      	ittee	eq
   249aa:	4614      	moveq	r4, r2
   249ac:	460d      	moveq	r5, r1
   249ae:	2401      	movne	r4, #1
   249b0:	2500      	movne	r5, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
   249b2:	f3c0 1281 	ubfx	r2, r0, #6, #2
    *p_pin = pin_number & 0x1F;
   249b6:	f000 011f 	and.w	r1, r0, #31
        case 1: return NRF_P1;
   249ba:	f010 0f20 	tst.w	r0, #32
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   249be:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   249c2:	ea40 0282 	orr.w	r2, r0, r2, lsl #2
        case 1: return NRF_P1;
   249c6:	4b06      	ldr	r3, [pc, #24]	; (249e0 <nrf_pin_configure+0x40>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   249c8:	ea42 0205 	orr.w	r2, r2, r5
        case 1: return NRF_P1;
   249cc:	bf08      	it	eq
   249ce:	f04f 43a0 	moveq.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   249d2:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   249d6:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   249da:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
   249de:	bd30      	pop	{r4, r5, pc}
   249e0:	50000300 	.word	0x50000300

000249e4 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
   249e4:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   249e8:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   249ea:	2801      	cmp	r0, #1
   249ec:	4b04      	ldr	r3, [pc, #16]	; (24a00 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   249ee:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
   249f2:	bf18      	it	ne
   249f4:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   249f8:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   249fa:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
   249fe:	4770      	bx	lr
   24a00:	50000300 	.word	0x50000300

00024a04 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   24a04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   24a08:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   24a0c:	2a08      	cmp	r2, #8
   24a0e:	d106      	bne.n	24a1e <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   24a10:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   24a14:	2b05      	cmp	r3, #5
   24a16:	d802      	bhi.n	24a1e <nrf52_errata_103+0x1a>
   24a18:	4a02      	ldr	r2, [pc, #8]	; (24a24 <nrf52_errata_103+0x20>)
   24a1a:	5cd0      	ldrb	r0, [r2, r3]
   24a1c:	4770      	bx	lr
        return false;
   24a1e:	2000      	movs	r0, #0
}
   24a20:	4770      	bx	lr
   24a22:	bf00      	nop
   24a24:	00030d91 	.word	0x00030d91

00024a28 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   24a28:	4a02      	ldr	r2, [pc, #8]	; (24a34 <nvmc_wait+0xc>)
   24a2a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   24a2e:	2b00      	cmp	r3, #0
   24a30:	d0fb      	beq.n	24a2a <nvmc_wait+0x2>
}
   24a32:	4770      	bx	lr
   24a34:	4001e000 	.word	0x4001e000

00024a38 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   24a38:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   24a3a:	f008 ffd7 	bl	2d9ec <nrf52_errata_136>
   24a3e:	b140      	cbz	r0, 24a52 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   24a40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   24a44:	2200      	movs	r2, #0
   24a46:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   24a4a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   24a4e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   24a52:	f008 ffcb 	bl	2d9ec <nrf52_errata_136>
   24a56:	2800      	cmp	r0, #0
   24a58:	d046      	beq.n	24ae8 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   24a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   24a5e:	4b60      	ldr	r3, [pc, #384]	; (24be0 <SystemInit+0x1a8>)
   24a60:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   24a64:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   24a68:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   24a6c:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   24a70:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   24a74:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   24a78:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   24a7c:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   24a80:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   24a84:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   24a88:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   24a8c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   24a90:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   24a94:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   24a98:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   24a9c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   24aa0:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   24aa4:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   24aa8:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   24aac:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   24ab0:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   24ab4:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   24ab8:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   24abc:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   24ac0:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   24ac4:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   24ac8:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   24acc:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   24ad0:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   24ad4:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   24ad8:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   24adc:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   24ae0:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   24ae4:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   24ae8:	f7ff ff8c 	bl	24a04 <nrf52_errata_103>
   24aec:	b118      	cbz	r0, 24af6 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   24aee:	4b3d      	ldr	r3, [pc, #244]	; (24be4 <SystemInit+0x1ac>)
   24af0:	4a3d      	ldr	r2, [pc, #244]	; (24be8 <SystemInit+0x1b0>)
   24af2:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   24af6:	f7ff ff85 	bl	24a04 <nrf52_errata_103>
   24afa:	b118      	cbz	r0, 24b04 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   24afc:	4b3b      	ldr	r3, [pc, #236]	; (24bec <SystemInit+0x1b4>)
   24afe:	22fb      	movs	r2, #251	; 0xfb
   24b00:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   24b04:	f7ff ff7e 	bl	24a04 <nrf52_errata_103>
   24b08:	b170      	cbz	r0, 24b28 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   24b0a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   24b0e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24b12:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   24b16:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   24b1a:	f022 020f 	bic.w	r2, r2, #15
   24b1e:	f003 030f 	and.w	r3, r3, #15
   24b22:	4313      	orrs	r3, r2
   24b24:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   24b28:	f7ff ff6c 	bl	24a04 <nrf52_errata_103>
   24b2c:	b120      	cbz	r0, 24b38 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   24b2e:	4b30      	ldr	r3, [pc, #192]	; (24bf0 <SystemInit+0x1b8>)
   24b30:	f44f 7200 	mov.w	r2, #512	; 0x200
   24b34:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   24b38:	f008 ff58 	bl	2d9ec <nrf52_errata_136>
   24b3c:	b148      	cbz	r0, 24b52 <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   24b3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   24b42:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   24b46:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   24b48:	bf44      	itt	mi
   24b4a:	f06f 0201 	mvnmi.w	r2, #1
   24b4e:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   24b52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   24b56:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   24b5a:	2a08      	cmp	r2, #8
   24b5c:	d10e      	bne.n	24b7c <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   24b5e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   24b62:	2b05      	cmp	r3, #5
   24b64:	d802      	bhi.n	24b6c <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   24b66:	4a23      	ldr	r2, [pc, #140]	; (24bf4 <SystemInit+0x1bc>)
   24b68:	5cd3      	ldrb	r3, [r2, r3]
   24b6a:	b13b      	cbz	r3, 24b7c <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   24b6c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   24b70:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   24b74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   24b78:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   24b7c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   24b80:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   24b84:	2a00      	cmp	r2, #0
   24b86:	db03      	blt.n	24b90 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   24b88:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   24b8c:	2b00      	cmp	r3, #0
   24b8e:	da22      	bge.n	24bd6 <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   24b90:	4919      	ldr	r1, [pc, #100]	; (24bf8 <SystemInit+0x1c0>)
   24b92:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   24b94:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   24b98:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   24b9c:	2412      	movs	r4, #18
    nvmc_wait();
   24b9e:	f7ff ff43 	bl	24a28 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   24ba2:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   24ba6:	f7ff ff3f 	bl	24a28 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   24baa:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   24bae:	f7ff ff3b 	bl	24a28 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   24bb2:	2300      	movs	r3, #0
   24bb4:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   24bb8:	f7ff ff36 	bl	24a28 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   24bbc:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   24bc0:	490e      	ldr	r1, [pc, #56]	; (24bfc <SystemInit+0x1c4>)
   24bc2:	4b0f      	ldr	r3, [pc, #60]	; (24c00 <SystemInit+0x1c8>)
   24bc4:	68ca      	ldr	r2, [r1, #12]
   24bc6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   24bca:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   24bcc:	60cb      	str	r3, [r1, #12]
   24bce:	f3bf 8f4f 	dsb	sy
    __NOP();
   24bd2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   24bd4:	e7fd      	b.n	24bd2 <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   24bd6:	4b0b      	ldr	r3, [pc, #44]	; (24c04 <SystemInit+0x1cc>)
   24bd8:	4a0b      	ldr	r2, [pc, #44]	; (24c08 <SystemInit+0x1d0>)
   24bda:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   24bdc:	bd10      	pop	{r4, pc}
   24bde:	bf00      	nop
   24be0:	4000c000 	.word	0x4000c000
   24be4:	40005000 	.word	0x40005000
   24be8:	00038148 	.word	0x00038148
   24bec:	4000f000 	.word	0x4000f000
   24bf0:	40029000 	.word	0x40029000
   24bf4:	00030d8b 	.word	0x00030d8b
   24bf8:	4001e000 	.word	0x4001e000
   24bfc:	e000ed00 	.word	0xe000ed00
   24c00:	05fa0004 	.word	0x05fa0004
   24c04:	20000768 	.word	0x20000768
   24c08:	03d09000 	.word	0x03d09000

00024c0c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   24c0c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   24c0e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   24c10:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   24c12:	fab2 f382 	clz	r3, r2
   24c16:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   24c1a:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   24c1c:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   24c1e:	d014      	beq.n	24c4a <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   24c20:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   24c24:	fa05 f303 	lsl.w	r3, r5, r3
   24c28:	ea22 0303 	bic.w	r3, r2, r3
   24c2c:	e850 6f00 	ldrex	r6, [r0]
   24c30:	4296      	cmp	r6, r2
   24c32:	d104      	bne.n	24c3e <nrfx_flag32_alloc+0x32>
   24c34:	e840 3c00 	strex	ip, r3, [r0]
   24c38:	f1bc 0f00 	cmp.w	ip, #0
   24c3c:	d1f6      	bne.n	24c2c <nrfx_flag32_alloc+0x20>
   24c3e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   24c42:	d1e5      	bne.n	24c10 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   24c44:	4802      	ldr	r0, [pc, #8]	; (24c50 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   24c46:	700c      	strb	r4, [r1, #0]
}
   24c48:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   24c4a:	4802      	ldr	r0, [pc, #8]	; (24c54 <nrfx_flag32_alloc+0x48>)
   24c4c:	e7fc      	b.n	24c48 <nrfx_flag32_alloc+0x3c>
   24c4e:	bf00      	nop
   24c50:	0bad0000 	.word	0x0bad0000
   24c54:	0bad0002 	.word	0x0bad0002

00024c58 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   24c58:	6803      	ldr	r3, [r0, #0]
   24c5a:	40cb      	lsrs	r3, r1
   24c5c:	07db      	lsls	r3, r3, #31
{
   24c5e:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   24c60:	d415      	bmi.n	24c8e <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   24c62:	2301      	movs	r3, #1
   24c64:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   24c68:	6803      	ldr	r3, [r0, #0]
   24c6a:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   24c6e:	ea41 0203 	orr.w	r2, r1, r3
   24c72:	e850 4f00 	ldrex	r4, [r0]
   24c76:	429c      	cmp	r4, r3
   24c78:	d104      	bne.n	24c84 <nrfx_flag32_free+0x2c>
   24c7a:	e840 2c00 	strex	ip, r2, [r0]
   24c7e:	f1bc 0f00 	cmp.w	ip, #0
   24c82:	d1f6      	bne.n	24c72 <nrfx_flag32_free+0x1a>
   24c84:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   24c88:	d1ee      	bne.n	24c68 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   24c8a:	4802      	ldr	r0, [pc, #8]	; (24c94 <nrfx_flag32_free+0x3c>)
}
   24c8c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   24c8e:	4802      	ldr	r0, [pc, #8]	; (24c98 <nrfx_flag32_free+0x40>)
   24c90:	e7fc      	b.n	24c8c <nrfx_flag32_free+0x34>
   24c92:	bf00      	nop
   24c94:	0bad0000 	.word	0x0bad0000
   24c98:	0bad0004 	.word	0x0bad0004

00024c9c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   24c9c:	4b04      	ldr	r3, [pc, #16]	; (24cb0 <nrfx_clock_init+0x14>)
   24c9e:	791a      	ldrb	r2, [r3, #4]
   24ca0:	b922      	cbnz	r2, 24cac <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   24ca2:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   24ca4:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   24ca6:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   24ca8:	4802      	ldr	r0, [pc, #8]	; (24cb4 <nrfx_clock_init+0x18>)
   24caa:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   24cac:	4802      	ldr	r0, [pc, #8]	; (24cb8 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   24cae:	4770      	bx	lr
   24cb0:	20002bc4 	.word	0x20002bc4
   24cb4:	0bad0000 	.word	0x0bad0000
   24cb8:	0bad000c 	.word	0x0bad000c

00024cbc <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   24cbc:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   24cbe:	b110      	cbz	r0, 24cc6 <nrfx_clock_stop+0xa>
   24cc0:	2801      	cmp	r0, #1
   24cc2:	d017      	beq.n	24cf4 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   24cc4:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   24cc6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   24cca:	2302      	movs	r3, #2
   24ccc:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24cd0:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   24cd4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24cd8:	2301      	movs	r3, #1
   24cda:	60e3      	str	r3, [r4, #12]
   24cdc:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   24ce0:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   24ce4:	03db      	lsls	r3, r3, #15
   24ce6:	d5ed      	bpl.n	24cc4 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   24ce8:	2001      	movs	r0, #1
   24cea:	f008 fe89 	bl	2da00 <nrfx_busy_wait>
   24cee:	3d01      	subs	r5, #1
   24cf0:	d1f6      	bne.n	24ce0 <nrfx_clock_stop+0x24>
   24cf2:	e7e7      	b.n	24cc4 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   24cf4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24cf8:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   24cfa:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24cfe:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   24d02:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24d06:	6060      	str	r0, [r4, #4]
   24d08:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   24d0c:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   24d10:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   24d14:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   24d16:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   24d1a:	d505      	bpl.n	24d28 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   24d1c:	b123      	cbz	r3, 24d28 <nrfx_clock_stop+0x6c>
   24d1e:	2001      	movs	r0, #1
   24d20:	f008 fe6e 	bl	2da00 <nrfx_busy_wait>
   24d24:	3d01      	subs	r5, #1
   24d26:	d1f1      	bne.n	24d0c <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   24d28:	4b01      	ldr	r3, [pc, #4]	; (24d30 <nrfx_clock_stop+0x74>)
   24d2a:	2200      	movs	r2, #0
   24d2c:	715a      	strb	r2, [r3, #5]
   24d2e:	e7c9      	b.n	24cc4 <nrfx_clock_stop+0x8>
   24d30:	20002bc4 	.word	0x20002bc4

00024d34 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   24d34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   24d38:	b510      	push	{r4, lr}
   24d3a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   24d3e:	b16a      	cbz	r2, 24d5c <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24d40:	2200      	movs	r2, #0
   24d42:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   24d46:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   24d4a:	2201      	movs	r2, #1
   24d4c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   24d50:	4b11      	ldr	r3, [pc, #68]	; (24d98 <nrfx_power_clock_irq_handler+0x64>)
   24d52:	7958      	ldrb	r0, [r3, #5]
   24d54:	b910      	cbnz	r0, 24d5c <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   24d56:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   24d58:	681b      	ldr	r3, [r3, #0]
   24d5a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   24d5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   24d60:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   24d64:	b172      	cbz	r2, 24d84 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24d66:	2200      	movs	r2, #0
   24d68:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   24d6c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   24d70:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   24d74:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   24d78:	0792      	lsls	r2, r2, #30
   24d7a:	d104      	bne.n	24d86 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   24d7c:	2201      	movs	r2, #1
   24d7e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24d82:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   24d84:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   24d86:	2202      	movs	r2, #2
   24d88:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   24d8c:	4b02      	ldr	r3, [pc, #8]	; (24d98 <nrfx_power_clock_irq_handler+0x64>)
}
   24d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   24d92:	681b      	ldr	r3, [r3, #0]
   24d94:	2001      	movs	r0, #1
   24d96:	4718      	bx	r3
   24d98:	20002bc4 	.word	0x20002bc4

00024d9c <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   24d9c:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   24d9e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   24da2:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   24da4:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   24da6:	6002      	str	r2, [r0, #0]
}
   24da8:	4802      	ldr	r0, [pc, #8]	; (24db4 <nrf_gpio_pin_port_decode+0x18>)
   24daa:	bf18      	it	ne
   24dac:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   24db0:	4770      	bx	lr
   24db2:	bf00      	nop
   24db4:	50000300 	.word	0x50000300

00024db8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   24db8:	4b03      	ldr	r3, [pc, #12]	; (24dc8 <pin_in_use_by_te+0x10>)
   24dba:	3008      	adds	r0, #8
   24dbc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   24dc0:	f3c0 1040 	ubfx	r0, r0, #5, #1
   24dc4:	4770      	bx	lr
   24dc6:	bf00      	nop
   24dc8:	2000076c 	.word	0x2000076c

00024dcc <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   24dcc:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   24dce:	f100 0308 	add.w	r3, r0, #8
   24dd2:	4c0c      	ldr	r4, [pc, #48]	; (24e04 <call_handler+0x38>)
   24dd4:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   24dd8:	05da      	lsls	r2, r3, #23
{
   24dda:	4605      	mov	r5, r0
   24ddc:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   24dde:	d507      	bpl.n	24df0 <call_handler+0x24>
   24de0:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   24de4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   24de8:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   24dec:	6852      	ldr	r2, [r2, #4]
   24dee:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   24df0:	68a3      	ldr	r3, [r4, #8]
   24df2:	b12b      	cbz	r3, 24e00 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   24df4:	68e2      	ldr	r2, [r4, #12]
   24df6:	4631      	mov	r1, r6
   24df8:	4628      	mov	r0, r5
    }
}
   24dfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   24dfe:	4718      	bx	r3
}
   24e00:	bd70      	pop	{r4, r5, r6, pc}
   24e02:	bf00      	nop
   24e04:	2000076c 	.word	0x2000076c

00024e08 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   24e08:	4a12      	ldr	r2, [pc, #72]	; (24e54 <release_handler+0x4c>)
   24e0a:	3008      	adds	r0, #8
{
   24e0c:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   24e0e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   24e12:	05d9      	lsls	r1, r3, #23
   24e14:	d51b      	bpl.n	24e4e <release_handler+0x46>
   24e16:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   24e1a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   24e1e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   24e22:	f102 0410 	add.w	r4, r2, #16
   24e26:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   24e28:	f834 3b02 	ldrh.w	r3, [r4], #2
   24e2c:	f413 7f80 	tst.w	r3, #256	; 0x100
   24e30:	d003      	beq.n	24e3a <release_handler+0x32>
   24e32:	f3c3 2343 	ubfx	r3, r3, #9, #4
   24e36:	4299      	cmp	r1, r3
   24e38:	d009      	beq.n	24e4e <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   24e3a:	3001      	adds	r0, #1
   24e3c:	2830      	cmp	r0, #48	; 0x30
   24e3e:	d1f3      	bne.n	24e28 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   24e40:	2300      	movs	r3, #0
   24e42:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   24e46:	4804      	ldr	r0, [pc, #16]	; (24e58 <release_handler+0x50>)
}
   24e48:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   24e4a:	f7ff bf05 	b.w	24c58 <nrfx_flag32_free>
}
   24e4e:	bc10      	pop	{r4}
   24e50:	4770      	bx	lr
   24e52:	bf00      	nop
   24e54:	2000076c 	.word	0x2000076c
   24e58:	200007e0 	.word	0x200007e0

00024e5c <pin_handler_trigger_uninit>:
{
   24e5c:	b538      	push	{r3, r4, r5, lr}
   24e5e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   24e60:	f7ff ffaa 	bl	24db8 <pin_in_use_by_te>
   24e64:	4c09      	ldr	r4, [pc, #36]	; (24e8c <pin_handler_trigger_uninit+0x30>)
   24e66:	f102 0508 	add.w	r5, r2, #8
   24e6a:	b140      	cbz	r0, 24e7e <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   24e6c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   24e70:	4907      	ldr	r1, [pc, #28]	; (24e90 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   24e72:	0b5b      	lsrs	r3, r3, #13
   24e74:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   24e78:	2000      	movs	r0, #0
   24e7a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   24e7e:	4610      	mov	r0, r2
   24e80:	f7ff ffc2 	bl	24e08 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   24e84:	2300      	movs	r3, #0
   24e86:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   24e8a:	bd38      	pop	{r3, r4, r5, pc}
   24e8c:	2000076c 	.word	0x2000076c
   24e90:	40006000 	.word	0x40006000

00024e94 <nrfx_gpiote_input_configure>:
{
   24e94:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   24e98:	4604      	mov	r4, r0
   24e9a:	4617      	mov	r7, r2
   24e9c:	461d      	mov	r5, r3
    if (p_input_config)
   24e9e:	b321      	cbz	r1, 24eea <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   24ea0:	4e4e      	ldr	r6, [pc, #312]	; (24fdc <nrfx_gpiote_input_configure+0x148>)
   24ea2:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   24ea6:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   24eaa:	079b      	lsls	r3, r3, #30
   24eac:	d506      	bpl.n	24ebc <nrfx_gpiote_input_configure+0x28>
   24eae:	f7ff ff83 	bl	24db8 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
   24eb2:	b118      	cbz	r0, 24ebc <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
   24eb4:	484a      	ldr	r0, [pc, #296]	; (24fe0 <nrfx_gpiote_input_configure+0x14c>)
}
   24eb6:	b004      	add	sp, #16
   24eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   24ebc:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   24ebe:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   24ec2:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   24ec6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   24eca:	f10d 020f 	add.w	r2, sp, #15
   24ece:	460b      	mov	r3, r1
   24ed0:	4620      	mov	r0, r4
   24ed2:	f10d 010e 	add.w	r1, sp, #14
   24ed6:	f008 fdcb 	bl	2da70 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   24eda:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   24ede:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   24ee2:	f043 0301 	orr.w	r3, r3, #1
   24ee6:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
   24eea:	b197      	cbz	r7, 24f12 <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   24eec:	4b3b      	ldr	r3, [pc, #236]	; (24fdc <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   24eee:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   24ef0:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   24ef2:	f104 0008 	add.w	r0, r4, #8
   24ef6:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   24efa:	078f      	lsls	r7, r1, #30
   24efc:	d50c      	bpl.n	24f18 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
   24efe:	2a00      	cmp	r2, #0
   24f00:	d1d8      	bne.n	24eb4 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   24f02:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   24f06:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   24f0a:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   24f0e:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   24f12:	bbcd      	cbnz	r5, 24f88 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
   24f14:	4833      	ldr	r0, [pc, #204]	; (24fe4 <nrfx_gpiote_input_configure+0x150>)
   24f16:	e7ce      	b.n	24eb6 <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   24f18:	f021 0120 	bic.w	r1, r1, #32
   24f1c:	04c9      	lsls	r1, r1, #19
   24f1e:	0cc9      	lsrs	r1, r1, #19
   24f20:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   24f24:	2a00      	cmp	r2, #0
   24f26:	d0ec      	beq.n	24f02 <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
   24f28:	2e03      	cmp	r6, #3
   24f2a:	d8c3      	bhi.n	24eb4 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
   24f2c:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   24f2e:	b92e      	cbnz	r6, 24f3c <nrfx_gpiote_input_configure+0xa8>
   24f30:	4a2d      	ldr	r2, [pc, #180]	; (24fe8 <nrfx_gpiote_input_configure+0x154>)
   24f32:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   24f36:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   24f3a:	e7e2      	b.n	24f02 <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   24f3c:	00ba      	lsls	r2, r7, #2
   24f3e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   24f42:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   24f46:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   24f4a:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   24f4e:	f02c 0c03 	bic.w	ip, ip, #3
   24f52:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   24f56:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   24f5a:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   24f5e:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   24f62:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   24f66:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   24f6a:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   24f6e:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
   24f72:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   24f76:	ea4c 0c0e 	orr.w	ip, ip, lr
   24f7a:	f041 0120 	orr.w	r1, r1, #32
   24f7e:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   24f82:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   24f86:	e7bc      	b.n	24f02 <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   24f88:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   24f8c:	4620      	mov	r0, r4
   24f8e:	f7ff ff3b 	bl	24e08 <release_handler>
    if (!handler)
   24f92:	2e00      	cmp	r6, #0
   24f94:	d0be      	beq.n	24f14 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   24f96:	4d11      	ldr	r5, [pc, #68]	; (24fdc <nrfx_gpiote_input_configure+0x148>)
   24f98:	682b      	ldr	r3, [r5, #0]
   24f9a:	429e      	cmp	r6, r3
   24f9c:	d104      	bne.n	24fa8 <nrfx_gpiote_input_configure+0x114>
   24f9e:	686b      	ldr	r3, [r5, #4]
   24fa0:	429f      	cmp	r7, r3
   24fa2:	d101      	bne.n	24fa8 <nrfx_gpiote_input_configure+0x114>
   24fa4:	2200      	movs	r2, #0
   24fa6:	e00a      	b.n	24fbe <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   24fa8:	4810      	ldr	r0, [pc, #64]	; (24fec <nrfx_gpiote_input_configure+0x158>)
   24faa:	f10d 010f 	add.w	r1, sp, #15
   24fae:	f7ff fe2d 	bl	24c0c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   24fb2:	4b0c      	ldr	r3, [pc, #48]	; (24fe4 <nrfx_gpiote_input_configure+0x150>)
   24fb4:	4298      	cmp	r0, r3
   24fb6:	f47f af7e 	bne.w	24eb6 <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
   24fba:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   24fbe:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   24fc2:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   24fc6:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   24fc8:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   24fca:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   24fce:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   24fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   24fd6:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   24fda:	e79b      	b.n	24f14 <nrfx_gpiote_input_configure+0x80>
   24fdc:	2000076c 	.word	0x2000076c
   24fe0:	0bad0004 	.word	0x0bad0004
   24fe4:	0bad0000 	.word	0x0bad0000
   24fe8:	40006000 	.word	0x40006000
   24fec:	200007e0 	.word	0x200007e0

00024ff0 <nrfx_gpiote_output_configure>:
{
   24ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
   24ff2:	4604      	mov	r4, r0
   24ff4:	b085      	sub	sp, #20
   24ff6:	4615      	mov	r5, r2
    if (p_config)
   24ff8:	b319      	cbz	r1, 25042 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   24ffa:	4e33      	ldr	r6, [pc, #204]	; (250c8 <nrfx_gpiote_output_configure+0xd8>)
   24ffc:	f100 0708 	add.w	r7, r0, #8
   25000:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   25004:	0793      	lsls	r3, r2, #30
   25006:	d403      	bmi.n	25010 <nrfx_gpiote_output_configure+0x20>
   25008:	f7ff fed6 	bl	24db8 <pin_in_use_by_te>
   2500c:	2800      	cmp	r0, #0
   2500e:	d158      	bne.n	250c2 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   25010:	f012 0f1c 	tst.w	r2, #28
   25014:	d002      	beq.n	2501c <nrfx_gpiote_output_configure+0x2c>
   25016:	784b      	ldrb	r3, [r1, #1]
   25018:	2b01      	cmp	r3, #1
   2501a:	d052      	beq.n	250c2 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   2501c:	2301      	movs	r3, #1
   2501e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   25022:	2300      	movs	r3, #0
   25024:	e9cd 1300 	strd	r1, r3, [sp]
   25028:	1c4a      	adds	r2, r1, #1
   2502a:	1c8b      	adds	r3, r1, #2
   2502c:	4620      	mov	r0, r4
   2502e:	f10d 010f 	add.w	r1, sp, #15
   25032:	f008 fd1d 	bl	2da70 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   25036:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   2503a:	f043 0303 	orr.w	r3, r3, #3
   2503e:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   25042:	b915      	cbnz	r5, 2504a <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   25044:	4821      	ldr	r0, [pc, #132]	; (250cc <nrfx_gpiote_output_configure+0xdc>)
}
   25046:	b005      	add	sp, #20
   25048:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2504a:	4e1f      	ldr	r6, [pc, #124]	; (250c8 <nrfx_gpiote_output_configure+0xd8>)
   2504c:	f104 0708 	add.w	r7, r4, #8
   25050:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   25054:	0783      	lsls	r3, r0, #30
   25056:	d534      	bpl.n	250c2 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   25058:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   2505c:	4661      	mov	r1, ip
   2505e:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   25060:	f020 0020 	bic.w	r0, r0, #32
   25064:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   25068:	04c0      	lsls	r0, r0, #19
   2506a:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   2506e:	0cc0      	lsrs	r0, r0, #19
   25070:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   25074:	2300      	movs	r3, #0
   25076:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   2507a:	786a      	ldrb	r2, [r5, #1]
   2507c:	2a00      	cmp	r2, #0
   2507e:	d0e1      	beq.n	25044 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   25080:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   25084:	78ad      	ldrb	r5, [r5, #2]
   25086:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   2508a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   2508e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   25092:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   25096:	0223      	lsls	r3, r4, #8
   25098:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   2509c:	0412      	lsls	r2, r2, #16
   2509e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   250a2:	ea43 030e 	orr.w	r3, r3, lr
   250a6:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   250a8:	052a      	lsls	r2, r5, #20
   250aa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   250ae:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   250b2:	4313      	orrs	r3, r2
   250b4:	f040 0020 	orr.w	r0, r0, #32
   250b8:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   250bc:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   250c0:	e7c0      	b.n	25044 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
   250c2:	4803      	ldr	r0, [pc, #12]	; (250d0 <nrfx_gpiote_output_configure+0xe0>)
   250c4:	e7bf      	b.n	25046 <nrfx_gpiote_output_configure+0x56>
   250c6:	bf00      	nop
   250c8:	2000076c 	.word	0x2000076c
   250cc:	0bad0000 	.word	0x0bad0000
   250d0:	0bad0004 	.word	0x0bad0004

000250d4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   250d4:	4b01      	ldr	r3, [pc, #4]	; (250dc <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   250d6:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   250da:	4770      	bx	lr
   250dc:	2000076c 	.word	0x2000076c

000250e0 <nrfx_gpiote_channel_get>:
{
   250e0:	b508      	push	{r3, lr}
   250e2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   250e4:	f7ff fe68 	bl	24db8 <pin_in_use_by_te>
   250e8:	b138      	cbz	r0, 250fa <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   250ea:	4b05      	ldr	r3, [pc, #20]	; (25100 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   250ec:	4805      	ldr	r0, [pc, #20]	; (25104 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   250ee:	3208      	adds	r2, #8
   250f0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   250f4:	0b5b      	lsrs	r3, r3, #13
   250f6:	700b      	strb	r3, [r1, #0]
}
   250f8:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   250fa:	4803      	ldr	r0, [pc, #12]	; (25108 <nrfx_gpiote_channel_get+0x28>)
   250fc:	e7fc      	b.n	250f8 <nrfx_gpiote_channel_get+0x18>
   250fe:	bf00      	nop
   25100:	2000076c 	.word	0x2000076c
   25104:	0bad0000 	.word	0x0bad0000
   25108:	0bad0004 	.word	0x0bad0004

0002510c <nrfx_gpiote_init>:
{
   2510c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   2510e:	4c0f      	ldr	r4, [pc, #60]	; (2514c <nrfx_gpiote_init+0x40>)
   25110:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   25114:	b9bd      	cbnz	r5, 25146 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   25116:	2260      	movs	r2, #96	; 0x60
   25118:	4629      	mov	r1, r5
   2511a:	f104 0010 	add.w	r0, r4, #16
   2511e:	f004 f91d 	bl	2935c <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   25122:	2006      	movs	r0, #6
   25124:	f7ea f988 	bl	f438 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   25128:	4b09      	ldr	r3, [pc, #36]	; (25150 <nrfx_gpiote_init+0x44>)
    return err_code;
   2512a:	480a      	ldr	r0, [pc, #40]	; (25154 <nrfx_gpiote_init+0x48>)
   2512c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   25130:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   25134:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   25138:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   2513c:	2301      	movs	r3, #1
   2513e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   25142:	6763      	str	r3, [r4, #116]	; 0x74
}
   25144:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   25146:	4804      	ldr	r0, [pc, #16]	; (25158 <nrfx_gpiote_init+0x4c>)
   25148:	e7fc      	b.n	25144 <nrfx_gpiote_init+0x38>
   2514a:	bf00      	nop
   2514c:	2000076c 	.word	0x2000076c
   25150:	40006000 	.word	0x40006000
   25154:	0bad0000 	.word	0x0bad0000
   25158:	0bad0005 	.word	0x0bad0005

0002515c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   2515c:	4b03      	ldr	r3, [pc, #12]	; (2516c <nrfx_gpiote_is_init+0x10>)
   2515e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   25162:	3800      	subs	r0, #0
   25164:	bf18      	it	ne
   25166:	2001      	movne	r0, #1
   25168:	4770      	bx	lr
   2516a:	bf00      	nop
   2516c:	2000076c 	.word	0x2000076c

00025170 <nrfx_gpiote_channel_free>:
{
   25170:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   25172:	4801      	ldr	r0, [pc, #4]	; (25178 <nrfx_gpiote_channel_free+0x8>)
   25174:	f7ff bd70 	b.w	24c58 <nrfx_flag32_free>
   25178:	200007dc 	.word	0x200007dc

0002517c <nrfx_gpiote_channel_alloc>:
{
   2517c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   2517e:	4801      	ldr	r0, [pc, #4]	; (25184 <nrfx_gpiote_channel_alloc+0x8>)
   25180:	f7ff bd44 	b.w	24c0c <nrfx_flag32_alloc>
   25184:	200007dc 	.word	0x200007dc

00025188 <nrfx_gpiote_trigger_enable>:
{
   25188:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2518a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2518c:	f7ff fe14 	bl	24db8 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   25190:	f104 0208 	add.w	r2, r4, #8
   25194:	4b1e      	ldr	r3, [pc, #120]	; (25210 <nrfx_gpiote_trigger_enable+0x88>)
   25196:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2519a:	b1e8      	cbz	r0, 251d8 <nrfx_gpiote_trigger_enable+0x50>
   2519c:	f013 0502 	ands.w	r5, r3, #2
   251a0:	d11a      	bne.n	251d8 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   251a2:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   251a4:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   251a6:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   251aa:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   251ae:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   251b2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   251b6:	6005      	str	r5, [r0, #0]
   251b8:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   251ba:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   251be:	f040 0001 	orr.w	r0, r0, #1
   251c2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   251c6:	b129      	cbz	r1, 251d4 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   251c8:	2201      	movs	r2, #1
   251ca:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   251ce:	4a11      	ldr	r2, [pc, #68]	; (25214 <nrfx_gpiote_trigger_enable+0x8c>)
   251d0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   251d4:	b003      	add	sp, #12
   251d6:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   251d8:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   251dc:	2b04      	cmp	r3, #4
   251de:	d012      	beq.n	25206 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   251e0:	2b05      	cmp	r3, #5
   251e2:	d012      	beq.n	2520a <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   251e4:	a801      	add	r0, sp, #4
   251e6:	9401      	str	r4, [sp, #4]
   251e8:	f7ff fdd8 	bl	24d9c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   251ec:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   251ee:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   251f2:	40d9      	lsrs	r1, r3
   251f4:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   251f8:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   251fa:	4620      	mov	r0, r4
}
   251fc:	b003      	add	sp, #12
   251fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   25202:	f008 bc7c 	b.w	2dafe <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   25206:	2103      	movs	r1, #3
   25208:	e7f7      	b.n	251fa <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   2520a:	2102      	movs	r1, #2
   2520c:	e7f5      	b.n	251fa <nrfx_gpiote_trigger_enable+0x72>
   2520e:	bf00      	nop
   25210:	2000076c 	.word	0x2000076c
   25214:	40006000 	.word	0x40006000

00025218 <nrfx_gpiote_trigger_disable>:
{
   25218:	b508      	push	{r3, lr}
   2521a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2521c:	f7ff fdcc 	bl	24db8 <pin_in_use_by_te>
   25220:	b1c0      	cbz	r0, 25254 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   25222:	f102 0108 	add.w	r1, r2, #8
   25226:	4b0e      	ldr	r3, [pc, #56]	; (25260 <nrfx_gpiote_trigger_disable+0x48>)
   25228:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2522c:	0799      	lsls	r1, r3, #30
   2522e:	d411      	bmi.n	25254 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   25230:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   25232:	2201      	movs	r2, #1
   25234:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   25236:	009b      	lsls	r3, r3, #2
   25238:	490a      	ldr	r1, [pc, #40]	; (25264 <nrfx_gpiote_trigger_disable+0x4c>)
   2523a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2523e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   25242:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   25246:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   2524a:	f022 0203 	bic.w	r2, r2, #3
   2524e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   25252:	bd08      	pop	{r3, pc}
   25254:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   25258:	2100      	movs	r1, #0
   2525a:	4610      	mov	r0, r2
   2525c:	f008 bc4f 	b.w	2dafe <nrf_gpio_cfg_sense_set>
   25260:	2000076c 	.word	0x2000076c
   25264:	40006000 	.word	0x40006000

00025268 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   25268:	4b0e      	ldr	r3, [pc, #56]	; (252a4 <nrfx_gpiote_pin_uninit+0x3c>)
   2526a:	f100 0208 	add.w	r2, r0, #8
{
   2526e:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   25270:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   25274:	07db      	lsls	r3, r3, #31
{
   25276:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   25278:	d511      	bpl.n	2529e <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   2527a:	f7ff ffcd 	bl	25218 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   2527e:	4620      	mov	r0, r4
   25280:	f7ff fdec 	bl	24e5c <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   25284:	a801      	add	r0, sp, #4
   25286:	9401      	str	r4, [sp, #4]
   25288:	f7ff fd88 	bl	24d9c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2528c:	9b01      	ldr	r3, [sp, #4]
   2528e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   25292:	2202      	movs	r2, #2
   25294:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   25298:	4803      	ldr	r0, [pc, #12]	; (252a8 <nrfx_gpiote_pin_uninit+0x40>)
}
   2529a:	b002      	add	sp, #8
   2529c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   2529e:	4803      	ldr	r0, [pc, #12]	; (252ac <nrfx_gpiote_pin_uninit+0x44>)
   252a0:	e7fb      	b.n	2529a <nrfx_gpiote_pin_uninit+0x32>
   252a2:	bf00      	nop
   252a4:	2000076c 	.word	0x2000076c
   252a8:	0bad0000 	.word	0x0bad0000
   252ac:	0bad0004 	.word	0x0bad0004

000252b0 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   252b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   252b4:	4b64      	ldr	r3, [pc, #400]	; (25448 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   252b6:	4865      	ldr	r0, [pc, #404]	; (2544c <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   252b8:	4965      	ldr	r1, [pc, #404]	; (25450 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
   252ba:	2600      	movs	r6, #0
{
   252bc:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   252be:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   252c0:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   252c2:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   252c4:	b135      	cbz	r5, 252d4 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   252c6:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   252ca:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   252cc:	bf1e      	ittt	ne
   252ce:	601c      	strne	r4, [r3, #0]
   252d0:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   252d2:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   252d4:	3304      	adds	r3, #4
   252d6:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   252d8:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   252dc:	d1f1      	bne.n	252c2 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   252de:	f8df 816c 	ldr.w	r8, [pc, #364]	; 2544c <nrfx_gpiote_irq_handler+0x19c>
   252e2:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   252e6:	2b00      	cmp	r3, #0
   252e8:	f000 8091 	beq.w	2540e <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   252ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   252f0:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   252f4:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   252f6:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   252fa:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   252fe:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   25300:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   25304:	2700      	movs	r7, #0
            while (latch[i])
   25306:	f10d 0910 	add.w	r9, sp, #16
   2530a:	017b      	lsls	r3, r7, #5
   2530c:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   2530e:	f04f 0a01 	mov.w	sl, #1
   25312:	e049      	b.n	253a8 <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
   25314:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   25316:	4a4f      	ldr	r2, [pc, #316]	; (25454 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   25318:	fa94 f4a4 	rbit	r4, r4
   2531c:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   25320:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   25322:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   25326:	08e0      	lsrs	r0, r4, #3
   25328:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   2532c:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
   2532e:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   25332:	fa0a fc02 	lsl.w	ip, sl, r2
   25336:	f819 2000 	ldrb.w	r2, [r9, r0]
   2533a:	ea22 020c 	bic.w	r2, r2, ip
   2533e:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   25342:	a803      	add	r0, sp, #12
   25344:	f3c3 0582 	ubfx	r5, r3, #2, #3
   25348:	0899      	lsrs	r1, r3, #2
   2534a:	f7ff fd27 	bl	24d9c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   2534e:	9a03      	ldr	r2, [sp, #12]
   25350:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
   25354:	074b      	lsls	r3, r1, #29
   25356:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2535a:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   2535c:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   25360:	d529      	bpl.n	253b6 <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
   25362:	4620      	mov	r0, r4
   25364:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   25366:	b2d5      	uxtb	r5, r2
   25368:	f7ff fd30 	bl	24dcc <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2536c:	a803      	add	r0, sp, #12
   2536e:	9403      	str	r4, [sp, #12]
   25370:	f7ff fd14 	bl	24d9c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   25374:	9b03      	ldr	r3, [sp, #12]
   25376:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2537a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   2537e:	f3c3 4301 	ubfx	r3, r3, #16, #2
   25382:	429d      	cmp	r5, r3
   25384:	d107      	bne.n	25396 <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   25386:	2100      	movs	r1, #0
   25388:	4620      	mov	r0, r4
   2538a:	f008 fbb8 	bl	2dafe <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   2538e:	4629      	mov	r1, r5
   25390:	4620      	mov	r0, r4
   25392:	f008 fbb4 	bl	2dafe <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   25396:	a803      	add	r0, sp, #12
   25398:	9403      	str	r4, [sp, #12]
   2539a:	f7ff fcff 	bl	24d9c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   2539e:	9b03      	ldr	r3, [sp, #12]
   253a0:	fa0a f303 	lsl.w	r3, sl, r3
   253a4:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   253a8:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
   253ac:	2c00      	cmp	r4, #0
   253ae:	d1b1      	bne.n	25314 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   253b0:	b9cf      	cbnz	r7, 253e6 <nrfx_gpiote_irq_handler+0x136>
   253b2:	2701      	movs	r7, #1
   253b4:	e7a9      	b.n	2530a <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   253b6:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   253b8:	bf0c      	ite	eq
   253ba:	2103      	moveq	r1, #3
   253bc:	2102      	movne	r1, #2
   253be:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   253c0:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
   253c2:	f008 fb9c 	bl	2dafe <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   253c6:	2d03      	cmp	r5, #3
   253c8:	d004      	beq.n	253d4 <nrfx_gpiote_irq_handler+0x124>
   253ca:	9a01      	ldr	r2, [sp, #4]
   253cc:	2a02      	cmp	r2, #2
   253ce:	d106      	bne.n	253de <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   253d0:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   253d2:	d1e0      	bne.n	25396 <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   253d4:	4659      	mov	r1, fp
   253d6:	4620      	mov	r0, r4
   253d8:	f7ff fcf8 	bl	24dcc <call_handler>
   253dc:	e7db      	b.n	25396 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   253de:	2a03      	cmp	r2, #3
   253e0:	d1d9      	bne.n	25396 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   253e2:	2d02      	cmp	r5, #2
   253e4:	e7f5      	b.n	253d2 <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   253e6:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   253ea:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   253ee:	491a      	ldr	r1, [pc, #104]	; (25458 <nrfx_gpiote_irq_handler+0x1a8>)
   253f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   253f4:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   253f8:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   253fa:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   253fe:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
   25402:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   25404:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   25408:	4313      	orrs	r3, r2
   2540a:	f47f af7b 	bne.w	25304 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   2540e:	2401      	movs	r4, #1
    while (mask)
   25410:	b916      	cbnz	r6, 25418 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   25412:	b007      	add	sp, #28
   25414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   25418:	fa96 f3a6 	rbit	r3, r6
   2541c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   25420:	fa04 f203 	lsl.w	r2, r4, r3
   25424:	009b      	lsls	r3, r3, #2
   25426:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2542a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   2542e:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   25432:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   25436:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   2543a:	f3c0 2005 	ubfx	r0, r0, #8, #6
   2543e:	f3c1 4101 	ubfx	r1, r1, #16, #2
   25442:	f7ff fcc3 	bl	24dcc <call_handler>
   25446:	e7e3      	b.n	25410 <nrfx_gpiote_irq_handler+0x160>
   25448:	40006100 	.word	0x40006100
   2544c:	40006000 	.word	0x40006000
   25450:	40006120 	.word	0x40006120
   25454:	2000076c 	.word	0x2000076c
   25458:	50000300 	.word	0x50000300

0002545c <nvmc_word_write>:
   2545c:	4a04      	ldr	r2, [pc, #16]	; (25470 <nvmc_word_write+0x14>)
   2545e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   25462:	07db      	lsls	r3, r3, #31
   25464:	d5fb      	bpl.n	2545e <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   25466:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   25468:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   2546c:	4770      	bx	lr
   2546e:	bf00      	nop
   25470:	4001e000 	.word	0x4001e000

00025474 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   25474:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25478:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   2547a:	fbb0 f3f2 	udiv	r3, r0, r2
   2547e:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   25482:	b973      	cbnz	r3, 254a2 <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   25484:	4b08      	ldr	r3, [pc, #32]	; (254a8 <nrfx_nvmc_page_erase+0x34>)
   25486:	2202      	movs	r2, #2
   25488:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   2548c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   25490:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   25494:	07d2      	lsls	r2, r2, #31
   25496:	d5fb      	bpl.n	25490 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   25498:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   2549a:	4804      	ldr	r0, [pc, #16]	; (254ac <nrfx_nvmc_page_erase+0x38>)
   2549c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   254a0:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   254a2:	4803      	ldr	r0, [pc, #12]	; (254b0 <nrfx_nvmc_page_erase+0x3c>)
}
   254a4:	4770      	bx	lr
   254a6:	bf00      	nop
   254a8:	4001e000 	.word	0x4001e000
   254ac:	0bad0000 	.word	0x0bad0000
   254b0:	0bad000a 	.word	0x0bad000a

000254b4 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   254b4:	b510      	push	{r4, lr}
   254b6:	4c05      	ldr	r4, [pc, #20]	; (254cc <nrfx_nvmc_word_write+0x18>)
   254b8:	2301      	movs	r3, #1
   254ba:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   254be:	f7ff ffcd 	bl	2545c <nvmc_word_write>
   254c2:	2300      	movs	r3, #0
   254c4:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   254c8:	bd10      	pop	{r4, pc}
   254ca:	bf00      	nop
   254cc:	4001e000 	.word	0x4001e000

000254d0 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   254d0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   254d2:	4801      	ldr	r0, [pc, #4]	; (254d8 <nrfx_ppi_channel_alloc+0x8>)
   254d4:	f7ff bb9a 	b.w	24c0c <nrfx_flag32_alloc>
   254d8:	200007e8 	.word	0x200007e8

000254dc <boot_write_magic>:
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
   254dc:	b530      	push	{r4, r5, lr}
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
   254de:	6881      	ldr	r1, [r0, #8]
{
   254e0:	b085      	sub	sp, #20
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
   254e2:	3910      	subs	r1, #16
     * returned by boot_magic_off() is the start of magic which is not the
     * start of the flash write boundary and thus writes to the magic will fail.
     * To account for this change, write to magic is first padded with 0xFF
     * before writing to the trailer.
     */
    pad_off = ALIGN_DOWN(off, BOOT_MAX_ALIGN);
   254e4:	f021 0407 	bic.w	r4, r1, #7
{
   254e8:	4605      	mov	r5, r0

    erased_val = flash_area_erased_val(fap);
   254ea:	f002 fb61 	bl	27bb0 <flash_area_erased_val>

    memset(&magic[0], erased_val, sizeof(magic));
   254ee:	2210      	movs	r2, #16
    erased_val = flash_area_erased_val(fap);
   254f0:	4601      	mov	r1, r0
    memset(&magic[0], erased_val, sizeof(magic));
   254f2:	4668      	mov	r0, sp
   254f4:	f003 ff32 	bl	2935c <memset>
    memcpy(&magic[BOOT_MAGIC_ALIGN_SIZE - BOOT_MAGIC_SZ], BOOT_IMG_MAGIC, BOOT_MAGIC_SZ);
   254f8:	4907      	ldr	r1, [pc, #28]	; (25518 <boot_write_magic+0x3c>)
   254fa:	2210      	movs	r2, #16
   254fc:	4668      	mov	r0, sp
   254fe:	f003 ff22 	bl	29346 <memcpy>

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, pad_off, &magic[0], BOOT_MAGIC_ALIGN_SIZE);
   25502:	2310      	movs	r3, #16
   25504:	466a      	mov	r2, sp
   25506:	4621      	mov	r1, r4
   25508:	4628      	mov	r0, r5
   2550a:	f002 fb12 	bl	27b32 <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
   2550e:	3800      	subs	r0, #0
   25510:	bf18      	it	ne
   25512:	2001      	movne	r0, #1
   25514:	b005      	add	sp, #20
   25516:	bd30      	pop	{r4, r5, pc}
   25518:	000307ac 	.word	0x000307ac

0002551c <boot_read_swap_state>:
{
   2551c:	b530      	push	{r4, r5, lr}
   2551e:	460c      	mov	r4, r1
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
   25520:	6881      	ldr	r1, [r0, #8]
{
   25522:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
   25524:	2310      	movs	r3, #16
   25526:	aa02      	add	r2, sp, #8
   25528:	3910      	subs	r1, #16
{
   2552a:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
   2552c:	f002 fae5 	bl	27afa <flash_area_read>
    if (rc < 0) {
   25530:	2800      	cmp	r0, #0
   25532:	da02      	bge.n	2553a <boot_read_swap_state+0x1e>
        return BOOT_EFLASH;
   25534:	2001      	movs	r0, #1
}
   25536:	b007      	add	sp, #28
   25538:	bd30      	pop	{r4, r5, pc}
    if (buffer == NULL || len == 0) {
   2553a:	2210      	movs	r2, #16
   2553c:	a902      	add	r1, sp, #8
   2553e:	4628      	mov	r0, r5
   25540:	f008 fafa 	bl	2db38 <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
   25544:	b390      	cbz	r0, 255ac <boot_read_swap_state+0x90>
        state->magic = BOOT_MAGIC_UNSET;
   25546:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
   25548:	7023      	strb	r3, [r4, #0]
    off = boot_swap_info_off(fap);
   2554a:	4628      	mov	r0, r5
   2554c:	f008 fb05 	bl	2db5a <boot_swap_info_off>
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
   25550:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
   25552:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
   25554:	f10d 0207 	add.w	r2, sp, #7
   25558:	4628      	mov	r0, r5
   2555a:	f002 face 	bl	27afa <flash_area_read>
    if (rc < 0) {
   2555e:	2800      	cmp	r0, #0
   25560:	dbe8      	blt.n	25534 <boot_read_swap_state+0x18>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
   25562:	f89d 3007 	ldrb.w	r3, [sp, #7]
   25566:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
   2556a:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
   2556c:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
   2556e:	7123      	strb	r3, [r4, #4]
    if (buffer == NULL || len == 0) {
   25570:	2201      	movs	r2, #1
   25572:	f10d 0107 	add.w	r1, sp, #7
   25576:	4628      	mov	r0, r5
   25578:	f008 fade 	bl	2db38 <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
   2557c:	b910      	cbnz	r0, 25584 <boot_read_swap_state+0x68>
   2557e:	7863      	ldrb	r3, [r4, #1]
   25580:	2b04      	cmp	r3, #4
   25582:	d903      	bls.n	2558c <boot_read_swap_state+0x70>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
   25584:	2301      	movs	r3, #1
   25586:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
   25588:	2300      	movs	r3, #0
   2558a:	7123      	strb	r3, [r4, #4]
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   2558c:	68aa      	ldr	r2, [r5, #8]
   2558e:	3a18      	subs	r2, #24
   25590:	f022 0207 	bic.w	r2, r2, #7
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
   25594:	3a08      	subs	r2, #8
   25596:	1ca1      	adds	r1, r4, #2
   25598:	4628      	mov	r0, r5
   2559a:	f008 faf8 	bl	2db8e <boot_read_flag>
    if (rc) {
   2559e:	2800      	cmp	r0, #0
   255a0:	d1c8      	bne.n	25534 <boot_read_swap_state+0x18>
    return boot_read_image_ok(fap, &state->image_ok);
   255a2:	1ce1      	adds	r1, r4, #3
   255a4:	4628      	mov	r0, r5
   255a6:	f008 fb4c 	bl	2dc42 <boot_read_image_ok>
   255aa:	e7c4      	b.n	25536 <boot_read_swap_state+0x1a>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
   255ac:	4904      	ldr	r1, [pc, #16]	; (255c0 <boot_read_swap_state+0xa4>)
   255ae:	2210      	movs	r2, #16
   255b0:	a802      	add	r0, sp, #8
   255b2:	f003 feb7 	bl	29324 <memcmp>
        return BOOT_MAGIC_GOOD;
   255b6:	2800      	cmp	r0, #0
   255b8:	bf14      	ite	ne
   255ba:	2302      	movne	r3, #2
   255bc:	2301      	moveq	r3, #1
   255be:	e7c3      	b.n	25548 <boot_read_swap_state+0x2c>
   255c0:	000307ac 	.word	0x000307ac

000255c4 <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
   255c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   255c8:	b085      	sub	sp, #20

    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
                        BOOT_HOOK_REGULAR, image_index, &primary_slot);
    if (rc == BOOT_HOOK_REGULAR)
    {
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
   255ca:	4669      	mov	r1, sp
   255cc:	2001      	movs	r0, #1
   255ce:	f008 fb3e 	bl	2dc4e <boot_read_swap_state_by_id>
                                        &primary_slot);
    }
    if (rc) {
   255d2:	2800      	cmp	r0, #0
   255d4:	d136      	bne.n	25644 <boot_swap_type_multi+0x80>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
   255d6:	a902      	add	r1, sp, #8
   255d8:	2002      	movs	r0, #2
   255da:	f008 fb38 	bl	2dc4e <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc == BOOT_EFLASH) {
   255de:	2801      	cmp	r0, #1
   255e0:	d12e      	bne.n	25640 <boot_swap_type_multi+0x7c>
        BOOT_LOG_INF("Secondary image of image pair (%d.) "
                     "is unreachable. Treat it as empty", image_index);
        secondary_slot.magic = BOOT_MAGIC_UNSET;
   255e2:	2303      	movs	r3, #3
   255e4:	f88d 3008 	strb.w	r3, [sp, #8]
        secondary_slot.swap_type = BOOT_SWAP_TYPE_NONE;
        secondary_slot.copy_done = BOOT_FLAG_UNSET;
        secondary_slot.image_ok = BOOT_FLAG_UNSET;
   255e8:	f88d 300b 	strb.w	r3, [sp, #11]
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
        table = boot_swap_tables + i;

        if (boot_magic_compatible_check(table->magic_primary_slot,
   255ec:	f89d 5000 	ldrb.w	r5, [sp]
                                        primary_slot.magic) &&
            boot_magic_compatible_check(table->magic_secondary_slot,
   255f0:	f89d 6008 	ldrb.w	r6, [sp, #8]
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   255f4:	f89d 7003 	ldrb.w	r7, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   255f8:	f89d 800b 	ldrb.w	r8, [sp, #11]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
                table->copy_done_primary_slot == primary_slot.copy_done)) {
   255fc:	f89d 9002 	ldrb.w	r9, [sp, #2]
   25600:	4a16      	ldr	r2, [pc, #88]	; (2565c <boot_swap_type_multi+0x98>)
   25602:	2400      	movs	r4, #0
        if (boot_magic_compatible_check(table->magic_primary_slot,
   25604:	7810      	ldrb	r0, [r2, #0]
   25606:	4629      	mov	r1, r5
   25608:	f008 faad 	bl	2db66 <boot_magic_compatible_check>
   2560c:	b1f0      	cbz	r0, 2564c <boot_swap_type_multi+0x88>
            boot_magic_compatible_check(table->magic_secondary_slot,
   2560e:	7850      	ldrb	r0, [r2, #1]
   25610:	4631      	mov	r1, r6
   25612:	f008 faa8 	bl	2db66 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
   25616:	b1c8      	cbz	r0, 2564c <boot_swap_type_multi+0x88>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   25618:	7893      	ldrb	r3, [r2, #2]
                                        secondary_slot.magic) &&
   2561a:	2b04      	cmp	r3, #4
   2561c:	d001      	beq.n	25622 <boot_swap_type_multi+0x5e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   2561e:	42bb      	cmp	r3, r7
   25620:	d114      	bne.n	2564c <boot_swap_type_multi+0x88>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   25622:	78d3      	ldrb	r3, [r2, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   25624:	2b04      	cmp	r3, #4
   25626:	d001      	beq.n	2562c <boot_swap_type_multi+0x68>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   25628:	4543      	cmp	r3, r8
   2562a:	d10f      	bne.n	2564c <boot_swap_type_multi+0x88>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   2562c:	7913      	ldrb	r3, [r2, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   2562e:	2b04      	cmp	r3, #4
   25630:	d10a      	bne.n	25648 <boot_swap_type_multi+0x84>
            BOOT_LOG_INF("Swap type: %s",
   25632:	7950      	ldrb	r0, [r2, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
   25634:	1e83      	subs	r3, r0, #2
   25636:	2b02      	cmp	r3, #2
   25638:	d804      	bhi.n	25644 <boot_swap_type_multi+0x80>
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
   2563a:	b005      	add	sp, #20
   2563c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (rc) {
   25640:	2800      	cmp	r0, #0
   25642:	d0d3      	beq.n	255ec <boot_swap_type_multi+0x28>
        return BOOT_SWAP_TYPE_PANIC;
   25644:	20ff      	movs	r0, #255	; 0xff
   25646:	e7f8      	b.n	2563a <boot_swap_type_multi+0x76>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   25648:	454b      	cmp	r3, r9
   2564a:	d0f2      	beq.n	25632 <boot_swap_type_multi+0x6e>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
   2564c:	3401      	adds	r4, #1
   2564e:	2c03      	cmp	r4, #3
   25650:	f102 0206 	add.w	r2, r2, #6
   25654:	d1d6      	bne.n	25604 <boot_swap_type_multi+0x40>
    return BOOT_SWAP_TYPE_NONE;
   25656:	2001      	movs	r0, #1
   25658:	e7ef      	b.n	2563a <boot_swap_type_multi+0x76>
   2565a:	bf00      	nop
   2565c:	00030d97 	.word	0x00030d97

00025660 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   25660:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   25662:	4c14      	ldr	r4, [pc, #80]	; (256b4 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   25664:	4a14      	ldr	r2, [pc, #80]	; (256b8 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   25666:	4915      	ldr	r1, [pc, #84]	; (256bc <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   25668:	2303      	movs	r3, #3
   2566a:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   2566c:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   2566e:	4b14      	ldr	r3, [pc, #80]	; (256c0 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
   25670:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   25672:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   25674:	f44f 6380 	mov.w	r3, #1024	; 0x400
   25678:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   2567a:	2300      	movs	r3, #0
   2567c:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   2567e:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   25680:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   25682:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   25684:	4a0f      	ldr	r2, [pc, #60]	; (256c4 <_DoInit+0x64>)
   25686:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   25688:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   2568a:	2210      	movs	r2, #16
   2568c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   2568e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   25690:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   25692:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   25694:	f003 fe0f 	bl	292b6 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   25698:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   2569c:	490a      	ldr	r1, [pc, #40]	; (256c8 <_DoInit+0x68>)
   2569e:	4620      	mov	r0, r4
   256a0:	f003 fe09 	bl	292b6 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   256a4:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   256a8:	2320      	movs	r3, #32
   256aa:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   256ac:	f3bf 8f5f 	dmb	sy
}
   256b0:	bd10      	pop	{r4, pc}
   256b2:	bf00      	nop
   256b4:	20002bcc 	.word	0x20002bcc
   256b8:	00030da9 	.word	0x00030da9
   256bc:	00030db2 	.word	0x00030db2
   256c0:	20002d9e 	.word	0x20002d9e
   256c4:	20002d8e 	.word	0x20002d8e
   256c8:	00030db6 	.word	0x00030db6

000256cc <_cbor_value_copy_string>:
 * \sa cbor_value_dup_text_string(), cbor_value_copy_text_string(), cbor_value_get_string_length(), cbor_value_calculate_string_length()
 */

CborError _cbor_value_copy_string(const CborValue *value, void *buffer,
                                 size_t *buflen, CborValue *next)
{
   256cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    bool copied_all;
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   256ce:	b189      	cbz	r1, 256f4 <_cbor_value_copy_string+0x28>
                                          buffer ? (IterateFunction) value->parser->d->cpy : iterate_noop);
   256d0:	6804      	ldr	r4, [r0, #0]
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   256d2:	6824      	ldr	r4, [r4, #0]
   256d4:	6964      	ldr	r4, [r4, #20]
   256d6:	e9cd 3400 	strd	r3, r4, [sp]
   256da:	f10d 030f 	add.w	r3, sp, #15
   256de:	f008 fd1e 	bl	2e11e <iterate_string_chunks>
    return err ? err :
   256e2:	b928      	cbnz	r0, 256f0 <_cbor_value_copy_string+0x24>
   256e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   256e8:	2b00      	cmp	r3, #0
   256ea:	bf08      	it	eq
   256ec:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
                 copied_all ? CborNoError : CborErrorOutOfMemory;
}
   256f0:	b004      	add	sp, #16
   256f2:	bd10      	pop	{r4, pc}
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   256f4:	4c00      	ldr	r4, [pc, #0]	; (256f8 <_cbor_value_copy_string+0x2c>)
   256f6:	e7ee      	b.n	256d6 <_cbor_value_copy_string+0xa>
   256f8:	0002df21 	.word	0x0002df21

000256fc <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   256fc:	4b0e      	ldr	r3, [pc, #56]	; (25738 <z_sys_init_run_level+0x3c>)
{
   256fe:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   25700:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   25704:	3001      	adds	r0, #1
   25706:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   2570a:	42a6      	cmp	r6, r4
   2570c:	d800      	bhi.n	25710 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   2570e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   25710:	e9d4 3500 	ldrd	r3, r5, [r4]
   25714:	4628      	mov	r0, r5
   25716:	4798      	blx	r3
		if (dev != NULL) {
   25718:	b165      	cbz	r5, 25734 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   2571a:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   2571c:	b130      	cbz	r0, 2572c <z_sys_init_run_level+0x30>
				if (rc < 0) {
   2571e:	2800      	cmp	r0, #0
   25720:	bfb8      	it	lt
   25722:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   25724:	28ff      	cmp	r0, #255	; 0xff
   25726:	bfa8      	it	ge
   25728:	20ff      	movge	r0, #255	; 0xff
   2572a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   2572c:	785a      	ldrb	r2, [r3, #1]
   2572e:	f042 0201 	orr.w	r2, r2, #1
   25732:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   25734:	3408      	adds	r4, #8
   25736:	e7e8      	b.n	2570a <z_sys_init_run_level+0xe>
   25738:	00030794 	.word	0x00030794

0002573c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   2573c:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   2573e:	4605      	mov	r5, r0
   25740:	b910      	cbnz	r0, 25748 <z_impl_device_get_binding+0xc>
		return NULL;
   25742:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   25744:	4620      	mov	r0, r4
   25746:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   25748:	7803      	ldrb	r3, [r0, #0]
   2574a:	2b00      	cmp	r3, #0
   2574c:	d0f9      	beq.n	25742 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   2574e:	4c0e      	ldr	r4, [pc, #56]	; (25788 <z_impl_device_get_binding+0x4c>)
   25750:	4e0e      	ldr	r6, [pc, #56]	; (2578c <z_impl_device_get_binding+0x50>)
   25752:	42b4      	cmp	r4, r6
   25754:	d108      	bne.n	25768 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   25756:	4c0c      	ldr	r4, [pc, #48]	; (25788 <z_impl_device_get_binding+0x4c>)
   25758:	42b4      	cmp	r4, r6
   2575a:	d0f2      	beq.n	25742 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   2575c:	4620      	mov	r0, r4
   2575e:	f008 fe49 	bl	2e3f4 <z_device_is_ready>
   25762:	b950      	cbnz	r0, 2577a <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   25764:	3418      	adds	r4, #24
   25766:	e7f7      	b.n	25758 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   25768:	4620      	mov	r0, r4
   2576a:	f008 fe43 	bl	2e3f4 <z_device_is_ready>
   2576e:	b110      	cbz	r0, 25776 <z_impl_device_get_binding+0x3a>
   25770:	6823      	ldr	r3, [r4, #0]
   25772:	42ab      	cmp	r3, r5
   25774:	d0e6      	beq.n	25744 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   25776:	3418      	adds	r4, #24
   25778:	e7eb      	b.n	25752 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   2577a:	6821      	ldr	r1, [r4, #0]
   2577c:	4628      	mov	r0, r5
   2577e:	f003 fdb4 	bl	292ea <strcmp>
   25782:	2800      	cmp	r0, #0
   25784:	d1ee      	bne.n	25764 <z_impl_device_get_binding+0x28>
   25786:	e7dd      	b.n	25744 <z_impl_device_get_binding+0x8>
   25788:	0002ef50 	.word	0x0002ef50
   2578c:	0002eff8 	.word	0x0002eff8

00025790 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   25790:	4b01      	ldr	r3, [pc, #4]	; (25798 <z_impl_z_errno+0x8>)
   25792:	6898      	ldr	r0, [r3, #8]
}
   25794:	3064      	adds	r0, #100	; 0x64
   25796:	4770      	bx	lr
   25798:	20002c74 	.word	0x20002c74

0002579c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   2579c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   2579e:	4b0a      	ldr	r3, [pc, #40]	; (257c8 <bg_thread_main+0x2c>)
   257a0:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   257a2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   257a4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   257a6:	f7ff ffa9 	bl	256fc <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   257aa:	f001 faed 	bl	26d88 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   257ae:	2003      	movs	r0, #3
   257b0:	f7ff ffa4 	bl	256fc <z_sys_init_run_level>

	z_init_static_threads();
   257b4:	f000 f97a 	bl	25aac <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   257b8:	f7e8 f994 	bl	dae4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   257bc:	4a03      	ldr	r2, [pc, #12]	; (257cc <bg_thread_main+0x30>)
   257be:	7b13      	ldrb	r3, [r2, #12]
   257c0:	f023 0301 	bic.w	r3, r3, #1
   257c4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   257c6:	bd08      	pop	{r3, pc}
   257c8:	2000319e 	.word	0x2000319e
   257cc:	20001480 	.word	0x20001480

000257d0 <z_bss_zero>:
{
   257d0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   257d2:	4803      	ldr	r0, [pc, #12]	; (257e0 <z_bss_zero+0x10>)
   257d4:	4a03      	ldr	r2, [pc, #12]	; (257e4 <z_bss_zero+0x14>)
   257d6:	2100      	movs	r1, #0
   257d8:	1a12      	subs	r2, r2, r0
   257da:	f008 fe3c 	bl	2e456 <z_early_memset>
}
   257de:	bd08      	pop	{r3, pc}
   257e0:	20000b08 	.word	0x20000b08
   257e4:	200031a0 	.word	0x200031a0

000257e8 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   257e8:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   257ea:	2300      	movs	r3, #0
{
   257ec:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   257ee:	2201      	movs	r2, #1
   257f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   257f4:	4e13      	ldr	r6, [pc, #76]	; (25844 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   257f6:	4d14      	ldr	r5, [pc, #80]	; (25848 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   257f8:	9301      	str	r3, [sp, #4]
   257fa:	220f      	movs	r2, #15
   257fc:	e9cd 3202 	strd	r3, r2, [sp, #8]
   25800:	4912      	ldr	r1, [pc, #72]	; (2584c <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   25802:	2318      	movs	r3, #24
   25804:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   25808:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   2580c:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   2580e:	f44f 70b0 	mov.w	r0, #352	; 0x160
   25812:	fb00 1104 	mla	r1, r0, r4, r1
   25816:	4b0e      	ldr	r3, [pc, #56]	; (25850 <z_init_cpu+0x68>)
   25818:	9500      	str	r5, [sp, #0]
   2581a:	f44f 72a0 	mov.w	r2, #320	; 0x140
   2581e:	4630      	mov	r0, r6
   25820:	f000 f8e6 	bl	259f0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   25824:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   25826:	480b      	ldr	r0, [pc, #44]	; (25854 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
   25828:	752c      	strb	r4, [r5, #20]
   2582a:	f023 0304 	bic.w	r3, r3, #4
   2582e:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   25830:	f44f 6302 	mov.w	r3, #2080	; 0x820
   25834:	fb03 0404 	mla	r4, r3, r4, r0
   25838:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   2583a:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   2583c:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   2583e:	b006      	add	sp, #24
   25840:	bd70      	pop	{r4, r5, r6, pc}
   25842:	bf00      	nop
   25844:	20001400 	.word	0x20001400
   25848:	20002c74 	.word	0x20002c74
   2584c:	200047a0 	.word	0x200047a0
   25850:	00025b65 	.word	0x00025b65
   25854:	20004900 	.word	0x20004900

00025858 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   25858:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   2585a:	4b2d      	ldr	r3, [pc, #180]	; (25910 <z_cstart+0xb8>)
   2585c:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   2585e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   25862:	4d2c      	ldr	r5, [pc, #176]	; (25914 <z_cstart+0xbc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   25864:	4e2c      	ldr	r6, [pc, #176]	; (25918 <_flash_used>)
   25866:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   25868:	4f2c      	ldr	r7, [pc, #176]	; (2591c <_flash_used+0x4>)
   2586a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2586e:	2400      	movs	r4, #0
   25870:	616b      	str	r3, [r5, #20]
   25872:	23e0      	movs	r3, #224	; 0xe0
   25874:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   25878:	77ec      	strb	r4, [r5, #31]
   2587a:	762c      	strb	r4, [r5, #24]
   2587c:	766c      	strb	r4, [r5, #25]
   2587e:	76ac      	strb	r4, [r5, #26]
   25880:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   25884:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   25886:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   2588a:	626b      	str	r3, [r5, #36]	; 0x24
   2588c:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   25890:	f7ea f802 	bl	f898 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   25894:	f7e9 fdb2 	bl	f3fc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   25898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2589c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   2589e:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   258a0:	f7ea f932 	bl	fb08 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   258a4:	f7ea f89a 	bl	f9dc <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   258a8:	f240 1301 	movw	r3, #257	; 0x101
   258ac:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   258b0:	ab06      	add	r3, sp, #24
   258b2:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   258b4:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   258b8:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   258ba:	f008 fd9a 	bl	2e3f2 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   258be:	4620      	mov	r0, r4
   258c0:	f7ff ff1c 	bl	256fc <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   258c4:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   258c6:	4d16      	ldr	r5, [pc, #88]	; (25920 <_flash_used+0x8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   258c8:	f7ff ff18 	bl	256fc <z_sys_init_run_level>
	z_sched_init();
   258cc:	f000 fea6 	bl	2661c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   258d0:	4b14      	ldr	r3, [pc, #80]	; (25924 <_flash_used+0xc>)
	_kernel.ready_q.cache = &z_main_thread;
   258d2:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   258d4:	9305      	str	r3, [sp, #20]
   258d6:	2301      	movs	r3, #1
   258d8:	4913      	ldr	r1, [pc, #76]	; (25928 <_flash_used+0x10>)
   258da:	9400      	str	r4, [sp, #0]
   258dc:	e9cd 4303 	strd	r4, r3, [sp, #12]
   258e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   258e4:	463b      	mov	r3, r7
   258e6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   258ea:	4628      	mov	r0, r5
   258ec:	f000 f880 	bl	259f0 <z_setup_new_thread>
   258f0:	7b6a      	ldrb	r2, [r5, #13]
   258f2:	4606      	mov	r6, r0
   258f4:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   258f8:	4628      	mov	r0, r5
   258fa:	736a      	strb	r2, [r5, #13]
   258fc:	f009 f879 	bl	2e9f2 <z_ready_thread>
	z_init_cpu(0);
   25900:	4620      	mov	r0, r4
   25902:	f7ff ff71 	bl	257e8 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   25906:	463a      	mov	r2, r7
   25908:	4631      	mov	r1, r6
   2590a:	4628      	mov	r0, r5
   2590c:	f7e9 fe92 	bl	f634 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   25910:	20005120 	.word	0x20005120
   25914:	e000ed00 	.word	0xe000ed00
   25918:	20002c74 	.word	0x20002c74
   2591c:	0002579d 	.word	0x0002579d
   25920:	20001480 	.word	0x20001480
   25924:	00030dbd 	.word	0x00030dbd
   25928:	20004380 	.word	0x20004380

0002592c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   2592c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   2592e:	4c06      	ldr	r4, [pc, #24]	; (25948 <statics_init+0x1c>)
   25930:	4d06      	ldr	r5, [pc, #24]	; (2594c <statics_init+0x20>)
   25932:	42ac      	cmp	r4, r5
   25934:	d301      	bcc.n	2593a <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   25936:	2000      	movs	r0, #0
   25938:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   2593a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   2593e:	4620      	mov	r0, r4
   25940:	f008 fd8d 	bl	2e45e <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   25944:	3414      	adds	r4, #20
   25946:	e7f4      	b.n	25932 <statics_init+0x6>
   25948:	20000944 	.word	0x20000944
   2594c:	20000944 	.word	0x20000944

00025950 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   25950:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   25952:	4b0e      	ldr	r3, [pc, #56]	; (2598c <init_mem_slab_module+0x3c>)
   25954:	4c0e      	ldr	r4, [pc, #56]	; (25990 <init_mem_slab_module+0x40>)
   25956:	42a3      	cmp	r3, r4
   25958:	d301      	bcc.n	2595e <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   2595a:	2000      	movs	r0, #0
	return rc;
}
   2595c:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2595e:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   25962:	ea41 0200 	orr.w	r2, r1, r0
   25966:	f012 0203 	ands.w	r2, r2, #3
   2596a:	d10b      	bne.n	25984 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   2596c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   2596e:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   25970:	42aa      	cmp	r2, r5
   25972:	d101      	bne.n	25978 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   25974:	331c      	adds	r3, #28
   25976:	e7ee      	b.n	25956 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   25978:	695e      	ldr	r6, [r3, #20]
   2597a:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   2597c:	3201      	adds	r2, #1
		slab->free_list = p;
   2597e:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   25980:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   25982:	e7f5      	b.n	25970 <init_mem_slab_module+0x20>
	return rc;
   25984:	f06f 0015 	mvn.w	r0, #21
   25988:	e7e8      	b.n	2595c <init_mem_slab_module+0xc>
   2598a:	bf00      	nop
   2598c:	200008f0 	.word	0x200008f0
   25990:	20000944 	.word	0x20000944

00025994 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   25994:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25996:	460c      	mov	r4, r1
	__asm__ volatile(
   25998:	f04f 0520 	mov.w	r5, #32
   2599c:	f3ef 8111 	mrs	r1, BASEPRI
   259a0:	f385 8812 	msr	BASEPRI_MAX, r5
   259a4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   259a8:	6945      	ldr	r5, [r0, #20]
   259aa:	b15d      	cbz	r5, 259c4 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   259ac:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   259ae:	682b      	ldr	r3, [r5, #0]
   259b0:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   259b2:	6983      	ldr	r3, [r0, #24]
   259b4:	3301      	adds	r3, #1
   259b6:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   259b8:	2000      	movs	r0, #0
	__asm__ volatile(
   259ba:	f381 8811 	msr	BASEPRI, r1
   259be:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   259c2:	e011      	b.n	259e8 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   259c4:	ea52 0c03 	orrs.w	ip, r2, r3
   259c8:	d103      	bne.n	259d2 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   259ca:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   259cc:	f06f 000b 	mvn.w	r0, #11
   259d0:	e7f3      	b.n	259ba <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   259d2:	e9cd 2300 	strd	r2, r3, [sp]
   259d6:	4602      	mov	r2, r0
   259d8:	3008      	adds	r0, #8
   259da:	f000 fd75 	bl	264c8 <z_pend_curr>
		if (result == 0) {
   259de:	b918      	cbnz	r0, 259e8 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   259e0:	4b02      	ldr	r3, [pc, #8]	; (259ec <k_mem_slab_alloc+0x58>)
   259e2:	689b      	ldr	r3, [r3, #8]
   259e4:	695b      	ldr	r3, [r3, #20]
   259e6:	6023      	str	r3, [r4, #0]
}
   259e8:	b003      	add	sp, #12
   259ea:	bd30      	pop	{r4, r5, pc}
   259ec:	20002c74 	.word	0x20002c74

000259f0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   259f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   259f4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   259f6:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   259f8:	2604      	movs	r6, #4
   259fa:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   259fc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   259fe:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   25a00:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   25a04:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   25a06:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   25a08:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   25a0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   25a0e:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   25a10:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   25a14:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   25a16:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   25a1a:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   25a1e:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   25a20:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   25a22:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   25a24:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   25a28:	9202      	str	r2, [sp, #8]
   25a2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   25a2c:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   25a2e:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   25a30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   25a32:	9200      	str	r2, [sp, #0]
   25a34:	4642      	mov	r2, r8
{
   25a36:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   25a38:	f7e9 fdca 	bl	f5d0 <arch_new_thread>
	if (!_current) {
   25a3c:	4b04      	ldr	r3, [pc, #16]	; (25a50 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   25a3e:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   25a40:	689b      	ldr	r3, [r3, #8]
   25a42:	b103      	cbz	r3, 25a46 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   25a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   25a46:	6763      	str	r3, [r4, #116]	; 0x74
}
   25a48:	4640      	mov	r0, r8
   25a4a:	b004      	add	sp, #16
   25a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25a50:	20002c74 	.word	0x20002c74

00025a54 <z_impl_k_thread_create>:
{
   25a54:	b5f0      	push	{r4, r5, r6, r7, lr}
   25a56:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   25a58:	2700      	movs	r7, #0
   25a5a:	9705      	str	r7, [sp, #20]
   25a5c:	9f10      	ldr	r7, [sp, #64]	; 0x40
   25a5e:	9704      	str	r7, [sp, #16]
   25a60:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   25a62:	9703      	str	r7, [sp, #12]
   25a64:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   25a66:	9702      	str	r7, [sp, #8]
{
   25a68:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   25a6c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   25a6e:	9701      	str	r7, [sp, #4]
   25a70:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   25a72:	9700      	str	r7, [sp, #0]
{
   25a74:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   25a76:	f7ff ffbb 	bl	259f0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   25a7a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   25a7e:	bf08      	it	eq
   25a80:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   25a84:	d005      	beq.n	25a92 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25a86:	ea55 0306 	orrs.w	r3, r5, r6
   25a8a:	d105      	bne.n	25a98 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   25a8c:	4620      	mov	r0, r4
   25a8e:	f000 fcbf 	bl	26410 <z_sched_start>
}
   25a92:	4620      	mov	r0, r4
   25a94:	b007      	add	sp, #28
   25a96:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   25a98:	4903      	ldr	r1, [pc, #12]	; (25aa8 <z_impl_k_thread_create+0x54>)
   25a9a:	4632      	mov	r2, r6
   25a9c:	462b      	mov	r3, r5
   25a9e:	f104 0018 	add.w	r0, r4, #24
   25aa2:	f000 ff47 	bl	26934 <z_add_timeout>
   25aa6:	e7f4      	b.n	25a92 <z_impl_k_thread_create+0x3e>
   25aa8:	0002ea13 	.word	0x0002ea13

00025aac <z_init_static_threads>:
{
   25aac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25ab0:	4c29      	ldr	r4, [pc, #164]	; (25b58 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   25ab2:	4d2a      	ldr	r5, [pc, #168]	; (25b5c <z_init_static_threads+0xb0>)
{
   25ab4:	b087      	sub	sp, #28
   25ab6:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   25ab8:	42ae      	cmp	r6, r5
   25aba:	f104 0430 	add.w	r4, r4, #48	; 0x30
   25abe:	d30f      	bcc.n	25ae0 <z_init_static_threads+0x34>
	k_sched_lock();
   25ac0:	f000 fbc0 	bl	26244 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   25ac4:	4c24      	ldr	r4, [pc, #144]	; (25b58 <z_init_static_threads+0xac>)
   25ac6:	f8df 9098 	ldr.w	r9, [pc, #152]	; 25b60 <z_init_static_threads+0xb4>
   25aca:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   25ace:	f240 37e7 	movw	r7, #999	; 0x3e7
   25ad2:	42ac      	cmp	r4, r5
   25ad4:	d320      	bcc.n	25b18 <z_init_static_threads+0x6c>
}
   25ad6:	b007      	add	sp, #28
   25ad8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   25adc:	f000 bd82 	b.w	265e4 <k_sched_unlock>
		z_setup_new_thread(
   25ae0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   25ae4:	9305      	str	r3, [sp, #20]
   25ae6:	f854 3c10 	ldr.w	r3, [r4, #-16]
   25aea:	9304      	str	r3, [sp, #16]
   25aec:	f854 3c14 	ldr.w	r3, [r4, #-20]
   25af0:	9303      	str	r3, [sp, #12]
   25af2:	f854 3c18 	ldr.w	r3, [r4, #-24]
   25af6:	9302      	str	r3, [sp, #8]
   25af8:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   25afc:	9301      	str	r3, [sp, #4]
   25afe:	f854 3c20 	ldr.w	r3, [r4, #-32]
   25b02:	9300      	str	r3, [sp, #0]
   25b04:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   25b08:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   25b0c:	f7ff ff70 	bl	259f0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   25b10:	f854 3c30 	ldr.w	r3, [r4, #-48]
   25b14:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   25b16:	e7ce      	b.n	25ab6 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   25b18:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25b1a:	1c5a      	adds	r2, r3, #1
   25b1c:	d00d      	beq.n	25b3a <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   25b1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   25b22:	2100      	movs	r1, #0
   25b24:	4638      	mov	r0, r7
   25b26:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25b2a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   25b2e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25b32:	d104      	bne.n	25b3e <z_init_static_threads+0x92>
	z_sched_start(thread);
   25b34:	4640      	mov	r0, r8
   25b36:	f000 fc6b 	bl	26410 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   25b3a:	3430      	adds	r4, #48	; 0x30
   25b3c:	e7c9      	b.n	25ad2 <z_init_static_threads+0x26>
   25b3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   25b42:	2300      	movs	r3, #0
   25b44:	f7e6 fbdc 	bl	c300 <__aeabi_uldivmod>
   25b48:	4602      	mov	r2, r0
   25b4a:	460b      	mov	r3, r1
   25b4c:	f108 0018 	add.w	r0, r8, #24
   25b50:	4649      	mov	r1, r9
   25b52:	f000 feef 	bl	26934 <z_add_timeout>
   25b56:	e7f0      	b.n	25b3a <z_init_static_threads+0x8e>
   25b58:	200008b4 	.word	0x200008b4
   25b5c:	200008b4 	.word	0x200008b4
   25b60:	0002ea13 	.word	0x0002ea13

00025b64 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   25b64:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   25b66:	4c0b      	ldr	r4, [pc, #44]	; (25b94 <idle+0x30>)
	return !z_sys_post_kernel;
   25b68:	4d0b      	ldr	r5, [pc, #44]	; (25b98 <idle+0x34>)
	__asm__ volatile(
   25b6a:	f04f 0220 	mov.w	r2, #32
   25b6e:	f3ef 8311 	mrs	r3, BASEPRI
   25b72:	f382 8812 	msr	BASEPRI_MAX, r2
   25b76:	f3bf 8f6f 	isb	sy
   25b7a:	f008 fff1 	bl	2eb60 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   25b7e:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   25b80:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   25b82:	b913      	cbnz	r3, 25b8a <idle+0x26>
	arch_cpu_idle();
   25b84:	f7e9 fc40 	bl	f408 <arch_cpu_idle>
}
   25b88:	e7ef      	b.n	25b6a <idle+0x6>
   25b8a:	f7e9 fa35 	bl	eff8 <pm_system_suspend>
   25b8e:	2800      	cmp	r0, #0
   25b90:	d1eb      	bne.n	25b6a <idle+0x6>
   25b92:	e7f7      	b.n	25b84 <idle+0x20>
   25b94:	20002c74 	.word	0x20002c74
   25b98:	2000319e 	.word	0x2000319e

00025b9c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   25b9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   25ba0:	4604      	mov	r4, r0
   25ba2:	4617      	mov	r7, r2
   25ba4:	461e      	mov	r6, r3
   25ba6:	f04f 0320 	mov.w	r3, #32
   25baa:	f3ef 8811 	mrs	r8, BASEPRI
   25bae:	f383 8812 	msr	BASEPRI_MAX, r3
   25bb2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   25bb6:	68c3      	ldr	r3, [r0, #12]
   25bb8:	4a32      	ldr	r2, [pc, #200]	; (25c84 <z_impl_k_mutex_lock+0xe8>)
   25bba:	b16b      	cbz	r3, 25bd8 <z_impl_k_mutex_lock+0x3c>
   25bbc:	6880      	ldr	r0, [r0, #8]
   25bbe:	6891      	ldr	r1, [r2, #8]
   25bc0:	4288      	cmp	r0, r1
   25bc2:	d019      	beq.n	25bf8 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   25bc4:	ea57 0306 	orrs.w	r3, r7, r6
   25bc8:	d118      	bne.n	25bfc <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   25bca:	f388 8811 	msr	BASEPRI, r8
   25bce:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   25bd2:	f06f 000f 	mvn.w	r0, #15
   25bd6:	e00c      	b.n	25bf2 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   25bd8:	6891      	ldr	r1, [r2, #8]
   25bda:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   25bde:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   25be0:	3301      	adds	r3, #1
   25be2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   25be4:	6893      	ldr	r3, [r2, #8]
   25be6:	60a3      	str	r3, [r4, #8]
   25be8:	f388 8811 	msr	BASEPRI, r8
   25bec:	f3bf 8f6f 	isb	sy
		return 0;
   25bf0:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   25bf2:	b002      	add	sp, #8
   25bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   25bf8:	6921      	ldr	r1, [r4, #16]
   25bfa:	e7f0      	b.n	25bde <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   25bfc:	f991 100e 	ldrsb.w	r1, [r1, #14]
   25c00:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   25c04:	4299      	cmp	r1, r3
   25c06:	bfa8      	it	ge
   25c08:	4619      	movge	r1, r3
   25c0a:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   25c0e:	4291      	cmp	r1, r2
   25c10:	bfb8      	it	lt
   25c12:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   25c14:	428b      	cmp	r3, r1
   25c16:	dd2e      	ble.n	25c76 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   25c18:	f008 fcc2 	bl	2e5a0 <adjust_owner_prio.isra.0>
   25c1c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   25c1e:	e9cd 7600 	strd	r7, r6, [sp]
   25c22:	4819      	ldr	r0, [pc, #100]	; (25c88 <z_impl_k_mutex_lock+0xec>)
   25c24:	4622      	mov	r2, r4
   25c26:	4641      	mov	r1, r8
   25c28:	f000 fc4e 	bl	264c8 <z_pend_curr>
	if (got_mutex == 0) {
   25c2c:	2800      	cmp	r0, #0
   25c2e:	d0e0      	beq.n	25bf2 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   25c30:	f04f 0320 	mov.w	r3, #32
   25c34:	f3ef 8611 	mrs	r6, BASEPRI
   25c38:	f383 8812 	msr	BASEPRI_MAX, r3
   25c3c:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   25c40:	6823      	ldr	r3, [r4, #0]
   25c42:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25c44:	429c      	cmp	r4, r3
   25c46:	d00a      	beq.n	25c5e <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   25c48:	b14b      	cbz	r3, 25c5e <z_impl_k_mutex_lock+0xc2>
   25c4a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   25c4e:	4299      	cmp	r1, r3
   25c50:	bfa8      	it	ge
   25c52:	4619      	movge	r1, r3
   25c54:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   25c58:	4299      	cmp	r1, r3
   25c5a:	bfb8      	it	lt
   25c5c:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   25c5e:	68a0      	ldr	r0, [r4, #8]
   25c60:	f008 fc9e 	bl	2e5a0 <adjust_owner_prio.isra.0>
   25c64:	b900      	cbnz	r0, 25c68 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   25c66:	b145      	cbz	r5, 25c7a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   25c68:	4807      	ldr	r0, [pc, #28]	; (25c88 <z_impl_k_mutex_lock+0xec>)
   25c6a:	4631      	mov	r1, r6
   25c6c:	f000 fad8 	bl	26220 <z_reschedule>
	return -EAGAIN;
   25c70:	f06f 000a 	mvn.w	r0, #10
   25c74:	e7bd      	b.n	25bf2 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   25c76:	2500      	movs	r5, #0
   25c78:	e7d1      	b.n	25c1e <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   25c7a:	f386 8811 	msr	BASEPRI, r6
   25c7e:	f3bf 8f6f 	isb	sy
   25c82:	e7f5      	b.n	25c70 <z_impl_k_mutex_lock+0xd4>
   25c84:	20002c74 	.word	0x20002c74
   25c88:	2000319f 	.word	0x2000319f

00025c8c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   25c8c:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   25c8e:	6883      	ldr	r3, [r0, #8]
{
   25c90:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   25c92:	2b00      	cmp	r3, #0
   25c94:	d032      	beq.n	25cfc <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   25c96:	4a1c      	ldr	r2, [pc, #112]	; (25d08 <z_impl_k_mutex_unlock+0x7c>)
   25c98:	6892      	ldr	r2, [r2, #8]
   25c9a:	4293      	cmp	r3, r2
   25c9c:	d131      	bne.n	25d02 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   25c9e:	7bda      	ldrb	r2, [r3, #15]
   25ca0:	3a01      	subs	r2, #1
   25ca2:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   25ca4:	68c3      	ldr	r3, [r0, #12]
   25ca6:	2b01      	cmp	r3, #1
   25ca8:	d905      	bls.n	25cb6 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   25caa:	3b01      	subs	r3, #1
   25cac:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   25cae:	f000 fc99 	bl	265e4 <k_sched_unlock>

	return 0;
   25cb2:	2000      	movs	r0, #0
}
   25cb4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   25cb6:	f04f 0320 	mov.w	r3, #32
   25cba:	f3ef 8511 	mrs	r5, BASEPRI
   25cbe:	f383 8812 	msr	BASEPRI_MAX, r3
   25cc2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   25cc6:	6901      	ldr	r1, [r0, #16]
   25cc8:	6880      	ldr	r0, [r0, #8]
   25cca:	f008 fc69 	bl	2e5a0 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   25cce:	4620      	mov	r0, r4
   25cd0:	f008 feeb 	bl	2eaaa <z_unpend_first_thread>
	mutex->owner = new_owner;
   25cd4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   25cd6:	b158      	cbz	r0, 25cf0 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   25cd8:	f990 200e 	ldrsb.w	r2, [r0, #14]
   25cdc:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   25cde:	2200      	movs	r2, #0
   25ce0:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   25ce2:	f008 fe86 	bl	2e9f2 <z_ready_thread>
		z_reschedule(&lock, key);
   25ce6:	4809      	ldr	r0, [pc, #36]	; (25d0c <z_impl_k_mutex_unlock+0x80>)
   25ce8:	4629      	mov	r1, r5
   25cea:	f000 fa99 	bl	26220 <z_reschedule>
   25cee:	e7de      	b.n	25cae <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   25cf0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   25cf2:	f385 8811 	msr	BASEPRI, r5
   25cf6:	f3bf 8f6f 	isb	sy
   25cfa:	e7d8      	b.n	25cae <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   25cfc:	f06f 0015 	mvn.w	r0, #21
   25d00:	e7d8      	b.n	25cb4 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   25d02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25d06:	e7d5      	b.n	25cb4 <z_impl_k_mutex_unlock+0x28>
   25d08:	20002c74 	.word	0x20002c74
   25d0c:	2000319f 	.word	0x2000319f

00025d10 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   25d10:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25d12:	4611      	mov	r1, r2
	__asm__ volatile(
   25d14:	f04f 0220 	mov.w	r2, #32
   25d18:	f3ef 8511 	mrs	r5, BASEPRI
   25d1c:	f382 8812 	msr	BASEPRI_MAX, r2
   25d20:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   25d24:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   25d26:	b19c      	cbz	r4, 25d50 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25d28:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25d2a:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25d2c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25d30:	4294      	cmp	r4, r2
	list->head = node;
   25d32:	6003      	str	r3, [r0, #0]
	list->tail = node;
   25d34:	bf08      	it	eq
   25d36:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   25d38:	2101      	movs	r1, #1
   25d3a:	4620      	mov	r0, r4
   25d3c:	f008 fca3 	bl	2e686 <z_queue_node_peek>
   25d40:	4604      	mov	r4, r0
	__asm__ volatile(
   25d42:	f385 8811 	msr	BASEPRI, r5
   25d46:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   25d4a:	4620      	mov	r0, r4
   25d4c:	b003      	add	sp, #12
   25d4e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25d50:	ea51 0203 	orrs.w	r2, r1, r3
   25d54:	d0f5      	beq.n	25d42 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   25d56:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   25d5a:	e9cd 1300 	strd	r1, r3, [sp]
   25d5e:	4610      	mov	r0, r2
   25d60:	4629      	mov	r1, r5
   25d62:	f000 fbb1 	bl	264c8 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   25d66:	2800      	cmp	r0, #0
   25d68:	d1ef      	bne.n	25d4a <z_impl_k_queue_get+0x3a>
   25d6a:	4b02      	ldr	r3, [pc, #8]	; (25d74 <z_impl_k_queue_get+0x64>)
   25d6c:	689b      	ldr	r3, [r3, #8]
   25d6e:	695c      	ldr	r4, [r3, #20]
   25d70:	e7eb      	b.n	25d4a <z_impl_k_queue_get+0x3a>
   25d72:	bf00      	nop
   25d74:	20002c74 	.word	0x20002c74

00025d78 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   25d78:	b538      	push	{r3, r4, r5, lr}
   25d7a:	4604      	mov	r4, r0
	__asm__ volatile(
   25d7c:	f04f 0320 	mov.w	r3, #32
   25d80:	f3ef 8511 	mrs	r5, BASEPRI
   25d84:	f383 8812 	msr	BASEPRI_MAX, r3
   25d88:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   25d8c:	f008 fe8d 	bl	2eaaa <z_unpend_first_thread>

	if (thread != NULL) {
   25d90:	b148      	cbz	r0, 25da6 <z_impl_k_sem_give+0x2e>
   25d92:	2200      	movs	r2, #0
   25d94:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   25d96:	f008 fe2c 	bl	2e9f2 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   25d9a:	4629      	mov	r1, r5
   25d9c:	4808      	ldr	r0, [pc, #32]	; (25dc0 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   25d9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   25da2:	f000 ba3d 	b.w	26220 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   25da6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   25daa:	429a      	cmp	r2, r3
   25dac:	bf18      	it	ne
   25dae:	3301      	addne	r3, #1
   25db0:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   25db2:	2102      	movs	r1, #2
   25db4:	f104 0010 	add.w	r0, r4, #16
   25db8:	f009 f86f 	bl	2ee9a <z_handle_obj_poll_events>
}
   25dbc:	e7ed      	b.n	25d9a <z_impl_k_sem_give+0x22>
   25dbe:	bf00      	nop
   25dc0:	2000319f 	.word	0x2000319f

00025dc4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   25dc4:	b513      	push	{r0, r1, r4, lr}
   25dc6:	f04f 0420 	mov.w	r4, #32
   25dca:	f3ef 8111 	mrs	r1, BASEPRI
   25dce:	f384 8812 	msr	BASEPRI_MAX, r4
   25dd2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   25dd6:	6884      	ldr	r4, [r0, #8]
   25dd8:	b144      	cbz	r4, 25dec <z_impl_k_sem_take+0x28>
		sem->count--;
   25dda:	3c01      	subs	r4, #1
   25ddc:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   25dde:	f381 8811 	msr	BASEPRI, r1
   25de2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   25de6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   25de8:	b002      	add	sp, #8
   25dea:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25dec:	ea52 0403 	orrs.w	r4, r2, r3
   25df0:	d106      	bne.n	25e00 <z_impl_k_sem_take+0x3c>
   25df2:	f381 8811 	msr	BASEPRI, r1
   25df6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   25dfa:	f06f 000f 	mvn.w	r0, #15
   25dfe:	e7f3      	b.n	25de8 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   25e00:	e9cd 2300 	strd	r2, r3, [sp]
   25e04:	4602      	mov	r2, r0
   25e06:	4802      	ldr	r0, [pc, #8]	; (25e10 <z_impl_k_sem_take+0x4c>)
   25e08:	f000 fb5e 	bl	264c8 <z_pend_curr>
	return ret;
   25e0c:	e7ec      	b.n	25de8 <z_impl_k_sem_take+0x24>
   25e0e:	bf00      	nop
   25e10:	2000319f 	.word	0x2000319f

00025e14 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   25e14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   25e16:	4b09      	ldr	r3, [pc, #36]	; (25e3c <k_sys_work_q_init+0x28>)
   25e18:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   25e1a:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   25e1c:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   25e1e:	9300      	str	r3, [sp, #0]
   25e20:	4907      	ldr	r1, [pc, #28]	; (25e40 <k_sys_work_q_init+0x2c>)
   25e22:	4808      	ldr	r0, [pc, #32]	; (25e44 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   25e24:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   25e28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25e2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   25e30:	f000 f914 	bl	2605c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   25e34:	4620      	mov	r0, r4
   25e36:	b004      	add	sp, #16
   25e38:	bd10      	pop	{r4, pc}
   25e3a:	bf00      	nop
   25e3c:	00030dc2 	.word	0x00030dc2
   25e40:	20005120 	.word	0x20005120
   25e44:	20001500 	.word	0x20001500

00025e48 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   25e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   25e4c:	4e47      	ldr	r6, [pc, #284]	; (25f6c <work_queue_main+0x124>)
   25e4e:	b085      	sub	sp, #20
   25e50:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   25e52:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   25e56:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   25e5a:	f04f 0320 	mov.w	r3, #32
   25e5e:	f3ef 8711 	mrs	r7, BASEPRI
   25e62:	f383 8812 	msr	BASEPRI_MAX, r3
   25e66:	f3bf 8f6f 	isb	sy
   25e6a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   25e6e:	b98d      	cbnz	r5, 25e94 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   25e70:	2102      	movs	r1, #2
   25e72:	f104 0098 	add.w	r0, r4, #152	; 0x98
   25e76:	f008 fc7f 	bl	2e778 <flag_test_and_clear>
   25e7a:	2800      	cmp	r0, #0
   25e7c:	d135      	bne.n	25eea <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   25e7e:	2300      	movs	r3, #0
   25e80:	e9cd 8900 	strd	r8, r9, [sp]
   25e84:	9302      	str	r3, [sp, #8]
   25e86:	f104 0288 	add.w	r2, r4, #136	; 0x88
   25e8a:	4639      	mov	r1, r7
   25e8c:	4838      	ldr	r0, [pc, #224]	; (25f70 <work_queue_main+0x128>)
   25e8e:	f000 fcdb 	bl	26848 <z_sched_wait>
			continue;
   25e92:	e7e2      	b.n	25e5a <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25e94:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   25e98:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   25e9a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25e9e:	4295      	cmp	r5, r2
   25ea0:	d101      	bne.n	25ea6 <work_queue_main+0x5e>
	list->tail = node;
   25ea2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   25ea6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   25eaa:	f043 0302 	orr.w	r3, r3, #2
   25eae:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   25eb2:	68eb      	ldr	r3, [r5, #12]
   25eb4:	f023 0304 	bic.w	r3, r3, #4
   25eb8:	f043 0301 	orr.w	r3, r3, #1
   25ebc:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   25ebe:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   25ec0:	f387 8811 	msr	BASEPRI, r7
   25ec4:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   25ec8:	4628      	mov	r0, r5
   25eca:	4798      	blx	r3
	__asm__ volatile(
   25ecc:	f04f 0320 	mov.w	r3, #32
   25ed0:	f3ef 8b11 	mrs	fp, BASEPRI
   25ed4:	f383 8812 	msr	BASEPRI_MAX, r3
   25ed8:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   25edc:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25ede:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   25ee0:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25ee4:	d40b      	bmi.n	25efe <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   25ee6:	60ea      	str	r2, [r5, #12]
   25ee8:	e00e      	b.n	25f08 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   25eea:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   25eee:	2200      	movs	r2, #0
   25ef0:	2101      	movs	r1, #1
   25ef2:	4628      	mov	r0, r5
   25ef4:	f008 fe01 	bl	2eafa <z_sched_wake>
   25ef8:	2800      	cmp	r0, #0
   25efa:	d1f8      	bne.n	25eee <work_queue_main+0xa6>
   25efc:	e7bf      	b.n	25e7e <work_queue_main+0x36>
	return list->head;
   25efe:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   25f00:	f023 0303 	bic.w	r3, r3, #3
   25f04:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   25f06:	b970      	cbnz	r0, 25f26 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   25f08:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   25f0c:	f023 0302 	bic.w	r3, r3, #2
   25f10:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   25f14:	f38b 8811 	msr	BASEPRI, fp
   25f18:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   25f1c:	05d8      	lsls	r0, r3, #23
   25f1e:	d49c      	bmi.n	25e5a <work_queue_main+0x12>
	z_impl_k_yield();
   25f20:	f000 fb88 	bl	26634 <z_impl_k_yield>
}
   25f24:	e799      	b.n	25e5a <work_queue_main+0x12>
	return node->next;
   25f26:	2700      	movs	r7, #0
   25f28:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   25f2c:	463b      	mov	r3, r7
		if (wc->work == work) {
   25f2e:	6842      	ldr	r2, [r0, #4]
   25f30:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   25f32:	4601      	mov	r1, r0
		if (wc->work == work) {
   25f34:	d10c      	bne.n	25f50 <work_queue_main+0x108>
	return node->next;
   25f36:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   25f38:	b997      	cbnz	r7, 25f60 <work_queue_main+0x118>
   25f3a:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   25f3c:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   25f3e:	4282      	cmp	r2, r0
   25f40:	d100      	bne.n	25f44 <work_queue_main+0xfc>
	list->tail = node;
   25f42:	6071      	str	r1, [r6, #4]
	parent->next = child;
   25f44:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   25f48:	f7ff ff16 	bl	25d78 <z_impl_k_sem_give>
}
   25f4c:	4639      	mov	r1, r7
   25f4e:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   25f50:	f1ba 0f00 	cmp.w	sl, #0
   25f54:	d0d8      	beq.n	25f08 <work_queue_main+0xc0>
	return node->next;
   25f56:	4650      	mov	r0, sl
   25f58:	460f      	mov	r7, r1
   25f5a:	f8da a000 	ldr.w	sl, [sl]
   25f5e:	e7e6      	b.n	25f2e <work_queue_main+0xe6>
	return list->tail;
   25f60:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   25f62:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   25f64:	4290      	cmp	r0, r2
	list->tail = node;
   25f66:	bf08      	it	eq
   25f68:	6077      	streq	r7, [r6, #4]
}
   25f6a:	e7eb      	b.n	25f44 <work_queue_main+0xfc>
   25f6c:	20002c9c 	.word	0x20002c9c
   25f70:	2000319f 	.word	0x2000319f

00025f74 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   25f74:	68c3      	ldr	r3, [r0, #12]
{
   25f76:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   25f78:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   25f7c:	079b      	lsls	r3, r3, #30
{
   25f7e:	4605      	mov	r5, r0
   25f80:	460c      	mov	r4, r1
	if (ret) {
   25f82:	d50d      	bpl.n	25fa0 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   25f84:	2201      	movs	r2, #1
   25f86:	2100      	movs	r1, #0
   25f88:	f104 0008 	add.w	r0, r4, #8
   25f8c:	f008 fbe4 	bl	2e758 <z_impl_k_sem_init>
	parent->next = child;
   25f90:	2300      	movs	r3, #0
   25f92:	6023      	str	r3, [r4, #0]
	return list->tail;
   25f94:	4b05      	ldr	r3, [pc, #20]	; (25fac <cancel_sync_locked+0x38>)
	canceler->work = work;
   25f96:	6065      	str	r5, [r4, #4]
   25f98:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   25f9a:	b91a      	cbnz	r2, 25fa4 <cancel_sync_locked+0x30>
	list->head = node;
   25f9c:	e9c3 4400 	strd	r4, r4, [r3]
}
   25fa0:	4630      	mov	r0, r6
   25fa2:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   25fa4:	6014      	str	r4, [r2, #0]
	list->tail = node;
   25fa6:	605c      	str	r4, [r3, #4]
}
   25fa8:	e7fa      	b.n	25fa0 <cancel_sync_locked+0x2c>
   25faa:	bf00      	nop
   25fac:	20002c9c 	.word	0x20002c9c

00025fb0 <submit_to_queue_locked>:
{
   25fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   25fb2:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25fb4:	079a      	lsls	r2, r3, #30
{
   25fb6:	4604      	mov	r4, r0
   25fb8:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25fba:	f3c3 0540 	ubfx	r5, r3, #1, #1
   25fbe:	d41f      	bmi.n	26000 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   25fc0:	075f      	lsls	r7, r3, #29
   25fc2:	d41f      	bmi.n	26004 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   25fc4:	680a      	ldr	r2, [r1, #0]
   25fc6:	b90a      	cbnz	r2, 25fcc <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   25fc8:	6882      	ldr	r2, [r0, #8]
   25fca:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   25fcc:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   25fce:	bf44      	itt	mi
   25fd0:	68a3      	ldrmi	r3, [r4, #8]
   25fd2:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   25fd4:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   25fd6:	bf4c      	ite	mi
   25fd8:	2502      	movmi	r5, #2
		ret = 1;
   25fda:	2501      	movpl	r5, #1
	if (queue == NULL) {
   25fdc:	b37f      	cbz	r7, 2603e <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   25fde:	4b1b      	ldr	r3, [pc, #108]	; (2604c <submit_to_queue_locked+0x9c>)
   25fe0:	689b      	ldr	r3, [r3, #8]
   25fe2:	42bb      	cmp	r3, r7
   25fe4:	d111      	bne.n	2600a <submit_to_queue_locked+0x5a>
   25fe6:	f008 fac9 	bl	2e57c <k_is_in_isr>
   25fea:	f080 0001 	eor.w	r0, r0, #1
   25fee:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   25ff0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   25ff4:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   25ff6:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   25ffa:	d523      	bpl.n	26044 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   25ffc:	b13a      	cbz	r2, 2600e <submit_to_queue_locked+0x5e>
   25ffe:	b940      	cbnz	r0, 26012 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   26000:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   26004:	2300      	movs	r3, #0
   26006:	6033      	str	r3, [r6, #0]
	return ret;
   26008:	e013      	b.n	26032 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2600a:	2000      	movs	r0, #0
   2600c:	e7f0      	b.n	25ff0 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   2600e:	071b      	lsls	r3, r3, #28
   26010:	d4f6      	bmi.n	26000 <submit_to_queue_locked+0x50>
	parent->next = child;
   26012:	2300      	movs	r3, #0
   26014:	6023      	str	r3, [r4, #0]
	return list->tail;
   26016:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   2601a:	b963      	cbnz	r3, 26036 <submit_to_queue_locked+0x86>
	list->head = node;
   2601c:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   26020:	4638      	mov	r0, r7
   26022:	f008 fbc2 	bl	2e7aa <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   26026:	68e3      	ldr	r3, [r4, #12]
   26028:	f043 0304 	orr.w	r3, r3, #4
   2602c:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   2602e:	6833      	ldr	r3, [r6, #0]
   26030:	60a3      	str	r3, [r4, #8]
}
   26032:	4628      	mov	r0, r5
   26034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   26036:	601c      	str	r4, [r3, #0]
	list->tail = node;
   26038:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   2603c:	e7f0      	b.n	26020 <submit_to_queue_locked+0x70>
		return -EINVAL;
   2603e:	f06f 0515 	mvn.w	r5, #21
   26042:	e7df      	b.n	26004 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   26044:	f06f 0512 	mvn.w	r5, #18
   26048:	e7dc      	b.n	26004 <submit_to_queue_locked+0x54>
   2604a:	bf00      	nop
   2604c:	20002c74 	.word	0x20002c74

00026050 <k_work_submit>:
{
   26050:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   26052:	4801      	ldr	r0, [pc, #4]	; (26058 <k_work_submit+0x8>)
   26054:	f008 bc09 	b.w	2e86a <k_work_submit_to_queue>
   26058:	20001500 	.word	0x20001500

0002605c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   2605c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2605e:	b089      	sub	sp, #36	; 0x24
   26060:	4604      	mov	r4, r0
	list->head = NULL;
   26062:	2000      	movs	r0, #0
	list->tail = NULL;
   26064:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   26068:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2606a:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   2606e:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   26072:	f104 0090 	add.w	r0, r4, #144	; 0x90
   26076:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   2607a:	b31d      	cbz	r5, 260c4 <k_work_queue_start+0x68>
   2607c:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   2607e:	2800      	cmp	r0, #0
   26080:	f240 1001 	movw	r0, #257	; 0x101
   26084:	bf08      	it	eq
   26086:	2001      	moveq	r0, #1
	*flagp = flags;
   26088:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2608c:	2000      	movs	r0, #0
   2608e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   26092:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   26096:	e9cd 3003 	strd	r3, r0, [sp, #12]
   2609a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   2609e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   260a2:	4b09      	ldr	r3, [pc, #36]	; (260c8 <k_work_queue_start+0x6c>)
   260a4:	9400      	str	r4, [sp, #0]
   260a6:	4620      	mov	r0, r4
   260a8:	f7ff fcd4 	bl	25a54 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   260ac:	b125      	cbz	r5, 260b8 <k_work_queue_start+0x5c>
   260ae:	6829      	ldr	r1, [r5, #0]
   260b0:	b111      	cbz	r1, 260b8 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   260b2:	4620      	mov	r0, r4
   260b4:	f008 fa68 	bl	2e588 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   260b8:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   260ba:	b009      	add	sp, #36	; 0x24
   260bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   260c0:	f008 ba65 	b.w	2e58e <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   260c4:	2001      	movs	r0, #1
   260c6:	e7df      	b.n	26088 <k_work_queue_start+0x2c>
   260c8:	00025e49 	.word	0x00025e49

000260cc <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   260cc:	b513      	push	{r0, r1, r4, lr}
   260ce:	9001      	str	r0, [sp, #4]
   260d0:	4608      	mov	r0, r1
	__asm__ volatile(
   260d2:	f04f 0120 	mov.w	r1, #32
   260d6:	f3ef 8411 	mrs	r4, BASEPRI
   260da:	f381 8812 	msr	BASEPRI_MAX, r1
   260de:	f3bf 8f6f 	isb	sy
	return *flagp;
   260e2:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   260e4:	f011 0f0e 	tst.w	r1, #14
   260e8:	d116      	bne.n	26118 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   260ea:	ea53 0c02 	orrs.w	ip, r3, r2
   260ee:	d108      	bne.n	26102 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   260f0:	a901      	add	r1, sp, #4
   260f2:	f7ff ff5d 	bl	25fb0 <submit_to_queue_locked>
	__asm__ volatile(
   260f6:	f384 8811 	msr	BASEPRI, r4
   260fa:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   260fe:	b002      	add	sp, #8
   26100:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   26102:	f041 0108 	orr.w	r1, r1, #8
   26106:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   26108:	9901      	ldr	r1, [sp, #4]
   2610a:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2610c:	3010      	adds	r0, #16
   2610e:	4903      	ldr	r1, [pc, #12]	; (2611c <k_work_schedule_for_queue+0x50>)
   26110:	f000 fc10 	bl	26934 <z_add_timeout>
	return ret;
   26114:	2001      	movs	r0, #1
   26116:	e7ee      	b.n	260f6 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   26118:	2000      	movs	r0, #0
   2611a:	e7ec      	b.n	260f6 <k_work_schedule_for_queue+0x2a>
   2611c:	0002e81b 	.word	0x0002e81b

00026120 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   26120:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   26122:	4801      	ldr	r0, [pc, #4]	; (26128 <k_work_schedule+0x8>)
   26124:	f7ff bfd2 	b.w	260cc <k_work_schedule_for_queue>
   26128:	20001500 	.word	0x20001500

0002612c <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   2612c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2612e:	460c      	mov	r4, r1
   26130:	9001      	str	r0, [sp, #4]
   26132:	4616      	mov	r6, r2
   26134:	461d      	mov	r5, r3
	__asm__ volatile(
   26136:	f04f 0320 	mov.w	r3, #32
   2613a:	f3ef 8711 	mrs	r7, BASEPRI
   2613e:	f383 8812 	msr	BASEPRI_MAX, r3
   26142:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   26146:	4608      	mov	r0, r1
   26148:	f008 fb21 	bl	2e78e <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2614c:	ea55 0306 	orrs.w	r3, r5, r6
   26150:	d109      	bne.n	26166 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   26152:	a901      	add	r1, sp, #4
   26154:	4620      	mov	r0, r4
   26156:	f7ff ff2b 	bl	25fb0 <submit_to_queue_locked>
	__asm__ volatile(
   2615a:	f387 8811 	msr	BASEPRI, r7
   2615e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   26162:	b003      	add	sp, #12
   26164:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   26166:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   26168:	4906      	ldr	r1, [pc, #24]	; (26184 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   2616a:	f043 0308 	orr.w	r3, r3, #8
   2616e:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   26170:	9b01      	ldr	r3, [sp, #4]
   26172:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   26174:	f104 0010 	add.w	r0, r4, #16
   26178:	4632      	mov	r2, r6
   2617a:	462b      	mov	r3, r5
   2617c:	f000 fbda 	bl	26934 <z_add_timeout>
	return ret;
   26180:	2001      	movs	r0, #1
   26182:	e7ea      	b.n	2615a <k_work_reschedule_for_queue+0x2e>
   26184:	0002e81b 	.word	0x0002e81b

00026188 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   26188:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   2618a:	4801      	ldr	r0, [pc, #4]	; (26190 <k_work_reschedule+0x8>)
   2618c:	f7ff bfce 	b.w	2612c <k_work_reschedule_for_queue>
   26190:	20001500 	.word	0x20001500

00026194 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   26194:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   26196:	4d07      	ldr	r5, [pc, #28]	; (261b4 <z_reset_time_slice+0x20>)
   26198:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   2619a:	b154      	cbz	r4, 261b2 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   2619c:	f7fe fbe6 	bl	2496c <sys_clock_elapsed>
   261a0:	4b05      	ldr	r3, [pc, #20]	; (261b8 <z_reset_time_slice+0x24>)
   261a2:	4404      	add	r4, r0
   261a4:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   261a6:	6828      	ldr	r0, [r5, #0]
   261a8:	2100      	movs	r1, #0
	}
}
   261aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   261ae:	f008 bce7 	b.w	2eb80 <z_set_timeout_expiry>
}
   261b2:	bd38      	pop	{r3, r4, r5, pc}
   261b4:	20002cac 	.word	0x20002cac
   261b8:	20002c74 	.word	0x20002c74

000261bc <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   261bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   261be:	4604      	mov	r4, r0
   261c0:	460d      	mov	r5, r1
	__asm__ volatile(
   261c2:	f04f 0320 	mov.w	r3, #32
   261c6:	f3ef 8711 	mrs	r7, BASEPRI
   261ca:	f383 8812 	msr	BASEPRI_MAX, r3
   261ce:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   261d2:	4e10      	ldr	r6, [pc, #64]	; (26214 <k_sched_time_slice_set+0x58>)
   261d4:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   261d6:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   261da:	f240 30e7 	movw	r0, #999	; 0x3e7
   261de:	6131      	str	r1, [r6, #16]
   261e0:	2300      	movs	r3, #0
   261e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   261e6:	fbe4 010c 	umlal	r0, r1, r4, ip
   261ea:	f7e6 f889 	bl	c300 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   261ee:	2c00      	cmp	r4, #0
   261f0:	4b09      	ldr	r3, [pc, #36]	; (26218 <k_sched_time_slice_set+0x5c>)
   261f2:	dc0a      	bgt.n	2620a <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
   261f4:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   261f6:	4b09      	ldr	r3, [pc, #36]	; (2621c <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   261f8:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
   261fa:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   261fc:	f7ff ffca 	bl	26194 <z_reset_time_slice>
	__asm__ volatile(
   26200:	f387 8811 	msr	BASEPRI, r7
   26204:	f3bf 8f6f 	isb	sy
	}
}
   26208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
   2620a:	2802      	cmp	r0, #2
   2620c:	bfb8      	it	lt
   2620e:	2002      	movlt	r0, #2
   26210:	e7f0      	b.n	261f4 <k_sched_time_slice_set+0x38>
   26212:	bf00      	nop
   26214:	20002c74 	.word	0x20002c74
   26218:	20002cac 	.word	0x20002cac
   2621c:	20002ca8 	.word	0x20002ca8

00026220 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   26220:	b949      	cbnz	r1, 26236 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   26222:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   26226:	b930      	cbnz	r0, 26236 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   26228:	4b05      	ldr	r3, [pc, #20]	; (26240 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   2622a:	69da      	ldr	r2, [r3, #28]
   2622c:	689b      	ldr	r3, [r3, #8]
   2622e:	429a      	cmp	r2, r3
   26230:	d001      	beq.n	26236 <z_reschedule+0x16>
	ret = arch_swap(key);
   26232:	f7e9 b979 	b.w	f528 <arch_swap>
   26236:	f381 8811 	msr	BASEPRI, r1
   2623a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   2623e:	4770      	bx	lr
   26240:	20002c74 	.word	0x20002c74

00026244 <k_sched_lock>:
	__asm__ volatile(
   26244:	f04f 0320 	mov.w	r3, #32
   26248:	f3ef 8111 	mrs	r1, BASEPRI
   2624c:	f383 8812 	msr	BASEPRI_MAX, r3
   26250:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   26254:	4b04      	ldr	r3, [pc, #16]	; (26268 <k_sched_lock+0x24>)
   26256:	689a      	ldr	r2, [r3, #8]
   26258:	7bd3      	ldrb	r3, [r2, #15]
   2625a:	3b01      	subs	r3, #1
   2625c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   2625e:	f381 8811 	msr	BASEPRI, r1
   26262:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   26266:	4770      	bx	lr
   26268:	20002c74 	.word	0x20002c74

0002626c <update_cache>:
{
   2626c:	b538      	push	{r3, r4, r5, lr}
   2626e:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   26270:	480c      	ldr	r0, [pc, #48]	; (262a4 <update_cache+0x38>)
   26272:	4d0d      	ldr	r5, [pc, #52]	; (262a8 <update_cache+0x3c>)
   26274:	f008 fbb7 	bl	2e9e6 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   26278:	4604      	mov	r4, r0
   2627a:	b900      	cbnz	r0, 2627e <update_cache+0x12>
   2627c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   2627e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   26280:	b94a      	cbnz	r2, 26296 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   26282:	7b5a      	ldrb	r2, [r3, #13]
   26284:	06d2      	lsls	r2, r2, #27
   26286:	d106      	bne.n	26296 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   26288:	69a2      	ldr	r2, [r4, #24]
   2628a:	b922      	cbnz	r2, 26296 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   2628c:	89da      	ldrh	r2, [r3, #14]
   2628e:	2a7f      	cmp	r2, #127	; 0x7f
   26290:	d901      	bls.n	26296 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   26292:	61eb      	str	r3, [r5, #28]
}
   26294:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   26296:	429c      	cmp	r4, r3
   26298:	d002      	beq.n	262a0 <update_cache+0x34>
			z_reset_time_slice(thread);
   2629a:	4620      	mov	r0, r4
   2629c:	f7ff ff7a 	bl	26194 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   262a0:	61ec      	str	r4, [r5, #28]
}
   262a2:	e7f7      	b.n	26294 <update_cache+0x28>
   262a4:	20002c94 	.word	0x20002c94
   262a8:	20002c74 	.word	0x20002c74

000262ac <move_thread_to_end_of_prio_q>:
{
   262ac:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   262ae:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   262b2:	7b43      	ldrb	r3, [r0, #13]
   262b4:	2a00      	cmp	r2, #0
{
   262b6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   262b8:	da04      	bge.n	262c4 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   262ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   262be:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   262c0:	f008 fb3c 	bl	2e93c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   262c4:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   262c6:	4a15      	ldr	r2, [pc, #84]	; (2631c <move_thread_to_end_of_prio_q+0x70>)
   262c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   262cc:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   262ce:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   262d2:	f102 0520 	add.w	r5, r2, #32
   262d6:	42ab      	cmp	r3, r5
   262d8:	d01b      	beq.n	26312 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   262da:	b1d3      	cbz	r3, 26312 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   262dc:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   262e0:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   262e4:	4286      	cmp	r6, r0
   262e6:	d00f      	beq.n	26308 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   262e8:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   262ea:	2800      	cmp	r0, #0
   262ec:	dd0c      	ble.n	26308 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   262ee:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   262f0:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   262f4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   262f6:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   262f8:	6890      	ldr	r0, [r2, #8]
   262fa:	1a43      	subs	r3, r0, r1
   262fc:	4258      	negs	r0, r3
}
   262fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   26302:	4158      	adcs	r0, r3
   26304:	f7ff bfb2 	b.w	2626c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   26308:	42a3      	cmp	r3, r4
   2630a:	d002      	beq.n	26312 <move_thread_to_end_of_prio_q+0x66>
   2630c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2630e:	2b00      	cmp	r3, #0
   26310:	d1e6      	bne.n	262e0 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   26312:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   26316:	6021      	str	r1, [r4, #0]
	list->tail = node;
   26318:	6251      	str	r1, [r2, #36]	; 0x24
}
   2631a:	e7ed      	b.n	262f8 <move_thread_to_end_of_prio_q+0x4c>
   2631c:	20002c74 	.word	0x20002c74

00026320 <z_time_slice>:
{
   26320:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   26322:	f04f 0320 	mov.w	r3, #32
   26326:	f3ef 8511 	mrs	r5, BASEPRI
   2632a:	f383 8812 	msr	BASEPRI_MAX, r3
   2632e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   26332:	4b17      	ldr	r3, [pc, #92]	; (26390 <z_time_slice+0x70>)
   26334:	4a17      	ldr	r2, [pc, #92]	; (26394 <z_time_slice+0x74>)
   26336:	689c      	ldr	r4, [r3, #8]
   26338:	6811      	ldr	r1, [r2, #0]
   2633a:	428c      	cmp	r4, r1
   2633c:	d107      	bne.n	2634e <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   2633e:	4620      	mov	r0, r4
   26340:	f7ff ff28 	bl	26194 <z_reset_time_slice>
	__asm__ volatile(
   26344:	f385 8811 	msr	BASEPRI, r5
   26348:	f3bf 8f6f 	isb	sy
}
   2634c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   2634e:	2100      	movs	r1, #0
   26350:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   26352:	4a11      	ldr	r2, [pc, #68]	; (26398 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   26354:	6812      	ldr	r2, [r2, #0]
   26356:	b1c2      	cbz	r2, 2638a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   26358:	89e2      	ldrh	r2, [r4, #14]
   2635a:	2a7f      	cmp	r2, #127	; 0x7f
   2635c:	d815      	bhi.n	2638a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   2635e:	7b62      	ldrb	r2, [r4, #13]
   26360:	06d2      	lsls	r2, r2, #27
   26362:	d112      	bne.n	2638a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   26364:	4a0d      	ldr	r2, [pc, #52]	; (2639c <z_time_slice+0x7c>)
   26366:	f994 100e 	ldrsb.w	r1, [r4, #14]
   2636a:	6812      	ldr	r2, [r2, #0]
   2636c:	4291      	cmp	r1, r2
   2636e:	db0c      	blt.n	2638a <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
   26370:	4a0b      	ldr	r2, [pc, #44]	; (263a0 <z_time_slice+0x80>)
   26372:	4294      	cmp	r4, r2
   26374:	d009      	beq.n	2638a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   26376:	691a      	ldr	r2, [r3, #16]
   26378:	4282      	cmp	r2, r0
   2637a:	dc03      	bgt.n	26384 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   2637c:	4620      	mov	r0, r4
   2637e:	f7ff ff95 	bl	262ac <move_thread_to_end_of_prio_q>
   26382:	e7dc      	b.n	2633e <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   26384:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   26386:	611a      	str	r2, [r3, #16]
   26388:	e7dc      	b.n	26344 <z_time_slice+0x24>
   2638a:	2200      	movs	r2, #0
   2638c:	e7fb      	b.n	26386 <z_time_slice+0x66>
   2638e:	bf00      	nop
   26390:	20002c74 	.word	0x20002c74
   26394:	20002ca4 	.word	0x20002ca4
   26398:	20002cac 	.word	0x20002cac
   2639c:	20002ca8 	.word	0x20002ca8
   263a0:	20001400 	.word	0x20001400

000263a4 <ready_thread>:
{
   263a4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   263a6:	f990 200d 	ldrsb.w	r2, [r0, #13]
   263aa:	7b43      	ldrb	r3, [r0, #13]
   263ac:	2a00      	cmp	r2, #0
   263ae:	db2a      	blt.n	26406 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   263b0:	06da      	lsls	r2, r3, #27
   263b2:	d128      	bne.n	26406 <ready_thread+0x62>
   263b4:	6982      	ldr	r2, [r0, #24]
   263b6:	bb32      	cbnz	r2, 26406 <ready_thread+0x62>
	return list->head == list;
   263b8:	4a14      	ldr	r2, [pc, #80]	; (2640c <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   263ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
   263be:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   263c0:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   263c4:	f102 0520 	add.w	r5, r2, #32
   263c8:	42ab      	cmp	r3, r5
   263ca:	d017      	beq.n	263fc <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   263cc:	b1b3      	cbz	r3, 263fc <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   263ce:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   263d2:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   263d6:	428e      	cmp	r6, r1
   263d8:	d00b      	beq.n	263f2 <ready_thread+0x4e>
		return b2 - b1;
   263da:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   263dc:	2900      	cmp	r1, #0
   263de:	dd08      	ble.n	263f2 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   263e0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   263e2:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   263e6:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   263e8:	6058      	str	r0, [r3, #4]
}
   263ea:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   263ec:	2000      	movs	r0, #0
   263ee:	f7ff bf3d 	b.w	2626c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   263f2:	42a3      	cmp	r3, r4
   263f4:	d002      	beq.n	263fc <ready_thread+0x58>
   263f6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   263f8:	2b00      	cmp	r3, #0
   263fa:	d1ea      	bne.n	263d2 <ready_thread+0x2e>
	node->prev = tail;
   263fc:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   26400:	6020      	str	r0, [r4, #0]
	list->tail = node;
   26402:	6250      	str	r0, [r2, #36]	; 0x24
}
   26404:	e7f1      	b.n	263ea <ready_thread+0x46>
}
   26406:	bc70      	pop	{r4, r5, r6}
   26408:	4770      	bx	lr
   2640a:	bf00      	nop
   2640c:	20002c74 	.word	0x20002c74

00026410 <z_sched_start>:
{
   26410:	b510      	push	{r4, lr}
	__asm__ volatile(
   26412:	f04f 0220 	mov.w	r2, #32
   26416:	f3ef 8411 	mrs	r4, BASEPRI
   2641a:	f382 8812 	msr	BASEPRI_MAX, r2
   2641e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   26422:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   26424:	0751      	lsls	r1, r2, #29
   26426:	d404      	bmi.n	26432 <z_sched_start+0x22>
	__asm__ volatile(
   26428:	f384 8811 	msr	BASEPRI, r4
   2642c:	f3bf 8f6f 	isb	sy
}
   26430:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   26432:	f022 0204 	bic.w	r2, r2, #4
   26436:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   26438:	f7ff ffb4 	bl	263a4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   2643c:	4621      	mov	r1, r4
   2643e:	4802      	ldr	r0, [pc, #8]	; (26448 <z_sched_start+0x38>)
}
   26440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   26444:	f7ff beec 	b.w	26220 <z_reschedule>
   26448:	2000319f 	.word	0x2000319f

0002644c <unready_thread>:
{
   2644c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   2644e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   26452:	7b43      	ldrb	r3, [r0, #13]
   26454:	2a00      	cmp	r2, #0
{
   26456:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   26458:	da04      	bge.n	26464 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2645a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2645e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   26460:	f008 fa6c 	bl	2e93c <sys_dlist_remove>
	update_cache(thread == _current);
   26464:	4b04      	ldr	r3, [pc, #16]	; (26478 <unready_thread+0x2c>)
   26466:	6898      	ldr	r0, [r3, #8]
   26468:	1a43      	subs	r3, r0, r1
   2646a:	4258      	negs	r0, r3
   2646c:	4158      	adcs	r0, r3
}
   2646e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   26472:	f7ff befb 	b.w	2626c <update_cache>
   26476:	bf00      	nop
   26478:	20002c74 	.word	0x20002c74

0002647c <pend>:
{
   2647c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26480:	4606      	mov	r6, r0
   26482:	4615      	mov	r5, r2
   26484:	461c      	mov	r4, r3
	__asm__ volatile(
   26486:	f04f 0320 	mov.w	r3, #32
   2648a:	f3ef 8711 	mrs	r7, BASEPRI
   2648e:	f383 8812 	msr	BASEPRI_MAX, r3
   26492:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   26496:	f008 fade 	bl	2ea56 <add_to_waitq_locked>
	__asm__ volatile(
   2649a:	f387 8811 	msr	BASEPRI, r7
   2649e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   264a2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   264a6:	bf08      	it	eq
   264a8:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   264ac:	d008      	beq.n	264c0 <pend+0x44>
   264ae:	462a      	mov	r2, r5
   264b0:	4623      	mov	r3, r4
   264b2:	f106 0018 	add.w	r0, r6, #24
   264b6:	4903      	ldr	r1, [pc, #12]	; (264c4 <pend+0x48>)
}
   264b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   264bc:	f000 ba3a 	b.w	26934 <z_add_timeout>
   264c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   264c4:	0002ea13 	.word	0x0002ea13

000264c8 <z_pend_curr>:
{
   264c8:	b510      	push	{r4, lr}
	pending_current = _current;
   264ca:	4b07      	ldr	r3, [pc, #28]	; (264e8 <z_pend_curr+0x20>)
   264cc:	6898      	ldr	r0, [r3, #8]
   264ce:	4b07      	ldr	r3, [pc, #28]	; (264ec <z_pend_curr+0x24>)
{
   264d0:	460c      	mov	r4, r1
	pending_current = _current;
   264d2:	6018      	str	r0, [r3, #0]
{
   264d4:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   264d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   264da:	f7ff ffcf 	bl	2647c <pend>
   264de:	4620      	mov	r0, r4
}
   264e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   264e4:	f7e9 b820 	b.w	f528 <arch_swap>
   264e8:	20002c74 	.word	0x20002c74
   264ec:	20002ca4 	.word	0x20002ca4

000264f0 <z_set_prio>:
{
   264f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   264f2:	4604      	mov	r4, r0
	__asm__ volatile(
   264f4:	f04f 0320 	mov.w	r3, #32
   264f8:	f3ef 8611 	mrs	r6, BASEPRI
   264fc:	f383 8812 	msr	BASEPRI_MAX, r3
   26500:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   26504:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   26506:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   26508:	b249      	sxtb	r1, r1
   2650a:	d133      	bne.n	26574 <z_set_prio+0x84>
		if (need_sched) {
   2650c:	6982      	ldr	r2, [r0, #24]
   2650e:	bb8a      	cbnz	r2, 26574 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   26514:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   26516:	f008 fa11 	bl	2e93c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2651a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   2651c:	4a17      	ldr	r2, [pc, #92]	; (2657c <z_set_prio+0x8c>)
				thread->base.prio = prio;
   2651e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   26520:	f063 037f 	orn	r3, r3, #127	; 0x7f
   26524:	7343      	strb	r3, [r0, #13]
   26526:	4610      	mov	r0, r2
   26528:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2652c:	4283      	cmp	r3, r0
   2652e:	d01b      	beq.n	26568 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26530:	b1d3      	cbz	r3, 26568 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
   26532:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
   26534:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   26538:	42a9      	cmp	r1, r5
   2653a:	d010      	beq.n	2655e <z_set_prio+0x6e>
		return b2 - b1;
   2653c:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   2653e:	2d00      	cmp	r5, #0
   26540:	dd0d      	ble.n	2655e <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   26542:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   26544:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   26548:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2654a:	605c      	str	r4, [r3, #4]
			update_cache(1);
   2654c:	2001      	movs	r0, #1
   2654e:	f7ff fe8d 	bl	2626c <update_cache>
   26552:	2001      	movs	r0, #1
	__asm__ volatile(
   26554:	f386 8811 	msr	BASEPRI, r6
   26558:	f3bf 8f6f 	isb	sy
}
   2655c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2655e:	42bb      	cmp	r3, r7
   26560:	d002      	beq.n	26568 <z_set_prio+0x78>
   26562:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26564:	2b00      	cmp	r3, #0
   26566:	d1e5      	bne.n	26534 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   26568:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
   2656a:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   2656e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   26570:	6254      	str	r4, [r2, #36]	; 0x24
}
   26572:	e7eb      	b.n	2654c <z_set_prio+0x5c>
			thread->base.prio = prio;
   26574:	73a1      	strb	r1, [r4, #14]
   26576:	2000      	movs	r0, #0
   26578:	e7ec      	b.n	26554 <z_set_prio+0x64>
   2657a:	bf00      	nop
   2657c:	20002c74 	.word	0x20002c74

00026580 <z_impl_k_thread_suspend>:
{
   26580:	b570      	push	{r4, r5, r6, lr}
   26582:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   26584:	3018      	adds	r0, #24
   26586:	f008 fad5 	bl	2eb34 <z_abort_timeout>
	__asm__ volatile(
   2658a:	f04f 0320 	mov.w	r3, #32
   2658e:	f3ef 8611 	mrs	r6, BASEPRI
   26592:	f383 8812 	msr	BASEPRI_MAX, r3
   26596:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   2659a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   2659e:	7b63      	ldrb	r3, [r4, #13]
   265a0:	2a00      	cmp	r2, #0
   265a2:	da05      	bge.n	265b0 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   265a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   265a8:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   265aa:	4620      	mov	r0, r4
   265ac:	f008 f9c6 	bl	2e93c <sys_dlist_remove>
		update_cache(thread == _current);
   265b0:	4d0b      	ldr	r5, [pc, #44]	; (265e0 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   265b2:	7b63      	ldrb	r3, [r4, #13]
   265b4:	68a8      	ldr	r0, [r5, #8]
   265b6:	f043 0310 	orr.w	r3, r3, #16
   265ba:	7363      	strb	r3, [r4, #13]
   265bc:	1b03      	subs	r3, r0, r4
   265be:	4258      	negs	r0, r3
   265c0:	4158      	adcs	r0, r3
   265c2:	f7ff fe53 	bl	2626c <update_cache>
	__asm__ volatile(
   265c6:	f386 8811 	msr	BASEPRI, r6
   265ca:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   265ce:	68ab      	ldr	r3, [r5, #8]
   265d0:	42a3      	cmp	r3, r4
   265d2:	d103      	bne.n	265dc <z_impl_k_thread_suspend+0x5c>
}
   265d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   265d8:	f008 b9fb 	b.w	2e9d2 <z_reschedule_unlocked>
}
   265dc:	bd70      	pop	{r4, r5, r6, pc}
   265de:	bf00      	nop
   265e0:	20002c74 	.word	0x20002c74

000265e4 <k_sched_unlock>:
{
   265e4:	b510      	push	{r4, lr}
	__asm__ volatile(
   265e6:	f04f 0320 	mov.w	r3, #32
   265ea:	f3ef 8411 	mrs	r4, BASEPRI
   265ee:	f383 8812 	msr	BASEPRI_MAX, r3
   265f2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   265f6:	4b08      	ldr	r3, [pc, #32]	; (26618 <k_sched_unlock+0x34>)
   265f8:	689a      	ldr	r2, [r3, #8]
   265fa:	7bd3      	ldrb	r3, [r2, #15]
   265fc:	3301      	adds	r3, #1
   265fe:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   26600:	2000      	movs	r0, #0
   26602:	f7ff fe33 	bl	2626c <update_cache>
	__asm__ volatile(
   26606:	f384 8811 	msr	BASEPRI, r4
   2660a:	f3bf 8f6f 	isb	sy
}
   2660e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   26612:	f008 b9de 	b.w	2e9d2 <z_reschedule_unlocked>
   26616:	bf00      	nop
   26618:	20002c74 	.word	0x20002c74

0002661c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   2661c:	4b04      	ldr	r3, [pc, #16]	; (26630 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   2661e:	2100      	movs	r1, #0
   26620:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   26624:	e9c3 2208 	strd	r2, r2, [r3, #32]
   26628:	4608      	mov	r0, r1
   2662a:	f7ff bdc7 	b.w	261bc <k_sched_time_slice_set>
   2662e:	bf00      	nop
   26630:	20002c74 	.word	0x20002c74

00026634 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   26634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   26636:	f04f 0320 	mov.w	r3, #32
   2663a:	f3ef 8511 	mrs	r5, BASEPRI
   2663e:	f383 8812 	msr	BASEPRI_MAX, r3
   26642:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   26646:	491a      	ldr	r1, [pc, #104]	; (266b0 <z_impl_k_yield+0x7c>)
   26648:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2664a:	7b43      	ldrb	r3, [r0, #13]
   2664c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   26650:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   26652:	f008 f973 	bl	2e93c <sys_dlist_remove>
	}
	queue_thread(_current);
   26656:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   26658:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   2665a:	4608      	mov	r0, r1
   2665c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   26660:	735a      	strb	r2, [r3, #13]
   26662:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26666:	4282      	cmp	r2, r0
   26668:	d01c      	beq.n	266a4 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2666a:	b1da      	cbz	r2, 266a4 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   2666c:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   2666e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   26672:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   26676:	42a6      	cmp	r6, r4
   26678:	d00f      	beq.n	2669a <z_impl_k_yield+0x66>
		return b2 - b1;
   2667a:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   2667c:	2c00      	cmp	r4, #0
   2667e:	dd0c      	ble.n	2669a <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   26680:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   26682:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   26686:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   26688:	6053      	str	r3, [r2, #4]
	update_cache(1);
   2668a:	2001      	movs	r0, #1
   2668c:	f7ff fdee 	bl	2626c <update_cache>
   26690:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   26692:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   26696:	f7e8 bf47 	b.w	f528 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   2669a:	42ba      	cmp	r2, r7
   2669c:	d002      	beq.n	266a4 <z_impl_k_yield+0x70>
   2669e:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   266a0:	2a00      	cmp	r2, #0
   266a2:	d1e6      	bne.n	26672 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   266a4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   266a6:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   266aa:	6013      	str	r3, [r2, #0]
	list->tail = node;
   266ac:	624b      	str	r3, [r1, #36]	; 0x24
}
   266ae:	e7ec      	b.n	2668a <z_impl_k_yield+0x56>
   266b0:	20002c74 	.word	0x20002c74

000266b4 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   266b4:	ea50 0301 	orrs.w	r3, r0, r1
{
   266b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   266bc:	4605      	mov	r5, r0
   266be:	460e      	mov	r6, r1
	if (ticks == 0) {
   266c0:	d103      	bne.n	266ca <z_tick_sleep+0x16>
	z_impl_k_yield();
   266c2:	f7ff ffb7 	bl	26634 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   266c6:	2000      	movs	r0, #0
   266c8:	e033      	b.n	26732 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   266ca:	f06f 0401 	mvn.w	r4, #1
   266ce:	1a24      	subs	r4, r4, r0
   266d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   266d4:	eb63 0301 	sbc.w	r3, r3, r1
   266d8:	2c01      	cmp	r4, #1
   266da:	f173 0300 	sbcs.w	r3, r3, #0
   266de:	da02      	bge.n	266e6 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   266e0:	f008 fa68 	bl	2ebb4 <sys_clock_tick_get_32>
   266e4:	1944      	adds	r4, r0, r5
   266e6:	f04f 0320 	mov.w	r3, #32
   266ea:	f3ef 8811 	mrs	r8, BASEPRI
   266ee:	f383 8812 	msr	BASEPRI_MAX, r3
   266f2:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   266f6:	4f10      	ldr	r7, [pc, #64]	; (26738 <z_tick_sleep+0x84>)
   266f8:	4b10      	ldr	r3, [pc, #64]	; (2673c <z_tick_sleep+0x88>)
   266fa:	68b8      	ldr	r0, [r7, #8]
   266fc:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   266fe:	f7ff fea5 	bl	2644c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   26702:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   26704:	490e      	ldr	r1, [pc, #56]	; (26740 <z_tick_sleep+0x8c>)
   26706:	462a      	mov	r2, r5
   26708:	4633      	mov	r3, r6
   2670a:	3018      	adds	r0, #24
   2670c:	f000 f912 	bl	26934 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   26710:	68ba      	ldr	r2, [r7, #8]
   26712:	7b53      	ldrb	r3, [r2, #13]
   26714:	f043 0310 	orr.w	r3, r3, #16
   26718:	7353      	strb	r3, [r2, #13]
   2671a:	4640      	mov	r0, r8
   2671c:	f7e8 ff04 	bl	f528 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   26720:	f008 fa48 	bl	2ebb4 <sys_clock_tick_get_32>
   26724:	1a20      	subs	r0, r4, r0
   26726:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   2672a:	2801      	cmp	r0, #1
   2672c:	f173 0300 	sbcs.w	r3, r3, #0
   26730:	dbc9      	blt.n	266c6 <z_tick_sleep+0x12>
}
   26732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26736:	bf00      	nop
   26738:	20002c74 	.word	0x20002c74
   2673c:	20002ca4 	.word	0x20002ca4
   26740:	0002ea13 	.word	0x0002ea13

00026744 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26744:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   26748:	bf08      	it	eq
   2674a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2674e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26750:	d106      	bne.n	26760 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   26752:	4b08      	ldr	r3, [pc, #32]	; (26774 <z_impl_k_sleep+0x30>)
   26754:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   26756:	f7ff ff13 	bl	26580 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   2675a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   2675e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   26760:	f7ff ffa8 	bl	266b4 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   26764:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   26768:	fb80 0303 	smull	r0, r3, r0, r3
   2676c:	0bc0      	lsrs	r0, r0, #15
   2676e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   26772:	e7f4      	b.n	2675e <z_impl_k_sleep+0x1a>
   26774:	20002c74 	.word	0x20002c74

00026778 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   26778:	4b01      	ldr	r3, [pc, #4]	; (26780 <z_impl_z_current_get+0x8>)
   2677a:	6898      	ldr	r0, [r3, #8]
   2677c:	4770      	bx	lr
   2677e:	bf00      	nop
   26780:	20002c74 	.word	0x20002c74

00026784 <z_impl_k_is_preempt_thread>:
   26784:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   26788:	b93b      	cbnz	r3, 2679a <z_impl_k_is_preempt_thread+0x16>
   2678a:	4b05      	ldr	r3, [pc, #20]	; (267a0 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   2678c:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
   2678e:	89d8      	ldrh	r0, [r3, #14]
   26790:	287f      	cmp	r0, #127	; 0x7f
   26792:	bf8c      	ite	hi
   26794:	2000      	movhi	r0, #0
   26796:	2001      	movls	r0, #1
   26798:	4770      	bx	lr
   2679a:	2000      	movs	r0, #0
}
   2679c:	4770      	bx	lr
   2679e:	bf00      	nop
   267a0:	20002c74 	.word	0x20002c74

000267a4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   267a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   267a8:	4604      	mov	r4, r0
   267aa:	f04f 0320 	mov.w	r3, #32
   267ae:	f3ef 8611 	mrs	r6, BASEPRI
   267b2:	f383 8812 	msr	BASEPRI_MAX, r3
   267b6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   267ba:	7b43      	ldrb	r3, [r0, #13]
   267bc:	071a      	lsls	r2, r3, #28
   267be:	d505      	bpl.n	267cc <z_thread_abort+0x28>
	__asm__ volatile(
   267c0:	f386 8811 	msr	BASEPRI, r6
   267c4:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   267c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   267cc:	f023 0220 	bic.w	r2, r3, #32
   267d0:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   267d4:	09d2      	lsrs	r2, r2, #7
   267d6:	d120      	bne.n	2681a <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   267d8:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   267da:	68a3      	ldr	r3, [r4, #8]
   267dc:	b113      	cbz	r3, 267e4 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   267de:	4620      	mov	r0, r4
   267e0:	f008 f8b4 	bl	2e94c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   267e4:	f104 0018 	add.w	r0, r4, #24
   267e8:	f008 f9a4 	bl	2eb34 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   267ec:	f104 0758 	add.w	r7, r4, #88	; 0x58
   267f0:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   267f4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   267f6:	42bd      	cmp	r5, r7
   267f8:	d000      	beq.n	267fc <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   267fa:	b9b5      	cbnz	r5, 2682a <z_thread_abort+0x86>
		update_cache(1);
   267fc:	2001      	movs	r0, #1
   267fe:	f7ff fd35 	bl	2626c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   26802:	4b10      	ldr	r3, [pc, #64]	; (26844 <z_thread_abort+0xa0>)
   26804:	689b      	ldr	r3, [r3, #8]
   26806:	42a3      	cmp	r3, r4
   26808:	d1da      	bne.n	267c0 <z_thread_abort+0x1c>
   2680a:	f3ef 8305 	mrs	r3, IPSR
   2680e:	2b00      	cmp	r3, #0
   26810:	d1d6      	bne.n	267c0 <z_thread_abort+0x1c>
   26812:	4630      	mov	r0, r6
   26814:	f7e8 fe88 	bl	f528 <arch_swap>
	return ret;
   26818:	e7d2      	b.n	267c0 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2681a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   2681e:	f043 0308 	orr.w	r3, r3, #8
   26822:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   26824:	f008 f88a 	bl	2e93c <sys_dlist_remove>
}
   26828:	e7d7      	b.n	267da <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   2682a:	4628      	mov	r0, r5
   2682c:	f008 f88e 	bl	2e94c <unpend_thread_no_timeout>
   26830:	f105 0018 	add.w	r0, r5, #24
   26834:	f008 f97e 	bl	2eb34 <z_abort_timeout>
   26838:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   2683c:	4628      	mov	r0, r5
   2683e:	f7ff fdb1 	bl	263a4 <ready_thread>
   26842:	e7d7      	b.n	267f4 <z_thread_abort+0x50>
   26844:	20002c74 	.word	0x20002c74

00026848 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   26848:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2684a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   2684e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   26850:	e9cd 6700 	strd	r6, r7, [sp]
   26854:	f7ff fe38 	bl	264c8 <z_pend_curr>

	if (data != NULL) {
   26858:	b11c      	cbz	r4, 26862 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   2685a:	4b03      	ldr	r3, [pc, #12]	; (26868 <z_sched_wait+0x20>)
   2685c:	689b      	ldr	r3, [r3, #8]
   2685e:	695b      	ldr	r3, [r3, #20]
   26860:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   26862:	b002      	add	sp, #8
   26864:	bdd0      	pop	{r4, r6, r7, pc}
   26866:	bf00      	nop
   26868:	20002c74 	.word	0x20002c74

0002686c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   2686c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   2686e:	4806      	ldr	r0, [pc, #24]	; (26888 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   26870:	4a06      	ldr	r2, [pc, #24]	; (2688c <z_data_copy+0x20>)
   26872:	4907      	ldr	r1, [pc, #28]	; (26890 <z_data_copy+0x24>)
   26874:	1a12      	subs	r2, r2, r0
   26876:	f007 fdf0 	bl	2e45a <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   2687a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   2687e:	4a05      	ldr	r2, [pc, #20]	; (26894 <z_data_copy+0x28>)
   26880:	4905      	ldr	r1, [pc, #20]	; (26898 <z_data_copy+0x2c>)
   26882:	4806      	ldr	r0, [pc, #24]	; (2689c <z_data_copy+0x30>)
   26884:	f007 bde9 	b.w	2e45a <z_early_memcpy>
   26888:	20000000 	.word	0x20000000
   2688c:	20000b04 	.word	0x20000b04
   26890:	00030e14 	.word	0x00030e14
   26894:	00000000 	.word	0x00000000
   26898:	00030e14 	.word	0x00030e14
   2689c:	20000000 	.word	0x20000000

000268a0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   268a0:	4b03      	ldr	r3, [pc, #12]	; (268b0 <elapsed+0x10>)
   268a2:	681b      	ldr	r3, [r3, #0]
   268a4:	b90b      	cbnz	r3, 268aa <elapsed+0xa>
   268a6:	f7fe b861 	b.w	2496c <sys_clock_elapsed>
}
   268aa:	2000      	movs	r0, #0
   268ac:	4770      	bx	lr
   268ae:	bf00      	nop
   268b0:	20002cb0 	.word	0x20002cb0

000268b4 <next_timeout>:
	return list->head == list;
   268b4:	4b10      	ldr	r3, [pc, #64]	; (268f8 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   268b6:	b510      	push	{r4, lr}
   268b8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   268ba:	429c      	cmp	r4, r3
   268bc:	bf08      	it	eq
   268be:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   268c0:	f7ff ffee 	bl	268a0 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   268c4:	b1a4      	cbz	r4, 268f0 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   268c6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   268ca:	1a1b      	subs	r3, r3, r0
   268cc:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   268d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   268d4:	f170 0200 	sbcs.w	r2, r0, #0
   268d8:	da0a      	bge.n	268f0 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   268da:	2800      	cmp	r0, #0
   268dc:	bfac      	ite	ge
   268de:	4618      	movge	r0, r3
   268e0:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   268e2:	4b06      	ldr	r3, [pc, #24]	; (268fc <next_timeout+0x48>)
   268e4:	691b      	ldr	r3, [r3, #16]
   268e6:	b113      	cbz	r3, 268ee <next_timeout+0x3a>
   268e8:	4298      	cmp	r0, r3
   268ea:	bfa8      	it	ge
   268ec:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   268ee:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   268f0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   268f4:	e7f5      	b.n	268e2 <next_timeout+0x2e>
   268f6:	bf00      	nop
   268f8:	200007ec 	.word	0x200007ec
   268fc:	20002c74 	.word	0x20002c74

00026900 <remove_timeout>:
{
   26900:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   26902:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   26904:	b168      	cbz	r0, 26922 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   26906:	4a0a      	ldr	r2, [pc, #40]	; (26930 <remove_timeout+0x30>)
   26908:	6852      	ldr	r2, [r2, #4]
   2690a:	4290      	cmp	r0, r2
   2690c:	d009      	beq.n	26922 <remove_timeout+0x22>
	if (next(t) != NULL) {
   2690e:	b143      	cbz	r3, 26922 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   26910:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   26914:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   26918:	1912      	adds	r2, r2, r4
   2691a:	eb41 0105 	adc.w	r1, r1, r5
   2691e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   26922:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   26924:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   26926:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   26928:	2300      	movs	r3, #0
	node->prev = NULL;
   2692a:	e9c0 3300 	strd	r3, r3, [r0]
}
   2692e:	bd30      	pop	{r4, r5, pc}
   26930:	200007ec 	.word	0x200007ec

00026934 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26934:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26938:	bf08      	it	eq
   2693a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   2693e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26940:	4604      	mov	r4, r0
   26942:	461f      	mov	r7, r3
   26944:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26946:	d067      	beq.n	26a18 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   26948:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   2694a:	f04f 0320 	mov.w	r3, #32
   2694e:	f3ef 8611 	mrs	r6, BASEPRI
   26952:	f383 8812 	msr	BASEPRI_MAX, r3
   26956:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   2695a:	f06f 0201 	mvn.w	r2, #1
   2695e:	1b53      	subs	r3, r2, r5
   26960:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   26964:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   26968:	2b00      	cmp	r3, #0
   2696a:	db1b      	blt.n	269a4 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   2696c:	4b2b      	ldr	r3, [pc, #172]	; (26a1c <z_add_timeout+0xe8>)
   2696e:	e9d3 1300 	ldrd	r1, r3, [r3]
   26972:	1a52      	subs	r2, r2, r1
   26974:	eb6c 0303 	sbc.w	r3, ip, r3
   26978:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   2697a:	eb63 0307 	sbc.w	r3, r3, r7
   2697e:	2d01      	cmp	r5, #1
   26980:	f173 0200 	sbcs.w	r2, r3, #0
   26984:	bfbc      	itt	lt
   26986:	2501      	movlt	r5, #1
   26988:	2300      	movlt	r3, #0
   2698a:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   2698e:	4824      	ldr	r0, [pc, #144]	; (26a20 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   26990:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26994:	4283      	cmp	r3, r0
   26996:	d118      	bne.n	269ca <z_add_timeout+0x96>
	node->prev = tail;
   26998:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   2699c:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   269a0:	6044      	str	r4, [r0, #4]
}
   269a2:	e026      	b.n	269f2 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   269a4:	f7ff ff7c 	bl	268a0 <elapsed>
   269a8:	3501      	adds	r5, #1
   269aa:	f147 0700 	adc.w	r7, r7, #0
   269ae:	182d      	adds	r5, r5, r0
   269b0:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   269b4:	e9c4 5704 	strd	r5, r7, [r4, #16]
   269b8:	e7e9      	b.n	2698e <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   269ba:	1a52      	subs	r2, r2, r1
   269bc:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   269c0:	459c      	cmp	ip, r3
   269c2:	e9c4 2504 	strd	r2, r5, [r4, #16]
   269c6:	d0e7      	beq.n	26998 <z_add_timeout+0x64>
   269c8:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   269ca:	2b00      	cmp	r3, #0
   269cc:	d0e4      	beq.n	26998 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   269ce:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   269d2:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   269d6:	428a      	cmp	r2, r1
   269d8:	eb75 0e07 	sbcs.w	lr, r5, r7
   269dc:	daed      	bge.n	269ba <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   269de:	1a8a      	subs	r2, r1, r2
   269e0:	eb67 0505 	sbc.w	r5, r7, r5
   269e4:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   269e8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   269ea:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   269ee:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   269f0:	605c      	str	r4, [r3, #4]
	return list->head == list;
   269f2:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   269f4:	4283      	cmp	r3, r0
   269f6:	d00b      	beq.n	26a10 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   269f8:	429c      	cmp	r4, r3
   269fa:	d109      	bne.n	26a10 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   269fc:	f7ff ff5a 	bl	268b4 <next_timeout>

			if (next_time == 0 ||
   26a00:	b118      	cbz	r0, 26a0a <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   26a02:	4b08      	ldr	r3, [pc, #32]	; (26a24 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   26a04:	691b      	ldr	r3, [r3, #16]
   26a06:	4283      	cmp	r3, r0
   26a08:	d002      	beq.n	26a10 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   26a0a:	2100      	movs	r1, #0
   26a0c:	f7fd ff7c 	bl	24908 <sys_clock_set_timeout>
	__asm__ volatile(
   26a10:	f386 8811 	msr	BASEPRI, r6
   26a14:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   26a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26a1a:	bf00      	nop
   26a1c:	200015a0 	.word	0x200015a0
   26a20:	200007ec 	.word	0x200007ec
   26a24:	20002c74 	.word	0x20002c74

00026a28 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   26a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26a2c:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   26a2e:	f7ff fc77 	bl	26320 <z_time_slice>
	__asm__ volatile(
   26a32:	f04f 0320 	mov.w	r3, #32
   26a36:	f3ef 8411 	mrs	r4, BASEPRI
   26a3a:	f383 8812 	msr	BASEPRI_MAX, r3
   26a3e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   26a42:	4e24      	ldr	r6, [pc, #144]	; (26ad4 <sys_clock_announce+0xac>)
	return list->head == list;
   26a44:	f8df 8090 	ldr.w	r8, [pc, #144]	; 26ad8 <sys_clock_announce+0xb0>
   26a48:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   26a4a:	4d24      	ldr	r5, [pc, #144]	; (26adc <sys_clock_announce+0xb4>)
   26a4c:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   26a50:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26a52:	4540      	cmp	r0, r8
		curr_tick += dt;
   26a54:	e9d5 1e00 	ldrd	r1, lr, [r5]
   26a58:	ea4f 77e2 	mov.w	r7, r2, asr #31
   26a5c:	d00b      	beq.n	26a76 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   26a5e:	b150      	cbz	r0, 26a76 <sys_clock_announce+0x4e>
   26a60:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   26a64:	429a      	cmp	r2, r3
   26a66:	eb77 090c 	sbcs.w	r9, r7, ip
   26a6a:	da16      	bge.n	26a9a <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   26a6c:	1a9b      	subs	r3, r3, r2
   26a6e:	eb6c 0c07 	sbc.w	ip, ip, r7
   26a72:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   26a76:	1852      	adds	r2, r2, r1
   26a78:	eb4e 0707 	adc.w	r7, lr, r7
   26a7c:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   26a80:	2500      	movs	r5, #0
   26a82:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   26a84:	f7ff ff16 	bl	268b4 <next_timeout>
   26a88:	4629      	mov	r1, r5
   26a8a:	f7fd ff3d 	bl	24908 <sys_clock_set_timeout>
	__asm__ volatile(
   26a8e:	f384 8811 	msr	BASEPRI, r4
   26a92:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   26a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   26a9a:	1859      	adds	r1, r3, r1
   26a9c:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   26aa0:	1ad3      	subs	r3, r2, r3
   26aa2:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   26aa4:	2200      	movs	r2, #0
   26aa6:	2300      	movs	r3, #0
   26aa8:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   26aac:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   26ab0:	f7ff ff26 	bl	26900 <remove_timeout>
   26ab4:	f384 8811 	msr	BASEPRI, r4
   26ab8:	f3bf 8f6f 	isb	sy
		t->fn(t);
   26abc:	6883      	ldr	r3, [r0, #8]
   26abe:	4798      	blx	r3
	__asm__ volatile(
   26ac0:	f04f 0320 	mov.w	r3, #32
   26ac4:	f3ef 8411 	mrs	r4, BASEPRI
   26ac8:	f383 8812 	msr	BASEPRI_MAX, r3
   26acc:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   26ad0:	e7bc      	b.n	26a4c <sys_clock_announce+0x24>
   26ad2:	bf00      	nop
   26ad4:	20002cb0 	.word	0x20002cb0
   26ad8:	200007ec 	.word	0x200007ec
   26adc:	200015a0 	.word	0x200015a0

00026ae0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   26ae0:	b510      	push	{r4, lr}
   26ae2:	f04f 0320 	mov.w	r3, #32
   26ae6:	f3ef 8411 	mrs	r4, BASEPRI
   26aea:	f383 8812 	msr	BASEPRI_MAX, r3
   26aee:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   26af2:	f7fd ff3b 	bl	2496c <sys_clock_elapsed>
   26af6:	4a05      	ldr	r2, [pc, #20]	; (26b0c <sys_clock_tick_get+0x2c>)
   26af8:	e9d2 3100 	ldrd	r3, r1, [r2]
   26afc:	18c0      	adds	r0, r0, r3
   26afe:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   26b02:	f384 8811 	msr	BASEPRI, r4
   26b06:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   26b0a:	bd10      	pop	{r4, pc}
   26b0c:	200015a0 	.word	0x200015a0

00026b10 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   26b10:	b570      	push	{r4, r5, r6, lr}
   26b12:	4604      	mov	r4, r0
	__asm__ volatile(
   26b14:	f04f 0320 	mov.w	r3, #32
   26b18:	f3ef 8511 	mrs	r5, BASEPRI
   26b1c:	f383 8812 	msr	BASEPRI_MAX, r3
   26b20:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   26b24:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   26b28:	3301      	adds	r3, #1
   26b2a:	f142 0200 	adc.w	r2, r2, #0
   26b2e:	2b02      	cmp	r3, #2
   26b30:	f172 0300 	sbcs.w	r3, r2, #0
   26b34:	d304      	bcc.n	26b40 <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   26b36:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   26b3a:	4917      	ldr	r1, [pc, #92]	; (26b98 <z_timer_expiration_handler+0x88>)
   26b3c:	f7ff fefa 	bl	26934 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   26b40:	6b23      	ldr	r3, [r4, #48]	; 0x30
   26b42:	3301      	adds	r3, #1
   26b44:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   26b46:	6a23      	ldr	r3, [r4, #32]
   26b48:	b173      	cbz	r3, 26b68 <z_timer_expiration_handler+0x58>
	__asm__ volatile(
   26b4a:	f385 8811 	msr	BASEPRI, r5
   26b4e:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   26b52:	6a23      	ldr	r3, [r4, #32]
   26b54:	4620      	mov	r0, r4
   26b56:	4798      	blx	r3
	__asm__ volatile(
   26b58:	f04f 0320 	mov.w	r3, #32
   26b5c:	f3ef 8511 	mrs	r5, BASEPRI
   26b60:	f383 8812 	msr	BASEPRI_MAX, r3
   26b64:	f3bf 8f6f 	isb	sy
	return list->head == list;
   26b68:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26b6c:	42a6      	cmp	r6, r4
   26b6e:	d000      	beq.n	26b72 <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   26b70:	b926      	cbnz	r6, 26b7c <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
   26b72:	f385 8811 	msr	BASEPRI, r5
   26b76:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   26b7a:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   26b7c:	4630      	mov	r0, r6
   26b7e:	f007 fef8 	bl	2e972 <z_unpend_thread_no_timeout>
   26b82:	2300      	movs	r3, #0
   26b84:	67f3      	str	r3, [r6, #124]	; 0x7c
   26b86:	f385 8811 	msr	BASEPRI, r5
   26b8a:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   26b8e:	4630      	mov	r0, r6
}
   26b90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   26b94:	f007 bf2d 	b.w	2e9f2 <z_ready_thread>
   26b98:	00026b11 	.word	0x00026b11

00026b9c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   26b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26ba0:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   26ba2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26ba6:	bf08      	it	eq
   26ba8:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
   26bac:	4606      	mov	r6, r0
   26bae:	461c      	mov	r4, r3
   26bb0:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
   26bb4:	4689      	mov	r9, r1
   26bb6:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   26bb8:	d03e      	beq.n	26c38 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   26bba:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26bbe:	bf08      	it	eq
   26bc0:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   26bc4:	4615      	mov	r5, r2
   26bc6:	4607      	mov	r7, r0
   26bc8:	d014      	beq.n	26bf4 <z_impl_k_timer_start+0x58>
   26bca:	ea50 0302 	orrs.w	r3, r0, r2
   26bce:	d011      	beq.n	26bf4 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
   26bd0:	f06f 0301 	mvn.w	r3, #1
   26bd4:	1a9b      	subs	r3, r3, r2
   26bd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26bda:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   26bde:	2b00      	cmp	r3, #0
   26be0:	da08      	bge.n	26bf4 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
   26be2:	2a02      	cmp	r2, #2
   26be4:	f170 0300 	sbcs.w	r3, r0, #0
   26be8:	bfbc      	itt	lt
   26bea:	2502      	movlt	r5, #2
   26bec:	2700      	movlt	r7, #0
   26bee:	3d01      	subs	r5, #1
   26bf0:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   26bf4:	f06f 0301 	mvn.w	r3, #1
   26bf8:	1a5b      	subs	r3, r3, r1
   26bfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26bfe:	eb63 0304 	sbc.w	r3, r3, r4
   26c02:	2b00      	cmp	r3, #0
   26c04:	da09      	bge.n	26c1a <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
   26c06:	2901      	cmp	r1, #1
   26c08:	f174 0300 	sbcs.w	r3, r4, #0
   26c0c:	bfbc      	itt	lt
   26c0e:	2101      	movlt	r1, #1
   26c10:	2400      	movlt	r4, #0
   26c12:	f111 39ff 	adds.w	r9, r1, #4294967295	; 0xffffffff
   26c16:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   26c1a:	4630      	mov	r0, r6
   26c1c:	f007 ff8a 	bl	2eb34 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   26c20:	2300      	movs	r3, #0
   26c22:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
   26c24:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   26c28:	464a      	mov	r2, r9
   26c2a:	4643      	mov	r3, r8
   26c2c:	4630      	mov	r0, r6
   26c2e:	4903      	ldr	r1, [pc, #12]	; (26c3c <z_impl_k_timer_start+0xa0>)
		     duration);
}
   26c30:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   26c34:	f7ff be7e 	b.w	26934 <z_add_timeout>
}
   26c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26c3c:	00026b11 	.word	0x00026b11

00026c40 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   26c40:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   26c44:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   26c46:	4b29      	ldr	r3, [pc, #164]	; (26cec <z_impl_k_poll+0xac>)
   26c48:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   26c4a:	2301      	movs	r3, #1
   26c4c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   26c50:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   26c54:	ea52 0305 	orrs.w	r3, r2, r5
{
   26c58:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   26c5a:	bf0c      	ite	eq
   26c5c:	2301      	moveq	r3, #1
   26c5e:	2300      	movne	r3, #0
   26c60:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   26c64:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   26c66:	f008 f809 	bl	2ec7c <register_events>
   26c6a:	4681      	mov	r9, r0
	__asm__ volatile(
   26c6c:	f04f 0320 	mov.w	r3, #32
   26c70:	f3ef 8a11 	mrs	sl, BASEPRI
   26c74:	f383 8812 	msr	BASEPRI_MAX, r3
   26c78:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   26c7c:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   26c80:	b964      	cbnz	r4, 26c9c <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   26c82:	4601      	mov	r1, r0
   26c84:	4652      	mov	r2, sl
   26c86:	4640      	mov	r0, r8
   26c88:	f008 f8c9 	bl	2ee1e <clear_event_registrations>
	__asm__ volatile(
   26c8c:	f38a 8811 	msr	BASEPRI, sl
   26c90:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   26c94:	4620      	mov	r0, r4
   26c96:	b002      	add	sp, #8
   26c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   26c9c:	2300      	movs	r3, #0
   26c9e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   26ca2:	ea56 0305 	orrs.w	r3, r6, r5
   26ca6:	d106      	bne.n	26cb6 <z_impl_k_poll+0x76>
   26ca8:	f38a 8811 	msr	BASEPRI, sl
   26cac:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   26cb0:	f06f 040a 	mvn.w	r4, #10
   26cb4:	e7ee      	b.n	26c94 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   26cb6:	e9cd 6500 	strd	r6, r5, [sp]
   26cba:	4a0d      	ldr	r2, [pc, #52]	; (26cf0 <z_impl_k_poll+0xb0>)
   26cbc:	480d      	ldr	r0, [pc, #52]	; (26cf4 <z_impl_k_poll+0xb4>)
   26cbe:	4651      	mov	r1, sl
   26cc0:	f7ff fc02 	bl	264c8 <z_pend_curr>
   26cc4:	4604      	mov	r4, r0
	__asm__ volatile(
   26cc6:	f04f 0320 	mov.w	r3, #32
   26cca:	f3ef 8511 	mrs	r5, BASEPRI
   26cce:	f383 8812 	msr	BASEPRI_MAX, r3
   26cd2:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   26cd6:	462a      	mov	r2, r5
   26cd8:	4649      	mov	r1, r9
   26cda:	4640      	mov	r0, r8
   26cdc:	f008 f89f 	bl	2ee1e <clear_event_registrations>
	__asm__ volatile(
   26ce0:	f385 8811 	msr	BASEPRI, r5
   26ce4:	f3bf 8f6f 	isb	sy
	return swap_rc;
   26ce8:	e7d4      	b.n	26c94 <z_impl_k_poll+0x54>
   26cea:	bf00      	nop
   26cec:	20002c74 	.word	0x20002c74
   26cf0:	200007f4 	.word	0x200007f4
   26cf4:	2000319f 	.word	0x2000319f

00026cf8 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   26cf8:	b538      	push	{r3, r4, r5, lr}
   26cfa:	4603      	mov	r3, r0
	__asm__ volatile(
   26cfc:	f04f 0220 	mov.w	r2, #32
   26d00:	f3ef 8511 	mrs	r5, BASEPRI
   26d04:	f382 8812 	msr	BASEPRI_MAX, r2
   26d08:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   26d0c:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   26d0e:	2101      	movs	r1, #1
   26d10:	6081      	str	r1, [r0, #8]
	return list->head == list;
   26d12:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   26d14:	4283      	cmp	r3, r0
   26d16:	d106      	bne.n	26d26 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   26d18:	f385 8811 	msr	BASEPRI, r5
   26d1c:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   26d20:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   26d22:	4620      	mov	r0, r4
   26d24:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   26d26:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   26d2a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   26d2c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   26d2e:	2300      	movs	r3, #0
	node->prev = NULL;
   26d30:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   26d34:	f008 f819 	bl	2ed6a <signal_poll_event>
	z_reschedule(&lock, key);
   26d38:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   26d3a:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   26d3c:	4801      	ldr	r0, [pc, #4]	; (26d44 <z_impl_k_poll_signal_raise+0x4c>)
   26d3e:	f7ff fa6f 	bl	26220 <z_reschedule>
	return rc;
   26d42:	e7ee      	b.n	26d22 <z_impl_k_poll_signal_raise+0x2a>
   26d44:	2000319f 	.word	0x2000319f

00026d48 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   26d48:	b573      	push	{r0, r1, r4, r5, r6, lr}
   26d4a:	4606      	mov	r6, r0
   26d4c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   26d4e:	f007 fc15 	bl	2e57c <k_is_in_isr>
   26d52:	b978      	cbnz	r0, 26d74 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   26d54:	4b0b      	ldr	r3, [pc, #44]	; (26d84 <z_thread_aligned_alloc+0x3c>)
   26d56:	689b      	ldr	r3, [r3, #8]
   26d58:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   26d5a:	b17c      	cbz	r4, 26d7c <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   26d5c:	1d2a      	adds	r2, r5, #4
   26d5e:	d209      	bcs.n	26d74 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   26d60:	2000      	movs	r0, #0
   26d62:	2100      	movs	r1, #0
   26d64:	e9cd 0100 	strd	r0, r1, [sp]
   26d68:	f046 0104 	orr.w	r1, r6, #4
   26d6c:	4620      	mov	r0, r4
   26d6e:	f007 fb7e 	bl	2e46e <k_heap_aligned_alloc>
	if (mem == NULL) {
   26d72:	b908      	cbnz	r0, 26d78 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   26d74:	2400      	movs	r4, #0
	}

	return ret;
   26d76:	e001      	b.n	26d7c <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   26d78:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   26d7a:	1d04      	adds	r4, r0, #4
}
   26d7c:	4620      	mov	r0, r4
   26d7e:	b002      	add	sp, #8
   26d80:	bd70      	pop	{r4, r5, r6, pc}
   26d82:	bf00      	nop
   26d84:	20002c74 	.word	0x20002c74

00026d88 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   26d88:	4a02      	ldr	r2, [pc, #8]	; (26d94 <boot_banner+0xc>)
   26d8a:	4903      	ldr	r1, [pc, #12]	; (26d98 <boot_banner+0x10>)
   26d8c:	4803      	ldr	r0, [pc, #12]	; (26d9c <boot_banner+0x14>)
   26d8e:	f000 b8bb 	b.w	26f08 <printk>
   26d92:	bf00      	nop
   26d94:	00030869 	.word	0x00030869
   26d98:	00030dcb 	.word	0x00030dcb
   26d9c:	00030dec 	.word	0x00030dec

00026da0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   26da0:	4770      	bx	lr

00026da2 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   26da2:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   26da4:	2364      	movs	r3, #100	; 0x64
{
   26da6:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   26da8:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   26daa:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   26dac:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   26db0:	b111      	cbz	r1, 26db8 <u8_to_dec+0x16>
   26db2:	3d01      	subs	r5, #1
   26db4:	d101      	bne.n	26dba <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   26db6:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   26db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   26dba:	429a      	cmp	r2, r3
		digit = value / divisor;
   26dbc:	fbb2 f7f3 	udiv	r7, r2, r3
   26dc0:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   26dc2:	d202      	bcs.n	26dca <u8_to_dec+0x28>
   26dc4:	2b01      	cmp	r3, #1
   26dc6:	d000      	beq.n	26dca <u8_to_dec+0x28>
   26dc8:	b130      	cbz	r0, 26dd8 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   26dca:	3630      	adds	r6, #48	; 0x30
			buflen--;
   26dcc:	3901      	subs	r1, #1
			num_digits++;
   26dce:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   26dd0:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   26dd4:	b2c9      	uxtb	r1, r1
			num_digits++;
   26dd6:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   26dd8:	fb03 2217 	mls	r2, r3, r7, r2
   26ddc:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   26dde:	fbb3 f3fc 	udiv	r3, r3, ip
   26de2:	e7e5      	b.n	26db0 <u8_to_dec+0xe>

00026de4 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   26de4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   26de8:	b2db      	uxtb	r3, r3
   26dea:	2b09      	cmp	r3, #9
   26dec:	d802      	bhi.n	26df4 <char2hex+0x10>
		*x = c - '0';
   26dee:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   26df0:	2000      	movs	r0, #0
   26df2:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   26df4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   26df8:	2b05      	cmp	r3, #5
   26dfa:	d802      	bhi.n	26e02 <char2hex+0x1e>
		*x = c - 'a' + 10;
   26dfc:	3857      	subs	r0, #87	; 0x57
   26dfe:	7008      	strb	r0, [r1, #0]
   26e00:	e7f6      	b.n	26df0 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   26e02:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   26e06:	2b05      	cmp	r3, #5
   26e08:	d801      	bhi.n	26e0e <char2hex+0x2a>
		*x = c - 'A' + 10;
   26e0a:	3837      	subs	r0, #55	; 0x37
   26e0c:	e7f7      	b.n	26dfe <char2hex+0x1a>
		return -EINVAL;
   26e0e:	f06f 0015 	mvn.w	r0, #21
}
   26e12:	4770      	bx	lr

00026e14 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   26e14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26e16:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   26e18:	f001 0001 	and.w	r0, r1, #1
   26e1c:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   26e20:	429d      	cmp	r5, r3
   26e22:	ea4f 0651 	mov.w	r6, r1, lsr #1
   26e26:	d903      	bls.n	26e30 <hex2bin+0x1c>
		return 0;
   26e28:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   26e2a:	4628      	mov	r0, r5
   26e2c:	b003      	add	sp, #12
   26e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   26e30:	b158      	cbz	r0, 26e4a <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   26e32:	7820      	ldrb	r0, [r4, #0]
   26e34:	f10d 0107 	add.w	r1, sp, #7
   26e38:	f7ff ffd4 	bl	26de4 <char2hex>
   26e3c:	2800      	cmp	r0, #0
   26e3e:	dbf3      	blt.n	26e28 <hex2bin+0x14>
		buf[0] = dec;
   26e40:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26e44:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   26e48:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   26e4a:	3401      	adds	r4, #1
   26e4c:	4416      	add	r6, r2
   26e4e:	42b2      	cmp	r2, r6
   26e50:	d0eb      	beq.n	26e2a <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   26e52:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   26e56:	f10d 0107 	add.w	r1, sp, #7
   26e5a:	f7ff ffc3 	bl	26de4 <char2hex>
   26e5e:	2800      	cmp	r0, #0
   26e60:	dbe2      	blt.n	26e28 <hex2bin+0x14>
		buf[i] = dec << 4;
   26e62:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26e66:	011b      	lsls	r3, r3, #4
   26e68:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   26e6a:	f814 0b02 	ldrb.w	r0, [r4], #2
   26e6e:	f7ff ffb9 	bl	26de4 <char2hex>
   26e72:	2800      	cmp	r0, #0
   26e74:	dbd8      	blt.n	26e28 <hex2bin+0x14>
		buf[i] += dec;
   26e76:	7813      	ldrb	r3, [r2, #0]
   26e78:	f89d 1007 	ldrb.w	r1, [sp, #7]
   26e7c:	440b      	add	r3, r1
   26e7e:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   26e82:	e7e4      	b.n	26e4e <hex2bin+0x3a>

00026e84 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   26e84:	4603      	mov	r3, r0
   26e86:	b140      	cbz	r0, 26e9a <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   26e88:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   26e8a:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   26e8e:	2a02      	cmp	r2, #2
   26e90:	d006      	beq.n	26ea0 <sys_notify_validate+0x1c>
   26e92:	2a03      	cmp	r2, #3
   26e94:	d004      	beq.n	26ea0 <sys_notify_validate+0x1c>
   26e96:	2a01      	cmp	r2, #1
   26e98:	d005      	beq.n	26ea6 <sys_notify_validate+0x22>
		return -EINVAL;
   26e9a:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   26e9e:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   26ea0:	681a      	ldr	r2, [r3, #0]
   26ea2:	2a00      	cmp	r2, #0
   26ea4:	d0f9      	beq.n	26e9a <sys_notify_validate+0x16>
		notify->result = 0;
   26ea6:	2000      	movs	r0, #0
   26ea8:	6098      	str	r0, [r3, #8]
   26eaa:	4770      	bx	lr

00026eac <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   26eac:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   26eae:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   26eb2:	2a02      	cmp	r2, #2
{
   26eb4:	b510      	push	{r4, lr}
   26eb6:	4603      	mov	r3, r0
	notify->result = res;
   26eb8:	6081      	str	r1, [r0, #8]
	switch (method) {
   26eba:	d00a      	beq.n	26ed2 <sys_notify_finalize+0x26>
   26ebc:	2a03      	cmp	r2, #3
   26ebe:	d10b      	bne.n	26ed8 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   26ec0:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   26ec2:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   26ec4:	2200      	movs	r2, #0
   26ec6:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   26ec8:	b108      	cbz	r0, 26ece <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   26eca:	f7ff ff15 	bl	26cf8 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   26ece:	4620      	mov	r0, r4
   26ed0:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   26ed2:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   26ed4:	2400      	movs	r4, #0
		break;
   26ed6:	e7f5      	b.n	26ec4 <sys_notify_finalize+0x18>
	switch (method) {
   26ed8:	2400      	movs	r4, #0
   26eda:	4620      	mov	r0, r4
   26edc:	e7f2      	b.n	26ec4 <sys_notify_finalize+0x18>

00026ede <arch_printk_char_out>:
}
   26ede:	2000      	movs	r0, #0
   26ee0:	4770      	bx	lr

00026ee2 <str_out>:
{
   26ee2:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   26ee4:	688a      	ldr	r2, [r1, #8]
   26ee6:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   26ee8:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   26eea:	b114      	cbz	r4, 26ef2 <str_out+0x10>
   26eec:	684b      	ldr	r3, [r1, #4]
   26eee:	4293      	cmp	r3, r2
   26ef0:	dc01      	bgt.n	26ef6 <str_out+0x14>
		ctx->count++;
   26ef2:	608d      	str	r5, [r1, #8]
}
   26ef4:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   26ef6:	3b01      	subs	r3, #1
   26ef8:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   26efa:	bf08      	it	eq
   26efc:	2200      	moveq	r2, #0
   26efe:	608d      	str	r5, [r1, #8]
   26f00:	bf0c      	ite	eq
   26f02:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   26f04:	54a0      	strbne	r0, [r4, r2]
   26f06:	e7f5      	b.n	26ef4 <str_out+0x12>

00026f08 <printk>:
{
   26f08:	b40f      	push	{r0, r1, r2, r3}
   26f0a:	b507      	push	{r0, r1, r2, lr}
   26f0c:	a904      	add	r1, sp, #16
   26f0e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   26f12:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   26f14:	f7e6 fe6a 	bl	dbec <vprintk>
}
   26f18:	b003      	add	sp, #12
   26f1a:	f85d eb04 	ldr.w	lr, [sp], #4
   26f1e:	b004      	add	sp, #16
   26f20:	4770      	bx	lr

00026f22 <snprintk>:
{
   26f22:	b40c      	push	{r2, r3}
   26f24:	b507      	push	{r0, r1, r2, lr}
   26f26:	ab04      	add	r3, sp, #16
   26f28:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   26f2c:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   26f2e:	f7e6 fe6b 	bl	dc08 <vsnprintk>
}
   26f32:	b003      	add	sp, #12
   26f34:	f85d eb04 	ldr.w	lr, [sp], #4
   26f38:	b002      	add	sp, #8
   26f3a:	4770      	bx	lr

00026f3c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   26f3c:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   26f3e:	f013 0307 	ands.w	r3, r3, #7
   26f42:	d105      	bne.n	26f50 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   26f44:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   26f46:	2b00      	cmp	r3, #0
   26f48:	bf0c      	ite	eq
   26f4a:	2000      	moveq	r0, #0
   26f4c:	2003      	movne	r0, #3
   26f4e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   26f50:	2b02      	cmp	r3, #2
   26f52:	d105      	bne.n	26f60 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   26f54:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   26f56:	2b00      	cmp	r3, #0
   26f58:	bf14      	ite	ne
   26f5a:	2000      	movne	r0, #0
   26f5c:	2004      	moveq	r0, #4
   26f5e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   26f60:	2b01      	cmp	r3, #1
   26f62:	d105      	bne.n	26f70 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   26f64:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   26f66:	2b00      	cmp	r3, #0
   26f68:	bf0c      	ite	eq
   26f6a:	2000      	moveq	r0, #0
   26f6c:	2005      	movne	r0, #5
   26f6e:	4770      	bx	lr
	int evt = EVT_NOP;
   26f70:	2000      	movs	r0, #0
}
   26f72:	4770      	bx	lr

00026f74 <notify_one>:
{
   26f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26f78:	460d      	mov	r5, r1
   26f7a:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   26f7c:	4619      	mov	r1, r3
   26f7e:	1d28      	adds	r0, r5, #4
{
   26f80:	4690      	mov	r8, r2
   26f82:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   26f84:	f7ff ff92 	bl	26eac <sys_notify_finalize>
	if (cb) {
   26f88:	4604      	mov	r4, r0
   26f8a:	b138      	cbz	r0, 26f9c <notify_one+0x28>
		cb(mgr, cli, state, res);
   26f8c:	4633      	mov	r3, r6
   26f8e:	4642      	mov	r2, r8
   26f90:	4629      	mov	r1, r5
   26f92:	4638      	mov	r0, r7
   26f94:	46a4      	mov	ip, r4
}
   26f96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   26f9a:	4760      	bx	ip
}
   26f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026fa0 <transition_complete>:
{
   26fa0:	b410      	push	{r4}
	__asm__ volatile(
   26fa2:	f04f 0420 	mov.w	r4, #32
   26fa6:	f3ef 8211 	mrs	r2, BASEPRI
   26faa:	f384 8812 	msr	BASEPRI_MAX, r4
   26fae:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   26fb2:	6141      	str	r1, [r0, #20]
}
   26fb4:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   26fb6:	2101      	movs	r1, #1
   26fb8:	f7e6 be3a 	b.w	dc30 <process_event>

00026fbc <validate_args>:
{
   26fbc:	b510      	push	{r4, lr}
   26fbe:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   26fc0:	b140      	cbz	r0, 26fd4 <validate_args+0x18>
   26fc2:	b139      	cbz	r1, 26fd4 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   26fc4:	1d08      	adds	r0, r1, #4
   26fc6:	f7ff ff5d 	bl	26e84 <sys_notify_validate>
	if ((rv == 0)
   26fca:	b928      	cbnz	r0, 26fd8 <validate_args+0x1c>
	    && ((cli->notify.flags
   26fcc:	68a3      	ldr	r3, [r4, #8]
   26fce:	f033 0303 	bics.w	r3, r3, #3
   26fd2:	d001      	beq.n	26fd8 <validate_args+0x1c>
		rv = -EINVAL;
   26fd4:	f06f 0015 	mvn.w	r0, #21
}
   26fd8:	bd10      	pop	{r4, pc}

00026fda <onoff_manager_init>:
{
   26fda:	b538      	push	{r3, r4, r5, lr}
   26fdc:	460c      	mov	r4, r1
	if ((mgr == NULL)
   26fde:	4605      	mov	r5, r0
   26fe0:	b158      	cbz	r0, 26ffa <onoff_manager_init+0x20>
	    || (transitions == NULL)
   26fe2:	b151      	cbz	r1, 26ffa <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   26fe4:	680b      	ldr	r3, [r1, #0]
   26fe6:	b143      	cbz	r3, 26ffa <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   26fe8:	684b      	ldr	r3, [r1, #4]
   26fea:	b133      	cbz	r3, 26ffa <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   26fec:	221c      	movs	r2, #28
   26fee:	2100      	movs	r1, #0
   26ff0:	f002 f9b4 	bl	2935c <memset>
   26ff4:	612c      	str	r4, [r5, #16]
	return 0;
   26ff6:	2000      	movs	r0, #0
}
   26ff8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   26ffa:	f06f 0015 	mvn.w	r0, #21
   26ffe:	e7fb      	b.n	26ff8 <onoff_manager_init+0x1e>

00027000 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   27000:	b570      	push	{r4, r5, r6, lr}
   27002:	4604      	mov	r4, r0
   27004:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   27006:	f7ff ffd9 	bl	26fbc <validate_args>

	if (rv < 0) {
   2700a:	1e05      	subs	r5, r0, #0
   2700c:	db31      	blt.n	27072 <onoff_request+0x72>
   2700e:	f04f 0320 	mov.w	r3, #32
   27012:	f3ef 8111 	mrs	r1, BASEPRI
   27016:	f383 8812 	msr	BASEPRI_MAX, r3
   2701a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   2701e:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   27020:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   27022:	f64f 75ff 	movw	r5, #65535	; 0xffff
   27026:	42ab      	cmp	r3, r5
   27028:	f000 0207 	and.w	r2, r0, #7
   2702c:	d02e      	beq.n	2708c <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   2702e:	2a02      	cmp	r2, #2
   27030:	d10e      	bne.n	27050 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   27032:	3301      	adds	r3, #1
   27034:	8363      	strh	r3, [r4, #26]
	rv = state;
   27036:	4615      	mov	r5, r2
		notify = true;
   27038:	2301      	movs	r3, #1
	__asm__ volatile(
   2703a:	f381 8811 	msr	BASEPRI, r1
   2703e:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   27042:	b1b3      	cbz	r3, 27072 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   27044:	2300      	movs	r3, #0
   27046:	4631      	mov	r1, r6
   27048:	4620      	mov	r0, r4
   2704a:	f7ff ff93 	bl	26f74 <notify_one>
   2704e:	e010      	b.n	27072 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   27050:	0783      	lsls	r3, r0, #30
   27052:	d001      	beq.n	27058 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   27054:	2a06      	cmp	r2, #6
   27056:	d10e      	bne.n	27076 <onoff_request+0x76>
	parent->next = child;
   27058:	2300      	movs	r3, #0
   2705a:	6033      	str	r3, [r6, #0]
	return list->tail;
   2705c:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   2705e:	b993      	cbnz	r3, 27086 <onoff_request+0x86>
	list->head = node;
   27060:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   27064:	4615      	mov	r5, r2
   27066:	b962      	cbnz	r2, 27082 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   27068:	460a      	mov	r2, r1
   2706a:	4620      	mov	r0, r4
   2706c:	2102      	movs	r1, #2
   2706e:	f7e6 fddf 	bl	dc30 <process_event>
		}
	}

	return rv;
}
   27072:	4628      	mov	r0, r5
   27074:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   27076:	2a05      	cmp	r2, #5
   27078:	bf0c      	ite	eq
   2707a:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   2707e:	f06f 0504 	mvnne.w	r5, #4
   27082:	2300      	movs	r3, #0
   27084:	e7d9      	b.n	2703a <onoff_request+0x3a>
	parent->next = child;
   27086:	601e      	str	r6, [r3, #0]
	list->tail = node;
   27088:	6066      	str	r6, [r4, #4]
}
   2708a:	e7eb      	b.n	27064 <onoff_request+0x64>
		rv = -EAGAIN;
   2708c:	f06f 050a 	mvn.w	r5, #10
   27090:	e7f7      	b.n	27082 <onoff_request+0x82>

00027092 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   27092:	b510      	push	{r4, lr}
	__asm__ volatile(
   27094:	f04f 0320 	mov.w	r3, #32
   27098:	f3ef 8211 	mrs	r2, BASEPRI
   2709c:	f383 8812 	msr	BASEPRI_MAX, r3
   270a0:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   270a4:	8b04      	ldrh	r4, [r0, #24]
   270a6:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   270aa:	2c02      	cmp	r4, #2
   270ac:	d00a      	beq.n	270c4 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   270ae:	2c01      	cmp	r4, #1
   270b0:	bf0c      	ite	eq
   270b2:	f06f 0004 	mvneq.w	r0, #4
   270b6:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   270ba:	f382 8811 	msr	BASEPRI, r2
   270be:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   270c2:	e008      	b.n	270d6 <onoff_release+0x44>
	mgr->refs -= 1U;
   270c4:	8b43      	ldrh	r3, [r0, #26]
   270c6:	3b01      	subs	r3, #1
   270c8:	b29b      	uxth	r3, r3
   270ca:	8343      	strh	r3, [r0, #26]
	if (stop) {
   270cc:	b923      	cbnz	r3, 270d8 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   270ce:	4621      	mov	r1, r4
   270d0:	f7e6 fdae 	bl	dc30 <process_event>
	int rv = state;
   270d4:	4620      	mov	r0, r4
}
   270d6:	bd10      	pop	{r4, pc}
	int rv = state;
   270d8:	4620      	mov	r0, r4
   270da:	e7ee      	b.n	270ba <onoff_release+0x28>

000270dc <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   270dc:	4604      	mov	r4, r0
   270de:	b508      	push	{r3, lr}
   270e0:	4608      	mov	r0, r1
   270e2:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   270e4:	461a      	mov	r2, r3
   270e6:	47a0      	blx	r4
	return z_impl_z_current_get();
   270e8:	f7ff fb46 	bl	26778 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   270ec:	f7e8 fc60 	bl	f9b0 <z_impl_k_thread_abort>

000270f0 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   270f0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   270f4:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   270f6:	0840      	lsrs	r0, r0, #1
   270f8:	4770      	bx	lr

000270fa <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   270fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   270fc:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   270fe:	f7ff fff7 	bl	270f0 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   27102:	fab0 f080 	clz	r0, r0
   27106:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   2710a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   2710e:	00ca      	lsls	r2, r1, #3
   27110:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   27114:	1d17      	adds	r7, r2, #4
{
   27116:	460c      	mov	r4, r1
   27118:	3206      	adds	r2, #6
   2711a:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   2711c:	b956      	cbnz	r6, 27134 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   2711e:	2101      	movs	r1, #1
   27120:	fa01 f000 	lsl.w	r0, r1, r0
   27124:	68d9      	ldr	r1, [r3, #12]
   27126:	4301      	orrs	r1, r0
   27128:	60d9      	str	r1, [r3, #12]
		b->next = c;
   2712a:	f8cc 4010 	str.w	r4, [ip, #16]
   2712e:	53dd      	strh	r5, [r3, r7]
   27130:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   27132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   27134:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   27136:	3104      	adds	r1, #4
   27138:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   2713a:	53d8      	strh	r0, [r3, r7]
   2713c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   27140:	529e      	strh	r6, [r3, r2]
   27142:	80c5      	strh	r5, [r0, #6]
   27144:	525d      	strh	r5, [r3, r1]
   27146:	e7f4      	b.n	27132 <free_list_add+0x38>

00027148 <free_list_remove_bidx>:
{
   27148:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   2714a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   2714e:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   27150:	4299      	cmp	r1, r3
   27152:	f102 0104 	add.w	r1, r2, #4
   27156:	d10a      	bne.n	2716e <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   27158:	2301      	movs	r3, #1
   2715a:	fa03 f202 	lsl.w	r2, r3, r2
   2715e:	68c3      	ldr	r3, [r0, #12]
   27160:	ea23 0302 	bic.w	r3, r3, r2
   27164:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   27166:	2300      	movs	r3, #0
   27168:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   2716c:	bd10      	pop	{r4, pc}
   2716e:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   27170:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   27174:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   27178:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2717c:	80cb      	strh	r3, [r1, #6]
   2717e:	8082      	strh	r2, [r0, #4]
}
   27180:	e7f4      	b.n	2716c <free_list_remove_bidx+0x24>

00027182 <free_list_remove>:
{
   27182:	b508      	push	{r3, lr}
   27184:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   27186:	f7ff ffb3 	bl	270f0 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2718a:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   2718e:	f1c2 021f 	rsb	r2, r2, #31
   27192:	4618      	mov	r0, r3
}
   27194:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   27198:	f7ff bfd6 	b.w	27148 <free_list_remove_bidx>

0002719c <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   2719c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   271a0:	fab1 f581 	clz	r5, r1
   271a4:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   271a8:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   271ac:	4603      	mov	r3, r0
	if (b->next) {
   271ae:	693a      	ldr	r2, [r7, #16]
{
   271b0:	460e      	mov	r6, r1
	if (b->next) {
   271b2:	b1c2      	cbz	r2, 271e6 <alloc_chunk+0x4a>
   271b4:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   271b8:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   271ba:	4618      	mov	r0, r3
   271bc:	4621      	mov	r1, r4
   271be:	f7ff ff97 	bl	270f0 <chunk_size>
   271c2:	42b0      	cmp	r0, r6
   271c4:	d306      	bcc.n	271d4 <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   271c6:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   271c8:	4618      	mov	r0, r3
   271ca:	f7ff ffbd 	bl	27148 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   271ce:	4620      	mov	r0, r4
   271d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   271d4:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   271d8:	f1b8 0801 	subs.w	r8, r8, #1
   271dc:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   271de:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   271e0:	d001      	beq.n	271e6 <alloc_chunk+0x4a>
   271e2:	4282      	cmp	r2, r0
   271e4:	d1e8      	bne.n	271b8 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   271e6:	f1c5 0220 	rsb	r2, r5, #32
   271ea:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   271ee:	4094      	lsls	r4, r2
   271f0:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   271f2:	4014      	ands	r4, r2
   271f4:	d0eb      	beq.n	271ce <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   271f6:	fa94 f2a4 	rbit	r2, r4
   271fa:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   271fe:	1d11      	adds	r1, r2, #4
   27200:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   27204:	4621      	mov	r1, r4
   27206:	e7df      	b.n	271c8 <alloc_chunk+0x2c>

00027208 <merge_chunks>:
{
   27208:	b538      	push	{r3, r4, r5, lr}
   2720a:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2720c:	f7ff ff70 	bl	270f0 <chunk_size>
{
   27210:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   27212:	4604      	mov	r4, r0
   27214:	4611      	mov	r1, r2
   27216:	4618      	mov	r0, r3
   27218:	f7ff ff6a 	bl	270f0 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   2721c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   27220:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   27222:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   27224:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   27226:	4618      	mov	r0, r3
   27228:	f7ff ff62 	bl	270f0 <chunk_size>
	void *cmem = &buf[c];
   2722c:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2722e:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   27232:	bd38      	pop	{r3, r4, r5, pc}

00027234 <split_chunks>:
{
   27234:	b538      	push	{r3, r4, r5, lr}
   27236:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   27238:	f7ff ff5a 	bl	270f0 <chunk_size>
{
   2723c:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   2723e:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   27240:	1a51      	subs	r1, r2, r1
   27242:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   27246:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   27248:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   2724a:	8060      	strh	r0, [r4, #2]
   2724c:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   27250:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   27252:	8044      	strh	r4, [r0, #2]
   27254:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   27258:	4618      	mov	r0, r3
   2725a:	4611      	mov	r1, r2
   2725c:	f7ff ff48 	bl	270f0 <chunk_size>
	void *cmem = &buf[c];
   27260:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   27262:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   27266:	bd38      	pop	{r3, r4, r5, pc}

00027268 <free_chunk>:
{
   27268:	b538      	push	{r3, r4, r5, lr}
   2726a:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   2726c:	f7ff ff40 	bl	270f0 <chunk_size>
   27270:	460c      	mov	r4, r1
   27272:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   27274:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   27278:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   2727a:	07da      	lsls	r2, r3, #31
   2727c:	d40a      	bmi.n	27294 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   2727e:	4628      	mov	r0, r5
   27280:	f7ff ff7f 	bl	27182 <free_list_remove>
	return c + chunk_size(h, c);
   27284:	4621      	mov	r1, r4
   27286:	4628      	mov	r0, r5
   27288:	f7ff ff32 	bl	270f0 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   2728c:	1822      	adds	r2, r4, r0
   2728e:	4628      	mov	r0, r5
   27290:	f7ff ffba 	bl	27208 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   27294:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   27298:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   2729a:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2729e:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   272a0:	07db      	lsls	r3, r3, #31
   272a2:	d40c      	bmi.n	272be <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   272a4:	4628      	mov	r0, r5
   272a6:	f7ff ff6c 	bl	27182 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   272aa:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   272ae:	4622      	mov	r2, r4
   272b0:	1a61      	subs	r1, r4, r1
   272b2:	4628      	mov	r0, r5
   272b4:	f7ff ffa8 	bl	27208 <merge_chunks>
   272b8:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   272bc:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   272be:	4621      	mov	r1, r4
   272c0:	4628      	mov	r0, r5
}
   272c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   272c6:	f7ff bf18 	b.w	270fa <free_list_add>

000272ca <sys_heap_free>:
	if (mem == NULL) {
   272ca:	b161      	cbz	r1, 272e6 <sys_heap_free+0x1c>
   272cc:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   272ce:	3904      	subs	r1, #4
   272d0:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   272d2:	f021 0307 	bic.w	r3, r1, #7
   272d6:	4403      	add	r3, r0
	free_chunk(h, c);
   272d8:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   272da:	885a      	ldrh	r2, [r3, #2]
   272dc:	f022 0201 	bic.w	r2, r2, #1
   272e0:	805a      	strh	r2, [r3, #2]
   272e2:	f7ff bfc1 	b.w	27268 <free_chunk>
}
   272e6:	4770      	bx	lr

000272e8 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   272e8:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   272ea:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   272ec:	b909      	cbnz	r1, 272f2 <sys_heap_alloc+0xa>
		return NULL;
   272ee:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   272f0:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   272f2:	68ab      	ldr	r3, [r5, #8]
   272f4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   272f8:	d9f9      	bls.n	272ee <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   272fa:	310b      	adds	r1, #11
   272fc:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   272fe:	4621      	mov	r1, r4
   27300:	4628      	mov	r0, r5
   27302:	f7ff ff4b 	bl	2719c <alloc_chunk>
	if (c == 0U) {
   27306:	4606      	mov	r6, r0
   27308:	2800      	cmp	r0, #0
   2730a:	d0f0      	beq.n	272ee <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2730c:	4601      	mov	r1, r0
   2730e:	4628      	mov	r0, r5
   27310:	f7ff feee 	bl	270f0 <chunk_size>
   27314:	42a0      	cmp	r0, r4
   27316:	d907      	bls.n	27328 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   27318:	1932      	adds	r2, r6, r4
   2731a:	4628      	mov	r0, r5
   2731c:	f7ff ff8a 	bl	27234 <split_chunks>
		free_list_add(h, c + chunk_sz);
   27320:	4611      	mov	r1, r2
   27322:	4628      	mov	r0, r5
   27324:	f7ff fee9 	bl	270fa <free_list_add>
	void *cmem = &buf[c];
   27328:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2732c:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2732e:	8853      	ldrh	r3, [r2, #2]
   27330:	f043 0301 	orr.w	r3, r3, #1
   27334:	8053      	strh	r3, [r2, #2]
   27336:	3004      	adds	r0, #4
	return mem;
   27338:	e7da      	b.n	272f0 <sys_heap_alloc+0x8>

0002733a <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   2733a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2733e:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   27340:	424a      	negs	r2, r1
   27342:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   27346:	ea31 0202 	bics.w	r2, r1, r2
{
   2734a:	4603      	mov	r3, r0
	if (align != rew) {
   2734c:	d00a      	beq.n	27364 <sys_heap_aligned_alloc+0x2a>
		return false;
   2734e:	2f04      	cmp	r7, #4
   27350:	463a      	mov	r2, r7
   27352:	46b9      	mov	r9, r7
   27354:	bf28      	it	cs
   27356:	2204      	movcs	r2, #4
		align -= rew;
   27358:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   2735a:	b974      	cbnz	r4, 2737a <sys_heap_aligned_alloc+0x40>
		return NULL;
   2735c:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   2735e:	4628      	mov	r0, r5
   27360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   27364:	2904      	cmp	r1, #4
   27366:	d804      	bhi.n	27372 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   27368:	4621      	mov	r1, r4
}
   2736a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   2736e:	f7ff bfbb 	b.w	272e8 <sys_heap_alloc>
		rew = 0;
   27372:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   27376:	2204      	movs	r2, #4
   27378:	e7ef      	b.n	2735a <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   2737a:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   2737c:	68b3      	ldr	r3, [r6, #8]
   2737e:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   27382:	d9eb      	bls.n	2735c <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   27384:	f104 010b 	add.w	r1, r4, #11
   27388:	4439      	add	r1, r7
   2738a:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   2738c:	08c9      	lsrs	r1, r1, #3
   2738e:	4630      	mov	r0, r6
   27390:	f7ff ff04 	bl	2719c <alloc_chunk>
	if (c0 == 0) {
   27394:	4680      	mov	r8, r0
   27396:	2800      	cmp	r0, #0
   27398:	d0e0      	beq.n	2735c <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   2739a:	f109 0504 	add.w	r5, r9, #4
   2739e:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   273a2:	1e7b      	subs	r3, r7, #1
   273a4:	4435      	add	r5, r6
   273a6:	441d      	add	r5, r3
   273a8:	427f      	negs	r7, r7
   273aa:	403d      	ands	r5, r7
   273ac:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   273b0:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   273b2:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   273b4:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   273b6:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   273b8:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   273bc:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   273be:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   273c2:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   273c6:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   273ca:	d208      	bcs.n	273de <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   273cc:	4601      	mov	r1, r0
   273ce:	463a      	mov	r2, r7
   273d0:	4630      	mov	r0, r6
   273d2:	f7ff ff2f 	bl	27234 <split_chunks>
		free_list_add(h, c0);
   273d6:	4641      	mov	r1, r8
   273d8:	4630      	mov	r0, r6
   273da:	f7ff fe8e 	bl	270fa <free_list_add>
	return c + chunk_size(h, c);
   273de:	4639      	mov	r1, r7
   273e0:	4630      	mov	r0, r6
   273e2:	f7ff fe85 	bl	270f0 <chunk_size>
   273e6:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   273e8:	4284      	cmp	r4, r0
   273ea:	d207      	bcs.n	273fc <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   273ec:	4630      	mov	r0, r6
   273ee:	4622      	mov	r2, r4
   273f0:	f7ff ff20 	bl	27234 <split_chunks>
		free_list_add(h, c_end);
   273f4:	4621      	mov	r1, r4
   273f6:	4630      	mov	r0, r6
   273f8:	f7ff fe7f 	bl	270fa <free_list_add>
	void *cmem = &buf[c];
   273fc:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   27400:	8873      	ldrh	r3, [r6, #2]
   27402:	f043 0301 	orr.w	r3, r3, #1
   27406:	8073      	strh	r3, [r6, #2]
   27408:	e7a9      	b.n	2735e <sys_heap_aligned_alloc+0x24>

0002740a <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   2740a:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2740c:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2740e:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   27410:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   27414:	f021 0107 	bic.w	r1, r1, #7
{
   27418:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   2741a:	1acd      	subs	r5, r1, r3
   2741c:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   2741e:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   27420:	fab2 f082 	clz	r0, r2
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   27424:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
   27428:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2742a:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   2742c:	2600      	movs	r6, #0
   2742e:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   27430:	f1c0 0020 	rsb	r0, r0, #32
   27434:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
   27438:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
   2743a:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   2743c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   27440:	4284      	cmp	r4, r0
   27442:	d118      	bne.n	27476 <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   27444:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   27446:	f040 0001 	orr.w	r0, r0, #1
   2744a:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   2744c:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   27450:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   27452:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   27454:	801e      	strh	r6, [r3, #0]
   27456:	8067      	strh	r7, [r4, #2]
   27458:	195c      	adds	r4, r3, r5
   2745a:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   2745e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
   27462:	8066      	strh	r6, [r4, #2]
   27464:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   27466:	8850      	ldrh	r0, [r2, #2]
   27468:	f040 0001 	orr.w	r0, r0, #1
   2746c:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   2746e:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   27470:	4618      	mov	r0, r3
   27472:	f7ff be42 	b.w	270fa <free_list_add>
		h->buckets[i].next = 0;
   27476:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
   2747a:	e7e1      	b.n	27440 <sys_heap_init+0x36>

0002747c <encode_uint>:
{
   2747c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27480:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   27482:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   27484:	2b6f      	cmp	r3, #111	; 0x6f
{
   27486:	4680      	mov	r8, r0
   27488:	460f      	mov	r7, r1
   2748a:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2748c:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   27490:	d029      	beq.n	274e6 <encode_uint+0x6a>
   27492:	d824      	bhi.n	274de <encode_uint+0x62>
		return 16;
   27494:	2b58      	cmp	r3, #88	; 0x58
   27496:	bf14      	ite	ne
   27498:	260a      	movne	r6, #10
   2749a:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   2749c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   274a0:	4632      	mov	r2, r6
   274a2:	2300      	movs	r3, #0
   274a4:	4640      	mov	r0, r8
   274a6:	4639      	mov	r1, r7
   274a8:	f7e4 ff2a 	bl	c300 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   274ac:	2a09      	cmp	r2, #9
   274ae:	b2d4      	uxtb	r4, r2
   274b0:	d81e      	bhi.n	274f0 <encode_uint+0x74>
   274b2:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   274b4:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   274b6:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   274b8:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   274bc:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   274c0:	d301      	bcc.n	274c6 <encode_uint+0x4a>
   274c2:	45d1      	cmp	r9, sl
   274c4:	d811      	bhi.n	274ea <encode_uint+0x6e>
	if (conv->flag_hash) {
   274c6:	782b      	ldrb	r3, [r5, #0]
   274c8:	069b      	lsls	r3, r3, #26
   274ca:	d505      	bpl.n	274d8 <encode_uint+0x5c>
		if (radix == 8) {
   274cc:	2e08      	cmp	r6, #8
   274ce:	d115      	bne.n	274fc <encode_uint+0x80>
			conv->altform_0 = true;
   274d0:	78ab      	ldrb	r3, [r5, #2]
   274d2:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   274d6:	70ab      	strb	r3, [r5, #2]
}
   274d8:	4648      	mov	r0, r9
   274da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   274de:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   274e2:	2b70      	cmp	r3, #112	; 0x70
   274e4:	e7d7      	b.n	27496 <encode_uint+0x1a>
	switch (specifier) {
   274e6:	2608      	movs	r6, #8
   274e8:	e7d8      	b.n	2749c <encode_uint+0x20>
		value /= radix;
   274ea:	4680      	mov	r8, r0
   274ec:	460f      	mov	r7, r1
   274ee:	e7d7      	b.n	274a0 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   274f0:	f1bb 0f19 	cmp.w	fp, #25
   274f4:	bf94      	ite	ls
   274f6:	3437      	addls	r4, #55	; 0x37
   274f8:	3457      	addhi	r4, #87	; 0x57
   274fa:	e7db      	b.n	274b4 <encode_uint+0x38>
		} else if (radix == 16) {
   274fc:	2e10      	cmp	r6, #16
   274fe:	d1eb      	bne.n	274d8 <encode_uint+0x5c>
			conv->altform_0c = true;
   27500:	78ab      	ldrb	r3, [r5, #2]
   27502:	f043 0310 	orr.w	r3, r3, #16
   27506:	e7e6      	b.n	274d6 <encode_uint+0x5a>

00027508 <outs>:
{
   27508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2750c:	4607      	mov	r7, r0
   2750e:	4688      	mov	r8, r1
   27510:	4615      	mov	r5, r2
   27512:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   27514:	4614      	mov	r4, r2
   27516:	42b4      	cmp	r4, r6
   27518:	eba4 0005 	sub.w	r0, r4, r5
   2751c:	d302      	bcc.n	27524 <outs+0x1c>
   2751e:	b93e      	cbnz	r6, 27530 <outs+0x28>
   27520:	7823      	ldrb	r3, [r4, #0]
   27522:	b12b      	cbz	r3, 27530 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   27524:	f814 0b01 	ldrb.w	r0, [r4], #1
   27528:	4641      	mov	r1, r8
   2752a:	47b8      	blx	r7
		if (rc < 0) {
   2752c:	2800      	cmp	r0, #0
   2752e:	daf2      	bge.n	27516 <outs+0xe>
}
   27530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027534 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   27534:	b40f      	push	{r0, r1, r2, r3}
   27536:	b507      	push	{r0, r1, r2, lr}
   27538:	a904      	add	r1, sp, #16
   2753a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   2753e:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   27540:	f7e6 fb54 	bl	dbec <vprintk>

	va_end(ap);
}
   27544:	b003      	add	sp, #12
   27546:	f85d eb04 	ldr.w	lr, [sp], #4
   2754a:	b004      	add	sp, #16
   2754c:	4770      	bx	lr

0002754e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_SIGNATURE_KEY_FILE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_EXTRA_IMGTOOL_ARGS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_LBS_SECURITY_ENABLED, 1);

GEN_ABS_SYM_END
   2754e:	4770      	bx	lr

00027550 <nvs_flash_rd>:
{
   27550:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   27552:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   27554:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   27556:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   27558:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   2755a:	fa16 f181 	uxtah	r1, r6, r1
   2755e:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   27562:	6884      	ldr	r4, [r0, #8]
   27564:	6824      	ldr	r4, [r4, #0]
   27566:	46a4      	mov	ip, r4
}
   27568:	bc70      	pop	{r4, r5, r6}
   2756a:	4760      	bx	ip

0002756c <nvs_flash_block_cmp>:
{
   2756c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27570:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   27572:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   27574:	681d      	ldr	r5, [r3, #0]
   27576:	426d      	negs	r5, r5
{
   27578:	b089      	sub	sp, #36	; 0x24
   2757a:	4681      	mov	r9, r0
   2757c:	460e      	mov	r6, r1
   2757e:	4617      	mov	r7, r2
	block_size =
   27580:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   27584:	b91c      	cbnz	r4, 2758e <nvs_flash_block_cmp+0x22>
	return 0;
   27586:	4620      	mov	r0, r4
}
   27588:	b009      	add	sp, #36	; 0x24
   2758a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   2758e:	42ac      	cmp	r4, r5
   27590:	46a0      	mov	r8, r4
   27592:	bf28      	it	cs
   27594:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   27596:	4643      	mov	r3, r8
   27598:	466a      	mov	r2, sp
   2759a:	4631      	mov	r1, r6
   2759c:	4648      	mov	r0, r9
   2759e:	f7ff ffd7 	bl	27550 <nvs_flash_rd>
		if (rc) {
   275a2:	2800      	cmp	r0, #0
   275a4:	d1f0      	bne.n	27588 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   275a6:	4642      	mov	r2, r8
   275a8:	4669      	mov	r1, sp
   275aa:	4638      	mov	r0, r7
   275ac:	f001 feba 	bl	29324 <memcmp>
		if (rc) {
   275b0:	b920      	cbnz	r0, 275bc <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   275b2:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   275b6:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   275b8:	4447      	add	r7, r8
   275ba:	e7e3      	b.n	27584 <nvs_flash_block_cmp+0x18>
			return 1;
   275bc:	2001      	movs	r0, #1
   275be:	e7e3      	b.n	27588 <nvs_flash_block_cmp+0x1c>

000275c0 <nvs_flash_cmp_const>:
{
   275c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   275c4:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   275c6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   275c8:	681d      	ldr	r5, [r3, #0]
   275ca:	426d      	negs	r5, r5
{
   275cc:	b088      	sub	sp, #32
	block_size =
   275ce:	f005 0520 	and.w	r5, r5, #32
{
   275d2:	4607      	mov	r7, r0
   275d4:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   275d6:	4668      	mov	r0, sp
{
   275d8:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   275da:	462a      	mov	r2, r5
   275dc:	f001 febe 	bl	2935c <memset>
	while (len) {
   275e0:	b91c      	cbnz	r4, 275ea <nvs_flash_cmp_const+0x2a>
	return 0;
   275e2:	4620      	mov	r0, r4
}
   275e4:	b008      	add	sp, #32
   275e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   275ea:	42ac      	cmp	r4, r5
   275ec:	46a0      	mov	r8, r4
   275ee:	bf28      	it	cs
   275f0:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   275f2:	4643      	mov	r3, r8
   275f4:	466a      	mov	r2, sp
   275f6:	4631      	mov	r1, r6
   275f8:	4638      	mov	r0, r7
   275fa:	f7ff ffb7 	bl	2756c <nvs_flash_block_cmp>
		if (rc) {
   275fe:	2800      	cmp	r0, #0
   27600:	d1f0      	bne.n	275e4 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   27602:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   27606:	4446      	add	r6, r8
   27608:	e7ea      	b.n	275e0 <nvs_flash_cmp_const+0x20>

0002760a <nvs_flash_erase_sector>:
{
   2760a:	b538      	push	{r3, r4, r5, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2760c:	8982      	ldrh	r2, [r0, #12]
   2760e:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
   27610:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   27612:	0c09      	lsrs	r1, r1, #16
{
   27614:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   27616:	042d      	lsls	r5, r5, #16
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   27618:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2761a:	fb02 3101 	mla	r1, r2, r1, r3
	rc = api->erase(dev, offset, size);
   2761e:	6883      	ldr	r3, [r0, #8]
   27620:	689b      	ldr	r3, [r3, #8]
   27622:	4798      	blx	r3
	if (rc) {
   27624:	b950      	cbnz	r0, 2763c <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   27626:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   27628:	89a3      	ldrh	r3, [r4, #12]
   2762a:	7912      	ldrb	r2, [r2, #4]
   2762c:	4629      	mov	r1, r5
   2762e:	4620      	mov	r0, r4
   27630:	f7ff ffc6 	bl	275c0 <nvs_flash_cmp_const>
		rc = -ENXIO;
   27634:	2800      	cmp	r0, #0
   27636:	bf18      	it	ne
   27638:	f06f 0005 	mvnne.w	r0, #5
}
   2763c:	bd38      	pop	{r3, r4, r5, pc}

0002763e <nvs_ate_crc8_update>:
{
   2763e:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   27640:	4601      	mov	r1, r0
{
   27642:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   27644:	2207      	movs	r2, #7
   27646:	20ff      	movs	r0, #255	; 0xff
   27648:	f7e6 faaa 	bl	dba0 <crc8_ccitt>
	entry->crc8 = crc8;
   2764c:	71e0      	strb	r0, [r4, #7]
}
   2764e:	bd10      	pop	{r4, pc}

00027650 <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   27650:	680b      	ldr	r3, [r1, #0]
   27652:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   27656:	0c1a      	lsrs	r2, r3, #16
   27658:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   2765c:	bf08      	it	eq
   2765e:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   27662:	600b      	str	r3, [r1, #0]
}
   27664:	4770      	bx	lr

00027666 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   27666:	7803      	ldrb	r3, [r0, #0]
   27668:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   2766a:	bf81      	itttt	hi
   2766c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   27670:	18c9      	addhi	r1, r1, r3
   27672:	425b      	neghi	r3, r3
   27674:	4019      	andhi	r1, r3
}
   27676:	4608      	mov	r0, r1
   27678:	4770      	bx	lr

0002767a <nvs_ate_valid>:
{
   2767a:	b570      	push	{r4, r5, r6, lr}
   2767c:	460c      	mov	r4, r1
   2767e:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   27680:	2108      	movs	r1, #8
   27682:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   27684:	f7ff ffef 	bl	27666 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   27688:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2768a:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2768c:	4621      	mov	r1, r4
   2768e:	20ff      	movs	r0, #255	; 0xff
   27690:	f7e6 fa86 	bl	dba0 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   27694:	79e3      	ldrb	r3, [r4, #7]
   27696:	4283      	cmp	r3, r0
   27698:	d107      	bne.n	276aa <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   2769a:	89a8      	ldrh	r0, [r5, #12]
   2769c:	8863      	ldrh	r3, [r4, #2]
   2769e:	1b80      	subs	r0, r0, r6
	if ((nvs_ate_crc8_check(entry)) ||
   276a0:	4283      	cmp	r3, r0
   276a2:	bf2c      	ite	cs
   276a4:	2000      	movcs	r0, #0
   276a6:	2001      	movcc	r0, #1
}
   276a8:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   276aa:	2000      	movs	r0, #0
   276ac:	e7fc      	b.n	276a8 <nvs_ate_valid+0x2e>

000276ae <nvs_close_ate_valid>:
{
   276ae:	b538      	push	{r3, r4, r5, lr}
   276b0:	4605      	mov	r5, r0
   276b2:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   276b4:	f7ff ffe1 	bl	2767a <nvs_ate_valid>
   276b8:	b1a0      	cbz	r0, 276e4 <nvs_close_ate_valid+0x36>
   276ba:	88a0      	ldrh	r0, [r4, #4]
   276bc:	b998      	cbnz	r0, 276e6 <nvs_close_ate_valid+0x38>
   276be:	8822      	ldrh	r2, [r4, #0]
   276c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   276c4:	429a      	cmp	r2, r3
   276c6:	d10d      	bne.n	276e4 <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   276c8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   276ca:	2108      	movs	r1, #8
   276cc:	f7ff ffcb 	bl	27666 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   276d0:	8862      	ldrh	r2, [r4, #2]
   276d2:	89ab      	ldrh	r3, [r5, #12]
   276d4:	1a9b      	subs	r3, r3, r2
   276d6:	fbb3 f2f0 	udiv	r2, r3, r0
   276da:	fb02 3010 	mls	r0, r2, r0, r3
   276de:	fab0 f080 	clz	r0, r0
   276e2:	0940      	lsrs	r0, r0, #5
}
   276e4:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   276e6:	2000      	movs	r0, #0
   276e8:	e7fc      	b.n	276e4 <nvs_close_ate_valid+0x36>

000276ea <nvs_prev_ate>:
{
   276ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   276ec:	4605      	mov	r5, r0
   276ee:	460e      	mov	r6, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   276f0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   276f2:	2108      	movs	r1, #8
   276f4:	f7ff ffb7 	bl	27666 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   276f8:	6831      	ldr	r1, [r6, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   276fa:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   276fc:	2308      	movs	r3, #8
   276fe:	4628      	mov	r0, r5
   27700:	f7ff ff26 	bl	27550 <nvs_flash_rd>
	if (rc) {
   27704:	4604      	mov	r4, r0
   27706:	2800      	cmp	r0, #0
   27708:	d138      	bne.n	2777c <nvs_prev_ate+0x92>
	*addr += ate_size;
   2770a:	6833      	ldr	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   2770c:	89a8      	ldrh	r0, [r5, #12]
	*addr += ate_size;
   2770e:	443b      	add	r3, r7
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   27710:	b29a      	uxth	r2, r3
   27712:	1bc7      	subs	r7, r0, r7
   27714:	42ba      	cmp	r2, r7
	*addr += ate_size;
   27716:	6033      	str	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   27718:	d130      	bne.n	2777c <nvs_prev_ate+0x92>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   2771a:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   2771c:	bf03      	ittte	eq
   2771e:	89e9      	ldrheq	r1, [r5, #14]
   27720:	f101 31ff 	addeq.w	r1, r1, #4294967295	; 0xffffffff
   27724:	eb03 4101 	addeq.w	r1, r3, r1, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   27728:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   2772c:	6031      	str	r1, [r6, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2772e:	2308      	movs	r3, #8
   27730:	466a      	mov	r2, sp
   27732:	4628      	mov	r0, r5
   27734:	f7ff ff0c 	bl	27550 <nvs_flash_rd>
	if (rc) {
   27738:	4604      	mov	r4, r0
   2773a:	b9f8      	cbnz	r0, 2777c <nvs_prev_ate+0x92>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   2773c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   2773e:	466a      	mov	r2, sp
   27740:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   27742:	4603      	mov	r3, r0
		if (data8[i] != value) {
   27744:	f812 0b01 	ldrb.w	r0, [r2], #1
   27748:	4281      	cmp	r1, r0
   2774a:	d10c      	bne.n	27766 <nvs_prev_ate+0x7c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2774c:	3301      	adds	r3, #1
   2774e:	2b08      	cmp	r3, #8
   27750:	d1f8      	bne.n	27744 <nvs_prev_ate+0x5a>
		*addr = fs->ate_wra;
   27752:	686b      	ldr	r3, [r5, #4]
   27754:	e005      	b.n	27762 <nvs_prev_ate+0x78>
		(*addr) &= ADDR_SECT_MASK;
   27756:	6833      	ldr	r3, [r6, #0]
		(*addr) += close_ate.offset;
   27758:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   2775c:	0c1b      	lsrs	r3, r3, #16
   2775e:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   27760:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   27762:	6033      	str	r3, [r6, #0]
		return 0;
   27764:	e00a      	b.n	2777c <nvs_prev_ate+0x92>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   27766:	4669      	mov	r1, sp
   27768:	4628      	mov	r0, r5
   2776a:	f7ff ffa0 	bl	276ae <nvs_close_ate_valid>
   2776e:	2800      	cmp	r0, #0
   27770:	d1f1      	bne.n	27756 <nvs_prev_ate+0x6c>
	return nvs_recover_last_ate(fs, addr);
   27772:	4631      	mov	r1, r6
   27774:	4628      	mov	r0, r5
   27776:	f7e6 ff11 	bl	e59c <nvs_recover_last_ate>
   2777a:	4604      	mov	r4, r0
}
   2777c:	4620      	mov	r0, r4
   2777e:	b003      	add	sp, #12
   27780:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027782 <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   27782:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   27786:	8985      	ldrh	r5, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   27788:	4607      	mov	r7, r0
	offset += addr & ADDR_OFFS_MASK;
   2778a:	6800      	ldr	r0, [r0, #0]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   2778c:	461c      	mov	r4, r3
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2778e:	0c0b      	lsrs	r3, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   27790:	fa10 f181 	uxtah	r1, r0, r1
   27794:	fb03 1505 	mla	r5, r3, r5, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   27798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2779a:	681e      	ldr	r6, [r3, #0]
   2779c:	4276      	negs	r6, r6
	if (blen > 0) {
   2779e:	4026      	ands	r6, r4
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   277a0:	b089      	sub	sp, #36	; 0x24
   277a2:	4690      	mov	r8, r2
	if (blen > 0) {
   277a4:	d00a      	beq.n	277bc <nvs_flash_al_wrt.part.0+0x3a>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   277a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   277a8:	6883      	ldr	r3, [r0, #8]
   277aa:	4629      	mov	r1, r5
   277ac:	f8d3 9004 	ldr.w	r9, [r3, #4]
   277b0:	4633      	mov	r3, r6
   277b2:	47c8      	blx	r9
		if (rc) {
   277b4:	b9c0      	cbnz	r0, 277e8 <nvs_flash_al_wrt.part.0+0x66>
		len -= blen;
   277b6:	1ba4      	subs	r4, r4, r6
		offset += blen;
   277b8:	4435      	add	r5, r6
		data8 += blen;
   277ba:	44b0      	add	r8, r6
	if (len) {
   277bc:	b1bc      	cbz	r4, 277ee <nvs_flash_al_wrt.part.0+0x6c>
		memcpy(buf, data8, len);
   277be:	4622      	mov	r2, r4
   277c0:	4641      	mov	r1, r8
   277c2:	4668      	mov	r0, sp
   277c4:	f001 fdbf 	bl	29346 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   277c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   277ca:	681a      	ldr	r2, [r3, #0]
   277cc:	7919      	ldrb	r1, [r3, #4]
   277ce:	1b12      	subs	r2, r2, r4
   277d0:	eb0d 0004 	add.w	r0, sp, r4
   277d4:	f001 fdc2 	bl	2935c <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   277d8:	e9d7 030a 	ldrd	r0, r3, [r7, #40]	; 0x28
   277dc:	681b      	ldr	r3, [r3, #0]
   277de:	6882      	ldr	r2, [r0, #8]
   277e0:	4629      	mov	r1, r5
   277e2:	6854      	ldr	r4, [r2, #4]
   277e4:	466a      	mov	r2, sp
   277e6:	47a0      	blx	r4
}
   277e8:	b009      	add	sp, #36	; 0x24
   277ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
end:
   277ee:	4620      	mov	r0, r4
   277f0:	e7fa      	b.n	277e8 <nvs_flash_al_wrt.part.0+0x66>

000277f2 <nvs_flash_data_wrt>:
{
   277f2:	b538      	push	{r3, r4, r5, lr}
   277f4:	4604      	mov	r4, r0
	if (!len) {
   277f6:	4615      	mov	r5, r2
   277f8:	b12a      	cbz	r2, 27806 <nvs_flash_data_wrt+0x14>
   277fa:	4613      	mov	r3, r2
   277fc:	460a      	mov	r2, r1
   277fe:	6881      	ldr	r1, [r0, #8]
   27800:	f7ff ffbf 	bl	27782 <nvs_flash_al_wrt.part.0>
   27804:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   27806:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   27808:	4629      	mov	r1, r5
   2780a:	f7ff ff2c 	bl	27666 <nvs_al_size.isra.0>
   2780e:	68a3      	ldr	r3, [r4, #8]
   27810:	4403      	add	r3, r0
   27812:	60a3      	str	r3, [r4, #8]
}
   27814:	4610      	mov	r0, r2
   27816:	bd38      	pop	{r3, r4, r5, pc}

00027818 <nvs_flash_ate_wrt>:
{
   27818:	b510      	push	{r4, lr}
   2781a:	460a      	mov	r2, r1
	if (!len) {
   2781c:	2308      	movs	r3, #8
   2781e:	6841      	ldr	r1, [r0, #4]
{
   27820:	4604      	mov	r4, r0
   27822:	f7ff ffae 	bl	27782 <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   27826:	2108      	movs	r1, #8
   27828:	4602      	mov	r2, r0
   2782a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2782c:	f7ff ff1b 	bl	27666 <nvs_al_size.isra.0>
   27830:	6863      	ldr	r3, [r4, #4]
   27832:	1a1b      	subs	r3, r3, r0
   27834:	6063      	str	r3, [r4, #4]
}
   27836:	4610      	mov	r0, r2
   27838:	bd10      	pop	{r4, pc}

0002783a <nvs_add_gc_done_ate>:
{
   2783a:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   2783c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   27840:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   27844:	2300      	movs	r3, #0
{
   27846:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   27848:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2784c:	6883      	ldr	r3, [r0, #8]
   2784e:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   27852:	4668      	mov	r0, sp
   27854:	f7ff fef3 	bl	2763e <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   27858:	4669      	mov	r1, sp
   2785a:	4620      	mov	r0, r4
   2785c:	f7ff ffdc 	bl	27818 <nvs_flash_ate_wrt>
}
   27860:	b002      	add	sp, #8
   27862:	bd10      	pop	{r4, pc}

00027864 <nvs_gc>:
{
   27864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27868:	4604      	mov	r4, r0
   2786a:	b093      	sub	sp, #76	; 0x4c
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2786c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2786e:	2108      	movs	r1, #8
   27870:	f7ff fef9 	bl	27666 <nvs_al_size.isra.0>
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   27874:	6863      	ldr	r3, [r4, #4]
   27876:	0c1b      	lsrs	r3, r3, #16
   27878:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2787a:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
   2787c:	a901      	add	r1, sp, #4
   2787e:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   27880:	9301      	str	r3, [sp, #4]
	nvs_sector_advance(fs, &sec_addr);
   27882:	f7ff fee5 	bl	27650 <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   27886:	9b01      	ldr	r3, [sp, #4]
   27888:	89a1      	ldrh	r1, [r4, #12]
   2788a:	4419      	add	r1, r3
   2788c:	1b49      	subs	r1, r1, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2788e:	2308      	movs	r3, #8
   27890:	aa04      	add	r2, sp, #16
   27892:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   27894:	9102      	str	r1, [sp, #8]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   27896:	f7ff fe5b 	bl	27550 <nvs_flash_rd>
	if (rc < 0) {
   2789a:	2800      	cmp	r0, #0
   2789c:	f2c0 8094 	blt.w	279c8 <nvs_gc+0x164>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   278a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   278a2:	aa04      	add	r2, sp, #16
   278a4:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   278a6:	2300      	movs	r3, #0
		if (data8[i] != value) {
   278a8:	f812 0b01 	ldrb.w	r0, [r2], #1
   278ac:	4281      	cmp	r1, r0
   278ae:	d17c      	bne.n	279aa <nvs_gc+0x146>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   278b0:	3301      	adds	r3, #1
   278b2:	2b08      	cmp	r3, #8
   278b4:	d1f8      	bne.n	278a8 <nvs_gc+0x44>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   278b6:	68a0      	ldr	r0, [r4, #8]
   278b8:	6863      	ldr	r3, [r4, #4]
   278ba:	4428      	add	r0, r5
   278bc:	4283      	cmp	r3, r0
   278be:	d26e      	bcs.n	2799e <nvs_gc+0x13a>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   278c0:	9901      	ldr	r1, [sp, #4]
   278c2:	4620      	mov	r0, r4
   278c4:	f7ff fea1 	bl	2760a <nvs_flash_erase_sector>
	if (rc) {
   278c8:	e07e      	b.n	279c8 <nvs_gc+0x164>
		gc_addr &= ADDR_SECT_MASK;
   278ca:	9b02      	ldr	r3, [sp, #8]
		gc_addr += close_ate.offset;
   278cc:	f8bd 2012 	ldrh.w	r2, [sp, #18]
		gc_addr &= ADDR_SECT_MASK;
   278d0:	0c1b      	lsrs	r3, r3, #16
   278d2:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
   278d4:	4413      	add	r3, r2
   278d6:	9302      	str	r3, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   278d8:	aa06      	add	r2, sp, #24
   278da:	a902      	add	r1, sp, #8
   278dc:	4620      	mov	r0, r4
		gc_prev_addr = gc_addr;
   278de:	f8dd a008 	ldr.w	sl, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   278e2:	f7ff ff02 	bl	276ea <nvs_prev_ate>
		if (rc) {
   278e6:	2800      	cmp	r0, #0
   278e8:	d16e      	bne.n	279c8 <nvs_gc+0x164>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   278ea:	a906      	add	r1, sp, #24
   278ec:	4620      	mov	r0, r4
   278ee:	f7ff fec4 	bl	2767a <nvs_ate_valid>
   278f2:	2800      	cmp	r0, #0
   278f4:	d034      	beq.n	27960 <nvs_gc+0xfc>
		wlk_addr = fs->ate_wra;
   278f6:	6863      	ldr	r3, [r4, #4]
   278f8:	9303      	str	r3, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   278fa:	aa08      	add	r2, sp, #32
   278fc:	a903      	add	r1, sp, #12
   278fe:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   27900:	9e03      	ldr	r6, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   27902:	f7ff fef2 	bl	276ea <nvs_prev_ate>
			if (rc) {
   27906:	2800      	cmp	r0, #0
   27908:	d15e      	bne.n	279c8 <nvs_gc+0x164>
			if ((wlk_ate.id == gc_ate.id) &&
   2790a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2790e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   27912:	429a      	cmp	r2, r3
   27914:	d027      	beq.n	27966 <nvs_gc+0x102>
		} while (wlk_addr != fs->ate_wra);
   27916:	6862      	ldr	r2, [r4, #4]
   27918:	9b03      	ldr	r3, [sp, #12]
   2791a:	429a      	cmp	r2, r3
   2791c:	d1ed      	bne.n	278fa <nvs_gc+0x96>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   2791e:	4556      	cmp	r6, sl
   27920:	d11e      	bne.n	27960 <nvs_gc+0xfc>
   27922:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   27926:	b1db      	cbz	r3, 27960 <nvs_gc+0xfc>
			data_addr += gc_ate.offset;
   27928:	f8bd 301a 	ldrh.w	r3, [sp, #26]
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   2792c:	ea4f 471a 	mov.w	r7, sl, lsr #16
   27930:	043f      	lsls	r7, r7, #16
			data_addr += gc_ate.offset;
   27932:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   27934:	a806      	add	r0, sp, #24
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   27936:	68a3      	ldr	r3, [r4, #8]
   27938:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
   2793c:	f7ff fe7f 	bl	2763e <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   27940:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   27942:	f8bd 801c 	ldrh.w	r8, [sp, #28]
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   27946:	681e      	ldr	r6, [r3, #0]
   27948:	4276      	negs	r6, r6
	block_size =
   2794a:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   2794e:	f1b8 0f00 	cmp.w	r8, #0
   27952:	d10f      	bne.n	27974 <nvs_gc+0x110>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   27954:	a906      	add	r1, sp, #24
   27956:	4620      	mov	r0, r4
   27958:	f7ff ff5e 	bl	27818 <nvs_flash_ate_wrt>
			if (rc) {
   2795c:	2800      	cmp	r0, #0
   2795e:	d133      	bne.n	279c8 <nvs_gc+0x164>
	} while (gc_prev_addr != stop_addr);
   27960:	45ca      	cmp	sl, r9
   27962:	d1b9      	bne.n	278d8 <nvs_gc+0x74>
gc_done:
   27964:	e7a7      	b.n	278b6 <nvs_gc+0x52>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   27966:	a908      	add	r1, sp, #32
   27968:	4620      	mov	r0, r4
   2796a:	f7ff fe86 	bl	2767a <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   2796e:	2800      	cmp	r0, #0
   27970:	d0d1      	beq.n	27916 <nvs_gc+0xb2>
   27972:	e7d4      	b.n	2791e <nvs_gc+0xba>
		bytes_to_copy = MIN(block_size, len);
   27974:	4546      	cmp	r6, r8
   27976:	46b3      	mov	fp, r6
   27978:	bf28      	it	cs
   2797a:	46c3      	movcs	fp, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   2797c:	465b      	mov	r3, fp
   2797e:	aa0a      	add	r2, sp, #40	; 0x28
   27980:	4639      	mov	r1, r7
   27982:	4620      	mov	r0, r4
   27984:	f7ff fde4 	bl	27550 <nvs_flash_rd>
		if (rc) {
   27988:	b9f0      	cbnz	r0, 279c8 <nvs_gc+0x164>
		rc = nvs_flash_data_wrt(fs, buf, bytes_to_copy);
   2798a:	465a      	mov	r2, fp
   2798c:	a90a      	add	r1, sp, #40	; 0x28
   2798e:	4620      	mov	r0, r4
   27990:	f7ff ff2f 	bl	277f2 <nvs_flash_data_wrt>
		if (rc) {
   27994:	b9c0      	cbnz	r0, 279c8 <nvs_gc+0x164>
		len -= bytes_to_copy;
   27996:	eba8 080b 	sub.w	r8, r8, fp
		addr += bytes_to_copy;
   2799a:	445f      	add	r7, fp
   2799c:	e7d7      	b.n	2794e <nvs_gc+0xea>
		rc = nvs_add_gc_done_ate(fs);
   2799e:	4620      	mov	r0, r4
   279a0:	f7ff ff4b 	bl	2783a <nvs_add_gc_done_ate>
		if (rc) {
   279a4:	2800      	cmp	r0, #0
   279a6:	d08b      	beq.n	278c0 <nvs_gc+0x5c>
   279a8:	e00e      	b.n	279c8 <nvs_gc+0x164>
	stop_addr = gc_addr - ate_size;
   279aa:	9b02      	ldr	r3, [sp, #8]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   279ac:	a904      	add	r1, sp, #16
   279ae:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   279b0:	eba3 0905 	sub.w	r9, r3, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   279b4:	f7ff fe7b 	bl	276ae <nvs_close_ate_valid>
   279b8:	2800      	cmp	r0, #0
   279ba:	d186      	bne.n	278ca <nvs_gc+0x66>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   279bc:	a902      	add	r1, sp, #8
   279be:	4620      	mov	r0, r4
   279c0:	f7e6 fdec 	bl	e59c <nvs_recover_last_ate>
		if (rc) {
   279c4:	2800      	cmp	r0, #0
   279c6:	d087      	beq.n	278d8 <nvs_gc+0x74>
}
   279c8:	b013      	add	sp, #76	; 0x4c
   279ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000279ce <nvs_delete>:

int nvs_delete(struct nvs_fs *fs, uint16_t id)
{
	return nvs_write(fs, id, NULL, 0);
   279ce:	2300      	movs	r3, #0
   279d0:	461a      	mov	r2, r3
   279d2:	f7e6 bf69 	b.w	e8a8 <nvs_write>

000279d6 <nvs_read_hist>:
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   279d6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   279da:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   279dc:	7c03      	ldrb	r3, [r0, #16]
{
   279de:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
   279e2:	4604      	mov	r4, r0
   279e4:	460f      	mov	r7, r1
   279e6:	4690      	mov	r8, r2
	if (!fs->ready) {
   279e8:	2b00      	cmp	r3, #0
   279ea:	d045      	beq.n	27a78 <nvs_read_hist+0xa2>
		LOG_ERR("NVS not initialized");
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   279ec:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   279ee:	2108      	movs	r1, #8
   279f0:	f7ff fe39 	bl	27666 <nvs_al_size.isra.0>

	if (len > (fs->sector_size - 2 * ate_size)) {
   279f4:	89a3      	ldrh	r3, [r4, #12]
   279f6:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   279fa:	429e      	cmp	r6, r3
   279fc:	d83f      	bhi.n	27a7e <nvs_read_hist+0xa8>
		return -EINVAL;
	}

	cnt_his = 0U;

	wlk_addr = fs->ate_wra;
   279fe:	6863      	ldr	r3, [r4, #4]
   27a00:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
   27a02:	f04f 0a00 	mov.w	sl, #0
	rd_addr = wlk_addr;

	while (cnt_his <= cnt) {
		rd_addr = wlk_addr;
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   27a06:	aa02      	add	r2, sp, #8
   27a08:	a901      	add	r1, sp, #4
   27a0a:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   27a0c:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   27a0e:	f7ff fe6c 	bl	276ea <nvs_prev_ate>
		if (rc) {
   27a12:	bb38      	cbnz	r0, 27a64 <nvs_read_hist+0x8e>
			goto err;
		}
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   27a14:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   27a18:	42bb      	cmp	r3, r7
   27a1a:	d108      	bne.n	27a2e <nvs_read_hist+0x58>
   27a1c:	a902      	add	r1, sp, #8
   27a1e:	4620      	mov	r0, r4
   27a20:	f7ff fe2b 	bl	2767a <nvs_ate_valid>
   27a24:	b118      	cbz	r0, 27a2e <nvs_read_hist+0x58>
			cnt_his++;
   27a26:	f10a 0a01 	add.w	sl, sl, #1
   27a2a:	fa1f fa8a 	uxth.w	sl, sl
		}
		if (wlk_addr == fs->ate_wra) {
   27a2e:	6862      	ldr	r2, [r4, #4]
   27a30:	9b01      	ldr	r3, [sp, #4]
   27a32:	429a      	cmp	r2, r3
   27a34:	d019      	beq.n	27a6a <nvs_read_hist+0x94>
	while (cnt_his <= cnt) {
   27a36:	45d1      	cmp	r9, sl
   27a38:	d2e5      	bcs.n	27a06 <nvs_read_hist+0x30>
			break;
		}
	}

	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   27a3a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   27a3e:	b1c3      	cbz	r3, 27a72 <nvs_read_hist+0x9c>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   27a40:	45d1      	cmp	r9, sl
   27a42:	d816      	bhi.n	27a72 <nvs_read_hist+0x9c>
		return -ENOENT;
	}

	rd_addr &= ADDR_SECT_MASK;
	rd_addr += wlk_ate.offset;
   27a44:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   27a48:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   27a4a:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   27a4c:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   27a50:	bf28      	it	cs
   27a52:	4633      	movcs	r3, r6
   27a54:	4642      	mov	r2, r8
   27a56:	4429      	add	r1, r5
   27a58:	4620      	mov	r0, r4
   27a5a:	f7ff fd79 	bl	27550 <nvs_flash_rd>
	if (rc) {
   27a5e:	b908      	cbnz	r0, 27a64 <nvs_read_hist+0x8e>
		goto err;
	}

	return wlk_ate.len;
   27a60:	f8bd 000c 	ldrh.w	r0, [sp, #12]

err:
	return rc;
}
   27a64:	b004      	add	sp, #16
   27a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   27a6a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   27a6e:	42bb      	cmp	r3, r7
   27a70:	d0e3      	beq.n	27a3a <nvs_read_hist+0x64>
		return -ENOENT;
   27a72:	f06f 0001 	mvn.w	r0, #1
   27a76:	e7f5      	b.n	27a64 <nvs_read_hist+0x8e>
		return -EACCES;
   27a78:	f06f 000c 	mvn.w	r0, #12
   27a7c:	e7f2      	b.n	27a64 <nvs_read_hist+0x8e>
		return -EINVAL;
   27a7e:	f06f 0015 	mvn.w	r0, #21
   27a82:	e7ef      	b.n	27a64 <nvs_read_hist+0x8e>

00027a84 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   27a84:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   27a86:	2400      	movs	r4, #0
   27a88:	9400      	str	r4, [sp, #0]
   27a8a:	f7ff ffa4 	bl	279d6 <nvs_read_hist>
	return rc;
}
   27a8e:	b002      	add	sp, #8
   27a90:	bd10      	pop	{r4, pc}

00027a92 <flash_img_buffered_write>:
	     "CONFIG_IMG_BLOCK_BUF_SIZE is not a multiple of "
	     "FLASH_WRITE_BLOCK_SIZE");

int flash_img_buffered_write(struct flash_img_context *ctx, const uint8_t *data,
			     size_t len, bool flush)
{
   27a92:	b570      	push	{r4, r5, r6, lr}
   27a94:	4604      	mov	r4, r0
	int rc;

	rc = stream_flash_buffered_write(&ctx->stream, data, len, flush);
   27a96:	f500 7001 	add.w	r0, r0, #516	; 0x204
{
   27a9a:	461e      	mov	r6, r3
	rc = stream_flash_buffered_write(&ctx->stream, data, len, flush);
   27a9c:	f000 f90a 	bl	27cb4 <stream_flash_buffered_write>
   27aa0:	4605      	mov	r5, r0
	if (!flush) {
   27aa2:	b136      	cbz	r6, 27ab2 <flash_img_buffered_write+0x20>
	if (rc) {
		return rc;
	}
#endif

	flash_area_close(ctx->flash_area);
   27aa4:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
   27aa8:	f000 f826 	bl	27af8 <flash_area_close>
	ctx->flash_area = NULL;
   27aac:	2300      	movs	r3, #0
   27aae:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

	return rc;
}
   27ab2:	4628      	mov	r0, r5
   27ab4:	bd70      	pop	{r4, r5, r6, pc}

00027ab6 <flash_img_init_id>:
{
	return stream_flash_bytes_written(&ctx->stream);
}

int flash_img_init_id(struct flash_img_context *ctx, uint8_t area_id)
{
   27ab6:	b530      	push	{r4, r5, lr}
   27ab8:	4605      	mov	r5, r0
   27aba:	b085      	sub	sp, #20
   27abc:	4608      	mov	r0, r1
	int rc;
	const struct device *flash_dev;

	rc = flash_area_open(area_id,
   27abe:	f505 7100 	add.w	r1, r5, #512	; 0x200
   27ac2:	f7e6 ffb7 	bl	ea34 <flash_area_open>
			       (const struct flash_area **)&(ctx->flash_area));
	if (rc) {
   27ac6:	4604      	mov	r4, r0
   27ac8:	b998      	cbnz	r0, 27af2 <flash_img_init_id+0x3c>
		return rc;
	}

	flash_dev = flash_area_get_device(ctx->flash_area);
   27aca:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
   27ace:	f000 f86c 	bl	27baa <flash_area_get_device>

	return stream_flash_init(&ctx->stream, flash_dev, ctx->buf,
			CONFIG_IMG_BLOCK_BUF_SIZE, ctx->flash_area->fa_off,
   27ad2:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
	return stream_flash_init(&ctx->stream, flash_dev, ctx->buf,
   27ad6:	9402      	str	r4, [sp, #8]
   27ad8:	689a      	ldr	r2, [r3, #8]
   27ada:	9201      	str	r2, [sp, #4]
   27adc:	685b      	ldr	r3, [r3, #4]
   27ade:	9300      	str	r3, [sp, #0]
	flash_dev = flash_area_get_device(ctx->flash_area);
   27ae0:	4601      	mov	r1, r0
	return stream_flash_init(&ctx->stream, flash_dev, ctx->buf,
   27ae2:	f44f 7300 	mov.w	r3, #512	; 0x200
   27ae6:	462a      	mov	r2, r5
   27ae8:	f505 7001 	add.w	r0, r5, #516	; 0x204
   27aec:	f7e6 fff4 	bl	ead8 <stream_flash_init>
   27af0:	4604      	mov	r4, r0
			ctx->flash_area->fa_size, NULL);
}
   27af2:	4620      	mov	r0, r4
   27af4:	b005      	add	sp, #20
   27af6:	bd30      	pop	{r4, r5, pc}

00027af8 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   27af8:	4770      	bx	lr

00027afa <flash_area_read>:

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   27afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
   27afe:	1e0c      	subs	r4, r1, #0
   27b00:	4605      	mov	r5, r0
   27b02:	4617      	mov	r7, r2
   27b04:	461e      	mov	r6, r3
   27b06:	db10      	blt.n	27b2a <flash_area_read+0x30>
   27b08:	6882      	ldr	r2, [r0, #8]
   27b0a:	18e3      	adds	r3, r4, r3
   27b0c:	4293      	cmp	r3, r2
   27b0e:	d80c      	bhi.n	27b2a <flash_area_read+0x30>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   27b10:	68c0      	ldr	r0, [r0, #12]
   27b12:	f7fd fe13 	bl	2573c <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   27b16:	6869      	ldr	r1, [r5, #4]
   27b18:	4421      	add	r1, r4
	return api->read(dev, offset, data, len);
   27b1a:	6883      	ldr	r3, [r0, #8]
   27b1c:	681c      	ldr	r4, [r3, #0]
   27b1e:	463a      	mov	r2, r7
   27b20:	4633      	mov	r3, r6
   27b22:	46a4      	mov	ip, r4
}
   27b24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   27b28:	4760      	bx	ip
   27b2a:	f06f 0015 	mvn.w	r0, #21
   27b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027b32 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   27b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27b36:	1e0c      	subs	r4, r1, #0
   27b38:	4605      	mov	r5, r0
   27b3a:	4617      	mov	r7, r2
   27b3c:	461e      	mov	r6, r3
   27b3e:	db10      	blt.n	27b62 <flash_area_write+0x30>
   27b40:	6882      	ldr	r2, [r0, #8]
   27b42:	18e3      	adds	r3, r4, r3
   27b44:	4293      	cmp	r3, r2
   27b46:	d80c      	bhi.n	27b62 <flash_area_write+0x30>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   27b48:	68c0      	ldr	r0, [r0, #12]
   27b4a:	f7fd fdf7 	bl	2573c <z_impl_device_get_binding>

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   27b4e:	6869      	ldr	r1, [r5, #4]
   27b50:	4421      	add	r1, r4
	rc = api->write(dev, offset, data, len);
   27b52:	6883      	ldr	r3, [r0, #8]
   27b54:	685c      	ldr	r4, [r3, #4]
   27b56:	463a      	mov	r2, r7
   27b58:	4633      	mov	r3, r6
   27b5a:	46a4      	mov	ip, r4

	return rc;
}
   27b5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   27b60:	4760      	bx	ip
   27b62:	f06f 0015 	mvn.w	r0, #21
   27b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027b6a <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
   27b6a:	b570      	push	{r4, r5, r6, lr}
   27b6c:	1e0c      	subs	r4, r1, #0
   27b6e:	4605      	mov	r5, r0
   27b70:	4616      	mov	r6, r2
   27b72:	db0e      	blt.n	27b92 <flash_area_erase+0x28>
   27b74:	18a3      	adds	r3, r4, r2
   27b76:	6882      	ldr	r2, [r0, #8]
   27b78:	4293      	cmp	r3, r2
   27b7a:	d80a      	bhi.n	27b92 <flash_area_erase+0x28>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   27b7c:	68c0      	ldr	r0, [r0, #12]
   27b7e:	f7fd fddd 	bl	2573c <z_impl_device_get_binding>

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   27b82:	6869      	ldr	r1, [r5, #4]
   27b84:	4421      	add	r1, r4
	rc = api->erase(dev, offset, size);
   27b86:	6883      	ldr	r3, [r0, #8]
   27b88:	4632      	mov	r2, r6
   27b8a:	689b      	ldr	r3, [r3, #8]

	return rc;
}
   27b8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   27b90:	4718      	bx	r3
   27b92:	f06f 0015 	mvn.w	r0, #21
   27b96:	bd70      	pop	{r4, r5, r6, pc}

00027b98 <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
   27b98:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
   27b9a:	68c0      	ldr	r0, [r0, #12]
   27b9c:	f7fd fdce 	bl	2573c <z_impl_device_get_binding>
	return api->get_parameters(dev)->write_block_size;
   27ba0:	6883      	ldr	r3, [r0, #8]
   27ba2:	68db      	ldr	r3, [r3, #12]
   27ba4:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
   27ba6:	6800      	ldr	r0, [r0, #0]
   27ba8:	bd08      	pop	{r3, pc}

00027baa <flash_area_get_device>:
	return 1;
}

const struct device *flash_area_get_device(const struct flash_area *fa)
{
	return device_get_binding(fa->fa_dev_name);
   27baa:	68c0      	ldr	r0, [r0, #12]
   27bac:	f7fd bdc6 	b.w	2573c <z_impl_device_get_binding>

00027bb0 <flash_area_erased_val>:
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
   27bb0:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(device_get_binding(fa->fa_dev_name));
   27bb2:	68c0      	ldr	r0, [r0, #12]
   27bb4:	f7fd fdc2 	bl	2573c <z_impl_device_get_binding>
	return api->get_parameters(dev);
   27bb8:	6883      	ldr	r3, [r0, #8]
   27bba:	68db      	ldr	r3, [r3, #12]
   27bbc:	4798      	blx	r3

	return param->erase_value;
}
   27bbe:	7900      	ldrb	r0, [r0, #4]
   27bc0:	bd08      	pop	{r3, pc}

00027bc2 <get_sectors_cb>:
{
   27bc2:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   27bc4:	6802      	ldr	r2, [r0, #0]
   27bc6:	684c      	ldr	r4, [r1, #4]
   27bc8:	42a2      	cmp	r2, r4
   27bca:	d316      	bcc.n	27bfa <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   27bcc:	688b      	ldr	r3, [r1, #8]
   27bce:	4423      	add	r3, r4
   27bd0:	429a      	cmp	r2, r3
   27bd2:	d206      	bcs.n	27be2 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   27bd4:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   27bd8:	42ab      	cmp	r3, r5
   27bda:	d304      	bcc.n	27be6 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   27bdc:	f06f 030b 	mvn.w	r3, #11
   27be0:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   27be2:	2000      	movs	r0, #0
   27be4:	e00a      	b.n	27bfc <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   27be6:	68cd      	ldr	r5, [r1, #12]
   27be8:	1b12      	subs	r2, r2, r4
   27bea:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   27bee:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   27bf2:	6842      	ldr	r2, [r0, #4]
   27bf4:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   27bf6:	3301      	adds	r3, #1
   27bf8:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   27bfa:	2001      	movs	r0, #1
}
   27bfc:	bd70      	pop	{r4, r5, r6, pc}

00027bfe <flash_get_write_block_size>:

extern size_t z_impl_flash_get_write_block_size(const struct device * dev);

__pinned_func
static inline size_t flash_get_write_block_size(const struct device * dev)
{
   27bfe:	b508      	push	{r3, lr}
	return api->get_parameters(dev)->write_block_size;
   27c00:	6883      	ldr	r3, [r0, #8]
   27c02:	68db      	ldr	r3, [r3, #12]
   27c04:	4798      	blx	r3
		return (size_t) arch_syscall_invoke1(parm0.x, K_SYSCALL_FLASH_GET_WRITE_BLOCK_SIZE);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_write_block_size(dev);
}
   27c06:	6800      	ldr	r0, [r0, #0]
   27c08:	bd08      	pop	{r3, pc}

00027c0a <find_flash_total_size>:
	if (ctx->buf_len > info->size) {
   27c0a:	6843      	ldr	r3, [r0, #4]
   27c0c:	680a      	ldr	r2, [r1, #0]
   27c0e:	429a      	cmp	r2, r3
	ctx->total_size += info->size;
   27c10:	bf97      	itett	ls
   27c12:	684a      	ldrls	r2, [r1, #4]
		ctx->total_size = 0;
   27c14:	2300      	movhi	r3, #0
	ctx->total_size += info->size;
   27c16:	189b      	addls	r3, r3, r2
	return true;
   27c18:	2001      	movls	r0, #1
		return false;
   27c1a:	bf88      	it	hi
   27c1c:	4618      	movhi	r0, r3
   27c1e:	604b      	str	r3, [r1, #4]
}
   27c20:	4770      	bx	lr

00027c22 <flash_sync>:
{
   27c22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ctx->buf_bytes == 0) {
   27c24:	6885      	ldr	r5, [r0, #8]
{
   27c26:	4604      	mov	r4, r0
	if (ctx->buf_bytes == 0) {
   27c28:	b34d      	cbz	r5, 27c7e <flash_sync+0x5c>
	size_t write_addr = ctx->offset + ctx->bytes_written;
   27c2a:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
	fill_length = flash_get_write_block_size(ctx->fdev);
   27c2e:	68c0      	ldr	r0, [r0, #12]
   27c30:	f7ff ffe5 	bl	27bfe <flash_get_write_block_size>
	if (ctx->buf_bytes % fill_length) {
   27c34:	68a5      	ldr	r5, [r4, #8]
   27c36:	fbb5 f3f0 	udiv	r3, r5, r0
   27c3a:	fb00 5513 	mls	r5, r0, r3, r5
   27c3e:	b15d      	cbz	r5, 27c58 <flash_sync+0x36>
		fill_length -= ctx->buf_bytes % fill_length;
   27c40:	1b45      	subs	r5, r0, r5
		filler = flash_get_parameters(ctx->fdev)->erase_value;
   27c42:	68e0      	ldr	r0, [r4, #12]
	return api->get_parameters(dev);
   27c44:	6883      	ldr	r3, [r0, #8]
   27c46:	68db      	ldr	r3, [r3, #12]
   27c48:	4798      	blx	r3
		memset(ctx->buf + ctx->buf_bytes, filler, fill_length);
   27c4a:	68a3      	ldr	r3, [r4, #8]
   27c4c:	7901      	ldrb	r1, [r0, #4]
   27c4e:	6820      	ldr	r0, [r4, #0]
   27c50:	462a      	mov	r2, r5
   27c52:	4418      	add	r0, r3
   27c54:	f001 fb82 	bl	2935c <memset>
	buf_bytes_aligned = ctx->buf_bytes + fill_length;
   27c58:	68a3      	ldr	r3, [r4, #8]
	rc = flash_write(ctx->fdev, write_addr, ctx->buf, buf_bytes_aligned);
   27c5a:	68e0      	ldr	r0, [r4, #12]
   27c5c:	6822      	ldr	r2, [r4, #0]
	size_t write_addr = ctx->offset + ctx->bytes_written;
   27c5e:	443e      	add	r6, r7
	buf_bytes_aligned = ctx->buf_bytes + fill_length;
   27c60:	442b      	add	r3, r5
	rc = api->write(dev, offset, data, len);
   27c62:	6881      	ldr	r1, [r0, #8]
   27c64:	684d      	ldr	r5, [r1, #4]
   27c66:	4631      	mov	r1, r6
   27c68:	47a8      	blx	r5
	if (rc != 0) {
   27c6a:	4605      	mov	r5, r0
   27c6c:	b938      	cbnz	r0, 27c7e <flash_sync+0x5c>
	if (ctx->callback) {
   27c6e:	69e3      	ldr	r3, [r4, #28]
   27c70:	b9f3      	cbnz	r3, 27cb0 <flash_sync+0x8e>
	ctx->bytes_written += ctx->buf_bytes;
   27c72:	6923      	ldr	r3, [r4, #16]
   27c74:	68a2      	ldr	r2, [r4, #8]
   27c76:	4413      	add	r3, r2
   27c78:	6123      	str	r3, [r4, #16]
	ctx->buf_bytes = 0U;
   27c7a:	2300      	movs	r3, #0
   27c7c:	60a3      	str	r3, [r4, #8]
}
   27c7e:	4628      	mov	r0, r5
   27c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			ctx->buf[i] = ~ctx->buf[i];
   27c82:	5c53      	ldrb	r3, [r2, r1]
   27c84:	43db      	mvns	r3, r3
   27c86:	5453      	strb	r3, [r2, r1]
		for (int i = 0; i < ctx->buf_bytes; i++) {
   27c88:	3101      	adds	r1, #1
   27c8a:	68a3      	ldr	r3, [r4, #8]
			ctx->buf[i] = ~ctx->buf[i];
   27c8c:	6822      	ldr	r2, [r4, #0]
		for (int i = 0; i < ctx->buf_bytes; i++) {
   27c8e:	428b      	cmp	r3, r1
   27c90:	d8f7      	bhi.n	27c82 <flash_sync+0x60>
		rc = flash_read(ctx->fdev, write_addr, ctx->buf,
   27c92:	68e0      	ldr	r0, [r4, #12]
	return api->read(dev, offset, data, len);
   27c94:	6881      	ldr	r1, [r0, #8]
   27c96:	680f      	ldr	r7, [r1, #0]
   27c98:	4631      	mov	r1, r6
   27c9a:	47b8      	blx	r7
		if (rc != 0) {
   27c9c:	b930      	cbnz	r0, 27cac <flash_sync+0x8a>
		rc = ctx->callback(ctx->buf, ctx->buf_bytes, write_addr);
   27c9e:	69e3      	ldr	r3, [r4, #28]
   27ca0:	68a1      	ldr	r1, [r4, #8]
   27ca2:	6820      	ldr	r0, [r4, #0]
   27ca4:	4632      	mov	r2, r6
   27ca6:	4798      	blx	r3
		if (rc != 0) {
   27ca8:	2800      	cmp	r0, #0
   27caa:	d0e2      	beq.n	27c72 <flash_sync+0x50>
   27cac:	4605      	mov	r5, r0
   27cae:	e7e6      	b.n	27c7e <flash_sync+0x5c>
		for (int i = 0; i < ctx->buf_bytes; i++) {
   27cb0:	4601      	mov	r1, r0
   27cb2:	e7ea      	b.n	27c8a <flash_sync+0x68>

00027cb4 <stream_flash_buffered_write>:
{
   27cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27cb8:	4689      	mov	r9, r1
   27cba:	4616      	mov	r6, r2
   27cbc:	4698      	mov	r8, r3
	if (!ctx) {
   27cbe:	4604      	mov	r4, r0
   27cc0:	b398      	cbz	r0, 27d2a <stream_flash_buffered_write+0x76>
	if (ctx->bytes_written + ctx->buf_bytes + len > ctx->available) {
   27cc2:	6882      	ldr	r2, [r0, #8]
   27cc4:	6903      	ldr	r3, [r0, #16]
   27cc6:	4413      	add	r3, r2
   27cc8:	6982      	ldr	r2, [r0, #24]
   27cca:	4433      	add	r3, r6
   27ccc:	4293      	cmp	r3, r2
   27cce:	d830      	bhi.n	27d32 <stream_flash_buffered_write+0x7e>
	int processed = 0;
   27cd0:	2500      	movs	r5, #0
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   27cd2:	e9d4 7001 	ldrd	r7, r0, [r4, #4]
	while ((len - processed) >=
   27cd6:	eba6 0a05 	sub.w	sl, r6, r5
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   27cda:	1a3f      	subs	r7, r7, r0
	while ((len - processed) >=
   27cdc:	45ba      	cmp	sl, r7
   27cde:	d215      	bcs.n	27d0c <stream_flash_buffered_write+0x58>
	if (processed < len) {
   27ce0:	42b5      	cmp	r5, r6
   27ce2:	d209      	bcs.n	27cf8 <stream_flash_buffered_write+0x44>
		memcpy(ctx->buf + ctx->buf_bytes,
   27ce4:	6823      	ldr	r3, [r4, #0]
   27ce6:	4652      	mov	r2, sl
   27ce8:	4418      	add	r0, r3
   27cea:	eb09 0105 	add.w	r1, r9, r5
   27cee:	f001 fb2a 	bl	29346 <memcpy>
		ctx->buf_bytes += len - processed;
   27cf2:	68a3      	ldr	r3, [r4, #8]
   27cf4:	4453      	add	r3, sl
   27cf6:	60a3      	str	r3, [r4, #8]
	if (flush && ctx->buf_bytes > 0) {
   27cf8:	f1b8 0f00 	cmp.w	r8, #0
   27cfc:	d01c      	beq.n	27d38 <stream_flash_buffered_write+0x84>
   27cfe:	68a0      	ldr	r0, [r4, #8]
   27d00:	b1a8      	cbz	r0, 27d2e <stream_flash_buffered_write+0x7a>
		rc = flash_sync(ctx);
   27d02:	4620      	mov	r0, r4
}
   27d04:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		rc = flash_sync(ctx);
   27d08:	f7ff bf8b 	b.w	27c22 <flash_sync>
		memcpy(ctx->buf + ctx->buf_bytes, data + processed,
   27d0c:	6823      	ldr	r3, [r4, #0]
   27d0e:	463a      	mov	r2, r7
   27d10:	4418      	add	r0, r3
   27d12:	eb09 0105 	add.w	r1, r9, r5
   27d16:	f001 fb16 	bl	29346 <memcpy>
		ctx->buf_bytes = ctx->buf_len;
   27d1a:	6863      	ldr	r3, [r4, #4]
   27d1c:	60a3      	str	r3, [r4, #8]
		rc = flash_sync(ctx);
   27d1e:	4620      	mov	r0, r4
   27d20:	f7ff ff7f 	bl	27c22 <flash_sync>
		if (rc != 0) {
   27d24:	b918      	cbnz	r0, 27d2e <stream_flash_buffered_write+0x7a>
		processed += buf_empty_bytes;
   27d26:	443d      	add	r5, r7
   27d28:	e7d3      	b.n	27cd2 <stream_flash_buffered_write+0x1e>
		return -EFAULT;
   27d2a:	f06f 000d 	mvn.w	r0, #13
}
   27d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   27d32:	f06f 000b 	mvn.w	r0, #11
   27d36:	e7fa      	b.n	27d2e <stream_flash_buffered_write+0x7a>
   27d38:	4640      	mov	r0, r8
   27d3a:	e7f8      	b.n	27d2e <stream_flash_buffered_write+0x7a>

00027d3c <settings_load>:
	return settings_load_subtree(NULL);
   27d3c:	2000      	movs	r0, #0
   27d3e:	f7e6 bf4b 	b.w	ebd8 <settings_load_subtree>

00027d42 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   27d42:	2200      	movs	r2, #0
   27d44:	4611      	mov	r1, r2
   27d46:	f7e6 bf0d 	b.w	eb64 <settings_save_one>

00027d4a <settings_name_steq>:
{
   27d4a:	4603      	mov	r3, r0
   27d4c:	b530      	push	{r4, r5, lr}
   27d4e:	4608      	mov	r0, r1
	if (next) {
   27d50:	b10a      	cbz	r2, 27d56 <settings_name_steq+0xc>
		*next = NULL;
   27d52:	2100      	movs	r1, #0
   27d54:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   27d56:	b163      	cbz	r3, 27d72 <settings_name_steq+0x28>
   27d58:	b190      	cbz	r0, 27d80 <settings_name_steq+0x36>
   27d5a:	1e41      	subs	r1, r0, #1
   27d5c:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   27d5e:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   27d62:	4604      	mov	r4, r0
   27d64:	f810 3b01 	ldrb.w	r3, [r0], #1
   27d68:	b15d      	cbz	r5, 27d82 <settings_name_steq+0x38>
   27d6a:	429d      	cmp	r5, r3
   27d6c:	d101      	bne.n	27d72 <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   27d6e:	2d3d      	cmp	r5, #61	; 0x3d
   27d70:	d1f5      	bne.n	27d5e <settings_name_steq+0x14>
	return 0;
   27d72:	2000      	movs	r0, #0
   27d74:	e004      	b.n	27d80 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   27d76:	2b3d      	cmp	r3, #61	; 0x3d
   27d78:	d008      	beq.n	27d8c <settings_name_steq+0x42>
   27d7a:	fab3 f083 	clz	r0, r3
   27d7e:	0940      	lsrs	r0, r0, #5
}
   27d80:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   27d82:	2b2f      	cmp	r3, #47	; 0x2f
   27d84:	d1f7      	bne.n	27d76 <settings_name_steq+0x2c>
		if (next) {
   27d86:	b10a      	cbz	r2, 27d8c <settings_name_steq+0x42>
			*next = name + 1;
   27d88:	3401      	adds	r4, #1
   27d8a:	6014      	str	r4, [r2, #0]
		return 1;
   27d8c:	2001      	movs	r0, #1
   27d8e:	e7f7      	b.n	27d80 <settings_name_steq+0x36>

00027d90 <settings_name_next>:
{
   27d90:	b530      	push	{r4, r5, lr}
   27d92:	4603      	mov	r3, r0
	if (next) {
   27d94:	b109      	cbz	r1, 27d9a <settings_name_next+0xa>
		*next = NULL;
   27d96:	2200      	movs	r2, #0
   27d98:	600a      	str	r2, [r1, #0]
	if (!name) {
   27d9a:	b16b      	cbz	r3, 27db8 <settings_name_next+0x28>
   27d9c:	461a      	mov	r2, r3
   27d9e:	4614      	mov	r4, r2
   27da0:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   27da2:	f812 5b01 	ldrb.w	r5, [r2], #1
   27da6:	b135      	cbz	r5, 27db6 <settings_name_next+0x26>
   27da8:	2d3d      	cmp	r5, #61	; 0x3d
   27daa:	d004      	beq.n	27db6 <settings_name_next+0x26>
   27dac:	2d2f      	cmp	r5, #47	; 0x2f
   27dae:	d1f6      	bne.n	27d9e <settings_name_next+0xe>
		if (next) {
   27db0:	b109      	cbz	r1, 27db6 <settings_name_next+0x26>
			*next = name + 1;
   27db2:	3401      	adds	r4, #1
   27db4:	600c      	str	r4, [r1, #0]
}
   27db6:	bd30      	pop	{r4, r5, pc}
		return 0;
   27db8:	4618      	mov	r0, r3
   27dba:	e7fc      	b.n	27db6 <settings_name_next+0x26>

00027dbc <settings_call_set_handler>:
{
   27dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27dc0:	b085      	sub	sp, #20
   27dc2:	4604      	mov	r4, r0
   27dc4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	const char *name_key = name;
   27dc8:	9003      	str	r0, [sp, #12]
{
   27dca:	460d      	mov	r5, r1
   27dcc:	4616      	mov	r6, r2
   27dce:	461f      	mov	r7, r3
	if (load_arg && load_arg->subtree &&
   27dd0:	f1b8 0f00 	cmp.w	r8, #0
   27dd4:	d018      	beq.n	27e08 <settings_call_set_handler+0x4c>
   27dd6:	f8d8 1000 	ldr.w	r1, [r8]
   27dda:	b181      	cbz	r1, 27dfe <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   27ddc:	aa03      	add	r2, sp, #12
   27dde:	f7ff ffb4 	bl	27d4a <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   27de2:	b960      	cbnz	r0, 27dfe <settings_call_set_handler+0x42>
			rc = 0;
   27de4:	2000      	movs	r0, #0
   27de6:	e007      	b.n	27df8 <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   27de8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   27dec:	9300      	str	r3, [sp, #0]
   27dee:	9803      	ldr	r0, [sp, #12]
   27df0:	463b      	mov	r3, r7
   27df2:	4632      	mov	r2, r6
   27df4:	4629      	mov	r1, r5
   27df6:	47c8      	blx	r9
}
   27df8:	b005      	add	sp, #20
   27dfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
   27dfe:	f8d8 9004 	ldr.w	r9, [r8, #4]
   27e02:	f1b9 0f00 	cmp.w	r9, #0
   27e06:	d1ef      	bne.n	27de8 <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
   27e08:	a903      	add	r1, sp, #12
   27e0a:	4620      	mov	r0, r4
   27e0c:	f7e6 ff3a 	bl	ec84 <settings_parse_and_lookup>
		if (!ch) {
   27e10:	2800      	cmp	r0, #0
   27e12:	d0e7      	beq.n	27de4 <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   27e14:	6884      	ldr	r4, [r0, #8]
   27e16:	9803      	ldr	r0, [sp, #12]
   27e18:	463b      	mov	r3, r7
   27e1a:	4632      	mov	r2, r6
   27e1c:	4629      	mov	r1, r5
   27e1e:	47a0      	blx	r4
   27e20:	e7e0      	b.n	27de4 <settings_call_set_handler+0x28>

00027e22 <settings_nvs_read_fn>:
{
   27e22:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   27e24:	4613      	mov	r3, r2
{
   27e26:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   27e28:	460a      	mov	r2, r1
   27e2a:	8881      	ldrh	r1, [r0, #4]
   27e2c:	6800      	ldr	r0, [r0, #0]
   27e2e:	f7ff fe29 	bl	27a84 <nvs_read>
}
   27e32:	42a0      	cmp	r0, r4
   27e34:	bfa8      	it	ge
   27e36:	4620      	movge	r0, r4
   27e38:	bd10      	pop	{r4, pc}

00027e3a <settings_nvs_save>:
{
   27e3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27e3e:	b097      	sub	sp, #92	; 0x5c
   27e40:	4604      	mov	r4, r0
   27e42:	9201      	str	r2, [sp, #4]
   27e44:	469b      	mov	fp, r3
	if (!name) {
   27e46:	4689      	mov	r9, r1
   27e48:	2900      	cmp	r1, #0
   27e4a:	d069      	beq.n	27f20 <settings_nvs_save+0xe6>
	delete = ((value == NULL) || (val_len == 0));
   27e4c:	b1da      	cbz	r2, 27e86 <settings_nvs_save+0x4c>
   27e4e:	fabb f78b 	clz	r7, fp
   27e52:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   27e54:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   27e56:	3501      	adds	r5, #1
   27e58:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   27e5a:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   27e5c:	f104 0a08 	add.w	sl, r4, #8
		name_id--;
   27e60:	1e6e      	subs	r6, r5, #1
   27e62:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   27e64:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   27e68:	d02e      	beq.n	27ec8 <settings_nvs_save+0x8e>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   27e6a:	234a      	movs	r3, #74	; 0x4a
   27e6c:	aa03      	add	r2, sp, #12
   27e6e:	4631      	mov	r1, r6
   27e70:	4650      	mov	r0, sl
   27e72:	f7ff fe07 	bl	27a84 <nvs_read>
		if (rc < 0) {
   27e76:	2800      	cmp	r0, #0
   27e78:	da07      	bge.n	27e8a <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   27e7a:	f110 0f02 	cmn.w	r0, #2
   27e7e:	bf08      	it	eq
   27e80:	46b0      	moveq	r8, r6
   27e82:	4635      	mov	r5, r6
   27e84:	e7ec      	b.n	27e60 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   27e86:	2701      	movs	r7, #1
   27e88:	e7e4      	b.n	27e54 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   27e8a:	ab16      	add	r3, sp, #88	; 0x58
   27e8c:	4418      	add	r0, r3
   27e8e:	2300      	movs	r3, #0
   27e90:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   27e94:	a903      	add	r1, sp, #12
   27e96:	4648      	mov	r0, r9
   27e98:	f001 fa27 	bl	292ea <strcmp>
   27e9c:	2800      	cmp	r0, #0
   27e9e:	d1f0      	bne.n	27e82 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   27ea0:	2f00      	cmp	r7, #0
   27ea2:	d03b      	beq.n	27f1c <settings_nvs_save+0xe2>
   27ea4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   27ea6:	42b3      	cmp	r3, r6
   27ea8:	d142      	bne.n	27f30 <settings_nvs_save+0xf6>
			cf->last_name_id--;
   27eaa:	4622      	mov	r2, r4
   27eac:	1e73      	subs	r3, r6, #1
   27eae:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   27eb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   27eb6:	2302      	movs	r3, #2
   27eb8:	4650      	mov	r0, sl
   27eba:	f7e6 fcf5 	bl	e8a8 <nvs_write>
			if (rc < 0) {
   27ebe:	2800      	cmp	r0, #0
   27ec0:	da36      	bge.n	27f30 <settings_nvs_save+0xf6>
}
   27ec2:	b017      	add	sp, #92	; 0x5c
   27ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   27ec8:	bb6f      	cbnz	r7, 27f26 <settings_nvs_save+0xec>
	write_name = true;
   27eca:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   27ecc:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   27ed0:	d02b      	beq.n	27f2a <settings_nvs_save+0xf0>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   27ed2:	f104 0508 	add.w	r5, r4, #8
   27ed6:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   27eda:	9a01      	ldr	r2, [sp, #4]
   27edc:	465b      	mov	r3, fp
   27ede:	b289      	uxth	r1, r1
   27ee0:	4628      	mov	r0, r5
   27ee2:	f7e6 fce1 	bl	e8a8 <nvs_write>
	if (rc < 0) {
   27ee6:	2800      	cmp	r0, #0
   27ee8:	dbeb      	blt.n	27ec2 <settings_nvs_save+0x88>
	if (write_name) {
   27eea:	b157      	cbz	r7, 27f02 <settings_nvs_save+0xc8>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   27eec:	4648      	mov	r0, r9
   27eee:	f001 f9ec 	bl	292ca <strlen>
   27ef2:	464a      	mov	r2, r9
   27ef4:	4603      	mov	r3, r0
   27ef6:	4641      	mov	r1, r8
   27ef8:	4628      	mov	r0, r5
   27efa:	f7e6 fcd5 	bl	e8a8 <nvs_write>
		if (rc < 0) {
   27efe:	2800      	cmp	r0, #0
   27f00:	dbdf      	blt.n	27ec2 <settings_nvs_save+0x88>
	if (write_name_id > cf->last_name_id) {
   27f02:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   27f04:	4543      	cmp	r3, r8
   27f06:	d220      	bcs.n	27f4a <settings_nvs_save+0x110>
		cf->last_name_id = write_name_id;
   27f08:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   27f0a:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   27f0c:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   27f10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   27f14:	4628      	mov	r0, r5
   27f16:	f7e6 fcc7 	bl	e8a8 <nvs_write>
   27f1a:	e016      	b.n	27f4a <settings_nvs_save+0x110>
   27f1c:	46b0      	mov	r8, r6
   27f1e:	e7d5      	b.n	27ecc <settings_nvs_save+0x92>
		return -EINVAL;
   27f20:	f06f 0015 	mvn.w	r0, #21
   27f24:	e7cd      	b.n	27ec2 <settings_nvs_save+0x88>
		return 0;
   27f26:	2000      	movs	r0, #0
   27f28:	e7cb      	b.n	27ec2 <settings_nvs_save+0x88>
		return -ENOMEM;
   27f2a:	f06f 000b 	mvn.w	r0, #11
   27f2e:	e7c8      	b.n	27ec2 <settings_nvs_save+0x88>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   27f30:	4631      	mov	r1, r6
   27f32:	4650      	mov	r0, sl
   27f34:	f7ff fd4b 	bl	279ce <nvs_delete>
			if (rc >= 0) {
   27f38:	2800      	cmp	r0, #0
   27f3a:	dbc2      	blt.n	27ec2 <settings_nvs_save+0x88>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   27f3c:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   27f40:	313f      	adds	r1, #63	; 0x3f
   27f42:	b289      	uxth	r1, r1
   27f44:	4650      	mov	r0, sl
   27f46:	f7ff fd42 	bl	279ce <nvs_delete>
	if (rc < 0) {
   27f4a:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   27f4e:	e7b8      	b.n	27ec2 <settings_nvs_save+0x88>

00027f50 <settings_nvs_backend_init>:
{
   27f50:	b573      	push	{r0, r1, r4, r5, r6, lr}
   27f52:	4604      	mov	r4, r0
	cf->cf_nvs.flash_device = device_get_binding(cf->flash_dev_name);
   27f54:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   27f56:	f7fd fbf1 	bl	2573c <z_impl_device_get_binding>
   27f5a:	6320      	str	r0, [r4, #48]	; 0x30
	if (cf->cf_nvs.flash_device == NULL) {
   27f5c:	b1c0      	cbz	r0, 27f90 <settings_nvs_backend_init+0x40>
	rc = nvs_mount(&cf->cf_nvs);
   27f5e:	f104 0608 	add.w	r6, r4, #8
   27f62:	4630      	mov	r0, r6
   27f64:	f7e6 fb4c 	bl	e600 <nvs_mount>
	if (rc) {
   27f68:	4605      	mov	r5, r0
   27f6a:	b970      	cbnz	r0, 27f8a <settings_nvs_backend_init+0x3a>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   27f6c:	2302      	movs	r3, #2
   27f6e:	f10d 0206 	add.w	r2, sp, #6
   27f72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   27f76:	4630      	mov	r0, r6
   27f78:	f7ff fd84 	bl	27a84 <nvs_read>
	if (rc < 0) {
   27f7c:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   27f7e:	bfac      	ite	ge
   27f80:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
		cf->last_name_id = NVS_NAMECNT_ID;
   27f84:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   27f88:	8723      	strh	r3, [r4, #56]	; 0x38
}
   27f8a:	4628      	mov	r0, r5
   27f8c:	b002      	add	sp, #8
   27f8e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   27f90:	f06f 0512 	mvn.w	r5, #18
   27f94:	e7f9      	b.n	27f8a <settings_nvs_backend_init+0x3a>

00027f96 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   27f96:	b538      	push	{r3, r4, r5, lr}
   27f98:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   27f9a:	42ab      	cmp	r3, r5
{
   27f9c:	4611      	mov	r1, r2
   27f9e:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   27fa0:	d804      	bhi.n	27fac <_copy+0x16>
		(void)memcpy(to, from, from_len);
   27fa2:	461a      	mov	r2, r3
   27fa4:	f001 f9cf 	bl	29346 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   27fa8:	4620      	mov	r0, r4
   27faa:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   27fac:	2400      	movs	r4, #0
   27fae:	e7fb      	b.n	27fa8 <_copy+0x12>

00027fb0 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   27fb0:	f001 b9d4 	b.w	2935c <memset>

00027fb4 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   27fb4:	09c3      	lsrs	r3, r0, #7
   27fb6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   27fba:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   27fbe:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   27fc2:	b2c0      	uxtb	r0, r0
   27fc4:	4770      	bx	lr

00027fc6 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   27fc6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27fca:	4606      	mov	r6, r0
   27fcc:	b0a9      	sub	sp, #164	; 0xa4
   27fce:	4688      	mov	r8, r1
   27fd0:	4614      	mov	r4, r2
   27fd2:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   27fd4:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   27fd8:	f7e7 f8e8 	bl	f1ac <uECC_get_rng>
		if (!rng_function ||
   27fdc:	4603      	mov	r3, r0
   27fde:	2800      	cmp	r0, #0
   27fe0:	d03e      	beq.n	28060 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   27fe2:	2140      	movs	r1, #64	; 0x40
   27fe4:	a808      	add	r0, sp, #32
   27fe6:	4798      	blx	r3
		if (!rng_function ||
   27fe8:	b3d0      	cbz	r0, 28060 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   27fea:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   27fee:	f112 031f 	adds.w	r3, r2, #31
   27ff2:	bf48      	it	mi
   27ff4:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   27ff8:	466d      	mov	r5, sp
   27ffa:	464a      	mov	r2, r9
   27ffc:	a908      	add	r1, sp, #32
   27ffe:	4628      	mov	r0, r5
   28000:	f343 1347 	sbfx	r3, r3, #5, #8
   28004:	f000 f9ee 	bl	283e4 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   28008:	4622      	mov	r2, r4
   2800a:	4629      	mov	r1, r5
   2800c:	a818      	add	r0, sp, #96	; 0x60
   2800e:	f000 fe03 	bl	28c18 <EccPoint_compute_public_key>
   28012:	b318      	cbz	r0, 2805c <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   28014:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   28018:	1dd9      	adds	r1, r3, #7
   2801a:	bf48      	it	mi
   2801c:	f103 010e 	addmi.w	r1, r3, #14
   28020:	462a      	mov	r2, r5
   28022:	4640      	mov	r0, r8
   28024:	10c9      	asrs	r1, r1, #3
   28026:	f000 fe1f 	bl	28c68 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   2802a:	f994 1001 	ldrsb.w	r1, [r4, #1]
   2802e:	aa18      	add	r2, sp, #96	; 0x60
   28030:	4630      	mov	r0, r6
   28032:	f000 fe19 	bl	28c68 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   28036:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   2803a:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   2803e:	ab18      	add	r3, sp, #96	; 0x60
   28040:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   28044:	1870      	adds	r0, r6, r1
   28046:	f000 fe0f 	bl	28c68 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   2804a:	2220      	movs	r2, #32
   2804c:	2100      	movs	r1, #0
   2804e:	4628      	mov	r0, r5
   28050:	f001 f984 	bl	2935c <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   28054:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   28056:	b029      	add	sp, #164	; 0xa4
   28058:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   2805c:	3f01      	subs	r7, #1
   2805e:	d1bb      	bne.n	27fd8 <uECC_make_key+0x12>
        		return 0;
   28060:	2000      	movs	r0, #0
   28062:	e7f8      	b.n	28056 <uECC_make_key+0x90>

00028064 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   28064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28068:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   2806a:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   2806e:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   28072:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   28076:	b0a4      	sub	sp, #144	; 0x90
   28078:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   2807a:	1dda      	adds	r2, r3, #7
   2807c:	bf48      	it	mi
   2807e:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   28082:	ad04      	add	r5, sp, #16
{
   28084:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   28086:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   28088:	4628      	mov	r0, r5
   2808a:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   2808c:	9502      	str	r5, [sp, #8]
   2808e:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   28090:	f000 fdfe 	bl	28c90 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   28094:	463a      	mov	r2, r7
   28096:	4649      	mov	r1, r9
   28098:	a814      	add	r0, sp, #80	; 0x50
   2809a:	f000 fdf9 	bl	28c90 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   2809e:	ab14      	add	r3, sp, #80	; 0x50
   280a0:	eb09 0107 	add.w	r1, r9, r7
   280a4:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   280a8:	463a      	mov	r2, r7
   280aa:	f000 fdf1 	bl	28c90 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   280ae:	4623      	mov	r3, r4
   280b0:	4632      	mov	r2, r6
   280b2:	4629      	mov	r1, r5
   280b4:	4628      	mov	r0, r5
   280b6:	f000 fd83 	bl	28bc0 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   280ba:	fab0 f380 	clz	r3, r0
   280be:	9401      	str	r4, [sp, #4]
   280c0:	aa24      	add	r2, sp, #144	; 0x90
   280c2:	095b      	lsrs	r3, r3, #5
   280c4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   280c8:	8863      	ldrh	r3, [r4, #2]
   280ca:	3301      	adds	r3, #1
   280cc:	b21b      	sxth	r3, r3
   280ce:	9300      	str	r3, [sp, #0]
   280d0:	f851 2c88 	ldr.w	r2, [r1, #-136]
   280d4:	a914      	add	r1, sp, #80	; 0x50
   280d6:	2300      	movs	r3, #0
   280d8:	4608      	mov	r0, r1
   280da:	f000 fca4 	bl	28a26 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   280de:	aa14      	add	r2, sp, #80	; 0x50
   280e0:	4639      	mov	r1, r7
   280e2:	4640      	mov	r0, r8
   280e4:	f000 fdc0 	bl	28c68 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   280e8:	4621      	mov	r1, r4
   280ea:	a814      	add	r0, sp, #80	; 0x50
   280ec:	f000 fc10 	bl	28910 <EccPoint_isZero>
   280f0:	af02      	add	r7, sp, #8
   280f2:	4604      	mov	r4, r0
   280f4:	2208      	movs	r2, #8
   280f6:	2100      	movs	r1, #0
   280f8:	4638      	mov	r0, r7
   280fa:	f001 f92f 	bl	2935c <memset>
   280fe:	2220      	movs	r2, #32
   28100:	2100      	movs	r1, #0
   28102:	4630      	mov	r0, r6
   28104:	f001 f92a 	bl	2935c <memset>
   28108:	2220      	movs	r2, #32
   2810a:	2100      	movs	r1, #0
   2810c:	4628      	mov	r0, r5
   2810e:	f001 f925 	bl	2935c <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   28112:	fab4 f084 	clz	r0, r4
   28116:	0940      	lsrs	r0, r0, #5
   28118:	b024      	add	sp, #144	; 0x90
   2811a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002811e <uECC_vli_add>:
{
   2811e:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   28120:	2400      	movs	r4, #0
{
   28122:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   28124:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   28126:	b265      	sxtb	r5, r4
   28128:	42ab      	cmp	r3, r5
   2812a:	dc00      	bgt.n	2812e <uECC_vli_add+0x10>
}
   2812c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   2812e:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   28132:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   28136:	443d      	add	r5, r7
   28138:	4405      	add	r5, r0
	return (p_true*(cond)) | (p_false*(!cond));
   2813a:	42af      	cmp	r7, r5
   2813c:	f000 0001 	and.w	r0, r0, #1
   28140:	bf18      	it	ne
   28142:	2000      	movne	r0, #0
		result[i] = sum;
   28144:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   28148:	bf88      	it	hi
   2814a:	f040 0001 	orrhi.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   2814e:	3401      	adds	r4, #1
   28150:	e7e9      	b.n	28126 <uECC_vli_add+0x8>

00028152 <uECC_vli_rshift1>:
	vli += num_words;
   28152:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   28156:	2300      	movs	r3, #0
	while (vli-- > end) {
   28158:	4288      	cmp	r0, r1
   2815a:	d300      	bcc.n	2815e <uECC_vli_rshift1+0xc>
}
   2815c:	4770      	bx	lr
		uECC_word_t temp = *vli;
   2815e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   28162:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   28166:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   28168:	07d3      	lsls	r3, r2, #31
   2816a:	e7f5      	b.n	28158 <uECC_vli_rshift1+0x6>

0002816c <vli_modInv_update>:
	if (!EVEN(uv)) {
   2816c:	6803      	ldr	r3, [r0, #0]
{
   2816e:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   28170:	f013 0601 	ands.w	r6, r3, #1
{
   28174:	4605      	mov	r5, r0
   28176:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   28178:	d005      	beq.n	28186 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   2817a:	4613      	mov	r3, r2
   2817c:	460a      	mov	r2, r1
   2817e:	4601      	mov	r1, r0
   28180:	f7ff ffcd 	bl	2811e <uECC_vli_add>
   28184:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   28186:	4621      	mov	r1, r4
   28188:	4628      	mov	r0, r5
   2818a:	f7ff ffe2 	bl	28152 <uECC_vli_rshift1>
	if (carry) {
   2818e:	b146      	cbz	r6, 281a2 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   28190:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   28194:	3a01      	subs	r2, #1
   28196:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   2819a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2819e:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   281a2:	bd70      	pop	{r4, r5, r6, pc}

000281a4 <uECC_vli_mult>:
	for (k = 0; k < num_words; ++k) {
   281a4:	f04f 0c00 	mov.w	ip, #0
{
   281a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uECC_word_t r1 = 0;
   281ac:	4665      	mov	r5, ip
	uECC_word_t r0 = 0;
   281ae:	4664      	mov	r4, ip
	for (k = 0; k < num_words; ++k) {
   281b0:	fa4f f98c 	sxtb.w	r9, ip
   281b4:	454b      	cmp	r3, r9
   281b6:	dc16      	bgt.n	281e6 <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   281b8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   281bc:	eb06 0643 	add.w	r6, r6, r3, lsl #1
   281c0:	9601      	str	r6, [sp, #4]
   281c2:	f04f 0800 	mov.w	r8, #0
   281c6:	9f01      	ldr	r7, [sp, #4]
   281c8:	fa53 fe88 	uxtab	lr, r3, r8
   281cc:	fa4f fe8e 	sxtb.w	lr, lr
   281d0:	45be      	cmp	lr, r7
   281d2:	fa5f f688 	uxtb.w	r6, r8
   281d6:	db26      	blt.n	28226 <uECC_vli_mult+0x82>
	result[num_words * 2 - 1] = r0;
   281d8:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   281dc:	f840 4c04 	str.w	r4, [r0, #-4]
}
   281e0:	b003      	add	sp, #12
   281e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   281e6:	f04f 0e00 	mov.w	lr, #0
   281ea:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
   281ee:	46f0      	mov	r8, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
   281f0:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   281f4:	f85a 6904 	ldr.w	r6, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   281f8:	fba6 6707 	umull	r6, r7, r6, r7
   281fc:	1934      	adds	r4, r6, r4
		for (i = 0; i <= k; ++i) {
   281fe:	f10e 0e01 	add.w	lr, lr, #1
   28202:	417d      	adcs	r5, r7
   28204:	fa4f f68e 	sxtb.w	r6, lr
   28208:	f04f 0b00 	mov.w	fp, #0
   2820c:	bf28      	it	cs
   2820e:	f04f 0b01 	movcs.w	fp, #1
   28212:	454e      	cmp	r6, r9
	*r2 += (r01 < p);
   28214:	44d8      	add	r8, fp
		for (i = 0; i <= k; ++i) {
   28216:	ddeb      	ble.n	281f0 <uECC_vli_mult+0x4c>
		result[k] = r0;
   28218:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   2821c:	462c      	mov	r4, r5
   2821e:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   28222:	4645      	mov	r5, r8
   28224:	e7c4      	b.n	281b0 <uECC_vli_mult+0xc>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   28226:	3601      	adds	r6, #1
   28228:	46a9      	mov	r9, r5
   2822a:	b276      	sxtb	r6, r6
   2822c:	eb02 0a8e 	add.w	sl, r2, lr, lsl #2
   28230:	2500      	movs	r5, #0
   28232:	b277      	sxtb	r7, r6
   28234:	42bb      	cmp	r3, r7
   28236:	dc05      	bgt.n	28244 <uECC_vli_mult+0xa0>
		result[k] = r0;
   28238:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   2823c:	f108 0801 	add.w	r8, r8, #1
		result[k] = r0;
   28240:	464c      	mov	r4, r9
   28242:	e7c0      	b.n	281c6 <uECC_vli_mult+0x22>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   28244:	f06f 0703 	mvn.w	r7, #3
   28248:	4377      	muls	r7, r6
	uECC_dword_t p = (uECC_dword_t)a * b;
   2824a:	f851 c026 	ldr.w	ip, [r1, r6, lsl #2]
   2824e:	f85a 7007 	ldr.w	r7, [sl, r7]
   28252:	fba7 7c0c 	umull	r7, ip, r7, ip
   28256:	193c      	adds	r4, r7, r4
   28258:	eb5c 0909 	adcs.w	r9, ip, r9
   2825c:	f04f 0b00 	mov.w	fp, #0
   28260:	bf28      	it	cs
   28262:	f04f 0b01 	movcs.w	fp, #1
	*r2 += (r01 < p);
   28266:	445d      	add	r5, fp
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   28268:	3601      	adds	r6, #1
   2826a:	e7e2      	b.n	28232 <uECC_vli_mult+0x8e>

0002826c <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   2826c:	2300      	movs	r3, #0
{
   2826e:	b510      	push	{r4, lr}
		 vli[i] = 0;
   28270:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   28272:	b25a      	sxtb	r2, r3
   28274:	4291      	cmp	r1, r2
   28276:	dc00      	bgt.n	2827a <uECC_vli_clear+0xe>
}
   28278:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   2827a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   2827e:	3301      	adds	r3, #1
   28280:	e7f7      	b.n	28272 <uECC_vli_clear+0x6>

00028282 <uECC_vli_isZero>:
{
   28282:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   28284:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   28286:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   28288:	b25c      	sxtb	r4, r3
   2828a:	42a1      	cmp	r1, r4
   2828c:	dc03      	bgt.n	28296 <uECC_vli_isZero+0x14>
}
   2828e:	fab2 f082 	clz	r0, r2
   28292:	0940      	lsrs	r0, r0, #5
   28294:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   28296:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   2829a:	3301      	adds	r3, #1
   2829c:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   2829e:	e7f3      	b.n	28288 <uECC_vli_isZero+0x6>

000282a0 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   282a0:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   282a2:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   282a4:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   282a8:	f001 011f 	and.w	r1, r1, #31
   282ac:	fa03 f101 	lsl.w	r1, r3, r1
}
   282b0:	4008      	ands	r0, r1
   282b2:	4770      	bx	lr

000282b4 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   282b4:	3901      	subs	r1, #1
{
   282b6:	b510      	push	{r4, lr}
   282b8:	4602      	mov	r2, r0
   282ba:	b249      	sxtb	r1, r1
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   282bc:	1d04      	adds	r4, r0, #4
   282be:	0608      	lsls	r0, r1, #24
   282c0:	b2cb      	uxtb	r3, r1
   282c2:	d404      	bmi.n	282ce <uECC_vli_numBits+0x1a>
   282c4:	3901      	subs	r1, #1
   282c6:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
   282ca:	2800      	cmp	r0, #0
   282cc:	d0f7      	beq.n	282be <uECC_vli_numBits+0xa>
	return (i + 1);
   282ce:	3301      	adds	r3, #1
   282d0:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   282d2:	b150      	cbz	r0, 282ea <uECC_vli_numBits+0x36>
	digit = vli[num_digits - 1];
   282d4:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   282d8:	3b01      	subs	r3, #1
   282da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   282de:	2300      	movs	r3, #0
   282e0:	b922      	cbnz	r2, 282ec <uECC_vli_numBits+0x38>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   282e2:	3801      	subs	r0, #1
   282e4:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   282e8:	b200      	sxth	r0, r0
}
   282ea:	bd10      	pop	{r4, pc}
		digit >>= 1;
   282ec:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   282ee:	3301      	adds	r3, #1
   282f0:	e7f6      	b.n	282e0 <uECC_vli_numBits+0x2c>

000282f2 <uECC_vli_set>:
{
   282f2:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   282f4:	2300      	movs	r3, #0
   282f6:	b25c      	sxtb	r4, r3
   282f8:	42a2      	cmp	r2, r4
   282fa:	dc00      	bgt.n	282fe <uECC_vli_set+0xc>
}
   282fc:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   282fe:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   28302:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   28306:	3301      	adds	r3, #1
   28308:	e7f5      	b.n	282f6 <uECC_vli_set+0x4>

0002830a <uECC_vli_cmp_unsafe>:
{
   2830a:	b510      	push	{r4, lr}
	for (i = num_words - 1; i >= 0; --i) {
   2830c:	3a01      	subs	r2, #1
   2830e:	b252      	sxtb	r2, r2
   28310:	0613      	lsls	r3, r2, #24
   28312:	d501      	bpl.n	28318 <uECC_vli_cmp_unsafe+0xe>
	return 0;
   28314:	2000      	movs	r0, #0
}
   28316:	bd10      	pop	{r4, pc}
		if (left[i] > right[i]) {
   28318:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   2831c:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   28320:	429c      	cmp	r4, r3
   28322:	d805      	bhi.n	28330 <uECC_vli_cmp_unsafe+0x26>
		} else if (left[i] < right[i]) {
   28324:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
   28328:	d2f2      	bcs.n	28310 <uECC_vli_cmp_unsafe+0x6>
			return -1;
   2832a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2832e:	e7f2      	b.n	28316 <uECC_vli_cmp_unsafe+0xc>
			return 1;
   28330:	2001      	movs	r0, #1
   28332:	e7f0      	b.n	28316 <uECC_vli_cmp_unsafe+0xc>

00028334 <uECC_vli_equal>:
{
   28334:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   28336:	3a01      	subs	r2, #1
   28338:	b252      	sxtb	r2, r2
	uECC_word_t diff = 0;
   2833a:	2300      	movs	r3, #0
	for (i = num_words - 1; i >= 0; --i) {
   2833c:	0614      	lsls	r4, r2, #24
   2833e:	d503      	bpl.n	28348 <uECC_vli_equal+0x14>
}
   28340:	1e18      	subs	r0, r3, #0
   28342:	bf18      	it	ne
   28344:	2001      	movne	r0, #1
   28346:	bd30      	pop	{r4, r5, pc}
		diff |= (left[i] ^ right[i]);
   28348:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   2834c:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   28350:	406c      	eors	r4, r5
   28352:	4323      	orrs	r3, r4
	for (i = num_words - 1; i >= 0; --i) {
   28354:	3a01      	subs	r2, #1
   28356:	e7f1      	b.n	2833c <uECC_vli_equal+0x8>

00028358 <uECC_vli_sub>:
{
   28358:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   2835a:	2400      	movs	r4, #0
{
   2835c:	4606      	mov	r6, r0
   2835e:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   28360:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   28362:	b265      	sxtb	r5, r4
   28364:	4565      	cmp	r5, ip
   28366:	db00      	blt.n	2836a <uECC_vli_sub+0x12>
}
   28368:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   2836a:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   2836e:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   28372:	1a3d      	subs	r5, r7, r0
   28374:	1aed      	subs	r5, r5, r3
	return (p_true*(cond)) | (p_false*(!cond));
   28376:	42af      	cmp	r7, r5
   28378:	f000 0001 	and.w	r0, r0, #1
   2837c:	bf18      	it	ne
   2837e:	2000      	movne	r0, #0
		result[i] = diff;
   28380:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   28384:	bf38      	it	cc
   28386:	f040 0001 	orrcc.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   2838a:	3401      	adds	r4, #1
   2838c:	e7e9      	b.n	28362 <uECC_vli_sub+0xa>

0002838e <uECC_vli_modAdd>:
{
   2838e:	b570      	push	{r4, r5, r6, lr}
   28390:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   28394:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   28396:	4633      	mov	r3, r6
{
   28398:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   2839a:	f7ff fec0 	bl	2811e <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   2839e:	b930      	cbnz	r0, 283ae <uECC_vli_modAdd+0x20>
   283a0:	4632      	mov	r2, r6
   283a2:	4621      	mov	r1, r4
   283a4:	4628      	mov	r0, r5
   283a6:	f7ff ffb0 	bl	2830a <uECC_vli_cmp_unsafe>
   283aa:	2801      	cmp	r0, #1
   283ac:	d007      	beq.n	283be <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   283ae:	4633      	mov	r3, r6
   283b0:	462a      	mov	r2, r5
   283b2:	4621      	mov	r1, r4
   283b4:	4620      	mov	r0, r4
}
   283b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   283ba:	f7ff bfcd 	b.w	28358 <uECC_vli_sub>
}
   283be:	bd70      	pop	{r4, r5, r6, pc}

000283c0 <uECC_vli_modSub>:
{
   283c0:	b570      	push	{r4, r5, r6, lr}
   283c2:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   283c6:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   283c8:	4633      	mov	r3, r6
{
   283ca:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   283cc:	f7ff ffc4 	bl	28358 <uECC_vli_sub>
	if (l_borrow) {
   283d0:	b138      	cbz	r0, 283e2 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   283d2:	4633      	mov	r3, r6
   283d4:	462a      	mov	r2, r5
   283d6:	4621      	mov	r1, r4
   283d8:	4620      	mov	r0, r4
}
   283da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   283de:	f7ff be9e 	b.w	2811e <uECC_vli_add>
}
   283e2:	bd70      	pop	{r4, r5, r6, pc}

000283e4 <uECC_vli_mmod>:
{
   283e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   283e8:	b0a5      	sub	sp, #148	; 0x94
   283ea:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   283ec:	ab14      	add	r3, sp, #80	; 0x50
   283ee:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   283f2:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   283f4:	4629      	mov	r1, r5
   283f6:	4610      	mov	r0, r2
{
   283f8:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   283fa:	f7ff ff5b 	bl	282b4 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   283fe:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   28402:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   28404:	2c00      	cmp	r4, #0
   28406:	4621      	mov	r1, r4
   28408:	bfb8      	it	lt
   2840a:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   2840e:	4263      	negs	r3, r4
   28410:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   28414:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   28418:	f004 061f 	and.w	r6, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   2841c:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   2841e:	bf58      	it	pl
   28420:	425e      	negpl	r6, r3
	uECC_vli_clear(mod_multiple, word_shift);
   28422:	f7ff ff23 	bl	2826c <uECC_vli_clear>
	if (bit_shift > 0) {
   28426:	2e00      	cmp	r6, #0
   28428:	b208      	sxth	r0, r1
   2842a:	dd2b      	ble.n	28484 <uECC_vli_mmod+0xa0>
   2842c:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   2842e:	2200      	movs	r2, #0
   28430:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   28434:	f1c6 0e20 	rsb	lr, r6, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   28438:	4613      	mov	r3, r2
   2843a:	429d      	cmp	r5, r3
   2843c:	d817      	bhi.n	2846e <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   2843e:	006b      	lsls	r3, r5, #1
   28440:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   28442:	ab04      	add	r3, sp, #16
   28444:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   28448:	1e6f      	subs	r7, r5, #1
   2844a:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   2844c:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2844e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   28452:	2c00      	cmp	r4, #0
   28454:	da54      	bge.n	28500 <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   28456:	ab24      	add	r3, sp, #144	; 0x90
   28458:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   2845c:	462a      	mov	r2, r5
   2845e:	f856 1c88 	ldr.w	r1, [r6, #-136]
   28462:	4640      	mov	r0, r8
   28464:	f7ff ff45 	bl	282f2 <uECC_vli_set>
}
   28468:	b025      	add	sp, #148	; 0x94
   2846a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   2846e:	f857 c023 	ldr.w	ip, [r7, r3, lsl #2]
   28472:	fa0c f106 	lsl.w	r1, ip, r6
   28476:	430a      	orrs	r2, r1
   28478:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   2847c:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   2847e:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   28482:	e7da      	b.n	2843a <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   28484:	ab04      	add	r3, sp, #16
   28486:	462a      	mov	r2, r5
   28488:	4639      	mov	r1, r7
   2848a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2848e:	f7ff ff30 	bl	282f2 <uECC_vli_set>
   28492:	e7d4      	b.n	2843e <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   28494:	fa0f fe82 	sxth.w	lr, r2
   28498:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   2849c:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   284a0:	ab24      	add	r3, sp, #144	; 0x90
   284a2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   284a6:	3001      	adds	r0, #1
   284a8:	f852 3c80 	ldr.w	r3, [r2, #-128]
   284ac:	440b      	add	r3, r1
   284ae:	ebbb 0303 	subs.w	r3, fp, r3
   284b2:	bf34      	ite	cc
   284b4:	2201      	movcc	r2, #1
   284b6:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   284b8:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   284ba:	bf18      	it	ne
   284bc:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   284be:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   284c2:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   284c6:	9b01      	ldr	r3, [sp, #4]
   284c8:	b242      	sxtb	r2, r0
   284ca:	429a      	cmp	r2, r3
   284cc:	dbe2      	blt.n	28494 <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   284ce:	1a73      	subs	r3, r6, r1
   284d0:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   284d2:	4629      	mov	r1, r5
   284d4:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   284d6:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   284d8:	f7ff fe3b 	bl	28152 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   284dc:	ab24      	add	r3, sp, #144	; 0x90
   284de:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   284e2:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   284e4:	f853 2c80 	ldr.w	r2, [r3, #-128]
   284e8:	f857 3c80 	ldr.w	r3, [r7, #-128]
   284ec:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   284f0:	f847 3c80 	str.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   284f4:	4648      	mov	r0, r9
   284f6:	3c01      	subs	r4, #1
   284f8:	f7ff fe2b 	bl	28152 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   284fc:	b224      	sxth	r4, r4
   284fe:	e7a8      	b.n	28452 <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   28500:	ab24      	add	r3, sp, #144	; 0x90
   28502:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   28504:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   28508:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   2850a:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   2850e:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   28512:	e7d8      	b.n	284c6 <uECC_vli_mmod+0xe2>

00028514 <uECC_vli_modMult_fast>:
{
   28514:	b530      	push	{r4, r5, lr}
   28516:	461c      	mov	r4, r3
   28518:	b091      	sub	sp, #68	; 0x44
   2851a:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   2851c:	f993 3000 	ldrsb.w	r3, [r3]
   28520:	4668      	mov	r0, sp
   28522:	f7ff fe3f 	bl	281a4 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   28526:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   2852a:	4669      	mov	r1, sp
   2852c:	4628      	mov	r0, r5
   2852e:	4798      	blx	r3
}
   28530:	b011      	add	sp, #68	; 0x44
   28532:	bd30      	pop	{r4, r5, pc}

00028534 <uECC_vli_modSquare_fast>:
{
   28534:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   28536:	460a      	mov	r2, r1
   28538:	f7ff bfec 	b.w	28514 <uECC_vli_modMult_fast>

0002853c <double_jacobian_default>:
{
   2853c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   28540:	f993 6000 	ldrsb.w	r6, [r3]
{
   28544:	b092      	sub	sp, #72	; 0x48
   28546:	4604      	mov	r4, r0
   28548:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   2854a:	4610      	mov	r0, r2
   2854c:	4631      	mov	r1, r6
{
   2854e:	4615      	mov	r5, r2
   28550:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   28552:	f7ff fe96 	bl	28282 <uECC_vli_isZero>
   28556:	2800      	cmp	r0, #0
   28558:	f040 8091 	bne.w	2867e <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   2855c:	463a      	mov	r2, r7
   2855e:	4649      	mov	r1, r9
   28560:	a802      	add	r0, sp, #8
   28562:	f7ff ffe7 	bl	28534 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   28566:	463b      	mov	r3, r7
   28568:	aa02      	add	r2, sp, #8
   2856a:	4621      	mov	r1, r4
   2856c:	a80a      	add	r0, sp, #40	; 0x28
   2856e:	f7ff ffd1 	bl	28514 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   28572:	a902      	add	r1, sp, #8
   28574:	4608      	mov	r0, r1
   28576:	463a      	mov	r2, r7
   28578:	f7ff ffdc 	bl	28534 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   2857c:	463b      	mov	r3, r7
   2857e:	462a      	mov	r2, r5
   28580:	4649      	mov	r1, r9
   28582:	4648      	mov	r0, r9
   28584:	f7ff ffc6 	bl	28514 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   28588:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   2858c:	463a      	mov	r2, r7
   2858e:	4629      	mov	r1, r5
   28590:	4628      	mov	r0, r5
   28592:	f7ff ffcf 	bl	28534 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   28596:	4643      	mov	r3, r8
   28598:	462a      	mov	r2, r5
   2859a:	4621      	mov	r1, r4
   2859c:	4620      	mov	r0, r4
   2859e:	9600      	str	r6, [sp, #0]
   285a0:	f7ff fef5 	bl	2838e <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   285a4:	4643      	mov	r3, r8
   285a6:	462a      	mov	r2, r5
   285a8:	4629      	mov	r1, r5
   285aa:	4628      	mov	r0, r5
   285ac:	9600      	str	r6, [sp, #0]
   285ae:	f7ff feee 	bl	2838e <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   285b2:	4643      	mov	r3, r8
   285b4:	462a      	mov	r2, r5
   285b6:	4621      	mov	r1, r4
   285b8:	4628      	mov	r0, r5
   285ba:	9600      	str	r6, [sp, #0]
   285bc:	f7ff ff00 	bl	283c0 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   285c0:	463b      	mov	r3, r7
   285c2:	462a      	mov	r2, r5
   285c4:	4621      	mov	r1, r4
   285c6:	4620      	mov	r0, r4
   285c8:	f7ff ffa4 	bl	28514 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   285cc:	4643      	mov	r3, r8
   285ce:	4622      	mov	r2, r4
   285d0:	4621      	mov	r1, r4
   285d2:	4628      	mov	r0, r5
   285d4:	9600      	str	r6, [sp, #0]
   285d6:	f7ff feda 	bl	2838e <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   285da:	4643      	mov	r3, r8
   285dc:	9600      	str	r6, [sp, #0]
   285de:	462a      	mov	r2, r5
   285e0:	4621      	mov	r1, r4
   285e2:	4620      	mov	r0, r4
   285e4:	f7ff fed3 	bl	2838e <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   285e8:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   285ea:	07db      	lsls	r3, r3, #31
   285ec:	d54a      	bpl.n	28684 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   285ee:	4633      	mov	r3, r6
   285f0:	4642      	mov	r2, r8
   285f2:	4621      	mov	r1, r4
   285f4:	4620      	mov	r0, r4
   285f6:	f7ff fd92 	bl	2811e <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   285fa:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   285fc:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   285fe:	4620      	mov	r0, r4
   28600:	f7ff fda7 	bl	28152 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   28604:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   28608:	3b01      	subs	r3, #1
   2860a:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   2860e:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   28612:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   28616:	463a      	mov	r2, r7
   28618:	4621      	mov	r1, r4
   2861a:	4628      	mov	r0, r5
   2861c:	f7ff ff8a 	bl	28534 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   28620:	4643      	mov	r3, r8
   28622:	aa0a      	add	r2, sp, #40	; 0x28
   28624:	4629      	mov	r1, r5
   28626:	4628      	mov	r0, r5
   28628:	9600      	str	r6, [sp, #0]
   2862a:	f7ff fec9 	bl	283c0 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   2862e:	4643      	mov	r3, r8
   28630:	aa0a      	add	r2, sp, #40	; 0x28
   28632:	4629      	mov	r1, r5
   28634:	4628      	mov	r0, r5
   28636:	9600      	str	r6, [sp, #0]
   28638:	f7ff fec2 	bl	283c0 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   2863c:	a90a      	add	r1, sp, #40	; 0x28
   2863e:	4608      	mov	r0, r1
   28640:	4643      	mov	r3, r8
   28642:	462a      	mov	r2, r5
   28644:	9600      	str	r6, [sp, #0]
   28646:	f7ff febb 	bl	283c0 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   2864a:	463b      	mov	r3, r7
   2864c:	aa0a      	add	r2, sp, #40	; 0x28
   2864e:	4621      	mov	r1, r4
   28650:	4620      	mov	r0, r4
   28652:	f7ff ff5f 	bl	28514 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   28656:	aa02      	add	r2, sp, #8
   28658:	4643      	mov	r3, r8
   2865a:	4610      	mov	r0, r2
   2865c:	4621      	mov	r1, r4
   2865e:	9600      	str	r6, [sp, #0]
   28660:	f7ff feae 	bl	283c0 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   28664:	4632      	mov	r2, r6
   28666:	4629      	mov	r1, r5
   28668:	4620      	mov	r0, r4
   2866a:	f7ff fe42 	bl	282f2 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   2866e:	4649      	mov	r1, r9
   28670:	4628      	mov	r0, r5
   28672:	f7ff fe3e 	bl	282f2 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   28676:	a902      	add	r1, sp, #8
   28678:	4648      	mov	r0, r9
   2867a:	f7ff fe3a 	bl	282f2 <uECC_vli_set>
}
   2867e:	b012      	add	sp, #72	; 0x48
   28680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   28684:	4631      	mov	r1, r6
   28686:	4620      	mov	r0, r4
   28688:	f7ff fd63 	bl	28152 <uECC_vli_rshift1>
   2868c:	e7c3      	b.n	28616 <double_jacobian_default+0xda>

0002868e <x_side_default>:
{
   2868e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28692:	4615      	mov	r5, r2
   28694:	b08a      	sub	sp, #40	; 0x28
   28696:	4604      	mov	r4, r0
   28698:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   2869a:	221c      	movs	r2, #28
   2869c:	2100      	movs	r1, #0
   2869e:	a803      	add	r0, sp, #12
   286a0:	f000 fe5c 	bl	2935c <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   286a4:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   286a6:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   286aa:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   286ac:	462a      	mov	r2, r5
   286ae:	4631      	mov	r1, r6
   286b0:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   286b2:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   286b4:	f7ff ff3e 	bl	28534 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   286b8:	463b      	mov	r3, r7
   286ba:	aa02      	add	r2, sp, #8
   286bc:	4621      	mov	r1, r4
   286be:	4620      	mov	r0, r4
   286c0:	f8cd 8000 	str.w	r8, [sp]
   286c4:	f7ff fe7c 	bl	283c0 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   286c8:	462b      	mov	r3, r5
   286ca:	4632      	mov	r2, r6
   286cc:	4621      	mov	r1, r4
   286ce:	4620      	mov	r0, r4
   286d0:	f7ff ff20 	bl	28514 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   286d4:	f8cd 8000 	str.w	r8, [sp]
   286d8:	463b      	mov	r3, r7
   286da:	f105 0284 	add.w	r2, r5, #132	; 0x84
   286de:	4621      	mov	r1, r4
   286e0:	4620      	mov	r0, r4
   286e2:	f7ff fe54 	bl	2838e <uECC_vli_modAdd>
}
   286e6:	b00a      	add	sp, #40	; 0x28
   286e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000286ec <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   286ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   286f0:	b09a      	sub	sp, #104	; 0x68
   286f2:	4616      	mov	r6, r2
   286f4:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   286f8:	4644      	mov	r4, r8
{
   286fa:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   286fc:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   28700:	9500      	str	r5, [sp, #0]
{
   28702:	4607      	mov	r7, r0
   28704:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   28706:	4623      	mov	r3, r4
   28708:	4602      	mov	r2, r0
   2870a:	4631      	mov	r1, r6
   2870c:	a802      	add	r0, sp, #8
   2870e:	f7ff fe57 	bl	283c0 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   28712:	a902      	add	r1, sp, #8
   28714:	4642      	mov	r2, r8
   28716:	4608      	mov	r0, r1
   28718:	f7ff ff0c 	bl	28534 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   2871c:	4643      	mov	r3, r8
   2871e:	aa02      	add	r2, sp, #8
   28720:	4639      	mov	r1, r7
   28722:	4638      	mov	r0, r7
   28724:	f7ff fef6 	bl	28514 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   28728:	4643      	mov	r3, r8
   2872a:	aa02      	add	r2, sp, #8
   2872c:	4631      	mov	r1, r6
   2872e:	4630      	mov	r0, r6
   28730:	f7ff fef0 	bl	28514 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   28734:	4623      	mov	r3, r4
   28736:	4652      	mov	r2, sl
   28738:	4649      	mov	r1, r9
   2873a:	a802      	add	r0, sp, #8
   2873c:	9500      	str	r5, [sp, #0]
   2873e:	f7ff fe26 	bl	2838e <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   28742:	4623      	mov	r3, r4
   28744:	4652      	mov	r2, sl
   28746:	4649      	mov	r1, r9
   28748:	4648      	mov	r0, r9
   2874a:	9500      	str	r5, [sp, #0]
   2874c:	f7ff fe38 	bl	283c0 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   28750:	4623      	mov	r3, r4
   28752:	463a      	mov	r2, r7
   28754:	4631      	mov	r1, r6
   28756:	a80a      	add	r0, sp, #40	; 0x28
   28758:	9500      	str	r5, [sp, #0]
   2875a:	f7ff fe31 	bl	283c0 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   2875e:	4643      	mov	r3, r8
   28760:	aa0a      	add	r2, sp, #40	; 0x28
   28762:	4651      	mov	r1, sl
   28764:	4650      	mov	r0, sl
   28766:	f7ff fed5 	bl	28514 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   2876a:	4623      	mov	r3, r4
   2876c:	4632      	mov	r2, r6
   2876e:	4639      	mov	r1, r7
   28770:	a80a      	add	r0, sp, #40	; 0x28
   28772:	9500      	str	r5, [sp, #0]
   28774:	f7ff fe0b 	bl	2838e <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   28778:	4642      	mov	r2, r8
   2877a:	4649      	mov	r1, r9
   2877c:	4630      	mov	r0, r6
   2877e:	f7ff fed9 	bl	28534 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   28782:	4623      	mov	r3, r4
   28784:	aa0a      	add	r2, sp, #40	; 0x28
   28786:	4631      	mov	r1, r6
   28788:	4630      	mov	r0, r6
   2878a:	9500      	str	r5, [sp, #0]
   2878c:	f7ff fe18 	bl	283c0 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   28790:	4623      	mov	r3, r4
   28792:	4632      	mov	r2, r6
   28794:	4639      	mov	r1, r7
   28796:	a812      	add	r0, sp, #72	; 0x48
   28798:	9500      	str	r5, [sp, #0]
   2879a:	f7ff fe11 	bl	283c0 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   2879e:	4643      	mov	r3, r8
   287a0:	aa12      	add	r2, sp, #72	; 0x48
   287a2:	4649      	mov	r1, r9
   287a4:	4648      	mov	r0, r9
   287a6:	f7ff feb5 	bl	28514 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   287aa:	4623      	mov	r3, r4
   287ac:	4652      	mov	r2, sl
   287ae:	4649      	mov	r1, r9
   287b0:	4648      	mov	r0, r9
   287b2:	9500      	str	r5, [sp, #0]
   287b4:	f7ff fe04 	bl	283c0 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   287b8:	4642      	mov	r2, r8
   287ba:	a902      	add	r1, sp, #8
   287bc:	a812      	add	r0, sp, #72	; 0x48
   287be:	f7ff feb9 	bl	28534 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   287c2:	a912      	add	r1, sp, #72	; 0x48
   287c4:	4623      	mov	r3, r4
   287c6:	aa0a      	add	r2, sp, #40	; 0x28
   287c8:	4608      	mov	r0, r1
   287ca:	9500      	str	r5, [sp, #0]
   287cc:	f7ff fdf8 	bl	283c0 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   287d0:	4623      	mov	r3, r4
   287d2:	463a      	mov	r2, r7
   287d4:	a912      	add	r1, sp, #72	; 0x48
   287d6:	a80a      	add	r0, sp, #40	; 0x28
   287d8:	9500      	str	r5, [sp, #0]
   287da:	f7ff fdf1 	bl	283c0 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   287de:	a90a      	add	r1, sp, #40	; 0x28
   287e0:	4643      	mov	r3, r8
   287e2:	aa02      	add	r2, sp, #8
   287e4:	4608      	mov	r0, r1
   287e6:	f7ff fe95 	bl	28514 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   287ea:	4623      	mov	r3, r4
   287ec:	4652      	mov	r2, sl
   287ee:	a90a      	add	r1, sp, #40	; 0x28
   287f0:	4650      	mov	r0, sl
   287f2:	9500      	str	r5, [sp, #0]
   287f4:	f7ff fde4 	bl	283c0 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   287f8:	462a      	mov	r2, r5
   287fa:	a912      	add	r1, sp, #72	; 0x48
   287fc:	4638      	mov	r0, r7
   287fe:	f7ff fd78 	bl	282f2 <uECC_vli_set>
}
   28802:	b01a      	add	sp, #104	; 0x68
   28804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00028808 <uECC_vli_modInv>:
{
   28808:	b5f0      	push	{r4, r5, r6, r7, lr}
   2880a:	460f      	mov	r7, r1
   2880c:	b0a1      	sub	sp, #132	; 0x84
   2880e:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   28810:	4619      	mov	r1, r3
   28812:	4638      	mov	r0, r7
{
   28814:	4615      	mov	r5, r2
   28816:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   28818:	f7ff fd33 	bl	28282 <uECC_vli_isZero>
   2881c:	b128      	cbz	r0, 2882a <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
   2881e:	4630      	mov	r0, r6
}
   28820:	b021      	add	sp, #132	; 0x84
   28822:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		uECC_vli_clear(result, num_words);
   28826:	f7ff bd21 	b.w	2826c <uECC_vli_clear>
	uECC_vli_set(a, input, num_words);
   2882a:	4622      	mov	r2, r4
   2882c:	4639      	mov	r1, r7
   2882e:	4668      	mov	r0, sp
   28830:	f7ff fd5f 	bl	282f2 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   28834:	4629      	mov	r1, r5
   28836:	a808      	add	r0, sp, #32
   28838:	f7ff fd5b 	bl	282f2 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   2883c:	a810      	add	r0, sp, #64	; 0x40
   2883e:	4621      	mov	r1, r4
   28840:	f7ff fd14 	bl	2826c <uECC_vli_clear>
	u[0] = 1;
   28844:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   28846:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   28848:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   2884a:	f7ff fd0f 	bl	2826c <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   2884e:	4622      	mov	r2, r4
   28850:	a908      	add	r1, sp, #32
   28852:	4668      	mov	r0, sp
   28854:	f7ff fd59 	bl	2830a <uECC_vli_cmp_unsafe>
   28858:	b930      	cbnz	r0, 28868 <uECC_vli_modInv+0x60>
  	uECC_vli_set(result, u, num_words);
   2885a:	4622      	mov	r2, r4
   2885c:	a910      	add	r1, sp, #64	; 0x40
   2885e:	4630      	mov	r0, r6
   28860:	f7ff fd47 	bl	282f2 <uECC_vli_set>
}
   28864:	b021      	add	sp, #132	; 0x84
   28866:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (EVEN(a)) {
   28868:	9b00      	ldr	r3, [sp, #0]
   2886a:	07da      	lsls	r2, r3, #31
   2886c:	d409      	bmi.n	28882 <uECC_vli_modInv+0x7a>
			uECC_vli_rshift1(a, num_words);
   2886e:	4621      	mov	r1, r4
   28870:	4668      	mov	r0, sp
   28872:	f7ff fc6e 	bl	28152 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   28876:	4622      	mov	r2, r4
   28878:	4629      	mov	r1, r5
   2887a:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   2887c:	f7ff fc76 	bl	2816c <vli_modInv_update>
   28880:	e7e5      	b.n	2884e <uECC_vli_modInv+0x46>
    		} else if (EVEN(b)) {
   28882:	9b08      	ldr	r3, [sp, #32]
   28884:	07db      	lsls	r3, r3, #31
   28886:	d407      	bmi.n	28898 <uECC_vli_modInv+0x90>
			uECC_vli_rshift1(b, num_words);
   28888:	4621      	mov	r1, r4
   2888a:	a808      	add	r0, sp, #32
   2888c:	f7ff fc61 	bl	28152 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   28890:	4622      	mov	r2, r4
   28892:	4629      	mov	r1, r5
   28894:	a818      	add	r0, sp, #96	; 0x60
   28896:	e7f1      	b.n	2887c <uECC_vli_modInv+0x74>
		} else if (cmpResult > 0) {
   28898:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   2889a:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   2889c:	dd1c      	ble.n	288d8 <uECC_vli_modInv+0xd0>
			uECC_vli_sub(a, a, b, num_words);
   2889e:	aa08      	add	r2, sp, #32
   288a0:	4669      	mov	r1, sp
   288a2:	4668      	mov	r0, sp
   288a4:	f7ff fd58 	bl	28358 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   288a8:	4621      	mov	r1, r4
   288aa:	4668      	mov	r0, sp
   288ac:	f7ff fc51 	bl	28152 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   288b0:	4622      	mov	r2, r4
   288b2:	a918      	add	r1, sp, #96	; 0x60
   288b4:	a810      	add	r0, sp, #64	; 0x40
   288b6:	f7ff fd28 	bl	2830a <uECC_vli_cmp_unsafe>
   288ba:	2800      	cmp	r0, #0
   288bc:	da05      	bge.n	288ca <uECC_vli_modInv+0xc2>
        			uECC_vli_add(u, u, mod, num_words);
   288be:	a910      	add	r1, sp, #64	; 0x40
   288c0:	4623      	mov	r3, r4
   288c2:	462a      	mov	r2, r5
   288c4:	4608      	mov	r0, r1
   288c6:	f7ff fc2a 	bl	2811e <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   288ca:	a910      	add	r1, sp, #64	; 0x40
   288cc:	4623      	mov	r3, r4
   288ce:	aa18      	add	r2, sp, #96	; 0x60
   288d0:	4608      	mov	r0, r1
   288d2:	f7ff fd41 	bl	28358 <uECC_vli_sub>
   288d6:	e7ce      	b.n	28876 <uECC_vli_modInv+0x6e>
      			uECC_vli_sub(b, b, a, num_words);
   288d8:	466a      	mov	r2, sp
   288da:	a808      	add	r0, sp, #32
   288dc:	f7ff fd3c 	bl	28358 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   288e0:	4621      	mov	r1, r4
   288e2:	a808      	add	r0, sp, #32
   288e4:	f7ff fc35 	bl	28152 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   288e8:	4622      	mov	r2, r4
   288ea:	a910      	add	r1, sp, #64	; 0x40
   288ec:	a818      	add	r0, sp, #96	; 0x60
   288ee:	f7ff fd0c 	bl	2830a <uECC_vli_cmp_unsafe>
   288f2:	2800      	cmp	r0, #0
   288f4:	da05      	bge.n	28902 <uECC_vli_modInv+0xfa>
        			uECC_vli_add(v, v, mod, num_words);
   288f6:	a918      	add	r1, sp, #96	; 0x60
   288f8:	4623      	mov	r3, r4
   288fa:	462a      	mov	r2, r5
   288fc:	4608      	mov	r0, r1
   288fe:	f7ff fc0e 	bl	2811e <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   28902:	a918      	add	r1, sp, #96	; 0x60
   28904:	4623      	mov	r3, r4
   28906:	aa10      	add	r2, sp, #64	; 0x40
   28908:	4608      	mov	r0, r1
   2890a:	f7ff fd25 	bl	28358 <uECC_vli_sub>
   2890e:	e7bf      	b.n	28890 <uECC_vli_modInv+0x88>

00028910 <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   28910:	7809      	ldrb	r1, [r1, #0]
   28912:	0049      	lsls	r1, r1, #1
   28914:	b249      	sxtb	r1, r1
   28916:	f7ff bcb4 	b.w	28282 <uECC_vli_isZero>

0002891a <apply_z>:
{
   2891a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2891c:	4615      	mov	r5, r2
   2891e:	b089      	sub	sp, #36	; 0x24
   28920:	461c      	mov	r4, r3
   28922:	4607      	mov	r7, r0
   28924:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   28926:	461a      	mov	r2, r3
   28928:	4629      	mov	r1, r5
   2892a:	4668      	mov	r0, sp
   2892c:	f7ff fe02 	bl	28534 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   28930:	4623      	mov	r3, r4
   28932:	466a      	mov	r2, sp
   28934:	4639      	mov	r1, r7
   28936:	4638      	mov	r0, r7
   28938:	f7ff fdec 	bl	28514 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   2893c:	4623      	mov	r3, r4
   2893e:	462a      	mov	r2, r5
   28940:	4669      	mov	r1, sp
   28942:	4668      	mov	r0, sp
   28944:	f7ff fde6 	bl	28514 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   28948:	4623      	mov	r3, r4
   2894a:	466a      	mov	r2, sp
   2894c:	4631      	mov	r1, r6
   2894e:	4630      	mov	r0, r6
   28950:	f7ff fde0 	bl	28514 <uECC_vli_modMult_fast>
}
   28954:	b009      	add	sp, #36	; 0x24
   28956:	bdf0      	pop	{r4, r5, r6, r7, pc}

00028958 <XYcZ_add>:
{
   28958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2895c:	b08a      	sub	sp, #40	; 0x28
   2895e:	4614      	mov	r4, r2
   28960:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   28964:	4655      	mov	r5, sl
{
   28966:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   28968:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2896c:	9600      	str	r6, [sp, #0]
{
   2896e:	4680      	mov	r8, r0
   28970:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   28972:	462b      	mov	r3, r5
   28974:	4602      	mov	r2, r0
   28976:	4621      	mov	r1, r4
   28978:	a802      	add	r0, sp, #8
   2897a:	f7ff fd21 	bl	283c0 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   2897e:	a902      	add	r1, sp, #8
   28980:	4652      	mov	r2, sl
   28982:	4608      	mov	r0, r1
   28984:	f7ff fdd6 	bl	28534 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   28988:	4653      	mov	r3, sl
   2898a:	aa02      	add	r2, sp, #8
   2898c:	4641      	mov	r1, r8
   2898e:	4640      	mov	r0, r8
   28990:	f7ff fdc0 	bl	28514 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   28994:	4653      	mov	r3, sl
   28996:	aa02      	add	r2, sp, #8
   28998:	4621      	mov	r1, r4
   2899a:	4620      	mov	r0, r4
   2899c:	f7ff fdba 	bl	28514 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   289a0:	462b      	mov	r3, r5
   289a2:	464a      	mov	r2, r9
   289a4:	4639      	mov	r1, r7
   289a6:	4638      	mov	r0, r7
   289a8:	9600      	str	r6, [sp, #0]
   289aa:	f7ff fd09 	bl	283c0 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   289ae:	4652      	mov	r2, sl
   289b0:	4639      	mov	r1, r7
   289b2:	a802      	add	r0, sp, #8
   289b4:	f7ff fdbe 	bl	28534 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   289b8:	a902      	add	r1, sp, #8
   289ba:	462b      	mov	r3, r5
   289bc:	4642      	mov	r2, r8
   289be:	4608      	mov	r0, r1
   289c0:	9600      	str	r6, [sp, #0]
   289c2:	f7ff fcfd 	bl	283c0 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   289c6:	a902      	add	r1, sp, #8
   289c8:	462b      	mov	r3, r5
   289ca:	4622      	mov	r2, r4
   289cc:	4608      	mov	r0, r1
   289ce:	9600      	str	r6, [sp, #0]
   289d0:	f7ff fcf6 	bl	283c0 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   289d4:	462b      	mov	r3, r5
   289d6:	4642      	mov	r2, r8
   289d8:	4621      	mov	r1, r4
   289da:	4620      	mov	r0, r4
   289dc:	9600      	str	r6, [sp, #0]
   289de:	f7ff fcef 	bl	283c0 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   289e2:	4653      	mov	r3, sl
   289e4:	4622      	mov	r2, r4
   289e6:	4649      	mov	r1, r9
   289e8:	4648      	mov	r0, r9
   289ea:	f7ff fd93 	bl	28514 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   289ee:	462b      	mov	r3, r5
   289f0:	aa02      	add	r2, sp, #8
   289f2:	4641      	mov	r1, r8
   289f4:	4620      	mov	r0, r4
   289f6:	9600      	str	r6, [sp, #0]
   289f8:	f7ff fce2 	bl	283c0 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   289fc:	4653      	mov	r3, sl
   289fe:	4622      	mov	r2, r4
   28a00:	4639      	mov	r1, r7
   28a02:	4638      	mov	r0, r7
   28a04:	f7ff fd86 	bl	28514 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   28a08:	462b      	mov	r3, r5
   28a0a:	464a      	mov	r2, r9
   28a0c:	4639      	mov	r1, r7
   28a0e:	4638      	mov	r0, r7
   28a10:	9600      	str	r6, [sp, #0]
   28a12:	f7ff fcd5 	bl	283c0 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   28a16:	4632      	mov	r2, r6
   28a18:	a902      	add	r1, sp, #8
   28a1a:	4620      	mov	r0, r4
   28a1c:	f7ff fc69 	bl	282f2 <uECC_vli_set>
}
   28a20:	b00a      	add	sp, #40	; 0x28
   28a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00028a26 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   28a26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28a2a:	b0b1      	sub	sp, #196	; 0xc4
   28a2c:	e9cd 0103 	strd	r0, r1, [sp, #12]
   28a30:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   28a32:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   28a36:	a818      	add	r0, sp, #96	; 0x60
{
   28a38:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   28a3a:	463a      	mov	r2, r7
{
   28a3c:	461d      	mov	r5, r3
	uECC_vli_set(Rx[1], point, num_words);
   28a3e:	f7ff fc58 	bl	282f2 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   28a42:	00bb      	lsls	r3, r7, #2
   28a44:	9305      	str	r3, [sp, #20]
   28a46:	9b04      	ldr	r3, [sp, #16]
   28a48:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   28a4c:	4619      	mov	r1, r3
   28a4e:	a828      	add	r0, sp, #160	; 0xa0
   28a50:	9302      	str	r3, [sp, #8]
   28a52:	f7ff fc4e 	bl	282f2 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   28a56:	f994 6000 	ldrsb.w	r6, [r4]
	if (initial_Z) {
   28a5a:	2d00      	cmp	r5, #0
   28a5c:	f000 8086 	beq.w	28b6c <EccPoint_mult+0x146>
		uECC_vli_set(z, initial_Z, num_words);
   28a60:	4632      	mov	r2, r6
   28a62:	4629      	mov	r1, r5
   28a64:	a808      	add	r0, sp, #32
   28a66:	f7ff fc44 	bl	282f2 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   28a6a:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   28a6e:	4632      	mov	r2, r6
   28a70:	a918      	add	r1, sp, #96	; 0x60
   28a72:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   28a74:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   28a78:	f7ff fc3b 	bl	282f2 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   28a7c:	a928      	add	r1, sp, #160	; 0xa0
   28a7e:	4648      	mov	r0, r9
   28a80:	f7ff fc37 	bl	282f2 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   28a84:	4623      	mov	r3, r4
   28a86:	aa08      	add	r2, sp, #32
   28a88:	a818      	add	r0, sp, #96	; 0x60
   28a8a:	f7ff ff46 	bl	2891a <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   28a8e:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   28a92:	4623      	mov	r3, r4
   28a94:	aa08      	add	r2, sp, #32
   28a96:	a928      	add	r1, sp, #160	; 0xa0
   28a98:	a818      	add	r0, sp, #96	; 0x60
   28a9a:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   28a9c:	4623      	mov	r3, r4
   28a9e:	aa08      	add	r2, sp, #32
   28aa0:	4649      	mov	r1, r9
   28aa2:	4640      	mov	r0, r8
   28aa4:	f7ff ff39 	bl	2891a <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   28aa8:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   28aac:	3d02      	subs	r5, #2
   28aae:	b22d      	sxth	r5, r5
   28ab0:	2d00      	cmp	r5, #0
   28ab2:	dc62      	bgt.n	28b7a <EccPoint_mult+0x154>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   28ab4:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   28ab8:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   28aba:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   28abe:	ab10      	add	r3, sp, #64	; 0x40
   28ac0:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   28ac4:	43ed      	mvns	r5, r5
   28ac6:	ab20      	add	r3, sp, #128	; 0x80
   28ac8:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   28acc:	f005 0501 	and.w	r5, r5, #1
   28ad0:	ab10      	add	r3, sp, #64	; 0x40
   28ad2:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   28ad6:	ab20      	add	r3, sp, #128	; 0x80
   28ad8:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   28adc:	462b      	mov	r3, r5
   28ade:	464a      	mov	r2, r9
   28ae0:	4631      	mov	r1, r6
   28ae2:	4640      	mov	r0, r8

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   28ae4:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   28ae8:	f7ff fe00 	bl	286ec <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   28aec:	4653      	mov	r3, sl
   28aee:	aa10      	add	r2, sp, #64	; 0x40
   28af0:	a918      	add	r1, sp, #96	; 0x60
   28af2:	a808      	add	r0, sp, #32
   28af4:	9700      	str	r7, [sp, #0]
   28af6:	f7ff fc63 	bl	283c0 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   28afa:	a908      	add	r1, sp, #32
   28afc:	4623      	mov	r3, r4
   28afe:	4632      	mov	r2, r6
   28b00:	4608      	mov	r0, r1
   28b02:	f7ff fd07 	bl	28514 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   28b06:	a908      	add	r1, sp, #32
   28b08:	9a04      	ldr	r2, [sp, #16]
   28b0a:	4623      	mov	r3, r4
   28b0c:	4608      	mov	r0, r1
   28b0e:	f7ff fd01 	bl	28514 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   28b12:	a908      	add	r1, sp, #32
   28b14:	463b      	mov	r3, r7
   28b16:	4652      	mov	r2, sl
   28b18:	4608      	mov	r0, r1
   28b1a:	f7ff fe75 	bl	28808 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   28b1e:	a908      	add	r1, sp, #32
   28b20:	9a02      	ldr	r2, [sp, #8]
   28b22:	4623      	mov	r3, r4
   28b24:	4608      	mov	r0, r1
   28b26:	f7ff fcf5 	bl	28514 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   28b2a:	a908      	add	r1, sp, #32
   28b2c:	4623      	mov	r3, r4
   28b2e:	4642      	mov	r2, r8
   28b30:	4608      	mov	r0, r1
   28b32:	f7ff fcef 	bl	28514 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   28b36:	4633      	mov	r3, r6
   28b38:	4642      	mov	r2, r8
   28b3a:	4629      	mov	r1, r5
   28b3c:	4648      	mov	r0, r9
   28b3e:	9400      	str	r4, [sp, #0]
   28b40:	f7ff ff0a 	bl	28958 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   28b44:	4623      	mov	r3, r4
   28b46:	aa08      	add	r2, sp, #32
   28b48:	a920      	add	r1, sp, #128	; 0x80
   28b4a:	a810      	add	r0, sp, #64	; 0x40
   28b4c:	f7ff fee5 	bl	2891a <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   28b50:	9803      	ldr	r0, [sp, #12]
   28b52:	463a      	mov	r2, r7
   28b54:	a910      	add	r1, sp, #64	; 0x40
   28b56:	f7ff fbcc 	bl	282f2 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   28b5a:	9803      	ldr	r0, [sp, #12]
   28b5c:	9b05      	ldr	r3, [sp, #20]
   28b5e:	a920      	add	r1, sp, #128	; 0x80
   28b60:	4418      	add	r0, r3
   28b62:	f7ff fbc6 	bl	282f2 <uECC_vli_set>
}
   28b66:	b031      	add	sp, #196	; 0xc4
   28b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   28b6c:	4631      	mov	r1, r6
   28b6e:	a808      	add	r0, sp, #32
   28b70:	f7ff fb7c 	bl	2826c <uECC_vli_clear>
		z[0] = 1;
   28b74:	2301      	movs	r3, #1
   28b76:	9308      	str	r3, [sp, #32]
   28b78:	e777      	b.n	28a6a <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   28b7a:	4629      	mov	r1, r5
   28b7c:	4650      	mov	r0, sl
   28b7e:	f7ff fb8f 	bl	282a0 <uECC_vli_testBit>
   28b82:	fab0 f680 	clz	r6, r0
   28b86:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   28b88:	f1c6 0101 	rsb	r1, r6, #1
   28b8c:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   28b90:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   28b94:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   28b98:	4633      	mov	r3, r6
   28b9a:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   28b9e:	465a      	mov	r2, fp
   28ba0:	9400      	str	r4, [sp, #0]
   28ba2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   28ba6:	f7ff fda1 	bl	286ec <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   28baa:	9907      	ldr	r1, [sp, #28]
   28bac:	9806      	ldr	r0, [sp, #24]
   28bae:	9400      	str	r4, [sp, #0]
   28bb0:	460b      	mov	r3, r1
   28bb2:	4602      	mov	r2, r0
   28bb4:	4631      	mov	r1, r6
   28bb6:	4658      	mov	r0, fp
   28bb8:	f7ff fece 	bl	28958 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   28bbc:	3d01      	subs	r5, #1
   28bbe:	e776      	b.n	28aae <EccPoint_mult+0x88>

00028bc0 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   28bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   28bc4:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   28bc8:	f119 081f 	adds.w	r8, r9, #31
{
   28bcc:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   28bce:	bf48      	it	mi
   28bd0:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   28bd4:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   28bd6:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   28bda:	3524      	adds	r5, #36	; 0x24
   28bdc:	4601      	mov	r1, r0
{
   28bde:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   28be0:	4643      	mov	r3, r8
   28be2:	462a      	mov	r2, r5
   28be4:	4630      	mov	r0, r6
   28be6:	f7ff fa9a 	bl	2811e <uECC_vli_add>
   28bea:	4604      	mov	r4, r0
   28bec:	b990      	cbnz	r0, 28c14 <regularize_k+0x54>
   28bee:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   28bf2:	da06      	bge.n	28c02 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   28bf4:	4649      	mov	r1, r9
   28bf6:	4630      	mov	r0, r6
   28bf8:	f7ff fb52 	bl	282a0 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   28bfc:	1e04      	subs	r4, r0, #0
   28bfe:	bf18      	it	ne
   28c00:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   28c02:	4643      	mov	r3, r8
   28c04:	462a      	mov	r2, r5
   28c06:	4631      	mov	r1, r6
   28c08:	4638      	mov	r0, r7
   28c0a:	f7ff fa88 	bl	2811e <uECC_vli_add>

	return carry;
}
   28c0e:	4620      	mov	r0, r4
   28c10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   28c14:	2401      	movs	r4, #1
   28c16:	e7f4      	b.n	28c02 <regularize_k+0x42>

00028c18 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   28c18:	b530      	push	{r4, r5, lr}
   28c1a:	4614      	mov	r4, r2
   28c1c:	b095      	sub	sp, #84	; 0x54
   28c1e:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   28c20:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   28c22:	4623      	mov	r3, r4
{
   28c24:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   28c26:	a904      	add	r1, sp, #16
   28c28:	9102      	str	r1, [sp, #8]
   28c2a:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   28c2c:	f7ff ffc8 	bl	28bc0 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   28c30:	fab0 f380 	clz	r3, r0
   28c34:	095b      	lsrs	r3, r3, #5
   28c36:	aa14      	add	r2, sp, #80	; 0x50
   28c38:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   28c3c:	8863      	ldrh	r3, [r4, #2]
   28c3e:	9401      	str	r4, [sp, #4]
   28c40:	3301      	adds	r3, #1
   28c42:	b21b      	sxth	r3, r3
   28c44:	9300      	str	r3, [sp, #0]
   28c46:	f852 2c48 	ldr.w	r2, [r2, #-72]
   28c4a:	2300      	movs	r3, #0
   28c4c:	f104 0144 	add.w	r1, r4, #68	; 0x44
   28c50:	4628      	mov	r0, r5
   28c52:	f7ff fee8 	bl	28a26 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   28c56:	4621      	mov	r1, r4
   28c58:	4628      	mov	r0, r5
   28c5a:	f7ff fe59 	bl	28910 <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   28c5e:	fab0 f080 	clz	r0, r0
   28c62:	0940      	lsrs	r0, r0, #5
   28c64:	b015      	add	sp, #84	; 0x54
   28c66:	bd30      	pop	{r4, r5, pc}

00028c68 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   28c68:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   28c6a:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   28c6c:	1e4f      	subs	r7, r1, #1
   28c6e:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   28c70:	428c      	cmp	r4, r1
   28c72:	f105 0501 	add.w	r5, r5, #1
   28c76:	db00      	blt.n	28c7a <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   28c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   28c7a:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   28c7c:	f023 0603 	bic.w	r6, r3, #3
   28c80:	f003 0303 	and.w	r3, r3, #3
   28c84:	5996      	ldr	r6, [r2, r6]
   28c86:	00db      	lsls	r3, r3, #3
   28c88:	fa26 f303 	lsr.w	r3, r6, r3
   28c8c:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   28c8e:	e7ee      	b.n	28c6e <uECC_vli_nativeToBytes+0x6>

00028c90 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   28c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28c92:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   28c94:	1cd1      	adds	r1, r2, #3
   28c96:	bf48      	it	mi
   28c98:	1d91      	addmi	r1, r2, #6
   28c9a:	f341 0187 	sbfx	r1, r1, #2, #8
{
   28c9e:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   28ca0:	f7ff fae4 	bl	2826c <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   28ca4:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   28ca6:	1e67      	subs	r7, r4, #1
   28ca8:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   28caa:	42a2      	cmp	r2, r4
   28cac:	f105 0501 	add.w	r5, r5, #1
   28cb0:	db00      	blt.n	28cb4 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   28cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   28cb4:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   28cb6:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   28cba:	5cb2      	ldrb	r2, [r6, r2]
   28cbc:	f003 0303 	and.w	r3, r3, #3
   28cc0:	00db      	lsls	r3, r3, #3
   28cc2:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   28cc6:	5842      	ldr	r2, [r0, r1]
   28cc8:	431a      	orrs	r2, r3
   28cca:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   28ccc:	e7ec      	b.n	28ca8 <uECC_vli_bytesToNative+0x18>

00028cce <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   28cce:	b5f0      	push	{r4, r5, r6, r7, lr}
   28cd0:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   28cd2:	f991 6000 	ldrsb.w	r6, [r1]
{
   28cd6:	4605      	mov	r5, r0
   28cd8:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   28cda:	f7ff fe19 	bl	28910 <EccPoint_isZero>
   28cde:	bb28      	cbnz	r0, 28d2c <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   28ce0:	1d27      	adds	r7, r4, #4
   28ce2:	4632      	mov	r2, r6
   28ce4:	4629      	mov	r1, r5
   28ce6:	4638      	mov	r0, r7
   28ce8:	f7ff fb0f 	bl	2830a <uECC_vli_cmp_unsafe>
   28cec:	2801      	cmp	r0, #1
   28cee:	d120      	bne.n	28d32 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   28cf0:	4632      	mov	r2, r6
   28cf2:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   28cf6:	4638      	mov	r0, r7
   28cf8:	f7ff fb07 	bl	2830a <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   28cfc:	2801      	cmp	r0, #1
   28cfe:	d118      	bne.n	28d32 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   28d00:	4622      	mov	r2, r4
   28d02:	4668      	mov	r0, sp
   28d04:	f7ff fc16 	bl	28534 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   28d08:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   28d0c:	4622      	mov	r2, r4
   28d0e:	4629      	mov	r1, r5
   28d10:	a808      	add	r0, sp, #32
   28d12:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   28d14:	4632      	mov	r2, r6
   28d16:	a908      	add	r1, sp, #32
   28d18:	4668      	mov	r0, sp
   28d1a:	f7ff fb0b 	bl	28334 <uECC_vli_equal>
		return -3;
   28d1e:	2800      	cmp	r0, #0
   28d20:	bf0c      	ite	eq
   28d22:	2000      	moveq	r0, #0
   28d24:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   28d28:	b011      	add	sp, #68	; 0x44
   28d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   28d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28d30:	e7fa      	b.n	28d28 <uECC_valid_point+0x5a>
		return -2;
   28d32:	f06f 0001 	mvn.w	r0, #1
   28d36:	e7f7      	b.n	28d28 <uECC_valid_point+0x5a>

00028d38 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   28d38:	b570      	push	{r4, r5, r6, lr}
   28d3a:	460c      	mov	r4, r1
   28d3c:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   28d3e:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   28d40:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   28d44:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   28d46:	4601      	mov	r1, r0
   28d48:	4668      	mov	r0, sp
   28d4a:	f7ff ffa1 	bl	28c90 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   28d4e:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   28d52:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   28d56:	18a9      	adds	r1, r5, r2
   28d58:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   28d5c:	f7ff ff98 	bl	28c90 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   28d60:	2210      	movs	r2, #16
   28d62:	4631      	mov	r1, r6
   28d64:	4668      	mov	r0, sp
   28d66:	f7ff fad0 	bl	2830a <uECC_vli_cmp_unsafe>
   28d6a:	b128      	cbz	r0, 28d78 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   28d6c:	4621      	mov	r1, r4
   28d6e:	4668      	mov	r0, sp
   28d70:	f7ff ffad 	bl	28cce <uECC_valid_point>
}
   28d74:	b010      	add	sp, #64	; 0x40
   28d76:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   28d78:	f06f 0003 	mvn.w	r0, #3
   28d7c:	e7fa      	b.n	28d74 <uECC_valid_public_key+0x3c>

00028d7e <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   28d7e:	78cb      	ldrb	r3, [r1, #3]
   28d80:	7802      	ldrb	r2, [r0, #0]
   28d82:	4053      	eors	r3, r2
   28d84:	7003      	strb	r3, [r0, #0]
   28d86:	884b      	ldrh	r3, [r1, #2]
   28d88:	7842      	ldrb	r2, [r0, #1]
   28d8a:	4053      	eors	r3, r2
   28d8c:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   28d8e:	680a      	ldr	r2, [r1, #0]
   28d90:	7883      	ldrb	r3, [r0, #2]
   28d92:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   28d96:	7083      	strb	r3, [r0, #2]
   28d98:	680a      	ldr	r2, [r1, #0]
   28d9a:	78c3      	ldrb	r3, [r0, #3]
   28d9c:	4053      	eors	r3, r2
   28d9e:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   28da0:	79cb      	ldrb	r3, [r1, #7]
   28da2:	7902      	ldrb	r2, [r0, #4]
   28da4:	4053      	eors	r3, r2
   28da6:	7103      	strb	r3, [r0, #4]
   28da8:	88cb      	ldrh	r3, [r1, #6]
   28daa:	7942      	ldrb	r2, [r0, #5]
   28dac:	4053      	eors	r3, r2
   28dae:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   28db0:	684a      	ldr	r2, [r1, #4]
   28db2:	7983      	ldrb	r3, [r0, #6]
   28db4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   28db8:	7183      	strb	r3, [r0, #6]
   28dba:	684a      	ldr	r2, [r1, #4]
   28dbc:	79c3      	ldrb	r3, [r0, #7]
   28dbe:	4053      	eors	r3, r2
   28dc0:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   28dc2:	7acb      	ldrb	r3, [r1, #11]
   28dc4:	7a02      	ldrb	r2, [r0, #8]
   28dc6:	4053      	eors	r3, r2
   28dc8:	7203      	strb	r3, [r0, #8]
   28dca:	7a42      	ldrb	r2, [r0, #9]
   28dcc:	894b      	ldrh	r3, [r1, #10]
   28dce:	4053      	eors	r3, r2
   28dd0:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   28dd2:	688a      	ldr	r2, [r1, #8]
   28dd4:	7a83      	ldrb	r3, [r0, #10]
   28dd6:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   28dda:	7283      	strb	r3, [r0, #10]
   28ddc:	688a      	ldr	r2, [r1, #8]
   28dde:	7ac3      	ldrb	r3, [r0, #11]
   28de0:	4053      	eors	r3, r2
   28de2:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   28de4:	7bcb      	ldrb	r3, [r1, #15]
   28de6:	7b02      	ldrb	r2, [r0, #12]
   28de8:	4053      	eors	r3, r2
   28dea:	7303      	strb	r3, [r0, #12]
   28dec:	89cb      	ldrh	r3, [r1, #14]
   28dee:	7b42      	ldrb	r2, [r0, #13]
   28df0:	4053      	eors	r3, r2
   28df2:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   28df4:	68ca      	ldr	r2, [r1, #12]
   28df6:	7b83      	ldrb	r3, [r0, #14]
   28df8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   28dfc:	7383      	strb	r3, [r0, #14]
   28dfe:	68ca      	ldr	r2, [r1, #12]
   28e00:	7bc3      	ldrb	r3, [r0, #15]
   28e02:	4053      	eors	r3, r2
   28e04:	73c3      	strb	r3, [r0, #15]
}
   28e06:	4770      	bx	lr

00028e08 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   28e08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   28e0a:	7802      	ldrb	r2, [r0, #0]
   28e0c:	f88d 2000 	strb.w	r2, [sp]
   28e10:	7942      	ldrb	r2, [r0, #5]
   28e12:	f88d 2001 	strb.w	r2, [sp, #1]
   28e16:	7a82      	ldrb	r2, [r0, #10]
   28e18:	f88d 2002 	strb.w	r2, [sp, #2]
   28e1c:	7bc2      	ldrb	r2, [r0, #15]
   28e1e:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   28e22:	7902      	ldrb	r2, [r0, #4]
   28e24:	f88d 2004 	strb.w	r2, [sp, #4]
   28e28:	7a42      	ldrb	r2, [r0, #9]
   28e2a:	f88d 2005 	strb.w	r2, [sp, #5]
   28e2e:	7b82      	ldrb	r2, [r0, #14]
   28e30:	f88d 2006 	strb.w	r2, [sp, #6]
   28e34:	78c2      	ldrb	r2, [r0, #3]
   28e36:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   28e3a:	7a02      	ldrb	r2, [r0, #8]
   28e3c:	f88d 2008 	strb.w	r2, [sp, #8]
   28e40:	7b42      	ldrb	r2, [r0, #13]
   28e42:	f88d 2009 	strb.w	r2, [sp, #9]
   28e46:	7882      	ldrb	r2, [r0, #2]
   28e48:	f88d 200a 	strb.w	r2, [sp, #10]
   28e4c:	79c2      	ldrb	r2, [r0, #7]
   28e4e:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   28e52:	7b02      	ldrb	r2, [r0, #12]
   28e54:	f88d 200c 	strb.w	r2, [sp, #12]
   28e58:	7842      	ldrb	r2, [r0, #1]
   28e5a:	7ac3      	ldrb	r3, [r0, #11]
   28e5c:	f88d 200d 	strb.w	r2, [sp, #13]
   28e60:	7982      	ldrb	r2, [r0, #6]
   28e62:	f88d 200e 	strb.w	r2, [sp, #14]
   28e66:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   28e6a:	2310      	movs	r3, #16
   28e6c:	466a      	mov	r2, sp
   28e6e:	4619      	mov	r1, r3
   28e70:	f7ff f891 	bl	27f96 <_copy>
}
   28e74:	b005      	add	sp, #20
   28e76:	f85d fb04 	ldr.w	pc, [sp], #4

00028e7a <mult_row_column>:
{
   28e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28e7c:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   28e7e:	7808      	ldrb	r0, [r1, #0]
{
   28e80:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   28e82:	f7ff f897 	bl	27fb4 <_double_byte>
   28e86:	4605      	mov	r5, r0
   28e88:	7860      	ldrb	r0, [r4, #1]
   28e8a:	f7ff f893 	bl	27fb4 <_double_byte>
   28e8e:	78a2      	ldrb	r2, [r4, #2]
   28e90:	7863      	ldrb	r3, [r4, #1]
   28e92:	4053      	eors	r3, r2
   28e94:	78e2      	ldrb	r2, [r4, #3]
   28e96:	4053      	eors	r3, r2
   28e98:	405d      	eors	r5, r3
   28e9a:	4045      	eors	r5, r0
   28e9c:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   28e9e:	7860      	ldrb	r0, [r4, #1]
   28ea0:	7827      	ldrb	r7, [r4, #0]
   28ea2:	f7ff f887 	bl	27fb4 <_double_byte>
   28ea6:	4605      	mov	r5, r0
   28ea8:	78a0      	ldrb	r0, [r4, #2]
   28eaa:	f7ff f883 	bl	27fb4 <_double_byte>
   28eae:	78a3      	ldrb	r3, [r4, #2]
   28eb0:	405f      	eors	r7, r3
   28eb2:	78e3      	ldrb	r3, [r4, #3]
   28eb4:	405f      	eors	r7, r3
   28eb6:	407d      	eors	r5, r7
   28eb8:	4045      	eors	r5, r0
   28eba:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   28ebc:	78a0      	ldrb	r0, [r4, #2]
   28ebe:	7865      	ldrb	r5, [r4, #1]
   28ec0:	7827      	ldrb	r7, [r4, #0]
   28ec2:	f7ff f877 	bl	27fb4 <_double_byte>
   28ec6:	406f      	eors	r7, r5
   28ec8:	4605      	mov	r5, r0
   28eca:	78e0      	ldrb	r0, [r4, #3]
   28ecc:	f7ff f872 	bl	27fb4 <_double_byte>
   28ed0:	78e3      	ldrb	r3, [r4, #3]
   28ed2:	405f      	eors	r7, r3
   28ed4:	407d      	eors	r5, r7
   28ed6:	4045      	eors	r5, r0
   28ed8:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   28eda:	7820      	ldrb	r0, [r4, #0]
   28edc:	f7ff f86a 	bl	27fb4 <_double_byte>
   28ee0:	7863      	ldrb	r3, [r4, #1]
   28ee2:	7825      	ldrb	r5, [r4, #0]
   28ee4:	405d      	eors	r5, r3
   28ee6:	78a3      	ldrb	r3, [r4, #2]
   28ee8:	405d      	eors	r5, r3
   28eea:	4045      	eors	r5, r0
   28eec:	78e0      	ldrb	r0, [r4, #3]
   28eee:	f7ff f861 	bl	27fb4 <_double_byte>
   28ef2:	b2ed      	uxtb	r5, r5
   28ef4:	4045      	eors	r5, r0
   28ef6:	70f5      	strb	r5, [r6, #3]
}
   28ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028efa <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   28efa:	b570      	push	{r4, r5, r6, lr}
   28efc:	4614      	mov	r4, r2
   28efe:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   28f00:	4605      	mov	r5, r0
   28f02:	2800      	cmp	r0, #0
   28f04:	d049      	beq.n	28f9a <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   28f06:	2900      	cmp	r1, #0
   28f08:	d049      	beq.n	28f9e <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   28f0a:	2a00      	cmp	r2, #0
   28f0c:	d049      	beq.n	28fa2 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   28f0e:	2310      	movs	r3, #16
   28f10:	460a      	mov	r2, r1
   28f12:	4668      	mov	r0, sp
   28f14:	4619      	mov	r1, r3
   28f16:	f7ff f83e 	bl	27f96 <_copy>
	add_round_key(state, s->words);
   28f1a:	4621      	mov	r1, r4
   28f1c:	4668      	mov	r0, sp
   28f1e:	f7ff ff2e 	bl	28d7e <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   28f22:	3410      	adds	r4, #16
   28f24:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   28f28:	4668      	mov	r0, sp
   28f2a:	f7e6 fa09 	bl	f340 <sub_bytes>
		shift_rows(state);
   28f2e:	4668      	mov	r0, sp
   28f30:	f7ff ff6a 	bl	28e08 <shift_rows>
	mult_row_column(t, s);
   28f34:	4669      	mov	r1, sp
   28f36:	a804      	add	r0, sp, #16
   28f38:	f7ff ff9f 	bl	28e7a <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   28f3c:	a901      	add	r1, sp, #4
   28f3e:	a805      	add	r0, sp, #20
   28f40:	f7ff ff9b 	bl	28e7a <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   28f44:	a902      	add	r1, sp, #8
   28f46:	a806      	add	r0, sp, #24
   28f48:	f7ff ff97 	bl	28e7a <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   28f4c:	a903      	add	r1, sp, #12
   28f4e:	a807      	add	r0, sp, #28
   28f50:	f7ff ff93 	bl	28e7a <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   28f54:	2310      	movs	r3, #16
   28f56:	4619      	mov	r1, r3
   28f58:	eb0d 0203 	add.w	r2, sp, r3
   28f5c:	4668      	mov	r0, sp
   28f5e:	f7ff f81a 	bl	27f96 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   28f62:	4621      	mov	r1, r4
   28f64:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   28f66:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   28f68:	f7ff ff09 	bl	28d7e <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   28f6c:	42a6      	cmp	r6, r4
   28f6e:	d1db      	bne.n	28f28 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   28f70:	f7e6 f9e6 	bl	f340 <sub_bytes>
	shift_rows(state);
   28f74:	4668      	mov	r0, sp
   28f76:	f7ff ff47 	bl	28e08 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   28f7a:	4631      	mov	r1, r6
   28f7c:	4668      	mov	r0, sp
   28f7e:	f7ff fefe 	bl	28d7e <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   28f82:	2310      	movs	r3, #16
   28f84:	4619      	mov	r1, r3
   28f86:	466a      	mov	r2, sp
   28f88:	4628      	mov	r0, r5
   28f8a:	f7ff f804 	bl	27f96 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   28f8e:	4668      	mov	r0, sp
   28f90:	2210      	movs	r2, #16
   28f92:	2100      	movs	r1, #0
   28f94:	f7ff f80c 	bl	27fb0 <_set>

	return TC_CRYPTO_SUCCESS;
   28f98:	2001      	movs	r0, #1
}
   28f9a:	b008      	add	sp, #32
   28f9c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   28f9e:	4608      	mov	r0, r1
   28fa0:	e7fb      	b.n	28f9a <tc_aes_encrypt+0xa0>
   28fa2:	4610      	mov	r0, r2
   28fa4:	e7f9      	b.n	28f9a <tc_aes_encrypt+0xa0>

00028fa6 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   28fa6:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   28fa8:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   28faa:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   28fac:	f912 3b10 	ldrsb.w	r3, [r2], #16
   28fb0:	2b00      	cmp	r3, #0
   28fb2:	bfb4      	ite	lt
   28fb4:	2387      	movlt	r3, #135	; 0x87
   28fb6:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   28fb8:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   28fbc:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   28fc0:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   28fc2:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   28fc6:	d002      	beq.n	28fce <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   28fc8:	7813      	ldrb	r3, [r2, #0]
   28fca:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   28fcc:	e7f4      	b.n	28fb8 <gf_double+0x12>
	}
}
   28fce:	bd10      	pop	{r4, pc}

00028fd0 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   28fd0:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   28fd2:	b120      	cbz	r0, 28fde <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   28fd4:	2258      	movs	r2, #88	; 0x58
   28fd6:	2100      	movs	r1, #0
   28fd8:	f7fe ffea 	bl	27fb0 <_set>
   28fdc:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   28fde:	bd08      	pop	{r3, pc}

00028fe0 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   28fe0:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   28fe2:	4604      	mov	r4, r0
   28fe4:	b188      	cbz	r0, 2900a <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   28fe6:	2210      	movs	r2, #16
   28fe8:	2100      	movs	r1, #0
   28fea:	f7fe ffe1 	bl	27fb0 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   28fee:	2210      	movs	r2, #16
   28ff0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   28ff4:	2100      	movs	r1, #0
   28ff6:	f7fe ffdb 	bl	27fb0 <_set>
	s->leftover_offset = 0;
   28ffa:	2300      	movs	r3, #0
   28ffc:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   28ffe:	2200      	movs	r2, #0
   29000:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   29004:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   29008:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2900a:	bd10      	pop	{r4, pc}

0002900c <tc_cmac_setup>:
{
   2900c:	b570      	push	{r4, r5, r6, lr}
   2900e:	460d      	mov	r5, r1
   29010:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   29012:	4604      	mov	r4, r0
   29014:	b310      	cbz	r0, 2905c <tc_cmac_setup+0x50>
   29016:	b311      	cbz	r1, 2905e <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   29018:	2258      	movs	r2, #88	; 0x58
   2901a:	2100      	movs	r1, #0
   2901c:	f7fe ffc8 	bl	27fb0 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   29020:	4629      	mov	r1, r5
	s->sched = sched;
   29022:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   29024:	4630      	mov	r0, r6
   29026:	f7e6 f997 	bl	f358 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2902a:	2210      	movs	r2, #16
   2902c:	2100      	movs	r1, #0
   2902e:	4620      	mov	r0, r4
   29030:	f7fe ffbe 	bl	27fb0 <_set>
	gf_double (s->K1, s->iv);
   29034:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   29038:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2903a:	4621      	mov	r1, r4
   2903c:	4620      	mov	r0, r4
   2903e:	f7ff ff5c 	bl	28efa <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   29042:	4621      	mov	r1, r4
   29044:	4628      	mov	r0, r5
   29046:	f7ff ffae 	bl	28fa6 <gf_double>
	gf_double (s->K2, s->K1);
   2904a:	4629      	mov	r1, r5
   2904c:	f104 0020 	add.w	r0, r4, #32
   29050:	f7ff ffa9 	bl	28fa6 <gf_double>
	tc_cmac_init(s);
   29054:	4620      	mov	r0, r4
   29056:	f7ff ffc3 	bl	28fe0 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2905a:	2001      	movs	r0, #1
}
   2905c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2905e:	4608      	mov	r0, r1
   29060:	e7fc      	b.n	2905c <tc_cmac_setup+0x50>

00029062 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   29062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29066:	460d      	mov	r5, r1
   29068:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2906a:	4604      	mov	r4, r0
   2906c:	2800      	cmp	r0, #0
   2906e:	d061      	beq.n	29134 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   29070:	b912      	cbnz	r2, 29078 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   29072:	2001      	movs	r0, #1
}
   29074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   29078:	2900      	cmp	r1, #0
   2907a:	d05b      	beq.n	29134 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   2907c:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   29080:	ea53 0102 	orrs.w	r1, r3, r2
   29084:	d056      	beq.n	29134 <tc_cmac_update+0xd2>
	s->countdown--;
   29086:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   29088:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   2908c:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   29090:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   29094:	f1b8 0f00 	cmp.w	r8, #0
   29098:	d02a      	beq.n	290f0 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2909a:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2909e:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   290a2:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   290a4:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   290a6:	d208      	bcs.n	290ba <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   290a8:	462a      	mov	r2, r5
   290aa:	4633      	mov	r3, r6
   290ac:	4631      	mov	r1, r6
   290ae:	f7fe ff72 	bl	27f96 <_copy>
			s->leftover_offset += data_length;
   290b2:	6c62      	ldr	r2, [r4, #68]	; 0x44
   290b4:	4432      	add	r2, r6
   290b6:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   290b8:	e7db      	b.n	29072 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   290ba:	463b      	mov	r3, r7
   290bc:	462a      	mov	r2, r5
   290be:	4639      	mov	r1, r7
   290c0:	f7fe ff69 	bl	27f96 <_copy>
		data_length -= remaining_space;
   290c4:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   290c6:	2300      	movs	r3, #0
   290c8:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   290ca:	4446      	add	r6, r8
		data += remaining_space;
   290cc:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   290ce:	1e63      	subs	r3, r4, #1
   290d0:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   290d4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   290d8:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   290dc:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   290de:	ea82 0200 	eor.w	r2, r2, r0
   290e2:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   290e4:	d1f6      	bne.n	290d4 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   290e6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   290e8:	4621      	mov	r1, r4
   290ea:	4620      	mov	r0, r4
   290ec:	f7ff ff05 	bl	28efa <tc_aes_encrypt>
   290f0:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   290f4:	2e10      	cmp	r6, #16
   290f6:	d80a      	bhi.n	2910e <tc_cmac_update+0xac>
	if (data_length > 0) {
   290f8:	2e00      	cmp	r6, #0
   290fa:	d0ba      	beq.n	29072 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   290fc:	4633      	mov	r3, r6
   290fe:	462a      	mov	r2, r5
   29100:	4631      	mov	r1, r6
   29102:	f104 0030 	add.w	r0, r4, #48	; 0x30
   29106:	f7fe ff46 	bl	27f96 <_copy>
		s->leftover_offset = data_length;
   2910a:	6466      	str	r6, [r4, #68]	; 0x44
   2910c:	e7b1      	b.n	29072 <tc_cmac_update+0x10>
   2910e:	1e63      	subs	r3, r4, #1
   29110:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   29112:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   29116:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2911a:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   2911c:	ea82 0200 	eor.w	r2, r2, r0
   29120:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29122:	d1f6      	bne.n	29112 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   29124:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   29126:	4621      	mov	r1, r4
   29128:	4620      	mov	r0, r4
   2912a:	f7ff fee6 	bl	28efa <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2912e:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   29130:	3e10      	subs	r6, #16
   29132:	e7df      	b.n	290f4 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   29134:	2000      	movs	r0, #0
   29136:	e79d      	b.n	29074 <tc_cmac_update+0x12>

00029138 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   29138:	b570      	push	{r4, r5, r6, lr}
   2913a:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2913c:	4605      	mov	r5, r0
   2913e:	b1e8      	cbz	r0, 2917c <tc_cmac_final+0x44>
   29140:	b369      	cbz	r1, 2919e <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   29142:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   29144:	2a10      	cmp	r2, #16
   29146:	d11a      	bne.n	2917e <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   29148:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2914a:	1e63      	subs	r3, r4, #1
   2914c:	3901      	subs	r1, #1
   2914e:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   29152:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   29156:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   2915a:	4072      	eors	r2, r6
   2915c:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29160:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   29162:	ea82 0206 	eor.w	r2, r2, r6
   29166:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29168:	d1f3      	bne.n	29152 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2916a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2916c:	4621      	mov	r1, r4
   2916e:	4628      	mov	r0, r5
   29170:	f7ff fec3 	bl	28efa <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   29174:	4620      	mov	r0, r4
   29176:	f7ff ff2b 	bl	28fd0 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2917a:	2001      	movs	r0, #1
}
   2917c:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2917e:	f102 0030 	add.w	r0, r2, #48	; 0x30
   29182:	2100      	movs	r1, #0
   29184:	f1c2 0210 	rsb	r2, r2, #16
   29188:	4420      	add	r0, r4
   2918a:	f7fe ff11 	bl	27fb0 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2918e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   29190:	4423      	add	r3, r4
   29192:	2280      	movs	r2, #128	; 0x80
   29194:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   29198:	f104 0120 	add.w	r1, r4, #32
   2919c:	e7d5      	b.n	2914a <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   2919e:	4608      	mov	r0, r1
   291a0:	e7ec      	b.n	2917c <tc_cmac_final+0x44>

000291a2 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   291a2:	f005 b93d 	b.w	2e420 <z_fatal_error>

000291a6 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   291a6:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   291a8:	6800      	ldr	r0, [r0, #0]
   291aa:	f005 b939 	b.w	2e420 <z_fatal_error>

000291ae <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   291ae:	2100      	movs	r1, #0
   291b0:	2001      	movs	r0, #1
   291b2:	f7ff bff6 	b.w	291a2 <z_arm_fatal_error>

000291b6 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   291b6:	b508      	push	{r3, lr}
	handler();
   291b8:	f7e6 f996 	bl	f4e8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   291bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   291c0:	f7e6 ba6e 	b.w	f6a0 <z_arm_exc_exit>

000291c4 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   291c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   291c8:	4607      	mov	r7, r0
   291ca:	4688      	mov	r8, r1
	register const char *s = nptr;
   291cc:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   291ce:	4621      	mov	r1, r4
   291d0:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   291d4:	2b20      	cmp	r3, #32
   291d6:	d0fa      	beq.n	291ce <strtoul+0xa>
   291d8:	f1a3 0009 	sub.w	r0, r3, #9
   291dc:	2804      	cmp	r0, #4
   291de:	d9f6      	bls.n	291ce <strtoul+0xa>
	} while (isspace(c));
	if (c == '-') {
   291e0:	2b2d      	cmp	r3, #45	; 0x2d
   291e2:	d12f      	bne.n	29244 <strtoul+0x80>
		neg = 1;
		c = *s++;
   291e4:	784b      	ldrb	r3, [r1, #1]
   291e6:	1c8c      	adds	r4, r1, #2
		neg = 1;
   291e8:	f04f 0c01 	mov.w	ip, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   291ec:	2a00      	cmp	r2, #0
   291ee:	d05e      	beq.n	292ae <strtoul+0xea>
   291f0:	2a10      	cmp	r2, #16
   291f2:	d109      	bne.n	29208 <strtoul+0x44>
   291f4:	2b30      	cmp	r3, #48	; 0x30
   291f6:	d107      	bne.n	29208 <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   291f8:	7823      	ldrb	r3, [r4, #0]
   291fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   291fe:	2b58      	cmp	r3, #88	; 0x58
   29200:	d150      	bne.n	292a4 <strtoul+0xe0>
		c = s[1];
   29202:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   29204:	2210      	movs	r2, #16
		s += 2;
   29206:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   29208:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   2920c:	2600      	movs	r6, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   2920e:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   29212:	fb02 fe01 	mul.w	lr, r2, r1
   29216:	ea6f 0e0e 	mvn.w	lr, lr
	for (acc = 0, any = 0;; c = *s++) {
   2921a:	4630      	mov	r0, r6
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   2921c:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   29220:	2d09      	cmp	r5, #9
   29222:	d816      	bhi.n	29252 <strtoul+0x8e>
			c -= '0';
   29224:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   29226:	429a      	cmp	r2, r3
   29228:	dd23      	ble.n	29272 <strtoul+0xae>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   2922a:	2e00      	cmp	r6, #0
   2922c:	db1e      	blt.n	2926c <strtoul+0xa8>
   2922e:	4288      	cmp	r0, r1
   29230:	d81c      	bhi.n	2926c <strtoul+0xa8>
   29232:	d101      	bne.n	29238 <strtoul+0x74>
   29234:	4573      	cmp	r3, lr
   29236:	dc19      	bgt.n	2926c <strtoul+0xa8>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   29238:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   2923c:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   2923e:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   29242:	e7eb      	b.n	2921c <strtoul+0x58>
	} else if (c == '+') {
   29244:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   29246:	bf04      	itt	eq
   29248:	784b      	ldrbeq	r3, [r1, #1]
   2924a:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   2924c:	f04f 0c00 	mov.w	ip, #0
   29250:	e7cc      	b.n	291ec <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   29252:	f043 0520 	orr.w	r5, r3, #32
   29256:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   29258:	2d19      	cmp	r5, #25
   2925a:	d80a      	bhi.n	29272 <strtoul+0xae>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2925c:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   29260:	2d1a      	cmp	r5, #26
   29262:	bf34      	ite	cc
   29264:	2537      	movcc	r5, #55	; 0x37
   29266:	2557      	movcs	r5, #87	; 0x57
   29268:	1b5b      	subs	r3, r3, r5
   2926a:	e7dc      	b.n	29226 <strtoul+0x62>
			any = -1;
   2926c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   29270:	e7e5      	b.n	2923e <strtoul+0x7a>
		}
	}
	if (any < 0) {
   29272:	2e00      	cmp	r6, #0
   29274:	da0a      	bge.n	2928c <strtoul+0xc8>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   29276:	f7fc fa8b 	bl	25790 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   2927a:	2322      	movs	r3, #34	; 0x22
   2927c:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   2927e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   29282:	f1b8 0f00 	cmp.w	r8, #0
   29286:	d109      	bne.n	2929c <strtoul+0xd8>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   29288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   2928c:	f1bc 0f00 	cmp.w	ip, #0
   29290:	d000      	beq.n	29294 <strtoul+0xd0>
		acc = -acc;
   29292:	4240      	negs	r0, r0
	if (endptr != NULL) {
   29294:	f1b8 0f00 	cmp.w	r8, #0
   29298:	d0f6      	beq.n	29288 <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   2929a:	b106      	cbz	r6, 2929e <strtoul+0xda>
   2929c:	1e67      	subs	r7, r4, #1
   2929e:	f8c8 7000 	str.w	r7, [r8]
	return acc;
   292a2:	e7f1      	b.n	29288 <strtoul+0xc4>
	if (base == 0) {
   292a4:	2330      	movs	r3, #48	; 0x30
   292a6:	2a00      	cmp	r2, #0
   292a8:	d1ae      	bne.n	29208 <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   292aa:	2208      	movs	r2, #8
   292ac:	e7ac      	b.n	29208 <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   292ae:	2b30      	cmp	r3, #48	; 0x30
   292b0:	d0a2      	beq.n	291f8 <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   292b2:	220a      	movs	r2, #10
   292b4:	e7a8      	b.n	29208 <strtoul+0x44>

000292b6 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   292b6:	3901      	subs	r1, #1
   292b8:	4603      	mov	r3, r0
   292ba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   292be:	b90a      	cbnz	r2, 292c4 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   292c0:	701a      	strb	r2, [r3, #0]

	return dest;
}
   292c2:	4770      	bx	lr
		*d = *s;
   292c4:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   292c8:	e7f7      	b.n	292ba <strcpy+0x4>

000292ca <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   292ca:	4603      	mov	r3, r0
	size_t n = 0;
   292cc:	2000      	movs	r0, #0

	while (*s != '\0') {
   292ce:	5c1a      	ldrb	r2, [r3, r0]
   292d0:	b902      	cbnz	r2, 292d4 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   292d2:	4770      	bx	lr
		n++;
   292d4:	3001      	adds	r0, #1
   292d6:	e7fa      	b.n	292ce <strlen+0x4>

000292d8 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   292d8:	4603      	mov	r3, r0
	size_t n = 0;
   292da:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   292dc:	5c1a      	ldrb	r2, [r3, r0]
   292de:	b10a      	cbz	r2, 292e4 <strnlen+0xc>
   292e0:	4288      	cmp	r0, r1
   292e2:	d100      	bne.n	292e6 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   292e4:	4770      	bx	lr
		n++;
   292e6:	3001      	adds	r0, #1
   292e8:	e7f8      	b.n	292dc <strnlen+0x4>

000292ea <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   292ea:	1e43      	subs	r3, r0, #1
   292ec:	3901      	subs	r1, #1
   292ee:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   292f2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   292f6:	4282      	cmp	r2, r0
   292f8:	d101      	bne.n	292fe <strcmp+0x14>
   292fa:	2a00      	cmp	r2, #0
   292fc:	d1f7      	bne.n	292ee <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   292fe:	1a10      	subs	r0, r2, r0
   29300:	4770      	bx	lr

00029302 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   29302:	b510      	push	{r4, lr}
   29304:	3901      	subs	r1, #1
   29306:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   29308:	4282      	cmp	r2, r0
   2930a:	d009      	beq.n	29320 <strncmp+0x1e>
   2930c:	7803      	ldrb	r3, [r0, #0]
   2930e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   29312:	42a3      	cmp	r3, r4
   29314:	d100      	bne.n	29318 <strncmp+0x16>
   29316:	b90b      	cbnz	r3, 2931c <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   29318:	1b18      	subs	r0, r3, r4
   2931a:	e002      	b.n	29322 <strncmp+0x20>
		s1++;
   2931c:	3001      	adds	r0, #1
		n--;
   2931e:	e7f3      	b.n	29308 <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   29320:	2000      	movs	r0, #0
}
   29322:	bd10      	pop	{r4, pc}

00029324 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   29324:	b510      	push	{r4, lr}
   29326:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   29328:	b15a      	cbz	r2, 29342 <memcmp+0x1e>
   2932a:	3901      	subs	r1, #1
   2932c:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   2932e:	f813 0b01 	ldrb.w	r0, [r3], #1
   29332:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   29336:	42a3      	cmp	r3, r4
   29338:	d001      	beq.n	2933e <memcmp+0x1a>
   2933a:	4290      	cmp	r0, r2
   2933c:	d0f7      	beq.n	2932e <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   2933e:	1a80      	subs	r0, r0, r2
}
   29340:	bd10      	pop	{r4, pc}
		return 0;
   29342:	4610      	mov	r0, r2
   29344:	e7fc      	b.n	29340 <memcmp+0x1c>

00029346 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   29346:	b510      	push	{r4, lr}
   29348:	1e43      	subs	r3, r0, #1
   2934a:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   2934c:	4291      	cmp	r1, r2
   2934e:	d100      	bne.n	29352 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   29350:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   29352:	f811 4b01 	ldrb.w	r4, [r1], #1
   29356:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   2935a:	e7f7      	b.n	2934c <memcpy+0x6>

0002935c <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   2935c:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   2935e:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   29360:	4603      	mov	r3, r0
	while (n > 0) {
   29362:	4293      	cmp	r3, r2
   29364:	d100      	bne.n	29368 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   29366:	4770      	bx	lr
		*(d_byte++) = c_byte;
   29368:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   2936c:	e7f9      	b.n	29362 <memset+0x6>

0002936e <_stdout_hook_default>:
}
   2936e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29372:	4770      	bx	lr

00029374 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   29374:	2806      	cmp	r0, #6
   29376:	d108      	bne.n	2938a <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   29378:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2937c:	2201      	movs	r2, #1
   2937e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   29382:	f3bf 8f4f 	dsb	sy
        __WFE();
   29386:	bf20      	wfe
    while (true)
   29388:	e7fd      	b.n	29386 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   2938a:	4770      	bx	lr

0002938c <pm_state_exit_post_ops>:
   2938c:	2300      	movs	r3, #0
   2938e:	f383 8811 	msr	BASEPRI, r3
   29392:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   29396:	4770      	bx	lr

00029398 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   29398:	b530      	push	{r4, r5, lr}
   2939a:	b085      	sub	sp, #20
   2939c:	4604      	mov	r4, r0
   2939e:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   293a0:	4668      	mov	r0, sp
   293a2:	2203      	movs	r2, #3
   293a4:	f7ff ffcf 	bl	29346 <memcpy>
	(void)memset(res + 3, 0, 13);
   293a8:	220d      	movs	r2, #13
   293aa:	2100      	movs	r1, #0
   293ac:	f10d 0003 	add.w	r0, sp, #3
   293b0:	f7ff ffd4 	bl	2935c <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   293b4:	4620      	mov	r0, r4
   293b6:	466a      	mov	r2, sp
   293b8:	4669      	mov	r1, sp
   293ba:	f7ee fd81 	bl	17ec0 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   293be:	4604      	mov	r4, r0
   293c0:	b920      	cbnz	r0, 293cc <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   293c2:	2203      	movs	r2, #3
   293c4:	4669      	mov	r1, sp
   293c6:	4628      	mov	r0, r5
   293c8:	f7ff ffbd 	bl	29346 <memcpy>

	return 0;
}
   293cc:	4620      	mov	r0, r4
   293ce:	b005      	add	sp, #20
   293d0:	bd30      	pop	{r4, r5, pc}

000293d2 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   293d2:	b513      	push	{r0, r1, r4, lr}
   293d4:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   293d6:	aa01      	add	r2, sp, #4
   293d8:	3103      	adds	r1, #3
   293da:	f7ff ffdd 	bl	29398 <ah>
	if (err) {
   293de:	b948      	cbnz	r0, 293f4 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   293e0:	2203      	movs	r2, #3
   293e2:	a901      	add	r1, sp, #4
   293e4:	4620      	mov	r0, r4
   293e6:	f7ff ff9d 	bl	29324 <memcmp>
   293ea:	fab0 f080 	clz	r0, r0
   293ee:	0940      	lsrs	r0, r0, #5
}
   293f0:	b002      	add	sp, #8
   293f2:	bd10      	pop	{r4, pc}
		return false;
   293f4:	2000      	movs	r0, #0
   293f6:	e7fb      	b.n	293f0 <bt_rpa_irk_matches+0x1e>

000293f8 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   293f8:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   293fa:	1cce      	adds	r6, r1, #3
{
   293fc:	4605      	mov	r5, r0
   293fe:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   29400:	4630      	mov	r0, r6
   29402:	2103      	movs	r1, #3
   29404:	f7ee fd5a 	bl	17ebc <bt_rand>
	if (err) {
   29408:	b960      	cbnz	r0, 29424 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   2940a:	7963      	ldrb	r3, [r4, #5]
   2940c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   29410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29414:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   29416:	4622      	mov	r2, r4
   29418:	4631      	mov	r1, r6
   2941a:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   2941c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   29420:	f7ff bfba 	b.w	29398 <ah>
}
   29424:	bd70      	pop	{r4, r5, r6, pc}

00029426 <send_cmd_status>:
{
   29426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   2942a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   2942e:	4606      	mov	r6, r0
   29430:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   29432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29436:	2100      	movs	r1, #0
   29438:	200f      	movs	r0, #15
   2943a:	f7e6 feb3 	bl	101a4 <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2943e:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   29440:	f100 0808 	add.w	r8, r0, #8
   29444:	4604      	mov	r4, r0
   29446:	7507      	strb	r7, [r0, #20]
   29448:	2102      	movs	r1, #2
   2944a:	4640      	mov	r0, r8
   2944c:	f003 ffc1 	bl	2d3d2 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   29450:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   29452:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   29454:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   29456:	7041      	strb	r1, [r0, #1]
   29458:	4640      	mov	r0, r8
   2945a:	f003 ffba 	bl	2d3d2 <net_buf_simple_add>
	evt->ncmd = 1U;
   2945e:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   29460:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   29462:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   29464:	4620      	mov	r0, r4
}
   29466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   2946a:	f7e7 baf5 	b.w	10a58 <bt_recv_prio>

0002946e <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   2946e:	f101 0320 	add.w	r3, r1, #32
   29472:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   29474:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   29478:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   2947c:	428b      	cmp	r3, r1
   2947e:	d1f9      	bne.n	29474 <sys_memcpy_swap.constprop.0+0x6>
}
   29480:	4770      	bx	lr

00029482 <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(2);
   29482:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   29486:	f043 0306 	orr.w	r3, r3, #6
   2948a:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   2948e:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   29492:	f043 0304 	orr.w	r3, r3, #4
   29496:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   2949a:	4770      	bx	lr

0002949c <default_CSPRNG>:
{
   2949c:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   2949e:	f7ee fd0d 	bl	17ebc <bt_rand>
}
   294a2:	fab0 f080 	clz	r0, r0
   294a6:	0940      	lsrs	r0, r0, #5
   294a8:	bd08      	pop	{r3, pc}

000294aa <bt_settings_decode_key>:
{
   294aa:	b570      	push	{r4, r5, r6, lr}
   294ac:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   294ae:	2100      	movs	r1, #0
{
   294b0:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   294b2:	f7fe fc6d 	bl	27d90 <settings_name_next>
   294b6:	280d      	cmp	r0, #13
   294b8:	d118      	bne.n	294ec <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   294ba:	7b23      	ldrb	r3, [r4, #12]
   294bc:	2b30      	cmp	r3, #48	; 0x30
   294be:	d111      	bne.n	294e4 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   294c0:	2300      	movs	r3, #0
   294c2:	702b      	strb	r3, [r5, #0]
   294c4:	f104 060c 	add.w	r6, r4, #12
   294c8:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   294ca:	462a      	mov	r2, r5
   294cc:	4620      	mov	r0, r4
   294ce:	2301      	movs	r3, #1
   294d0:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   294d2:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   294d4:	f7fd fc9e 	bl	26e14 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   294d8:	42b4      	cmp	r4, r6
   294da:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   294de:	d1f4      	bne.n	294ca <bt_settings_decode_key+0x20>
	return 0;
   294e0:	2000      	movs	r0, #0
}
   294e2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   294e4:	2b31      	cmp	r3, #49	; 0x31
   294e6:	d101      	bne.n	294ec <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   294e8:	2301      	movs	r3, #1
   294ea:	e7ea      	b.n	294c2 <bt_settings_decode_key+0x18>
		return -EINVAL;
   294ec:	f06f 0015 	mvn.w	r0, #21
   294f0:	e7f7      	b.n	294e2 <bt_settings_decode_key+0x38>

000294f2 <bt_settings_init>:
{
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   294f2:	f7e5 bc45 	b.w	ed80 <settings_subsys_init>

000294f6 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   294f6:	b510      	push	{r4, lr}
   294f8:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   294fa:	7801      	ldrb	r1, [r0, #0]
   294fc:	7822      	ldrb	r2, [r4, #0]
   294fe:	428a      	cmp	r2, r1
{
   29500:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   29502:	d00f      	beq.n	29524 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   29504:	4669      	mov	r1, sp
   29506:	f7e6 fded 	bl	100e4 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2950a:	a905      	add	r1, sp, #20
   2950c:	4620      	mov	r0, r4
   2950e:	f7e6 fde9 	bl	100e4 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   29512:	2210      	movs	r2, #16
   29514:	f10d 0115 	add.w	r1, sp, #21
   29518:	f10d 0001 	add.w	r0, sp, #1
   2951c:	f7ff ff02 	bl	29324 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   29520:	b00a      	add	sp, #40	; 0x28
   29522:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   29524:	2a01      	cmp	r2, #1
   29526:	d006      	beq.n	29536 <bt_uuid_cmp+0x40>
   29528:	2a02      	cmp	r2, #2
   2952a:	d007      	beq.n	2953c <bt_uuid_cmp+0x46>
   2952c:	b972      	cbnz	r2, 2954c <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2952e:	8840      	ldrh	r0, [r0, #2]
   29530:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   29532:	1ac0      	subs	r0, r0, r3
   29534:	e7f4      	b.n	29520 <bt_uuid_cmp+0x2a>
   29536:	6840      	ldr	r0, [r0, #4]
   29538:	6863      	ldr	r3, [r4, #4]
   2953a:	e7fa      	b.n	29532 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2953c:	2210      	movs	r2, #16
   2953e:	1c61      	adds	r1, r4, #1
   29540:	3001      	adds	r0, #1
}
   29542:	b00a      	add	sp, #40	; 0x28
   29544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   29548:	f7ff beec 	b.w	29324 <memcmp>
	switch (u1->type) {
   2954c:	f06f 0015 	mvn.w	r0, #21
   29550:	e7e6      	b.n	29520 <bt_uuid_cmp+0x2a>

00029552 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   29552:	2a04      	cmp	r2, #4
{
   29554:	b510      	push	{r4, lr}
	switch (data_len) {
   29556:	d00a      	beq.n	2956e <bt_uuid_create+0x1c>
   29558:	2a10      	cmp	r2, #16
   2955a:	d00d      	beq.n	29578 <bt_uuid_create+0x26>
   2955c:	2a02      	cmp	r2, #2
   2955e:	f04f 0300 	mov.w	r3, #0
   29562:	d10f      	bne.n	29584 <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   29564:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   29566:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   29568:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   2956a:	2001      	movs	r0, #1
}
   2956c:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   2956e:	2301      	movs	r3, #1
   29570:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   29572:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   29574:	6042      	str	r2, [r0, #4]
		break;
   29576:	e7f8      	b.n	2956a <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   29578:	2302      	movs	r3, #2
   2957a:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   2957e:	f7ff fee2 	bl	29346 <memcpy>
		break;
   29582:	e7f2      	b.n	2956a <bt_uuid_create+0x18>
	switch (data_len) {
   29584:	4618      	mov	r0, r3
   29586:	e7f1      	b.n	2956c <bt_uuid_create+0x1a>

00029588 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   29588:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2958a:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2958c:	2106      	movs	r1, #6
{
   2958e:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   29590:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   29594:	f7ee fc92 	bl	17ebc <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   29598:	b918      	cbnz	r0, 295a2 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2959a:	79a3      	ldrb	r3, [r4, #6]
   2959c:	f063 033f 	orn	r3, r3, #63	; 0x3f
   295a0:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   295a2:	bd10      	pop	{r4, pc}

000295a4 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   295a4:	280f      	cmp	r0, #15
   295a6:	d806      	bhi.n	295b6 <bt_hci_evt_get_flags+0x12>
   295a8:	280d      	cmp	r0, #13
   295aa:	d80b      	bhi.n	295c4 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   295ac:	2805      	cmp	r0, #5
   295ae:	bf14      	ite	ne
   295b0:	2002      	movne	r0, #2
   295b2:	2003      	moveq	r0, #3
   295b4:	4770      	bx	lr
	switch (evt) {
   295b6:	2813      	cmp	r0, #19
   295b8:	d004      	beq.n	295c4 <bt_hci_evt_get_flags+0x20>
   295ba:	281a      	cmp	r0, #26
   295bc:	bf14      	ite	ne
   295be:	2002      	movne	r0, #2
   295c0:	2001      	moveq	r0, #1
   295c2:	4770      	bx	lr
   295c4:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   295c6:	4770      	bx	lr

000295c8 <handle_event>:
{
   295c8:	b410      	push	{r4}
   295ca:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   295ce:	4604      	mov	r4, r0
   295d0:	4608      	mov	r0, r1
		if (handler->event != event) {
   295d2:	7811      	ldrb	r1, [r2, #0]
   295d4:	42a1      	cmp	r1, r4
   295d6:	d004      	beq.n	295e2 <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   295d8:	3208      	adds	r2, #8
   295da:	429a      	cmp	r2, r3
   295dc:	d1f9      	bne.n	295d2 <handle_event+0xa>
}
   295de:	bc10      	pop	{r4}
   295e0:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   295e2:	8981      	ldrh	r1, [r0, #12]
   295e4:	7853      	ldrb	r3, [r2, #1]
   295e6:	4299      	cmp	r1, r3
   295e8:	d3f9      	bcc.n	295de <handle_event+0x16>
		handler->handler(buf);
   295ea:	6853      	ldr	r3, [r2, #4]
}
   295ec:	bc10      	pop	{r4}
		handler->handler(buf);
   295ee:	4718      	bx	r3

000295f0 <hci_data_buf_overflow>:
}
   295f0:	4770      	bx	lr

000295f2 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   295f2:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   295f6:	b193      	cbz	r3, 2961e <update_sec_level+0x2c>
   295f8:	7b5a      	ldrb	r2, [r3, #13]
   295fa:	07d1      	lsls	r1, r2, #31
   295fc:	d50f      	bpl.n	2961e <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   295fe:	06d2      	lsls	r2, r2, #27
   29600:	d50b      	bpl.n	2961a <update_sec_level+0x28>
   29602:	7b1b      	ldrb	r3, [r3, #12]
   29604:	2b10      	cmp	r3, #16
   29606:	d108      	bne.n	2961a <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   29608:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   2960a:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   2960c:	7a82      	ldrb	r2, [r0, #10]
   2960e:	7a40      	ldrb	r0, [r0, #9]
}
   29610:	4282      	cmp	r2, r0
   29612:	bf8c      	ite	hi
   29614:	2000      	movhi	r0, #0
   29616:	2001      	movls	r0, #1
   29618:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   2961a:	2303      	movs	r3, #3
   2961c:	e7f5      	b.n	2960a <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   2961e:	2302      	movs	r3, #2
   29620:	e7f3      	b.n	2960a <update_sec_level+0x18>

00029622 <atomic_or>:
{
   29622:	4603      	mov	r3, r0
}
   29624:	f3bf 8f5b 	dmb	ish
   29628:	e853 0f00 	ldrex	r0, [r3]
   2962c:	ea40 0201 	orr.w	r2, r0, r1
   29630:	e843 2c00 	strex	ip, r2, [r3]
   29634:	f1bc 0f00 	cmp.w	ip, #0
   29638:	d1f6      	bne.n	29628 <atomic_or+0x6>
   2963a:	f3bf 8f5b 	dmb	ish
   2963e:	4770      	bx	lr

00029640 <hci_disconn_complete>:
{
   29640:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   29642:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
   29644:	782e      	ldrb	r6, [r5, #0]
   29646:	b97e      	cbnz	r6, 29668 <hci_disconn_complete+0x28>
	conn = bt_conn_lookup_handle(handle);
   29648:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   2964c:	f7e8 fa70 	bl	11b30 <bt_conn_lookup_handle>
	if (!conn) {
   29650:	4604      	mov	r4, r0
   29652:	b148      	cbz	r0, 29668 <hci_disconn_complete+0x28>
	conn->err = evt->reason;
   29654:	78eb      	ldrb	r3, [r5, #3]
   29656:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   29658:	4631      	mov	r1, r6
   2965a:	f7e8 fa71 	bl	11b40 <bt_conn_set_state>
		bt_conn_unref(conn);
   2965e:	4620      	mov	r0, r4
}
   29660:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   29664:	f000 be06 	b.w	2a274 <bt_conn_unref>
}
   29668:	bd70      	pop	{r4, r5, r6, pc}

0002966a <le_phy_update_complete>:
{
   2966a:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2966c:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   2966e:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   29672:	f7e8 fa5d 	bl	11b30 <bt_conn_lookup_handle>
	if (!conn) {
   29676:	b118      	cbz	r0, 29680 <le_phy_update_complete+0x16>
}
   29678:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   2967c:	f000 bdfa 	b.w	2a274 <bt_conn_unref>
}
   29680:	bd08      	pop	{r3, pc}

00029682 <le_data_len_change>:
{
   29682:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   29684:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   29686:	8818      	ldrh	r0, [r3, #0]
   29688:	f7e8 fa52 	bl	11b30 <bt_conn_lookup_handle>
	if (!conn) {
   2968c:	b118      	cbz	r0, 29696 <le_data_len_change+0x14>
}
   2968e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   29692:	f000 bdef 	b.w	2a274 <bt_conn_unref>
}
   29696:	bd08      	pop	{r3, pc}

00029698 <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   29698:	2101      	movs	r1, #1
   2969a:	3008      	adds	r0, #8
   2969c:	f003 bec0 	b.w	2d420 <net_buf_simple_pull_mem>

000296a0 <le_conn_update_complete>:
{
   296a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   296a2:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   296a4:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   296a8:	f7e8 fa42 	bl	11b30 <bt_conn_lookup_handle>
	if (!conn) {
   296ac:	4604      	mov	r4, r0
   296ae:	2800      	cmp	r0, #0
   296b0:	d03c      	beq.n	2972c <le_conn_update_complete+0x8c>
	if (!evt->status) {
   296b2:	782b      	ldrb	r3, [r5, #0]
   296b4:	b9cb      	cbnz	r3, 296ea <le_conn_update_complete+0x4a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   296b6:	792a      	ldrb	r2, [r5, #4]
   296b8:	78eb      	ldrb	r3, [r5, #3]
   296ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   296be:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   296c2:	79aa      	ldrb	r2, [r5, #6]
   296c4:	796b      	ldrb	r3, [r5, #5]
   296c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   296ca:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   296ce:	79eb      	ldrb	r3, [r5, #7]
   296d0:	7a2a      	ldrb	r2, [r5, #8]
   296d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   296d6:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   296da:	f7e8 faf7 	bl	11ccc <notify_le_param_updated>
	bt_conn_unref(conn);
   296de:	4620      	mov	r0, r4
}
   296e0:	b003      	add	sp, #12
   296e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_conn_unref(conn);
   296e6:	f000 bdc5 	b.w	2a274 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   296ea:	2b1a      	cmp	r3, #26
   296ec:	d1f7      	bne.n	296de <le_conn_update_complete+0x3e>
   296ee:	78c3      	ldrb	r3, [r0, #3]
   296f0:	2b01      	cmp	r3, #1
   296f2:	d1f4      	bne.n	296de <le_conn_update_complete+0x3e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   296f4:	f44f 7100 	mov.w	r1, #512	; 0x200
   296f8:	3004      	adds	r0, #4
   296fa:	f7ff ff92 	bl	29622 <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   296fe:	0583      	lsls	r3, r0, #22
   29700:	d4ed      	bmi.n	296de <le_conn_update_complete+0x3e>
		param.interval_min = conn->le.interval_min;
   29702:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   29706:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   2970a:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
   2970e:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   29712:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
   29716:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   2971a:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
   2971c:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   29720:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   29724:	4620      	mov	r0, r4
   29726:	f7e8 fde3 	bl	122f0 <bt_l2cap_update_conn_param>
   2972a:	e7d8      	b.n	296de <le_conn_update_complete+0x3e>
}
   2972c:	b003      	add	sp, #12
   2972e:	bd30      	pop	{r4, r5, pc}

00029730 <le_remote_feat_complete>:
{
   29730:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   29732:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   29734:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   29738:	f7e8 f9fa 	bl	11b30 <bt_conn_lookup_handle>
	if (!conn) {
   2973c:	4604      	mov	r4, r0
   2973e:	b180      	cbz	r0, 29762 <le_remote_feat_complete+0x32>
	if (!evt->status) {
   29740:	782b      	ldrb	r3, [r5, #0]
   29742:	b923      	cbnz	r3, 2974e <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   29744:	2208      	movs	r2, #8
   29746:	1ce9      	adds	r1, r5, #3
   29748:	30ac      	adds	r0, #172	; 0xac
   2974a:	f7ff fdfc 	bl	29346 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2974e:	1d20      	adds	r0, r4, #4
   29750:	f44f 6100 	mov.w	r1, #2048	; 0x800
   29754:	f7ff ff65 	bl	29622 <atomic_or>
	bt_conn_unref(conn);
   29758:	4620      	mov	r0, r4
}
   2975a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   2975e:	f000 bd89 	b.w	2a274 <bt_conn_unref>
}
   29762:	bd38      	pop	{r3, r4, r5, pc}

00029764 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29764:	f3bf 8f5b 	dmb	ish
   29768:	e850 3f00 	ldrex	r3, [r0]
   2976c:	400b      	ands	r3, r1
   2976e:	e840 3200 	strex	r2, r3, [r0]
   29772:	2a00      	cmp	r2, #0
   29774:	d1f8      	bne.n	29768 <atomic_and.isra.0+0x4>
   29776:	f3bf 8f5b 	dmb	ish
}
   2977a:	4770      	bx	lr

0002977c <hci_vendor_event>:
   2977c:	4770      	bx	lr

0002977e <sys_put_le64>:
	dst[1] = val >> 8;
   2977e:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   29782:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   29784:	0e00      	lsrs	r0, r0, #24
   29786:	7053      	strb	r3, [r2, #1]
   29788:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   2978a:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   2978c:	f3c1 2007 	ubfx	r0, r1, #8, #8
   29790:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   29792:	7093      	strb	r3, [r2, #2]
   29794:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   29796:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   29798:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   2979a:	71d1      	strb	r1, [r2, #7]
}
   2979c:	4770      	bx	lr

0002979e <hci_num_completed_packets>:
{
   2979e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < evt->num_handles; i++) {
   297a2:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   297a4:	6887      	ldr	r7, [r0, #8]
			tx->pending_no_cb = 0U;
   297a6:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   297a8:	783b      	ldrb	r3, [r7, #0]
   297aa:	429d      	cmp	r5, r3
   297ac:	db01      	blt.n	297b2 <hci_num_completed_packets+0x14>
}
   297ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   297b2:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   297b6:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   297ba:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   297be:	f7e8 f9b7 	bl	11b30 <bt_conn_lookup_handle>
		if (!conn) {
   297c2:	4604      	mov	r4, r0
   297c4:	b350      	cbz	r0, 2981c <hci_num_completed_packets+0x7e>
			k_work_submit(&conn->tx_complete_work);
   297c6:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   297ca:	b326      	cbz	r6, 29816 <hci_num_completed_packets+0x78>
	__asm__ volatile(
   297cc:	f04f 0320 	mov.w	r3, #32
   297d0:	f3ef 8211 	mrs	r2, BASEPRI
   297d4:	f383 8812 	msr	BASEPRI_MAX, r3
   297d8:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   297dc:	69e3      	ldr	r3, [r4, #28]
   297de:	b16b      	cbz	r3, 297fc <hci_num_completed_packets+0x5e>
				conn->pending_no_cb--;
   297e0:	3b01      	subs	r3, #1
   297e2:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   297e4:	f382 8811 	msr	BASEPRI, r2
   297e8:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   297ec:	4620      	mov	r0, r4
   297ee:	f7e8 f8fb 	bl	119e8 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   297f2:	3e01      	subs	r6, #1
   297f4:	f7fc fac0 	bl	25d78 <z_impl_k_sem_give>
   297f8:	b2b6      	uxth	r6, r6
   297fa:	e7e6      	b.n	297ca <hci_num_completed_packets+0x2c>
	return list->head;
   297fc:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   297fe:	b12b      	cbz	r3, 2980c <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29800:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   29802:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   29804:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29806:	428b      	cmp	r3, r1
	list->tail = node;
   29808:	bf08      	it	eq
   2980a:	61a0      	streq	r0, [r4, #24]
   2980c:	f382 8811 	msr	BASEPRI, r2
   29810:	f3bf 8f6f 	isb	sy
			if (!node) {
   29814:	b923      	cbnz	r3, 29820 <hci_num_completed_packets+0x82>
		bt_conn_unref(conn);
   29816:	4620      	mov	r0, r4
   29818:	f000 fd2c 	bl	2a274 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   2981c:	3501      	adds	r5, #1
   2981e:	e7c3      	b.n	297a8 <hci_num_completed_packets+0xa>
	__asm__ volatile(
   29820:	f04f 0220 	mov.w	r2, #32
   29824:	f3ef 8111 	mrs	r1, BASEPRI
   29828:	f382 8812 	msr	BASEPRI_MAX, r2
   2982c:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   29830:	68da      	ldr	r2, [r3, #12]
   29832:	61e2      	str	r2, [r4, #28]
	return list->tail;
   29834:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   29836:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   2983a:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   2983e:	b94a      	cbnz	r2, 29854 <hci_num_completed_packets+0xb6>
	list->head = node;
   29840:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   29844:	f381 8811 	msr	BASEPRI, r1
   29848:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   2984c:	4648      	mov	r0, r9
   2984e:	f7fc fbff 	bl	26050 <k_work_submit>
   29852:	e7cb      	b.n	297ec <hci_num_completed_packets+0x4e>
	parent->next = child;
   29854:	6013      	str	r3, [r2, #0]
	list->tail = node;
   29856:	6263      	str	r3, [r4, #36]	; 0x24
}
   29858:	e7f4      	b.n	29844 <hci_num_completed_packets+0xa6>

0002985a <le_ltk_request>:
{
   2985a:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   2985c:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   2985e:	8826      	ldrh	r6, [r4, #0]
{
   29860:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   29862:	b2b0      	uxth	r0, r6
   29864:	f7e8 f964 	bl	11b30 <bt_conn_lookup_handle>
	if (!conn) {
   29868:	4605      	mov	r5, r0
   2986a:	b318      	cbz	r0, 298b4 <le_ltk_request+0x5a>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   2986c:	af02      	add	r7, sp, #8
   2986e:	f8d4 2002 	ldr.w	r2, [r4, #2]
   29872:	f8d4 3006 	ldr.w	r3, [r4, #6]
   29876:	9701      	str	r7, [sp, #4]
   29878:	8961      	ldrh	r1, [r4, #10]
   2987a:	9100      	str	r1, [sp, #0]
   2987c:	f002 fb78 	bl	2bf70 <bt_smp_request_ltk>
   29880:	b1d0      	cbz	r0, 298b8 <le_ltk_request+0x5e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   29882:	2112      	movs	r1, #18
   29884:	f242 001a 	movw	r0, #8218	; 0x201a
   29888:	f7e6 fe3a 	bl	10500 <bt_hci_cmd_create>
	if (!buf) {
   2988c:	4604      	mov	r4, r0
   2988e:	b170      	cbz	r0, 298ae <le_ltk_request+0x54>
	return net_buf_simple_add(&buf->b, len);
   29890:	2112      	movs	r1, #18
   29892:	3008      	adds	r0, #8
   29894:	f003 fd9d 	bl	2d3d2 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   29898:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   2989a:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   2989e:	2210      	movs	r2, #16
   298a0:	f7ff fd51 	bl	29346 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   298a4:	4621      	mov	r1, r4
   298a6:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   298aa:	f7e6 fe63 	bl	10574 <bt_hci_cmd_send>
	bt_conn_unref(conn);
   298ae:	4628      	mov	r0, r5
   298b0:	f000 fce0 	bl	2a274 <bt_conn_unref>
}
   298b4:	b007      	add	sp, #28
   298b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   298b8:	2102      	movs	r1, #2
   298ba:	f242 001b 	movw	r0, #8219	; 0x201b
   298be:	f7e6 fe1f 	bl	10500 <bt_hci_cmd_create>
	if (!buf) {
   298c2:	4604      	mov	r4, r0
   298c4:	2800      	cmp	r0, #0
   298c6:	d0f2      	beq.n	298ae <le_ltk_request+0x54>
   298c8:	2102      	movs	r1, #2
   298ca:	3008      	adds	r0, #8
   298cc:	f003 fd81 	bl	2d3d2 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   298d0:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   298d2:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   298d4:	f242 001b 	movw	r0, #8219	; 0x201b
   298d8:	e7e7      	b.n	298aa <le_ltk_request+0x50>

000298da <le_conn_param_neg_reply>:
{
   298da:	b570      	push	{r4, r5, r6, lr}
   298dc:	4606      	mov	r6, r0
   298de:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   298e0:	f242 0021 	movw	r0, #8225	; 0x2021
   298e4:	2103      	movs	r1, #3
   298e6:	f7e6 fe0b 	bl	10500 <bt_hci_cmd_create>
	if (!buf) {
   298ea:	4604      	mov	r4, r0
   298ec:	b160      	cbz	r0, 29908 <le_conn_param_neg_reply+0x2e>
   298ee:	2103      	movs	r1, #3
   298f0:	3008      	adds	r0, #8
   298f2:	f003 fd6e 	bl	2d3d2 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   298f6:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   298f8:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   298fa:	4621      	mov	r1, r4
   298fc:	f242 0021 	movw	r0, #8225	; 0x2021
}
   29900:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   29904:	f7e6 be36 	b.w	10574 <bt_hci_cmd_send>
}
   29908:	bd70      	pop	{r4, r5, r6, pc}

0002990a <le_conn_param_req>:
{
   2990a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   2990c:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   2990e:	78d9      	ldrb	r1, [r3, #3]
   29910:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   29912:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   29914:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   29918:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   2991c:	7959      	ldrb	r1, [r3, #5]
   2991e:	791a      	ldrb	r2, [r3, #4]
   29920:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   29924:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   29928:	799a      	ldrb	r2, [r3, #6]
   2992a:	79d9      	ldrb	r1, [r3, #7]
   2992c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   29930:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   29934:	7a1a      	ldrb	r2, [r3, #8]
   29936:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   29938:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   2993a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   2993e:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   29940:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   29944:	f7e8 f8f4 	bl	11b30 <bt_conn_lookup_handle>
	if (!conn) {
   29948:	4606      	mov	r6, r0
   2994a:	b928      	cbnz	r0, 29958 <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   2994c:	2102      	movs	r1, #2
   2994e:	4620      	mov	r0, r4
   29950:	f7ff ffc3 	bl	298da <le_conn_param_neg_reply>
}
   29954:	b003      	add	sp, #12
   29956:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   29958:	4669      	mov	r1, sp
   2995a:	f7e8 f9fb 	bl	11d54 <le_param_req>
   2995e:	b938      	cbnz	r0, 29970 <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   29960:	211e      	movs	r1, #30
   29962:	4620      	mov	r0, r4
   29964:	f7ff ffb9 	bl	298da <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   29968:	4630      	mov	r0, r6
   2996a:	f000 fc83 	bl	2a274 <bt_conn_unref>
   2996e:	e7f1      	b.n	29954 <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   29970:	210e      	movs	r1, #14
   29972:	f242 0020 	movw	r0, #8224	; 0x2020
   29976:	f7e6 fdc3 	bl	10500 <bt_hci_cmd_create>
	if (!buf) {
   2997a:	4605      	mov	r5, r0
   2997c:	2800      	cmp	r0, #0
   2997e:	d0f3      	beq.n	29968 <le_conn_param_req+0x5e>
   29980:	210e      	movs	r1, #14
   29982:	3008      	adds	r0, #8
   29984:	f003 fd25 	bl	2d3d2 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   29988:	220e      	movs	r2, #14
   2998a:	4604      	mov	r4, r0
   2998c:	2100      	movs	r1, #0
   2998e:	f7ff fce5 	bl	2935c <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   29992:	f8bd 3000 	ldrh.w	r3, [sp]
   29996:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   29998:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   2999c:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   2999e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   299a2:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   299a4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   299a8:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   299aa:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   299ac:	4629      	mov	r1, r5
   299ae:	f242 0020 	movw	r0, #8224	; 0x2020
   299b2:	f7e6 fddf 	bl	10574 <bt_hci_cmd_send>
   299b6:	e7d7      	b.n	29968 <le_conn_param_req+0x5e>

000299b8 <hci_le_read_max_data_len>:
{
   299b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   299ba:	4606      	mov	r6, r0
   299bc:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   299be:	aa01      	add	r2, sp, #4
   299c0:	2100      	movs	r1, #0
   299c2:	f242 002f 	movw	r0, #8239	; 0x202f
   299c6:	f7e6 fdf7 	bl	105b8 <bt_hci_cmd_send_sync>
	if (err) {
   299ca:	4604      	mov	r4, r0
   299cc:	b948      	cbnz	r0, 299e2 <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   299ce:	9801      	ldr	r0, [sp, #4]
   299d0:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   299d2:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   299d6:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   299d8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   299dc:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   299de:	f7f9 fd5b 	bl	23498 <net_buf_unref>
}
   299e2:	4620      	mov	r0, r4
   299e4:	b002      	add	sp, #8
   299e6:	bd70      	pop	{r4, r5, r6, pc}

000299e8 <bt_hci_disconnect>:
{
   299e8:	b570      	push	{r4, r5, r6, lr}
   299ea:	4606      	mov	r6, r0
   299ec:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   299ee:	f240 4006 	movw	r0, #1030	; 0x406
   299f2:	2103      	movs	r1, #3
   299f4:	f7e6 fd84 	bl	10500 <bt_hci_cmd_create>
	if (!buf) {
   299f8:	4604      	mov	r4, r0
   299fa:	b168      	cbz	r0, 29a18 <bt_hci_disconnect+0x30>
   299fc:	2103      	movs	r1, #3
   299fe:	3008      	adds	r0, #8
   29a00:	f003 fce7 	bl	2d3d2 <net_buf_simple_add>
	disconn->reason = reason;
   29a04:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   29a06:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   29a08:	4621      	mov	r1, r4
   29a0a:	2200      	movs	r2, #0
}
   29a0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   29a10:	f240 4006 	movw	r0, #1030	; 0x406
   29a14:	f7e6 bdd0 	b.w	105b8 <bt_hci_cmd_send_sync>
}
   29a18:	f06f 0068 	mvn.w	r0, #104	; 0x68
   29a1c:	bd70      	pop	{r4, r5, r6, pc}

00029a1e <bt_le_set_data_len>:
{
   29a1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29a20:	4607      	mov	r7, r0
   29a22:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   29a24:	f242 0022 	movw	r0, #8226	; 0x2022
   29a28:	2106      	movs	r1, #6
{
   29a2a:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   29a2c:	f7e6 fd68 	bl	10500 <bt_hci_cmd_create>
	if (!buf) {
   29a30:	4604      	mov	r4, r0
   29a32:	b178      	cbz	r0, 29a54 <bt_le_set_data_len+0x36>
   29a34:	2106      	movs	r1, #6
   29a36:	3008      	adds	r0, #8
   29a38:	f003 fccb 	bl	2d3d2 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   29a3c:	883b      	ldrh	r3, [r7, #0]
   29a3e:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   29a40:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   29a42:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   29a44:	4621      	mov	r1, r4
   29a46:	2200      	movs	r2, #0
}
   29a48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   29a4c:	f242 0022 	movw	r0, #8226	; 0x2022
   29a50:	f7e6 bdb2 	b.w	105b8 <bt_hci_cmd_send_sync>
}
   29a54:	f06f 0068 	mvn.w	r0, #104	; 0x68
   29a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029a5a <bt_le_set_phy>:
{
   29a5a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29a5e:	4680      	mov	r8, r0
   29a60:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   29a62:	f242 0032 	movw	r0, #8242	; 0x2032
   29a66:	2107      	movs	r1, #7
{
   29a68:	f89d 9020 	ldrb.w	r9, [sp, #32]
   29a6c:	4616      	mov	r6, r2
   29a6e:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   29a70:	f7e6 fd46 	bl	10500 <bt_hci_cmd_create>
	if (!buf) {
   29a74:	4604      	mov	r4, r0
   29a76:	b198      	cbz	r0, 29aa0 <bt_le_set_phy+0x46>
   29a78:	2107      	movs	r1, #7
   29a7a:	3008      	adds	r0, #8
   29a7c:	f003 fca9 	bl	2d3d2 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   29a80:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   29a84:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   29a86:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   29a88:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   29a8a:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   29a8c:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   29a90:	4621      	mov	r1, r4
   29a92:	2200      	movs	r2, #0
}
   29a94:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   29a98:	f242 0032 	movw	r0, #8242	; 0x2032
   29a9c:	f7e6 bd8c 	b.w	105b8 <bt_hci_cmd_send_sync>
}
   29aa0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   29aa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00029aa8 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   29aa8:	6880      	ldr	r0, [r0, #8]
   29aaa:	f7e6 bde7 	b.w	1067c <bt_hci_le_enh_conn_complete>

00029aae <le_legacy_conn_complete>:
{
   29aae:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   29ab0:	6881      	ldr	r1, [r0, #8]
{
   29ab2:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   29ab4:	780b      	ldrb	r3, [r1, #0]
   29ab6:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   29aba:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   29abe:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   29ac2:	78cb      	ldrb	r3, [r1, #3]
   29ac4:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   29ac8:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   29acc:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   29ad0:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   29ad4:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   29ad8:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   29adc:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   29ae0:	7c4b      	ldrb	r3, [r1, #17]
   29ae2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	memcpy(dst, src, sizeof(*dst));
   29ae6:	2207      	movs	r2, #7
   29ae8:	3104      	adds	r1, #4
   29aea:	a803      	add	r0, sp, #12
   29aec:	f7ff fc2b 	bl	29346 <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   29af0:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   29af2:	4669      	mov	r1, sp
   29af4:	2206      	movs	r2, #6
   29af6:	f10d 0013 	add.w	r0, sp, #19
   29afa:	9400      	str	r4, [sp, #0]
   29afc:	f8ad 4004 	strh.w	r4, [sp, #4]
   29b00:	f7ff fc21 	bl	29346 <memcpy>
   29b04:	2206      	movs	r2, #6
   29b06:	4669      	mov	r1, sp
   29b08:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   29b0c:	9400      	str	r4, [sp, #0]
   29b0e:	f8ad 4004 	strh.w	r4, [sp, #4]
   29b12:	f7ff fc18 	bl	29346 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   29b16:	a802      	add	r0, sp, #8
   29b18:	f7e6 fdb0 	bl	1067c <bt_hci_le_enh_conn_complete>
}
   29b1c:	b00a      	add	sp, #40	; 0x28
   29b1e:	bd10      	pop	{r4, pc}

00029b20 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   29b20:	8803      	ldrh	r3, [r0, #0]
   29b22:	8842      	ldrh	r2, [r0, #2]
   29b24:	4293      	cmp	r3, r2
{
   29b26:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   29b28:	d819      	bhi.n	29b5e <bt_le_conn_params_valid+0x3e>
   29b2a:	2b05      	cmp	r3, #5
   29b2c:	d917      	bls.n	29b5e <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   29b2e:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   29b32:	d814      	bhi.n	29b5e <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   29b34:	8883      	ldrh	r3, [r0, #4]
   29b36:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   29b3a:	d210      	bcs.n	29b5e <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   29b3c:	88c0      	ldrh	r0, [r0, #6]
   29b3e:	f1a0 010a 	sub.w	r1, r0, #10
   29b42:	b289      	uxth	r1, r1
   29b44:	f640 4476 	movw	r4, #3190	; 0xc76
   29b48:	42a1      	cmp	r1, r4
   29b4a:	d808      	bhi.n	29b5e <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   29b4c:	3301      	adds	r3, #1
   29b4e:	b29b      	uxth	r3, r3
   29b50:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   29b52:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   29b56:	bf34      	ite	cc
   29b58:	2001      	movcc	r0, #1
   29b5a:	2000      	movcs	r0, #0
}
   29b5c:	bd10      	pop	{r4, pc}
		return false;
   29b5e:	2000      	movs	r0, #0
   29b60:	e7fc      	b.n	29b5c <bt_le_conn_params_valid+0x3c>

00029b62 <hci_encrypt_key_refresh_complete>:
{
   29b62:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   29b64:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   29b66:	f8b3 0001 	ldrh.w	r0, [r3, #1]
	uint8_t status = evt->status;
   29b6a:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   29b6c:	f7e7 ffe0 	bl	11b30 <bt_conn_lookup_handle>
	if (!conn) {
   29b70:	4604      	mov	r4, r0
   29b72:	b338      	cbz	r0, 29bc4 <hci_encrypt_key_refresh_complete+0x62>
	if (status) {
   29b74:	b165      	cbz	r5, 29b90 <hci_encrypt_key_refresh_complete+0x2e>
		bt_conn_security_changed(conn, status,
   29b76:	4628      	mov	r0, r5
   29b78:	f7e6 fe90 	bl	1089c <bt_security_err_get>
   29b7c:	4629      	mov	r1, r5
   29b7e:	4602      	mov	r2, r0
   29b80:	4620      	mov	r0, r4
   29b82:	f7e8 f94f 	bl	11e24 <bt_conn_security_changed>
	bt_conn_unref(conn);
   29b86:	4620      	mov	r0, r4
}
   29b88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   29b8c:	f000 bb72 	b.w	2a274 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   29b90:	7883      	ldrb	r3, [r0, #2]
   29b92:	2b01      	cmp	r3, #1
   29b94:	d107      	bne.n	29ba6 <hci_encrypt_key_refresh_complete+0x44>
		bt_smp_update_keys(conn);
   29b96:	f002 fc0e 	bl	2c3b6 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   29b9a:	4620      	mov	r0, r4
   29b9c:	f7ff fd29 	bl	295f2 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   29ba0:	2800      	cmp	r0, #0
   29ba2:	bf08      	it	eq
   29ba4:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   29ba6:	4628      	mov	r0, r5
   29ba8:	f7e6 fe78 	bl	1089c <bt_security_err_get>
   29bac:	4629      	mov	r1, r5
   29bae:	4602      	mov	r2, r0
   29bb0:	4620      	mov	r0, r4
   29bb2:	f7e8 f937 	bl	11e24 <bt_conn_security_changed>
	if (status) {
   29bb6:	2d00      	cmp	r5, #0
   29bb8:	d0e5      	beq.n	29b86 <hci_encrypt_key_refresh_complete+0x24>
		bt_conn_disconnect(conn, status);
   29bba:	4629      	mov	r1, r5
   29bbc:	4620      	mov	r0, r4
   29bbe:	f000 fb9e 	bl	2a2fe <bt_conn_disconnect>
   29bc2:	e7e0      	b.n	29b86 <hci_encrypt_key_refresh_complete+0x24>
}
   29bc4:	bd38      	pop	{r3, r4, r5, pc}

00029bc6 <hci_encrypt_change>:
{
   29bc6:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   29bc8:	6886      	ldr	r6, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   29bca:	f8b6 0001 	ldrh.w	r0, [r6, #1]
	uint8_t status = evt->status;
   29bce:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   29bd0:	f7e7 ffae 	bl	11b30 <bt_conn_lookup_handle>
	if (!conn) {
   29bd4:	4604      	mov	r4, r0
   29bd6:	b350      	cbz	r0, 29c2e <hci_encrypt_change+0x68>
	if (status) {
   29bd8:	b165      	cbz	r5, 29bf4 <hci_encrypt_change+0x2e>
		bt_conn_security_changed(conn, status,
   29bda:	4628      	mov	r0, r5
   29bdc:	f7e6 fe5e 	bl	1089c <bt_security_err_get>
   29be0:	4629      	mov	r1, r5
   29be2:	4602      	mov	r2, r0
   29be4:	4620      	mov	r0, r4
   29be6:	f7e8 f91d 	bl	11e24 <bt_conn_security_changed>
	bt_conn_unref(conn);
   29bea:	4620      	mov	r0, r4
}
   29bec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   29bf0:	f000 bb40 	b.w	2a274 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   29bf4:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   29bf6:	78f3      	ldrb	r3, [r6, #3]
   29bf8:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   29bfa:	2a01      	cmp	r2, #1
   29bfc:	d108      	bne.n	29c10 <hci_encrypt_change+0x4a>
		if (conn->encrypt) {
   29bfe:	b10b      	cbz	r3, 29c04 <hci_encrypt_change+0x3e>
			bt_smp_update_keys(conn);
   29c00:	f002 fbd9 	bl	2c3b6 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   29c04:	4620      	mov	r0, r4
   29c06:	f7ff fcf4 	bl	295f2 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   29c0a:	2800      	cmp	r0, #0
   29c0c:	bf08      	it	eq
   29c0e:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   29c10:	4628      	mov	r0, r5
   29c12:	f7e6 fe43 	bl	1089c <bt_security_err_get>
   29c16:	4629      	mov	r1, r5
   29c18:	4602      	mov	r2, r0
   29c1a:	4620      	mov	r0, r4
   29c1c:	f7e8 f902 	bl	11e24 <bt_conn_security_changed>
	if (status) {
   29c20:	2d00      	cmp	r5, #0
   29c22:	d0e2      	beq.n	29bea <hci_encrypt_change+0x24>
		bt_conn_disconnect(conn, status);
   29c24:	4629      	mov	r1, r5
   29c26:	4620      	mov	r0, r4
   29c28:	f000 fb69 	bl	2a2fe <bt_conn_disconnect>
   29c2c:	e7dd      	b.n	29bea <hci_encrypt_change+0x24>
}
   29c2e:	bd70      	pop	{r4, r5, r6, pc}

00029c30 <bt_send>:
		return bt_hci_ecc_send(buf);
   29c30:	f7e6 b90c 	b.w	fe4c <bt_hci_ecc_send>

00029c34 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   29c34:	2000      	movs	r0, #0
   29c36:	4770      	bx	lr

00029c38 <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   29c38:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   29c3a:	f7eb fa4b 	bl	150d4 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   29c3e:	b118      	cbz	r0, 29c48 <bt_addr_le_is_bonded+0x10>
   29c40:	89c0      	ldrh	r0, [r0, #14]
   29c42:	3800      	subs	r0, #0
   29c44:	bf18      	it	ne
   29c46:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   29c48:	bd08      	pop	{r3, pc}

00029c4a <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   29c4a:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   29c4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   29c50:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   29c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29c56:	2100      	movs	r1, #0
{
   29c58:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   29c5a:	f7e6 faa3 	bl	101a4 <bt_buf_get_evt>
   29c5e:	2102      	movs	r1, #2
   29c60:	4604      	mov	r4, r0
   29c62:	3008      	adds	r0, #8
   29c64:	f003 fbb5 	bl	2d3d2 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   29c68:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   29c6a:	7045      	strb	r5, [r0, #1]

	return buf;
}
   29c6c:	4620      	mov	r0, r4
   29c6e:	bd70      	pop	{r4, r5, r6, pc}

00029c70 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   29c70:	3103      	adds	r1, #3
{
   29c72:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   29c74:	b2c9      	uxtb	r1, r1
{
   29c76:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   29c78:	200e      	movs	r0, #14
   29c7a:	f7ff ffe6 	bl	29c4a <bt_hci_evt_create>
   29c7e:	2103      	movs	r1, #3
   29c80:	4604      	mov	r4, r0
   29c82:	3008      	adds	r0, #8
   29c84:	f003 fba5 	bl	2d3d2 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   29c88:	2301      	movs	r3, #1
   29c8a:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   29c8c:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   29c90:	4620      	mov	r0, r4
   29c92:	bd38      	pop	{r3, r4, r5, pc}

00029c94 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   29c94:	b570      	push	{r4, r5, r6, lr}
   29c96:	4605      	mov	r5, r0
   29c98:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   29c9a:	200f      	movs	r0, #15
   29c9c:	2104      	movs	r1, #4
   29c9e:	f7ff ffd4 	bl	29c4a <bt_hci_evt_create>
   29ca2:	2104      	movs	r1, #4
   29ca4:	4604      	mov	r4, r0
   29ca6:	3008      	adds	r0, #8
   29ca8:	f003 fb93 	bl	2d3d2 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   29cac:	2201      	movs	r2, #1
	cs->status = status;
   29cae:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   29cb0:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   29cb2:	8045      	strh	r5, [r0, #2]

	return buf;
}
   29cb4:	4620      	mov	r0, r4
   29cb6:	bd70      	pop	{r4, r5, r6, pc}

00029cb8 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   29cb8:	2207      	movs	r2, #7
   29cba:	f7ff bb44 	b.w	29346 <memcpy>

00029cbe <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29cbe:	f3bf 8f5b 	dmb	ish
   29cc2:	6800      	ldr	r0, [r0, #0]
   29cc4:	f3bf 8f5b 	dmb	ish
}
   29cc8:	4770      	bx	lr

00029cca <hci_id_add.constprop.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   29cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29ccc:	4607      	mov	r7, r0
   29cce:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   29cd0:	f242 0027 	movw	r0, #8231	; 0x2027
   29cd4:	2127      	movs	r1, #39	; 0x27
   29cd6:	f7e6 fc13 	bl	10500 <bt_hci_cmd_create>
	if (!buf) {
   29cda:	4604      	mov	r4, r0
   29cdc:	b1d0      	cbz	r0, 29d14 <hci_id_add.constprop.0+0x4a>
   29cde:	2127      	movs	r1, #39	; 0x27
   29ce0:	3008      	adds	r0, #8
   29ce2:	f003 fb76 	bl	2d3d2 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   29ce6:	4639      	mov	r1, r7
   29ce8:	4605      	mov	r5, r0
   29cea:	f7ff ffe5 	bl	29cb8 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   29cee:	4631      	mov	r1, r6
   29cf0:	2210      	movs	r2, #16
   29cf2:	1de8      	adds	r0, r5, #7
   29cf4:	f7ff fb27 	bl	29346 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   29cf8:	2210      	movs	r2, #16
   29cfa:	2100      	movs	r1, #0
   29cfc:	f105 0017 	add.w	r0, r5, #23
   29d00:	f7ff fb2c 	bl	2935c <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   29d04:	4621      	mov	r1, r4
   29d06:	2200      	movs	r2, #0
}
   29d08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   29d0c:	f242 0027 	movw	r0, #8231	; 0x2027
   29d10:	f7e6 bc52 	b.w	105b8 <bt_hci_cmd_send_sync>
}
   29d14:	f06f 0068 	mvn.w	r0, #104	; 0x68
   29d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029d1a <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   29d1a:	7a03      	ldrb	r3, [r0, #8]
   29d1c:	075b      	lsls	r3, r3, #29
   29d1e:	d504      	bpl.n	29d2a <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   29d20:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   29d24:	3001      	adds	r0, #1
   29d26:	f7ff bfd0 	b.w	29cca <hci_id_add.constprop.0>
}
   29d2a:	4770      	bx	lr

00029d2c <adv_unpause_enabled>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29d2c:	f100 0310 	add.w	r3, r0, #16
   29d30:	f3bf 8f5b 	dmb	ish
   29d34:	e853 2f00 	ldrex	r2, [r3]
   29d38:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
   29d3c:	e843 1c00 	strex	ip, r1, [r3]
   29d40:	f1bc 0f00 	cmp.w	ip, #0
   29d44:	d1f6      	bne.n	29d34 <adv_unpause_enabled+0x8>
   29d46:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   29d4a:	0453      	lsls	r3, r2, #17
   29d4c:	d502      	bpl.n	29d54 <adv_unpause_enabled+0x28>
		bt_le_adv_set_enable(adv, true);
   29d4e:	2101      	movs	r1, #1
   29d50:	f000 b9ab 	b.w	2a0aa <bt_le_adv_set_enable>
}
   29d54:	4770      	bx	lr

00029d56 <addr_res_enable>:
{
   29d56:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   29d58:	2101      	movs	r1, #1
{
   29d5a:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   29d5c:	f242 002d 	movw	r0, #8237	; 0x202d
   29d60:	f7e6 fbce 	bl	10500 <bt_hci_cmd_create>
	if (!buf) {
   29d64:	4604      	mov	r4, r0
   29d66:	b158      	cbz	r0, 29d80 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   29d68:	4629      	mov	r1, r5
   29d6a:	3008      	adds	r0, #8
   29d6c:	f003 fb40 	bl	2d3f0 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   29d70:	4621      	mov	r1, r4
   29d72:	2200      	movs	r2, #0
}
   29d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   29d78:	f242 002d 	movw	r0, #8237	; 0x202d
   29d7c:	f7e6 bc1c 	b.w	105b8 <bt_hci_cmd_send_sync>
}
   29d80:	f06f 0068 	mvn.w	r0, #104	; 0x68
   29d84:	bd38      	pop	{r3, r4, r5, pc}

00029d86 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   29d86:	f100 0210 	add.w	r2, r0, #16
{
   29d8a:	b508      	push	{r3, lr}
   29d8c:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   29d8e:	4610      	mov	r0, r2
   29d90:	f7ff ff95 	bl	29cbe <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   29d94:	0641      	lsls	r1, r0, #25
   29d96:	d511      	bpl.n	29dbc <adv_pause_enabled+0x36>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29d98:	f3bf 8f5b 	dmb	ish
   29d9c:	e852 1f00 	ldrex	r1, [r2]
   29da0:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
   29da4:	e842 1000 	strex	r0, r1, [r2]
   29da8:	2800      	cmp	r0, #0
   29daa:	d1f7      	bne.n	29d9c <adv_pause_enabled+0x16>
   29dac:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   29db0:	4618      	mov	r0, r3
   29db2:	2100      	movs	r1, #0
}
   29db4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_set_enable(adv, false);
   29db8:	f000 b977 	b.w	2a0aa <bt_le_adv_set_enable>
}
   29dbc:	bd08      	pop	{r3, pc}

00029dbe <bt_lookup_id_addr>:
{
   29dbe:	b510      	push	{r4, lr}
   29dc0:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   29dc2:	f7eb f94f 	bl	15064 <bt_keys_find_irk>
		if (keys) {
   29dc6:	b100      	cbz	r0, 29dca <bt_lookup_id_addr+0xc>
			return &keys->addr;
   29dc8:	1c44      	adds	r4, r0, #1
}
   29dca:	4620      	mov	r0, r4
   29dcc:	bd10      	pop	{r4, pc}

00029dce <bt_id_set_adv_private_addr>:
{
   29dce:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   29dd0:	2106      	movs	r1, #6
   29dd2:	4668      	mov	r0, sp
   29dd4:	f7ee f872 	bl	17ebc <bt_rand>
	if (err) {
   29dd8:	b940      	cbnz	r0, 29dec <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   29dda:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   29dde:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   29de0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   29de4:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   29de8:	f7e6 feee 	bl	10bc8 <set_random_address>
}
   29dec:	b003      	add	sp, #12
   29dee:	f85d fb04 	ldr.w	pc, [sp], #4

00029df2 <bt_id_adv_random_addr_check>:
}
   29df2:	2001      	movs	r0, #1
   29df4:	4770      	bx	lr

00029df6 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   29df6:	7a03      	ldrb	r3, [r0, #8]
   29df8:	07d9      	lsls	r1, r3, #31
   29dfa:	d504      	bpl.n	29e06 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   29dfc:	f023 0301 	bic.w	r3, r3, #1
   29e00:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   29e02:	f7e6 bf69 	b.w	10cd8 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   29e06:	0799      	lsls	r1, r3, #30
   29e08:	d504      	bpl.n	29e14 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   29e0a:	f023 0302 	bic.w	r3, r3, #2
   29e0e:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   29e10:	f7e6 bff6 	b.w	10e00 <bt_id_del>
}
   29e14:	4770      	bx	lr

00029e16 <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   29e16:	2000      	movs	r0, #0
   29e18:	4770      	bx	lr

00029e1a <get_adv_channel_map>:
{
   29e1a:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   29e1c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   29e20:	bf0c      	ite	eq
   29e22:	2007      	moveq	r0, #7
   29e24:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   29e26:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   29e28:	bf48      	it	mi
   29e2a:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   29e2e:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   29e30:	bf48      	it	mi
   29e32:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   29e36:	4770      	bx	lr

00029e38 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29e38:	f3bf 8f5b 	dmb	ish
   29e3c:	6800      	ldr	r0, [r0, #0]
   29e3e:	f3bf 8f5b 	dmb	ish
}
   29e42:	4770      	bx	lr

00029e44 <atomic_and>:
{
   29e44:	4603      	mov	r3, r0
}
   29e46:	f3bf 8f5b 	dmb	ish
   29e4a:	e853 0f00 	ldrex	r0, [r3]
   29e4e:	ea00 0201 	and.w	r2, r0, r1
   29e52:	e843 2c00 	strex	ip, r2, [r3]
   29e56:	f1bc 0f00 	cmp.w	ip, #0
   29e5a:	d1f6      	bne.n	29e4a <atomic_and+0x6>
   29e5c:	f3bf 8f5b 	dmb	ish
   29e60:	4770      	bx	lr

00029e62 <hci_set_ad>:
{
   29e62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29e66:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   29e68:	2120      	movs	r1, #32
{
   29e6a:	4682      	mov	sl, r0
   29e6c:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   29e6e:	f7e6 fb47 	bl	10500 <bt_hci_cmd_create>
	if (!buf) {
   29e72:	4605      	mov	r5, r0
   29e74:	2800      	cmp	r0, #0
   29e76:	d04a      	beq.n	29f0e <hci_set_ad+0xac>
	return net_buf_simple_add(&buf->b, len);
   29e78:	2120      	movs	r1, #32
   29e7a:	3008      	adds	r0, #8
   29e7c:	f003 faa9 	bl	2d3d2 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   29e80:	2220      	movs	r2, #32
   29e82:	2100      	movs	r1, #0
   29e84:	4681      	mov	r9, r0
   29e86:	f7ff fa69 	bl	2935c <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   29e8a:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
   29e8e:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   29e92:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   29e94:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   29e96:	f8d4 8000 	ldr.w	r8, [r4]
   29e9a:	2300      	movs	r3, #0
   29e9c:	6862      	ldr	r2, [r4, #4]
   29e9e:	4293      	cmp	r3, r2
   29ea0:	d30d      	bcc.n	29ebe <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   29ea2:	9b00      	ldr	r3, [sp, #0]
   29ea4:	3408      	adds	r4, #8
   29ea6:	42a3      	cmp	r3, r4
   29ea8:	d1f5      	bne.n	29e96 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   29eaa:	2200      	movs	r2, #0
   29eac:	4629      	mov	r1, r5
   29eae:	4650      	mov	r0, sl
	*data_len = set_data_len;
   29eb0:	f889 6000 	strb.w	r6, [r9]
}
   29eb4:	b003      	add	sp, #12
   29eb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   29eba:	f7e6 bb7d 	b.w	105b8 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   29ebe:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   29ec2:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   29ec6:	1cb0      	adds	r0, r6, #2
   29ec8:	1811      	adds	r1, r2, r0
   29eca:	291f      	cmp	r1, #31
   29ecc:	d908      	bls.n	29ee0 <hci_set_ad+0x7e>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   29ece:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   29ed2:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   29ed6:	d11f      	bne.n	29f18 <hci_set_ad+0xb6>
   29ed8:	2a00      	cmp	r2, #0
   29eda:	dd1d      	ble.n	29f18 <hci_set_ad+0xb6>
				type = BT_DATA_NAME_SHORTENED;
   29edc:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   29ee0:	b2d7      	uxtb	r7, r2
   29ee2:	1c79      	adds	r1, r7, #1
   29ee4:	f80b 1006 	strb.w	r1, [fp, r6]
   29ee8:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   29eea:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   29eec:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   29ef0:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   29ef4:	f8d8 1004 	ldr.w	r1, [r8, #4]
   29ef8:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   29efa:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   29efc:	f7ff fa23 	bl	29346 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   29f00:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   29f02:	443e      	add	r6, r7
   29f04:	b2f6      	uxtb	r6, r6
		for (size_t j = 0; j < ad[i].len; j++) {
   29f06:	3301      	adds	r3, #1
   29f08:	f108 0808 	add.w	r8, r8, #8
   29f0c:	e7c6      	b.n	29e9c <hci_set_ad+0x3a>
		return -ENOBUFS;
   29f0e:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   29f12:	b003      	add	sp, #12
   29f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_unref(buf);
   29f18:	4628      	mov	r0, r5
   29f1a:	f7f9 fabd 	bl	23498 <net_buf_unref>
		return err;
   29f1e:	f06f 0015 	mvn.w	r0, #21
   29f22:	e7f6      	b.n	29f12 <hci_set_ad+0xb0>

00029f24 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   29f24:	2301      	movs	r3, #1
{
   29f26:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   29f28:	fa03 f101 	lsl.w	r1, r3, r1
{
   29f2c:	4604      	mov	r4, r0
	if (val) {
   29f2e:	b162      	cbz	r2, 29f4a <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29f30:	f3bf 8f5b 	dmb	ish
   29f34:	e854 3f00 	ldrex	r3, [r4]
   29f38:	430b      	orrs	r3, r1
   29f3a:	e844 3200 	strex	r2, r3, [r4]
   29f3e:	2a00      	cmp	r2, #0
   29f40:	d1f8      	bne.n	29f34 <atomic_set_bit_to+0x10>
   29f42:	f3bf 8f5b 	dmb	ish
	}
}
   29f46:	bc10      	pop	{r4}
   29f48:	4770      	bx	lr
   29f4a:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   29f4c:	43c9      	mvns	r1, r1
   29f4e:	f7ff bf79 	b.w	29e44 <atomic_and>

00029f52 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   29f52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29f56:	b087      	sub	sp, #28
   29f58:	4605      	mov	r5, r0
   29f5a:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   29f5e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   29f62:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   29f66:	460c      	mov	r4, r1
   29f68:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   29f6a:	2100      	movs	r1, #0
   29f6c:	2210      	movs	r2, #16
   29f6e:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   29f70:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   29f72:	f7ff f9f3 	bl	2935c <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   29f76:	b186      	cbz	r6, 29f9a <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   29f78:	f7e6 fe08 	bl	10b8c <bt_get_name>
   29f7c:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   29f7e:	2c00      	cmp	r4, #0
   29f80:	d139      	bne.n	29ff6 <le_adv_update.constprop.0+0xa4>
   29f82:	2f00      	cmp	r7, #0
   29f84:	d142      	bne.n	2a00c <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   29f86:	4658      	mov	r0, fp
   29f88:	f7ff f99f 	bl	292ca <strlen>
   29f8c:	2309      	movs	r3, #9
   29f8e:	f88d 3000 	strb.w	r3, [sp]
   29f92:	f88d 0001 	strb.w	r0, [sp, #1]
   29f96:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
   29f9a:	2e01      	cmp	r6, #1
			d_len = 2;
   29f9c:	bf0c      	ite	eq
   29f9e:	2202      	moveq	r2, #2
		d_len = 1;
   29fa0:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   29fa2:	a902      	add	r1, sp, #8
   29fa4:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
   29fa8:	e9cd 4802 	strd	r4, r8, [sp, #8]
			d[1].data = &data;
   29fac:	bf04      	itt	eq
   29fae:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   29fb2:	9605      	streq	r6, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   29fb4:	f7ff ff55 	bl	29e62 <hci_set_ad>
		if (err) {
   29fb8:	4604      	mov	r4, r0
   29fba:	b978      	cbnz	r0, 29fdc <le_adv_update.constprop.0+0x8a>
	if (scannable) {
   29fbc:	f1ba 0f00 	cmp.w	sl, #0
   29fc0:	d126      	bne.n	2a010 <le_adv_update.constprop.0+0xbe>
   29fc2:	3510      	adds	r5, #16
   29fc4:	f3bf 8f5b 	dmb	ish
   29fc8:	e855 3f00 	ldrex	r3, [r5]
   29fcc:	f043 0304 	orr.w	r3, r3, #4
   29fd0:	e845 3200 	strex	r2, r3, [r5]
   29fd4:	2a00      	cmp	r2, #0
   29fd6:	d1f7      	bne.n	29fc8 <le_adv_update.constprop.0+0x76>
   29fd8:	f3bf 8f5b 	dmb	ish
}
   29fdc:	4620      	mov	r0, r4
   29fde:	b007      	add	sp, #28
   29fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   29fe4:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   29fe8:	3a08      	subs	r2, #8
   29fea:	2a01      	cmp	r2, #1
   29fec:	d925      	bls.n	2a03a <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   29fee:	3301      	adds	r3, #1
   29ff0:	4598      	cmp	r8, r3
   29ff2:	d1f7      	bne.n	29fe4 <le_adv_update.constprop.0+0x92>
   29ff4:	e7c5      	b.n	29f82 <le_adv_update.constprop.0+0x30>
   29ff6:	2300      	movs	r3, #0
   29ff8:	e7fa      	b.n	29ff0 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   29ffa:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   29ffe:	3a08      	subs	r2, #8
   2a000:	2a01      	cmp	r2, #1
   2a002:	d91a      	bls.n	2a03a <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   2a004:	3301      	adds	r3, #1
   2a006:	4599      	cmp	r9, r3
   2a008:	d1f7      	bne.n	29ffa <le_adv_update.constprop.0+0xa8>
   2a00a:	e7bc      	b.n	29f86 <le_adv_update.constprop.0+0x34>
   2a00c:	2300      	movs	r3, #0
   2a00e:	e7fa      	b.n	2a006 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   2a010:	2e02      	cmp	r6, #2
   2a012:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   2a016:	bf08      	it	eq
   2a018:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2a01a:	a902      	add	r1, sp, #8
			d_len = 2;
   2a01c:	bf08      	it	eq
   2a01e:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2a020:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   2a024:	bf08      	it	eq
   2a026:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   2a02a:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2a02e:	f7ff ff18 	bl	29e62 <hci_set_ad>
		if (err) {
   2a032:	2800      	cmp	r0, #0
   2a034:	d0c5      	beq.n	29fc2 <le_adv_update.constprop.0+0x70>
   2a036:	4604      	mov	r4, r0
   2a038:	e7d0      	b.n	29fdc <le_adv_update.constprop.0+0x8a>
			return -EINVAL;
   2a03a:	f06f 0415 	mvn.w	r4, #21
   2a03e:	e7cd      	b.n	29fdc <le_adv_update.constprop.0+0x8a>

0002a040 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   2a040:	6843      	ldr	r3, [r0, #4]
   2a042:	f013 0008 	ands.w	r0, r3, #8
   2a046:	d00a      	beq.n	2a05e <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   2a048:	035a      	lsls	r2, r3, #13
   2a04a:	d407      	bmi.n	2a05c <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   2a04c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		return ADV_NAME_TYPE_SD;
   2a050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2a054:	bf0c      	ite	eq
   2a056:	2001      	moveq	r0, #1
   2a058:	2002      	movne	r0, #2
   2a05a:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   2a05c:	2001      	movs	r0, #1
}
   2a05e:	4770      	bx	lr

0002a060 <bt_le_adv_set_enable_legacy>:
{
   2a060:	b570      	push	{r4, r5, r6, lr}
   2a062:	4606      	mov	r6, r0
   2a064:	b086      	sub	sp, #24
   2a066:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2a068:	f242 000a 	movw	r0, #8202	; 0x200a
   2a06c:	2101      	movs	r1, #1
   2a06e:	f7e6 fa47 	bl	10500 <bt_hci_cmd_create>
	if (!buf) {
   2a072:	4604      	mov	r4, r0
   2a074:	b1b0      	cbz	r0, 2a0a4 <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   2a076:	3008      	adds	r0, #8
	if (enable) {
   2a078:	b195      	cbz	r5, 2a0a0 <bt_le_adv_set_enable_legacy+0x40>
   2a07a:	2101      	movs	r1, #1
   2a07c:	f003 f9b8 	bl	2d3f0 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   2a080:	f106 0210 	add.w	r2, r6, #16
   2a084:	a903      	add	r1, sp, #12
   2a086:	4620      	mov	r0, r4
   2a088:	9500      	str	r5, [sp, #0]
   2a08a:	2306      	movs	r3, #6
   2a08c:	f7e6 fa26 	bl	104dc <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   2a090:	2200      	movs	r2, #0
   2a092:	4621      	mov	r1, r4
   2a094:	f242 000a 	movw	r0, #8202	; 0x200a
   2a098:	f7e6 fa8e 	bl	105b8 <bt_hci_cmd_send_sync>
}
   2a09c:	b006      	add	sp, #24
   2a09e:	bd70      	pop	{r4, r5, r6, pc}
   2a0a0:	4629      	mov	r1, r5
   2a0a2:	e7eb      	b.n	2a07c <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   2a0a4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a0a8:	e7f8      	b.n	2a09c <bt_le_adv_set_enable_legacy+0x3c>

0002a0aa <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   2a0aa:	f7ff bfd9 	b.w	2a060 <bt_le_adv_set_enable_legacy>

0002a0ae <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   2a0ae:	3018      	adds	r0, #24
   2a0b0:	f004 bc04 	b.w	2e8bc <k_work_cancel_delayable>

0002a0b4 <adv_timeout>:
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   2a0b4:	f7e7 ba54 	b.w	11560 <bt_le_adv_stop>

0002a0b8 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a0b8:	b510      	push	{r4, lr}
   2a0ba:	4603      	mov	r3, r0
	return list->head;
   2a0bc:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a0be:	2200      	movs	r2, #0
   2a0c0:	b158      	cbz	r0, 2a0da <sys_slist_find_and_remove+0x22>
   2a0c2:	4288      	cmp	r0, r1
   2a0c4:	d10f      	bne.n	2a0e6 <sys_slist_find_and_remove+0x2e>
	return node->next;
   2a0c6:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   2a0c8:	685c      	ldr	r4, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2a0ca:	b93a      	cbnz	r2, 2a0dc <sys_slist_find_and_remove+0x24>
   2a0cc:	42a1      	cmp	r1, r4
	list->head = node;
   2a0ce:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   2a0d0:	d100      	bne.n	2a0d4 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   2a0d2:	6058      	str	r0, [r3, #4]
	parent->next = child;
   2a0d4:	2300      	movs	r3, #0
   2a0d6:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a0d8:	2001      	movs	r0, #1
   2a0da:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   2a0dc:	42a1      	cmp	r1, r4
	parent->next = child;
   2a0de:	6010      	str	r0, [r2, #0]
	list->tail = node;
   2a0e0:	bf08      	it	eq
   2a0e2:	605a      	streq	r2, [r3, #4]
}
   2a0e4:	e7f6      	b.n	2a0d4 <sys_slist_find_and_remove+0x1c>
	return node->next;
   2a0e6:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a0e8:	6800      	ldr	r0, [r0, #0]
   2a0ea:	e7e9      	b.n	2a0c0 <sys_slist_find_and_remove+0x8>

0002a0ec <atomic_and>:
{
   2a0ec:	4603      	mov	r3, r0
}
   2a0ee:	f3bf 8f5b 	dmb	ish
   2a0f2:	e853 0f00 	ldrex	r0, [r3]
   2a0f6:	ea00 0201 	and.w	r2, r0, r1
   2a0fa:	e843 2c00 	strex	ip, r2, [r3]
   2a0fe:	f1bc 0f00 	cmp.w	ip, #0
   2a102:	d1f6      	bne.n	2a0f2 <atomic_and+0x6>
   2a104:	f3bf 8f5b 	dmb	ish
   2a108:	4770      	bx	lr

0002a10a <tx_notify>:
{
   2a10a:	b570      	push	{r4, r5, r6, lr}
   2a10c:	4604      	mov	r4, r0
	__asm__ volatile(
   2a10e:	f04f 0220 	mov.w	r2, #32
   2a112:	f3ef 8311 	mrs	r3, BASEPRI
   2a116:	f382 8812 	msr	BASEPRI_MAX, r2
   2a11a:	f3bf 8f6f 	isb	sy
	return list->head;
   2a11e:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   2a120:	b920      	cbnz	r0, 2a12c <tx_notify+0x22>
	__asm__ volatile(
   2a122:	f383 8811 	msr	BASEPRI, r3
   2a126:	f3bf 8f6f 	isb	sy
}
   2a12a:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2a12c:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   2a12e:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2a130:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2a132:	4288      	cmp	r0, r1
	list->tail = node;
   2a134:	bf08      	it	eq
   2a136:	6262      	streq	r2, [r4, #36]	; 0x24
   2a138:	f383 8811 	msr	BASEPRI, r3
   2a13c:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   2a140:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   2a144:	f7e7 fbd0 	bl	118e8 <tx_free>
		cb(conn, user_data);
   2a148:	4631      	mov	r1, r6
   2a14a:	4620      	mov	r0, r4
   2a14c:	47a8      	blx	r5
	while (1) {
   2a14e:	e7de      	b.n	2a10e <tx_notify+0x4>

0002a150 <tx_complete_work>:
	tx_notify(conn);
   2a150:	3828      	subs	r0, #40	; 0x28
   2a152:	f7ff bfda 	b.w	2a10a <tx_notify>

0002a156 <bt_conn_reset_rx_state>:
{
   2a156:	b510      	push	{r4, lr}
   2a158:	4604      	mov	r4, r0
	if (!conn->rx) {
   2a15a:	6900      	ldr	r0, [r0, #16]
   2a15c:	b118      	cbz	r0, 2a166 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2a15e:	f7f9 f99b 	bl	23498 <net_buf_unref>
	conn->rx = NULL;
   2a162:	2300      	movs	r3, #0
   2a164:	6123      	str	r3, [r4, #16]
}
   2a166:	bd10      	pop	{r4, pc}

0002a168 <conn_cleanup>:
{
   2a168:	b570      	push	{r4, r5, r6, lr}
   2a16a:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   2a16c:	f100 0638 	add.w	r6, r0, #56	; 0x38
   2a170:	2200      	movs	r2, #0
   2a172:	2300      	movs	r3, #0
   2a174:	4630      	mov	r0, r6
   2a176:	f003 f8cf 	bl	2d318 <net_buf_get>
   2a17a:	4605      	mov	r5, r0
   2a17c:	b950      	cbnz	r0, 2a194 <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   2a17e:	4620      	mov	r0, r4
   2a180:	f7ff ffe9 	bl	2a156 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2a184:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2a188:	2200      	movs	r2, #0
}
   2a18a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2a18e:	2300      	movs	r3, #0
   2a190:	f7fb bffa 	b.w	26188 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   2a194:	6968      	ldr	r0, [r5, #20]
   2a196:	b108      	cbz	r0, 2a19c <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   2a198:	f7e7 fba6 	bl	118e8 <tx_free>
		net_buf_unref(buf);
   2a19c:	4628      	mov	r0, r5
   2a19e:	f7f9 f97b 	bl	23498 <net_buf_unref>
   2a1a2:	e7e5      	b.n	2a170 <conn_cleanup+0x8>

0002a1a4 <bt_conn_recv>:
{
   2a1a4:	b570      	push	{r4, r5, r6, lr}
   2a1a6:	4616      	mov	r6, r2
   2a1a8:	4604      	mov	r4, r0
   2a1aa:	460d      	mov	r5, r1
	tx_notify(conn);
   2a1ac:	f7ff ffad 	bl	2a10a <tx_notify>
	switch (flags) {
   2a1b0:	2e01      	cmp	r6, #1
   2a1b2:	d017      	beq.n	2a1e4 <bt_conn_recv+0x40>
   2a1b4:	2e02      	cmp	r6, #2
   2a1b6:	d117      	bne.n	2a1e8 <bt_conn_recv+0x44>
		if (conn->rx) {
   2a1b8:	6923      	ldr	r3, [r4, #16]
   2a1ba:	b113      	cbz	r3, 2a1c2 <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   2a1bc:	4620      	mov	r0, r4
   2a1be:	f7ff ffca 	bl	2a156 <bt_conn_reset_rx_state>
		conn->rx = buf;
   2a1c2:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   2a1c4:	6921      	ldr	r1, [r4, #16]
   2a1c6:	898a      	ldrh	r2, [r1, #12]
   2a1c8:	2a01      	cmp	r2, #1
   2a1ca:	d937      	bls.n	2a23c <bt_conn_recv+0x98>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   2a1cc:	688b      	ldr	r3, [r1, #8]
   2a1ce:	881b      	ldrh	r3, [r3, #0]
   2a1d0:	3304      	adds	r3, #4
   2a1d2:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   2a1d4:	429a      	cmp	r2, r3
   2a1d6:	d331      	bcc.n	2a23c <bt_conn_recv+0x98>
	if (conn->rx->len > acl_total_len) {
   2a1d8:	d928      	bls.n	2a22c <bt_conn_recv+0x88>
		bt_conn_reset_rx_state(conn);
   2a1da:	4620      	mov	r0, r4
}
   2a1dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   2a1e0:	f7ff bfb9 	b.w	2a156 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   2a1e4:	6920      	ldr	r0, [r4, #16]
   2a1e6:	b918      	cbnz	r0, 2a1f0 <bt_conn_recv+0x4c>
		bt_conn_reset_rx_state(conn);
   2a1e8:	4620      	mov	r0, r4
   2a1ea:	f7ff ffb4 	bl	2a156 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   2a1ee:	e001      	b.n	2a1f4 <bt_conn_recv+0x50>
		if (!buf->len) {
   2a1f0:	89ae      	ldrh	r6, [r5, #12]
   2a1f2:	b926      	cbnz	r6, 2a1fe <bt_conn_recv+0x5a>
			net_buf_unref(buf);
   2a1f4:	4628      	mov	r0, r5
}
   2a1f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   2a1fa:	f7f9 b94d 	b.w	23498 <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   2a1fe:	3008      	adds	r0, #8
   2a200:	f003 f922 	bl	2d448 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   2a204:	4286      	cmp	r6, r0
   2a206:	d907      	bls.n	2a218 <bt_conn_recv+0x74>
			bt_l2cap_recv(conn, conn->rx, false);
   2a208:	6921      	ldr	r1, [r4, #16]
   2a20a:	2200      	movs	r2, #0
   2a20c:	4620      	mov	r0, r4
   2a20e:	f000 f9ff 	bl	2a610 <bt_l2cap_recv>
			conn->rx = NULL;
   2a212:	2300      	movs	r3, #0
   2a214:	6123      	str	r3, [r4, #16]
   2a216:	e7ed      	b.n	2a1f4 <bt_conn_recv+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2a218:	6920      	ldr	r0, [r4, #16]
   2a21a:	89aa      	ldrh	r2, [r5, #12]
   2a21c:	68a9      	ldr	r1, [r5, #8]
   2a21e:	3008      	adds	r0, #8
   2a220:	f003 f8dd 	bl	2d3de <net_buf_simple_add_mem>
		net_buf_unref(buf);
   2a224:	4628      	mov	r0, r5
   2a226:	f7f9 f937 	bl	23498 <net_buf_unref>
		break;
   2a22a:	e7cb      	b.n	2a1c4 <bt_conn_recv+0x20>
	conn->rx = NULL;
   2a22c:	2300      	movs	r3, #0
   2a22e:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   2a230:	4620      	mov	r0, r4
   2a232:	2201      	movs	r2, #1
}
   2a234:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   2a238:	f000 b9ea 	b.w	2a610 <bt_l2cap_recv>
}
   2a23c:	bd70      	pop	{r4, r5, r6, pc}

0002a23e <bt_conn_ref>:
{
   2a23e:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   2a240:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a244:	f3bf 8f5b 	dmb	ish
   2a248:	6813      	ldr	r3, [r2, #0]
   2a24a:	f3bf 8f5b 	dmb	ish
		if (!old) {
   2a24e:	b17b      	cbz	r3, 2a270 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2a250:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   2a254:	1c59      	adds	r1, r3, #1
   2a256:	e852 4f00 	ldrex	r4, [r2]
   2a25a:	429c      	cmp	r4, r3
   2a25c:	d104      	bne.n	2a268 <bt_conn_ref+0x2a>
   2a25e:	e842 1c00 	strex	ip, r1, [r2]
   2a262:	f1bc 0f00 	cmp.w	ip, #0
   2a266:	d1f6      	bne.n	2a256 <bt_conn_ref+0x18>
   2a268:	f3bf 8f5b 	dmb	ish
   2a26c:	d1ea      	bne.n	2a244 <bt_conn_ref+0x6>
}
   2a26e:	bd10      	pop	{r4, pc}
			return NULL;
   2a270:	4618      	mov	r0, r3
   2a272:	e7fc      	b.n	2a26e <bt_conn_ref+0x30>

0002a274 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   2a274:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2a278:	f3bf 8f5b 	dmb	ish
   2a27c:	e853 2f00 	ldrex	r2, [r3]
   2a280:	3a01      	subs	r2, #1
   2a282:	e843 2100 	strex	r1, r2, [r3]
   2a286:	2900      	cmp	r1, #0
   2a288:	d1f8      	bne.n	2a27c <bt_conn_unref+0x8>
   2a28a:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   2a28e:	7883      	ldrb	r3, [r0, #2]
   2a290:	2b01      	cmp	r3, #1
   2a292:	d108      	bne.n	2a2a6 <bt_conn_unref+0x32>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a294:	f3bf 8f5b 	dmb	ish
   2a298:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   2a29c:	f3bf 8f5b 	dmb	ish
   2a2a0:	b90b      	cbnz	r3, 2a2a6 <bt_conn_unref+0x32>
		bt_le_adv_resume();
   2a2a2:	f7e7 b9ad 	b.w	11600 <bt_le_adv_resume>
}
   2a2a6:	4770      	bx	lr

0002a2a8 <conn_lookup_handle>:
{
   2a2a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a2ac:	4607      	mov	r7, r0
   2a2ae:	460e      	mov	r6, r1
   2a2b0:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   2a2b2:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2a2b4:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   2a2b8:	42b4      	cmp	r4, r6
   2a2ba:	d103      	bne.n	2a2c4 <conn_lookup_handle+0x1c>
	return NULL;
   2a2bc:	2300      	movs	r3, #0
}
   2a2be:	4618      	mov	r0, r3
   2a2c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2a2c4:	fb09 7004 	mla	r0, r9, r4, r7
   2a2c8:	f7ff ffb9 	bl	2a23e <bt_conn_ref>
   2a2cc:	4603      	mov	r3, r0
		if (!conn) {
   2a2ce:	b158      	cbz	r0, 2a2e8 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   2a2d0:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2a2d2:	2d01      	cmp	r5, #1
   2a2d4:	d002      	beq.n	2a2dc <conn_lookup_handle+0x34>
   2a2d6:	3d07      	subs	r5, #7
   2a2d8:	2d01      	cmp	r5, #1
   2a2da:	d803      	bhi.n	2a2e4 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   2a2dc:	881a      	ldrh	r2, [r3, #0]
   2a2de:	4542      	cmp	r2, r8
   2a2e0:	d0ed      	beq.n	2a2be <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   2a2e2:	4618      	mov	r0, r3
   2a2e4:	f7ff ffc6 	bl	2a274 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2a2e8:	3401      	adds	r4, #1
   2a2ea:	e7e5      	b.n	2a2b8 <conn_lookup_handle+0x10>

0002a2ec <bt_conn_connected>:
{
   2a2ec:	b510      	push	{r4, lr}
   2a2ee:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2a2f0:	f7e7 ffa2 	bl	12238 <bt_l2cap_connected>
	notify_connected(conn);
   2a2f4:	4620      	mov	r0, r4
}
   2a2f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   2a2fa:	f7e7 bad7 	b.w	118ac <notify_connected>

0002a2fe <bt_conn_disconnect>:
{
   2a2fe:	b538      	push	{r3, r4, r5, lr}
	switch (conn->state) {
   2a300:	7b43      	ldrb	r3, [r0, #13]
   2a302:	3b02      	subs	r3, #2
{
   2a304:	4604      	mov	r4, r0
	switch (conn->state) {
   2a306:	2b06      	cmp	r3, #6
   2a308:	d805      	bhi.n	2a316 <bt_conn_disconnect+0x18>
   2a30a:	e8df f003 	tbb	[pc, r3]
   2a30e:	0408      	.short	0x0408
   2a310:	0e0c0404 	.word	0x0e0c0404
   2a314:	0c          	.byte	0x0c
   2a315:	00          	.byte	0x00
   2a316:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   2a31a:	4628      	mov	r0, r5
   2a31c:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   2a31e:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2a320:	2100      	movs	r1, #0
   2a322:	f7e7 fc0d 	bl	11b40 <bt_conn_set_state>
		return 0;
   2a326:	2500      	movs	r5, #0
   2a328:	e7f7      	b.n	2a31a <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   2a32a:	8800      	ldrh	r0, [r0, #0]
   2a32c:	f7ff fb5c 	bl	299e8 <bt_hci_disconnect>
	if (err) {
   2a330:	4605      	mov	r5, r0
   2a332:	2800      	cmp	r0, #0
   2a334:	d1f1      	bne.n	2a31a <bt_conn_disconnect+0x1c>
	if (conn->state == BT_CONN_CONNECTED) {
   2a336:	7b63      	ldrb	r3, [r4, #13]
   2a338:	2b07      	cmp	r3, #7
   2a33a:	d1ee      	bne.n	2a31a <bt_conn_disconnect+0x1c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   2a33c:	2108      	movs	r1, #8
   2a33e:	4620      	mov	r0, r4
   2a340:	f7e7 fbfe 	bl	11b40 <bt_conn_set_state>
   2a344:	e7e9      	b.n	2a31a <bt_conn_disconnect+0x1c>

0002a346 <bt_conn_set_security>:
{
   2a346:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2a348:	7b43      	ldrb	r3, [r0, #13]
   2a34a:	2b07      	cmp	r3, #7
{
   2a34c:	4604      	mov	r4, r0
   2a34e:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   2a350:	d124      	bne.n	2a39c <bt_conn_set_security+0x56>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   2a352:	7a43      	ldrb	r3, [r0, #9]
   2a354:	428b      	cmp	r3, r1
   2a356:	d224      	bcs.n	2a3a2 <bt_conn_set_security+0x5c>
   2a358:	7a83      	ldrb	r3, [r0, #10]
   2a35a:	428b      	cmp	r3, r1
   2a35c:	d221      	bcs.n	2a3a2 <bt_conn_set_security+0x5c>
	if (val) {
   2a35e:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   2a360:	f100 0004 	add.w	r0, r0, #4
   2a364:	d515      	bpl.n	2a392 <bt_conn_set_security+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a366:	f3bf 8f5b 	dmb	ish
   2a36a:	e850 3f00 	ldrex	r3, [r0]
   2a36e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   2a372:	e840 3200 	strex	r2, r3, [r0]
   2a376:	2a00      	cmp	r2, #0
   2a378:	d1f7      	bne.n	2a36a <bt_conn_set_security+0x24>
   2a37a:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2a37e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   2a382:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   2a384:	4620      	mov	r0, r4
   2a386:	f7ea fb61 	bl	14a4c <bt_smp_start_security>
	if (err) {
   2a38a:	b108      	cbz	r0, 2a390 <bt_conn_set_security+0x4a>
		conn->required_sec_level = conn->sec_level;
   2a38c:	7a63      	ldrb	r3, [r4, #9]
   2a38e:	72a3      	strb	r3, [r4, #10]
}
   2a390:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2a392:	f46f 6180 	mvn.w	r1, #1024	; 0x400
   2a396:	f7ff fea9 	bl	2a0ec <atomic_and>
   2a39a:	e7f0      	b.n	2a37e <bt_conn_set_security+0x38>
		return -ENOTCONN;
   2a39c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2a3a0:	e7f6      	b.n	2a390 <bt_conn_set_security+0x4a>
		return 0;
   2a3a2:	2000      	movs	r0, #0
   2a3a4:	e7f4      	b.n	2a390 <bt_conn_set_security+0x4a>

0002a3a6 <bt_conn_get_security>:
}
   2a3a6:	7a40      	ldrb	r0, [r0, #9]
   2a3a8:	4770      	bx	lr

0002a3aa <bt_conn_is_peer_addr_le>:
{
   2a3aa:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2a3ac:	7a03      	ldrb	r3, [r0, #8]
   2a3ae:	428b      	cmp	r3, r1
{
   2a3b0:	4604      	mov	r4, r0
   2a3b2:	4615      	mov	r5, r2
	if (id != conn->id) {
   2a3b4:	d115      	bne.n	2a3e2 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2a3b6:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2a3ba:	2207      	movs	r2, #7
   2a3bc:	4628      	mov	r0, r5
   2a3be:	f7fe ffb1 	bl	29324 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   2a3c2:	b180      	cbz	r0, 2a3e6 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2a3c4:	78e3      	ldrb	r3, [r4, #3]
   2a3c6:	2207      	movs	r2, #7
   2a3c8:	b943      	cbnz	r3, 2a3dc <bt_conn_is_peer_addr_le+0x32>
   2a3ca:	f104 0196 	add.w	r1, r4, #150	; 0x96
   2a3ce:	4628      	mov	r0, r5
   2a3d0:	f7fe ffa8 	bl	29324 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   2a3d4:	fab0 f080 	clz	r0, r0
   2a3d8:	0940      	lsrs	r0, r0, #5
}
   2a3da:	bd38      	pop	{r3, r4, r5, pc}
   2a3dc:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   2a3e0:	e7f5      	b.n	2a3ce <bt_conn_is_peer_addr_le+0x24>
		return false;
   2a3e2:	2000      	movs	r0, #0
   2a3e4:	e7f9      	b.n	2a3da <bt_conn_is_peer_addr_le+0x30>
		return true;
   2a3e6:	2001      	movs	r0, #1
   2a3e8:	e7f7      	b.n	2a3da <bt_conn_is_peer_addr_le+0x30>

0002a3ea <bt_conn_exists_le>:
{
   2a3ea:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   2a3ec:	f7e7 fd64 	bl	11eb8 <bt_conn_lookup_addr_le>
	if (conn) {
   2a3f0:	b110      	cbz	r0, 2a3f8 <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   2a3f2:	f7ff ff3f 	bl	2a274 <bt_conn_unref>
		return true;
   2a3f6:	2001      	movs	r0, #1
}
   2a3f8:	bd08      	pop	{r3, pc}

0002a3fa <bt_conn_le_conn_update>:
{
   2a3fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a3fc:	4607      	mov	r7, r0
   2a3fe:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2a400:	f242 0013 	movw	r0, #8211	; 0x2013
   2a404:	210e      	movs	r1, #14
   2a406:	f7e6 f87b 	bl	10500 <bt_hci_cmd_create>
	if (!buf) {
   2a40a:	4606      	mov	r6, r0
   2a40c:	b1d0      	cbz	r0, 2a444 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   2a40e:	210e      	movs	r1, #14
   2a410:	3008      	adds	r0, #8
   2a412:	f002 ffde 	bl	2d3d2 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   2a416:	220e      	movs	r2, #14
   2a418:	4604      	mov	r4, r0
   2a41a:	2100      	movs	r1, #0
   2a41c:	f7fe ff9e 	bl	2935c <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2a420:	883b      	ldrh	r3, [r7, #0]
   2a422:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2a424:	882b      	ldrh	r3, [r5, #0]
   2a426:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2a428:	886b      	ldrh	r3, [r5, #2]
   2a42a:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2a42c:	88ab      	ldrh	r3, [r5, #4]
   2a42e:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2a430:	88eb      	ldrh	r3, [r5, #6]
   2a432:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2a434:	4631      	mov	r1, r6
   2a436:	2200      	movs	r2, #0
}
   2a438:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2a43c:	f242 0013 	movw	r0, #8211	; 0x2013
   2a440:	f7e6 b8ba 	b.w	105b8 <bt_hci_cmd_send_sync>
}
   2a444:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a44a <l2cap_connected>:
}
   2a44a:	4770      	bx	lr

0002a44c <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   2a44c:	3010      	adds	r0, #16
   2a44e:	f004 ba35 	b.w	2e8bc <k_work_cancel_delayable>

0002a452 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   2a452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a454:	4607      	mov	r7, r0
   2a456:	460e      	mov	r6, r1
   2a458:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   2a45a:	2300      	movs	r3, #0
   2a45c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2a460:	2104      	movs	r1, #4
   2a462:	2000      	movs	r0, #0
   2a464:	f7e7 fc20 	bl	11ca8 <bt_conn_create_pdu_timeout>
	if (!buf) {
   2a468:	4604      	mov	r4, r0
   2a46a:	b130      	cbz	r0, 2a47a <l2cap_create_le_sig_pdu.constprop.0+0x28>
   2a46c:	2104      	movs	r1, #4
   2a46e:	3008      	adds	r0, #8
   2a470:	f002 ffaf 	bl	2d3d2 <net_buf_simple_add>
	hdr->code = code;
   2a474:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   2a476:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   2a478:	8045      	strh	r5, [r0, #2]
}
   2a47a:	4620      	mov	r0, r4
   2a47c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a47e <bt_l2cap_chan_remove>:
	return list->head;
   2a47e:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   2a480:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2a482:	b173      	cbz	r3, 2a4a2 <bt_l2cap_chan_remove+0x24>
   2a484:	3b08      	subs	r3, #8
   2a486:	2500      	movs	r5, #0
	return node->next;
   2a488:	461a      	mov	r2, r3
		if (chan == ch) {
   2a48a:	4299      	cmp	r1, r3
   2a48c:	f852 4f08 	ldr.w	r4, [r2, #8]!
   2a490:	d10d      	bne.n	2a4ae <bt_l2cap_chan_remove+0x30>
	return list->tail;
   2a492:	6d41      	ldr	r1, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   2a494:	b935      	cbnz	r5, 2a4a4 <bt_l2cap_chan_remove+0x26>
   2a496:	4291      	cmp	r1, r2
	list->head = node;
   2a498:	6504      	str	r4, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   2a49a:	d100      	bne.n	2a49e <bt_l2cap_chan_remove+0x20>
	list->tail = node;
   2a49c:	6544      	str	r4, [r0, #84]	; 0x54
	parent->next = child;
   2a49e:	2200      	movs	r2, #0
   2a4a0:	609a      	str	r2, [r3, #8]
}
   2a4a2:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   2a4a4:	4291      	cmp	r1, r2
	parent->next = child;
   2a4a6:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2a4a8:	bf08      	it	eq
   2a4aa:	6545      	streq	r5, [r0, #84]	; 0x54
}
   2a4ac:	e7f7      	b.n	2a49e <bt_l2cap_chan_remove+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2a4ae:	2c00      	cmp	r4, #0
   2a4b0:	d0f7      	beq.n	2a4a2 <bt_l2cap_chan_remove+0x24>
   2a4b2:	f1a4 0308 	sub.w	r3, r4, #8
			sys_slist_remove(&conn->channels, prev, &chan->node);
   2a4b6:	4615      	mov	r5, r2
   2a4b8:	e7e6      	b.n	2a488 <bt_l2cap_chan_remove+0xa>

0002a4ba <bt_l2cap_chan_del>:
{
   2a4ba:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   2a4bc:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   2a4c0:	4604      	mov	r4, r0
	if (!chan->conn) {
   2a4c2:	b123      	cbz	r3, 2a4ce <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2a4c4:	686b      	ldr	r3, [r5, #4]
   2a4c6:	b103      	cbz	r3, 2a4ca <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2a4c8:	4798      	blx	r3
	chan->conn = NULL;
   2a4ca:	2300      	movs	r3, #0
   2a4cc:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2a4ce:	68e3      	ldr	r3, [r4, #12]
   2a4d0:	b10b      	cbz	r3, 2a4d6 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2a4d2:	4620      	mov	r0, r4
   2a4d4:	4798      	blx	r3
	if (ops->released) {
   2a4d6:	69eb      	ldr	r3, [r5, #28]
   2a4d8:	b11b      	cbz	r3, 2a4e2 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   2a4da:	4620      	mov	r0, r4
}
   2a4dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2a4e0:	4718      	bx	r3
}
   2a4e2:	bd70      	pop	{r4, r5, r6, pc}

0002a4e4 <l2cap_rtx_timeout>:
{
   2a4e4:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(conn, &chan->chan);
   2a4e6:	f1a0 0410 	sub.w	r4, r0, #16
   2a4ea:	4621      	mov	r1, r4
   2a4ec:	f850 0c10 	ldr.w	r0, [r0, #-16]
   2a4f0:	f7ff ffc5 	bl	2a47e <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   2a4f4:	4620      	mov	r0, r4
}
   2a4f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_l2cap_chan_del(&chan->chan);
   2a4fa:	f7ff bfde 	b.w	2a4ba <bt_l2cap_chan_del>

0002a4fe <bt_l2cap_disconnected>:
	return list->head;
   2a4fe:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   2a500:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2a502:	b160      	cbz	r0, 2a51e <bt_l2cap_disconnected+0x20>
	return node->next;
   2a504:	f850 4908 	ldr.w	r4, [r0], #-8
   2a508:	b104      	cbz	r4, 2a50c <bt_l2cap_disconnected+0xe>
   2a50a:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   2a50c:	f7ff ffd5 	bl	2a4ba <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2a510:	b12c      	cbz	r4, 2a51e <bt_l2cap_disconnected+0x20>
   2a512:	68a3      	ldr	r3, [r4, #8]
   2a514:	b103      	cbz	r3, 2a518 <bt_l2cap_disconnected+0x1a>
   2a516:	3b08      	subs	r3, #8
{
   2a518:	4620      	mov	r0, r4
   2a51a:	461c      	mov	r4, r3
   2a51c:	e7f6      	b.n	2a50c <bt_l2cap_disconnected+0xe>
}
   2a51e:	bd10      	pop	{r4, pc}

0002a520 <bt_l2cap_security_changed>:
	return list->head;
   2a520:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   2a522:	b538      	push	{r3, r4, r5, lr}
   2a524:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2a526:	b178      	cbz	r0, 2a548 <bt_l2cap_security_changed+0x28>
	return node->next;
   2a528:	f850 4908 	ldr.w	r4, [r0], #-8
   2a52c:	b104      	cbz	r4, 2a530 <bt_l2cap_security_changed+0x10>
   2a52e:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   2a530:	6843      	ldr	r3, [r0, #4]
   2a532:	689b      	ldr	r3, [r3, #8]
   2a534:	b10b      	cbz	r3, 2a53a <bt_l2cap_security_changed+0x1a>
			chan->ops->encrypt_change(chan, hci_status);
   2a536:	4629      	mov	r1, r5
   2a538:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2a53a:	b12c      	cbz	r4, 2a548 <bt_l2cap_security_changed+0x28>
   2a53c:	68a3      	ldr	r3, [r4, #8]
   2a53e:	b103      	cbz	r3, 2a542 <bt_l2cap_security_changed+0x22>
   2a540:	3b08      	subs	r3, #8
{
   2a542:	4620      	mov	r0, r4
   2a544:	461c      	mov	r4, r3
   2a546:	e7f3      	b.n	2a530 <bt_l2cap_security_changed+0x10>
}
   2a548:	bd38      	pop	{r3, r4, r5, pc}

0002a54a <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   2a54a:	3104      	adds	r1, #4
   2a54c:	f7e7 bbac 	b.w	11ca8 <bt_conn_create_pdu_timeout>

0002a550 <bt_l2cap_send_cb>:
{
   2a550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a554:	4614      	mov	r4, r2
   2a556:	4605      	mov	r5, r0
   2a558:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   2a55a:	f102 0008 	add.w	r0, r2, #8
   2a55e:	2104      	movs	r1, #4
   2a560:	461e      	mov	r6, r3
   2a562:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2a566:	f002 ff4b 	bl	2d400 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2a56a:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   2a56c:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2a56e:	3a04      	subs	r2, #4
   2a570:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2a572:	4643      	mov	r3, r8
   2a574:	4632      	mov	r2, r6
   2a576:	4621      	mov	r1, r4
   2a578:	4628      	mov	r0, r5
}
   2a57a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2a57e:	f7e7 ba6b 	b.w	11a58 <bt_conn_send_cb>

0002a582 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   2a582:	898b      	ldrh	r3, [r1, #12]
   2a584:	2b03      	cmp	r3, #3
{
   2a586:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2a588:	4605      	mov	r5, r0
   2a58a:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   2a58c:	d927      	bls.n	2a5de <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   2a58e:	2104      	movs	r1, #4
   2a590:	f104 0008 	add.w	r0, r4, #8
   2a594:	f002 ff44 	bl	2d420 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   2a598:	89a3      	ldrh	r3, [r4, #12]
   2a59a:	8842      	ldrh	r2, [r0, #2]
   2a59c:	429a      	cmp	r2, r3
   2a59e:	d11e      	bne.n	2a5de <l2cap_recv+0x5c>
	if (!hdr->ident) {
   2a5a0:	7841      	ldrb	r1, [r0, #1]
   2a5a2:	b1e1      	cbz	r1, 2a5de <l2cap_recv+0x5c>
	switch (hdr->code) {
   2a5a4:	7803      	ldrb	r3, [r0, #0]
   2a5a6:	2b01      	cmp	r3, #1
   2a5a8:	d019      	beq.n	2a5de <l2cap_recv+0x5c>
   2a5aa:	2b13      	cmp	r3, #19
   2a5ac:	d017      	beq.n	2a5de <l2cap_recv+0x5c>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2a5ae:	2202      	movs	r2, #2
   2a5b0:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   2a5b2:	682d      	ldr	r5, [r5, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2a5b4:	f7ff ff4d 	bl	2a452 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   2a5b8:	4604      	mov	r4, r0
   2a5ba:	b180      	cbz	r0, 2a5de <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   2a5bc:	2102      	movs	r1, #2
   2a5be:	3008      	adds	r0, #8
   2a5c0:	f002 ff07 	bl	2d3d2 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   2a5c4:	2300      	movs	r3, #0
   2a5c6:	7003      	strb	r3, [r0, #0]
   2a5c8:	7043      	strb	r3, [r0, #1]
   2a5ca:	4622      	mov	r2, r4
   2a5cc:	9300      	str	r3, [sp, #0]
   2a5ce:	2105      	movs	r1, #5
   2a5d0:	4628      	mov	r0, r5
   2a5d2:	f7ff ffbd 	bl	2a550 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   2a5d6:	b110      	cbz	r0, 2a5de <l2cap_recv+0x5c>
		net_buf_unref(buf);
   2a5d8:	4620      	mov	r0, r4
   2a5da:	f7f8 ff5d 	bl	23498 <net_buf_unref>
}
   2a5de:	2000      	movs	r0, #0
   2a5e0:	b003      	add	sp, #12
   2a5e2:	bd30      	pop	{r4, r5, pc}

0002a5e4 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   2a5e4:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2a5e6:	b138      	cbz	r0, 2a5f8 <bt_l2cap_le_lookup_tx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2a5e8:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
   2a5ec:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2a5ee:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2a5f2:	d001      	beq.n	2a5f8 <bt_l2cap_le_lookup_tx_cid+0x14>
	return node->next;
   2a5f4:	6880      	ldr	r0, [r0, #8]
   2a5f6:	e7f6      	b.n	2a5e6 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   2a5f8:	4770      	bx	lr

0002a5fa <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2a5fa:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2a5fc:	b138      	cbz	r0, 2a60e <bt_l2cap_le_lookup_rx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2a5fe:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
   2a602:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2a604:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2a608:	d001      	beq.n	2a60e <bt_l2cap_le_lookup_rx_cid+0x14>
	return node->next;
   2a60a:	6880      	ldr	r0, [r0, #8]
   2a60c:	e7f6      	b.n	2a5fc <bt_l2cap_le_lookup_rx_cid+0x2>
}
   2a60e:	4770      	bx	lr

0002a610 <bt_l2cap_recv>:
{
   2a610:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   2a612:	898b      	ldrh	r3, [r1, #12]
   2a614:	2b03      	cmp	r3, #3
{
   2a616:	4605      	mov	r5, r0
   2a618:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   2a61a:	d804      	bhi.n	2a626 <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   2a61c:	4620      	mov	r0, r4
}
   2a61e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   2a622:	f7f8 bf39 	b.w	23498 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   2a626:	2104      	movs	r1, #4
   2a628:	f104 0008 	add.w	r0, r4, #8
   2a62c:	f002 fef8 	bl	2d420 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   2a630:	8841      	ldrh	r1, [r0, #2]
   2a632:	4628      	mov	r0, r5
   2a634:	f7ff ffe1 	bl	2a5fa <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   2a638:	2800      	cmp	r0, #0
   2a63a:	d0ef      	beq.n	2a61c <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   2a63c:	6843      	ldr	r3, [r0, #4]
   2a63e:	4621      	mov	r1, r4
   2a640:	691b      	ldr	r3, [r3, #16]
   2a642:	4798      	blx	r3
   2a644:	e7ea      	b.n	2a61c <bt_l2cap_recv+0xc>

0002a646 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   2a646:	4770      	bx	lr

0002a648 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2a648:	4603      	mov	r3, r0
	return list->head;
   2a64a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2a64c:	b128      	cbz	r0, 2a65a <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2a64e:	6859      	ldr	r1, [r3, #4]
	return node->next;
   2a650:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2a652:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2a654:	4288      	cmp	r0, r1
	list->tail = node;
   2a656:	bf08      	it	eq
   2a658:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2a65a:	4770      	bx	lr

0002a65c <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   2a65c:	4603      	mov	r3, r0
	size_t bytes = 0;
   2a65e:	2000      	movs	r0, #0

	while (buf) {
   2a660:	b903      	cbnz	r3, 2a664 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   2a662:	4770      	bx	lr
		bytes += buf->len;
   2a664:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   2a666:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   2a668:	4410      	add	r0, r2
		buf = buf->frags;
   2a66a:	e7f9      	b.n	2a660 <net_buf_frags_len+0x4>

0002a66c <att_sent>:
	if (chan->ops->sent) {
   2a66c:	684b      	ldr	r3, [r1, #4]
   2a66e:	695b      	ldr	r3, [r3, #20]
{
   2a670:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   2a672:	b103      	cbz	r3, 2a676 <att_sent+0xa>
		chan->ops->sent(chan);
   2a674:	4718      	bx	r3
}
   2a676:	4770      	bx	lr

0002a678 <attr_read_type_cb>:
{
   2a678:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2a67a:	68d4      	ldr	r4, [r2, #12]
   2a67c:	7823      	ldrb	r3, [r4, #0]
   2a67e:	3102      	adds	r1, #2
   2a680:	b913      	cbnz	r3, 2a688 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2a682:	7021      	strb	r1, [r4, #0]
	return true;
   2a684:	2001      	movs	r0, #1
   2a686:	e006      	b.n	2a696 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2a688:	428b      	cmp	r3, r1
   2a68a:	d0fb      	beq.n	2a684 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   2a68c:	8983      	ldrh	r3, [r0, #12]
   2a68e:	3b02      	subs	r3, #2
   2a690:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   2a692:	2000      	movs	r0, #0
   2a694:	6110      	str	r0, [r2, #16]
}
   2a696:	bd10      	pop	{r4, pc}

0002a698 <att_prepare_write_req>:
}
   2a698:	2006      	movs	r0, #6
   2a69a:	4770      	bx	lr

0002a69c <att_op_get_type>:
	switch (op) {
   2a69c:	2852      	cmp	r0, #82	; 0x52
   2a69e:	d830      	bhi.n	2a702 <att_op_get_type+0x66>
   2a6a0:	b388      	cbz	r0, 2a706 <att_op_get_type+0x6a>
   2a6a2:	1e43      	subs	r3, r0, #1
   2a6a4:	2b51      	cmp	r3, #81	; 0x51
   2a6a6:	d82e      	bhi.n	2a706 <att_op_get_type+0x6a>
   2a6a8:	e8df f003 	tbb	[pc, r3]
   2a6ac:	39333933 	.word	0x39333933
   2a6b0:	39333933 	.word	0x39333933
   2a6b4:	39333933 	.word	0x39333933
   2a6b8:	39333933 	.word	0x39333933
   2a6bc:	2d333933 	.word	0x2d333933
   2a6c0:	3933392d 	.word	0x3933392d
   2a6c4:	2d352d33 	.word	0x2d352d33
   2a6c8:	392d2937 	.word	0x392d2937
   2a6cc:	2d352d33 	.word	0x2d352d33
   2a6d0:	2d2d2d2d 	.word	0x2d2d2d2d
   2a6d4:	2d2d2d2d 	.word	0x2d2d2d2d
   2a6d8:	2d2d2d2d 	.word	0x2d2d2d2d
   2a6dc:	2d2d2d2d 	.word	0x2d2d2d2d
   2a6e0:	2d2d2d2d 	.word	0x2d2d2d2d
   2a6e4:	2d2d2d2d 	.word	0x2d2d2d2d
   2a6e8:	2d2d2d2d 	.word	0x2d2d2d2d
   2a6ec:	2d2d2d2d 	.word	0x2d2d2d2d
   2a6f0:	2d2d2d2d 	.word	0x2d2d2d2d
   2a6f4:	2d2d2d2d 	.word	0x2d2d2d2d
   2a6f8:	2d2d2d2d 	.word	0x2d2d2d2d
   2a6fc:	3b2d      	.short	0x3b2d
   2a6fe:	2004      	movs	r0, #4
   2a700:	4770      	bx	lr
   2a702:	28d2      	cmp	r0, #210	; 0xd2
   2a704:	d00d      	beq.n	2a722 <att_op_get_type+0x86>
		return ATT_COMMAND;
   2a706:	f010 0f40 	tst.w	r0, #64	; 0x40
   2a70a:	bf0c      	ite	eq
   2a70c:	2006      	moveq	r0, #6
   2a70e:	2000      	movne	r0, #0
   2a710:	4770      	bx	lr
		return ATT_RESPONSE;
   2a712:	2002      	movs	r0, #2
   2a714:	4770      	bx	lr
		return ATT_NOTIFICATION;
   2a716:	2003      	movs	r0, #3
   2a718:	4770      	bx	lr
		return ATT_INDICATION;
   2a71a:	2005      	movs	r0, #5
   2a71c:	4770      	bx	lr
		return ATT_REQUEST;
   2a71e:	2001      	movs	r0, #1
   2a720:	4770      	bx	lr
		return ATT_COMMAND;
   2a722:	2000      	movs	r0, #0
}
   2a724:	4770      	bx	lr

0002a726 <bt_gatt_foreach_attr>:
{
   2a726:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2a728:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2a72c:	2300      	movs	r3, #0
   2a72e:	9300      	str	r3, [sp, #0]
   2a730:	461a      	mov	r2, r3
   2a732:	f7e8 fe7d 	bl	13430 <bt_gatt_foreach_attr_type>
}
   2a736:	b005      	add	sp, #20
   2a738:	f85d fb04 	ldr.w	pc, [sp], #4

0002a73c <find_type_cb>:
{
   2a73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   2a740:	f8d2 9000 	ldr.w	r9, [r2]
{
   2a744:	b091      	sub	sp, #68	; 0x44
   2a746:	4607      	mov	r7, r0
   2a748:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2a74a:	2500      	movs	r5, #0
   2a74c:	f642 0301 	movw	r3, #10241	; 0x2801
   2a750:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   2a752:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2a756:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   2a75a:	a90b      	add	r1, sp, #44	; 0x2c
{
   2a75c:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2a75e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   2a762:	f7fe fec8 	bl	294f6 <bt_uuid_cmp>
   2a766:	2800      	cmp	r0, #0
   2a768:	d079      	beq.n	2a85e <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   2a76a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2a76e:	6838      	ldr	r0, [r7, #0]
   2a770:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   2a774:	a90b      	add	r1, sp, #44	; 0x2c
   2a776:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   2a77a:	f7fe febc 	bl	294f6 <bt_uuid_cmp>
   2a77e:	b138      	cbz	r0, 2a790 <find_type_cb+0x54>
		if (data->group &&
   2a780:	68a3      	ldr	r3, [r4, #8]
   2a782:	b11b      	cbz	r3, 2a78c <find_type_cb+0x50>
   2a784:	885a      	ldrh	r2, [r3, #2]
   2a786:	42b2      	cmp	r2, r6
   2a788:	d200      	bcs.n	2a78c <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   2a78a:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   2a78c:	2001      	movs	r0, #1
   2a78e:	e009      	b.n	2a7a4 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   2a790:	6861      	ldr	r1, [r4, #4]
   2a792:	4608      	mov	r0, r1
   2a794:	f7ff ff62 	bl	2a65c <net_buf_frags_len>
   2a798:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   2a79c:	1a1b      	subs	r3, r3, r0
   2a79e:	2b03      	cmp	r3, #3
   2a7a0:	d803      	bhi.n	2a7aa <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   2a7a2:	2000      	movs	r0, #0
}
   2a7a4:	b011      	add	sp, #68	; 0x44
   2a7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   2a7aa:	4608      	mov	r0, r1
   2a7ac:	f002 fde3 	bl	2d376 <net_buf_frag_last>
   2a7b0:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   2a7b2:	6860      	ldr	r0, [r4, #4]
   2a7b4:	f7ff ff52 	bl	2a65c <net_buf_frags_len>
   2a7b8:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   2a7bc:	f105 0b08 	add.w	fp, r5, #8
   2a7c0:	ebaa 0a00 	sub.w	sl, sl, r0
   2a7c4:	4658      	mov	r0, fp
   2a7c6:	f002 fe3f 	bl	2d448 <net_buf_simple_tailroom>
   2a7ca:	4582      	cmp	sl, r0
   2a7cc:	d23f      	bcs.n	2a84e <find_type_cb+0x112>
   2a7ce:	6860      	ldr	r0, [r4, #4]
   2a7d0:	f7ff ff44 	bl	2a65c <net_buf_frags_len>
   2a7d4:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   2a7d8:	1a18      	subs	r0, r3, r0
	if (!len) {
   2a7da:	b970      	cbnz	r0, 2a7fa <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   2a7dc:	6863      	ldr	r3, [r4, #4]
   2a7de:	7998      	ldrb	r0, [r3, #6]
   2a7e0:	f7f8 fd96 	bl	23310 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2a7e4:	2200      	movs	r2, #0
   2a7e6:	2300      	movs	r3, #0
   2a7e8:	f002 fd91 	bl	2d30e <net_buf_alloc_fixed>
		if (!frag) {
   2a7ec:	4605      	mov	r5, r0
   2a7ee:	2800      	cmp	r0, #0
   2a7f0:	d0d7      	beq.n	2a7a2 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   2a7f2:	4601      	mov	r1, r0
   2a7f4:	6860      	ldr	r0, [r4, #4]
   2a7f6:	f002 fdcf 	bl	2d398 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   2a7fa:	2300      	movs	r3, #0
   2a7fc:	9300      	str	r3, [sp, #0]
   2a7fe:	f8d7 9004 	ldr.w	r9, [r7, #4]
   2a802:	4639      	mov	r1, r7
   2a804:	2310      	movs	r3, #16
   2a806:	aa02      	add	r2, sp, #8
   2a808:	4640      	mov	r0, r8
   2a80a:	47c8      	blx	r9
	if (read < 0) {
   2a80c:	1e07      	subs	r7, r0, #0
   2a80e:	db26      	blt.n	2a85e <find_type_cb+0x122>
	if (read != data->value_len) {
   2a810:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   2a812:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   2a814:	42ba      	cmp	r2, r7
   2a816:	d01e      	beq.n	2a856 <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   2a818:	4601      	mov	r1, r0
   2a81a:	a80b      	add	r0, sp, #44	; 0x2c
   2a81c:	f7fe fe99 	bl	29552 <bt_uuid_create>
   2a820:	b1e8      	cbz	r0, 2a85e <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   2a822:	b2fa      	uxtb	r2, r7
   2a824:	a902      	add	r1, sp, #8
   2a826:	a806      	add	r0, sp, #24
   2a828:	f7fe fe93 	bl	29552 <bt_uuid_create>
   2a82c:	b1b8      	cbz	r0, 2a85e <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   2a82e:	a906      	add	r1, sp, #24
   2a830:	a80b      	add	r0, sp, #44	; 0x2c
   2a832:	f7fe fe60 	bl	294f6 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   2a836:	b990      	cbnz	r0, 2a85e <find_type_cb+0x122>
	data->err = 0x00;
   2a838:	2300      	movs	r3, #0
   2a83a:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   2a83c:	2104      	movs	r1, #4
   2a83e:	f105 0008 	add.w	r0, r5, #8
   2a842:	f002 fdc6 	bl	2d3d2 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   2a846:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   2a848:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   2a84a:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   2a84c:	e79e      	b.n	2a78c <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   2a84e:	4658      	mov	r0, fp
   2a850:	f002 fdfa 	bl	2d448 <net_buf_simple_tailroom>
   2a854:	e7c1      	b.n	2a7da <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   2a856:	a902      	add	r1, sp, #8
   2a858:	f7fe fd64 	bl	29324 <memcmp>
   2a85c:	e7eb      	b.n	2a836 <find_type_cb+0xfa>
	data->group = NULL;
   2a85e:	2300      	movs	r3, #0
   2a860:	60a3      	str	r3, [r4, #8]
   2a862:	e793      	b.n	2a78c <find_type_cb+0x50>

0002a864 <find_info_cb>:
{
   2a864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2a866:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   2a868:	6817      	ldr	r7, [r2, #0]
{
   2a86a:	4605      	mov	r5, r0
   2a86c:	460e      	mov	r6, r1
   2a86e:	4614      	mov	r4, r2
	if (!data->rsp) {
   2a870:	b963      	cbnz	r3, 2a88c <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   2a872:	6850      	ldr	r0, [r2, #4]
   2a874:	2101      	movs	r1, #1
   2a876:	3008      	adds	r0, #8
   2a878:	f002 fdab 	bl	2d3d2 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2a87c:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2a87e:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2a880:	781b      	ldrb	r3, [r3, #0]
   2a882:	2b00      	cmp	r3, #0
   2a884:	bf0c      	ite	eq
   2a886:	2301      	moveq	r3, #1
   2a888:	2302      	movne	r3, #2
   2a88a:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   2a88c:	68a3      	ldr	r3, [r4, #8]
   2a88e:	781b      	ldrb	r3, [r3, #0]
   2a890:	2b01      	cmp	r3, #1
   2a892:	d003      	beq.n	2a89c <find_info_cb+0x38>
   2a894:	2b02      	cmp	r3, #2
   2a896:	d019      	beq.n	2a8cc <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   2a898:	2000      	movs	r0, #0
   2a89a:	e016      	b.n	2a8ca <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2a89c:	682b      	ldr	r3, [r5, #0]
   2a89e:	781b      	ldrb	r3, [r3, #0]
   2a8a0:	2b00      	cmp	r3, #0
   2a8a2:	d1f9      	bne.n	2a898 <find_info_cb+0x34>
   2a8a4:	6860      	ldr	r0, [r4, #4]
   2a8a6:	2104      	movs	r1, #4
   2a8a8:	3008      	adds	r0, #8
   2a8aa:	f002 fd92 	bl	2d3d2 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2a8ae:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2a8b0:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2a8b2:	885b      	ldrh	r3, [r3, #2]
   2a8b4:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2a8b6:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   2a8b8:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   2a8ba:	899b      	ldrh	r3, [r3, #12]
   2a8bc:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   2a8c0:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2a8c2:	2804      	cmp	r0, #4
   2a8c4:	bf94      	ite	ls
   2a8c6:	2000      	movls	r0, #0
   2a8c8:	2001      	movhi	r0, #1
}
   2a8ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2a8cc:	682b      	ldr	r3, [r5, #0]
   2a8ce:	781b      	ldrb	r3, [r3, #0]
   2a8d0:	2b02      	cmp	r3, #2
   2a8d2:	d1e1      	bne.n	2a898 <find_info_cb+0x34>
   2a8d4:	6860      	ldr	r0, [r4, #4]
   2a8d6:	2112      	movs	r1, #18
   2a8d8:	3008      	adds	r0, #8
   2a8da:	f002 fd7a 	bl	2d3d2 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2a8de:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2a8e0:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2a8e2:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   2a8e4:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2a8e8:	3101      	adds	r1, #1
   2a8ea:	f7fe fd2c 	bl	29346 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   2a8ee:	6863      	ldr	r3, [r4, #4]
   2a8f0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   2a8f4:	899b      	ldrh	r3, [r3, #12]
   2a8f6:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2a8f8:	2812      	cmp	r0, #18
   2a8fa:	e7e3      	b.n	2a8c4 <find_info_cb+0x60>

0002a8fc <att_chan_mtu_updated>:
{
   2a8fc:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   2a8fe:	6806      	ldr	r6, [r0, #0]
	return list->head;
   2a900:	6a73      	ldr	r3, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2a902:	b1e3      	cbz	r3, 2a93e <att_chan_mtu_updated+0x42>
	return node->next;
   2a904:	681a      	ldr	r2, [r3, #0]
   2a906:	f5a3 75a2 	sub.w	r5, r3, #324	; 0x144
   2a90a:	b10a      	cbz	r2, 2a910 <att_chan_mtu_updated+0x14>
   2a90c:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   2a910:	2300      	movs	r3, #0
   2a912:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   2a914:	42a8      	cmp	r0, r5
   2a916:	d009      	beq.n	2a92c <att_chan_mtu_updated+0x30>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2a918:	f8b5 408a 	ldrh.w	r4, [r5, #138]	; 0x8a
   2a91c:	42a1      	cmp	r1, r4
   2a91e:	bf38      	it	cc
   2a920:	4621      	movcc	r1, r4
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2a922:	f8b5 407a 	ldrh.w	r4, [r5, #122]	; 0x7a
   2a926:	42a3      	cmp	r3, r4
   2a928:	bf38      	it	cc
   2a92a:	4623      	movcc	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2a92c:	b142      	cbz	r2, 2a940 <att_chan_mtu_updated+0x44>
   2a92e:	f8d2 4144 	ldr.w	r4, [r2, #324]	; 0x144
   2a932:	b10c      	cbz	r4, 2a938 <att_chan_mtu_updated+0x3c>
   2a934:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   2a938:	4615      	mov	r5, r2
   2a93a:	4622      	mov	r2, r4
   2a93c:	e7ea      	b.n	2a914 <att_chan_mtu_updated+0x18>
   2a93e:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2a940:	f8b0 408a 	ldrh.w	r4, [r0, #138]	; 0x8a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   2a944:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2a948:	428c      	cmp	r4, r1
   2a94a:	d801      	bhi.n	2a950 <att_chan_mtu_updated+0x54>
   2a94c:	429a      	cmp	r2, r3
   2a94e:	d909      	bls.n	2a964 <att_chan_mtu_updated+0x68>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2a950:	429a      	cmp	r2, r3
   2a952:	bf38      	it	cc
   2a954:	461a      	movcc	r2, r3
   2a956:	42a1      	cmp	r1, r4
   2a958:	6830      	ldr	r0, [r6, #0]
   2a95a:	bf38      	it	cc
   2a95c:	4621      	movcc	r1, r4
}
   2a95e:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2a960:	f7e9 b9f8 	b.w	13d54 <bt_gatt_att_max_mtu_changed>
}
   2a964:	bc70      	pop	{r4, r5, r6}
   2a966:	4770      	bx	lr

0002a968 <attr_read_group_cb>:
	if (!data->rsp->len) {
   2a968:	68d0      	ldr	r0, [r2, #12]
   2a96a:	7803      	ldrb	r3, [r0, #0]
   2a96c:	3104      	adds	r1, #4
   2a96e:	b913      	cbnz	r3, 2a976 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2a970:	7001      	strb	r1, [r0, #0]
	return true;
   2a972:	2001      	movs	r0, #1
}
   2a974:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2a976:	428b      	cmp	r3, r1
   2a978:	d0fb      	beq.n	2a972 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   2a97a:	6891      	ldr	r1, [r2, #8]
   2a97c:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   2a97e:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   2a980:	3b04      	subs	r3, #4
   2a982:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   2a984:	6110      	str	r0, [r2, #16]
		return false;
   2a986:	4770      	bx	lr

0002a988 <att_get>:
{
   2a988:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2a98a:	7b43      	ldrb	r3, [r0, #13]
   2a98c:	2b07      	cmp	r3, #7
   2a98e:	d001      	beq.n	2a994 <att_get+0xc>
		return NULL;
   2a990:	2000      	movs	r0, #0
}
   2a992:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   2a994:	2104      	movs	r1, #4
   2a996:	f7ff fe30 	bl	2a5fa <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   2a99a:	2800      	cmp	r0, #0
   2a99c:	d0f8      	beq.n	2a990 <att_get+0x8>
	return att_chan->att;
   2a99e:	f850 0c08 	ldr.w	r0, [r0, #-8]
   2a9a2:	e7f6      	b.n	2a992 <att_get+0xa>

0002a9a4 <chan_req_sent>:
	if (chan->req) {
   2a9a4:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   2a9a8:	b133      	cbz	r3, 2a9b8 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2a9aa:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2a9ae:	2300      	movs	r3, #0
   2a9b0:	f500 7088 	add.w	r0, r0, #272	; 0x110
   2a9b4:	f7fb bbe8 	b.w	26188 <k_work_reschedule>
}
   2a9b8:	4770      	bx	lr

0002a9ba <write_cb>:
{
   2a9ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2a9bc:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2a9be:	4601      	mov	r1, r0
{
   2a9c0:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2a9c2:	222a      	movs	r2, #42	; 0x2a
   2a9c4:	6820      	ldr	r0, [r4, #0]
   2a9c6:	f000 ff58 	bl	2b87a <bt_gatt_check_perm>
   2a9ca:	4605      	mov	r5, r0
   2a9cc:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2a9ce:	bb20      	cbnz	r0, 2aa1a <write_cb+0x60>
	if (!data->req) {
   2a9d0:	7a23      	ldrb	r3, [r4, #8]
   2a9d2:	b1ab      	cbz	r3, 2aa00 <write_cb+0x46>
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   2a9d4:	2b18      	cmp	r3, #24
   2a9d6:	bf14      	ite	ne
   2a9d8:	2300      	movne	r3, #0
   2a9da:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   2a9dc:	9301      	str	r3, [sp, #4]
   2a9de:	8a63      	ldrh	r3, [r4, #18]
   2a9e0:	9300      	str	r3, [sp, #0]
   2a9e2:	68b7      	ldr	r7, [r6, #8]
   2a9e4:	8a23      	ldrh	r3, [r4, #16]
   2a9e6:	68e2      	ldr	r2, [r4, #12]
   2a9e8:	6820      	ldr	r0, [r4, #0]
   2a9ea:	4631      	mov	r1, r6
   2a9ec:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   2a9ee:	1e03      	subs	r3, r0, #0
   2a9f0:	db08      	blt.n	2aa04 <write_cb+0x4a>
   2a9f2:	8a22      	ldrh	r2, [r4, #16]
   2a9f4:	4293      	cmp	r3, r2
   2a9f6:	d10e      	bne.n	2aa16 <write_cb+0x5c>
	data->err = 0U;
   2a9f8:	2300      	movs	r3, #0
   2a9fa:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2a9fc:	2501      	movs	r5, #1
   2a9fe:	e007      	b.n	2aa10 <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2aa00:	2302      	movs	r3, #2
   2aa02:	e7eb      	b.n	2a9dc <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   2aa04:	f113 0fff 	cmn.w	r3, #255	; 0xff
   2aa08:	d305      	bcc.n	2aa16 <write_cb+0x5c>
		return -err;
   2aa0a:	425b      	negs	r3, r3
   2aa0c:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   2aa0e:	7523      	strb	r3, [r4, #20]
}
   2aa10:	4628      	mov	r0, r5
   2aa12:	b003      	add	sp, #12
   2aa14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   2aa16:	230e      	movs	r3, #14
   2aa18:	e7f9      	b.n	2aa0e <write_cb+0x54>
		return BT_GATT_ITER_STOP;
   2aa1a:	2500      	movs	r5, #0
   2aa1c:	e7f8      	b.n	2aa10 <write_cb+0x56>

0002aa1e <att_chan_read>:
{
   2aa1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aa22:	4680      	mov	r8, r0
   2aa24:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2aa26:	4610      	mov	r0, r2
{
   2aa28:	4699      	mov	r9, r3
   2aa2a:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2aa2c:	f7ff fe16 	bl	2a65c <net_buf_frags_len>
   2aa30:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   2aa34:	4283      	cmp	r3, r0
{
   2aa36:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2aa38:	d97a      	bls.n	2ab30 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2aa3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2aa3e:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   2aa40:	4630      	mov	r0, r6
   2aa42:	f002 fc98 	bl	2d376 <net_buf_frag_last>
	size_t len, total = 0;
   2aa46:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   2aa4a:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2aa4c:	4630      	mov	r0, r6
   2aa4e:	f7ff fe05 	bl	2a65c <net_buf_frags_len>
   2aa52:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   2aa56:	f105 0708 	add.w	r7, r5, #8
   2aa5a:	1a24      	subs	r4, r4, r0
   2aa5c:	4638      	mov	r0, r7
   2aa5e:	f002 fcf3 	bl	2d448 <net_buf_simple_tailroom>
   2aa62:	4284      	cmp	r4, r0
   2aa64:	d211      	bcs.n	2aa8a <att_chan_read+0x6c>
   2aa66:	4630      	mov	r0, r6
   2aa68:	f7ff fdf8 	bl	2a65c <net_buf_frags_len>
   2aa6c:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   2aa70:	1a24      	subs	r4, r4, r0
		if (!len) {
   2aa72:	bb34      	cbnz	r4, 2aac2 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2aa74:	79b0      	ldrb	r0, [r6, #6]
   2aa76:	f7f8 fc4b 	bl	23310 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2aa7a:	2200      	movs	r2, #0
   2aa7c:	2300      	movs	r3, #0
   2aa7e:	f002 fc46 	bl	2d30e <net_buf_alloc_fixed>
			if (!frag) {
   2aa82:	4605      	mov	r5, r0
   2aa84:	b930      	cbnz	r0, 2aa94 <att_chan_read+0x76>
	return total;
   2aa86:	4657      	mov	r7, sl
   2aa88:	e02c      	b.n	2aae4 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2aa8a:	4638      	mov	r0, r7
   2aa8c:	f002 fcdc 	bl	2d448 <net_buf_simple_tailroom>
   2aa90:	4604      	mov	r4, r0
   2aa92:	e7ee      	b.n	2aa72 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2aa94:	4601      	mov	r1, r0
   2aa96:	4630      	mov	r0, r6
   2aa98:	f002 fc7e 	bl	2d398 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2aa9c:	4630      	mov	r0, r6
   2aa9e:	f7ff fddd 	bl	2a65c <net_buf_frags_len>
   2aaa2:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   2aaa6:	f105 0708 	add.w	r7, r5, #8
   2aaaa:	1a24      	subs	r4, r4, r0
   2aaac:	4638      	mov	r0, r7
   2aaae:	f002 fccb 	bl	2d448 <net_buf_simple_tailroom>
   2aab2:	4284      	cmp	r4, r0
   2aab4:	d21a      	bcs.n	2aaec <att_chan_read+0xce>
   2aab6:	4630      	mov	r0, r6
   2aab8:	f7ff fdd0 	bl	2a65c <net_buf_frags_len>
   2aabc:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   2aac0:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2aac2:	68a9      	ldr	r1, [r5, #8]
   2aac4:	89aa      	ldrh	r2, [r5, #12]
   2aac6:	f8db 7004 	ldr.w	r7, [fp, #4]
   2aaca:	9803      	ldr	r0, [sp, #12]
   2aacc:	f8cd 9000 	str.w	r9, [sp]
   2aad0:	440a      	add	r2, r1
   2aad2:	b2a3      	uxth	r3, r4
   2aad4:	4659      	mov	r1, fp
   2aad6:	47b8      	blx	r7
		if (read < 0) {
   2aad8:	1e07      	subs	r7, r0, #0
   2aada:	da0c      	bge.n	2aaf6 <att_chan_read+0xd8>
				return total;
   2aadc:	f1ba 0f00 	cmp.w	sl, #0
   2aae0:	bf18      	it	ne
   2aae2:	4657      	movne	r7, sl
}
   2aae4:	4638      	mov	r0, r7
   2aae6:	b005      	add	sp, #20
   2aae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2aaec:	4638      	mov	r0, r7
   2aaee:	f002 fcab 	bl	2d448 <net_buf_simple_tailroom>
   2aaf2:	4604      	mov	r4, r0
   2aaf4:	e7e5      	b.n	2aac2 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2aaf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2aaf8:	b993      	cbnz	r3, 2ab20 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2aafa:	4639      	mov	r1, r7
   2aafc:	f105 0008 	add.w	r0, r5, #8
   2ab00:	f002 fc67 	bl	2d3d2 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2ab04:	4630      	mov	r0, r6
   2ab06:	f7ff fda9 	bl	2a65c <net_buf_frags_len>
   2ab0a:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   2ab0e:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2ab10:	4283      	cmp	r3, r0
		total += read;
   2ab12:	44ba      	add	sl, r7
		offset += read;
   2ab14:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2ab18:	d9b5      	bls.n	2aa86 <att_chan_read+0x68>
   2ab1a:	42a7      	cmp	r7, r4
   2ab1c:	d096      	beq.n	2aa4c <att_chan_read+0x2e>
   2ab1e:	e7b2      	b.n	2aa86 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2ab20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2ab22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2ab24:	4639      	mov	r1, r7
   2ab26:	4628      	mov	r0, r5
   2ab28:	4798      	blx	r3
   2ab2a:	2800      	cmp	r0, #0
   2ab2c:	d1e5      	bne.n	2aafa <att_chan_read+0xdc>
   2ab2e:	e7aa      	b.n	2aa86 <att_chan_read+0x68>
		return 0;
   2ab30:	2700      	movs	r7, #0
   2ab32:	e7d7      	b.n	2aae4 <att_chan_read+0xc6>

0002ab34 <chan_req_send>:
{
   2ab34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2ab36:	688f      	ldr	r7, [r1, #8]
{
   2ab38:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2ab3a:	4638      	mov	r0, r7
   2ab3c:	f7ff fd8e 	bl	2a65c <net_buf_frags_len>
   2ab40:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
   2ab44:	4283      	cmp	r3, r0
{
   2ab46:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2ab48:	d30d      	bcc.n	2ab66 <chan_req_send+0x32>
	req->buf = NULL;
   2ab4a:	2600      	movs	r6, #0
	chan->req = req;
   2ab4c:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   2ab50:	4632      	mov	r2, r6
	req->buf = NULL;
   2ab52:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   2ab54:	4620      	mov	r0, r4
   2ab56:	4639      	mov	r1, r7
   2ab58:	f7e7 fc76 	bl	12448 <chan_send>
	if (err) {
   2ab5c:	b110      	cbz	r0, 2ab64 <chan_req_send+0x30>
		req->buf = buf;
   2ab5e:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   2ab60:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
}
   2ab64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2ab66:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2ab6a:	e7fb      	b.n	2ab64 <chan_req_send+0x30>

0002ab6c <process_queue>:
{
   2ab6c:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   2ab6e:	2200      	movs	r2, #0
{
   2ab70:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   2ab72:	2300      	movs	r3, #0
   2ab74:	4608      	mov	r0, r1
{
   2ab76:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   2ab78:	f002 fbce 	bl	2d318 <net_buf_get>
	if (buf) {
   2ab7c:	4605      	mov	r5, r0
   2ab7e:	b160      	cbz	r0, 2ab9a <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   2ab80:	4601      	mov	r1, r0
   2ab82:	2200      	movs	r2, #0
   2ab84:	4620      	mov	r0, r4
   2ab86:	f7e7 fc5f 	bl	12448 <chan_send>
		if (err) {
   2ab8a:	4604      	mov	r4, r0
   2ab8c:	b118      	cbz	r0, 2ab96 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   2ab8e:	4629      	mov	r1, r5
   2ab90:	4630      	mov	r0, r6
   2ab92:	f003 fd9b 	bl	2e6cc <k_queue_prepend>
}
   2ab96:	4620      	mov	r0, r4
   2ab98:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2ab9a:	f06f 0401 	mvn.w	r4, #1
   2ab9e:	e7fa      	b.n	2ab96 <process_queue+0x2a>

0002aba0 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2aba0:	b510      	push	{r4, lr}
	return list->head;
   2aba2:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2aba4:	2200      	movs	r2, #0
   2aba6:	b153      	cbz	r3, 2abbe <sys_slist_find_and_remove.isra.0+0x1e>
   2aba8:	428b      	cmp	r3, r1
   2abaa:	d10e      	bne.n	2abca <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   2abac:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   2abae:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2abb0:	b932      	cbnz	r2, 2abc0 <sys_slist_find_and_remove.isra.0+0x20>
   2abb2:	42a1      	cmp	r1, r4
	list->head = node;
   2abb4:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2abb6:	d100      	bne.n	2abba <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   2abb8:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2abba:	2300      	movs	r3, #0
   2abbc:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2abbe:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   2abc0:	42a1      	cmp	r1, r4
	parent->next = child;
   2abc2:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2abc4:	bf08      	it	eq
   2abc6:	6042      	streq	r2, [r0, #4]
}
   2abc8:	e7f7      	b.n	2abba <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   2abca:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2abcc:	681b      	ldr	r3, [r3, #0]
   2abce:	e7ea      	b.n	2aba6 <sys_slist_find_and_remove.isra.0+0x6>

0002abd0 <att_exec_write_req>:
   2abd0:	2006      	movs	r0, #6
   2abd2:	4770      	bx	lr

0002abd4 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2abd4:	30f0      	adds	r0, #240	; 0xf0
   2abd6:	f3bf 8f5b 	dmb	ish
   2abda:	e850 3f00 	ldrex	r3, [r0]
   2abde:	f023 0301 	bic.w	r3, r3, #1
   2abe2:	e840 3200 	strex	r2, r3, [r0]
   2abe6:	2a00      	cmp	r2, #0
   2abe8:	d1f7      	bne.n	2abda <chan_rsp_sent+0x6>
   2abea:	f3bf 8f5b 	dmb	ish
}
   2abee:	4770      	bx	lr

0002abf0 <chan_cfm_sent>:
   2abf0:	30f0      	adds	r0, #240	; 0xf0
   2abf2:	f3bf 8f5b 	dmb	ish
   2abf6:	e850 3f00 	ldrex	r3, [r0]
   2abfa:	f023 0302 	bic.w	r3, r3, #2
   2abfe:	e840 3200 	strex	r2, r3, [r0]
   2ac02:	2a00      	cmp	r2, #0
   2ac04:	d1f7      	bne.n	2abf6 <chan_cfm_sent+0x6>
   2ac06:	f3bf 8f5b 	dmb	ish
}
   2ac0a:	4770      	bx	lr

0002ac0c <read_cb>:
{
   2ac0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   2ac10:	f8d2 8000 	ldr.w	r8, [r2]
{
   2ac14:	4606      	mov	r6, r0
	data->err = 0x00;
   2ac16:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2ac18:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   2ac1c:	7317      	strb	r7, [r2, #12]
{
   2ac1e:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2ac20:	4631      	mov	r1, r6
   2ac22:	2215      	movs	r2, #21
   2ac24:	f000 fe29 	bl	2b87a <bt_gatt_check_perm>
   2ac28:	4604      	mov	r4, r0
   2ac2a:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   2ac2c:	b9a0      	cbnz	r0, 2ac58 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2ac2e:	e9cd 0000 	strd	r0, r0, [sp]
   2ac32:	88ab      	ldrh	r3, [r5, #4]
   2ac34:	68aa      	ldr	r2, [r5, #8]
   2ac36:	4631      	mov	r1, r6
   2ac38:	4640      	mov	r0, r8
   2ac3a:	f7ff fef0 	bl	2aa1e <att_chan_read>
	if (ret < 0) {
   2ac3e:	1e03      	subs	r3, r0, #0
   2ac40:	da0c      	bge.n	2ac5c <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   2ac42:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   2ac46:	bf26      	itte	cs
   2ac48:	425b      	negcs	r3, r3
   2ac4a:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   2ac4c:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   2ac4e:	732b      	strb	r3, [r5, #12]
}
   2ac50:	4620      	mov	r0, r4
   2ac52:	b002      	add	sp, #8
   2ac54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   2ac58:	463c      	mov	r4, r7
   2ac5a:	e7f9      	b.n	2ac50 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   2ac5c:	2401      	movs	r4, #1
   2ac5e:	e7f7      	b.n	2ac50 <read_cb+0x44>

0002ac60 <bt_att_sent>:
{
   2ac60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   2ac62:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   2ac66:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   2ac6a:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2ac6c:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   2ac70:	b10b      	cbz	r3, 2ac76 <bt_att_sent+0x16>
		chan->sent(chan);
   2ac72:	4638      	mov	r0, r7
   2ac74:	4798      	blx	r3
   2ac76:	f3bf 8f5b 	dmb	ish
   2ac7a:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   2ac7e:	e853 2f00 	ldrex	r2, [r3]
   2ac82:	f022 0210 	bic.w	r2, r2, #16
   2ac86:	e843 2100 	strex	r1, r2, [r3]
   2ac8a:	2900      	cmp	r1, #0
   2ac8c:	d1f7      	bne.n	2ac7e <bt_att_sent+0x1e>
   2ac8e:	f3bf 8f5b 	dmb	ish
	if (!att) {
   2ac92:	b30c      	cbz	r4, 2acd8 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2ac94:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   2ac98:	b98b      	cbnz	r3, 2acbe <bt_att_sent+0x5e>
   2ac9a:	6863      	ldr	r3, [r4, #4]
   2ac9c:	b17b      	cbz	r3, 2acbe <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2ac9e:	1d20      	adds	r0, r4, #4
   2aca0:	f7ff fcd2 	bl	2a648 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2aca4:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2aca6:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2aca8:	4638      	mov	r0, r7
   2acaa:	f7ff ff43 	bl	2ab34 <chan_req_send>
   2acae:	2800      	cmp	r0, #0
   2acb0:	da12      	bge.n	2acd8 <bt_att_sent+0x78>
	parent->next = child;
   2acb2:	6863      	ldr	r3, [r4, #4]
   2acb4:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2acb6:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2acb8:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2acba:	b903      	cbnz	r3, 2acbe <bt_att_sent+0x5e>
	list->tail = node;
   2acbc:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   2acbe:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   2acc2:	4638      	mov	r0, r7
   2acc4:	f7ff ff52 	bl	2ab6c <process_queue>
	if (!err) {
   2acc8:	b130      	cbz	r0, 2acd8 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   2acca:	f104 010c 	add.w	r1, r4, #12
   2acce:	4638      	mov	r0, r7
}
   2acd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   2acd4:	f7ff bf4a 	b.w	2ab6c <process_queue>
}
   2acd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002acda <att_req_send_process>:
{
   2acda:	b570      	push	{r4, r5, r6, lr}
   2acdc:	4604      	mov	r4, r0
	node = sys_slist_get(&att->reqs);
   2acde:	3004      	adds	r0, #4
   2ace0:	f7ff fcb2 	bl	2a648 <sys_slist_get>
	if (!node) {
   2ace4:	4605      	mov	r5, r0
   2ace6:	b1b8      	cbz	r0, 2ad18 <att_req_send_process+0x3e>
	return list->head;
   2ace8:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2acea:	b14b      	cbz	r3, 2ad00 <att_req_send_process+0x26>
	return node->next;
   2acec:	681e      	ldr	r6, [r3, #0]
   2acee:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   2acf2:	b10e      	cbz	r6, 2acf8 <att_req_send_process+0x1e>
   2acf4:	f5a6 76a2 	sub.w	r6, r6, #324	; 0x144
		if (!chan->req) {
   2acf8:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   2acfc:	b13b      	cbz	r3, 2ad0e <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2acfe:	b966      	cbnz	r6, 2ad1a <att_req_send_process+0x40>
	parent->next = child;
   2ad00:	6863      	ldr	r3, [r4, #4]
   2ad02:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   2ad04:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2ad06:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2ad08:	b933      	cbnz	r3, 2ad18 <att_req_send_process+0x3e>
	list->tail = node;
   2ad0a:	60a5      	str	r5, [r4, #8]
}
   2ad0c:	e004      	b.n	2ad18 <att_req_send_process+0x3e>
	return chan_req_send(chan, req);
   2ad0e:	4629      	mov	r1, r5
   2ad10:	f7ff ff10 	bl	2ab34 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2ad14:	2800      	cmp	r0, #0
   2ad16:	dbf2      	blt.n	2acfe <att_req_send_process+0x24>
}
   2ad18:	bd70      	pop	{r4, r5, r6, pc}
	return node->next;
   2ad1a:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2ad1e:	b10b      	cbz	r3, 2ad24 <att_req_send_process+0x4a>
   2ad20:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   2ad24:	4630      	mov	r0, r6
   2ad26:	461e      	mov	r6, r3
   2ad28:	e7e6      	b.n	2acf8 <att_req_send_process+0x1e>

0002ad2a <bt_att_status>:
{
   2ad2a:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ad2c:	f3bf 8f5b 	dmb	ish
   2ad30:	680b      	ldr	r3, [r1, #0]
   2ad32:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2ad36:	07db      	lsls	r3, r3, #31
{
   2ad38:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2ad3a:	d519      	bpl.n	2ad70 <bt_att_status+0x46>
	if (!chan->att) {
   2ad3c:	f850 0c08 	ldr.w	r0, [r0, #-8]
   2ad40:	b1b0      	cbz	r0, 2ad70 <bt_att_status+0x46>
	if (chan->req) {
   2ad42:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   2ad46:	b99b      	cbnz	r3, 2ad70 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   2ad48:	3004      	adds	r0, #4
   2ad4a:	f7ff fc7d 	bl	2a648 <sys_slist_get>
	if (!node) {
   2ad4e:	4604      	mov	r4, r0
   2ad50:	b170      	cbz	r0, 2ad70 <bt_att_status+0x46>
	return chan_req_send(chan, req);
   2ad52:	4601      	mov	r1, r0
   2ad54:	f1a5 0008 	sub.w	r0, r5, #8
   2ad58:	f7ff feec 	bl	2ab34 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2ad5c:	2800      	cmp	r0, #0
   2ad5e:	da07      	bge.n	2ad70 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   2ad60:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   2ad64:	685a      	ldr	r2, [r3, #4]
   2ad66:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2ad68:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2ad6a:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2ad6c:	b902      	cbnz	r2, 2ad70 <bt_att_status+0x46>
	list->tail = node;
   2ad6e:	609c      	str	r4, [r3, #8]
}
   2ad70:	bd38      	pop	{r3, r4, r5, pc}

0002ad72 <bt_att_chan_create_pdu>:
{
   2ad72:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   2ad74:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   2ad78:	3201      	adds	r2, #1
   2ad7a:	429a      	cmp	r2, r3
{
   2ad7c:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   2ad7e:	d81b      	bhi.n	2adb8 <bt_att_chan_create_pdu+0x46>
	switch (att_op_get_type(op)) {
   2ad80:	4608      	mov	r0, r1
   2ad82:	f7ff fc8b 	bl	2a69c <att_op_get_type>
   2ad86:	2802      	cmp	r0, #2
   2ad88:	d001      	beq.n	2ad8e <bt_att_chan_create_pdu+0x1c>
   2ad8a:	2804      	cmp	r0, #4
   2ad8c:	d10f      	bne.n	2adae <bt_att_chan_create_pdu+0x3c>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   2ad8e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2ad92:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   2ad94:	2100      	movs	r1, #0
   2ad96:	4608      	mov	r0, r1
   2ad98:	f7ff fbd7 	bl	2a54a <bt_l2cap_create_pdu_timeout>
   2ad9c:	4604      	mov	r4, r0
	if (!buf) {
   2ad9e:	b120      	cbz	r0, 2adaa <bt_att_chan_create_pdu+0x38>
   2ada0:	2101      	movs	r1, #1
   2ada2:	3008      	adds	r0, #8
   2ada4:	f002 fb15 	bl	2d3d2 <net_buf_simple_add>
	hdr->code = op;
   2ada8:	7005      	strb	r5, [r0, #0]
}
   2adaa:	4620      	mov	r0, r4
   2adac:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   2adae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2adb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2adb6:	e7ed      	b.n	2ad94 <bt_att_chan_create_pdu+0x22>
		return NULL;
   2adb8:	2400      	movs	r4, #0
   2adba:	e7f6      	b.n	2adaa <bt_att_chan_create_pdu+0x38>

0002adbc <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2adbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2adc0:	4688      	mov	r8, r1
   2adc2:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2adc4:	2101      	movs	r1, #1
   2adc6:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2adc8:	4605      	mov	r5, r0
   2adca:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2adcc:	f7ff ffd1 	bl	2ad72 <bt_att_chan_create_pdu>
	if (!buf) {
   2add0:	4604      	mov	r4, r0
   2add2:	b170      	cbz	r0, 2adf2 <send_err_rsp.part.0+0x36>
   2add4:	2104      	movs	r1, #4
   2add6:	3008      	adds	r0, #8
   2add8:	f002 fafb 	bl	2d3d2 <net_buf_simple_add>
	rsp->request = req;
   2addc:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   2ade0:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   2ade2:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   2ade6:	4621      	mov	r1, r4
   2ade8:	4628      	mov	r0, r5
}
   2adea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   2adee:	f7e7 bb93 	b.w	12518 <bt_att_chan_send_rsp.constprop.0>
}
   2adf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002adf6 <att_write_req>:
{
   2adf6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2adf8:	460c      	mov	r4, r1
   2adfa:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2adfc:	f101 0008 	add.w	r0, r1, #8
   2ae00:	f002 fb16 	bl	2d430 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2ae04:	89a2      	ldrh	r2, [r4, #12]
   2ae06:	9201      	str	r2, [sp, #4]
   2ae08:	68a2      	ldr	r2, [r4, #8]
   2ae0a:	9200      	str	r2, [sp, #0]
   2ae0c:	4603      	mov	r3, r0
   2ae0e:	2213      	movs	r2, #19
   2ae10:	2112      	movs	r1, #18
   2ae12:	4628      	mov	r0, r5
   2ae14:	f7e7 fcde 	bl	127d4 <att_write_rsp.constprop.0>
}
   2ae18:	b003      	add	sp, #12
   2ae1a:	bd30      	pop	{r4, r5, pc}

0002ae1c <att_write_cmd>:
{
   2ae1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2ae1e:	460c      	mov	r4, r1
   2ae20:	4605      	mov	r5, r0
   2ae22:	f101 0008 	add.w	r0, r1, #8
   2ae26:	f002 fb03 	bl	2d430 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2ae2a:	89a2      	ldrh	r2, [r4, #12]
   2ae2c:	9201      	str	r2, [sp, #4]
   2ae2e:	68a2      	ldr	r2, [r4, #8]
   2ae30:	9200      	str	r2, [sp, #0]
   2ae32:	2200      	movs	r2, #0
   2ae34:	4603      	mov	r3, r0
   2ae36:	4611      	mov	r1, r2
   2ae38:	4628      	mov	r0, r5
   2ae3a:	f7e7 fccb 	bl	127d4 <att_write_rsp.constprop.0>
}
   2ae3e:	b003      	add	sp, #12
   2ae40:	bd30      	pop	{r4, r5, pc}

0002ae42 <bt_att_create_pdu>:
{
   2ae42:	b570      	push	{r4, r5, r6, lr}
   2ae44:	460e      	mov	r6, r1
   2ae46:	4615      	mov	r5, r2
	att = att_get(conn);
   2ae48:	f7ff fd9e 	bl	2a988 <att_get>
	if (!att) {
   2ae4c:	b168      	cbz	r0, 2ae6a <bt_att_create_pdu+0x28>
	return list->head;
   2ae4e:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2ae50:	b15b      	cbz	r3, 2ae6a <bt_att_create_pdu+0x28>
   2ae52:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
	return node->next;
   2ae56:	681b      	ldr	r3, [r3, #0]
   2ae58:	b10b      	cbz	r3, 2ae5e <bt_att_create_pdu+0x1c>
   2ae5a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   2ae5e:	1c6a      	adds	r2, r5, #1
   2ae60:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   2ae64:	428a      	cmp	r2, r1
   2ae66:	d902      	bls.n	2ae6e <bt_att_create_pdu+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2ae68:	b93b      	cbnz	r3, 2ae7a <bt_att_create_pdu+0x38>
}
   2ae6a:	2000      	movs	r0, #0
   2ae6c:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   2ae6e:	462a      	mov	r2, r5
   2ae70:	4631      	mov	r1, r6
}
   2ae72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   2ae76:	f7ff bf7c 	b.w	2ad72 <bt_att_chan_create_pdu>
   2ae7a:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2ae7e:	b10c      	cbz	r4, 2ae84 <bt_att_create_pdu+0x42>
   2ae80:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   2ae84:	4618      	mov	r0, r3
   2ae86:	4623      	mov	r3, r4
   2ae88:	e7ea      	b.n	2ae60 <bt_att_create_pdu+0x1e>

0002ae8a <att_read_blob_req>:
{
   2ae8a:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   2ae8c:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2ae8e:	8813      	ldrh	r3, [r2, #0]
   2ae90:	8852      	ldrh	r2, [r2, #2]
   2ae92:	9200      	str	r2, [sp, #0]
   2ae94:	210c      	movs	r1, #12
   2ae96:	220d      	movs	r2, #13
   2ae98:	f7e7 fdca 	bl	12a30 <att_read_rsp>
}
   2ae9c:	b003      	add	sp, #12
   2ae9e:	f85d fb04 	ldr.w	pc, [sp], #4

0002aea2 <att_read_req>:
{
   2aea2:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   2aea4:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2aea6:	2200      	movs	r2, #0
   2aea8:	881b      	ldrh	r3, [r3, #0]
   2aeaa:	9200      	str	r2, [sp, #0]
   2aeac:	210a      	movs	r1, #10
   2aeae:	220b      	movs	r2, #11
   2aeb0:	f7e7 fdbe 	bl	12a30 <att_read_rsp>
}
   2aeb4:	b003      	add	sp, #12
   2aeb6:	f85d fb04 	ldr.w	pc, [sp], #4

0002aeba <att_mtu_req>:
{
   2aeba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   2aebc:	6803      	ldr	r3, [r0, #0]
{
   2aebe:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   2aec0:	6818      	ldr	r0, [r3, #0]
   2aec2:	f3bf 8f5b 	dmb	ish
   2aec6:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   2aeca:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2aece:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   2aed2:	071b      	lsls	r3, r3, #28
   2aed4:	d421      	bmi.n	2af1a <att_mtu_req+0x60>
	mtu_client = sys_le16_to_cpu(req->mtu);
   2aed6:	688b      	ldr	r3, [r1, #8]
   2aed8:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2aeda:	2e16      	cmp	r6, #22
   2aedc:	d91f      	bls.n	2af1e <att_mtu_req+0x64>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2aede:	2202      	movs	r2, #2
   2aee0:	2103      	movs	r1, #3
   2aee2:	f7ff ffae 	bl	2ae42 <bt_att_create_pdu>
	if (!pdu) {
   2aee6:	4607      	mov	r7, r0
   2aee8:	b1d8      	cbz	r0, 2af22 <att_mtu_req+0x68>
	return net_buf_simple_add(&buf->b, len);
   2aeea:	2102      	movs	r1, #2
   2aeec:	3008      	adds	r0, #8
   2aeee:	f002 fa70 	bl	2d3d2 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2aef2:	f06f 0303 	mvn.w	r3, #3
   2aef6:	7003      	strb	r3, [r0, #0]
   2aef8:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   2aefa:	4639      	mov	r1, r7
   2aefc:	4620      	mov	r0, r4
   2aefe:	f7e7 fb0b 	bl	12518 <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2af02:	2efc      	cmp	r6, #252	; 0xfc
   2af04:	bf28      	it	cs
   2af06:	26fc      	movcs	r6, #252	; 0xfc
	att_chan_mtu_updated(chan);
   2af08:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2af0a:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2af0e:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   2af12:	f7ff fcf3 	bl	2a8fc <att_chan_mtu_updated>
	return 0;
   2af16:	4628      	mov	r0, r5
}
   2af18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2af1a:	2006      	movs	r0, #6
   2af1c:	e7fc      	b.n	2af18 <att_mtu_req+0x5e>
		return BT_ATT_ERR_INVALID_PDU;
   2af1e:	2004      	movs	r0, #4
   2af20:	e7fa      	b.n	2af18 <att_mtu_req+0x5e>
		return BT_ATT_ERR_UNLIKELY;
   2af22:	200e      	movs	r0, #14
   2af24:	e7f8      	b.n	2af18 <att_mtu_req+0x5e>

0002af26 <bt_att_init>:
	bt_gatt_init();
   2af26:	f7e8 ba01 	b.w	1332c <bt_gatt_init>

0002af2a <bt_att_get_mtu>:
{
   2af2a:	b508      	push	{r3, lr}
	att = att_get(conn);
   2af2c:	f7ff fd2c 	bl	2a988 <att_get>
	if (!att) {
   2af30:	b1b0      	cbz	r0, 2af60 <bt_att_get_mtu+0x36>
	return list->head;
   2af32:	6a40      	ldr	r0, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2af34:	b1a0      	cbz	r0, 2af60 <bt_att_get_mtu+0x36>
	return node->next;
   2af36:	6803      	ldr	r3, [r0, #0]
   2af38:	f5a0 71a2 	sub.w	r1, r0, #324	; 0x144
   2af3c:	b10b      	cbz	r3, 2af42 <bt_att_get_mtu+0x18>
   2af3e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   2af42:	2000      	movs	r0, #0
		if (chan->chan.tx.mtu > mtu) {
   2af44:	f8b1 208a 	ldrh.w	r2, [r1, #138]	; 0x8a
   2af48:	4290      	cmp	r0, r2
   2af4a:	bf38      	it	cc
   2af4c:	4610      	movcc	r0, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2af4e:	b13b      	cbz	r3, 2af60 <bt_att_get_mtu+0x36>
   2af50:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
   2af54:	b10a      	cbz	r2, 2af5a <bt_att_get_mtu+0x30>
   2af56:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   2af5a:	4619      	mov	r1, r3
   2af5c:	4613      	mov	r3, r2
   2af5e:	e7f1      	b.n	2af44 <bt_att_get_mtu+0x1a>
}
   2af60:	bd08      	pop	{r3, pc}

0002af62 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2af62:	898a      	ldrh	r2, [r1, #12]
   2af64:	6889      	ldr	r1, [r1, #8]
   2af66:	2300      	movs	r3, #0
   2af68:	f7e7 bee0 	b.w	12d2c <att_handle_rsp>

0002af6c <bt_att_encrypt_change>:
	if (!att_chan->att) {
   2af6c:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   2af70:	b570      	push	{r4, r5, r6, lr}
   2af72:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   2af74:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   2af78:	2b00      	cmp	r3, #0
   2af7a:	d037      	beq.n	2afec <bt_att_encrypt_change+0x80>
	if (hci_status) {
   2af7c:	b171      	cbz	r1, 2af9c <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   2af7e:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   2af82:	2b00      	cmp	r3, #0
   2af84:	d032      	beq.n	2afec <bt_att_encrypt_change+0x80>
   2af86:	7c1b      	ldrb	r3, [r3, #16]
   2af88:	07da      	lsls	r2, r3, #31
   2af8a:	d52f      	bpl.n	2afec <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   2af8c:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   2af8e:	2200      	movs	r2, #0
   2af90:	4630      	mov	r0, r6
   2af92:	4611      	mov	r1, r2
}
   2af94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   2af98:	f7e7 bec8 	b.w	12d2c <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   2af9c:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   2af9e:	4628      	mov	r0, r5
   2afa0:	f7e8 feec 	bl	13d7c <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   2afa4:	7a6b      	ldrb	r3, [r5, #9]
   2afa6:	2b01      	cmp	r3, #1
   2afa8:	d020      	beq.n	2afec <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   2afaa:	f8d4 40ec 	ldr.w	r4, [r4, #236]	; 0xec
   2afae:	b1ec      	cbz	r4, 2afec <bt_att_encrypt_change+0x80>
   2afb0:	7c23      	ldrb	r3, [r4, #16]
   2afb2:	07db      	lsls	r3, r3, #31
   2afb4:	d51a      	bpl.n	2afec <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   2afb6:	68e3      	ldr	r3, [r4, #12]
   2afb8:	2b00      	cmp	r3, #0
   2afba:	d0e7      	beq.n	2af8c <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   2afbc:	6962      	ldr	r2, [r4, #20]
   2afbe:	7c61      	ldrb	r1, [r4, #17]
   2afc0:	4630      	mov	r0, r6
   2afc2:	f7ff fed6 	bl	2ad72 <bt_att_chan_create_pdu>
	if (!buf) {
   2afc6:	4605      	mov	r5, r0
   2afc8:	b140      	cbz	r0, 2afdc <bt_att_encrypt_change+0x70>
	if (req->encode(buf, req->len, req->user_data)) {
   2afca:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   2afce:	68e3      	ldr	r3, [r4, #12]
   2afd0:	4798      	blx	r3
   2afd2:	4602      	mov	r2, r0
   2afd4:	b120      	cbz	r0, 2afe0 <bt_att_encrypt_change+0x74>
		net_buf_unref(buf);
   2afd6:	4628      	mov	r0, r5
   2afd8:	f7f8 fa5e 	bl	23498 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   2afdc:	230e      	movs	r3, #14
   2afde:	e7d6      	b.n	2af8e <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
   2afe0:	4629      	mov	r1, r5
   2afe2:	4630      	mov	r0, r6
   2afe4:	f7e7 fa30 	bl	12448 <chan_send>
   2afe8:	2800      	cmp	r0, #0
   2afea:	d1f4      	bne.n	2afd6 <bt_att_encrypt_change+0x6a>
}
   2afec:	bd70      	pop	{r4, r5, r6, pc}

0002afee <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   2afee:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
   2aff2:	f7e7 becd 	b.w	12d90 <bt_att_disconnected>

0002aff6 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   2aff6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2affa:	4607      	mov	r7, r0
   2affc:	460d      	mov	r5, r1
   2affe:	4616      	mov	r6, r2
   2b000:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   2b002:	f7ff fcc1 	bl	2a988 <att_get>
	if (!att) {
   2b006:	4604      	mov	r4, r0
   2b008:	b938      	cbnz	r0, 2b01a <bt_att_send+0x24>
		net_buf_unref(buf);
   2b00a:	4628      	mov	r0, r5
   2b00c:	f7f8 fa44 	bl	23498 <net_buf_unref>
		return -ENOTCONN;
   2b010:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   2b014:	b002      	add	sp, #8
   2b016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   2b01a:	b146      	cbz	r6, 2b02e <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   2b01c:	f8cd 8000 	str.w	r8, [sp]
   2b020:	4633      	mov	r3, r6
   2b022:	462a      	mov	r2, r5
   2b024:	2104      	movs	r1, #4
   2b026:	4638      	mov	r0, r7
   2b028:	f7ff fa92 	bl	2a550 <bt_l2cap_send_cb>
   2b02c:	e7f2      	b.n	2b014 <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   2b02e:	f100 060c 	add.w	r6, r0, #12
   2b032:	4629      	mov	r1, r5
   2b034:	4630      	mov	r0, r6
   2b036:	f002 f98d 	bl	2d354 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   2b03a:	2200      	movs	r2, #0
   2b03c:	2300      	movs	r3, #0
   2b03e:	4630      	mov	r0, r6
   2b040:	f002 f96a 	bl	2d318 <net_buf_get>
	if (!buf) {
   2b044:	4605      	mov	r5, r0
   2b046:	b908      	cbnz	r0, 2b04c <bt_att_send+0x56>
	return 0;
   2b048:	2000      	movs	r0, #0
   2b04a:	e7e3      	b.n	2b014 <bt_att_send+0x1e>
	return list->head;
   2b04c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b04e:	b1a3      	cbz	r3, 2b07a <bt_att_send+0x84>
	return node->next;
   2b050:	681c      	ldr	r4, [r3, #0]
   2b052:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   2b056:	b10c      	cbz	r4, 2b05c <bt_att_send+0x66>
   2b058:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   2b05c:	2200      	movs	r2, #0
   2b05e:	4629      	mov	r1, r5
   2b060:	f7e7 f9f2 	bl	12448 <chan_send>
		if (err >= 0) {
   2b064:	2800      	cmp	r0, #0
   2b066:	daef      	bge.n	2b048 <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b068:	b13c      	cbz	r4, 2b07a <bt_att_send+0x84>
   2b06a:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   2b06e:	b10b      	cbz	r3, 2b074 <bt_att_send+0x7e>
   2b070:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   2b074:	4620      	mov	r0, r4
   2b076:	461c      	mov	r4, r3
   2b078:	e7f0      	b.n	2b05c <bt_att_send+0x66>
		k_queue_prepend(&att->tx_queue._queue, buf);
   2b07a:	4629      	mov	r1, r5
   2b07c:	4630      	mov	r0, r6
   2b07e:	f003 fb25 	bl	2e6cc <k_queue_prepend>
   2b082:	e7e1      	b.n	2b048 <bt_att_send+0x52>

0002b084 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   2b084:	b510      	push	{r4, lr}
   2b086:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   2b088:	f7ff fc7e 	bl	2a988 <att_get>
	if (!att) {
   2b08c:	b160      	cbz	r0, 2b0a8 <bt_att_req_send+0x24>
	parent->next = child;
   2b08e:	2300      	movs	r3, #0
   2b090:	6023      	str	r3, [r4, #0]
	return list->tail;
   2b092:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   2b094:	b92b      	cbnz	r3, 2b0a2 <bt_att_req_send+0x1e>
	list->head = node;
   2b096:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   2b09a:	f7ff fe1e 	bl	2acda <att_req_send_process>

	return 0;
   2b09e:	2000      	movs	r0, #0
}
   2b0a0:	bd10      	pop	{r4, pc}
	parent->next = child;
   2b0a2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2b0a4:	6084      	str	r4, [r0, #8]
}
   2b0a6:	e7f8      	b.n	2b09a <bt_att_req_send+0x16>
		return -ENOTCONN;
   2b0a8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2b0ac:	e7f8      	b.n	2b0a0 <bt_att_req_send+0x1c>

0002b0ae <found_attr>:
	*found = attr;
   2b0ae:	6010      	str	r0, [r2, #0]
}
   2b0b0:	2000      	movs	r0, #0
   2b0b2:	4770      	bx	lr

0002b0b4 <gatt_ccc_changed>:
{
   2b0b4:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   2b0b6:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   2b0b8:	895a      	ldrh	r2, [r3, #10]
   2b0ba:	428a      	cmp	r2, r1
   2b0bc:	d003      	beq.n	2b0c6 <gatt_ccc_changed+0x12>
		ccc->value = value;
   2b0be:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   2b0c0:	68db      	ldr	r3, [r3, #12]
   2b0c2:	b103      	cbz	r3, 2b0c6 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   2b0c4:	4718      	bx	r3
}
   2b0c6:	4770      	bx	lr

0002b0c8 <gatt_indicate_rsp>:
{
   2b0c8:	b510      	push	{r4, lr}
   2b0ca:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2b0cc:	68a3      	ldr	r3, [r4, #8]
{
   2b0ce:	460a      	mov	r2, r1
	if (params->func) {
   2b0d0:	b10b      	cbz	r3, 2b0d6 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   2b0d2:	4621      	mov	r1, r4
   2b0d4:	4798      	blx	r3
	params->_ref--;
   2b0d6:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2b0d8:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   2b0da:	3b01      	subs	r3, #1
   2b0dc:	b2db      	uxtb	r3, r3
   2b0de:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2b0e0:	b122      	cbz	r2, 2b0ec <gatt_indicate_rsp+0x24>
   2b0e2:	b91b      	cbnz	r3, 2b0ec <gatt_indicate_rsp+0x24>
		params->destroy(params);
   2b0e4:	4620      	mov	r0, r4
}
   2b0e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   2b0ea:	4710      	bx	r2
}
   2b0ec:	bd10      	pop	{r4, pc}

0002b0ee <match_uuid>:
	data->attr = attr;
   2b0ee:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2b0f0:	8091      	strh	r1, [r2, #4]
}
   2b0f2:	2000      	movs	r0, #0
   2b0f4:	4770      	bx	lr

0002b0f6 <ccc_set_cb>:
}
   2b0f6:	2000      	movs	r0, #0
   2b0f8:	4770      	bx	lr

0002b0fa <atomic_get>:
   2b0fa:	f3bf 8f5b 	dmb	ish
   2b0fe:	6800      	ldr	r0, [r0, #0]
   2b100:	f3bf 8f5b 	dmb	ish
}
   2b104:	4770      	bx	lr

0002b106 <gen_hash_m>:
{
   2b106:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2b108:	6807      	ldr	r7, [r0, #0]
   2b10a:	783d      	ldrb	r5, [r7, #0]
{
   2b10c:	b089      	sub	sp, #36	; 0x24
   2b10e:	4606      	mov	r6, r0
   2b110:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2b112:	b10d      	cbz	r5, 2b118 <gen_hash_m+0x12>
	switch (u16->val) {
   2b114:	2501      	movs	r5, #1
   2b116:	e014      	b.n	2b142 <gen_hash_m+0x3c>
   2b118:	887b      	ldrh	r3, [r7, #2]
   2b11a:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2b11e:	d004      	beq.n	2b12a <gen_hash_m+0x24>
   2b120:	d812      	bhi.n	2b148 <gen_hash_m+0x42>
   2b122:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2b126:	2b03      	cmp	r3, #3
   2b128:	d8f4      	bhi.n	2b114 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2b12a:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b12e:	2202      	movs	r2, #2
   2b130:	f10d 010a 	add.w	r1, sp, #10
   2b134:	4620      	mov	r0, r4
   2b136:	f7fd ff94 	bl	29062 <tc_cmac_update>
   2b13a:	b9e0      	cbnz	r0, 2b176 <gen_hash_m+0x70>
			state->err = -EINVAL;
   2b13c:	f06f 0315 	mvn.w	r3, #21
   2b140:	65a3      	str	r3, [r4, #88]	; 0x58
}
   2b142:	4628      	mov	r0, r5
   2b144:	b009      	add	sp, #36	; 0x24
   2b146:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   2b148:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2b14c:	33ff      	adds	r3, #255	; 0xff
   2b14e:	b29b      	uxth	r3, r3
   2b150:	2b04      	cmp	r3, #4
   2b152:	d8df      	bhi.n	2b114 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2b154:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b158:	2202      	movs	r2, #2
   2b15a:	f10d 010a 	add.w	r1, sp, #10
   2b15e:	4620      	mov	r0, r4
   2b160:	f7fd ff7f 	bl	29062 <tc_cmac_update>
   2b164:	2800      	cmp	r0, #0
   2b166:	d0e9      	beq.n	2b13c <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   2b168:	887b      	ldrh	r3, [r7, #2]
   2b16a:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b16e:	2202      	movs	r2, #2
   2b170:	f10d 010a 	add.w	r1, sp, #10
   2b174:	e016      	b.n	2b1a4 <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
   2b176:	887b      	ldrh	r3, [r7, #2]
   2b178:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b17c:	2202      	movs	r2, #2
   2b17e:	f10d 010a 	add.w	r1, sp, #10
   2b182:	4620      	mov	r0, r4
   2b184:	f7fd ff6d 	bl	29062 <tc_cmac_update>
   2b188:	2800      	cmp	r0, #0
   2b18a:	d0d7      	beq.n	2b13c <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2b18c:	2000      	movs	r0, #0
   2b18e:	aa03      	add	r2, sp, #12
   2b190:	6877      	ldr	r7, [r6, #4]
   2b192:	9000      	str	r0, [sp, #0]
   2b194:	2313      	movs	r3, #19
   2b196:	4631      	mov	r1, r6
   2b198:	47b8      	blx	r7
		if (len < 0) {
   2b19a:	1e02      	subs	r2, r0, #0
   2b19c:	da01      	bge.n	2b1a2 <gen_hash_m+0x9c>
			state->err = len;
   2b19e:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2b1a0:	e7cf      	b.n	2b142 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   2b1a2:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b1a4:	4620      	mov	r0, r4
   2b1a6:	f7fd ff5c 	bl	29062 <tc_cmac_update>
   2b1aa:	2800      	cmp	r0, #0
   2b1ac:	d1b2      	bne.n	2b114 <gen_hash_m+0xe>
   2b1ae:	e7c5      	b.n	2b13c <gen_hash_m+0x36>

0002b1b0 <atomic_or>:
{
   2b1b0:	4603      	mov	r3, r0
}
   2b1b2:	f3bf 8f5b 	dmb	ish
   2b1b6:	e853 0f00 	ldrex	r0, [r3]
   2b1ba:	ea40 0201 	orr.w	r2, r0, r1
   2b1be:	e843 2c00 	strex	ip, r2, [r3]
   2b1c2:	f1bc 0f00 	cmp.w	ip, #0
   2b1c6:	d1f6      	bne.n	2b1b6 <atomic_or+0x6>
   2b1c8:	f3bf 8f5b 	dmb	ish
   2b1cc:	4770      	bx	lr

0002b1ce <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2b1ce:	2207      	movs	r2, #7
   2b1d0:	f7fe b8b9 	b.w	29346 <memcpy>

0002b1d4 <cf_write>:
{
   2b1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b1d8:	4698      	mov	r8, r3
   2b1da:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   2b1de:	2b01      	cmp	r3, #1
{
   2b1e0:	4606      	mov	r6, r0
   2b1e2:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   2b1e4:	d830      	bhi.n	2b248 <cf_write+0x74>
	if (offset + len > sizeof(cfg->data)) {
   2b1e6:	4443      	add	r3, r8
   2b1e8:	2b01      	cmp	r3, #1
   2b1ea:	4645      	mov	r5, r8
   2b1ec:	dc2f      	bgt.n	2b24e <cf_write+0x7a>
	cfg = find_cf_cfg(conn);
   2b1ee:	f7e7 fe35 	bl	12e5c <find_cf_cfg>
	if (!cfg) {
   2b1f2:	4604      	mov	r4, r0
   2b1f4:	b918      	cbnz	r0, 2b1fe <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   2b1f6:	f7e7 fe31 	bl	12e5c <find_cf_cfg>
	if (!cfg) {
   2b1fa:	4604      	mov	r4, r0
   2b1fc:	b350      	cbz	r0, 2b254 <cf_write+0x80>
{
   2b1fe:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   2b200:	f1b8 0f00 	cmp.w	r8, #0
   2b204:	d10e      	bne.n	2b224 <cf_write+0x50>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   2b206:	f106 0188 	add.w	r1, r6, #136	; 0x88
   2b20a:	1c60      	adds	r0, r4, #1
   2b20c:	f7ff ffdf 	bl	2b1ce <bt_addr_le_copy>
	cfg->id = conn->id;
   2b210:	4620      	mov	r0, r4
   2b212:	7a33      	ldrb	r3, [r6, #8]
   2b214:	f800 3b0c 	strb.w	r3, [r0], #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2b218:	2101      	movs	r1, #1
   2b21a:	f7ff ffc9 	bl	2b1b0 <atomic_or>
}
   2b21e:	4628      	mov	r0, r5
   2b220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2b224:	7a20      	ldrb	r0, [r4, #8]
   2b226:	fa20 f301 	lsr.w	r3, r0, r1
   2b22a:	07da      	lsls	r2, r3, #31
   2b22c:	d503      	bpl.n	2b236 <cf_write+0x62>
		    !(value[i / 8] & BIT(i % 8))) {
   2b22e:	783b      	ldrb	r3, [r7, #0]
   2b230:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2b232:	07db      	lsls	r3, r3, #31
   2b234:	d511      	bpl.n	2b25a <cf_write+0x86>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   2b236:	3101      	adds	r1, #1
   2b238:	2903      	cmp	r1, #3
   2b23a:	d1e1      	bne.n	2b200 <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   2b23c:	783b      	ldrb	r3, [r7, #0]
   2b23e:	f003 0307 	and.w	r3, r3, #7
   2b242:	4318      	orrs	r0, r3
   2b244:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   2b246:	e7de      	b.n	2b206 <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2b248:	f06f 0506 	mvn.w	r5, #6
   2b24c:	e7e7      	b.n	2b21e <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   2b24e:	f06f 050c 	mvn.w	r5, #12
   2b252:	e7e4      	b.n	2b21e <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   2b254:	f06f 0510 	mvn.w	r5, #16
   2b258:	e7e1      	b.n	2b21e <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   2b25a:	f06f 0512 	mvn.w	r5, #18
   2b25e:	e7de      	b.n	2b21e <cf_write+0x4a>

0002b260 <clear_ccc_cfg>:
{
   2b260:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2b262:	2500      	movs	r5, #0
{
   2b264:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2b266:	4669      	mov	r1, sp
   2b268:	3001      	adds	r0, #1
   2b26a:	9500      	str	r5, [sp, #0]
   2b26c:	f8cd 5003 	str.w	r5, [sp, #3]
   2b270:	f7ff ffad 	bl	2b1ce <bt_addr_le_copy>
	cfg->id = 0U;
   2b274:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   2b276:	8125      	strh	r5, [r4, #8]
}
   2b278:	b003      	add	sp, #12
   2b27a:	bd30      	pop	{r4, r5, pc}

0002b27c <atomic_and>:
{
   2b27c:	4603      	mov	r3, r0
}
   2b27e:	f3bf 8f5b 	dmb	ish
   2b282:	e853 0f00 	ldrex	r0, [r3]
   2b286:	ea00 0201 	and.w	r2, r0, r1
   2b28a:	e843 2c00 	strex	ip, r2, [r3]
   2b28e:	f1bc 0f00 	cmp.w	ip, #0
   2b292:	d1f6      	bne.n	2b282 <atomic_and+0x6>
   2b294:	f3bf 8f5b 	dmb	ish
   2b298:	4770      	bx	lr

0002b29a <gatt_foreach_iter>:
{
   2b29a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle > end_handle) {
   2b29c:	4299      	cmp	r1, r3
{
   2b29e:	4604      	mov	r4, r0
   2b2a0:	9e08      	ldr	r6, [sp, #32]
   2b2a2:	e9dd 0706 	ldrd	r0, r7, [sp, #24]
   2b2a6:	460d      	mov	r5, r1
	if (handle > end_handle) {
   2b2a8:	d810      	bhi.n	2b2cc <gatt_foreach_iter+0x32>
	if (handle < start_handle) {
   2b2aa:	4291      	cmp	r1, r2
   2b2ac:	d201      	bcs.n	2b2b2 <gatt_foreach_iter+0x18>
		return BT_GATT_ITER_CONTINUE;
   2b2ae:	2001      	movs	r0, #1
}
   2b2b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   2b2b2:	b968      	cbnz	r0, 2b2d0 <gatt_foreach_iter+0x36>
	if (attr_data && attr_data != attr->user_data) {
   2b2b4:	b997      	cbnz	r7, 2b2dc <gatt_foreach_iter+0x42>
	*num_matches -= 1;
   2b2b6:	8833      	ldrh	r3, [r6, #0]
	result = func(attr, handle, user_data);
   2b2b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	*num_matches -= 1;
   2b2ba:	3b01      	subs	r3, #1
   2b2bc:	8033      	strh	r3, [r6, #0]
	result = func(attr, handle, user_data);
   2b2be:	4629      	mov	r1, r5
   2b2c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b2c2:	4620      	mov	r0, r4
   2b2c4:	4798      	blx	r3
	if (!*num_matches) {
   2b2c6:	8833      	ldrh	r3, [r6, #0]
   2b2c8:	2b00      	cmp	r3, #0
   2b2ca:	d1f1      	bne.n	2b2b0 <gatt_foreach_iter+0x16>
		return BT_GATT_ITER_STOP;
   2b2cc:	2000      	movs	r0, #0
   2b2ce:	e7ef      	b.n	2b2b0 <gatt_foreach_iter+0x16>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   2b2d0:	6821      	ldr	r1, [r4, #0]
   2b2d2:	f7fe f910 	bl	294f6 <bt_uuid_cmp>
   2b2d6:	2800      	cmp	r0, #0
   2b2d8:	d0ec      	beq.n	2b2b4 <gatt_foreach_iter+0x1a>
   2b2da:	e7e8      	b.n	2b2ae <gatt_foreach_iter+0x14>
	if (attr_data && attr_data != attr->user_data) {
   2b2dc:	68e3      	ldr	r3, [r4, #12]
   2b2de:	429f      	cmp	r7, r3
   2b2e0:	d1e5      	bne.n	2b2ae <gatt_foreach_iter+0x14>
   2b2e2:	e7e8      	b.n	2b2b6 <gatt_foreach_iter+0x1c>

0002b2e4 <clear_cf_cfg>:
{
   2b2e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2b2e6:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2b2e8:	2500      	movs	r5, #0
   2b2ea:	4669      	mov	r1, sp
   2b2ec:	3001      	adds	r0, #1
   2b2ee:	9500      	str	r5, [sp, #0]
   2b2f0:	f8cd 5003 	str.w	r5, [sp, #3]
   2b2f4:	f7ff ff6b 	bl	2b1ce <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   2b2f8:	f104 0008 	add.w	r0, r4, #8
   2b2fc:	2201      	movs	r2, #1
   2b2fe:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2b300:	340c      	adds	r4, #12
   2b302:	f7fe f82b 	bl	2935c <memset>
   2b306:	f3bf 8f5b 	dmb	ish
   2b30a:	e854 3f00 	ldrex	r3, [r4]
   2b30e:	e844 5200 	strex	r2, r5, [r4]
   2b312:	2a00      	cmp	r2, #0
   2b314:	d1f9      	bne.n	2b30a <clear_cf_cfg+0x26>
   2b316:	f3bf 8f5b 	dmb	ish
}
   2b31a:	b003      	add	sp, #12
   2b31c:	bd30      	pop	{r4, r5, pc}

0002b31e <read_ppcp>:
{
   2b31e:	b513      	push	{r0, r1, r4, lr}
   2b320:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   2b322:	2218      	movs	r2, #24
{
   2b324:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   2b328:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   2b32c:	2228      	movs	r2, #40	; 0x28
   2b32e:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   2b332:	2200      	movs	r2, #0
   2b334:	f8ad 2004 	strh.w	r2, [sp, #4]
	if (offset > value_len) {
   2b338:	2908      	cmp	r1, #8
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   2b33a:	f04f 022a 	mov.w	r2, #42	; 0x2a
   2b33e:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   2b342:	d80b      	bhi.n	2b35c <read_ppcp+0x3e>
	len = MIN(buf_len, value_len - offset);
   2b344:	f1c1 0408 	rsb	r4, r1, #8
   2b348:	429c      	cmp	r4, r3
   2b34a:	bfa8      	it	ge
   2b34c:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2b34e:	4622      	mov	r2, r4
   2b350:	4469      	add	r1, sp
   2b352:	f7fd fff8 	bl	29346 <memcpy>
}
   2b356:	4620      	mov	r0, r4
   2b358:	b002      	add	sp, #8
   2b35a:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2b35c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   2b360:	e7f9      	b.n	2b356 <read_ppcp+0x38>

0002b362 <read_appearance>:
{
   2b362:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2b364:	4615      	mov	r5, r2
   2b366:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   2b36a:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2b36c:	f7fe fc62 	bl	29c34 <bt_get_appearance>
	if (offset > value_len) {
   2b370:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2b372:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   2b376:	d80e      	bhi.n	2b396 <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   2b378:	f1c6 0402 	rsb	r4, r6, #2
   2b37c:	42bc      	cmp	r4, r7
   2b37e:	bfa8      	it	ge
   2b380:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2b382:	f10d 0306 	add.w	r3, sp, #6
   2b386:	4622      	mov	r2, r4
   2b388:	1999      	adds	r1, r3, r6
   2b38a:	4628      	mov	r0, r5
   2b38c:	f7fd ffdb 	bl	29346 <memcpy>
}
   2b390:	4620      	mov	r0, r4
   2b392:	b003      	add	sp, #12
   2b394:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2b396:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2b39a:	e7f9      	b.n	2b390 <read_appearance+0x2e>

0002b39c <read_name>:
{
   2b39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b3a0:	4698      	mov	r8, r3
   2b3a2:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   2b3a6:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   2b3a8:	f7e5 fbf0 	bl	10b8c <bt_get_name>
   2b3ac:	4607      	mov	r7, r0
				 strlen(name));
   2b3ae:	f7fd ff8c 	bl	292ca <strlen>
	if (offset > value_len) {
   2b3b2:	b283      	uxth	r3, r0
   2b3b4:	42b3      	cmp	r3, r6
   2b3b6:	d30c      	bcc.n	2b3d2 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   2b3b8:	1b9c      	subs	r4, r3, r6
   2b3ba:	4544      	cmp	r4, r8
   2b3bc:	bfa8      	it	ge
   2b3be:	4644      	movge	r4, r8
   2b3c0:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2b3c2:	4622      	mov	r2, r4
   2b3c4:	19b9      	adds	r1, r7, r6
   2b3c6:	4628      	mov	r0, r5
   2b3c8:	f7fd ffbd 	bl	29346 <memcpy>
}
   2b3cc:	4620      	mov	r0, r4
   2b3ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2b3d2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2b3d6:	e7f9      	b.n	2b3cc <read_name+0x30>

0002b3d8 <cf_read>:
{
   2b3d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2b3da:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   2b3dc:	2300      	movs	r3, #0
{
   2b3de:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   2b3e2:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2b3e6:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   2b3e8:	f7e7 fd38 	bl	12e5c <find_cf_cfg>
	if (cfg) {
   2b3ec:	b128      	cbz	r0, 2b3fa <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   2b3ee:	f100 0108 	add.w	r1, r0, #8
   2b3f2:	2201      	movs	r2, #1
   2b3f4:	a801      	add	r0, sp, #4
   2b3f6:	f7fd ffa6 	bl	29346 <memcpy>
	if (offset > value_len) {
   2b3fa:	2e01      	cmp	r6, #1
   2b3fc:	d80d      	bhi.n	2b41a <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   2b3fe:	f1c6 0401 	rsb	r4, r6, #1
   2b402:	42bc      	cmp	r4, r7
   2b404:	bfa8      	it	ge
   2b406:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2b408:	ab01      	add	r3, sp, #4
   2b40a:	4622      	mov	r2, r4
   2b40c:	1999      	adds	r1, r3, r6
   2b40e:	4628      	mov	r0, r5
   2b410:	f7fd ff99 	bl	29346 <memcpy>
}
   2b414:	4620      	mov	r0, r4
   2b416:	b003      	add	sp, #12
   2b418:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2b41a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2b41e:	e7f9      	b.n	2b414 <cf_read+0x3c>

0002b420 <bt_gatt_attr_read_service>:
{
   2b420:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   2b422:	68c9      	ldr	r1, [r1, #12]
{
   2b424:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   2b428:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   2b42a:	780b      	ldrb	r3, [r1, #0]
{
   2b42c:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   2b42e:	b993      	cbnz	r3, 2b456 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2b430:	884b      	ldrh	r3, [r1, #2]
   2b432:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   2b436:	2d02      	cmp	r5, #2
   2b438:	d819      	bhi.n	2b46e <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   2b43a:	f1c5 0202 	rsb	r2, r5, #2
   2b43e:	4294      	cmp	r4, r2
   2b440:	bfa8      	it	ge
   2b442:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2b444:	f10d 0306 	add.w	r3, sp, #6
   2b448:	4622      	mov	r2, r4
   2b44a:	1959      	adds	r1, r3, r5
   2b44c:	f7fd ff7b 	bl	29346 <memcpy>
}
   2b450:	4620      	mov	r0, r4
   2b452:	b003      	add	sp, #12
   2b454:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   2b456:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   2b458:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   2b45c:	d807      	bhi.n	2b46e <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   2b45e:	f1c5 0210 	rsb	r2, r5, #16
   2b462:	4294      	cmp	r4, r2
   2b464:	bfa8      	it	ge
   2b466:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2b468:	4622      	mov	r2, r4
   2b46a:	4429      	add	r1, r5
   2b46c:	e7ee      	b.n	2b44c <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2b46e:	f06f 0406 	mvn.w	r4, #6
   2b472:	e7ed      	b.n	2b450 <bt_gatt_attr_read_service+0x30>

0002b474 <cf_set>:
{
   2b474:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2b478:	4688      	mov	r8, r1
   2b47a:	4616      	mov	r6, r2
   2b47c:	461f      	mov	r7, r3
	if (!name) {
   2b47e:	4605      	mov	r5, r0
   2b480:	b928      	cbnz	r0, 2b48e <cf_set+0x1a>
		return -EINVAL;
   2b482:	f06f 0415 	mvn.w	r4, #21
}
   2b486:	4620      	mov	r0, r4
   2b488:	b004      	add	sp, #16
   2b48a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   2b48e:	a902      	add	r1, sp, #8
   2b490:	f7fe f80b 	bl	294aa <bt_settings_decode_key>
	if (err) {
   2b494:	4604      	mov	r4, r0
   2b496:	2800      	cmp	r0, #0
   2b498:	d1f3      	bne.n	2b482 <cf_set+0xe>
	settings_name_next(name, &next);
   2b49a:	a901      	add	r1, sp, #4
   2b49c:	4628      	mov	r0, r5
   2b49e:	f7fc fc77 	bl	27d90 <settings_name_next>
	if (!next) {
   2b4a2:	9801      	ldr	r0, [sp, #4]
   2b4a4:	b9d0      	cbnz	r0, 2b4dc <cf_set+0x68>
	cfg = find_cf_cfg_by_addr(id, &addr);
   2b4a6:	a902      	add	r1, sp, #8
   2b4a8:	2000      	movs	r0, #0
   2b4aa:	f7e7 fdf5 	bl	13098 <find_cf_cfg_by_addr>
	if (!cfg) {
   2b4ae:	4605      	mov	r5, r0
   2b4b0:	b948      	cbnz	r0, 2b4c6 <cf_set+0x52>
		cfg = find_cf_cfg(NULL);
   2b4b2:	f7e7 fcd3 	bl	12e5c <find_cf_cfg>
		if (!cfg) {
   2b4b6:	4605      	mov	r5, r0
   2b4b8:	b1d8      	cbz	r0, 2b4f2 <cf_set+0x7e>
		cfg->id = id;
   2b4ba:	2300      	movs	r3, #0
   2b4bc:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   2b4c0:	a902      	add	r1, sp, #8
   2b4c2:	f7ff fe84 	bl	2b1ce <bt_addr_le_copy>
	if (len_rd) {
   2b4c6:	f1b8 0f00 	cmp.w	r8, #0
   2b4ca:	d00e      	beq.n	2b4ea <cf_set+0x76>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   2b4cc:	2201      	movs	r2, #1
   2b4ce:	f105 0108 	add.w	r1, r5, #8
   2b4d2:	4638      	mov	r0, r7
   2b4d4:	47b0      	blx	r6
		if (len < 0) {
   2b4d6:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   2b4da:	e7d4      	b.n	2b486 <cf_set+0x12>
		unsigned long next_id = strtoul(next, NULL, 10);
   2b4dc:	220a      	movs	r2, #10
   2b4de:	4621      	mov	r1, r4
   2b4e0:	f7fd fe70 	bl	291c4 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   2b4e4:	2800      	cmp	r0, #0
   2b4e6:	d0de      	beq.n	2b4a6 <cf_set+0x32>
   2b4e8:	e7cb      	b.n	2b482 <cf_set+0xe>
		clear_cf_cfg(cfg);
   2b4ea:	4628      	mov	r0, r5
   2b4ec:	f7ff fefa 	bl	2b2e4 <clear_cf_cfg>
   2b4f0:	e7c9      	b.n	2b486 <cf_set+0x12>
			return -ENOMEM;
   2b4f2:	f06f 040b 	mvn.w	r4, #11
   2b4f6:	e7c6      	b.n	2b486 <cf_set+0x12>

0002b4f8 <ccc_find_cfg>:
{
   2b4f8:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   2b4fa:	7803      	ldrb	r3, [r0, #0]
   2b4fc:	4293      	cmp	r3, r2
{
   2b4fe:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   2b500:	d001      	beq.n	2b506 <ccc_find_cfg+0xe>
	return NULL;
   2b502:	2000      	movs	r0, #0
}
   2b504:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   2b506:	2207      	movs	r2, #7
   2b508:	3001      	adds	r0, #1
   2b50a:	f7fd ff0b 	bl	29324 <memcmp>
		if (id == ccc->cfg[i].id &&
   2b50e:	2800      	cmp	r0, #0
   2b510:	d1f7      	bne.n	2b502 <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   2b512:	4620      	mov	r0, r4
   2b514:	e7f6      	b.n	2b504 <ccc_find_cfg+0xc>

0002b516 <find_ccc_cfg>:
{
   2b516:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2b518:	460c      	mov	r4, r1
						    &cfg->peer)) {
   2b51a:	1c4d      	adds	r5, r1, #1
		if (conn) {
   2b51c:	b148      	cbz	r0, 2b532 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   2b51e:	7809      	ldrb	r1, [r1, #0]
   2b520:	462a      	mov	r2, r5
   2b522:	f7fe ff42 	bl	2a3aa <bt_conn_is_peer_addr_le>
	return NULL;
   2b526:	2800      	cmp	r0, #0
   2b528:	bf08      	it	eq
   2b52a:	2400      	moveq	r4, #0
}
   2b52c:	4620      	mov	r0, r4
   2b52e:	b003      	add	sp, #12
   2b530:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2b532:	9000      	str	r0, [sp, #0]
   2b534:	2207      	movs	r2, #7
   2b536:	f8cd 0003 	str.w	r0, [sp, #3]
   2b53a:	4669      	mov	r1, sp
   2b53c:	4628      	mov	r0, r5
   2b53e:	f7fd fef1 	bl	29324 <memcmp>
	return NULL;
   2b542:	2800      	cmp	r0, #0
   2b544:	bf18      	it	ne
   2b546:	2400      	movne	r4, #0
   2b548:	e7f0      	b.n	2b52c <find_ccc_cfg+0x16>

0002b54a <bt_gatt_attr_write_ccc>:
{
   2b54a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b54e:	4698      	mov	r8, r3
   2b550:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   2b554:	f8d1 a00c 	ldr.w	sl, [r1, #12]
{
   2b558:	4607      	mov	r7, r0
   2b55a:	4689      	mov	r9, r1
	if (offset) {
   2b55c:	2b00      	cmp	r3, #0
   2b55e:	d142      	bne.n	2b5e6 <bt_gatt_attr_write_ccc+0x9c>
	if (!len || len > sizeof(uint16_t)) {
   2b560:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   2b564:	2b01      	cmp	r3, #1
   2b566:	d841      	bhi.n	2b5ec <bt_gatt_attr_write_ccc+0xa2>
		value = *(uint8_t *)buf;
   2b568:	7816      	ldrb	r6, [r2, #0]
	if (len < sizeof(uint16_t)) {
   2b56a:	f1b8 0f01 	cmp.w	r8, #1
	cfg = find_ccc_cfg(conn, ccc);
   2b56e:	4651      	mov	r1, sl
   2b570:	bf14      	ite	ne
   2b572:	8816      	ldrhne	r6, [r2, #0]
		value = *(uint8_t *)buf;
   2b574:	b2b6      	uxtheq	r6, r6
	cfg = find_ccc_cfg(conn, ccc);
   2b576:	f7ff ffce 	bl	2b516 <find_ccc_cfg>
	if (!cfg) {
   2b57a:	4605      	mov	r5, r0
   2b57c:	b978      	cbnz	r0, 2b59e <bt_gatt_attr_write_ccc+0x54>
		if (!value) {
   2b57e:	b916      	cbnz	r6, 2b586 <bt_gatt_attr_write_ccc+0x3c>
			return len;
   2b580:	4640      	mov	r0, r8
}
   2b582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   2b586:	4651      	mov	r1, sl
   2b588:	f7ff ffc5 	bl	2b516 <find_ccc_cfg>
		if (!cfg) {
   2b58c:	4605      	mov	r5, r0
   2b58e:	b380      	cbz	r0, 2b5f2 <bt_gatt_attr_write_ccc+0xa8>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   2b590:	f107 0188 	add.w	r1, r7, #136	; 0x88
   2b594:	3001      	adds	r0, #1
   2b596:	f7ff fe1a 	bl	2b1ce <bt_addr_le_copy>
		cfg->id = conn->id;
   2b59a:	7a3b      	ldrb	r3, [r7, #8]
   2b59c:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   2b59e:	f8da 3010 	ldr.w	r3, [sl, #16]
   2b5a2:	b9a3      	cbnz	r3, 2b5ce <bt_gatt_attr_write_ccc+0x84>
	if (cfg->value != ccc->value) {
   2b5a4:	f8ba 300a 	ldrh.w	r3, [sl, #10]
	value_changed = cfg->value != value;
   2b5a8:	892c      	ldrh	r4, [r5, #8]
	cfg->value = value;
   2b5aa:	812e      	strh	r6, [r5, #8]
	if (cfg->value != ccc->value) {
   2b5ac:	42b3      	cmp	r3, r6
   2b5ae:	d003      	beq.n	2b5b8 <bt_gatt_attr_write_ccc+0x6e>
		gatt_ccc_changed(attr, ccc);
   2b5b0:	4651      	mov	r1, sl
   2b5b2:	4648      	mov	r0, r9
   2b5b4:	f7ff fd7e 	bl	2b0b4 <gatt_ccc_changed>
	if (value_changed) {
   2b5b8:	42b4      	cmp	r4, r6
   2b5ba:	d002      	beq.n	2b5c2 <bt_gatt_attr_write_ccc+0x78>
		gatt_ccc_conn_enqueue(conn);
   2b5bc:	4638      	mov	r0, r7
   2b5be:	f7e7 fcb7 	bl	12f30 <gatt_ccc_conn_enqueue>
	if (!value) {
   2b5c2:	2e00      	cmp	r6, #0
   2b5c4:	d1dc      	bne.n	2b580 <bt_gatt_attr_write_ccc+0x36>
		clear_ccc_cfg(cfg);
   2b5c6:	4628      	mov	r0, r5
   2b5c8:	f7ff fe4a 	bl	2b260 <clear_ccc_cfg>
   2b5cc:	e7d8      	b.n	2b580 <bt_gatt_attr_write_ccc+0x36>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   2b5ce:	4632      	mov	r2, r6
   2b5d0:	4649      	mov	r1, r9
   2b5d2:	4638      	mov	r0, r7
   2b5d4:	4798      	blx	r3
		if (write < 0) {
   2b5d6:	2800      	cmp	r0, #0
   2b5d8:	dbd3      	blt.n	2b582 <bt_gatt_attr_write_ccc+0x38>
		if (write != sizeof(value) && write != 1) {
   2b5da:	1e44      	subs	r4, r0, #1
   2b5dc:	2c01      	cmp	r4, #1
   2b5de:	d9e1      	bls.n	2b5a4 <bt_gatt_attr_write_ccc+0x5a>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   2b5e0:	f06f 000d 	mvn.w	r0, #13
   2b5e4:	e7cd      	b.n	2b582 <bt_gatt_attr_write_ccc+0x38>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2b5e6:	f06f 0006 	mvn.w	r0, #6
   2b5ea:	e7ca      	b.n	2b582 <bt_gatt_attr_write_ccc+0x38>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   2b5ec:	f06f 000c 	mvn.w	r0, #12
   2b5f0:	e7c7      	b.n	2b582 <bt_gatt_attr_write_ccc+0x38>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   2b5f2:	f06f 0010 	mvn.w	r0, #16
   2b5f6:	e7c4      	b.n	2b582 <bt_gatt_attr_write_ccc+0x38>

0002b5f8 <bt_gatt_attr_read_ccc>:
{
   2b5f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   2b5fa:	68c9      	ldr	r1, [r1, #12]
{
   2b5fc:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   2b600:	4615      	mov	r5, r2
   2b602:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   2b604:	f7ff ff87 	bl	2b516 <find_ccc_cfg>
	if (cfg) {
   2b608:	b100      	cbz	r0, 2b60c <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   2b60a:	8900      	ldrh	r0, [r0, #8]
   2b60c:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   2b610:	2e02      	cmp	r6, #2
   2b612:	d80e      	bhi.n	2b632 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   2b614:	f1c6 0402 	rsb	r4, r6, #2
   2b618:	42bc      	cmp	r4, r7
   2b61a:	bfa8      	it	ge
   2b61c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2b61e:	f10d 0306 	add.w	r3, sp, #6
   2b622:	4622      	mov	r2, r4
   2b624:	1999      	adds	r1, r3, r6
   2b626:	4628      	mov	r0, r5
   2b628:	f7fd fe8d 	bl	29346 <memcpy>
}
   2b62c:	4620      	mov	r0, r4
   2b62e:	b003      	add	sp, #12
   2b630:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2b632:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2b636:	e7f9      	b.n	2b62c <bt_gatt_attr_read_ccc+0x34>

0002b638 <sc_save>:
{
   2b638:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2b63c:	4680      	mov	r8, r0
   2b63e:	460f      	mov	r7, r1
   2b640:	4616      	mov	r6, r2
   2b642:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   2b644:	f7e7 fdc0 	bl	131c8 <find_sc_cfg>
	if (!cfg) {
   2b648:	4604      	mov	r4, r0
   2b64a:	b960      	cbnz	r0, 2b666 <sc_save+0x2e>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   2b64c:	4669      	mov	r1, sp
   2b64e:	9000      	str	r0, [sp, #0]
   2b650:	f8cd 0003 	str.w	r0, [sp, #3]
   2b654:	f7e7 fdb8 	bl	131c8 <find_sc_cfg>
		if (!cfg) {
   2b658:	4604      	mov	r4, r0
   2b65a:	b1d0      	cbz	r0, 2b692 <sc_save+0x5a>
		cfg->id = id;
   2b65c:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   2b660:	4639      	mov	r1, r7
   2b662:	f7ff fdb4 	bl	2b1ce <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   2b666:	8922      	ldrh	r2, [r4, #8]
   2b668:	8963      	ldrh	r3, [r4, #10]
   2b66a:	b972      	cbnz	r2, 2b68a <sc_save+0x52>
   2b66c:	b97b      	cbnz	r3, 2b68e <sc_save+0x56>
		cfg->data.start = start;
   2b66e:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   2b670:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   2b672:	4621      	mov	r1, r4
   2b674:	f811 0b01 	ldrb.w	r0, [r1], #1
   2b678:	f7fe fade 	bl	29c38 <bt_addr_le_is_bonded>
   2b67c:	b148      	cbz	r0, 2b692 <sc_save+0x5a>
		sc_store(cfg);
   2b67e:	4620      	mov	r0, r4
}
   2b680:	b002      	add	sp, #8
   2b682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   2b686:	f7e7 bc0b 	b.w	12ea0 <sc_store>
	if (new_start >= *start && new_end <= *end) {
   2b68a:	4296      	cmp	r6, r2
   2b68c:	d304      	bcc.n	2b698 <sc_save+0x60>
   2b68e:	429d      	cmp	r5, r3
   2b690:	d8ee      	bhi.n	2b670 <sc_save+0x38>
}
   2b692:	b002      	add	sp, #8
   2b694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (*end < new_end) {
   2b698:	429d      	cmp	r5, r3
		*start = new_start;
   2b69a:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   2b69c:	d9e9      	bls.n	2b672 <sc_save+0x3a>
   2b69e:	e7e7      	b.n	2b670 <sc_save+0x38>

0002b6a0 <sc_clear>:
{
   2b6a0:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2b6a2:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   2b6a6:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2b6a8:	4631      	mov	r1, r6
   2b6aa:	7a00      	ldrb	r0, [r0, #8]
   2b6ac:	f7fe fac4 	bl	29c38 <bt_addr_le_is_bonded>
   2b6b0:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   2b6b2:	4631      	mov	r1, r6
   2b6b4:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2b6b6:	b11d      	cbz	r5, 2b6c0 <sc_clear+0x20>
}
   2b6b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   2b6bc:	f7e7 bda6 	b.w	1320c <bt_gatt_clear_sc>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2b6c0:	f7e7 fd82 	bl	131c8 <find_sc_cfg>
		if (cfg) {
   2b6c4:	b128      	cbz	r0, 2b6d2 <sc_clear+0x32>
	memset(cfg, 0, sizeof(*cfg));
   2b6c6:	4629      	mov	r1, r5
   2b6c8:	220c      	movs	r2, #12
}
   2b6ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   2b6ce:	f7fd be45 	b.w	2935c <memset>
}
   2b6d2:	bd70      	pop	{r4, r5, r6, pc}

0002b6d4 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2b6d4:	2a02      	cmp	r2, #2
{
   2b6d6:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2b6d8:	d108      	bne.n	2b6ec <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2b6da:	2300      	movs	r3, #0
   2b6dc:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2b6e0:	461a      	mov	r2, r3
   2b6e2:	7a00      	ldrb	r0, [r0, #8]
   2b6e4:	f7ff ffa8 	bl	2b638 <sc_save>
}
   2b6e8:	2002      	movs	r0, #2
   2b6ea:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2b6ec:	f7ff ffd8 	bl	2b6a0 <sc_clear>
   2b6f0:	e7fa      	b.n	2b6e8 <sc_ccc_cfg_write+0x14>

0002b6f2 <sc_set>:
{
   2b6f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b6f6:	460e      	mov	r6, r1
   2b6f8:	b086      	sub	sp, #24
   2b6fa:	4617      	mov	r7, r2
   2b6fc:	4698      	mov	r8, r3
	if (!name) {
   2b6fe:	4605      	mov	r5, r0
   2b700:	b928      	cbnz	r0, 2b70e <sc_set+0x1c>
		return -EINVAL;
   2b702:	f06f 0415 	mvn.w	r4, #21
}
   2b706:	4620      	mov	r0, r4
   2b708:	b006      	add	sp, #24
   2b70a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   2b70e:	a902      	add	r1, sp, #8
   2b710:	f7fd fecb 	bl	294aa <bt_settings_decode_key>
	if (err) {
   2b714:	4604      	mov	r4, r0
   2b716:	2800      	cmp	r0, #0
   2b718:	d1f3      	bne.n	2b702 <sc_set+0x10>
	settings_name_next(name, &next);
   2b71a:	a901      	add	r1, sp, #4
   2b71c:	4628      	mov	r0, r5
   2b71e:	f7fc fb37 	bl	27d90 <settings_name_next>
	if (!next) {
   2b722:	9801      	ldr	r0, [sp, #4]
   2b724:	b998      	cbnz	r0, 2b74e <sc_set+0x5c>
	cfg = find_sc_cfg(id, &addr);
   2b726:	a902      	add	r1, sp, #8
   2b728:	2000      	movs	r0, #0
   2b72a:	f7e7 fd4d 	bl	131c8 <find_sc_cfg>
	if (!cfg && len_rd) {
   2b72e:	4605      	mov	r5, r0
   2b730:	bb08      	cbnz	r0, 2b776 <sc_set+0x84>
   2b732:	2e00      	cmp	r6, #0
   2b734:	d0e7      	beq.n	2b706 <sc_set+0x14>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   2b736:	a904      	add	r1, sp, #16
   2b738:	9004      	str	r0, [sp, #16]
   2b73a:	4604      	mov	r4, r0
   2b73c:	f8cd 0013 	str.w	r0, [sp, #19]
   2b740:	f7e7 fd42 	bl	131c8 <find_sc_cfg>
		if (!cfg) {
   2b744:	4605      	mov	r5, r0
   2b746:	b948      	cbnz	r0, 2b75c <sc_set+0x6a>
			return -ENOMEM;
   2b748:	f06f 040b 	mvn.w	r4, #11
   2b74c:	e7db      	b.n	2b706 <sc_set+0x14>
		unsigned long next_id = strtoul(next, NULL, 10);
   2b74e:	220a      	movs	r2, #10
   2b750:	4621      	mov	r1, r4
   2b752:	f7fd fd37 	bl	291c4 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   2b756:	2800      	cmp	r0, #0
   2b758:	d0e5      	beq.n	2b726 <sc_set+0x34>
   2b75a:	e7d2      	b.n	2b702 <sc_set+0x10>
		cfg->id = id;
   2b75c:	f800 4b01 	strb.w	r4, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   2b760:	a902      	add	r1, sp, #8
   2b762:	f7ff fd34 	bl	2b1ce <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   2b766:	2204      	movs	r2, #4
   2b768:	f105 0108 	add.w	r1, r5, #8
   2b76c:	4640      	mov	r0, r8
   2b76e:	47b8      	blx	r7
		if (len < 0) {
   2b770:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   2b774:	e7c7      	b.n	2b706 <sc_set+0x14>
	if (len_rd) {
   2b776:	2e00      	cmp	r6, #0
   2b778:	d1f5      	bne.n	2b766 <sc_set+0x74>
		memset(cfg, 0, sizeof(*cfg));
   2b77a:	220c      	movs	r2, #12
   2b77c:	4631      	mov	r1, r6
   2b77e:	f7fd fded 	bl	2935c <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   2b782:	e7c0      	b.n	2b706 <sc_set+0x14>

0002b784 <sc_restore_rsp>:
{
   2b784:	b538      	push	{r3, r4, r5, lr}
   2b786:	4604      	mov	r4, r0
   2b788:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   2b78a:	f7e7 fb67 	bl	12e5c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   2b78e:	b130      	cbz	r0, 2b79e <sc_restore_rsp+0x1a>
   2b790:	7a03      	ldrb	r3, [r0, #8]
   2b792:	07db      	lsls	r3, r3, #31
   2b794:	d503      	bpl.n	2b79e <sc_restore_rsp+0x1a>
   2b796:	2101      	movs	r1, #1
   2b798:	300c      	adds	r0, #12
   2b79a:	f7ff fd09 	bl	2b1b0 <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2b79e:	b985      	cbnz	r5, 2b7c2 <sc_restore_rsp+0x3e>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2b7a0:	7a20      	ldrb	r0, [r4, #8]
   2b7a2:	f104 0188 	add.w	r1, r4, #136	; 0x88
   2b7a6:	f7e7 fd0f 	bl	131c8 <find_sc_cfg>
		if (sc_cfg) {
   2b7aa:	4604      	mov	r4, r0
   2b7ac:	b148      	cbz	r0, 2b7c2 <sc_restore_rsp+0x3e>
	memset(&cfg->data, 0, sizeof(cfg->data));
   2b7ae:	4629      	mov	r1, r5
   2b7b0:	2204      	movs	r2, #4
   2b7b2:	3008      	adds	r0, #8
   2b7b4:	f7fd fdd2 	bl	2935c <memset>
		sc_store(cfg);
   2b7b8:	4620      	mov	r0, r4
}
   2b7ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   2b7be:	f7e7 bb6f 	b.w	12ea0 <sc_store>
}
   2b7c2:	bd38      	pop	{r3, r4, r5, pc}

0002b7c4 <bt_gatt_attr_value_handle>:
{
   2b7c4:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2b7c6:	4604      	mov	r4, r0
   2b7c8:	b910      	cbnz	r0, 2b7d0 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2b7ca:	2000      	movs	r0, #0
}
   2b7cc:	b002      	add	sp, #8
   2b7ce:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2b7d0:	2300      	movs	r3, #0
   2b7d2:	f88d 3004 	strb.w	r3, [sp, #4]
   2b7d6:	6800      	ldr	r0, [r0, #0]
   2b7d8:	f642 0303 	movw	r3, #10243	; 0x2803
   2b7dc:	a901      	add	r1, sp, #4
   2b7de:	f8ad 3006 	strh.w	r3, [sp, #6]
   2b7e2:	f7fd fe88 	bl	294f6 <bt_uuid_cmp>
   2b7e6:	2800      	cmp	r0, #0
   2b7e8:	d1ef      	bne.n	2b7ca <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2b7ea:	68e3      	ldr	r3, [r4, #12]
   2b7ec:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2b7ee:	2800      	cmp	r0, #0
   2b7f0:	d1ec      	bne.n	2b7cc <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2b7f2:	4620      	mov	r0, r4
   2b7f4:	f7e7 fdec 	bl	133d0 <bt_gatt_attr_get_handle>
   2b7f8:	3001      	adds	r0, #1
   2b7fa:	b280      	uxth	r0, r0
	return handle;
   2b7fc:	e7e6      	b.n	2b7cc <bt_gatt_attr_value_handle+0x8>

0002b7fe <bt_gatt_attr_read_chrc>:
{
   2b7fe:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2b800:	68cf      	ldr	r7, [r1, #12]
{
   2b802:	b087      	sub	sp, #28
   2b804:	4608      	mov	r0, r1
   2b806:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   2b808:	79bb      	ldrb	r3, [r7, #6]
   2b80a:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2b80e:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   2b812:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2b814:	f7ff ffd6 	bl	2b7c4 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2b818:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2b81a:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2b81e:	780b      	ldrb	r3, [r1, #0]
   2b820:	b99b      	cbnz	r3, 2b84a <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2b822:	884b      	ldrh	r3, [r1, #2]
   2b824:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   2b828:	2105      	movs	r1, #5
	if (offset > value_len) {
   2b82a:	42b1      	cmp	r1, r6
   2b82c:	d315      	bcc.n	2b85a <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   2b82e:	1b89      	subs	r1, r1, r6
   2b830:	42a1      	cmp	r1, r4
   2b832:	bfa8      	it	ge
   2b834:	4621      	movge	r1, r4
   2b836:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   2b838:	ab01      	add	r3, sp, #4
   2b83a:	4622      	mov	r2, r4
   2b83c:	1999      	adds	r1, r3, r6
   2b83e:	4628      	mov	r0, r5
   2b840:	f7fd fd81 	bl	29346 <memcpy>
}
   2b844:	4620      	mov	r0, r4
   2b846:	b007      	add	sp, #28
   2b848:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2b84a:	3101      	adds	r1, #1
   2b84c:	2210      	movs	r2, #16
   2b84e:	f10d 0007 	add.w	r0, sp, #7
   2b852:	f7fd fd78 	bl	29346 <memcpy>
		value_len += 16U;
   2b856:	2113      	movs	r1, #19
   2b858:	e7e7      	b.n	2b82a <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2b85a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2b85e:	e7f1      	b.n	2b844 <bt_gatt_attr_read_chrc+0x46>

0002b860 <bt_gatt_foreach_attr>:
{
   2b860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2b862:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2b866:	2300      	movs	r3, #0
   2b868:	9300      	str	r3, [sp, #0]
   2b86a:	461a      	mov	r2, r3
   2b86c:	f7e7 fde0 	bl	13430 <bt_gatt_foreach_attr_type>
}
   2b870:	b005      	add	sp, #20
   2b872:	f85d fb04 	ldr.w	pc, [sp], #4

0002b876 <bt_gatt_get_mtu>:
	return bt_att_get_mtu(conn);
   2b876:	f7ff bb58 	b.w	2af2a <bt_att_get_mtu>

0002b87a <bt_gatt_check_perm>:
{
   2b87a:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   2b87c:	07d4      	lsls	r4, r2, #31
{
   2b87e:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2b880:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2b882:	d504      	bpl.n	2b88e <bt_gatt_check_perm+0x14>
   2b884:	f010 0f15 	tst.w	r0, #21
   2b888:	d01e      	beq.n	2b8c8 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2b88a:	684b      	ldr	r3, [r1, #4]
   2b88c:	b1e3      	cbz	r3, 2b8c8 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2b88e:	0793      	lsls	r3, r2, #30
   2b890:	d504      	bpl.n	2b89c <bt_gatt_check_perm+0x22>
   2b892:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   2b896:	d019      	beq.n	2b8cc <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2b898:	688b      	ldr	r3, [r1, #8]
   2b89a:	b1bb      	cbz	r3, 2b8cc <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   2b89c:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2b8a0:	f014 0f30 	tst.w	r4, #48	; 0x30
   2b8a4:	d103      	bne.n	2b8ae <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   2b8a6:	f014 000c 	ands.w	r0, r4, #12
   2b8aa:	d107      	bne.n	2b8bc <bt_gatt_check_perm+0x42>
}
   2b8ac:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2b8ae:	4628      	mov	r0, r5
   2b8b0:	f7fe fd79 	bl	2a3a6 <bt_conn_get_security>
   2b8b4:	2802      	cmp	r0, #2
   2b8b6:	d8f6      	bhi.n	2b8a6 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   2b8b8:	2005      	movs	r0, #5
   2b8ba:	e7f7      	b.n	2b8ac <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   2b8bc:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2b8be:	2b00      	cmp	r3, #0
   2b8c0:	bf14      	ite	ne
   2b8c2:	2000      	movne	r0, #0
   2b8c4:	200f      	moveq	r0, #15
   2b8c6:	e7f1      	b.n	2b8ac <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2b8c8:	2002      	movs	r0, #2
   2b8ca:	e7ef      	b.n	2b8ac <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2b8cc:	2003      	movs	r0, #3
   2b8ce:	e7ed      	b.n	2b8ac <bt_gatt_check_perm+0x32>

0002b8d0 <gatt_notify>:
{
   2b8d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b8d4:	4614      	mov	r4, r2
   2b8d6:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   2b8d8:	2214      	movs	r2, #20
   2b8da:	6861      	ldr	r1, [r4, #4]
{
   2b8dc:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   2b8de:	f7ff ffcc 	bl	2b87a <bt_gatt_check_perm>
   2b8e2:	bb08      	cbnz	r0, 2b928 <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   2b8e4:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   2b8e6:	211b      	movs	r1, #27
   2b8e8:	3202      	adds	r2, #2
   2b8ea:	4638      	mov	r0, r7
   2b8ec:	f7ff faa9 	bl	2ae42 <bt_att_create_pdu>
	if (!buf) {
   2b8f0:	4605      	mov	r5, r0
   2b8f2:	b1e8      	cbz	r0, 2b930 <gatt_notify+0x60>
   2b8f4:	f100 0908 	add.w	r9, r0, #8
   2b8f8:	2102      	movs	r1, #2
   2b8fa:	4648      	mov	r0, r9
   2b8fc:	f001 fd69 	bl	2d3d2 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   2b900:	4606      	mov	r6, r0
   2b902:	89a1      	ldrh	r1, [r4, #12]
   2b904:	f826 8b02 	strh.w	r8, [r6], #2
   2b908:	4648      	mov	r0, r9
   2b90a:	f001 fd62 	bl	2d3d2 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   2b90e:	89a2      	ldrh	r2, [r4, #12]
   2b910:	68a1      	ldr	r1, [r4, #8]
   2b912:	4630      	mov	r0, r6
   2b914:	f7fd fd17 	bl	29346 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   2b918:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   2b91c:	4629      	mov	r1, r5
   2b91e:	4638      	mov	r0, r7
}
   2b920:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   2b924:	f7ff bb67 	b.w	2aff6 <bt_att_send>
		return -EPERM;
   2b928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2b92c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   2b930:	f06f 000b 	mvn.w	r0, #11
   2b934:	e7fa      	b.n	2b92c <gatt_notify+0x5c>

0002b936 <bt_gatt_change_aware>:
{
   2b936:	b538      	push	{r3, r4, r5, lr}
   2b938:	460d      	mov	r5, r1
	cfg = find_cf_cfg(conn);
   2b93a:	f7e7 fa8f 	bl	12e5c <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2b93e:	b910      	cbnz	r0, 2b946 <bt_gatt_change_aware+0x10>
		return true;
   2b940:	2501      	movs	r5, #1
}
   2b942:	4628      	mov	r0, r5
   2b944:	bd38      	pop	{r3, r4, r5, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2b946:	7a03      	ldrb	r3, [r0, #8]
   2b948:	07d9      	lsls	r1, r3, #31
   2b94a:	d5f9      	bpl.n	2b940 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2b94c:	f100 040c 	add.w	r4, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2b950:	4620      	mov	r0, r4
   2b952:	f7ff fbd2 	bl	2b0fa <atomic_get>
   2b956:	07c2      	lsls	r2, r0, #31
   2b958:	d4f2      	bmi.n	2b940 <bt_gatt_change_aware+0xa>
	if (!req) {
   2b95a:	2d00      	cmp	r5, #0
   2b95c:	d0f1      	beq.n	2b942 <bt_gatt_change_aware+0xc>
   2b95e:	4620      	mov	r0, r4
   2b960:	f7ff fbcb 	bl	2b0fa <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   2b964:	0783      	lsls	r3, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2b966:	f3c0 0540 	ubfx	r5, r0, #1, #1
   2b96a:	d509      	bpl.n	2b980 <bt_gatt_change_aware+0x4a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2b96c:	f06f 0102 	mvn.w	r1, #2
   2b970:	4620      	mov	r0, r4
   2b972:	f7ff fc83 	bl	2b27c <atomic_and>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2b976:	2101      	movs	r1, #1
   2b978:	4620      	mov	r0, r4
   2b97a:	f7ff fc19 	bl	2b1b0 <atomic_or>
}
   2b97e:	e7e0      	b.n	2b942 <bt_gatt_change_aware+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2b980:	2102      	movs	r1, #2
   2b982:	e7f9      	b.n	2b978 <bt_gatt_change_aware+0x42>

0002b984 <ccc_delayed_store>:
{
   2b984:	b570      	push	{r4, r5, r6, lr}
		struct bt_conn *conn = ccc_store->conn_list[i];
   2b986:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   2b98a:	4605      	mov	r5, r0
		if (!conn) {
   2b98c:	b194      	cbz	r4, 2b9b4 <ccc_delayed_store+0x30>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2b98e:	f104 0688 	add.w	r6, r4, #136	; 0x88
   2b992:	7a20      	ldrb	r0, [r4, #8]
   2b994:	4631      	mov	r1, r6
   2b996:	f7fe f94f 	bl	29c38 <bt_addr_le_is_bonded>
   2b99a:	b158      	cbz	r0, 2b9b4 <ccc_delayed_store+0x30>
			ccc_store->conn_list[i] = NULL;
   2b99c:	2300      	movs	r3, #0
   2b99e:	f845 3c08 	str.w	r3, [r5, #-8]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   2b9a2:	7a20      	ldrb	r0, [r4, #8]
   2b9a4:	4631      	mov	r1, r6
   2b9a6:	f7e8 fa29 	bl	13dfc <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   2b9aa:	4620      	mov	r0, r4
}
   2b9ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   2b9b0:	f7fe bc60 	b.w	2a274 <bt_conn_unref>
}
   2b9b4:	bd70      	pop	{r4, r5, r6, pc}

0002b9b6 <sys_memcpy_swap>:
	psrc += length - 1;
   2b9b6:	1e53      	subs	r3, r2, #1
   2b9b8:	4419      	add	r1, r3
	for (; length > 0; length--) {
   2b9ba:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   2b9bc:	f811 3901 	ldrb.w	r3, [r1], #-1
   2b9c0:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   2b9c4:	4290      	cmp	r0, r2
   2b9c6:	d1f9      	bne.n	2b9bc <sys_memcpy_swap+0x6>
}
   2b9c8:	4770      	bx	lr

0002b9ca <smp_pairing_rsp>:
}
   2b9ca:	2007      	movs	r0, #7
   2b9cc:	4770      	bx	lr

0002b9ce <smp_chan_get>:
{
   2b9ce:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   2b9d0:	2106      	movs	r1, #6
   2b9d2:	f7fe fe12 	bl	2a5fa <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   2b9d6:	b100      	cbz	r0, 2b9da <smp_chan_get+0xc>
	return CONTAINER_OF(chan, struct bt_smp, chan);
   2b9d8:	38f0      	subs	r0, #240	; 0xf0
}
   2b9da:	bd08      	pop	{r3, pc}

0002b9dc <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b9dc:	f3bf 8f5b 	dmb	ish
   2b9e0:	6800      	ldr	r0, [r0, #0]
   2b9e2:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2b9e6:	4108      	asrs	r0, r1
}
   2b9e8:	f000 0001 	and.w	r0, r0, #1
   2b9ec:	4770      	bx	lr

0002b9ee <update_keys_check>:
{
   2b9ee:	b510      	push	{r4, lr}
   2b9f0:	4603      	mov	r3, r0
	if (!keys ||
   2b9f2:	b1d9      	cbz	r1, 2ba2c <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2b9f4:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   2b9f6:	f010 0f24 	tst.w	r0, #36	; 0x24
   2b9fa:	d017      	beq.n	2ba2c <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   2b9fc:	7d1a      	ldrb	r2, [r3, #20]
   2b9fe:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   2ba00:	7b09      	ldrb	r1, [r1, #12]
   2ba02:	42a2      	cmp	r2, r4
   2ba04:	bf28      	it	cs
   2ba06:	4622      	movcs	r2, r4
   2ba08:	4291      	cmp	r1, r2
   2ba0a:	d901      	bls.n	2ba10 <update_keys_check+0x22>
		return false;
   2ba0c:	2000      	movs	r0, #0
}
   2ba0e:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2ba10:	0682      	lsls	r2, r0, #26
   2ba12:	d404      	bmi.n	2ba1e <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2ba14:	7a18      	ldrb	r0, [r3, #8]
   2ba16:	3800      	subs	r0, #0
   2ba18:	bf18      	it	ne
   2ba1a:	2001      	movne	r0, #1
   2ba1c:	e7f7      	b.n	2ba0e <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2ba1e:	2105      	movs	r1, #5
   2ba20:	1d18      	adds	r0, r3, #4
   2ba22:	f7ff ffdb 	bl	2b9dc <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2ba26:	2800      	cmp	r0, #0
   2ba28:	d1f4      	bne.n	2ba14 <update_keys_check+0x26>
   2ba2a:	e7ef      	b.n	2ba0c <update_keys_check+0x1e>
		return true;
   2ba2c:	2001      	movs	r0, #1
   2ba2e:	e7ee      	b.n	2ba0e <update_keys_check+0x20>

0002ba30 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2ba30:	2301      	movs	r3, #1
   2ba32:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2ba34:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ba36:	f3bf 8f5b 	dmb	ish
   2ba3a:	e850 2f00 	ldrex	r2, [r0]
   2ba3e:	401a      	ands	r2, r3
   2ba40:	e840 2100 	strex	r1, r2, [r0]
   2ba44:	2900      	cmp	r1, #0
   2ba46:	d1f8      	bne.n	2ba3a <atomic_clear_bit+0xa>
   2ba48:	f3bf 8f5b 	dmb	ish
}
   2ba4c:	4770      	bx	lr

0002ba4e <bt_smp_aes_cmac>:
{
   2ba4e:	b570      	push	{r4, r5, r6, lr}
   2ba50:	b0c2      	sub	sp, #264	; 0x108
   2ba52:	460d      	mov	r5, r1
   2ba54:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2ba56:	4601      	mov	r1, r0
   2ba58:	aa16      	add	r2, sp, #88	; 0x58
   2ba5a:	4668      	mov	r0, sp
{
   2ba5c:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2ba5e:	f7fd fad5 	bl	2900c <tc_cmac_setup>
   2ba62:	b150      	cbz	r0, 2ba7a <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   2ba64:	4632      	mov	r2, r6
   2ba66:	4629      	mov	r1, r5
   2ba68:	4668      	mov	r0, sp
   2ba6a:	f7fd fafa 	bl	29062 <tc_cmac_update>
   2ba6e:	b120      	cbz	r0, 2ba7a <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   2ba70:	4669      	mov	r1, sp
   2ba72:	4620      	mov	r0, r4
   2ba74:	f7fd fb60 	bl	29138 <tc_cmac_final>
   2ba78:	b918      	cbnz	r0, 2ba82 <bt_smp_aes_cmac+0x34>
		return -EIO;
   2ba7a:	f06f 0004 	mvn.w	r0, #4
}
   2ba7e:	b042      	add	sp, #264	; 0x108
   2ba80:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   2ba82:	2000      	movs	r0, #0
   2ba84:	e7fb      	b.n	2ba7e <bt_smp_aes_cmac+0x30>

0002ba86 <smp_security_request>:
   2ba86:	2007      	movs	r0, #7
   2ba88:	4770      	bx	lr

0002ba8a <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2ba8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2ba8c:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2ba8e:	2200      	movs	r2, #0
   2ba90:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2ba92:	4604      	mov	r4, r0
   2ba94:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2ba96:	460a      	mov	r2, r1
   2ba98:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
   2ba9c:	2106      	movs	r1, #6
   2ba9e:	f7fe fd57 	bl	2a550 <bt_l2cap_send_cb>
   2baa2:	b128      	cbz	r0, 2bab0 <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   2baa4:	4628      	mov	r0, r5
}
   2baa6:	b003      	add	sp, #12
   2baa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   2baac:	f7f7 bcf4 	b.w	23498 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2bab0:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2bab4:	2300      	movs	r3, #0
   2bab6:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
}
   2baba:	b003      	add	sp, #12
   2babc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2bac0:	f7fa bb62 	b.w	26188 <k_work_reschedule>

0002bac4 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   2bac4:	b510      	push	{r4, lr}
   2bac6:	1e43      	subs	r3, r0, #1
   2bac8:	f100 0210 	add.w	r2, r0, #16
   2bacc:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   2bace:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2bad2:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2bad6:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   2bad8:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2bada:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   2badc:	d1f7      	bne.n	2bace <sys_mem_swap.constprop.0+0xa>
	}
}
   2bade:	bd10      	pop	{r4, pc}

0002bae0 <smp_f6>:
{
   2bae0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bae2:	b097      	sub	sp, #92	; 0x5c
   2bae4:	4605      	mov	r5, r0
   2bae6:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   2bae8:	a805      	add	r0, sp, #20
   2baea:	2210      	movs	r2, #16
{
   2baec:	461c      	mov	r4, r3
   2baee:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   2baf0:	f7ff ff61 	bl	2b9b6 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   2baf4:	2210      	movs	r2, #16
   2baf6:	4631      	mov	r1, r6
   2baf8:	a809      	add	r0, sp, #36	; 0x24
   2bafa:	f7ff ff5c 	bl	2b9b6 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   2bafe:	4621      	mov	r1, r4
   2bb00:	2210      	movs	r2, #16
   2bb02:	a80d      	add	r0, sp, #52	; 0x34
   2bb04:	f7ff ff57 	bl	2b9b6 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   2bb08:	991c      	ldr	r1, [sp, #112]	; 0x70
   2bb0a:	2203      	movs	r2, #3
   2bb0c:	a811      	add	r0, sp, #68	; 0x44
   2bb0e:	f7ff ff52 	bl	2b9b6 <sys_memcpy_swap>
	m[51] = a1->type;
   2bb12:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   2bb14:	f814 3b01 	ldrb.w	r3, [r4], #1
   2bb18:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   2bb1c:	4621      	mov	r1, r4
   2bb1e:	2206      	movs	r2, #6
   2bb20:	a812      	add	r0, sp, #72	; 0x48
   2bb22:	f7fd fc10 	bl	29346 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2bb26:	4621      	mov	r1, r4
   2bb28:	2206      	movs	r2, #6
   2bb2a:	a812      	add	r0, sp, #72	; 0x48
   2bb2c:	f7ff ff43 	bl	2b9b6 <sys_memcpy_swap>
	m[58] = a2->type;
   2bb30:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   2bb32:	f814 3b01 	ldrb.w	r3, [r4], #1
   2bb36:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   2bb3a:	4621      	mov	r1, r4
   2bb3c:	2206      	movs	r2, #6
   2bb3e:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2bb42:	f7fd fc00 	bl	29346 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2bb46:	4621      	mov	r1, r4
   2bb48:	2206      	movs	r2, #6
   2bb4a:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2bb4e:	f7ff ff32 	bl	2b9b6 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   2bb52:	2210      	movs	r2, #16
   2bb54:	4629      	mov	r1, r5
   2bb56:	a801      	add	r0, sp, #4
   2bb58:	f7ff ff2d 	bl	2b9b6 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   2bb5c:	463b      	mov	r3, r7
   2bb5e:	2241      	movs	r2, #65	; 0x41
   2bb60:	a905      	add	r1, sp, #20
   2bb62:	a801      	add	r0, sp, #4
   2bb64:	f7ff ff73 	bl	2ba4e <bt_smp_aes_cmac>
	if (err) {
   2bb68:	4604      	mov	r4, r0
   2bb6a:	b910      	cbnz	r0, 2bb72 <smp_f6+0x92>
	sys_mem_swap(check, 16);
   2bb6c:	4638      	mov	r0, r7
   2bb6e:	f7ff ffa9 	bl	2bac4 <sys_mem_swap.constprop.0>
}
   2bb72:	4620      	mov	r0, r4
   2bb74:	b017      	add	sp, #92	; 0x5c
   2bb76:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002bb78 <smp_f4>:
{
   2bb78:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bb7a:	b097      	sub	sp, #92	; 0x5c
   2bb7c:	4614      	mov	r4, r2
   2bb7e:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   2bb80:	2220      	movs	r2, #32
   2bb82:	4601      	mov	r1, r0
   2bb84:	a805      	add	r0, sp, #20
{
   2bb86:	461d      	mov	r5, r3
   2bb88:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2bb8a:	f7ff ff14 	bl	2b9b6 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2bb8e:	2220      	movs	r2, #32
   2bb90:	4631      	mov	r1, r6
   2bb92:	a80d      	add	r0, sp, #52	; 0x34
   2bb94:	f7ff ff0f 	bl	2b9b6 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   2bb98:	4621      	mov	r1, r4
   2bb9a:	2210      	movs	r2, #16
   2bb9c:	a801      	add	r0, sp, #4
	m[64] = z;
   2bb9e:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   2bba2:	f7ff ff08 	bl	2b9b6 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   2bba6:	463b      	mov	r3, r7
   2bba8:	2241      	movs	r2, #65	; 0x41
   2bbaa:	a905      	add	r1, sp, #20
   2bbac:	a801      	add	r0, sp, #4
   2bbae:	f7ff ff4e 	bl	2ba4e <bt_smp_aes_cmac>
	if (err) {
   2bbb2:	4604      	mov	r4, r0
   2bbb4:	b910      	cbnz	r0, 2bbbc <smp_f4+0x44>
	sys_mem_swap(res, 16);
   2bbb6:	4638      	mov	r0, r7
   2bbb8:	f7ff ff84 	bl	2bac4 <sys_mem_swap.constprop.0>
}
   2bbbc:	4620      	mov	r0, r4
   2bbbe:	b017      	add	sp, #92	; 0x5c
   2bbc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002bbc2 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2bbc2:	2301      	movs	r3, #1
   2bbc4:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2bbc6:	f3bf 8f5b 	dmb	ish
   2bbca:	e850 2f00 	ldrex	r2, [r0]
   2bbce:	431a      	orrs	r2, r3
   2bbd0:	e840 2100 	strex	r1, r2, [r0]
   2bbd4:	2900      	cmp	r1, #0
   2bbd6:	d1f8      	bne.n	2bbca <atomic_set_bit+0x8>
   2bbd8:	f3bf 8f5b 	dmb	ish
}
   2bbdc:	4770      	bx	lr

0002bbde <smp_keypress_notif>:
{
   2bbde:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2bbe0:	210e      	movs	r1, #14
   2bbe2:	f7ff ffee 	bl	2bbc2 <atomic_set_bit>
}
   2bbe6:	2000      	movs	r0, #0
   2bbe8:	bd08      	pop	{r3, pc}

0002bbea <smp_ident_info>:
{
   2bbea:	b538      	push	{r3, r4, r5, lr}
   2bbec:	4604      	mov	r4, r0
   2bbee:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   2bbf0:	3004      	adds	r0, #4
   2bbf2:	210d      	movs	r1, #13
   2bbf4:	f7ff fef2 	bl	2b9dc <atomic_test_bit>
   2bbf8:	b170      	cbz	r0, 2bc18 <smp_ident_info+0x2e>
		struct bt_smp_ident_info *req = (void *)buf->data;
   2bbfa:	689d      	ldr	r5, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   2bbfc:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   2bc00:	2002      	movs	r0, #2
   2bc02:	7a19      	ldrb	r1, [r3, #8]
   2bc04:	f103 0288 	add.w	r2, r3, #136	; 0x88
   2bc08:	f000 fc4a 	bl	2c4a0 <bt_keys_get_type>
		if (!keys) {
   2bc0c:	b150      	cbz	r0, 2bc24 <smp_ident_info+0x3a>
		memcpy(keys->irk.val, req->irk, 16);
   2bc0e:	2210      	movs	r2, #16
   2bc10:	4629      	mov	r1, r5
   2bc12:	302a      	adds	r0, #42	; 0x2a
   2bc14:	f7fd fb97 	bl	29346 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   2bc18:	4620      	mov	r0, r4
   2bc1a:	2109      	movs	r1, #9
   2bc1c:	f7ff ffd1 	bl	2bbc2 <atomic_set_bit>
	return 0;
   2bc20:	2000      	movs	r0, #0
}
   2bc22:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   2bc24:	2008      	movs	r0, #8
   2bc26:	e7fc      	b.n	2bc22 <smp_ident_info+0x38>

0002bc28 <smp_encrypt_info>:
{
   2bc28:	b538      	push	{r3, r4, r5, lr}
   2bc2a:	4604      	mov	r4, r0
   2bc2c:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   2bc2e:	3004      	adds	r0, #4
   2bc30:	210d      	movs	r1, #13
   2bc32:	f7ff fed3 	bl	2b9dc <atomic_test_bit>
   2bc36:	b170      	cbz	r0, 2bc56 <smp_encrypt_info+0x2e>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   2bc38:	689d      	ldr	r5, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   2bc3a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   2bc3e:	2004      	movs	r0, #4
   2bc40:	7a19      	ldrb	r1, [r3, #8]
   2bc42:	f103 0288 	add.w	r2, r3, #136	; 0x88
   2bc46:	f000 fc2b 	bl	2c4a0 <bt_keys_get_type>
		if (!keys) {
   2bc4a:	b150      	cbz	r0, 2bc62 <smp_encrypt_info+0x3a>
		memcpy(keys->ltk.val, req->ltk, 16);
   2bc4c:	2210      	movs	r2, #16
   2bc4e:	4629      	mov	r1, r5
   2bc50:	301a      	adds	r0, #26
   2bc52:	f7fd fb78 	bl	29346 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   2bc56:	4620      	mov	r0, r4
   2bc58:	2107      	movs	r1, #7
   2bc5a:	f7ff ffb2 	bl	2bbc2 <atomic_set_bit>
	return 0;
   2bc5e:	2000      	movs	r0, #0
}
   2bc60:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   2bc62:	2008      	movs	r0, #8
   2bc64:	e7fc      	b.n	2bc60 <smp_encrypt_info+0x38>

0002bc66 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2bc66:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2bc68:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2bc6a:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2bc6c:	4628      	mov	r0, r5
   2bc6e:	2104      	movs	r1, #4
   2bc70:	f7ff feb4 	bl	2b9dc <atomic_test_bit>
   2bc74:	b970      	cbnz	r0, 2bc94 <smp_create_pdu.constprop.0+0x2e>
		timeout = SMP_TIMEOUT;
   2bc76:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2bc7a:	2100      	movs	r1, #0
		timeout = K_NO_WAIT;
   2bc7c:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2bc7e:	4608      	mov	r0, r1
   2bc80:	f7fe fc63 	bl	2a54a <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   2bc84:	4604      	mov	r4, r0
   2bc86:	b938      	cbnz	r0, 2bc98 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2bc88:	2104      	movs	r1, #4
   2bc8a:	4628      	mov	r0, r5
   2bc8c:	f7ff ff99 	bl	2bbc2 <atomic_set_bit>
}
   2bc90:	4620      	mov	r0, r4
   2bc92:	bd70      	pop	{r4, r5, r6, pc}
		timeout = K_NO_WAIT;
   2bc94:	2200      	movs	r2, #0
   2bc96:	e7f0      	b.n	2bc7a <smp_create_pdu.constprop.0+0x14>
   2bc98:	2101      	movs	r1, #1
   2bc9a:	3008      	adds	r0, #8
   2bc9c:	f001 fb99 	bl	2d3d2 <net_buf_simple_add>
	hdr->code = op;
   2bca0:	7006      	strb	r6, [r0, #0]
	return buf;
   2bca2:	e7f5      	b.n	2bc90 <smp_create_pdu.constprop.0+0x2a>

0002bca4 <send_pairing_rsp>:
{
   2bca4:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2bca6:	2102      	movs	r1, #2
{
   2bca8:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2bcaa:	f7ff ffdc 	bl	2bc66 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2bcae:	4604      	mov	r4, r0
   2bcb0:	b178      	cbz	r0, 2bcd2 <send_pairing_rsp+0x2e>
   2bcb2:	2106      	movs	r1, #6
   2bcb4:	3008      	adds	r0, #8
   2bcb6:	f001 fb8c 	bl	2d3d2 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   2bcba:	2206      	movs	r2, #6
   2bcbc:	f105 0111 	add.w	r1, r5, #17
   2bcc0:	f7fd fb41 	bl	29346 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2bcc4:	4628      	mov	r0, r5
   2bcc6:	2200      	movs	r2, #0
   2bcc8:	4621      	mov	r1, r4
   2bcca:	f7ff fede 	bl	2ba8a <smp_send.constprop.0>
	return 0;
   2bcce:	2000      	movs	r0, #0
}
   2bcd0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2bcd2:	2008      	movs	r0, #8
   2bcd4:	e7fc      	b.n	2bcd0 <send_pairing_rsp+0x2c>

0002bcd6 <smp_send_pairing_random>:
{
   2bcd6:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2bcd8:	2104      	movs	r1, #4
{
   2bcda:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2bcdc:	f7ff ffc3 	bl	2bc66 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2bce0:	4604      	mov	r4, r0
   2bce2:	b178      	cbz	r0, 2bd04 <smp_send_pairing_random+0x2e>
   2bce4:	2110      	movs	r1, #16
   2bce6:	3008      	adds	r0, #8
   2bce8:	f001 fb73 	bl	2d3d2 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   2bcec:	2210      	movs	r2, #16
   2bcee:	f105 0127 	add.w	r1, r5, #39	; 0x27
   2bcf2:	f7fd fb28 	bl	29346 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2bcf6:	4628      	mov	r0, r5
   2bcf8:	2200      	movs	r2, #0
   2bcfa:	4621      	mov	r1, r4
   2bcfc:	f7ff fec5 	bl	2ba8a <smp_send.constprop.0>
	return 0;
   2bd00:	2000      	movs	r0, #0
}
   2bd02:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2bd04:	2008      	movs	r0, #8
   2bd06:	e7fc      	b.n	2bd02 <smp_send_pairing_random+0x2c>

0002bd08 <smp_dhkey_check>:
{
   2bd08:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2bd0a:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   2bd0e:	78db      	ldrb	r3, [r3, #3]
   2bd10:	2b01      	cmp	r3, #1
{
   2bd12:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2bd14:	d114      	bne.n	2bd40 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   2bd16:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2bd18:	1d05      	adds	r5, r0, #4
   2bd1a:	2110      	movs	r1, #16
   2bd1c:	4628      	mov	r0, r5
   2bd1e:	f7ff fe87 	bl	2ba30 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   2bd22:	4631      	mov	r1, r6
   2bd24:	2210      	movs	r2, #16
   2bd26:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   2bd2a:	f7fd fb0c 	bl	29346 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   2bd2e:	2107      	movs	r1, #7
   2bd30:	4628      	mov	r0, r5
   2bd32:	f7ff fe53 	bl	2b9dc <atomic_test_bit>
   2bd36:	b128      	cbz	r0, 2bd44 <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2bd38:	2109      	movs	r1, #9
   2bd3a:	4628      	mov	r0, r5
   2bd3c:	f7ff ff41 	bl	2bbc2 <atomic_set_bit>
}
   2bd40:	2000      	movs	r0, #0
   2bd42:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2bd44:	210a      	movs	r1, #10
   2bd46:	4628      	mov	r0, r5
   2bd48:	f7ff fe48 	bl	2b9dc <atomic_test_bit>
   2bd4c:	2800      	cmp	r0, #0
   2bd4e:	d1f3      	bne.n	2bd38 <smp_dhkey_check+0x30>
		return compute_and_check_and_send_periph_dhcheck(smp);
   2bd50:	4620      	mov	r0, r4
}
   2bd52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   2bd56:	f7e8 bc67 	b.w	14628 <compute_and_check_and_send_periph_dhcheck>

0002bd5a <smp_signing_info>:
   2bd5a:	2007      	movs	r0, #7
   2bd5c:	4770      	bx	lr

0002bd5e <atomic_test_and_clear_bit>:
{
   2bd5e:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2bd60:	2301      	movs	r3, #1
   2bd62:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2bd66:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2bd68:	f3bf 8f5b 	dmb	ish
   2bd6c:	e850 3f00 	ldrex	r3, [r0]
   2bd70:	ea03 0c02 	and.w	ip, r3, r2
   2bd74:	e840 ce00 	strex	lr, ip, [r0]
   2bd78:	f1be 0f00 	cmp.w	lr, #0
   2bd7c:	d1f6      	bne.n	2bd6c <atomic_test_and_clear_bit+0xe>
   2bd7e:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2bd82:	420b      	tst	r3, r1
}
   2bd84:	bf14      	ite	ne
   2bd86:	2001      	movne	r0, #1
   2bd88:	2000      	moveq	r0, #0
   2bd8a:	f85d fb04 	ldr.w	pc, [sp], #4

0002bd8e <smp_reset>:
{
   2bd8e:	b538      	push	{r3, r4, r5, lr}
   2bd90:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2bd92:	1d03      	adds	r3, r0, #4
   2bd94:	2500      	movs	r5, #0
   2bd96:	f3bf 8f5b 	dmb	ish
   2bd9a:	e853 2f00 	ldrex	r2, [r3]
   2bd9e:	e843 5100 	strex	r1, r5, [r3]
   2bda2:	2900      	cmp	r1, #0
   2bda4:	d1f9      	bne.n	2bd9a <smp_reset+0xc>
   2bda6:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   2bdaa:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
   2bdae:	f002 fd85 	bl	2e8bc <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   2bdb2:	7225      	strb	r5, [r4, #8]
   2bdb4:	f3bf 8f5b 	dmb	ish
   2bdb8:	e854 3f00 	ldrex	r3, [r4]
   2bdbc:	e844 5200 	strex	r2, r5, [r4]
   2bdc0:	2a00      	cmp	r2, #0
   2bdc2:	d1f9      	bne.n	2bdb8 <smp_reset+0x2a>
   2bdc4:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2bdc8:	4620      	mov	r0, r4
   2bdca:	2101      	movs	r1, #1
}
   2bdcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2bdd0:	f7ff bef7 	b.w	2bbc2 <atomic_set_bit>

0002bdd4 <smp_c1>:
{
   2bdd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2bdd8:	b089      	sub	sp, #36	; 0x24
   2bdda:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   2bdde:	4699      	mov	r9, r3
	p1[0] = ia->type;
   2bde0:	783b      	ldrb	r3, [r7, #0]
{
   2bde2:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   2bde4:	f88d 3000 	strb.w	r3, [sp]
{
   2bde8:	460c      	mov	r4, r1
	p1[1] = ra->type;
   2bdea:	f898 3000 	ldrb.w	r3, [r8]
   2bdee:	f88d 3001 	strb.w	r3, [sp, #1]
{
   2bdf2:	4611      	mov	r1, r2
   2bdf4:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   2bdf6:	2207      	movs	r2, #7
   2bdf8:	f10d 0002 	add.w	r0, sp, #2
   2bdfc:	f7fd faa3 	bl	29346 <memcpy>
	memcpy(p1 + 9, pres, 7);
   2be00:	2207      	movs	r2, #7
   2be02:	4649      	mov	r1, r9
   2be04:	f10d 0009 	add.w	r0, sp, #9
   2be08:	f7fd fa9d 	bl	29346 <memcpy>
	while (len--) {
   2be0c:	f104 0010 	add.w	r0, r4, #16
   2be10:	4629      	mov	r1, r5
   2be12:	466a      	mov	r2, sp
   2be14:	42a0      	cmp	r0, r4
   2be16:	d127      	bne.n	2be68 <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2be18:	462a      	mov	r2, r5
   2be1a:	4629      	mov	r1, r5
   2be1c:	4630      	mov	r0, r6
   2be1e:	f7ec f84f 	bl	17ec0 <bt_encrypt_le>
	if (err) {
   2be22:	4604      	mov	r4, r0
   2be24:	b9e0      	cbnz	r0, 2be60 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   2be26:	2206      	movs	r2, #6
   2be28:	f108 0101 	add.w	r1, r8, #1
   2be2c:	a804      	add	r0, sp, #16
   2be2e:	f7fd fa8a 	bl	29346 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   2be32:	2206      	movs	r2, #6
   2be34:	1c79      	adds	r1, r7, #1
   2be36:	f10d 0016 	add.w	r0, sp, #22
   2be3a:	f7fd fa84 	bl	29346 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   2be3e:	2204      	movs	r2, #4
   2be40:	4621      	mov	r1, r4
   2be42:	a807      	add	r0, sp, #28
   2be44:	f7fd fa8a 	bl	2935c <memset>
	while (len--) {
   2be48:	f105 0010 	add.w	r0, r5, #16
   2be4c:	462a      	mov	r2, r5
   2be4e:	ab04      	add	r3, sp, #16
   2be50:	4282      	cmp	r2, r0
   2be52:	d112      	bne.n	2be7a <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   2be54:	462a      	mov	r2, r5
   2be56:	4629      	mov	r1, r5
   2be58:	4630      	mov	r0, r6
   2be5a:	f7ec f831 	bl	17ec0 <bt_encrypt_le>
   2be5e:	4604      	mov	r4, r0
}
   2be60:	4620      	mov	r0, r4
   2be62:	b009      	add	sp, #36	; 0x24
   2be64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   2be68:	f814 3b01 	ldrb.w	r3, [r4], #1
   2be6c:	f812 cb01 	ldrb.w	ip, [r2], #1
   2be70:	ea83 030c 	eor.w	r3, r3, ip
   2be74:	f801 3b01 	strb.w	r3, [r1], #1
   2be78:	e7cc      	b.n	2be14 <smp_c1+0x40>
   2be7a:	f812 1b01 	ldrb.w	r1, [r2], #1
   2be7e:	f813 4b01 	ldrb.w	r4, [r3], #1
   2be82:	4061      	eors	r1, r4
   2be84:	f802 1c01 	strb.w	r1, [r2, #-1]
   2be88:	e7e2      	b.n	2be50 <smp_c1+0x7c>

0002be8a <legacy_pairing_confirm>:
{
   2be8a:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2be8c:	1d07      	adds	r7, r0, #4
{
   2be8e:	b085      	sub	sp, #20
   2be90:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2be92:	210a      	movs	r1, #10
   2be94:	4638      	mov	r0, r7
   2be96:	f7ff fda1 	bl	2b9dc <atomic_test_bit>
   2be9a:	bb88      	cbnz	r0, 2bf00 <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   2be9c:	2104      	movs	r1, #4
   2be9e:	4628      	mov	r0, r5
   2bea0:	f7ff fe8f 	bl	2bbc2 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2bea4:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   2bea6:	f8d5 40f0 	ldr.w	r4, [r5, #240]	; 0xf0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2beaa:	f7ff fedc 	bl	2bc66 <smp_create_pdu.constprop.0>
	if (!buf) {
   2beae:	4606      	mov	r6, r0
   2beb0:	b1c0      	cbz	r0, 2bee4 <legacy_pairing_confirm+0x5a>
   2beb2:	2110      	movs	r1, #16
   2beb4:	3008      	adds	r0, #8
   2beb6:	f001 fa8c 	bl	2d3d2 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   2beba:	f104 0396 	add.w	r3, r4, #150	; 0x96
   2bebe:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2bec0:	9002      	str	r0, [sp, #8]
   2bec2:	9301      	str	r3, [sp, #4]
   2bec4:	9400      	str	r4, [sp, #0]
   2bec6:	f105 0310 	add.w	r3, r5, #16
   2beca:	f105 0209 	add.w	r2, r5, #9
   2bece:	f105 0127 	add.w	r1, r5, #39	; 0x27
   2bed2:	f105 0047 	add.w	r0, r5, #71	; 0x47
   2bed6:	f7ff ff7d 	bl	2bdd4 <smp_c1>
   2beda:	4604      	mov	r4, r0
   2bedc:	b120      	cbz	r0, 2bee8 <legacy_pairing_confirm+0x5e>
		net_buf_unref(buf);
   2bede:	4630      	mov	r0, r6
   2bee0:	f7f7 fada 	bl	23498 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2bee4:	2008      	movs	r0, #8
   2bee6:	e009      	b.n	2befc <legacy_pairing_confirm+0x72>
	smp_send(smp, buf, NULL, NULL);
   2bee8:	4602      	mov	r2, r0
   2beea:	4631      	mov	r1, r6
   2beec:	4628      	mov	r0, r5
   2beee:	f7ff fdcc 	bl	2ba8a <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2bef2:	4621      	mov	r1, r4
   2bef4:	4638      	mov	r0, r7
   2bef6:	f7ff fd9b 	bl	2ba30 <atomic_clear_bit>
	return 0;
   2befa:	2000      	movs	r0, #0
}
   2befc:	b005      	add	sp, #20
   2befe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2bf00:	2100      	movs	r1, #0
   2bf02:	4638      	mov	r0, r7
   2bf04:	f7ff fe5d 	bl	2bbc2 <atomic_set_bit>
   2bf08:	e7f7      	b.n	2befa <legacy_pairing_confirm+0x70>

0002bf0a <smp_pairing_confirm>:
{
   2bf0a:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   2bf0c:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   2bf0e:	1d05      	adds	r5, r0, #4
{
   2bf10:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   2bf12:	210b      	movs	r1, #11
   2bf14:	4628      	mov	r0, r5
   2bf16:	f7ff fd8b 	bl	2ba30 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   2bf1a:	4631      	mov	r1, r6
   2bf1c:	2210      	movs	r2, #16
   2bf1e:	f104 0017 	add.w	r0, r4, #23
   2bf22:	f7fd fa10 	bl	29346 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2bf26:	2105      	movs	r1, #5
   2bf28:	4628      	mov	r0, r5
   2bf2a:	f7ff fd57 	bl	2b9dc <atomic_test_bit>
   2bf2e:	b920      	cbnz	r0, 2bf3a <smp_pairing_confirm+0x30>
		return legacy_pairing_confirm(smp);
   2bf30:	4620      	mov	r0, r4
}
   2bf32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   2bf36:	f7ff bfa8 	b.w	2be8a <legacy_pairing_confirm>
	switch (smp->method) {
   2bf3a:	7a23      	ldrb	r3, [r4, #8]
   2bf3c:	2b01      	cmp	r3, #1
   2bf3e:	d009      	beq.n	2bf54 <smp_pairing_confirm+0x4a>
   2bf40:	2b02      	cmp	r3, #2
   2bf42:	d113      	bne.n	2bf6c <smp_pairing_confirm+0x62>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   2bf44:	4620      	mov	r0, r4
   2bf46:	2104      	movs	r1, #4
   2bf48:	f7ff fe3b 	bl	2bbc2 <atomic_set_bit>
}
   2bf4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   2bf50:	f7e8 b8a2 	b.w	14098 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2bf54:	210a      	movs	r1, #10
   2bf56:	4628      	mov	r0, r5
   2bf58:	f7ff fd40 	bl	2b9dc <atomic_test_bit>
   2bf5c:	2800      	cmp	r0, #0
   2bf5e:	d0f1      	beq.n	2bf44 <smp_pairing_confirm+0x3a>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2bf60:	4628      	mov	r0, r5
   2bf62:	2100      	movs	r1, #0
   2bf64:	f7ff fe2d 	bl	2bbc2 <atomic_set_bit>
			return 0;
   2bf68:	2000      	movs	r0, #0
}
   2bf6a:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   2bf6c:	2008      	movs	r0, #8
   2bf6e:	e7fc      	b.n	2bf6a <smp_pairing_confirm+0x60>

0002bf70 <bt_smp_request_ltk>:
{
   2bf70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2bf74:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   2bf78:	e9cd 2300 	strd	r2, r3, [sp]
   2bf7c:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   2bf7e:	f7ff fd26 	bl	2b9ce <smp_chan_get>
	if (!smp) {
   2bf82:	4605      	mov	r5, r0
   2bf84:	2800      	cmp	r0, #0
   2bf86:	f000 8090 	beq.w	2c0aa <bt_smp_request_ltk+0x13a>
	if (ediv == 0U && rand == 0U &&
   2bf8a:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2bf8e:	1d07      	adds	r7, r0, #4
	if (ediv == 0U && rand == 0U &&
   2bf90:	f1b9 0f00 	cmp.w	r9, #0
   2bf94:	d12a      	bne.n	2bfec <bt_smp_request_ltk+0x7c>
   2bf96:	e9dd 2300 	ldrd	r2, r3, [sp]
   2bf9a:	4313      	orrs	r3, r2
   2bf9c:	d126      	bne.n	2bfec <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2bf9e:	2103      	movs	r1, #3
   2bfa0:	4638      	mov	r0, r7
   2bfa2:	f7ff fd1b 	bl	2b9dc <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2bfa6:	b308      	cbz	r0, 2bfec <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2bfa8:	2101      	movs	r1, #1
   2bfaa:	4638      	mov	r0, r7
   2bfac:	f7ff fd16 	bl	2b9dc <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2bfb0:	4606      	mov	r6, r0
   2bfb2:	b1d8      	cbz	r0, 2bfec <bt_smp_request_ltk+0x7c>
	return MIN(req->max_key_size, rsp->max_key_size);
   2bfb4:	7d2c      	ldrb	r4, [r5, #20]
   2bfb6:	7b6b      	ldrb	r3, [r5, #13]
   2bfb8:	429c      	cmp	r4, r3
   2bfba:	bf28      	it	cs
   2bfbc:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   2bfbe:	4622      	mov	r2, r4
   2bfc0:	f105 0147 	add.w	r1, r5, #71	; 0x47
   2bfc4:	4640      	mov	r0, r8
   2bfc6:	f7fd f9be 	bl	29346 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2bfca:	2c0f      	cmp	r4, #15
   2bfcc:	d806      	bhi.n	2bfdc <bt_smp_request_ltk+0x6c>
			(void)memset(ltk + enc_size, 0,
   2bfce:	f1c4 0210 	rsb	r2, r4, #16
   2bfd2:	4649      	mov	r1, r9
   2bfd4:	eb08 0004 	add.w	r0, r8, r4
   2bfd8:	f7fd f9c0 	bl	2935c <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2bfdc:	2101      	movs	r1, #1
   2bfde:	4638      	mov	r0, r7
   2bfe0:	f7ff fdef 	bl	2bbc2 <atomic_set_bit>
}
   2bfe4:	4630      	mov	r0, r6
   2bfe6:	b003      	add	sp, #12
   2bfe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   2bfec:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   2bff0:	b983      	cbnz	r3, 2c014 <bt_smp_request_ltk+0xa4>
					     &conn->le.dst);
   2bff2:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2bff6:	7a21      	ldrb	r1, [r4, #8]
   2bff8:	4632      	mov	r2, r6
   2bffa:	2020      	movs	r0, #32
   2bffc:	f7e9 f81c 	bl	15038 <bt_keys_find>
   2c000:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   2c004:	b930      	cbnz	r0, 2c014 <bt_smp_request_ltk+0xa4>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   2c006:	7a21      	ldrb	r1, [r4, #8]
   2c008:	4632      	mov	r2, r6
   2c00a:	2001      	movs	r0, #1
   2c00c:	f7e9 f814 	bl	15038 <bt_keys_find>
   2c010:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   2c014:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2c018:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   2c01c:	b9ee      	cbnz	r6, 2c05a <bt_smp_request_ltk+0xea>
   2c01e:	e9dd 2300 	ldrd	r2, r3, [sp]
   2c022:	4313      	orrs	r3, r2
   2c024:	d119      	bne.n	2c05a <bt_smp_request_ltk+0xea>
   2c026:	b388      	cbz	r0, 2c08c <bt_smp_request_ltk+0x11c>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2c028:	89c3      	ldrh	r3, [r0, #14]
   2c02a:	069a      	lsls	r2, r3, #26
   2c02c:	d516      	bpl.n	2c05c <bt_smp_request_ltk+0xec>
		enc_size = conn->le.keys->enc_size;
   2c02e:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   2c030:	f100 011a 	add.w	r1, r0, #26
   2c034:	4622      	mov	r2, r4
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   2c036:	4640      	mov	r0, r8
   2c038:	f7fd f985 	bl	29346 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2c03c:	2c0f      	cmp	r4, #15
   2c03e:	d806      	bhi.n	2c04e <bt_smp_request_ltk+0xde>
			(void)memset(ltk + enc_size, 0,
   2c040:	f1c4 0210 	rsb	r2, r4, #16
   2c044:	4631      	mov	r1, r6
   2c046:	eb08 0004 	add.w	r0, r8, r4
   2c04a:	f7fd f987 	bl	2935c <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2c04e:	2101      	movs	r1, #1
   2c050:	4638      	mov	r0, r7
   2c052:	f7ff fdb6 	bl	2bbc2 <atomic_set_bit>
		return true;
   2c056:	2601      	movs	r6, #1
   2c058:	e7c4      	b.n	2bfe4 <bt_smp_request_ltk+0x74>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2c05a:	b1b8      	cbz	r0, 2c08c <bt_smp_request_ltk+0x11c>
   2c05c:	89c3      	ldrh	r3, [r0, #14]
   2c05e:	07db      	lsls	r3, r3, #31
   2c060:	d514      	bpl.n	2c08c <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2c062:	2208      	movs	r2, #8
   2c064:	4669      	mov	r1, sp
   2c066:	3040      	adds	r0, #64	; 0x40
   2c068:	f7fd f95c 	bl	29324 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2c06c:	b970      	cbnz	r0, 2c08c <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   2c06e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2c072:	2202      	movs	r2, #2
   2c074:	a90a      	add	r1, sp, #40	; 0x28
   2c076:	3048      	adds	r0, #72	; 0x48
   2c078:	f7fd f954 	bl	29324 <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2c07c:	4606      	mov	r6, r0
   2c07e:	b928      	cbnz	r0, 2c08c <bt_smp_request_ltk+0x11c>
		enc_size = conn->le.keys->enc_size;
   2c080:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   2c084:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   2c086:	314a      	adds	r1, #74	; 0x4a
   2c088:	4622      	mov	r2, r4
   2c08a:	e7d4      	b.n	2c036 <bt_smp_request_ltk+0xc6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2c08c:	210f      	movs	r1, #15
   2c08e:	4638      	mov	r0, r7
   2c090:	f7ff fca4 	bl	2b9dc <atomic_test_bit>
   2c094:	b120      	cbz	r0, 2c0a0 <bt_smp_request_ltk+0x130>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2c096:	2202      	movs	r2, #2
   2c098:	2106      	movs	r1, #6
   2c09a:	4620      	mov	r0, r4
   2c09c:	f7e5 fec2 	bl	11e24 <bt_conn_security_changed>
	smp_reset(smp);
   2c0a0:	4628      	mov	r0, r5
   2c0a2:	f7ff fe74 	bl	2bd8e <smp_reset>
	return false;
   2c0a6:	2600      	movs	r6, #0
   2c0a8:	e79c      	b.n	2bfe4 <bt_smp_request_ltk+0x74>
		return false;
   2c0aa:	4606      	mov	r6, r0
   2c0ac:	e79a      	b.n	2bfe4 <bt_smp_request_ltk+0x74>

0002c0ae <bt_smp_sign>:
   2c0ae:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2c0b2:	4770      	bx	lr

0002c0b4 <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2c0b4:	1d03      	adds	r3, r0, #4
{
   2c0b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2c0b8:	4605      	mov	r5, r0
   2c0ba:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2c0bc:	4618      	mov	r0, r3
   2c0be:	2103      	movs	r1, #3
   2c0c0:	f7ff fc8c 	bl	2b9dc <atomic_test_bit>
   2c0c4:	b1f0      	cbz	r0, 2c104 <smp_error+0x50>
		smp_pairing_complete(smp, reason);
   2c0c6:	4631      	mov	r1, r6
   2c0c8:	4628      	mov	r0, r5
   2c0ca:	f7e8 fd7f 	bl	14bcc <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   2c0ce:	2105      	movs	r1, #5
   2c0d0:	4628      	mov	r0, r5
   2c0d2:	f7ff fdc8 	bl	2bc66 <smp_create_pdu.constprop.0>
	if (!buf) {
   2c0d6:	4604      	mov	r4, r0
   2c0d8:	b308      	cbz	r0, 2c11e <smp_error+0x6a>
   2c0da:	2101      	movs	r1, #1
   2c0dc:	3008      	adds	r0, #8
   2c0de:	f001 f978 	bl	2d3d2 <net_buf_simple_add>
	rsp->reason = reason;
   2c0e2:	7006      	strb	r6, [r0, #0]
   2c0e4:	2600      	movs	r6, #0
   2c0e6:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
   2c0ea:	9600      	str	r6, [sp, #0]
   2c0ec:	4633      	mov	r3, r6
   2c0ee:	4622      	mov	r2, r4
   2c0f0:	2106      	movs	r1, #6
   2c0f2:	f7fe fa2d 	bl	2a550 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   2c0f6:	b118      	cbz	r0, 2c100 <smp_error+0x4c>
		net_buf_unref(buf);
   2c0f8:	4620      	mov	r0, r4
   2c0fa:	f7f7 f9cd 	bl	23498 <net_buf_unref>
	return 0;
   2c0fe:	4630      	mov	r0, r6
}
   2c100:	b002      	add	sp, #8
   2c102:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2c104:	2101      	movs	r1, #1
   2c106:	4618      	mov	r0, r3
   2c108:	f7ff fc68 	bl	2b9dc <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2c10c:	2800      	cmp	r0, #0
   2c10e:	d1da      	bne.n	2c0c6 <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2c110:	210f      	movs	r1, #15
   2c112:	4618      	mov	r0, r3
   2c114:	f7ff fc62 	bl	2b9dc <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2c118:	2800      	cmp	r0, #0
   2c11a:	d1d4      	bne.n	2c0c6 <smp_error+0x12>
   2c11c:	e7d7      	b.n	2c0ce <smp_error+0x1a>
		return -ENOBUFS;
   2c11e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c122:	e7ed      	b.n	2c100 <smp_error+0x4c>

0002c124 <bt_smp_dhkey_ready>:
{
   2c124:	b570      	push	{r4, r5, r6, lr}
   2c126:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   2c128:	2008      	movs	r0, #8
   2c12a:	f7e7 ff57 	bl	13fdc <smp_find>
	if (smp) {
   2c12e:	4604      	mov	r4, r0
   2c130:	b1b8      	cbz	r0, 2c162 <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2c132:	1d05      	adds	r5, r0, #4
   2c134:	2108      	movs	r1, #8
   2c136:	4628      	mov	r0, r5
   2c138:	f7ff fc7a 	bl	2ba30 <atomic_clear_bit>
	if (!dhkey) {
   2c13c:	b38e      	cbz	r6, 2c1a2 <bt_smp_dhkey_ready+0x7e>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2c13e:	2107      	movs	r1, #7
   2c140:	f7ff fc76 	bl	2ba30 <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   2c144:	4631      	mov	r1, r6
   2c146:	2220      	movs	r2, #32
   2c148:	f104 0097 	add.w	r0, r4, #151	; 0x97
   2c14c:	f7fd f8fb 	bl	29346 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2c150:	210a      	movs	r1, #10
   2c152:	4628      	mov	r0, r5
   2c154:	f7ff fc42 	bl	2b9dc <atomic_test_bit>
   2c158:	b168      	cbz	r0, 2c176 <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2c15a:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2c15c:	4628      	mov	r0, r5
   2c15e:	f7ff fd30 	bl	2bbc2 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   2c162:	2007      	movs	r0, #7
   2c164:	f7e7 ff3a 	bl	13fdc <smp_find>
		if (smp) {
   2c168:	4604      	mov	r4, r0
   2c16a:	b118      	cbz	r0, 2c174 <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   2c16c:	f7e7 ff7e 	bl	1406c <smp_dhkey_generate>
			if (err) {
   2c170:	4601      	mov	r1, r0
   2c172:	b990      	cbnz	r0, 2c19a <bt_smp_dhkey_ready+0x76>
}
   2c174:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2c176:	2110      	movs	r1, #16
   2c178:	4628      	mov	r0, r5
   2c17a:	f7ff fc2f 	bl	2b9dc <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2c17e:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2c180:	2800      	cmp	r0, #0
   2c182:	d1eb      	bne.n	2c15c <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   2c184:	4628      	mov	r0, r5
   2c186:	f7ff fc29 	bl	2b9dc <atomic_test_bit>
   2c18a:	2800      	cmp	r0, #0
   2c18c:	d0e9      	beq.n	2c162 <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   2c18e:	4620      	mov	r0, r4
   2c190:	f7e8 fa4a 	bl	14628 <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   2c194:	4601      	mov	r1, r0
   2c196:	2800      	cmp	r0, #0
   2c198:	d0e3      	beq.n	2c162 <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   2c19a:	4620      	mov	r0, r4
   2c19c:	f7ff ff8a 	bl	2c0b4 <smp_error>
   2c1a0:	e7df      	b.n	2c162 <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2c1a2:	210b      	movs	r1, #11
   2c1a4:	e7f9      	b.n	2c19a <bt_smp_dhkey_ready+0x76>

0002c1a6 <smp_ident_addr_info>:
{
   2c1a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   2c1aa:	688f      	ldr	r7, [r1, #8]
 *
 *  @return true if address is a valid identity address.
 */
static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   2c1ac:	783b      	ldrb	r3, [r7, #0]
{
   2c1ae:	4604      	mov	r4, r0
   2c1b0:	b123      	cbz	r3, 2c1bc <smp_ident_addr_info+0x16>
	if (!bt_addr_le_is_identity(&req->addr)) {
   2c1b2:	79bb      	ldrb	r3, [r7, #6]
   2c1b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2c1b8:	2bc0      	cmp	r3, #192	; 0xc0
   2c1ba:	d16b      	bne.n	2c294 <smp_ident_addr_info+0xee>
	struct bt_conn *conn = smp->chan.chan.conn;
   2c1bc:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   2c1c0:	f105 0888 	add.w	r8, r5, #136	; 0x88
	return memcmp(a, b, sizeof(*a));
   2c1c4:	2207      	movs	r2, #7
   2c1c6:	4639      	mov	r1, r7
   2c1c8:	4640      	mov	r0, r8
   2c1ca:	f7fd f8ab 	bl	29324 <memcmp>
   2c1ce:	b180      	cbz	r0, 2c1f2 <smp_ident_addr_info+0x4c>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   2c1d0:	7a28      	ldrb	r0, [r5, #8]
   2c1d2:	4639      	mov	r1, r7
   2c1d4:	f7e8 ff7e 	bl	150d4 <bt_keys_find_addr>
		if (keys) {
   2c1d8:	4606      	mov	r6, r0
   2c1da:	b150      	cbz	r0, 2c1f2 <smp_ident_addr_info+0x4c>
			if (!update_keys_check(smp, keys)) {
   2c1dc:	4601      	mov	r1, r0
   2c1de:	4620      	mov	r0, r4
   2c1e0:	f7ff fc05 	bl	2b9ee <update_keys_check>
   2c1e4:	b910      	cbnz	r0, 2c1ec <smp_ident_addr_info+0x46>
				return BT_SMP_ERR_UNSPECIFIED;
   2c1e6:	2008      	movs	r0, #8
}
   2c1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_keys_clear(keys);
   2c1ec:	4630      	mov	r0, r6
   2c1ee:	f7e8 ff81 	bl	150f4 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   2c1f2:	210d      	movs	r1, #13
   2c1f4:	1d20      	adds	r0, r4, #4
   2c1f6:	f7ff fbf1 	bl	2b9dc <atomic_test_bit>
   2c1fa:	b398      	cbz	r0, 2c264 <smp_ident_addr_info+0xbe>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   2c1fc:	7a29      	ldrb	r1, [r5, #8]
   2c1fe:	4642      	mov	r2, r8
   2c200:	2002      	movs	r0, #2
   2c202:	f000 f94d 	bl	2c4a0 <bt_keys_get_type>
		if (!keys) {
   2c206:	4606      	mov	r6, r0
   2c208:	2800      	cmp	r0, #0
   2c20a:	d0ec      	beq.n	2c1e6 <smp_ident_addr_info+0x40>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2c20c:	78eb      	ldrb	r3, [r5, #3]
   2c20e:	2b00      	cmp	r3, #0
   2c210:	d13d      	bne.n	2c28e <smp_ident_addr_info+0xe8>
			dst = &conn->le.resp_addr;
   2c212:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   2c216:	780b      	ldrb	r3, [r1, #0]
   2c218:	2b01      	cmp	r3, #1
   2c21a:	d120      	bne.n	2c25e <smp_ident_addr_info+0xb8>
		if (bt_addr_le_is_rpa(dst)) {
   2c21c:	798b      	ldrb	r3, [r1, #6]
   2c21e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2c222:	2b40      	cmp	r3, #64	; 0x40
   2c224:	d11b      	bne.n	2c25e <smp_ident_addr_info+0xb8>
	memcpy(dst, src, sizeof(*dst));
   2c226:	2206      	movs	r2, #6
   2c228:	3101      	adds	r1, #1
   2c22a:	f106 003a 	add.w	r0, r6, #58	; 0x3a
   2c22e:	f7fd f88a 	bl	29346 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   2c232:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
   2c236:	b193      	cbz	r3, 2c25e <smp_ident_addr_info+0xb8>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   2c238:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   2c23c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2c240:	2bc0      	cmp	r3, #192	; 0xc0
   2c242:	d00c      	beq.n	2c25e <smp_ident_addr_info+0xb8>
	memcpy(dst, src, sizeof(*dst));
   2c244:	2207      	movs	r2, #7
   2c246:	4639      	mov	r1, r7
   2c248:	1c70      	adds	r0, r6, #1
   2c24a:	f7fd f87c 	bl	29346 <memcpy>
   2c24e:	2207      	movs	r2, #7
   2c250:	4639      	mov	r1, r7
   2c252:	4640      	mov	r0, r8
   2c254:	f7fd f877 	bl	29346 <memcpy>
				bt_conn_identity_resolved(conn);
   2c258:	4628      	mov	r0, r5
   2c25a:	f7e5 fdb5 	bl	11dc8 <bt_conn_identity_resolved>
		bt_id_add(keys);
   2c25e:	4630      	mov	r0, r6
   2c260:	f7e4 fd3a 	bl	10cd8 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   2c264:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   2c268:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   2c26c:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   2c26e:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   2c272:	d503      	bpl.n	2c27c <smp_ident_addr_info+0xd6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   2c274:	210a      	movs	r1, #10
   2c276:	4620      	mov	r0, r4
   2c278:	f7ff fca3 	bl	2bbc2 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   2c27c:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   2c280:	b91d      	cbnz	r5, 2c28a <smp_ident_addr_info+0xe4>
		smp_pairing_complete(smp, 0);
   2c282:	4629      	mov	r1, r5
   2c284:	4620      	mov	r0, r4
   2c286:	f7e8 fca1 	bl	14bcc <smp_pairing_complete>
	return 0;
   2c28a:	2000      	movs	r0, #0
   2c28c:	e7ac      	b.n	2c1e8 <smp_ident_addr_info+0x42>
			dst = &conn->le.init_addr;
   2c28e:	f105 018f 	add.w	r1, r5, #143	; 0x8f
   2c292:	e7c0      	b.n	2c216 <smp_ident_addr_info+0x70>
		return BT_SMP_ERR_INVALID_PARAMS;
   2c294:	200a      	movs	r0, #10
   2c296:	e7a7      	b.n	2c1e8 <smp_ident_addr_info+0x42>

0002c298 <smp_central_ident>:
{
   2c298:	b570      	push	{r4, r5, r6, lr}
   2c29a:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   2c29c:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
{
   2c2a0:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   2c2a2:	210d      	movs	r1, #13
   2c2a4:	3004      	adds	r0, #4
   2c2a6:	f7ff fb99 	bl	2b9dc <atomic_test_bit>
   2c2aa:	b198      	cbz	r0, 2c2d4 <smp_central_ident+0x3c>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   2c2ac:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   2c2ae:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   2c2b0:	f105 0288 	add.w	r2, r5, #136	; 0x88
   2c2b4:	2004      	movs	r0, #4
   2c2b6:	f000 f8f3 	bl	2c4a0 <bt_keys_get_type>
		if (!keys) {
   2c2ba:	4605      	mov	r5, r0
   2c2bc:	b318      	cbz	r0, 2c306 <smp_central_ident+0x6e>
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   2c2be:	2202      	movs	r2, #2
   2c2c0:	4631      	mov	r1, r6
   2c2c2:	3018      	adds	r0, #24
   2c2c4:	f7fd f83f 	bl	29346 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   2c2c8:	2208      	movs	r2, #8
   2c2ca:	1cb1      	adds	r1, r6, #2
   2c2cc:	f105 0010 	add.w	r0, r5, #16
   2c2d0:	f7fd f839 	bl	29346 <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   2c2d4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   2c2d8:	f023 0201 	bic.w	r2, r3, #1
   2c2dc:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   2c2e0:	079a      	lsls	r2, r3, #30
   2c2e2:	d50c      	bpl.n	2c2fe <smp_central_ident+0x66>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   2c2e4:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   2c2e6:	4620      	mov	r0, r4
   2c2e8:	f7ff fc6b 	bl	2bbc2 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   2c2ec:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   2c2f0:	b91d      	cbnz	r5, 2c2fa <smp_central_ident+0x62>
		smp_pairing_complete(smp, 0);
   2c2f2:	4629      	mov	r1, r5
   2c2f4:	4620      	mov	r0, r4
   2c2f6:	f7e8 fc69 	bl	14bcc <smp_pairing_complete>
	return 0;
   2c2fa:	2000      	movs	r0, #0
   2c2fc:	e004      	b.n	2c308 <smp_central_ident+0x70>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   2c2fe:	075b      	lsls	r3, r3, #29
   2c300:	d5f4      	bpl.n	2c2ec <smp_central_ident+0x54>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   2c302:	210a      	movs	r1, #10
   2c304:	e7ef      	b.n	2c2e6 <smp_central_ident+0x4e>
			return BT_SMP_ERR_UNSPECIFIED;
   2c306:	2008      	movs	r0, #8
}
   2c308:	bd70      	pop	{r4, r5, r6, pc}

0002c30a <bt_smp_disconnected>:
{
   2c30a:	b570      	push	{r4, r5, r6, lr}
   2c30c:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2c30e:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_keys *keys = chan->conn->le.keys;
   2c312:	f850 3be8 	ldr.w	r3, [r0], #232
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2c316:	3cec      	subs	r4, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   2c318:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   2c31c:	f002 face 	bl	2e8bc <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2c320:	2103      	movs	r1, #3
   2c322:	4620      	mov	r0, r4
   2c324:	f7ff fb5a 	bl	2b9dc <atomic_test_bit>
   2c328:	b1a0      	cbz	r0, 2c354 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2c32a:	2108      	movs	r1, #8
   2c32c:	4630      	mov	r0, r6
   2c32e:	f7e8 fc4d 	bl	14bcc <smp_pairing_complete>
	if (keys) {
   2c332:	b13d      	cbz	r5, 2c344 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2c334:	89eb      	ldrh	r3, [r5, #14]
   2c336:	b113      	cbz	r3, 2c33e <bt_smp_disconnected+0x34>
   2c338:	7b6b      	ldrb	r3, [r5, #13]
   2c33a:	079b      	lsls	r3, r3, #30
   2c33c:	d502      	bpl.n	2c344 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   2c33e:	4628      	mov	r0, r5
   2c340:	f7e8 fed8 	bl	150f4 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   2c344:	4630      	mov	r0, r6
   2c346:	f44f 7202 	mov.w	r2, #520	; 0x208
}
   2c34a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   2c34e:	2100      	movs	r1, #0
   2c350:	f7fd b804 	b.w	2935c <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2c354:	2101      	movs	r1, #1
   2c356:	4620      	mov	r0, r4
   2c358:	f7ff fb40 	bl	2b9dc <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2c35c:	2800      	cmp	r0, #0
   2c35e:	d1e4      	bne.n	2c32a <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2c360:	210f      	movs	r1, #15
   2c362:	4620      	mov	r0, r4
   2c364:	f7ff fb3a 	bl	2b9dc <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2c368:	2800      	cmp	r0, #0
   2c36a:	d1de      	bne.n	2c32a <bt_smp_disconnected+0x20>
   2c36c:	e7e1      	b.n	2c332 <bt_smp_disconnected+0x28>

0002c36e <smp_timeout>:
{
   2c36e:	b510      	push	{r4, lr}
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2c370:	2108      	movs	r1, #8
{
   2c372:	4604      	mov	r4, r0
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2c374:	f5a0 70ec 	sub.w	r0, r0, #472	; 0x1d8
   2c378:	f7e8 fc28 	bl	14bcc <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2c37c:	f5a4 70ea 	sub.w	r0, r4, #468	; 0x1d4
   2c380:	2104      	movs	r1, #4
}
   2c382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2c386:	f7ff bc1c 	b.w	2bbc2 <atomic_set_bit>

0002c38a <smp_ident_sent>:
{
   2c38a:	b508      	push	{r3, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   2c38c:	7883      	ldrb	r3, [r0, #2]
   2c38e:	2b01      	cmp	r3, #1
   2c390:	d110      	bne.n	2c3b4 <smp_ident_sent+0x2a>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   2c392:	2106      	movs	r1, #6
   2c394:	f7fe f926 	bl	2a5e4 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   2c398:	f810 3c08 	ldrb.w	r3, [r0, #-8]
   2c39c:	f023 0301 	bic.w	r3, r3, #1
   2c3a0:	f800 3c08 	strb.w	r3, [r0, #-8]
		if (!smp->local_dist && !smp->remote_dist) {
   2c3a4:	f830 1c08 	ldrh.w	r1, [r0, #-8]
   2c3a8:	b921      	cbnz	r1, 2c3b4 <smp_ident_sent+0x2a>
}
   2c3aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   2c3ae:	38f0      	subs	r0, #240	; 0xf0
   2c3b0:	f7e8 bc0c 	b.w	14bcc <smp_pairing_complete>
}
   2c3b4:	bd08      	pop	{r3, pc}

0002c3b6 <bt_smp_update_keys>:
{
   2c3b6:	b570      	push	{r4, r5, r6, lr}
   2c3b8:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   2c3ba:	f7ff fb08 	bl	2b9ce <smp_chan_get>
	if (!smp) {
   2c3be:	4605      	mov	r5, r0
   2c3c0:	2800      	cmp	r0, #0
   2c3c2:	d06a      	beq.n	2c49a <bt_smp_update_keys+0xe4>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2c3c4:	1d06      	adds	r6, r0, #4
   2c3c6:	2103      	movs	r1, #3
   2c3c8:	4630      	mov	r0, r6
   2c3ca:	f7ff fb07 	bl	2b9dc <atomic_test_bit>
   2c3ce:	2800      	cmp	r0, #0
   2c3d0:	d063      	beq.n	2c49a <bt_smp_update_keys+0xe4>
	if (conn->le.keys) {
   2c3d2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2c3d6:	b108      	cbz	r0, 2c3dc <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   2c3d8:	f7e8 fe8c 	bl	150f4 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   2c3dc:	7a20      	ldrb	r0, [r4, #8]
   2c3de:	f104 0188 	add.w	r1, r4, #136	; 0x88
   2c3e2:	f7e8 fde9 	bl	14fb8 <bt_keys_get_addr>
   2c3e6:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   2c3ea:	b928      	cbnz	r0, 2c3f8 <bt_smp_update_keys+0x42>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   2c3ec:	4628      	mov	r0, r5
   2c3ee:	2108      	movs	r1, #8
}
   2c3f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   2c3f4:	f7ff be5e 	b.w	2c0b4 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   2c3f8:	210e      	movs	r1, #14
   2c3fa:	4630      	mov	r0, r6
   2c3fc:	f7ff faee 	bl	2b9dc <atomic_test_bit>
   2c400:	b128      	cbz	r0, 2c40e <bt_smp_update_keys+0x58>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   2c402:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   2c406:	7b53      	ldrb	r3, [r2, #13]
   2c408:	f043 0302 	orr.w	r3, r3, #2
   2c40c:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   2c40e:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   2c410:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
   2c414:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   2c416:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   2c418:	d836      	bhi.n	2c488 <bt_smp_update_keys+0xd2>
   2c41a:	b3c2      	cbz	r2, 2c48e <bt_smp_update_keys+0xd8>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   2c41c:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   2c420:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   2c422:	7b6b      	ldrb	r3, [r5, #13]
   2c424:	7d2a      	ldrb	r2, [r5, #20]
   2c426:	4293      	cmp	r3, r2
   2c428:	bf28      	it	cs
   2c42a:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   2c42c:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2c42e:	4630      	mov	r0, r6
   2c430:	2105      	movs	r1, #5
   2c432:	f7ff fad3 	bl	2b9dc <atomic_test_bit>
   2c436:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   2c43a:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2c43c:	b350      	cbz	r0, 2c494 <bt_smp_update_keys+0xde>
		conn->le.keys->flags |= BT_KEYS_SC;
   2c43e:	f042 0210 	orr.w	r2, r2, #16
   2c442:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   2c444:	210d      	movs	r1, #13
   2c446:	4630      	mov	r0, r6
   2c448:	f7ff fac8 	bl	2b9dc <atomic_test_bit>
   2c44c:	b328      	cbz	r0, 2c49a <bt_smp_update_keys+0xe4>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   2c44e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2c452:	2120      	movs	r1, #32
   2c454:	f000 f834 	bl	2c4c0 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   2c458:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2c45c:	f105 0147 	add.w	r1, r5, #71	; 0x47
   2c460:	2210      	movs	r2, #16
   2c462:	301a      	adds	r0, #26
   2c464:	f7fc ff6f 	bl	29346 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   2c468:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2c46c:	2208      	movs	r2, #8
   2c46e:	2100      	movs	r1, #0
   2c470:	3010      	adds	r0, #16
   2c472:	f7fc ff73 	bl	2935c <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   2c476:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2c47a:	2202      	movs	r2, #2
}
   2c47c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   2c480:	2100      	movs	r1, #0
   2c482:	3018      	adds	r0, #24
   2c484:	f7fc bf6a 	b.w	2935c <memset>
	switch (smp->method) {
   2c488:	3a05      	subs	r2, #5
   2c48a:	2a01      	cmp	r2, #1
   2c48c:	d9c6      	bls.n	2c41c <bt_smp_update_keys+0x66>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   2c48e:	f023 0301 	bic.w	r3, r3, #1
   2c492:	e7c5      	b.n	2c420 <bt_smp_update_keys+0x6a>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   2c494:	f022 0210 	bic.w	r2, r2, #16
   2c498:	735a      	strb	r2, [r3, #13]
}
   2c49a:	bd70      	pop	{r4, r5, r6, pc}

0002c49c <id_add>:
	bt_id_add(keys);
   2c49c:	f7e4 bc1c 	b.w	10cd8 <bt_id_add>

0002c4a0 <bt_keys_get_type>:
{
   2c4a0:	b570      	push	{r4, r5, r6, lr}
   2c4a2:	4604      	mov	r4, r0
   2c4a4:	460d      	mov	r5, r1
   2c4a6:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   2c4a8:	f7e8 fdc6 	bl	15038 <bt_keys_find>
	if (keys) {
   2c4ac:	b938      	cbnz	r0, 2c4be <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   2c4ae:	4631      	mov	r1, r6
   2c4b0:	4628      	mov	r0, r5
   2c4b2:	f7e8 fd81 	bl	14fb8 <bt_keys_get_addr>
	if (!keys) {
   2c4b6:	b110      	cbz	r0, 2c4be <bt_keys_get_type+0x1e>
	keys->keys |= type;
   2c4b8:	89c3      	ldrh	r3, [r0, #14]
   2c4ba:	431c      	orrs	r4, r3
   2c4bc:	81c4      	strh	r4, [r0, #14]
}
   2c4be:	bd70      	pop	{r4, r5, r6, pc}

0002c4c0 <bt_keys_add_type>:
	keys->keys |= type;
   2c4c0:	89c3      	ldrh	r3, [r0, #14]
   2c4c2:	4319      	orrs	r1, r3
   2c4c4:	81c1      	strh	r1, [r0, #14]
}
   2c4c6:	4770      	bx	lr

0002c4c8 <keys_set>:
{
   2c4c8:	b570      	push	{r4, r5, r6, lr}
   2c4ca:	4605      	mov	r5, r0
   2c4cc:	b098      	sub	sp, #96	; 0x60
   2c4ce:	4614      	mov	r4, r2
   2c4d0:	4618      	mov	r0, r3
	if (!name) {
   2c4d2:	b915      	cbnz	r5, 2c4da <keys_set+0x12>
			return -EINVAL;
   2c4d4:	f06f 0415 	mvn.w	r4, #21
   2c4d8:	e01c      	b.n	2c514 <keys_set+0x4c>
	len = read_cb(cb_arg, val, sizeof(val));
   2c4da:	2250      	movs	r2, #80	; 0x50
   2c4dc:	a904      	add	r1, sp, #16
   2c4de:	47a0      	blx	r4
	if (len < 0) {
   2c4e0:	1e04      	subs	r4, r0, #0
   2c4e2:	dbf7      	blt.n	2c4d4 <keys_set+0xc>
	err = bt_settings_decode_key(name, &addr);
   2c4e4:	a902      	add	r1, sp, #8
   2c4e6:	4628      	mov	r0, r5
   2c4e8:	f7fc ffdf 	bl	294aa <bt_settings_decode_key>
	if (err) {
   2c4ec:	4606      	mov	r6, r0
   2c4ee:	2800      	cmp	r0, #0
   2c4f0:	d1f0      	bne.n	2c4d4 <keys_set+0xc>
	settings_name_next(name, &next);
   2c4f2:	a901      	add	r1, sp, #4
   2c4f4:	4628      	mov	r0, r5
   2c4f6:	f7fb fc4b 	bl	27d90 <settings_name_next>
	if (!next) {
   2c4fa:	9801      	ldr	r0, [sp, #4]
   2c4fc:	b968      	cbnz	r0, 2c51a <keys_set+0x52>
	if (!len) {
   2c4fe:	b99c      	cbnz	r4, 2c528 <keys_set+0x60>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   2c500:	aa02      	add	r2, sp, #8
   2c502:	4621      	mov	r1, r4
   2c504:	203f      	movs	r0, #63	; 0x3f
   2c506:	f7e8 fd97 	bl	15038 <bt_keys_find>
		if (keys) {
   2c50a:	b118      	cbz	r0, 2c514 <keys_set+0x4c>
			(void)memset(keys, 0, sizeof(*keys));
   2c50c:	225c      	movs	r2, #92	; 0x5c
   2c50e:	4621      	mov	r1, r4
   2c510:	f7fc ff24 	bl	2935c <memset>
}
   2c514:	4620      	mov	r0, r4
   2c516:	b018      	add	sp, #96	; 0x60
   2c518:	bd70      	pop	{r4, r5, r6, pc}
		unsigned long next_id = strtoul(next, NULL, 10);
   2c51a:	220a      	movs	r2, #10
   2c51c:	4631      	mov	r1, r6
   2c51e:	f7fc fe51 	bl	291c4 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   2c522:	2800      	cmp	r0, #0
   2c524:	d0eb      	beq.n	2c4fe <keys_set+0x36>
   2c526:	e7d5      	b.n	2c4d4 <keys_set+0xc>
	keys = bt_keys_get_addr(id, &addr);
   2c528:	a902      	add	r1, sp, #8
   2c52a:	2000      	movs	r0, #0
   2c52c:	f7e8 fd44 	bl	14fb8 <bt_keys_get_addr>
	if (!keys) {
   2c530:	b158      	cbz	r0, 2c54a <keys_set+0x82>
	if (len != BT_KEYS_STORAGE_LEN) {
   2c532:	2c50      	cmp	r4, #80	; 0x50
   2c534:	d002      	beq.n	2c53c <keys_set+0x74>
			bt_keys_clear(keys);
   2c536:	f7e8 fddd 	bl	150f4 <bt_keys_clear>
   2c53a:	e7cb      	b.n	2c4d4 <keys_set+0xc>
		memcpy(keys->storage_start, val, len);
   2c53c:	4622      	mov	r2, r4
   2c53e:	a904      	add	r1, sp, #16
   2c540:	300c      	adds	r0, #12
   2c542:	f7fc ff00 	bl	29346 <memcpy>
	return 0;
   2c546:	2400      	movs	r4, #0
   2c548:	e7e4      	b.n	2c514 <keys_set+0x4c>
		return -ENOMEM;
   2c54a:	f06f 040b 	mvn.w	r4, #11
   2c54e:	e7e1      	b.n	2c514 <keys_set+0x4c>

0002c550 <sys_get_be32>:
	return ((uint16_t)src[0] << 8) | src[1];
   2c550:	6800      	ldr	r0, [r0, #0]
}
   2c552:	ba00      	rev	r0, r0
   2c554:	4770      	bx	lr

0002c556 <cbor_nb_reader_get8>:
	if (offset < 0 || offset >= cnr->nb->len) {
   2c556:	2900      	cmp	r1, #0
   2c558:	db06      	blt.n	2c568 <cbor_nb_reader_get8+0x12>
   2c55a:	69c3      	ldr	r3, [r0, #28]
   2c55c:	899a      	ldrh	r2, [r3, #12]
   2c55e:	428a      	cmp	r2, r1
   2c560:	dd02      	ble.n	2c568 <cbor_nb_reader_get8+0x12>
	return cnr->nb->data[offset];
   2c562:	689b      	ldr	r3, [r3, #8]
   2c564:	5c58      	ldrb	r0, [r3, r1]
   2c566:	4770      	bx	lr
		return UINT8_MAX;
   2c568:	20ff      	movs	r0, #255	; 0xff
}
   2c56a:	4770      	bx	lr

0002c56c <cbor_nb_reader_get16>:
	if (offset < 0 || offset > cnr->nb->len - (int)sizeof(uint16_t)) {
   2c56c:	2900      	cmp	r1, #0
   2c56e:	db09      	blt.n	2c584 <cbor_nb_reader_get16+0x18>
   2c570:	69c2      	ldr	r2, [r0, #28]
   2c572:	8993      	ldrh	r3, [r2, #12]
   2c574:	3b01      	subs	r3, #1
   2c576:	428b      	cmp	r3, r1
   2c578:	dd04      	ble.n	2c584 <cbor_nb_reader_get16+0x18>
	return ((uint16_t)src[0] << 8) | src[1];
   2c57a:	6893      	ldr	r3, [r2, #8]
   2c57c:	5a58      	ldrh	r0, [r3, r1]
   2c57e:	ba40      	rev16	r0, r0
   2c580:	b280      	uxth	r0, r0
	return sys_get_be16(cnr->nb->data + offset);
   2c582:	4770      	bx	lr
		return UINT16_MAX;
   2c584:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   2c588:	4770      	bx	lr

0002c58a <cbor_nb_reader_get32>:
	if (offset < 0 || offset > cnr->nb->len - (int)sizeof(uint32_t)) {
   2c58a:	2900      	cmp	r1, #0
   2c58c:	db08      	blt.n	2c5a0 <cbor_nb_reader_get32+0x16>
   2c58e:	69c2      	ldr	r2, [r0, #28]
   2c590:	8993      	ldrh	r3, [r2, #12]
   2c592:	3b03      	subs	r3, #3
   2c594:	428b      	cmp	r3, r1
   2c596:	dd03      	ble.n	2c5a0 <cbor_nb_reader_get32+0x16>
	return sys_get_be32(cnr->nb->data + offset);
   2c598:	6890      	ldr	r0, [r2, #8]
   2c59a:	4408      	add	r0, r1
   2c59c:	f7ff bfd8 	b.w	2c550 <sys_get_be32>
}
   2c5a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c5a4:	4770      	bx	lr

0002c5a6 <cbor_nb_reader_get64>:
	if (offset < 0 || offset > cnr->nb->len - (int)sizeof(uint64_t)) {
   2c5a6:	2900      	cmp	r1, #0
{
   2c5a8:	b508      	push	{r3, lr}
	if (offset < 0 || offset > cnr->nb->len - (int)sizeof(uint64_t)) {
   2c5aa:	db0e      	blt.n	2c5ca <cbor_nb_reader_get64+0x24>
   2c5ac:	69c2      	ldr	r2, [r0, #28]
   2c5ae:	8993      	ldrh	r3, [r2, #12]
   2c5b0:	3b07      	subs	r3, #7
   2c5b2:	428b      	cmp	r3, r1
   2c5b4:	dd09      	ble.n	2c5ca <cbor_nb_reader_get64+0x24>
	return sys_get_be64(cnr->nb->data + offset);
   2c5b6:	6893      	ldr	r3, [r2, #8]
   2c5b8:	440b      	add	r3, r1
	return ((uint64_t)sys_get_be32(&src[0]) << 32) | sys_get_be32(&src[4]);
   2c5ba:	4618      	mov	r0, r3
   2c5bc:	f7ff ffc8 	bl	2c550 <sys_get_be32>
   2c5c0:	4601      	mov	r1, r0
   2c5c2:	1d18      	adds	r0, r3, #4
   2c5c4:	f7ff ffc4 	bl	2c550 <sys_get_be32>
}
   2c5c8:	bd08      	pop	{r3, pc}
		return UINT64_MAX;
   2c5ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c5ce:	4601      	mov	r1, r0
   2c5d0:	e7fa      	b.n	2c5c8 <cbor_nb_reader_get64+0x22>

0002c5d2 <cbor_nb_reader_cpy>:
{
   2c5d2:	b430      	push	{r4, r5}
   2c5d4:	4614      	mov	r4, r2
	if (offset < 0 || offset > cnr->nb->len - (int)len) {
   2c5d6:	2c00      	cmp	r4, #0
{
   2c5d8:	4605      	mov	r5, r0
   2c5da:	461a      	mov	r2, r3
   2c5dc:	4608      	mov	r0, r1
	if (offset < 0 || offset > cnr->nb->len - (int)len) {
   2c5de:	db09      	blt.n	2c5f4 <cbor_nb_reader_cpy+0x22>
   2c5e0:	69e9      	ldr	r1, [r5, #28]
   2c5e2:	898b      	ldrh	r3, [r1, #12]
   2c5e4:	1a9b      	subs	r3, r3, r2
   2c5e6:	42a3      	cmp	r3, r4
   2c5e8:	db04      	blt.n	2c5f4 <cbor_nb_reader_cpy+0x22>
	return (uintptr_t)memcpy(dst, cnr->nb->data + offset, len);
   2c5ea:	6889      	ldr	r1, [r1, #8]
   2c5ec:	4421      	add	r1, r4
}
   2c5ee:	bc30      	pop	{r4, r5}
	return (uintptr_t)memcpy(dst, cnr->nb->data + offset, len);
   2c5f0:	f7fc bea9 	b.w	29346 <memcpy>
}
   2c5f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c5f8:	bc30      	pop	{r4, r5}
   2c5fa:	4770      	bx	lr

0002c5fc <cbor_nb_reader_cmp>:
{
   2c5fc:	b410      	push	{r4}
   2c5fe:	4614      	mov	r4, r2
	if (offset < 0 || offset > cnr->nb->len - (int)len) {
   2c600:	2c00      	cmp	r4, #0
{
   2c602:	461a      	mov	r2, r3
	if (offset < 0 || offset > cnr->nb->len - (int)len) {
   2c604:	db09      	blt.n	2c61a <cbor_nb_reader_cmp+0x1e>
   2c606:	69c0      	ldr	r0, [r0, #28]
   2c608:	8983      	ldrh	r3, [r0, #12]
   2c60a:	1a9b      	subs	r3, r3, r2
   2c60c:	42a3      	cmp	r3, r4
   2c60e:	db04      	blt.n	2c61a <cbor_nb_reader_cmp+0x1e>
	return memcmp(cnr->nb->data + offset, buf, len);
   2c610:	6880      	ldr	r0, [r0, #8]
   2c612:	4420      	add	r0, r4
}
   2c614:	bc10      	pop	{r4}
	return memcmp(cnr->nb->data + offset, buf, len);
   2c616:	f7fc be85 	b.w	29324 <memcmp>
}
   2c61a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c61e:	bc10      	pop	{r4}
   2c620:	4770      	bx	lr

0002c622 <cbor_nb_write>:
{
   2c622:	b570      	push	{r4, r5, r6, lr}
   2c624:	4604      	mov	r4, r0
	return net_buf_simple_tailroom(&buf->b);
   2c626:	6880      	ldr	r0, [r0, #8]
   2c628:	3008      	adds	r0, #8
   2c62a:	4615      	mov	r5, r2
   2c62c:	460e      	mov	r6, r1
   2c62e:	f000 ff0b 	bl	2d448 <net_buf_simple_tailroom>
	if (len > net_buf_tailroom(cnw->nb)) {
   2c632:	4285      	cmp	r5, r0
   2c634:	d80a      	bhi.n	2c64c <cbor_nb_write+0x2a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2c636:	68a0      	ldr	r0, [r4, #8]
   2c638:	462a      	mov	r2, r5
   2c63a:	4631      	mov	r1, r6
   2c63c:	3008      	adds	r0, #8
   2c63e:	f000 fece 	bl	2d3de <net_buf_simple_add_mem>
	cnw->enc.bytes_written += len;
   2c642:	6862      	ldr	r2, [r4, #4]
   2c644:	442a      	add	r2, r5
   2c646:	6062      	str	r2, [r4, #4]
	return CborNoError;
   2c648:	2000      	movs	r0, #0
}
   2c64a:	bd70      	pop	{r4, r5, r6, pc}
		return CborErrorOutOfMemory;
   2c64c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   2c650:	e7fb      	b.n	2c64a <cbor_nb_write+0x28>

0002c652 <mcumgr_buf_free>:
	net_buf_unref(nb);
   2c652:	f7f6 bf21 	b.w	23498 <net_buf_unref>

0002c656 <zephyr_smp_alloc_rsp>:
{
   2c656:	b570      	push	{r4, r5, r6, lr}
   2c658:	4604      	mov	r4, r0
   2c65a:	460e      	mov	r6, r1
	rsp_nb = mcumgr_buf_alloc();
   2c65c:	f7f6 f8c6 	bl	227ec <mcumgr_buf_alloc>
	if (rsp_nb == NULL) {
   2c660:	4605      	mov	r5, r0
   2c662:	b118      	cbz	r0, 2c66c <zephyr_smp_alloc_rsp+0x16>
	if (zst->zst_ud_copy) {
   2c664:	6b33      	ldr	r3, [r6, #48]	; 0x30
   2c666:	b11b      	cbz	r3, 2c670 <zephyr_smp_alloc_rsp+0x1a>
		zst->zst_ud_copy(rsp_nb, req_nb);
   2c668:	4621      	mov	r1, r4
   2c66a:	4798      	blx	r3
}
   2c66c:	4628      	mov	r0, r5
   2c66e:	bd70      	pop	{r4, r5, r6, pc}
		pool = net_buf_pool_get(req_nb->pool_id);
   2c670:	79a0      	ldrb	r0, [r4, #6]
   2c672:	f7f6 fe4d 	bl	23310 <net_buf_pool_get>
		memcpy(net_buf_user_data(rsp_nb),
   2c676:	79e2      	ldrb	r2, [r4, #7]
   2c678:	f104 0114 	add.w	r1, r4, #20
   2c67c:	f105 0014 	add.w	r0, r5, #20
   2c680:	f7fc fe61 	bl	29346 <memcpy>
   2c684:	e7f2      	b.n	2c66c <zephyr_smp_alloc_rsp+0x16>

0002c686 <zephyr_smp_write_hdr>:
{
   2c686:	b508      	push	{r3, lr}
	memcpy(nb->data, hdr, sizeof(*hdr));
   2c688:	6883      	ldr	r3, [r0, #8]
   2c68a:	2208      	movs	r2, #8
   2c68c:	6898      	ldr	r0, [r3, #8]
   2c68e:	f7fc fe5a 	bl	29346 <memcpy>
}
   2c692:	2000      	movs	r0, #0
   2c694:	bd08      	pop	{r3, pc}

0002c696 <zephyr_smp_free_buf>:
{
   2c696:	b510      	push	{r4, lr}
	if (!buf) {
   2c698:	4604      	mov	r4, r0
   2c69a:	b140      	cbz	r0, 2c6ae <zephyr_smp_free_buf+0x18>
	if (zst->zst_ud_free) {
   2c69c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   2c69e:	b10b      	cbz	r3, 2c6a4 <zephyr_smp_free_buf+0xe>
		zst->zst_ud_free(net_buf_user_data((struct net_buf *)buf));
   2c6a0:	3014      	adds	r0, #20
   2c6a2:	4798      	blx	r3
	mcumgr_buf_free(buf);
   2c6a4:	4620      	mov	r0, r4
}
   2c6a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mcumgr_buf_free(buf);
   2c6aa:	f7ff bfd2 	b.w	2c652 <mcumgr_buf_free>
}
   2c6ae:	bd10      	pop	{r4, pc}

0002c6b0 <zephyr_smp_init_writer>:
{
   2c6b0:	b508      	push	{r3, lr}
	cbor_nb_writer_init(czw, buf);
   2c6b2:	f7f6 f8bf 	bl	22834 <cbor_nb_writer_init>
}
   2c6b6:	2000      	movs	r0, #0
   2c6b8:	bd08      	pop	{r3, pc}

0002c6ba <zephyr_smp_init_reader>:
{
   2c6ba:	b508      	push	{r3, lr}
	cbor_nb_reader_init(czr, buf);
   2c6bc:	f7f6 f89e 	bl	227fc <cbor_nb_reader_init>
}
   2c6c0:	2000      	movs	r0, #0
   2c6c2:	bd08      	pop	{r3, pc}

0002c6c4 <zephyr_smp_reset_buf>:
	net_buf_reset(buf);
   2c6c4:	f000 be1e 	b.w	2d304 <net_buf_reset>

0002c6c8 <zephyr_smp_trim_front>:
	if (len > nb->len) {
   2c6c8:	8983      	ldrh	r3, [r0, #12]
	return net_buf_simple_pull(&buf->b, len);
   2c6ca:	4299      	cmp	r1, r3
   2c6cc:	bf28      	it	cs
   2c6ce:	4619      	movcs	r1, r3
   2c6d0:	3008      	adds	r0, #8
   2c6d2:	f000 be9d 	b.w	2d410 <net_buf_simple_pull>

0002c6d6 <zephyr_smp_tx_rsp>:
{
   2c6d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	mtu = zst->zst_get_mtu(rsp);
   2c6d8:	4608      	mov	r0, r1
   2c6da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
{
   2c6dc:	460c      	mov	r4, r1
   2c6de:	4615      	mov	r5, r2
	mtu = zst->zst_get_mtu(rsp);
   2c6e0:	4798      	blx	r3
	if (mtu == 0U) {
   2c6e2:	4607      	mov	r7, r0
   2c6e4:	bb00      	cbnz	r0, 2c728 <zephyr_smp_tx_rsp+0x52>
		return MGMT_ERR_EUNKNOWN;
   2c6e6:	2001      	movs	r0, #1
}
   2c6e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (src->len <= mtu) {
   2c6ea:	89a3      	ldrh	r3, [r4, #12]
   2c6ec:	42bb      	cmp	r3, r7
   2c6ee:	d91f      	bls.n	2c730 <zephyr_smp_tx_rsp+0x5a>
		frag = zephyr_smp_alloc_rsp(src, arg);
   2c6f0:	4629      	mov	r1, r5
   2c6f2:	4620      	mov	r0, r4
   2c6f4:	f7ff ffaf 	bl	2c656 <zephyr_smp_alloc_rsp>
		if (!frag) {
   2c6f8:	4606      	mov	r6, r0
   2c6fa:	b928      	cbnz	r0, 2c708 <zephyr_smp_tx_rsp+0x32>
			zephyr_smp_free_buf(nb, zst);
   2c6fc:	4620      	mov	r0, r4
   2c6fe:	4629      	mov	r1, r5
   2c700:	f7ff ffc9 	bl	2c696 <zephyr_smp_free_buf>
			return MGMT_ERR_ENOMEM;
   2c704:	2002      	movs	r0, #2
   2c706:	e7ef      	b.n	2c6e8 <zephyr_smp_tx_rsp+0x12>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2c708:	68a1      	ldr	r1, [r4, #8]
   2c70a:	463a      	mov	r2, r7
   2c70c:	3008      	adds	r0, #8
   2c70e:	f000 fe66 	bl	2d3de <net_buf_simple_add_mem>
		zephyr_smp_trim_front(src, mtu, NULL);
   2c712:	2200      	movs	r2, #0
   2c714:	4639      	mov	r1, r7
   2c716:	4620      	mov	r0, r4
   2c718:	f7ff ffd6 	bl	2c6c8 <zephyr_smp_trim_front>
		rc = zst->zst_output(zst, frag);
   2c71c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2c71e:	4631      	mov	r1, r6
   2c720:	4628      	mov	r0, r5
   2c722:	4798      	blx	r3
		if (rc != 0) {
   2c724:	2800      	cmp	r0, #0
   2c726:	d1de      	bne.n	2c6e6 <zephyr_smp_tx_rsp+0x10>
	while (nb != NULL) {
   2c728:	2c00      	cmp	r4, #0
   2c72a:	d1de      	bne.n	2c6ea <zephyr_smp_tx_rsp+0x14>
	return 0;
   2c72c:	4620      	mov	r0, r4
   2c72e:	e7db      	b.n	2c6e8 <zephyr_smp_tx_rsp+0x12>
   2c730:	4626      	mov	r6, r4
		*nb = NULL;
   2c732:	2400      	movs	r4, #0
   2c734:	e7f2      	b.n	2c71c <zephyr_smp_tx_rsp+0x46>

0002c736 <zephyr_smp_rx_req>:

WEAK void
zephyr_smp_rx_req(struct zephyr_smp_transport *zst, struct net_buf *nb)
{
   2c736:	b510      	push	{r4, lr}
   2c738:	4604      	mov	r4, r0
	net_buf_put(&zst->zst_fifo, nb);
   2c73a:	3010      	adds	r0, #16
   2c73c:	f000 fe0a 	bl	2d354 <net_buf_put>
	k_work_submit(&zst->zst_work);
   2c740:	4620      	mov	r0, r4
}
   2c742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit(&zst->zst_work);
   2c746:	f7f9 bc83 	b.w	26050 <k_work_submit>

0002c74a <smp_bt_ccc_changed>:
}
   2c74a:	4770      	bx	lr

0002c74c <smp_bt_ud_copy>:
{
   2c74c:	b510      	push	{r4, lr}
   2c74e:	4604      	mov	r4, r0
	if (src_ud->conn) {
   2c750:	6948      	ldr	r0, [r1, #20]
   2c752:	b110      	cbz	r0, 2c75a <smp_bt_ud_copy+0xe>
		dst_ud->conn = bt_conn_ref(src_ud->conn);
   2c754:	f7fd fd73 	bl	2a23e <bt_conn_ref>
   2c758:	6160      	str	r0, [r4, #20]
}
   2c75a:	2000      	movs	r0, #0
   2c75c:	bd10      	pop	{r4, pc}

0002c75e <smp_bt_ud_free>:
{
   2c75e:	b510      	push	{r4, lr}
   2c760:	4604      	mov	r4, r0
	if (user_data->conn) {
   2c762:	6800      	ldr	r0, [r0, #0]
   2c764:	b118      	cbz	r0, 2c76e <smp_bt_ud_free+0x10>
		bt_conn_unref(user_data->conn);
   2c766:	f7fd fd85 	bl	2a274 <bt_conn_unref>
		user_data->conn = NULL;
   2c76a:	2300      	movs	r3, #0
   2c76c:	6023      	str	r3, [r4, #0]
}
   2c76e:	bd10      	pop	{r4, pc}

0002c770 <smp_bt_get_mtu>:
	if (!ud->conn) {
   2c770:	6940      	ldr	r0, [r0, #20]
{
   2c772:	b538      	push	{r3, r4, r5, lr}
	if (!ud->conn) {
   2c774:	b908      	cbnz	r0, 2c77a <smp_bt_get_mtu+0xa>
		return 0;
   2c776:	2000      	movs	r0, #0
}
   2c778:	bd38      	pop	{r3, r4, r5, pc}
	return bt_conn_ref(ud->conn);
   2c77a:	f7fd fd60 	bl	2a23e <bt_conn_ref>
	if (conn == NULL) {
   2c77e:	4605      	mov	r5, r0
   2c780:	2800      	cmp	r0, #0
   2c782:	d0f8      	beq.n	2c776 <smp_bt_get_mtu+0x6>
	mtu = bt_gatt_get_mtu(conn);
   2c784:	f7ff f877 	bl	2b876 <bt_gatt_get_mtu>
   2c788:	4604      	mov	r4, r0
	bt_conn_unref(conn);
   2c78a:	4628      	mov	r0, r5
   2c78c:	f7fd fd72 	bl	2a274 <bt_conn_unref>
	return mtu - 3;
   2c790:	1ee0      	subs	r0, r4, #3
   2c792:	b280      	uxth	r0, r0
   2c794:	e7f0      	b.n	2c778 <smp_bt_get_mtu+0x8>

0002c796 <smp_bt_tx_pkt>:
	if (!ud->conn) {
   2c796:	6948      	ldr	r0, [r1, #20]
{
   2c798:	b570      	push	{r4, r5, r6, lr}
   2c79a:	460c      	mov	r4, r1
	if (!ud->conn) {
   2c79c:	b950      	cbnz	r0, 2c7b4 <smp_bt_tx_pkt+0x1e>
		rc = -1;
   2c79e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	smp_bt_ud_free(net_buf_user_data(nb));
   2c7a2:	f104 0014 	add.w	r0, r4, #20
   2c7a6:	f7ff ffda 	bl	2c75e <smp_bt_ud_free>
	mcumgr_buf_free(nb);
   2c7aa:	4620      	mov	r0, r4
   2c7ac:	f7ff ff51 	bl	2c652 <mcumgr_buf_free>
}
   2c7b0:	4628      	mov	r0, r5
   2c7b2:	bd70      	pop	{r4, r5, r6, pc}
	return bt_conn_ref(ud->conn);
   2c7b4:	f7fd fd43 	bl	2a23e <bt_conn_ref>
	if (conn == NULL) {
   2c7b8:	4606      	mov	r6, r0
   2c7ba:	2800      	cmp	r0, #0
   2c7bc:	d0ef      	beq.n	2c79e <smp_bt_tx_pkt+0x8>
		rc = smp_bt_notify(conn, nb->data, nb->len);
   2c7be:	89a2      	ldrh	r2, [r4, #12]
   2c7c0:	68a1      	ldr	r1, [r4, #8]
   2c7c2:	f7f6 f8c3 	bl	2294c <smp_bt_notify>
   2c7c6:	4605      	mov	r5, r0
		bt_conn_unref(conn);
   2c7c8:	4630      	mov	r0, r6
   2c7ca:	f7fd fd53 	bl	2a274 <bt_conn_unref>
   2c7ce:	e7e8      	b.n	2c7a2 <smp_bt_tx_pkt+0xc>

0002c7d0 <cbor_target_address>:
 * write or read and attribute from the cbor_attr_r structure
 */
static char *
cbor_target_address(const struct cbor_attr_t *cursor,
		    const struct cbor_array_t *parent, int offset)
{
   2c7d0:	b510      	push	{r4, lr}
   2c7d2:	4603      	mov	r3, r0
	char *targetaddr = NULL;

	if (parent == NULL || parent->element_type != CborAttrStructObjectType) {
   2c7d4:	b111      	cbz	r1, 2c7dc <cbor_target_address+0xc>
   2c7d6:	7808      	ldrb	r0, [r1, #0]
   2c7d8:	280b      	cmp	r0, #11
   2c7da:	d01a      	beq.n	2c812 <cbor_target_address+0x42>
		/* ordinary case - use the address in the cursor structure */
		switch (cursor->type) {
   2c7dc:	7919      	ldrb	r1, [r3, #4]
   2c7de:	3901      	subs	r1, #1
   2c7e0:	2907      	cmp	r1, #7
   2c7e2:	d81c      	bhi.n	2c81e <cbor_target_address+0x4e>
   2c7e4:	e8df f001 	tbb	[pc, r1]
   2c7e8:	10100c0c 	.word	0x10100c0c
   2c7ec:	0c080412 	.word	0x0c080412
		case CborAttrUnsignedIntegerType:
			targetaddr = (char *)&cursor->addr.uinteger[offset];
			break;
#if CBORATTR_FLOAT_SUPPORT != 0
		case CborAttrHalfFloatType:
			targetaddr = (char *)&cursor->addr.halffloat[offset];
   2c7f0:	6898      	ldr	r0, [r3, #8]
   2c7f2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		targetaddr =
			parent->arr.objects.base + (offset * parent->arr.objects.stride) +
			cursor->addr.offset;
	}
	return targetaddr;
}
   2c7f6:	bd10      	pop	{r4, pc}
			targetaddr = (char *)&cursor->addr.fval[offset];
   2c7f8:	6898      	ldr	r0, [r3, #8]
   2c7fa:	eb00 0082 	add.w	r0, r0, r2, lsl #2
			break;
   2c7fe:	e7fa      	b.n	2c7f6 <cbor_target_address+0x26>
			targetaddr = (char *)&cursor->addr.real[offset];
   2c800:	6898      	ldr	r0, [r3, #8]
   2c802:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
			break;
   2c806:	e7f6      	b.n	2c7f6 <cbor_target_address+0x26>
			targetaddr = cursor->addr.string;
   2c808:	6898      	ldr	r0, [r3, #8]
			break;
   2c80a:	e7f4      	b.n	2c7f6 <cbor_target_address+0x26>
			targetaddr = (char *)&cursor->addr.boolean[offset];
   2c80c:	6898      	ldr	r0, [r3, #8]
		targetaddr =
   2c80e:	4410      	add	r0, r2
   2c810:	e7f1      	b.n	2c7f6 <cbor_target_address+0x26>
			parent->arr.objects.base + (offset * parent->arr.objects.stride) +
   2c812:	6898      	ldr	r0, [r3, #8]
   2c814:	68cc      	ldr	r4, [r1, #12]
   2c816:	fb04 0202 	mla	r2, r4, r2, r0
		targetaddr =
   2c81a:	6888      	ldr	r0, [r1, #8]
   2c81c:	e7f7      	b.n	2c80e <cbor_target_address+0x3e>
		switch (cursor->type) {
   2c81e:	2000      	movs	r0, #0
	return targetaddr;
   2c820:	e7e9      	b.n	2c7f6 <cbor_target_address+0x26>

0002c822 <cbor_value_get_int64>:
    *result = _cbor_value_extract_int64_helper(value);
    return CborNoError;
}

CBOR_INLINE_API CborError cbor_value_get_int64(const CborValue *value, int64_t *result)
{
   2c822:	b538      	push	{r3, r4, r5, lr}
                _cbor_value_decode_int64_internal(value) : value->extra;
   2c824:	7bc3      	ldrb	r3, [r0, #15]
{
   2c826:	460c      	mov	r4, r1
                _cbor_value_decode_int64_internal(value) : value->extra;
   2c828:	f013 0101 	ands.w	r1, r3, #1
{
   2c82c:	4605      	mov	r5, r0
                _cbor_value_decode_int64_internal(value) : value->extra;
   2c82e:	d00c      	beq.n	2c84a <cbor_value_get_int64+0x28>
   2c830:	f001 fd15 	bl	2e25e <_cbor_value_decode_int64_internal>
    assert(cbor_value_is_integer(value));
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
   2c834:	e9c4 0100 	strd	r0, r1, [r4]
    if (value->flags & CborIteratorFlag_NegativeInteger)
   2c838:	7beb      	ldrb	r3, [r5, #15]
   2c83a:	079b      	lsls	r3, r3, #30
        *result = -*result - 1;
   2c83c:	bf42      	ittt	mi
   2c83e:	43c0      	mvnmi	r0, r0
   2c840:	43c9      	mvnmi	r1, r1
   2c842:	e9c4 0100 	strdmi	r0, r1, [r4]
    return CborNoError;
}
   2c846:	2000      	movs	r0, #0
   2c848:	bd38      	pop	{r3, r4, r5, pc}
                _cbor_value_decode_int64_internal(value) : value->extra;
   2c84a:	8980      	ldrh	r0, [r0, #12]
   2c84c:	e7f2      	b.n	2c834 <cbor_value_get_int64+0x12>

0002c84e <cbor_read_array>:
	return err;
}

int
cbor_read_array(struct CborValue *value, const struct cbor_array_t *arr)
{
   2c84e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c852:	b089      	sub	sp, #36	; 0x24
   2c854:	460d      	mov	r5, r1
	int off, arrcount;
	size_t len;
	void *lptr;
	char *tp;

	err = cbor_value_enter_container(value, &elem);
   2c856:	a904      	add	r1, sp, #16
{
   2c858:	4680      	mov	r8, r0
	err = cbor_value_enter_container(value, &elem);
   2c85a:	f001 fd2f 	bl	2e2bc <cbor_value_enter_container>
	if (err) {
   2c85e:	4604      	mov	r4, r0
   2c860:	b110      	cbz	r0, 2c868 <cbor_read_array+0x1a>
		err |= CborErrorDataTooLarge;
		cbor_value_advance(&elem);
	}
	err |= cbor_value_leave_container(value, &elem);
	return err;
}
   2c862:	b009      	add	sp, #36	; 0x24
   2c864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tp = arr->arr.strings.store;
   2c868:	68af      	ldr	r7, [r5, #8]
	for (off = 0; off < arr->maxlen; off++) {
   2c86a:	4606      	mov	r6, r0
   2c86c:	696b      	ldr	r3, [r5, #20]
   2c86e:	42b3      	cmp	r3, r6
   2c870:	dd1f      	ble.n	2c8b2 <cbor_read_array+0x64>
		switch (arr->element_type) {
   2c872:	782b      	ldrb	r3, [r5, #0]
   2c874:	3b01      	subs	r3, #1
   2c876:	2b0a      	cmp	r3, #10
   2c878:	d875      	bhi.n	2c966 <cbor_read_array+0x118>
   2c87a:	e8df f003 	tbb	[pc, r3]
   2c87e:	2e26      	.short	0x2e26
   2c880:	44065a74 	.word	0x44065a74
   2c884:	74744b4b 	.word	0x74744b4b
   2c888:	6d          	.byte	0x6d
   2c889:	00          	.byte	0x00
    *result = !!value->extra;
   2c88a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   2c88e:	686a      	ldr	r2, [r5, #4]
   2c890:	3b00      	subs	r3, #0
   2c892:	bf18      	it	ne
   2c894:	2301      	movne	r3, #1
   2c896:	5593      	strb	r3, [r2, r6]
		if (arr->element_type != CborAttrStructObjectType) {
   2c898:	782b      	ldrb	r3, [r5, #0]
   2c89a:	2b0b      	cmp	r3, #11
		arrcount++;
   2c89c:	f106 0601 	add.w	r6, r6, #1
		if (arr->element_type != CborAttrStructObjectType) {
   2c8a0:	d003      	beq.n	2c8aa <cbor_read_array+0x5c>
			err |= cbor_value_advance(&elem);
   2c8a2:	a804      	add	r0, sp, #16
   2c8a4:	f001 fd82 	bl	2e3ac <cbor_value_advance>
   2c8a8:	4304      	orrs	r4, r0
		if (!cbor_value_is_valid(&elem)) {
   2c8aa:	f89d 301e 	ldrb.w	r3, [sp, #30]
   2c8ae:	2bff      	cmp	r3, #255	; 0xff
   2c8b0:	d1dc      	bne.n	2c86c <cbor_read_array+0x1e>
	if (arr->count) {
   2c8b2:	692b      	ldr	r3, [r5, #16]
   2c8b4:	b103      	cbz	r3, 2c8b8 <cbor_read_array+0x6a>
		*arr->count = arrcount;
   2c8b6:	601e      	str	r6, [r3, #0]
	while (!cbor_value_at_end(&elem)) {
   2c8b8:	9b06      	ldr	r3, [sp, #24]
   2c8ba:	2b00      	cmp	r3, #0
   2c8bc:	d156      	bne.n	2c96c <cbor_read_array+0x11e>
	err |= cbor_value_leave_container(value, &elem);
   2c8be:	a904      	add	r1, sp, #16
   2c8c0:	4640      	mov	r0, r8
   2c8c2:	f001 fd35 	bl	2e330 <cbor_value_leave_container>
   2c8c6:	4320      	orrs	r0, r4
	return err;
   2c8c8:	e7cb      	b.n	2c862 <cbor_read_array+0x14>
			lptr = &arr->arr.integers.store[off];
   2c8ca:	6869      	ldr	r1, [r5, #4]
			err |= cbor_value_get_int64(&elem, lptr);
   2c8cc:	a804      	add	r0, sp, #16
   2c8ce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
   2c8d2:	f7ff ffa6 	bl	2c822 <cbor_value_get_int64>
			err |= cbor_value_get_half_float(&elem, lptr);
   2c8d6:	4304      	orrs	r4, r0
			break;
   2c8d8:	e7de      	b.n	2c898 <cbor_read_array+0x4a>
                _cbor_value_decode_int64_internal(value) : value->extra;
   2c8da:	f89d 101f 	ldrb.w	r1, [sp, #31]
			lptr = &arr->arr.uintegers.store[off];
   2c8de:	f8d5 9004 	ldr.w	r9, [r5, #4]
   2c8e2:	f011 0101 	ands.w	r1, r1, #1
   2c8e6:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   2c8ea:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
   2c8ee:	d007      	beq.n	2c900 <cbor_read_array+0xb2>
   2c8f0:	a804      	add	r0, sp, #16
   2c8f2:	f001 fcb4 	bl	2e25e <_cbor_value_decode_int64_internal>
    *result = _cbor_value_extract_int64_helper(value);
   2c8f6:	f849 000b 	str.w	r0, [r9, fp]
   2c8fa:	f8ca 1004 	str.w	r1, [sl, #4]
			break;
   2c8fe:	e7cb      	b.n	2c898 <cbor_read_array+0x4a>
                _cbor_value_decode_int64_internal(value) : value->extra;
   2c900:	f8bd 001c 	ldrh.w	r0, [sp, #28]
   2c904:	e7f7      	b.n	2c8f6 <cbor_read_array+0xa8>
			lptr = &arr->arr.halffloats.store[off];
   2c906:	6869      	ldr	r1, [r5, #4]
			err |= cbor_value_get_half_float(&elem, lptr);
   2c908:	a804      	add	r0, sp, #16
   2c90a:	eb01 0146 	add.w	r1, r1, r6, lsl #1
   2c90e:	f001 fd5c 	bl	2e3ca <cbor_value_get_half_float>
   2c912:	e7e0      	b.n	2c8d6 <cbor_read_array+0x88>
			lptr = &arr->arr.reals.store[off];
   2c914:	6868      	ldr	r0, [r5, #4]
   2c916:	eb00 09c6 	add.w	r9, r0, r6, lsl #3
{ return value->type == CborDoubleType; }
CBOR_INLINE_API CborError cbor_value_get_double(const CborValue *value, double *result)
{
    assert(cbor_value_is_double(value));
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
    uint64_t data = _cbor_value_decode_int64_internal(value);
   2c91a:	a804      	add	r0, sp, #16
   2c91c:	f001 fc9f 	bl	2e25e <_cbor_value_decode_int64_internal>
    memcpy(result, &data, sizeof(*result));
   2c920:	2208      	movs	r2, #8
    uint64_t data = _cbor_value_decode_int64_internal(value);
   2c922:	e9cd 0102 	strd	r0, r1, [sp, #8]
    memcpy(result, &data, sizeof(*result));
   2c926:	eb0d 0102 	add.w	r1, sp, r2
   2c92a:	4648      	mov	r0, r9
   2c92c:	f7fc fd0b 	bl	29346 <memcpy>
			break;
   2c930:	e7b2      	b.n	2c898 <cbor_read_array+0x4a>
			len = arr->arr.strings.storelen - (tp - arr->arr.strings.store);
   2c932:	68ab      	ldr	r3, [r5, #8]
   2c934:	1afa      	subs	r2, r7, r3
   2c936:	68eb      	ldr	r3, [r5, #12]
   2c938:	1a9b      	subs	r3, r3, r2
   2c93a:	9301      	str	r3, [sp, #4]
    return _cbor_value_copy_string(value, buffer, buflen, next);
   2c93c:	4639      	mov	r1, r7
   2c93e:	2300      	movs	r3, #0
   2c940:	aa01      	add	r2, sp, #4
   2c942:	a804      	add	r0, sp, #16
   2c944:	f7f8 fec2 	bl	256cc <_cbor_value_copy_string>
			arr->arr.strings.ptrs[off] = tp;
   2c948:	686b      	ldr	r3, [r5, #4]
   2c94a:	f843 7026 	str.w	r7, [r3, r6, lsl #2]
			tp += len + 1;
   2c94e:	9b01      	ldr	r3, [sp, #4]
   2c950:	3301      	adds	r3, #1
			err |= cbor_value_copy_text_string(&elem, tp, &len, NULL);
   2c952:	4304      	orrs	r4, r0
			tp += len + 1;
   2c954:	441f      	add	r7, r3
			break;
   2c956:	e79f      	b.n	2c898 <cbor_read_array+0x4a>
			err |= cbor_internal_read_object(&elem, arr->arr.objects.subtype, arr, off);
   2c958:	6869      	ldr	r1, [r5, #4]
   2c95a:	4633      	mov	r3, r6
   2c95c:	462a      	mov	r2, r5
   2c95e:	a804      	add	r0, sp, #16
   2c960:	f000 f80a 	bl	2c978 <cbor_internal_read_object>
   2c964:	e7b7      	b.n	2c8d6 <cbor_read_array+0x88>
			err |= CborErrorIllegalType;
   2c966:	f444 7482 	orr.w	r4, r4, #260	; 0x104
			break;
   2c96a:	e795      	b.n	2c898 <cbor_read_array+0x4a>
		cbor_value_advance(&elem);
   2c96c:	a804      	add	r0, sp, #16
		err |= CborErrorDataTooLarge;
   2c96e:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
		cbor_value_advance(&elem);
   2c972:	f001 fd1b 	bl	2e3ac <cbor_value_advance>
   2c976:	e79f      	b.n	2c8b8 <cbor_read_array+0x6a>

0002c978 <cbor_internal_read_object>:
{
   2c978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c97c:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
   2c980:	469a      	mov	sl, r3
	size_t len = 0;
   2c982:	2300      	movs	r3, #0
{
   2c984:	4607      	mov	r7, r0
   2c986:	9101      	str	r1, [sp, #4]
   2c988:	4691      	mov	r9, r2
	size_t len = 0;
   2c98a:	9303      	str	r3, [sp, #12]
	for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   2c98c:	f101 0420 	add.w	r4, r1, #32
   2c990:	f854 3c20 	ldr.w	r3, [r4, #-32]
   2c994:	f1a4 0020 	sub.w	r0, r4, #32
   2c998:	bb8b      	cbnz	r3, 2c9fe <cbor_internal_read_object+0x86>
	if (cbor_value_is_map(root_value)) {
   2c99a:	7bbb      	ldrb	r3, [r7, #14]
   2c99c:	2ba0      	cmp	r3, #160	; 0xa0
   2c99e:	f040 8113 	bne.w	2cbc8 <cbor_internal_read_object+0x250>
		err |= cbor_value_enter_container(root_value, &cur_value);
   2c9a2:	a907      	add	r1, sp, #28
   2c9a4:	4638      	mov	r0, r7
   2c9a6:	f001 fc89 	bl	2e2bc <cbor_value_enter_container>
   2c9aa:	4604      	mov	r4, r0
{ return value && value->type != CborInvalidType; }
   2c9ac:	f89d 502a 	ldrb.w	r5, [sp, #42]	; 0x2a
	while (cbor_value_is_valid(&cur_value) && !err) {
   2c9b0:	2dff      	cmp	r5, #255	; 0xff
   2c9b2:	f000 80fd 	beq.w	2cbb0 <cbor_internal_read_object+0x238>
   2c9b6:	b9ec      	cbnz	r4, 2c9f4 <cbor_internal_read_object+0x7c>
		if (cbor_value_is_text_string(&cur_value)) {
   2c9b8:	2d60      	cmp	r5, #96	; 0x60
   2c9ba:	d13e      	bne.n	2ca3a <cbor_internal_read_object+0xc2>
			if (cbor_value_calculate_string_length(&cur_value, &len) == 0) {
   2c9bc:	a903      	add	r1, sp, #12
   2c9be:	a807      	add	r0, sp, #28
   2c9c0:	f001 fcfb 	bl	2e3ba <cbor_value_calculate_string_length>
   2c9c4:	b958      	cbnz	r0, 2c9de <cbor_internal_read_object+0x66>
				if (len > CBORATTR_MAX_SIZE) {
   2c9c6:	9b03      	ldr	r3, [sp, #12]
   2c9c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2c9cc:	f200 80f9 	bhi.w	2cbc2 <cbor_internal_read_object+0x24a>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   2c9d0:	4623      	mov	r3, r4
   2c9d2:	aa03      	add	r2, sp, #12
   2c9d4:	a90b      	add	r1, sp, #44	; 0x2c
   2c9d6:	a807      	add	r0, sp, #28
   2c9d8:	f7f8 fe78 	bl	256cc <_cbor_value_copy_string>
   2c9dc:	4604      	mov	r4, r0
			err |= cbor_value_advance(&cur_value);
   2c9de:	a807      	add	r0, sp, #28
   2c9e0:	f001 fce4 	bl	2e3ac <cbor_value_advance>
{ return value && value->type != CborInvalidType; }
   2c9e4:	f89d 502a 	ldrb.w	r5, [sp, #42]	; 0x2a
			if (cbor_value_is_valid(&cur_value)) {
   2c9e8:	2dff      	cmp	r5, #255	; 0xff
			err |= cbor_value_advance(&cur_value);
   2c9ea:	ea44 0400 	orr.w	r4, r4, r0
			if (cbor_value_is_valid(&cur_value)) {
   2c9ee:	d126      	bne.n	2ca3e <cbor_internal_read_object+0xc6>
				err |= CborErrorIllegalType;
   2c9f0:	f444 7482 	orr.w	r4, r4, #260	; 0x104
	return err;
   2c9f4:	4620      	mov	r0, r4
}
   2c9f6:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
   2c9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!cursor->nodefault) {
   2c9fe:	7b23      	ldrb	r3, [r4, #12]
   2ca00:	b99b      	cbnz	r3, 2ca2a <cbor_internal_read_object+0xb2>
			lptr = cbor_target_address(cursor, parent, offset);
   2ca02:	4652      	mov	r2, sl
   2ca04:	4649      	mov	r1, r9
   2ca06:	f7ff fee3 	bl	2c7d0 <cbor_target_address>
			if (lptr != NULL) {
   2ca0a:	b170      	cbz	r0, 2ca2a <cbor_internal_read_object+0xb2>
				switch (cursor->type) {
   2ca0c:	f814 3c1c 	ldrb.w	r3, [r4, #-28]
   2ca10:	3b01      	subs	r3, #1
   2ca12:	2b07      	cmp	r3, #7
   2ca14:	d809      	bhi.n	2ca2a <cbor_internal_read_object+0xb2>
   2ca16:	e8df f003 	tbb	[pc, r3]
   2ca1a:	0e0e      	.short	0x0e0e
   2ca1c:	0a040808 	.word	0x0a040808
   2ca20:	0e0c      	.short	0x0e0c
					memcpy(lptr, &cursor->dflt.boolean, sizeof(bool));
   2ca22:	2201      	movs	r2, #1
					memcpy(lptr, &cursor->dflt.real, sizeof(double));
   2ca24:	4621      	mov	r1, r4
   2ca26:	f7fc fc8e 	bl	29346 <memcpy>
	for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   2ca2a:	3430      	adds	r4, #48	; 0x30
   2ca2c:	e7b0      	b.n	2c990 <cbor_internal_read_object+0x18>
					memcpy(lptr, &cursor->dflt.halffloat, sizeof(uint16_t));
   2ca2e:	2202      	movs	r2, #2
   2ca30:	e7f8      	b.n	2ca24 <cbor_internal_read_object+0xac>
					memcpy(lptr, &cursor->dflt.fval, sizeof(float));
   2ca32:	2204      	movs	r2, #4
   2ca34:	e7f6      	b.n	2ca24 <cbor_internal_read_object+0xac>
					memcpy(lptr, &cursor->dflt.real, sizeof(double));
   2ca36:	2208      	movs	r2, #8
   2ca38:	e7f4      	b.n	2ca24 <cbor_internal_read_object+0xac>
			attrbuf[0] = '\0';
   2ca3a:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
		for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   2ca3e:	9b01      	ldr	r3, [sp, #4]
		best_match = NULL;
   2ca40:	f04f 0800 	mov.w	r8, #0
   2ca44:	f103 0b30 	add.w	fp, r3, #48	; 0x30
		for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   2ca48:	f85b 0c30 	ldr.w	r0, [fp, #-48]
   2ca4c:	f1ab 0630 	sub.w	r6, fp, #48	; 0x30
   2ca50:	b9c8      	cbnz	r0, 2ca86 <cbor_internal_read_object+0x10e>
		if (!cursor->attribute && best_match) {
   2ca52:	f1b8 0f00 	cmp.w	r8, #0
   2ca56:	bf18      	it	ne
   2ca58:	4646      	movne	r6, r8
		if (cursor->attribute != NULL) {
   2ca5a:	6833      	ldr	r3, [r6, #0]
   2ca5c:	2b00      	cmp	r3, #0
   2ca5e:	d052      	beq.n	2cb06 <cbor_internal_read_object+0x18e>
			lptr = cbor_target_address(cursor, parent, offset);
   2ca60:	4652      	mov	r2, sl
   2ca62:	4649      	mov	r1, r9
   2ca64:	4630      	mov	r0, r6
   2ca66:	f7ff feb3 	bl	2c7d0 <cbor_target_address>
			switch (cursor->type) {
   2ca6a:	7933      	ldrb	r3, [r6, #4]
   2ca6c:	3b01      	subs	r3, #1
			lptr = cbor_target_address(cursor, parent, offset);
   2ca6e:	4605      	mov	r5, r0
			switch (cursor->type) {
   2ca70:	2b0b      	cmp	r3, #11
   2ca72:	f200 809a 	bhi.w	2cbaa <cbor_internal_read_object+0x232>
   2ca76:	e8df f003 	tbb	[pc, r3]
   2ca7a:	504a      	.short	0x504a
   2ca7c:	5e408174 	.word	0x5e408174
   2ca80:	918a6d63 	.word	0x918a6d63
   2ca84:	4698      	.short	0x4698
	switch (at) {
   2ca86:	f81b 2c2c 	ldrb.w	r2, [fp, #-44]
   2ca8a:	3a01      	subs	r2, #1
   2ca8c:	2a0b      	cmp	r2, #11
   2ca8e:	d81f      	bhi.n	2cad0 <cbor_internal_read_object+0x158>
   2ca90:	e8df f002 	tbb	[pc, r2]
   2ca94:	211c0606 	.word	0x211c0606
   2ca98:	29272523 	.word	0x29272523
   2ca9c:	2f1e2d2b 	.word	0x2f1e2d2b
		if (ct == CborIntegerType) {
   2caa0:	b9b5      	cbnz	r5, 2cad0 <cbor_internal_read_object+0x158>
				if (cursor->attribute == CBORATTR_ATTR_UNNAMED &&
   2caa2:	1c43      	adds	r3, r0, #1
   2caa4:	d102      	bne.n	2caac <cbor_internal_read_object+0x134>
   2caa6:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   2caaa:	b322      	cbz	r2, 2caf6 <cbor_internal_read_object+0x17e>
				} else if (strlen(cursor->attribute) == len &&
   2caac:	f7fc fc0d 	bl	292ca <strlen>
   2cab0:	9903      	ldr	r1, [sp, #12]
   2cab2:	4288      	cmp	r0, r1
   2cab4:	4602      	mov	r2, r0
   2cab6:	d10b      	bne.n	2cad0 <cbor_internal_read_object+0x158>
					!memcmp(cursor->attribute, attrbuf, len)) {
   2cab8:	f85b 0c30 	ldr.w	r0, [fp, #-48]
   2cabc:	a90b      	add	r1, sp, #44	; 0x2c
   2cabe:	f7fc fc31 	bl	29324 <memcmp>
				} else if (strlen(cursor->attribute) == len &&
   2cac2:	b928      	cbnz	r0, 2cad0 <cbor_internal_read_object+0x158>
		if (!cursor->attribute && best_match) {
   2cac4:	6832      	ldr	r2, [r6, #0]
   2cac6:	2a00      	cmp	r2, #0
   2cac8:	d1c7      	bne.n	2ca5a <cbor_internal_read_object+0xe2>
   2caca:	e7c2      	b.n	2ca52 <cbor_internal_read_object+0xda>
		if (ct == CborByteStringType) {
   2cacc:	2d40      	cmp	r5, #64	; 0x40
		if (ct == CborNullType) {
   2cace:	d0e8      	beq.n	2caa2 <cbor_internal_read_object+0x12a>
		for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   2cad0:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
   2cad4:	e7b8      	b.n	2ca48 <cbor_internal_read_object+0xd0>
		if (ct == CborTextStringType) {
   2cad6:	2d60      	cmp	r5, #96	; 0x60
   2cad8:	e7f9      	b.n	2cace <cbor_internal_read_object+0x156>
		if (ct == CborBooleanType) {
   2cada:	2df5      	cmp	r5, #245	; 0xf5
   2cadc:	e7f7      	b.n	2cace <cbor_internal_read_object+0x156>
		if (ct == CborHalfFloatType) {
   2cade:	2df9      	cmp	r5, #249	; 0xf9
   2cae0:	e7f5      	b.n	2cace <cbor_internal_read_object+0x156>
		if (ct == CborFloatType) {
   2cae2:	2dfa      	cmp	r5, #250	; 0xfa
   2cae4:	e7f3      	b.n	2cace <cbor_internal_read_object+0x156>
		if (ct == CborDoubleType) {
   2cae6:	2dfb      	cmp	r5, #251	; 0xfb
   2cae8:	e7f1      	b.n	2cace <cbor_internal_read_object+0x156>
		if (ct == CborArrayType) {
   2caea:	2d80      	cmp	r5, #128	; 0x80
   2caec:	e7ef      	b.n	2cace <cbor_internal_read_object+0x156>
		if (ct == CborMapType) {
   2caee:	2da0      	cmp	r5, #160	; 0xa0
   2caf0:	e7ed      	b.n	2cace <cbor_internal_read_object+0x156>
		if (ct == CborNullType) {
   2caf2:	2df6      	cmp	r5, #246	; 0xf6
   2caf4:	e7eb      	b.n	2cace <cbor_internal_read_object+0x156>
   2caf6:	46b0      	mov	r8, r6
   2caf8:	e7ea      	b.n	2cad0 <cbor_internal_read_object+0x158>
    *result = !!value->extra;
   2cafa:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2cafe:	3b00      	subs	r3, #0
   2cb00:	bf18      	it	ne
   2cb02:	2301      	movne	r3, #1
   2cb04:	7003      	strb	r3, [r0, #0]
		err |= cbor_value_advance(&cur_value);
   2cb06:	a807      	add	r0, sp, #28
   2cb08:	f001 fc50 	bl	2e3ac <cbor_value_advance>
   2cb0c:	e044      	b.n	2cb98 <cbor_internal_read_object+0x220>
				err |= cbor_value_get_int64(&cur_value, lptr);
   2cb0e:	4601      	mov	r1, r0
   2cb10:	a807      	add	r0, sp, #28
   2cb12:	f7ff fe86 	bl	2c822 <cbor_value_get_int64>
				err |= cbor_value_get_half_float(&cur_value, lptr);
   2cb16:	4304      	orrs	r4, r0
				break;
   2cb18:	e7f5      	b.n	2cb06 <cbor_internal_read_object+0x18e>
                _cbor_value_decode_int64_internal(value) : value->extra;
   2cb1a:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
   2cb1e:	f011 0101 	ands.w	r1, r1, #1
   2cb22:	d005      	beq.n	2cb30 <cbor_internal_read_object+0x1b8>
   2cb24:	a807      	add	r0, sp, #28
   2cb26:	f001 fb9a 	bl	2e25e <_cbor_value_decode_int64_internal>
    *result = _cbor_value_extract_int64_helper(value);
   2cb2a:	e9c5 0100 	strd	r0, r1, [r5]
				break;
   2cb2e:	e7ea      	b.n	2cb06 <cbor_internal_read_object+0x18e>
                _cbor_value_decode_int64_internal(value) : value->extra;
   2cb30:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
   2cb34:	e7f9      	b.n	2cb2a <cbor_internal_read_object+0x1b2>
				err |= cbor_value_get_half_float(&cur_value, lptr);
   2cb36:	4601      	mov	r1, r0
   2cb38:	a807      	add	r0, sp, #28
   2cb3a:	f001 fc46 	bl	2e3ca <cbor_value_get_half_float>
   2cb3e:	e7ea      	b.n	2cb16 <cbor_internal_read_object+0x19e>
    uint32_t data = (uint32_t)_cbor_value_decode_int64_internal(value);
   2cb40:	a807      	add	r0, sp, #28
   2cb42:	f001 fb8c 	bl	2e25e <_cbor_value_decode_int64_internal>
    memcpy(result, &data, sizeof(*result));
   2cb46:	2204      	movs	r2, #4
    uint32_t data = (uint32_t)_cbor_value_decode_int64_internal(value);
   2cb48:	9004      	str	r0, [sp, #16]
    memcpy(result, &data, sizeof(*result));
   2cb4a:	a904      	add	r1, sp, #16
   2cb4c:	4628      	mov	r0, r5
   2cb4e:	f7fc fbfa 	bl	29346 <memcpy>
				break;
   2cb52:	e7d8      	b.n	2cb06 <cbor_internal_read_object+0x18e>
    uint64_t data = _cbor_value_decode_int64_internal(value);
   2cb54:	a807      	add	r0, sp, #28
   2cb56:	f001 fb82 	bl	2e25e <_cbor_value_decode_int64_internal>
    memcpy(result, &data, sizeof(*result));
   2cb5a:	2208      	movs	r2, #8
    uint64_t data = _cbor_value_decode_int64_internal(value);
   2cb5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    memcpy(result, &data, sizeof(*result));
   2cb60:	e7f3      	b.n	2cb4a <cbor_internal_read_object+0x1d2>
				size_t len = cursor->len;
   2cb62:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   2cb64:	9304      	str	r3, [sp, #16]
    return _cbor_value_copy_string(value, buffer, buflen, next);
   2cb66:	aa04      	add	r2, sp, #16
   2cb68:	2300      	movs	r3, #0
   2cb6a:	4601      	mov	r1, r0
   2cb6c:	a807      	add	r0, sp, #28
   2cb6e:	f7f8 fdad 	bl	256cc <_cbor_value_copy_string>
				*cursor->addr.bytestring.len = len;
   2cb72:	68f3      	ldr	r3, [r6, #12]
   2cb74:	9a04      	ldr	r2, [sp, #16]
   2cb76:	601a      	str	r2, [r3, #0]
				err |= cbor_value_copy_byte_string(&cur_value, lptr, &len, NULL);
   2cb78:	4304      	orrs	r4, r0
				break;
   2cb7a:	e7c4      	b.n	2cb06 <cbor_internal_read_object+0x18e>
				size_t len = cursor->len;
   2cb7c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   2cb7e:	9304      	str	r3, [sp, #16]
    return _cbor_value_copy_string(value, buffer, buflen, next);
   2cb80:	4601      	mov	r1, r0
   2cb82:	2300      	movs	r3, #0
   2cb84:	aa04      	add	r2, sp, #16
   2cb86:	a807      	add	r0, sp, #28
   2cb88:	f7f8 fda0 	bl	256cc <_cbor_value_copy_string>
   2cb8c:	e7c3      	b.n	2cb16 <cbor_internal_read_object+0x19e>
				err |= cbor_read_array(&cur_value, &cursor->addr.array);
   2cb8e:	f106 0108 	add.w	r1, r6, #8
   2cb92:	a807      	add	r0, sp, #28
   2cb94:	f7ff fe5b 	bl	2c84e <cbor_read_array>
		err |= cbor_value_advance(&cur_value);
   2cb98:	4304      	orrs	r4, r0
   2cb9a:	e707      	b.n	2c9ac <cbor_internal_read_object+0x34>
				err |= cbor_internal_read_object(&cur_value, cursor->addr.obj,
   2cb9c:	2300      	movs	r3, #0
   2cb9e:	68b1      	ldr	r1, [r6, #8]
   2cba0:	461a      	mov	r2, r3
   2cba2:	a807      	add	r0, sp, #28
   2cba4:	f7ff fee8 	bl	2c978 <cbor_internal_read_object>
   2cba8:	e7f6      	b.n	2cb98 <cbor_internal_read_object+0x220>
				err |= CborErrorIllegalType;
   2cbaa:	f444 7482 	orr.w	r4, r4, #260	; 0x104
   2cbae:	e7aa      	b.n	2cb06 <cbor_internal_read_object+0x18e>
	if (!err) {
   2cbb0:	2c00      	cmp	r4, #0
   2cbb2:	f47f af1f 	bne.w	2c9f4 <cbor_internal_read_object+0x7c>
		err |= cbor_value_leave_container(root_value, &cur_value);
   2cbb6:	a907      	add	r1, sp, #28
   2cbb8:	4638      	mov	r0, r7
   2cbba:	f001 fbb9 	bl	2e330 <cbor_value_leave_container>
   2cbbe:	4604      	mov	r4, r0
   2cbc0:	e718      	b.n	2c9f4 <cbor_internal_read_object+0x7c>
					err |= CborErrorDataTooLarge;
   2cbc2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   2cbc6:	e715      	b.n	2c9f4 <cbor_internal_read_object+0x7c>
		return err;
   2cbc8:	f44f 7082 	mov.w	r0, #260	; 0x104
   2cbcc:	e713      	b.n	2c9f6 <cbor_internal_read_object+0x7e>

0002cbce <cbor_read_object>:
int
cbor_read_object(struct CborValue *value, const struct cbor_attr_t *attrs)
{
	int st;

	st = cbor_internal_read_object(value, attrs, NULL, 0);
   2cbce:	2300      	movs	r3, #0
   2cbd0:	461a      	mov	r2, r3
   2cbd2:	f7ff bed1 	b.w	2c978 <cbor_internal_read_object>

0002cbd6 <flash_area_open_ex>:
{
   2cbd6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2cbd8:	460d      	mov	r5, r1
	int rc = flash_area_open(id, &lfa);
   2cbda:	a901      	add	r1, sp, #4
   2cbdc:	f7e1 ff2a 	bl	ea34 <flash_area_open>
	if (rc == 0) {
   2cbe0:	4604      	mov	r4, r0
   2cbe2:	b928      	cbnz	r0, 2cbf0 <flash_area_open_ex+0x1a>
		if (flash_area_get_device(lfa) != NULL) {
   2cbe4:	9801      	ldr	r0, [sp, #4]
   2cbe6:	f7fa ffe0 	bl	27baa <flash_area_get_device>
   2cbea:	b120      	cbz	r0, 2cbf6 <flash_area_open_ex+0x20>
			*fa = lfa;
   2cbec:	9b01      	ldr	r3, [sp, #4]
   2cbee:	602b      	str	r3, [r5, #0]
}
   2cbf0:	4620      	mov	r0, r4
   2cbf2:	b003      	add	sp, #12
   2cbf4:	bd30      	pop	{r4, r5, pc}
			rc = -ENODEV;
   2cbf6:	f06f 0412 	mvn.w	r4, #18
	return rc;
   2cbfa:	e7f9      	b.n	2cbf0 <flash_area_open_ex+0x1a>

0002cbfc <zephyr_img_mgmt_flash_check_empty>:
{
   2cbfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2cc00:	b093      	sub	sp, #76	; 0x4c
   2cc02:	4688      	mov	r8, r1
	rc = flash_area_open_ex(fa_id, &fa);
   2cc04:	a901      	add	r1, sp, #4
   2cc06:	f7ff ffe6 	bl	2cbd6 <flash_area_open_ex>
	if (rc != 0) {
   2cc0a:	4604      	mov	r4, r0
   2cc0c:	bb60      	cbnz	r0, 2cc68 <zephyr_img_mgmt_flash_check_empty+0x6c>
	erased_val = flash_area_erased_val(fa);
   2cc0e:	9801      	ldr	r0, [sp, #4]
   2cc10:	f7fa ffce 	bl	27bb0 <flash_area_erased_val>
	end = fa->fa_size;
   2cc14:	9b01      	ldr	r3, [sp, #4]
	erased_val_32 = ERASED_VAL_32(erased_val);
   2cc16:	0406      	lsls	r6, r0, #16
   2cc18:	ea46 6600 	orr.w	r6, r6, r0, lsl #24
   2cc1c:	4306      	orrs	r6, r0
	end = fa->fa_size;
   2cc1e:	f8d3 9008 	ldr.w	r9, [r3, #8]
	erased_val_32 = ERASED_VAL_32(erased_val);
   2cc22:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
	for (addr = 0; addr < end; addr += sizeof(data)) {
   2cc26:	454c      	cmp	r4, r9
   2cc28:	db07      	blt.n	2cc3a <zephyr_img_mgmt_flash_check_empty+0x3e>
	*out_empty = true;
   2cc2a:	2301      	movs	r3, #1
	flash_area_close(fa);
   2cc2c:	9801      	ldr	r0, [sp, #4]
	*out_empty = true;
   2cc2e:	f888 3000 	strb.w	r3, [r8]
	flash_area_close(fa);
   2cc32:	f7fa ff61 	bl	27af8 <flash_area_close>
	return 0;
   2cc36:	2500      	movs	r5, #0
   2cc38:	e022      	b.n	2cc80 <zephyr_img_mgmt_flash_check_empty+0x84>
		if (end - addr < sizeof(data)) {
   2cc3a:	eba9 0704 	sub.w	r7, r9, r4
			bytes_to_read = sizeof(data);
   2cc3e:	2f40      	cmp	r7, #64	; 0x40
   2cc40:	bfa8      	it	ge
   2cc42:	2740      	movge	r7, #64	; 0x40
		rc = flash_area_read(fa, addr, data, bytes_to_read);
   2cc44:	9801      	ldr	r0, [sp, #4]
   2cc46:	463b      	mov	r3, r7
   2cc48:	aa02      	add	r2, sp, #8
   2cc4a:	4621      	mov	r1, r4
   2cc4c:	f7fa ff55 	bl	27afa <flash_area_read>
		if (rc != 0) {
   2cc50:	4605      	mov	r5, r0
   2cc52:	b930      	cbnz	r0, 2cc62 <zephyr_img_mgmt_flash_check_empty+0x66>
		for (i = 0; i < bytes_to_read / 4; i++) {
   2cc54:	10bf      	asrs	r7, r7, #2
   2cc56:	aa02      	add	r2, sp, #8
   2cc58:	4603      	mov	r3, r0
   2cc5a:	429f      	cmp	r7, r3
   2cc5c:	d106      	bne.n	2cc6c <zephyr_img_mgmt_flash_check_empty+0x70>
	for (addr = 0; addr < end; addr += sizeof(data)) {
   2cc5e:	3440      	adds	r4, #64	; 0x40
   2cc60:	e7e1      	b.n	2cc26 <zephyr_img_mgmt_flash_check_empty+0x2a>
			flash_area_close(fa);
   2cc62:	9801      	ldr	r0, [sp, #4]
   2cc64:	f7fa ff48 	bl	27af8 <flash_area_close>
		return MGMT_ERR_EUNKNOWN;
   2cc68:	2501      	movs	r5, #1
   2cc6a:	e009      	b.n	2cc80 <zephyr_img_mgmt_flash_check_empty+0x84>
			if (data[i] != erased_val_32) {
   2cc6c:	f852 1b04 	ldr.w	r1, [r2], #4
   2cc70:	42b1      	cmp	r1, r6
   2cc72:	d009      	beq.n	2cc88 <zephyr_img_mgmt_flash_check_empty+0x8c>
				*out_empty = false;
   2cc74:	2300      	movs	r3, #0
				flash_area_close(fa);
   2cc76:	9801      	ldr	r0, [sp, #4]
				*out_empty = false;
   2cc78:	f888 3000 	strb.w	r3, [r8]
				flash_area_close(fa);
   2cc7c:	f7fa ff3c 	bl	27af8 <flash_area_close>
}
   2cc80:	4628      	mov	r0, r5
   2cc82:	b013      	add	sp, #76	; 0x4c
   2cc84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < bytes_to_read / 4; i++) {
   2cc88:	3301      	adds	r3, #1
   2cc8a:	e7e6      	b.n	2cc5a <zephyr_img_mgmt_flash_check_empty+0x5e>

0002cc8c <img_mgmt_get_unused_slot_area_id.constprop.0>:
img_mgmt_get_unused_slot_area_id(int slot)
   2cc8c:	b508      	push	{r3, lr}
			if (img_mgmt_slot_in_use(slot) == 0) {
   2cc8e:	2000      	movs	r0, #0
   2cc90:	f000 f8f3 	bl	2ce7a <img_mgmt_slot_in_use>
   2cc94:	b128      	cbz	r0, 2cca2 <img_mgmt_get_unused_slot_area_id.constprop.0+0x16>
   2cc96:	2001      	movs	r0, #1
   2cc98:	f000 f8ef 	bl	2ce7a <img_mgmt_slot_in_use>
   2cc9c:	b918      	cbnz	r0, 2cca6 <img_mgmt_get_unused_slot_area_id.constprop.0+0x1a>
		fa_id = FLASH_AREA_ID(image_1);
   2cc9e:	2002      	movs	r0, #2
}
   2cca0:	bd08      	pop	{r3, pc}
		fa_id = FLASH_AREA_ID(image_0);
   2cca2:	2001      	movs	r0, #1
					return area_id;
   2cca4:	e7fc      	b.n	2cca0 <img_mgmt_get_unused_slot_area_id.constprop.0+0x14>
		return -1;
   2cca6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ccaa:	e7f9      	b.n	2cca0 <img_mgmt_get_unused_slot_area_id.constprop.0+0x14>

0002ccac <img_mgmt_impl_erase_slot>:
{
   2ccac:	b513      	push	{r0, r1, r4, lr}
	best_id = img_mgmt_get_unused_slot_area_id(-1);
   2ccae:	f7ff ffed 	bl	2cc8c <img_mgmt_get_unused_slot_area_id.constprop.0>
	if (best_id < 0) {
   2ccb2:	2800      	cmp	r0, #0
   2ccb4:	db11      	blt.n	2ccda <img_mgmt_impl_erase_slot+0x2e>
	rc = zephyr_img_mgmt_flash_check_empty(best_id, &empty);
   2ccb6:	b2c4      	uxtb	r4, r0
   2ccb8:	f10d 0107 	add.w	r1, sp, #7
   2ccbc:	4620      	mov	r0, r4
   2ccbe:	f7ff ff9d 	bl	2cbfc <zephyr_img_mgmt_flash_check_empty>
	if (rc != 0) {
   2ccc2:	b960      	cbnz	r0, 2ccde <img_mgmt_impl_erase_slot+0x32>
	if (!empty) {
   2ccc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2ccc8:	b92b      	cbnz	r3, 2ccd6 <img_mgmt_impl_erase_slot+0x2a>
		rc = boot_erase_img_bank(best_id);
   2ccca:	4620      	mov	r0, r4
   2cccc:	f000 fb07 	bl	2d2de <boot_erase_img_bank>
		if (rc != 0) {
   2ccd0:	3800      	subs	r0, #0
   2ccd2:	bf18      	it	ne
   2ccd4:	2001      	movne	r0, #1
}
   2ccd6:	b002      	add	sp, #8
   2ccd8:	bd10      	pop	{r4, pc}
		return MGMT_ERR_ENOENT;
   2ccda:	2005      	movs	r0, #5
   2ccdc:	e7fb      	b.n	2ccd6 <img_mgmt_impl_erase_slot+0x2a>
		return MGMT_ERR_EUNKNOWN;
   2ccde:	2001      	movs	r0, #1
   2cce0:	e7f9      	b.n	2ccd6 <img_mgmt_impl_erase_slot+0x2a>

0002cce2 <img_mgmt_impl_write_pending>:
	if (slot != 1 && !(CONFIG_IMG_MGMT_UPDATABLE_IMAGE_NUMBER == 2 && slot == 3)) {
   2cce2:	2801      	cmp	r0, #1
{
   2cce4:	b508      	push	{r3, lr}
	if (slot != 1 && !(CONFIG_IMG_MGMT_UPDATABLE_IMAGE_NUMBER == 2 && slot == 3)) {
   2cce6:	d106      	bne.n	2ccf6 <img_mgmt_impl_write_pending+0x14>
	rc = boot_request_upgrade_multi(zephyr_img_mgmt_slot_to_image(slot), permanent);
   2cce8:	2000      	movs	r0, #0
   2ccea:	f000 fae8 	bl	2d2be <boot_request_upgrade_multi>
	if (rc != 0) {
   2ccee:	3800      	subs	r0, #0
   2ccf0:	bf18      	it	ne
   2ccf2:	2001      	movne	r0, #1
}
   2ccf4:	bd08      	pop	{r3, pc}
		return MGMT_ERR_EINVAL;
   2ccf6:	2003      	movs	r0, #3
   2ccf8:	e7fc      	b.n	2ccf4 <img_mgmt_impl_write_pending+0x12>

0002ccfa <img_mgmt_impl_write_confirmed>:
{
   2ccfa:	b508      	push	{r3, lr}
	rc = boot_write_img_confirmed();
   2ccfc:	f000 fae7 	bl	2d2ce <boot_write_img_confirmed>
}
   2cd00:	3800      	subs	r0, #0
   2cd02:	bf18      	it	ne
   2cd04:	2001      	movne	r0, #1
   2cd06:	bd08      	pop	{r3, pc}

0002cd08 <img_mgmt_impl_read>:
{
   2cd08:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2cd0a:	460c      	mov	r4, r1
   2cd0c:	4615      	mov	r5, r2
   2cd0e:	461e      	mov	r6, r3
	switch (slot) {
   2cd10:	b1b0      	cbz	r0, 2cd40 <img_mgmt_impl_read+0x38>
   2cd12:	2801      	cmp	r0, #1
   2cd14:	bf14      	ite	ne
   2cd16:	20ff      	movne	r0, #255	; 0xff
   2cd18:	2002      	moveq	r0, #2
	rc = flash_area_open_ex(area_id, &fa);
   2cd1a:	a901      	add	r1, sp, #4
   2cd1c:	f7ff ff5b 	bl	2cbd6 <flash_area_open_ex>
	if (rc != 0) {
   2cd20:	b980      	cbnz	r0, 2cd44 <img_mgmt_impl_read+0x3c>
	rc = flash_area_read(fa, offset, dst, num_bytes);
   2cd22:	4621      	mov	r1, r4
   2cd24:	4633      	mov	r3, r6
   2cd26:	462a      	mov	r2, r5
   2cd28:	9801      	ldr	r0, [sp, #4]
   2cd2a:	f7fa fee6 	bl	27afa <flash_area_read>
   2cd2e:	4604      	mov	r4, r0
	flash_area_close(fa);
   2cd30:	9801      	ldr	r0, [sp, #4]
   2cd32:	f7fa fee1 	bl	27af8 <flash_area_close>
	if (rc != 0) {
   2cd36:	1e20      	subs	r0, r4, #0
   2cd38:	bf18      	it	ne
   2cd3a:	2001      	movne	r0, #1
}
   2cd3c:	b002      	add	sp, #8
   2cd3e:	bd70      	pop	{r4, r5, r6, pc}
		fa_id = FLASH_AREA_ID(image_0);
   2cd40:	2001      	movs	r0, #1
   2cd42:	e7ea      	b.n	2cd1a <img_mgmt_impl_read+0x12>
		return MGMT_ERR_EUNKNOWN;
   2cd44:	2001      	movs	r0, #1
   2cd46:	e7f9      	b.n	2cd3c <img_mgmt_impl_read+0x34>

0002cd48 <img_mgmt_impl_swap_type>:
{
   2cd48:	b508      	push	{r3, lr}
	switch (mcuboot_swap_type_multi(image)) {
   2cd4a:	2000      	movs	r0, #0
   2cd4c:	f000 fab5 	bl	2d2ba <mcuboot_swap_type_multi>
   2cd50:	1e83      	subs	r3, r0, #2
   2cd52:	2b02      	cmp	r3, #2
   2cd54:	bf94      	ite	ls
   2cd56:	f100 30ff 	addls.w	r0, r0, #4294967295	; 0xffffffff
   2cd5a:	2000      	movhi	r0, #0
}
   2cd5c:	bd08      	pop	{r3, pc}

0002cd5e <img_mgmt_impl_erased_val>:

int
img_mgmt_impl_erased_val(int slot, uint8_t *erased_val)
{
   2cd5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2cd60:	460d      	mov	r5, r1
	switch (slot) {
   2cd62:	b190      	cbz	r0, 2cd8a <img_mgmt_impl_erased_val+0x2c>
   2cd64:	2801      	cmp	r0, #1
   2cd66:	bf14      	ite	ne
   2cd68:	20ff      	movne	r0, #255	; 0xff
   2cd6a:	2002      	moveq	r0, #2

	if (area_id < 0) {
		return MGMT_ERR_EUNKNOWN;
	}

	rc = flash_area_open_ex(area_id, &fa);
   2cd6c:	a901      	add	r1, sp, #4
   2cd6e:	f7ff ff32 	bl	2cbd6 <flash_area_open_ex>
	if (rc != 0) {
   2cd72:	4604      	mov	r4, r0
   2cd74:	b958      	cbnz	r0, 2cd8e <img_mgmt_impl_erased_val+0x30>
		return MGMT_ERR_EUNKNOWN;
	}

	*erased_val = flash_area_erased_val(fa);
   2cd76:	9801      	ldr	r0, [sp, #4]
   2cd78:	f7fa ff1a 	bl	27bb0 <flash_area_erased_val>
   2cd7c:	7028      	strb	r0, [r5, #0]
	flash_area_close(fa);
   2cd7e:	9801      	ldr	r0, [sp, #4]
   2cd80:	f7fa feba 	bl	27af8 <flash_area_close>

	return 0;
}
   2cd84:	4620      	mov	r0, r4
   2cd86:	b003      	add	sp, #12
   2cd88:	bd30      	pop	{r4, r5, pc}
		fa_id = FLASH_AREA_ID(image_0);
   2cd8a:	2001      	movs	r0, #1
   2cd8c:	e7ee      	b.n	2cd6c <img_mgmt_impl_erased_val+0xe>
		return MGMT_ERR_EUNKNOWN;
   2cd8e:	2401      	movs	r4, #1
   2cd90:	e7f8      	b.n	2cd84 <img_mgmt_impl_erased_val+0x26>

0002cd92 <img_mgmt_impl_log_upload_start>:

int
img_mgmt_impl_log_upload_start(int status)
{
	return 0;
}
   2cd92:	2000      	movs	r0, #0
   2cd94:	4770      	bx	lr

0002cd96 <img_mgmt_impl_log_upload_done>:

int
img_mgmt_impl_log_upload_done(int status, const uint8_t *hash)
{
	return 0;
}
   2cd96:	2000      	movs	r0, #0
   2cd98:	4770      	bx	lr

0002cd9a <img_mgmt_impl_log_pending>:
   2cd9a:	2000      	movs	r0, #0
   2cd9c:	4770      	bx	lr

0002cd9e <img_mgmt_impl_log_confirm>:
   2cd9e:	2000      	movs	r0, #0
   2cda0:	4770      	bx	lr

0002cda2 <cbor_encode_text_stringz>:
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   2cda2:	b538      	push	{r3, r4, r5, lr}
   2cda4:	4605      	mov	r5, r0
   2cda6:	4608      	mov	r0, r1
   2cda8:	460c      	mov	r4, r1
   2cdaa:	f7fc fa8e 	bl	292ca <strlen>
   2cdae:	4621      	mov	r1, r4
   2cdb0:	4602      	mov	r2, r0
   2cdb2:	4628      	mov	r0, r5
   2cdb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2cdb8:	f001 b87a 	b.w	2deb0 <cbor_encode_text_string>

0002cdbc <img_mgmt_find_by_hash>:
{
   2cdbc:	b570      	push	{r4, r5, r6, lr}
   2cdbe:	4605      	mov	r5, r0
   2cdc0:	b088      	sub	sp, #32
   2cdc2:	460e      	mov	r6, r1
	for (i = 0; i < 2 * CONFIG_IMG_MGMT_UPDATABLE_IMAGE_NUMBER; i++) {
   2cdc4:	2400      	movs	r4, #0
		if (img_mgmt_read_info(i, ver, hash, NULL) != 0) {
   2cdc6:	2300      	movs	r3, #0
   2cdc8:	466a      	mov	r2, sp
   2cdca:	4631      	mov	r1, r6
   2cdcc:	4620      	mov	r0, r4
   2cdce:	f7f5 fef9 	bl	22bc4 <img_mgmt_read_info>
   2cdd2:	b140      	cbz	r0, 2cde6 <img_mgmt_find_by_hash+0x2a>
	for (i = 0; i < 2 * CONFIG_IMG_MGMT_UPDATABLE_IMAGE_NUMBER; i++) {
   2cdd4:	2c01      	cmp	r4, #1
   2cdd6:	d104      	bne.n	2cde2 <img_mgmt_find_by_hash+0x26>
	return -1;
   2cdd8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   2cddc:	4620      	mov	r0, r4
   2cdde:	b008      	add	sp, #32
   2cde0:	bd70      	pop	{r4, r5, r6, pc}
   2cde2:	2401      	movs	r4, #1
   2cde4:	e7ef      	b.n	2cdc6 <img_mgmt_find_by_hash+0xa>
		if (!memcmp(hash, find, IMAGE_HASH_LEN)) {
   2cde6:	2220      	movs	r2, #32
   2cde8:	4629      	mov	r1, r5
   2cdea:	4668      	mov	r0, sp
   2cdec:	f7fc fa9a 	bl	29324 <memcmp>
   2cdf0:	2800      	cmp	r0, #0
   2cdf2:	d1ef      	bne.n	2cdd4 <img_mgmt_find_by_hash+0x18>
   2cdf4:	e7f2      	b.n	2cddc <img_mgmt_find_by_hash+0x20>

0002cdf6 <img_mgmt_my_version>:
	return img_mgmt_read_info(IMG_MGMT_BOOT_CURR_SLOT, ver, NULL, NULL);
   2cdf6:	2300      	movs	r3, #0
{
   2cdf8:	4601      	mov	r1, r0
	return img_mgmt_read_info(IMG_MGMT_BOOT_CURR_SLOT, ver, NULL, NULL);
   2cdfa:	461a      	mov	r2, r3
   2cdfc:	4618      	mov	r0, r3
   2cdfe:	f7f5 bee1 	b.w	22bc4 <img_mgmt_read_info>

0002ce02 <cbor_encode_text_stringz>:
   2ce02:	b538      	push	{r3, r4, r5, lr}
   2ce04:	4605      	mov	r5, r0
   2ce06:	4608      	mov	r0, r1
   2ce08:	460c      	mov	r4, r1
   2ce0a:	f7fc fa5e 	bl	292ca <strlen>
   2ce0e:	4621      	mov	r1, r4
   2ce10:	4602      	mov	r2, r0
   2ce12:	4628      	mov	r0, r5
   2ce14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2ce18:	f001 b84a 	b.w	2deb0 <cbor_encode_text_string>

0002ce1c <img_mgmt_state_flags>:
{
   2ce1c:	b510      	push	{r4, lr}
   2ce1e:	4604      	mov	r4, r0
	swap_type = img_mgmt_impl_swap_type(query_slot);
   2ce20:	f7ff ff92 	bl	2cd48 <img_mgmt_impl_swap_type>
	switch (swap_type) {
   2ce24:	2803      	cmp	r0, #3
   2ce26:	d80f      	bhi.n	2ce48 <img_mgmt_state_flags+0x2c>
   2ce28:	e8df f000 	tbb	[pc, r0]
   2ce2c:	0b080502 	.word	0x0b080502
		if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   2ce30:	b17c      	cbz	r4, 2ce52 <img_mgmt_state_flags+0x36>
	flags = 0;
   2ce32:	2000      	movs	r0, #0
   2ce34:	e001      	b.n	2ce3a <img_mgmt_state_flags+0x1e>
		if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   2ce36:	b174      	cbz	r4, 2ce56 <img_mgmt_state_flags+0x3a>
			flags |= IMG_MGMT_STATE_F_PENDING;
   2ce38:	2001      	movs	r0, #1
}
   2ce3a:	bd10      	pop	{r4, pc}
		if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   2ce3c:	b15c      	cbz	r4, 2ce56 <img_mgmt_state_flags+0x3a>
			flags |= IMG_MGMT_STATE_F_PENDING | IMG_MGMT_STATE_F_PERMANENT;
   2ce3e:	2009      	movs	r0, #9
   2ce40:	e7fb      	b.n	2ce3a <img_mgmt_state_flags+0x1e>
		if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   2ce42:	b154      	cbz	r4, 2ce5a <img_mgmt_state_flags+0x3e>
			flags |= IMG_MGMT_STATE_F_CONFIRMED;
   2ce44:	2002      	movs	r0, #2
   2ce46:	e7f8      	b.n	2ce3a <img_mgmt_state_flags+0x1e>
	if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   2ce48:	2c00      	cmp	r4, #0
   2ce4a:	d1f2      	bne.n	2ce32 <img_mgmt_state_flags+0x16>
		flags |= IMG_MGMT_STATE_F_ACTIVE;
   2ce4c:	f044 0004 	orr.w	r0, r4, #4
   2ce50:	e7f3      	b.n	2ce3a <img_mgmt_state_flags+0x1e>
			flags |= IMG_MGMT_STATE_F_ACTIVE;
   2ce52:	2406      	movs	r4, #6
   2ce54:	e7fa      	b.n	2ce4c <img_mgmt_state_flags+0x30>
			flags |= IMG_MGMT_STATE_F_CONFIRMED;
   2ce56:	2402      	movs	r4, #2
   2ce58:	e7f8      	b.n	2ce4c <img_mgmt_state_flags+0x30>
			flags |= IMG_MGMT_STATE_F_ACTIVE;
   2ce5a:	2404      	movs	r4, #4
   2ce5c:	e7f6      	b.n	2ce4c <img_mgmt_state_flags+0x30>

0002ce5e <img_mgmt_state_any_pending>:
{
   2ce5e:	b508      	push	{r3, lr}
	return img_mgmt_state_flags(0) & IMG_MGMT_STATE_F_PENDING ||
   2ce60:	2000      	movs	r0, #0
   2ce62:	f7ff ffdb 	bl	2ce1c <img_mgmt_state_flags>
   2ce66:	f010 0f01 	tst.w	r0, #1
   2ce6a:	f04f 0001 	mov.w	r0, #1
   2ce6e:	d103      	bne.n	2ce78 <img_mgmt_state_any_pending+0x1a>
		   img_mgmt_state_flags(1) & IMG_MGMT_STATE_F_PENDING;
   2ce70:	f7ff ffd4 	bl	2ce1c <img_mgmt_state_flags>
	return img_mgmt_state_flags(0) & IMG_MGMT_STATE_F_PENDING ||
   2ce74:	f000 0001 	and.w	r0, r0, #1
}
   2ce78:	bd08      	pop	{r3, pc}

0002ce7a <img_mgmt_slot_in_use>:
{
   2ce7a:	b508      	push	{r3, lr}
	state_flags = img_mgmt_state_flags(slot);
   2ce7c:	f7ff ffce 	bl	2ce1c <img_mgmt_state_flags>
		   state_flags & IMG_MGMT_STATE_F_CONFIRMED	||
   2ce80:	f010 0f06 	tst.w	r0, #6
   2ce84:	bf0c      	ite	eq
   2ce86:	f000 0001 	andeq.w	r0, r0, #1
   2ce8a:	2001      	movne	r0, #1
}
   2ce8c:	bd08      	pop	{r3, pc}

0002ce8e <img_mgmt_state_set_pending>:
{
   2ce8e:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ce90:	b089      	sub	sp, #36	; 0x24
   2ce92:	4606      	mov	r6, r0
   2ce94:	460f      	mov	r7, r1
	state_flags = img_mgmt_state_flags(slot);
   2ce96:	f7ff ffc1 	bl	2ce1c <img_mgmt_state_flags>
	if (state_flags & IMG_MGMT_STATE_F_CONFIRMED && slot != 0) {
   2ce9a:	0783      	lsls	r3, r0, #30
   2ce9c:	d500      	bpl.n	2cea0 <img_mgmt_state_set_pending+0x12>
   2ce9e:	b9d6      	cbnz	r6, 2ced6 <img_mgmt_state_set_pending+0x48>
	rc = img_mgmt_impl_write_pending(slot, permanent);
   2cea0:	1e39      	subs	r1, r7, #0
   2cea2:	bf18      	it	ne
   2cea4:	2101      	movne	r1, #1
   2cea6:	4630      	mov	r0, r6
   2cea8:	f7ff ff1b 	bl	2cce2 <img_mgmt_impl_write_pending>
	if (rc != 0) {
   2ceac:	1e04      	subs	r4, r0, #0
   2ceae:	bf18      	it	ne
   2ceb0:	2401      	movne	r4, #1
	if (img_mgmt_read_info(slot, NULL, hash, NULL)) {
   2ceb2:	466d      	mov	r5, sp
   2ceb4:	2300      	movs	r3, #0
   2ceb6:	4619      	mov	r1, r3
   2ceb8:	462a      	mov	r2, r5
   2ceba:	4630      	mov	r0, r6
   2cebc:	f7f5 fe82 	bl	22bc4 <img_mgmt_read_info>
		hashp = hash;
   2cec0:	2800      	cmp	r0, #0
   2cec2:	bf0c      	ite	eq
   2cec4:	4629      	moveq	r1, r5
   2cec6:	2100      	movne	r1, #0
		(void) img_mgmt_impl_log_confirm(rc, hashp);
   2cec8:	4620      	mov	r0, r4
	if (permanent) {
   2ceca:	b137      	cbz	r7, 2ceda <img_mgmt_state_set_pending+0x4c>
		(void) img_mgmt_impl_log_confirm(rc, hashp);
   2cecc:	f7ff ff67 	bl	2cd9e <img_mgmt_impl_log_confirm>
}
   2ced0:	4620      	mov	r0, r4
   2ced2:	b009      	add	sp, #36	; 0x24
   2ced4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MGMT_ERR_EBADSTATE;
   2ced6:	2406      	movs	r4, #6
   2ced8:	e7eb      	b.n	2ceb2 <img_mgmt_state_set_pending+0x24>
		(void) img_mgmt_impl_log_pending(rc, hashp);
   2ceda:	f7ff ff5e 	bl	2cd9a <img_mgmt_impl_log_pending>
	return rc;
   2cede:	e7f7      	b.n	2ced0 <img_mgmt_state_set_pending+0x42>

0002cee0 <img_mgmt_state_confirm>:
{
   2cee0:	b510      	push	{r4, lr}
	if (img_mgmt_state_any_pending()) {
   2cee2:	f7ff ffbc 	bl	2ce5e <img_mgmt_state_any_pending>
   2cee6:	b960      	cbnz	r0, 2cf02 <img_mgmt_state_confirm+0x22>
	rc = img_mgmt_impl_write_confirmed();
   2cee8:	f7ff ff07 	bl	2ccfa <img_mgmt_impl_write_confirmed>
	if (rc != 0) {
   2ceec:	1e04      	subs	r4, r0, #0
   2ceee:	bf18      	it	ne
   2cef0:	2401      	movne	r4, #1
	 img_mgmt_dfu_confirmed();
   2cef2:	f7f6 f843 	bl	22f7c <img_mgmt_dfu_confirmed>
	return img_mgmt_impl_log_confirm(rc, NULL);
   2cef6:	4620      	mov	r0, r4
   2cef8:	2100      	movs	r1, #0
}
   2cefa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return img_mgmt_impl_log_confirm(rc, NULL);
   2cefe:	f7ff bf4e 	b.w	2cd9e <img_mgmt_impl_log_confirm>
		rc = MGMT_ERR_EBADSTATE;
   2cf02:	2406      	movs	r4, #6
   2cf04:	e7f7      	b.n	2cef6 <img_mgmt_state_confirm+0x16>

0002cf06 <img_mgmt_ver_str>:
#include "img_mgmt/image.h"
#include "img_mgmt/img_mgmt.h"

int
img_mgmt_ver_str(const struct image_version *ver, char *dst)
{
   2cf06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int off = 0;

	off += ull_to_s(ver->iv_major, INT_MAX, dst + off);
   2cf08:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
{
   2cf0c:	460c      	mov	r4, r1
   2cf0e:	4605      	mov	r5, r0
	off += ull_to_s(ver->iv_major, INT_MAX, dst + off);
   2cf10:	460b      	mov	r3, r1
   2cf12:	7800      	ldrb	r0, [r0, #0]
   2cf14:	2100      	movs	r1, #0
   2cf16:	f000 f99e 	bl	2d256 <ull_to_s>

	dst[off++] = '.';
   2cf1a:	272e      	movs	r7, #46	; 0x2e
   2cf1c:	5427      	strb	r7, [r4, r0]
   2cf1e:	1c46      	adds	r6, r0, #1
	off += ull_to_s(ver->iv_minor, INT_MAX, dst + off);
   2cf20:	19a3      	adds	r3, r4, r6
   2cf22:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   2cf26:	2100      	movs	r1, #0
   2cf28:	7868      	ldrb	r0, [r5, #1]
   2cf2a:	f000 f994 	bl	2d256 <ull_to_s>
   2cf2e:	4430      	add	r0, r6

	dst[off++] = '.';
   2cf30:	1c46      	adds	r6, r0, #1
   2cf32:	5427      	strb	r7, [r4, r0]
	off += ull_to_s(ver->iv_revision, INT_MAX, dst + off);
   2cf34:	19a3      	adds	r3, r4, r6
   2cf36:	8868      	ldrh	r0, [r5, #2]
   2cf38:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   2cf3c:	2100      	movs	r1, #0
   2cf3e:	f000 f98a 	bl	2d256 <ull_to_s>

	if (ver->iv_build_num != 0) {
   2cf42:	686b      	ldr	r3, [r5, #4]
   2cf44:	b14b      	cbz	r3, 2cf5a <img_mgmt_ver_str+0x54>
	off += ull_to_s(ver->iv_revision, INT_MAX, dst + off);
   2cf46:	4406      	add	r6, r0
		dst[off++] = '.';
		off += ull_to_s(ver->iv_build_num, INT_MAX, dst + off);
   2cf48:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
		dst[off++] = '.';
   2cf4c:	55a7      	strb	r7, [r4, r6]
   2cf4e:	3601      	adds	r6, #1
		off += ull_to_s(ver->iv_build_num, INT_MAX, dst + off);
   2cf50:	6868      	ldr	r0, [r5, #4]
   2cf52:	19a3      	adds	r3, r4, r6
   2cf54:	2100      	movs	r1, #0
   2cf56:	f000 f97e 	bl	2d256 <ull_to_s>
	}

	return 0;
}
   2cf5a:	2000      	movs	r0, #0
   2cf5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002cf5e <zephyr_os_mgmt_reset_work_handler>:
{
   2cf5e:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   2cf60:	2000      	movs	r0, #0
   2cf62:	f7e1 fb07 	bl	e574 <sys_reboot>

0002cf66 <os_mgmt_reset>:
	return os_mgmt_impl_reset(CONFIG_OS_MGMT_RESET_MS);
   2cf66:	20fa      	movs	r0, #250	; 0xfa
   2cf68:	f7f6 b928 	b.w	231bc <os_mgmt_impl_reset>

0002cf6c <mgmt_streamer_alloc_rsp>:
{
   2cf6c:	4603      	mov	r3, r0
   2cf6e:	4608      	mov	r0, r1
	return streamer->cfg->alloc_rsp(req, streamer->cb_arg);
   2cf70:	681a      	ldr	r2, [r3, #0]
   2cf72:	6859      	ldr	r1, [r3, #4]
   2cf74:	6812      	ldr	r2, [r2, #0]
   2cf76:	4710      	bx	r2

0002cf78 <mgmt_streamer_trim_front>:
{
   2cf78:	4603      	mov	r3, r0
   2cf7a:	4608      	mov	r0, r1
   2cf7c:	4611      	mov	r1, r2
	streamer->cfg->trim_front(buf, len, streamer->cb_arg);
   2cf7e:	681a      	ldr	r2, [r3, #0]
{
   2cf80:	b410      	push	{r4}
	streamer->cfg->trim_front(buf, len, streamer->cb_arg);
   2cf82:	6854      	ldr	r4, [r2, #4]
   2cf84:	685a      	ldr	r2, [r3, #4]
   2cf86:	4623      	mov	r3, r4
}
   2cf88:	bc10      	pop	{r4}
	streamer->cfg->trim_front(buf, len, streamer->cb_arg);
   2cf8a:	4718      	bx	r3

0002cf8c <mgmt_streamer_write_hdr>:
	return streamer->cfg->write_hdr(streamer->writer, hdr);
   2cf8c:	6803      	ldr	r3, [r0, #0]
   2cf8e:	68c0      	ldr	r0, [r0, #12]
   2cf90:	68db      	ldr	r3, [r3, #12]
   2cf92:	4718      	bx	r3

0002cf94 <mgmt_streamer_init_reader>:
	return streamer->cfg->init_reader(streamer->reader, buf);
   2cf94:	6803      	ldr	r3, [r0, #0]
   2cf96:	6880      	ldr	r0, [r0, #8]
   2cf98:	691b      	ldr	r3, [r3, #16]
   2cf9a:	4718      	bx	r3

0002cf9c <mgmt_streamer_init_writer>:
	return streamer->cfg->init_writer(streamer->writer, buf);
   2cf9c:	6803      	ldr	r3, [r0, #0]
   2cf9e:	68c0      	ldr	r0, [r0, #12]
   2cfa0:	695b      	ldr	r3, [r3, #20]
   2cfa2:	4718      	bx	r3

0002cfa4 <mgmt_streamer_free_buf>:
{
   2cfa4:	4603      	mov	r3, r0
   2cfa6:	4608      	mov	r0, r1
	streamer->cfg->free_buf(buf, streamer->cb_arg);
   2cfa8:	681a      	ldr	r2, [r3, #0]
   2cfaa:	6859      	ldr	r1, [r3, #4]
   2cfac:	6992      	ldr	r2, [r2, #24]
   2cfae:	4710      	bx	r2

0002cfb0 <mgmt_err_from_cbor>:
	switch (cbor_status) {
   2cfb0:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   2cfb4:	d003      	beq.n	2cfbe <mgmt_err_from_cbor+0xe>
   2cfb6:	3800      	subs	r0, #0
   2cfb8:	bf18      	it	ne
   2cfba:	2001      	movne	r0, #1
   2cfbc:	4770      	bx	lr
   2cfbe:	2002      	movs	r0, #2
}
   2cfc0:	4770      	bx	lr

0002cfc2 <mgmt_ctxt_init>:
{
   2cfc2:	b570      	push	{r4, r5, r6, lr}
   2cfc4:	460e      	mov	r6, r1
	rc = cbor_parser_init(streamer->reader, 0, &ctxt->parser, &ctxt->it);
   2cfc6:	f100 031c 	add.w	r3, r0, #28
   2cfca:	f100 0210 	add.w	r2, r0, #16
{
   2cfce:	4605      	mov	r5, r0
	rc = cbor_parser_init(streamer->reader, 0, &ctxt->parser, &ctxt->it);
   2cfd0:	2100      	movs	r1, #0
   2cfd2:	68b0      	ldr	r0, [r6, #8]
   2cfd4:	f001 f95a 	bl	2e28c <cbor_parser_init>
   2cfd8:	4604      	mov	r4, r0
	if (rc != CborNoError) {
   2cfda:	b118      	cbz	r0, 2cfe4 <mgmt_ctxt_init+0x22>
}
   2cfdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return mgmt_err_from_cbor(rc);
   2cfe0:	f7ff bfe6 	b.w	2cfb0 <mgmt_err_from_cbor>
	cbor_encoder_init(&ctxt->encoder, streamer->writer, 0);
   2cfe4:	4602      	mov	r2, r0
   2cfe6:	68f1      	ldr	r1, [r6, #12]
   2cfe8:	4628      	mov	r0, r5
   2cfea:	f000 ff2c 	bl	2de46 <cbor_encoder_init>
}
   2cfee:	4620      	mov	r0, r4
   2cff0:	bd70      	pop	{r4, r5, r6, pc}

0002cff2 <mgmt_ntoh_hdr>:
	hdr->nh_len = ntohs(hdr->nh_len);
   2cff2:	8843      	ldrh	r3, [r0, #2]
   2cff4:	ba5b      	rev16	r3, r3
   2cff6:	8043      	strh	r3, [r0, #2]
	hdr->nh_group = ntohs(hdr->nh_group);
   2cff8:	8883      	ldrh	r3, [r0, #4]
   2cffa:	ba5b      	rev16	r3, r3
   2cffc:	8083      	strh	r3, [r0, #4]
}
   2cffe:	4770      	bx	lr

0002d000 <mgmt_hton_hdr>:
   2d000:	f7ff bff7 	b.w	2cff2 <mgmt_ntoh_hdr>

0002d004 <smp_process_request_packet>:
 *                       or there is not enough bytes to process header,
 *                       or other MGMT_ERR_[...] code on failure.
 */
int
smp_process_request_packet(struct smp_streamer *streamer, void *req)
{
   2d004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2d008:	b095      	sub	sp, #84	; 0x54
   2d00a:	4605      	mov	r5, r0
   2d00c:	460e      	mov	r6, r1
	int rc = 0;
	const char *rsn = NULL;

	rsp = NULL;

	mgmt_streamer_init_reader(&streamer->mgmt_stmr, req);
   2d00e:	f7ff ffc1 	bl	2cf94 <mgmt_streamer_init_reader>
	reader->cpy(reader, (char *)dst_hdr, 0, sizeof(*dst_hdr));
   2d012:	f04f 0900 	mov.w	r9, #0

	while (streamer->mgmt_stmr.reader->message_size > 0) {
   2d016:	68a8      	ldr	r0, [r5, #8]
   2d018:	6984      	ldr	r4, [r0, #24]
   2d01a:	b944      	cbnz	r4, 2d02e <smp_process_request_packet+0x2a>
		}

		return rc;
	}

	mgmt_streamer_free_buf(&streamer->mgmt_stmr, req);
   2d01c:	4631      	mov	r1, r6
   2d01e:	4628      	mov	r0, r5
   2d020:	f7ff ffc0 	bl	2cfa4 <mgmt_streamer_free_buf>
	mgmt_streamer_free_buf(&streamer->mgmt_stmr, rsp);
   2d024:	2100      	movs	r1, #0
   2d026:	4628      	mov	r0, r5
   2d028:	f7ff ffbc 	bl	2cfa4 <mgmt_streamer_free_buf>
	return rc;
   2d02c:	e093      	b.n	2d156 <smp_process_request_packet+0x152>
	if (reader->message_size < sizeof(*dst_hdr)) {
   2d02e:	2c07      	cmp	r4, #7
   2d030:	f240 8103 	bls.w	2d23a <smp_process_request_packet+0x236>
	reader->cpy(reader, (char *)dst_hdr, 0, sizeof(*dst_hdr));
   2d034:	2308      	movs	r3, #8
   2d036:	2200      	movs	r2, #0
   2d038:	a901      	add	r1, sp, #4
   2d03a:	6944      	ldr	r4, [r0, #20]
   2d03c:	47a0      	blx	r4
		mgmt_ntoh_hdr(&req_hdr);
   2d03e:	a801      	add	r0, sp, #4
   2d040:	f7ff ffd7 	bl	2cff2 <mgmt_ntoh_hdr>
		if (streamer->mgmt_stmr.reader->message_size < (req_hdr.nh_len + MGMT_HDR_SIZE)) {
   2d044:	68aa      	ldr	r2, [r5, #8]
   2d046:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   2d04a:	6992      	ldr	r2, [r2, #24]
   2d04c:	3308      	adds	r3, #8
   2d04e:	429a      	cmp	r2, r3
   2d050:	f0c0 80f9 	bcc.w	2d246 <smp_process_request_packet+0x242>
		mgmt_streamer_trim_front(&streamer->mgmt_stmr, req, MGMT_HDR_SIZE);
   2d054:	2208      	movs	r2, #8
   2d056:	4631      	mov	r1, r6
   2d058:	4628      	mov	r0, r5
   2d05a:	f7ff ff8d 	bl	2cf78 <mgmt_streamer_trim_front>
		streamer->mgmt_stmr.reader->message_size -= MGMT_HDR_SIZE;
   2d05e:	68aa      	ldr	r2, [r5, #8]
   2d060:	6993      	ldr	r3, [r2, #24]
   2d062:	3b08      	subs	r3, #8
   2d064:	6193      	str	r3, [r2, #24]
		rsp = mgmt_streamer_alloc_rsp(&streamer->mgmt_stmr, req);
   2d066:	4631      	mov	r1, r6
   2d068:	4628      	mov	r0, r5
   2d06a:	f7ff ff7f 	bl	2cf6c <mgmt_streamer_alloc_rsp>
		if (rsp == NULL) {
   2d06e:	4680      	mov	r8, r0
   2d070:	2800      	cmp	r0, #0
   2d072:	f000 80ed 	beq.w	2d250 <smp_process_request_packet+0x24c>
		mgmt_streamer_init_writer(&streamer->mgmt_stmr, rsp);
   2d076:	4601      	mov	r1, r0
   2d078:	4628      	mov	r0, r5
   2d07a:	f7ff ff8f 	bl	2cf9c <mgmt_streamer_init_writer>
	rc = mgmt_ctxt_init(&cbuf, &streamer->mgmt_stmr);
   2d07e:	4629      	mov	r1, r5
   2d080:	a809      	add	r0, sp, #36	; 0x24
   2d082:	f7ff ff9e 	bl	2cfc2 <mgmt_ctxt_init>
	if (rc != 0) {
   2d086:	4604      	mov	r4, r0
   2d088:	2800      	cmp	r0, #0
   2d08a:	f040 80d8 	bne.w	2d23e <smp_process_request_packet+0x23a>
	handler = mgmt_find_handler(req_hdr->nh_group, req_hdr->nh_id);
   2d08e:	f89d 100b 	ldrb.w	r1, [sp, #11]
   2d092:	f8bd 0008 	ldrh.w	r0, [sp, #8]
   2d096:	f7f6 f8ff 	bl	23298 <mgmt_find_handler>
	if (handler == NULL) {
   2d09a:	2800      	cmp	r0, #0
   2d09c:	d15f      	bne.n	2d15e <smp_process_request_packet+0x15a>
		handler_found = false;
   2d09e:	2700      	movs	r7, #0
		return MGMT_ERR_ENOTSUP;
   2d0a0:	2408      	movs	r4, #8
	if (rsp == NULL) {
   2d0a2:	46b1      	mov	r9, r6
   2d0a4:	4646      	mov	r6, r8
	mgmt_streamer_init_writer(&streamer->mgmt_stmr, rsp);
   2d0a6:	4631      	mov	r1, r6
   2d0a8:	4628      	mov	r0, r5
   2d0aa:	f7ff ff77 	bl	2cf9c <mgmt_streamer_init_writer>
	rc = mgmt_ctxt_init(&cbuf, &streamer->mgmt_stmr);
   2d0ae:	4629      	mov	r1, r5
   2d0b0:	a809      	add	r0, sp, #36	; 0x24
   2d0b2:	f7ff ff86 	bl	2cfc2 <mgmt_ctxt_init>
	if (rc != 0) {
   2d0b6:	2800      	cmp	r0, #0
   2d0b8:	d13b      	bne.n	2d132 <smp_process_request_packet+0x12e>
	rc = cbor_encoder_create_map(&cbuf.encoder, &map, CborIndefiniteLength);
   2d0ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2d0be:	a905      	add	r1, sp, #20
   2d0c0:	a809      	add	r0, sp, #36	; 0x24
   2d0c2:	f000 ff09 	bl	2ded8 <cbor_encoder_create_map>
	if (rc != 0) {
   2d0c6:	bba0      	cbnz	r0, 2d132 <smp_process_request_packet+0x12e>
	rc = mgmt_write_rsp_status(&cbuf, status);
   2d0c8:	4621      	mov	r1, r4
   2d0ca:	a809      	add	r0, sp, #36	; 0x24
   2d0cc:	f7f6 f8fe 	bl	232cc <mgmt_write_rsp_status>
	if (rc != 0) {
   2d0d0:	bb78      	cbnz	r0, 2d132 <smp_process_request_packet+0x12e>
	rc = cbor_encoder_close_container(&cbuf.encoder, &map);
   2d0d2:	a905      	add	r1, sp, #20
   2d0d4:	a809      	add	r0, sp, #36	; 0x24
   2d0d6:	f000 ff0e 	bl	2def6 <cbor_encoder_close_container>
	if (rc != 0) {
   2d0da:	4680      	mov	r8, r0
   2d0dc:	bb48      	cbnz	r0, 2d132 <smp_process_request_packet+0x12e>
		.nh_op = smp_rsp_op(req_hdr->nh_op),
   2d0de:	f89d 2004 	ldrb.w	r2, [sp, #4]
{   return encoder->writer->bytes_written; }
   2d0e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
		.nh_group = req_hdr->nh_group,
   2d0e4:	f8bd 0008 	ldrh.w	r0, [sp, #8]
			 cbor_encode_bytes_written(&cbuf.encoder) - MGMT_HDR_SIZE);
   2d0e8:	685b      	ldr	r3, [r3, #4]
		.nh_seq = req_hdr->nh_seq,
   2d0ea:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	*rsp_hdr = (struct mgmt_hdr) {
   2d0ee:	f8ad 0010 	strh.w	r0, [sp, #16]
		return MGMT_OP_WRITE_RSP;
   2d0f2:	f012 0f07 	tst.w	r2, #7
   2d0f6:	bf0c      	ite	eq
   2d0f8:	f04f 0c01 	moveq.w	ip, #1
   2d0fc:	f04f 0c03 	movne.w	ip, #3
	*rsp_hdr = (struct mgmt_hdr) {
   2d100:	4642      	mov	r2, r8
   2d102:	f36c 0202 	bfi	r2, ip, #0, #3
			 cbor_encode_bytes_written(&cbuf.encoder) - MGMT_HDR_SIZE);
   2d106:	3b08      	subs	r3, #8
	mgmt_hton_hdr(rsp_hdr);
   2d108:	a803      	add	r0, sp, #12
	*rsp_hdr = (struct mgmt_hdr) {
   2d10a:	f8ad 300e 	strh.w	r3, [sp, #14]
   2d10e:	f8ad 800c 	strh.w	r8, [sp, #12]
   2d112:	f8ad 1012 	strh.w	r1, [sp, #18]
   2d116:	f88d 200c 	strb.w	r2, [sp, #12]
	mgmt_hton_hdr(rsp_hdr);
   2d11a:	f7ff ff71 	bl	2d000 <mgmt_hton_hdr>
	return mgmt_streamer_write_hdr(&streamer->mgmt_stmr, src_hdr);
   2d11e:	a903      	add	r1, sp, #12
   2d120:	4628      	mov	r0, r5
   2d122:	f7ff ff33 	bl	2cf8c <mgmt_streamer_write_hdr>
		streamer->tx_rsp_cb(streamer, rsp, streamer->mgmt_stmr.cb_arg);
   2d126:	4631      	mov	r1, r6
   2d128:	692b      	ldr	r3, [r5, #16]
   2d12a:	686a      	ldr	r2, [r5, #4]
   2d12c:	4628      	mov	r0, r5
   2d12e:	4798      	blx	r3
		rsp = NULL;
   2d130:	4646      	mov	r6, r8
	mgmt_streamer_free_buf(&streamer->mgmt_stmr, req);
   2d132:	4649      	mov	r1, r9
   2d134:	4628      	mov	r0, r5
   2d136:	f7ff ff35 	bl	2cfa4 <mgmt_streamer_free_buf>
	mgmt_streamer_free_buf(&streamer->mgmt_stmr, rsp);
   2d13a:	4631      	mov	r1, r6
   2d13c:	4628      	mov	r0, r5
   2d13e:	f7ff ff31 	bl	2cfa4 <mgmt_streamer_free_buf>
		if (handler_found) {
   2d142:	b147      	cbz	r7, 2d156 <smp_process_request_packet+0x152>
			mgmt_evt(MGMT_EVT_OP_CMD_DONE, req_hdr.nh_group, req_hdr.nh_id,
   2d144:	f89d 200b 	ldrb.w	r2, [sp, #11]
   2d148:	f8bd 1008 	ldrh.w	r1, [sp, #8]
			cmd_done_arg.err = rc;
   2d14c:	9400      	str	r4, [sp, #0]
			mgmt_evt(MGMT_EVT_OP_CMD_DONE, req_hdr.nh_group, req_hdr.nh_id,
   2d14e:	466b      	mov	r3, sp
   2d150:	2003      	movs	r0, #3
   2d152:	f7f6 f8d1 	bl	232f8 <mgmt_evt>
}
   2d156:	4620      	mov	r0, r4
   2d158:	b015      	add	sp, #84	; 0x54
   2d15a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req_hdr->nh_op) {
   2d15e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2d162:	f013 0307 	ands.w	r3, r3, #7
   2d166:	d004      	beq.n	2d172 <smp_process_request_packet+0x16e>
   2d168:	2b02      	cmp	r3, #2
   2d16a:	d050      	beq.n	2d20e <smp_process_request_packet+0x20a>
		handler_found = false;
   2d16c:	4627      	mov	r7, r4
		return MGMT_ERR_EINVAL;
   2d16e:	2403      	movs	r4, #3
   2d170:	e797      	b.n	2d0a2 <smp_process_request_packet+0x9e>
		handler_fn = handler->mh_read;
   2d172:	6804      	ldr	r4, [r0, #0]
	if (handler_fn) {
   2d174:	2c00      	cmp	r4, #0
   2d176:	d092      	beq.n	2d09e <smp_process_request_packet+0x9a>
		rc = cbor_encoder_create_map(&cbuf->encoder, &payload_encoder,
   2d178:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2d17c:	a905      	add	r1, sp, #20
   2d17e:	a809      	add	r0, sp, #36	; 0x24
   2d180:	f000 feaa 	bl	2ded8 <cbor_encoder_create_map>
   2d184:	4603      	mov	r3, r0
		if (rc != 0) {
   2d186:	2800      	cmp	r0, #0
   2d188:	d043      	beq.n	2d212 <smp_process_request_packet+0x20e>
			return mgmt_err_from_cbor(rc);
   2d18a:	f7ff ff11 	bl	2cfb0 <mgmt_err_from_cbor>
		handler_found = false;
   2d18e:	2700      	movs	r7, #0
			return mgmt_err_from_cbor(rc);
   2d190:	4604      	mov	r4, r0
	if (rc != 0) {
   2d192:	2c00      	cmp	r4, #0
   2d194:	d185      	bne.n	2d0a2 <smp_process_request_packet+0x9e>
		.nh_op = smp_rsp_op(req_hdr->nh_op),
   2d196:	f89d 2004 	ldrb.w	r2, [sp, #4]
   2d19a:	9b09      	ldr	r3, [sp, #36]	; 0x24
		.nh_group = req_hdr->nh_group,
   2d19c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
			 cbor_encode_bytes_written(&cbuf.encoder) - MGMT_HDR_SIZE);
   2d1a0:	685b      	ldr	r3, [r3, #4]
	*rsp_hdr = (struct mgmt_hdr) {
   2d1a2:	f8ad 9014 	strh.w	r9, [sp, #20]
		return MGMT_OP_WRITE_RSP;
   2d1a6:	f012 0f07 	tst.w	r2, #7
   2d1aa:	bf0c      	ite	eq
   2d1ac:	2001      	moveq	r0, #1
   2d1ae:	2003      	movne	r0, #3
		.nh_seq = req_hdr->nh_seq,
   2d1b0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
	*rsp_hdr = (struct mgmt_hdr) {
   2d1b4:	f88d 0014 	strb.w	r0, [sp, #20]
			 cbor_encode_bytes_written(&cbuf.encoder) - MGMT_HDR_SIZE);
   2d1b8:	3b08      	subs	r3, #8
	mgmt_hton_hdr(rsp_hdr);
   2d1ba:	a805      	add	r0, sp, #20
	*rsp_hdr = (struct mgmt_hdr) {
   2d1bc:	f8ad 3016 	strh.w	r3, [sp, #22]
   2d1c0:	f8ad 201a 	strh.w	r2, [sp, #26]
   2d1c4:	f8ad 1018 	strh.w	r1, [sp, #24]
	mgmt_hton_hdr(rsp_hdr);
   2d1c8:	f7ff ff1a 	bl	2d000 <mgmt_hton_hdr>
	return mgmt_streamer_write_hdr(&streamer->mgmt_stmr, src_hdr);
   2d1cc:	a905      	add	r1, sp, #20
   2d1ce:	4628      	mov	r0, r5
   2d1d0:	f7ff fedc 	bl	2cf8c <mgmt_streamer_write_hdr>
		rc = streamer->tx_rsp_cb(streamer, rsp, streamer->mgmt_stmr.cb_arg);
   2d1d4:	692b      	ldr	r3, [r5, #16]
   2d1d6:	686a      	ldr	r2, [r5, #4]
   2d1d8:	4641      	mov	r1, r8
   2d1da:	4628      	mov	r0, r5
   2d1dc:	4798      	blx	r3
		if (rc != 0) {
   2d1de:	4604      	mov	r4, r0
   2d1e0:	bb98      	cbnz	r0, 2d24a <smp_process_request_packet+0x246>
		mgmt_streamer_trim_front(&streamer->mgmt_stmr, req, req_hdr.nh_len);
   2d1e2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   2d1e6:	4631      	mov	r1, r6
   2d1e8:	4628      	mov	r0, r5
   2d1ea:	f7ff fec5 	bl	2cf78 <mgmt_streamer_trim_front>
		streamer->mgmt_stmr.reader->message_size -= req_hdr.nh_len;
   2d1ee:	68aa      	ldr	r2, [r5, #8]
   2d1f0:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   2d1f4:	6993      	ldr	r3, [r2, #24]
		cmd_done_arg.err = MGMT_ERR_EOK;
   2d1f6:	9400      	str	r4, [sp, #0]
		streamer->mgmt_stmr.reader->message_size -= req_hdr.nh_len;
   2d1f8:	1a5b      	subs	r3, r3, r1
   2d1fa:	6193      	str	r3, [r2, #24]
		mgmt_evt(MGMT_EVT_OP_CMD_DONE, req_hdr.nh_group, req_hdr.nh_id,
   2d1fc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   2d200:	f89d 200b 	ldrb.w	r2, [sp, #11]
   2d204:	466b      	mov	r3, sp
   2d206:	2003      	movs	r0, #3
   2d208:	f7f6 f876 	bl	232f8 <mgmt_evt>
   2d20c:	e703      	b.n	2d016 <smp_process_request_packet+0x12>
		handler_fn = handler->mh_write;
   2d20e:	6844      	ldr	r4, [r0, #4]
		break;
   2d210:	e7b0      	b.n	2d174 <smp_process_request_packet+0x170>
		mgmt_evt(MGMT_EVT_OP_CMD_RECV, req_hdr->nh_group, req_hdr->nh_id, NULL);
   2d212:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   2d216:	f89d 200b 	ldrb.w	r2, [sp, #11]
   2d21a:	2001      	movs	r0, #1
   2d21c:	f7f6 f86c 	bl	232f8 <mgmt_evt>
		rc = handler_fn(cbuf);
   2d220:	a809      	add	r0, sp, #36	; 0x24
   2d222:	47a0      	blx	r4
		rcc = cbor_encoder_close_container(&cbuf->encoder, &payload_encoder);
   2d224:	a905      	add	r1, sp, #20
		rc = handler_fn(cbuf);
   2d226:	4604      	mov	r4, r0
		rcc = cbor_encoder_close_container(&cbuf->encoder, &payload_encoder);
   2d228:	a809      	add	r0, sp, #36	; 0x24
   2d22a:	f000 fe64 	bl	2def6 <cbor_encoder_close_container>
		if (rc == 0) {
   2d22e:	b944      	cbnz	r4, 2d242 <smp_process_request_packet+0x23e>
			rc = mgmt_err_from_cbor(rcc);
   2d230:	f7ff febe 	bl	2cfb0 <mgmt_err_from_cbor>
		*handler_found = true;
   2d234:	2701      	movs	r7, #1
			rc = mgmt_err_from_cbor(rcc);
   2d236:	4604      	mov	r4, r0
   2d238:	e7ab      	b.n	2d192 <smp_process_request_packet+0x18e>
			rc = MGMT_ERR_ECORRUPT;
   2d23a:	2409      	movs	r4, #9
   2d23c:	e6ee      	b.n	2d01c <smp_process_request_packet+0x18>
		handler_found = false;
   2d23e:	2700      	movs	r7, #0
   2d240:	e72f      	b.n	2d0a2 <smp_process_request_packet+0x9e>
		*handler_found = true;
   2d242:	2701      	movs	r7, #1
   2d244:	e72d      	b.n	2d0a2 <smp_process_request_packet+0x9e>
		handler_found = false;
   2d246:	2700      	movs	r7, #0
			rc = MGMT_ERR_ECORRUPT;
   2d248:	2409      	movs	r4, #9
		req = NULL;
   2d24a:	f04f 0900 	mov.w	r9, #0
   2d24e:	e72a      	b.n	2d0a6 <smp_process_request_packet+0xa2>
		handler_found = false;
   2d250:	4607      	mov	r7, r0
			rc = MGMT_ERR_ENOMEM;
   2d252:	2402      	movs	r4, #2
   2d254:	e7f9      	b.n	2d24a <smp_process_request_packet+0x246>

0002d256 <ull_to_s>:
#include <stdbool.h>
#include "util/mcumgr_util.h"

int
ull_to_s(unsigned long long val, int dst_max_len, char *dst)
{
   2d256:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2d25a:	4605      	mov	r5, r0
   2d25c:	460e      	mov	r6, r1
	int off;
	int len;

	/* First, calculate the length of the resulting string. */
	copy = val;
	for (len = 0; copy != 0; len++) {
   2d25e:	2400      	movs	r4, #0
	copy = val;
   2d260:	4601      	mov	r1, r0
		copy /= 10;
   2d262:	200a      	movs	r0, #10
	for (len = 0; copy != 0; len++) {
   2d264:	bb11      	cbnz	r1, 2d2ac <ull_to_s+0x56>
	}

	/* A value of 0 still requires one character ("0"). */
	if (len == 0) {
		len = 1;
   2d266:	2c00      	cmp	r4, #0
   2d268:	bf08      	it	eq
   2d26a:	2401      	moveq	r4, #1
	}

	/* Ensure the buffer can accommodate the string and terminator. */
	if (len >= dst_max_len - 1) {
   2d26c:	3a01      	subs	r2, #1
   2d26e:	42a2      	cmp	r2, r4
   2d270:	dd20      	ble.n	2d2b4 <ull_to_s+0x5e>
		return -1;
	}

	/* Encode the string from right to left. */
	off = len;
	dst[off--] = '\0';
   2d272:	5519      	strb	r1, [r3, r4]
   2d274:	191f      	adds	r7, r3, r4
	do {
		digit = val % 10;
   2d276:	4628      	mov	r0, r5
   2d278:	4631      	mov	r1, r6
   2d27a:	220a      	movs	r2, #10
   2d27c:	2300      	movs	r3, #0
   2d27e:	f7df f83f 	bl	c300 <__aeabi_uldivmod>
		dst[off--] = '0' + digit;
   2d282:	3230      	adds	r2, #48	; 0x30
   2d284:	f807 2d01 	strb.w	r2, [r7, #-1]!

		val /= 10;
   2d288:	2300      	movs	r3, #0
   2d28a:	4628      	mov	r0, r5
   2d28c:	4631      	mov	r1, r6
   2d28e:	220a      	movs	r2, #10
   2d290:	f7df f836 	bl	c300 <__aeabi_uldivmod>
   2d294:	46a9      	mov	r9, r5
   2d296:	46b0      	mov	r8, r6
	} while (val > 0);
   2d298:	f1b9 0f0a 	cmp.w	r9, #10
   2d29c:	f178 0300 	sbcs.w	r3, r8, #0
		val /= 10;
   2d2a0:	4605      	mov	r5, r0
   2d2a2:	460e      	mov	r6, r1
	} while (val > 0);
   2d2a4:	d2e7      	bcs.n	2d276 <ull_to_s+0x20>

	return len;
}
   2d2a6:	4620      	mov	r0, r4
   2d2a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (len = 0; copy != 0; len++) {
   2d2ac:	3401      	adds	r4, #1
		copy /= 10;
   2d2ae:	fbb1 f1f0 	udiv	r1, r1, r0
	for (len = 0; copy != 0; len++) {
   2d2b2:	e7d7      	b.n	2d264 <ull_to_s+0xe>
		return -1;
   2d2b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2d2b8:	e7f5      	b.n	2d2a6 <ull_to_s+0x50>

0002d2ba <mcuboot_swap_type_multi>:
	return 0;
}

int mcuboot_swap_type_multi(int image_index)
{
	return boot_swap_type_multi(image_index);
   2d2ba:	f7f8 b983 	b.w	255c4 <boot_swap_type_multi>

0002d2be <boot_request_upgrade_multi>:
#endif /* FLASH_AREA_IMAGE_SECONDARY */
	return 0;
}

int boot_request_upgrade_multi(int image_index, int permanent)
{
   2d2be:	b508      	push	{r3, lr}
	int rc;

	rc = boot_set_pending_multi(image_index, permanent);
   2d2c0:	f000 fcea 	bl	2dc98 <boot_set_pending_multi>
	if (rc) {
		return -EFAULT;
   2d2c4:	2800      	cmp	r0, #0
	}
	return 0;
}
   2d2c6:	bf18      	it	ne
   2d2c8:	f06f 000d 	mvnne.w	r0, #13
   2d2cc:	bd08      	pop	{r3, pc}

0002d2ce <boot_write_img_confirmed>:

	return flag_val == BOOT_FLAG_SET;
}

int boot_write_img_confirmed(void)
{
   2d2ce:	b508      	push	{r3, lr}
	int rc;

	rc = boot_set_confirmed();
   2d2d0:	f000 fd42 	bl	2dd58 <boot_set_confirmed>
	if (rc) {
		return -EIO;
   2d2d4:	2800      	cmp	r0, #0
	}

	return 0;
}
   2d2d6:	bf18      	it	ne
   2d2d8:	f06f 0004 	mvnne.w	r0, #4
   2d2dc:	bd08      	pop	{r3, pc}

0002d2de <boot_erase_img_bank>:

	return 0;
}

int boot_erase_img_bank(uint8_t area_id)
{
   2d2de:	b513      	push	{r0, r1, r4, lr}
	const struct flash_area *fa;
	int rc;

	rc = flash_area_open(area_id, &fa);
   2d2e0:	a901      	add	r1, sp, #4
   2d2e2:	f7e1 fba7 	bl	ea34 <flash_area_open>
	if (rc) {
   2d2e6:	4604      	mov	r4, r0
   2d2e8:	b940      	cbnz	r0, 2d2fc <boot_erase_img_bank+0x1e>
		return rc;
	}

	rc = flash_area_erase(fa, 0, fa->fa_size);
   2d2ea:	9801      	ldr	r0, [sp, #4]
   2d2ec:	4621      	mov	r1, r4
   2d2ee:	6882      	ldr	r2, [r0, #8]
   2d2f0:	f7fa fc3b 	bl	27b6a <flash_area_erase>
   2d2f4:	4604      	mov	r4, r0

	flash_area_close(fa);
   2d2f6:	9801      	ldr	r0, [sp, #4]
   2d2f8:	f7fa fbfe 	bl	27af8 <flash_area_close>

	return rc;
}
   2d2fc:	4620      	mov	r0, r4
   2d2fe:	b002      	add	sp, #8
   2d300:	bd10      	pop	{r4, pc}

0002d302 <fixed_data_unref>:
}
   2d302:	4770      	bx	lr

0002d304 <net_buf_reset>:
	buf->len  = 0U;
   2d304:	2300      	movs	r3, #0
   2d306:	8183      	strh	r3, [r0, #12]
	buf->data = buf->__buf;
   2d308:	6903      	ldr	r3, [r0, #16]
   2d30a:	6083      	str	r3, [r0, #8]
}
   2d30c:	4770      	bx	lr

0002d30e <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2d30e:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2d310:	6849      	ldr	r1, [r1, #4]
   2d312:	6809      	ldr	r1, [r1, #0]
   2d314:	f7f6 b82c 	b.w	23370 <net_buf_alloc_len>

0002d318 <net_buf_get>:
{
   2d318:	b570      	push	{r4, r5, r6, lr}
   2d31a:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   2d31c:	f7f8 fcf8 	bl	25d10 <z_impl_k_queue_get>
	if (!buf) {
   2d320:	4605      	mov	r5, r0
   2d322:	b128      	cbz	r0, 2d330 <net_buf_get+0x18>
   2d324:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2d326:	7963      	ldrb	r3, [r4, #5]
   2d328:	f013 0301 	ands.w	r3, r3, #1
   2d32c:	d102      	bne.n	2d334 <net_buf_get+0x1c>
	frag->frags = NULL;
   2d32e:	6023      	str	r3, [r4, #0]
}
   2d330:	4628      	mov	r0, r5
   2d332:	bd70      	pop	{r4, r5, r6, pc}
   2d334:	2300      	movs	r3, #0
   2d336:	2200      	movs	r2, #0
   2d338:	4630      	mov	r0, r6
   2d33a:	f7f8 fce9 	bl	25d10 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   2d33e:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   2d340:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   2d342:	f023 0301 	bic.w	r3, r3, #1
   2d346:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2d348:	4604      	mov	r4, r0
   2d34a:	e7ec      	b.n	2d326 <net_buf_get+0xe>

0002d34c <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   2d34c:	6883      	ldr	r3, [r0, #8]
   2d34e:	440b      	add	r3, r1
   2d350:	6003      	str	r3, [r0, #0]
}
   2d352:	4770      	bx	lr

0002d354 <net_buf_put>:
{
   2d354:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   2d356:	460a      	mov	r2, r1
   2d358:	6814      	ldr	r4, [r2, #0]
   2d35a:	b914      	cbnz	r4, 2d362 <net_buf_put+0xe>
}
   2d35c:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   2d35e:	f001 b9bf 	b.w	2e6e0 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   2d362:	7953      	ldrb	r3, [r2, #5]
   2d364:	f043 0301 	orr.w	r3, r3, #1
   2d368:	7153      	strb	r3, [r2, #5]
   2d36a:	4622      	mov	r2, r4
   2d36c:	e7f4      	b.n	2d358 <net_buf_put+0x4>

0002d36e <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   2d36e:	7902      	ldrb	r2, [r0, #4]
   2d370:	3201      	adds	r2, #1
   2d372:	7102      	strb	r2, [r0, #4]
	return buf;
}
   2d374:	4770      	bx	lr

0002d376 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   2d376:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   2d378:	4618      	mov	r0, r3
   2d37a:	681b      	ldr	r3, [r3, #0]
   2d37c:	2b00      	cmp	r3, #0
   2d37e:	d1fb      	bne.n	2d378 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   2d380:	4770      	bx	lr

0002d382 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   2d382:	6802      	ldr	r2, [r0, #0]
{
   2d384:	b510      	push	{r4, lr}
	if (parent->frags) {
   2d386:	b12a      	cbz	r2, 2d394 <net_buf_frag_insert+0x12>
   2d388:	460b      	mov	r3, r1
	while (buf->frags) {
   2d38a:	461c      	mov	r4, r3
   2d38c:	681b      	ldr	r3, [r3, #0]
   2d38e:	2b00      	cmp	r3, #0
   2d390:	d1fb      	bne.n	2d38a <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   2d392:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   2d394:	6001      	str	r1, [r0, #0]
}
   2d396:	bd10      	pop	{r4, pc}

0002d398 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2d398:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   2d39a:	4604      	mov	r4, r0
   2d39c:	b920      	cbnz	r0, 2d3a8 <net_buf_frag_add+0x10>
	buf->ref++;
   2d39e:	790b      	ldrb	r3, [r1, #4]
   2d3a0:	3301      	adds	r3, #1
   2d3a2:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   2d3a4:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   2d3a6:	bd10      	pop	{r4, pc}
   2d3a8:	4603      	mov	r3, r0
	while (buf->frags) {
   2d3aa:	4618      	mov	r0, r3
   2d3ac:	681b      	ldr	r3, [r3, #0]
   2d3ae:	2b00      	cmp	r3, #0
   2d3b0:	d1fb      	bne.n	2d3aa <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   2d3b2:	f7ff ffe6 	bl	2d382 <net_buf_frag_insert>
   2d3b6:	4620      	mov	r0, r4
   2d3b8:	e7f5      	b.n	2d3a6 <net_buf_frag_add+0xe>

0002d3ba <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   2d3ba:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);

	if (parent) {
   2d3bc:	b108      	cbz	r0, 2d3c2 <net_buf_frag_del+0x8>
		__ASSERT_NO_MSG(parent->frags);
		__ASSERT_NO_MSG(parent->frags == frag);
		parent->frags = frag->frags;
   2d3be:	680b      	ldr	r3, [r1, #0]
   2d3c0:	6003      	str	r3, [r0, #0]
	}

	next_frag = frag->frags;
   2d3c2:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   2d3c4:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   2d3c6:	4608      	mov	r0, r1
	frag->frags = NULL;
   2d3c8:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   2d3ca:	f7f6 f865 	bl	23498 <net_buf_unref>
#endif

	return next_frag;
}
   2d3ce:	4620      	mov	r0, r4
   2d3d0:	bd10      	pop	{r4, pc}

0002d3d2 <net_buf_simple_add>:
	return buf->data + buf->len;
   2d3d2:	8883      	ldrh	r3, [r0, #4]
   2d3d4:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   2d3d6:	4419      	add	r1, r3
   2d3d8:	8081      	strh	r1, [r0, #4]
	return tail;
}
   2d3da:	18d0      	adds	r0, r2, r3
   2d3dc:	4770      	bx	lr

0002d3de <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   2d3de:	b430      	push	{r4, r5}
   2d3e0:	8884      	ldrh	r4, [r0, #4]
   2d3e2:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   2d3e4:	18a3      	adds	r3, r4, r2
   2d3e6:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2d3e8:	1928      	adds	r0, r5, r4
}
   2d3ea:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2d3ec:	f7fb bfab 	b.w	29346 <memcpy>

0002d3f0 <net_buf_simple_add_u8>:
   2d3f0:	8883      	ldrh	r3, [r0, #4]
   2d3f2:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   2d3f4:	b510      	push	{r4, lr}
	buf->len += len;
   2d3f6:	1c5c      	adds	r4, r3, #1
   2d3f8:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   2d3fa:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   2d3fc:	18d0      	adds	r0, r2, r3
   2d3fe:	bd10      	pop	{r4, pc}

0002d400 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   2d400:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   2d402:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   2d404:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   2d406:	1a40      	subs	r0, r0, r1
	buf->len += len;
   2d408:	4411      	add	r1, r2
	buf->data -= len;
   2d40a:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2d40c:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   2d40e:	4770      	bx	lr

0002d410 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2d410:	8882      	ldrh	r2, [r0, #4]
   2d412:	1a52      	subs	r2, r2, r1
{
   2d414:	4603      	mov	r3, r0
	buf->len -= len;
   2d416:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   2d418:	6800      	ldr	r0, [r0, #0]
   2d41a:	4408      	add	r0, r1
   2d41c:	6018      	str	r0, [r3, #0]
}
   2d41e:	4770      	bx	lr

0002d420 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   2d420:	4603      	mov	r3, r0
	void *data = buf->data;
   2d422:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2d424:	889a      	ldrh	r2, [r3, #4]
   2d426:	1a52      	subs	r2, r2, r1
	buf->data += len;
   2d428:	4401      	add	r1, r0
	buf->len -= len;
   2d42a:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2d42c:	6019      	str	r1, [r3, #0]

	return data;
}
   2d42e:	4770      	bx	lr

0002d430 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2d430:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2d432:	6803      	ldr	r3, [r0, #0]
   2d434:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2d436:	2102      	movs	r1, #2
   2d438:	f7ff ffea 	bl	2d410 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2d43c:	4620      	mov	r0, r4
   2d43e:	bd10      	pop	{r4, pc}

0002d440 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2d440:	6802      	ldr	r2, [r0, #0]
   2d442:	6880      	ldr	r0, [r0, #8]
}
   2d444:	1a10      	subs	r0, r2, r0
   2d446:	4770      	bx	lr

0002d448 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2d448:	8883      	ldrh	r3, [r0, #4]
   2d44a:	88c2      	ldrh	r2, [r0, #6]
   2d44c:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2d44e:	6803      	ldr	r3, [r0, #0]
   2d450:	6880      	ldr	r0, [r0, #8]
   2d452:	1a18      	subs	r0, r3, r0
}
   2d454:	1a10      	subs	r0, r2, r0
   2d456:	4770      	bx	lr

0002d458 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2d458:	6903      	ldr	r3, [r0, #16]
   2d45a:	b2c9      	uxtb	r1, r1
   2d45c:	220c      	movs	r2, #12
   2d45e:	fb01 3302 	mla	r3, r1, r2, r3
   2d462:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   2d464:	f000 0007 	and.w	r0, r0, #7
   2d468:	4770      	bx	lr

0002d46a <set_on_state>:
	__asm__ volatile(
   2d46a:	f04f 0320 	mov.w	r3, #32
   2d46e:	f3ef 8211 	mrs	r2, BASEPRI
   2d472:	f383 8812 	msr	BASEPRI_MAX, r3
   2d476:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2d47a:	6803      	ldr	r3, [r0, #0]
   2d47c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2d480:	f043 0302 	orr.w	r3, r3, #2
   2d484:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2d486:	f382 8811 	msr	BASEPRI, r2
   2d48a:	f3bf 8f6f 	isb	sy
}
   2d48e:	4770      	bx	lr

0002d490 <stop>:
{
   2d490:	4603      	mov	r3, r0
   2d492:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   2d494:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   2d496:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2d498:	f04f 0420 	mov.w	r4, #32
   2d49c:	f3ef 8611 	mrs	r6, BASEPRI
   2d4a0:	f384 8812 	msr	BASEPRI_MAX, r4
   2d4a4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2d4a8:	250c      	movs	r5, #12
   2d4aa:	fb05 0401 	mla	r4, r5, r1, r0
   2d4ae:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2d4b0:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   2d4b4:	d001      	beq.n	2d4ba <stop+0x2a>
   2d4b6:	42a2      	cmp	r2, r4
   2d4b8:	d110      	bne.n	2d4dc <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2d4ba:	fb05 0001 	mla	r0, r5, r1, r0
   2d4be:	2201      	movs	r2, #1
   2d4c0:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   2d4c2:	2000      	movs	r0, #0
	__asm__ volatile(
   2d4c4:	f386 8811 	msr	BASEPRI, r6
   2d4c8:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   2d4cc:	b928      	cbnz	r0, 2d4da <stop+0x4a>
	get_sub_config(dev, type)->stop();
   2d4ce:	685b      	ldr	r3, [r3, #4]
   2d4d0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   2d4d4:	684b      	ldr	r3, [r1, #4]
   2d4d6:	4798      	blx	r3
	return 0;
   2d4d8:	2000      	movs	r0, #0
}
   2d4da:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   2d4dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d4e0:	e7f0      	b.n	2d4c4 <stop+0x34>

0002d4e2 <api_stop>:
	return stop(dev, subsys, CTX_API);
   2d4e2:	2280      	movs	r2, #128	; 0x80
   2d4e4:	f7ff bfd4 	b.w	2d490 <stop>

0002d4e8 <async_start>:
{
   2d4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d4ea:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   2d4ec:	6904      	ldr	r4, [r0, #16]
{
   2d4ee:	4605      	mov	r5, r0
   2d4f0:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2d4f2:	f04f 0020 	mov.w	r0, #32
   2d4f6:	f3ef 8c11 	mrs	ip, BASEPRI
   2d4fa:	f380 8812 	msr	BASEPRI_MAX, r0
   2d4fe:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2d502:	260c      	movs	r6, #12
   2d504:	fb06 4601 	mla	r6, r6, r1, r4
   2d508:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2d50a:	f000 0e07 	and.w	lr, r0, #7
   2d50e:	f1be 0f01 	cmp.w	lr, #1
   2d512:	d111      	bne.n	2d538 <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2d514:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   2d516:	2600      	movs	r6, #0
	__asm__ volatile(
   2d518:	f38c 8811 	msr	BASEPRI, ip
   2d51c:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   2d520:	b946      	cbnz	r6, 2d534 <async_start+0x4c>
	subdata->cb = cb;
   2d522:	200c      	movs	r0, #12
   2d524:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
   2d528:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   2d52c:	686b      	ldr	r3, [r5, #4]
   2d52e:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   2d532:	4798      	blx	r3
}
   2d534:	4630      	mov	r0, r6
   2d536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2d538:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   2d53c:	4287      	cmp	r7, r0
   2d53e:	bf14      	ite	ne
   2d540:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
   2d544:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   2d548:	e7e6      	b.n	2d518 <async_start+0x30>

0002d54a <api_start>:
{
   2d54a:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2d54c:	2480      	movs	r4, #128	; 0x80
   2d54e:	9400      	str	r4, [sp, #0]
   2d550:	f7ff ffca 	bl	2d4e8 <async_start>
}
   2d554:	b002      	add	sp, #8
   2d556:	bd10      	pop	{r4, pc}

0002d558 <onoff_started_callback>:
	return &data->mgr[type];
   2d558:	6900      	ldr	r0, [r0, #16]
{
   2d55a:	b410      	push	{r4}
	return &data->mgr[type];
   2d55c:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2d55e:	241c      	movs	r4, #28
   2d560:	fb03 0004 	mla	r0, r3, r4, r0
   2d564:	2100      	movs	r1, #0
}
   2d566:	bc10      	pop	{r4}
	notify(mgr, 0);
   2d568:	4710      	bx	r2

0002d56a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2d56a:	2000      	movs	r0, #0
   2d56c:	f000 ba54 	b.w	2da18 <nrfx_clock_start>

0002d570 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2d570:	2000      	movs	r0, #0
   2d572:	f7f7 bba3 	b.w	24cbc <nrfx_clock_stop>

0002d576 <blocking_start_callback>:
{
   2d576:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2d578:	f7f8 bbfe 	b.w	25d78 <z_impl_k_sem_give>

0002d57c <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d57c:	6843      	ldr	r3, [r0, #4]
   2d57e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2d580:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2d584:	600b      	str	r3, [r1, #0]
}
   2d586:	2000      	movs	r0, #0
   2d588:	4770      	bx	lr

0002d58a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d58a:	6843      	ldr	r3, [r0, #4]
   2d58c:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2d58e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   2d592:	4042      	eors	r2, r0
   2d594:	400a      	ands	r2, r1
   2d596:	4042      	eors	r2, r0
    p_reg->OUT = value;
   2d598:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   2d59c:	2000      	movs	r0, #0
   2d59e:	4770      	bx	lr

0002d5a0 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d5a0:	6843      	ldr	r3, [r0, #4]
   2d5a2:	685b      	ldr	r3, [r3, #4]
}
   2d5a4:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2d5a6:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2d5aa:	4770      	bx	lr

0002d5ac <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d5ac:	6843      	ldr	r3, [r0, #4]
   2d5ae:	685b      	ldr	r3, [r3, #4]
}
   2d5b0:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2d5b2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2d5b6:	4770      	bx	lr

0002d5b8 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d5b8:	6843      	ldr	r3, [r0, #4]
   2d5ba:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2d5bc:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   2d5c0:	404b      	eors	r3, r1
    p_reg->OUT = value;
   2d5c2:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   2d5c6:	2000      	movs	r0, #0
   2d5c8:	4770      	bx	lr

0002d5ca <gpio_nrfx_manage_callback>:
	return port->data;
   2d5ca:	6903      	ldr	r3, [r0, #16]
	return list->head;
   2d5cc:	6858      	ldr	r0, [r3, #4]
{
   2d5ce:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   2d5d0:	b158      	cbz	r0, 2d5ea <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2d5d2:	2400      	movs	r4, #0
   2d5d4:	4281      	cmp	r1, r0
   2d5d6:	d112      	bne.n	2d5fe <gpio_nrfx_manage_callback+0x34>
	return node->next;
   2d5d8:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   2d5da:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   2d5dc:	b954      	cbnz	r4, 2d5f4 <gpio_nrfx_manage_callback+0x2a>
   2d5de:	428d      	cmp	r5, r1
	list->head = node;
   2d5e0:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2d5e2:	d100      	bne.n	2d5e6 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   2d5e4:	6098      	str	r0, [r3, #8]
	parent->next = child;
   2d5e6:	2000      	movs	r0, #0
   2d5e8:	6008      	str	r0, [r1, #0]
	if (set) {
   2d5ea:	b96a      	cbnz	r2, 2d608 <gpio_nrfx_manage_callback+0x3e>
	return 0;
   2d5ec:	2000      	movs	r0, #0
}
   2d5ee:	bd30      	pop	{r4, r5, pc}
   2d5f0:	4628      	mov	r0, r5
   2d5f2:	e7ef      	b.n	2d5d4 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   2d5f4:	428d      	cmp	r5, r1
	parent->next = child;
   2d5f6:	6020      	str	r0, [r4, #0]
	list->tail = node;
   2d5f8:	bf08      	it	eq
   2d5fa:	609c      	streq	r4, [r3, #8]
}
   2d5fc:	e7f3      	b.n	2d5e6 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   2d5fe:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2d600:	4604      	mov	r4, r0
   2d602:	2d00      	cmp	r5, #0
   2d604:	d1f4      	bne.n	2d5f0 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   2d606:	b13a      	cbz	r2, 2d618 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   2d608:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   2d60a:	685a      	ldr	r2, [r3, #4]
   2d60c:	600a      	str	r2, [r1, #0]
	list->head = node;
   2d60e:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2d610:	2800      	cmp	r0, #0
   2d612:	d1eb      	bne.n	2d5ec <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   2d614:	6099      	str	r1, [r3, #8]
}
   2d616:	e7ea      	b.n	2d5ee <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   2d618:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2d61c:	e7e7      	b.n	2d5ee <gpio_nrfx_manage_callback+0x24>

0002d61e <is_regular_addr_valid>:
{
   2d61e:	b538      	push	{r3, r4, r5, lr}
   2d620:	4605      	mov	r5, r0
   2d622:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   2d624:	f000 fa7a 	bl	2db1c <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   2d628:	2d00      	cmp	r5, #0
   2d62a:	db07      	blt.n	2d63c <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   2d62c:	42a8      	cmp	r0, r5
   2d62e:	d905      	bls.n	2d63c <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   2d630:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   2d632:	4284      	cmp	r4, r0
   2d634:	bf8c      	ite	hi
   2d636:	2000      	movhi	r0, #0
   2d638:	2001      	movls	r0, #1
}
   2d63a:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   2d63c:	2000      	movs	r0, #0
   2d63e:	e7fc      	b.n	2d63a <is_regular_addr_valid+0x1c>

0002d640 <flash_nrf_read>:
{
   2d640:	b570      	push	{r4, r5, r6, lr}
   2d642:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   2d644:	4628      	mov	r0, r5
   2d646:	4619      	mov	r1, r3
{
   2d648:	4616      	mov	r6, r2
   2d64a:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   2d64c:	f7ff ffe7 	bl	2d61e <is_regular_addr_valid>
   2d650:	b138      	cbz	r0, 2d662 <flash_nrf_read+0x22>
	if (!len) {
   2d652:	b14c      	cbz	r4, 2d668 <flash_nrf_read+0x28>
	memcpy(data, (void *)addr, len);
   2d654:	4622      	mov	r2, r4
   2d656:	4629      	mov	r1, r5
   2d658:	4630      	mov	r0, r6
   2d65a:	f7fb fe74 	bl	29346 <memcpy>
	return 0;
   2d65e:	2000      	movs	r0, #0
}
   2d660:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2d662:	f06f 0015 	mvn.w	r0, #21
   2d666:	e7fb      	b.n	2d660 <flash_nrf_read+0x20>
		return 0;
   2d668:	4620      	mov	r0, r4
   2d66a:	e7f9      	b.n	2d660 <flash_nrf_read+0x20>

0002d66c <nrf_flash_sync_is_required>:
	return ticker_is_initialized(0);
   2d66c:	2000      	movs	r0, #0
   2d66e:	f7e8 bf65 	b.w	1653c <ticker_is_initialized>

0002d672 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   2d672:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2d676:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   2d678:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   2d67a:	f04f 0800 	mov.w	r8, #0
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
   2d67e:	691b      	ldr	r3, [r3, #16]
	info->start_offset = 0;
   2d680:	f8c4 8000 	str.w	r8, [r4]
{
   2d684:	460d      	mov	r5, r1
   2d686:	4616      	mov	r6, r2
	info->index = 0U;
   2d688:	f8c4 8008 	str.w	r8, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
   2d68c:	aa01      	add	r2, sp, #4
   2d68e:	4669      	mov	r1, sp
   2d690:	4798      	blx	r3

	while (layout_size--) {
   2d692:	e9dd 7c00 	ldrd	r7, ip, [sp]
   2d696:	4640      	mov	r0, r8
		info->size = layout->pages_size;
   2d698:	f107 0e04 	add.w	lr, r7, #4
	while (layout_size--) {
   2d69c:	4560      	cmp	r0, ip
   2d69e:	d104      	bne.n	2d6aa <flash_get_page_info+0x38>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   2d6a0:	f06f 0015 	mvn.w	r0, #21
}
   2d6a4:	b003      	add	sp, #12
   2d6a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
   2d6aa:	f85e 9030 	ldr.w	r9, [lr, r0, lsl #3]
			index_jmp = index - info->index;
   2d6ae:	68a1      	ldr	r1, [r4, #8]
			index_jmp = (offs - info->start_offset) / info->size;
   2d6b0:	6822      	ldr	r2, [r4, #0]
		info->size = layout->pages_size;
   2d6b2:	f8c4 9004 	str.w	r9, [r4, #4]
		if (offs == 0) {
   2d6b6:	b985      	cbnz	r5, 2d6da <flash_get_page_info+0x68>
			index_jmp = index - info->index;
   2d6b8:	1a73      	subs	r3, r6, r1
		index_jmp = MIN(index_jmp, layout->pages_count);
   2d6ba:	f857 8030 	ldr.w	r8, [r7, r0, lsl #3]
   2d6be:	4543      	cmp	r3, r8
   2d6c0:	bf28      	it	cs
   2d6c2:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
   2d6c4:	fb03 2209 	mla	r2, r3, r9, r2
		info->index += index_jmp;
   2d6c8:	4419      	add	r1, r3
		if (index_jmp < layout->pages_count) {
   2d6ca:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
   2d6cc:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
   2d6ce:	60a1      	str	r1, [r4, #8]
		if (index_jmp < layout->pages_count) {
   2d6d0:	f100 0001 	add.w	r0, r0, #1
   2d6d4:	d9e2      	bls.n	2d69c <flash_get_page_info+0x2a>
			return 0;
   2d6d6:	2000      	movs	r0, #0
   2d6d8:	e7e4      	b.n	2d6a4 <flash_get_page_info+0x32>
			index_jmp = (offs - info->start_offset) / info->size;
   2d6da:	1aab      	subs	r3, r5, r2
   2d6dc:	fbb3 f3f9 	udiv	r3, r3, r9
   2d6e0:	e7eb      	b.n	2d6ba <flash_get_page_info+0x48>

0002d6e2 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   2d6e2:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   2d6e4:	2200      	movs	r2, #0
   2d6e6:	f7ff bfc4 	b.w	2d672 <flash_get_page_info>

0002d6ea <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   2d6ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   2d6ee:	6883      	ldr	r3, [r0, #8]
{
   2d6f0:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   2d6f2:	691b      	ldr	r3, [r3, #16]
{
   2d6f4:	4688      	mov	r8, r1
   2d6f6:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   2d6f8:	a901      	add	r1, sp, #4
   2d6fa:	aa02      	add	r2, sp, #8
   2d6fc:	4798      	blx	r3
	off_t off = 0;
   2d6fe:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   2d700:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   2d702:	4625      	mov	r5, r4
   2d704:	9b02      	ldr	r3, [sp, #8]
   2d706:	42ab      	cmp	r3, r5
   2d708:	d802      	bhi.n	2d710 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   2d70a:	b006      	add	sp, #24
   2d70c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   2d710:	9f01      	ldr	r7, [sp, #4]
   2d712:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   2d716:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   2d718:	687b      	ldr	r3, [r7, #4]
   2d71a:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2d71c:	683a      	ldr	r2, [r7, #0]
   2d71e:	42b2      	cmp	r2, r6
   2d720:	eb0a 0306 	add.w	r3, sl, r6
   2d724:	d802      	bhi.n	2d72c <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   2d726:	3501      	adds	r5, #1
   2d728:	469a      	mov	sl, r3
   2d72a:	e7eb      	b.n	2d704 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   2d72c:	4649      	mov	r1, r9
   2d72e:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   2d730:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   2d732:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   2d734:	47c0      	blx	r8
   2d736:	2800      	cmp	r0, #0
   2d738:	d0e7      	beq.n	2d70a <flash_page_foreach+0x20>
			off += page_info.size;
   2d73a:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2d73c:	3601      	adds	r6, #1
			off += page_info.size;
   2d73e:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   2d740:	e7ec      	b.n	2d71c <flash_page_foreach+0x32>

0002d742 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
   2d742:	6902      	ldr	r2, [r0, #16]
{
   2d744:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   2d746:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2d74a:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2d74e:	2000      	movs	r0, #0
   2d750:	4770      	bx	lr

0002d752 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2d752:	6843      	ldr	r3, [r0, #4]
   2d754:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2d756:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2d75a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2d75e:	4770      	bx	lr

0002d760 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   2d760:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   2d762:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2d764:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d766:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2d76a:	b148      	cbz	r0, 2d780 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   2d76c:	7c52      	ldrb	r2, [r2, #17]
   2d76e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d770:	2000      	movs	r0, #0
   2d772:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2d776:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d77a:	2201      	movs	r2, #1
   2d77c:	601a      	str	r2, [r3, #0]
	return 0;
   2d77e:	4770      	bx	lr
		return -1;
   2d780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2d784:	4770      	bx	lr

0002d786 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2d786:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   2d788:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d78a:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2d78e:	b940      	cbnz	r0, 2d7a2 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2d790:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2d792:	079b      	lsls	r3, r3, #30
   2d794:	d406      	bmi.n	2d7a4 <is_tx_ready.isra.0+0x1e>
   2d796:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2d79a:	3800      	subs	r0, #0
   2d79c:	bf18      	it	ne
   2d79e:	2001      	movne	r0, #1
   2d7a0:	4770      	bx	lr
   2d7a2:	2001      	movs	r0, #1
}
   2d7a4:	4770      	bx	lr

0002d7a6 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   2d7a6:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   2d7a8:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   2d7aa:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2d7ae:	05c9      	lsls	r1, r1, #23
   2d7b0:	d518      	bpl.n	2d7e4 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d7b2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2d7b6:	b1a9      	cbz	r1, 2d7e4 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   2d7b8:	f04f 0020 	mov.w	r0, #32
   2d7bc:	f3ef 8111 	mrs	r1, BASEPRI
   2d7c0:	f380 8812 	msr	BASEPRI_MAX, r0
   2d7c4:	f3bf 8f6f 	isb	sy
   2d7c8:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2d7cc:	b130      	cbz	r0, 2d7dc <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d7ce:	2000      	movs	r0, #0
   2d7d0:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   2d7d4:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d7d8:	2001      	movs	r0, #1
   2d7da:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   2d7dc:	f381 8811 	msr	BASEPRI, r1
   2d7e0:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2d7e4:	6852      	ldr	r2, [r2, #4]
   2d7e6:	06d2      	lsls	r2, r2, #27
   2d7e8:	d515      	bpl.n	2d816 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   2d7ea:	f04f 0120 	mov.w	r1, #32
   2d7ee:	f3ef 8211 	mrs	r2, BASEPRI
   2d7f2:	f381 8812 	msr	BASEPRI_MAX, r1
   2d7f6:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d7fa:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2d7fe:	b111      	cbz	r1, 2d806 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2d800:	2100      	movs	r1, #0
   2d802:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   2d806:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   2d80a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   2d80e:	f382 8811 	msr	BASEPRI, r2
   2d812:	f3bf 8f6f 	isb	sy
}
   2d816:	4770      	bx	lr

0002d818 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   2d818:	b510      	push	{r4, lr}
   2d81a:	2200      	movs	r2, #0
   2d81c:	4604      	mov	r4, r0
   2d81e:	2101      	movs	r1, #1
   2d820:	2028      	movs	r0, #40	; 0x28
   2d822:	f7e1 fe3b 	bl	f49c <z_arm_irq_priority_set>
   2d826:	2028      	movs	r0, #40	; 0x28
   2d828:	f7e1 fe06 	bl	f438 <arch_irq_enable>
   2d82c:	4620      	mov	r0, r4
   2d82e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d832:	f7f6 bc2f 	b.w	24094 <uarte_instance_init.constprop.0>

0002d836 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   2d836:	b510      	push	{r4, lr}
   2d838:	2200      	movs	r2, #0
   2d83a:	4604      	mov	r4, r0
   2d83c:	2101      	movs	r1, #1
   2d83e:	2002      	movs	r0, #2
   2d840:	f7e1 fe2c 	bl	f49c <z_arm_irq_priority_set>
   2d844:	2002      	movs	r0, #2
   2d846:	f7e1 fdf7 	bl	f438 <arch_irq_enable>
   2d84a:	4620      	mov	r0, r4
   2d84c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d850:	f7f6 bc20 	b.w	24094 <uarte_instance_init.constprop.0>

0002d854 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2d854:	4770      	bx	lr

0002d856 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2d856:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   2d858:	6843      	ldr	r3, [r0, #4]
   2d85a:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   2d85c:	7a03      	ldrb	r3, [r0, #8]
   2d85e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   2d862:	3b01      	subs	r3, #1
   2d864:	00db      	lsls	r3, r3, #3
   2d866:	6845      	ldr	r5, [r0, #4]
   2d868:	6814      	ldr	r4, [r2, #0]
   2d86a:	441d      	add	r5, r3
   2d86c:	42ac      	cmp	r4, r5
   2d86e:	d902      	bls.n	2d876 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
   2d870:	f06f 0001 	mvn.w	r0, #1
}
   2d874:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   2d876:	7965      	ldrb	r5, [r4, #5]
   2d878:	428d      	cmp	r5, r1
   2d87a:	d002      	beq.n	2d882 <pinctrl_lookup_state+0x2c>
		(*state)++;
   2d87c:	3408      	adds	r4, #8
   2d87e:	6014      	str	r4, [r2, #0]
   2d880:	e7f1      	b.n	2d866 <pinctrl_lookup_state+0x10>
			return 0;
   2d882:	2000      	movs	r0, #0
   2d884:	e7f6      	b.n	2d874 <pinctrl_lookup_state+0x1e>

0002d886 <nrf_gpio_pin_write>:
    if (value == 0)
   2d886:	b909      	cbnz	r1, 2d88c <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
   2d888:	f7f7 b87a 	b.w	24980 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   2d88c:	f7f7 b8aa 	b.w	249e4 <nrf_gpio_pin_set>

0002d890 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   2d890:	b570      	push	{r4, r5, r6, lr}
   2d892:	4615      	mov	r5, r2
   2d894:	4604      	mov	r4, r0
   2d896:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2d89a:	42b4      	cmp	r4, r6
   2d89c:	d101      	bne.n	2d8a2 <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
   2d89e:	2000      	movs	r0, #0
}
   2d8a0:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
   2d8a2:	6823      	ldr	r3, [r4, #0]
   2d8a4:	0c1a      	lsrs	r2, r3, #16
   2d8a6:	2a22      	cmp	r2, #34	; 0x22
   2d8a8:	f200 809d 	bhi.w	2d9e6 <pinctrl_configure_pins+0x156>
   2d8ac:	e8df f002 	tbb	[pc, r2]
   2d8b0:	43241d12 	.word	0x43241d12
   2d8b4:	9b433929 	.word	0x9b433929
   2d8b8:	489b9b9b 	.word	0x489b9b9b
   2d8bc:	9b9b9b4d 	.word	0x9b9b9b4d
   2d8c0:	9b9b9b9b 	.word	0x9b9b9b9b
   2d8c4:	5e529b9b 	.word	0x5e529b9b
   2d8c8:	9b9b6863 	.word	0x9b9b6863
   2d8cc:	78736d9b 	.word	0x78736d9b
   2d8d0:	8b81      	.short	0x8b81
   2d8d2:	95          	.byte	0x95
   2d8d3:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
   2d8d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2d8d8:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   2d8dc:	6820      	ldr	r0, [r4, #0]
   2d8de:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2d8e2:	f7f7 f87f 	bl	249e4 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   2d8e6:	2201      	movs	r2, #1
   2d8e8:	e015      	b.n	2d916 <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
   2d8ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2d8ee:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   2d8f2:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   2d8f4:	2100      	movs	r1, #0
   2d8f6:	e00f      	b.n	2d918 <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
   2d8f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2d8fc:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
   2d900:	e7ec      	b.n	2d8dc <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
   2d902:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2d906:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   2d90a:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
   2d90c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2d910:	f7f7 f836 	bl	24980 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   2d914:	2200      	movs	r2, #0
   2d916:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   2d918:	6820      	ldr	r0, [r4, #0]
   2d91a:	f7f7 f841 	bl	249a0 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2d91e:	3404      	adds	r4, #4
   2d920:	e7bb      	b.n	2d89a <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
   2d922:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2d926:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   2d92a:	6820      	ldr	r0, [r4, #0]
   2d92c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2d930:	f7f7 f826 	bl	24980 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   2d934:	e7d7      	b.n	2d8e6 <pinctrl_configure_pins+0x56>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
   2d936:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2d93a:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   2d93e:	e7d8      	b.n	2d8f2 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
   2d940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2d944:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   2d948:	e7d3      	b.n	2d8f2 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
   2d94a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2d94e:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
   2d952:	e7ce      	b.n	2d8f2 <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
   2d954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2d958:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   2d95c:	6820      	ldr	r0, [r4, #0]
   2d95e:	f3c0 3140 	ubfx	r1, r0, #13, #1
   2d962:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2d966:	f7ff ff8e 	bl	2d886 <nrf_gpio_pin_write>
   2d96a:	e7bc      	b.n	2d8e6 <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
   2d96c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2d970:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   2d974:	e7f2      	b.n	2d95c <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
   2d976:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2d97a:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   2d97e:	e7ed      	b.n	2d95c <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
   2d980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2d984:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
   2d988:	e7e8      	b.n	2d95c <pinctrl_configure_pins+0xcc>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
   2d98a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2d98e:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   2d992:	2201      	movs	r2, #1
   2d994:	e7ae      	b.n	2d8f4 <pinctrl_configure_pins+0x64>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
   2d996:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2d99a:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   2d99e:	e7f8      	b.n	2d992 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
   2d9a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2d9a4:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   2d9a8:	6820      	ldr	r0, [r4, #0]
   2d9aa:	2201      	movs	r2, #1
   2d9ac:	2100      	movs	r1, #0
   2d9ae:	f7f6 fff7 	bl	249a0 <nrf_pin_configure>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
   2d9b2:	6823      	ldr	r3, [r4, #0]
   2d9b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2d9b8:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   2d9bc:	6820      	ldr	r0, [r4, #0]
   2d9be:	2201      	movs	r2, #1
   2d9c0:	2100      	movs	r1, #0
   2d9c2:	f7f6 ffed 	bl	249a0 <nrf_pin_configure>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
   2d9c6:	6823      	ldr	r3, [r4, #0]
   2d9c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2d9cc:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   2d9d0:	6820      	ldr	r0, [r4, #0]
   2d9d2:	2201      	movs	r2, #1
   2d9d4:	2100      	movs	r1, #0
   2d9d6:	f7f6 ffe3 	bl	249a0 <nrf_pin_configure>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
   2d9da:	6823      	ldr	r3, [r4, #0]
   2d9dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2d9e0:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
   2d9e4:	e7d5      	b.n	2d992 <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
   2d9e6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2d9ea:	e759      	b.n	2d8a0 <pinctrl_configure_pins+0x10>

0002d9ec <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2d9ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2d9f0:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   2d9f4:	f1a0 0308 	sub.w	r3, r0, #8
   2d9f8:	4258      	negs	r0, r3
   2d9fa:	4158      	adcs	r0, r3
   2d9fc:	4770      	bx	lr

0002d9fe <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2d9fe:	4700      	bx	r0

0002da00 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2da00:	f001 b8de 	b.w	2ebc0 <z_impl_k_busy_wait>

0002da04 <nrfx_clock_enable>:
{
   2da04:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   2da06:	2000      	movs	r0, #0
   2da08:	f7e1 fd3a 	bl	f480 <arch_irq_is_enabled>
   2da0c:	b918      	cbnz	r0, 2da16 <nrfx_clock_enable+0x12>
}
   2da0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   2da12:	f7e1 bd11 	b.w	f438 <arch_irq_enable>
   2da16:	bd08      	pop	{r3, pc}

0002da18 <nrfx_clock_start>:
    switch (domain)
   2da18:	b110      	cbz	r0, 2da20 <nrfx_clock_start+0x8>
   2da1a:	2801      	cmp	r0, #1
   2da1c:	d01d      	beq.n	2da5a <nrfx_clock_start+0x42>
   2da1e:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2da20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2da24:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2da28:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   2da2c:	03c9      	lsls	r1, r1, #15
   2da2e:	d512      	bpl.n	2da56 <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   2da30:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   2da34:	2a01      	cmp	r2, #1
   2da36:	d10e      	bne.n	2da56 <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   2da38:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2da3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2da40:	2200      	movs	r2, #0
   2da42:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   2da46:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   2da4a:	2202      	movs	r2, #2
   2da4c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2da50:	2201      	movs	r2, #1
   2da52:	609a      	str	r2, [r3, #8]
}
   2da54:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   2da56:	2200      	movs	r2, #0
   2da58:	e7ee      	b.n	2da38 <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2da5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2da5e:	2200      	movs	r2, #0
   2da60:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2da64:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   2da68:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2da6c:	6018      	str	r0, [r3, #0]
}
   2da6e:	4770      	bx	lr

0002da70 <nrf_gpio_reconfigure>:
{
   2da70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2da72:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2da74:	a801      	add	r0, sp, #4
{
   2da76:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
   2da7a:	4617      	mov	r7, r2
   2da7c:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2da7e:	f7f7 f98d 	bl	24d9c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2da82:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2da84:	2f00      	cmp	r7, #0
   2da86:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2da8a:	bf14      	ite	ne
   2da8c:	2302      	movne	r3, #2
   2da8e:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2da90:	2900      	cmp	r1, #0
   2da92:	bf18      	it	ne
   2da94:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2da98:	2d00      	cmp	r5, #0
   2da9a:	bf14      	ite	ne
   2da9c:	f04f 0c0c 	movne.w	ip, #12
   2daa0:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2daa4:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2daa6:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2daaa:	bf14      	ite	ne
   2daac:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   2dab0:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2dab4:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2dab6:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2daba:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2dabe:	bf14      	ite	ne
   2dac0:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   2dac4:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2dac8:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   2dacc:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2dad0:	b101      	cbz	r1, 2dad4 <nrf_gpio_reconfigure+0x64>
   2dad2:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2dad4:	b10f      	cbz	r7, 2dada <nrf_gpio_reconfigure+0x6a>
   2dad6:	783f      	ldrb	r7, [r7, #0]
   2dad8:	007f      	lsls	r7, r7, #1
   2dada:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2dadc:	b10d      	cbz	r5, 2dae2 <nrf_gpio_reconfigure+0x72>
   2dade:	782d      	ldrb	r5, [r5, #0]
   2dae0:	00ad      	lsls	r5, r5, #2
   2dae2:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2dae4:	b10c      	cbz	r4, 2daea <nrf_gpio_reconfigure+0x7a>
   2dae6:	7822      	ldrb	r2, [r4, #0]
   2dae8:	0214      	lsls	r4, r2, #8
   2daea:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2daec:	b10e      	cbz	r6, 2daf2 <nrf_gpio_reconfigure+0x82>
   2daee:	7836      	ldrb	r6, [r6, #0]
   2daf0:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2daf2:	432c      	orrs	r4, r5
   2daf4:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   2daf6:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   2dafa:	b003      	add	sp, #12
   2dafc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002dafe <nrf_gpio_cfg_sense_set>:
{
   2dafe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2db00:	f10d 030f 	add.w	r3, sp, #15
   2db04:	9301      	str	r3, [sp, #4]
   2db06:	2300      	movs	r3, #0
{
   2db08:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2db0c:	9300      	str	r3, [sp, #0]
   2db0e:	461a      	mov	r2, r3
   2db10:	4619      	mov	r1, r3
   2db12:	f7ff ffad 	bl	2da70 <nrf_gpio_reconfigure>
}
   2db16:	b005      	add	sp, #20
   2db18:	f85d fb04 	ldr.w	pc, [sp], #4

0002db1c <nrfx_nvmc_flash_size_get>:
   2db1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2db20:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   2db22:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   2db24:	4350      	muls	r0, r2
   2db26:	4770      	bx	lr

0002db28 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   2db28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2db2c:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   2db2e:	4770      	bx	lr

0002db30 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   2db30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2db34:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2db36:	4770      	bx	lr

0002db38 <bootutil_buffer_is_erased.part.0>:
bool bootutil_buffer_is_erased(const struct flash_area *area,
   2db38:	b538      	push	{r3, r4, r5, lr}
   2db3a:	460c      	mov	r4, r1
   2db3c:	4615      	mov	r5, r2
   2db3e:	4425      	add	r5, r4
    erased_val = flash_area_erased_val(area);
   2db40:	f7fa f836 	bl	27bb0 <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
   2db44:	4621      	mov	r1, r4
   2db46:	42a9      	cmp	r1, r5
   2db48:	d101      	bne.n	2db4e <bootutil_buffer_is_erased.part.0+0x16>
    return true;
   2db4a:	2001      	movs	r0, #1
}
   2db4c:	bd38      	pop	{r3, r4, r5, pc}
        if (u8b[i] != erased_val) {
   2db4e:	f811 3b01 	ldrb.w	r3, [r1], #1
   2db52:	4298      	cmp	r0, r3
   2db54:	d0f7      	beq.n	2db46 <bootutil_buffer_is_erased.part.0+0xe>
            return false;
   2db56:	2000      	movs	r0, #0
   2db58:	e7f8      	b.n	2db4c <bootutil_buffer_is_erased.part.0+0x14>

0002db5a <boot_swap_info_off>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   2db5a:	6880      	ldr	r0, [r0, #8]
   2db5c:	3818      	subs	r0, #24
   2db5e:	f020 0007 	bic.w	r0, r0, #7
}
   2db62:	3810      	subs	r0, #16
   2db64:	4770      	bx	lr

0002db66 <boot_magic_compatible_check>:
    switch (tbl_val) {
   2db66:	2804      	cmp	r0, #4
   2db68:	d009      	beq.n	2db7e <boot_magic_compatible_check+0x18>
   2db6a:	2805      	cmp	r0, #5
   2db6c:	d103      	bne.n	2db76 <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
   2db6e:	1e48      	subs	r0, r1, #1
   2db70:	bf18      	it	ne
   2db72:	2001      	movne	r0, #1
   2db74:	4770      	bx	lr
        return tbl_val == val;
   2db76:	1a43      	subs	r3, r0, r1
   2db78:	4258      	negs	r0, r3
   2db7a:	4158      	adcs	r0, r3
   2db7c:	4770      	bx	lr
    switch (tbl_val) {
   2db7e:	2001      	movs	r0, #1
}
   2db80:	4770      	bx	lr

0002db82 <bootutil_buffer_is_erased>:
    if (buffer == NULL || len == 0) {
   2db82:	b111      	cbz	r1, 2db8a <bootutil_buffer_is_erased+0x8>
   2db84:	b10a      	cbz	r2, 2db8a <bootutil_buffer_is_erased+0x8>
   2db86:	f7ff bfd7 	b.w	2db38 <bootutil_buffer_is_erased.part.0>
}
   2db8a:	2000      	movs	r0, #0
   2db8c:	4770      	bx	lr

0002db8e <boot_read_flag>:
{
   2db8e:	b538      	push	{r3, r4, r5, lr}
   2db90:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   2db92:	2301      	movs	r3, #1
{
   2db94:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   2db96:	4622      	mov	r2, r4
{
   2db98:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   2db9a:	f7f9 ffae 	bl	27afa <flash_area_read>
    if (rc < 0) {
   2db9e:	2800      	cmp	r0, #0
   2dba0:	db10      	blt.n	2dbc4 <boot_read_flag+0x36>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
   2dba2:	2201      	movs	r2, #1
   2dba4:	4621      	mov	r1, r4
   2dba6:	4628      	mov	r0, r5
   2dba8:	f7ff ffeb 	bl	2db82 <bootutil_buffer_is_erased>
   2dbac:	b118      	cbz	r0, 2dbb6 <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
   2dbae:	2303      	movs	r3, #3
   2dbb0:	7023      	strb	r3, [r4, #0]
    return 0;
   2dbb2:	2000      	movs	r0, #0
}
   2dbb4:	bd38      	pop	{r3, r4, r5, pc}
    if (flag != BOOT_FLAG_SET) {
   2dbb6:	7823      	ldrb	r3, [r4, #0]
        return BOOT_FLAG_BAD;
   2dbb8:	2b01      	cmp	r3, #1
   2dbba:	bf0c      	ite	eq
   2dbbc:	2301      	moveq	r3, #1
   2dbbe:	2302      	movne	r3, #2
        *flag = boot_flag_decode(*flag);
   2dbc0:	7023      	strb	r3, [r4, #0]
   2dbc2:	e7f7      	b.n	2dbb4 <boot_read_flag+0x26>
        return BOOT_EFLASH;
   2dbc4:	2001      	movs	r0, #1
   2dbc6:	e7f5      	b.n	2dbb4 <boot_read_flag+0x26>

0002dbc8 <boot_write_trailer>:
{
   2dbc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2dbcc:	461d      	mov	r5, r3
   2dbce:	4606      	mov	r6, r0
   2dbd0:	460f      	mov	r7, r1
   2dbd2:	4690      	mov	r8, r2
    align = flash_area_align(fap);
   2dbd4:	f7f9 ffe0 	bl	27b98 <flash_area_align>
    align = ALIGN_UP(inlen, align);
   2dbd8:	1e6c      	subs	r4, r5, #1
   2dbda:	4404      	add	r4, r0
   2dbdc:	4240      	negs	r0, r0
   2dbde:	4004      	ands	r4, r0
    if (align > BOOT_MAX_ALIGN) {
   2dbe0:	2c08      	cmp	r4, #8
   2dbe2:	d81a      	bhi.n	2dc1a <boot_write_trailer+0x52>
    erased_val = flash_area_erased_val(fap);
   2dbe4:	4630      	mov	r0, r6
   2dbe6:	f7f9 ffe3 	bl	27bb0 <flash_area_erased_val>
    memcpy(buf, inbuf, inlen);
   2dbea:	462a      	mov	r2, r5
    erased_val = flash_area_erased_val(fap);
   2dbec:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
   2dbee:	4641      	mov	r1, r8
   2dbf0:	4668      	mov	r0, sp
   2dbf2:	f7fb fba8 	bl	29346 <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
   2dbf6:	1b62      	subs	r2, r4, r5
   2dbf8:	4649      	mov	r1, r9
   2dbfa:	eb0d 0005 	add.w	r0, sp, r5
   2dbfe:	f7fb fbad 	bl	2935c <memset>
    rc = flash_area_write(fap, off, buf, align);
   2dc02:	4623      	mov	r3, r4
   2dc04:	466a      	mov	r2, sp
   2dc06:	4639      	mov	r1, r7
   2dc08:	4630      	mov	r0, r6
   2dc0a:	f7f9 ff92 	bl	27b32 <flash_area_write>
    if (rc != 0) {
   2dc0e:	3800      	subs	r0, #0
   2dc10:	bf18      	it	ne
   2dc12:	2001      	movne	r0, #1
}
   2dc14:	b003      	add	sp, #12
   2dc16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   2dc1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2dc1e:	e7f9      	b.n	2dc14 <boot_write_trailer+0x4c>

0002dc20 <boot_write_trailer_flag>:
{
   2dc20:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
   2dc22:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
   2dc24:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
   2dc28:	aa01      	add	r2, sp, #4
   2dc2a:	f7ff ffcd 	bl	2dbc8 <boot_write_trailer>
}
   2dc2e:	b003      	add	sp, #12
   2dc30:	f85d fb04 	ldr.w	pc, [sp], #4

0002dc34 <boot_write_image_ok>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   2dc34:	6881      	ldr	r1, [r0, #8]
   2dc36:	3918      	subs	r1, #24
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
   2dc38:	2201      	movs	r2, #1
   2dc3a:	f021 0107 	bic.w	r1, r1, #7
   2dc3e:	f7ff bfef 	b.w	2dc20 <boot_write_trailer_flag>

0002dc42 <boot_read_image_ok>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   2dc42:	6882      	ldr	r2, [r0, #8]
   2dc44:	3a18      	subs	r2, #24
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
   2dc46:	f022 0207 	bic.w	r2, r2, #7
   2dc4a:	f7ff bfa0 	b.w	2db8e <boot_read_flag>

0002dc4e <boot_read_swap_state_by_id>:
{
   2dc4e:	b513      	push	{r0, r1, r4, lr}
   2dc50:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
   2dc52:	b2c0      	uxtb	r0, r0
   2dc54:	a901      	add	r1, sp, #4
   2dc56:	f7e0 feed 	bl	ea34 <flash_area_open>
    if (rc != 0) {
   2dc5a:	b950      	cbnz	r0, 2dc72 <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
   2dc5c:	4621      	mov	r1, r4
   2dc5e:	9801      	ldr	r0, [sp, #4]
   2dc60:	f7f7 fc5c 	bl	2551c <boot_read_swap_state>
   2dc64:	4604      	mov	r4, r0
    flash_area_close(fap);
   2dc66:	9801      	ldr	r0, [sp, #4]
   2dc68:	f7f9 ff46 	bl	27af8 <flash_area_close>
}
   2dc6c:	4620      	mov	r0, r4
   2dc6e:	b002      	add	sp, #8
   2dc70:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
   2dc72:	2401      	movs	r4, #1
   2dc74:	e7fa      	b.n	2dc6c <boot_read_swap_state_by_id+0x1e>

0002dc76 <boot_write_swap_info>:
{
   2dc76:	b513      	push	{r0, r1, r4, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   2dc78:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
{
   2dc7c:	4604      	mov	r4, r0
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   2dc7e:	f88d 1007 	strb.w	r1, [sp, #7]
    off = boot_swap_info_off(fap);
   2dc82:	f7ff ff6a 	bl	2db5a <boot_swap_info_off>
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
   2dc86:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
   2dc88:	4601      	mov	r1, r0
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
   2dc8a:	f10d 0207 	add.w	r2, sp, #7
   2dc8e:	4620      	mov	r0, r4
   2dc90:	f7ff ff9a 	bl	2dbc8 <boot_write_trailer>
}
   2dc94:	b002      	add	sp, #8
   2dc96:	bd10      	pop	{r4, pc}

0002dc98 <boot_set_pending_multi>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending_multi(int image_index, int permanent)
{
   2dc98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2dc9a:	460e      	mov	r6, r1
    const struct flash_area *fap;
    struct boot_swap_state state_secondary_slot;
    uint8_t swap_type;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap);
   2dc9c:	2002      	movs	r0, #2
   2dc9e:	a901      	add	r1, sp, #4
   2dca0:	f7e0 fec8 	bl	ea34 <flash_area_open>
    if (rc != 0) {
   2dca4:	bb80      	cbnz	r0, 2dd08 <boot_set_pending_multi+0x70>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state_secondary_slot);
   2dca6:	9801      	ldr	r0, [sp, #4]
   2dca8:	a902      	add	r1, sp, #8
   2dcaa:	f7f7 fc37 	bl	2551c <boot_read_swap_state>
    if (rc != 0) {
   2dcae:	4604      	mov	r4, r0
   2dcb0:	b948      	cbnz	r0, 2dcc6 <boot_set_pending_multi+0x2e>
        goto done;
    }

    switch (state_secondary_slot.magic) {
   2dcb2:	f89d 5008 	ldrb.w	r5, [sp, #8]
    case BOOT_MAGIC_GOOD:
        /* Swap already scheduled. */
        break;

    case BOOT_MAGIC_UNSET:
        rc = boot_write_magic(fap);
   2dcb6:	9801      	ldr	r0, [sp, #4]
    switch (state_secondary_slot.magic) {
   2dcb8:	2d02      	cmp	r5, #2
   2dcba:	d01f      	beq.n	2dcfc <boot_set_pending_multi+0x64>
   2dcbc:	2d03      	cmp	r5, #3
   2dcbe:	d008      	beq.n	2dcd2 <boot_set_pending_multi+0x3a>
   2dcc0:	2d01      	cmp	r5, #1
   2dcc2:	bf18      	it	ne
   2dcc4:	2403      	movne	r4, #3
        assert(0);
        rc = BOOT_EBADIMAGE;
    }

done:
    flash_area_close(fap);
   2dcc6:	9801      	ldr	r0, [sp, #4]
   2dcc8:	f7f9 ff16 	bl	27af8 <flash_area_close>
    return rc;
}
   2dccc:	4620      	mov	r0, r4
   2dcce:	b004      	add	sp, #16
   2dcd0:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_write_magic(fap);
   2dcd2:	f7f7 fc03 	bl	254dc <boot_write_magic>
        if (rc == 0 && permanent) {
   2dcd6:	4604      	mov	r4, r0
   2dcd8:	2800      	cmp	r0, #0
   2dcda:	d1f4      	bne.n	2dcc6 <boot_set_pending_multi+0x2e>
   2dcdc:	b166      	cbz	r6, 2dcf8 <boot_set_pending_multi+0x60>
            rc = boot_write_image_ok(fap);
   2dcde:	9801      	ldr	r0, [sp, #4]
   2dce0:	f7ff ffa8 	bl	2dc34 <boot_write_image_ok>
        if (rc == 0) {
   2dce4:	4604      	mov	r4, r0
   2dce6:	2800      	cmp	r0, #0
   2dce8:	d1ed      	bne.n	2dcc6 <boot_set_pending_multi+0x2e>
            rc = boot_write_swap_info(fap, swap_type, 0);
   2dcea:	9801      	ldr	r0, [sp, #4]
   2dcec:	2200      	movs	r2, #0
   2dcee:	4629      	mov	r1, r5
   2dcf0:	f7ff ffc1 	bl	2dc76 <boot_write_swap_info>
   2dcf4:	4604      	mov	r4, r0
   2dcf6:	e7e6      	b.n	2dcc6 <boot_set_pending_multi+0x2e>
                swap_type = BOOT_SWAP_TYPE_TEST;
   2dcf8:	2502      	movs	r5, #2
   2dcfa:	e7f6      	b.n	2dcea <boot_set_pending_multi+0x52>
        flash_area_erase(fap, 0, flash_area_get_size(fap));
   2dcfc:	4621      	mov	r1, r4
   2dcfe:	6882      	ldr	r2, [r0, #8]
   2dd00:	f7f9 ff33 	bl	27b6a <flash_area_erase>
        rc = BOOT_EBADIMAGE;
   2dd04:	2403      	movs	r4, #3
        break;
   2dd06:	e7de      	b.n	2dcc6 <boot_set_pending_multi+0x2e>
        return BOOT_EFLASH;
   2dd08:	2401      	movs	r4, #1
   2dd0a:	e7df      	b.n	2dccc <boot_set_pending_multi+0x34>

0002dd0c <boot_set_confirmed_multi>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed_multi(int image_index)
{
   2dd0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap = NULL;
   2dd0e:	2300      	movs	r3, #0
    struct boot_swap_state state_primary_slot;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap);
   2dd10:	a901      	add	r1, sp, #4
   2dd12:	2001      	movs	r0, #1
    const struct flash_area *fap = NULL;
   2dd14:	9301      	str	r3, [sp, #4]
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap);
   2dd16:	f7e0 fe8d 	bl	ea34 <flash_area_open>
    if (rc != 0) {
   2dd1a:	b9d8      	cbnz	r0, 2dd54 <boot_set_confirmed_multi+0x48>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state_primary_slot);
   2dd1c:	9801      	ldr	r0, [sp, #4]
   2dd1e:	a902      	add	r1, sp, #8
   2dd20:	f7f7 fbfc 	bl	2551c <boot_read_swap_state>
    if (rc != 0) {
   2dd24:	4604      	mov	r4, r0
   2dd26:	b968      	cbnz	r0, 2dd44 <boot_set_confirmed_multi+0x38>
        goto done;
    }

    switch (state_primary_slot.magic) {
   2dd28:	f89d 3008 	ldrb.w	r3, [sp, #8]
   2dd2c:	2b02      	cmp	r3, #2
   2dd2e:	d00f      	beq.n	2dd50 <boot_set_confirmed_multi+0x44>
   2dd30:	2b03      	cmp	r3, #3
   2dd32:	d007      	beq.n	2dd44 <boot_set_confirmed_multi+0x38>
    /* Intentionally do not check copy_done flag
     * so can confirm a padded image which was programed using a programing
     * interface.
     */

    if (state_primary_slot.image_ok != BOOT_FLAG_UNSET) {
   2dd34:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2dd38:	2b03      	cmp	r3, #3
   2dd3a:	d103      	bne.n	2dd44 <boot_set_confirmed_multi+0x38>
        /* Already confirmed. */
        goto done;
    }

    rc = boot_write_image_ok(fap);
   2dd3c:	9801      	ldr	r0, [sp, #4]
   2dd3e:	f7ff ff79 	bl	2dc34 <boot_write_image_ok>
   2dd42:	4604      	mov	r4, r0

done:
    flash_area_close(fap);
   2dd44:	9801      	ldr	r0, [sp, #4]
   2dd46:	f7f9 fed7 	bl	27af8 <flash_area_close>
    return rc;
}
   2dd4a:	4620      	mov	r0, r4
   2dd4c:	b004      	add	sp, #16
   2dd4e:	bd10      	pop	{r4, pc}
    switch (state_primary_slot.magic) {
   2dd50:	2404      	movs	r4, #4
   2dd52:	e7f7      	b.n	2dd44 <boot_set_confirmed_multi+0x38>
        return BOOT_EFLASH;
   2dd54:	2401      	movs	r4, #1
   2dd56:	e7f8      	b.n	2dd4a <boot_set_confirmed_multi+0x3e>

0002dd58 <boot_set_confirmed>:
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed(void)
{
    return boot_set_confirmed_multi(0);
   2dd58:	2000      	movs	r0, #0
   2dd5a:	f7ff bfd7 	b.w	2dd0c <boot_set_confirmed_multi>

0002dd5e <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2dd5e:	f7f7 bc7f 	b.w	25660 <_DoInit>

0002dd62 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   2dd62:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   2dd64:	f7ff fffb 	bl	2dd5e <SEGGER_RTT_Init>

	return 0;
}
   2dd68:	2000      	movs	r0, #0
   2dd6a:	bd08      	pop	{r3, pc}

0002dd6c <append_to_buffer.isra.0>:
    memcpy(where, &v, sizeof(v));
}

static inline CborError append_to_buffer(CborEncoder *encoder, const void *data, size_t len)
{
    return encoder->writer->write(encoder->writer, data, len);
   2dd6c:	6803      	ldr	r3, [r0, #0]
   2dd6e:	4718      	bx	r3

0002dd70 <encode_number_no_update>:
{
    return append_to_buffer(encoder, &byte, 1);
}

static inline CborError encode_number_no_update(CborEncoder *encoder, uint64_t ui, uint8_t shiftedMajorType)
{
   2dd70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2dd74:	461d      	mov	r5, r3
   2dd76:	b086      	sub	sp, #24
    v = cbor_htonll(v);
   2dd78:	ba13      	rev	r3, r2
{
   2dd7a:	4617      	mov	r7, r2
    v = cbor_htonll(v);
   2dd7c:	ba2a      	rev	r2, r5
   2dd7e:	e9cd 2300 	strd	r2, r3, [sp]
    memcpy(where, &v, sizeof(v));
   2dd82:	4669      	mov	r1, sp
{
   2dd84:	4606      	mov	r6, r0
    memcpy(where, &v, sizeof(v));
   2dd86:	2208      	movs	r2, #8
   2dd88:	a804      	add	r0, sp, #16
{
   2dd8a:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
    memcpy(where, &v, sizeof(v));
   2dd8e:	f7fb fada 	bl	29346 <memcpy>
    uint64_t buf[2];
    uint8_t *const bufend = (uint8_t *)buf + sizeof(buf);
    uint8_t *bufstart = bufend - 1;
    put64(buf + 1, ui);     /* we probably have a bunch of zeros in the beginning */

    if (ui < Value8Bit) {
   2dd92:	2f18      	cmp	r7, #24
   2dd94:	f175 0300 	sbcs.w	r3, r5, #0
   2dd98:	f10d 0117 	add.w	r1, sp, #23
   2dd9c:	d20c      	bcs.n	2ddb8 <encode_number_no_update+0x48>
        *bufstart += shiftedMajorType;
   2dd9e:	f89d 4017 	ldrb.w	r4, [sp, #23]
   2dda2:	44a0      	add	r8, r4
   2dda4:	f88d 8017 	strb.w	r8, [sp, #23]
            ++more;
        bufstart -= (size_t)1 << more;
        *bufstart = shiftedMajorType + Value8Bit + more;
    }

    return append_to_buffer(encoder, bufstart, bufend - bufstart);
   2dda8:	ab06      	add	r3, sp, #24
   2ddaa:	6830      	ldr	r0, [r6, #0]
   2ddac:	1a5a      	subs	r2, r3, r1
   2ddae:	f7ff ffdd 	bl	2dd6c <append_to_buffer.isra.0>
}
   2ddb2:	b006      	add	sp, #24
   2ddb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (ui > 0xffU)
   2ddb8:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   2ddbc:	f175 0300 	sbcs.w	r3, r5, #0
            ++more;
   2ddc0:	bf2c      	ite	cs
   2ddc2:	2401      	movcs	r4, #1
   2ddc4:	2400      	movcc	r4, #0
        if (ui > 0xffffU)
   2ddc6:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   2ddca:	f175 0300 	sbcs.w	r3, r5, #0
            ++more;
   2ddce:	bf28      	it	cs
   2ddd0:	3401      	addcs	r4, #1
        if (ui > 0xffffffffU)
   2ddd2:	b10d      	cbz	r5, 2ddd8 <encode_number_no_update+0x68>
            ++more;
   2ddd4:	3401      	adds	r4, #1
   2ddd6:	b2e4      	uxtb	r4, r4
        bufstart -= (size_t)1 << more;
   2ddd8:	2301      	movs	r3, #1
   2ddda:	40a3      	lsls	r3, r4
   2dddc:	1ac9      	subs	r1, r1, r3
        *bufstart = shiftedMajorType + Value8Bit + more;
   2ddde:	f108 0818 	add.w	r8, r8, #24
   2dde2:	4444      	add	r4, r8
   2dde4:	700c      	strb	r4, [r1, #0]
   2dde6:	e7df      	b.n	2dda8 <encode_number_no_update+0x38>

0002dde8 <encode_number>:

static inline CborError encode_number(CborEncoder *encoder, uint64_t ui, uint8_t shiftedMajorType)
{
   2dde8:	b430      	push	{r4, r5}
    ++encoder->added;
   2ddea:	6884      	ldr	r4, [r0, #8]
{
   2ddec:	f89d 5008 	ldrb.w	r5, [sp, #8]
    ++encoder->added;
   2ddf0:	3401      	adds	r4, #1
   2ddf2:	6084      	str	r4, [r0, #8]
    return encode_number_no_update(encoder, ui, shiftedMajorType);
   2ddf4:	9502      	str	r5, [sp, #8]
}
   2ddf6:	bc30      	pop	{r4, r5}
    return encode_number_no_update(encoder, ui, shiftedMajorType);
   2ddf8:	f7ff bfba 	b.w	2dd70 <encode_number_no_update>

0002ddfc <create_container>:

#ifdef __GNUC__
__attribute__((noinline))
#endif
static CborError create_container(CborEncoder *encoder, CborEncoder *container, size_t length, uint8_t shiftedMajorType)
{
   2ddfc:	b530      	push	{r4, r5, lr}
   2ddfe:	4605      	mov	r5, r0
   2de00:	461c      	mov	r4, r3
    CborError err;
    container->writer = encoder->writer;
    ++encoder->added;
   2de02:	68ab      	ldr	r3, [r5, #8]
    container->writer = encoder->writer;
   2de04:	6800      	ldr	r0, [r0, #0]
   2de06:	6008      	str	r0, [r1, #0]
    ++encoder->added;
   2de08:	3301      	adds	r3, #1
   2de0a:	60ab      	str	r3, [r5, #8]

    cbor_static_assert(((MapType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == CborIteratorFlag_ContainerIsMap);
    cbor_static_assert(((ArrayType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == 0);
    container->flags = shiftedMajorType & CborIteratorFlag_ContainerIsMap;

    if (length == CborIndefiniteLength) {
   2de0c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    container->added = 0;
   2de10:	f04f 0300 	mov.w	r3, #0
   2de14:	f004 0520 	and.w	r5, r4, #32
{
   2de18:	b085      	sub	sp, #20
    container->added = 0;
   2de1a:	608b      	str	r3, [r1, #8]
    container->flags = shiftedMajorType & CborIteratorFlag_ContainerIsMap;
   2de1c:	60cd      	str	r5, [r1, #12]
    if (length == CborIndefiniteLength) {
   2de1e:	d10d      	bne.n	2de3c <create_container+0x40>
        container->flags |= CborIteratorFlag_UnknownLength;
   2de20:	f045 0504 	orr.w	r5, r5, #4
   2de24:	60cd      	str	r5, [r1, #12]
        err = append_byte_to_buffer(container, shiftedMajorType + IndefiniteLength);
   2de26:	341f      	adds	r4, #31
   2de28:	2201      	movs	r2, #1
   2de2a:	f10d 010f 	add.w	r1, sp, #15
   2de2e:	f88d 400f 	strb.w	r4, [sp, #15]
    return append_to_buffer(encoder, &byte, 1);
   2de32:	f7ff ff9b 	bl	2dd6c <append_to_buffer.isra.0>
    }
    if (err && !isOomError(err))
        return err;

    return CborNoError;
}
   2de36:	2000      	movs	r0, #0
   2de38:	b005      	add	sp, #20
   2de3a:	bd30      	pop	{r4, r5, pc}
        err = encode_number_no_update(container, length, shiftedMajorType);
   2de3c:	9400      	str	r4, [sp, #0]
   2de3e:	4608      	mov	r0, r1
   2de40:	f7ff ff96 	bl	2dd70 <encode_number_no_update>
   2de44:	e7f7      	b.n	2de36 <create_container+0x3a>

0002de46 <cbor_encoder_init>:
    encoder->added = 0;
   2de46:	2300      	movs	r3, #0
    encoder->flags = flags;
   2de48:	e9c0 3202 	strd	r3, r2, [r0, #8]
    encoder->writer = writer;
   2de4c:	6001      	str	r1, [r0, #0]
}
   2de4e:	4770      	bx	lr

0002de50 <cbor_encode_int>:
{
   2de50:	b507      	push	{r0, r1, r2, lr}
    uint64_t ui = value >> 63;              /* extend sign to whole length */
   2de52:	17d9      	asrs	r1, r3, #31
    return encode_number(encoder, ui, majorType);
   2de54:	f001 0120 	and.w	r1, r1, #32
   2de58:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
   2de5c:	9100      	str	r1, [sp, #0]
   2de5e:	ea83 73e3 	eor.w	r3, r3, r3, asr #31
   2de62:	f7ff ffc1 	bl	2dde8 <encode_number>
}
   2de66:	b003      	add	sp, #12
   2de68:	f85d fb04 	ldr.w	pc, [sp], #4

0002de6c <cbor_encode_simple_value>:
    if (value >= HalfPrecisionFloat && value <= Break)
   2de6c:	f1a1 0319 	sub.w	r3, r1, #25
   2de70:	2b06      	cmp	r3, #6
{
   2de72:	b507      	push	{r0, r1, r2, lr}
   2de74:	460a      	mov	r2, r1
    if (value >= HalfPrecisionFloat && value <= Break)
   2de76:	d907      	bls.n	2de88 <cbor_encode_simple_value+0x1c>
    return encode_number(encoder, value, SimpleTypesType << MajorTypeShift);
   2de78:	23e0      	movs	r3, #224	; 0xe0
   2de7a:	9300      	str	r3, [sp, #0]
   2de7c:	2300      	movs	r3, #0
   2de7e:	f7ff ffb3 	bl	2dde8 <encode_number>
}
   2de82:	b003      	add	sp, #12
   2de84:	f85d fb04 	ldr.w	pc, [sp], #4
        return CborErrorIllegalSimpleType;
   2de88:	f44f 7083 	mov.w	r0, #262	; 0x106
   2de8c:	e7f9      	b.n	2de82 <cbor_encode_simple_value+0x16>

0002de8e <cbor_encode_byte_string>:
{
   2de8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    CborError err = encode_number(encoder, length, shiftedMajorType);
   2de90:	2340      	movs	r3, #64	; 0x40
{
   2de92:	4604      	mov	r4, r0
    CborError err = encode_number(encoder, length, shiftedMajorType);
   2de94:	9300      	str	r3, [sp, #0]
   2de96:	2300      	movs	r3, #0
{
   2de98:	460d      	mov	r5, r1
   2de9a:	4616      	mov	r6, r2
    CborError err = encode_number(encoder, length, shiftedMajorType);
   2de9c:	f7ff ffa4 	bl	2dde8 <encode_number>
    return append_to_buffer(encoder, string, length);
   2dea0:	6820      	ldr	r0, [r4, #0]
   2dea2:	4632      	mov	r2, r6
   2dea4:	4629      	mov	r1, r5
}
   2dea6:	b002      	add	sp, #8
   2dea8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return append_to_buffer(encoder, string, length);
   2deac:	f7ff bf5e 	b.w	2dd6c <append_to_buffer.isra.0>

0002deb0 <cbor_encode_text_string>:
{
   2deb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    CborError err = encode_number(encoder, length, shiftedMajorType);
   2deb2:	2360      	movs	r3, #96	; 0x60
{
   2deb4:	4604      	mov	r4, r0
    CborError err = encode_number(encoder, length, shiftedMajorType);
   2deb6:	9300      	str	r3, [sp, #0]
   2deb8:	2300      	movs	r3, #0
{
   2deba:	460d      	mov	r5, r1
   2debc:	4616      	mov	r6, r2
    CborError err = encode_number(encoder, length, shiftedMajorType);
   2debe:	f7ff ff93 	bl	2dde8 <encode_number>
    return append_to_buffer(encoder, string, length);
   2dec2:	6820      	ldr	r0, [r4, #0]
   2dec4:	4632      	mov	r2, r6
   2dec6:	4629      	mov	r1, r5
}
   2dec8:	b002      	add	sp, #8
   2deca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return append_to_buffer(encoder, string, length);
   2dece:	f7ff bf4d 	b.w	2dd6c <append_to_buffer.isra.0>

0002ded2 <cbor_encoder_create_array>:
 *
 * \sa cbor_encoder_create_map
 */
CborError cbor_encoder_create_array(CborEncoder *encoder, CborEncoder *arrayEncoder, size_t length)
{
    return create_container(encoder, arrayEncoder, length, ArrayType << MajorTypeShift);
   2ded2:	2380      	movs	r3, #128	; 0x80
   2ded4:	f7ff bf92 	b.w	2ddfc <create_container>

0002ded8 <cbor_encoder_create_map>:
 * value, this function returns error CborErrorDataTooLarge.
 *
 * \sa cbor_encoder_create_array
 */
CborError cbor_encoder_create_map(CborEncoder *encoder, CborEncoder *mapEncoder, size_t length)
{
   2ded8:	b410      	push	{r4}
    if (length != CborIndefiniteLength && length > SIZE_MAX / 2)
   2deda:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   2dede:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   2dee2:	42a3      	cmp	r3, r4
   2dee4:	d303      	bcc.n	2deee <cbor_encoder_create_map+0x16>
        return CborErrorDataTooLarge;
    return create_container(encoder, mapEncoder, length, MapType << MajorTypeShift);
}
   2dee6:	bc10      	pop	{r4}
    return create_container(encoder, mapEncoder, length, MapType << MajorTypeShift);
   2dee8:	23a0      	movs	r3, #160	; 0xa0
   2deea:	f7ff bf87 	b.w	2ddfc <create_container>
}
   2deee:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2def2:	bc10      	pop	{r4}
   2def4:	4770      	bx	lr

0002def6 <cbor_encoder_close_container>:
 * cbor_encoder_close_container_checked() instead.
 *
 * \sa cbor_encoder_create_array(), cbor_encoder_create_map()
 */
CborError cbor_encoder_close_container(CborEncoder *encoder, const CborEncoder *containerEncoder)
{
   2def6:	4603      	mov	r3, r0
   2def8:	b507      	push	{r0, r1, r2, lr}
    encoder->writer = containerEncoder->writer;
   2defa:	6808      	ldr	r0, [r1, #0]
   2defc:	6018      	str	r0, [r3, #0]

    if (containerEncoder->flags & CborIteratorFlag_UnknownLength)
   2defe:	68cb      	ldr	r3, [r1, #12]
   2df00:	f013 0304 	ands.w	r3, r3, #4
   2df04:	d00a      	beq.n	2df1c <cbor_encoder_close_container+0x26>
        return append_byte_to_buffer(encoder, BreakByte);
   2df06:	23ff      	movs	r3, #255	; 0xff
   2df08:	2201      	movs	r2, #1
   2df0a:	f10d 0107 	add.w	r1, sp, #7
   2df0e:	f88d 3007 	strb.w	r3, [sp, #7]
    return append_to_buffer(encoder, &byte, 1);
   2df12:	f7ff ff2b 	bl	2dd6c <append_to_buffer.isra.0>
    return CborNoError;
}
   2df16:	b003      	add	sp, #12
   2df18:	f85d fb04 	ldr.w	pc, [sp], #4
    return CborNoError;
   2df1c:	4618      	mov	r0, r3
   2df1e:	e7fa      	b.n	2df16 <cbor_encoder_close_container+0x20>

0002df20 <iterate_noop>:
}
   2df20:	2001      	movs	r0, #1
   2df22:	4770      	bx	lr

0002df24 <preparse_value>:
{
   2df24:	b570      	push	{r4, r5, r6, lr}
    it->type = CborInvalidType;
   2df26:	23ff      	movs	r3, #255	; 0xff
    const CborParser *parser = it->parser;
   2df28:	6805      	ldr	r5, [r0, #0]
    it->type = CborInvalidType;
   2df2a:	7383      	strb	r3, [r0, #14]
    if (it->offset == parser->end)
   2df2c:	6841      	ldr	r1, [r0, #4]
   2df2e:	686b      	ldr	r3, [r5, #4]
   2df30:	4299      	cmp	r1, r3
{
   2df32:	4604      	mov	r4, r0
    if (it->offset == parser->end)
   2df34:	d102      	bne.n	2df3c <preparse_value+0x18>
        return CborErrorUnexpectedEOF;
   2df36:	f240 1001 	movw	r0, #257	; 0x101
}
   2df3a:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t descriptor = parser->d->get8(parser->d, it->offset);
   2df3c:	6828      	ldr	r0, [r5, #0]
   2df3e:	6803      	ldr	r3, [r0, #0]
   2df40:	4798      	blx	r3
    it->extra = (descriptor &= SmallValueMask);
   2df42:	f000 031f 	and.w	r3, r0, #31
    uint8_t type = descriptor & MajorTypeMask;
   2df46:	f000 06e0 	and.w	r6, r0, #224	; 0xe0
    it->flags = 0;
   2df4a:	2200      	movs	r2, #0
    if (descriptor > Value64Bit) {
   2df4c:	2b1b      	cmp	r3, #27
    it->type = type;
   2df4e:	73a6      	strb	r6, [r4, #14]
    it->flags = 0;
   2df50:	73e2      	strb	r2, [r4, #15]
    it->extra = (descriptor &= SmallValueMask);
   2df52:	81a3      	strh	r3, [r4, #12]
    if (descriptor > Value64Bit) {
   2df54:	d919      	bls.n	2df8a <preparse_value+0x66>
        if (unlikely(descriptor != IndefiniteLength))
   2df56:	2b1f      	cmp	r3, #31
   2df58:	d007      	beq.n	2df6a <preparse_value+0x46>
            return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
   2df5a:	f240 1005 	movw	r0, #261	; 0x105
   2df5e:	f240 1303 	movw	r3, #259	; 0x103
   2df62:	2ee0      	cmp	r6, #224	; 0xe0
   2df64:	bf08      	it	eq
   2df66:	4618      	moveq	r0, r3
   2df68:	e7e7      	b.n	2df3a <preparse_value+0x16>
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   2df6a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   2df6e:	2840      	cmp	r0, #64	; 0x40
   2df70:	d001      	beq.n	2df76 <preparse_value+0x52>
   2df72:	2880      	cmp	r0, #128	; 0x80
   2df74:	d102      	bne.n	2df7c <preparse_value+0x58>
            it->flags |= CborIteratorFlag_UnknownLength;
   2df76:	2304      	movs	r3, #4
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
   2df78:	73e3      	strb	r3, [r4, #15]
   2df7a:	e039      	b.n	2dff0 <preparse_value+0xcc>
        return type == CborSimpleType ? CborErrorUnexpectedBreak : CborErrorIllegalNumber;
   2df7c:	2ee0      	cmp	r6, #224	; 0xe0
   2df7e:	f240 1005 	movw	r0, #261	; 0x105
   2df82:	bf08      	it	eq
   2df84:	f44f 7081 	moveq.w	r0, #258	; 0x102
   2df88:	e7d7      	b.n	2df3a <preparse_value+0x16>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   2df8a:	2b17      	cmp	r3, #23
   2df8c:	bf82      	ittt	hi
   2df8e:	f1a3 0118 	subhi.w	r1, r3, #24
   2df92:	2201      	movhi	r2, #1
   2df94:	408a      	lslhi	r2, r1
    if (bytesNeeded + 1 > (size_t)(parser->end - it->offset))
   2df96:	6868      	ldr	r0, [r5, #4]
   2df98:	6861      	ldr	r1, [r4, #4]
   2df9a:	3201      	adds	r2, #1
   2df9c:	1a40      	subs	r0, r0, r1
   2df9e:	4282      	cmp	r2, r0
   2dfa0:	d8c9      	bhi.n	2df36 <preparse_value+0x12>
    if (majortype == NegativeIntegerType) {
   2dfa2:	2e20      	cmp	r6, #32
    uint8_t majortype = type >> MajorTypeShift;
   2dfa4:	ea4f 1256 	mov.w	r2, r6, lsr #5
    if (majortype == NegativeIntegerType) {
   2dfa8:	d10c      	bne.n	2dfc4 <preparse_value+0xa0>
        it->type = CborIntegerType;
   2dfaa:	f44f 7200 	mov.w	r2, #512	; 0x200
   2dfae:	81e2      	strh	r2, [r4, #14]
    if (descriptor < Value8Bit)
   2dfb0:	2b17      	cmp	r3, #23
   2dfb2:	d91d      	bls.n	2dff0 <preparse_value+0xcc>
    if (descriptor == Value8Bit)
   2dfb4:	2b18      	cmp	r3, #24
   2dfb6:	d12a      	bne.n	2e00e <preparse_value+0xea>
        it->extra = parser->d->get8(parser->d, it->offset + 1);
   2dfb8:	6828      	ldr	r0, [r5, #0]
   2dfba:	6803      	ldr	r3, [r0, #0]
        it->extra = parser->d->get16(parser->d, it->offset + 1);
   2dfbc:	3101      	adds	r1, #1
   2dfbe:	4798      	blx	r3
   2dfc0:	81a0      	strh	r0, [r4, #12]
   2dfc2:	e015      	b.n	2dff0 <preparse_value+0xcc>
    } else if (majortype == SimpleTypesType) {
   2dfc4:	2a07      	cmp	r2, #7
   2dfc6:	d1f3      	bne.n	2dfb0 <preparse_value+0x8c>
        switch (descriptor) {
   2dfc8:	3b14      	subs	r3, #20
   2dfca:	2b07      	cmp	r3, #7
   2dfcc:	d810      	bhi.n	2dff0 <preparse_value+0xcc>
   2dfce:	e8df f003 	tbb	[pc, r3]
   2dfd2:	0b04      	.short	0x0b04
   2dfd4:	0b110b0b 	.word	0x0b110b0b
   2dfd8:	0909      	.short	0x0909
            it->extra = false;
   2dfda:	2000      	movs	r0, #0
            it->type = CborBooleanType;
   2dfdc:	23f5      	movs	r3, #245	; 0xf5
            it->extra = false;
   2dfde:	81a0      	strh	r0, [r4, #12]
            it->type = CborBooleanType;
   2dfe0:	73a3      	strb	r3, [r4, #14]
            break;
   2dfe2:	e7aa      	b.n	2df3a <preparse_value+0x16>
            it->flags |= CborIteratorFlag_IntegerValueTooLarge;
   2dfe4:	2301      	movs	r3, #1
   2dfe6:	73e3      	strb	r3, [r4, #15]
            it->type = parser->d->get8(parser->d, it->offset);
   2dfe8:	6828      	ldr	r0, [r5, #0]
   2dfea:	6803      	ldr	r3, [r0, #0]
   2dfec:	4798      	blx	r3
   2dfee:	73a0      	strb	r0, [r4, #14]
        switch (descriptor) {
   2dff0:	2000      	movs	r0, #0
   2dff2:	e7a2      	b.n	2df3a <preparse_value+0x16>
            it->extra = parser->d->get8(parser->d, it->offset + 1);
   2dff4:	6828      	ldr	r0, [r5, #0]
   2dff6:	3101      	adds	r1, #1
   2dff8:	6803      	ldr	r3, [r0, #0]
   2dffa:	4798      	blx	r3
   2dffc:	b280      	uxth	r0, r0
            if (unlikely(it->extra < 32)) {
   2dffe:	281f      	cmp	r0, #31
            it->extra = parser->d->get8(parser->d, it->offset + 1);
   2e000:	81a0      	strh	r0, [r4, #12]
            if (unlikely(it->extra < 32)) {
   2e002:	d8f5      	bhi.n	2dff0 <preparse_value+0xcc>
                it->type = CborInvalidType;
   2e004:	23ff      	movs	r3, #255	; 0xff
   2e006:	73a3      	strb	r3, [r4, #14]
                return CborErrorIllegalSimpleType;
   2e008:	f44f 7083 	mov.w	r0, #262	; 0x106
   2e00c:	e795      	b.n	2df3a <preparse_value+0x16>
    else if (descriptor == Value16Bit)
   2e00e:	2b19      	cmp	r3, #25
   2e010:	d102      	bne.n	2e018 <preparse_value+0xf4>
        it->extra = parser->d->get16(parser->d, it->offset + 1);
   2e012:	6828      	ldr	r0, [r5, #0]
   2e014:	6843      	ldr	r3, [r0, #4]
   2e016:	e7d1      	b.n	2dfbc <preparse_value+0x98>
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
   2e018:	7be3      	ldrb	r3, [r4, #15]
   2e01a:	f043 0301 	orr.w	r3, r3, #1
   2e01e:	e7ab      	b.n	2df78 <preparse_value+0x54>

0002e020 <preparse_next_value>:
{
   2e020:	b538      	push	{r3, r4, r5, lr}
    if (it->remaining != UINT32_MAX) {
   2e022:	6885      	ldr	r5, [r0, #8]
   2e024:	1c6b      	adds	r3, r5, #1
{
   2e026:	4604      	mov	r4, r0
    if (it->remaining != UINT32_MAX) {
   2e028:	d009      	beq.n	2e03e <preparse_next_value+0x1e>
        if (it->type != CborTagType && !--it->remaining) {
   2e02a:	7b83      	ldrb	r3, [r0, #14]
   2e02c:	2bc0      	cmp	r3, #192	; 0xc0
   2e02e:	d017      	beq.n	2e060 <preparse_next_value+0x40>
   2e030:	3d01      	subs	r5, #1
   2e032:	6085      	str	r5, [r0, #8]
   2e034:	b9a5      	cbnz	r5, 2e060 <preparse_next_value+0x40>
            it->type = CborInvalidType;
   2e036:	23ff      	movs	r3, #255	; 0xff
   2e038:	7383      	strb	r3, [r0, #14]
}
   2e03a:	2000      	movs	r0, #0
   2e03c:	bd38      	pop	{r3, r4, r5, pc}
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   2e03e:	e9d0 3100 	ldrd	r3, r1, [r0]
   2e042:	685a      	ldr	r2, [r3, #4]
   2e044:	4291      	cmp	r1, r2
   2e046:	d00b      	beq.n	2e060 <preparse_next_value+0x40>
        it->parser->d->get8(it->parser->d, it->offset) == (uint8_t)BreakByte) {
   2e048:	6818      	ldr	r0, [r3, #0]
   2e04a:	6803      	ldr	r3, [r0, #0]
   2e04c:	4798      	blx	r3
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   2e04e:	28ff      	cmp	r0, #255	; 0xff
   2e050:	d106      	bne.n	2e060 <preparse_next_value+0x40>
        ++it->offset;
   2e052:	6863      	ldr	r3, [r4, #4]
        it->type = CborInvalidType;
   2e054:	73a5      	strb	r5, [r4, #14]
        ++it->offset;
   2e056:	3301      	adds	r3, #1
   2e058:	6063      	str	r3, [r4, #4]
        it->remaining = 0;
   2e05a:	2300      	movs	r3, #0
   2e05c:	60a3      	str	r3, [r4, #8]
        return CborNoError;
   2e05e:	e7ec      	b.n	2e03a <preparse_next_value+0x1a>
    return preparse_value(it);
   2e060:	4620      	mov	r0, r4
}
   2e062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return preparse_value(it);
   2e066:	f7ff bf5d 	b.w	2df24 <preparse_value>

0002e06a <extract_number>:
    memcpy(&result, ptr, sizeof(result));
    return cbor_ntohll(result);
}

static inline CborError extract_number(const CborParser *p, int *offset, uint64_t *len)
{
   2e06a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2e06e:	4607      	mov	r7, r0
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   2e070:	6800      	ldr	r0, [r0, #0]
{
   2e072:	460d      	mov	r5, r1
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   2e074:	6803      	ldr	r3, [r0, #0]
   2e076:	6809      	ldr	r1, [r1, #0]
{
   2e078:	4614      	mov	r4, r2
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   2e07a:	4798      	blx	r3
    ++*offset;
   2e07c:	6829      	ldr	r1, [r5, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   2e07e:	f000 031f 	and.w	r3, r0, #31
    ++*offset;
   2e082:	3101      	adds	r1, #1
    *len = 1;
   2e084:	f04f 0801 	mov.w	r8, #1
   2e088:	f04f 0900 	mov.w	r9, #0
    if (additional_information < Value8Bit) {
   2e08c:	2b17      	cmp	r3, #23
    ++*offset;
   2e08e:	6029      	str	r1, [r5, #0]
    *len = 1;
   2e090:	e9c4 8900 	strd	r8, r9, [r4]
    if (additional_information < Value8Bit) {
   2e094:	d804      	bhi.n	2e0a0 <extract_number+0x36>
        *len = additional_information;
   2e096:	2000      	movs	r0, #0
   2e098:	e9c4 3000 	strd	r3, r0, [r4]
    } else {
        *len =  p->d->get64(p->d, *offset);
    }
    *offset += bytesNeeded;
    return CborNoError;
}
   2e09c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (unlikely(additional_information > Value64Bit))
   2e0a0:	2b1b      	cmp	r3, #27
   2e0a2:	d820      	bhi.n	2e0e6 <extract_number+0x7c>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   2e0a4:	3b18      	subs	r3, #24
   2e0a6:	2601      	movs	r6, #1
   2e0a8:	409e      	lsls	r6, r3
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   2e0aa:	687b      	ldr	r3, [r7, #4]
   2e0ac:	1a5b      	subs	r3, r3, r1
   2e0ae:	42b3      	cmp	r3, r6
   2e0b0:	d31c      	bcc.n	2e0ec <extract_number+0x82>
    } else if (bytesNeeded == 1) {
   2e0b2:	2e01      	cmp	r6, #1
        *len = p->d->get8(p->d, *offset);
   2e0b4:	6838      	ldr	r0, [r7, #0]
    } else if (bytesNeeded == 1) {
   2e0b6:	d109      	bne.n	2e0cc <extract_number+0x62>
        *len = p->d->get8(p->d, *offset);
   2e0b8:	6803      	ldr	r3, [r0, #0]
        *len =  p->d->get16(p->d, *offset);
   2e0ba:	4798      	blx	r3
   2e0bc:	2300      	movs	r3, #0
   2e0be:	6020      	str	r0, [r4, #0]
   2e0c0:	6063      	str	r3, [r4, #4]
    *offset += bytesNeeded;
   2e0c2:	682b      	ldr	r3, [r5, #0]
   2e0c4:	4433      	add	r3, r6
   2e0c6:	602b      	str	r3, [r5, #0]
    return CborNoError;
   2e0c8:	2000      	movs	r0, #0
   2e0ca:	e7e7      	b.n	2e09c <extract_number+0x32>
    } else if (bytesNeeded == 2) {
   2e0cc:	2e02      	cmp	r6, #2
   2e0ce:	d101      	bne.n	2e0d4 <extract_number+0x6a>
        *len =  p->d->get16(p->d, *offset);
   2e0d0:	6843      	ldr	r3, [r0, #4]
   2e0d2:	e7f2      	b.n	2e0ba <extract_number+0x50>
    } else if (bytesNeeded == 4) {
   2e0d4:	2e04      	cmp	r6, #4
   2e0d6:	d101      	bne.n	2e0dc <extract_number+0x72>
        *len =  p->d->get32(p->d, *offset);
   2e0d8:	6883      	ldr	r3, [r0, #8]
   2e0da:	e7ee      	b.n	2e0ba <extract_number+0x50>
        *len =  p->d->get64(p->d, *offset);
   2e0dc:	68c3      	ldr	r3, [r0, #12]
   2e0de:	4798      	blx	r3
   2e0e0:	e9c4 0100 	strd	r0, r1, [r4]
   2e0e4:	e7ed      	b.n	2e0c2 <extract_number+0x58>
        return CborErrorIllegalNumber;
   2e0e6:	f240 1005 	movw	r0, #261	; 0x105
   2e0ea:	e7d7      	b.n	2e09c <extract_number+0x32>
        return CborErrorUnexpectedEOF;
   2e0ec:	f240 1001 	movw	r0, #257	; 0x101
   2e0f0:	e7d4      	b.n	2e09c <extract_number+0x32>

0002e0f2 <advance_internal>:
{
   2e0f2:	b513      	push	{r0, r1, r4, lr}
   2e0f4:	4604      	mov	r4, r0
    CborError err = extract_number(it->parser, &it->offset,  &length);
   2e0f6:	1d01      	adds	r1, r0, #4
   2e0f8:	466a      	mov	r2, sp
   2e0fa:	6800      	ldr	r0, [r0, #0]
   2e0fc:	f7ff ffb5 	bl	2e06a <extract_number>
    if (err != CborNoError) {
   2e100:	b958      	cbnz	r0, 2e11a <advance_internal+0x28>
    if (it->type == CborByteStringType || it->type == CborTextStringType) {
   2e102:	7ba3      	ldrb	r3, [r4, #14]
   2e104:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2e108:	2b40      	cmp	r3, #64	; 0x40
        it->offset += length;
   2e10a:	bf01      	itttt	eq
   2e10c:	6863      	ldreq	r3, [r4, #4]
   2e10e:	9a00      	ldreq	r2, [sp, #0]
   2e110:	189b      	addeq	r3, r3, r2
   2e112:	6063      	streq	r3, [r4, #4]
    return preparse_next_value(it);
   2e114:	4620      	mov	r0, r4
   2e116:	f7ff ff83 	bl	2e020 <preparse_next_value>
}
   2e11a:	b002      	add	sp, #8
   2e11c:	bd10      	pop	{r4, pc}

0002e11e <iterate_string_chunks>:
{
   2e11e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e122:	4690      	mov	r8, r2
    if (cbor_value_is_length_known(value)) {
   2e124:	7bc2      	ldrb	r2, [r0, #15]
{
   2e126:	b087      	sub	sp, #28
   2e128:	461e      	mov	r6, r3
    if (cbor_value_is_length_known(value)) {
   2e12a:	0752      	lsls	r2, r2, #29
    int offset = value->offset;
   2e12c:	6843      	ldr	r3, [r0, #4]
{
   2e12e:	9f10      	ldr	r7, [sp, #64]	; 0x40
    int offset = value->offset;
   2e130:	9303      	str	r3, [sp, #12]
{
   2e132:	4604      	mov	r4, r0
   2e134:	4689      	mov	r9, r1
    if (cbor_value_is_length_known(value)) {
   2e136:	d446      	bmi.n	2e1c6 <iterate_string_chunks+0xa8>
    CborError err = extract_number(parser, offset, &v);
   2e138:	6800      	ldr	r0, [r0, #0]
   2e13a:	aa04      	add	r2, sp, #16
   2e13c:	a903      	add	r1, sp, #12
   2e13e:	f7ff ff94 	bl	2e06a <extract_number>
    if (err) {
   2e142:	b988      	cbnz	r0, 2e168 <iterate_string_chunks+0x4a>
    *len = v;
   2e144:	f8dd a010 	ldr.w	sl, [sp, #16]
    if (v != *len)
   2e148:	9b05      	ldr	r3, [sp, #20]
   2e14a:	4283      	cmp	r3, r0
   2e14c:	bf08      	it	eq
   2e14e:	45d2      	cmpeq	sl, sl
    *len = v;
   2e150:	4655      	mov	r5, sl
    if (v != *len)
   2e152:	d15a      	bne.n	2e20a <iterate_string_chunks+0xec>
        if (total > (size_t)(value->parser->end - offset))
   2e154:	f8d4 c000 	ldr.w	ip, [r4]
   2e158:	9a03      	ldr	r2, [sp, #12]
   2e15a:	f8dc 3004 	ldr.w	r3, [ip, #4]
   2e15e:	1a9b      	subs	r3, r3, r2
   2e160:	4553      	cmp	r3, sl
   2e162:	d204      	bcs.n	2e16e <iterate_string_chunks+0x50>
            return CborErrorUnexpectedEOF;
   2e164:	f240 1001 	movw	r0, #257	; 0x101
}
   2e168:	b007      	add	sp, #28
   2e16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (total <= *buflen)
   2e16e:	f8d8 3000 	ldr.w	r3, [r8]
   2e172:	4553      	cmp	r3, sl
   2e174:	d309      	bcc.n	2e18a <iterate_string_chunks+0x6c>
            *result = !!func(value->parser->d, buffer, offset, total);
   2e176:	f8dc 0000 	ldr.w	r0, [ip]
   2e17a:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   2e17e:	4653      	mov	r3, sl
   2e180:	4649      	mov	r1, r9
   2e182:	47e0      	blx	ip
   2e184:	3800      	subs	r0, #0
   2e186:	bf18      	it	ne
   2e188:	2001      	movne	r0, #1
        offset += total;
   2e18a:	9b03      	ldr	r3, [sp, #12]
            *result = false;
   2e18c:	7030      	strb	r0, [r6, #0]
        offset += total;
   2e18e:	4453      	add	r3, sl
                ++offset;
   2e190:	9303      	str	r3, [sp, #12]
    if (*result && *buflen > total) {
   2e192:	7833      	ldrb	r3, [r6, #0]
   2e194:	b14b      	cbz	r3, 2e1aa <iterate_string_chunks+0x8c>
   2e196:	f8d8 3000 	ldr.w	r3, [r8]
   2e19a:	42ab      	cmp	r3, r5
   2e19c:	d905      	bls.n	2e1aa <iterate_string_chunks+0x8c>
        if(buffer) {
   2e19e:	f1b9 0f00 	cmp.w	r9, #0
   2e1a2:	d002      	beq.n	2e1aa <iterate_string_chunks+0x8c>
            *(buffer + total) = '\0';
   2e1a4:	2300      	movs	r3, #0
   2e1a6:	f809 3005 	strb.w	r3, [r9, r5]
    *buflen = total;
   2e1aa:	f8c8 5000 	str.w	r5, [r8]
    if (next) {
   2e1ae:	2f00      	cmp	r7, #0
   2e1b0:	d053      	beq.n	2e25a <iterate_string_chunks+0x13c>
        *next = *value;
   2e1b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2e1b6:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
        next->offset = offset;
   2e1ba:	9b03      	ldr	r3, [sp, #12]
   2e1bc:	607b      	str	r3, [r7, #4]
        return preparse_next_value(next);
   2e1be:	4638      	mov	r0, r7
   2e1c0:	f7ff ff2e 	bl	2e020 <preparse_next_value>
   2e1c4:	e7d0      	b.n	2e168 <iterate_string_chunks+0x4a>
        ++offset;
   2e1c6:	3301      	adds	r3, #1
   2e1c8:	9303      	str	r3, [sp, #12]
        total = 0;
   2e1ca:	2500      	movs	r5, #0
        *result = true;
   2e1cc:	2301      	movs	r3, #1
   2e1ce:	7033      	strb	r3, [r6, #0]
                *result = false;
   2e1d0:	46ab      	mov	fp, r5
            if (offset == value->parser->end)
   2e1d2:	6823      	ldr	r3, [r4, #0]
   2e1d4:	9903      	ldr	r1, [sp, #12]
   2e1d6:	685a      	ldr	r2, [r3, #4]
   2e1d8:	428a      	cmp	r2, r1
   2e1da:	d0c3      	beq.n	2e164 <iterate_string_chunks+0x46>
            val = value->parser->d->get8(value->parser->d, offset);
   2e1dc:	6818      	ldr	r0, [r3, #0]
   2e1de:	6803      	ldr	r3, [r0, #0]
   2e1e0:	4798      	blx	r3
            if (val == (uint8_t)BreakByte) {
   2e1e2:	28ff      	cmp	r0, #255	; 0xff
   2e1e4:	d102      	bne.n	2e1ec <iterate_string_chunks+0xce>
                ++offset;
   2e1e6:	9b03      	ldr	r3, [sp, #12]
   2e1e8:	3301      	adds	r3, #1
   2e1ea:	e7d1      	b.n	2e190 <iterate_string_chunks+0x72>
            if ((val & MajorTypeMask) != value->type)
   2e1ec:	7ba3      	ldrb	r3, [r4, #14]
   2e1ee:	f020 001f 	bic.w	r0, r0, #31
   2e1f2:	4298      	cmp	r0, r3
   2e1f4:	d12e      	bne.n	2e254 <iterate_string_chunks+0x136>
    CborError err = extract_number(parser, offset, &v);
   2e1f6:	6820      	ldr	r0, [r4, #0]
   2e1f8:	aa04      	add	r2, sp, #16
   2e1fa:	a903      	add	r1, sp, #12
   2e1fc:	f7ff ff35 	bl	2e06a <extract_number>
    if (err) {
   2e200:	2800      	cmp	r0, #0
   2e202:	d1b1      	bne.n	2e168 <iterate_string_chunks+0x4a>
    *len = v;
   2e204:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
    if (v != *len)
   2e208:	b112      	cbz	r2, 2e210 <iterate_string_chunks+0xf2>
                return CborErrorDataTooLarge;
   2e20a:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2e20e:	e7ab      	b.n	2e168 <iterate_string_chunks+0x4a>
#endif

static inline bool add_check_overflow(size_t v1, size_t v2, size_t *r)
{
#if ((defined(__GNUC__) && (__GNUC__ >= 5)) && !defined(__INTEL_COMPILER)) || __has_builtin(__builtin_add_overflow)
    return __builtin_add_overflow(v1, v2, r);
   2e210:	eb15 0a03 	adds.w	sl, r5, r3
   2e214:	d2f9      	bcs.n	2e20a <iterate_string_chunks+0xec>
            if (chunkLen > (size_t)(value->parser->end - offset))
   2e216:	6820      	ldr	r0, [r4, #0]
   2e218:	9a03      	ldr	r2, [sp, #12]
   2e21a:	6841      	ldr	r1, [r0, #4]
   2e21c:	1a89      	subs	r1, r1, r2
   2e21e:	4299      	cmp	r1, r3
   2e220:	d3a0      	bcc.n	2e164 <iterate_string_chunks+0x46>
            if (*result && *buflen >= newTotal)
   2e222:	7831      	ldrb	r1, [r6, #0]
   2e224:	b199      	cbz	r1, 2e24e <iterate_string_chunks+0x130>
   2e226:	f8d8 1000 	ldr.w	r1, [r8]
   2e22a:	4551      	cmp	r1, sl
   2e22c:	d30f      	bcc.n	2e24e <iterate_string_chunks+0x130>
                *result = !!func(value->parser->d, buffer + total, offset, chunkLen);
   2e22e:	9301      	str	r3, [sp, #4]
   2e230:	eb09 0105 	add.w	r1, r9, r5
   2e234:	6800      	ldr	r0, [r0, #0]
   2e236:	9d11      	ldr	r5, [sp, #68]	; 0x44
   2e238:	47a8      	blx	r5
   2e23a:	3800      	subs	r0, #0
   2e23c:	bf18      	it	ne
   2e23e:	2001      	movne	r0, #1
   2e240:	9b01      	ldr	r3, [sp, #4]
   2e242:	7030      	strb	r0, [r6, #0]
            offset += chunkLen;
   2e244:	9a03      	ldr	r2, [sp, #12]
   2e246:	4413      	add	r3, r2
   2e248:	9303      	str	r3, [sp, #12]
   2e24a:	4655      	mov	r5, sl
        while (true) {
   2e24c:	e7c1      	b.n	2e1d2 <iterate_string_chunks+0xb4>
                *result = false;
   2e24e:	f886 b000 	strb.w	fp, [r6]
   2e252:	e7f7      	b.n	2e244 <iterate_string_chunks+0x126>
                return CborErrorIllegalType;
   2e254:	f44f 7082 	mov.w	r0, #260	; 0x104
   2e258:	e786      	b.n	2e168 <iterate_string_chunks+0x4a>
    return CborNoError;
   2e25a:	4638      	mov	r0, r7
   2e25c:	e784      	b.n	2e168 <iterate_string_chunks+0x4a>

0002e25e <_cbor_value_decode_int64_internal>:
    uint8_t val = value->parser->d->get8(value->parser->d, value->offset);
   2e25e:	6803      	ldr	r3, [r0, #0]
{
   2e260:	b570      	push	{r4, r5, r6, lr}
   2e262:	4604      	mov	r4, r0
    uint8_t val = value->parser->d->get8(value->parser->d, value->offset);
   2e264:	6818      	ldr	r0, [r3, #0]
   2e266:	6861      	ldr	r1, [r4, #4]
   2e268:	6803      	ldr	r3, [r0, #0]
   2e26a:	4798      	blx	r3
    if ((val & 1) == (Value32Bit & 1))
   2e26c:	e9d4 3100 	ldrd	r3, r1, [r4]
   2e270:	f010 0501 	ands.w	r5, r0, #1
        return value->parser->d->get32(value->parser->d, value->offset + 1);
   2e274:	6818      	ldr	r0, [r3, #0]
    if ((val & 1) == (Value32Bit & 1))
   2e276:	d004      	beq.n	2e282 <_cbor_value_decode_int64_internal+0x24>
}
   2e278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return value->parser->d->get64(value->parser->d, value->offset + 1);
   2e27c:	68c3      	ldr	r3, [r0, #12]
   2e27e:	3101      	adds	r1, #1
   2e280:	4718      	bx	r3
        return value->parser->d->get32(value->parser->d, value->offset + 1);
   2e282:	6883      	ldr	r3, [r0, #8]
   2e284:	3101      	adds	r1, #1
   2e286:	4798      	blx	r3
}
   2e288:	4629      	mov	r1, r5
   2e28a:	bd70      	pop	{r4, r5, r6, pc}

0002e28c <cbor_parser_init>:
{
   2e28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e28e:	4614      	mov	r4, r2
   2e290:	4606      	mov	r6, r0
   2e292:	460f      	mov	r7, r1
    memset(parser, 0, sizeof(*parser));
   2e294:	220c      	movs	r2, #12
   2e296:	4620      	mov	r0, r4
   2e298:	2100      	movs	r1, #0
{
   2e29a:	461d      	mov	r5, r3
    memset(parser, 0, sizeof(*parser));
   2e29c:	f7fb f85e 	bl	2935c <memset>
    parser->end = d->message_size;
   2e2a0:	69b3      	ldr	r3, [r6, #24]
    parser->d = d;
   2e2a2:	6026      	str	r6, [r4, #0]
    parser->flags = flags;
   2e2a4:	e9c4 3701 	strd	r3, r7, [r4, #4]
    it->remaining = 1;/* there's one type altogether, usually an array or map */
   2e2a8:	2200      	movs	r2, #0
   2e2aa:	2301      	movs	r3, #1
   2e2ac:	e9c5 2301 	strd	r2, r3, [r5, #4]
    it->parser = parser;
   2e2b0:	602c      	str	r4, [r5, #0]
    return preparse_value(it);
   2e2b2:	4628      	mov	r0, r5
}
   2e2b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return preparse_value(it);
   2e2b8:	f7ff be34 	b.w	2df24 <preparse_value>

0002e2bc <cbor_value_enter_container>:
{
   2e2bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2e2be:	4605      	mov	r5, r0
   2e2c0:	460c      	mov	r4, r1
    *recursed = *it;
   2e2c2:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   2e2c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (it->flags & CborIteratorFlag_UnknownLength) {
   2e2c8:	7beb      	ldrb	r3, [r5, #15]
   2e2ca:	f013 0304 	ands.w	r3, r3, #4
   2e2ce:	d012      	beq.n	2e2f6 <cbor_value_enter_container+0x3a>
        recursed->remaining = UINT32_MAX;
   2e2d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        ++recursed->offset;
   2e2d4:	3101      	adds	r1, #1
        recursed->remaining = UINT32_MAX;
   2e2d6:	60a3      	str	r3, [r4, #8]
        ++recursed->offset;
   2e2d8:	6061      	str	r1, [r4, #4]
        err = preparse_value(recursed);
   2e2da:	4620      	mov	r0, r4
   2e2dc:	f7ff fe22 	bl	2df24 <preparse_value>
        if (err != CborErrorUnexpectedBreak)
   2e2e0:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   2e2e4:	d115      	bne.n	2e312 <cbor_value_enter_container+0x56>
        ++recursed->offset;
   2e2e6:	6863      	ldr	r3, [r4, #4]
   2e2e8:	3301      	adds	r3, #1
   2e2ea:	6063      	str	r3, [r4, #4]
    recursed->type = CborInvalidType;
   2e2ec:	23ff      	movs	r3, #255	; 0xff
    recursed->remaining = 0;
   2e2ee:	2000      	movs	r0, #0
    recursed->type = CborInvalidType;
   2e2f0:	73a3      	strb	r3, [r4, #14]
    recursed->remaining = 0;
   2e2f2:	60a0      	str	r0, [r4, #8]
    return CborNoError;
   2e2f4:	e00d      	b.n	2e312 <cbor_value_enter_container+0x56>
        err = extract_number(recursed->parser, &recursed->offset, &len);
   2e2f6:	466a      	mov	r2, sp
   2e2f8:	1d21      	adds	r1, r4, #4
   2e2fa:	f7ff feb6 	bl	2e06a <extract_number>
        recursed->remaining = (uint32_t)len;
   2e2fe:	e9dd 3200 	ldrd	r3, r2, [sp]
   2e302:	60a3      	str	r3, [r4, #8]
        if (recursed->remaining != len || len == UINT32_MAX) {
   2e304:	b90a      	cbnz	r2, 2e30a <cbor_value_enter_container+0x4e>
   2e306:	1c59      	adds	r1, r3, #1
   2e308:	d105      	bne.n	2e316 <cbor_value_enter_container+0x5a>
            recursed->offset = it->offset;
   2e30a:	686b      	ldr	r3, [r5, #4]
   2e30c:	6063      	str	r3, [r4, #4]
            return CborErrorDataTooLarge;
   2e30e:	f44f 6080 	mov.w	r0, #1024	; 0x400
}
   2e312:	b003      	add	sp, #12
   2e314:	bd30      	pop	{r4, r5, pc}
        if (recursed->type == CborMapType) {
   2e316:	7ba1      	ldrb	r1, [r4, #14]
   2e318:	29a0      	cmp	r1, #160	; 0xa0
   2e31a:	d103      	bne.n	2e324 <cbor_value_enter_container+0x68>
            if (recursed->remaining > UINT32_MAX / 2) {
   2e31c:	2b00      	cmp	r3, #0
   2e31e:	dbf4      	blt.n	2e30a <cbor_value_enter_container+0x4e>
            recursed->remaining *= 2;
   2e320:	0059      	lsls	r1, r3, #1
   2e322:	60a1      	str	r1, [r4, #8]
        if (len != 0)
   2e324:	4313      	orrs	r3, r2
   2e326:	d0e1      	beq.n	2e2ec <cbor_value_enter_container+0x30>
            return preparse_value(recursed);
   2e328:	4620      	mov	r0, r4
   2e32a:	f7ff fdfb 	bl	2df24 <preparse_value>
   2e32e:	e7f0      	b.n	2e312 <cbor_value_enter_container+0x56>

0002e330 <cbor_value_leave_container>:
    it->offset = recursed->offset;
   2e330:	684b      	ldr	r3, [r1, #4]
   2e332:	6043      	str	r3, [r0, #4]
    return preparse_next_value(it);
   2e334:	f7ff be74 	b.w	2e020 <preparse_next_value>

0002e338 <advance_recursive>:
{
   2e338:	b530      	push	{r4, r5, lr}
    if (is_fixed_type(it->type))
   2e33a:	7b83      	ldrb	r3, [r0, #14]
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   2e33c:	f003 02df 	and.w	r2, r3, #223	; 0xdf
   2e340:	2a40      	cmp	r2, #64	; 0x40
{
   2e342:	b085      	sub	sp, #20
   2e344:	4604      	mov	r4, r0
   2e346:	460d      	mov	r5, r1
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   2e348:	d008      	beq.n	2e35c <advance_recursive+0x24>
   2e34a:	2b80      	cmp	r3, #128	; 0x80
   2e34c:	d012      	beq.n	2e374 <advance_recursive+0x3c>
    if (is_fixed_type(it->type))
   2e34e:	2ba0      	cmp	r3, #160	; 0xa0
   2e350:	d010      	beq.n	2e374 <advance_recursive+0x3c>
}
   2e352:	b005      	add	sp, #20
   2e354:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return advance_internal(it);
   2e358:	f7ff becb 	b.w	2e0f2 <advance_internal>
    if (!cbor_value_is_container(it)) {
   2e35c:	2ba0      	cmp	r3, #160	; 0xa0
   2e35e:	d009      	beq.n	2e374 <advance_recursive+0x3c>
        size_t len = SIZE_MAX;
   2e360:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2e364:	9300      	str	r3, [sp, #0]
        return _cbor_value_copy_string(it, NULL, &len, it);
   2e366:	466a      	mov	r2, sp
   2e368:	4603      	mov	r3, r0
   2e36a:	2100      	movs	r1, #0
   2e36c:	f7f7 f9ae 	bl	256cc <_cbor_value_copy_string>
}
   2e370:	b005      	add	sp, #20
   2e372:	bd30      	pop	{r4, r5, pc}
    if (nestingLevel == CBOR_PARSER_MAX_RECURSIONS)
   2e374:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   2e378:	d015      	beq.n	2e3a6 <advance_recursive+0x6e>
    err = cbor_value_enter_container(it, &recursed);
   2e37a:	4669      	mov	r1, sp
   2e37c:	4620      	mov	r0, r4
   2e37e:	f7ff ff9d 	bl	2e2bc <cbor_value_enter_container>
    if (err)
   2e382:	2800      	cmp	r0, #0
   2e384:	d1f4      	bne.n	2e370 <advance_recursive+0x38>
        err = advance_recursive(&recursed, nestingLevel + 1);
   2e386:	3501      	adds	r5, #1
    while (!cbor_value_at_end(&recursed)) {
   2e388:	9b02      	ldr	r3, [sp, #8]
   2e38a:	b92b      	cbnz	r3, 2e398 <advance_recursive+0x60>
    it->offset = recursed->offset;
   2e38c:	9b01      	ldr	r3, [sp, #4]
   2e38e:	6063      	str	r3, [r4, #4]
    return preparse_next_value(it);
   2e390:	4620      	mov	r0, r4
   2e392:	f7ff fe45 	bl	2e020 <preparse_next_value>
    return cbor_value_leave_container(it, &recursed);
   2e396:	e7eb      	b.n	2e370 <advance_recursive+0x38>
        err = advance_recursive(&recursed, nestingLevel + 1);
   2e398:	4629      	mov	r1, r5
   2e39a:	4668      	mov	r0, sp
   2e39c:	f7ff ffcc 	bl	2e338 <advance_recursive>
        if (err)
   2e3a0:	2800      	cmp	r0, #0
   2e3a2:	d0f1      	beq.n	2e388 <advance_recursive+0x50>
   2e3a4:	e7e4      	b.n	2e370 <advance_recursive+0x38>
        return CborErrorNestingTooDeep;
   2e3a6:	f240 4001 	movw	r0, #1025	; 0x401
   2e3aa:	e7e1      	b.n	2e370 <advance_recursive+0x38>

0002e3ac <cbor_value_advance>:
    if (!it->remaining)
   2e3ac:	6883      	ldr	r3, [r0, #8]
   2e3ae:	b113      	cbz	r3, 2e3b6 <cbor_value_advance+0xa>
    return advance_recursive(it, 0);
   2e3b0:	2100      	movs	r1, #0
   2e3b2:	f7ff bfc1 	b.w	2e338 <advance_recursive>
}
   2e3b6:	2003      	movs	r0, #3
   2e3b8:	4770      	bx	lr

0002e3ba <cbor_value_calculate_string_length>:
    *len = SIZE_MAX;
   2e3ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2e3be:	600b      	str	r3, [r1, #0]
    return _cbor_value_copy_string(value, NULL, len, NULL);
   2e3c0:	2300      	movs	r3, #0
{
   2e3c2:	460a      	mov	r2, r1
    return _cbor_value_copy_string(value, NULL, len, NULL);
   2e3c4:	4619      	mov	r1, r3
   2e3c6:	f7f7 b981 	b.w	256cc <_cbor_value_copy_string>

0002e3ca <cbor_value_get_half_float>:
CborError cbor_value_get_half_float(const CborValue *value, void *result)
{
    assert(cbor_value_is_half_float(value));

    /* size has been computed already */
    uint16_t v = value->parser->d->get16(value->parser->d, value->offset + 1);
   2e3ca:	6802      	ldr	r2, [r0, #0]
{
   2e3cc:	4603      	mov	r3, r0
   2e3ce:	b513      	push	{r0, r1, r4, lr}
    uint16_t v = value->parser->d->get16(value->parser->d, value->offset + 1);
   2e3d0:	6810      	ldr	r0, [r2, #0]
{
   2e3d2:	460c      	mov	r4, r1
    uint16_t v = value->parser->d->get16(value->parser->d, value->offset + 1);
   2e3d4:	6859      	ldr	r1, [r3, #4]
   2e3d6:	6843      	ldr	r3, [r0, #4]
   2e3d8:	3101      	adds	r1, #1
   2e3da:	4798      	blx	r3
    memcpy(result, &v, sizeof(v));
   2e3dc:	2202      	movs	r2, #2
    uint16_t v = value->parser->d->get16(value->parser->d, value->offset + 1);
   2e3de:	f8ad 0006 	strh.w	r0, [sp, #6]
    memcpy(result, &v, sizeof(v));
   2e3e2:	f10d 0106 	add.w	r1, sp, #6
   2e3e6:	4620      	mov	r0, r4
   2e3e8:	f7fa ffad 	bl	29346 <memcpy>
    return CborNoError;
}
   2e3ec:	2000      	movs	r0, #0
   2e3ee:	b002      	add	sp, #8
   2e3f0:	bd10      	pop	{r4, pc}

0002e3f2 <z_device_state_init>:
}
   2e3f2:	4770      	bx	lr

0002e3f4 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2e3f4:	b138      	cbz	r0, 2e406 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2e3f6:	68c3      	ldr	r3, [r0, #12]
   2e3f8:	8818      	ldrh	r0, [r3, #0]
   2e3fa:	f3c0 0008 	ubfx	r0, r0, #0, #9
   2e3fe:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   2e402:	4258      	negs	r0, r3
   2e404:	4158      	adcs	r0, r3
}
   2e406:	4770      	bx	lr

0002e408 <arch_system_halt>:
	__asm__ volatile(
   2e408:	f04f 0220 	mov.w	r2, #32
   2e40c:	f3ef 8311 	mrs	r3, BASEPRI
   2e410:	f382 8812 	msr	BASEPRI_MAX, r2
   2e414:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
   2e418:	e7fe      	b.n	2e418 <arch_system_halt+0x10>

0002e41a <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   2e41a:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
   2e41c:	f7ff fff4 	bl	2e408 <arch_system_halt>

0002e420 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2e420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e422:	4605      	mov	r5, r0
   2e424:	460e      	mov	r6, r1
   2e426:	f04f 0320 	mov.w	r3, #32
   2e42a:	f3ef 8711 	mrs	r7, BASEPRI
   2e42e:	f383 8812 	msr	BASEPRI_MAX, r3
   2e432:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   2e436:	f7f8 f99f 	bl	26778 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   2e43a:	4631      	mov	r1, r6
   2e43c:	4604      	mov	r4, r0
   2e43e:	4628      	mov	r0, r5
   2e440:	f7ff ffeb 	bl	2e41a <k_sys_fatal_error_handler>
	__asm__ volatile(
   2e444:	f387 8811 	msr	BASEPRI, r7
   2e448:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   2e44c:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   2e44e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2e452:	f7e1 baad 	b.w	f9b0 <z_impl_k_thread_abort>

0002e456 <z_early_memset>:
	(void) memset(dst, c, n);
   2e456:	f7fa bf81 	b.w	2935c <memset>

0002e45a <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   2e45a:	f7fa bf74 	b.w	29346 <memcpy>

0002e45e <k_heap_init>:
{
   2e45e:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2e460:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2e464:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2e468:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2e46a:	f7f8 bfce 	b.w	2740a <sys_heap_init>

0002e46e <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2e46e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e472:	b085      	sub	sp, #20
   2e474:	4606      	mov	r6, r0
   2e476:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2e478:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   2e47c:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2e47e:	f000 fba3 	bl	2ebc8 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2e482:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2e486:	4605      	mov	r5, r0
   2e488:	460f      	mov	r7, r1
	__asm__ volatile(
   2e48a:	f04f 0320 	mov.w	r3, #32
   2e48e:	f3ef 8411 	mrs	r4, BASEPRI
   2e492:	f383 8812 	msr	BASEPRI_MAX, r3
   2e496:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2e49a:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2e49e:	464a      	mov	r2, r9
   2e4a0:	4641      	mov	r1, r8
   2e4a2:	4630      	mov	r0, r6
   2e4a4:	f7f8 ff49 	bl	2733a <sys_heap_aligned_alloc>
   2e4a8:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   2e4aa:	f7f8 fb19 	bl	26ae0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2e4ae:	9b03      	ldr	r3, [sp, #12]
   2e4b0:	b13b      	cbz	r3, 2e4c2 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   2e4b2:	f384 8811 	msr	BASEPRI, r4
   2e4b6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2e4ba:	4618      	mov	r0, r3
   2e4bc:	b005      	add	sp, #20
   2e4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   2e4c2:	1a28      	subs	r0, r5, r0
   2e4c4:	eb67 0101 	sbc.w	r1, r7, r1
   2e4c8:	2801      	cmp	r0, #1
   2e4ca:	f171 0200 	sbcs.w	r2, r1, #0
   2e4ce:	dbf0      	blt.n	2e4b2 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2e4d0:	e9cd 0100 	strd	r0, r1, [sp]
   2e4d4:	465a      	mov	r2, fp
   2e4d6:	4621      	mov	r1, r4
   2e4d8:	4650      	mov	r0, sl
   2e4da:	f7f7 fff5 	bl	264c8 <z_pend_curr>
	__asm__ volatile(
   2e4de:	f04f 0320 	mov.w	r3, #32
   2e4e2:	f3ef 8411 	mrs	r4, BASEPRI
   2e4e6:	f383 8812 	msr	BASEPRI_MAX, r3
   2e4ea:	f3bf 8f6f 	isb	sy
   2e4ee:	e7d6      	b.n	2e49e <k_heap_aligned_alloc+0x30>

0002e4f0 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   2e4f0:	b538      	push	{r3, r4, r5, lr}
   2e4f2:	4604      	mov	r4, r0
   2e4f4:	f04f 0320 	mov.w	r3, #32
   2e4f8:	f3ef 8511 	mrs	r5, BASEPRI
   2e4fc:	f383 8812 	msr	BASEPRI_MAX, r3
   2e500:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   2e504:	f7f8 fee1 	bl	272ca <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2e508:	f104 000c 	add.w	r0, r4, #12
   2e50c:	f000 fae5 	bl	2eada <z_unpend_all>
   2e510:	b130      	cbz	r0, 2e520 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   2e512:	4629      	mov	r1, r5
   2e514:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2e518:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   2e51c:	f7f7 be80 	b.w	26220 <z_reschedule>
	__asm__ volatile(
   2e520:	f385 8811 	msr	BASEPRI, r5
   2e524:	f3bf 8f6f 	isb	sy
}
   2e528:	bd38      	pop	{r3, r4, r5, pc}

0002e52a <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   2e52a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e52c:	4604      	mov	r4, r0
   2e52e:	460d      	mov	r5, r1
	__asm__ volatile(
   2e530:	f04f 0320 	mov.w	r3, #32
   2e534:	f3ef 8611 	mrs	r6, BASEPRI
   2e538:	f383 8812 	msr	BASEPRI_MAX, r3
   2e53c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   2e540:	6947      	ldr	r7, [r0, #20]
   2e542:	b977      	cbnz	r7, 2e562 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2e544:	f000 fab1 	bl	2eaaa <z_unpend_first_thread>

		if (pending_thread != NULL) {
   2e548:	b158      	cbz	r0, 2e562 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2e54a:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2e54c:	6142      	str	r2, [r0, #20]
   2e54e:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   2e550:	f000 fa4f 	bl	2e9f2 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2e554:	4631      	mov	r1, r6
   2e556:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   2e55a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   2e55e:	f7f7 be5f 	b.w	26220 <z_reschedule>
	**(char ***) mem = slab->free_list;
   2e562:	682b      	ldr	r3, [r5, #0]
   2e564:	6962      	ldr	r2, [r4, #20]
   2e566:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   2e568:	682b      	ldr	r3, [r5, #0]
   2e56a:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   2e56c:	69a3      	ldr	r3, [r4, #24]
   2e56e:	3b01      	subs	r3, #1
   2e570:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   2e572:	f386 8811 	msr	BASEPRI, r6
   2e576:	f3bf 8f6f 	isb	sy
}
   2e57a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002e57c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2e57c:	f3ef 8005 	mrs	r0, IPSR
}
   2e580:	3800      	subs	r0, #0
   2e582:	bf18      	it	ne
   2e584:	2001      	movne	r0, #1
   2e586:	4770      	bx	lr

0002e588 <z_impl_k_thread_name_set>:
}
   2e588:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2e58c:	4770      	bx	lr

0002e58e <z_impl_k_thread_start>:
	z_sched_start(thread);
   2e58e:	f7f7 bf3f 	b.w	26410 <z_sched_start>

0002e592 <z_pm_save_idle_exit>:
{
   2e592:	b508      	push	{r3, lr}
	pm_system_resume();
   2e594:	f7e0 fcf2 	bl	ef7c <pm_system_resume>
}
   2e598:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2e59c:	f7ff b95a 	b.w	2d854 <sys_clock_idle_exit>

0002e5a0 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2e5a0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2e5a4:	428b      	cmp	r3, r1
   2e5a6:	d001      	beq.n	2e5ac <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   2e5a8:	f7f7 bfa2 	b.w	264f0 <z_set_prio>
}
   2e5ac:	2000      	movs	r0, #0
   2e5ae:	4770      	bx	lr

0002e5b0 <z_impl_k_mutex_init>:
{
   2e5b0:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2e5b2:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   2e5b4:	e9c3 0002 	strd	r0, r0, [r3, #8]
   2e5b8:	e9c3 3300 	strd	r3, r3, [r3]
}
   2e5bc:	4770      	bx	lr

0002e5be <queue_insert>:
{
   2e5be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2e5c2:	4699      	mov	r9, r3
   2e5c4:	4604      	mov	r4, r0
   2e5c6:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2e5ca:	460d      	mov	r5, r1
   2e5cc:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2e5ce:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2e5d2:	f04f 0220 	mov.w	r2, #32
   2e5d6:	f3ef 8711 	mrs	r7, BASEPRI
   2e5da:	f382 8812 	msr	BASEPRI_MAX, r2
   2e5de:	f3bf 8f6f 	isb	sy
	if (is_append) {
   2e5e2:	b103      	cbz	r3, 2e5e6 <queue_insert+0x28>
	return list->tail;
   2e5e4:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2e5e6:	4630      	mov	r0, r6
   2e5e8:	f000 fa5f 	bl	2eaaa <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2e5ec:	b158      	cbz	r0, 2e606 <queue_insert+0x48>
   2e5ee:	2400      	movs	r4, #0
   2e5f0:	67c4      	str	r4, [r0, #124]	; 0x7c
   2e5f2:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   2e5f6:	f000 f9fc 	bl	2e9f2 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   2e5fa:	4630      	mov	r0, r6
   2e5fc:	4639      	mov	r1, r7
   2e5fe:	f7f7 fe0f 	bl	26220 <z_reschedule>
	return 0;
   2e602:	2000      	movs	r0, #0
   2e604:	e00c      	b.n	2e620 <queue_insert+0x62>
	if (alloc) {
   2e606:	f1b9 0f00 	cmp.w	r9, #0
   2e60a:	d01b      	beq.n	2e644 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   2e60c:	2108      	movs	r1, #8
   2e60e:	f7f8 fb9b 	bl	26d48 <z_thread_aligned_alloc>
		if (anode == NULL) {
   2e612:	b938      	cbnz	r0, 2e624 <queue_insert+0x66>
	__asm__ volatile(
   2e614:	f387 8811 	msr	BASEPRI, r7
   2e618:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2e61c:	f06f 000b 	mvn.w	r0, #11
}
   2e620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   2e624:	2301      	movs	r3, #1
		anode->data = data;
   2e626:	f8c0 8004 	str.w	r8, [r0, #4]
   2e62a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2e62c:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2e62e:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   2e632:	b95d      	cbnz	r5, 2e64c <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2e634:	6823      	ldr	r3, [r4, #0]
   2e636:	4313      	orrs	r3, r2
   2e638:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2e63a:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   2e63c:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2e63e:	b973      	cbnz	r3, 2e65e <queue_insert+0xa0>
	list->tail = node;
   2e640:	6060      	str	r0, [r4, #4]
}
   2e642:	e00c      	b.n	2e65e <queue_insert+0xa0>
	node->next_and_flags = flags;
   2e644:	f8c8 9000 	str.w	r9, [r8]
}
   2e648:	4640      	mov	r0, r8
   2e64a:	e7ef      	b.n	2e62c <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2e64c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2e64e:	f033 0303 	bics.w	r3, r3, #3
   2e652:	d110      	bne.n	2e676 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2e654:	6002      	str	r2, [r0, #0]
	return list->tail;
   2e656:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2e658:	b93a      	cbnz	r2, 2e66a <queue_insert+0xac>
	list->head = node;
   2e65a:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2e65e:	2104      	movs	r1, #4
   2e660:	f104 0010 	add.w	r0, r4, #16
   2e664:	f000 fc19 	bl	2ee9a <z_handle_obj_poll_events>
   2e668:	e7c7      	b.n	2e5fa <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2e66a:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2e66c:	f003 0303 	and.w	r3, r3, #3
   2e670:	4303      	orrs	r3, r0
   2e672:	6013      	str	r3, [r2, #0]
   2e674:	e7e4      	b.n	2e640 <queue_insert+0x82>
   2e676:	4313      	orrs	r3, r2
   2e678:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2e67a:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2e67c:	f003 0303 	and.w	r3, r3, #3
   2e680:	4303      	orrs	r3, r0
   2e682:	602b      	str	r3, [r5, #0]
}
   2e684:	e7eb      	b.n	2e65e <queue_insert+0xa0>

0002e686 <z_queue_node_peek>:
{
   2e686:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2e688:	4604      	mov	r4, r0
   2e68a:	b130      	cbz	r0, 2e69a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2e68c:	6802      	ldr	r2, [r0, #0]
   2e68e:	0793      	lsls	r3, r2, #30
   2e690:	d003      	beq.n	2e69a <z_queue_node_peek+0x14>
		ret = anode->data;
   2e692:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2e694:	b109      	cbz	r1, 2e69a <z_queue_node_peek+0x14>
			k_free(anode);
   2e696:	f000 fc0e 	bl	2eeb6 <k_free>
}
   2e69a:	4620      	mov	r0, r4
   2e69c:	bd10      	pop	{r4, pc}

0002e69e <z_impl_k_queue_init>:
	list->head = NULL;
   2e69e:	2300      	movs	r3, #0
	list->tail = NULL;
   2e6a0:	e9c0 3300 	strd	r3, r3, [r0]
   2e6a4:	f100 0308 	add.w	r3, r0, #8
   2e6a8:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   2e6ac:	f100 0310 	add.w	r3, r0, #16
   2e6b0:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   2e6b4:	4770      	bx	lr

0002e6b6 <k_queue_append>:
{
   2e6b6:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2e6b8:	2301      	movs	r3, #1
   2e6ba:	9300      	str	r3, [sp, #0]
   2e6bc:	2300      	movs	r3, #0
{
   2e6be:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2e6c0:	4619      	mov	r1, r3
   2e6c2:	f7ff ff7c 	bl	2e5be <queue_insert>
}
   2e6c6:	b003      	add	sp, #12
   2e6c8:	f85d fb04 	ldr.w	pc, [sp], #4

0002e6cc <k_queue_prepend>:
{
   2e6cc:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   2e6ce:	2300      	movs	r3, #0
{
   2e6d0:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2e6d2:	9300      	str	r3, [sp, #0]
   2e6d4:	4619      	mov	r1, r3
   2e6d6:	f7ff ff72 	bl	2e5be <queue_insert>
}
   2e6da:	b003      	add	sp, #12
   2e6dc:	f85d fb04 	ldr.w	pc, [sp], #4

0002e6e0 <k_queue_append_list>:
{
   2e6e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2e6e4:	4605      	mov	r5, r0
   2e6e6:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   2e6e8:	460c      	mov	r4, r1
   2e6ea:	b391      	cbz	r1, 2e752 <k_queue_append_list+0x72>
   2e6ec:	b38a      	cbz	r2, 2e752 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2e6ee:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   2e6f2:	f04f 0320 	mov.w	r3, #32
   2e6f6:	f3ef 8811 	mrs	r8, BASEPRI
   2e6fa:	f383 8812 	msr	BASEPRI_MAX, r3
   2e6fe:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   2e702:	4638      	mov	r0, r7
   2e704:	f000 f9d1 	bl	2eaaa <z_unpend_first_thread>
   2e708:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   2e70c:	b920      	cbnz	r0, 2e718 <k_queue_append_list+0x38>
	return list->tail;
   2e70e:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2e710:	b9ca      	cbnz	r2, 2e746 <k_queue_append_list+0x66>
	list->head = node;
   2e712:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2e714:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2e716:	e00a      	b.n	2e72e <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   2e718:	6144      	str	r4, [r0, #20]
   2e71a:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   2e71e:	f000 f968 	bl	2e9f2 <z_ready_thread>
		head = *(void **)head;
   2e722:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   2e724:	4638      	mov	r0, r7
   2e726:	f000 f9c0 	bl	2eaaa <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   2e72a:	2c00      	cmp	r4, #0
   2e72c:	d1ee      	bne.n	2e70c <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   2e72e:	2104      	movs	r1, #4
   2e730:	f105 0010 	add.w	r0, r5, #16
   2e734:	f000 fbb1 	bl	2ee9a <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   2e738:	4638      	mov	r0, r7
   2e73a:	4641      	mov	r1, r8
   2e73c:	f7f7 fd70 	bl	26220 <z_reschedule>
	return 0;
   2e740:	2000      	movs	r0, #0
}
   2e742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2e746:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2e748:	f003 0303 	and.w	r3, r3, #3
   2e74c:	431c      	orrs	r4, r3
   2e74e:	6014      	str	r4, [r2, #0]
}
   2e750:	e7e0      	b.n	2e714 <k_queue_append_list+0x34>
		return -EINVAL;
   2e752:	f06f 0015 	mvn.w	r0, #21
   2e756:	e7f4      	b.n	2e742 <k_queue_append_list+0x62>

0002e758 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2e758:	b15a      	cbz	r2, 2e772 <z_impl_k_sem_init+0x1a>
   2e75a:	428a      	cmp	r2, r1
   2e75c:	d309      	bcc.n	2e772 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2e75e:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2e762:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2e766:	e9c0 0000 	strd	r0, r0, [r0]
   2e76a:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2e76e:	2000      	movs	r0, #0
   2e770:	4770      	bx	lr
		return -EINVAL;
   2e772:	f06f 0015 	mvn.w	r0, #21
}
   2e776:	4770      	bx	lr

0002e778 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   2e778:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2e77a:	2301      	movs	r3, #1
   2e77c:	408b      	lsls	r3, r1
   2e77e:	ea22 0303 	bic.w	r3, r2, r3
   2e782:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   2e784:	fa22 f001 	lsr.w	r0, r2, r1
}
   2e788:	f000 0001 	and.w	r0, r0, #1
   2e78c:	4770      	bx	lr

0002e78e <unschedule_locked>:
{
   2e78e:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2e790:	2103      	movs	r1, #3
{
   2e792:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2e794:	300c      	adds	r0, #12
   2e796:	f7ff ffef 	bl	2e778 <flag_test_and_clear>
   2e79a:	4604      	mov	r4, r0
   2e79c:	b118      	cbz	r0, 2e7a6 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   2e79e:	f105 0010 	add.w	r0, r5, #16
   2e7a2:	f000 f9c7 	bl	2eb34 <z_abort_timeout>
}
   2e7a6:	4620      	mov	r0, r4
   2e7a8:	bd38      	pop	{r3, r4, r5, pc}

0002e7aa <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2e7aa:	b120      	cbz	r0, 2e7b6 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2e7ac:	2200      	movs	r2, #0
   2e7ae:	4611      	mov	r1, r2
   2e7b0:	3088      	adds	r0, #136	; 0x88
   2e7b2:	f000 b9a2 	b.w	2eafa <z_sched_wake>
}
   2e7b6:	4770      	bx	lr

0002e7b8 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   2e7b8:	68c3      	ldr	r3, [r0, #12]
{
   2e7ba:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2e7bc:	f3c3 0540 	ubfx	r5, r3, #1, #1
   2e7c0:	079b      	lsls	r3, r3, #30
{
   2e7c2:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2e7c4:	d416      	bmi.n	2e7f4 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   2e7c6:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2e7c8:	2102      	movs	r1, #2
   2e7ca:	300c      	adds	r0, #12
   2e7cc:	f7ff ffd4 	bl	2e778 <flag_test_and_clear>
   2e7d0:	b180      	cbz	r0, 2e7f4 <cancel_async_locked+0x3c>
	return list->head;
   2e7d2:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2e7d6:	b16a      	cbz	r2, 2e7f4 <cancel_async_locked+0x3c>
   2e7d8:	4294      	cmp	r4, r2
   2e7da:	d11b      	bne.n	2e814 <cancel_async_locked+0x5c>
	return node->next;
   2e7dc:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   2e7de:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   2e7e2:	b98d      	cbnz	r5, 2e808 <cancel_async_locked+0x50>
   2e7e4:	428c      	cmp	r4, r1
	list->head = node;
   2e7e6:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   2e7ea:	d101      	bne.n	2e7f0 <cancel_async_locked+0x38>
	list->tail = node;
   2e7ec:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   2e7f0:	2300      	movs	r3, #0
   2e7f2:	6023      	str	r3, [r4, #0]
	return *flagp;
   2e7f4:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   2e7f6:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   2e7fa:	bf1e      	ittt	ne
   2e7fc:	f043 0302 	orrne.w	r3, r3, #2
   2e800:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2e802:	f003 000f 	andne.w	r0, r3, #15
}
   2e806:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   2e808:	428c      	cmp	r4, r1
	parent->next = child;
   2e80a:	602a      	str	r2, [r5, #0]
	list->tail = node;
   2e80c:	bf08      	it	eq
   2e80e:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   2e812:	e7ed      	b.n	2e7f0 <cancel_async_locked+0x38>
	return node->next;
   2e814:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2e816:	6812      	ldr	r2, [r2, #0]
   2e818:	e7dd      	b.n	2e7d6 <cancel_async_locked+0x1e>

0002e81a <work_timeout>:
{
   2e81a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2e81c:	4604      	mov	r4, r0
   2e81e:	f04f 0320 	mov.w	r3, #32
   2e822:	f3ef 8511 	mrs	r5, BASEPRI
   2e826:	f383 8812 	msr	BASEPRI_MAX, r3
   2e82a:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   2e82e:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2e830:	f1a0 0610 	sub.w	r6, r0, #16
   2e834:	2103      	movs	r1, #3
   2e836:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   2e838:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2e83a:	f7ff ff9d 	bl	2e778 <flag_test_and_clear>
   2e83e:	b128      	cbz	r0, 2e84c <work_timeout+0x32>
		queue = dw->queue;
   2e840:	69a3      	ldr	r3, [r4, #24]
   2e842:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2e844:	a901      	add	r1, sp, #4
   2e846:	4630      	mov	r0, r6
   2e848:	f7f7 fbb2 	bl	25fb0 <submit_to_queue_locked>
	__asm__ volatile(
   2e84c:	f385 8811 	msr	BASEPRI, r5
   2e850:	f3bf 8f6f 	isb	sy
}
   2e854:	b002      	add	sp, #8
   2e856:	bd70      	pop	{r4, r5, r6, pc}

0002e858 <k_work_init>:
{
   2e858:	b538      	push	{r3, r4, r5, lr}
   2e85a:	4604      	mov	r4, r0
   2e85c:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2e85e:	2210      	movs	r2, #16
   2e860:	2100      	movs	r1, #0
   2e862:	f7fa fd7b 	bl	2935c <memset>
   2e866:	6065      	str	r5, [r4, #4]
}
   2e868:	bd38      	pop	{r3, r4, r5, pc}

0002e86a <k_work_submit_to_queue>:
{
   2e86a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2e86c:	9001      	str	r0, [sp, #4]
   2e86e:	4608      	mov	r0, r1
	__asm__ volatile(
   2e870:	f04f 0320 	mov.w	r3, #32
   2e874:	f3ef 8511 	mrs	r5, BASEPRI
   2e878:	f383 8812 	msr	BASEPRI_MAX, r3
   2e87c:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2e880:	a901      	add	r1, sp, #4
   2e882:	f7f7 fb95 	bl	25fb0 <submit_to_queue_locked>
   2e886:	4604      	mov	r4, r0
	__asm__ volatile(
   2e888:	f385 8811 	msr	BASEPRI, r5
   2e88c:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   2e890:	2800      	cmp	r0, #0
   2e892:	dd04      	ble.n	2e89e <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   2e894:	f7f7 ff76 	bl	26784 <z_impl_k_is_preempt_thread>
   2e898:	b108      	cbz	r0, 2e89e <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   2e89a:	f7f7 fecb 	bl	26634 <z_impl_k_yield>
}
   2e89e:	4620      	mov	r0, r4
   2e8a0:	b003      	add	sp, #12
   2e8a2:	bd30      	pop	{r4, r5, pc}

0002e8a4 <k_work_init_delayable>:
{
   2e8a4:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   2e8a6:	2230      	movs	r2, #48	; 0x30
{
   2e8a8:	4604      	mov	r4, r0
   2e8aa:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   2e8ac:	2100      	movs	r1, #0
   2e8ae:	f7fa fd55 	bl	2935c <memset>
   2e8b2:	f44f 7380 	mov.w	r3, #256	; 0x100
   2e8b6:	6065      	str	r5, [r4, #4]
   2e8b8:	60e3      	str	r3, [r4, #12]
}
   2e8ba:	bd38      	pop	{r3, r4, r5, pc}

0002e8bc <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2e8bc:	b538      	push	{r3, r4, r5, lr}
   2e8be:	4604      	mov	r4, r0
	__asm__ volatile(
   2e8c0:	f04f 0320 	mov.w	r3, #32
   2e8c4:	f3ef 8511 	mrs	r5, BASEPRI
   2e8c8:	f383 8812 	msr	BASEPRI_MAX, r3
   2e8cc:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   2e8d0:	f7ff ff5d 	bl	2e78e <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2e8d4:	4620      	mov	r0, r4
   2e8d6:	f7ff ff6f 	bl	2e7b8 <cancel_async_locked>
	__asm__ volatile(
   2e8da:	f385 8811 	msr	BASEPRI, r5
   2e8de:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2e8e2:	bd38      	pop	{r3, r4, r5, pc}

0002e8e4 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   2e8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e8e6:	4604      	mov	r4, r0
   2e8e8:	460d      	mov	r5, r1
	__asm__ volatile(
   2e8ea:	f04f 0320 	mov.w	r3, #32
   2e8ee:	f3ef 8711 	mrs	r7, BASEPRI
   2e8f2:	f383 8812 	msr	BASEPRI_MAX, r3
   2e8f6:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   2e8fa:	68c3      	ldr	r3, [r0, #12]
   2e8fc:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2e900:	2b00      	cmp	r3, #0
   2e902:	bf14      	ite	ne
   2e904:	2601      	movne	r6, #1
   2e906:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   2e908:	d009      	beq.n	2e91e <k_work_cancel_delayable_sync+0x3a>
	(void)unschedule_locked(dwork);
   2e90a:	f7ff ff40 	bl	2e78e <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2e90e:	4620      	mov	r0, r4
   2e910:	f7ff ff52 	bl	2e7b8 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   2e914:	4629      	mov	r1, r5
   2e916:	4620      	mov	r0, r4
   2e918:	f7f7 fb2c 	bl	25f74 <cancel_sync_locked>
   2e91c:	4603      	mov	r3, r0
	__asm__ volatile(
   2e91e:	f387 8811 	msr	BASEPRI, r7
   2e922:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   2e926:	b13b      	cbz	r3, 2e938 <k_work_cancel_delayable_sync+0x54>
	return z_impl_k_sem_take(sem, timeout);
   2e928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2e92c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2e930:	f105 0008 	add.w	r0, r5, #8
   2e934:	f7f7 fa46 	bl	25dc4 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2e938:	4630      	mov	r0, r6
   2e93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002e93c <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   2e93c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2e940:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2e942:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2e944:	2300      	movs	r3, #0
	node->prev = NULL;
   2e946:	e9c0 3300 	strd	r3, r3, [r0]
}
   2e94a:	4770      	bx	lr

0002e94c <unpend_thread_no_timeout>:
{
   2e94c:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   2e94e:	f7ff fff5 	bl	2e93c <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2e952:	7b43      	ldrb	r3, [r0, #13]
   2e954:	f023 0302 	bic.w	r3, r3, #2
   2e958:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   2e95a:	2300      	movs	r3, #0
   2e95c:	6083      	str	r3, [r0, #8]
}
   2e95e:	bd08      	pop	{r3, pc}

0002e960 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2e960:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2e964:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2e968:	4283      	cmp	r3, r0
		return b2 - b1;
   2e96a:	bf14      	ite	ne
   2e96c:	1ac0      	subne	r0, r0, r3
	return 0;
   2e96e:	2000      	moveq	r0, #0
}
   2e970:	4770      	bx	lr

0002e972 <z_unpend_thread_no_timeout>:
{
   2e972:	b508      	push	{r3, lr}
	__asm__ volatile(
   2e974:	f04f 0320 	mov.w	r3, #32
   2e978:	f3ef 8111 	mrs	r1, BASEPRI
   2e97c:	f383 8812 	msr	BASEPRI_MAX, r3
   2e980:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2e984:	f7ff ffe2 	bl	2e94c <unpend_thread_no_timeout>
	__asm__ volatile(
   2e988:	f381 8811 	msr	BASEPRI, r1
   2e98c:	f3bf 8f6f 	isb	sy
}
   2e990:	bd08      	pop	{r3, pc}

0002e992 <z_unpend_thread>:
{
   2e992:	b510      	push	{r4, lr}
	__asm__ volatile(
   2e994:	f04f 0320 	mov.w	r3, #32
   2e998:	f3ef 8411 	mrs	r4, BASEPRI
   2e99c:	f383 8812 	msr	BASEPRI_MAX, r3
   2e9a0:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2e9a4:	f7ff ffd2 	bl	2e94c <unpend_thread_no_timeout>
	__asm__ volatile(
   2e9a8:	f384 8811 	msr	BASEPRI, r4
   2e9ac:	f3bf 8f6f 	isb	sy
}
   2e9b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2e9b4:	3018      	adds	r0, #24
   2e9b6:	f000 b8bd 	b.w	2eb34 <z_abort_timeout>

0002e9ba <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2e9ba:	4603      	mov	r3, r0
   2e9bc:	b920      	cbnz	r0, 2e9c8 <z_reschedule_irqlock+0xe>
   2e9be:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   2e9c2:	b90a      	cbnz	r2, 2e9c8 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   2e9c4:	f7e0 bdb0 	b.w	f528 <arch_swap>
   2e9c8:	f383 8811 	msr	BASEPRI, r3
   2e9cc:	f3bf 8f6f 	isb	sy
}
   2e9d0:	4770      	bx	lr

0002e9d2 <z_reschedule_unlocked>:
	__asm__ volatile(
   2e9d2:	f04f 0320 	mov.w	r3, #32
   2e9d6:	f3ef 8011 	mrs	r0, BASEPRI
   2e9da:	f383 8812 	msr	BASEPRI_MAX, r3
   2e9de:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2e9e2:	f7ff bfea 	b.w	2e9ba <z_reschedule_irqlock>

0002e9e6 <z_priq_dumb_best>:
{
   2e9e6:	4603      	mov	r3, r0
	return list->head == list;
   2e9e8:	6800      	ldr	r0, [r0, #0]
}
   2e9ea:	4283      	cmp	r3, r0
   2e9ec:	bf08      	it	eq
   2e9ee:	2000      	moveq	r0, #0
   2e9f0:	4770      	bx	lr

0002e9f2 <z_ready_thread>:
{
   2e9f2:	b510      	push	{r4, lr}
   2e9f4:	f04f 0320 	mov.w	r3, #32
   2e9f8:	f3ef 8411 	mrs	r4, BASEPRI
   2e9fc:	f383 8812 	msr	BASEPRI_MAX, r3
   2ea00:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   2ea04:	f7f7 fcce 	bl	263a4 <ready_thread>
	__asm__ volatile(
   2ea08:	f384 8811 	msr	BASEPRI, r4
   2ea0c:	f3bf 8f6f 	isb	sy
}
   2ea10:	bd10      	pop	{r4, pc}

0002ea12 <z_thread_timeout>:
{
   2ea12:	b510      	push	{r4, lr}
   2ea14:	4601      	mov	r1, r0
	__asm__ volatile(
   2ea16:	f04f 0320 	mov.w	r3, #32
   2ea1a:	f3ef 8411 	mrs	r4, BASEPRI
   2ea1e:	f383 8812 	msr	BASEPRI_MAX, r3
   2ea22:	f3bf 8f6f 	isb	sy
		if (!killed) {
   2ea26:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   2ea2a:	f013 0f28 	tst.w	r3, #40	; 0x28
   2ea2e:	d10d      	bne.n	2ea4c <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   2ea30:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   2ea34:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   2ea36:	b10b      	cbz	r3, 2ea3c <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   2ea38:	f7ff ff88 	bl	2e94c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2ea3c:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   2ea40:	f023 0314 	bic.w	r3, r3, #20
   2ea44:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   2ea48:	f7f7 fcac 	bl	263a4 <ready_thread>
	__asm__ volatile(
   2ea4c:	f384 8811 	msr	BASEPRI, r4
   2ea50:	f3bf 8f6f 	isb	sy
}
   2ea54:	bd10      	pop	{r4, pc}

0002ea56 <add_to_waitq_locked>:
{
   2ea56:	b538      	push	{r3, r4, r5, lr}
   2ea58:	4604      	mov	r4, r0
   2ea5a:	460d      	mov	r5, r1
	unready_thread(thread);
   2ea5c:	f7f7 fcf6 	bl	2644c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2ea60:	7b63      	ldrb	r3, [r4, #13]
   2ea62:	f043 0302 	orr.w	r3, r3, #2
   2ea66:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2ea68:	b195      	cbz	r5, 2ea90 <add_to_waitq_locked+0x3a>
   2ea6a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   2ea6c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ea6e:	429d      	cmp	r5, r3
   2ea70:	d015      	beq.n	2ea9e <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2ea72:	b1a3      	cbz	r3, 2ea9e <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   2ea74:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2ea78:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   2ea7c:	4291      	cmp	r1, r2
   2ea7e:	d008      	beq.n	2ea92 <add_to_waitq_locked+0x3c>
		return b2 - b1;
   2ea80:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   2ea82:	2a00      	cmp	r2, #0
   2ea84:	dd05      	ble.n	2ea92 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   2ea86:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2ea88:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2ea8c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2ea8e:	605c      	str	r4, [r3, #4]
}
   2ea90:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   2ea92:	686a      	ldr	r2, [r5, #4]
   2ea94:	4293      	cmp	r3, r2
   2ea96:	d002      	beq.n	2ea9e <add_to_waitq_locked+0x48>
   2ea98:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2ea9a:	2b00      	cmp	r3, #0
   2ea9c:	d1ec      	bne.n	2ea78 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   2ea9e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2eaa0:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2eaa4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2eaa6:	606c      	str	r4, [r5, #4]
}
   2eaa8:	e7f2      	b.n	2ea90 <add_to_waitq_locked+0x3a>

0002eaaa <z_unpend_first_thread>:
{
   2eaaa:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2eaac:	f04f 0320 	mov.w	r3, #32
   2eab0:	f3ef 8511 	mrs	r5, BASEPRI
   2eab4:	f383 8812 	msr	BASEPRI_MAX, r3
   2eab8:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2eabc:	f7ff ff93 	bl	2e9e6 <z_priq_dumb_best>
		if (thread != NULL) {
   2eac0:	4604      	mov	r4, r0
   2eac2:	b120      	cbz	r0, 2eace <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   2eac4:	f7ff ff42 	bl	2e94c <unpend_thread_no_timeout>
   2eac8:	3018      	adds	r0, #24
   2eaca:	f000 f833 	bl	2eb34 <z_abort_timeout>
	__asm__ volatile(
   2eace:	f385 8811 	msr	BASEPRI, r5
   2ead2:	f3bf 8f6f 	isb	sy
}
   2ead6:	4620      	mov	r0, r4
   2ead8:	bd38      	pop	{r3, r4, r5, pc}

0002eada <z_unpend_all>:
{
   2eada:	b538      	push	{r3, r4, r5, lr}
   2eadc:	4605      	mov	r5, r0
	int need_sched = 0;
   2eade:	2000      	movs	r0, #0
	return list->head == list;
   2eae0:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2eae2:	42a5      	cmp	r5, r4
   2eae4:	d000      	beq.n	2eae8 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2eae6:	b904      	cbnz	r4, 2eaea <z_unpend_all+0x10>
}
   2eae8:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2eaea:	4620      	mov	r0, r4
   2eaec:	f7ff ff51 	bl	2e992 <z_unpend_thread>
		z_ready_thread(thread);
   2eaf0:	4620      	mov	r0, r4
   2eaf2:	f7ff ff7e 	bl	2e9f2 <z_ready_thread>
		need_sched = 1;
   2eaf6:	2001      	movs	r0, #1
   2eaf8:	e7f2      	b.n	2eae0 <z_unpend_all+0x6>

0002eafa <z_sched_wake>:
{
   2eafa:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2eafc:	f04f 0320 	mov.w	r3, #32
   2eb00:	f3ef 8511 	mrs	r5, BASEPRI
   2eb04:	f383 8812 	msr	BASEPRI_MAX, r3
   2eb08:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2eb0c:	f7ff ff6b 	bl	2e9e6 <z_priq_dumb_best>
		if (thread != NULL) {
   2eb10:	4604      	mov	r4, r0
   2eb12:	b150      	cbz	r0, 2eb2a <z_sched_wake+0x30>
   2eb14:	67c1      	str	r1, [r0, #124]	; 0x7c
   2eb16:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   2eb18:	f7ff ff18 	bl	2e94c <unpend_thread_no_timeout>
   2eb1c:	3018      	adds	r0, #24
   2eb1e:	f000 f809 	bl	2eb34 <z_abort_timeout>
			ready_thread(thread);
   2eb22:	4620      	mov	r0, r4
   2eb24:	f7f7 fc3e 	bl	263a4 <ready_thread>
			ret = true;
   2eb28:	2001      	movs	r0, #1
	__asm__ volatile(
   2eb2a:	f385 8811 	msr	BASEPRI, r5
   2eb2e:	f3bf 8f6f 	isb	sy
}
   2eb32:	bd38      	pop	{r3, r4, r5, pc}

0002eb34 <z_abort_timeout>:
{
   2eb34:	b510      	push	{r4, lr}
	__asm__ volatile(
   2eb36:	f04f 0220 	mov.w	r2, #32
   2eb3a:	f3ef 8411 	mrs	r4, BASEPRI
   2eb3e:	f382 8812 	msr	BASEPRI_MAX, r2
   2eb42:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2eb46:	6803      	ldr	r3, [r0, #0]
   2eb48:	b13b      	cbz	r3, 2eb5a <z_abort_timeout+0x26>
			remove_timeout(to);
   2eb4a:	f7f7 fed9 	bl	26900 <remove_timeout>
			ret = 0;
   2eb4e:	2000      	movs	r0, #0
	__asm__ volatile(
   2eb50:	f384 8811 	msr	BASEPRI, r4
   2eb54:	f3bf 8f6f 	isb	sy
}
   2eb58:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2eb5a:	f06f 0015 	mvn.w	r0, #21
   2eb5e:	e7f7      	b.n	2eb50 <z_abort_timeout+0x1c>

0002eb60 <z_get_next_timeout_expiry>:
{
   2eb60:	b510      	push	{r4, lr}
	__asm__ volatile(
   2eb62:	f04f 0320 	mov.w	r3, #32
   2eb66:	f3ef 8411 	mrs	r4, BASEPRI
   2eb6a:	f383 8812 	msr	BASEPRI_MAX, r3
   2eb6e:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2eb72:	f7f7 fe9f 	bl	268b4 <next_timeout>
	__asm__ volatile(
   2eb76:	f384 8811 	msr	BASEPRI, r4
   2eb7a:	f3bf 8f6f 	isb	sy
}
   2eb7e:	bd10      	pop	{r4, pc}

0002eb80 <z_set_timeout_expiry>:
{
   2eb80:	b570      	push	{r4, r5, r6, lr}
   2eb82:	4604      	mov	r4, r0
   2eb84:	460d      	mov	r5, r1
	__asm__ volatile(
   2eb86:	f04f 0320 	mov.w	r3, #32
   2eb8a:	f3ef 8611 	mrs	r6, BASEPRI
   2eb8e:	f383 8812 	msr	BASEPRI_MAX, r3
   2eb92:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   2eb96:	f7f7 fe8d 	bl	268b4 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2eb9a:	2801      	cmp	r0, #1
   2eb9c:	dd05      	ble.n	2ebaa <z_set_timeout_expiry+0x2a>
   2eb9e:	42a0      	cmp	r0, r4
   2eba0:	db03      	blt.n	2ebaa <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2eba2:	4629      	mov	r1, r5
   2eba4:	4620      	mov	r0, r4
   2eba6:	f7f5 feaf 	bl	24908 <sys_clock_set_timeout>
	__asm__ volatile(
   2ebaa:	f386 8811 	msr	BASEPRI, r6
   2ebae:	f3bf 8f6f 	isb	sy
}
   2ebb2:	bd70      	pop	{r4, r5, r6, pc}

0002ebb4 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2ebb4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2ebb6:	f7f7 ff93 	bl	26ae0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2ebba:	bd08      	pop	{r3, pc}

0002ebbc <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2ebbc:	f7f7 bf90 	b.w	26ae0 <sys_clock_tick_get>

0002ebc0 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2ebc0:	b108      	cbz	r0, 2ebc6 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2ebc2:	f7e1 b81d 	b.w	fc00 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2ebc6:	4770      	bx	lr

0002ebc8 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2ebc8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2ebcc:	bf08      	it	eq
   2ebce:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2ebd2:	b538      	push	{r3, r4, r5, lr}
   2ebd4:	4605      	mov	r5, r0
   2ebd6:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2ebd8:	d01d      	beq.n	2ec16 <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2ebda:	ea51 0300 	orrs.w	r3, r1, r0
   2ebde:	d103      	bne.n	2ebe8 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2ebe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2ebe4:	f7f7 bf7c 	b.w	26ae0 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2ebe8:	f06f 0301 	mvn.w	r3, #1
   2ebec:	1a18      	subs	r0, r3, r0
   2ebee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ebf2:	eb63 0101 	sbc.w	r1, r3, r1
   2ebf6:	2900      	cmp	r1, #0
   2ebf8:	da0c      	bge.n	2ec14 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   2ebfa:	f7f7 ff71 	bl	26ae0 <sys_clock_tick_get>
   2ebfe:	2d01      	cmp	r5, #1
   2ec00:	4622      	mov	r2, r4
   2ec02:	f174 0400 	sbcs.w	r4, r4, #0
   2ec06:	462b      	mov	r3, r5
   2ec08:	bfbc      	itt	lt
   2ec0a:	2301      	movlt	r3, #1
   2ec0c:	2200      	movlt	r2, #0
   2ec0e:	1818      	adds	r0, r3, r0
   2ec10:	eb41 0102 	adc.w	r1, r1, r2
}
   2ec14:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2ec16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ec1a:	4601      	mov	r1, r0
   2ec1c:	e7fa      	b.n	2ec14 <sys_clock_timeout_end_calc+0x4c>

0002ec1e <add_event>:
{
   2ec1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ec20:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2ec22:	e9d0 1300 	ldrd	r1, r3, [r0]
   2ec26:	4288      	cmp	r0, r1
   2ec28:	4604      	mov	r4, r0
   2ec2a:	d00d      	beq.n	2ec48 <add_event+0x2a>
	if ((pending == NULL) ||
   2ec2c:	b163      	cbz	r3, 2ec48 <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2ec2e:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2ec30:	b100      	cbz	r0, 2ec34 <add_event+0x16>
   2ec32:	3860      	subs	r0, #96	; 0x60
   2ec34:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2ec38:	4639      	mov	r1, r7
   2ec3a:	f7ff fe91 	bl	2e960 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2ec3e:	2800      	cmp	r0, #0
   2ec40:	dc02      	bgt.n	2ec48 <add_event+0x2a>
	return list->head == list;
   2ec42:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ec44:	42b4      	cmp	r4, r6
   2ec46:	d109      	bne.n	2ec5c <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   2ec48:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2ec4a:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2ec4e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2ec50:	6065      	str	r5, [r4, #4]
}
   2ec52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2ec54:	6863      	ldr	r3, [r4, #4]
   2ec56:	42b3      	cmp	r3, r6
   2ec58:	d0f6      	beq.n	2ec48 <add_event+0x2a>
   2ec5a:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2ec5c:	2e00      	cmp	r6, #0
   2ec5e:	d0f3      	beq.n	2ec48 <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   2ec60:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2ec62:	b101      	cbz	r1, 2ec66 <add_event+0x48>
   2ec64:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2ec66:	4638      	mov	r0, r7
   2ec68:	f7ff fe7a 	bl	2e960 <z_sched_prio_cmp>
   2ec6c:	2800      	cmp	r0, #0
   2ec6e:	ddf1      	ble.n	2ec54 <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   2ec70:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2ec72:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2ec76:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2ec78:	6075      	str	r5, [r6, #4]
			return;
   2ec7a:	e7ea      	b.n	2ec52 <add_event+0x34>

0002ec7c <register_events>:
{
   2ec7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2ec80:	2500      	movs	r5, #0
{
   2ec82:	468b      	mov	fp, r1
   2ec84:	4614      	mov	r4, r2
   2ec86:	461f      	mov	r7, r3
   2ec88:	4682      	mov	sl, r0
	int events_registered = 0;
   2ec8a:	462e      	mov	r6, r5
	event->poller = NULL;
   2ec8c:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   2ec8e:	455d      	cmp	r5, fp
   2ec90:	db02      	blt.n	2ec98 <register_events+0x1c>
}
   2ec92:	4630      	mov	r0, r6
   2ec94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   2ec98:	f04f 0320 	mov.w	r3, #32
   2ec9c:	f3ef 8911 	mrs	r9, BASEPRI
   2eca0:	f383 8812 	msr	BASEPRI_MAX, r3
   2eca4:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2eca8:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2ecac:	f003 031f 	and.w	r3, r3, #31
   2ecb0:	3b01      	subs	r3, #1
   2ecb2:	2b07      	cmp	r3, #7
   2ecb4:	d80f      	bhi.n	2ecd6 <register_events+0x5a>
   2ecb6:	e8df f003 	tbb	[pc, r3]
   2ecba:	041e      	.short	0x041e
   2ecbc:	0e0e0a0e 	.word	0x0e0e0a0e
   2ecc0:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   2ecc2:	f8da 3010 	ldr.w	r3, [sl, #16]
   2ecc6:	689b      	ldr	r3, [r3, #8]
   2ecc8:	b12b      	cbz	r3, 2ecd6 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2ecca:	2302      	movs	r3, #2
   2eccc:	e020      	b.n	2ed10 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   2ecce:	f8da 3010 	ldr.w	r3, [sl, #16]
   2ecd2:	681b      	ldr	r3, [r3, #0]
   2ecd4:	bb8b      	cbnz	r3, 2ed3a <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   2ecd6:	bb47      	cbnz	r7, 2ed2a <register_events+0xae>
   2ecd8:	7823      	ldrb	r3, [r4, #0]
   2ecda:	b333      	cbz	r3, 2ed2a <register_events+0xae>
	switch (event->type) {
   2ecdc:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2ece0:	f003 031f 	and.w	r3, r3, #31
   2ece4:	3b01      	subs	r3, #1
   2ece6:	2b07      	cmp	r3, #7
   2ece8:	d830      	bhi.n	2ed4c <register_events+0xd0>
   2ecea:	e8df f003 	tbb	[pc, r3]
   2ecee:	2833      	.short	0x2833
   2ecf0:	2f2f282f 	.word	0x2f2f282f
   2ecf4:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   2ecf6:	f8da 3010 	ldr.w	r3, [sl, #16]
   2ecfa:	689b      	ldr	r3, [r3, #8]
   2ecfc:	2b00      	cmp	r3, #0
   2ecfe:	d0ea      	beq.n	2ecd6 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   2ed00:	2301      	movs	r3, #1
   2ed02:	e005      	b.n	2ed10 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   2ed04:	f8da 3010 	ldr.w	r3, [sl, #16]
   2ed08:	6a1b      	ldr	r3, [r3, #32]
   2ed0a:	2b00      	cmp	r3, #0
   2ed0c:	d0e3      	beq.n	2ecd6 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2ed0e:	2310      	movs	r3, #16
	event->state |= state;
   2ed10:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   2ed14:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   2ed18:	f3c2 3145 	ubfx	r1, r2, #13, #6
   2ed1c:	430b      	orrs	r3, r1
   2ed1e:	f363 3252 	bfi	r2, r3, #13, #6
   2ed22:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   2ed26:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2ed2a:	f389 8811 	msr	BASEPRI, r9
   2ed2e:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2ed32:	3501      	adds	r5, #1
   2ed34:	f10a 0a14 	add.w	sl, sl, #20
   2ed38:	e7a9      	b.n	2ec8e <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2ed3a:	2304      	movs	r3, #4
   2ed3c:	e7e8      	b.n	2ed10 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   2ed3e:	f8da 0010 	ldr.w	r0, [sl, #16]
   2ed42:	4622      	mov	r2, r4
   2ed44:	4651      	mov	r1, sl
   2ed46:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   2ed48:	f7ff ff69 	bl	2ec1e <add_event>
	event->poller = poller;
   2ed4c:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   2ed50:	3601      	adds	r6, #1
   2ed52:	e7ea      	b.n	2ed2a <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   2ed54:	f8da 0010 	ldr.w	r0, [sl, #16]
   2ed58:	4622      	mov	r2, r4
   2ed5a:	4651      	mov	r1, sl
   2ed5c:	e7f4      	b.n	2ed48 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   2ed5e:	f8da 0010 	ldr.w	r0, [sl, #16]
   2ed62:	4622      	mov	r2, r4
   2ed64:	4651      	mov	r1, sl
   2ed66:	3024      	adds	r0, #36	; 0x24
   2ed68:	e7ee      	b.n	2ed48 <register_events+0xcc>

0002ed6a <signal_poll_event>:
{
   2ed6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2ed6e:	6884      	ldr	r4, [r0, #8]
{
   2ed70:	4605      	mov	r5, r0
   2ed72:	460e      	mov	r6, r1
	if (poller != NULL) {
   2ed74:	b144      	cbz	r4, 2ed88 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2ed76:	7863      	ldrb	r3, [r4, #1]
   2ed78:	2b01      	cmp	r3, #1
   2ed7a:	d136      	bne.n	2edea <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   2ed7c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2ed80:	f013 0302 	ands.w	r3, r3, #2
   2ed84:	d10a      	bne.n	2ed9c <signal_poll_event+0x32>
		poller->is_polling = false;
   2ed86:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   2ed88:	68eb      	ldr	r3, [r5, #12]
   2ed8a:	f3c3 3145 	ubfx	r1, r3, #13, #6
   2ed8e:	430e      	orrs	r6, r1
	event->poller = NULL;
   2ed90:	2000      	movs	r0, #0
	event->state |= state;
   2ed92:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   2ed96:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2ed98:	60eb      	str	r3, [r5, #12]
	return retcode;
   2ed9a:	e00b      	b.n	2edb4 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   2ed9c:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2eda0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2eda4:	bf08      	it	eq
   2eda6:	f112 0f02 	cmneq.w	r2, #2
   2edaa:	d105      	bne.n	2edb8 <signal_poll_event+0x4e>
		poller->is_polling = false;
   2edac:	2300      	movs	r3, #0
   2edae:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   2edb0:	f06f 000a 	mvn.w	r0, #10
}
   2edb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2edb8:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2edbc:	4640      	mov	r0, r8
   2edbe:	f7ff fde8 	bl	2e992 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2edc2:	2e08      	cmp	r6, #8
   2edc4:	bf0c      	ite	eq
   2edc6:	f06f 0303 	mvneq.w	r3, #3
   2edca:	2300      	movne	r3, #0
   2edcc:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2edce:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2edd2:	06db      	lsls	r3, r3, #27
   2edd4:	d102      	bne.n	2eddc <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   2edd6:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2edda:	b10f      	cbz	r7, 2ede0 <signal_poll_event+0x76>
		poller->is_polling = false;
   2eddc:	2300      	movs	r3, #0
   2edde:	e7d2      	b.n	2ed86 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   2ede0:	4640      	mov	r0, r8
   2ede2:	f7ff fe06 	bl	2e9f2 <z_ready_thread>
		poller->is_polling = false;
   2ede6:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2ede8:	e7ce      	b.n	2ed88 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2edea:	2b02      	cmp	r3, #2
   2edec:	d1f6      	bne.n	2eddc <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2edee:	7823      	ldrb	r3, [r4, #0]
   2edf0:	2b00      	cmp	r3, #0
   2edf2:	d0c9      	beq.n	2ed88 <signal_poll_event+0x1e>
   2edf4:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2edf8:	2f00      	cmp	r7, #0
   2edfa:	d0f4      	beq.n	2ede6 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2edfc:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2ee00:	f1a4 0914 	sub.w	r9, r4, #20
   2ee04:	f104 0014 	add.w	r0, r4, #20
   2ee08:	f7ff fe94 	bl	2eb34 <z_abort_timeout>
		twork->poll_result = 0;
   2ee0c:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   2ee10:	4649      	mov	r1, r9
   2ee12:	4638      	mov	r0, r7
   2ee14:	f7ff fd29 	bl	2e86a <k_work_submit_to_queue>
		poller->is_polling = false;
   2ee18:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2ee1c:	e7b4      	b.n	2ed88 <signal_poll_event+0x1e>

0002ee1e <clear_event_registrations>:
	while (num_events--) {
   2ee1e:	2314      	movs	r3, #20
{
   2ee20:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ee22:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   2ee26:	2400      	movs	r4, #0
   2ee28:	2601      	movs	r6, #1
	while (num_events--) {
   2ee2a:	b901      	cbnz	r1, 2ee2e <clear_event_registrations+0x10>
}
   2ee2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   2ee2e:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   2ee32:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   2ee36:	f003 031f 	and.w	r3, r3, #31
   2ee3a:	2b08      	cmp	r3, #8
   2ee3c:	f1a0 0714 	sub.w	r7, r0, #20
   2ee40:	d80d      	bhi.n	2ee5e <clear_event_registrations+0x40>
   2ee42:	fa06 f303 	lsl.w	r3, r6, r3
   2ee46:	f413 7f8b 	tst.w	r3, #278	; 0x116
   2ee4a:	d008      	beq.n	2ee5e <clear_event_registrations+0x40>
	return node->next != NULL;
   2ee4c:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2ee50:	b12b      	cbz	r3, 2ee5e <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   2ee52:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   2ee56:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   2ee58:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2ee5a:	e940 4405 	strd	r4, r4, [r0, #-20]
   2ee5e:	f382 8811 	msr	BASEPRI, r2
   2ee62:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2ee66:	f04f 0320 	mov.w	r3, #32
   2ee6a:	f3ef 8211 	mrs	r2, BASEPRI
   2ee6e:	f383 8812 	msr	BASEPRI_MAX, r3
   2ee72:	f3bf 8f6f 	isb	sy
   2ee76:	3901      	subs	r1, #1
   2ee78:	4638      	mov	r0, r7
   2ee7a:	e7d6      	b.n	2ee2a <clear_event_registrations+0xc>

0002ee7c <k_poll_event_init>:
{
   2ee7c:	b510      	push	{r4, lr}
	event->type = type;
   2ee7e:	04d2      	lsls	r2, r2, #19
   2ee80:	0209      	lsls	r1, r1, #8
   2ee82:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   2ee86:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   2ee8a:	430a      	orrs	r2, r1
   2ee8c:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   2ee8e:	2400      	movs	r4, #0
	event->type = type;
   2ee90:	430a      	orrs	r2, r1
	event->obj = obj;
   2ee92:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   2ee96:	6084      	str	r4, [r0, #8]
}
   2ee98:	bd10      	pop	{r4, pc}

0002ee9a <z_handle_obj_poll_events>:
{
   2ee9a:	4603      	mov	r3, r0
	return list->head == list;
   2ee9c:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2ee9e:	4283      	cmp	r3, r0
   2eea0:	d008      	beq.n	2eeb4 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2eea2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2eea6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2eea8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2eeaa:	2300      	movs	r3, #0
	node->prev = NULL;
   2eeac:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2eeb0:	f7ff bf5b 	b.w	2ed6a <signal_poll_event>
}
   2eeb4:	4770      	bx	lr

0002eeb6 <k_free>:
	if (ptr != NULL) {
   2eeb6:	b120      	cbz	r0, 2eec2 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2eeb8:	1f01      	subs	r1, r0, #4
   2eeba:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2eebe:	f7ff bb17 	b.w	2e4f0 <k_heap_free>
}
   2eec2:	4770      	bx	lr

0002eec4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   2eec4:	f7f5 bdb8 	b.w	24a38 <SystemInit>
