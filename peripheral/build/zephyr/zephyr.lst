
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_table-0x200>:
	...

0000c200 <_vector_table>:
    c200:	40 51 00 20 59 10 01 00 71 de 02 00 2d 10 01 00     @Q. Y...q...-...
    c210:	2d 10 01 00 2d 10 01 00 2d 10 01 00 00 00 00 00     -...-...-.......
	...
    c22c:	ad 09 01 00 2d 10 01 00 00 00 00 00 59 09 01 00     ....-.......Y...
    c23c:	2d 10 01 00                                         -...

0000c240 <_irq_vector_table>:
    c240:	5d 0a 01 00 09 4b 02 00 5d 0a 01 00 5d 0a 01 00     ]....K..]...]...
    c250:	5d 0a 01 00 5d 0a 01 00 5d 0a 01 00 5d 0a 01 00     ]...]...]...]...
    c260:	5d 0a 01 00 5d 0a 01 00 5d 0a 01 00 5d 0a 01 00     ]...]...]...]...
    c270:	5d 0a 01 00 5d 0a 01 00 5d 0a 01 00 5d 0a 01 00     ]...]...]...]...
    c280:	5d 0a 01 00 5d 0a 01 00 5d 0a 01 00 5d 0a 01 00     ]...]...]...]...
    c290:	5d 0a 01 00 5d 0a 01 00 5d 0a 01 00 5d 0a 01 00     ]...]...]...]...
    c2a0:	5d 0a 01 00 5d 0a 01 00 5d 0a 01 00 5d 0a 01 00     ]...]...]...]...
    c2b0:	5d 0a 01 00 5d 0a 01 00 5d 0a 01 00 5d 0a 01 00     ]...]...]...]...
    c2c0:	5d 0a 01 00 5d 0a 01 00 5d 0a 01 00 5d 0a 01 00     ]...]...]...]...
    c2d0:	5d 0a 01 00 5d 0a 01 00 5d 0a 01 00 5d 0a 01 00     ]...]...]...]...
    c2e0:	5d 0a 01 00 5d 0a 01 00 5d 0a 01 00 5d 0a 01 00     ]...]...]...]...
    c2f0:	5d 0a 01 00 5d 0a 01 00 5d 0a 01 00 5d 0a 01 00     ]...]...]...]...

Disassembly of section text:

0000c300 <__aeabi_uldivmod>:
    c300:	b953      	cbnz	r3, c318 <__aeabi_uldivmod+0x18>
    c302:	b94a      	cbnz	r2, c318 <__aeabi_uldivmod+0x18>
    c304:	2900      	cmp	r1, #0
    c306:	bf08      	it	eq
    c308:	2800      	cmpeq	r0, #0
    c30a:	bf1c      	itt	ne
    c30c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    c310:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c314:	f000 b80c 	b.w	c330 <__aeabi_idiv0>
    c318:	f1ad 0c08 	sub.w	ip, sp, #8
    c31c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c320:	f000 f808 	bl	c334 <__udivmoddi4>
    c324:	f8dd e004 	ldr.w	lr, [sp, #4]
    c328:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c32c:	b004      	add	sp, #16
    c32e:	4770      	bx	lr

0000c330 <__aeabi_idiv0>:
    c330:	4770      	bx	lr
    c332:	bf00      	nop

0000c334 <__udivmoddi4>:
    c334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c338:	4607      	mov	r7, r0
    c33a:	468c      	mov	ip, r1
    c33c:	4608      	mov	r0, r1
    c33e:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c340:	4615      	mov	r5, r2
    c342:	463c      	mov	r4, r7
    c344:	4619      	mov	r1, r3
    c346:	2b00      	cmp	r3, #0
    c348:	f040 80c6 	bne.w	c4d8 <__udivmoddi4+0x1a4>
    c34c:	4282      	cmp	r2, r0
    c34e:	fab2 f782 	clz	r7, r2
    c352:	d946      	bls.n	c3e2 <__udivmoddi4+0xae>
    c354:	b14f      	cbz	r7, c36a <__udivmoddi4+0x36>
    c356:	f1c7 0e20 	rsb	lr, r7, #32
    c35a:	fa24 fe0e 	lsr.w	lr, r4, lr
    c35e:	fa00 f307 	lsl.w	r3, r0, r7
    c362:	40bd      	lsls	r5, r7
    c364:	ea4e 0c03 	orr.w	ip, lr, r3
    c368:	40bc      	lsls	r4, r7
    c36a:	ea4f 4815 	mov.w	r8, r5, lsr #16
    c36e:	fa1f fe85 	uxth.w	lr, r5
    c372:	fbbc f9f8 	udiv	r9, ip, r8
    c376:	0c22      	lsrs	r2, r4, #16
    c378:	fb08 c319 	mls	r3, r8, r9, ip
    c37c:	fb09 fa0e 	mul.w	sl, r9, lr
    c380:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    c384:	459a      	cmp	sl, r3
    c386:	d928      	bls.n	c3da <__udivmoddi4+0xa6>
    c388:	18eb      	adds	r3, r5, r3
    c38a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    c38e:	d204      	bcs.n	c39a <__udivmoddi4+0x66>
    c390:	459a      	cmp	sl, r3
    c392:	d902      	bls.n	c39a <__udivmoddi4+0x66>
    c394:	f1a9 0002 	sub.w	r0, r9, #2
    c398:	442b      	add	r3, r5
    c39a:	eba3 030a 	sub.w	r3, r3, sl
    c39e:	b2a4      	uxth	r4, r4
    c3a0:	fbb3 f2f8 	udiv	r2, r3, r8
    c3a4:	fb08 3312 	mls	r3, r8, r2, r3
    c3a8:	fb02 fe0e 	mul.w	lr, r2, lr
    c3ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c3b0:	45a6      	cmp	lr, r4
    c3b2:	d914      	bls.n	c3de <__udivmoddi4+0xaa>
    c3b4:	192c      	adds	r4, r5, r4
    c3b6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
    c3ba:	d203      	bcs.n	c3c4 <__udivmoddi4+0x90>
    c3bc:	45a6      	cmp	lr, r4
    c3be:	d901      	bls.n	c3c4 <__udivmoddi4+0x90>
    c3c0:	1e93      	subs	r3, r2, #2
    c3c2:	442c      	add	r4, r5
    c3c4:	eba4 040e 	sub.w	r4, r4, lr
    c3c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c3cc:	b11e      	cbz	r6, c3d6 <__udivmoddi4+0xa2>
    c3ce:	40fc      	lsrs	r4, r7
    c3d0:	2300      	movs	r3, #0
    c3d2:	6034      	str	r4, [r6, #0]
    c3d4:	6073      	str	r3, [r6, #4]
    c3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c3da:	4648      	mov	r0, r9
    c3dc:	e7dd      	b.n	c39a <__udivmoddi4+0x66>
    c3de:	4613      	mov	r3, r2
    c3e0:	e7f0      	b.n	c3c4 <__udivmoddi4+0x90>
    c3e2:	b902      	cbnz	r2, c3e6 <__udivmoddi4+0xb2>
    c3e4:	deff      	udf	#255	; 0xff
    c3e6:	bb87      	cbnz	r7, c44a <__udivmoddi4+0x116>
    c3e8:	1a83      	subs	r3, r0, r2
    c3ea:	2101      	movs	r1, #1
    c3ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c3f0:	b2aa      	uxth	r2, r5
    c3f2:	fbb3 fcfe 	udiv	ip, r3, lr
    c3f6:	0c20      	lsrs	r0, r4, #16
    c3f8:	fb0e 331c 	mls	r3, lr, ip, r3
    c3fc:	fb0c f802 	mul.w	r8, ip, r2
    c400:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    c404:	4598      	cmp	r8, r3
    c406:	d963      	bls.n	c4d0 <__udivmoddi4+0x19c>
    c408:	18eb      	adds	r3, r5, r3
    c40a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    c40e:	d204      	bcs.n	c41a <__udivmoddi4+0xe6>
    c410:	4598      	cmp	r8, r3
    c412:	d902      	bls.n	c41a <__udivmoddi4+0xe6>
    c414:	f1ac 0002 	sub.w	r0, ip, #2
    c418:	442b      	add	r3, r5
    c41a:	eba3 0308 	sub.w	r3, r3, r8
    c41e:	b2a4      	uxth	r4, r4
    c420:	fbb3 fcfe 	udiv	ip, r3, lr
    c424:	fb0e 331c 	mls	r3, lr, ip, r3
    c428:	fb0c f202 	mul.w	r2, ip, r2
    c42c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c430:	42a2      	cmp	r2, r4
    c432:	d94f      	bls.n	c4d4 <__udivmoddi4+0x1a0>
    c434:	192c      	adds	r4, r5, r4
    c436:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    c43a:	d204      	bcs.n	c446 <__udivmoddi4+0x112>
    c43c:	42a2      	cmp	r2, r4
    c43e:	d902      	bls.n	c446 <__udivmoddi4+0x112>
    c440:	f1ac 0302 	sub.w	r3, ip, #2
    c444:	442c      	add	r4, r5
    c446:	1aa4      	subs	r4, r4, r2
    c448:	e7be      	b.n	c3c8 <__udivmoddi4+0x94>
    c44a:	f1c7 0c20 	rsb	ip, r7, #32
    c44e:	fa20 f80c 	lsr.w	r8, r0, ip
    c452:	fa00 f307 	lsl.w	r3, r0, r7
    c456:	fa24 fc0c 	lsr.w	ip, r4, ip
    c45a:	40bd      	lsls	r5, r7
    c45c:	ea4c 0203 	orr.w	r2, ip, r3
    c460:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c464:	b2ab      	uxth	r3, r5
    c466:	fbb8 fcfe 	udiv	ip, r8, lr
    c46a:	0c11      	lsrs	r1, r2, #16
    c46c:	fb0e 801c 	mls	r0, lr, ip, r8
    c470:	fb0c f903 	mul.w	r9, ip, r3
    c474:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    c478:	4581      	cmp	r9, r0
    c47a:	fa04 f407 	lsl.w	r4, r4, r7
    c47e:	d923      	bls.n	c4c8 <__udivmoddi4+0x194>
    c480:	1828      	adds	r0, r5, r0
    c482:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    c486:	d204      	bcs.n	c492 <__udivmoddi4+0x15e>
    c488:	4581      	cmp	r9, r0
    c48a:	d902      	bls.n	c492 <__udivmoddi4+0x15e>
    c48c:	f1ac 0102 	sub.w	r1, ip, #2
    c490:	4428      	add	r0, r5
    c492:	eba0 0009 	sub.w	r0, r0, r9
    c496:	b292      	uxth	r2, r2
    c498:	fbb0 fcfe 	udiv	ip, r0, lr
    c49c:	fb0e 001c 	mls	r0, lr, ip, r0
    c4a0:	fb0c f803 	mul.w	r8, ip, r3
    c4a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
    c4a8:	4598      	cmp	r8, r3
    c4aa:	d90f      	bls.n	c4cc <__udivmoddi4+0x198>
    c4ac:	18eb      	adds	r3, r5, r3
    c4ae:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
    c4b2:	d204      	bcs.n	c4be <__udivmoddi4+0x18a>
    c4b4:	4598      	cmp	r8, r3
    c4b6:	d902      	bls.n	c4be <__udivmoddi4+0x18a>
    c4b8:	f1ac 0202 	sub.w	r2, ip, #2
    c4bc:	442b      	add	r3, r5
    c4be:	eba3 0308 	sub.w	r3, r3, r8
    c4c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    c4c6:	e791      	b.n	c3ec <__udivmoddi4+0xb8>
    c4c8:	4661      	mov	r1, ip
    c4ca:	e7e2      	b.n	c492 <__udivmoddi4+0x15e>
    c4cc:	4662      	mov	r2, ip
    c4ce:	e7f6      	b.n	c4be <__udivmoddi4+0x18a>
    c4d0:	4660      	mov	r0, ip
    c4d2:	e7a2      	b.n	c41a <__udivmoddi4+0xe6>
    c4d4:	4663      	mov	r3, ip
    c4d6:	e7b6      	b.n	c446 <__udivmoddi4+0x112>
    c4d8:	4283      	cmp	r3, r0
    c4da:	d905      	bls.n	c4e8 <__udivmoddi4+0x1b4>
    c4dc:	b10e      	cbz	r6, c4e2 <__udivmoddi4+0x1ae>
    c4de:	e9c6 7000 	strd	r7, r0, [r6]
    c4e2:	2100      	movs	r1, #0
    c4e4:	4608      	mov	r0, r1
    c4e6:	e776      	b.n	c3d6 <__udivmoddi4+0xa2>
    c4e8:	fab3 f183 	clz	r1, r3
    c4ec:	b981      	cbnz	r1, c510 <__udivmoddi4+0x1dc>
    c4ee:	4283      	cmp	r3, r0
    c4f0:	d301      	bcc.n	c4f6 <__udivmoddi4+0x1c2>
    c4f2:	42ba      	cmp	r2, r7
    c4f4:	d80a      	bhi.n	c50c <__udivmoddi4+0x1d8>
    c4f6:	1abc      	subs	r4, r7, r2
    c4f8:	eb60 0303 	sbc.w	r3, r0, r3
    c4fc:	2001      	movs	r0, #1
    c4fe:	469c      	mov	ip, r3
    c500:	2e00      	cmp	r6, #0
    c502:	d068      	beq.n	c5d6 <__udivmoddi4+0x2a2>
    c504:	e9c6 4c00 	strd	r4, ip, [r6]
    c508:	2100      	movs	r1, #0
    c50a:	e764      	b.n	c3d6 <__udivmoddi4+0xa2>
    c50c:	4608      	mov	r0, r1
    c50e:	e7f7      	b.n	c500 <__udivmoddi4+0x1cc>
    c510:	f1c1 0c20 	rsb	ip, r1, #32
    c514:	408b      	lsls	r3, r1
    c516:	fa22 f40c 	lsr.w	r4, r2, ip
    c51a:	431c      	orrs	r4, r3
    c51c:	fa02 f501 	lsl.w	r5, r2, r1
    c520:	fa00 f301 	lsl.w	r3, r0, r1
    c524:	fa27 f20c 	lsr.w	r2, r7, ip
    c528:	fa20 fb0c 	lsr.w	fp, r0, ip
    c52c:	ea4f 4914 	mov.w	r9, r4, lsr #16
    c530:	4313      	orrs	r3, r2
    c532:	fbbb f8f9 	udiv	r8, fp, r9
    c536:	fa1f fe84 	uxth.w	lr, r4
    c53a:	fb09 bb18 	mls	fp, r9, r8, fp
    c53e:	0c1a      	lsrs	r2, r3, #16
    c540:	fb08 fa0e 	mul.w	sl, r8, lr
    c544:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
    c548:	4592      	cmp	sl, r2
    c54a:	fa07 f701 	lsl.w	r7, r7, r1
    c54e:	d93e      	bls.n	c5ce <__udivmoddi4+0x29a>
    c550:	18a2      	adds	r2, r4, r2
    c552:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    c556:	d204      	bcs.n	c562 <__udivmoddi4+0x22e>
    c558:	4592      	cmp	sl, r2
    c55a:	d902      	bls.n	c562 <__udivmoddi4+0x22e>
    c55c:	f1a8 0002 	sub.w	r0, r8, #2
    c560:	4422      	add	r2, r4
    c562:	eba2 020a 	sub.w	r2, r2, sl
    c566:	b29b      	uxth	r3, r3
    c568:	fbb2 f8f9 	udiv	r8, r2, r9
    c56c:	fb09 2218 	mls	r2, r9, r8, r2
    c570:	fb08 fe0e 	mul.w	lr, r8, lr
    c574:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    c578:	4596      	cmp	lr, r2
    c57a:	d92a      	bls.n	c5d2 <__udivmoddi4+0x29e>
    c57c:	18a2      	adds	r2, r4, r2
    c57e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    c582:	d204      	bcs.n	c58e <__udivmoddi4+0x25a>
    c584:	4596      	cmp	lr, r2
    c586:	d902      	bls.n	c58e <__udivmoddi4+0x25a>
    c588:	f1a8 0302 	sub.w	r3, r8, #2
    c58c:	4422      	add	r2, r4
    c58e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c592:	fba0 9305 	umull	r9, r3, r0, r5
    c596:	eba2 020e 	sub.w	r2, r2, lr
    c59a:	429a      	cmp	r2, r3
    c59c:	46ce      	mov	lr, r9
    c59e:	4698      	mov	r8, r3
    c5a0:	d302      	bcc.n	c5a8 <__udivmoddi4+0x274>
    c5a2:	d106      	bne.n	c5b2 <__udivmoddi4+0x27e>
    c5a4:	454f      	cmp	r7, r9
    c5a6:	d204      	bcs.n	c5b2 <__udivmoddi4+0x27e>
    c5a8:	ebb9 0e05 	subs.w	lr, r9, r5
    c5ac:	eb63 0804 	sbc.w	r8, r3, r4
    c5b0:	3801      	subs	r0, #1
    c5b2:	b186      	cbz	r6, c5d6 <__udivmoddi4+0x2a2>
    c5b4:	ebb7 030e 	subs.w	r3, r7, lr
    c5b8:	eb62 0708 	sbc.w	r7, r2, r8
    c5bc:	fa07 fc0c 	lsl.w	ip, r7, ip
    c5c0:	40cb      	lsrs	r3, r1
    c5c2:	ea4c 0303 	orr.w	r3, ip, r3
    c5c6:	40cf      	lsrs	r7, r1
    c5c8:	e9c6 3700 	strd	r3, r7, [r6]
    c5cc:	e79c      	b.n	c508 <__udivmoddi4+0x1d4>
    c5ce:	4640      	mov	r0, r8
    c5d0:	e7c7      	b.n	c562 <__udivmoddi4+0x22e>
    c5d2:	4643      	mov	r3, r8
    c5d4:	e7db      	b.n	c58e <__udivmoddi4+0x25a>
    c5d6:	4631      	mov	r1, r6
    c5d8:	e6fd      	b.n	c3d6 <__udivmoddi4+0xa2>
    c5da:	0000      	movs	r0, r0
    c5dc:	0000      	movs	r0, r0
	...

0000c5e0 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    c5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    c5e2:	4d48      	ldr	r5, [pc, #288]	; (c704 <bt_init+0x124>)
{
    c5e4:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    c5e6:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
    c5ea:	6899      	ldr	r1, [r3, #8]
    c5ec:	f011 0101 	ands.w	r1, r1, #1
{
    c5f0:	af00      	add	r7, sp, #0
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    c5f2:	d122      	bne.n	c63a <bt_init+0x5a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    c5f4:	f107 0208 	add.w	r2, r7, #8
    c5f8:	f640 4003 	movw	r0, #3075	; 0xc03
    c5fc:	f006 f930 	bl	12860 <bt_hci_cmd_send_sync>
		if (err) {
    c600:	4604      	mov	r4, r0
    c602:	2800      	cmp	r0, #0
    c604:	d17a      	bne.n	c6fc <bt_init+0x11c>
	uint8_t status = buf->data[0];
    c606:	68bb      	ldr	r3, [r7, #8]
    c608:	689b      	ldr	r3, [r3, #8]
	if (status) {
    c60a:	781b      	ldrb	r3, [r3, #0]
    c60c:	b993      	cbnz	r3, c634 <bt_init+0x54>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c60e:	f3bf 8f5b 	dmb	ish
    c612:	462b      	mov	r3, r5
    c614:	f853 2fcc 	ldr.w	r2, [r3, #204]!
    c618:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    c61c:	f002 0209 	and.w	r2, r2, #9
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c620:	f3bf 8f5b 	dmb	ish
    c624:	e853 1f00 	ldrex	r1, [r3]
    c628:	e843 2000 	strex	r0, r2, [r3]
    c62c:	2800      	cmp	r0, #0
    c62e:	d1f9      	bne.n	c624 <bt_init+0x44>
    c630:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    c634:	68b8      	ldr	r0, [r7, #8]
    c636:	f01b fb35 	bl	27ca4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    c63a:	f107 0208 	add.w	r2, r7, #8
    c63e:	2100      	movs	r1, #0
    c640:	f241 0003 	movw	r0, #4099	; 0x1003
    c644:	f006 f90c 	bl	12860 <bt_hci_cmd_send_sync>
	if (err) {
    c648:	4604      	mov	r4, r0
    c64a:	2800      	cmp	r0, #0
    c64c:	d156      	bne.n	c6fc <bt_init+0x11c>
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    c64e:	68bb      	ldr	r3, [r7, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    c650:	482d      	ldr	r0, [pc, #180]	; (c708 <bt_init+0x128>)
    c652:	6899      	ldr	r1, [r3, #8]
    c654:	2208      	movs	r2, #8
    c656:	3101      	adds	r1, #1
    c658:	f021 fce7 	bl	2e02a <memcpy>
	net_buf_unref(rsp);
    c65c:	68b8      	ldr	r0, [r7, #8]
    c65e:	f01b fb21 	bl	27ca4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    c662:	4621      	mov	r1, r4
    c664:	f107 0208 	add.w	r2, r7, #8
    c668:	f241 0001 	movw	r0, #4097	; 0x1001
    c66c:	f006 f8f8 	bl	12860 <bt_hci_cmd_send_sync>
	if (err) {
    c670:	4604      	mov	r4, r0
    c672:	2800      	cmp	r0, #0
    c674:	d142      	bne.n	c6fc <bt_init+0x11c>
	read_local_ver_complete(rsp);
    c676:	68b8      	ldr	r0, [r7, #8]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    c678:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    c67a:	785a      	ldrb	r2, [r3, #1]
    c67c:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    c680:	78d9      	ldrb	r1, [r3, #3]
    c682:	789a      	ldrb	r2, [r3, #2]
    c684:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    c688:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    c68c:	791a      	ldrb	r2, [r3, #4]
    c68e:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    c692:	7a19      	ldrb	r1, [r3, #8]
    c694:	79da      	ldrb	r2, [r3, #7]
    c696:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    c69a:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    c69e:	795a      	ldrb	r2, [r3, #5]
    c6a0:	799b      	ldrb	r3, [r3, #6]
    c6a2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    c6a6:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    c6aa:	f01b fafb 	bl	27ca4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    c6ae:	4621      	mov	r1, r4
    c6b0:	f107 0208 	add.w	r2, r7, #8
    c6b4:	f241 0002 	movw	r0, #4098	; 0x1002
    c6b8:	f006 f8d2 	bl	12860 <bt_hci_cmd_send_sync>
	if (err) {
    c6bc:	4604      	mov	r4, r0
    c6be:	b9e8      	cbnz	r0, c6fc <bt_init+0x11c>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    c6c0:	68bb      	ldr	r3, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
    c6c2:	4812      	ldr	r0, [pc, #72]	; (c70c <bt_init+0x12c>)
    c6c4:	6899      	ldr	r1, [r3, #8]
    c6c6:	2240      	movs	r2, #64	; 0x40
    c6c8:	3101      	adds	r1, #1
    c6ca:	f021 fcae 	bl	2e02a <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
    c6ce:	480f      	ldr	r0, [pc, #60]	; (c70c <bt_init+0x12c>)
    c6d0:	f021 fd49 	bl	2e166 <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
    c6d4:	68b8      	ldr	r0, [r7, #8]
    c6d6:	f01b fae5 	bl	27ca4 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    c6da:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    c6de:	065a      	lsls	r2, r3, #25
    c6e0:	d41a      	bmi.n	c718 <bt_init+0x138>
		BT_ERR("Non-LE capable controller detected!");
    c6e2:	4b0b      	ldr	r3, [pc, #44]	; (c710 <bt_init+0x130>)
    c6e4:	61bb      	str	r3, [r7, #24]
    c6e6:	480b      	ldr	r0, [pc, #44]	; (c714 <bt_init+0x134>)
    c6e8:	2302      	movs	r3, #2
    c6ea:	f107 0214 	add.w	r2, r7, #20
    c6ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
    c6f2:	f06f 0412 	mvn.w	r4, #18
		BT_ERR("Non-LE capable controller detected!");
    c6f6:	617b      	str	r3, [r7, #20]
    c6f8:	f021 fe05 	bl	2e306 <z_log_msg2_static_create.constprop.0>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    c6fc:	4620      	mov	r0, r4
    c6fe:	3724      	adds	r7, #36	; 0x24
    c700:	46bd      	mov	sp, r7
    c702:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c704:	20000000 	.word	0x20000000
    c708:	20000070 	.word	0x20000070
    c70c:	20000078 	.word	0x20000078
    c710:	000353ca 	.word	0x000353ca
    c714:	0003244c 	.word	0x0003244c
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    c718:	4621      	mov	r1, r4
    c71a:	f107 0208 	add.w	r2, r7, #8
    c71e:	f242 0003 	movw	r0, #8195	; 0x2003
    c722:	f006 f89d 	bl	12860 <bt_hci_cmd_send_sync>
	if (err) {
    c726:	4604      	mov	r4, r0
    c728:	2800      	cmp	r0, #0
    c72a:	d1e7      	bne.n	c6fc <bt_init+0x11c>
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    c72c:	68bb      	ldr	r3, [r7, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    c72e:	48bc      	ldr	r0, [pc, #752]	; (ca20 <bt_init+0x440>)
    c730:	6899      	ldr	r1, [r3, #8]
    c732:	2208      	movs	r2, #8
    c734:	3101      	adds	r1, #1
    c736:	f021 fc78 	bl	2e02a <memcpy>
	net_buf_unref(rsp);
    c73a:	68b8      	ldr	r0, [r7, #8]
    c73c:	f01b fab2 	bl	27ca4 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    c740:	4621      	mov	r1, r4
    c742:	f107 0208 	add.w	r2, r7, #8
    c746:	f242 0002 	movw	r0, #8194	; 0x2002
    c74a:	f006 f889 	bl	12860 <bt_hci_cmd_send_sync>
		if (err) {
    c74e:	4604      	mov	r4, r0
    c750:	2800      	cmp	r0, #0
    c752:	d1d3      	bne.n	c6fc <bt_init+0x11c>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    c754:	68bb      	ldr	r3, [r7, #8]
    c756:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    c758:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    c75c:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
    c760:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    c762:	b121      	cbz	r1, c76e <bt_init+0x18e>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    c764:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    c766:	48af      	ldr	r0, [pc, #700]	; (ca24 <bt_init+0x444>)
    c768:	4611      	mov	r1, r2
    c76a:	f025 f824 	bl	317b6 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    c76e:	68b8      	ldr	r0, [r7, #8]
    c770:	f01b fa98 	bl	27ca4 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    c774:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    c778:	f016 0620 	ands.w	r6, r6, #32
    c77c:	f000 811b 	beq.w	c9b6 <bt_init+0x3d6>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    c780:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    c784:	071b      	lsls	r3, r3, #28
    c786:	d513      	bpl.n	c7b0 <bt_init+0x1d0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    c788:	f107 0208 	add.w	r2, r7, #8
    c78c:	2100      	movs	r1, #0
    c78e:	f242 001c 	movw	r0, #8220	; 0x201c
    c792:	f006 f865 	bl	12860 <bt_hci_cmd_send_sync>
		if (err) {
    c796:	4604      	mov	r4, r0
    c798:	2800      	cmp	r0, #0
    c79a:	d1af      	bne.n	c6fc <bt_init+0x11c>
		le_read_supp_states_complete(rsp);
    c79c:	68b8      	ldr	r0, [r7, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    c79e:	6883      	ldr	r3, [r0, #8]
    c7a0:	f8d3 2001 	ldr.w	r2, [r3, #1]
    c7a4:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    c7a8:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    c7ac:	f01b fa7a 	bl	27ca4 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    c7b0:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    c7b4:	069e      	lsls	r6, r3, #26
    c7b6:	d520      	bpl.n	c7fa <bt_init+0x21a>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    c7b8:	1d39      	adds	r1, r7, #4
    c7ba:	1cb8      	adds	r0, r7, #2
    c7bc:	f006 f8cc 	bl	12958 <hci_le_read_max_data_len>
		if (err) {
    c7c0:	4604      	mov	r4, r0
    c7c2:	2800      	cmp	r0, #0
    c7c4:	d19a      	bne.n	c6fc <bt_init+0x11c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    c7c6:	2104      	movs	r1, #4
    c7c8:	f242 0024 	movw	r0, #8228	; 0x2024
    c7cc:	f005 ff16 	bl	125fc <bt_hci_cmd_create>
		if (!buf) {
    c7d0:	4606      	mov	r6, r0
    c7d2:	2800      	cmp	r0, #0
    c7d4:	f000 80f6 	beq.w	c9c4 <bt_init+0x3e4>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    c7d8:	2104      	movs	r1, #4
    c7da:	3008      	adds	r0, #8
    c7dc:	f024 f94a 	bl	30a74 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    c7e0:	887b      	ldrh	r3, [r7, #2]
    c7e2:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    c7e4:	88bb      	ldrh	r3, [r7, #4]
    c7e6:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    c7e8:	4622      	mov	r2, r4
    c7ea:	4631      	mov	r1, r6
    c7ec:	f242 0024 	movw	r0, #8228	; 0x2024
    c7f0:	f006 f836 	bl	12860 <bt_hci_cmd_send_sync>
		if (err) {
    c7f4:	4604      	mov	r4, r0
    c7f6:	2800      	cmp	r0, #0
    c7f8:	d180      	bne.n	c6fc <bt_init+0x11c>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    c7fa:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    c7fe:	065c      	lsls	r4, r3, #25
    c800:	d52d      	bpl.n	c85e <bt_init+0x27e>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RPA_TIMEOUT,
    c802:	2102      	movs	r1, #2
    c804:	f242 002e 	movw	r0, #8238	; 0x202e
    c808:	f005 fef8 	bl	125fc <bt_hci_cmd_create>
		if (!buf) {
    c80c:	4604      	mov	r4, r0
    c80e:	2800      	cmp	r0, #0
    c810:	f000 80d8 	beq.w	c9c4 <bt_init+0x3e4>
    c814:	2102      	movs	r1, #2
    c816:	3008      	adds	r0, #8
    c818:	f024 f92c 	bl	30a74 <net_buf_simple_add>
		cp->rpa_timeout = sys_cpu_to_le16(CONFIG_BT_RPA_TIMEOUT);
    c81c:	f06f 037b 	mvn.w	r3, #123	; 0x7b
    c820:	7003      	strb	r3, [r0, #0]
    c822:	2303      	movs	r3, #3
    c824:	7043      	strb	r3, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RPA_TIMEOUT, buf,
    c826:	4621      	mov	r1, r4
    c828:	2200      	movs	r2, #0
    c82a:	f242 002e 	movw	r0, #8238	; 0x202e
    c82e:	f006 f817 	bl	12860 <bt_hci_cmd_send_sync>
		if (err) {
    c832:	4604      	mov	r4, r0
    c834:	2800      	cmp	r0, #0
    c836:	f47f af61 	bne.w	c6fc <bt_init+0x11c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    c83a:	4601      	mov	r1, r0
    c83c:	f107 0208 	add.w	r2, r7, #8
    c840:	f242 002a 	movw	r0, #8234	; 0x202a
    c844:	f006 f80c 	bl	12860 <bt_hci_cmd_send_sync>
		if (err) {
    c848:	4604      	mov	r4, r0
    c84a:	2800      	cmp	r0, #0
    c84c:	f47f af56 	bne.w	c6fc <bt_init+0x11c>
		le_read_resolving_list_size_complete(rsp);
    c850:	68b8      	ldr	r0, [r7, #8]
	bt_dev.le.rl_size = rp->rl_size;
    c852:	6883      	ldr	r3, [r0, #8]
    c854:	785b      	ldrb	r3, [r3, #1]
    c856:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
    c85a:	f01b fa23 	bl	27ca4 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    c85e:	2108      	movs	r1, #8
    c860:	f242 0001 	movw	r0, #8193	; 0x2001
    c864:	f005 feca 	bl	125fc <bt_hci_cmd_create>
	if (!buf) {
    c868:	4604      	mov	r4, r0
    c86a:	2800      	cmp	r0, #0
    c86c:	f000 80aa 	beq.w	c9c4 <bt_init+0x3e4>
    c870:	2108      	movs	r1, #8
    c872:	4408      	add	r0, r1
    c874:	f024 f8fe 	bl	30a74 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    c878:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    c87c:	f011 0f40 	tst.w	r1, #64	; 0x40
    c880:	4602      	mov	r2, r0
    c882:	f240 2302 	movw	r3, #514	; 0x202
    c886:	bf08      	it	eq
    c888:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    c88a:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    c88c:	bf4c      	ite	mi
    c88e:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    c892:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    c896:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    c898:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    c89c:	bf48      	it	mi
    c89e:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    c8a2:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    c8a6:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    c8aa:	bf18      	it	ne
    c8ac:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    c8b0:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    c8b4:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    c8b6:	bf48      	it	mi
    c8b8:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    c8bc:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    c8be:	bf08      	it	eq
    c8c0:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    c8c4:	2100      	movs	r1, #0
    c8c6:	f021 fd2d 	bl	2e324 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    c8ca:	4621      	mov	r1, r4
    c8cc:	2200      	movs	r2, #0
    c8ce:	f242 0001 	movw	r0, #8193	; 0x2001
    c8d2:	f005 ffc5 	bl	12860 <bt_hci_cmd_send_sync>
	if (err) {
    c8d6:	4604      	mov	r4, r0
    c8d8:	2800      	cmp	r0, #0
    c8da:	f47f af0f 	bne.w	c6fc <bt_init+0x11c>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    c8de:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    c8e2:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    c8e6:	0698      	lsls	r0, r3, #26
    c8e8:	f100 8081 	bmi.w	c9ee <bt_init+0x40e>
	if (bt_dev.le.acl_mtu) {
    c8ec:	b9e1      	cbnz	r1, c928 <bt_init+0x348>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    c8ee:	f107 0208 	add.w	r2, r7, #8
    c8f2:	f241 0005 	movw	r0, #4101	; 0x1005
    c8f6:	f005 ffb3 	bl	12860 <bt_hci_cmd_send_sync>
	if (err) {
    c8fa:	4604      	mov	r4, r0
    c8fc:	2800      	cmp	r0, #0
    c8fe:	f47f aefd 	bne.w	c6fc <bt_init+0x11c>
	if (bt_dev.le.acl_mtu) {
    c902:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
    c906:	b963      	cbnz	r3, c922 <bt_init+0x342>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    c908:	68bb      	ldr	r3, [r7, #8]
    c90a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    c90c:	785a      	ldrb	r2, [r3, #1]
    c90e:	7899      	ldrb	r1, [r3, #2]
    c910:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    c914:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    c918:	889a      	ldrh	r2, [r3, #4]
    c91a:	4842      	ldr	r0, [pc, #264]	; (ca24 <bt_init+0x444>)
    c91c:	4611      	mov	r1, r2
    c91e:	f024 ff4a 	bl	317b6 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    c922:	68b8      	ldr	r0, [r7, #8]
    c924:	f01b f9be 	bl	27ca4 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    c928:	2108      	movs	r1, #8
    c92a:	f640 4001 	movw	r0, #3073	; 0xc01
    c92e:	f005 fe65 	bl	125fc <bt_hci_cmd_create>
	if (!buf) {
    c932:	4604      	mov	r4, r0
    c934:	2800      	cmp	r0, #0
    c936:	d045      	beq.n	c9c4 <bt_init+0x3e4>
    c938:	2108      	movs	r1, #8
    c93a:	4408      	add	r0, r1
    c93c:	f024 f89a 	bl	30a74 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    c940:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    c944:	07d9      	lsls	r1, r3, #31
    c946:	4602      	mov	r2, r0
    c948:	d561      	bpl.n	ca0e <bt_init+0x42e>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    c94a:	a133      	add	r1, pc, #204	; (adr r1, ca18 <bt_init+0x438>)
    c94c:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
    c950:	f021 fce8 	bl	2e324 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    c954:	4621      	mov	r1, r4
    c956:	2200      	movs	r2, #0
    c958:	f640 4001 	movw	r0, #3073	; 0xc01
    c95c:	f005 ff80 	bl	12860 <bt_hci_cmd_send_sync>
	if (err) {
    c960:	4604      	mov	r4, r0
    c962:	2800      	cmp	r0, #0
    c964:	f47f aeca 	bne.w	c6fc <bt_init+0x11c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    c968:	4601      	mov	r1, r0
    c96a:	1d3a      	adds	r2, r7, #4
    c96c:	f64f 4001 	movw	r0, #64513	; 0xfc01
    c970:	f005 ff76 	bl	12860 <bt_hci_cmd_send_sync>
	if (err) {
    c974:	2800      	cmp	r0, #0
    c976:	d05f      	beq.n	ca38 <bt_init+0x458>
		BT_WARN("Vendor HCI extensions not available");
    c978:	4b2b      	ldr	r3, [pc, #172]	; (ca28 <bt_init+0x448>)
    c97a:	61bb      	str	r3, [r7, #24]
    c97c:	2302      	movs	r3, #2
    c97e:	617b      	str	r3, [r7, #20]
			BT_WARN("Failed to read supported vendor features");
    c980:	482a      	ldr	r0, [pc, #168]	; (ca2c <bt_init+0x44c>)
    c982:	f107 0214 	add.w	r2, r7, #20
    c986:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    c98a:	f021 fcbc 	bl	2e306 <z_log_msg2_static_create.constprop.0>
	err = bt_id_init();
    c98e:	f007 fa4d 	bl	13e2c <bt_id_init>
	if (err) {
    c992:	4604      	mov	r4, r0
    c994:	2800      	cmp	r0, #0
    c996:	f47f aeb1 	bne.w	c6fc <bt_init+0x11c>
		err = bt_conn_init();
    c99a:	f008 fcd3 	bl	15344 <bt_conn_init>
		if (err) {
    c99e:	4604      	mov	r4, r0
    c9a0:	2800      	cmp	r0, #0
    c9a2:	f47f aeab 	bne.w	c6fc <bt_init+0x11c>
		if (!bt_dev.id_count) {
    c9a6:	79eb      	ldrb	r3, [r5, #7]
    c9a8:	2b00      	cmp	r3, #0
    c9aa:	f040 80d5 	bne.w	cb58 <bt_init+0x578>
    c9ae:	f005 fa47 	bl	11e40 <bt_init.part.0>
    c9b2:	4604      	mov	r4, r0
    c9b4:	e6a2      	b.n	c6fc <bt_init+0x11c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    c9b6:	2102      	movs	r1, #2
    c9b8:	f640 406d 	movw	r0, #3181	; 0xc6d
    c9bc:	f005 fe1e 	bl	125fc <bt_hci_cmd_create>
		if (!buf) {
    c9c0:	4604      	mov	r4, r0
    c9c2:	b910      	cbnz	r0, c9ca <bt_init+0x3ea>
		return -ENOBUFS;
    c9c4:	f06f 0468 	mvn.w	r4, #104	; 0x68
    c9c8:	e698      	b.n	c6fc <bt_init+0x11c>
    c9ca:	2102      	movs	r1, #2
    c9cc:	3008      	adds	r0, #8
    c9ce:	f024 f851 	bl	30a74 <net_buf_simple_add>
		cp_le->le = 0x01;
    c9d2:	2301      	movs	r3, #1
    c9d4:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    c9d6:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    c9d8:	4621      	mov	r1, r4
    c9da:	4632      	mov	r2, r6
    c9dc:	f640 406d 	movw	r0, #3181	; 0xc6d
    c9e0:	f005 ff3e 	bl	12860 <bt_hci_cmd_send_sync>
		if (err) {
    c9e4:	4604      	mov	r4, r0
    c9e6:	2800      	cmp	r0, #0
    c9e8:	f43f aeca 	beq.w	c780 <bt_init+0x1a0>
    c9ec:	e686      	b.n	c6fc <bt_init+0x11c>
	else if (!bt_dev.le.acl_mtu) {
    c9ee:	2900      	cmp	r1, #0
    c9f0:	d19a      	bne.n	c928 <bt_init+0x348>
		BT_ERR("ACL BR/EDR buffers not initialized");
    c9f2:	4b0f      	ldr	r3, [pc, #60]	; (ca30 <bt_init+0x450>)
    c9f4:	61bb      	str	r3, [r7, #24]
    c9f6:	480d      	ldr	r0, [pc, #52]	; (ca2c <bt_init+0x44c>)
    c9f8:	2302      	movs	r3, #2
    c9fa:	f107 0214 	add.w	r2, r7, #20
    c9fe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ca02:	617b      	str	r3, [r7, #20]
		return -EIO;
    ca04:	f06f 0404 	mvn.w	r4, #4
		BT_ERR("ACL BR/EDR buffers not initialized");
    ca08:	f021 fc7d 	bl	2e306 <z_log_msg2_static_create.constprop.0>
	if (err) {
    ca0c:	e676      	b.n	c6fc <bt_init+0x11c>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    ca0e:	4809      	ldr	r0, [pc, #36]	; (ca34 <bt_init+0x454>)
    ca10:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    ca14:	e79c      	b.n	c950 <bt_init+0x370>
    ca16:	bf00      	nop
    ca18:	02008890 	.word	0x02008890
    ca1c:	20008000 	.word	0x20008000
    ca20:	200000d0 	.word	0x200000d0
    ca24:	20000100 	.word	0x20000100
    ca28:	00035411 	.word	0x00035411
    ca2c:	0003244c 	.word	0x0003244c
    ca30:	000353ee 	.word	0x000353ee
    ca34:	02008810 	.word	0x02008810
	rp.info = (void *)rsp->data;
    ca38:	687b      	ldr	r3, [r7, #4]
	BT_INFO("HW Platform: %s (0x%04x)",
    ca3a:	484b      	ldr	r0, [pc, #300]	; (cb68 <bt_init+0x588>)
	rp.info = (void *)rsp->data;
    ca3c:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    ca3e:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    ca42:	2b03      	cmp	r3, #3
		return plat_str[platform];
    ca44:	bf96      	itet	ls
    ca46:	4a49      	ldrls	r2, [pc, #292]	; (cb6c <bt_init+0x58c>)
	return "unknown";
    ca48:	4949      	ldrhi	r1, [pc, #292]	; (cb70 <bt_init+0x590>)
		return plat_str[platform];
    ca4a:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    ca4e:	466e      	mov	r6, sp
    ca50:	b088      	sub	sp, #32
    ca52:	466a      	mov	r2, sp
    ca54:	e9c2 0104 	strd	r0, r1, [r2, #16]
    ca58:	6193      	str	r3, [r2, #24]
    ca5a:	2302      	movs	r3, #2
    ca5c:	7713      	strb	r3, [r2, #28]
    ca5e:	4b45      	ldr	r3, [pc, #276]	; (cb74 <bt_init+0x594>)
    ca60:	f842 3f0c 	str.w	r3, [r2, #12]!
    ca64:	4844      	ldr	r0, [pc, #272]	; (cb78 <bt_init+0x598>)
    ca66:	f44f 510b 	mov.w	r1, #8896	; 0x22c0
    ca6a:	f021 fc4c 	bl	2e306 <z_log_msg2_static_create.constprop.0>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    ca6e:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    ca72:	f8b4 3003 	ldrh.w	r3, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    ca76:	2a02      	cmp	r2, #2
    ca78:	46b5      	mov	sp, r6
    ca7a:	d148      	bne.n	cb0e <bt_init+0x52e>
	if (variant < ARRAY_SIZE(nordic_str)) {
    ca7c:	2b03      	cmp	r3, #3
    ca7e:	d846      	bhi.n	cb0e <bt_init+0x52e>
		return nordic_str[variant];
    ca80:	4a3e      	ldr	r2, [pc, #248]	; (cb7c <bt_init+0x59c>)
    ca82:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    ca86:	483e      	ldr	r0, [pc, #248]	; (cb80 <bt_init+0x5a0>)
    ca88:	466e      	mov	r6, sp
    ca8a:	b088      	sub	sp, #32
    ca8c:	466a      	mov	r2, sp
    ca8e:	e9c2 0104 	strd	r0, r1, [r2, #16]
    ca92:	6193      	str	r3, [r2, #24]
    ca94:	2302      	movs	r3, #2
    ca96:	7713      	strb	r3, [r2, #28]
    ca98:	4b36      	ldr	r3, [pc, #216]	; (cb74 <bt_init+0x594>)
    ca9a:	f842 3f0c 	str.w	r3, [r2, #12]!
    ca9e:	f44f 510b 	mov.w	r1, #8896	; 0x22c0
    caa2:	4835      	ldr	r0, [pc, #212]	; (cb78 <bt_init+0x598>)
    caa4:	f021 fc2f 	bl	2e306 <z_log_msg2_static_create.constprop.0>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    caa8:	7963      	ldrb	r3, [r4, #5]
    caaa:	f894 e006 	ldrb.w	lr, [r4, #6]
    caae:	f8b4 c007 	ldrh.w	ip, [r4, #7]
    cab2:	f8d4 0009 	ldr.w	r0, [r4, #9]
    cab6:	4c33      	ldr	r4, [pc, #204]	; (cb84 <bt_init+0x5a4>)
	if (variant < ARRAY_SIZE(var_str)) {
    cab8:	2b03      	cmp	r3, #3
		return var_str[variant];
    caba:	bf96      	itet	ls
    cabc:	4a32      	ldrls	r2, [pc, #200]	; (cb88 <bt_init+0x5a8>)
	return "unknown";
    cabe:	492c      	ldrhi	r1, [pc, #176]	; (cb70 <bt_init+0x590>)
		return var_str[variant];
    cac0:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
    cac4:	46b5      	mov	sp, r6
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    cac6:	466e      	mov	r6, sp
    cac8:	b08c      	sub	sp, #48	; 0x30
    caca:	466a      	mov	r2, sp
    cacc:	e9c2 4104 	strd	r4, r1, [r2, #16]
    cad0:	e9c2 3e06 	strd	r3, lr, [r2, #24]
    cad4:	2402      	movs	r4, #2
    cad6:	4b2d      	ldr	r3, [pc, #180]	; (cb8c <bt_init+0x5ac>)
    cad8:	f882 4028 	strb.w	r4, [r2, #40]	; 0x28
    cadc:	e9c2 c008 	strd	ip, r0, [r2, #32]
    cae0:	f44f 516b 	mov.w	r1, #15040	; 0x3ac0
    cae4:	f842 3f0c 	str.w	r3, [r2, #12]!
    cae8:	4823      	ldr	r0, [pc, #140]	; (cb78 <bt_init+0x598>)
    caea:	f021 fc0c 	bl	2e306 <z_log_msg2_static_create.constprop.0>
    caee:	46b5      	mov	sp, r6
	net_buf_unref(rsp);
    caf0:	6878      	ldr	r0, [r7, #4]
    caf2:	f01b f8d7 	bl	27ca4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    caf6:	1d3a      	adds	r2, r7, #4
    caf8:	2100      	movs	r1, #0
    cafa:	f64f 4002 	movw	r0, #64514	; 0xfc02
    cafe:	f005 feaf 	bl	12860 <bt_hci_cmd_send_sync>
	if (err) {
    cb02:	4606      	mov	r6, r0
    cb04:	b128      	cbz	r0, cb12 <bt_init+0x532>
		BT_WARN("Failed to read supported vendor commands");
    cb06:	4b22      	ldr	r3, [pc, #136]	; (cb90 <bt_init+0x5b0>)
			BT_WARN("Failed to read supported vendor features");
    cb08:	e9c7 4305 	strd	r4, r3, [r7, #20]
    cb0c:	e738      	b.n	c980 <bt_init+0x3a0>
		return "unknown";
    cb0e:	4918      	ldr	r1, [pc, #96]	; (cb70 <bt_init+0x590>)
    cb10:	e7b9      	b.n	ca86 <bt_init+0x4a6>
	rp.cmds = (void *)rsp->data;
    cb12:	687b      	ldr	r3, [r7, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    cb14:	481f      	ldr	r0, [pc, #124]	; (cb94 <bt_init+0x5b4>)
    cb16:	6899      	ldr	r1, [r3, #8]
    cb18:	4622      	mov	r2, r4
    cb1a:	3101      	adds	r1, #1
    cb1c:	f021 fa85 	bl	2e02a <memcpy>
	net_buf_unref(rsp);
    cb20:	6878      	ldr	r0, [r7, #4]
    cb22:	f01b f8bf 	bl	27ca4 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    cb26:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    cb2a:	075b      	lsls	r3, r3, #29
    cb2c:	f57f af2f 	bpl.w	c98e <bt_init+0x3ae>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    cb30:	1d3a      	adds	r2, r7, #4
    cb32:	4631      	mov	r1, r6
    cb34:	f64f 4003 	movw	r0, #64515	; 0xfc03
    cb38:	f005 fe92 	bl	12860 <bt_hci_cmd_send_sync>
		if (err) {
    cb3c:	b108      	cbz	r0, cb42 <bt_init+0x562>
			BT_WARN("Failed to read supported vendor features");
    cb3e:	4b16      	ldr	r3, [pc, #88]	; (cb98 <bt_init+0x5b8>)
    cb40:	e7e2      	b.n	cb08 <bt_init+0x528>
		rp.feat = (void *)rsp->data;
    cb42:	687b      	ldr	r3, [r7, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    cb44:	4815      	ldr	r0, [pc, #84]	; (cb9c <bt_init+0x5bc>)
    cb46:	6899      	ldr	r1, [r3, #8]
    cb48:	2201      	movs	r2, #1
    cb4a:	4411      	add	r1, r2
    cb4c:	f021 fa6d 	bl	2e02a <memcpy>
		net_buf_unref(rsp);
    cb50:	6878      	ldr	r0, [r7, #4]
    cb52:	f01b f8a7 	bl	27ca4 <net_buf_unref>
    cb56:	e71a      	b.n	c98e <bt_init+0x3ae>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    cb58:	2108      	movs	r1, #8
    cb5a:	4811      	ldr	r0, [pc, #68]	; (cba0 <bt_init+0x5c0>)
    cb5c:	f021 fbbf 	bl	2e2de <atomic_or>
	bt_finalize_init();
    cb60:	f006 fb06 	bl	13170 <bt_finalize_init>
	return 0;
    cb64:	e5ca      	b.n	c6fc <bt_init+0x11c>
    cb66:	bf00      	nop
    cb68:	00035435 	.word	0x00035435
    cb6c:	00032c78 	.word	0x00032c78
    cb70:	00034e83 	.word	0x00034e83
    cb74:	01000004 	.word	0x01000004
    cb78:	0003244c 	.word	0x0003244c
    cb7c:	00032c38 	.word	0x00032c38
    cb80:	0003544e 	.word	0x0003544e
    cb84:	00035466 	.word	0x00035466
    cb88:	00032cb0 	.word	0x00032cb0
    cb8c:	01000007 	.word	0x01000007
    cb90:	00035493 	.word	0x00035493
    cb94:	200000b9 	.word	0x200000b9
    cb98:	000354bc 	.word	0x000354bc
    cb9c:	200000b8 	.word	0x200000b8
    cba0:	200000cc 	.word	0x200000cc
    cba4:	00000000 	.word	0x00000000

0000cba8 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
    cba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
    cbac:	e9d0 350b 	ldrd	r3, r5, [r0, #44]	; 0x2c
	start_to_address_actual_us =
    cbb0:	6a86      	ldr	r6, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
    cbb2:	195c      	adds	r4, r3, r5
	start_to_address_expected_us = EVENT_JITTER_US +
    cbb4:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
    cbb6:	42a6      	cmp	r6, r4
{
    cbb8:	4688      	mov	r8, r1
    cbba:	4617      	mov	r7, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
    cbbc:	d818      	bhi.n	cbf0 <ull_drift_ticks_get+0x48>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    cbbe:	4d1c      	ldr	r5, [pc, #112]	; (cc30 <ull_drift_ticks_get+0x88>)
    cbc0:	fba3 0105 	umull	r0, r1, r3, r5
    cbc4:	a318      	add	r3, pc, #96	; (adr r3, cc28 <ull_drift_ticks_get+0x80>)
    cbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
    cbca:	f7ff fb99 	bl	c300 <__aeabi_uldivmod>
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    cbce:	1ba4      	subs	r4, r4, r6
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    cbd0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    cbd4:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    cbd8:	a313      	add	r3, pc, #76	; (adr r3, cc28 <ull_drift_ticks_get+0x80>)
    cbda:	e9d3 2300 	ldrd	r2, r3, [r3]
    cbde:	fba4 0105 	umull	r0, r1, r4, r5
    cbe2:	f7ff fb8d 	bl	c300 <__aeabi_uldivmod>
    cbe6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    cbea:	6038      	str	r0, [r7, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
    cbec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    cbf0:	4c0f      	ldr	r4, [pc, #60]	; (cc30 <ull_drift_ticks_get+0x88>)
    cbf2:	a30d      	add	r3, pc, #52	; (adr r3, cc28 <ull_drift_ticks_get+0x80>)
    cbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
    cbf8:	fba6 0104 	umull	r0, r1, r6, r4
    cbfc:	f7ff fb80 	bl	c300 <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    cc00:	f105 0130 	add.w	r1, r5, #48	; 0x30
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    cc04:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    cc08:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    cc0c:	a306      	add	r3, pc, #24	; (adr r3, cc28 <ull_drift_ticks_get+0x80>)
    cc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
    cc12:	fba1 0104 	umull	r0, r1, r1, r4
    cc16:	f7ff fb73 	bl	c300 <__aeabi_uldivmod>
    cc1a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    cc1e:	6038      	str	r0, [r7, #0]
}
    cc20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cc24:	f3af 8000 	nop.w
    cc28:	1afd498d 	.word	0x1afd498d
    cc2c:	00000007 	.word	0x00000007
    cc30:	3b9aca00 	.word	0x3b9aca00
    cc34:	00000000 	.word	0x00000000

0000cc38 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
    cc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
inline struct ll_adv_set *ull_adv_is_enabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || !adv->is_enabled) {
    cc3c:	4cab      	ldr	r4, [pc, #684]	; (ceec <ll_adv_enable+0x2b4>)
{
    cc3e:	b08f      	sub	sp, #60	; 0x3c
	if (!adv || !adv->is_enabled) {
    cc40:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
	if (!enable) {
    cc44:	2800      	cmp	r0, #0
    cc46:	f000 8139 	beq.w	cebc <ll_adv_enable+0x284>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
    cc4a:	f012 0701 	ands.w	r7, r2, #1
    cc4e:	f040 81b7 	bne.w	cfc0 <ll_adv_enable+0x388>
	ull_filter_adv_update(lll->filter_policy);
    cc52:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
	lll->rl_idx = FILTER_IDX_NONE;
    cc56:	23ff      	movs	r3, #255	; 0xff
	ull_filter_adv_update(lll->filter_policy);
    cc58:	f000 0003 	and.w	r0, r0, #3
	lll->rl_idx = FILTER_IDX_NONE;
    cc5c:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	ull_filter_adv_update(lll->filter_policy);
    cc60:	f017 fbee 	bl	24440 <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    cc64:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    cc68:	0741      	lsls	r1, r0, #29
    cc6a:	d42d      	bmi.n	ccc8 <ll_adv_enable+0x90>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    cc6c:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    cc70:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    cc74:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    cc78:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    cc7c:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    cc80:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		pdu_adv_to_update = pdu;
	}

	if (pdu_adv_to_update) {
    cc84:	f1b8 0f00 	cmp.w	r8, #0
    cc88:	d011      	beq.n	ccae <ll_adv_enable+0x76>
		const uint8_t *adv_addr;

		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
    cc8a:	4898      	ldr	r0, [pc, #608]	; (ceec <ll_adv_enable+0x2b4>)
    cc8c:	4641      	mov	r1, r8
    cc8e:	f011 ffab 	bl	1ebe8 <ull_adv_pdu_update_addrs>

		/* In case the local IRK was not set or no match was
		 * found the fallback address was used instead, check
		 * that a valid address has been set.
		 */
		if (pdu_adv_to_update->tx_addr &&
    cc92:	f898 3000 	ldrb.w	r3, [r8]
    cc96:	065a      	lsls	r2, r3, #25
    cc98:	d505      	bpl.n	cca6 <ll_adv_enable+0x6e>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
    cc9a:	2106      	movs	r1, #6
    cc9c:	f00d faa6 	bl	1a1ec <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
    cca0:	2800      	cmp	r0, #0
    cca2:	f000 81cb 	beq.w	d03c <ll_adv_enable+0x404>
		if ((pdu->type != PDU_ADV_TYPE_EXT_IND) ||
		    (pdu->adv_ext_ind.adv_mode & BT_HCI_LE_ADV_PROP_SCAN)) {
#else
		if (1) {
#endif
			ull_adv_pdu_update_addrs(adv, pdu_scan);
    cca6:	4891      	ldr	r0, [pc, #580]	; (ceec <ll_adv_enable+0x2b4>)
    cca8:	4649      	mov	r1, r9
    ccaa:	f011 ff9d 	bl	1ebe8 <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    ccae:	f898 3000 	ldrb.w	r3, [r8]
    ccb2:	f013 0f0e 	tst.w	r3, #14
    ccb6:	f040 80ee 	bne.w	ce96 <ll_adv_enable+0x25e>
		if (lll->conn) {
    ccba:	6a23      	ldr	r3, [r4, #32]
    ccbc:	b19b      	cbz	r3, cce6 <ll_adv_enable+0xae>
	return BT_HCI_ERR_CMD_DISALLOWED;
    ccbe:	270c      	movs	r7, #12
}
    ccc0:	4638      	mov	r0, r7
    ccc2:	b00f      	add	sp, #60	; 0x3c
    ccc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
    ccc8:	463a      	mov	r2, r7
    ccca:	f104 016b 	add.w	r1, r4, #107	; 0x6b
    ccce:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    ccd2:	f017 fd23 	bl	2471c <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
    ccd6:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
    ccd8:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
		if (lll->rl_idx != FILTER_IDX_NONE) {
    ccdc:	d0c6      	beq.n	cc6c <ll_adv_enable+0x34>
			ull_filter_rpa_update(false);
    ccde:	4638      	mov	r0, r7
    cce0:	f017 fbc8 	bl	24474 <ull_filter_rpa_update>
    cce4:	e7c2      	b.n	cc6c <ll_adv_enable+0x34>
		link = ll_rx_link_alloc();
    cce6:	f010 fe33 	bl	1d950 <ll_rx_link_alloc>
		if (!link) {
    ccea:	4682      	mov	sl, r0
    ccec:	2800      	cmp	r0, #0
    ccee:	f000 81af 	beq.w	d050 <ll_adv_enable+0x418>
		node_rx = ll_rx_alloc();
    ccf2:	f010 fe39 	bl	1d968 <ll_rx_alloc>
		if (!node_rx) {
    ccf6:	4683      	mov	fp, r0
    ccf8:	2800      	cmp	r0, #0
    ccfa:	f000 81ae 	beq.w	d05a <ll_adv_enable+0x422>
		conn = ll_conn_acquire();
    ccfe:	f012 fe61 	bl	1f9c4 <ll_conn_acquire>
		if (!conn) {
    cd02:	4605      	mov	r5, r0
    cd04:	2800      	cmp	r0, #0
    cd06:	f000 81a5 	beq.w	d054 <ll_adv_enable+0x41c>
		if (!conn_lll->link_tx_free) {
    cd0a:	6f40      	ldr	r0, [r0, #116]	; 0x74
		conn_lll->handle = 0xFFFF;
    cd0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cd10:	852b      	strh	r3, [r5, #40]	; 0x28
		conn_lll = &conn->lll;
    cd12:	f105 031c 	add.w	r3, r5, #28
		if (!conn_lll->link_tx_free) {
    cd16:	2800      	cmp	r0, #0
    cd18:	f000 8196 	beq.w	d048 <ll_adv_enable+0x410>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
    cd1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
    cd20:	f105 0164 	add.w	r1, r5, #100	; 0x64
    cd24:	930b      	str	r3, [sp, #44]	; 0x2c
    cd26:	f00d fa6d 	bl	1a204 <memq_init>
			conn_lll->phy_tx = PHY_1M;
    cd2a:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    cd2e:	4b70      	ldr	r3, [pc, #448]	; (cef0 <ll_adv_enable+0x2b8>)
			conn_lll->phy_tx = PHY_1M;
    cd30:	f422 62ef 	bic.w	r2, r2, #1912	; 0x778
    cd34:	f022 0207 	bic.w	r2, r2, #7
    cd38:	f442 7288 	orr.w	r2, r2, #272	; 0x110
    cd3c:	f042 0201 	orr.w	r2, r2, #1
    cd40:	f8a5 2060 	strh.w	r2, [r5, #96]	; 0x60
		conn_lll->data_chan_sel = 0;
    cd44:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    cd48:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    cd4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    cd50:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
		conn_lll->sn = 0;
    cd54:	f895 207a 	ldrb.w	r2, [r5, #122]	; 0x7a
    cd58:	f022 0207 	bic.w	r2, r2, #7
    cd5c:	f885 207a 	strb.w	r2, [r5, #122]	; 0x7a
		conn_lll->periph.initiated = 0;
    cd60:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
    cd64:	f022 0207 	bic.w	r2, r2, #7
    cd68:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
		conn->common.fex_valid = 0;
    cd6c:	f895 20d8 	ldrb.w	r2, [r5, #216]	; 0xd8
    cd70:	f022 0207 	bic.w	r2, r2, #7
    cd74:	f885 20d8 	strb.w	r2, [r5, #216]	; 0xd8
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    cd78:	f04f 121b 	mov.w	r2, #1769499	; 0x1b001b
		conn_lll->link_tx_free = NULL;
    cd7c:	2600      	movs	r6, #0
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    cd7e:	e9c5 2316 	strd	r2, r3, [r5, #88]	; 0x58
		conn->connect_expire = 6;
    cd82:	2206      	movs	r2, #6
    cd84:	f8a5 20c0 	strh.w	r2, [r5, #192]	; 0xc0
		conn_lll->periph.window_widening_event_us = 0;
    cd88:	e9c5 6612 	strd	r6, r6, [r5, #72]	; 0x48
		conn_lll->link_tx_free = NULL;
    cd8c:	676e      	str	r6, [r5, #116]	; 0x74
		conn_lll->packet_tx_head_len = 0;
    cd8e:	f8a5 6078 	strh.w	r6, [r5, #120]	; 0x78
		conn_lll->latency_prepare = 0;
    cd92:	85ee      	strh	r6, [r5, #46]	; 0x2e
		conn_lll->latency_event = 0;
    cd94:	632e      	str	r6, [r5, #48]	; 0x30
		conn_lll->data_chan_use = 0;
    cd96:	f885 603b 	strb.w	r6, [r5, #59]	; 0x3b
		conn_lll->periph.window_size_prepare_us = 0;
    cd9a:	652e      	str	r6, [r5, #80]	; 0x50
		conn->supervision_expire = 0;
    cd9c:	f8a5 60c4 	strh.w	r6, [r5, #196]	; 0xc4
		conn->procedure_expire = 0;
    cda0:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
		conn->apto_expire = 0U;
    cda4:	f8a5 60d0 	strh.w	r6, [r5, #208]	; 0xd0
		conn->appto_expire = 0U;
    cda8:	f8a5 60cc 	strh.w	r6, [r5, #204]	; 0xcc
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
    cdac:	f8a5 60e4 	strh.w	r6, [r5, #228]	; 0xe4
    cdb0:	f885 60e6 	strb.w	r6, [r5, #230]	; 0xe6
		conn->llcp_rx = NULL;
    cdb4:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
    cdb8:	f8a5 610c 	strh.w	r6, [r5, #268]	; 0x10c
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
    cdbc:	f8a5 6120 	strh.w	r6, [r5, #288]	; 0x120
		conn->llcp_feature.features_conn = ll_feat_get();
    cdc0:	f010 f918 	bl	1cff4 <ll_feat_get>
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    cdc4:	f895 213a 	ldrb.w	r2, [r5, #314]	; 0x13a
		conn->llcp_version.req = conn->llcp_version.ack = 0;
    cdc8:	f8a5 6138 	strh.w	r6, [r5, #312]	; 0x138
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    cdcc:	f022 0203 	bic.w	r2, r2, #3
    cdd0:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    cdd4:	f895 207a 	ldrb.w	r2, [r5, #122]	; 0x7a
		conn->llcp_terminate.req = conn->llcp_terminate.ack = 0;
    cdd8:	f8a5 6140 	strh.w	r6, [r5, #320]	; 0x140
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    cddc:	f022 0218 	bic.w	r2, r2, #24
    cde0:	f885 207a 	strb.w	r2, [r5, #122]	; 0x7a
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    cde4:	f895 2166 	ldrb.w	r2, [r5, #358]	; 0x166
		conn->llcp_terminate.reason_final = 0;
    cde8:	f885 6143 	strb.w	r6, [r5, #323]	; 0x143
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    cdec:	f022 0207 	bic.w	r2, r2, #7
    cdf0:	f885 2166 	strb.w	r2, [r5, #358]	; 0x166
		conn->llcp_conn_param.disabled = 0;
    cdf4:	f895 2186 	ldrb.w	r2, [r5, #390]	; 0x186
		conn->llcp_terminate.node_rx.hdr.link = link;
    cdf8:	f8c5 a144 	str.w	sl, [r5, #324]	; 0x144
		conn->llcp_conn_param.disabled = 0;
    cdfc:	f366 1245 	bfi	r2, r6, #5, #1
    ce00:	f885 2186 	strb.w	r2, [r5, #390]	; 0x186
		conn->llcp_length.disabled = 0U;
    ce04:	f895 21ae 	ldrb.w	r2, [r5, #430]	; 0x1ae
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
    ce08:	f8a5 6164 	strh.w	r6, [r5, #356]	; 0x164
		conn->llcp_length.disabled = 0U;
    ce0c:	f366 02c3 	bfi	r2, r6, #3, #1
		conn->llcp_feature.features_conn = ll_feat_get();
    ce10:	e9c5 014a 	strd	r0, r1, [r5, #296]	; 0x128
		conn->llcp_feature.features_peer = 0;
    ce14:	2100      	movs	r1, #0
    ce16:	2000      	movs	r0, #0
    ce18:	e9c5 014c 	strd	r0, r1, [r5, #304]	; 0x130
		conn->llcp_length.disabled = 0U;
    ce1c:	f885 21ae 	strb.w	r2, [r5, #430]	; 0x1ae
		conn->periph.llcp_type = 0U;
    ce20:	f885 60d9 	strb.w	r6, [r5, #217]	; 0xd9
		conn->llcp_conn_param.req = 0;
    ce24:	f8a5 6184 	strh.w	r6, [r5, #388]	; 0x184
		conn->periph.ticks_to_offset = 0;
    ce28:	f8c5 60e0 	str.w	r6, [r5, #224]	; 0xe0
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
    ce2c:	f8a5 61ac 	strh.w	r6, [r5, #428]	; 0x1ac
		conn->llcp_length.cache.tx_octets = 0U;
    ce30:	f8a5 61b8 	strh.w	r6, [r5, #440]	; 0x1b8
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
    ce34:	f013 f90c 	bl	20050 <ull_conn_default_tx_octets_get>
    ce38:	f8a5 00d2 	strh.w	r0, [r5, #210]	; 0xd2
		conn->default_tx_time = ull_conn_default_tx_time_get();
    ce3c:	f013 f90e 	bl	2005c <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
    ce40:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
    ce44:	4a2b      	ldr	r2, [pc, #172]	; (cef4 <ll_adv_enable+0x2bc>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
    ce46:	f8a5 00d4 	strh.w	r0, [r5, #212]	; 0xd4
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
    ce4a:	400a      	ands	r2, r1
    ce4c:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
    ce50:	f013 f90a 	bl	20068 <ull_conn_default_phy_tx_get>
    ce54:	f895 21c0 	ldrb.w	r2, [r5, #448]	; 0x1c0
    ce58:	f360 0202 	bfi	r2, r0, #0, #3
    ce5c:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    ce60:	f013 f908 	bl	20074 <ull_conn_default_phy_rx_get>
		lll->conn = conn_lll;
    ce64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ce66:	6223      	str	r3, [r4, #32]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    ce68:	f895 31c0 	ldrb.w	r3, [r5, #448]	; 0x1c0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    ce6c:	f8c5 61c4 	str.w	r6, [r5, #452]	; 0x1c4
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    ce70:	f360 03c5 	bfi	r3, r0, #3, #3
		adv->node_rx_cc_free = node_rx;
    ce74:	e9c4 ab18 	strd	sl, fp, [r4, #96]	; 0x60
		conn->tx_data = conn->tx_data_last = 0;
    ce78:	e9c5 6674 	strd	r6, r6, [r5, #464]	; 0x1d0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    ce7c:	e9c5 6672 	strd	r6, r6, [r5, #456]	; 0x1c8
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
	hdr->disabled_cb = hdr->disabled_param = NULL;
    ce80:	e9c5 6605 	strd	r6, r6, [r5, #20]
	hdr->ref = 0U;
    ce84:	702e      	strb	r6, [r5, #0]

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
    ce86:	61ed      	str	r5, [r5, #28]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    ce88:	f885 31c0 	strb.w	r3, [r5, #448]	; 0x1c0
		err = lll_clock_wait();
    ce8c:	f018 fb8a 	bl	255a4 <lll_clock_wait>
		if (err) {
    ce90:	2800      	cmp	r0, #0
    ce92:	f040 80d5 	bne.w	d040 <ll_adv_enable+0x408>
	uint8_t ch_map = lll->chan_map;
    ce96:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    ce9a:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
    ce9c:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    cea0:	f10d 0033 	add.w	r0, sp, #51	; 0x33
	uint8_t ch_map = lll->chan_map;
    cea4:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    cea8:	f00d fb2c 	bl	1a504 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
    ceac:	bb20      	cbnz	r0, cef8 <ll_adv_enable+0x2c0>
	if (adv->lll.conn) {
    ceae:	6a23      	ldr	r3, [r4, #32]
    ceb0:	2b00      	cmp	r3, #0
    ceb2:	f43f af04 	beq.w	ccbe <ll_adv_enable+0x86>
		conn_release(adv);
    ceb6:	f011 fb67 	bl	1e588 <conn_release.constprop.0>
    ceba:	e700      	b.n	ccbe <ll_adv_enable+0x86>
	if (!adv || !adv->is_enabled) {
    cebc:	f012 0701 	ands.w	r7, r2, #1
    cec0:	f43f aefe 	beq.w	ccc0 <ll_adv_enable+0x88>
	if (adv->lll.conn) {
    cec4:	6a23      	ldr	r3, [r4, #32]
    cec6:	b15b      	cbz	r3, cee0 <ll_adv_enable+0x2a8>
		adv->lll.conn->periph.cancelled = 1U;
    cec8:	f893 2020 	ldrb.w	r2, [r3, #32]
    cecc:	f042 0202 	orr.w	r2, r2, #2
    ced0:	f883 2020 	strb.w	r2, [r3, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
    ced4:	6a23      	ldr	r3, [r4, #32]
    ced6:	f893 3020 	ldrb.w	r3, [r3, #32]
    ceda:	07d8      	lsls	r0, r3, #31
    cedc:	f53f aeef 	bmi.w	ccbe <ll_adv_enable+0x86>
}
    cee0:	b00f      	add	sp, #60	; 0x3c
    cee2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cee6:	f011 bb91 	b.w	1e60c <disable.part.0>
    ceea:	bf00      	nop
    ceec:	20002820 	.word	0x20002820
    cef0:	01480148 	.word	0x01480148
    cef4:	f6ff0000 	.word	0xf6ff0000
	uint16_t time_us = adv_time_get(pdu_adv, pdu_scan, adv_chn_cnt, phy,
    cef8:	f899 1001 	ldrb.w	r1, [r9, #1]
    cefc:	4602      	mov	r2, r0
    cefe:	4640      	mov	r0, r8
    cf00:	f011 fc2c 	bl	1e75c <adv_time_get.constprop.0.isra.0>
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
    cf04:	495a      	ldr	r1, [pc, #360]	; (d070 <ll_adv_enable+0x438>)
	uint16_t interval = adv->interval;
    cf06:	f8b4 9068 	ldrh.w	r9, [r4, #104]	; 0x68
	adv->ull.ticks_prepare_to_start =
    cf0a:	2331      	movs	r3, #49	; 0x31
    cf0c:	2500      	movs	r5, #0
    cf0e:	60a3      	str	r3, [r4, #8]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
    cf10:	fba0 0101 	umull	r0, r1, r0, r1
    cf14:	a354      	add	r3, pc, #336	; (adr r3, d068 <ll_adv_enable+0x430>)
    cf16:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->disabled_cb = hdr->disabled_param = NULL;
    cf1a:	e9c4 5505 	strd	r5, r5, [r4, #20]
	hdr->ref = 0U;
    cf1e:	7025      	strb	r5, [r4, #0]
	adv->ull.ticks_active_to_start = 0;
    cf20:	6065      	str	r5, [r4, #4]
	adv->ull.ticks_preempt_to_start =
    cf22:	60e5      	str	r5, [r4, #12]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
    cf24:	f7ff f9ec 	bl	c300 <__aeabi_uldivmod>
    cf28:	6120      	str	r0, [r4, #16]
	ticks_anchor = ticker_ticks_now_get();
    cf2a:	f00e fc07 	bl	1b73c <ticker_ticks_now_get>
    cf2e:	4606      	mov	r6, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    cf30:	f1b9 0f00 	cmp.w	r9, #0
    cf34:	d108      	bne.n	cf48 <ll_adv_enable+0x310>
    cf36:	f898 5000 	ldrb.w	r5, [r8]
    cf3a:	f005 050f 	and.w	r5, r5, #15
    cf3e:	f1a5 0501 	sub.w	r5, r5, #1
    cf42:	fab5 f585 	clz	r5, r5
    cf46:	096d      	lsrs	r5, r5, #5
    cf48:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
				   (adv->ull.ticks_slot + ticks_slot_overhead),
    cf4c:	6923      	ldr	r3, [r4, #16]
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    cf4e:	f365 0000 	bfi	r0, r5, #0, #1
	if (lll->is_hdcd) {
    cf52:	f010 0501 	ands.w	r5, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    cf56:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	if (lll->is_hdcd) {
    cf5a:	d036      	beq.n	cfca <ll_adv_enable+0x392>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    cf5c:	2000      	movs	r0, #0
    cf5e:	4a45      	ldr	r2, [pc, #276]	; (d074 <ll_adv_enable+0x43c>)
    cf60:	f8df 9114 	ldr.w	r9, [pc, #276]	; d078 <ll_adv_enable+0x440>
    cf64:	9304      	str	r3, [sp, #16]
		ret_cb = TICKER_STATUS_BUSY;
    cf66:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    cf68:	f10d 0834 	add.w	r8, sp, #52	; 0x34
    cf6c:	9301      	str	r3, [sp, #4]
    cf6e:	9205      	str	r2, [sp, #20]
    cf70:	2103      	movs	r1, #3
    cf72:	e9cd 0002 	strd	r0, r0, [sp, #8]
    cf76:	9406      	str	r4, [sp, #24]
    cf78:	4633      	mov	r3, r6
    cf7a:	9000      	str	r0, [sp, #0]
    cf7c:	f8cd 8020 	str.w	r8, [sp, #32]
    cf80:	f8cd 901c 	str.w	r9, [sp, #28]
    cf84:	462a      	mov	r2, r5
		ret_cb = TICKER_STATUS_BUSY;
    cf86:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    cf88:	f00e fb0c 	bl	1b5a4 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
    cf8c:	4641      	mov	r1, r8
    cf8e:	f010 fd97 	bl	1dac0 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
    cf92:	2800      	cmp	r0, #0
    cf94:	d18b      	bne.n	ceae <ll_adv_enable+0x276>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    cf96:	4a39      	ldr	r2, [pc, #228]	; (d07c <ll_adv_enable+0x444>)
    cf98:	9205      	str	r2, [sp, #20]
    cf9a:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
    cf9e:	9200      	str	r2, [sp, #0]
    cfa0:	e9cd 0003 	strd	r0, r0, [sp, #12]
    cfa4:	e9cd 0001 	strd	r0, r0, [sp, #4]
    cfa8:	f8cd 901c 	str.w	r9, [sp, #28]
    cfac:	f8cd 8020 	str.w	r8, [sp, #32]
    cfb0:	9406      	str	r4, [sp, #24]
    cfb2:	4633      	mov	r3, r6
    cfb4:	2201      	movs	r2, #1
    cfb6:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
    cfb8:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    cfba:	f00e faf3 	bl	1b5a4 <ticker_start>
    cfbe:	e02e      	b.n	d01e <ll_adv_enable+0x3e6>
			return 0;
    cfc0:	2700      	movs	r7, #0
}
    cfc2:	4638      	mov	r0, r7
    cfc4:	b00f      	add	sp, #60	; 0x3c
    cfc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ll_adv_ticker_ext[handle].ticks_slot_window =
    cfca:	4a2d      	ldr	r2, [pc, #180]	; (d080 <ll_adv_enable+0x448>)
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    cfcc:	482d      	ldr	r0, [pc, #180]	; (d084 <ll_adv_enable+0x44c>)
		ret = ticker_start_ext(
    cfce:	9304      	str	r3, [sp, #16]
			ULL_ADV_RANDOM_DELAY + ticks_slot;
    cfd0:	f203 1347 	addw	r3, r3, #327	; 0x147
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    cfd4:	fba9 0100 	umull	r0, r1, r9, r0
		ret = ticker_start_ext(
    cfd8:	9406      	str	r4, [sp, #24]
    cfda:	9502      	str	r5, [sp, #8]
		ll_adv_ticker_ext[handle].ticks_slot_window =
    cfdc:	6013      	str	r3, [r2, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    cfde:	2391      	movs	r3, #145	; 0x91
    cfe0:	fb03 1109 	mla	r1, r3, r9, r1
		ret = ticker_start_ext(
    cfe4:	4b24      	ldr	r3, [pc, #144]	; (d078 <ll_adv_enable+0x440>)
    cfe6:	9307      	str	r3, [sp, #28]
    cfe8:	4b22      	ldr	r3, [pc, #136]	; (d074 <ll_adv_enable+0x43c>)
    cfea:	9305      	str	r3, [sp, #20]
    cfec:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cff0:	9209      	str	r2, [sp, #36]	; 0x24
		ret_cb = TICKER_STATUS_BUSY;
    cff2:	f04f 0902 	mov.w	r9, #2
		ret = ticker_start_ext(
    cff6:	9303      	str	r3, [sp, #12]
    cff8:	f10d 0834 	add.w	r8, sp, #52	; 0x34
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    cffc:	a31a      	add	r3, pc, #104	; (adr r3, d068 <ll_adv_enable+0x430>)
    cffe:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret_cb = TICKER_STATUS_BUSY;
    d002:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
		ret = ticker_start_ext(
    d006:	f8cd 8020 	str.w	r8, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    d00a:	f7ff f979 	bl	c300 <__aeabi_uldivmod>
		ret = ticker_start_ext(
    d00e:	4633      	mov	r3, r6
    d010:	e9cd 5000 	strd	r5, r0, [sp]
    d014:	464a      	mov	r2, r9
    d016:	4628      	mov	r0, r5
    d018:	2103      	movs	r1, #3
    d01a:	f00e fa6d 	bl	1b4f8 <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
    d01e:	4641      	mov	r1, r8
    d020:	f010 fd4e 	bl	1dac0 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    d024:	2800      	cmp	r0, #0
    d026:	f47f af42 	bne.w	ceae <ll_adv_enable+0x276>
	adv->is_enabled = 1;
    d02a:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
		ull_filter_adv_scan_state_cb(BIT(0));
    d02e:	2001      	movs	r0, #1
	adv->is_enabled = 1;
    d030:	4303      	orrs	r3, r0
    d032:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
		ull_filter_adv_scan_state_cb(BIT(0));
    d036:	f017 f9e5 	bl	24404 <ull_filter_adv_scan_state_cb>
	return 0;
    d03a:	e641      	b.n	ccc0 <ll_adv_enable+0x88>
			return BT_HCI_ERR_INVALID_PARAM;
    d03c:	2712      	movs	r7, #18
    d03e:	e63f      	b.n	ccc0 <ll_adv_enable+0x88>
			conn_release(adv);
    d040:	f011 faa2 	bl	1e588 <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
    d044:	2703      	movs	r7, #3
    d046:	e63b      	b.n	ccc0 <ll_adv_enable+0x88>
			conn_lll->link_tx_free = &conn_lll->link_tx;
    d048:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    d04c:	6768      	str	r0, [r5, #116]	; 0x74
    d04e:	e665      	b.n	cd1c <ll_adv_enable+0xe4>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    d050:	2707      	movs	r7, #7
    d052:	e635      	b.n	ccc0 <ll_adv_enable+0x88>
			ll_rx_release(node_rx);
    d054:	4658      	mov	r0, fp
    d056:	f010 fc8d 	bl	1d974 <ll_rx_release>
			ll_rx_link_release(link);
    d05a:	4650      	mov	r0, sl
    d05c:	f010 fc7e 	bl	1d95c <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    d060:	2707      	movs	r7, #7
    d062:	e62d      	b.n	ccc0 <ll_adv_enable+0x88>
    d064:	f3af 8000 	nop.w
    d068:	1afd498d 	.word	0x1afd498d
    d06c:	00000007 	.word	0x00000007
    d070:	3b9aca00 	.word	0x3b9aca00
    d074:	0001e7cd 	.word	0x0001e7cd
    d078:	0001d095 	.word	0x0001d095
    d07c:	0001e319 	.word	0x0001e319
    d080:	20002894 	.word	0x20002894
    d084:	84e72a00 	.word	0x84e72a00

0000d088 <ull_adv_time_update>:
{
    d088:	b570      	push	{r4, r5, r6, lr}
	chan_map = lll->chan_map;
    d08a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
    d08e:	b08a      	sub	sp, #40	; 0x28
	chan_map = lll->chan_map;
    d090:	f3c3 0342 	ubfx	r3, r3, #1, #3
{
    d094:	460d      	mov	r5, r1
    d096:	4604      	mov	r4, r0
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    d098:	2101      	movs	r1, #1
    d09a:	f10d 0023 	add.w	r0, sp, #35	; 0x23
{
    d09e:	4616      	mov	r6, r2
	chan_map = lll->chan_map;
    d0a0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    d0a4:	f00d fa2e 	bl	1a504 <util_ones_count_get>
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
    d0a8:	7871      	ldrb	r1, [r6, #1]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    d0aa:	4602      	mov	r2, r0
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
    d0ac:	4628      	mov	r0, r5
    d0ae:	f011 fb55 	bl	1e75c <adv_time_get.constprop.0.isra.0>
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
    d0b2:	491d      	ldr	r1, [pc, #116]	; (d128 <ull_adv_time_update+0xa0>)
    d0b4:	a31a      	add	r3, pc, #104	; (adr r3, d120 <ull_adv_time_update+0x98>)
    d0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
    d0ba:	fba0 0101 	umull	r0, r1, r0, r1
    d0be:	f7ff f91f 	bl	c300 <__aeabi_uldivmod>
	if (adv->ull.ticks_slot > time_ticks) {
    d0c2:	6923      	ldr	r3, [r4, #16]
    d0c4:	4298      	cmp	r0, r3
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
    d0c6:	4605      	mov	r5, r0
	if (adv->ull.ticks_slot > time_ticks) {
    d0c8:	d220      	bcs.n	d10c <ull_adv_time_update+0x84>
		ticks_minus = adv->ull.ticks_slot - time_ticks;
    d0ca:	1a1b      	subs	r3, r3, r0
		ticks_plus = 0U;
    d0cc:	2200      	movs	r2, #0
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    d0ce:	9201      	str	r2, [sp, #4]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    d0d0:	4a16      	ldr	r2, [pc, #88]	; (d12c <ull_adv_time_update+0xa4>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    d0d2:	9302      	str	r3, [sp, #8]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    d0d4:	4b16      	ldr	r3, [pc, #88]	; (d130 <ull_adv_time_update+0xa8>)
    d0d6:	1aa2      	subs	r2, r4, r2
    d0d8:	fba3 3202 	umull	r3, r2, r3, r2
	ret_cb = TICKER_STATUS_BUSY;
    d0dc:	2102      	movs	r1, #2
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    d0de:	0992      	lsrs	r2, r2, #6
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    d0e0:	2300      	movs	r3, #0
    d0e2:	440a      	add	r2, r1
    d0e4:	ae09      	add	r6, sp, #36	; 0x24
	ret_cb = TICKER_STATUS_BUSY;
    d0e6:	9109      	str	r1, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    d0e8:	4912      	ldr	r1, [pc, #72]	; (d134 <ull_adv_time_update+0xac>)
    d0ea:	9105      	str	r1, [sp, #20]
    d0ec:	e9cd 3303 	strd	r3, r3, [sp, #12]
    d0f0:	2103      	movs	r1, #3
    d0f2:	b2d2      	uxtb	r2, r2
    d0f4:	9606      	str	r6, [sp, #24]
    d0f6:	9300      	str	r3, [sp, #0]
    d0f8:	4618      	mov	r0, r3
    d0fa:	f00e fac5 	bl	1b688 <ticker_update>
	ret = ull_ticker_status_take(ret, &ret_cb);
    d0fe:	4631      	mov	r1, r6
    d100:	f010 fcde 	bl	1dac0 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    d104:	b948      	cbnz	r0, d11a <ull_adv_time_update+0x92>
	adv->ull.ticks_slot = time_ticks;
    d106:	6125      	str	r5, [r4, #16]
}
    d108:	b00a      	add	sp, #40	; 0x28
    d10a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (adv->ull.ticks_slot < time_ticks) {
    d10c:	d902      	bls.n	d114 <ull_adv_time_update+0x8c>
		ticks_plus = time_ticks - adv->ull.ticks_slot;
    d10e:	1ac2      	subs	r2, r0, r3
		ticks_minus = 0U;
    d110:	2300      	movs	r3, #0
    d112:	e7dc      	b.n	d0ce <ull_adv_time_update+0x46>
		return BT_HCI_ERR_SUCCESS;
    d114:	2000      	movs	r0, #0
}
    d116:	b00a      	add	sp, #40	; 0x28
    d118:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    d11a:	200c      	movs	r0, #12
}
    d11c:	b00a      	add	sp, #40	; 0x28
    d11e:	bd70      	pop	{r4, r5, r6, pc}
    d120:	1afd498d 	.word	0x1afd498d
    d124:	00000007 	.word	0x00000007
    d128:	3b9aca00 	.word	0x3b9aca00
    d12c:	20002820 	.word	0x20002820
    d130:	8d3dcb09 	.word	0x8d3dcb09
    d134:	0001d095 	.word	0x0001d095

0000d138 <event_conn_upd_prep>:
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
}

static inline int event_conn_upd_prep(struct ll_conn *conn, uint16_t lazy,
				      uint32_t ticks_at_expire)
{
    d138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_conn *lll = &conn->lll;
	uint16_t instant_latency;
	uint16_t event_counter;

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    d13c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
    d13e:	8e46      	ldrh	r6, [r0, #50]	; 0x32
    d140:	441e      	add	r6, r3

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    d142:	f890 310e 	ldrb.w	r3, [r0, #270]	; 0x10e
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    d146:	b2b6      	uxth	r6, r6
    d148:	4431      	add	r1, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    d14a:	f013 0307 	ands.w	r3, r3, #7
{
    d14e:	b08b      	sub	sp, #44	; 0x2c
    d150:	4604      	mov	r4, r0
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    d152:	fa1f f981 	uxth.w	r9, r1
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    d156:	f040 81a3 	bne.w	d4a0 <event_conn_upd_prep+0x368>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    d15a:	f8b0 70e8 	ldrh.w	r7, [r0, #232]	; 0xe8
    d15e:	eba9 0107 	sub.w	r1, r9, r7
    d162:	fa1f f981 	uxth.w	r9, r1
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
    d166:	0409      	lsls	r1, r1, #16
    d168:	f100 820c 	bmi.w	d584 <event_conn_upd_prep+0x44c>
    d16c:	4690      	mov	r8, r2
		uint32_t ticker_status;
		uint32_t periodic_us;
		uint16_t latency;

#if defined(CONFIG_BT_PERIPHERAL) && defined(CONFIG_BT_CTLR_LE_ENC)
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    d16e:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
    d172:	2a00      	cmp	r2, #0
    d174:	f2c0 8135 	blt.w	d3e2 <event_conn_upd_prep+0x2aa>
			conn->periph.llcp_type = LLCP_NONE;
		} else
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */
		{
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
    d178:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    d17c:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    d180:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
    d184:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
		conn->llcp_cu.ack = conn->llcp_cu.req;
    d188:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
    d18c:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    d190:	4293      	cmp	r3, r2
    d192:	d006      	beq.n	d1a2 <event_conn_upd_prep+0x6a>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    d194:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    d198:	f003 030f 	and.w	r3, r3, #15
    d19c:	2b06      	cmp	r3, #6
    d19e:	f000 8247 	beq.w	d630 <event_conn_upd_prep+0x4f8>
	if (conn == conn_upd_curr) {
    d1a2:	4bb1      	ldr	r3, [pc, #708]	; (d468 <event_conn_upd_prep+0x330>)
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    d1a4:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
	if (conn == conn_upd_curr) {
    d1a8:	681a      	ldr	r2, [r3, #0]
    d1aa:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
    d1ac:	bf04      	itt	eq
    d1ae:	2200      	moveq	r2, #0
    d1b0:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
    d1b2:	2d00      	cmp	r5, #0
    d1b4:	f000 8144 	beq.w	d440 <event_conn_upd_prep+0x308>
    d1b8:	6828      	ldr	r0, [r5, #0]
    d1ba:	2800      	cmp	r0, #0
    d1bc:	f000 8140 	beq.w	d440 <event_conn_upd_prep+0x308>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
    d1c0:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
    d1c4:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
		conn->llcp_rx = rx->hdr.link->mem;
    d1c8:	6842      	ldr	r2, [r0, #4]
    d1ca:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		if ((conn->llcp_cu.interval != lll->interval) ||
    d1ce:	4563      	cmp	r3, ip
		    (conn->llcp_cu.latency != lll->latency) ||
    d1d0:	f8b4 2112 	ldrh.w	r2, [r4, #274]	; 0x112
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    d1d4:	f8b4 1114 	ldrh.w	r1, [r4, #276]	; 0x114
		if ((conn->llcp_cu.interval != lll->interval) ||
    d1d8:	f000 8117 	beq.w	d40a <event_conn_upd_prep+0x2d2>
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
    d1dc:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
			cu->interval = conn->llcp_cu.interval;
    d1e0:	83eb      	strh	r3, [r5, #30]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    d1e2:	2319      	movs	r3, #25
    d1e4:	712b      	strb	r3, [r5, #4]
			cu->status = 0x00;
    d1e6:	2300      	movs	r3, #0
			rx->hdr.handle = lll->handle;
    d1e8:	f8a5 c006 	strh.w	ip, [r5, #6]
			cu->latency = conn->llcp_cu.latency;
    d1ec:	842a      	strh	r2, [r5, #32]
			cu->timeout = conn->llcp_cu.timeout;
    d1ee:	8469      	strh	r1, [r5, #34]	; 0x22
			cu->status = 0x00;
    d1f0:	772b      	strb	r3, [r5, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    d1f2:	4629      	mov	r1, r5
    d1f4:	f010 fbc4 	bl	1d980 <ll_rx_put>
		ll_rx_sched();
    d1f8:	f010 fbcc 	bl	1d994 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    d1fc:	68a3      	ldr	r3, [r4, #8]
    d1fe:	2b00      	cmp	r3, #0
    d200:	f2c0 80f7 	blt.w	d3f2 <event_conn_upd_prep+0x2ba>
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
    d204:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
    d206:	f8b4 5110 	ldrh.w	r5, [r4, #272]	; 0x110
		conn_interval_old = instant_latency * lll->interval;
    d20a:	fb10 f009 	smulbb	r0, r0, r9
    d20e:	b280      	uxth	r0, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
    d210:	fbb0 f1f5 	udiv	r1, r0, r5
		conn_interval_new = latency * conn->llcp_cu.interval;
    d214:	fb15 f301 	smulbb	r3, r5, r1
    d218:	b29b      	uxth	r3, r3
		if (conn_interval_new > conn_interval_old) {
    d21a:	4298      	cmp	r0, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    d21c:	fa1f fa81 	uxth.w	sl, r1
		if (conn_interval_new > conn_interval_old) {
    d220:	f0c0 80ce 	bcc.w	d3c0 <event_conn_upd_prep+0x288>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
				(conn_interval_new - conn_interval_old) *
				CONN_INT_UNIT_US);
		} else {
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    d224:	fb05 0111 	mls	r1, r5, r1, r0
    d228:	f240 43e2 	movw	r3, #1250	; 0x4e2
    d22c:	488f      	ldr	r0, [pc, #572]	; (d46c <event_conn_upd_prep+0x334>)
    d22e:	b289      	uxth	r1, r1
    d230:	fb03 f101 	mul.w	r1, r3, r1
    d234:	fba1 0100 	umull	r0, r1, r1, r0
    d238:	a389      	add	r3, pc, #548	; (adr r3, d460 <event_conn_upd_prep+0x328>)
    d23a:	e9d3 2300 	ldrd	r2, r3, [r3]
    d23e:	f7ff f85f 	bl	c300 <__aeabi_uldivmod>
    d242:	eba8 0800 	sub.w	r8, r8, r0
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
		lll->latency_prepare -= (instant_latency - latency);
    d246:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    d248:	441f      	add	r7, r3
			CONN_INT_UNIT_US;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
    d24a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
    d24e:	1bbe      	subs	r6, r7, r6
    d250:	4456      	add	r6, sl
		conn_interval_us = conn->llcp_cu.interval *
    d252:	f240 47e2 	movw	r7, #1250	; 0x4e2
		} else if (lll->role) {
    d256:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
    d258:	85e6      	strh	r6, [r4, #46]	; 0x2e
		conn_interval_us = conn->llcp_cu.interval *
    d25a:	fb07 f605 	mul.w	r6, r7, r5
		} else if (lll->role) {
    d25e:	f2c0 8196 	blt.w	d58e <event_conn_upd_prep+0x456>
			 */
			ticks_win_offset += 1U;
#endif /* CONFIG_BT_CENTRAL */

		} else {
			LL_ASSERT(0);
    d262:	4a83      	ldr	r2, [pc, #524]	; (d470 <event_conn_upd_prep+0x338>)
    d264:	4983      	ldr	r1, [pc, #524]	; (d474 <event_conn_upd_prep+0x33c>)
    d266:	4884      	ldr	r0, [pc, #528]	; (d478 <event_conn_upd_prep+0x340>)
    d268:	f640 43bc 	movw	r3, #3260	; 0xcbc
    d26c:	f01e feab 	bl	2bfc6 <assert_print>
    d270:	4040      	eors	r0, r0
    d272:	f380 8811 	msr	BASEPRI, r0
    d276:	f04f 0003 	mov.w	r0, #3
    d27a:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    d27c:	2700      	movs	r7, #0
		periodic_us = conn_interval_us;
    d27e:	46b3      	mov	fp, r6

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
					  conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    d280:	4a7e      	ldr	r2, [pc, #504]	; (d47c <event_conn_upd_prep+0x344>)
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    d282:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    d286:	497e      	ldr	r1, [pc, #504]	; (d480 <event_conn_upd_prep+0x348>)
		lll->latency = conn->llcp_cu.latency;
    d288:	f8b4 0112 	ldrh.w	r0, [r4, #274]	; 0x112
    d28c:	85a0      	strh	r0, [r4, #44]	; 0x2c
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    d28e:	4432      	add	r2, r6
    d290:	fbb2 f2f6 	udiv	r2, r2, r6
    d294:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    d298:	f242 7210 	movw	r2, #10000	; 0x2710
    d29c:	fb02 6303 	mla	r3, r2, r3, r6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    d2a0:	4431      	add	r1, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    d2a2:	3b01      	subs	r3, #1
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    d2a4:	fbb1 f1f6 	udiv	r1, r1, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    d2a8:	fbb3 f6f6 	udiv	r6, r3, r6
		lll->interval = conn->llcp_cu.interval;
    d2ac:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
    d2b0:	8563      	strh	r3, [r4, #42]	; 0x2a
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    d2b2:	b28a      	uxth	r2, r1
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    d2b4:	1d83      	adds	r3, r0, #6
    d2b6:	429a      	cmp	r2, r3
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    d2b8:	f8a4 60c2 	strh.w	r6, [r4, #194]	; 0xc2
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    d2bc:	f8a4 20ce 	strh.w	r2, [r4, #206]	; 0xce
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    d2c0:	dd04      	ble.n	d2cc <event_conn_upd_prep+0x194>
    d2c2:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
    d2c6:	33fa      	adds	r3, #250	; 0xfa
    d2c8:	441a      	add	r2, r3
    d2ca:	b292      	uxth	r2, r2
				     (conn->apto_reload - (lll->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
    d2cc:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    d2d0:	f8a4 20ca 	strh.w	r2, [r4, #202]	; 0xca
		if (conn->llcp_cu.cmd) {
    d2d4:	071b      	lsls	r3, r3, #28
			conn->supervision_expire = 0U;
    d2d6:	bf44      	itt	mi
    d2d8:	2300      	movmi	r3, #0
    d2da:	f8a4 30c4 	strhmi.w	r3, [r4, #196]	; 0xc4
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    d2de:	2102      	movs	r1, #2
    d2e0:	2001      	movs	r0, #1
    d2e2:	f01a f91f 	bl	27524 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    d2e6:	2200      	movs	r2, #0
    d2e8:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    d2ea:	4681      	mov	r9, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    d2ec:	2001      	movs	r0, #1
    d2ee:	f00c ffd9 	bl	1a2a4 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    d2f2:	4964      	ldr	r1, [pc, #400]	; (d484 <event_conn_upd_prep+0x34c>)
    d2f4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    d2f8:	4620      	mov	r0, r4
    d2fa:	f00c ff63 	bl	1a1c4 <mem_index_get>
			      0);
#endif

		/* start peripheral/central with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    d2fe:	f100 0a03 	add.w	sl, r0, #3
    d302:	fa5f fa8a 	uxtb.w	sl, sl
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    d306:	4b60      	ldr	r3, [pc, #384]	; (d488 <event_conn_upd_prep+0x350>)
    d308:	9400      	str	r4, [sp, #0]
    d30a:	4652      	mov	r2, sl
    d30c:	2101      	movs	r1, #1
    d30e:	2000      	movs	r0, #0
    d310:	f00e f9d2 	bl	1b6b8 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d314:	f030 0302 	bics.w	r3, r0, #2
    d318:	d00c      	beq.n	d334 <event_conn_upd_prep+0x1fc>
    d31a:	4a55      	ldr	r2, [pc, #340]	; (d470 <event_conn_upd_prep+0x338>)
    d31c:	495b      	ldr	r1, [pc, #364]	; (d48c <event_conn_upd_prep+0x354>)
    d31e:	4856      	ldr	r0, [pc, #344]	; (d478 <event_conn_upd_prep+0x340>)
    d320:	f640 43eb 	movw	r3, #3307	; 0xceb
    d324:	f01e fe4f 	bl	2bfc6 <assert_print>
    d328:	4040      	eors	r0, r0
    d32a:	f380 8811 	msr	BASEPRI, r0
    d32e:	f04f 0003 	mov.w	r0, #3
    d332:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    d334:	4e4d      	ldr	r6, [pc, #308]	; (d46c <event_conn_upd_prep+0x334>)
    d336:	fbab 6b06 	umull	r6, fp, fp, r6
    d33a:	a349      	add	r3, pc, #292	; (adr r3, d460 <event_conn_upd_prep+0x328>)
    d33c:	e9d3 2300 	ldrd	r2, r3, [r3]
    d340:	4630      	mov	r0, r6
    d342:	4659      	mov	r1, fp
    d344:	f7fe ffdc 	bl	c300 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    d348:	9408      	str	r4, [sp, #32]
				     HAL_TICKER_REMAINDER(periodic_us),
    d34a:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    d34e:	9406      	str	r4, [sp, #24]
				     HAL_TICKER_REMAINDER(periodic_us),
    d350:	484f      	ldr	r0, [pc, #316]	; (d490 <event_conn_upd_prep+0x358>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    d352:	6923      	ldr	r3, [r4, #16]
    d354:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(periodic_us),
    d356:	fba5 0100 	umull	r0, r1, r5, r0
    d35a:	2307      	movs	r3, #7
    d35c:	fb03 1105 	mla	r1, r3, r5, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    d360:	4b4c      	ldr	r3, [pc, #304]	; (d494 <event_conn_upd_prep+0x35c>)
    d362:	9307      	str	r3, [sp, #28]
    d364:	4b4c      	ldr	r3, [pc, #304]	; (d498 <event_conn_upd_prep+0x360>)
    d366:	9305      	str	r3, [sp, #20]
				     HAL_TICKER_REMAINDER(periodic_us),
    d368:	1a30      	subs	r0, r6, r0
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    d36a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
				     HAL_TICKER_REMAINDER(periodic_us),
    d36e:	eb6b 0101 	sbc.w	r1, fp, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    d372:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    d374:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d378:	2300      	movs	r3, #0
    d37a:	f7fe ffc1 	bl	c300 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    d37e:	4643      	mov	r3, r8
    d380:	e9cd 5001 	strd	r5, r0, [sp, #4]
    d384:	9700      	str	r7, [sp, #0]
    d386:	4652      	mov	r2, sl
    d388:	2101      	movs	r1, #1
    d38a:	2000      	movs	r0, #0
    d38c:	f00e f90a 	bl	1b5a4 <ticker_start>
#else
				     ull_central_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d390:	f030 0302 	bics.w	r3, r0, #2
    d394:	d00c      	beq.n	d3b0 <event_conn_upd_prep+0x278>
    d396:	4a36      	ldr	r2, [pc, #216]	; (d470 <event_conn_upd_prep+0x338>)
    d398:	493c      	ldr	r1, [pc, #240]	; (d48c <event_conn_upd_prep+0x354>)
    d39a:	4837      	ldr	r0, [pc, #220]	; (d478 <event_conn_upd_prep+0x340>)
    d39c:	f640 5305 	movw	r3, #3333	; 0xd05
    d3a0:	f01e fe11 	bl	2bfc6 <assert_print>
    d3a4:	4040      	eors	r0, r0
    d3a6:	f380 8811 	msr	BASEPRI, r0
    d3aa:	f04f 0003 	mov.w	r0, #3
    d3ae:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    d3b0:	f1b9 0f00 	cmp.w	r9, #0
    d3b4:	f040 8136 	bne.w	d624 <event_conn_upd_prep+0x4ec>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
				      TICKER_USER_ID_ULL_LOW, 1);
		}
#endif

		return 0;
    d3b8:	2000      	movs	r0, #0
	}

	return -EINPROGRESS;
}
    d3ba:	b00b      	add	sp, #44	; 0x2c
    d3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    d3c0:	1a1b      	subs	r3, r3, r0
    d3c2:	492a      	ldr	r1, [pc, #168]	; (d46c <event_conn_upd_prep+0x334>)
    d3c4:	f240 40e2 	movw	r0, #1250	; 0x4e2
    d3c8:	fb03 f000 	mul.w	r0, r3, r0
    d3cc:	fba0 0101 	umull	r0, r1, r0, r1
    d3d0:	a323      	add	r3, pc, #140	; (adr r3, d460 <event_conn_upd_prep+0x328>)
    d3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    d3d6:	f7fe ff93 	bl	c300 <__aeabi_uldivmod>
    d3da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d3de:	4480      	add	r8, r0
    d3e0:	e731      	b.n	d246 <event_conn_upd_prep+0x10e>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    d3e2:	f890 20d9 	ldrb.w	r2, [r0, #217]	; 0xd9
    d3e6:	2a00      	cmp	r2, #0
    d3e8:	f43f aec6 	beq.w	d178 <event_conn_upd_prep+0x40>
			conn->periph.llcp_type = LLCP_NONE;
    d3ec:	f880 30d9 	strb.w	r3, [r0, #217]	; 0xd9
    d3f0:	e6c6      	b.n	d180 <event_conn_upd_prep+0x48>
			uint32_t ticks_prepare_to_start =
    d3f2:	68e1      	ldr	r1, [r4, #12]
    d3f4:	6862      	ldr	r2, [r4, #4]
			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
    d3f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    d3fa:	4291      	cmp	r1, r2
    d3fc:	bf2c      	ite	cs
    d3fe:	4488      	addcs	r8, r1
    d400:	4490      	addcc	r8, r2
    d402:	60a3      	str	r3, [r4, #8]
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
    d404:	eba8 0803 	sub.w	r8, r8, r3
    d408:	e6fc      	b.n	d204 <event_conn_upd_prep+0xcc>
		if ((conn->llcp_cu.interval != lll->interval) ||
    d40a:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
    d40e:	4594      	cmp	ip, r2
    d410:	f47f aee4 	bne.w	d1dc <event_conn_upd_prep+0xa4>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    d414:	f240 4ce2 	movw	ip, #1250	; 0x4e2
    d418:	fb0c fe03 	mul.w	lr, ip, r3
    d41c:	f242 7c10 	movw	ip, #10000	; 0x2710
    d420:	fb0c ec01 	mla	ip, ip, r1, lr
    d424:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    d428:	fbbc fcfe 	udiv	ip, ip, lr
		    (conn->llcp_cu.latency != lll->latency) ||
    d42c:	f8b4 e0c2 	ldrh.w	lr, [r4, #194]	; 0xc2
    d430:	fa1f fc8c 	uxth.w	ip, ip
    d434:	45e6      	cmp	lr, ip
    d436:	f47f aed1 	bne.w	d1dc <event_conn_upd_prep+0xa4>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    d43a:	2301      	movs	r3, #1
    d43c:	712b      	strb	r3, [r5, #4]
    d43e:	e6d8      	b.n	d1f2 <event_conn_upd_prep+0xba>
		LL_ASSERT(rx && rx->hdr.link);
    d440:	4a0b      	ldr	r2, [pc, #44]	; (d470 <event_conn_upd_prep+0x338>)
    d442:	4916      	ldr	r1, [pc, #88]	; (d49c <event_conn_upd_prep+0x364>)
    d444:	480c      	ldr	r0, [pc, #48]	; (d478 <event_conn_upd_prep+0x340>)
    d446:	f44f 6344 	mov.w	r3, #3136	; 0xc40
    d44a:	f01e fdbc 	bl	2bfc6 <assert_print>
    d44e:	4040      	eors	r0, r0
    d450:	f380 8811 	msr	BASEPRI, r0
    d454:	f04f 0003 	mov.w	r0, #3
    d458:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    d45a:	6828      	ldr	r0, [r5, #0]
    d45c:	e6b0      	b.n	d1c0 <event_conn_upd_prep+0x88>
    d45e:	bf00      	nop
    d460:	1afd498d 	.word	0x1afd498d
    d464:	00000007 	.word	0x00000007
    d468:	200028b4 	.word	0x200028b4
    d46c:	3b9aca00 	.word	0x3b9aca00
    d470:	00033640 	.word	0x00033640
    d474:	0003305c 	.word	0x0003305c
    d478:	00032fc4 	.word	0x00032fc4
    d47c:	026259ff 	.word	0x026259ff
    d480:	01c9c37f 	.word	0x01c9c37f
    d484:	20001948 	.word	0x20001948
    d488:	0001f235 	.word	0x0001f235
    d48c:	00033720 	.word	0x00033720
    d490:	1afd498d 	.word	0x1afd498d
    d494:	0001f1dd 	.word	0x0001f1dd
    d498:	0002383d 	.word	0x0002383d
    d49c:	0003370c 	.word	0x0003370c
		rx = ll_pdu_rx_alloc_peek(1);
    d4a0:	2001      	movs	r0, #1
    d4a2:	f010 fa7d 	bl	1d9a0 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    d4a6:	4606      	mov	r6, r0
    d4a8:	2800      	cmp	r0, #0
    d4aa:	f000 80cf 	beq.w	d64c <event_conn_upd_prep+0x514>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    d4ae:	4874      	ldr	r0, [pc, #464]	; (d680 <event_conn_upd_prep+0x548>)
    d4b0:	f00c fe52 	bl	1a158 <mem_acquire>
		if (!tx) {
    d4b4:	4605      	mov	r5, r0
    d4b6:	2800      	cmp	r0, #0
    d4b8:	f000 80c8 	beq.w	d64c <event_conn_upd_prep+0x514>
	if (!conn_upd_curr) {
    d4bc:	4b71      	ldr	r3, [pc, #452]	; (d684 <event_conn_upd_prep+0x54c>)
    d4be:	681a      	ldr	r2, [r3, #0]
    d4c0:	2a00      	cmp	r2, #0
    d4c2:	f000 80bb 	beq.w	d63c <event_conn_upd_prep+0x504>
		(void)ll_pdu_rx_alloc();
    d4c6:	f010 fa8b 	bl	1d9e0 <ll_pdu_rx_alloc>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d4ca:	792b      	ldrb	r3, [r5, #4]
		rx->hdr.link->mem = conn->llcp_rx;
    d4cc:	6832      	ldr	r2, [r6, #0]
    d4ce:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    d4d2:	6051      	str	r1, [r2, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d4d4:	f043 0303 	orr.w	r3, r3, #3
		conn->llcp_rx = rx;
    d4d8:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    d4dc:	2000      	movs	r0, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d4de:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    d4e0:	230c      	movs	r3, #12
    d4e2:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    d4e4:	71e8      	strb	r0, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    d4e6:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
    d4ea:	722b      	strb	r3, [r5, #8]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    d4ec:	4a66      	ldr	r2, [pc, #408]	; (d688 <event_conn_upd_prep+0x550>)
    d4ee:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
					      conn->lll.latency + 6;
    d4f2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    d4f4:	fba2 2303 	umull	r2, r3, r2, r3
    d4f8:	0a9b      	lsrs	r3, r3, #10
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    d4fa:	f8a5 3009 	strh.w	r3, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    d4fe:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
    d502:	f8a5 300b 	strh.w	r3, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    d506:	f8b4 3112 	ldrh.w	r3, [r4, #274]	; 0x112
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    d50a:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    d50e:	f8a5 300d 	strh.w	r3, [r5, #13]
					      conn->lll.latency + 6;
    d512:	3106      	adds	r1, #6
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    d514:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
    d518:	f8a5 300f 	strh.w	r3, [r5, #15]
					      conn->lll.latency + 6;
    d51c:	4449      	add	r1, r9
	    conn->tx_head &&
    d51e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
					      conn->lll.latency + 6;
    d522:	b289      	uxth	r1, r1
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    d524:	f360 0202 	bfi	r2, r0, #0, #3
		conn->llcp.conn_upd.instant = event_counter +
    d528:	f8a4 10e8 	strh.w	r1, [r4, #232]	; 0xe8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    d52c:	f884 210e 	strb.w	r2, [r4, #270]	; 0x10e
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    d530:	f8a5 1011 	strh.w	r1, [r5, #17]
	if (
    d534:	b1bb      	cbz	r3, d566 <event_conn_upd_prep+0x42e>
	    !conn->llcp_enc.pause_tx &&
    d536:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    d53a:	0796      	lsls	r6, r2, #30
    d53c:	d413      	bmi.n	d566 <event_conn_upd_prep+0x42e>
	    !conn->llcp_phy.pause_tx &&
    d53e:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    d542:	07d0      	lsls	r0, r2, #31
    d544:	d40f      	bmi.n	d566 <event_conn_upd_prep+0x42e>
		if (conn->tx_head == conn->tx_data) {
    d546:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    d54a:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    d54c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    d550:	d07f      	beq.n	d652 <event_conn_upd_prep+0x51a>
		} else if (!conn->tx_ctrl) {
    d552:	b962      	cbnz	r2, d56e <event_conn_upd_prep+0x436>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    d554:	791a      	ldrb	r2, [r3, #4]
    d556:	f002 0203 	and.w	r2, r2, #3
    d55a:	2a03      	cmp	r2, #3
    d55c:	f000 8085 	beq.w	d66a <event_conn_upd_prep+0x532>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    d560:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    d564:	e005      	b.n	d572 <event_conn_upd_prep+0x43a>
		if (!conn->tx_ctrl) {
    d566:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    d56a:	2a00      	cmp	r2, #0
    d56c:	d068      	beq.n	d640 <event_conn_upd_prep+0x508>
	tx->next = conn->tx_ctrl_last->next;
    d56e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    d572:	681a      	ldr	r2, [r3, #0]
    d574:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    d576:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    d578:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
    d57a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
    d57e:	b90b      	cbnz	r3, d584 <event_conn_upd_prep+0x44c>
		conn->tx_data_last = tx;
    d580:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
	return -EINPROGRESS;
    d584:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    d588:	b00b      	add	sp, #44	; 0x2c
    d58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				lll->periph.window_widening_periodic_us *
    d58e:	6c22      	ldr	r2, [r4, #64]	; 0x40
			lll->periph.window_widening_prepare_us -=
    d590:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    d592:	fb02 3319 	mls	r3, r2, r9, r3
    d596:	64a3      	str	r3, [r4, #72]	; 0x48
				ceiling_fraction(((lll_clock_ppm_local_get() +
    d598:	f018 f856 	bl	25648 <lll_clock_ppm_local_get>
    d59c:	4605      	mov	r5, r0
    d59e:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
    d5a2:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    d5a6:	f018 f851 	bl	2564c <lll_clock_ppm_get>
    d5aa:	4405      	add	r5, r0
    d5ac:	fb06 f505 	mul.w	r5, r6, r5
    d5b0:	4b36      	ldr	r3, [pc, #216]	; (d68c <event_conn_upd_prep+0x554>)
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    d5b2:	f894 211c 	ldrb.w	r2, [r4, #284]	; 0x11c
				ceiling_fraction(((lll_clock_ppm_local_get() +
    d5b6:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    d5ba:	f205 253f 	addw	r5, r5, #575	; 0x23f
    d5be:	fba3 3505 	umull	r3, r5, r3, r5
    d5c2:	0cad      	lsrs	r5, r5, #18
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    d5c4:	fb07 f202 	mul.w	r2, r7, r2
			lll->periph.window_widening_prepare_us +=
    d5c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			lll->periph.window_size_prepare_us =
    d5ca:	6522      	str	r2, [r4, #80]	; 0x50
				lll->periph.window_widening_periodic_us *
    d5cc:	fb05 f00a 	mul.w	r0, r5, sl
				(conn_interval_us >> 1) - EVENT_IFS_US;
    d5d0:	0872      	lsrs	r2, r6, #1
			lll->periph.window_widening_prepare_us +=
    d5d2:	4403      	add	r3, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
    d5d4:	3a96      	subs	r2, #150	; 0x96
			lll->periph.window_widening_prepare_us +=
    d5d6:	4293      	cmp	r3, r2
    d5d8:	bf28      	it	cs
    d5da:	4613      	movcs	r3, r2
			lll->periph.window_widening_periodic_us =
    d5dc:	6425      	str	r5, [r4, #64]	; 0x40
			periodic_us -= lll->periph.window_widening_periodic_us;
    d5de:	eba6 0b05 	sub.w	fp, r6, r5
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    d5e2:	4d2b      	ldr	r5, [pc, #172]	; (d690 <event_conn_upd_prep+0x558>)
			lll->periph.window_widening_prepare_us +=
    d5e4:	e9c4 2311 	strd	r2, r3, [r4, #68]	; 0x44
			conn->periph.ticks_to_offset = 0U;
    d5e8:	2300      	movs	r3, #0
    d5ea:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    d5ee:	fba0 0105 	umull	r0, r1, r0, r5
    d5f2:	a321      	add	r3, pc, #132	; (adr r3, d678 <event_conn_upd_prep+0x540>)
    d5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
    d5f8:	f7fe fe82 	bl	c300 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    d5fc:	4922      	ldr	r1, [pc, #136]	; (d688 <event_conn_upd_prep+0x550>)
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    d5fe:	eba8 0800 	sub.w	r8, r8, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    d602:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
    d606:	fba1 3000 	umull	r3, r0, r1, r0
    d60a:	0a80      	lsrs	r0, r0, #10
    d60c:	fb07 f000 	mul.w	r0, r7, r0
    d610:	a319      	add	r3, pc, #100	; (adr r3, d678 <event_conn_upd_prep+0x540>)
    d612:	e9d3 2300 	ldrd	r2, r3, [r3]
    d616:	fba0 0105 	umull	r0, r1, r0, r5
    d61a:	f7fe fe71 	bl	c300 <__aeabi_uldivmod>
    d61e:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			periodic_us -= lll->periph.window_widening_periodic_us;
    d622:	e62d      	b.n	d280 <event_conn_upd_prep+0x148>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    d624:	2201      	movs	r2, #1
    d626:	2102      	movs	r1, #2
    d628:	4610      	mov	r0, r2
    d62a:	f00c fe3b 	bl	1a2a4 <mayfly_enable>
    d62e:	e6c3      	b.n	d3b8 <event_conn_upd_prep+0x280>
			conn->procedure_expire = 0U;
    d630:	2300      	movs	r3, #0
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    d632:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->procedure_expire = 0U;
    d636:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
    d63a:	e5b2      	b.n	d1a2 <event_conn_upd_prep+0x6a>
		conn_upd_curr = conn;
    d63c:	601c      	str	r4, [r3, #0]
    d63e:	e742      	b.n	d4c6 <event_conn_upd_prep+0x38e>
			tx->next = conn->tx_head;
    d640:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    d642:	e9c4 5571 	strd	r5, r5, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    d646:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
    d64a:	e798      	b.n	d57e <event_conn_upd_prep+0x446>
			return -ENOBUFS;
    d64c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    d650:	e6b3      	b.n	d3ba <event_conn_upd_prep+0x282>
			conn->tx_data = conn->tx_data->next;
    d652:	6819      	ldr	r1, [r3, #0]
    d654:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    d658:	2a00      	cmp	r2, #0
    d65a:	d188      	bne.n	d56e <event_conn_upd_prep+0x436>
			tx->next = conn->tx_head->next;
    d65c:	681a      	ldr	r2, [r3, #0]
    d65e:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    d660:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    d662:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    d664:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
    d668:	e789      	b.n	d57e <event_conn_upd_prep+0x446>
	    ((pdu_data_tx->llctrl.opcode !=
    d66a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    d66c:	2a03      	cmp	r2, #3
    d66e:	d0f5      	beq.n	d65c <event_conn_upd_prep+0x524>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    d670:	2a0a      	cmp	r2, #10
    d672:	f47f af75 	bne.w	d560 <event_conn_upd_prep+0x428>
    d676:	e7f1      	b.n	d65c <event_conn_upd_prep+0x524>
    d678:	1afd498d 	.word	0x1afd498d
    d67c:	00000007 	.word	0x00000007
    d680:	20002948 	.word	0x20002948
    d684:	200028b4 	.word	0x200028b4
    d688:	d1b71759 	.word	0xd1b71759
    d68c:	431bde83 	.word	0x431bde83
    d690:	3b9aca00 	.word	0x3b9aca00
    d694:	00000000 	.word	0x00000000

0000d698 <ull_periph_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param);

void ull_periph_setup(struct node_rx_hdr *rx, struct node_rx_ftr *ftr,
		     struct lll_conn *lll)
{
    d698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memq_link_t *link;
	uint16_t timeout;
	uint8_t chan_sel;
	void *node;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    d69c:	680b      	ldr	r3, [r1, #0]
	conn = lll->hdr.parent;
    d69e:	f8d2 8000 	ldr.w	r8, [r2]
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    d6a2:	681b      	ldr	r3, [r3, #0]
{
    d6a4:	b097      	sub	sp, #92	; 0x5c
    d6a6:	460c      	mov	r4, r1
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    d6a8:	930a      	str	r3, [sp, #40]	; 0x28

	/* Populate the peripheral context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_adv->tx_addr;
    d6aa:	7f03      	ldrb	r3, [r0, #28]
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    d6ac:	f100 011e 	add.w	r1, r0, #30
	peer_addr_type = pdu_adv->tx_addr;
    d6b0:	f3c3 1380 	ubfx	r3, r3, #6, #1
{
    d6b4:	4605      	mov	r5, r0
    d6b6:	4617      	mov	r7, r2
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    d6b8:	a814      	add	r0, sp, #80	; 0x50
    d6ba:	2206      	movs	r2, #6
	peer_addr_type = pdu_adv->tx_addr;
    d6bc:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    d6c0:	f020 fcb3 	bl	2e02a <memcpy>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	uint8_t rl_idx = ftr->rl_idx;
    d6c4:	f894 9011 	ldrb.w	r9, [r4, #17]

	if (rl_idx != FILTER_IDX_NONE) {
    d6c8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		/* Get identity address */
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
    d6cc:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
	if (rl_idx != FILTER_IDX_NONE) {
    d6d0:	d05b      	beq.n	d78a <ull_periph_setup+0xf2>
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
    d6d2:	465a      	mov	r2, fp
    d6d4:	f10d 0147 	add.w	r1, sp, #71	; 0x47
    d6d8:	4648      	mov	r0, r9
    d6da:	f016 fbc1 	bl	23e60 <ll_rl_id_addr_get>
		/* Mark it as identity address from RPA (0x02, 0x03) */
		peer_addr_type += 2;
    d6de:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    d6e2:	3302      	adds	r3, #2
    d6e4:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	}

	/* Use the link stored in the node rx to enqueue connection
	 * complete node rx towards LL context.
	 */
	link = rx->link;
    d6e8:	4629      	mov	r1, r5
	conn->own_id_addr_type = own_id_addr_type;
	(void)memcpy(conn->own_id_addr, own_id_addr,
		     sizeof(conn->own_id_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    d6ea:	2203      	movs	r2, #3
	link = rx->link;
    d6ec:	f851 6b2e 	ldr.w	r6, [r1], #46
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    d6f0:	f107 0008 	add.w	r0, r7, #8
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    d6f4:	f107 0a04 	add.w	sl, r7, #4
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    d6f8:	f020 fc97 	bl	2e02a <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    d6fc:	f107 0318 	add.w	r3, r7, #24
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    d700:	2204      	movs	r2, #4
    d702:	f105 012a 	add.w	r1, r5, #42	; 0x2a
    d706:	4650      	mov	r0, sl
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    d708:	930b      	str	r3, [sp, #44]	; 0x2c
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    d70a:	f020 fc8e 	bl	2e02a <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    d70e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d710:	2205      	movs	r2, #5
    d712:	f105 013a 	add.w	r1, r5, #58	; 0x3a
    d716:	4618      	mov	r0, r3
    d718:	f020 fc87 	bl	2e02a <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    d71c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d71e:	2105      	movs	r1, #5
    d720:	4618      	mov	r0, r3
    d722:	f00c feef 	bl	1a504 <util_ones_count_get>
    d726:	7f7b      	ldrb	r3, [r7, #29]
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    d728:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    d72c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d730:	f360 0305 	bfi	r3, r0, #0, #6
    d734:	777b      	strb	r3, [r7, #29]
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    d736:	f3c2 0304 	ubfx	r3, r2, #0, #5
    d73a:	77bb      	strb	r3, [r7, #30]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    d73c:	8eab      	ldrh	r3, [r5, #52]	; 0x34
    d73e:	81fb      	strh	r3, [r7, #14]
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
    d740:	2801      	cmp	r0, #1
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    d742:	b299      	uxth	r1, r3
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    d744:	f002 031f 	and.w	r3, r2, #31
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
    d748:	d905      	bls.n	d756 <ull_periph_setup+0xbe>
    d74a:	331b      	adds	r3, #27
    d74c:	f003 031f 	and.w	r3, r3, #31
    d750:	2b0b      	cmp	r3, #11
    d752:	d800      	bhi.n	d756 <ull_periph_setup+0xbe>
	    (lll->data_chan_hop < CHM_HOP_COUNT_MIN) ||
	    (lll->data_chan_hop > CHM_HOP_COUNT_MAX) ||
    d754:	b9f9      	cbnz	r1, d796 <ull_periph_setup+0xfe>

static void invalid_release(struct ull_hdr *hdr, struct lll_conn *lll,
			    memq_link_t *link, struct node_rx_hdr *rx)
{
	/* Reset the advertising disabled callback */
	hdr->disabled_cb = NULL;
    d756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		struct node_rx_pdu *rx_csa;

		/* pick the rx node instance stored within the
		 * connection rx node.
		 */
		rx_csa = rx->rx_ftr.extra;
    d758:	68ec      	ldr	r4, [r5, #12]
	hdr->disabled_cb = NULL;
    d75a:	2200      	movs	r2, #0
    d75c:	615a      	str	r2, [r3, #20]
	lll->periph.initiated = 0U;
    d75e:	f897 3020 	ldrb.w	r3, [r7, #32]

		/* Enqueue the connection event to be release */
		ll_rx_put(link, rx);
    d762:	4630      	mov	r0, r6
	lll->periph.initiated = 0U;
    d764:	f362 0300 	bfi	r3, r2, #0, #1
	rx->type = NODE_RX_TYPE_RELEASE;
    d768:	2601      	movs	r6, #1
	lll->periph.initiated = 0U;
    d76a:	f887 3020 	strb.w	r3, [r7, #32]
		ll_rx_put(link, rx);
    d76e:	4629      	mov	r1, r5
	rx->type = NODE_RX_TYPE_RELEASE;
    d770:	712e      	strb	r6, [r5, #4]
		ll_rx_put(link, rx);
    d772:	f010 f905 	bl	1d980 <ll_rx_put>
		/* Mark for buffer for release */
		rx->type = NODE_RX_TYPE_RELEASE;
	}

	/* Enqueue connection or CSA event to be release */
	ll_rx_put(link, rx);
    d776:	6820      	ldr	r0, [r4, #0]
		rx->type = NODE_RX_TYPE_RELEASE;
    d778:	7126      	strb	r6, [r4, #4]
	ll_rx_put(link, rx);
    d77a:	4621      	mov	r1, r4
    d77c:	f010 f900 	bl	1d980 <ll_rx_put>
	ll_rx_sched();
    d780:	f010 f908 	bl	1d994 <ll_rx_sched>
}
    d784:	b017      	add	sp, #92	; 0x5c
    d786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
    d78a:	2206      	movs	r2, #6
    d78c:	a914      	add	r1, sp, #80	; 0x50
    d78e:	4658      	mov	r0, fp
    d790:	f020 fc4b 	bl	2e02a <memcpy>
    d794:	e7a8      	b.n	d6e8 <ull_periph_setup+0x50>
	((struct lll_adv *)ftr->param)->conn = NULL;
    d796:	6823      	ldr	r3, [r4, #0]
    d798:	2000      	movs	r0, #0
    d79a:	6058      	str	r0, [r3, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    d79c:	f895 0037 	ldrb.w	r0, [r5, #55]	; 0x37
    d7a0:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
    d7a4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    d7a8:	823b      	strh	r3, [r7, #16]
	conn->periph.sca = pdu_adv->connect_ind.sca;
    d7aa:	f898 30d8 	ldrb.w	r3, [r8, #216]	; 0xd8
    d7ae:	0952      	lsrs	r2, r2, #5
    d7b0:	f362 03c5 	bfi	r3, r2, #3, #3
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    d7b4:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
    d7b6:	920d      	str	r2, [sp, #52]	; 0x34
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    d7b8:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d7bc:	fb02 f001 	mul.w	r0, r2, r1
	conn->periph.sca = pdu_adv->connect_ind.sca;
    d7c0:	f888 30d8 	strb.w	r3, [r8, #216]	; 0xd8
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    d7c4:	900b      	str	r0, [sp, #44]	; 0x2c
		ceiling_fraction(((lll_clock_ppm_local_get() +
    d7c6:	f017 ff3f 	bl	25648 <lll_clock_ppm_local_get>
    d7ca:	900c      	str	r0, [sp, #48]	; 0x30
    d7cc:	f898 00d8 	ldrb.w	r0, [r8, #216]	; 0xd8
    d7d0:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    d7d4:	f017 ff3a 	bl	2564c <lll_clock_ppm_get>
    d7d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d7da:	49c5      	ldr	r1, [pc, #788]	; (daf0 <ull_periph_setup+0x458>)
    d7dc:	4403      	add	r3, r0
    d7de:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d7e0:	fb00 f303 	mul.w	r3, r0, r3
    d7e4:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    d7e8:	f203 233f 	addw	r3, r3, #575	; 0x23f
    d7ec:	fba1 2303 	umull	r2, r3, r1, r3
    d7f0:	0c9b      	lsrs	r3, r3, #18
	lll->periph.window_widening_periodic_us =
    d7f2:	627b      	str	r3, [r7, #36]	; 0x24
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    d7f4:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    d7f8:	8a39      	ldrh	r1, [r7, #16]
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    d7fa:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d7fe:	fb03 f202 	mul.w	r2, r3, r2
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
    d802:	0843      	lsrs	r3, r0, #1
    d804:	3b96      	subs	r3, #150	; 0x96
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    d806:	63ba      	str	r2, [r7, #56]	; 0x38
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
    d808:	62bb      	str	r3, [r7, #40]	; 0x28
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    d80a:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    d80c:	4ab9      	ldr	r2, [pc, #740]	; (daf4 <ull_periph_setup+0x45c>)
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    d80e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    d812:	469e      	mov	lr, r3
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    d814:	4bb8      	ldr	r3, [pc, #736]	; (daf8 <ull_periph_setup+0x460>)
    d816:	4684      	mov	ip, r0
    d818:	4403      	add	r3, r0
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    d81a:	4402      	add	r2, r0
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    d81c:	fbb3 f3f0 	udiv	r3, r3, r0
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    d820:	fbb2 f2f0 	udiv	r2, r2, r0
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    d824:	f242 7010 	movw	r0, #10000	; 0x2710
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    d828:	f8a8 20c6 	strh.w	r2, [r8, #198]	; 0xc6
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    d82c:	fa1f f28e 	uxth.w	r2, lr
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    d830:	fb00 c202 	mla	r2, r0, r2, ip
    d834:	3a01      	subs	r2, #1
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    d836:	1d88      	adds	r0, r1, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    d838:	fbb2 f2fc 	udiv	r2, r2, ip
    d83c:	f8a8 20c2 	strh.w	r2, [r8, #194]	; 0xc2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    d840:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    d842:	4282      	cmp	r2, r0
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    d844:	f8a8 20ce 	strh.w	r2, [r8, #206]	; 0xce
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    d848:	dd04      	ble.n	d854 <ull_periph_setup+0x1bc>
    d84a:	f5c1 417f 	rsb	r1, r1, #65280	; 0xff00
    d84e:	31fa      	adds	r1, #250	; 0xfa
    d850:	440a      	add	r2, r1
    d852:	b292      	uxth	r2, r2
    d854:	f8a8 20ca 	strh.w	r2, [r8, #202]	; 0xca
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
    d858:	4651      	mov	r1, sl
    d85a:	2204      	movs	r2, #4
    d85c:	f108 00dc 	add.w	r0, r8, #220	; 0xdc
    d860:	f020 fbe3 	bl	2e02a <memcpy>
		chan_sel = pdu_adv->chan_sel;
    d864:	462b      	mov	r3, r5
    d866:	f813 2f1c 	ldrb.w	r2, [r3, #28]!
    d86a:	f3c2 1140 	ubfx	r1, r2, #5, #1
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    d86e:	07da      	lsls	r2, r3, #31
		chan_sel = pdu_adv->chan_sel;
    d870:	910f      	str	r1, [sp, #60]	; 0x3c
    d872:	910c      	str	r1, [sp, #48]	; 0x30
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    d874:	f100 8115 	bmi.w	daa2 <ull_periph_setup+0x40a>
	cc->status = 0U;
    d878:	f44f 7380 	mov.w	r3, #256	; 0x100
    d87c:	83ab      	strh	r3, [r5, #28]
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    d87e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d880:	f893 0026 	ldrb.w	r0, [r3, #38]	; 0x26
    d884:	f017 f864 	bl	24950 <ull_filter_lll_lrpa_used>
    d888:	4601      	mov	r1, r0
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    d88a:	2206      	movs	r2, #6
    d88c:	f105 002b 	add.w	r0, r5, #43	; 0x2b
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    d890:	2900      	cmp	r1, #0
    d892:	f000 80eb 	beq.w	da6c <ull_periph_setup+0x3d4>
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    d896:	f105 0124 	add.w	r1, r5, #36	; 0x24
    d89a:	f020 fbc6 	bl	2e02a <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
    d89e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		memcpy(cc->peer_rpa, peer_addr, BDADDR_SIZE);
    d8a2:	f105 0025 	add.w	r0, r5, #37	; 0x25
	if (rl_idx != FILTER_IDX_NONE) {
    d8a6:	f000 80e4 	beq.w	da72 <ull_periph_setup+0x3da>
		memcpy(cc->peer_rpa, peer_addr, BDADDR_SIZE);
    d8aa:	a914      	add	r1, sp, #80	; 0x50
    d8ac:	2206      	movs	r2, #6
    d8ae:	f020 fbbc 	bl	2e02a <memcpy>
	cc->peer_addr_type = peer_addr_type;
    d8b2:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    d8b6:	77ab      	strb	r3, [r5, #30]
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
    d8b8:	4659      	mov	r1, fp
    d8ba:	2206      	movs	r2, #6
    d8bc:	f105 001f 	add.w	r0, r5, #31
    d8c0:	f020 fbb3 	bl	2e02a <memcpy>
	cc->sca = conn->periph.sca;
    d8c4:	f898 30d8 	ldrb.w	r3, [r8, #216]	; 0xd8
	cc->interval = lll->interval;
    d8c8:	89fa      	ldrh	r2, [r7, #14]
    d8ca:	866a      	strh	r2, [r5, #50]	; 0x32
	cc->latency = lll->latency;
    d8cc:	8a3a      	ldrh	r2, [r7, #16]
    d8ce:	86aa      	strh	r2, [r5, #52]	; 0x34
	cc->sca = conn->periph.sca;
    d8d0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	cc->timeout = timeout;
    d8d4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
	cc->sca = conn->periph.sca;
    d8d8:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	cc->timeout = timeout;
    d8dc:	86ea      	strh	r2, [r5, #54]	; 0x36
	lll->handle = ll_conn_handle_get(conn);
    d8de:	4640      	mov	r0, r8
    d8e0:	f012 f87c 	bl	1f9dc <ll_conn_handle_get>
		ll_rx_put(link, rx);
    d8e4:	4629      	mov	r1, r5
	lll->handle = ll_conn_handle_get(conn);
    d8e6:	81b8      	strh	r0, [r7, #12]
	rx->handle = lll->handle;
    d8e8:	80e8      	strh	r0, [r5, #6]
		rx_csa = (void *)ftr->extra;
    d8ea:	6865      	ldr	r5, [r4, #4]
		ll_rx_put(link, rx);
    d8ec:	4630      	mov	r0, r6
    d8ee:	f010 f847 	bl	1d980 <ll_rx_put>
		rx->handle = lll->handle;
    d8f2:	89bb      	ldrh	r3, [r7, #12]
    d8f4:	80eb      	strh	r3, [r5, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    d8f6:	231c      	movs	r3, #28
    d8f8:	712b      	strb	r3, [r5, #4]
		if (chan_sel) {
    d8fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		link = rx->link;
    d8fc:	682e      	ldr	r6, [r5, #0]
		if (chan_sel) {
    d8fe:	2b00      	cmp	r3, #0
    d900:	f040 80bc 	bne.w	da7c <ull_periph_setup+0x3e4>
			cs->csa = 0x00;
    d904:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    d908:	772b      	strb	r3, [r5, #28]
	ll_rx_put(link, rx);
    d90a:	4629      	mov	r1, r5
    d90c:	4630      	mov	r0, r6
    d90e:	f010 f837 	bl	1d980 <ll_rx_put>
	ll_rx_sched();
    d912:	f010 f83f 	bl	1d994 <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    d916:	f897 0045 	ldrb.w	r0, [r7, #69]	; 0x45
	max_tx_time = lll->max_tx_time;
    d91a:	f8b7 5040 	ldrh.w	r5, [r7, #64]	; 0x40
	max_rx_time = lll->max_rx_time;
    d91e:	f8b7 6042 	ldrh.w	r6, [r7, #66]	; 0x42
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    d922:	2101      	movs	r1, #1
    d924:	f000 0007 	and.w	r0, r0, #7
    d928:	f017 fc9e 	bl	25268 <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    d92c:	442e      	add	r6, r5
    d92e:	f506 76e1 	add.w	r6, r6, #450	; 0x1c2
    d932:	1831      	adds	r1, r6, r0
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    d934:	4682      	mov	sl, r0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    d936:	4871      	ldr	r0, [pc, #452]	; (dafc <ull_periph_setup+0x464>)
	conn->ull.ticks_active_to_start = 0U;
    d938:	f04f 0900 	mov.w	r9, #0
	conn->ull.ticks_prepare_to_start =
    d93c:	2331      	movs	r3, #49	; 0x31
    d93e:	f8c8 3008 	str.w	r3, [r8, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    d942:	fba1 0100 	umull	r0, r1, r1, r0
    d946:	a368      	add	r3, pc, #416	; (adr r3, dae8 <ull_periph_setup+0x450>)
    d948:	e9d3 2300 	ldrd	r2, r3, [r3]
	conn->ull.ticks_active_to_start = 0U;
    d94c:	f8c8 9004 	str.w	r9, [r8, #4]
	conn->ull.ticks_preempt_to_start =
    d950:	f8c8 900c 	str.w	r9, [r8, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    d954:	f7fe fcd4 	bl	c300 <__aeabi_uldivmod>
	conn_interval_us -= lll->periph.window_widening_periodic_us;
    d958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d95a:	6a7e      	ldr	r6, [r7, #36]	; 0x24
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    d95c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	conn_offset_us = ftr->radio_end_us;
    d95e:	68e5      	ldr	r5, [r4, #12]
	conn_interval_us -= lll->periph.window_widening_periodic_us;
    d960:	1b9e      	subs	r6, r3, r6
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    d962:	f240 43e2 	movw	r3, #1250	; 0x4e2
    d966:	fb03 5502 	mla	r5, r3, r2, r5
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    d96a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us -= EVENT_JITTER_US;
    d96e:	f205 45b2 	addw	r5, r5, #1202	; 0x4b2
	conn_offset_us -= ready_delay_us;
    d972:	eba5 030a 	sub.w	r3, r5, sl
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    d976:	464a      	mov	r2, r9
    d978:	2102      	movs	r1, #2
	conn->ull.ticks_slot =
    d97a:	f8c8 0010 	str.w	r0, [r8, #16]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    d97e:	2001      	movs	r0, #1
	conn_offset_us -= ready_delay_us;
    d980:	930b      	str	r3, [sp, #44]	; 0x2c
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    d982:	f00c fc8f 	bl	1a2a4 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    d986:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    d988:	4628      	mov	r0, r5
    d98a:	f011 f8e9 	bl	1eb60 <ull_adv_handle_get>
    d98e:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    d990:	4b5b      	ldr	r3, [pc, #364]	; (db00 <ull_periph_setup+0x468>)
    d992:	9500      	str	r5, [sp, #0]
    d994:	b2d2      	uxtb	r2, r2
    d996:	4648      	mov	r0, r9
    d998:	2101      	movs	r1, #1
    d99a:	f00d fe8d 	bl	1b6b8 <ticker_stop>
}

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    d99e:	2801      	cmp	r0, #1
    d9a0:	f000 808c 	beq.w	dabc <ull_periph_setup+0x424>
	if (adv->lll.is_hdcd) {
    d9a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d9a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    d9aa:	07db      	lsls	r3, r3, #31
    d9ac:	d471      	bmi.n	da92 <ull_periph_setup+0x3fa>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    d9ae:	4640      	mov	r0, r8
    d9b0:	f012 f814 	bl	1f9dc <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    d9b4:	f8df 9144 	ldr.w	r9, [pc, #324]	; dafc <ull_periph_setup+0x464>
    d9b8:	fba6 5609 	umull	r5, r6, r6, r9
    d9bc:	a34a      	add	r3, pc, #296	; (adr r3, dae8 <ull_periph_setup+0x450>)
    d9be:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    d9c2:	4683      	mov	fp, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    d9c4:	4631      	mov	r1, r6
    d9c6:	4628      	mov	r0, r5
    d9c8:	f7fe fc9a 	bl	c300 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    d9cc:	68a3      	ldr	r3, [r4, #8]
    d9ce:	f8cd 8018 	str.w	r8, [sp, #24]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    d9d2:	f10b 0403 	add.w	r4, fp, #3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    d9d6:	f1a3 0b3a 	sub.w	fp, r3, #58	; 0x3a
    d9da:	4b4a      	ldr	r3, [pc, #296]	; (db04 <ull_periph_setup+0x46c>)
    d9dc:	9307      	str	r3, [sp, #28]
    d9de:	4b4a      	ldr	r3, [pc, #296]	; (db08 <ull_periph_setup+0x470>)
    d9e0:	9305      	str	r3, [sp, #20]
    d9e2:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    d9e6:	9308      	str	r3, [sp, #32]
    d9e8:	f8d8 3010 	ldr.w	r3, [r8, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    d9ec:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
    d9f0:	4846      	ldr	r0, [pc, #280]	; (db0c <ull_periph_setup+0x474>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    d9f2:	f04f 0a00 	mov.w	sl, #0
    d9f6:	e9cd a303 	strd	sl, r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    d9fa:	fba7 0100 	umull	r0, r1, r7, r0
    d9fe:	2307      	movs	r3, #7
    da00:	1a28      	subs	r0, r5, r0
    da02:	fb03 1107 	mla	r1, r3, r7, r1
    da06:	eb66 0101 	sbc.w	r1, r6, r1
    da0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    da0e:	2300      	movs	r3, #0
    da10:	f7fe fc76 	bl	c300 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    da14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    da16:	e9cd 7001 	strd	r7, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    da1a:	fba3 0109 	umull	r0, r1, r3, r9
    da1e:	a332      	add	r3, pc, #200	; (adr r3, dae8 <ull_periph_setup+0x450>)
    da20:	e9d3 2300 	ldrd	r2, r3, [r3]
    da24:	f7fe fc6c 	bl	c300 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    da28:	b2e4      	uxtb	r4, r4
    da2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    da2e:	9000      	str	r0, [sp, #0]
    da30:	465b      	mov	r3, fp
    da32:	4622      	mov	r2, r4
    da34:	2101      	movs	r1, #1
    da36:	4650      	mov	r0, sl
    da38:	f00d fdb4 	bl	1b5a4 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    da3c:	f030 0302 	bics.w	r3, r0, #2
    da40:	d00c      	beq.n	da5c <ull_periph_setup+0x3c4>
    da42:	4a33      	ldr	r2, [pc, #204]	; (db10 <ull_periph_setup+0x478>)
    da44:	4933      	ldr	r1, [pc, #204]	; (db14 <ull_periph_setup+0x47c>)
    da46:	4834      	ldr	r0, [pc, #208]	; (db18 <ull_periph_setup+0x480>)
    da48:	f240 13c9 	movw	r3, #457	; 0x1c9
    da4c:	f01e fabb 	bl	2bfc6 <assert_print>
    da50:	4040      	eors	r0, r0
    da52:	f380 8811 	msr	BASEPRI, r0
    da56:	f04f 0003 	mov.w	r0, #3
    da5a:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    da5c:	2201      	movs	r2, #1
    da5e:	2102      	movs	r1, #2
    da60:	4610      	mov	r0, r2
    da62:	f00c fc1f 	bl	1a2a4 <mayfly_enable>
}
    da66:	b017      	add	sp, #92	; 0x5c
    da68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
    da6c:	f020 fae8 	bl	2e040 <memset>
    da70:	e715      	b.n	d89e <ull_periph_setup+0x206>
		memset(cc->peer_rpa, 0x0, BDADDR_SIZE);
    da72:	2206      	movs	r2, #6
    da74:	2100      	movs	r1, #0
    da76:	f020 fae3 	bl	2e040 <memset>
    da7a:	e71a      	b.n	d8b2 <ull_periph_setup+0x21a>
			lll->data_chan_sel = 1;
    da7c:	7f7b      	ldrb	r3, [r7, #29]
    da7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    da82:	777b      	strb	r3, [r7, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    da84:	4650      	mov	r0, sl
    da86:	f015 fff7 	bl	23a78 <lll_chan_id>
			cs->csa = 0x01;
    da8a:	2301      	movs	r3, #1
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    da8c:	83f8      	strh	r0, [r7, #30]
			cs->csa = 0x01;
    da8e:	772b      	strb	r3, [r5, #28]
    da90:	e73b      	b.n	d90a <ull_periph_setup+0x272>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    da92:	2300      	movs	r3, #0
    da94:	2201      	movs	r2, #1
    da96:	9300      	str	r3, [sp, #0]
    da98:	4618      	mov	r0, r3
    da9a:	4611      	mov	r1, r2
    da9c:	f00d fe0c 	bl	1b6b8 <ticker_stop>
    daa0:	e785      	b.n	d9ae <ull_periph_setup+0x316>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    daa2:	4a1b      	ldr	r2, [pc, #108]	; (db10 <ull_periph_setup+0x478>)
    daa4:	491d      	ldr	r1, [pc, #116]	; (db1c <ull_periph_setup+0x484>)
    daa6:	481c      	ldr	r0, [pc, #112]	; (db18 <ull_periph_setup+0x480>)
    daa8:	23f1      	movs	r3, #241	; 0xf1
    daaa:	f01e fa8c 	bl	2bfc6 <assert_print>
    daae:	4040      	eors	r0, r0
    dab0:	f380 8811 	msr	BASEPRI, r0
    dab4:	f04f 0003 	mov.w	r0, #3
    dab8:	df02      	svc	2
    daba:	e6dd      	b.n	d878 <ull_periph_setup+0x1e0>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    dabc:	f010 f83e 	bl	1db3c <ull_disable_mark_get>
    dac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    dac2:	4283      	cmp	r3, r0
    dac4:	f43f af6e 	beq.w	d9a4 <ull_periph_setup+0x30c>
    dac8:	4a11      	ldr	r2, [pc, #68]	; (db10 <ull_periph_setup+0x478>)
    daca:	4915      	ldr	r1, [pc, #84]	; (db20 <ull_periph_setup+0x488>)
    dacc:	4812      	ldr	r0, [pc, #72]	; (db18 <ull_periph_setup+0x480>)
    dace:	f240 239f 	movw	r3, #671	; 0x29f
    dad2:	f01e fa78 	bl	2bfc6 <assert_print>
    dad6:	4040      	eors	r0, r0
    dad8:	f380 8811 	msr	BASEPRI, r0
    dadc:	f04f 0003 	mov.w	r0, #3
    dae0:	df02      	svc	2
		  param == ull_disable_mark_get());
}
    dae2:	e75f      	b.n	d9a4 <ull_periph_setup+0x30c>
    dae4:	f3af 8000 	nop.w
    dae8:	1afd498d 	.word	0x1afd498d
    daec:	00000007 	.word	0x00000007
    daf0:	431bde83 	.word	0x431bde83
    daf4:	026259ff 	.word	0x026259ff
    daf8:	01c9c37f 	.word	0x01c9c37f
    dafc:	3b9aca00 	.word	0x3b9aca00
    db00:	00023801 	.word	0x00023801
    db04:	000237d1 	.word	0x000237d1
    db08:	0002383d 	.word	0x0002383d
    db0c:	1afd498d 	.word	0x1afd498d
    db10:	00033848 	.word	0x00033848
    db14:	00033720 	.word	0x00033720
    db18:	00032fc4 	.word	0x00032fc4
    db1c:	000331cc 	.word	0x000331cc
    db20:	000338a4 	.word	0x000338a4
    db24:	00000000 	.word	0x00000000

0000db28 <nrf_flash_sync_exe>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
	_ticker_sync_context.slot = duration;
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
    db28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db2c:	b08f      	sub	sp, #60	; 0x3c
			      /* (MAYFLY_CALL_ID_PROGRAM) */
			   ticker_id, /* flash ticker id */
			   ticker_ticks_now_get(), /* current tick */
			   0, /* first int. immediately */
			   /* period */
			   HAL_TICKER_US_TO_TICKS(
    db2e:	f8df 80d8 	ldr.w	r8, [pc, #216]	; dc08 <nrf_flash_sync_exe+0xe0>
{
    db32:	900a      	str	r0, [sp, #40]	; 0x28
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    db34:	f10d 0137 	add.w	r1, sp, #55	; 0x37
    db38:	f10d 0036 	add.w	r0, sp, #54	; 0x36
    db3c:	f00f ff9a 	bl	1da74 <ll_timeslice_ticker_id_get>
			   HAL_TICKER_US_TO_TICKS(
    db40:	4f32      	ldr	r7, [pc, #200]	; (dc0c <nrf_flash_sync_exe+0xe4>)
	err = ticker_start(instance_index,
    db42:	f89d a036 	ldrb.w	sl, [sp, #54]	; 0x36
    db46:	f89d b037 	ldrb.w	fp, [sp, #55]	; 0x37
    db4a:	f00d fdf7 	bl	1b73c <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(
    db4e:	f8d8 4000 	ldr.w	r4, [r8]
    db52:	fba4 5407 	umull	r5, r4, r4, r7
    db56:	a32a      	add	r3, pc, #168	; (adr r3, dc00 <nrf_flash_sync_exe+0xd8>)
    db58:	e9d3 2300 	ldrd	r2, r3, [r3]
	err = ticker_start(instance_index,
    db5c:	4681      	mov	r9, r0
			   HAL_TICKER_US_TO_TICKS(
    db5e:	4621      	mov	r1, r4
    db60:	4628      	mov	r0, r5
    db62:	f7fe fbcd 	bl	c300 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    db66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			   HAL_TICKER_US_TO_TICKS(
    db68:	900b      	str	r0, [sp, #44]	; 0x2c
				_ticker_sync_context.interval),
			   /* period remainder */
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
			   0, /* lazy, voluntary skips */
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    db6a:	f8d8 0004 	ldr.w	r0, [r8, #4]
	err = ticker_start(instance_index,
    db6e:	9306      	str	r3, [sp, #24]
    db70:	4b27      	ldr	r3, [pc, #156]	; (dc10 <nrf_flash_sync_exe+0xe8>)
    db72:	9305      	str	r3, [sp, #20]
    db74:	2600      	movs	r6, #0
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    db76:	a322      	add	r3, pc, #136	; (adr r3, dc00 <nrf_flash_sync_exe+0xd8>)
    db78:	e9d3 2300 	ldrd	r2, r3, [r3]
    db7c:	fba0 0107 	umull	r0, r1, r0, r7
	err = ticker_start(instance_index,
    db80:	e9cd 6607 	strd	r6, r6, [sp, #28]
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    db84:	f7fe fbbc 	bl	c300 <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    db88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	err = ticker_start(instance_index,
    db8a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    db8e:	e9cd 6003 	strd	r6, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    db92:	4820      	ldr	r0, [pc, #128]	; (dc14 <nrf_flash_sync_exe+0xec>)
    db94:	f023 477f 	bic.w	r7, r3, #4278190080	; 0xff000000
    db98:	fba7 0100 	umull	r0, r1, r7, r0
    db9c:	2307      	movs	r3, #7
    db9e:	1a28      	subs	r0, r5, r0
    dba0:	fb03 1107 	mla	r1, r3, r7, r1
    dba4:	eb64 0101 	sbc.w	r1, r4, r1
    dba8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    dbac:	2300      	movs	r3, #0
    dbae:	f7fe fba7 	bl	c300 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    dbb2:	9600      	str	r6, [sp, #0]
    dbb4:	e9cd 7001 	strd	r7, r0, [sp, #4]
    dbb8:	464b      	mov	r3, r9
    dbba:	465a      	mov	r2, fp
    dbbc:	2103      	movs	r1, #3
    dbbe:	4650      	mov	r0, sl
    dbc0:	f00d fcf0 	bl	1b5a4 <ticker_start>
			   time_slot_callback_prepare,
			   op_desc,
			   NULL, /* no op callback */
			   NULL);

	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
    dbc4:	f030 0402 	bics.w	r4, r0, #2
    dbc8:	d116      	bne.n	dbf8 <nrf_flash_sync_exe+0xd0>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    dbca:	4a13      	ldr	r2, [pc, #76]	; (dc18 <nrf_flash_sync_exe+0xf0>)
    dbcc:	4813      	ldr	r0, [pc, #76]	; (dc1c <nrf_flash_sync_exe+0xf4>)
    dbce:	2300      	movs	r3, #0
    dbd0:	f01c fd82 	bl	2a6d8 <z_impl_k_sem_take>
		result = -ECANCELED;
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
    dbd4:	b168      	cbz	r0, dbf2 <nrf_flash_sync_exe+0xca>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
    dbd6:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    dbda:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    dbde:	9400      	str	r4, [sp, #0]
    dbe0:	4623      	mov	r3, r4
    dbe2:	2103      	movs	r1, #3
    dbe4:	f00d fd68 	bl	1b6b8 <ticker_stop>
		/* Stop any scheduled jobs */
		_ticker_stop(instance_index, 3, ticker_id);

		/* wait for operation's complete overrun*/
		result = -ETIMEDOUT;
    dbe8:	f06f 0073 	mvn.w	r0, #115	; 0x73
	} else {
		result = _ticker_sync_context.result;
	}

	return result;
}
    dbec:	b00f      	add	sp, #60	; 0x3c
    dbee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = _ticker_sync_context.result;
    dbf2:	f8d8 000c 	ldr.w	r0, [r8, #12]
    dbf6:	e7f9      	b.n	dbec <nrf_flash_sync_exe+0xc4>
		result = -ECANCELED;
    dbf8:	f06f 008b 	mvn.w	r0, #139	; 0x8b
	return result;
    dbfc:	e7f6      	b.n	dbec <nrf_flash_sync_exe+0xc4>
    dbfe:	bf00      	nop
    dc00:	1afd498d 	.word	0x1afd498d
    dc04:	00000007 	.word	0x00000007
    dc08:	20003118 	.word	0x20003118
    dc0c:	3b9aca00 	.word	0x3b9aca00
    dc10:	000287a9 	.word	0x000287a9
    dc14:	1afd498d 	.word	0x1afd498d
    dc18:	000b7b44 	.word	0x000b7b44
    dc1c:	20003128 	.word	0x20003128

0000dc20 <nrf_flash_sync_check_time_limit>:
{
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
    dc20:	b538      	push	{r3, r4, r5, lr}
	uint32_t ticks_diff;

	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    dc22:	4d0f      	ldr	r5, [pc, #60]	; (dc60 <nrf_flash_sync_check_time_limit+0x40>)
{
    dc24:	4604      	mov	r4, r0
	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    dc26:	f00d fd89 	bl	1b73c <ticker_ticks_now_get>
    dc2a:	68a9      	ldr	r1, [r5, #8]
    dc2c:	f00d fd88 	bl	1b740 <ticker_ticks_diff_get>
					   _ticker_sync_context.ticks_begin);
	if (ticks_diff + ticks_diff/iteration >
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    dc30:	6869      	ldr	r1, [r5, #4]
	if (ticks_diff + ticks_diff/iteration >
    dc32:	fbb0 f4f4 	udiv	r4, r0, r4
    dc36:	4404      	add	r4, r0
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    dc38:	480a      	ldr	r0, [pc, #40]	; (dc64 <nrf_flash_sync_check_time_limit+0x44>)
    dc3a:	a307      	add	r3, pc, #28	; (adr r3, dc58 <nrf_flash_sync_check_time_limit+0x38>)
    dc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
    dc40:	fba1 0100 	umull	r0, r1, r1, r0
    dc44:	f7fe fb5c 	bl	c300 <__aeabi_uldivmod>
    dc48:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return true;
	}

	return false;
}
    dc4c:	4284      	cmp	r4, r0
    dc4e:	bf94      	ite	ls
    dc50:	2000      	movls	r0, #0
    dc52:	2001      	movhi	r0, #1
    dc54:	bd38      	pop	{r3, r4, r5, pc}
    dc56:	bf00      	nop
    dc58:	1afd498d 	.word	0x1afd498d
    dc5c:	00000007 	.word	0x00000007
    dc60:	20003118 	.word	0x20003118
    dc64:	3b9aca00 	.word	0x3b9aca00

0000dc68 <vnd_ccc_cfg_changed>:
static uint8_t indicating;
static struct bt_gatt_indicate_params ind_params;

static void vnd_ccc_cfg_changed(const struct bt_gatt_attr *attr, uint16_t value)
{
	simulate_vnd = (value == BT_GATT_CCC_INDICATE) ? 1 : 0;
    dc68:	1e8b      	subs	r3, r1, #2
    dc6a:	4259      	negs	r1, r3
    dc6c:	4159      	adcs	r1, r3
    dc6e:	4b01      	ldr	r3, [pc, #4]	; (dc74 <vnd_ccc_cfg_changed+0xc>)
    dc70:	7019      	strb	r1, [r3, #0]
}
    dc72:	4770      	bx	lr
    dc74:	200032b5 	.word	0x200032b5

0000dc78 <mtu_updated>:
	BT_DATA_BYTES(BT_DATA_UUID128_ALL, BT_UUID_CUSTOM_SERVICE_VAL),
};

void mtu_updated(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
	printk("Updated MTU: TX: %d RX: %d bytes\n", tx, rx);
    dc78:	4801      	ldr	r0, [pc, #4]	; (dc80 <mtu_updated+0x8>)
    dc7a:	f01d be8e 	b.w	2b99a <printk>
    dc7e:	bf00      	nop
    dc80:	00034144 	.word	0x00034144

0000dc84 <disconnected>:
	}
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
	printk("Disconnected (reason 0x%02x)\n", reason);
    dc84:	4801      	ldr	r0, [pc, #4]	; (dc8c <disconnected+0x8>)
    dc86:	f01d be88 	b.w	2b99a <printk>
    dc8a:	bf00      	nop
    dc8c:	00034166 	.word	0x00034166

0000dc90 <connected>:
	if (err) {
    dc90:	b111      	cbz	r1, dc98 <connected+0x8>
		printk("Connection failed (err 0x%02x)\n", err);
    dc92:	4803      	ldr	r0, [pc, #12]	; (dca0 <connected+0x10>)
    dc94:	f01d be81 	b.w	2b99a <printk>
		printk("Connected\n");
    dc98:	4802      	ldr	r0, [pc, #8]	; (dca4 <connected+0x14>)
    dc9a:	f01d be7e 	b.w	2b99a <printk>
    dc9e:	bf00      	nop
    dca0:	00034184 	.word	0x00034184
    dca4:	000341a4 	.word	0x000341a4

0000dca8 <indicate_destroy>:
{
    dca8:	b508      	push	{r3, lr}
	printk("Indication complete\n");
    dcaa:	4803      	ldr	r0, [pc, #12]	; (dcb8 <indicate_destroy+0x10>)
    dcac:	f01d fe75 	bl	2b99a <printk>
	indicating = 0U;
    dcb0:	4b02      	ldr	r3, [pc, #8]	; (dcbc <indicate_destroy+0x14>)
    dcb2:	2200      	movs	r2, #0
    dcb4:	701a      	strb	r2, [r3, #0]
}
    dcb6:	bd08      	pop	{r3, pc}
    dcb8:	000341af 	.word	0x000341af
    dcbc:	200032b4 	.word	0x200032b4

0000dcc0 <indicate_cb>:
	printk("Indication %s\n", err != 0U ? "fail" : "success");
    dcc0:	4903      	ldr	r1, [pc, #12]	; (dcd0 <indicate_cb+0x10>)
    dcc2:	4b04      	ldr	r3, [pc, #16]	; (dcd4 <indicate_cb+0x14>)
    dcc4:	4804      	ldr	r0, [pc, #16]	; (dcd8 <indicate_cb+0x18>)
    dcc6:	2a00      	cmp	r2, #0
    dcc8:	bf08      	it	eq
    dcca:	4619      	moveq	r1, r3
    dccc:	f01d be65 	b.w	2b99a <printk>
    dcd0:	000341c4 	.word	0x000341c4
    dcd4:	000341c9 	.word	0x000341c9
    dcd8:	000341d1 	.word	0x000341d1

0000dcdc <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    dcdc:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    dcde:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    dce0:	b08a      	sub	sp, #40	; 0x28
    dce2:	4604      	mov	r4, r0
    dce4:	460e      	mov	r6, r1
    dce6:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    dce8:	2b03      	cmp	r3, #3
    dcea:	d820      	bhi.n	dd2e <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    dcec:	e8df f003 	tbb	[pc, r3]
    dcf0:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    dcf4:	4911      	ldr	r1, [pc, #68]	; (dd3c <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    dcf6:	4628      	mov	r0, r5
    dcf8:	f020 f93d 	bl	2df76 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    dcfc:	7863      	ldrb	r3, [r4, #1]
    dcfe:	9304      	str	r3, [sp, #16]
    dd00:	78a3      	ldrb	r3, [r4, #2]
    dd02:	9303      	str	r3, [sp, #12]
    dd04:	78e3      	ldrb	r3, [r4, #3]
    dd06:	9302      	str	r3, [sp, #8]
    dd08:	7923      	ldrb	r3, [r4, #4]
    dd0a:	9301      	str	r3, [sp, #4]
    dd0c:	7963      	ldrb	r3, [r4, #5]
    dd0e:	9300      	str	r3, [sp, #0]
    dd10:	4a0b      	ldr	r2, [pc, #44]	; (dd40 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    dd12:	79a3      	ldrb	r3, [r4, #6]
    dd14:	9505      	str	r5, [sp, #20]
    dd16:	211e      	movs	r1, #30
    dd18:	4630      	mov	r0, r6
    dd1a:	f01d fe4b 	bl	2b9b4 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    dd1e:	b00a      	add	sp, #40	; 0x28
    dd20:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    dd22:	4908      	ldr	r1, [pc, #32]	; (dd44 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    dd24:	e7e7      	b.n	dcf6 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    dd26:	4908      	ldr	r1, [pc, #32]	; (dd48 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    dd28:	e7e5      	b.n	dcf6 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    dd2a:	4908      	ldr	r1, [pc, #32]	; (dd4c <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    dd2c:	e7e3      	b.n	dcf6 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    dd2e:	4a08      	ldr	r2, [pc, #32]	; (dd50 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    dd30:	210a      	movs	r1, #10
    dd32:	4628      	mov	r0, r5
    dd34:	f01d fe3e 	bl	2b9b4 <snprintk>
		break;
    dd38:	e7e0      	b.n	dcfc <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    dd3a:	bf00      	nop
    dd3c:	000341e0 	.word	0x000341e0
    dd40:	00034202 	.word	0x00034202
    dd44:	000341e7 	.word	0x000341e7
    dd48:	000341ee 	.word	0x000341ee
    dd4c:	000341f8 	.word	0x000341f8
    dd50:	000363af 	.word	0x000363af

0000dd54 <auth_cancel>:

	printk("Passkey for %s: %06u\n", addr, passkey);
}

static void auth_cancel(struct bt_conn *conn)
{
    dd54:	b500      	push	{lr}
    dd56:	b089      	sub	sp, #36	; 0x24
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    dd58:	f020 fec2 	bl	2eae0 <bt_conn_get_dst>
    dd5c:	4669      	mov	r1, sp
    dd5e:	f7ff ffbd 	bl	dcdc <bt_addr_le_to_str.constprop.0.isra.0>

	printk("Pairing cancelled: %s\n", addr);
    dd62:	4803      	ldr	r0, [pc, #12]	; (dd70 <auth_cancel+0x1c>)
    dd64:	4669      	mov	r1, sp
    dd66:	f01d fe18 	bl	2b99a <printk>
}
    dd6a:	b009      	add	sp, #36	; 0x24
    dd6c:	f85d fb04 	ldr.w	pc, [sp], #4
    dd70:	00034225 	.word	0x00034225

0000dd74 <auth_passkey_display>:
{
    dd74:	b510      	push	{r4, lr}
    dd76:	b088      	sub	sp, #32
    dd78:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    dd7a:	f020 feb1 	bl	2eae0 <bt_conn_get_dst>
    dd7e:	4669      	mov	r1, sp
    dd80:	f7ff ffac 	bl	dcdc <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Passkey for %s: %06u\n", addr, passkey);
    dd84:	4803      	ldr	r0, [pc, #12]	; (dd94 <auth_passkey_display+0x20>)
    dd86:	4622      	mov	r2, r4
    dd88:	4669      	mov	r1, sp
    dd8a:	f01d fe06 	bl	2b99a <printk>
}
    dd8e:	b008      	add	sp, #32
    dd90:	bd10      	pop	{r4, pc}
    dd92:	bf00      	nop
    dd94:	0003423c 	.word	0x0003423c

0000dd98 <main>:

	bt_hrs_notify(heartrate);
}

void main(void)
{
    dd98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_gatt_attr *vnd_ind_attr;
	char str[BT_UUID_STR_LEN];
	int err;

	err = bt_enable(NULL);
    dd9c:	2000      	movs	r0, #0
{
    dd9e:	b08c      	sub	sp, #48	; 0x30
	err = bt_enable(NULL);
    dda0:	f005 fa8c 	bl	132bc <bt_enable>
	if (err) {
    dda4:	4606      	mov	r6, r0
    dda6:	b130      	cbz	r0, ddb6 <main+0x1e>
		printk("Bluetooth init failed (err %d)\n", err);
    dda8:	4601      	mov	r1, r0
    ddaa:	4839      	ldr	r0, [pc, #228]	; (de90 <main+0xf8>)
			if (bt_gatt_indicate(NULL, &ind_params) == 0) {
				indicating = 1U;
			}
		}
	}
}
    ddac:	b00c      	add	sp, #48	; 0x30
    ddae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		printk("Bluetooth init failed (err %d)\n", err);
    ddb2:	f01d bdf2 	b.w	2b99a <printk>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    ddb6:	4d37      	ldr	r5, [pc, #220]	; (de94 <main+0xfc>)
	printk("Bluetooth initialized\n");
    ddb8:	4837      	ldr	r0, [pc, #220]	; (de98 <main+0x100>)
    ddba:	f01d fdee 	bl	2b99a <printk>
	cts_init();
    ddbe:	f000 f8a1 	bl	df04 <cts_init>
		settings_load();
    ddc2:	f01e fe4d 	bl	2ca60 <settings_load>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    ddc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ddc8:	ac02      	add	r4, sp, #8
    ddca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ddcc:	682b      	ldr	r3, [r5, #0]
    ddce:	6023      	str	r3, [r4, #0]
    ddd0:	4932      	ldr	r1, [pc, #200]	; (de9c <main+0x104>)
    ddd2:	9600      	str	r6, [sp, #0]
    ddd4:	4633      	mov	r3, r6
    ddd6:	2203      	movs	r2, #3
    ddd8:	a802      	add	r0, sp, #8
    ddda:	f006 faad 	bl	14338 <bt_le_adv_start>
	if (err) {
    ddde:	4601      	mov	r1, r0
    dde0:	2800      	cmp	r0, #0
    dde2:	d050      	beq.n	de86 <main+0xee>
		printk("Advertising failed to start (err %d)\n", err);
    dde4:	482e      	ldr	r0, [pc, #184]	; (dea0 <main+0x108>)
    dde6:	f01d fdd8 	bl	2b99a <printk>
	bt_gatt_cb_register(&gatt_callbacks);
    ddea:	482e      	ldr	r0, [pc, #184]	; (dea4 <main+0x10c>)
	heartrate++;
    ddec:	4d2e      	ldr	r5, [pc, #184]	; (dea8 <main+0x110>)
		if (simulate_vnd && vnd_ind_attr) {
    ddee:	4e2f      	ldr	r6, [pc, #188]	; (deac <main+0x114>)
	bt_gatt_cb_register(&gatt_callbacks);
    ddf0:	f009 faa0 	bl	17334 <bt_gatt_cb_register>
	bt_conn_auth_cb_register(&auth_cb_display);
    ddf4:	482e      	ldr	r0, [pc, #184]	; (deb0 <main+0x118>)
    ddf6:	f007 fa89 	bl	1530c <bt_conn_auth_cb_register>
	vnd_ind_attr = bt_gatt_find_by_uuid(vnd_svc.attrs, vnd_svc.attr_count,
    ddfa:	4a2e      	ldr	r2, [pc, #184]	; (deb4 <main+0x11c>)
    ddfc:	482e      	ldr	r0, [pc, #184]	; (deb8 <main+0x120>)
    ddfe:	210d      	movs	r1, #13
    de00:	f009 fc6c 	bl	176dc <bt_gatt_find_by_uuid>
	bt_uuid_to_str(&vnd_enc_uuid.uuid, str, sizeof(str));
    de04:	2225      	movs	r2, #37	; 0x25
	vnd_ind_attr = bt_gatt_find_by_uuid(vnd_svc.attrs, vnd_svc.attr_count,
    de06:	4604      	mov	r4, r0
	bt_uuid_to_str(&vnd_enc_uuid.uuid, str, sizeof(str));
    de08:	a902      	add	r1, sp, #8
    de0a:	482a      	ldr	r0, [pc, #168]	; (deb4 <main+0x11c>)
    de0c:	f003 fecc 	bl	11ba8 <bt_uuid_to_str>
	printk("Indicate VND attr %p (UUID %s)\n", vnd_ind_attr, str);
    de10:	482a      	ldr	r0, [pc, #168]	; (debc <main+0x124>)
    de12:	aa02      	add	r2, sp, #8
    de14:	4621      	mov	r1, r4
    de16:	f01d fdc0 	bl	2b99a <printk>
	return z_impl_k_sleep(timeout);
    de1a:	2100      	movs	r1, #0
    de1c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    de20:	f01d f91a 	bl	2b058 <z_impl_k_sleep>
		cts_notify();
    de24:	f000 f88c 	bl	df40 <cts_notify>
	heartrate++;
    de28:	782b      	ldrb	r3, [r5, #0]
    de2a:	3301      	adds	r3, #1
    de2c:	b2db      	uxtb	r3, r3
	if (heartrate == 160U) {
    de2e:	2ba0      	cmp	r3, #160	; 0xa0
		heartrate = 90U;
    de30:	bf08      	it	eq
    de32:	235a      	moveq	r3, #90	; 0x5a
    de34:	702b      	strb	r3, [r5, #0]
	bt_hrs_notify(heartrate);
    de36:	7828      	ldrb	r0, [r5, #0]
    de38:	f001 fc2e 	bl	f698 <bt_hrs_notify>
	uint8_t battery_level = bt_bas_get_battery_level();
    de3c:	f001 fbc4 	bl	f5c8 <bt_bas_get_battery_level>
	battery_level--;
    de40:	1e43      	subs	r3, r0, #1
		battery_level = 100U;
    de42:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
	bt_bas_set_battery_level(battery_level);
    de46:	bf14      	ite	ne
    de48:	4618      	movne	r0, r3
    de4a:	2064      	moveq	r0, #100	; 0x64
    de4c:	f001 fbc2 	bl	f5d4 <bt_bas_set_battery_level>
		if (simulate_vnd && vnd_ind_attr) {
    de50:	7833      	ldrb	r3, [r6, #0]
    de52:	2b00      	cmp	r3, #0
    de54:	d0e1      	beq.n	de1a <main+0x82>
    de56:	2c00      	cmp	r4, #0
    de58:	d0df      	beq.n	de1a <main+0x82>
			if (indicating) {
    de5a:	4f19      	ldr	r7, [pc, #100]	; (dec0 <main+0x128>)
    de5c:	7838      	ldrb	r0, [r7, #0]
    de5e:	2800      	cmp	r0, #0
    de60:	d1db      	bne.n	de1a <main+0x82>
			ind_params.attr = vnd_ind_attr;
    de62:	4918      	ldr	r1, [pc, #96]	; (dec4 <main+0x12c>)
			ind_params.func = indicate_cb;
    de64:	4b18      	ldr	r3, [pc, #96]	; (dec8 <main+0x130>)
    de66:	608b      	str	r3, [r1, #8]
			ind_params.destroy = indicate_destroy;
    de68:	4b18      	ldr	r3, [pc, #96]	; (decc <main+0x134>)
			ind_params.attr = vnd_ind_attr;
    de6a:	604c      	str	r4, [r1, #4]
			ind_params.len = sizeof(indicating);
    de6c:	f04f 0801 	mov.w	r8, #1
			ind_params.data = &indicating;
    de70:	e9c1 3703 	strd	r3, r7, [r1, #12]
			ind_params.len = sizeof(indicating);
    de74:	f8a1 8014 	strh.w	r8, [r1, #20]
			if (bt_gatt_indicate(NULL, &ind_params) == 0) {
    de78:	f009 fcb8 	bl	177ec <bt_gatt_indicate>
    de7c:	2800      	cmp	r0, #0
    de7e:	d1cc      	bne.n	de1a <main+0x82>
				indicating = 1U;
    de80:	f887 8000 	strb.w	r8, [r7]
    de84:	e7c9      	b.n	de1a <main+0x82>
	printk("Advertising successfully started\n");
    de86:	4812      	ldr	r0, [pc, #72]	; (ded0 <main+0x138>)
    de88:	f01d fd87 	bl	2b99a <printk>
    de8c:	e7ad      	b.n	ddea <main+0x52>
    de8e:	bf00      	nop
    de90:	00034252 	.word	0x00034252
    de94:	00032560 	.word	0x00032560
    de98:	00034272 	.word	0x00034272
    de9c:	00032638 	.word	0x00032638
    dea0:	00034289 	.word	0x00034289
    dea4:	20000248 	.word	0x20000248
    dea8:	20000a59 	.word	0x20000a59
    deac:	200032b5 	.word	0x200032b5
    deb0:	20000230 	.word	0x20000230
    deb4:	20000a80 	.word	0x20000a80
    deb8:	00032650 	.word	0x00032650
    debc:	000342d1 	.word	0x000342d1
    dec0:	200032b4 	.word	0x200032b4
    dec4:	20001d28 	.word	0x20001d28
    dec8:	0000dcc1 	.word	0x0000dcc1
    decc:	0000dca9 	.word	0x0000dca9
    ded0:	000342af 	.word	0x000342af

0000ded4 <write_ct>:
}

static ssize_t write_ct(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			const void *buf, uint16_t len, uint16_t offset,
			uint8_t flags)
{
    ded4:	b538      	push	{r3, r4, r5, lr}
    ded6:	460c      	mov	r4, r1
    ded8:	f8bd 0010 	ldrh.w	r0, [sp, #16]
	uint8_t *value = attr->user_data;
    dedc:	68e5      	ldr	r5, [r4, #12]

	if (offset + len > sizeof(ct)) {
    dede:	461c      	mov	r4, r3
    dee0:	18c3      	adds	r3, r0, r3
    dee2:	2b0a      	cmp	r3, #10
{
    dee4:	4611      	mov	r1, r2
	if (offset + len > sizeof(ct)) {
    dee6:	dc08      	bgt.n	defa <write_ct+0x26>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	memcpy(value + offset, buf, len);
    dee8:	4622      	mov	r2, r4
    deea:	4428      	add	r0, r5
    deec:	f020 f89d 	bl	2e02a <memcpy>
	ct_update = 1U;
    def0:	4b03      	ldr	r3, [pc, #12]	; (df00 <write_ct+0x2c>)
    def2:	2201      	movs	r2, #1
    def4:	701a      	strb	r2, [r3, #0]

	return len;
}
    def6:	4620      	mov	r0, r4
    def8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    defa:	f06f 0406 	mvn.w	r4, #6
    defe:	e7fa      	b.n	def6 <write_ct+0x22>
    df00:	200032c0 	.word	0x200032c0

0000df04 <cts_init>:
	/* Adjust reason */
	buf[9] = 0U; /* No update, change, etc */
}

void cts_init(void)
{
    df04:	b513      	push	{r0, r1, r4, lr}
	memcpy(buf,  &year, 2); /* year */
    df06:	4c0d      	ldr	r4, [pc, #52]	; (df3c <cts_init+0x38>)
	year = sys_cpu_to_le16(2015);
    df08:	f240 73df 	movw	r3, #2015	; 0x7df
	memcpy(buf,  &year, 2); /* year */
    df0c:	2202      	movs	r2, #2
    df0e:	f10d 0106 	add.w	r1, sp, #6
    df12:	4620      	mov	r0, r4
	year = sys_cpu_to_le16(2015);
    df14:	f8ad 3006 	strh.w	r3, [sp, #6]
	memcpy(buf,  &year, 2); /* year */
    df18:	f020 f887 	bl	2e02a <memcpy>
	buf[2] = 5U; /* months starting from 1 */
    df1c:	2305      	movs	r3, #5
    df1e:	70a3      	strb	r3, [r4, #2]
	buf[3] = 30U; /* day */
    df20:	231e      	movs	r3, #30
    df22:	70e3      	strb	r3, [r4, #3]
	buf[4] = 12U; /* hours */
    df24:	220c      	movs	r2, #12
	buf[6] = 30U; /* seconds */
    df26:	71a3      	strb	r3, [r4, #6]
	buf[7] = 1U; /* day of week starting from 1 */
    df28:	2301      	movs	r3, #1
	buf[4] = 12U; /* hours */
    df2a:	7122      	strb	r2, [r4, #4]
	buf[7] = 1U; /* day of week starting from 1 */
    df2c:	71e3      	strb	r3, [r4, #7]
	buf[5] = 45U; /* minutes */
    df2e:	222d      	movs	r2, #45	; 0x2d
	buf[8] = 0U;
    df30:	2300      	movs	r3, #0
	buf[5] = 45U; /* minutes */
    df32:	7162      	strb	r2, [r4, #5]
	buf[8] = 0U;
    df34:	7223      	strb	r3, [r4, #8]
	buf[9] = 0U; /* No update, change, etc */
    df36:	7263      	strb	r3, [r4, #9]
	/* Simulate current time for Current Time Service */
	generate_current_time(ct);
}
    df38:	b002      	add	sp, #8
    df3a:	bd10      	pop	{r4, pc}
    df3c:	200032b6 	.word	0x200032b6

0000df40 <cts_notify>:

void cts_notify(void)
{	/* Current Time Service updates only when time is changed */
    df40:	b510      	push	{r4, lr}
	if (!ct_update) {
    df42:	4b0c      	ldr	r3, [pc, #48]	; (df74 <cts_notify+0x34>)
    df44:	781a      	ldrb	r2, [r3, #0]
{	/* Current Time Service updates only when time is changed */
    df46:	b086      	sub	sp, #24
	if (!ct_update) {
    df48:	b18a      	cbz	r2, df6e <cts_notify+0x2e>
		return;
	}

	ct_update = 0U;
    df4a:	2400      	movs	r4, #0
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    df4c:	4621      	mov	r1, r4
    df4e:	2218      	movs	r2, #24
    df50:	4668      	mov	r0, sp
    df52:	701c      	strb	r4, [r3, #0]
    df54:	f020 f874 	bl	2e040 <memset>

	params.attr = attr;
    df58:	4b07      	ldr	r3, [pc, #28]	; (df78 <cts_notify+0x38>)
    df5a:	9301      	str	r3, [sp, #4]
	params.data = data;
    df5c:	4b07      	ldr	r3, [pc, #28]	; (df7c <cts_notify+0x3c>)
    df5e:	9302      	str	r3, [sp, #8]
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
    df60:	4669      	mov	r1, sp
	params.len = len;
    df62:	230a      	movs	r3, #10
	return bt_gatt_notify_cb(conn, &params);
    df64:	4620      	mov	r0, r4
	params.len = len;
    df66:	f8ad 300c 	strh.w	r3, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
    df6a:	f009 fd39 	bl	179e0 <bt_gatt_notify_cb>
	bt_gatt_notify(NULL, &cts_cvs.attrs[1], &ct, sizeof(ct));
}
    df6e:	b006      	add	sp, #24
    df70:	bd10      	pop	{r4, pc}
    df72:	bf00      	nop
    df74:	200032c0 	.word	0x200032c0
    df78:	00032768 	.word	0x00032768
    df7c:	200032b6 	.word	0x200032b6

0000df80 <cbprintf_package_copy>:
			  void *packaged,
			  size_t len,
			  uint32_t flags,
			  uint16_t *strl,
			  size_t strl_len)
{
    df80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    df84:	b08b      	sub	sp, #44	; 0x2c
    df86:	4606      	mov	r6, r0
    df88:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
    df8c:	9304      	str	r3, [sp, #16]
    df8e:	4614      	mov	r4, r2
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool rw_cpy;
	bool ro_cpy;

	in_len != 0 ? in_len : get_package_len(in_packaged);
    df90:	460f      	mov	r7, r1
    df92:	b1b1      	cbz	r1, dfc2 <cbprintf_package_copy+0x42>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = buf[2];
    df94:	78b5      	ldrb	r5, [r6, #2]
    df96:	9505      	str	r5, [sp, #20]
	ro_cpy = ros_nbr &&
    df98:	bb35      	cbnz	r5, dfe8 <cbprintf_package_copy+0x68>
    df9a:	46aa      	mov	sl, r5
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = buf[3];
    df9c:	78f3      	ldrb	r3, [r6, #3]
    df9e:	9301      	str	r3, [sp, #4]
	rw_cpy = rws_nbr > 0 &&
    dfa0:	b113      	cbz	r3, dfa8 <cbprintf_package_copy+0x28>

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
    dfa2:	f01b 0f02 	tst.w	fp, #2
    dfa6:	d122      	bne.n	dfee <cbprintf_package_copy+0x6e>
    dfa8:	f1ba 0f00 	cmp.w	sl, #0
    dfac:	d11f      	bne.n	dfee <cbprintf_package_copy+0x6e>
		if (packaged) {
    dfae:	b124      	cbz	r4, dfba <cbprintf_package_copy+0x3a>
			memcpy(packaged, in_packaged, in_len);
    dfb0:	463a      	mov	r2, r7
    dfb2:	4631      	mov	r1, r6
    dfb4:	4620      	mov	r0, r4
    dfb6:	f020 f838 	bl	2e02a <memcpy>
			}

			str_pos++;
		}

		return out_len;
    dfba:	4638      	mov	r0, r7
		rem -= cpy_len;
		dst += cpy_len;
	}

	return len - rem;
}
    dfbc:	b00b      	add	sp, #44	; 0x2c
    dfbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s_nbr     = buf[1];
    dfc2:	f890 9001 	ldrb.w	r9, [r0, #1]
	buf += ros_nbr;
    dfc6:	78b5      	ldrb	r5, [r6, #2]
    dfc8:	7800      	ldrb	r0, [r0, #0]
    dfca:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    dfce:	4435      	add	r5, r6
	for (int i = 0; i < s_nbr; i++) {
    dfd0:	468a      	mov	sl, r1
    dfd2:	45ca      	cmp	sl, r9
    dfd4:	d2de      	bcs.n	df94 <cbprintf_package_copy+0x14>
		buf++;
    dfd6:	3501      	adds	r5, #1
		buf += strlen((const char *)buf) + 1;
    dfd8:	4628      	mov	r0, r5
    dfda:	f01f ffe8 	bl	2dfae <strlen>
    dfde:	3001      	adds	r0, #1
    dfe0:	4405      	add	r5, r0
	for (int i = 0; i < s_nbr; i++) {
    dfe2:	f10a 0a01 	add.w	sl, sl, #1
    dfe6:	e7f4      	b.n	dfd2 <cbprintf_package_copy+0x52>
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;
    dfe8:	f00b 0a01 	and.w	sl, fp, #1
    dfec:	e7d6      	b.n	df9c <cbprintf_package_copy+0x1c>
	args_size = buf[0] * sizeof(int);
    dfee:	f896 9000 	ldrb.w	r9, [r6]
    dff2:	ea4f 0389 	mov.w	r3, r9, lsl #2
    dff6:	9303      	str	r3, [sp, #12]
	uint8_t *str_pos = &buf[args_size];
    dff8:	eb06 0989 	add.w	r9, r6, r9, lsl #2
	if (packaged == NULL) {
    dffc:	2c00      	cmp	r4, #0
    dffe:	d15b      	bne.n	e0b8 <cbprintf_package_copy+0x138>
		if (ro_cpy) {
    e000:	f1ba 0f00 	cmp.w	sl, #0
    e004:	d032      	beq.n	e06c <cbprintf_package_copy+0xec>
    e006:	444d      	add	r5, r9
			for (int i = 0; i < ros_nbr; i++) {
    e008:	454d      	cmp	r5, r9
    e00a:	d11d      	bne.n	e048 <cbprintf_package_copy+0xc8>
    e00c:	46a9      	mov	r9, r5
		bool drop_ro_str_pos = !(flags &
    e00e:	f8dd a004 	ldr.w	sl, [sp, #4]
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    e012:	f8df c204 	ldr.w	ip, [pc, #516]	; e218 <cbprintf_package_copy+0x298>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
    e016:	4981      	ldr	r1, [pc, #516]	; (e21c <cbprintf_package_copy+0x29c>)
		bool drop_ro_str_pos = !(flags &
    e018:	f00b 0805 	and.w	r8, fp, #5
		for (int i = 0; i < rws_nbr; i++) {
    e01c:	464d      	mov	r5, r9
    e01e:	44ca      	add	sl, r9
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
    e020:	f00b 0202 	and.w	r2, fp, #2
		for (int i = 0; i < rws_nbr; i++) {
    e024:	45aa      	cmp	sl, r5
    e026:	d0c8      	beq.n	dfba <cbprintf_package_copy+0x3a>
			const char *str = *(const char **)&buf32[*str_pos];
    e028:	f815 0b01 	ldrb.w	r0, [r5], #1
    e02c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
    e030:	4560      	cmp	r0, ip
    e032:	d324      	bcc.n	e07e <cbprintf_package_copy+0xfe>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
    e034:	4288      	cmp	r0, r1
    e036:	d222      	bcs.n	e07e <cbprintf_package_copy+0xfe>
    e038:	f01b 0f01 	tst.w	fp, #1
    e03c:	d139      	bne.n	e0b2 <cbprintf_package_copy+0x132>
			if (is_ro && drop_ro_str_pos) {
    e03e:	f1b8 0f00 	cmp.w	r8, #0
    e042:	d1ef      	bne.n	e024 <cbprintf_package_copy+0xa4>
				out_len--;
    e044:	3f01      	subs	r7, #1
		for (int i = 0; i < rws_nbr; i++) {
    e046:	e7ed      	b.n	e024 <cbprintf_package_copy+0xa4>
				const char *str = *(const char **)&buf32[*str_pos];
    e048:	f819 3b01 	ldrb.w	r3, [r9], #1
		return 1 + strlen(str);
    e04c:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
    e050:	f01f ffad 	bl	2dfae <strlen>
				if (strl && strl_cnt < strl_len) {
    e054:	9b15      	ldr	r3, [sp, #84]	; 0x54
		return 1 + strlen(str);
    e056:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    e058:	b133      	cbz	r3, e068 <cbprintf_package_copy+0xe8>
    e05a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    e05c:	429c      	cmp	r4, r3
					strl[strl_cnt++] = (uint16_t)len;
    e05e:	bf3e      	ittt	cc
    e060:	9b15      	ldrcc	r3, [sp, #84]	; 0x54
    e062:	f823 0014 	strhcc.w	r0, [r3, r4, lsl #1]
    e066:	3401      	addcc	r4, #1
				out_len += len;
    e068:	4407      	add	r7, r0
			for (int i = 0; i < ros_nbr; i++) {
    e06a:	e7cd      	b.n	e008 <cbprintf_package_copy+0x88>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
    e06c:	b12d      	cbz	r5, e07a <cbprintf_package_copy+0xfa>
    e06e:	f01b 0404 	ands.w	r4, fp, #4
    e072:	d0cc      	beq.n	e00e <cbprintf_package_copy+0x8e>
				str_pos += ros_nbr;
    e074:	44a9      	add	r9, r5
	size_t strl_cnt = 0;
    e076:	4654      	mov	r4, sl
    e078:	e7c9      	b.n	e00e <cbprintf_package_copy+0x8e>
    e07a:	462c      	mov	r4, r5
    e07c:	e7c7      	b.n	e00e <cbprintf_package_copy+0x8e>
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
    e07e:	2a00      	cmp	r2, #0
    e080:	d0d0      	beq.n	e024 <cbprintf_package_copy+0xa4>
    e082:	f04f 0900 	mov.w	r9, #0
		return 1 + strlen(str);
    e086:	9201      	str	r2, [sp, #4]
    e088:	f01f ff91 	bl	2dfae <strlen>
				if (strl && strl_cnt < strl_len) {
    e08c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e08e:	f8df c188 	ldr.w	ip, [pc, #392]	; e218 <cbprintf_package_copy+0x298>
    e092:	9a01      	ldr	r2, [sp, #4]
    e094:	4961      	ldr	r1, [pc, #388]	; (e21c <cbprintf_package_copy+0x29c>)
		return 1 + strlen(str);
    e096:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    e098:	b133      	cbz	r3, e0a8 <cbprintf_package_copy+0x128>
    e09a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    e09c:	429c      	cmp	r4, r3
					strl[strl_cnt++] = (uint16_t)len;
    e09e:	bf3e      	ittt	cc
    e0a0:	9b15      	ldrcc	r3, [sp, #84]	; 0x54
    e0a2:	f823 0014 	strhcc.w	r0, [r3, r4, lsl #1]
    e0a6:	3401      	addcc	r4, #1
				out_len += len;
    e0a8:	4407      	add	r7, r0
			if (is_ro && drop_ro_str_pos) {
    e0aa:	f1b9 0f00 	cmp.w	r9, #0
    e0ae:	d0b9      	beq.n	e024 <cbprintf_package_copy+0xa4>
    e0b0:	e7c5      	b.n	e03e <cbprintf_package_copy+0xbe>
    e0b2:	f04f 0901 	mov.w	r9, #1
    e0b6:	e7e6      	b.n	e086 <cbprintf_package_copy+0x106>
	memcpy(dst, in_packaged, args_size);
    e0b8:	9a03      	ldr	r2, [sp, #12]
    e0ba:	4631      	mov	r1, r6
    e0bc:	4620      	mov	r0, r4
    e0be:	f01f ffb4 	bl	2e02a <memcpy>
	dst += args_size;
    e0c2:	9b03      	ldr	r3, [sp, #12]
    e0c4:	18e3      	adds	r3, r4, r3
    e0c6:	9302      	str	r3, [sp, #8]
	if (ro_cpy) {
    e0c8:	f1ba 0f00 	cmp.w	sl, #0
    e0cc:	d00a      	beq.n	e0e4 <cbprintf_package_copy+0x164>
		memcpy(cpy_str_pos, str_pos, ros_nbr);
    e0ce:	4649      	mov	r1, r9
    e0d0:	462a      	mov	r2, r5
    e0d2:	a806      	add	r0, sp, #24
    e0d4:	f01f ffa9 	bl	2e02a <memcpy>
		dst_hdr[2] = 0;
    e0d8:	2300      	movs	r3, #0
    e0da:	70a3      	strb	r3, [r4, #2]
		str_pos += ros_nbr;
    e0dc:	44a9      	add	r9, r5
	dst += args_size;
    e0de:	f8dd 8008 	ldr.w	r8, [sp, #8]
    e0e2:	e00d      	b.n	e100 <cbprintf_package_copy+0x180>
		if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
    e0e4:	b1bd      	cbz	r5, e116 <cbprintf_package_copy+0x196>
    e0e6:	f01b 0f04 	tst.w	fp, #4
    e0ea:	d014      	beq.n	e116 <cbprintf_package_copy+0x196>
			memcpy(dst, str_pos, ros_nbr);
    e0ec:	462a      	mov	r2, r5
    e0ee:	4649      	mov	r1, r9
    e0f0:	9802      	ldr	r0, [sp, #8]
    e0f2:	f01f ff9a 	bl	2e02a <memcpy>
			dst += ros_nbr;
    e0f6:	9b02      	ldr	r3, [sp, #8]
			str_pos += ros_nbr;
    e0f8:	44a9      	add	r9, r5
			dst += ros_nbr;
    e0fa:	eb03 0805 	add.w	r8, r3, r5
		scpy_cnt = 0;
    e0fe:	4655      	mov	r5, sl
    e100:	9b01      	ldr	r3, [sp, #4]
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
    e102:	f00b 0e02 	and.w	lr, fp, #2
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
    e106:	f00b 0001 	and.w	r0, fp, #1
    e10a:	464a      	mov	r2, r9
    e10c:	eb09 0c03 	add.w	ip, r9, r3
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
    e110:	f00b 0b04 	and.w	fp, fp, #4
    e114:	e025      	b.n	e162 <cbprintf_package_copy+0x1e2>
			dst_hdr[2] = 0;
    e116:	2500      	movs	r5, #0
    e118:	70a5      	strb	r5, [r4, #2]
    e11a:	e7e0      	b.n	e0de <cbprintf_package_copy+0x15e>
		const char *str = *(const char **)&buf32[*str_pos];
    e11c:	f812 3b01 	ldrb.w	r3, [r2], #1
    e120:	f8df a0f4 	ldr.w	sl, [pc, #244]	; e218 <cbprintf_package_copy+0x298>
    e124:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    e128:	4551      	cmp	r1, sl
    e12a:	d303      	bcc.n	e134 <cbprintf_package_copy+0x1b4>
    e12c:	f8df a0ec 	ldr.w	sl, [pc, #236]	; e21c <cbprintf_package_copy+0x29c>
    e130:	4551      	cmp	r1, sl
    e132:	d305      	bcc.n	e140 <cbprintf_package_copy+0x1c0>
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
    e134:	f1be 0f00 	cmp.w	lr, #0
    e138:	d103      	bne.n	e142 <cbprintf_package_copy+0x1c2>
				*dst++ = *str_pos;
    e13a:	f808 3b01 	strb.w	r3, [r8], #1
	for (int i = 0; i < rws_nbr; i++) {
    e13e:	e010      	b.n	e162 <cbprintf_package_copy+0x1e2>
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
    e140:	b138      	cbz	r0, e152 <cbprintf_package_copy+0x1d2>
				cpy_str_pos[scpy_cnt++] = *str_pos;
    e142:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
    e146:	1c69      	adds	r1, r5, #1
    e148:	4455      	add	r5, sl
    e14a:	f805 3c10 	strb.w	r3, [r5, #-16]
    e14e:	b2cd      	uxtb	r5, r1
    e150:	e007      	b.n	e162 <cbprintf_package_copy+0x1e2>
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
    e152:	f1bb 0f00 	cmp.w	fp, #0
    e156:	d004      	beq.n	e162 <cbprintf_package_copy+0x1e2>
				*dst++ = *str_pos;
    e158:	f808 3b01 	strb.w	r3, [r8], #1
				dst_hdr[2]++;
    e15c:	78a3      	ldrb	r3, [r4, #2]
    e15e:	3301      	adds	r3, #1
    e160:	70a3      	strb	r3, [r4, #2]
	for (int i = 0; i < rws_nbr; i++) {
    e162:	4594      	cmp	ip, r2
    e164:	d1da      	bne.n	e11c <cbprintf_package_copy+0x19c>
	dst_hdr[1] += scpy_cnt;
    e166:	7863      	ldrb	r3, [r4, #1]
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
    e168:	9a01      	ldr	r2, [sp, #4]
	dst_hdr[1] += scpy_cnt;
    e16a:	442b      	add	r3, r5
    e16c:	7063      	strb	r3, [r4, #1]
	dst_hdr[3] = (uint8_t)(uintptr_t)(dst - dst_str_loc) - dst_hdr[2];
    e16e:	9b02      	ldr	r3, [sp, #8]
    e170:	eba8 0b03 	sub.w	fp, r8, r3
    e174:	78a3      	ldrb	r3, [r4, #2]
    e176:	ebab 0b03 	sub.w	fp, fp, r3
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
    e17a:	9b05      	ldr	r3, [sp, #20]
	dst_hdr[3] = (uint8_t)(uintptr_t)(dst - dst_str_loc) - dst_hdr[2];
    e17c:	f884 b003 	strb.w	fp, [r4, #3]
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
    e180:	4413      	add	r3, r2
    e182:	1aff      	subs	r7, r7, r3
    e184:	9b03      	ldr	r3, [sp, #12]
    e186:	1aff      	subs	r7, r7, r3
	memcpy(dst, str_pos, strs_len);
    e188:	9b01      	ldr	r3, [sp, #4]
    e18a:	4640      	mov	r0, r8
    e18c:	463a      	mov	r2, r7
    e18e:	eb09 0103 	add.w	r1, r9, r3
	dst += strs_len;
    e192:	44b8      	add	r8, r7
	memcpy(dst, str_pos, strs_len);
    e194:	f01f ff49 	bl	2e02a <memcpy>
		return dst - dst_hdr;
    e198:	eba8 0004 	sub.w	r0, r8, r4
	if (scpy_cnt == 0) {
    e19c:	2d00      	cmp	r5, #0
    e19e:	f43f af0d 	beq.w	dfbc <cbprintf_package_copy+0x3c>
	size_t rem = len - ((size_t)(uintptr_t)(dst - dst_hdr));
    e1a2:	9b04      	ldr	r3, [sp, #16]
    e1a4:	1a1c      	subs	r4, r3, r0
	if (rem <= scpy_cnt) {
    e1a6:	42a5      	cmp	r5, r4
    e1a8:	d302      	bcc.n	e1b0 <cbprintf_package_copy+0x230>
		return -ENOSPC;
    e1aa:	f06f 001b 	mvn.w	r0, #27
    e1ae:	e705      	b.n	dfbc <cbprintf_package_copy+0x3c>
	for (int i = 0; i < scpy_cnt; i++) {
    e1b0:	f04f 0900 	mov.w	r9, #0
		uint8_t loc = cpy_str_pos[i];
    e1b4:	ab06      	add	r3, sp, #24
		uint16_t str_len = strl ? strl[i] : 0;
    e1b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
		uint8_t loc = cpy_str_pos[i];
    e1b8:	f813 3009 	ldrb.w	r3, [r3, r9]
		const char *str = *(const char **)&buf32[loc];
    e1bc:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
    e1c0:	b1c2      	cbz	r2, e1f4 <cbprintf_package_copy+0x274>
    e1c2:	f832 7019 	ldrh.w	r7, [r2, r9, lsl #1]
		*dst = loc;
    e1c6:	46c2      	mov	sl, r8
		rem--;
    e1c8:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
		*dst = loc;
    e1cc:	f80a 3b01 	strb.w	r3, [sl], #1
	if (strl) {
    e1d0:	b197      	cbz	r7, e1f8 <cbprintf_package_copy+0x278>
		memcpy(dst, str, strl);
    e1d2:	463a      	mov	r2, r7
    e1d4:	4650      	mov	r0, sl
    e1d6:	f01f ff28 	bl	2e02a <memcpy>
	for (int i = 0; i < scpy_cnt; i++) {
    e1da:	f109 0901 	add.w	r9, r9, #1
    e1de:	454d      	cmp	r5, r9
		rem -= cpy_len;
    e1e0:	ebab 0407 	sub.w	r4, fp, r7
		dst += cpy_len;
    e1e4:	eb0a 0807 	add.w	r8, sl, r7
	for (int i = 0; i < scpy_cnt; i++) {
    e1e8:	dce4      	bgt.n	e1b4 <cbprintf_package_copy+0x234>
	return len - rem;
    e1ea:	9b04      	ldr	r3, [sp, #16]
    e1ec:	441f      	add	r7, r3
    e1ee:	eba7 000b 	sub.w	r0, r7, fp
    e1f2:	e6e3      	b.n	dfbc <cbprintf_package_copy+0x3c>
		uint16_t str_len = strl ? strl[i] : 0;
    e1f4:	9f15      	ldr	r7, [sp, #84]	; 0x54
    e1f6:	e7e6      	b.n	e1c6 <cbprintf_package_copy+0x246>
    e1f8:	3901      	subs	r1, #1
	if (strl) {
    e1fa:	2301      	movs	r3, #1
	for (size_t i = 0; i < num; i++) {
    e1fc:	429c      	cmp	r4, r3
    e1fe:	d0d4      	beq.n	e1aa <cbprintf_package_copy+0x22a>
		dst[i] = src[i];
    e200:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    e204:	f808 2003 	strb.w	r2, [r8, r3]
		if (src[i] == '\0') {
    e208:	1c58      	adds	r0, r3, #1
    e20a:	b912      	cbnz	r2, e212 <cbprintf_package_copy+0x292>
		if (cpy_len < 0) {
    e20c:	1e1f      	subs	r7, r3, #0
    e20e:	dae4      	bge.n	e1da <cbprintf_package_copy+0x25a>
    e210:	e7cb      	b.n	e1aa <cbprintf_package_copy+0x22a>
    e212:	4603      	mov	r3, r0
    e214:	e7f2      	b.n	e1fc <cbprintf_package_copy+0x27c>
    e216:	bf00      	nop
    e218:	00031fac 	.word	0x00031fac
    e21c:	00036870 	.word	0x00036870

0000e220 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    e220:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    e222:	4c0a      	ldr	r4, [pc, #40]	; (e24c <crc8_ccitt+0x2c>)
    e224:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    e226:	4291      	cmp	r1, r2
    e228:	d100      	bne.n	e22c <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    e22a:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
    e22c:	f811 3b01 	ldrb.w	r3, [r1], #1
    e230:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    e232:	0903      	lsrs	r3, r0, #4
    e234:	5ce3      	ldrb	r3, [r4, r3]
    e236:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
    e23a:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    e23c:	f3c3 1303 	ubfx	r3, r3, #4, #4
    e240:	5ce0      	ldrb	r0, [r4, r3]
    e242:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
    e246:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
    e248:	e7ed      	b.n	e226 <crc8_ccitt+0x6>
    e24a:	bf00      	nop
    e24c:	00034324 	.word	0x00034324

0000e250 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    e250:	680b      	ldr	r3, [r1, #0]
    e252:	3301      	adds	r3, #1
    e254:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    e256:	4b01      	ldr	r3, [pc, #4]	; (e25c <char_out+0xc>)
    e258:	681b      	ldr	r3, [r3, #0]
    e25a:	4718      	bx	r3
    e25c:	20000270 	.word	0x20000270

0000e260 <__printk_hook_install>:
	_char_out = fn;
    e260:	4b01      	ldr	r3, [pc, #4]	; (e268 <__printk_hook_install+0x8>)
    e262:	6018      	str	r0, [r3, #0]
}
    e264:	4770      	bx	lr
    e266:	bf00      	nop
    e268:	20000270 	.word	0x20000270

0000e26c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    e26c:	b507      	push	{r0, r1, r2, lr}
    e26e:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
    e270:	2100      	movs	r1, #0
{
    e272:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
    e274:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
    e276:	4803      	ldr	r0, [pc, #12]	; (e284 <vprintk+0x18>)
    e278:	a901      	add	r1, sp, #4
    e27a:	f000 f8f9 	bl	e470 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    e27e:	b003      	add	sp, #12
    e280:	f85d fb04 	ldr.w	pc, [sp], #4
    e284:	0000e251 	.word	0x0000e251

0000e288 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    e288:	b530      	push	{r4, r5, lr}
    e28a:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    e28c:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    e290:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    e292:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    e294:	a901      	add	r1, sp, #4
    e296:	4805      	ldr	r0, [pc, #20]	; (e2ac <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    e298:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    e29a:	f000 f8e9 	bl	e470 <cbvprintf>

	if (ctx.count < ctx.max) {
    e29e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    e2a2:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    e2a4:	bfb8      	it	lt
    e2a6:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    e2a8:	b005      	add	sp, #20
    e2aa:	bd30      	pop	{r4, r5, pc}
    e2ac:	0002b975 	.word	0x0002b975

0000e2b0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    e2b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    e2b4:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    e2b8:	f019 0808 	ands.w	r8, r9, #8
{
    e2bc:	4604      	mov	r4, r0
    e2be:	4693      	mov	fp, r2
	if (processing) {
    e2c0:	d00d      	beq.n	e2de <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    e2c2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    e2c4:	bf0c      	ite	eq
    e2c6:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    e2ca:	f049 0920 	orrne.w	r9, r9, #32
    e2ce:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    e2d2:	f38b 8811 	msr	BASEPRI, fp
    e2d6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    e2da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    e2de:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    e2e2:	2902      	cmp	r1, #2
    e2e4:	d107      	bne.n	e2f6 <process_event+0x46>
			evt = process_recheck(mgr);
    e2e6:	4620      	mov	r0, r4
    e2e8:	f01d fb71 	bl	2b9ce <process_recheck>
		if (evt == EVT_NOP) {
    e2ec:	2800      	cmp	r0, #0
    e2ee:	d0f0      	beq.n	e2d2 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    e2f0:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e2f2:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    e2f4:	d14e      	bne.n	e394 <process_event+0xe4>
			res = mgr->last_res;
    e2f6:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    e2f8:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    e2fa:	2f00      	cmp	r7, #0
    e2fc:	da15      	bge.n	e32a <process_event+0x7a>
		*clients = mgr->clients;
    e2fe:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e300:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    e304:	e9c4 8800 	strd	r8, r8, [r4]
    e308:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    e30c:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    e30e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e310:	8b21      	ldrh	r1, [r4, #24]
    e312:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    e316:	45ca      	cmp	sl, r9
    e318:	d002      	beq.n	e320 <process_event+0x70>
		if (do_monitors
    e31a:	68a3      	ldr	r3, [r4, #8]
    e31c:	2b00      	cmp	r3, #0
    e31e:	d15a      	bne.n	e3d6 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    e320:	b90d      	cbnz	r5, e326 <process_event+0x76>
		    || (transit != NULL)) {
    e322:	2e00      	cmp	r6, #0
    e324:	d071      	beq.n	e40a <process_event+0x15a>
    e326:	2300      	movs	r3, #0
    e328:	e056      	b.n	e3d8 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    e32a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    e32e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    e330:	2a01      	cmp	r2, #1
    e332:	d81e      	bhi.n	e372 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e334:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    e338:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    e33a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e33c:	b289      	uxth	r1, r1
    e33e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    e342:	d10a      	bne.n	e35a <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    e344:	b13d      	cbz	r5, e356 <process_event+0xa6>
    e346:	8b63      	ldrh	r3, [r4, #26]
    e348:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    e34a:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    e34c:	3301      	adds	r3, #1
    e34e:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    e350:	2a00      	cmp	r2, #0
    e352:	d1fa      	bne.n	e34a <process_event+0x9a>
    e354:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e356:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    e35a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    e35c:	4620      	mov	r0, r4
    e35e:	f01d fb36 	bl	2b9ce <process_recheck>
    e362:	4606      	mov	r6, r0
    e364:	2800      	cmp	r0, #0
    e366:	d0d3      	beq.n	e310 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    e368:	8b23      	ldrh	r3, [r4, #24]
    e36a:	f043 0320 	orr.w	r3, r3, #32
    e36e:	8323      	strh	r3, [r4, #24]
    e370:	e7cd      	b.n	e30e <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    e372:	2b04      	cmp	r3, #4
    e374:	d10c      	bne.n	e390 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e376:	f021 0107 	bic.w	r1, r1, #7
    e37a:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    e37c:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    e37e:	4620      	mov	r0, r4
    e380:	f01d fb25 	bl	2b9ce <process_recheck>
    e384:	4605      	mov	r5, r0
    e386:	2800      	cmp	r0, #0
    e388:	d0c1      	beq.n	e30e <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    e38a:	f041 0120 	orr.w	r1, r1, #32
    e38e:	8321      	strh	r1, [r4, #24]
    e390:	2500      	movs	r5, #0
    e392:	e7bc      	b.n	e30e <process_event+0x5e>
		} else if (evt == EVT_START) {
    e394:	2803      	cmp	r0, #3
    e396:	d109      	bne.n	e3ac <process_event+0xfc>
			transit = mgr->transitions->start;
    e398:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e39a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    e39e:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e3a0:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    e3a4:	8323      	strh	r3, [r4, #24]
}
    e3a6:	2500      	movs	r5, #0
		res = 0;
    e3a8:	462f      	mov	r7, r5
    e3aa:	e7b1      	b.n	e310 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    e3ac:	2804      	cmp	r0, #4
    e3ae:	d106      	bne.n	e3be <process_event+0x10e>
			transit = mgr->transitions->stop;
    e3b0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e3b2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    e3b6:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e3b8:	f043 0304 	orr.w	r3, r3, #4
    e3bc:	e7f2      	b.n	e3a4 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    e3be:	2805      	cmp	r0, #5
    e3c0:	d106      	bne.n	e3d0 <process_event+0x120>
			transit = mgr->transitions->reset;
    e3c2:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e3c4:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    e3c8:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e3ca:	f043 0305 	orr.w	r3, r3, #5
    e3ce:	e7e9      	b.n	e3a4 <process_event+0xf4>
    e3d0:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    e3d2:	462e      	mov	r6, r5
    e3d4:	e7e8      	b.n	e3a8 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    e3d6:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    e3d8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    e3dc:	8321      	strh	r1, [r4, #24]
    e3de:	f38b 8811 	msr	BASEPRI, fp
    e3e2:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    e3e6:	b9fb      	cbnz	r3, e428 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    e3e8:	bb85      	cbnz	r5, e44c <process_event+0x19c>
			if (transit != NULL) {
    e3ea:	b116      	cbz	r6, e3f2 <process_event+0x142>
				transit(mgr, transition_complete);
    e3ec:	491f      	ldr	r1, [pc, #124]	; (e46c <process_event+0x1bc>)
    e3ee:	4620      	mov	r0, r4
    e3f0:	47b0      	blx	r6
	__asm__ volatile(
    e3f2:	f04f 0320 	mov.w	r3, #32
    e3f6:	f3ef 8b11 	mrs	fp, BASEPRI
    e3fa:	f383 8812 	msr	BASEPRI_MAX, r3
    e3fe:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    e402:	8b23      	ldrh	r3, [r4, #24]
    e404:	f023 0308 	bic.w	r3, r3, #8
    e408:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    e40a:	8b23      	ldrh	r3, [r4, #24]
    e40c:	06da      	lsls	r2, r3, #27
    e40e:	d525      	bpl.n	e45c <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    e410:	f023 0310 	bic.w	r3, r3, #16
    e414:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    e416:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    e418:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    e41c:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    e420:	2900      	cmp	r1, #0
    e422:	f47f af5e 	bne.w	e2e2 <process_event+0x32>
out:
    e426:	e754      	b.n	e2d2 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    e428:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    e42a:	2900      	cmp	r1, #0
    e42c:	d0dc      	beq.n	e3e8 <process_event+0x138>
	return node->next;
    e42e:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    e432:	f8d1 b004 	ldr.w	fp, [r1, #4]
    e436:	463b      	mov	r3, r7
    e438:	4652      	mov	r2, sl
    e43a:	4620      	mov	r0, r4
    e43c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    e43e:	f1b9 0f00 	cmp.w	r9, #0
    e442:	d0d1      	beq.n	e3e8 <process_event+0x138>
    e444:	4649      	mov	r1, r9
    e446:	f8d9 9000 	ldr.w	r9, [r9]
    e44a:	e7f2      	b.n	e432 <process_event+0x182>
    e44c:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    e44e:	463b      	mov	r3, r7
    e450:	4652      	mov	r2, sl
    e452:	4620      	mov	r0, r4
    e454:	682d      	ldr	r5, [r5, #0]
    e456:	f01d fad6 	bl	2ba06 <notify_one>
    e45a:	e7c5      	b.n	e3e8 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    e45c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    e460:	bf1e      	ittt	ne
    e462:	f023 0320 	bicne.w	r3, r3, #32
    e466:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    e468:	2102      	movne	r1, #2
    e46a:	e7d5      	b.n	e418 <process_event+0x168>
    e46c:	0002ba33 	.word	0x0002ba33

0000e470 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    e470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e474:	b091      	sub	sp, #68	; 0x44
    e476:	468b      	mov	fp, r1
    e478:	9002      	str	r0, [sp, #8]
    e47a:	4692      	mov	sl, r2
    e47c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    e47e:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    e480:	f89a 0000 	ldrb.w	r0, [sl]
    e484:	b908      	cbnz	r0, e48a <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    e486:	4628      	mov	r0, r5
    e488:	e35f      	b.n	eb4a <cbvprintf+0x6da>
		if (*fp != '%') {
    e48a:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    e48c:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    e490:	d007      	beq.n	e4a2 <cbvprintf+0x32>
			OUTC('%');
    e492:	9b02      	ldr	r3, [sp, #8]
    e494:	4659      	mov	r1, fp
    e496:	4798      	blx	r3
    e498:	2800      	cmp	r0, #0
    e49a:	f2c0 8356 	blt.w	eb4a <cbvprintf+0x6da>
    e49e:	3501      	adds	r5, #1
			break;
    e4a0:	e212      	b.n	e8c8 <cbvprintf+0x458>
		} state = {
    e4a2:	2218      	movs	r2, #24
    e4a4:	2100      	movs	r1, #0
    e4a6:	a80a      	add	r0, sp, #40	; 0x28
    e4a8:	f01f fdca 	bl	2e040 <memset>
	if (*sp == '%') {
    e4ac:	f89a 3001 	ldrb.w	r3, [sl, #1]
    e4b0:	2b25      	cmp	r3, #37	; 0x25
    e4b2:	d078      	beq.n	e5a6 <cbvprintf+0x136>
    e4b4:	2200      	movs	r2, #0
    e4b6:	4610      	mov	r0, r2
    e4b8:	4696      	mov	lr, r2
    e4ba:	4694      	mov	ip, r2
    e4bc:	4616      	mov	r6, r2
    e4be:	4639      	mov	r1, r7
		switch (*sp) {
    e4c0:	f817 3b01 	ldrb.w	r3, [r7], #1
    e4c4:	2b2b      	cmp	r3, #43	; 0x2b
    e4c6:	f000 809d 	beq.w	e604 <cbvprintf+0x194>
    e4ca:	f200 8094 	bhi.w	e5f6 <cbvprintf+0x186>
    e4ce:	2b20      	cmp	r3, #32
    e4d0:	f000 809b 	beq.w	e60a <cbvprintf+0x19a>
    e4d4:	2b23      	cmp	r3, #35	; 0x23
    e4d6:	f000 809b 	beq.w	e610 <cbvprintf+0x1a0>
    e4da:	b12e      	cbz	r6, e4e8 <cbvprintf+0x78>
    e4dc:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    e4e0:	f046 0604 	orr.w	r6, r6, #4
    e4e4:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    e4e8:	f1bc 0f00 	cmp.w	ip, #0
    e4ec:	d005      	beq.n	e4fa <cbvprintf+0x8a>
    e4ee:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    e4f2:	f046 0608 	orr.w	r6, r6, #8
    e4f6:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    e4fa:	f1be 0f00 	cmp.w	lr, #0
    e4fe:	d005      	beq.n	e50c <cbvprintf+0x9c>
    e500:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    e504:	f046 0610 	orr.w	r6, r6, #16
    e508:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    e50c:	b128      	cbz	r0, e51a <cbvprintf+0xaa>
    e50e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    e512:	f040 0020 	orr.w	r0, r0, #32
    e516:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    e51a:	b12a      	cbz	r2, e528 <cbvprintf+0xb8>
    e51c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    e520:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e524:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    e528:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    e52c:	f002 0044 	and.w	r0, r2, #68	; 0x44
    e530:	2844      	cmp	r0, #68	; 0x44
    e532:	d103      	bne.n	e53c <cbvprintf+0xcc>
		conv->flag_zero = false;
    e534:	f36f 1286 	bfc	r2, #6, #1
    e538:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    e53c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    e540:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    e542:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    e546:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    e54a:	d17b      	bne.n	e644 <cbvprintf+0x1d4>
		conv->width_star = true;
    e54c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    e550:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    e554:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    e556:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    e55a:	781a      	ldrb	r2, [r3, #0]
    e55c:	2a2e      	cmp	r2, #46	; 0x2e
    e55e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    e562:	bf0c      	ite	eq
    e564:	2101      	moveq	r1, #1
    e566:	2100      	movne	r1, #0
    e568:	f361 0241 	bfi	r2, r1, #1, #1
    e56c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    e570:	d174      	bne.n	e65c <cbvprintf+0x1ec>
	if (*sp == '*') {
    e572:	785a      	ldrb	r2, [r3, #1]
    e574:	2a2a      	cmp	r2, #42	; 0x2a
    e576:	d06a      	beq.n	e64e <cbvprintf+0x1de>
	++sp;
    e578:	3301      	adds	r3, #1
	size_t val = 0;
    e57a:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    e57c:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    e57e:	4618      	mov	r0, r3
    e580:	f810 2b01 	ldrb.w	r2, [r0], #1
    e584:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    e588:	2f09      	cmp	r7, #9
    e58a:	f240 808e 	bls.w	e6aa <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    e58e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    e592:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    e594:	f3c2 0040 	ubfx	r0, r2, #1, #1
    e598:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    e59c:	f361 0241 	bfi	r2, r1, #1, #1
    e5a0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    e5a4:	e05a      	b.n	e65c <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    e5a6:	f10a 0702 	add.w	r7, sl, #2
    e5aa:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    e5ae:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    e5b2:	07d9      	lsls	r1, r3, #31
    e5b4:	f140 8149 	bpl.w	e84a <cbvprintf+0x3da>
			width = va_arg(ap, int);
    e5b8:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    e5bc:	f1b9 0f00 	cmp.w	r9, #0
    e5c0:	da07      	bge.n	e5d2 <cbvprintf+0x162>
				conv->flag_dash = true;
    e5c2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    e5c6:	f042 0204 	orr.w	r2, r2, #4
    e5ca:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    e5ce:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    e5d2:	075a      	lsls	r2, r3, #29
    e5d4:	f140 8142 	bpl.w	e85c <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    e5d8:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    e5dc:	f1b8 0f00 	cmp.w	r8, #0
    e5e0:	f280 8141 	bge.w	e866 <cbvprintf+0x3f6>
				conv->prec_present = false;
    e5e4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    e5e8:	f36f 0341 	bfc	r3, #1, #1
    e5ec:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    e5f0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    e5f4:	e137      	b.n	e866 <cbvprintf+0x3f6>
		switch (*sp) {
    e5f6:	2b2d      	cmp	r3, #45	; 0x2d
    e5f8:	d00c      	beq.n	e614 <cbvprintf+0x1a4>
    e5fa:	2b30      	cmp	r3, #48	; 0x30
    e5fc:	f47f af6d 	bne.w	e4da <cbvprintf+0x6a>
			conv->flag_zero = true;
    e600:	2201      	movs	r2, #1
	} while (loop);
    e602:	e75c      	b.n	e4be <cbvprintf+0x4e>
			conv->flag_plus = true;
    e604:	f04f 0c01 	mov.w	ip, #1
    e608:	e759      	b.n	e4be <cbvprintf+0x4e>
			conv->flag_space = true;
    e60a:	f04f 0e01 	mov.w	lr, #1
    e60e:	e756      	b.n	e4be <cbvprintf+0x4e>
			conv->flag_hash = true;
    e610:	2001      	movs	r0, #1
    e612:	e754      	b.n	e4be <cbvprintf+0x4e>
		switch (*sp) {
    e614:	2601      	movs	r6, #1
    e616:	e752      	b.n	e4be <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    e618:	fb0c 0202 	mla	r2, ip, r2, r0
    e61c:	3a30      	subs	r2, #48	; 0x30
    e61e:	4633      	mov	r3, r6
    e620:	461e      	mov	r6, r3
    e622:	f816 0b01 	ldrb.w	r0, [r6], #1
    e626:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    e62a:	2f09      	cmp	r7, #9
    e62c:	d9f4      	bls.n	e618 <cbvprintf+0x1a8>
	if (sp != wp) {
    e62e:	4299      	cmp	r1, r3
    e630:	d093      	beq.n	e55a <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    e632:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    e636:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    e638:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    e63a:	f362 0141 	bfi	r1, r2, #1, #1
    e63e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    e642:	e78a      	b.n	e55a <cbvprintf+0xea>
    e644:	460b      	mov	r3, r1
	size_t val = 0;
    e646:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    e648:	f04f 0c0a 	mov.w	ip, #10
    e64c:	e7e8      	b.n	e620 <cbvprintf+0x1b0>
		conv->prec_star = true;
    e64e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    e652:	f042 0204 	orr.w	r2, r2, #4
    e656:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    e65a:	3302      	adds	r3, #2
	switch (*sp) {
    e65c:	461f      	mov	r7, r3
    e65e:	f817 2b01 	ldrb.w	r2, [r7], #1
    e662:	2a6c      	cmp	r2, #108	; 0x6c
    e664:	d041      	beq.n	e6ea <cbvprintf+0x27a>
    e666:	d825      	bhi.n	e6b4 <cbvprintf+0x244>
    e668:	2a68      	cmp	r2, #104	; 0x68
    e66a:	d02b      	beq.n	e6c4 <cbvprintf+0x254>
    e66c:	2a6a      	cmp	r2, #106	; 0x6a
    e66e:	d046      	beq.n	e6fe <cbvprintf+0x28e>
    e670:	2a4c      	cmp	r2, #76	; 0x4c
    e672:	d04c      	beq.n	e70e <cbvprintf+0x29e>
    e674:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    e676:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    e67a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
    e67e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    e682:	2a78      	cmp	r2, #120	; 0x78
    e684:	f200 80d9 	bhi.w	e83a <cbvprintf+0x3ca>
    e688:	2a57      	cmp	r2, #87	; 0x57
    e68a:	d84d      	bhi.n	e728 <cbvprintf+0x2b8>
    e68c:	2a41      	cmp	r2, #65	; 0x41
    e68e:	d003      	beq.n	e698 <cbvprintf+0x228>
    e690:	3a45      	subs	r2, #69	; 0x45
    e692:	2a02      	cmp	r2, #2
    e694:	f200 80d1 	bhi.w	e83a <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    e698:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    e69c:	2204      	movs	r2, #4
    e69e:	f362 0302 	bfi	r3, r2, #0, #3
    e6a2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    e6a6:	2301      	movs	r3, #1
			break;
    e6a8:	e09e      	b.n	e7e8 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    e6aa:	fb06 2101 	mla	r1, r6, r1, r2
    e6ae:	3930      	subs	r1, #48	; 0x30
    e6b0:	4603      	mov	r3, r0
    e6b2:	e764      	b.n	e57e <cbvprintf+0x10e>
	switch (*sp) {
    e6b4:	2a74      	cmp	r2, #116	; 0x74
    e6b6:	d026      	beq.n	e706 <cbvprintf+0x296>
    e6b8:	2a7a      	cmp	r2, #122	; 0x7a
    e6ba:	d1db      	bne.n	e674 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    e6bc:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    e6c0:	2206      	movs	r2, #6
    e6c2:	e00d      	b.n	e6e0 <cbvprintf+0x270>
		if (*++sp == 'h') {
    e6c4:	785a      	ldrb	r2, [r3, #1]
    e6c6:	2a68      	cmp	r2, #104	; 0x68
    e6c8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    e6cc:	d106      	bne.n	e6dc <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    e6ce:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    e6d0:	f361 02c6 	bfi	r2, r1, #3, #4
    e6d4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    e6d8:	1c9f      	adds	r7, r3, #2
    e6da:	e7cc      	b.n	e676 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    e6dc:	4613      	mov	r3, r2
    e6de:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    e6e0:	f362 03c6 	bfi	r3, r2, #3, #4
    e6e4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    e6e8:	e7c5      	b.n	e676 <cbvprintf+0x206>
		if (*++sp == 'l') {
    e6ea:	785a      	ldrb	r2, [r3, #1]
    e6ec:	2a6c      	cmp	r2, #108	; 0x6c
    e6ee:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    e6f2:	d101      	bne.n	e6f8 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    e6f4:	2104      	movs	r1, #4
    e6f6:	e7eb      	b.n	e6d0 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    e6f8:	4613      	mov	r3, r2
    e6fa:	2203      	movs	r2, #3
    e6fc:	e7f0      	b.n	e6e0 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    e6fe:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    e702:	2205      	movs	r2, #5
    e704:	e7ec      	b.n	e6e0 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    e706:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    e70a:	2207      	movs	r2, #7
    e70c:	e7e8      	b.n	e6e0 <cbvprintf+0x270>
		conv->unsupported = true;
    e70e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    e712:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    e716:	f023 0302 	bic.w	r3, r3, #2
    e71a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    e71e:	f043 0302 	orr.w	r3, r3, #2
    e722:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    e726:	e7a6      	b.n	e676 <cbvprintf+0x206>
	switch (conv->specifier) {
    e728:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    e72c:	2920      	cmp	r1, #32
    e72e:	f200 8084 	bhi.w	e83a <cbvprintf+0x3ca>
    e732:	a001      	add	r0, pc, #4	; (adr r0, e738 <cbvprintf+0x2c8>)
    e734:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    e738:	0000e7fd 	.word	0x0000e7fd
    e73c:	0000e83b 	.word	0x0000e83b
    e740:	0000e83b 	.word	0x0000e83b
    e744:	0000e83b 	.word	0x0000e83b
    e748:	0000e83b 	.word	0x0000e83b
    e74c:	0000e83b 	.word	0x0000e83b
    e750:	0000e83b 	.word	0x0000e83b
    e754:	0000e83b 	.word	0x0000e83b
    e758:	0000e83b 	.word	0x0000e83b
    e75c:	0000e699 	.word	0x0000e699
    e760:	0000e83b 	.word	0x0000e83b
    e764:	0000e7fd 	.word	0x0000e7fd
    e768:	0000e7bd 	.word	0x0000e7bd
    e76c:	0000e699 	.word	0x0000e699
    e770:	0000e699 	.word	0x0000e699
    e774:	0000e699 	.word	0x0000e699
    e778:	0000e83b 	.word	0x0000e83b
    e77c:	0000e7bd 	.word	0x0000e7bd
    e780:	0000e83b 	.word	0x0000e83b
    e784:	0000e83b 	.word	0x0000e83b
    e788:	0000e83b 	.word	0x0000e83b
    e78c:	0000e83b 	.word	0x0000e83b
    e790:	0000e805 	.word	0x0000e805
    e794:	0000e7fd 	.word	0x0000e7fd
    e798:	0000e821 	.word	0x0000e821
    e79c:	0000e83b 	.word	0x0000e83b
    e7a0:	0000e83b 	.word	0x0000e83b
    e7a4:	0000e821 	.word	0x0000e821
    e7a8:	0000e83b 	.word	0x0000e83b
    e7ac:	0000e7fd 	.word	0x0000e7fd
    e7b0:	0000e83b 	.word	0x0000e83b
    e7b4:	0000e83b 	.word	0x0000e83b
    e7b8:	0000e7fd 	.word	0x0000e7fd
		conv->specifier_cat = SPECIFIER_SINT;
    e7bc:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    e7c0:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    e7c2:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    e7c6:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    e7ca:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    e7cc:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    e7d0:	bf02      	ittt	eq
    e7d2:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    e7d6:	f041 0101 	orreq.w	r1, r1, #1
    e7da:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    e7de:	2a63      	cmp	r2, #99	; 0x63
    e7e0:	d131      	bne.n	e846 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    e7e2:	3b00      	subs	r3, #0
    e7e4:	bf18      	it	ne
    e7e6:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    e7e8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    e7ec:	f3c2 0140 	ubfx	r1, r2, #1, #1
    e7f0:	430b      	orrs	r3, r1
    e7f2:	f363 0241 	bfi	r2, r3, #1, #1
    e7f6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    e7fa:	e6d8      	b.n	e5ae <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    e7fc:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    e800:	2002      	movs	r0, #2
    e802:	e7de      	b.n	e7c2 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    e804:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    e808:	f003 0378 	and.w	r3, r3, #120	; 0x78
    e80c:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    e810:	2103      	movs	r1, #3
    e812:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    e816:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    e818:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    e81c:	4143      	adcs	r3, r0
    e81e:	e7e3      	b.n	e7e8 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    e820:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    e824:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    e826:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    e82a:	f361 0202 	bfi	r2, r1, #0, #3
    e82e:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    e832:	bf14      	ite	ne
    e834:	2301      	movne	r3, #1
    e836:	2300      	moveq	r3, #0
    e838:	e7d6      	b.n	e7e8 <cbvprintf+0x378>
		conv->invalid = true;
    e83a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    e83e:	f043 0301 	orr.w	r3, r3, #1
    e842:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    e846:	2300      	movs	r3, #0
    e848:	e7ce      	b.n	e7e8 <cbvprintf+0x378>
		} else if (conv->width_present) {
    e84a:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    e84e:	2a00      	cmp	r2, #0
			width = conv->width_value;
    e850:	bfb4      	ite	lt
    e852:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    e856:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
    e85a:	e6ba      	b.n	e5d2 <cbvprintf+0x162>
		} else if (conv->prec_present) {
    e85c:	079b      	lsls	r3, r3, #30
    e85e:	f57f aec7 	bpl.w	e5f0 <cbvprintf+0x180>
			precision = conv->prec_value;
    e862:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    e866:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    e86a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    e86c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    e870:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    e874:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    e878:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    e87a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    e87e:	d138      	bne.n	e8f2 <cbvprintf+0x482>
			switch (length_mod) {
    e880:	1ecb      	subs	r3, r1, #3
    e882:	2b04      	cmp	r3, #4
    e884:	d822      	bhi.n	e8cc <cbvprintf+0x45c>
    e886:	e8df f003 	tbb	[pc, r3]
    e88a:	0903      	.short	0x0903
    e88c:	2109      	.short	0x2109
    e88e:	21          	.byte	0x21
    e88f:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    e890:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    e894:	17da      	asrs	r2, r3, #31
    e896:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    e89a:	e006      	b.n	e8aa <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    e89c:	3407      	adds	r4, #7
    e89e:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    e8a2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    e8a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    e8aa:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    e8ae:	f013 0603 	ands.w	r6, r3, #3
    e8b2:	d056      	beq.n	e962 <cbvprintf+0x4f2>
			OUTS(sp, fp);
    e8b4:	9802      	ldr	r0, [sp, #8]
    e8b6:	463b      	mov	r3, r7
    e8b8:	4652      	mov	r2, sl
    e8ba:	4659      	mov	r1, fp
    e8bc:	f01d fb6d 	bl	2bf9a <outs>
    e8c0:	2800      	cmp	r0, #0
    e8c2:	f2c0 8142 	blt.w	eb4a <cbvprintf+0x6da>
    e8c6:	4405      	add	r5, r0
			continue;
    e8c8:	46ba      	mov	sl, r7
    e8ca:	e5d9      	b.n	e480 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    e8cc:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    e8d0:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    e8d2:	ea4f 72e3 	mov.w	r2, r3, asr #31
    e8d6:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    e8da:	d105      	bne.n	e8e8 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
    e8dc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    e8e0:	930a      	str	r3, [sp, #40]	; 0x28
    e8e2:	2300      	movs	r3, #0
    e8e4:	930b      	str	r3, [sp, #44]	; 0x2c
    e8e6:	e7e0      	b.n	e8aa <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
    e8e8:	2902      	cmp	r1, #2
    e8ea:	d1de      	bne.n	e8aa <cbvprintf+0x43a>
				value->sint = (short)value->sint;
    e8ec:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    e8f0:	e7d0      	b.n	e894 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    e8f2:	2b02      	cmp	r3, #2
    e8f4:	d123      	bne.n	e93e <cbvprintf+0x4ce>
			switch (length_mod) {
    e8f6:	1ecb      	subs	r3, r1, #3
    e8f8:	2b04      	cmp	r3, #4
    e8fa:	d813      	bhi.n	e924 <cbvprintf+0x4b4>
    e8fc:	e8df f003 	tbb	[pc, r3]
    e900:	120a0a03 	.word	0x120a0a03
    e904:	12          	.byte	0x12
    e905:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    e906:	6822      	ldr	r2, [r4, #0]
    e908:	920a      	str	r2, [sp, #40]	; 0x28
    e90a:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    e90c:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    e90e:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    e910:	4604      	mov	r4, r0
    e912:	e7ca      	b.n	e8aa <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
    e914:	1de0      	adds	r0, r4, #7
    e916:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    e91a:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    e91e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    e922:	e7f5      	b.n	e910 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
    e924:	f854 3b04 	ldr.w	r3, [r4], #4
    e928:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    e92a:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    e92c:	f04f 0300 	mov.w	r3, #0
    e930:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    e932:	d0d3      	beq.n	e8dc <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
    e934:	2902      	cmp	r1, #2
    e936:	d1b8      	bne.n	e8aa <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
    e938:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    e93c:	e7d0      	b.n	e8e0 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
    e93e:	2b04      	cmp	r3, #4
    e940:	d109      	bne.n	e956 <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
    e942:	1de3      	adds	r3, r4, #7
    e944:	f023 0307 	bic.w	r3, r3, #7
    e948:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    e94c:	e9d3 2300 	ldrd	r2, r3, [r3]
    e950:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    e954:	e7a9      	b.n	e8aa <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    e956:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    e958:	bf04      	itt	eq
    e95a:	f854 3b04 	ldreq.w	r3, [r4], #4
    e95e:	930a      	streq	r3, [sp, #40]	; 0x28
    e960:	e7a3      	b.n	e8aa <cbvprintf+0x43a>
		switch (conv->specifier) {
    e962:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    e966:	2878      	cmp	r0, #120	; 0x78
    e968:	d8ae      	bhi.n	e8c8 <cbvprintf+0x458>
    e96a:	2862      	cmp	r0, #98	; 0x62
    e96c:	d822      	bhi.n	e9b4 <cbvprintf+0x544>
    e96e:	2825      	cmp	r0, #37	; 0x25
    e970:	f43f ad8f 	beq.w	e492 <cbvprintf+0x22>
    e974:	2858      	cmp	r0, #88	; 0x58
    e976:	d1a7      	bne.n	e8c8 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    e978:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    e97c:	9300      	str	r3, [sp, #0]
    e97e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    e982:	ab04      	add	r3, sp, #16
    e984:	aa0c      	add	r2, sp, #48	; 0x30
    e986:	f01d fac2 	bl	2bf0e <encode_uint>
    e98a:	4682      	mov	sl, r0
			if (precision >= 0) {
    e98c:	f1b8 0f00 	cmp.w	r8, #0
    e990:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    e994:	db0c      	blt.n	e9b0 <cbvprintf+0x540>
				conv->flag_zero = false;
    e996:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    e99a:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    e99e:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    e9a2:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    e9a4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    e9a8:	d902      	bls.n	e9b0 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
    e9aa:	eba8 0303 	sub.w	r3, r8, r3
    e9ae:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    e9b0:	4680      	mov	r8, r0
    e9b2:	e03d      	b.n	ea30 <cbvprintf+0x5c0>
		switch (conv->specifier) {
    e9b4:	3863      	subs	r0, #99	; 0x63
    e9b6:	2815      	cmp	r0, #21
    e9b8:	d886      	bhi.n	e8c8 <cbvprintf+0x458>
    e9ba:	a201      	add	r2, pc, #4	; (adr r2, e9c0 <cbvprintf+0x550>)
    e9bc:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    e9c0:	0000ea41 	.word	0x0000ea41
    e9c4:	0000eaa5 	.word	0x0000eaa5
    e9c8:	0000e8c9 	.word	0x0000e8c9
    e9cc:	0000e8c9 	.word	0x0000e8c9
    e9d0:	0000e8c9 	.word	0x0000e8c9
    e9d4:	0000e8c9 	.word	0x0000e8c9
    e9d8:	0000eaa5 	.word	0x0000eaa5
    e9dc:	0000e8c9 	.word	0x0000e8c9
    e9e0:	0000e8c9 	.word	0x0000e8c9
    e9e4:	0000e8c9 	.word	0x0000e8c9
    e9e8:	0000e8c9 	.word	0x0000e8c9
    e9ec:	0000eaff 	.word	0x0000eaff
    e9f0:	0000eacd 	.word	0x0000eacd
    e9f4:	0000ead1 	.word	0x0000ead1
    e9f8:	0000e8c9 	.word	0x0000e8c9
    e9fc:	0000e8c9 	.word	0x0000e8c9
    ea00:	0000ea19 	.word	0x0000ea19
    ea04:	0000e8c9 	.word	0x0000e8c9
    ea08:	0000eacd 	.word	0x0000eacd
    ea0c:	0000e8c9 	.word	0x0000e8c9
    ea10:	0000e8c9 	.word	0x0000e8c9
    ea14:	0000eacd 	.word	0x0000eacd
			if (precision >= 0) {
    ea18:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    ea1c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    ea20:	db0a      	blt.n	ea38 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    ea22:	4641      	mov	r1, r8
    ea24:	4650      	mov	r0, sl
    ea26:	f01f fac9 	bl	2dfbc <strnlen>
			bpe = bps + len;
    ea2a:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    ea2e:	2600      	movs	r6, #0
		if (bps == NULL) {
    ea30:	f1ba 0f00 	cmp.w	sl, #0
    ea34:	d10c      	bne.n	ea50 <cbvprintf+0x5e0>
    ea36:	e747      	b.n	e8c8 <cbvprintf+0x458>
				len = strlen(bps);
    ea38:	4650      	mov	r0, sl
    ea3a:	f01f fab8 	bl	2dfae <strlen>
    ea3e:	e7f4      	b.n	ea2a <cbvprintf+0x5ba>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    ea40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ea42:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    ea46:	2600      	movs	r6, #0
			bps = buf;
    ea48:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    ea4c:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    ea50:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    ea54:	b106      	cbz	r6, ea58 <cbvprintf+0x5e8>
			nj_len += 1U;
    ea56:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    ea58:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    ea5c:	06d0      	lsls	r0, r2, #27
    ea5e:	d568      	bpl.n	eb32 <cbvprintf+0x6c2>
			nj_len += 2U;
    ea60:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    ea62:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    ea64:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    ea66:	bf48      	it	mi
    ea68:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    ea6a:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    ea6c:	bf48      	it	mi
    ea6e:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    ea70:	f1b9 0f00 	cmp.w	r9, #0
    ea74:	dd76      	ble.n	eb64 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    ea76:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    ea7a:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    ea7e:	f3c2 0380 	ubfx	r3, r2, #2, #1
    ea82:	9303      	str	r3, [sp, #12]
    ea84:	0753      	lsls	r3, r2, #29
    ea86:	d46d      	bmi.n	eb64 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    ea88:	0650      	lsls	r0, r2, #25
    ea8a:	d561      	bpl.n	eb50 <cbvprintf+0x6e0>
					if (sign != 0) {
    ea8c:	b146      	cbz	r6, eaa0 <cbvprintf+0x630>
						OUTC(sign);
    ea8e:	9b02      	ldr	r3, [sp, #8]
    ea90:	4659      	mov	r1, fp
    ea92:	4630      	mov	r0, r6
    ea94:	4798      	blx	r3
    ea96:	2800      	cmp	r0, #0
    ea98:	db57      	blt.n	eb4a <cbvprintf+0x6da>
						sign = 0;
    ea9a:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    ea9c:	3501      	adds	r5, #1
						sign = 0;
    ea9e:	461e      	mov	r6, r3
					pad = '0';
    eaa0:	2330      	movs	r3, #48	; 0x30
    eaa2:	e056      	b.n	eb52 <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    eaa4:	071e      	lsls	r6, r3, #28
    eaa6:	d40f      	bmi.n	eac8 <cbvprintf+0x658>
				sign = ' ';
    eaa8:	f013 0610 	ands.w	r6, r3, #16
    eaac:	bf18      	it	ne
    eaae:	2620      	movne	r6, #32
			sint = value->sint;
    eab0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    eab4:	2b00      	cmp	r3, #0
    eab6:	f6bf af5f 	bge.w	e978 <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
    eaba:	4252      	negs	r2, r2
    eabc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    eac0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    eac4:	262d      	movs	r6, #45	; 0x2d
    eac6:	e757      	b.n	e978 <cbvprintf+0x508>
				sign = '+';
    eac8:	262b      	movs	r6, #43	; 0x2b
    eaca:	e7f1      	b.n	eab0 <cbvprintf+0x640>
		switch (conv->specifier) {
    eacc:	2600      	movs	r6, #0
    eace:	e753      	b.n	e978 <cbvprintf+0x508>
			if (value->ptr != NULL) {
    ead0:	980a      	ldr	r0, [sp, #40]	; 0x28
    ead2:	b340      	cbz	r0, eb26 <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    ead4:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    ead8:	9300      	str	r3, [sp, #0]
    eada:	aa0c      	add	r2, sp, #48	; 0x30
    eadc:	ab04      	add	r3, sp, #16
    eade:	2100      	movs	r1, #0
    eae0:	f01d fa15 	bl	2bf0e <encode_uint>
				conv->altform_0c = true;
    eae4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    eae8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    eaec:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    eaf0:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    eaf4:	4682      	mov	sl, r0
				conv->altform_0c = true;
    eaf6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    eafa:	2600      	movs	r6, #0
				goto prec_int_pad0;
    eafc:	e746      	b.n	e98c <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    eafe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    eb00:	2907      	cmp	r1, #7
    eb02:	f63f aee1 	bhi.w	e8c8 <cbvprintf+0x458>
    eb06:	e8df f001 	tbb	[pc, r1]
    eb0a:	040c      	.short	0x040c
    eb0c:	08080c06 	.word	0x08080c06
    eb10:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    eb12:	701d      	strb	r5, [r3, #0]
		break;
    eb14:	e6d8      	b.n	e8c8 <cbvprintf+0x458>
		*(short *)dp = (short)count;
    eb16:	801d      	strh	r5, [r3, #0]
		break;
    eb18:	e6d6      	b.n	e8c8 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    eb1a:	17ea      	asrs	r2, r5, #31
    eb1c:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    eb20:	e6d2      	b.n	e8c8 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    eb22:	601d      	str	r5, [r3, #0]
		break;
    eb24:	e6d0      	b.n	e8c8 <cbvprintf+0x458>
			bps = "(nil)";
    eb26:	f8df a0c8 	ldr.w	sl, [pc, #200]	; ebf0 <cbvprintf+0x780>
    eb2a:	4606      	mov	r6, r0
			bpe = bps + 5;
    eb2c:	f10a 0805 	add.w	r8, sl, #5
    eb30:	e78e      	b.n	ea50 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    eb32:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    eb34:	bf48      	it	mi
    eb36:	3301      	addmi	r3, #1
    eb38:	e793      	b.n	ea62 <cbvprintf+0x5f2>
					OUTC(pad);
    eb3a:	4618      	mov	r0, r3
    eb3c:	9303      	str	r3, [sp, #12]
    eb3e:	4659      	mov	r1, fp
    eb40:	9b02      	ldr	r3, [sp, #8]
    eb42:	4798      	blx	r3
    eb44:	2800      	cmp	r0, #0
    eb46:	9b03      	ldr	r3, [sp, #12]
    eb48:	da04      	bge.n	eb54 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    eb4a:	b011      	add	sp, #68	; 0x44
    eb4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    eb50:	2320      	movs	r3, #32
    eb52:	444d      	add	r5, r9
    eb54:	464a      	mov	r2, r9
				while (width-- > 0) {
    eb56:	2a00      	cmp	r2, #0
    eb58:	eba5 0109 	sub.w	r1, r5, r9
    eb5c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    eb60:	dceb      	bgt.n	eb3a <cbvprintf+0x6ca>
    eb62:	460d      	mov	r5, r1
		if (sign != 0) {
    eb64:	b136      	cbz	r6, eb74 <cbvprintf+0x704>
			OUTC(sign);
    eb66:	9b02      	ldr	r3, [sp, #8]
    eb68:	4659      	mov	r1, fp
    eb6a:	4630      	mov	r0, r6
    eb6c:	4798      	blx	r3
    eb6e:	2800      	cmp	r0, #0
    eb70:	dbeb      	blt.n	eb4a <cbvprintf+0x6da>
    eb72:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    eb74:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    eb78:	06d9      	lsls	r1, r3, #27
    eb7a:	d401      	bmi.n	eb80 <cbvprintf+0x710>
    eb7c:	071a      	lsls	r2, r3, #28
    eb7e:	d506      	bpl.n	eb8e <cbvprintf+0x71e>
				OUTC('0');
    eb80:	9b02      	ldr	r3, [sp, #8]
    eb82:	4659      	mov	r1, fp
    eb84:	2030      	movs	r0, #48	; 0x30
    eb86:	4798      	blx	r3
    eb88:	2800      	cmp	r0, #0
    eb8a:	dbde      	blt.n	eb4a <cbvprintf+0x6da>
    eb8c:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    eb8e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    eb92:	06db      	lsls	r3, r3, #27
    eb94:	d507      	bpl.n	eba6 <cbvprintf+0x736>
				OUTC(conv->specifier);
    eb96:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    eb9a:	9b02      	ldr	r3, [sp, #8]
    eb9c:	4659      	mov	r1, fp
    eb9e:	4798      	blx	r3
    eba0:	2800      	cmp	r0, #0
    eba2:	dbd2      	blt.n	eb4a <cbvprintf+0x6da>
    eba4:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    eba6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    eba8:	442e      	add	r6, r5
    ebaa:	1b73      	subs	r3, r6, r5
    ebac:	2b00      	cmp	r3, #0
    ebae:	dc16      	bgt.n	ebde <cbvprintf+0x76e>
			OUTS(bps, bpe);
    ebb0:	9802      	ldr	r0, [sp, #8]
    ebb2:	4643      	mov	r3, r8
    ebb4:	4652      	mov	r2, sl
    ebb6:	4659      	mov	r1, fp
    ebb8:	f01d f9ef 	bl	2bf9a <outs>
    ebbc:	2800      	cmp	r0, #0
    ebbe:	dbc4      	blt.n	eb4a <cbvprintf+0x6da>
    ebc0:	4405      	add	r5, r0
		while (width > 0) {
    ebc2:	44a9      	add	r9, r5
    ebc4:	eba9 0305 	sub.w	r3, r9, r5
    ebc8:	2b00      	cmp	r3, #0
    ebca:	f77f ae7d 	ble.w	e8c8 <cbvprintf+0x458>
			OUTC(' ');
    ebce:	9b02      	ldr	r3, [sp, #8]
    ebd0:	4659      	mov	r1, fp
    ebd2:	2020      	movs	r0, #32
    ebd4:	4798      	blx	r3
    ebd6:	2800      	cmp	r0, #0
    ebd8:	dbb7      	blt.n	eb4a <cbvprintf+0x6da>
    ebda:	3501      	adds	r5, #1
			--width;
    ebdc:	e7f2      	b.n	ebc4 <cbvprintf+0x754>
				OUTC('0');
    ebde:	9b02      	ldr	r3, [sp, #8]
    ebe0:	4659      	mov	r1, fp
    ebe2:	2030      	movs	r0, #48	; 0x30
    ebe4:	4798      	blx	r3
    ebe6:	2800      	cmp	r0, #0
    ebe8:	dbaf      	blt.n	eb4a <cbvprintf+0x6da>
    ebea:	3501      	adds	r5, #1
    ebec:	e7dd      	b.n	ebaa <cbvprintf+0x73a>
    ebee:	bf00      	nop
    ebf0:	00034334 	.word	0x00034334

0000ebf4 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    ebf4:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    ebf6:	4910      	ldr	r1, [pc, #64]	; (ec38 <enable_logger+0x44>)
    ebf8:	4810      	ldr	r0, [pc, #64]	; (ec3c <enable_logger+0x48>)
{
    ebfa:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    ebfc:	2200      	movs	r2, #0
    ebfe:	f023 f852 	bl	31ca6 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    ec02:	4d0f      	ldr	r5, [pc, #60]	; (ec40 <enable_logger+0x4c>)
    ec04:	490f      	ldr	r1, [pc, #60]	; (ec44 <enable_logger+0x50>)
    ec06:	2200      	movs	r2, #0
    ec08:	2300      	movs	r3, #0
    ec0a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    ec0e:	2400      	movs	r4, #0
    ec10:	230e      	movs	r3, #14
    ec12:	e9cd 3403 	strd	r3, r4, [sp, #12]
    ec16:	e9cd 4401 	strd	r4, r4, [sp, #4]
    ec1a:	4b0b      	ldr	r3, [pc, #44]	; (ec48 <enable_logger+0x54>)
    ec1c:	9400      	str	r4, [sp, #0]
    ec1e:	f44f 7240 	mov.w	r2, #768	; 0x300
    ec22:	4628      	mov	r0, r5
    ec24:	f01b fba0 	bl	2a368 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    ec28:	4908      	ldr	r1, [pc, #32]	; (ec4c <enable_logger+0x58>)
    ec2a:	4628      	mov	r0, r5
    ec2c:	f022 fcd9 	bl	315e2 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    ec30:	4620      	mov	r0, r4
    ec32:	b009      	add	sp, #36	; 0x24
    ec34:	bd30      	pop	{r4, r5, pc}
    ec36:	bf00      	nop
    ec38:	0000ec51 	.word	0x0000ec51
    ec3c:	200011d0 	.word	0x200011d0
    ec40:	20001208 	.word	0x20001208
    ec44:	20003840 	.word	0x20003840
    ec48:	0000ee75 	.word	0x0000ee75
    ec4c:	0003433a 	.word	0x0003433a

0000ec50 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    ec50:	4801      	ldr	r0, [pc, #4]	; (ec58 <log_process_thread_timer_expiry_fn+0x8>)
    ec52:	f01b bd1b 	b.w	2a68c <z_impl_k_sem_give>
    ec56:	bf00      	nop
    ec58:	20000bf4 	.word	0x20000bf4

0000ec5c <log_format_func_t_get>:
}
    ec5c:	4b01      	ldr	r3, [pc, #4]	; (ec64 <log_format_func_t_get+0x8>)
    ec5e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    ec62:	4770      	bx	lr
    ec64:	000327a4 	.word	0x000327a4

0000ec68 <log_init>:
{
    ec68:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    ec6a:	4b12      	ldr	r3, [pc, #72]	; (ecb4 <log_init+0x4c>)
    ec6c:	f3bf 8f5b 	dmb	ish
    ec70:	e853 5f00 	ldrex	r5, [r3]
    ec74:	1c6a      	adds	r2, r5, #1
    ec76:	e843 2100 	strex	r1, r2, [r3]
    ec7a:	2900      	cmp	r1, #0
    ec7c:	d1f8      	bne.n	ec70 <log_init+0x8>
    ec7e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    ec82:	b92d      	cbnz	r5, ec90 <log_init+0x28>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    ec84:	4c0c      	ldr	r4, [pc, #48]	; (ecb8 <log_init+0x50>)
    ec86:	4e0d      	ldr	r6, [pc, #52]	; (ecbc <log_init+0x54>)
    ec88:	1b36      	subs	r6, r6, r4
    ec8a:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    ec8c:	42b5      	cmp	r5, r6
    ec8e:	db00      	blt.n	ec92 <log_init+0x2a>
}
    ec90:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    ec92:	7b23      	ldrb	r3, [r4, #12]
    ec94:	b153      	cbz	r3, ecac <log_init+0x44>
			if (backend->api->init != NULL) {
    ec96:	6823      	ldr	r3, [r4, #0]
    ec98:	699b      	ldr	r3, [r3, #24]
    ec9a:	b10b      	cbz	r3, eca0 <log_init+0x38>
				backend->api->init(backend);
    ec9c:	4620      	mov	r0, r4
    ec9e:	4798      	blx	r3
			log_backend_enable(backend,
    eca0:	6863      	ldr	r3, [r4, #4]
    eca2:	2204      	movs	r2, #4
    eca4:	6819      	ldr	r1, [r3, #0]
    eca6:	4620      	mov	r0, r4
    eca8:	f000 f992 	bl	efd0 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    ecac:	3501      	adds	r5, #1
    ecae:	3410      	adds	r4, #16
    ecb0:	e7ec      	b.n	ec8c <log_init+0x24>
    ecb2:	bf00      	nop
    ecb4:	20001d4c 	.word	0x20001d4c
    ecb8:	0003250c 	.word	0x0003250c
    ecbc:	0003252c 	.word	0x0003252c

0000ecc0 <z_log_notify_backend_enabled>:
{
    ecc0:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    ecc2:	4c04      	ldr	r4, [pc, #16]	; (ecd4 <z_log_notify_backend_enabled+0x14>)
    ecc4:	7823      	ldrb	r3, [r4, #0]
    ecc6:	b913      	cbnz	r3, ecce <z_log_notify_backend_enabled+0xe>
    ecc8:	4803      	ldr	r0, [pc, #12]	; (ecd8 <z_log_notify_backend_enabled+0x18>)
    ecca:	f01b fcdf 	bl	2a68c <z_impl_k_sem_give>
	backend_attached = true;
    ecce:	2301      	movs	r3, #1
    ecd0:	7023      	strb	r3, [r4, #0]
}
    ecd2:	bd10      	pop	{r4, pc}
    ecd4:	200032c1 	.word	0x200032c1
    ecd8:	20000bf4 	.word	0x20000bf4

0000ecdc <z_log_dropped>:
    ecdc:	4b0c      	ldr	r3, [pc, #48]	; (ed10 <z_log_dropped+0x34>)
    ecde:	f3bf 8f5b 	dmb	ish
    ece2:	e853 2f00 	ldrex	r2, [r3]
    ece6:	3201      	adds	r2, #1
    ece8:	e843 2100 	strex	r1, r2, [r3]
    ecec:	2900      	cmp	r1, #0
    ecee:	d1f8      	bne.n	ece2 <z_log_dropped+0x6>
    ecf0:	f3bf 8f5b 	dmb	ish
	if (buffered) {
    ecf4:	b158      	cbz	r0, ed0e <z_log_dropped+0x32>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    ecf6:	f3bf 8f5b 	dmb	ish
    ecfa:	4b06      	ldr	r3, [pc, #24]	; (ed14 <z_log_dropped+0x38>)
    ecfc:	e853 2f00 	ldrex	r2, [r3]
    ed00:	3a01      	subs	r2, #1
    ed02:	e843 2100 	strex	r1, r2, [r3]
    ed06:	2900      	cmp	r1, #0
    ed08:	d1f8      	bne.n	ecfc <z_log_dropped+0x20>
    ed0a:	f3bf 8f5b 	dmb	ish
}
    ed0e:	4770      	bx	lr
    ed10:	20001d48 	.word	0x20001d48
    ed14:	20001d44 	.word	0x20001d44

0000ed18 <z_log_dropped_read_and_clear>:
}
    ed18:	2000      	movs	r0, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    ed1a:	4b06      	ldr	r3, [pc, #24]	; (ed34 <z_log_dropped_read_and_clear+0x1c>)
    ed1c:	f3bf 8f5b 	dmb	ish
    ed20:	4602      	mov	r2, r0
    ed22:	e853 0f00 	ldrex	r0, [r3]
    ed26:	e843 2100 	strex	r1, r2, [r3]
    ed2a:	2900      	cmp	r1, #0
    ed2c:	d1f9      	bne.n	ed22 <z_log_dropped_read_and_clear+0xa>
    ed2e:	f3bf 8f5b 	dmb	ish
    ed32:	4770      	bx	lr
    ed34:	20001d48 	.word	0x20001d48

0000ed38 <dropped_notify>:
{
    ed38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    ed3a:	f7ff ffed 	bl	ed18 <z_log_dropped_read_and_clear>
    ed3e:	4c0a      	ldr	r4, [pc, #40]	; (ed68 <dropped_notify+0x30>)
    ed40:	4d0a      	ldr	r5, [pc, #40]	; (ed6c <dropped_notify+0x34>)
    ed42:	1b2d      	subs	r5, r5, r4
    ed44:	4607      	mov	r7, r0
    ed46:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    ed48:	2600      	movs	r6, #0
    ed4a:	42ae      	cmp	r6, r5
    ed4c:	db00      	blt.n	ed50 <dropped_notify+0x18>
}
    ed4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    ed50:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    ed52:	795b      	ldrb	r3, [r3, #5]
    ed54:	b12b      	cbz	r3, ed62 <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    ed56:	6823      	ldr	r3, [r4, #0]
    ed58:	691b      	ldr	r3, [r3, #16]
    ed5a:	b113      	cbz	r3, ed62 <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    ed5c:	4639      	mov	r1, r7
    ed5e:	4620      	mov	r0, r4
    ed60:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    ed62:	3601      	adds	r6, #1
    ed64:	3410      	adds	r4, #16
    ed66:	e7f0      	b.n	ed4a <dropped_notify+0x12>
    ed68:	0003250c 	.word	0x0003250c
    ed6c:	0003252c 	.word	0x0003252c

0000ed70 <z_log_msg2_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    ed70:	4901      	ldr	r1, [pc, #4]	; (ed78 <z_log_msg2_init+0x8>)
    ed72:	4802      	ldr	r0, [pc, #8]	; (ed7c <z_log_msg2_init+0xc>)
    ed74:	f01d b9e9 	b.w	2c14a <mpsc_pbuf_init>
    ed78:	000327b0 	.word	0x000327b0
    ed7c:	20001d50 	.word	0x20001d50

0000ed80 <log_core_init>:
	panic_mode = false;
    ed80:	4a08      	ldr	r2, [pc, #32]	; (eda4 <log_core_init+0x24>)
{
    ed82:	b508      	push	{r3, lr}
	panic_mode = false;
    ed84:	2300      	movs	r3, #0
    ed86:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    ed88:	4a07      	ldr	r2, [pc, #28]	; (eda8 <log_core_init+0x28>)
    ed8a:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    ed8c:	4b07      	ldr	r3, [pc, #28]	; (edac <log_core_init+0x2c>)
    ed8e:	4a08      	ldr	r2, [pc, #32]	; (edb0 <log_core_init+0x30>)
    ed90:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    ed92:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    ed96:	f000 faeb 	bl	f370 <log_output_timestamp_freq_set>
}
    ed9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg2_init();
    ed9e:	f7ff bfe7 	b.w	ed70 <z_log_msg2_init>
    eda2:	bf00      	nop
    eda4:	200032c2 	.word	0x200032c2
    eda8:	20001d48 	.word	0x20001d48
    edac:	20000274 	.word	0x20000274
    edb0:	0002c3f3 	.word	0x0002c3f3

0000edb4 <z_log_msg2_alloc>:
{
    edb4:	4601      	mov	r1, r0
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
    edb6:	2200      	movs	r2, #0
    edb8:	4801      	ldr	r0, [pc, #4]	; (edc0 <z_log_msg2_alloc+0xc>)
    edba:	2300      	movs	r3, #0
    edbc:	f01d b9e6 	b.w	2c18c <mpsc_pbuf_alloc>
    edc0:	20001d50 	.word	0x20001d50

0000edc4 <z_log_msg2_claim>:
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
    edc4:	4801      	ldr	r0, [pc, #4]	; (edcc <z_log_msg2_claim+0x8>)
    edc6:	f01d ba77 	b.w	2c2b8 <mpsc_pbuf_claim>
    edca:	bf00      	nop
    edcc:	20001d50 	.word	0x20001d50

0000edd0 <z_log_msg2_free>:
{
    edd0:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
    edd2:	4801      	ldr	r0, [pc, #4]	; (edd8 <z_log_msg2_free+0x8>)
    edd4:	f01d babc 	b.w	2c350 <mpsc_pbuf_free>
    edd8:	20001d50 	.word	0x20001d50

0000eddc <z_log_msg2_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
    eddc:	4801      	ldr	r0, [pc, #4]	; (ede4 <z_log_msg2_pending+0x8>)
    edde:	f01d baeb 	b.w	2c3b8 <mpsc_pbuf_is_pending>
    ede2:	bf00      	nop
    ede4:	20001d50 	.word	0x20001d50

0000ede8 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    ede8:	4b1d      	ldr	r3, [pc, #116]	; (ee60 <z_impl_log_process+0x78>)
    edea:	781b      	ldrb	r3, [r3, #0]
{
    edec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    edf0:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
    edf2:	b903      	cbnz	r3, edf6 <z_impl_log_process+0xe>
    edf4:	b388      	cbz	r0, ee5a <z_impl_log_process+0x72>
	msg = get_msg();
    edf6:	f01d fb03 	bl	2c400 <get_msg>
	if (msg.msg) {
    edfa:	4606      	mov	r6, r0
    edfc:	b118      	cbz	r0, ee06 <z_impl_log_process+0x1e>
		if (!bypass) {
    edfe:	b16d      	cbz	r5, ee1c <z_impl_log_process+0x34>
		z_log_msg2_free(msg.msg2);
    ee00:	4630      	mov	r0, r6
    ee02:	f7ff ffe5 	bl	edd0 <z_log_msg2_free>
	if (!bypass && z_log_dropped_pending()) {
    ee06:	b92d      	cbnz	r5, ee14 <z_impl_log_process+0x2c>
	return dropped_cnt > 0;
    ee08:	4b16      	ldr	r3, [pc, #88]	; (ee64 <z_impl_log_process+0x7c>)
	if (!bypass && z_log_dropped_pending()) {
    ee0a:	681b      	ldr	r3, [r3, #0]
    ee0c:	2b00      	cmp	r3, #0
    ee0e:	dd01      	ble.n	ee14 <z_impl_log_process+0x2c>
		dropped_notify();
    ee10:	f7ff ff92 	bl	ed38 <dropped_notify>
}
    ee14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_log_msg2_pending();
    ee18:	f7ff bfe0 	b.w	eddc <z_log_msg2_pending>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    ee1c:	4b12      	ldr	r3, [pc, #72]	; (ee68 <z_impl_log_process+0x80>)
    ee1e:	f3bf 8f5b 	dmb	ish
    ee22:	e853 2f00 	ldrex	r2, [r3]
    ee26:	3a01      	subs	r2, #1
    ee28:	e843 2100 	strex	r1, r2, [r3]
    ee2c:	2900      	cmp	r1, #0
    ee2e:	d1f8      	bne.n	ee22 <z_impl_log_process+0x3a>
    ee30:	f3bf 8f5b 	dmb	ish
	return __log_backends_end - __log_backends_start;
    ee34:	4c0d      	ldr	r4, [pc, #52]	; (ee6c <z_impl_log_process+0x84>)
    ee36:	4f0e      	ldr	r7, [pc, #56]	; (ee70 <z_impl_log_process+0x88>)
    ee38:	1b3f      	subs	r7, r7, r4
    ee3a:	113f      	asrs	r7, r7, #4
    ee3c:	46a8      	mov	r8, r5
		for (int i = 0; i < log_backend_count_get(); i++) {
    ee3e:	45b8      	cmp	r8, r7
    ee40:	dade      	bge.n	ee00 <z_impl_log_process+0x18>
	return backend->cb->active;
    ee42:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    ee44:	795b      	ldrb	r3, [r3, #5]
    ee46:	b123      	cbz	r3, ee52 <z_impl_log_process+0x6a>
	backend->api->process(backend, msg);
    ee48:	6823      	ldr	r3, [r4, #0]
    ee4a:	4631      	mov	r1, r6
    ee4c:	681b      	ldr	r3, [r3, #0]
    ee4e:	4620      	mov	r0, r4
    ee50:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    ee52:	f108 0801 	add.w	r8, r8, #1
    ee56:	3410      	adds	r4, #16
    ee58:	e7f1      	b.n	ee3e <z_impl_log_process+0x56>
}
    ee5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ee5e:	bf00      	nop
    ee60:	200032c1 	.word	0x200032c1
    ee64:	20001d48 	.word	0x20001d48
    ee68:	20001d44 	.word	0x20001d44
    ee6c:	0003250c 	.word	0x0003250c
    ee70:	0003252c 	.word	0x0003252c

0000ee74 <log_process_thread_func>:
{
    ee74:	b510      	push	{r4, lr}
	log_init();
    ee76:	f7ff fef7 	bl	ec68 <log_init>
	return z_impl_z_current_get();
    ee7a:	f01c f907 	bl	2b08c <z_impl_z_current_get>
	proc_tid = process_tid;
    ee7e:	4b0c      	ldr	r3, [pc, #48]	; (eeb0 <log_process_thread_func+0x3c>)
    ee80:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    ee82:	b130      	cbz	r0, ee92 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    ee84:	4b0b      	ldr	r3, [pc, #44]	; (eeb4 <log_process_thread_func+0x40>)
	    process_tid &&
    ee86:	681b      	ldr	r3, [r3, #0]
    ee88:	2b09      	cmp	r3, #9
    ee8a:	dd02      	ble.n	ee92 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    ee8c:	480a      	ldr	r0, [pc, #40]	; (eeb8 <log_process_thread_func+0x44>)
    ee8e:	f01b fbfd 	bl	2a68c <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    ee92:	4c09      	ldr	r4, [pc, #36]	; (eeb8 <log_process_thread_func+0x44>)
		union { uintptr_t x; bool val; } parm0 = { .val = bypass };
		return (bool) arch_syscall_invoke1(parm0.x, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    ee94:	2000      	movs	r0, #0
    ee96:	f7ff ffa7 	bl	ede8 <z_impl_log_process>
		if (log_process(false) == false) {
    ee9a:	2800      	cmp	r0, #0
    ee9c:	d1fa      	bne.n	ee94 <log_process_thread_func+0x20>
    ee9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    eea2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    eea6:	4620      	mov	r0, r4
    eea8:	f01b fc16 	bl	2a6d8 <z_impl_k_sem_take>
    eeac:	e7f2      	b.n	ee94 <log_process_thread_func+0x20>
    eeae:	bf00      	nop
    eeb0:	20001d90 	.word	0x20001d90
    eeb4:	20001d44 	.word	0x20001d44
    eeb8:	20000bf4 	.word	0x20000bf4

0000eebc <z_log_msg_post_finalize>:
{
    eebc:	b513      	push	{r0, r1, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    eebe:	4b1d      	ldr	r3, [pc, #116]	; (ef34 <z_log_msg_post_finalize+0x78>)
    eec0:	f3bf 8f5b 	dmb	ish
    eec4:	e853 2f00 	ldrex	r2, [r3]
    eec8:	1c51      	adds	r1, r2, #1
    eeca:	e843 1000 	strex	r0, r1, [r3]
    eece:	2800      	cmp	r0, #0
    eed0:	d1f8      	bne.n	eec4 <z_log_msg_post_finalize+0x8>
    eed2:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    eed6:	4b18      	ldr	r3, [pc, #96]	; (ef38 <z_log_msg_post_finalize+0x7c>)
    eed8:	781b      	ldrb	r3, [r3, #0]
    eeda:	b183      	cbz	r3, eefe <z_log_msg_post_finalize+0x42>
    eedc:	f04f 0320 	mov.w	r3, #32
    eee0:	f3ef 8411 	mrs	r4, BASEPRI
    eee4:	f383 8812 	msr	BASEPRI_MAX, r3
    eee8:	f3bf 8f6f 	isb	sy
    eeec:	2000      	movs	r0, #0
    eeee:	f7ff ff7b 	bl	ede8 <z_impl_log_process>
	__asm__ volatile(
    eef2:	f384 8811 	msr	BASEPRI, r4
    eef6:	f3bf 8f6f 	isb	sy
}
    eefa:	b002      	add	sp, #8
    eefc:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL && cnt == 0) {
    eefe:	4b0f      	ldr	r3, [pc, #60]	; (ef3c <z_log_msg_post_finalize+0x80>)
    ef00:	681b      	ldr	r3, [r3, #0]
    ef02:	2b00      	cmp	r3, #0
    ef04:	d0f9      	beq.n	eefa <z_log_msg_post_finalize+0x3e>
    ef06:	b952      	cbnz	r2, ef1e <z_log_msg_post_finalize+0x62>
	z_impl_k_timer_start(timer, duration, period);
    ef08:	2200      	movs	r2, #0
    ef0a:	2300      	movs	r3, #0
    ef0c:	e9cd 2300 	strd	r2, r3, [sp]
    ef10:	480b      	ldr	r0, [pc, #44]	; (ef40 <z_log_msg_post_finalize+0x84>)
    ef12:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    ef16:	2300      	movs	r3, #0
    ef18:	f01c faca 	bl	2b4b0 <z_impl_k_timer_start>
    ef1c:	e7ed      	b.n	eefa <z_log_msg_post_finalize+0x3e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    ef1e:	2a0a      	cmp	r2, #10
    ef20:	d1eb      	bne.n	eefa <z_log_msg_post_finalize+0x3e>
	z_impl_k_timer_stop(timer);
    ef22:	4807      	ldr	r0, [pc, #28]	; (ef40 <z_log_msg_post_finalize+0x84>)
    ef24:	f022 fecb 	bl	31cbe <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    ef28:	4806      	ldr	r0, [pc, #24]	; (ef44 <z_log_msg_post_finalize+0x88>)
}
    ef2a:	b002      	add	sp, #8
    ef2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef30:	f01b bbac 	b.w	2a68c <z_impl_k_sem_give>
    ef34:	20001d44 	.word	0x20001d44
    ef38:	200032c2 	.word	0x200032c2
    ef3c:	20001d90 	.word	0x20001d90
    ef40:	200011d0 	.word	0x200011d0
    ef44:	20000bf4 	.word	0x20000bf4

0000ef48 <z_log_msg2_commit>:
	msg->hdr.timestamp = timestamp_func();
    ef48:	4b06      	ldr	r3, [pc, #24]	; (ef64 <z_log_msg2_commit+0x1c>)
{
    ef4a:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    ef4c:	681b      	ldr	r3, [r3, #0]
{
    ef4e:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    ef50:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    ef52:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    ef54:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    ef56:	4804      	ldr	r0, [pc, #16]	; (ef68 <z_log_msg2_commit+0x20>)
    ef58:	f01d f98e 	bl	2c278 <mpsc_pbuf_commit>
}
    ef5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    ef60:	f7ff bfac 	b.w	eebc <z_log_msg_post_finalize>
    ef64:	20000274 	.word	0x20000274
    ef68:	20001d50 	.word	0x20001d50

0000ef6c <z_impl_log_panic>:
{
    ef6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    ef6e:	4f0e      	ldr	r7, [pc, #56]	; (efa8 <z_impl_log_panic+0x3c>)
    ef70:	783d      	ldrb	r5, [r7, #0]
    ef72:	b975      	cbnz	r5, ef92 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    ef74:	4c0d      	ldr	r4, [pc, #52]	; (efac <z_impl_log_panic+0x40>)
    ef76:	4e0e      	ldr	r6, [pc, #56]	; (efb0 <z_impl_log_panic+0x44>)
	log_init();
    ef78:	f7ff fe76 	bl	ec68 <log_init>
    ef7c:	1b36      	subs	r6, r6, r4
    ef7e:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    ef80:	42b5      	cmp	r5, r6
    ef82:	db07      	blt.n	ef94 <z_impl_log_panic+0x28>
    ef84:	2000      	movs	r0, #0
    ef86:	f7ff ff2f 	bl	ede8 <z_impl_log_process>
		while (log_process(false) == true) {
    ef8a:	2800      	cmp	r0, #0
    ef8c:	d1fa      	bne.n	ef84 <z_impl_log_panic+0x18>
	panic_mode = true;
    ef8e:	2301      	movs	r3, #1
    ef90:	703b      	strb	r3, [r7, #0]
}
    ef92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    ef94:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    ef96:	795b      	ldrb	r3, [r3, #5]
    ef98:	b11b      	cbz	r3, efa2 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    ef9a:	6823      	ldr	r3, [r4, #0]
    ef9c:	4620      	mov	r0, r4
    ef9e:	695b      	ldr	r3, [r3, #20]
    efa0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    efa2:	3501      	adds	r5, #1
    efa4:	3410      	adds	r4, #16
    efa6:	e7eb      	b.n	ef80 <z_impl_log_panic+0x14>
    efa8:	200032c2 	.word	0x200032c2
    efac:	0003250c 	.word	0x0003250c
    efb0:	0003252c 	.word	0x0003252c

0000efb4 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    efb4:	4a04      	ldr	r2, [pc, #16]	; (efc8 <log_source_name_get+0x14>)
    efb6:	4b05      	ldr	r3, [pc, #20]	; (efcc <log_source_name_get+0x18>)
    efb8:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    efba:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    efbe:	bf34      	ite	cc
    efc0:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    efc4:	2000      	movcs	r0, #0
}
    efc6:	4770      	bx	lr
    efc8:	0003235c 	.word	0x0003235c
    efcc:	0003250c 	.word	0x0003250c

0000efd0 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    efd0:	4a05      	ldr	r2, [pc, #20]	; (efe8 <log_backend_enable+0x18>)
	backend->cb->id = id;
    efd2:	6843      	ldr	r3, [r0, #4]
    efd4:	1a80      	subs	r0, r0, r2
    efd6:	1100      	asrs	r0, r0, #4
    efd8:	3001      	adds	r0, #1
	backend->cb->active = true;
    efda:	2201      	movs	r2, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
	}

	log_backend_id_set(backend, id);
    efdc:	7118      	strb	r0, [r3, #4]
	backend->cb->ctx = ctx;
    efde:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    efe0:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    efe2:	f7ff be6d 	b.w	ecc0 <z_log_notify_backend_enabled>
    efe6:	bf00      	nop
    efe8:	0003250c 	.word	0x0003250c

0000efec <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    efec:	b40e      	push	{r1, r2, r3}
    efee:	b503      	push	{r0, r1, lr}
    eff0:	ab03      	add	r3, sp, #12
    eff2:	4601      	mov	r1, r0
    eff4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    eff8:	4804      	ldr	r0, [pc, #16]	; (f00c <print_formatted+0x20>)
	va_start(args, fmt);
    effa:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    effc:	f7ff fa38 	bl	e470 <cbvprintf>
	va_end(args);

	return length;
}
    f000:	b002      	add	sp, #8
    f002:	f85d eb04 	ldr.w	lr, [sp], #4
    f006:	b003      	add	sp, #12
    f008:	4770      	bx	lr
    f00a:	bf00      	nop
    f00c:	0002c441 	.word	0x0002c441

0000f010 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    f010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f014:	461d      	mov	r5, r3
    f016:	9b08      	ldr	r3, [sp, #32]
    f018:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f01a:	06da      	lsls	r2, r3, #27
{
    f01c:	4604      	mov	r4, r0
    f01e:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f020:	d405      	bmi.n	f02e <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    f022:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    f024:	bf4c      	ite	mi
    f026:	492a      	ldrmi	r1, [pc, #168]	; (f0d0 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    f028:	492a      	ldrpl	r1, [pc, #168]	; (f0d4 <hexdump_line_print+0xc4>)
    f02a:	f7ff ffdf 	bl	efec <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
    f02e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; f0d8 <hexdump_line_print+0xc8>
{
    f032:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    f036:	45a8      	cmp	r8, r5
    f038:	db2a      	blt.n	f090 <hexdump_line_print+0x80>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    f03a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; f0dc <hexdump_line_print+0xcc>
			print_formatted(output, "%02x ", data[i]);
    f03e:	f8df 90a0 	ldr.w	r9, [pc, #160]	; f0e0 <hexdump_line_print+0xd0>
			print_formatted(output, " ");
    f042:	f8df a094 	ldr.w	sl, [pc, #148]	; f0d8 <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f046:	2500      	movs	r5, #0
		if (i < length) {
    f048:	42bd      	cmp	r5, r7
    f04a:	d22f      	bcs.n	f0ac <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    f04c:	5d72      	ldrb	r2, [r6, r5]
    f04e:	4649      	mov	r1, r9
    f050:	4620      	mov	r0, r4
    f052:	f7ff ffcb 	bl	efec <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f056:	3501      	adds	r5, #1
    f058:	2d10      	cmp	r5, #16
    f05a:	d120      	bne.n	f09e <hexdump_line_print+0x8e>
		}
	}

	print_formatted(output, "|");
    f05c:	4921      	ldr	r1, [pc, #132]	; (f0e4 <hexdump_line_print+0xd4>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    f05e:	f8df 8078 	ldr.w	r8, [pc, #120]	; f0d8 <hexdump_line_print+0xc8>
			print_formatted(output, "%c",
    f062:	f8df 9084 	ldr.w	r9, [pc, #132]	; f0e8 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    f066:	4620      	mov	r0, r4
    f068:	f7ff ffc0 	bl	efec <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f06c:	2500      	movs	r5, #0
		if (i < length) {
    f06e:	42af      	cmp	r7, r5
    f070:	d928      	bls.n	f0c4 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    f072:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    f074:	f1a2 0320 	sub.w	r3, r2, #32
    f078:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
    f07a:	bf28      	it	cs
    f07c:	222e      	movcs	r2, #46	; 0x2e
    f07e:	4649      	mov	r1, r9
    f080:	4620      	mov	r0, r4
    f082:	f7ff ffb3 	bl	efec <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f086:	3501      	adds	r5, #1
    f088:	2d10      	cmp	r5, #16
    f08a:	d114      	bne.n	f0b6 <hexdump_line_print+0xa6>
		}
	}
}
    f08c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    f090:	4649      	mov	r1, r9
    f092:	4620      	mov	r0, r4
    f094:	f7ff ffaa 	bl	efec <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    f098:	f108 0801 	add.w	r8, r8, #1
    f09c:	e7cb      	b.n	f036 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    f09e:	076a      	lsls	r2, r5, #29
    f0a0:	d1d2      	bne.n	f048 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    f0a2:	4651      	mov	r1, sl
    f0a4:	4620      	mov	r0, r4
    f0a6:	f7ff ffa1 	bl	efec <print_formatted>
    f0aa:	e7cd      	b.n	f048 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    f0ac:	4641      	mov	r1, r8
    f0ae:	4620      	mov	r0, r4
    f0b0:	f7ff ff9c 	bl	efec <print_formatted>
    f0b4:	e7cf      	b.n	f056 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    f0b6:	076b      	lsls	r3, r5, #29
    f0b8:	d1d9      	bne.n	f06e <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    f0ba:	4641      	mov	r1, r8
    f0bc:	4620      	mov	r0, r4
    f0be:	f7ff ff95 	bl	efec <print_formatted>
    f0c2:	e7d4      	b.n	f06e <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    f0c4:	4641      	mov	r1, r8
    f0c6:	4620      	mov	r0, r4
    f0c8:	f7ff ff90 	bl	efec <print_formatted>
    f0cc:	e7db      	b.n	f086 <hexdump_line_print+0x76>
    f0ce:	bf00      	nop
    f0d0:	00034347 	.word	0x00034347
    f0d4:	00034346 	.word	0x00034346
    f0d8:	00034351 	.word	0x00034351
    f0dc:	0003434f 	.word	0x0003434f
    f0e0:	00034349 	.word	0x00034349
    f0e4:	00034353 	.word	0x00034353
    f0e8:	00034355 	.word	0x00034355

0000f0ec <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    f0ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f0f0:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    f0f2:	f001 0301 	and.w	r3, r1, #1
{
    f0f6:	9201      	str	r2, [sp, #4]
    f0f8:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
    f0fc:	f9bd a038 	ldrsh.w	sl, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    f100:	9300      	str	r3, [sp, #0]
{
    f102:	4607      	mov	r7, r0
    f104:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    f106:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    f10a:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    f10e:	f01d f97b 	bl	2c408 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    f112:	4602      	mov	r2, r0
    f114:	2800      	cmp	r0, #0
    f116:	d044      	beq.n	f1a2 <prefix_print+0xb6>
		length += print_formatted(output, "%s ", tag);
    f118:	4932      	ldr	r1, [pc, #200]	; (f1e4 <prefix_print+0xf8>)
    f11a:	4638      	mov	r0, r7
    f11c:	f7ff ff66 	bl	efec <print_formatted>
    f120:	4605      	mov	r5, r0
	}

	if (stamp) {
    f122:	f1bb 0f00 	cmp.w	fp, #0
    f126:	d008      	beq.n	f13a <prefix_print+0x4e>
	if (!format) {
    f128:	f018 0f44 	tst.w	r8, #68	; 0x44
    f12c:	d13b      	bne.n	f1a6 <prefix_print+0xba>
		length = print_formatted(output, "[%08lu] ", timestamp);
    f12e:	492e      	ldr	r1, [pc, #184]	; (f1e8 <prefix_print+0xfc>)
    f130:	4622      	mov	r2, r4
    f132:	4638      	mov	r0, r7
    f134:	f7ff ff5a 	bl	efec <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    f138:	4405      	add	r5, r0
	if (color) {
    f13a:	9b00      	ldr	r3, [sp, #0]
    f13c:	b153      	cbz	r3, f154 <prefix_print+0x68>
		const char *log_color = start && (colors[level] != NULL) ?
    f13e:	4b2b      	ldr	r3, [pc, #172]	; (f1ec <prefix_print+0x100>)
		print_formatted(output, "%s", log_color);
    f140:	492b      	ldr	r1, [pc, #172]	; (f1f0 <prefix_print+0x104>)
		const char *log_color = start && (colors[level] != NULL) ?
    f142:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    f146:	4b2b      	ldr	r3, [pc, #172]	; (f1f4 <prefix_print+0x108>)
    f148:	4638      	mov	r0, r7
    f14a:	2a00      	cmp	r2, #0
    f14c:	bf08      	it	eq
    f14e:	461a      	moveq	r2, r3
    f150:	f7ff ff4c 	bl	efec <print_formatted>
	if (level_on) {
    f154:	b13e      	cbz	r6, f166 <prefix_print+0x7a>
		total += print_formatted(output, "<%s> ", severity[level]);
    f156:	4b28      	ldr	r3, [pc, #160]	; (f1f8 <prefix_print+0x10c>)
    f158:	4928      	ldr	r1, [pc, #160]	; (f1fc <prefix_print+0x110>)
    f15a:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    f15e:	4638      	mov	r0, r7
    f160:	f7ff ff44 	bl	efec <print_formatted>
    f164:	4606      	mov	r6, r0
	if (source_id >= 0) {
    f166:	f1ba 0f00 	cmp.w	sl, #0
    f16a:	db16      	blt.n	f19a <prefix_print+0xae>
		total += print_formatted(output,
    f16c:	9b01      	ldr	r3, [sp, #4]
    f16e:	2b00      	cmp	r3, #0
    f170:	d036      	beq.n	f1e0 <prefix_print+0xf4>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    f172:	2301      	movs	r3, #1
    f174:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
    f178:	4b21      	ldr	r3, [pc, #132]	; (f200 <prefix_print+0x114>)
    f17a:	4c22      	ldr	r4, [pc, #136]	; (f204 <prefix_print+0x118>)
    f17c:	f019 0f10 	tst.w	r9, #16
    f180:	bf18      	it	ne
    f182:	461c      	movne	r4, r3
    f184:	4651      	mov	r1, sl
    f186:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
    f18a:	f7ff ff13 	bl	efb4 <log_source_name_get>
    f18e:	4621      	mov	r1, r4
    f190:	4602      	mov	r2, r0
    f192:	4638      	mov	r0, r7
    f194:	f7ff ff2a 	bl	efec <print_formatted>
    f198:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    f19a:	1970      	adds	r0, r6, r5
    f19c:	b003      	add	sp, #12
    f19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    f1a2:	4605      	mov	r5, r0
    f1a4:	e7bd      	b.n	f122 <prefix_print+0x36>
	} else if (freq != 0U) {
    f1a6:	4b18      	ldr	r3, [pc, #96]	; (f208 <prefix_print+0x11c>)
    f1a8:	6818      	ldr	r0, [r3, #0]
    f1aa:	2800      	cmp	r0, #0
    f1ac:	d0c4      	beq.n	f138 <prefix_print+0x4c>
		timestamp /= timestamp_div;
    f1ae:	4b17      	ldr	r3, [pc, #92]	; (f20c <prefix_print+0x120>)
		ms = (remainder * 1000U) / freq;
    f1b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
		timestamp /= timestamp_div;
    f1b4:	681b      	ldr	r3, [r3, #0]
    f1b6:	fbb4 f4f3 	udiv	r4, r4, r3
		remainder = timestamp % freq;
    f1ba:	fbb4 f2f0 	udiv	r2, r4, r0
    f1be:	fb00 4412 	mls	r4, r0, r2, r4
		ms = (remainder * 1000U) / freq;
    f1c2:	434c      	muls	r4, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f1c4:	fbb4 f3f0 	udiv	r3, r4, r0
    f1c8:	fb00 4413 	mls	r4, r0, r3, r4
    f1cc:	434c      	muls	r4, r1
    f1ce:	fbb4 f4f0 	udiv	r4, r4, r0
				length = print_formatted(output,
    f1d2:	4638      	mov	r0, r7
    f1d4:	fb01 4303 	mla	r3, r1, r3, r4
    f1d8:	490d      	ldr	r1, [pc, #52]	; (f210 <prefix_print+0x124>)
    f1da:	f7ff ff07 	bl	efec <print_formatted>
    f1de:	e7ab      	b.n	f138 <prefix_print+0x4c>
		total += print_formatted(output,
    f1e0:	4c08      	ldr	r4, [pc, #32]	; (f204 <prefix_print+0x118>)
    f1e2:	e7cf      	b.n	f184 <prefix_print+0x98>
    f1e4:	00034366 	.word	0x00034366
    f1e8:	0003436a 	.word	0x0003436a
    f1ec:	000327c4 	.word	0x000327c4
    f1f0:	00035362 	.word	0x00035362
    f1f4:	00034358 	.word	0x00034358
    f1f8:	000327d8 	.word	0x000327d8
    f1fc:	00034380 	.word	0x00034380
    f200:	00034362 	.word	0x00034362
    f204:	0003435d 	.word	0x0003435d
    f208:	20001d94 	.word	0x20001d94
    f20c:	20001d98 	.word	0x20001d98
    f210:	00034373 	.word	0x00034373

0000f214 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    f214:	b538      	push	{r3, r4, r5, lr}
    f216:	460c      	mov	r4, r1
	if (color) {
    f218:	07e1      	lsls	r1, r4, #31
{
    f21a:	4605      	mov	r5, r0
	if (color) {
    f21c:	d503      	bpl.n	f226 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    f21e:	4a08      	ldr	r2, [pc, #32]	; (f240 <postfix_print+0x2c>)
    f220:	4908      	ldr	r1, [pc, #32]	; (f244 <postfix_print+0x30>)
    f222:	f7ff fee3 	bl	efec <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f226:	06e2      	lsls	r2, r4, #27
    f228:	d408      	bmi.n	f23c <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    f22a:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    f22c:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    f22e:	bf4c      	ite	mi
    f230:	4905      	ldrmi	r1, [pc, #20]	; (f248 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    f232:	4906      	ldrpl	r1, [pc, #24]	; (f24c <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    f234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    f238:	f7ff bed8 	b.w	efec <print_formatted>
}
    f23c:	bd38      	pop	{r3, r4, r5, pc}
    f23e:	bf00      	nop
    f240:	00034358 	.word	0x00034358
    f244:	00035362 	.word	0x00035362
    f248:	00034347 	.word	0x00034347
    f24c:	00034346 	.word	0x00034346

0000f250 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    f250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    f254:	880b      	ldrh	r3, [r1, #0]
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    f256:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
{
    f25a:	4606      	mov	r6, r0
    f25c:	460c      	mov	r4, r1
    f25e:	4690      	mov	r8, r2
    f260:	f3c3 1982 	ubfx	r9, r3, #6, #3
	if (!raw_string) {
    f264:	d04d      	beq.n	f302 <log_output_msg2_process+0xb2>
	return msg->hdr.desc.domain;
    f266:	780a      	ldrb	r2, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
	return msg->hdr.source;
    f268:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
    f26a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    f26e:	2b00      	cmp	r3, #0
    f270:	d044      	beq.n	f2fc <log_output_msg2_process+0xac>
    f272:	4925      	ldr	r1, [pc, #148]	; (f308 <log_output_msg2_process+0xb8>)
    f274:	1a5b      	subs	r3, r3, r1
    f276:	f343 03cf 	sbfx	r3, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    f27a:	e9cd 2301 	strd	r2, r3, [sp, #4]
    f27e:	f8cd 9000 	str.w	r9, [sp]
    f282:	68a3      	ldr	r3, [r4, #8]
    f284:	2200      	movs	r2, #0
    f286:	4641      	mov	r1, r8
    f288:	4630      	mov	r0, r6
    f28a:	f7ff ff2f 	bl	f0ec <prefix_print>
    f28e:	4682      	mov	sl, r0
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
    f290:	4625      	mov	r5, r4
	*len = msg->hdr.desc.package_len;
    f292:	f855 3b0c 	ldr.w	r3, [r5], #12
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    f296:	f3c3 2349 	ubfx	r3, r3, #9, #10
    f29a:	b153      	cbz	r3, f2b2 <log_output_msg2_process+0x62>
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    f29c:	4f1b      	ldr	r7, [pc, #108]	; (f30c <log_output_msg2_process+0xbc>)
    f29e:	481c      	ldr	r0, [pc, #112]	; (f310 <log_output_msg2_process+0xc0>)
    f2a0:	491c      	ldr	r1, [pc, #112]	; (f314 <log_output_msg2_process+0xc4>)
    f2a2:	462b      	mov	r3, r5
    f2a4:	4632      	mov	r2, r6
    f2a6:	f1b9 0f00 	cmp.w	r9, #0
    f2aa:	bf08      	it	eq
    f2ac:	4638      	moveq	r0, r7
    f2ae:	f01c fa94 	bl	2b7da <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
    f2b2:	8867      	ldrh	r7, [r4, #2]
    f2b4:	f3c7 07cb 	ubfx	r7, r7, #3, #12
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    f2b8:	b197      	cbz	r7, f2e0 <log_output_msg2_process+0x90>
	return msg->data + msg->hdr.desc.package_len;
    f2ba:	6823      	ldr	r3, [r4, #0]
    f2bc:	f3c3 2349 	ubfx	r3, r3, #9, #10
    f2c0:	441d      	add	r5, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    f2c2:	2f10      	cmp	r7, #16
    f2c4:	463c      	mov	r4, r7
    f2c6:	bf28      	it	cs
    f2c8:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    f2ca:	4629      	mov	r1, r5
    f2cc:	f8cd 8000 	str.w	r8, [sp]
    f2d0:	4653      	mov	r3, sl
    f2d2:	4622      	mov	r2, r4
    f2d4:	4630      	mov	r0, r6
    f2d6:	f7ff fe9b 	bl	f010 <hexdump_line_print>
	} while (len);
    f2da:	1b3f      	subs	r7, r7, r4
		data += length;
    f2dc:	4425      	add	r5, r4
	} while (len);
    f2de:	d1f0      	bne.n	f2c2 <log_output_msg2_process+0x72>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    f2e0:	f1b9 0f00 	cmp.w	r9, #0
    f2e4:	d004      	beq.n	f2f0 <log_output_msg2_process+0xa0>
		postfix_print(output, flags, level);
    f2e6:	464a      	mov	r2, r9
    f2e8:	4641      	mov	r1, r8
    f2ea:	4630      	mov	r0, r6
    f2ec:	f7ff ff92 	bl	f214 <postfix_print>
	}

	log_output_flush(output);
    f2f0:	4630      	mov	r0, r6
}
    f2f2:	b004      	add	sp, #16
    f2f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    f2f8:	f01d b895 	b.w	2c426 <log_output_flush>
		int16_t source_id = source ?
    f2fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f300:	e7bb      	b.n	f27a <log_output_msg2_process+0x2a>
		prefix_offset = 0;
    f302:	46ca      	mov	sl, r9
    f304:	e7c4      	b.n	f290 <log_output_msg2_process+0x40>
    f306:	bf00      	nop
    f308:	0003235c 	.word	0x0003235c
    f30c:	0002c477 	.word	0x0002c477
    f310:	0002c441 	.word	0x0002c441
    f314:	0000e471 	.word	0x0000e471

0000f318 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    f318:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    f31a:	f242 730f 	movw	r3, #9999	; 0x270f
    f31e:	428b      	cmp	r3, r1
    f320:	bf28      	it	cs
    f322:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    f324:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    f326:	4a0f      	ldr	r2, [pc, #60]	; (f364 <log_output_dropped_process+0x4c>)
{
    f328:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    f32a:	2105      	movs	r1, #5
    f32c:	4668      	mov	r0, sp
    f32e:	f01c fb41 	bl	2b9b4 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    f332:	6863      	ldr	r3, [r4, #4]
    f334:	490c      	ldr	r1, [pc, #48]	; (f368 <log_output_dropped_process+0x50>)
    f336:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    f338:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    f33a:	220b      	movs	r2, #11
    f33c:	4628      	mov	r0, r5
    f33e:	f01d f865 	bl	2c40c <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    f342:	6863      	ldr	r3, [r4, #4]
    f344:	4632      	mov	r2, r6
    f346:	4669      	mov	r1, sp
    f348:	4628      	mov	r0, r5
    f34a:	685b      	ldr	r3, [r3, #4]
    f34c:	f01d f85e 	bl	2c40c <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    f350:	6863      	ldr	r3, [r4, #4]
    f352:	4906      	ldr	r1, [pc, #24]	; (f36c <log_output_dropped_process+0x54>)
    f354:	685b      	ldr	r3, [r3, #4]
    f356:	221b      	movs	r2, #27
    f358:	4628      	mov	r0, r5
    f35a:	f01d f857 	bl	2c40c <buffer_write>
		     output->control_block->ctx);
}
    f35e:	b002      	add	sp, #8
    f360:	bd70      	pop	{r4, r5, r6, pc}
    f362:	bf00      	nop
    f364:	00034fa5 	.word	0x00034fa5
    f368:	000343c2 	.word	0x000343c2
    f36c:	000343a6 	.word	0x000343a6

0000f370 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    f370:	4a08      	ldr	r2, [pc, #32]	; (f394 <log_output_timestamp_freq_set+0x24>)
{
    f372:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    f374:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    f376:	4c08      	ldr	r4, [pc, #32]	; (f398 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    f378:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    f37a:	2100      	movs	r1, #0
    f37c:	42a0      	cmp	r0, r4
    f37e:	d804      	bhi.n	f38a <log_output_timestamp_freq_set+0x1a>
    f380:	b101      	cbz	r1, f384 <log_output_timestamp_freq_set+0x14>
    f382:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    f384:	4b05      	ldr	r3, [pc, #20]	; (f39c <log_output_timestamp_freq_set+0x2c>)
    f386:	6018      	str	r0, [r3, #0]
}
    f388:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    f38a:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    f38c:	005b      	lsls	r3, r3, #1
    f38e:	2101      	movs	r1, #1
    f390:	e7f4      	b.n	f37c <log_output_timestamp_freq_set+0xc>
    f392:	bf00      	nop
    f394:	20001d98 	.word	0x20001d98
    f398:	000f4240 	.word	0x000f4240
    f39c:	20001d94 	.word	0x20001d94

0000f3a0 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    f3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
    f3a2:	4f07      	ldr	r7, [pc, #28]	; (f3c0 <char_out+0x20>)
{
    f3a4:	460d      	mov	r5, r1
    f3a6:	4604      	mov	r4, r0
    f3a8:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    f3aa:	42b4      	cmp	r4, r6
    f3ac:	d101      	bne.n	f3b2 <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    f3ae:	4628      	mov	r0, r5
    f3b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    f3b2:	6838      	ldr	r0, [r7, #0]
    f3b4:	f814 1b01 	ldrb.w	r1, [r4], #1
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    f3b8:	6883      	ldr	r3, [r0, #8]
    f3ba:	685b      	ldr	r3, [r3, #4]
    f3bc:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    f3be:	e7f4      	b.n	f3aa <char_out+0xa>
    f3c0:	20001db4 	.word	0x20001db4

0000f3c4 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    f3c4:	4b01      	ldr	r3, [pc, #4]	; (f3cc <format_set+0x8>)
	return 0;
}
    f3c6:	2000      	movs	r0, #0
	log_format_current = log_type;
    f3c8:	6019      	str	r1, [r3, #0]
}
    f3ca:	4770      	bx	lr
    f3cc:	20001da4 	.word	0x20001da4

0000f3d0 <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    f3d0:	4b01      	ldr	r3, [pc, #4]	; (f3d8 <log_backend_uart_init+0x8>)
    f3d2:	4a02      	ldr	r2, [pc, #8]	; (f3dc <log_backend_uart_init+0xc>)
    f3d4:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    f3d6:	4770      	bx	lr
    f3d8:	20001db4 	.word	0x20001db4
    f3dc:	000320bc 	.word	0x000320bc

0000f3e0 <panic>:

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
    f3e0:	4b02      	ldr	r3, [pc, #8]	; (f3ec <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    f3e2:	4803      	ldr	r0, [pc, #12]	; (f3f0 <panic+0x10>)
    f3e4:	2201      	movs	r2, #1
    f3e6:	701a      	strb	r2, [r3, #0]
    f3e8:	f01d b81d 	b.w	2c426 <log_output_flush>
    f3ec:	200032c3 	.word	0x200032c3
    f3f0:	0003280c 	.word	0x0003280c

0000f3f4 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    f3f4:	4801      	ldr	r0, [pc, #4]	; (f3fc <dropped+0x8>)
    f3f6:	f7ff bf8f 	b.w	f318 <log_output_dropped_process>
    f3fa:	bf00      	nop
    f3fc:	0003280c 	.word	0x0003280c

0000f400 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    f400:	4b06      	ldr	r3, [pc, #24]	; (f41c <process+0x1c>)
{
    f402:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    f404:	6818      	ldr	r0, [r3, #0]
{
    f406:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    f408:	f7ff fc28 	bl	ec5c <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    f40c:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    f40e:	4603      	mov	r3, r0
}
    f410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
    f414:	4802      	ldr	r0, [pc, #8]	; (f420 <process+0x20>)
    f416:	220f      	movs	r2, #15
    f418:	4718      	bx	r3
    f41a:	bf00      	nop
    f41c:	20001da4 	.word	0x20001da4
    f420:	0003280c 	.word	0x0003280c

0000f424 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    f424:	4b01      	ldr	r3, [pc, #4]	; (f42c <log_backend_rtt_init+0x8>)
    f426:	2201      	movs	r2, #1
    f428:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    f42a:	4770      	bx	lr
    f42c:	200032d5 	.word	0x200032d5

0000f430 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    f430:	4b01      	ldr	r3, [pc, #4]	; (f438 <format_set+0x8>)
	return 0;
}
    f432:	2000      	movs	r0, #0
	log_format_current = log_type;
    f434:	6019      	str	r1, [r3, #0]
}
    f436:	4770      	bx	lr
    f438:	20001dc0 	.word	0x20001dc0

0000f43c <panic>:
	panic_mode = true;
    f43c:	4b02      	ldr	r3, [pc, #8]	; (f448 <panic+0xc>)
	log_output_flush(output);
    f43e:	4803      	ldr	r0, [pc, #12]	; (f44c <panic+0x10>)
    f440:	2201      	movs	r2, #1
    f442:	701a      	strb	r2, [r3, #0]
    f444:	f01c bfef 	b.w	2c426 <log_output_flush>
    f448:	200032d6 	.word	0x200032d6
    f44c:	0003283c 	.word	0x0003283c

0000f450 <dropped>:
	log_output_dropped_process(output, cnt);
    f450:	4801      	ldr	r0, [pc, #4]	; (f458 <dropped+0x8>)
    f452:	f7ff bf61 	b.w	f318 <log_output_dropped_process>
    f456:	bf00      	nop
    f458:	0003283c 	.word	0x0003283c

0000f45c <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    f45c:	4b06      	ldr	r3, [pc, #24]	; (f478 <process+0x1c>)
{
    f45e:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    f460:	6818      	ldr	r0, [r3, #0]
{
    f462:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    f464:	f7ff fbfa 	bl	ec5c <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    f468:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    f46a:	4603      	mov	r3, r0
}
    f46c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    f470:	4802      	ldr	r0, [pc, #8]	; (f47c <process+0x20>)
    f472:	220f      	movs	r2, #15
    f474:	4718      	bx	r3
    f476:	bf00      	nop
    f478:	20001dc0 	.word	0x20001dc0
    f47c:	0003283c 	.word	0x0003283c

0000f480 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    f480:	4b05      	ldr	r3, [pc, #20]	; (f498 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    f482:	781b      	ldrb	r3, [r3, #0]
    f484:	b11b      	cbz	r3, f48e <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    f486:	f241 3088 	movw	r0, #5000	; 0x1388
    f48a:	f022 bbdd 	b.w	31c48 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    f48e:	20a4      	movs	r0, #164	; 0xa4
    f490:	2100      	movs	r1, #0
    f492:	f01b bde1 	b.w	2b058 <z_impl_k_sleep>
    f496:	bf00      	nop
    f498:	200032d6 	.word	0x200032d6

0000f49c <data_out_block_mode>:
{
    f49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    f4a0:	f8df 908c 	ldr.w	r9, [pc, #140]	; f530 <data_out_block_mode+0x94>
	return z_impl_k_mutex_lock(mutex, timeout);
    f4a4:	f8df a08c 	ldr.w	sl, [pc, #140]	; f534 <data_out_block_mode+0x98>
{
    f4a8:	4680      	mov	r8, r0
    f4aa:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    f4ac:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    f4ae:	f899 5000 	ldrb.w	r5, [r9]
    f4b2:	b9cd      	cbnz	r5, f4e8 <data_out_block_mode+0x4c>
    f4b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f4b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f4bc:	4650      	mov	r0, sl
    f4be:	f01a fff7 	bl	2a4b0 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    f4c2:	463a      	mov	r2, r7
    f4c4:	4641      	mov	r1, r8
    f4c6:	4628      	mov	r0, r5
    f4c8:	f01a fcb6 	bl	29e38 <SEGGER_RTT_WriteSkipNoLock>
    f4cc:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
    f4ce:	4650      	mov	r0, sl
    f4d0:	f01b f866 	bl	2a5a0 <z_impl_k_mutex_unlock>
		if (ret) {
    f4d4:	4d18      	ldr	r5, [pc, #96]	; (f538 <data_out_block_mode+0x9c>)
    f4d6:	b1fe      	cbz	r6, f518 <data_out_block_mode+0x7c>
	host_present = true;
    f4d8:	2301      	movs	r3, #1
    f4da:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    f4dc:	f899 3000 	ldrb.w	r3, [r9]
    f4e0:	b96b      	cbnz	r3, f4fe <data_out_block_mode+0x62>
}
    f4e2:	4638      	mov	r0, r7
    f4e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    f4e8:	463a      	mov	r2, r7
    f4ea:	4641      	mov	r1, r8
    f4ec:	2000      	movs	r0, #0
    f4ee:	f01a fca3 	bl	29e38 <SEGGER_RTT_WriteSkipNoLock>
    f4f2:	4606      	mov	r6, r0
    f4f4:	e7ee      	b.n	f4d4 <data_out_block_mode+0x38>
	if (retry_cnt == 0) {
    f4f6:	b95c      	cbnz	r4, f510 <data_out_block_mode+0x74>
		host_present = false;
    f4f8:	702c      	strb	r4, [r5, #0]
    f4fa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    f4fe:	2000      	movs	r0, #0
    f500:	f01a fce6 	bl	29ed0 <SEGGER_RTT_HasDataUp>
    f504:	2800      	cmp	r0, #0
    f506:	d0ec      	beq.n	f4e2 <data_out_block_mode+0x46>
    f508:	782b      	ldrb	r3, [r5, #0]
    f50a:	2b00      	cmp	r3, #0
    f50c:	d1f3      	bne.n	f4f6 <data_out_block_mode+0x5a>
    f50e:	e7e8      	b.n	f4e2 <data_out_block_mode+0x46>
			on_failed_write(retry_cnt--);
    f510:	3c01      	subs	r4, #1
    f512:	f7ff ffb5 	bl	f480 <on_failed_write.part.0>
    f516:	e7f2      	b.n	f4fe <data_out_block_mode+0x62>
		} else if (host_present) {
    f518:	782b      	ldrb	r3, [r5, #0]
    f51a:	b113      	cbz	r3, f522 <data_out_block_mode+0x86>
	if (retry_cnt == 0) {
    f51c:	3c01      	subs	r4, #1
    f51e:	d104      	bne.n	f52a <data_out_block_mode+0x8e>
		host_present = false;
    f520:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    f522:	782b      	ldrb	r3, [r5, #0]
    f524:	2b00      	cmp	r3, #0
    f526:	d1c2      	bne.n	f4ae <data_out_block_mode+0x12>
    f528:	e7db      	b.n	f4e2 <data_out_block_mode+0x46>
    f52a:	f7ff ffa9 	bl	f480 <on_failed_write.part.0>
    f52e:	e7f8      	b.n	f522 <data_out_block_mode+0x86>
    f530:	200032d6 	.word	0x200032d6
    f534:	20000bb4 	.word	0x20000bb4
    f538:	200032d5 	.word	0x200032d5

0000f53c <read_pnp_id>:

#if CONFIG_BT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
    f53c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
    f53e:	2407      	movs	r4, #7
    f540:	9402      	str	r4, [sp, #8]
    f542:	4c04      	ldr	r4, [pc, #16]	; (f554 <read_pnp_id+0x18>)
    f544:	9401      	str	r4, [sp, #4]
    f546:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    f54a:	9400      	str	r4, [sp, #0]
    f54c:	f020 fa22 	bl	2f994 <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
    f550:	b004      	add	sp, #16
    f552:	bd10      	pop	{r4, pc}
    f554:	20000b17 	.word	0x20000b17

0000f558 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
    f558:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
    f55a:	4c08      	ldr	r4, [pc, #32]	; (f57c <read_blvl+0x24>)
{
    f55c:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
    f55e:	7824      	ldrb	r4, [r4, #0]
    f560:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
    f564:	2401      	movs	r4, #1
    f566:	9402      	str	r4, [sp, #8]
    f568:	f10d 0417 	add.w	r4, sp, #23
    f56c:	9401      	str	r4, [sp, #4]
    f56e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
    f572:	9400      	str	r4, [sp, #0]
    f574:	f020 fa0e 	bl	2f994 <bt_gatt_attr_read>
				 sizeof(lvl8));
}
    f578:	b006      	add	sp, #24
    f57a:	bd10      	pop	{r4, pc}
    f57c:	20000b1e 	.word	0x20000b1e

0000f580 <blvl_ccc_cfg_changed>:
{
    f580:	b580      	push	{r7, lr}
	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
    f582:	4a0c      	ldr	r2, [pc, #48]	; (f5b4 <blvl_ccc_cfg_changed+0x34>)
    f584:	4b0c      	ldr	r3, [pc, #48]	; (f5b8 <blvl_ccc_cfg_changed+0x38>)
{
    f586:	af00      	add	r7, sp, #0
	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
    f588:	2901      	cmp	r1, #1
    f58a:	bf18      	it	ne
    f58c:	4613      	movne	r3, r2
    f58e:	b088      	sub	sp, #32
    f590:	490a      	ldr	r1, [pc, #40]	; (f5bc <blvl_ccc_cfg_changed+0x3c>)
    f592:	466a      	mov	r2, sp
    f594:	e9c2 1304 	strd	r1, r3, [r2, #16]
    f598:	2302      	movs	r3, #2
    f59a:	7613      	strb	r3, [r2, #24]
    f59c:	4b08      	ldr	r3, [pc, #32]	; (f5c0 <blvl_ccc_cfg_changed+0x40>)
    f59e:	f842 3f0c 	str.w	r3, [r2, #12]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG2_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    f5a2:	4808      	ldr	r0, [pc, #32]	; (f5c4 <blvl_ccc_cfg_changed+0x44>)
    f5a4:	2300      	movs	r3, #0
    f5a6:	f44f 51d6 	mov.w	r1, #6848	; 0x1ac0
    f5aa:	f01c ff8c 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
}
    f5ae:	46bd      	mov	sp, r7
    f5b0:	bd80      	pop	{r7, pc}
    f5b2:	bf00      	nop
    f5b4:	00034422 	.word	0x00034422
    f5b8:	0003441a 	.word	0x0003441a
    f5bc:	0003442b 	.word	0x0003442b
    f5c0:	01000003 	.word	0x01000003
    f5c4:	00032364 	.word	0x00032364

0000f5c8 <bt_bas_get_battery_level>:
}

uint8_t bt_bas_get_battery_level(void)
{
	return battery_level;
}
    f5c8:	4b01      	ldr	r3, [pc, #4]	; (f5d0 <bt_bas_get_battery_level+0x8>)
    f5ca:	7818      	ldrb	r0, [r3, #0]
    f5cc:	4770      	bx	lr
    f5ce:	bf00      	nop
    f5d0:	20000b1e 	.word	0x20000b1e

0000f5d4 <bt_bas_set_battery_level>:

int bt_bas_set_battery_level(uint8_t level)
{
    f5d4:	b500      	push	{lr}
    f5d6:	b089      	sub	sp, #36	; 0x24
	int rc;

	if (level > 100U) {
    f5d8:	2864      	cmp	r0, #100	; 0x64
{
    f5da:	f88d 0007 	strb.w	r0, [sp, #7]
	if (level > 100U) {
    f5de:	d819      	bhi.n	f614 <bt_bas_set_battery_level+0x40>
		return -EINVAL;
	}

	battery_level = level;
    f5e0:	4b0e      	ldr	r3, [pc, #56]	; (f61c <bt_bas_set_battery_level+0x48>)
	memset(&params, 0, sizeof(params));
    f5e2:	2218      	movs	r2, #24
    f5e4:	7018      	strb	r0, [r3, #0]
    f5e6:	2100      	movs	r1, #0
    f5e8:	a802      	add	r0, sp, #8
    f5ea:	f01e fd29 	bl	2e040 <memset>
	params.attr = attr;
    f5ee:	4b0c      	ldr	r3, [pc, #48]	; (f620 <bt_bas_set_battery_level+0x4c>)
    f5f0:	9303      	str	r3, [sp, #12]
	params.data = data;
    f5f2:	f10d 0307 	add.w	r3, sp, #7
    f5f6:	9304      	str	r3, [sp, #16]
	return bt_gatt_notify_cb(conn, &params);
    f5f8:	a902      	add	r1, sp, #8
	params.len = len;
    f5fa:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
    f5fc:	2000      	movs	r0, #0
	params.len = len;
    f5fe:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
    f602:	f008 f9ed 	bl	179e0 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &bas.attrs[1], &level, sizeof(level));

	return rc == -ENOTCONN ? 0 : rc;
    f606:	f110 0f80 	cmn.w	r0, #128	; 0x80
    f60a:	bf08      	it	eq
    f60c:	2000      	moveq	r0, #0
}
    f60e:	b009      	add	sp, #36	; 0x24
    f610:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
    f614:	f06f 0015 	mvn.w	r0, #21
    f618:	e7f9      	b.n	f60e <bt_bas_set_battery_level+0x3a>
    f61a:	bf00      	nop
    f61c:	20000b1e 	.word	0x20000b1e
    f620:	000328ec 	.word	0x000328ec

0000f624 <hrs_init>:

static int hrs_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	hrs_blsc = 0x01;
    f624:	4b02      	ldr	r3, [pc, #8]	; (f630 <hrs_init+0xc>)
    f626:	2201      	movs	r2, #1
    f628:	701a      	strb	r2, [r3, #0]

	return 0;
}
    f62a:	2000      	movs	r0, #0
    f62c:	4770      	bx	lr
    f62e:	bf00      	nop
    f630:	200032d9 	.word	0x200032d9

0000f634 <read_blsc>:
{
    f634:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &hrs_blsc,
    f636:	2401      	movs	r4, #1
    f638:	9402      	str	r4, [sp, #8]
    f63a:	4c04      	ldr	r4, [pc, #16]	; (f64c <read_blsc+0x18>)
    f63c:	9401      	str	r4, [sp, #4]
    f63e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    f642:	9400      	str	r4, [sp, #0]
    f644:	f020 f9a6 	bl	2f994 <bt_gatt_attr_read>
}
    f648:	b004      	add	sp, #16
    f64a:	bd10      	pop	{r4, pc}
    f64c:	200032d9 	.word	0x200032d9

0000f650 <hrmc_ccc_cfg_changed>:
{
    f650:	b580      	push	{r7, lr}
	LOG_INF("HRS notifications %s", notif_enabled ? "enabled" : "disabled");
    f652:	4a0c      	ldr	r2, [pc, #48]	; (f684 <hrmc_ccc_cfg_changed+0x34>)
    f654:	4b0c      	ldr	r3, [pc, #48]	; (f688 <hrmc_ccc_cfg_changed+0x38>)
{
    f656:	af00      	add	r7, sp, #0
	LOG_INF("HRS notifications %s", notif_enabled ? "enabled" : "disabled");
    f658:	2901      	cmp	r1, #1
    f65a:	bf18      	it	ne
    f65c:	4613      	movne	r3, r2
    f65e:	b088      	sub	sp, #32
    f660:	490a      	ldr	r1, [pc, #40]	; (f68c <hrmc_ccc_cfg_changed+0x3c>)
    f662:	466a      	mov	r2, sp
    f664:	e9c2 1304 	strd	r1, r3, [r2, #16]
    f668:	2302      	movs	r3, #2
    f66a:	7613      	strb	r3, [r2, #24]
    f66c:	4b08      	ldr	r3, [pc, #32]	; (f690 <hrmc_ccc_cfg_changed+0x40>)
    f66e:	f842 3f0c 	str.w	r3, [r2, #12]!
    f672:	4808      	ldr	r0, [pc, #32]	; (f694 <hrmc_ccc_cfg_changed+0x44>)
    f674:	2300      	movs	r3, #0
    f676:	f44f 51d6 	mov.w	r1, #6848	; 0x1ac0
    f67a:	f01c ff24 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
}
    f67e:	46bd      	mov	sp, r7
    f680:	bd80      	pop	{r7, pc}
    f682:	bf00      	nop
    f684:	00034422 	.word	0x00034422
    f688:	0003441a 	.word	0x0003441a
    f68c:	00034444 	.word	0x00034444
    f690:	01000003 	.word	0x01000003
    f694:	000324a4 	.word	0x000324a4

0000f698 <bt_hrs_notify>:

int bt_hrs_notify(uint16_t heartrate)
{
    f698:	b510      	push	{r4, lr}
	int rc;
	static uint8_t hrm[2];

	hrm[0] = 0x06; /* uint8, sensor contact */
    f69a:	4c0d      	ldr	r4, [pc, #52]	; (f6d0 <bt_hrs_notify+0x38>)
{
    f69c:	b086      	sub	sp, #24
	hrm[0] = 0x06; /* uint8, sensor contact */
    f69e:	2306      	movs	r3, #6
	hrm[1] = heartrate;
    f6a0:	7060      	strb	r0, [r4, #1]
	memset(&params, 0, sizeof(params));
    f6a2:	2218      	movs	r2, #24
    f6a4:	2100      	movs	r1, #0
    f6a6:	4668      	mov	r0, sp
	hrm[0] = 0x06; /* uint8, sensor contact */
    f6a8:	7023      	strb	r3, [r4, #0]
    f6aa:	f01e fcc9 	bl	2e040 <memset>
	params.attr = attr;
    f6ae:	4b09      	ldr	r3, [pc, #36]	; (f6d4 <bt_hrs_notify+0x3c>)
	return bt_gatt_notify_cb(conn, &params);
    f6b0:	4669      	mov	r1, sp
	params.data = data;
    f6b2:	e9cd 3401 	strd	r3, r4, [sp, #4]
	return bt_gatt_notify_cb(conn, &params);
    f6b6:	2000      	movs	r0, #0
	params.len = len;
    f6b8:	2302      	movs	r3, #2
    f6ba:	f8ad 300c 	strh.w	r3, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
    f6be:	f008 f98f 	bl	179e0 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &hrs_svc.attrs[1], &hrm, sizeof(hrm));

	return rc == -ENOTCONN ? 0 : rc;
    f6c2:	f110 0f80 	cmn.w	r0, #128	; 0x80
}
    f6c6:	bf08      	it	eq
    f6c8:	2000      	moveq	r0, #0
    f6ca:	b006      	add	sp, #24
    f6cc:	bd10      	pop	{r4, pc}
    f6ce:	bf00      	nop
    f6d0:	200032d7 	.word	0x200032d7
    f6d4:	0003293c 	.word	0x0003293c

0000f6d8 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    f6d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    f6dc:	460f      	mov	r7, r1
    f6de:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f6e0:	2108      	movs	r1, #8
    f6e2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    f6e4:	f8df 9050 	ldr.w	r9, [pc, #80]	; f738 <nvs_recover_last_ate+0x60>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f6e8:	f01c ffdc 	bl	2c6a4 <nvs_al_size.isra.0>
	*addr -= ate_size;
    f6ec:	683c      	ldr	r4, [r7, #0]
    f6ee:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f6f0:	4680      	mov	r8, r0
	*addr -= ate_size;
    f6f2:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    f6f4:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
    f6f8:	42ac      	cmp	r4, r5
    f6fa:	d803      	bhi.n	f704 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    f6fc:	2000      	movs	r0, #0
}
    f6fe:	b003      	add	sp, #12
    f700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    f704:	2308      	movs	r3, #8
    f706:	466a      	mov	r2, sp
    f708:	4621      	mov	r1, r4
    f70a:	4630      	mov	r0, r6
    f70c:	f01c ff3c 	bl	2c588 <nvs_flash_rd>
		if (rc) {
    f710:	2800      	cmp	r0, #0
    f712:	d1f4      	bne.n	f6fe <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
    f714:	4669      	mov	r1, sp
    f716:	4630      	mov	r0, r6
    f718:	f01c ffce 	bl	2c6b8 <nvs_ate_valid>
    f71c:	b140      	cbz	r0, f730 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
    f71e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    f722:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
    f726:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
    f728:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
    f72c:	4413      	add	r3, r2
    f72e:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
    f730:	eba4 0408 	sub.w	r4, r4, r8
    f734:	e7e0      	b.n	f6f8 <nvs_recover_last_ate+0x20>
    f736:	bf00      	nop
    f738:	ffff0000 	.word	0xffff0000

0000f73c <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
    f73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f740:	b091      	sub	sp, #68	; 0x44
    f742:	4604      	mov	r4, r0
    f744:	af00      	add	r7, sp, #0

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    f746:	f100 0814 	add.w	r8, r0, #20
	return z_impl_k_mutex_init(mutex);
    f74a:	4640      	mov	r0, r8
    f74c:	f021 ff5f 	bl	3160e <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    f750:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    f752:	6883      	ldr	r3, [r0, #8]
    f754:	68db      	ldr	r3, [r3, #12]
    f756:	4798      	blx	r3
    f758:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    f75a:	b988      	cbnz	r0, f780 <nvs_mount+0x44>
		LOG_ERR("Could not obtain flash parameters");
    f75c:	4b98      	ldr	r3, [pc, #608]	; (f9c0 <nvs_mount+0x284>)
		return -EINVAL;
	}

	/* check the number of sectors, it should be at least 2 */
	if (fs->sector_count < 2) {
		LOG_ERR("Configuration error - sector count");
    f75e:	63bb      	str	r3, [r7, #56]	; 0x38
    f760:	4898      	ldr	r0, [pc, #608]	; (f9c4 <nvs_mount+0x288>)
    f762:	2302      	movs	r3, #2
    f764:	f107 0234 	add.w	r2, r7, #52	; 0x34
    f768:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EINVAL;
    f76c:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("Configuration error - sector count");
    f770:	637b      	str	r3, [r7, #52]	; 0x34
    f772:	f01c ff89 	bl	2c688 <z_log_msg2_static_create.constprop.0>
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    f776:	4628      	mov	r0, r5
    f778:	3744      	adds	r7, #68	; 0x44
    f77a:	46bd      	mov	sp, r7
    f77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
    f780:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    f782:	6883      	ldr	r3, [r0, #8]
    f784:	68db      	ldr	r3, [r3, #12]
    f786:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    f788:	6803      	ldr	r3, [r0, #0]
    f78a:	3b01      	subs	r3, #1
    f78c:	2b1f      	cmp	r3, #31
    f78e:	d901      	bls.n	f794 <nvs_mount+0x58>
		LOG_ERR("Unsupported write block size");
    f790:	4b8d      	ldr	r3, [pc, #564]	; (f9c8 <nvs_mount+0x28c>)
    f792:	e7e4      	b.n	f75e <nvs_mount+0x22>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    f794:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f796:	6821      	ldr	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    f798:	f107 021c 	add.w	r2, r7, #28
    f79c:	f021 faf3 	bl	30d86 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    f7a0:	b108      	cbz	r0, f7a6 <nvs_mount+0x6a>
		LOG_ERR("Unable to get page info");
    f7a2:	4b8a      	ldr	r3, [pc, #552]	; (f9cc <nvs_mount+0x290>)
    f7a4:	e7db      	b.n	f75e <nvs_mount+0x22>
	if (!fs->sector_size || fs->sector_size % info.size) {
    f7a6:	89a5      	ldrh	r5, [r4, #12]
    f7a8:	b12d      	cbz	r5, f7b6 <nvs_mount+0x7a>
    f7aa:	6a3b      	ldr	r3, [r7, #32]
    f7ac:	fbb5 f2f3 	udiv	r2, r5, r3
    f7b0:	fb03 5512 	mls	r5, r3, r2, r5
    f7b4:	b10d      	cbz	r5, f7ba <nvs_mount+0x7e>
		LOG_ERR("Invalid sector size");
    f7b6:	4b86      	ldr	r3, [pc, #536]	; (f9d0 <nvs_mount+0x294>)
    f7b8:	e7d1      	b.n	f75e <nvs_mount+0x22>
	if (fs->sector_count < 2) {
    f7ba:	89e3      	ldrh	r3, [r4, #14]
    f7bc:	2b01      	cmp	r3, #1
    f7be:	d801      	bhi.n	f7c4 <nvs_mount+0x88>
		LOG_ERR("Configuration error - sector count");
    f7c0:	4b84      	ldr	r3, [pc, #528]	; (f9d4 <nvs_mount+0x298>)
    f7c2:	e7cc      	b.n	f75e <nvs_mount+0x22>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    f7c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    f7c6:	60bd      	str	r5, [r7, #8]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    f7c8:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    f7cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f7d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f7d4:	4640      	mov	r0, r8
    f7d6:	f01a fe6b 	bl	2a4b0 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f7da:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f7dc:	2108      	movs	r1, #8
    f7de:	f01c ff61 	bl	2c6a4 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    f7e2:	46aa      	mov	sl, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f7e4:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
    f7e6:	89e3      	ldrh	r3, [r4, #14]
    f7e8:	fa1f fb85 	uxth.w	fp, r5
    f7ec:	455b      	cmp	r3, fp
    f7ee:	d84a      	bhi.n	f886 <nvs_mount+0x14a>
	if (closed_sectors == fs->sector_count) {
    f7f0:	89e3      	ldrh	r3, [r4, #14]
    f7f2:	4553      	cmp	r3, sl
    f7f4:	f000 80f4 	beq.w	f9e0 <nvs_mount+0x2a4>
	if (i == fs->sector_count) {
    f7f8:	455b      	cmp	r3, fp
    f7fa:	d10c      	bne.n	f816 <nvs_mount+0xda>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    f7fc:	68b9      	ldr	r1, [r7, #8]
    f7fe:	2308      	movs	r3, #8
    f800:	464a      	mov	r2, r9
    f802:	1b89      	subs	r1, r1, r6
    f804:	4620      	mov	r0, r4
    f806:	f01c fef7 	bl	2c5f8 <nvs_flash_cmp_const>
		if (!rc) {
    f80a:	b920      	cbnz	r0, f816 <nvs_mount+0xda>
			nvs_sector_advance(fs, &addr);
    f80c:	89e0      	ldrh	r0, [r4, #14]
    f80e:	f107 0108 	add.w	r1, r7, #8
    f812:	f01c ff3c 	bl	2c68e <nvs_sector_advance.isra.0>
	rc = nvs_recover_last_ate(fs, &addr);
    f816:	f107 0108 	add.w	r1, r7, #8
    f81a:	4620      	mov	r0, r4
    f81c:	f7ff ff5c 	bl	f6d8 <nvs_recover_last_ate>
	if (rc) {
    f820:	4605      	mov	r5, r0
    f822:	2800      	cmp	r0, #0
    f824:	f040 80de 	bne.w	f9e4 <nvs_mount+0x2a8>
	fs->ate_wra = addr;
    f828:	68bb      	ldr	r3, [r7, #8]
	fs->data_wra = addr & ADDR_SECT_MASK;
    f82a:	f8df a1ac 	ldr.w	sl, [pc, #428]	; f9d8 <nvs_mount+0x29c>
	fs->ate_wra = addr;
    f82e:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    f830:	ea03 030a 	and.w	r3, r3, sl
    f834:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    f836:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    f83a:	4299      	cmp	r1, r3
    f83c:	d310      	bcc.n	f860 <nvs_mount+0x124>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    f83e:	2308      	movs	r3, #8
    f840:	f107 020c 	add.w	r2, r7, #12
    f844:	4620      	mov	r0, r4
    f846:	f01c fe9f 	bl	2c588 <nvs_flash_rd>
		if (rc) {
    f84a:	b9d0      	cbnz	r0, f882 <nvs_mount+0x146>
    f84c:	f107 030c 	add.w	r3, r7, #12
		if (data8[i] != value) {
    f850:	f813 2b01 	ldrb.w	r2, [r3], #1
    f854:	4591      	cmp	r9, r2
    f856:	f040 811e 	bne.w	fa96 <nvs_mount+0x35a>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    f85a:	3001      	adds	r0, #1
    f85c:	2808      	cmp	r0, #8
    f85e:	d1f7      	bne.n	f850 <nvs_mount+0x114>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    f860:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
    f862:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
    f864:	0c1b      	lsrs	r3, r3, #16
    f866:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
    f868:	f107 0108 	add.w	r1, r7, #8
	addr = fs->ate_wra & ADDR_SECT_MASK;
    f86c:	60bb      	str	r3, [r7, #8]
	nvs_sector_advance(fs, &addr);
    f86e:	f01c ff0e 	bl	2c68e <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    f872:	89a3      	ldrh	r3, [r4, #12]
    f874:	68b9      	ldr	r1, [r7, #8]
    f876:	464a      	mov	r2, r9
    f878:	4620      	mov	r0, r4
    f87a:	f01c febd 	bl	2c5f8 <nvs_flash_cmp_const>
	if (rc < 0) {
    f87e:	2800      	cmp	r0, #0
    f880:	da26      	bge.n	f8d0 <nvs_mount+0x194>
    f882:	4605      	mov	r5, r0
    f884:	e0ae      	b.n	f9e4 <nvs_mount+0x2a8>
		       (uint16_t)(fs->sector_size - ate_size);
    f886:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    f888:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    f88a:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
    f88c:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    f890:	464a      	mov	r2, r9
    f892:	2308      	movs	r3, #8
    f894:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    f896:	60b9      	str	r1, [r7, #8]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    f898:	f01c feae 	bl	2c5f8 <nvs_flash_cmp_const>
		if (rc) {
    f89c:	b180      	cbz	r0, f8c0 <nvs_mount+0x184>
			nvs_sector_advance(fs, &addr);
    f89e:	89e0      	ldrh	r0, [r4, #14]
    f8a0:	f107 0108 	add.w	r1, r7, #8
    f8a4:	f01c fef3 	bl	2c68e <nvs_sector_advance.isra.0>
			closed_sectors++;
    f8a8:	f10a 0a01 	add.w	sl, sl, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    f8ac:	68b9      	ldr	r1, [r7, #8]
    f8ae:	2308      	movs	r3, #8
    f8b0:	464a      	mov	r2, r9
    f8b2:	4620      	mov	r0, r4
			closed_sectors++;
    f8b4:	fa1f fa8a 	uxth.w	sl, sl
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    f8b8:	f01c fe9e 	bl	2c5f8 <nvs_flash_cmp_const>
			if (!rc) {
    f8bc:	2800      	cmp	r0, #0
    f8be:	d097      	beq.n	f7f0 <nvs_mount+0xb4>
	for (i = 0; i < fs->sector_count; i++) {
    f8c0:	3501      	adds	r5, #1
    f8c2:	e790      	b.n	f7e6 <nvs_mount+0xaa>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    f8c4:	2b00      	cmp	r3, #0
    f8c6:	f000 80ff 	beq.w	fac8 <nvs_mount+0x38c>
				rc = -ESPIPE;
    f8ca:	f06f 051c 	mvn.w	r5, #28
    f8ce:	e089      	b.n	f9e4 <nvs_mount+0x2a8>
	if (rc) {
    f8d0:	d051      	beq.n	f976 <nvs_mount+0x23a>
		addr = fs->ate_wra + ate_size;
    f8d2:	6863      	ldr	r3, [r4, #4]
    f8d4:	4433      	add	r3, r6
    f8d6:	60bb      	str	r3, [r7, #8]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    f8d8:	f64f 79ff 	movw	r9, #65535	; 0xffff
    f8dc:	68b9      	ldr	r1, [r7, #8]
    f8de:	89a3      	ldrh	r3, [r4, #12]
    f8e0:	b28a      	uxth	r2, r1
    f8e2:	1b9b      	subs	r3, r3, r6
    f8e4:	429a      	cmp	r2, r3
    f8e6:	d320      	bcc.n	f92a <nvs_mount+0x1ee>
		LOG_INF("No GC Done marker found: restarting gc");
    f8e8:	4b3c      	ldr	r3, [pc, #240]	; (f9dc <nvs_mount+0x2a0>)
    f8ea:	4836      	ldr	r0, [pc, #216]	; (f9c4 <nvs_mount+0x288>)
    f8ec:	63bb      	str	r3, [r7, #56]	; 0x38
    f8ee:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    f8f2:	2302      	movs	r3, #2
    f8f4:	f107 0234 	add.w	r2, r7, #52	; 0x34
    f8f8:	637b      	str	r3, [r7, #52]	; 0x34
    f8fa:	f01c fec5 	bl	2c688 <z_log_msg2_static_create.constprop.0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    f8fe:	4620      	mov	r0, r4
    f900:	6861      	ldr	r1, [r4, #4]
    f902:	f01c fe9e 	bl	2c642 <nvs_flash_erase_sector>
		if (rc) {
    f906:	2800      	cmp	r0, #0
    f908:	d1bb      	bne.n	f882 <nvs_mount+0x146>
		fs->ate_wra &= ADDR_SECT_MASK;
    f90a:	6863      	ldr	r3, [r4, #4]
    f90c:	4a32      	ldr	r2, [pc, #200]	; (f9d8 <nvs_mount+0x29c>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    f90e:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    f910:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    f912:	440b      	add	r3, r1
    f914:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
    f918:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    f91a:	4013      	ands	r3, r2
    f91c:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    f91e:	4620      	mov	r0, r4
    f920:	f01c ffbf 	bl	2c8a2 <nvs_gc>
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    f924:	2800      	cmp	r0, #0
    f926:	d041      	beq.n	f9ac <nvs_mount+0x270>
    f928:	e7ab      	b.n	f882 <nvs_mount+0x146>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    f92a:	2308      	movs	r3, #8
    f92c:	f107 0214 	add.w	r2, r7, #20
    f930:	4620      	mov	r0, r4
    f932:	f01c fe29 	bl	2c588 <nvs_flash_rd>
			if (rc) {
    f936:	2800      	cmp	r0, #0
    f938:	d1a3      	bne.n	f882 <nvs_mount+0x146>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
    f93a:	f107 0114 	add.w	r1, r7, #20
    f93e:	4620      	mov	r0, r4
    f940:	f01c feba 	bl	2c6b8 <nvs_ate_valid>
    f944:	b130      	cbz	r0, f954 <nvs_mount+0x218>
    f946:	8abb      	ldrh	r3, [r7, #20]
    f948:	454b      	cmp	r3, r9
    f94a:	d103      	bne.n	f954 <nvs_mount+0x218>
			    (gc_done_ate.id == 0xffff) &&
    f94c:	8b3b      	ldrh	r3, [r7, #24]
    f94e:	2b00      	cmp	r3, #0
    f950:	f000 8088 	beq.w	fa64 <nvs_mount+0x328>
			addr += ate_size;
    f954:	68bb      	ldr	r3, [r7, #8]
    f956:	4433      	add	r3, r6
    f958:	60bb      	str	r3, [r7, #8]
    f95a:	e7bf      	b.n	f8dc <nvs_mount+0x1a0>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    f95c:	1a5b      	subs	r3, r3, r1
    f95e:	464a      	mov	r2, r9
    f960:	4620      	mov	r0, r4
    f962:	f01c fe49 	bl	2c5f8 <nvs_flash_cmp_const>
		if (rc < 0) {
    f966:	2800      	cmp	r0, #0
    f968:	db8b      	blt.n	f882 <nvs_mount+0x146>
		if (!rc) {
    f96a:	d008      	beq.n	f97e <nvs_mount+0x242>
		fs->data_wra += fs->flash_parameters->write_block_size;
    f96c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    f96e:	68a3      	ldr	r3, [r4, #8]
    f970:	6812      	ldr	r2, [r2, #0]
    f972:	4413      	add	r3, r2
    f974:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
    f976:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    f97a:	428b      	cmp	r3, r1
    f97c:	d8ee      	bhi.n	f95c <nvs_mount+0x220>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    f97e:	6861      	ldr	r1, [r4, #4]
    f980:	89a3      	ldrh	r3, [r4, #12]
    f982:	eb01 0246 	add.w	r2, r1, r6, lsl #1
    f986:	429a      	cmp	r2, r3
    f988:	d1cc      	bne.n	f924 <nvs_mount+0x1e8>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    f98a:	f8df 904c 	ldr.w	r9, [pc, #76]	; f9d8 <nvs_mount+0x29c>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    f98e:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    f990:	ea01 0209 	and.w	r2, r1, r9
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    f994:	4293      	cmp	r3, r2
    f996:	d0c5      	beq.n	f924 <nvs_mount+0x1e8>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    f998:	4620      	mov	r0, r4
    f99a:	f01c fe52 	bl	2c642 <nvs_flash_erase_sector>
		if (rc) {
    f99e:	2800      	cmp	r0, #0
    f9a0:	f47f af6f 	bne.w	f882 <nvs_mount+0x146>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    f9a4:	6863      	ldr	r3, [r4, #4]
    f9a6:	ea03 0309 	and.w	r3, r3, r9
    f9aa:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
    f9ac:	89a0      	ldrh	r0, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    f9ae:	88a3      	ldrh	r3, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
    f9b0:	eba0 0646 	sub.w	r6, r0, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    f9b4:	42b3      	cmp	r3, r6
    f9b6:	d115      	bne.n	f9e4 <nvs_mount+0x2a8>
		rc = nvs_add_gc_done_ate(fs);
    f9b8:	4620      	mov	r0, r4
    f9ba:	f01c ff5d 	bl	2c878 <nvs_add_gc_done_ate>
    f9be:	e760      	b.n	f882 <nvs_mount+0x146>
    f9c0:	00034471 	.word	0x00034471
    f9c4:	0003249c 	.word	0x0003249c
    f9c8:	00034493 	.word	0x00034493
    f9cc:	000344b0 	.word	0x000344b0
    f9d0:	000344c8 	.word	0x000344c8
    f9d4:	000344dc 	.word	0x000344dc
    f9d8:	ffff0000 	.word	0xffff0000
    f9dc:	0003454e 	.word	0x0003454e
		rc = -EDEADLK;
    f9e0:	f06f 052c 	mvn.w	r5, #44	; 0x2c
	return z_impl_k_mutex_unlock(mutex);
    f9e4:	4640      	mov	r0, r8
    f9e6:	f01a fddb 	bl	2a5a0 <z_impl_k_mutex_unlock>
	if (rc) {
    f9ea:	2d00      	cmp	r5, #0
    f9ec:	f47f aec3 	bne.w	f776 <nvs_mount+0x3a>
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    f9f0:	46e9      	mov	r9, sp
    f9f2:	b088      	sub	sp, #32
    f9f4:	466e      	mov	r6, sp
    f9f6:	46b0      	mov	r8, r6
    f9f8:	89e2      	ldrh	r2, [r4, #14]
    f9fa:	4935      	ldr	r1, [pc, #212]	; (fad0 <nvs_mount+0x394>)
    f9fc:	4835      	ldr	r0, [pc, #212]	; (fad4 <nvs_mount+0x398>)
	fs->ready = true;
    f9fe:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    fa00:	f04f 0a04 	mov.w	sl, #4
	fs->ready = true;
    fa04:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    fa06:	89a3      	ldrh	r3, [r4, #12]
    fa08:	61b3      	str	r3, [r6, #24]
    fa0a:	e9c6 1204 	strd	r1, r2, [r6, #16]
    fa0e:	f848 af0c 	str.w	sl, [r8, #12]!
    fa12:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    fa16:	4642      	mov	r2, r8
    fa18:	f01c fe36 	bl	2c688 <z_log_msg2_static_create.constprop.0>
	LOG_INF("alloc wra: %d, %x",
    fa1c:	6863      	ldr	r3, [r4, #4]
    fa1e:	4a2e      	ldr	r2, [pc, #184]	; (fad8 <nvs_mount+0x39c>)
    fa20:	6132      	str	r2, [r6, #16]
    fa22:	0c1a      	lsrs	r2, r3, #16
    fa24:	b29b      	uxth	r3, r3
    fa26:	482b      	ldr	r0, [pc, #172]	; (fad4 <nvs_mount+0x398>)
    fa28:	6172      	str	r2, [r6, #20]
    fa2a:	46cd      	mov	sp, r9
    fa2c:	61b3      	str	r3, [r6, #24]
    fa2e:	46b5      	mov	sp, r6
    fa30:	4642      	mov	r2, r8
    fa32:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    fa36:	f8c6 a00c 	str.w	sl, [r6, #12]
    fa3a:	f01c fe25 	bl	2c688 <z_log_msg2_static_create.constprop.0>
	LOG_INF("data wra: %d, %x",
    fa3e:	68a3      	ldr	r3, [r4, #8]
    fa40:	4a26      	ldr	r2, [pc, #152]	; (fadc <nvs_mount+0x3a0>)
    fa42:	6132      	str	r2, [r6, #16]
    fa44:	0c1a      	lsrs	r2, r3, #16
    fa46:	b29b      	uxth	r3, r3
    fa48:	46cd      	mov	sp, r9
    fa4a:	6172      	str	r2, [r6, #20]
    fa4c:	46b5      	mov	sp, r6
    fa4e:	4821      	ldr	r0, [pc, #132]	; (fad4 <nvs_mount+0x398>)
    fa50:	61b3      	str	r3, [r6, #24]
    fa52:	f8c6 a00c 	str.w	sl, [r6, #12]
    fa56:	4642      	mov	r2, r8
    fa58:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    fa5c:	f01c fe14 	bl	2c688 <z_log_msg2_static_create.constprop.0>
    fa60:	46cd      	mov	sp, r9
	return 0;
    fa62:	e688      	b.n	f776 <nvs_mount+0x3a>
			LOG_INF("GC Done marker found");
    fa64:	4b1e      	ldr	r3, [pc, #120]	; (fae0 <nvs_mount+0x3a4>)
    fa66:	63bb      	str	r3, [r7, #56]	; 0x38
    fa68:	f107 0234 	add.w	r2, r7, #52	; 0x34
    fa6c:	2302      	movs	r3, #2
    fa6e:	4819      	ldr	r0, [pc, #100]	; (fad4 <nvs_mount+0x398>)
    fa70:	637b      	str	r3, [r7, #52]	; 0x34
    fa72:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    fa76:	f01c fe07 	bl	2c688 <z_log_msg2_static_create.constprop.0>
			addr = fs->ate_wra & ADDR_SECT_MASK;
    fa7a:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
    fa7c:	89e0      	ldrh	r0, [r4, #14]
			addr = fs->ate_wra & ADDR_SECT_MASK;
    fa7e:	0c1b      	lsrs	r3, r3, #16
    fa80:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
    fa82:	f107 0108 	add.w	r1, r7, #8
			addr = fs->ate_wra & ADDR_SECT_MASK;
    fa86:	60bb      	str	r3, [r7, #8]
			nvs_sector_advance(fs, &addr);
    fa88:	f01c fe01 	bl	2c68e <nvs_sector_advance.isra.0>
			rc = nvs_flash_erase_sector(fs, addr);
    fa8c:	68b9      	ldr	r1, [r7, #8]
    fa8e:	4620      	mov	r0, r4
    fa90:	f01c fdd7 	bl	2c642 <nvs_flash_erase_sector>
			goto end;
    fa94:	e746      	b.n	f924 <nvs_mount+0x1e8>
		if (nvs_ate_valid(fs, &last_ate)) {
    fa96:	f107 010c 	add.w	r1, r7, #12
    fa9a:	4620      	mov	r0, r4
    fa9c:	f01c fe0c 	bl	2c6b8 <nvs_ate_valid>
    faa0:	f8d4 b004 	ldr.w	fp, [r4, #4]
    faa4:	b180      	cbz	r0, fac8 <nvs_mount+0x38c>
			fs->data_wra = addr & ADDR_SECT_MASK;
    faa6:	68ba      	ldr	r2, [r7, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    faa8:	8a3b      	ldrh	r3, [r7, #16]
    faaa:	89f9      	ldrh	r1, [r7, #14]
    faac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    faae:	607b      	str	r3, [r7, #4]
			fs->data_wra = addr & ADDR_SECT_MASK;
    fab0:	ea02 020a 	and.w	r2, r2, sl
    fab4:	60a2      	str	r2, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    fab6:	4419      	add	r1, r3
    fab8:	f01c fdf4 	bl	2c6a4 <nvs_al_size.isra.0>
    fabc:	4402      	add	r2, r0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    fabe:	455a      	cmp	r2, fp
    fac0:	687b      	ldr	r3, [r7, #4]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    fac2:	60a2      	str	r2, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    fac4:	f43f aefe 	beq.w	f8c4 <nvs_mount+0x188>
		fs->ate_wra -= ate_size;
    fac8:	ebab 0306 	sub.w	r3, fp, r6
    facc:	6063      	str	r3, [r4, #4]
    face:	e6b2      	b.n	f836 <nvs_mount+0xfa>
    fad0:	000344ff 	.word	0x000344ff
    fad4:	0003249c 	.word	0x0003249c
    fad8:	00034516 	.word	0x00034516
    fadc:	00034528 	.word	0x00034528
    fae0:	00034539 	.word	0x00034539

0000fae4 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    fae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fae8:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    faea:	7c03      	ldrb	r3, [r0, #16]
{
    faec:	b08d      	sub	sp, #52	; 0x34
    faee:	4604      	mov	r4, r0
    faf0:	4689      	mov	r9, r1
    faf2:	4690      	mov	r8, r2
	if (!fs->ready) {
    faf4:	b97b      	cbnz	r3, fb16 <nvs_write+0x32>
		LOG_ERR("NVS not initialized");
    faf6:	4b61      	ldr	r3, [pc, #388]	; (fc7c <nvs_write+0x198>)
    faf8:	930a      	str	r3, [sp, #40]	; 0x28
    fafa:	4861      	ldr	r0, [pc, #388]	; (fc80 <nvs_write+0x19c>)
    fafc:	2302      	movs	r3, #2
    fafe:	aa09      	add	r2, sp, #36	; 0x24
    fb00:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EACCES;
    fb04:	f06f 050c 	mvn.w	r5, #12
		LOG_ERR("NVS not initialized");
    fb08:	9309      	str	r3, [sp, #36]	; 0x24
    fb0a:	f01c fdbd 	bl	2c688 <z_log_msg2_static_create.constprop.0>
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    fb0e:	4628      	mov	r0, r5
    fb10:	b00d      	add	sp, #52	; 0x34
    fb12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    fb16:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    fb18:	2108      	movs	r1, #8
    fb1a:	4610      	mov	r0, r2
    fb1c:	f01c fdc2 	bl	2c6a4 <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
    fb20:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    fb22:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
    fb24:	4610      	mov	r0, r2
    fb26:	f01c fdbd 	bl	2c6a4 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    fb2a:	89a3      	ldrh	r3, [r4, #12]
    fb2c:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
    fb30:	42b3      	cmp	r3, r6
	data_size = nvs_al_size(fs, len);
    fb32:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    fb34:	f0c0 809e 	bcc.w	fc74 <nvs_write+0x190>
    fb38:	b11e      	cbz	r6, fb42 <nvs_write+0x5e>
	    ((len > 0) && (data == NULL))) {
    fb3a:	f1b8 0f00 	cmp.w	r8, #0
    fb3e:	f000 8099 	beq.w	fc74 <nvs_write+0x190>
	wlk_addr = fs->ate_wra;
    fb42:	6863      	ldr	r3, [r4, #4]
    fb44:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    fb46:	aa04      	add	r2, sp, #16
    fb48:	a903      	add	r1, sp, #12
    fb4a:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
    fb4c:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    fb50:	f01c fdea 	bl	2c728 <nvs_prev_ate>
		if (rc) {
    fb54:	4605      	mov	r5, r0
    fb56:	2800      	cmp	r0, #0
    fb58:	d1d9      	bne.n	fb0e <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    fb5a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    fb5e:	454b      	cmp	r3, r9
    fb60:	d005      	beq.n	fb6e <nvs_write+0x8a>
		if (wlk_addr == fs->ate_wra) {
    fb62:	6862      	ldr	r2, [r4, #4]
    fb64:	9b03      	ldr	r3, [sp, #12]
    fb66:	429a      	cmp	r2, r3
    fb68:	d1ed      	bne.n	fb46 <nvs_write+0x62>
		if (len == 0) {
    fb6a:	b9e6      	cbnz	r6, fba6 <nvs_write+0xc2>
    fb6c:	e7cf      	b.n	fb0e <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    fb6e:	a904      	add	r1, sp, #16
    fb70:	4620      	mov	r0, r4
    fb72:	f01c fda1 	bl	2c6b8 <nvs_ate_valid>
    fb76:	2800      	cmp	r0, #0
    fb78:	d0f3      	beq.n	fb62 <nvs_write+0x7e>
			if (wlk_ate.len == 0U) {
    fb7a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
    fb7e:	b186      	cbz	r6, fba2 <nvs_write+0xbe>
		} else if (len == wlk_ate.len) {
    fb80:	42b3      	cmp	r3, r6
    fb82:	d110      	bne.n	fba6 <nvs_write+0xc2>
		rd_addr += wlk_ate.offset;
    fb84:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
    fb88:	ea4f 411b 	mov.w	r1, fp, lsr #16
    fb8c:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    fb8e:	4401      	add	r1, r0
    fb90:	4633      	mov	r3, r6
    fb92:	4642      	mov	r2, r8
    fb94:	4620      	mov	r0, r4
    fb96:	f01c fd05 	bl	2c5a4 <nvs_flash_block_cmp>
			if (rc <= 0) {
    fb9a:	2800      	cmp	r0, #0
    fb9c:	dc03      	bgt.n	fba6 <nvs_write+0xc2>
    fb9e:	4605      	mov	r5, r0
    fba0:	e7b5      	b.n	fb0e <nvs_write+0x2a>
			if (wlk_ate.len == 0U) {
    fba2:	2b00      	cmp	r3, #0
    fba4:	d0b3      	beq.n	fb0e <nvs_write+0x2a>
	if (data_size) {
    fba6:	bba7      	cbnz	r7, fc12 <nvs_write+0x12e>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    fba8:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
    fbac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    fbb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fbb4:	4650      	mov	r0, sl
    fbb6:	f01a fc7b 	bl	2a4b0 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
    fbba:	f8df b0c8 	ldr.w	fp, [pc, #200]	; fc84 <nvs_write+0x1a0>
		if (gc_count == fs->sector_count) {
    fbbe:	89e3      	ldrh	r3, [r4, #14]
    fbc0:	429d      	cmp	r5, r3
    fbc2:	d054      	beq.n	fc6e <nvs_write+0x18a>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
    fbc4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    fbc8:	18f9      	adds	r1, r7, r3
    fbca:	428a      	cmp	r2, r1
    fbcc:	d324      	bcc.n	fc18 <nvs_write+0x134>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    fbce:	f8ad 301a 	strh.w	r3, [sp, #26]
	nvs_ate_crc8_update(&entry);
    fbd2:	a806      	add	r0, sp, #24
	entry.part = 0xff;
    fbd4:	23ff      	movs	r3, #255	; 0xff
    fbd6:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
    fbda:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
    fbde:	f8ad 601c 	strh.w	r6, [sp, #28]
	nvs_ate_crc8_update(&entry);
    fbe2:	f01c fd48 	bl	2c676 <nvs_ate_crc8_update>
	rc = nvs_flash_data_wrt(fs, data, len);
    fbe6:	4632      	mov	r2, r6
    fbe8:	4641      	mov	r1, r8
    fbea:	4620      	mov	r0, r4
    fbec:	f01c fe20 	bl	2c830 <nvs_flash_data_wrt>
	if (rc) {
    fbf0:	4603      	mov	r3, r0
    fbf2:	b938      	cbnz	r0, fc04 <nvs_write+0x120>
	rc = nvs_flash_ate_wrt(fs, &entry);
    fbf4:	a906      	add	r1, sp, #24
    fbf6:	4620      	mov	r0, r4
    fbf8:	f01c fe2d 	bl	2c856 <nvs_flash_ate_wrt>
	rc = len;
    fbfc:	2800      	cmp	r0, #0
    fbfe:	bf14      	ite	ne
    fc00:	4603      	movne	r3, r0
    fc02:	4633      	moveq	r3, r6
    fc04:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
    fc06:	4650      	mov	r0, sl
    fc08:	f01a fcca 	bl	2a5a0 <z_impl_k_mutex_unlock>
	return rc;
    fc0c:	9b01      	ldr	r3, [sp, #4]
    fc0e:	461d      	mov	r5, r3
    fc10:	e77d      	b.n	fb0e <nvs_write+0x2a>
		required_space = data_size + ate_size;
    fc12:	4457      	add	r7, sl
    fc14:	b2bf      	uxth	r7, r7
    fc16:	e7c7      	b.n	fba8 <nvs_write+0xc4>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    fc18:	2108      	movs	r1, #8
    fc1a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fc1c:	f01c fd42 	bl	2c6a4 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    fc20:	f64f 73ff 	movw	r3, #65535	; 0xffff
    fc24:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
    fc28:	2300      	movs	r3, #0
    fc2a:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    fc2e:	1813      	adds	r3, r2, r0
    fc30:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
    fc34:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    fc36:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    fc3a:	441a      	add	r2, r3
    fc3c:	1a12      	subs	r2, r2, r0
    fc3e:	6062      	str	r2, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    fc40:	a806      	add	r0, sp, #24
    fc42:	f01c fd18 	bl	2c676 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    fc46:	a906      	add	r1, sp, #24
    fc48:	4620      	mov	r0, r4
    fc4a:	f01c fe04 	bl	2c856 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    fc4e:	89e0      	ldrh	r0, [r4, #14]
    fc50:	1d21      	adds	r1, r4, #4
    fc52:	f01c fd1c 	bl	2c68e <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    fc56:	6863      	ldr	r3, [r4, #4]
    fc58:	ea03 030b 	and.w	r3, r3, fp
    fc5c:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    fc5e:	4620      	mov	r0, r4
    fc60:	f01c fe1f 	bl	2c8a2 <nvs_gc>
		if (rc) {
    fc64:	4603      	mov	r3, r0
    fc66:	2800      	cmp	r0, #0
    fc68:	d1cc      	bne.n	fc04 <nvs_write+0x120>
		gc_count++;
    fc6a:	3501      	adds	r5, #1
		if (gc_count == fs->sector_count) {
    fc6c:	e7a7      	b.n	fbbe <nvs_write+0xda>
			rc = -ENOSPC;
    fc6e:	f06f 031b 	mvn.w	r3, #27
    fc72:	e7c7      	b.n	fc04 <nvs_write+0x120>
		return -EINVAL;
    fc74:	f06f 0515 	mvn.w	r5, #21
    fc78:	e749      	b.n	fb0e <nvs_write+0x2a>
    fc7a:	bf00      	nop
    fc7c:	0003445d 	.word	0x0003445d
    fc80:	0003249c 	.word	0x0003249c
    fc84:	ffff0000 	.word	0xffff0000

0000fc88 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
    fc88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fc8c:	461e      	mov	r6, r3
    fc8e:	b088      	sub	sp, #32
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    fc90:	7c03      	ldrb	r3, [r0, #16]
{
    fc92:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
    fc96:	4604      	mov	r4, r0
    fc98:	460f      	mov	r7, r1
    fc9a:	4690      	mov	r8, r2
	if (!fs->ready) {
    fc9c:	b973      	cbnz	r3, fcbc <nvs_read_hist+0x34>
		LOG_ERR("NVS not initialized");
    fc9e:	4b2c      	ldr	r3, [pc, #176]	; (fd50 <nvs_read_hist+0xc8>)
    fca0:	482c      	ldr	r0, [pc, #176]	; (fd54 <nvs_read_hist+0xcc>)
    fca2:	9306      	str	r3, [sp, #24]
    fca4:	aa05      	add	r2, sp, #20
    fca6:	2302      	movs	r3, #2
    fca8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    fcac:	9305      	str	r3, [sp, #20]
    fcae:	f01c fceb 	bl	2c688 <z_log_msg2_static_create.constprop.0>
		return -EACCES;
    fcb2:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    fcb6:	b008      	add	sp, #32
    fcb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    fcbc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    fcbe:	2108      	movs	r1, #8
    fcc0:	f01c fcf0 	bl	2c6a4 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    fcc4:	89a3      	ldrh	r3, [r4, #12]
    fcc6:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    fcca:	42b3      	cmp	r3, r6
    fccc:	d33c      	bcc.n	fd48 <nvs_read_hist+0xc0>
	wlk_addr = fs->ate_wra;
    fcce:	6863      	ldr	r3, [r4, #4]
    fcd0:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
    fcd2:	f04f 0a00 	mov.w	sl, #0
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    fcd6:	aa02      	add	r2, sp, #8
    fcd8:	a901      	add	r1, sp, #4
    fcda:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
    fcdc:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    fcde:	f01c fd23 	bl	2c728 <nvs_prev_ate>
		if (rc) {
    fce2:	2800      	cmp	r0, #0
    fce4:	d1e7      	bne.n	fcb6 <nvs_read_hist+0x2e>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
    fce6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    fcea:	42bb      	cmp	r3, r7
    fcec:	d108      	bne.n	fd00 <nvs_read_hist+0x78>
    fcee:	a902      	add	r1, sp, #8
    fcf0:	4620      	mov	r0, r4
    fcf2:	f01c fce1 	bl	2c6b8 <nvs_ate_valid>
    fcf6:	b118      	cbz	r0, fd00 <nvs_read_hist+0x78>
			cnt_his++;
    fcf8:	f10a 0a01 	add.w	sl, sl, #1
    fcfc:	fa1f fa8a 	uxth.w	sl, sl
		if (wlk_addr == fs->ate_wra) {
    fd00:	6862      	ldr	r2, [r4, #4]
    fd02:	9b01      	ldr	r3, [sp, #4]
    fd04:	429a      	cmp	r2, r3
    fd06:	d018      	beq.n	fd3a <nvs_read_hist+0xb2>
	while (cnt_his <= cnt) {
    fd08:	45ca      	cmp	sl, r9
    fd0a:	d9e4      	bls.n	fcd6 <nvs_read_hist+0x4e>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    fd0c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    fd10:	b1bb      	cbz	r3, fd42 <nvs_read_hist+0xba>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    fd12:	45ca      	cmp	sl, r9
    fd14:	d315      	bcc.n	fd42 <nvs_read_hist+0xba>
	rd_addr += wlk_ate.offset;
    fd16:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
    fd1a:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    fd1c:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
    fd1e:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    fd22:	bf28      	it	cs
    fd24:	4633      	movcs	r3, r6
    fd26:	4642      	mov	r2, r8
    fd28:	4429      	add	r1, r5
    fd2a:	4620      	mov	r0, r4
    fd2c:	f01c fc2c 	bl	2c588 <nvs_flash_rd>
	if (rc) {
    fd30:	2800      	cmp	r0, #0
    fd32:	d1c0      	bne.n	fcb6 <nvs_read_hist+0x2e>
	return wlk_ate.len;
    fd34:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    fd38:	e7bd      	b.n	fcb6 <nvs_read_hist+0x2e>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    fd3a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    fd3e:	42bb      	cmp	r3, r7
    fd40:	d0e4      	beq.n	fd0c <nvs_read_hist+0x84>
		return -ENOENT;
    fd42:	f06f 0001 	mvn.w	r0, #1
    fd46:	e7b6      	b.n	fcb6 <nvs_read_hist+0x2e>
		return -EINVAL;
    fd48:	f06f 0015 	mvn.w	r0, #21
    fd4c:	e7b3      	b.n	fcb6 <nvs_read_hist+0x2e>
    fd4e:	bf00      	nop
    fd50:	0003445d 	.word	0x0003445d
    fd54:	0003249c 	.word	0x0003249c

0000fd58 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    fd58:	4b0c      	ldr	r3, [pc, #48]	; (fd8c <flash_area_open+0x34>)
    fd5a:	681b      	ldr	r3, [r3, #0]
{
    fd5c:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
    fd5e:	b173      	cbz	r3, fd7e <flash_area_open+0x26>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    fd60:	4a0b      	ldr	r2, [pc, #44]	; (fd90 <flash_area_open+0x38>)
    fd62:	6815      	ldr	r5, [r2, #0]
    fd64:	2200      	movs	r2, #0
    fd66:	42aa      	cmp	r2, r5
    fd68:	db02      	blt.n	fd70 <flash_area_open+0x18>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
    fd6a:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;
	return 0;
}
    fd6e:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
    fd70:	461c      	mov	r4, r3
    fd72:	f813 6b10 	ldrb.w	r6, [r3], #16
    fd76:	4286      	cmp	r6, r0
    fd78:	d004      	beq.n	fd84 <flash_area_open+0x2c>
	for (int i = 0; i < flash_map_entries; i++) {
    fd7a:	3201      	adds	r2, #1
    fd7c:	e7f3      	b.n	fd66 <flash_area_open+0xe>
		return -EACCES;
    fd7e:	f06f 000c 	mvn.w	r0, #12
    fd82:	e7f4      	b.n	fd6e <flash_area_open+0x16>
	*fap = area;
    fd84:	600c      	str	r4, [r1, #0]
	return 0;
    fd86:	2000      	movs	r0, #0
    fd88:	e7f1      	b.n	fd6e <flash_area_open+0x16>
    fd8a:	bf00      	nop
    fd8c:	200002e0 	.word	0x200002e0
    fd90:	00032a18 	.word	0x00032a18

0000fd94 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    fd94:	b570      	push	{r4, r5, r6, lr}
    fd96:	b088      	sub	sp, #32
    fd98:	4605      	mov	r5, r0
    fd9a:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
    fd9c:	b2c0      	uxtb	r0, r0
    fd9e:	4669      	mov	r1, sp
{
    fda0:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
    fda2:	f7ff ffd9 	bl	fd58 <flash_area_open>
	if (rc < 0 || fa == NULL) {
    fda6:	2800      	cmp	r0, #0
    fda8:	db1f      	blt.n	fdea <flash_area_get_sectors+0x56>
    fdaa:	9b00      	ldr	r3, [sp, #0]
    fdac:	b1eb      	cbz	r3, fdea <flash_area_get_sectors+0x56>
	cb_data->area_off = fa->fa_off;
    fdae:	685a      	ldr	r2, [r3, #4]
    fdb0:	9202      	str	r2, [sp, #8]
	cb_data->area_len = fa->fa_size;
    fdb2:	689a      	ldr	r2, [r3, #8]
	cb_data->ret_len = *cnt;
    fdb4:	6821      	ldr	r1, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
    fdb6:	68d8      	ldr	r0, [r3, #12]
	cb_data->area_idx = idx;
    fdb8:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
    fdba:	e9cd 2603 	strd	r2, r6, [sp, #12]
	cb_data->ret_idx = 0U;
    fdbe:	2200      	movs	r2, #0
	cb_data->status = 0;
    fdc0:	e9cd 1206 	strd	r1, r2, [sp, #24]
	cb_data->ret_idx = 0U;
    fdc4:	9205      	str	r2, [sp, #20]
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    fdc6:	f01a f8ad 	bl	29f24 <z_impl_device_get_binding>
    fdca:	4605      	mov	r5, r0
	flash_area_close(fa);
    fdcc:	9800      	ldr	r0, [sp, #0]
    fdce:	f01c fe28 	bl	2ca22 <flash_area_close>
	if (flash_dev == NULL) {
    fdd2:	b16d      	cbz	r5, fdf0 <flash_area_get_sectors+0x5c>
	flash_page_foreach(flash_dev, cb, cb_data);
    fdd4:	4628      	mov	r0, r5
    fdd6:	4908      	ldr	r1, [pc, #32]	; (fdf8 <flash_area_get_sectors+0x64>)
    fdd8:	aa01      	add	r2, sp, #4
    fdda:	f020 ffd8 	bl	30d8e <flash_page_foreach>
	if (cb_data->status == 0) {
    fdde:	9807      	ldr	r0, [sp, #28]
    fde0:	b908      	cbnz	r0, fde6 <flash_area_get_sectors+0x52>
		*cnt = cb_data->ret_idx;
    fde2:	9b05      	ldr	r3, [sp, #20]
    fde4:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    fde6:	b008      	add	sp, #32
    fde8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    fdea:	f06f 0015 	mvn.w	r0, #21
    fdee:	e7fa      	b.n	fde6 <flash_area_get_sectors+0x52>
		return -ENODEV;
    fdf0:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    fdf4:	e7f7      	b.n	fde6 <flash_area_get_sectors+0x52>
    fdf6:	bf00      	nop
    fdf8:	0002ca25 	.word	0x0002ca25

0000fdfc <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    fdfc:	4b10      	ldr	r3, [pc, #64]	; (fe40 <settings_save_one+0x44>)
{
    fdfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    fe02:	681c      	ldr	r4, [r3, #0]
{
    fe04:	4605      	mov	r5, r0
    fe06:	460e      	mov	r6, r1
    fe08:	4617      	mov	r7, r2
	if (!cs) {
    fe0a:	b1ac      	cbz	r4, fe38 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    fe0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    fe10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fe14:	480b      	ldr	r0, [pc, #44]	; (fe44 <settings_save_one+0x48>)
    fe16:	f01a fb4b 	bl	2a4b0 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    fe1a:	6863      	ldr	r3, [r4, #4]
    fe1c:	4632      	mov	r2, r6
    fe1e:	f8d3 8008 	ldr.w	r8, [r3, #8]
    fe22:	4629      	mov	r1, r5
    fe24:	463b      	mov	r3, r7
    fe26:	4620      	mov	r0, r4
    fe28:	47c0      	blx	r8
    fe2a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    fe2c:	4805      	ldr	r0, [pc, #20]	; (fe44 <settings_save_one+0x48>)
    fe2e:	f01a fbb7 	bl	2a5a0 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    fe32:	4620      	mov	r0, r4
    fe34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    fe38:	f06f 0401 	mvn.w	r4, #1
    fe3c:	e7f9      	b.n	fe32 <settings_save_one+0x36>
    fe3e:	bf00      	nop
    fe40:	20001dd8 	.word	0x20001dd8
    fe44:	20000bc8 	.word	0x20000bc8

0000fe48 <settings_src_register>:
	parent->next = child;
    fe48:	2300      	movs	r3, #0
    fe4a:	6003      	str	r3, [r0, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    fe4c:	4b04      	ldr	r3, [pc, #16]	; (fe60 <settings_src_register+0x18>)
    fe4e:	685a      	ldr	r2, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    fe50:	b912      	cbnz	r2, fe58 <settings_src_register+0x10>
	list->head = node;
    fe52:	e9c3 0000 	strd	r0, r0, [r3]
}
    fe56:	4770      	bx	lr
	parent->next = child;
    fe58:	6010      	str	r0, [r2, #0]
	list->tail = node;
    fe5a:	6058      	str	r0, [r3, #4]
}
    fe5c:	4770      	bx	lr
    fe5e:	bf00      	nop
    fe60:	20001dd0 	.word	0x20001dd0

0000fe64 <settings_dst_register>:
	settings_save_dst = cs;
    fe64:	4b01      	ldr	r3, [pc, #4]	; (fe6c <settings_dst_register+0x8>)
    fe66:	6018      	str	r0, [r3, #0]
}
    fe68:	4770      	bx	lr
    fe6a:	bf00      	nop
    fe6c:	20001dd8 	.word	0x20001dd8

0000fe70 <settings_load_subtree>:
{
    fe70:	b530      	push	{r4, r5, lr}
    fe72:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
    fe74:	2300      	movs	r3, #0
{
    fe76:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    fe78:	e9cd 3302 	strd	r3, r3, [sp, #8]
    fe7c:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    fe7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fe82:	480c      	ldr	r0, [pc, #48]	; (feb4 <settings_load_subtree+0x44>)
    fe84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    fe88:	f01a fb12 	bl	2a4b0 <z_impl_k_mutex_lock>
	return list->head;
    fe8c:	4b0a      	ldr	r3, [pc, #40]	; (feb8 <settings_load_subtree+0x48>)
    fe8e:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    fe90:	b134      	cbz	r4, fea0 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
    fe92:	6863      	ldr	r3, [r4, #4]
    fe94:	4620      	mov	r0, r4
    fe96:	681b      	ldr	r3, [r3, #0]
    fe98:	a901      	add	r1, sp, #4
    fe9a:	4798      	blx	r3
	return node->next;
    fe9c:	6824      	ldr	r4, [r4, #0]
    fe9e:	e7f7      	b.n	fe90 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
    fea0:	4628      	mov	r0, r5
    fea2:	f000 f8d3 	bl	1004c <settings_commit_subtree>
    fea6:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    fea8:	4802      	ldr	r0, [pc, #8]	; (feb4 <settings_load_subtree+0x44>)
    feaa:	f01a fb79 	bl	2a5a0 <z_impl_k_mutex_unlock>
}
    feae:	4620      	mov	r0, r4
    feb0:	b005      	add	sp, #20
    feb2:	bd30      	pop	{r4, r5, pc}
    feb4:	20000bc8 	.word	0x20000bc8
    feb8:	20001dd0 	.word	0x20001dd0

0000febc <settings_load_subtree_direct>:
{
    febc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    febe:	e9cd 0101 	strd	r0, r1, [sp, #4]
    fec2:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    fec4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fec8:	480a      	ldr	r0, [pc, #40]	; (fef4 <settings_load_subtree_direct+0x38>)
    feca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    fece:	f01a faef 	bl	2a4b0 <z_impl_k_mutex_lock>
	return list->head;
    fed2:	4b09      	ldr	r3, [pc, #36]	; (fef8 <settings_load_subtree_direct+0x3c>)
    fed4:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    fed6:	b134      	cbz	r4, fee6 <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
    fed8:	6863      	ldr	r3, [r4, #4]
    feda:	4620      	mov	r0, r4
    fedc:	681b      	ldr	r3, [r3, #0]
    fede:	a901      	add	r1, sp, #4
    fee0:	4798      	blx	r3
	return node->next;
    fee2:	6824      	ldr	r4, [r4, #0]
    fee4:	e7f7      	b.n	fed6 <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
    fee6:	4803      	ldr	r0, [pc, #12]	; (fef4 <settings_load_subtree_direct+0x38>)
    fee8:	f01a fb5a 	bl	2a5a0 <z_impl_k_mutex_unlock>
}
    feec:	2000      	movs	r0, #0
    feee:	b004      	add	sp, #16
    fef0:	bd10      	pop	{r4, pc}
    fef2:	bf00      	nop
    fef4:	20000bc8 	.word	0x20000bc8
    fef8:	20001dd0 	.word	0x20001dd0

0000fefc <settings_store_init>:
	list->head = NULL;
    fefc:	4b02      	ldr	r3, [pc, #8]	; (ff08 <settings_store_init+0xc>)
    fefe:	2200      	movs	r2, #0
	list->tail = NULL;
    ff00:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    ff04:	4770      	bx	lr
    ff06:	bf00      	nop
    ff08:	20001dd0 	.word	0x20001dd0

0000ff0c <settings_init>:
	list->head = NULL;
    ff0c:	4b02      	ldr	r3, [pc, #8]	; (ff18 <settings_init+0xc>)
    ff0e:	2200      	movs	r2, #0
	list->tail = NULL;
    ff10:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    ff14:	f7ff bff2 	b.w	fefc <settings_store_init>
    ff18:	20001ddc 	.word	0x20001ddc

0000ff1c <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
    ff1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    ff20:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
    ff22:	460e      	mov	r6, r1
    ff24:	b109      	cbz	r1, ff2a <settings_parse_and_lookup+0xe>
		*next = NULL;
    ff26:	2300      	movs	r3, #0
    ff28:	600b      	str	r3, [r1, #0]
    ff2a:	4c1c      	ldr	r4, [pc, #112]	; (ff9c <settings_parse_and_lookup+0x80>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    ff2c:	f8df 8070 	ldr.w	r8, [pc, #112]	; ffa0 <settings_parse_and_lookup+0x84>
    ff30:	2500      	movs	r5, #0
    ff32:	4544      	cmp	r4, r8
    ff34:	d310      	bcc.n	ff58 <settings_parse_and_lookup+0x3c>
	return list->head;
    ff36:	4b1b      	ldr	r3, [pc, #108]	; (ffa4 <settings_parse_and_lookup+0x88>)
    ff38:	681c      	ldr	r4, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    ff3a:	b35c      	cbz	r4, ff94 <settings_parse_and_lookup+0x78>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    ff3c:	aa01      	add	r2, sp, #4
    ff3e:	4638      	mov	r0, r7
    ff40:	f854 1c14 	ldr.w	r1, [r4, #-20]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    ff44:	3c14      	subs	r4, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    ff46:	f01c fd92 	bl	2ca6e <settings_name_steq>
    ff4a:	b308      	cbz	r0, ff90 <settings_parse_and_lookup+0x74>
			continue;
		}
		if (!bestmatch) {
    ff4c:	b9cd      	cbnz	r5, ff82 <settings_parse_and_lookup+0x66>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
    ff4e:	b10e      	cbz	r6, ff54 <settings_parse_and_lookup+0x38>
				*next = tmpnext;
    ff50:	9b01      	ldr	r3, [sp, #4]
    ff52:	6033      	str	r3, [r6, #0]
    ff54:	4625      	mov	r5, r4
    ff56:	e01b      	b.n	ff90 <settings_parse_and_lookup+0x74>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    ff58:	6821      	ldr	r1, [r4, #0]
    ff5a:	aa01      	add	r2, sp, #4
    ff5c:	4638      	mov	r0, r7
    ff5e:	f01c fd86 	bl	2ca6e <settings_name_steq>
    ff62:	b160      	cbz	r0, ff7e <settings_parse_and_lookup+0x62>
		if (!bestmatch) {
    ff64:	b925      	cbnz	r5, ff70 <settings_parse_and_lookup+0x54>
			if (next) {
    ff66:	b10e      	cbz	r6, ff6c <settings_parse_and_lookup+0x50>
				*next = tmpnext;
    ff68:	9b01      	ldr	r3, [sp, #4]
    ff6a:	6033      	str	r3, [r6, #0]
    ff6c:	4625      	mov	r5, r4
    ff6e:	e006      	b.n	ff7e <settings_parse_and_lookup+0x62>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    ff70:	6829      	ldr	r1, [r5, #0]
    ff72:	6820      	ldr	r0, [r4, #0]
    ff74:	2200      	movs	r2, #0
    ff76:	f01c fd7a 	bl	2ca6e <settings_name_steq>
    ff7a:	2800      	cmp	r0, #0
    ff7c:	d1f3      	bne.n	ff66 <settings_parse_and_lookup+0x4a>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    ff7e:	3414      	adds	r4, #20
    ff80:	e7d7      	b.n	ff32 <settings_parse_and_lookup+0x16>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    ff82:	6829      	ldr	r1, [r5, #0]
    ff84:	6820      	ldr	r0, [r4, #0]
    ff86:	2200      	movs	r2, #0
    ff88:	f01c fd71 	bl	2ca6e <settings_name_steq>
    ff8c:	2800      	cmp	r0, #0
    ff8e:	d1de      	bne.n	ff4e <settings_parse_and_lookup+0x32>
	return node->next;
    ff90:	6964      	ldr	r4, [r4, #20]
    ff92:	e7d2      	b.n	ff3a <settings_parse_and_lookup+0x1e>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
    ff94:	4628      	mov	r0, r5
    ff96:	b002      	add	sp, #8
    ff98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ff9c:	000322e4 	.word	0x000322e4
    ffa0:	0003235c 	.word	0x0003235c
    ffa4:	20001ddc 	.word	0x20001ddc

0000ffa8 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
    ffa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ffac:	b084      	sub	sp, #16
    ffae:	af02      	add	r7, sp, #8
    ffb0:	4604      	mov	r4, r0
    ffb2:	f8d7 9028 	ldr.w	r9, [r7, #40]	; 0x28
	int rc;
	const char *name_key = name;
    ffb6:	6078      	str	r0, [r7, #4]
{
    ffb8:	460d      	mov	r5, r1
    ffba:	4616      	mov	r6, r2
    ffbc:	4698      	mov	r8, r3

	if (load_arg && load_arg->subtree &&
    ffbe:	f1b9 0f00 	cmp.w	r9, #0
    ffc2:	d019      	beq.n	fff8 <settings_call_set_handler+0x50>
    ffc4:	f8d9 1000 	ldr.w	r1, [r9]
    ffc8:	b189      	cbz	r1, ffee <settings_call_set_handler+0x46>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
    ffca:	1d3a      	adds	r2, r7, #4
    ffcc:	f01c fd4f 	bl	2ca6e <settings_name_steq>
	if (load_arg && load_arg->subtree &&
    ffd0:	b968      	cbnz	r0, ffee <settings_call_set_handler+0x46>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
    ffd2:	2000      	movs	r0, #0
    ffd4:	e007      	b.n	ffe6 <settings_call_set_handler+0x3e>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
    ffd6:	f8d9 3008 	ldr.w	r3, [r9, #8]
    ffda:	9300      	str	r3, [sp, #0]
    ffdc:	6878      	ldr	r0, [r7, #4]
    ffde:	4643      	mov	r3, r8
    ffe0:	4632      	mov	r2, r6
    ffe2:	4629      	mov	r1, r5
    ffe4:	47d0      	blx	sl
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
    ffe6:	3708      	adds	r7, #8
    ffe8:	46bd      	mov	sp, r7
    ffea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (load_arg && load_arg->cb) {
    ffee:	f8d9 a004 	ldr.w	sl, [r9, #4]
    fff2:	f1ba 0f00 	cmp.w	sl, #0
    fff6:	d1ee      	bne.n	ffd6 <settings_call_set_handler+0x2e>
		ch = settings_parse_and_lookup(name, &name_key);
    fff8:	1d39      	adds	r1, r7, #4
    fffa:	4620      	mov	r0, r4
    fffc:	f7ff ff8e 	bl	ff1c <settings_parse_and_lookup>
		if (!ch) {
   10000:	2800      	cmp	r0, #0
   10002:	d0e6      	beq.n	ffd2 <settings_call_set_handler+0x2a>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   10004:	f8d0 9008 	ldr.w	r9, [r0, #8]
   10008:	6878      	ldr	r0, [r7, #4]
   1000a:	4643      	mov	r3, r8
   1000c:	4632      	mov	r2, r6
   1000e:	4629      	mov	r1, r5
   10010:	47c8      	blx	r9
		if (rc != 0) {
   10012:	2800      	cmp	r0, #0
   10014:	d0dd      	beq.n	ffd2 <settings_call_set_handler+0x2a>
			LOG_ERR("set-value failure. key: %s error(%d)",
   10016:	4b0a      	ldr	r3, [pc, #40]	; (10040 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x41>)
   10018:	466d      	mov	r5, sp
   1001a:	b088      	sub	sp, #32
   1001c:	aa02      	add	r2, sp, #8
   1001e:	e9c2 3404 	strd	r3, r4, [r2, #16]
   10022:	2302      	movs	r3, #2
   10024:	7713      	strb	r3, [r2, #28]
   10026:	4b07      	ldr	r3, [pc, #28]	; (10044 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x45>)
   10028:	6190      	str	r0, [r2, #24]
   1002a:	f842 3f0c 	str.w	r3, [r2, #12]!
   1002e:	4806      	ldr	r0, [pc, #24]	; (10048 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x49>)
   10030:	2300      	movs	r3, #0
   10032:	f44f 5109 	mov.w	r1, #8768	; 0x2240
   10036:	f01c fa46 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
   1003a:	46ad      	mov	sp, r5
   1003c:	e7c9      	b.n	ffd2 <settings_call_set_handler+0x2a>
   1003e:	bf00      	nop
   10040:	0003459c 	.word	0x0003459c
   10044:	01000004 	.word	0x01000004
   10048:	000324f4 	.word	0x000324f4

0001004c <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   1004c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1004e:	4c18      	ldr	r4, [pc, #96]	; (100b0 <settings_commit_subtree+0x64>)
   10050:	4f18      	ldr	r7, [pc, #96]	; (100b4 <settings_commit_subtree+0x68>)
{
   10052:	4606      	mov	r6, r0
	rc = 0;
   10054:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   10056:	42bc      	cmp	r4, r7
   10058:	d308      	bcc.n	1006c <settings_commit_subtree+0x20>
	return list->head;
   1005a:	4b17      	ldr	r3, [pc, #92]	; (100b8 <settings_commit_subtree+0x6c>)
   1005c:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   1005e:	b324      	cbz	r4, 100aa <settings_commit_subtree+0x5e>
   10060:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   10062:	b9ae      	cbnz	r6, 10090 <settings_commit_subtree+0x44>
			continue;
		}
		if (ch->h_commit) {
   10064:	68e3      	ldr	r3, [r4, #12]
   10066:	b9db      	cbnz	r3, 100a0 <settings_commit_subtree+0x54>
	return node->next;
   10068:	6964      	ldr	r4, [r4, #20]
   1006a:	e7f8      	b.n	1005e <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   1006c:	b91e      	cbnz	r6, 10076 <settings_commit_subtree+0x2a>
		if (ch->h_commit) {
   1006e:	68e3      	ldr	r3, [r4, #12]
   10070:	b94b      	cbnz	r3, 10086 <settings_commit_subtree+0x3a>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   10072:	3414      	adds	r4, #20
   10074:	e7ef      	b.n	10056 <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   10076:	6820      	ldr	r0, [r4, #0]
   10078:	2200      	movs	r2, #0
   1007a:	4631      	mov	r1, r6
   1007c:	f01c fcf7 	bl	2ca6e <settings_name_steq>
   10080:	2800      	cmp	r0, #0
   10082:	d1f4      	bne.n	1006e <settings_commit_subtree+0x22>
   10084:	e7f5      	b.n	10072 <settings_commit_subtree+0x26>
			rc2 = ch->h_commit();
   10086:	4798      	blx	r3
				rc = rc2;
   10088:	2d00      	cmp	r5, #0
   1008a:	bf08      	it	eq
   1008c:	4605      	moveq	r5, r0
   1008e:	e7f0      	b.n	10072 <settings_commit_subtree+0x26>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   10090:	6820      	ldr	r0, [r4, #0]
   10092:	2200      	movs	r2, #0
   10094:	4631      	mov	r1, r6
   10096:	f01c fcea 	bl	2ca6e <settings_name_steq>
   1009a:	2800      	cmp	r0, #0
   1009c:	d1e2      	bne.n	10064 <settings_commit_subtree+0x18>
   1009e:	e7e3      	b.n	10068 <settings_commit_subtree+0x1c>
			rc2 = ch->h_commit();
   100a0:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   100a2:	2d00      	cmp	r5, #0
   100a4:	bf08      	it	eq
   100a6:	4605      	moveq	r5, r0
   100a8:	e7de      	b.n	10068 <settings_commit_subtree+0x1c>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   100aa:	4628      	mov	r0, r5
   100ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   100ae:	bf00      	nop
   100b0:	000322e4 	.word	0x000322e4
   100b4:	0003235c 	.word	0x0003235c
   100b8:	20001ddc 	.word	0x20001ddc

000100bc <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   100bc:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   100be:	4c06      	ldr	r4, [pc, #24]	; (100d8 <settings_subsys_init+0x1c>)
   100c0:	7823      	ldrb	r3, [r4, #0]
   100c2:	b93b      	cbnz	r3, 100d4 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   100c4:	f7ff ff22 	bl	ff0c <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   100c8:	f000 f864 	bl	10194 <settings_backend_init>

	if (!err) {
   100cc:	b908      	cbnz	r0, 100d2 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   100ce:	2301      	movs	r3, #1
   100d0:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   100d2:	bd10      	pop	{r4, pc}
		return 0;
   100d4:	2000      	movs	r0, #0
   100d6:	e7fc      	b.n	100d2 <settings_subsys_init+0x16>
   100d8:	200032da 	.word	0x200032da

000100dc <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   100dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   100e0:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
   100e2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 10190 <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
   100e6:	3401      	adds	r4, #1
{
   100e8:	b098      	sub	sp, #96	; 0x60
   100ea:	4680      	mov	r8, r0
   100ec:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
   100ee:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   100f0:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   100f4:	1e65      	subs	r5, r4, #1
   100f6:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   100f8:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   100fc:	d045      	beq.n	1018a <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   100fe:	234a      	movs	r3, #74	; 0x4a
   10100:	aa05      	add	r2, sp, #20
   10102:	4629      	mov	r1, r5
   10104:	4630      	mov	r0, r6
   10106:	f01c fc85 	bl	2ca14 <nvs_read>
   1010a:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   1010e:	343f      	adds	r4, #63	; 0x3f
   10110:	b2a4      	uxth	r4, r4
   10112:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   10114:	4621      	mov	r1, r4
   10116:	2301      	movs	r3, #1
   10118:	f10d 020b 	add.w	r2, sp, #11
   1011c:	4630      	mov	r0, r6
   1011e:	f01c fc79 	bl	2ca14 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   10122:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   10124:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   10126:	dc03      	bgt.n	10130 <settings_nvs_load+0x54>
   10128:	2800      	cmp	r0, #0
   1012a:	dc03      	bgt.n	10134 <settings_nvs_load+0x58>
{
   1012c:	462c      	mov	r4, r5
   1012e:	e7e1      	b.n	100f4 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   10130:	2800      	cmp	r0, #0
   10132:	dc16      	bgt.n	10162 <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   10134:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   10138:	42ab      	cmp	r3, r5
   1013a:	d109      	bne.n	10150 <settings_nvs_load+0x74>
				cf->last_name_id--;
   1013c:	4642      	mov	r2, r8
   1013e:	1e6b      	subs	r3, r5, #1
   10140:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   10144:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   10148:	2302      	movs	r3, #2
   1014a:	4630      	mov	r0, r6
   1014c:	f7ff fcca 	bl	fae4 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   10150:	4629      	mov	r1, r5
   10152:	4630      	mov	r0, r6
   10154:	f01c fc5a 	bl	2ca0c <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   10158:	4621      	mov	r1, r4
   1015a:	4630      	mov	r0, r6
   1015c:	f01c fc56 	bl	2ca0c <nvs_delete>
			continue;
   10160:	e7e4      	b.n	1012c <settings_nvs_load+0x50>
		name[rc1] = '\0';
   10162:	ab18      	add	r3, sp, #96	; 0x60
   10164:	441f      	add	r7, r3
   10166:	2300      	movs	r3, #0
   10168:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   1016c:	4652      	mov	r2, sl
   1016e:	f8cd 9000 	str.w	r9, [sp]
   10172:	ab03      	add	r3, sp, #12
   10174:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
   10176:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   10178:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   1017c:	f7ff ff14 	bl	ffa8 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   10180:	2800      	cmp	r0, #0
   10182:	d0d3      	beq.n	1012c <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   10184:	b018      	add	sp, #96	; 0x60
   10186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1018a:	2000      	movs	r0, #0
	return ret;
   1018c:	e7fa      	b.n	10184 <settings_nvs_load+0xa8>
   1018e:	bf00      	nop
   10190:	0002cae1 	.word	0x0002cae1

00010194 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   10194:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   10196:	2301      	movs	r3, #1

	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   10198:	4669      	mov	r1, sp
   1019a:	2004      	movs	r0, #4
	uint32_t sector_cnt = 1;
   1019c:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   1019e:	f7ff fddb 	bl	fd58 <flash_area_open>
	if (rc) {
   101a2:	4604      	mov	r4, r0
   101a4:	2800      	cmp	r0, #0
   101a6:	d136      	bne.n	10216 <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   101a8:	aa02      	add	r2, sp, #8
   101aa:	a901      	add	r1, sp, #4
   101ac:	2004      	movs	r0, #4
   101ae:	f7ff fdf1 	bl	fd94 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   101b2:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   101b6:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   101b8:	d02d      	beq.n	10216 <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   101ba:	b138      	cbz	r0, 101cc <settings_backend_init+0x38>
   101bc:	340c      	adds	r4, #12
   101be:	d005      	beq.n	101cc <settings_backend_init+0x38>
		k_panic();
   101c0:	4040      	eors	r0, r0
   101c2:	f380 8811 	msr	BASEPRI, r0
   101c6:	f04f 0004 	mov.w	r0, #4
   101ca:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   101cc:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   101ce:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   101d2:	d223      	bcs.n	1021c <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   101d4:	9a00      	ldr	r2, [sp, #0]
   101d6:	2300      	movs	r3, #0
   101d8:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
   101da:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
   101dc:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   101de:	4285      	cmp	r5, r0
   101e0:	b29c      	uxth	r4, r3
   101e2:	d303      	bcc.n	101ec <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   101e4:	3301      	adds	r3, #1
   101e6:	2b08      	cmp	r3, #8
   101e8:	d1f8      	bne.n	101dc <settings_backend_init+0x48>
   101ea:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   101ec:	4d0d      	ldr	r5, [pc, #52]	; (10224 <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   101ee:	6853      	ldr	r3, [r2, #4]
   101f0:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   101f2:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   101f4:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   101f6:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   101f8:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   101fa:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   101fc:	f01c fd07 	bl	2cc0e <settings_nvs_backend_init>
	if (rc) {
   10200:	4604      	mov	r4, r0
   10202:	b940      	cbnz	r0, 10216 <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   10204:	4e08      	ldr	r6, [pc, #32]	; (10228 <settings_backend_init+0x94>)
   10206:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   10208:	4628      	mov	r0, r5
   1020a:	f7ff fe1d 	bl	fe48 <settings_src_register>
	settings_dst_register(&cf->cf_store);
   1020e:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   10210:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   10212:	f7ff fe27 	bl	fe64 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   10216:	4620      	mov	r0, r4
   10218:	b004      	add	sp, #16
   1021a:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
   1021c:	f06f 0420 	mvn.w	r4, #32
   10220:	e7f9      	b.n	10216 <settings_backend_init+0x82>
   10222:	bf00      	nop
   10224:	20001de4 	.word	0x20001de4
   10228:	200002e4 	.word	0x200002e4

0001022c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   1022c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10230:	4605      	mov	r5, r0
	__asm__ volatile(
   10232:	f04f 0320 	mov.w	r3, #32
   10236:	f3ef 8611 	mrs	r6, BASEPRI
   1023a:	f383 8812 	msr	BASEPRI_MAX, r3
   1023e:	f3bf 8f6f 	isb	sy
	return list->head;
   10242:	4b0e      	ldr	r3, [pc, #56]	; (1027c <pm_state_notify+0x50>)
   10244:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   10246:	b19c      	cbz	r4, 10270 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   10248:	4f0d      	ldr	r7, [pc, #52]	; (10280 <pm_state_notify+0x54>)
   1024a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 10284 <pm_state_notify+0x58>
   1024e:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
   10252:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   10256:	2d00      	cmp	r5, #0
   10258:	bf08      	it	eq
   1025a:	4613      	moveq	r3, r2
		if (callback) {
   1025c:	b12b      	cbz	r3, 1026a <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   1025e:	f898 2014 	ldrb.w	r2, [r8, #20]
   10262:	fb09 f202 	mul.w	r2, r9, r2
   10266:	5cb8      	ldrb	r0, [r7, r2]
   10268:	4798      	blx	r3
	return node->next;
   1026a:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1026c:	2c00      	cmp	r4, #0
   1026e:	d1f0      	bne.n	10252 <pm_state_notify+0x26>
	__asm__ volatile(
   10270:	f386 8811 	msr	BASEPRI, r6
   10274:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   10278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1027c:	20001e24 	.word	0x20001e24
   10280:	20001e2c 	.word	0x20001e2c
   10284:	20003250 	.word	0x20003250

00010288 <atomic_clear_bit.constprop.0>:
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10288:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1028a:	2301      	movs	r3, #1
   1028c:	f000 001f 	and.w	r0, r0, #31
   10290:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10294:	4b07      	ldr	r3, [pc, #28]	; (102b4 <atomic_clear_bit.constprop.0+0x2c>)
   10296:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1029a:	43c0      	mvns	r0, r0
   1029c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   102a0:	e853 2f00 	ldrex	r2, [r3]
   102a4:	4002      	ands	r2, r0
   102a6:	e843 2100 	strex	r1, r2, [r3]
   102aa:	2900      	cmp	r1, #0
   102ac:	d1f8      	bne.n	102a0 <atomic_clear_bit.constprop.0+0x18>
   102ae:	f3bf 8f5b 	dmb	ish
}
   102b2:	4770      	bx	lr
   102b4:	20001e38 	.word	0x20001e38

000102b8 <pm_system_resume>:

void pm_system_resume(void)
{
   102b8:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
   102ba:	4b1a      	ldr	r3, [pc, #104]	; (10324 <pm_system_resume+0x6c>)
   102bc:	7d1c      	ldrb	r4, [r3, #20]
   102be:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   102c2:	f004 031f 	and.w	r3, r4, #31
   102c6:	2201      	movs	r2, #1
   102c8:	409a      	lsls	r2, r3
   102ca:	4b17      	ldr	r3, [pc, #92]	; (10328 <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   102cc:	0961      	lsrs	r1, r4, #5
   102ce:	43d0      	mvns	r0, r2
   102d0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   102d4:	e853 1f00 	ldrex	r1, [r3]
   102d8:	ea01 0500 	and.w	r5, r1, r0
   102dc:	e843 5c00 	strex	ip, r5, [r3]
   102e0:	f1bc 0f00 	cmp.w	ip, #0
   102e4:	d1f6      	bne.n	102d4 <pm_system_resume+0x1c>
   102e6:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   102ea:	4211      	tst	r1, r2
   102ec:	d013      	beq.n	10316 <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
   102ee:	4b0f      	ldr	r3, [pc, #60]	; (1032c <pm_system_resume+0x74>)
   102f0:	4d0f      	ldr	r5, [pc, #60]	; (10330 <pm_system_resume+0x78>)
   102f2:	b18b      	cbz	r3, 10318 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
   102f4:	230c      	movs	r3, #12
   102f6:	4363      	muls	r3, r4
   102f8:	18ea      	adds	r2, r5, r3
   102fa:	5ce8      	ldrb	r0, [r5, r3]
   102fc:	7851      	ldrb	r1, [r2, #1]
   102fe:	f01d feb7 	bl	2e070 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   10302:	2000      	movs	r0, #0
   10304:	f7ff ff92 	bl	1022c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   10308:	230c      	movs	r3, #12
   1030a:	435c      	muls	r4, r3
   1030c:	192a      	adds	r2, r5, r4
   1030e:	2300      	movs	r3, #0
   10310:	512b      	str	r3, [r5, r4]
   10312:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   10316:	bd38      	pop	{r3, r4, r5, pc}
   10318:	f383 8811 	msr	BASEPRI, r3
   1031c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   10320:	e7ef      	b.n	10302 <pm_system_resume+0x4a>
   10322:	bf00      	nop
   10324:	20003250 	.word	0x20003250
   10328:	20001e3c 	.word	0x20001e3c
   1032c:	0002e071 	.word	0x0002e071
   10330:	20001e2c 	.word	0x20001e2c

00010334 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   10334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   10338:	4b32      	ldr	r3, [pc, #200]	; (10404 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1033a:	4a33      	ldr	r2, [pc, #204]	; (10408 <pm_system_suspend+0xd4>)
   1033c:	7d1c      	ldrb	r4, [r3, #20]
   1033e:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10342:	0963      	lsrs	r3, r4, #5
   10344:	ea4f 0983 	mov.w	r9, r3, lsl #2
   10348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1034c:	4e2f      	ldr	r6, [pc, #188]	; (1040c <pm_system_suspend+0xd8>)
   1034e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   10352:	f004 081f 	and.w	r8, r4, #31
   10356:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   1035a:	f013 0f01 	tst.w	r3, #1
{
   1035e:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   10360:	d10a      	bne.n	10378 <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   10362:	4601      	mov	r1, r0
   10364:	4620      	mov	r0, r4
   10366:	f000 f869 	bl	1043c <pm_policy_next_state>
		if (info != NULL) {
   1036a:	b128      	cbz	r0, 10378 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
   1036c:	c807      	ldmia	r0, {r0, r1, r2}
   1036e:	230c      	movs	r3, #12
   10370:	fb03 6304 	mla	r3, r3, r4, r6
   10374:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   10378:	230c      	movs	r3, #12
   1037a:	4363      	muls	r3, r4
   1037c:	18f2      	adds	r2, r6, r3
   1037e:	5cf5      	ldrb	r5, [r6, r3]
   10380:	b92d      	cbnz	r5, 1038e <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
   10382:	4620      	mov	r0, r4
   10384:	f7ff ff80 	bl	10288 <atomic_clear_bit.constprop.0>
		ret = false;
   10388:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
   1038a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
   1038e:	1c7b      	adds	r3, r7, #1
   10390:	d00f      	beq.n	103b2 <pm_system_suspend+0x7e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   10392:	f8d2 c008 	ldr.w	ip, [r2, #8]
   10396:	481e      	ldr	r0, [pc, #120]	; (10410 <pm_system_suspend+0xdc>)
   10398:	4a1e      	ldr	r2, [pc, #120]	; (10414 <pm_system_suspend+0xe0>)
   1039a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1039e:	2100      	movs	r1, #0
   103a0:	2300      	movs	r3, #0
   103a2:	fbec 0105 	umlal	r0, r1, ip, r5
   103a6:	f7fb ffab 	bl	c300 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   103aa:	2101      	movs	r1, #1
   103ac:	1a38      	subs	r0, r7, r0
   103ae:	f021 fc2b 	bl	31c08 <z_set_timeout_expiry>
	k_sched_lock();
   103b2:	f01a fbd1 	bl	2ab58 <k_sched_lock>
	pm_state_notify(true);
   103b6:	2001      	movs	r0, #1
   103b8:	f7ff ff38 	bl	1022c <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   103bc:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   103c0:	2301      	movs	r3, #1
   103c2:	fa03 f808 	lsl.w	r8, r3, r8
   103c6:	4b14      	ldr	r3, [pc, #80]	; (10418 <pm_system_suspend+0xe4>)
   103c8:	4499      	add	r9, r3
   103ca:	e859 3f00 	ldrex	r3, [r9]
   103ce:	ea43 0308 	orr.w	r3, r3, r8
   103d2:	e849 3200 	strex	r2, r3, [r9]
   103d6:	2a00      	cmp	r2, #0
   103d8:	d1f7      	bne.n	103ca <pm_system_suspend+0x96>
   103da:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   103de:	4b0f      	ldr	r3, [pc, #60]	; (1041c <pm_system_suspend+0xe8>)
   103e0:	b133      	cbz	r3, 103f0 <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
   103e2:	230c      	movs	r3, #12
   103e4:	4363      	muls	r3, r4
   103e6:	18f2      	adds	r2, r6, r3
   103e8:	5cf0      	ldrb	r0, [r6, r3]
   103ea:	7851      	ldrb	r1, [r2, #1]
   103ec:	f01d fe34 	bl	2e058 <pm_state_set>
	pm_system_resume();
   103f0:	f7ff ff62 	bl	102b8 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
   103f4:	4620      	mov	r0, r4
   103f6:	f7ff ff47 	bl	10288 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
   103fa:	f01a fd7d 	bl	2aef8 <k_sched_unlock>
	bool ret = true;
   103fe:	2001      	movs	r0, #1
   10400:	e7c3      	b.n	1038a <pm_system_suspend+0x56>
   10402:	bf00      	nop
   10404:	20003250 	.word	0x20003250
   10408:	20001e38 	.word	0x20001e38
   1040c:	20001e2c 	.word	0x20001e2c
   10410:	000f423f 	.word	0x000f423f
   10414:	000f4240 	.word	0x000f4240
   10418:	20001e3c 	.word	0x20001e3c
   1041c:	0002e059 	.word	0x0002e059

00010420 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10420:	4b05      	ldr	r3, [pc, #20]	; (10438 <pm_policy_state_lock_is_active+0x18>)
   10422:	f3bf 8f5b 	dmb	ish
   10426:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1042a:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
   1042e:	3800      	subs	r0, #0
   10430:	bf18      	it	ne
   10432:	2001      	movne	r0, #1
   10434:	4770      	bx	lr
   10436:	bf00      	nop
   10438:	20001e40 	.word	0x20001e40

0001043c <pm_policy_next_state>:
{
   1043c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10440:	b085      	sub	sp, #20
   10442:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   10444:	a903      	add	r1, sp, #12
   10446:	f000 f847 	bl	104d8 <pm_state_cpu_get_all>
   1044a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 104cc <pm_policy_next_state+0x90>
   1044e:	f8df a080 	ldr.w	sl, [pc, #128]	; 104d0 <pm_policy_next_state+0x94>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   10452:	1e44      	subs	r4, r0, #1
   10454:	b224      	sxth	r4, r4
   10456:	f04f 0b00 	mov.w	fp, #0
   1045a:	1c63      	adds	r3, r4, #1
   1045c:	d104      	bne.n	10468 <pm_policy_next_state+0x2c>
	return NULL;
   1045e:	2600      	movs	r6, #0
}
   10460:	4630      	mov	r0, r6
   10462:	b005      	add	sp, #20
   10464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
   10468:	9a03      	ldr	r2, [sp, #12]
   1046a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1046e:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
   10472:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   10476:	f7ff ffd3 	bl	10420 <pm_policy_state_lock_is_active>
   1047a:	4605      	mov	r5, r0
   1047c:	bb10      	cbnz	r0, 104c4 <pm_policy_next_state+0x88>
   1047e:	6870      	ldr	r0, [r6, #4]
   10480:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   10484:	46c4      	mov	ip, r8
   10486:	4629      	mov	r1, r5
   10488:	fbe0 c109 	umlal	ip, r1, r0, r9
   1048c:	4652      	mov	r2, sl
   1048e:	465b      	mov	r3, fp
   10490:	4660      	mov	r0, ip
   10492:	f7fb ff35 	bl	c300 <__aeabi_uldivmod>
   10496:	9001      	str	r0, [sp, #4]
   10498:	68b0      	ldr	r0, [r6, #8]
   1049a:	46c4      	mov	ip, r8
   1049c:	4629      	mov	r1, r5
   1049e:	fbe0 c109 	umlal	ip, r1, r0, r9
   104a2:	465b      	mov	r3, fp
   104a4:	4652      	mov	r2, sl
   104a6:	4660      	mov	r0, ip
   104a8:	f7fb ff2a 	bl	c300 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   104ac:	4b09      	ldr	r3, [pc, #36]	; (104d4 <pm_policy_next_state+0x98>)
   104ae:	681b      	ldr	r3, [r3, #0]
   104b0:	1c59      	adds	r1, r3, #1
   104b2:	d001      	beq.n	104b8 <pm_policy_next_state+0x7c>
   104b4:	4283      	cmp	r3, r0
   104b6:	d905      	bls.n	104c4 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
   104b8:	1c7a      	adds	r2, r7, #1
   104ba:	d0d1      	beq.n	10460 <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
   104bc:	9b01      	ldr	r3, [sp, #4]
   104be:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   104c0:	42b8      	cmp	r0, r7
   104c2:	d9cd      	bls.n	10460 <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   104c4:	3c01      	subs	r4, #1
   104c6:	b224      	sxth	r4, r4
   104c8:	e7c7      	b.n	1045a <pm_policy_next_state+0x1e>
   104ca:	bf00      	nop
   104cc:	000f423f 	.word	0x000f423f
   104d0:	000f4240 	.word	0x000f4240
   104d4:	200002f4 	.word	0x200002f4

000104d8 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   104d8:	b908      	cbnz	r0, 104de <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   104da:	4b02      	ldr	r3, [pc, #8]	; (104e4 <pm_state_cpu_get_all+0xc>)
   104dc:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   104de:	2000      	movs	r0, #0
   104e0:	4770      	bx	lr
   104e2:	bf00      	nop
   104e4:	00032a1c 	.word	0x00032a1c

000104e8 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   104e8:	4b01      	ldr	r3, [pc, #4]	; (104f0 <uECC_get_rng+0x8>)
   104ea:	6818      	ldr	r0, [r3, #0]
   104ec:	4770      	bx	lr
   104ee:	bf00      	nop
   104f0:	200002f8 	.word	0x200002f8

000104f4 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   104f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   104f6:	2208      	movs	r2, #8
{
   104f8:	b089      	sub	sp, #36	; 0x24
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   104fa:	f01c fd59 	bl	2cfb0 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
   104fe:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   10500:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   10502:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   10504:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   10506:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   10508:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   1050a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   1050c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   1050e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   10510:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   10512:	4613      	mov	r3, r2
   10514:	466a      	mov	r2, sp
{
   10516:	460c      	mov	r4, r1
   10518:	4606      	mov	r6, r0
	tmp[0] = tmp[1] = tmp[2] = 0;
   1051a:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   1051c:	4611      	mov	r1, r2
   1051e:	4610      	mov	r0, r2
	tmp[0] = tmp[1] = tmp[2] = 0;
   10520:	e9cd 7701 	strd	r7, r7, [sp, #4]
   10524:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   10526:	f01c fc59 	bl	2cddc <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1052a:	4631      	mov	r1, r6
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   1052c:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1052e:	4630      	mov	r0, r6
   10530:	f01c fc54 	bl	2cddc <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
   10534:	6b21      	ldr	r1, [r4, #48]	; 0x30
   10536:	9103      	str	r1, [sp, #12]
	tmp[4] = product[13];
   10538:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1053a:	9104      	str	r1, [sp, #16]
	tmp[5] = product[14];
   1053c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   1053e:	9105      	str	r1, [sp, #20]
	tmp[6] = product[15];
   10540:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   10542:	4405      	add	r5, r0
	tmp[7] = 0;
   10544:	e9cd 1706 	strd	r1, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   10548:	4610      	mov	r0, r2
   1054a:	4611      	mov	r1, r2
   1054c:	f01c fc46 	bl	2cddc <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   10550:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   10552:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   10554:	4630      	mov	r0, r6
   10556:	f01c fc41 	bl	2cddc <uECC_vli_add>
   1055a:	4405      	add	r5, r0

	/* s3 */
	tmp[0] = product[8];
   1055c:	6a20      	ldr	r0, [r4, #32]
   1055e:	9000      	str	r0, [sp, #0]
	tmp[1] = product[9];
   10560:	6a60      	ldr	r0, [r4, #36]	; 0x24
   10562:	9001      	str	r0, [sp, #4]
	tmp[2] = product[10];
   10564:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   10566:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
   10568:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1056a:	9006      	str	r0, [sp, #24]
	tmp[7] = product[15];
   1056c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1056e:	9007      	str	r0, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   10570:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   10572:	e9cd 7704 	strd	r7, r7, [sp, #16]
   10576:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   10578:	f01c fc30 	bl	2cddc <uECC_vli_add>
   1057c:	4405      	add	r5, r0

	/* s4 */
	tmp[0] = product[9];
   1057e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   10580:	9000      	str	r0, [sp, #0]
	tmp[1] = product[10];
   10582:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
   10584:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
	tmp[1] = product[10];
   10588:	9001      	str	r0, [sp, #4]
	tmp[2] = product[11];
   1058a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1058c:	9002      	str	r0, [sp, #8]
	tmp[4] = product[14];
   1058e:	f8cd c010 	str.w	ip, [sp, #16]
	tmp[3] = product[13];
   10592:	6b60      	ldr	r0, [r4, #52]	; 0x34
	tmp[5] = product[15];
   10594:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
	tmp[3] = product[13];
   10598:	9003      	str	r0, [sp, #12]
	tmp[6] = product[13];
   1059a:	e9cd c005 	strd	ip, r0, [sp, #20]
	tmp[7] = product[8];
   1059e:	6a20      	ldr	r0, [r4, #32]
   105a0:	9007      	str	r0, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   105a2:	4630      	mov	r0, r6
   105a4:	f01c fc1a 	bl	2cddc <uECC_vli_add>
   105a8:	4405      	add	r5, r0

	/* d1 */
	tmp[0] = product[11];
   105aa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   105ac:	9000      	str	r0, [sp, #0]
	tmp[1] = product[12];
   105ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
   105b0:	9001      	str	r0, [sp, #4]
	tmp[2] = product[13];
   105b2:	6b60      	ldr	r0, [r4, #52]	; 0x34
   105b4:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
   105b6:	6a20      	ldr	r0, [r4, #32]
   105b8:	9006      	str	r0, [sp, #24]
	tmp[7] = product[10];
   105ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   105bc:	9007      	str	r0, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   105be:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   105c0:	e9cd 7704 	strd	r7, r7, [sp, #16]
   105c4:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   105c6:	f01c fd26 	bl	2d016 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
   105ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
   105cc:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   105ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
   105d0:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   105d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   105d4:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   105d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   105d8:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
   105da:	6a63      	ldr	r3, [r4, #36]	; 0x24
   105dc:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   105de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   105e0:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   105e2:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   105e4:	2308      	movs	r3, #8
   105e6:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
   105e8:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   105ec:	f01c fd13 	bl	2d016 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
   105f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   105f2:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   105f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   105f6:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   105f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   105fa:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   105fc:	6a23      	ldr	r3, [r4, #32]
   105fe:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   10600:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10602:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   10604:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
   10606:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
   1060a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1060c:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1060e:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   10610:	2308      	movs	r3, #8
   10612:	4630      	mov	r0, r6
   10614:	f01c fcff 	bl	2d016 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
   10618:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1061a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   1061c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
   1061e:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
   10622:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10624:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   10626:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10628:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   1062a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
   1062c:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
   10630:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10632:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   10634:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   10636:	2308      	movs	r3, #8
   10638:	4630      	mov	r0, r6
   1063a:	f01c fcec 	bl	2d016 <uECC_vli_sub>

	if (carry < 0) {
   1063e:	1a2d      	subs	r5, r5, r0
   10640:	d410      	bmi.n	10664 <vli_mmod_fast_secp256r1+0x170>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   10642:	4c0d      	ldr	r4, [pc, #52]	; (10678 <vli_mmod_fast_secp256r1+0x184>)
		while (carry || 
   10644:	b935      	cbnz	r5, 10654 <vli_mmod_fast_secp256r1+0x160>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   10646:	2208      	movs	r2, #8
   10648:	4631      	mov	r1, r6
   1064a:	4620      	mov	r0, r4
   1064c:	f01c fcbc 	bl	2cfc8 <uECC_vli_cmp_unsafe>
		while (carry || 
   10650:	2801      	cmp	r0, #1
   10652:	d00f      	beq.n	10674 <vli_mmod_fast_secp256r1+0x180>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   10654:	2308      	movs	r3, #8
   10656:	4622      	mov	r2, r4
   10658:	4631      	mov	r1, r6
   1065a:	4630      	mov	r0, r6
   1065c:	f01c fcdb 	bl	2d016 <uECC_vli_sub>
   10660:	1a2d      	subs	r5, r5, r0
   10662:	e7ef      	b.n	10644 <vli_mmod_fast_secp256r1+0x150>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   10664:	4a04      	ldr	r2, [pc, #16]	; (10678 <vli_mmod_fast_secp256r1+0x184>)
   10666:	2308      	movs	r3, #8
   10668:	4631      	mov	r1, r6
   1066a:	4630      	mov	r0, r6
   1066c:	f01c fbb6 	bl	2cddc <uECC_vli_add>
		while (carry < 0);
   10670:	182d      	adds	r5, r5, r0
   10672:	d4f8      	bmi.n	10666 <vli_mmod_fast_secp256r1+0x172>
		}
	}
}
   10674:	b009      	add	sp, #36	; 0x24
   10676:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10678:	00032a20 	.word	0x00032a20

0001067c <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   1067c:	4904      	ldr	r1, [pc, #16]	; (10690 <sub_bytes+0x14>)
   1067e:	1e43      	subs	r3, r0, #1
   10680:	300f      	adds	r0, #15
   10682:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   10686:	5c8a      	ldrb	r2, [r1, r2]
   10688:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   1068a:	4283      	cmp	r3, r0
   1068c:	d1f9      	bne.n	10682 <sub_bytes+0x6>
	}
}
   1068e:	4770      	bx	lr
   10690:	000345c4 	.word	0x000345c4

00010694 <tc_aes128_set_encrypt_key>:
{
   10694:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   10696:	4e26      	ldr	r6, [pc, #152]	; (10730 <tc_aes128_set_encrypt_key+0x9c>)
{
   10698:	4607      	mov	r7, r0
   1069a:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   1069c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   1069e:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   106a0:	ad01      	add	r5, sp, #4
   106a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   106a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   106a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   106a8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   106ac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   106b0:	4638      	mov	r0, r7
   106b2:	2f00      	cmp	r7, #0
   106b4:	d038      	beq.n	10728 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   106b6:	2c00      	cmp	r4, #0
   106b8:	d038      	beq.n	1072c <tc_aes128_set_encrypt_key+0x98>
   106ba:	1f38      	subs	r0, r7, #4
   106bc:	4621      	mov	r1, r4
   106be:	4602      	mov	r2, r0
   106c0:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   106c2:	784b      	ldrb	r3, [r1, #1]
   106c4:	780d      	ldrb	r5, [r1, #0]
   106c6:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   106c8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   106cc:	78cd      	ldrb	r5, [r1, #3]
   106ce:	432b      	orrs	r3, r5
   106d0:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   106d2:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   106d4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   106d8:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   106da:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   106de:	d1f0      	bne.n	106c2 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   106e0:	4c14      	ldr	r4, [pc, #80]	; (10734 <tc_aes128_set_encrypt_key+0xa0>)
   106e2:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   106e4:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   106e6:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   106e8:	d116      	bne.n	10718 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   106ea:	f3c3 4207 	ubfx	r2, r3, #16, #8
   106ee:	5ca5      	ldrb	r5, [r4, r2]
   106f0:	0e1a      	lsrs	r2, r3, #24
   106f2:	5ca2      	ldrb	r2, [r4, r2]
   106f4:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   106f8:	f3c3 2507 	ubfx	r5, r3, #8, #8
   106fc:	b2db      	uxtb	r3, r3
   106fe:	5d65      	ldrb	r5, [r4, r5]
   10700:	5ce3      	ldrb	r3, [r4, r3]
   10702:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   10706:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   1070a:	ad0c      	add	r5, sp, #48	; 0x30
   1070c:	f021 0303 	bic.w	r3, r1, #3
   10710:	442b      	add	r3, r5
   10712:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   10716:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   10718:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   1071c:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   1071e:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   10720:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   10722:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   10724:	d1de      	bne.n	106e4 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   10726:	2001      	movs	r0, #1
}
   10728:	b00d      	add	sp, #52	; 0x34
   1072a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1072c:	4620      	mov	r0, r4
   1072e:	e7fb      	b.n	10728 <tc_aes128_set_encrypt_key+0x94>
   10730:	00032574 	.word	0x00032574
   10734:	000345c4 	.word	0x000345c4

00010738 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   10738:	4901      	ldr	r1, [pc, #4]	; (10740 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1073a:	2210      	movs	r2, #16
	str	r2, [r1]
   1073c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1073e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   10740:	e000ed10 	.word	0xe000ed10

00010744 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   10744:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   10746:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   10748:	f380 8811 	msr	BASEPRI, r0
	isb
   1074c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   10750:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   10754:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   10756:	b662      	cpsie	i
	isb
   10758:	f3bf 8f6f 	isb	sy

	bx	lr
   1075c:	4770      	bx	lr
   1075e:	bf00      	nop

00010760 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   10760:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   10762:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   10764:	f381 8811 	msr	BASEPRI, r1

	wfe
   10768:	bf20      	wfe

	msr	BASEPRI, r0
   1076a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1076e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   10770:	4770      	bx	lr
   10772:	bf00      	nop

00010774 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   10774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10778:	b086      	sub	sp, #24
   1077a:	4680      	mov	r8, r0
   1077c:	af00      	add	r7, sp, #0

	if (esf != NULL) {
   1077e:	460c      	mov	r4, r1
   10780:	2900      	cmp	r1, #0
   10782:	d045      	beq.n	10810 <z_arm_fatal_error+0x9c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   10784:	46e9      	mov	r9, sp
   10786:	b088      	sub	sp, #32
   10788:	466d      	mov	r5, sp
   1078a:	e9d1 1200 	ldrd	r1, r2, [r1]
   1078e:	68a3      	ldr	r3, [r4, #8]
   10790:	4823      	ldr	r0, [pc, #140]	; (10820 <z_arm_fatal_error+0xac>)
   10792:	462e      	mov	r6, r5
   10794:	f04f 0a05 	mov.w	sl, #5
   10798:	e9c5 0104 	strd	r0, r1, [r5, #16]
   1079c:	e9c5 2306 	strd	r2, r3, [r5, #24]
   107a0:	f846 af0c 	str.w	sl, [r6, #12]!
   107a4:	481f      	ldr	r0, [pc, #124]	; (10824 <z_arm_fatal_error+0xb0>)
   107a6:	4632      	mov	r2, r6
   107a8:	2300      	movs	r3, #0
   107aa:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   107ae:	f01b fe8a 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   107b2:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   107b6:	6963      	ldr	r3, [r4, #20]
   107b8:	481b      	ldr	r0, [pc, #108]	; (10828 <z_arm_fatal_error+0xb4>)
   107ba:	f8c5 a00c 	str.w	sl, [r5, #12]
   107be:	46cd      	mov	sp, r9
   107c0:	e9c5 0104 	strd	r0, r1, [r5, #16]
   107c4:	e9c5 2306 	strd	r2, r3, [r5, #24]
   107c8:	46ad      	mov	sp, r5
   107ca:	4816      	ldr	r0, [pc, #88]	; (10824 <z_arm_fatal_error+0xb0>)
   107cc:	4632      	mov	r2, r6
   107ce:	2300      	movs	r3, #0
   107d0:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   107d4:	f01b fe77 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   107d8:	4a14      	ldr	r2, [pc, #80]	; (1082c <z_arm_fatal_error+0xb8>)
   107da:	69e3      	ldr	r3, [r4, #28]
   107dc:	2503      	movs	r5, #3
   107de:	e9c7 2304 	strd	r2, r3, [r7, #16]
   107e2:	46cd      	mov	sp, r9
   107e4:	60fd      	str	r5, [r7, #12]
   107e6:	480f      	ldr	r0, [pc, #60]	; (10824 <z_arm_fatal_error+0xb0>)
   107e8:	f107 020c 	add.w	r2, r7, #12
   107ec:	2300      	movs	r3, #0
   107ee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   107f2:	f01b fe68 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   107f6:	4a0e      	ldr	r2, [pc, #56]	; (10830 <z_arm_fatal_error+0xbc>)
   107f8:	69a3      	ldr	r3, [r4, #24]
   107fa:	60fd      	str	r5, [r7, #12]
   107fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
   10800:	4808      	ldr	r0, [pc, #32]	; (10824 <z_arm_fatal_error+0xb0>)
   10802:	2300      	movs	r3, #0
   10804:	f107 020c 	add.w	r2, r7, #12
   10808:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1080c:	f01b fe5b 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   10810:	4621      	mov	r1, r4
   10812:	4640      	mov	r0, r8
   10814:	f019 fbce 	bl	29fb4 <z_fatal_error>
}
   10818:	3718      	adds	r7, #24
   1081a:	46bd      	mov	sp, r7
   1081c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10820:	000346c4 	.word	0x000346c4
   10824:	000324e4 	.word	0x000324e4
   10828:	000346f3 	.word	0x000346f3
   1082c:	00034722 	.word	0x00034722
   10830:	00034731 	.word	0x00034731

00010834 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   10834:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   10836:	2b00      	cmp	r3, #0
   10838:	db08      	blt.n	1084c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1083a:	2201      	movs	r2, #1
   1083c:	f000 001f 	and.w	r0, r0, #31
   10840:	fa02 f000 	lsl.w	r0, r2, r0
   10844:	095b      	lsrs	r3, r3, #5
   10846:	4a02      	ldr	r2, [pc, #8]	; (10850 <arch_irq_enable+0x1c>)
   10848:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   1084c:	4770      	bx	lr
   1084e:	bf00      	nop
   10850:	e000e100 	.word	0xe000e100

00010854 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   10854:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   10856:	2b00      	cmp	r3, #0
   10858:	db0d      	blt.n	10876 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1085a:	2201      	movs	r2, #1
   1085c:	095b      	lsrs	r3, r3, #5
   1085e:	f000 001f 	and.w	r0, r0, #31
   10862:	fa02 f000 	lsl.w	r0, r2, r0
   10866:	3320      	adds	r3, #32
   10868:	4a03      	ldr	r2, [pc, #12]	; (10878 <arch_irq_disable+0x24>)
   1086a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1086e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10872:	f3bf 8f6f 	isb	sy
}
   10876:	4770      	bx	lr
   10878:	e000e100 	.word	0xe000e100

0001087c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   1087c:	4b05      	ldr	r3, [pc, #20]	; (10894 <arch_irq_is_enabled+0x18>)
   1087e:	0942      	lsrs	r2, r0, #5
   10880:	f000 001f 	and.w	r0, r0, #31
   10884:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   10888:	2301      	movs	r3, #1
   1088a:	fa03 f000 	lsl.w	r0, r3, r0
}
   1088e:	4010      	ands	r0, r2
   10890:	4770      	bx	lr
   10892:	bf00      	nop
   10894:	e000e100 	.word	0xe000e100

00010898 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   10898:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1089a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1089c:	bfa8      	it	ge
   1089e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
   108a2:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   108a6:	bfb8      	it	lt
   108a8:	4b06      	ldrlt	r3, [pc, #24]	; (108c4 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   108aa:	ea4f 1141 	mov.w	r1, r1, lsl #5
   108ae:	bfac      	ite	ge
   108b0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   108b4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   108b8:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   108ba:	bfb4      	ite	lt
   108bc:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   108be:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
   108c2:	4770      	bx	lr
   108c4:	e000ed14 	.word	0xe000ed14

000108c8 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   108c8:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   108ca:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   108cc:	4b04      	ldr	r3, [pc, #16]	; (108e0 <_arch_isr_direct_pm+0x18>)
   108ce:	699a      	ldr	r2, [r3, #24]
   108d0:	b11a      	cbz	r2, 108da <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   108d2:	2200      	movs	r2, #0
   108d4:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   108d6:	f020 fe8b 	bl	315f0 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   108da:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   108dc:	bd08      	pop	{r3, pc}
   108de:	bf00      	nop
   108e0:	20003250 	.word	0x20003250

000108e4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   108e4:	bf30      	wfi
    b z_SysNmiOnReset
   108e6:	f7ff bffd 	b.w	108e4 <z_SysNmiOnReset>
   108ea:	bf00      	nop

000108ec <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   108ec:	4a0b      	ldr	r2, [pc, #44]	; (1091c <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   108ee:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   108f0:	4b0b      	ldr	r3, [pc, #44]	; (10920 <z_arm_prep_c+0x34>)
   108f2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   108f6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   108f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   108fc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   10900:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   10904:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   10908:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   1090c:	f019 fbe8 	bl	2a0e0 <z_bss_zero>
	z_data_copy();
   10910:	f01a fc36 	bl	2b180 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   10914:	f000 fb94 	bl	11040 <z_arm_interrupt_init>
	z_cstart();
   10918:	f019 fc26 	bl	2a168 <z_cstart>
   1091c:	0000c200 	.word	0x0000c200
   10920:	e000ed00 	.word	0xe000ed00

00010924 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   10924:	4a09      	ldr	r2, [pc, #36]	; (1094c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   10926:	490a      	ldr	r1, [pc, #40]	; (10950 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   10928:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1092a:	6809      	ldr	r1, [r1, #0]
   1092c:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1092e:	4909      	ldr	r1, [pc, #36]	; (10954 <arch_swap+0x30>)
	_current->arch.basepri = key;
   10930:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   10932:	684b      	ldr	r3, [r1, #4]
   10934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   10938:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   1093a:	2300      	movs	r3, #0
   1093c:	f383 8811 	msr	BASEPRI, r3
   10940:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   10944:	6893      	ldr	r3, [r2, #8]
}
   10946:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   10948:	4770      	bx	lr
   1094a:	bf00      	nop
   1094c:	20003250 	.word	0x20003250
   10950:	0003412c 	.word	0x0003412c
   10954:	e000ed00 	.word	0xe000ed00

00010958 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   10958:	4912      	ldr	r1, [pc, #72]	; (109a4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1095a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   1095c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   10960:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   10962:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   10966:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1096a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   1096c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   10970:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   10974:	4f0c      	ldr	r7, [pc, #48]	; (109a8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   10976:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1097a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   1097c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1097e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   10980:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   10982:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   10984:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   10986:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   1098a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   1098c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   1098e:	f000 fbf3 	bl	11178 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   10992:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   10996:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1099a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1099e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   109a2:	4770      	bx	lr
    ldr r1, =_kernel
   109a4:	20003250 	.word	0x20003250
    ldr v4, =_SCS_ICSR
   109a8:	e000ed04 	.word	0xe000ed04

000109ac <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   109ac:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   109b0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   109b2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   109b6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   109ba:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   109bc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   109c0:	2902      	cmp	r1, #2
    beq _oops
   109c2:	d0ff      	beq.n	109c4 <_oops>

000109c4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   109c4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   109c6:	f01d fa4b 	bl	2de60 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   109ca:	bd01      	pop	{r0, pc}

000109cc <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   109cc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   109d0:	9b00      	ldr	r3, [sp, #0]
   109d2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   109d6:	490a      	ldr	r1, [pc, #40]	; (10a00 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   109d8:	9b01      	ldr	r3, [sp, #4]
   109da:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   109de:	9b02      	ldr	r3, [sp, #8]
   109e0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   109e4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   109e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   109ec:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   109f0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   109f4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   109f6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   109f8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   109fa:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   109fc:	4770      	bx	lr
   109fe:	bf00      	nop
   10a00:	0002bb6f 	.word	0x0002bb6f

00010a04 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   10a04:	4a09      	ldr	r2, [pc, #36]	; (10a2c <z_check_thread_stack_fail+0x28>)
{
   10a06:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   10a08:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   10a0a:	b170      	cbz	r0, 10a2a <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   10a0c:	f113 0f16 	cmn.w	r3, #22
   10a10:	6e80      	ldr	r0, [r0, #104]	; 0x68
   10a12:	d005      	beq.n	10a20 <z_check_thread_stack_fail+0x1c>
   10a14:	f1a0 0220 	sub.w	r2, r0, #32
   10a18:	429a      	cmp	r2, r3
   10a1a:	d805      	bhi.n	10a28 <z_check_thread_stack_fail+0x24>
   10a1c:	4283      	cmp	r3, r0
   10a1e:	d203      	bcs.n	10a28 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   10a20:	4281      	cmp	r1, r0
   10a22:	bf28      	it	cs
   10a24:	2000      	movcs	r0, #0
   10a26:	4770      	bx	lr
   10a28:	2000      	movs	r0, #0
}
   10a2a:	4770      	bx	lr
   10a2c:	20003250 	.word	0x20003250

00010a30 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   10a30:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   10a32:	4b09      	ldr	r3, [pc, #36]	; (10a58 <arch_switch_to_main_thread+0x28>)
   10a34:	6098      	str	r0, [r3, #8]
{
   10a36:	460d      	mov	r5, r1
   10a38:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   10a3a:	f000 fb9d 	bl	11178 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   10a3e:	4620      	mov	r0, r4
   10a40:	f385 8809 	msr	PSP, r5
   10a44:	2100      	movs	r1, #0
   10a46:	b663      	cpsie	if
   10a48:	f381 8811 	msr	BASEPRI, r1
   10a4c:	f3bf 8f6f 	isb	sy
   10a50:	2200      	movs	r2, #0
   10a52:	2300      	movs	r3, #0
   10a54:	f01b f88b 	bl	2bb6e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   10a58:	20003250 	.word	0x20003250

00010a5c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   10a5c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   10a5e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   10a60:	4a0b      	ldr	r2, [pc, #44]	; (10a90 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   10a62:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   10a64:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   10a66:	bf1e      	ittt	ne
	movne	r1, #0
   10a68:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   10a6a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   10a6c:	f020 fdc0 	blne	315f0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   10a70:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   10a72:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   10a76:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   10a7a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   10a7e:	4905      	ldr	r1, [pc, #20]	; (10a94 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   10a80:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   10a82:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   10a84:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   10a86:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   10a8a:	4903      	ldr	r1, [pc, #12]	; (10a98 <_isr_wrapper+0x3c>)
	bx r1
   10a8c:	4708      	bx	r1
   10a8e:	0000      	.short	0x0000
	ldr r2, =_kernel
   10a90:	20003250 	.word	0x20003250
	ldr r1, =_sw_isr_table
   10a94:	000320ec 	.word	0x000320ec
	ldr r1, =z_arm_int_exit
   10a98:	00010a9d 	.word	0x00010a9d

00010a9c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   10a9c:	4b04      	ldr	r3, [pc, #16]	; (10ab0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   10a9e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   10aa0:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   10aa2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   10aa4:	d003      	beq.n	10aae <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   10aa6:	4903      	ldr	r1, [pc, #12]	; (10ab4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   10aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   10aac:	600a      	str	r2, [r1, #0]

00010aae <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   10aae:	4770      	bx	lr
	ldr r3, =_kernel
   10ab0:	20003250 	.word	0x20003250
	ldr r1, =_SCS_ICSR
   10ab4:	e000ed04 	.word	0xe000ed04

00010ab8 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   10ab8:	b570      	push	{r4, r5, r6, lr}
   10aba:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   10abc:	4b39      	ldr	r3, [pc, #228]	; (10ba4 <bus_fault.constprop.0+0xec>)
   10abe:	9304      	str	r3, [sp, #16]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   10ac0:	4606      	mov	r6, r0
   10ac2:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   10ac4:	4838      	ldr	r0, [pc, #224]	; (10ba8 <bus_fault.constprop.0+0xf0>)
   10ac6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10aca:	2402      	movs	r4, #2
   10acc:	aa03      	add	r2, sp, #12
   10ace:	9403      	str	r4, [sp, #12]
   10ad0:	f01d f9d5 	bl	2de7e <z_log_msg2_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   10ad4:	4b35      	ldr	r3, [pc, #212]	; (10bac <bus_fault.constprop.0+0xf4>)
   10ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10ad8:	04d9      	lsls	r1, r3, #19
   10ada:	d508      	bpl.n	10aee <bus_fault.constprop.0+0x36>
		PR_FAULT_INFO("  Stacking error");
   10adc:	4b34      	ldr	r3, [pc, #208]	; (10bb0 <bus_fault.constprop.0+0xf8>)
   10ade:	4832      	ldr	r0, [pc, #200]	; (10ba8 <bus_fault.constprop.0+0xf0>)
   10ae0:	aa03      	add	r2, sp, #12
   10ae2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10ae6:	e9cd 4303 	strd	r4, r3, [sp, #12]
   10aea:	f01d f9c8 	bl	2de7e <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   10aee:	4b2f      	ldr	r3, [pc, #188]	; (10bac <bus_fault.constprop.0+0xf4>)
   10af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10af2:	051a      	lsls	r2, r3, #20
   10af4:	d509      	bpl.n	10b0a <bus_fault.constprop.0+0x52>
		PR_FAULT_INFO("  Unstacking error");
   10af6:	4b2f      	ldr	r3, [pc, #188]	; (10bb4 <bus_fault.constprop.0+0xfc>)
   10af8:	9304      	str	r3, [sp, #16]
   10afa:	482b      	ldr	r0, [pc, #172]	; (10ba8 <bus_fault.constprop.0+0xf0>)
   10afc:	2302      	movs	r3, #2
   10afe:	aa03      	add	r2, sp, #12
   10b00:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10b04:	9303      	str	r3, [sp, #12]
   10b06:	f01d f9ba 	bl	2de7e <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   10b0a:	4c28      	ldr	r4, [pc, #160]	; (10bac <bus_fault.constprop.0+0xf4>)
   10b0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10b0e:	059b      	lsls	r3, r3, #22
   10b10:	d51d      	bpl.n	10b4e <bus_fault.constprop.0+0x96>
		PR_FAULT_INFO("  Precise data bus error");
   10b12:	4b29      	ldr	r3, [pc, #164]	; (10bb8 <bus_fault.constprop.0+0x100>)
   10b14:	4824      	ldr	r0, [pc, #144]	; (10ba8 <bus_fault.constprop.0+0xf0>)
   10b16:	9304      	str	r3, [sp, #16]
   10b18:	aa03      	add	r2, sp, #12
   10b1a:	2302      	movs	r3, #2
   10b1c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10b20:	9303      	str	r3, [sp, #12]
   10b22:	f01d f9ac 	bl	2de7e <z_log_msg2_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   10b26:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   10b28:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   10b2a:	0410      	lsls	r0, r2, #16
   10b2c:	d50f      	bpl.n	10b4e <bus_fault.constprop.0+0x96>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   10b2e:	4a23      	ldr	r2, [pc, #140]	; (10bbc <bus_fault.constprop.0+0x104>)
   10b30:	481d      	ldr	r0, [pc, #116]	; (10ba8 <bus_fault.constprop.0+0xf0>)
   10b32:	e9cd 2304 	strd	r2, r3, [sp, #16]
   10b36:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10b3a:	2303      	movs	r3, #3
   10b3c:	aa03      	add	r2, sp, #12
   10b3e:	9303      	str	r3, [sp, #12]
   10b40:	f01d f99d 	bl	2de7e <z_log_msg2_static_create.constprop.0>
			if (from_hard_fault != 0) {
   10b44:	b11e      	cbz	r6, 10b4e <bus_fault.constprop.0+0x96>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   10b46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10b48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   10b4c:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   10b4e:	4b17      	ldr	r3, [pc, #92]	; (10bac <bus_fault.constprop.0+0xf4>)
   10b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10b52:	0559      	lsls	r1, r3, #21
   10b54:	d509      	bpl.n	10b6a <bus_fault.constprop.0+0xb2>
		PR_FAULT_INFO("  Imprecise data bus error");
   10b56:	4b1a      	ldr	r3, [pc, #104]	; (10bc0 <bus_fault.constprop.0+0x108>)
   10b58:	9304      	str	r3, [sp, #16]
   10b5a:	4813      	ldr	r0, [pc, #76]	; (10ba8 <bus_fault.constprop.0+0xf0>)
   10b5c:	2302      	movs	r3, #2
   10b5e:	aa03      	add	r2, sp, #12
   10b60:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10b64:	9303      	str	r3, [sp, #12]
   10b66:	f01d f98a 	bl	2de7e <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   10b6a:	4b10      	ldr	r3, [pc, #64]	; (10bac <bus_fault.constprop.0+0xf4>)
   10b6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10b6e:	05d2      	lsls	r2, r2, #23
   10b70:	d512      	bpl.n	10b98 <bus_fault.constprop.0+0xe0>
		PR_FAULT_INFO("  Instruction bus error");
   10b72:	4b14      	ldr	r3, [pc, #80]	; (10bc4 <bus_fault.constprop.0+0x10c>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   10b74:	9304      	str	r3, [sp, #16]
   10b76:	480c      	ldr	r0, [pc, #48]	; (10ba8 <bus_fault.constprop.0+0xf0>)
   10b78:	2302      	movs	r3, #2
   10b7a:	aa03      	add	r2, sp, #12
   10b7c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10b80:	9303      	str	r3, [sp, #12]
   10b82:	f01d f97c 	bl	2de7e <z_log_msg2_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   10b86:	4a09      	ldr	r2, [pc, #36]	; (10bac <bus_fault.constprop.0+0xf4>)
   10b88:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   10b8a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   10b8c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   10b90:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   10b92:	7028      	strb	r0, [r5, #0]

	return reason;
}
   10b94:	b006      	add	sp, #24
   10b96:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   10b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10b9a:	049b      	lsls	r3, r3, #18
   10b9c:	d5f3      	bpl.n	10b86 <bus_fault.constprop.0+0xce>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   10b9e:	4b0a      	ldr	r3, [pc, #40]	; (10bc8 <bus_fault.constprop.0+0x110>)
   10ba0:	e7e8      	b.n	10b74 <bus_fault.constprop.0+0xbc>
   10ba2:	bf00      	nop
   10ba4:	0003475f 	.word	0x0003475f
   10ba8:	000324e4 	.word	0x000324e4
   10bac:	e000ed00 	.word	0xe000ed00
   10bb0:	00034775 	.word	0x00034775
   10bb4:	00034786 	.word	0x00034786
   10bb8:	00034799 	.word	0x00034799
   10bbc:	000347b2 	.word	0x000347b2
   10bc0:	000347c7 	.word	0x000347c7
   10bc4:	000347e2 	.word	0x000347e2
   10bc8:	000347fa 	.word	0x000347fa

00010bcc <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   10bcc:	b510      	push	{r4, lr}
   10bce:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   10bd0:	4b33      	ldr	r3, [pc, #204]	; (10ca0 <usage_fault.constprop.0+0xd4>)
   10bd2:	4834      	ldr	r0, [pc, #208]	; (10ca4 <usage_fault.constprop.0+0xd8>)
   10bd4:	9304      	str	r3, [sp, #16]
   10bd6:	2402      	movs	r4, #2
   10bd8:	aa03      	add	r2, sp, #12
   10bda:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10bde:	9403      	str	r4, [sp, #12]
   10be0:	f01d f94d 	bl	2de7e <z_log_msg2_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   10be4:	4b30      	ldr	r3, [pc, #192]	; (10ca8 <usage_fault.constprop.0+0xdc>)
   10be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10be8:	019b      	lsls	r3, r3, #6
   10bea:	d508      	bpl.n	10bfe <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
   10bec:	4b2f      	ldr	r3, [pc, #188]	; (10cac <usage_fault.constprop.0+0xe0>)
   10bee:	482d      	ldr	r0, [pc, #180]	; (10ca4 <usage_fault.constprop.0+0xd8>)
   10bf0:	aa03      	add	r2, sp, #12
   10bf2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10bf6:	e9cd 4303 	strd	r4, r3, [sp, #12]
   10bfa:	f01d f940 	bl	2de7e <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   10bfe:	4b2a      	ldr	r3, [pc, #168]	; (10ca8 <usage_fault.constprop.0+0xdc>)
   10c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10c02:	01dc      	lsls	r4, r3, #7
   10c04:	d509      	bpl.n	10c1a <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
   10c06:	4b2a      	ldr	r3, [pc, #168]	; (10cb0 <usage_fault.constprop.0+0xe4>)
   10c08:	9304      	str	r3, [sp, #16]
   10c0a:	4826      	ldr	r0, [pc, #152]	; (10ca4 <usage_fault.constprop.0+0xd8>)
   10c0c:	2302      	movs	r3, #2
   10c0e:	aa03      	add	r2, sp, #12
   10c10:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10c14:	9303      	str	r3, [sp, #12]
   10c16:	f01d f932 	bl	2de7e <z_log_msg2_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   10c1a:	4b23      	ldr	r3, [pc, #140]	; (10ca8 <usage_fault.constprop.0+0xdc>)
   10c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10c1e:	0318      	lsls	r0, r3, #12
   10c20:	d509      	bpl.n	10c36 <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  No coprocessor instructions");
   10c22:	4b24      	ldr	r3, [pc, #144]	; (10cb4 <usage_fault.constprop.0+0xe8>)
   10c24:	9304      	str	r3, [sp, #16]
   10c26:	481f      	ldr	r0, [pc, #124]	; (10ca4 <usage_fault.constprop.0+0xd8>)
   10c28:	2302      	movs	r3, #2
   10c2a:	aa03      	add	r2, sp, #12
   10c2c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10c30:	9303      	str	r3, [sp, #12]
   10c32:	f01d f924 	bl	2de7e <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   10c36:	4b1c      	ldr	r3, [pc, #112]	; (10ca8 <usage_fault.constprop.0+0xdc>)
   10c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10c3a:	0359      	lsls	r1, r3, #13
   10c3c:	d509      	bpl.n	10c52 <usage_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   10c3e:	4b1e      	ldr	r3, [pc, #120]	; (10cb8 <usage_fault.constprop.0+0xec>)
   10c40:	9304      	str	r3, [sp, #16]
   10c42:	4818      	ldr	r0, [pc, #96]	; (10ca4 <usage_fault.constprop.0+0xd8>)
   10c44:	2302      	movs	r3, #2
   10c46:	aa03      	add	r2, sp, #12
   10c48:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10c4c:	9303      	str	r3, [sp, #12]
   10c4e:	f01d f916 	bl	2de7e <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   10c52:	4b15      	ldr	r3, [pc, #84]	; (10ca8 <usage_fault.constprop.0+0xdc>)
   10c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10c56:	039a      	lsls	r2, r3, #14
   10c58:	d509      	bpl.n	10c6e <usage_fault.constprop.0+0xa2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   10c5a:	4b18      	ldr	r3, [pc, #96]	; (10cbc <usage_fault.constprop.0+0xf0>)
   10c5c:	9304      	str	r3, [sp, #16]
   10c5e:	4811      	ldr	r0, [pc, #68]	; (10ca4 <usage_fault.constprop.0+0xd8>)
   10c60:	2302      	movs	r3, #2
   10c62:	aa03      	add	r2, sp, #12
   10c64:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10c68:	9303      	str	r3, [sp, #12]
   10c6a:	f01d f908 	bl	2de7e <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   10c6e:	4b0e      	ldr	r3, [pc, #56]	; (10ca8 <usage_fault.constprop.0+0xdc>)
   10c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10c72:	03db      	lsls	r3, r3, #15
   10c74:	d509      	bpl.n	10c8a <usage_fault.constprop.0+0xbe>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   10c76:	4b12      	ldr	r3, [pc, #72]	; (10cc0 <usage_fault.constprop.0+0xf4>)
   10c78:	9304      	str	r3, [sp, #16]
   10c7a:	480a      	ldr	r0, [pc, #40]	; (10ca4 <usage_fault.constprop.0+0xd8>)
   10c7c:	2302      	movs	r3, #2
   10c7e:	aa03      	add	r2, sp, #12
   10c80:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10c84:	9303      	str	r3, [sp, #12]
   10c86:	f01d f8fa 	bl	2de7e <z_log_msg2_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   10c8a:	4a07      	ldr	r2, [pc, #28]	; (10ca8 <usage_fault.constprop.0+0xdc>)
   10c8c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   10c8e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   10c92:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
   10c96:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   10c98:	6293      	str	r3, [r2, #40]	; 0x28
}
   10c9a:	b006      	add	sp, #24
   10c9c:	bd10      	pop	{r4, pc}
   10c9e:	bf00      	nop
   10ca0:	00034829 	.word	0x00034829
   10ca4:	000324e4 	.word	0x000324e4
   10ca8:	e000ed00 	.word	0xe000ed00
   10cac:	00034841 	.word	0x00034841
   10cb0:	00034854 	.word	0x00034854
   10cb4:	0003486e 	.word	0x0003486e
   10cb8:	0003488c 	.word	0x0003488c
   10cbc:	000348b1 	.word	0x000348b1
   10cc0:	000348cb 	.word	0x000348cb

00010cc4 <mem_manage_fault>:
{
   10cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10cc8:	b086      	sub	sp, #24
	PR_FAULT_INFO("***** MPU FAULT *****");
   10cca:	4b48      	ldr	r3, [pc, #288]	; (10dec <mem_manage_fault+0x128>)
   10ccc:	9304      	str	r3, [sp, #16]
{
   10cce:	4607      	mov	r7, r0
   10cd0:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   10cd2:	4847      	ldr	r0, [pc, #284]	; (10df0 <mem_manage_fault+0x12c>)
{
   10cd4:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   10cd6:	2402      	movs	r4, #2
   10cd8:	aa03      	add	r2, sp, #12
   10cda:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10cde:	9403      	str	r4, [sp, #12]
   10ce0:	f01d f8cd 	bl	2de7e <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   10ce4:	4b43      	ldr	r3, [pc, #268]	; (10df4 <mem_manage_fault+0x130>)
   10ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10ce8:	06de      	lsls	r6, r3, #27
   10cea:	d508      	bpl.n	10cfe <mem_manage_fault+0x3a>
		PR_FAULT_INFO("  Stacking error (context area might be"
   10cec:	4b42      	ldr	r3, [pc, #264]	; (10df8 <mem_manage_fault+0x134>)
   10cee:	4840      	ldr	r0, [pc, #256]	; (10df0 <mem_manage_fault+0x12c>)
   10cf0:	aa03      	add	r2, sp, #12
   10cf2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10cf6:	e9cd 4303 	strd	r4, r3, [sp, #12]
   10cfa:	f01d f8c0 	bl	2de7e <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   10cfe:	4b3d      	ldr	r3, [pc, #244]	; (10df4 <mem_manage_fault+0x130>)
   10d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10d02:	071c      	lsls	r4, r3, #28
   10d04:	d509      	bpl.n	10d1a <mem_manage_fault+0x56>
		PR_FAULT_INFO("  Unstacking error");
   10d06:	4b3d      	ldr	r3, [pc, #244]	; (10dfc <mem_manage_fault+0x138>)
   10d08:	9304      	str	r3, [sp, #16]
   10d0a:	4839      	ldr	r0, [pc, #228]	; (10df0 <mem_manage_fault+0x12c>)
   10d0c:	2302      	movs	r3, #2
   10d0e:	aa03      	add	r2, sp, #12
   10d10:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10d14:	9303      	str	r3, [sp, #12]
   10d16:	f01d f8b2 	bl	2de7e <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   10d1a:	4c36      	ldr	r4, [pc, #216]	; (10df4 <mem_manage_fault+0x130>)
   10d1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10d1e:	0798      	lsls	r0, r3, #30
   10d20:	d436      	bmi.n	10d90 <mem_manage_fault+0xcc>
	uint32_t mmfar = -EINVAL;
   10d22:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   10d26:	4b33      	ldr	r3, [pc, #204]	; (10df4 <mem_manage_fault+0x130>)
   10d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10d2a:	07da      	lsls	r2, r3, #31
   10d2c:	d509      	bpl.n	10d42 <mem_manage_fault+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
   10d2e:	4b34      	ldr	r3, [pc, #208]	; (10e00 <mem_manage_fault+0x13c>)
   10d30:	9304      	str	r3, [sp, #16]
   10d32:	482f      	ldr	r0, [pc, #188]	; (10df0 <mem_manage_fault+0x12c>)
   10d34:	2302      	movs	r3, #2
   10d36:	aa03      	add	r2, sp, #12
   10d38:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10d3c:	9303      	str	r3, [sp, #12]
   10d3e:	f01d f89e 	bl	2de7e <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   10d42:	4b2c      	ldr	r3, [pc, #176]	; (10df4 <mem_manage_fault+0x130>)
   10d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10d46:	069b      	lsls	r3, r3, #26
   10d48:	d509      	bpl.n	10d5e <mem_manage_fault+0x9a>
		PR_FAULT_INFO(
   10d4a:	4b2e      	ldr	r3, [pc, #184]	; (10e04 <mem_manage_fault+0x140>)
   10d4c:	9304      	str	r3, [sp, #16]
   10d4e:	4828      	ldr	r0, [pc, #160]	; (10df0 <mem_manage_fault+0x12c>)
   10d50:	2302      	movs	r3, #2
   10d52:	aa03      	add	r2, sp, #12
   10d54:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10d58:	9303      	str	r3, [sp, #12]
   10d5a:	f01d f890 	bl	2de7e <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   10d5e:	4b25      	ldr	r3, [pc, #148]	; (10df4 <mem_manage_fault+0x130>)
   10d60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10d62:	06d4      	lsls	r4, r2, #27
   10d64:	d435      	bmi.n	10dd2 <mem_manage_fault+0x10e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   10d66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   10d68:	0790      	lsls	r0, r2, #30
   10d6a:	d432      	bmi.n	10dd2 <mem_manage_fault+0x10e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   10d6c:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   10d6e:	4b21      	ldr	r3, [pc, #132]	; (10df4 <mem_manage_fault+0x130>)
   10d70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10d72:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   10d74:	bf42      	ittt	mi
   10d76:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   10d78:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   10d7c:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   10d7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10d80:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   10d84:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   10d86:	2300      	movs	r3, #0
   10d88:	702b      	strb	r3, [r5, #0]
}
   10d8a:	b006      	add	sp, #24
   10d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
   10d90:	4b1d      	ldr	r3, [pc, #116]	; (10e08 <mem_manage_fault+0x144>)
   10d92:	9304      	str	r3, [sp, #16]
   10d94:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10d98:	2302      	movs	r3, #2
   10d9a:	4815      	ldr	r0, [pc, #84]	; (10df0 <mem_manage_fault+0x12c>)
   10d9c:	9303      	str	r3, [sp, #12]
   10d9e:	aa03      	add	r2, sp, #12
   10da0:	f01d f86d 	bl	2de7e <z_log_msg2_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
   10da4:	6b66      	ldr	r6, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   10da6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10da8:	0619      	lsls	r1, r3, #24
   10daa:	d5ba      	bpl.n	10d22 <mem_manage_fault+0x5e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   10dac:	4b17      	ldr	r3, [pc, #92]	; (10e0c <mem_manage_fault+0x148>)
   10dae:	4810      	ldr	r0, [pc, #64]	; (10df0 <mem_manage_fault+0x12c>)
   10db0:	e9cd 3604 	strd	r3, r6, [sp, #16]
   10db4:	aa03      	add	r2, sp, #12
   10db6:	2303      	movs	r3, #3
   10db8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10dbc:	9303      	str	r3, [sp, #12]
   10dbe:	f01d f85e 	bl	2de7e <z_log_msg2_static_create.constprop.0>
			if (from_hard_fault != 0) {
   10dc2:	f1b8 0f00 	cmp.w	r8, #0
   10dc6:	d0ae      	beq.n	10d26 <mem_manage_fault+0x62>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   10dc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10dca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   10dce:	62a3      	str	r3, [r4, #40]	; 0x28
   10dd0:	e7a9      	b.n	10d26 <mem_manage_fault+0x62>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   10dd2:	685b      	ldr	r3, [r3, #4]
   10dd4:	0519      	lsls	r1, r3, #20
   10dd6:	d5c9      	bpl.n	10d6c <mem_manage_fault+0xa8>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   10dd8:	4639      	mov	r1, r7
   10dda:	4630      	mov	r0, r6
   10ddc:	f7ff fe12 	bl	10a04 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   10de0:	2800      	cmp	r0, #0
   10de2:	d0c3      	beq.n	10d6c <mem_manage_fault+0xa8>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   10de4:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   10de8:	2002      	movs	r0, #2
   10dea:	e7c0      	b.n	10d6e <mem_manage_fault+0xaa>
   10dec:	000348f6 	.word	0x000348f6
   10df0:	000324e4 	.word	0x000324e4
   10df4:	e000ed00 	.word	0xe000ed00
   10df8:	0003490c 	.word	0x0003490c
   10dfc:	00034786 	.word	0x00034786
   10e00:	0003496d 	.word	0x0003496d
   10e04:	000347fa 	.word	0x000347fa
   10e08:	0003493f 	.word	0x0003493f
   10e0c:	00034957 	.word	0x00034957

00010e10 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   10e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   10e14:	4b74      	ldr	r3, [pc, #464]	; (10fe8 <z_arm_fault+0x1d8>)
{
   10e16:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   10e18:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   10e1c:	af00      	add	r7, sp, #0
   10e1e:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   10e20:	f3c8 0408 	ubfx	r4, r8, #0, #9
   10e24:	2600      	movs	r6, #0
   10e26:	f386 8811 	msr	BASEPRI, r6
   10e2a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   10e2e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   10e32:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   10e36:	d10e      	bne.n	10e56 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   10e38:	f002 030c 	and.w	r3, r2, #12
   10e3c:	2b08      	cmp	r3, #8
   10e3e:	d10c      	bne.n	10e5a <z_arm_fault+0x4a>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   10e40:	4b6a      	ldr	r3, [pc, #424]	; (10fec <z_arm_fault+0x1dc>)
   10e42:	61bb      	str	r3, [r7, #24]
   10e44:	486a      	ldr	r0, [pc, #424]	; (10ff0 <z_arm_fault+0x1e0>)
   10e46:	2302      	movs	r3, #2
   10e48:	f107 0214 	add.w	r2, r7, #20
   10e4c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10e50:	617b      	str	r3, [r7, #20]
   10e52:	f01d f814 	bl	2de7e <z_log_msg2_static_create.constprop.0>
		return NULL;
   10e56:	4635      	mov	r5, r6
   10e58:	e003      	b.n	10e62 <z_arm_fault+0x52>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   10e5a:	0712      	lsls	r2, r2, #28
   10e5c:	d401      	bmi.n	10e62 <z_arm_fault+0x52>
			ptr_esf = (z_arch_esf_t *)msp;
   10e5e:	4605      	mov	r5, r0
			*nested_exc = true;
   10e60:	2601      	movs	r6, #1
	*recoverable = false;
   10e62:	2300      	movs	r3, #0
   10e64:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
   10e66:	1ee3      	subs	r3, r4, #3
   10e68:	2b09      	cmp	r3, #9
   10e6a:	f200 809e 	bhi.w	10faa <z_arm_fault+0x19a>
   10e6e:	e8df f003 	tbb	[pc, r3]
   10e72:	9105      	.short	0x9105
   10e74:	9c9c8e94 	.word	0x9c9c8e94
   10e78:	979c9c9c 	.word	0x979c9c9c
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   10e7c:	f8df 8168 	ldr.w	r8, [pc, #360]	; 10fe8 <z_arm_fault+0x1d8>
	PR_FAULT_INFO("***** HARD FAULT *****");
   10e80:	4b5c      	ldr	r3, [pc, #368]	; (10ff4 <z_arm_fault+0x1e4>)
   10e82:	485b      	ldr	r0, [pc, #364]	; (10ff0 <z_arm_fault+0x1e0>)
   10e84:	61bb      	str	r3, [r7, #24]
   10e86:	f04f 0902 	mov.w	r9, #2
   10e8a:	f107 0214 	add.w	r2, r7, #20
   10e8e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10e92:	f8c7 9014 	str.w	r9, [r7, #20]
   10e96:	f01c fff2 	bl	2de7e <z_log_msg2_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   10e9a:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
   10e9e:	f04f 0a00 	mov.w	sl, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   10ea2:	ea14 0409 	ands.w	r4, r4, r9
	*recoverable = false;
   10ea6:	f887 a007 	strb.w	sl, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   10eaa:	d00b      	beq.n	10ec4 <z_arm_fault+0xb4>
		PR_EXC("  Bus fault on vector table read");
   10eac:	4b52      	ldr	r3, [pc, #328]	; (10ff8 <z_arm_fault+0x1e8>)
   10eae:	e9c7 9305 	strd	r9, r3, [r7, #20]
	PR_FAULT_INFO(
   10eb2:	484f      	ldr	r0, [pc, #316]	; (10ff0 <z_arm_fault+0x1e0>)
   10eb4:	f107 0214 	add.w	r2, r7, #20
   10eb8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10ebc:	f01c ffdf 	bl	2de7e <z_log_msg2_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   10ec0:	2400      	movs	r4, #0
}
   10ec2:	e00d      	b.n	10ee0 <z_arm_fault+0xd0>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   10ec4:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
   10ec8:	2b00      	cmp	r3, #0
   10eca:	da25      	bge.n	10f18 <z_arm_fault+0x108>
		PR_EXC("  Debug event");
   10ecc:	4b4b      	ldr	r3, [pc, #300]	; (10ffc <z_arm_fault+0x1ec>)
   10ece:	4848      	ldr	r0, [pc, #288]	; (10ff0 <z_arm_fault+0x1e0>)
   10ed0:	f107 0214 	add.w	r2, r7, #20
   10ed4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10ed8:	e9c7 9305 	strd	r9, r3, [r7, #20]
   10edc:	f01c ffcf 	bl	2de7e <z_log_msg2_static_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   10ee0:	79fb      	ldrb	r3, [r7, #7]
   10ee2:	b9ab      	cbnz	r3, 10f10 <z_arm_fault+0x100>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   10ee4:	2220      	movs	r2, #32
   10ee6:	4629      	mov	r1, r5
   10ee8:	f107 0008 	add.w	r0, r7, #8
   10eec:	f01d f89d 	bl	2e02a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   10ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10ef2:	2e00      	cmp	r6, #0
   10ef4:	d073      	beq.n	10fde <z_arm_fault+0x1ce>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   10ef6:	f3c3 0208 	ubfx	r2, r3, #0, #9
   10efa:	b922      	cbnz	r2, 10f06 <z_arm_fault+0xf6>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   10efc:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   10f00:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   10f04:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   10f06:	f107 0108 	add.w	r1, r7, #8
   10f0a:	4620      	mov	r0, r4
   10f0c:	f7ff fc32 	bl	10774 <z_arm_fatal_error>
}
   10f10:	3728      	adds	r7, #40	; 0x28
   10f12:	46bd      	mov	sp, r7
   10f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   10f18:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
   10f1c:	005b      	lsls	r3, r3, #1
   10f1e:	d5df      	bpl.n	10ee0 <z_arm_fault+0xd0>
		PR_EXC("  Fault escalation (see below)");
   10f20:	4b37      	ldr	r3, [pc, #220]	; (11000 <z_arm_fault+0x1f0>)
   10f22:	4833      	ldr	r0, [pc, #204]	; (10ff0 <z_arm_fault+0x1e0>)
   10f24:	f107 0214 	add.w	r2, r7, #20
   10f28:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10f2c:	e9c7 9305 	strd	r9, r3, [r7, #20]
   10f30:	f01c ffa5 	bl	2de7e <z_log_msg2_static_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
   10f34:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   10f36:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   10f3a:	f64d 7302 	movw	r3, #57090	; 0xdf02
   10f3e:	429a      	cmp	r2, r3
   10f40:	d009      	beq.n	10f56 <z_arm_fault+0x146>
		} else if (SCB_MMFSR != 0) {
   10f42:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
   10f46:	b1ab      	cbz	r3, 10f74 <z_arm_fault+0x164>
			reason = mem_manage_fault(esf, 1, recoverable);
   10f48:	1dfa      	adds	r2, r7, #7
   10f4a:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   10f4c:	4628      	mov	r0, r5
   10f4e:	f7ff feb9 	bl	10cc4 <mem_manage_fault>
   10f52:	4604      	mov	r4, r0
		break;
   10f54:	e7c4      	b.n	10ee0 <z_arm_fault+0xd0>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   10f56:	682b      	ldr	r3, [r5, #0]
   10f58:	4a2a      	ldr	r2, [pc, #168]	; (11004 <z_arm_fault+0x1f4>)
   10f5a:	4825      	ldr	r0, [pc, #148]	; (10ff0 <z_arm_fault+0x1e0>)
   10f5c:	e9c7 2306 	strd	r2, r3, [r7, #24]
   10f60:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10f64:	2303      	movs	r3, #3
   10f66:	f107 0214 	add.w	r2, r7, #20
   10f6a:	617b      	str	r3, [r7, #20]
   10f6c:	f01c ff87 	bl	2de7e <z_log_msg2_static_create.constprop.0>
			reason = esf->basic.r0;
   10f70:	682c      	ldr	r4, [r5, #0]
   10f72:	e7b5      	b.n	10ee0 <z_arm_fault+0xd0>
		} else if (SCB_BFSR != 0) {
   10f74:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
   10f78:	b123      	cbz	r3, 10f84 <z_arm_fault+0x174>
			reason = bus_fault(esf, 1, recoverable);
   10f7a:	1df9      	adds	r1, r7, #7
   10f7c:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   10f7e:	f7ff fd9b 	bl	10ab8 <bus_fault.constprop.0>
   10f82:	e7e6      	b.n	10f52 <z_arm_fault+0x142>
		} else if (SCB_UFSR != 0) {
   10f84:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   10f88:	b29b      	uxth	r3, r3
   10f8a:	2b00      	cmp	r3, #0
   10f8c:	d0a8      	beq.n	10ee0 <z_arm_fault+0xd0>
		reason = usage_fault(esf);
   10f8e:	f7ff fe1d 	bl	10bcc <usage_fault.constprop.0>
   10f92:	e7de      	b.n	10f52 <z_arm_fault+0x142>
		reason = mem_manage_fault(esf, 0, recoverable);
   10f94:	1dfa      	adds	r2, r7, #7
   10f96:	2100      	movs	r1, #0
   10f98:	e7d8      	b.n	10f4c <z_arm_fault+0x13c>
		reason = bus_fault(esf, 0, recoverable);
   10f9a:	1df9      	adds	r1, r7, #7
   10f9c:	2000      	movs	r0, #0
   10f9e:	e7ee      	b.n	10f7e <z_arm_fault+0x16e>
	PR_FAULT_INFO(
   10fa0:	4b19      	ldr	r3, [pc, #100]	; (11008 <z_arm_fault+0x1f8>)
   10fa2:	61bb      	str	r3, [r7, #24]
   10fa4:	2302      	movs	r3, #2
   10fa6:	617b      	str	r3, [r7, #20]
   10fa8:	e783      	b.n	10eb2 <z_arm_fault+0xa2>
	PR_FAULT_INFO("***** %s %d) *****",
   10faa:	4a18      	ldr	r2, [pc, #96]	; (1100c <z_arm_fault+0x1fc>)
   10fac:	4b18      	ldr	r3, [pc, #96]	; (11010 <z_arm_fault+0x200>)
   10fae:	4919      	ldr	r1, [pc, #100]	; (11014 <z_arm_fault+0x204>)
   10fb0:	480f      	ldr	r0, [pc, #60]	; (10ff0 <z_arm_fault+0x1e0>)
   10fb2:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   10fb6:	46e8      	mov	r8, sp
   10fb8:	b088      	sub	sp, #32
   10fba:	bf18      	it	ne
   10fbc:	4613      	movne	r3, r2
   10fbe:	466a      	mov	r2, sp
   10fc0:	e9c2 1304 	strd	r1, r3, [r2, #16]
   10fc4:	2302      	movs	r3, #2
   10fc6:	7713      	strb	r3, [r2, #28]
   10fc8:	3c10      	subs	r4, #16
   10fca:	4b13      	ldr	r3, [pc, #76]	; (11018 <z_arm_fault+0x208>)
   10fcc:	6194      	str	r4, [r2, #24]
   10fce:	f44f 5109 	mov.w	r1, #8768	; 0x2240
   10fd2:	f842 3f0c 	str.w	r3, [r2, #12]!
   10fd6:	f01c ff52 	bl	2de7e <z_log_msg2_static_create.constprop.0>
   10fda:	46c5      	mov	sp, r8
   10fdc:	e770      	b.n	10ec0 <z_arm_fault+0xb0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   10fde:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   10fe2:	f023 0301 	bic.w	r3, r3, #1
   10fe6:	e78d      	b.n	10f04 <z_arm_fault+0xf4>
   10fe8:	e000ed00 	.word	0xe000ed00
   10fec:	000349ba 	.word	0x000349ba
   10ff0:	000324e4 	.word	0x000324e4
   10ff4:	000349e5 	.word	0x000349e5
   10ff8:	000349fc 	.word	0x000349fc
   10ffc:	00034a1d 	.word	0x00034a1d
   11000:	00034a2b 	.word	0x00034a2b
   11004:	00034a4a 	.word	0x00034a4a
   11008:	00034a66 	.word	0x00034a66
   1100c:	000349a1 	.word	0x000349a1
   11010:	0003498c 	.word	0x0003498c
   11014:	00034a8a 	.word	0x00034a8a
   11018:	01000004 	.word	0x01000004

0001101c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1101c:	4a02      	ldr	r2, [pc, #8]	; (11028 <z_arm_fault_init+0xc>)
   1101e:	6953      	ldr	r3, [r2, #20]
   11020:	f043 0310 	orr.w	r3, r3, #16
   11024:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   11026:	4770      	bx	lr
   11028:	e000ed00 	.word	0xe000ed00

0001102c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   1102c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   11030:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   11034:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   11036:	4672      	mov	r2, lr
	bl z_arm_fault
   11038:	f7ff feea 	bl	10e10 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   1103c:	bd01      	pop	{r0, pc}
   1103e:	bf00      	nop

00011040 <z_arm_interrupt_init>:
   11040:	4804      	ldr	r0, [pc, #16]	; (11054 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   11042:	2300      	movs	r3, #0
   11044:	2120      	movs	r1, #32
   11046:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   11048:	3301      	adds	r3, #1
   1104a:	2b30      	cmp	r3, #48	; 0x30
   1104c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   11050:	d1f9      	bne.n	11046 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   11052:	4770      	bx	lr
   11054:	e000e100 	.word	0xe000e100

00011058 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   11058:	2000      	movs	r0, #0
    msr CONTROL, r0
   1105a:	f380 8814 	msr	CONTROL, r0
    isb
   1105e:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   11062:	f020 ff9d 	bl	31fa0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   11066:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   11068:	490d      	ldr	r1, [pc, #52]	; (110a0 <__start+0x48>)
    str r0, [r1]
   1106a:	6008      	str	r0, [r1, #0]
    dsb
   1106c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   11070:	480c      	ldr	r0, [pc, #48]	; (110a4 <__start+0x4c>)
    msr msp, r0
   11072:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   11076:	f000 f82b 	bl	110d0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1107a:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1107c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   11080:	4809      	ldr	r0, [pc, #36]	; (110a8 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   11082:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   11086:	1840      	adds	r0, r0, r1
    msr PSP, r0
   11088:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1108c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   11090:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   11092:	4308      	orrs	r0, r1
    msr CONTROL, r0
   11094:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   11098:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1109c:	f7ff fc26 	bl	108ec <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   110a0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   110a4:	20005140 	.word	0x20005140
    ldr r0, =z_interrupt_stacks
   110a8:	200052c0 	.word	0x200052c0

000110ac <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   110ac:	4907      	ldr	r1, [pc, #28]	; (110cc <z_arm_clear_arm_mpu_config+0x20>)
   110ae:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   110b2:	2300      	movs	r3, #0
	int num_regions =
   110b4:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   110b8:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   110ba:	4293      	cmp	r3, r2
   110bc:	d100      	bne.n	110c0 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   110be:	4770      	bx	lr
  MPU->RNR = rnr;
   110c0:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   110c4:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   110c8:	3301      	adds	r3, #1
   110ca:	e7f6      	b.n	110ba <z_arm_clear_arm_mpu_config+0xe>
   110cc:	e000ed00 	.word	0xe000ed00

000110d0 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   110d0:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   110d2:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   110d4:	2300      	movs	r3, #0
   110d6:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   110da:	f7ff ffe7 	bl	110ac <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   110de:	4b14      	ldr	r3, [pc, #80]	; (11130 <z_arm_init_arch_hw_at_boot+0x60>)
   110e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   110e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   110e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   110ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   110f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   110f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   110f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   110fc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   11100:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   11104:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   11108:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   1110c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   11110:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   11114:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   11118:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   1111c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   11120:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   11124:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   11126:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1112a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   1112e:	bd08      	pop	{r3, pc}
   11130:	e000e100 	.word	0xe000e100

00011134 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   11134:	4b08      	ldr	r3, [pc, #32]	; (11158 <z_impl_k_thread_abort+0x24>)
   11136:	689b      	ldr	r3, [r3, #8]
   11138:	4283      	cmp	r3, r0
   1113a:	d10b      	bne.n	11154 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1113c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   11140:	b143      	cbz	r3, 11154 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11142:	4b06      	ldr	r3, [pc, #24]	; (1115c <z_impl_k_thread_abort+0x28>)
   11144:	685a      	ldr	r2, [r3, #4]
   11146:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   1114a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   1114c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1114e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   11152:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   11154:	f019 bfb0 	b.w	2b0b8 <z_thread_abort>
   11158:	20003250 	.word	0x20003250
   1115c:	e000ed00 	.word	0xe000ed00

00011160 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   11160:	4b02      	ldr	r3, [pc, #8]	; (1116c <z_arm_configure_static_mpu_regions+0xc>)
   11162:	4a03      	ldr	r2, [pc, #12]	; (11170 <z_arm_configure_static_mpu_regions+0x10>)
   11164:	4803      	ldr	r0, [pc, #12]	; (11174 <z_arm_configure_static_mpu_regions+0x14>)
   11166:	2101      	movs	r1, #1
   11168:	f000 b886 	b.w	11278 <arm_core_mpu_configure_static_mpu_regions>
   1116c:	20040000 	.word	0x20040000
   11170:	20000000 	.word	0x20000000
   11174:	00032acc 	.word	0x00032acc

00011178 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   11178:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   1117a:	4b05      	ldr	r3, [pc, #20]	; (11190 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   1117c:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
   1117e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   11180:	4a04      	ldr	r2, [pc, #16]	; (11194 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   11182:	2120      	movs	r1, #32
   11184:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   11188:	4618      	mov	r0, r3
   1118a:	2101      	movs	r1, #1
   1118c:	f000 b87e 	b.w	1128c <arm_core_mpu_configure_dynamic_mpu_regions>
   11190:	20001e5c 	.word	0x20001e5c
   11194:	150b0000 	.word	0x150b0000

00011198 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   11198:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   1119a:	4f28      	ldr	r7, [pc, #160]	; (1123c <mpu_configure_regions+0xa4>)
   1119c:	b087      	sub	sp, #28
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   1119e:	2600      	movs	r6, #0
   111a0:	428e      	cmp	r6, r1
   111a2:	da16      	bge.n	111d2 <mpu_configure_regions+0x3a>
		if (regions[i].size == 0U) {
   111a4:	6844      	ldr	r4, [r0, #4]
   111a6:	2c00      	cmp	r4, #0
   111a8:	d045      	beq.n	11236 <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   111aa:	b1db      	cbz	r3, 111e4 <mpu_configure_regions+0x4c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   111ac:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   111b0:	ea14 0f0c 	tst.w	r4, ip
   111b4:	d010      	beq.n	111d8 <mpu_configure_regions+0x40>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   111b6:	4b22      	ldr	r3, [pc, #136]	; (11240 <mpu_configure_regions+0xa8>)
   111b8:	e9cd 3604 	strd	r3, r6, [sp, #16]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   111bc:	2303      	movs	r3, #3
   111be:	9303      	str	r3, [sp, #12]
   111c0:	4820      	ldr	r0, [pc, #128]	; (11244 <mpu_configure_regions+0xac>)
   111c2:	aa03      	add	r2, sp, #12
   111c4:	2300      	movs	r3, #0
   111c6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   111ca:	f01b f97c 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   111ce:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   111d2:	4610      	mov	r0, r2
   111d4:	b007      	add	sp, #28
   111d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		&&
   111d8:	2c1f      	cmp	r4, #31
   111da:	d9ec      	bls.n	111b6 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
   111dc:	6805      	ldr	r5, [r0, #0]
		&&
   111de:	ea1c 0f05 	tst.w	ip, r5
   111e2:	d1e8      	bne.n	111b6 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   111e4:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   111e6:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   111e8:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   111ec:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
   111ee:	d910      	bls.n	11212 <mpu_configure_regions+0x7a>
	if (size > (1UL << 31)) {
   111f0:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   111f4:	d80f      	bhi.n	11216 <mpu_configure_regions+0x7e>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   111f6:	3c01      	subs	r4, #1
   111f8:	fab4 f484 	clz	r4, r4
   111fc:	f1c4 041f 	rsb	r4, r4, #31
   11200:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   11202:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   11204:	ea4c 0404 	orr.w	r4, ip, r4
   11208:	d907      	bls.n	1121a <mpu_configure_regions+0x82>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1120a:	4b0f      	ldr	r3, [pc, #60]	; (11248 <mpu_configure_regions+0xb0>)
   1120c:	e9cd 3204 	strd	r3, r2, [sp, #16]
   11210:	e7d4      	b.n	111bc <mpu_configure_regions+0x24>
		return REGION_32B;
   11212:	2408      	movs	r4, #8
   11214:	e7f5      	b.n	11202 <mpu_configure_regions+0x6a>
		return REGION_4G;
   11216:	243e      	movs	r4, #62	; 0x3e
   11218:	e7f3      	b.n	11202 <mpu_configure_regions+0x6a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1121a:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
   1121e:	4315      	orrs	r5, r2
   11220:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   11224:	f044 0401 	orr.w	r4, r4, #1
   11228:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1122c:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
   11230:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   11232:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   11236:	3601      	adds	r6, #1
   11238:	300c      	adds	r0, #12
   1123a:	e7b1      	b.n	111a0 <mpu_configure_regions+0x8>
   1123c:	e000ed00 	.word	0xe000ed00
   11240:	00034aa1 	.word	0x00034aa1
   11244:	000324d4 	.word	0x000324d4
   11248:	00034ac4 	.word	0x00034ac4

0001124c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   1124c:	4b04      	ldr	r3, [pc, #16]	; (11260 <arm_core_mpu_enable+0x14>)
   1124e:	2205      	movs	r2, #5
   11250:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   11254:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11258:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1125c:	4770      	bx	lr
   1125e:	bf00      	nop
   11260:	e000ed00 	.word	0xe000ed00

00011264 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   11264:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   11268:	4b02      	ldr	r3, [pc, #8]	; (11274 <arm_core_mpu_disable+0x10>)
   1126a:	2200      	movs	r2, #0
   1126c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   11270:	4770      	bx	lr
   11272:	bf00      	nop
   11274:	e000ed00 	.word	0xe000ed00

00011278 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   11278:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1127a:	4c03      	ldr	r4, [pc, #12]	; (11288 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   1127c:	2301      	movs	r3, #1
   1127e:	7822      	ldrb	r2, [r4, #0]
   11280:	f7ff ff8a 	bl	11198 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   11284:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   11286:	bd10      	pop	{r4, pc}
   11288:	200032db 	.word	0x200032db

0001128c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   1128c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   1128e:	4a09      	ldr	r2, [pc, #36]	; (112b4 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
   11290:	2300      	movs	r3, #0
   11292:	7812      	ldrb	r2, [r2, #0]
   11294:	f7ff ff80 	bl	11198 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   11298:	f110 0f16 	cmn.w	r0, #22
   1129c:	d003      	beq.n	112a6 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
   1129e:	4b06      	ldr	r3, [pc, #24]	; (112b8 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
   112a0:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   112a2:	2807      	cmp	r0, #7
   112a4:	dd00      	ble.n	112a8 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   112a6:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   112a8:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
   112ac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   112b0:	3001      	adds	r0, #1
   112b2:	e7f6      	b.n	112a2 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   112b4:	200032db 	.word	0x200032db
   112b8:	e000ed00 	.word	0xe000ed00

000112bc <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   112bc:	4914      	ldr	r1, [pc, #80]	; (11310 <z_arm_mpu_init+0x54>)
   112be:	6808      	ldr	r0, [r1, #0]
   112c0:	2808      	cmp	r0, #8
{
   112c2:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   112c4:	d821      	bhi.n	1130a <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   112c6:	f7ff ffcd 	bl	11264 <arm_core_mpu_disable>
   112ca:	4c12      	ldr	r4, [pc, #72]	; (11314 <z_arm_mpu_init+0x58>)
   112cc:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   112ce:	2200      	movs	r2, #0
   112d0:	4290      	cmp	r0, r2
   112d2:	f101 010c 	add.w	r1, r1, #12
   112d6:	d105      	bne.n	112e4 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   112d8:	4b0f      	ldr	r3, [pc, #60]	; (11318 <z_arm_mpu_init+0x5c>)
   112da:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   112dc:	f7ff ffb6 	bl	1124c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   112e0:	2000      	movs	r0, #0
}
   112e2:	bd10      	pop	{r4, pc}
   112e4:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   112e8:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   112ec:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   112f0:	4313      	orrs	r3, r2
   112f2:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   112f6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   112fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
   112fe:	f043 0301 	orr.w	r3, r3, #1
   11302:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11306:	3201      	adds	r2, #1
   11308:	e7e2      	b.n	112d0 <z_arm_mpu_init+0x14>
		return -1;
   1130a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1130e:	e7e8      	b.n	112e2 <z_arm_mpu_init+0x26>
   11310:	00032ad8 	.word	0x00032ad8
   11314:	e000ed00 	.word	0xe000ed00
   11318:	200032db 	.word	0x200032db

0001131c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   1131c:	4b01      	ldr	r3, [pc, #4]	; (11324 <__stdout_hook_install+0x8>)
   1131e:	6018      	str	r0, [r3, #0]
}
   11320:	4770      	bx	lr
   11322:	bf00      	nop
   11324:	200002fc 	.word	0x200002fc

00011328 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
   11328:	b510      	push	{r4, lr}
	__asm__ volatile(
   1132a:	f04f 0320 	mov.w	r3, #32
   1132e:	f3ef 8011 	mrs	r0, BASEPRI
   11332:	f383 8812 	msr	BASEPRI_MAX, r3
   11336:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   1133a:	4a11      	ldr	r2, [pc, #68]	; (11380 <nordicsemi_nrf52_init+0x58>)
   1133c:	2301      	movs	r3, #1
   1133e:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   11342:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   11346:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   1134a:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1134e:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
   11352:	2c08      	cmp	r4, #8
   11354:	d108      	bne.n	11368 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   11356:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
   1135a:	2905      	cmp	r1, #5
   1135c:	d804      	bhi.n	11368 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   1135e:	4c09      	ldr	r4, [pc, #36]	; (11384 <nordicsemi_nrf52_init+0x5c>)
   11360:	5c61      	ldrb	r1, [r4, r1]
   11362:	b109      	cbz	r1, 11368 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   11364:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   11368:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1136c:	2201      	movs	r2, #1
   1136e:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   11372:	f380 8811 	msr	BASEPRI, r0
   11376:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   1137a:	2000      	movs	r0, #0
   1137c:	bd10      	pop	{r4, pc}
   1137e:	bf00      	nop
   11380:	4001e000 	.word	0x4001e000
   11384:	00034afd 	.word	0x00034afd

00011388 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   11388:	b120      	cbz	r0, 11394 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   1138a:	4b03      	ldr	r3, [pc, #12]	; (11398 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   1138c:	0180      	lsls	r0, r0, #6
   1138e:	f043 0301 	orr.w	r3, r3, #1
   11392:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   11394:	4770      	bx	lr
   11396:	bf00      	nop
   11398:	00032630 	.word	0x00032630

0001139c <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   1139c:	4b0e      	ldr	r3, [pc, #56]	; (113d8 <bt_hex_real+0x3c>)
   1139e:	2940      	cmp	r1, #64	; 0x40
{
   113a0:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   113a2:	bf28      	it	cs
   113a4:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
   113a6:	4c0d      	ldr	r4, [pc, #52]	; (113dc <bt_hex_real+0x40>)
   113a8:	1846      	adds	r6, r0, r1
   113aa:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   113ac:	42b0      	cmp	r0, r6
   113ae:	f103 0302 	add.w	r3, r3, #2
   113b2:	d104      	bne.n	113be <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   113b4:	2300      	movs	r3, #0
   113b6:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   113ba:	4807      	ldr	r0, [pc, #28]	; (113d8 <bt_hex_real+0x3c>)
   113bc:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
   113be:	7802      	ldrb	r2, [r0, #0]
   113c0:	0912      	lsrs	r2, r2, #4
   113c2:	5ca2      	ldrb	r2, [r4, r2]
   113c4:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   113c8:	f810 2b01 	ldrb.w	r2, [r0], #1
   113cc:	f002 020f 	and.w	r2, r2, #15
   113d0:	5ca2      	ldrb	r2, [r4, r2]
   113d2:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   113d6:	e7e9      	b.n	113ac <bt_hex_real+0x10>
   113d8:	200032fa 	.word	0x200032fa
   113dc:	00034b03 	.word	0x00034b03

000113e0 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   113e0:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   113e2:	7803      	ldrb	r3, [r0, #0]
   113e4:	b08b      	sub	sp, #44	; 0x2c
   113e6:	4604      	mov	r4, r0
   113e8:	ad07      	add	r5, sp, #28
   113ea:	2b03      	cmp	r3, #3
   113ec:	d821      	bhi.n	11432 <bt_addr_le_str_real+0x52>
   113ee:	e8df f003 	tbb	[pc, r3]
   113f2:	1a02      	.short	0x1a02
   113f4:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   113f6:	4912      	ldr	r1, [pc, #72]	; (11440 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
   113f8:	4628      	mov	r0, r5
   113fa:	f01c fdbc 	bl	2df76 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   113fe:	7863      	ldrb	r3, [r4, #1]
   11400:	9304      	str	r3, [sp, #16]
   11402:	78a3      	ldrb	r3, [r4, #2]
   11404:	9303      	str	r3, [sp, #12]
   11406:	78e3      	ldrb	r3, [r4, #3]
   11408:	9302      	str	r3, [sp, #8]
   1140a:	7923      	ldrb	r3, [r4, #4]
   1140c:	9301      	str	r3, [sp, #4]
   1140e:	7963      	ldrb	r3, [r4, #5]
   11410:	9300      	str	r3, [sp, #0]
   11412:	4a0c      	ldr	r2, [pc, #48]	; (11444 <bt_addr_le_str_real+0x64>)
   11414:	79a3      	ldrb	r3, [r4, #6]
   11416:	9505      	str	r5, [sp, #20]
   11418:	211e      	movs	r1, #30
   1141a:	480b      	ldr	r0, [pc, #44]	; (11448 <bt_addr_le_str_real+0x68>)
   1141c:	f01a faca 	bl	2b9b4 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   11420:	4809      	ldr	r0, [pc, #36]	; (11448 <bt_addr_le_str_real+0x68>)
   11422:	b00b      	add	sp, #44	; 0x2c
   11424:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   11426:	4909      	ldr	r1, [pc, #36]	; (1144c <bt_addr_le_str_real+0x6c>)
   11428:	e7e6      	b.n	113f8 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
   1142a:	4909      	ldr	r1, [pc, #36]	; (11450 <bt_addr_le_str_real+0x70>)
   1142c:	e7e4      	b.n	113f8 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
   1142e:	4909      	ldr	r1, [pc, #36]	; (11454 <bt_addr_le_str_real+0x74>)
   11430:	e7e2      	b.n	113f8 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   11432:	4a09      	ldr	r2, [pc, #36]	; (11458 <bt_addr_le_str_real+0x78>)
   11434:	210a      	movs	r1, #10
   11436:	4628      	mov	r0, r5
   11438:	f01a fabc 	bl	2b9b4 <snprintk>
		break;
   1143c:	e7df      	b.n	113fe <bt_addr_le_str_real+0x1e>
   1143e:	bf00      	nop
   11440:	000341e0 	.word	0x000341e0
   11444:	00034202 	.word	0x00034202
   11448:	200032dc 	.word	0x200032dc
   1144c:	000341e7 	.word	0x000341e7
   11450:	000341ee 	.word	0x000341ee
   11454:	000341f8 	.word	0x000341f8
   11458:	000363af 	.word	0x000363af

0001145c <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
   1145c:	b570      	push	{r4, r5, r6, lr}
   1145e:	4c21      	ldr	r4, [pc, #132]	; (114e4 <le_gen_dhkey+0x88>)
   11460:	f3bf 8f5b 	dmb	ish
   11464:	6823      	ldr	r3, [r4, #0]
   11466:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   1146a:	07da      	lsls	r2, r3, #31
{
   1146c:	4606      	mov	r6, r0
   1146e:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   11470:	d501      	bpl.n	11476 <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11472:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
   11474:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   11476:	2901      	cmp	r1, #1
   11478:	d831      	bhi.n	114de <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1147a:	f3bf 8f5b 	dmb	ish
   1147e:	e854 3f00 	ldrex	r3, [r4]
   11482:	f043 0202 	orr.w	r2, r3, #2
   11486:	e844 2100 	strex	r1, r2, [r4]
   1148a:	2900      	cmp	r1, #0
   1148c:	d1f7      	bne.n	1147e <le_gen_dhkey+0x22>
   1148e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
   11492:	079b      	lsls	r3, r3, #30
   11494:	d4ed      	bmi.n	11472 <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, BT_PUB_KEY_COORD_LEN);
   11496:	4814      	ldr	r0, [pc, #80]	; (114e8 <le_gen_dhkey+0x8c>)
   11498:	4631      	mov	r1, r6
   1149a:	f01c fe5a 	bl	2e152 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[BT_PUB_KEY_COORD_LEN], &key[BT_PUB_KEY_COORD_LEN],
   1149e:	4813      	ldr	r0, [pc, #76]	; (114ec <le_gen_dhkey+0x90>)
   114a0:	f106 0120 	add.w	r1, r6, #32
   114a4:	f01c fe55 	bl	2e152 <sys_memcpy_swap.constprop.0>
   114a8:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
   114ac:	b175      	cbz	r5, 114cc <le_gen_dhkey+0x70>
   114ae:	e854 3f00 	ldrex	r3, [r4]
   114b2:	f043 0304 	orr.w	r3, r3, #4
   114b6:	e844 3200 	strex	r2, r3, [r4]
   114ba:	2a00      	cmp	r2, #0
   114bc:	d1f7      	bne.n	114ae <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   114be:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
   114c2:	480b      	ldr	r0, [pc, #44]	; (114f0 <le_gen_dhkey+0x94>)
   114c4:	f019 f8e2 	bl	2a68c <z_impl_k_sem_give>
   114c8:	2000      	movs	r0, #0
   114ca:	e7d3      	b.n	11474 <le_gen_dhkey+0x18>
   114cc:	e854 3f00 	ldrex	r3, [r4]
   114d0:	f023 0304 	bic.w	r3, r3, #4
   114d4:	e844 3200 	strex	r2, r3, [r4]
   114d8:	2a00      	cmp	r2, #0
   114da:	d0f0      	beq.n	114be <le_gen_dhkey+0x62>
   114dc:	e7f6      	b.n	114cc <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
   114de:	2012      	movs	r0, #18
   114e0:	e7c8      	b.n	11474 <le_gen_dhkey+0x18>
   114e2:	bf00      	nop
   114e4:	20001e68 	.word	0x20001e68
   114e8:	2000339b 	.word	0x2000339b
   114ec:	200033bb 	.word	0x200033bb
   114f0:	20000bdc 	.word	0x20000bdc

000114f4 <ecc_thread>:
{
   114f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   114f8:	4e6c      	ldr	r6, [pc, #432]	; (116ac <ecc_thread+0x1b8>)
	return z_impl_k_sem_take(sem, timeout);
   114fa:	4f6d      	ldr	r7, [pc, #436]	; (116b0 <ecc_thread+0x1bc>)
   114fc:	b087      	sub	sp, #28
   114fe:	4635      	mov	r5, r6
   11500:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11508:	4638      	mov	r0, r7
   1150a:	f019 f8e5 	bl	2a6d8 <z_impl_k_sem_take>
   1150e:	f3bf 8f5b 	dmb	ish
   11512:	6834      	ldr	r4, [r6, #0]
   11514:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   11518:	f014 0401 	ands.w	r4, r4, #1
   1151c:	d061      	beq.n	115e2 <ecc_thread+0xee>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   1151e:	f8df 9194 	ldr.w	r9, [pc, #404]	; 116b4 <ecc_thread+0x1c0>
   11522:	4c65      	ldr	r4, [pc, #404]	; (116b8 <ecc_thread+0x1c4>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   11524:	f8df 8194 	ldr.w	r8, [pc, #404]	; 116bc <ecc_thread+0x1c8>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   11528:	4865      	ldr	r0, [pc, #404]	; (116c0 <ecc_thread+0x1cc>)
   1152a:	464a      	mov	r2, r9
   1152c:	4621      	mov	r1, r4
   1152e:	f01b fba9 	bl	2cc84 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
   11532:	4603      	mov	r3, r0
   11534:	2800      	cmp	r0, #0
   11536:	d141      	bne.n	115bc <ecc_thread+0xc8>
			BT_ERR("Failed to create ECC public/private pair");
   11538:	4a62      	ldr	r2, [pc, #392]	; (116c4 <ecc_thread+0x1d0>)
   1153a:	9204      	str	r2, [sp, #16]
   1153c:	2202      	movs	r2, #2
   1153e:	9203      	str	r2, [sp, #12]
   11540:	4861      	ldr	r0, [pc, #388]	; (116c8 <ecc_thread+0x1d4>)
   11542:	aa03      	add	r2, sp, #12
   11544:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			return BT_HCI_ERR_UNSPECIFIED;
   11548:	f04f 091f 	mov.w	r9, #31
   1154c:	f01a ffbb 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   11550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11558:	2001      	movs	r0, #1
   1155a:	f000 fb83 	bl	11c64 <bt_buf_get_rx>
   1155e:	f100 0808 	add.w	r8, r0, #8
   11562:	2102      	movs	r1, #2
   11564:	4604      	mov	r4, r0
   11566:	4640      	mov	r0, r8
   11568:	f01f fa84 	bl	30a74 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1156c:	233e      	movs	r3, #62	; 0x3e
   1156e:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   11570:	2342      	movs	r3, #66	; 0x42
   11572:	7043      	strb	r3, [r0, #1]
   11574:	2101      	movs	r1, #1
   11576:	4640      	mov	r0, r8
   11578:	f01f fa7c 	bl	30a74 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   1157c:	2308      	movs	r3, #8
   1157e:	7003      	strb	r3, [r0, #0]
   11580:	2141      	movs	r1, #65	; 0x41
   11582:	4640      	mov	r0, r8
   11584:	f01f fa76 	bl	30a74 <net_buf_simple_add>
   11588:	4680      	mov	r8, r0
	evt->status = status;
   1158a:	f800 9b01 	strb.w	r9, [r0], #1
	if (status) {
   1158e:	f1b9 0f00 	cmp.w	r9, #0
   11592:	d01d      	beq.n	115d0 <ecc_thread+0xdc>
		(void)memset(evt->key, 0, sizeof(evt->key));
   11594:	2240      	movs	r2, #64	; 0x40
   11596:	2100      	movs	r1, #0
   11598:	f01c fd52 	bl	2e040 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1159c:	f3bf 8f5b 	dmb	ish
   115a0:	e855 3f00 	ldrex	r3, [r5]
   115a4:	f023 0301 	bic.w	r3, r3, #1
   115a8:	e845 3200 	strex	r2, r3, [r5]
   115ac:	2a00      	cmp	r2, #0
   115ae:	d1f7      	bne.n	115a0 <ecc_thread+0xac>
   115b0:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   115b4:	4620      	mov	r0, r4
	bt_recv(buf);
   115b6:	f001 fcef 	bl	12f98 <bt_recv>
	while (true) {
   115ba:	e7a1      	b.n	11500 <ecc_thread+0xc>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   115bc:	2220      	movs	r2, #32
   115be:	4641      	mov	r1, r8
   115c0:	4620      	mov	r0, r4
   115c2:	f01c fd21 	bl	2e008 <memcmp>
   115c6:	2800      	cmp	r0, #0
   115c8:	d0ae      	beq.n	11528 <ecc_thread+0x34>
	return 0;
   115ca:	f04f 0900 	mov.w	r9, #0
   115ce:	e7bf      	b.n	11550 <ecc_thread+0x5c>
		sys_memcpy_swap(evt->key, ecc.public_key_be, BT_PUB_KEY_COORD_LEN);
   115d0:	493b      	ldr	r1, [pc, #236]	; (116c0 <ecc_thread+0x1cc>)
   115d2:	f01c fdbe 	bl	2e152 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[BT_PUB_KEY_COORD_LEN],
   115d6:	3120      	adds	r1, #32
   115d8:	f108 0021 	add.w	r0, r8, #33	; 0x21
   115dc:	f01c fdb9 	bl	2e152 <sys_memcpy_swap.constprop.0>
   115e0:	e7dc      	b.n	1159c <ecc_thread+0xa8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   115e2:	f3bf 8f5b 	dmb	ish
   115e6:	6833      	ldr	r3, [r6, #0]
   115e8:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
   115ec:	079b      	lsls	r3, r3, #30
   115ee:	d587      	bpl.n	11500 <ecc_thread+0xc>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
   115f0:	4930      	ldr	r1, [pc, #192]	; (116b4 <ecc_thread+0x1c0>)
   115f2:	4833      	ldr	r0, [pc, #204]	; (116c0 <ecc_thread+0x1cc>)
   115f4:	f01c f9ff 	bl	2d9f6 <uECC_valid_public_key>
	if (ret < 0) {
   115f8:	2800      	cmp	r0, #0
   115fa:	da3e      	bge.n	1167a <ecc_thread+0x186>
		BT_ERR("public key is not valid (ret %d)", ret);
   115fc:	4b33      	ldr	r3, [pc, #204]	; (116cc <ecc_thread+0x1d8>)
   115fe:	e9cd 3004 	strd	r3, r0, [sp, #16]
   11602:	2303      	movs	r3, #3
   11604:	9303      	str	r3, [sp, #12]
   11606:	4830      	ldr	r0, [pc, #192]	; (116c8 <ecc_thread+0x1d4>)
   11608:	4623      	mov	r3, r4
   1160a:	aa03      	add	r2, sp, #12
   1160c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11610:	f01a ff59 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   11614:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11618:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1161c:	2001      	movs	r0, #1
   1161e:	f000 fb21 	bl	11c64 <bt_buf_get_rx>
   11622:	f100 0908 	add.w	r9, r0, #8
   11626:	2102      	movs	r1, #2
   11628:	4680      	mov	r8, r0
   1162a:	4648      	mov	r0, r9
   1162c:	f01f fa22 	bl	30a74 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   11630:	233e      	movs	r3, #62	; 0x3e
   11632:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   11634:	2322      	movs	r3, #34	; 0x22
   11636:	7043      	strb	r3, [r0, #1]
   11638:	2101      	movs	r1, #1
   1163a:	4648      	mov	r0, r9
   1163c:	f01f fa1a 	bl	30a74 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   11640:	2309      	movs	r3, #9
   11642:	7003      	strb	r3, [r0, #0]
   11644:	2121      	movs	r1, #33	; 0x21
   11646:	4648      	mov	r0, r9
   11648:	f01f fa14 	bl	30a74 <net_buf_simple_add>
   1164c:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
   1164e:	3001      	adds	r0, #1
   11650:	bb34      	cbnz	r4, 116a0 <ecc_thread+0x1ac>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
   11652:	221f      	movs	r2, #31
   11654:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   11656:	21ff      	movs	r1, #255	; 0xff
   11658:	2220      	movs	r2, #32
   1165a:	f01c fcf1 	bl	2e040 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1165e:	f3bf 8f5b 	dmb	ish
   11662:	e855 3f00 	ldrex	r3, [r5]
   11666:	f023 0302 	bic.w	r3, r3, #2
   1166a:	e845 3200 	strex	r2, r3, [r5]
   1166e:	2a00      	cmp	r2, #0
   11670:	d1f7      	bne.n	11662 <ecc_thread+0x16e>
   11672:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   11676:	4640      	mov	r0, r8
   11678:	e79d      	b.n	115b6 <ecc_thread+0xc2>
		ret = uECC_shared_secret(ecc.public_key_be,
   1167a:	490f      	ldr	r1, [pc, #60]	; (116b8 <ecc_thread+0x1c4>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1167c:	f3bf 8f5b 	dmb	ish
   11680:	6833      	ldr	r3, [r6, #0]
   11682:	480e      	ldr	r0, [pc, #56]	; (116bc <ecc_thread+0x1c8>)
   11684:	f3bf 8f5b 	dmb	ish
   11688:	f013 0f04 	tst.w	r3, #4
   1168c:	f101 0220 	add.w	r2, r1, #32
   11690:	4b08      	ldr	r3, [pc, #32]	; (116b4 <ecc_thread+0x1c0>)
   11692:	bf18      	it	ne
   11694:	4601      	movne	r1, r0
   11696:	4610      	mov	r0, r2
   11698:	f01b fb43 	bl	2cd22 <uECC_shared_secret>
   1169c:	4604      	mov	r4, r0
   1169e:	e7b9      	b.n	11614 <ecc_thread+0x120>
		evt->status = 0U;
   116a0:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   116a2:	4907      	ldr	r1, [pc, #28]	; (116c0 <ecc_thread+0x1cc>)
		evt->status = 0U;
   116a4:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   116a6:	f01c fd54 	bl	2e152 <sys_memcpy_swap.constprop.0>
   116aa:	e7d8      	b.n	1165e <ecc_thread+0x16a>
   116ac:	20001e68 	.word	0x20001e68
   116b0:	20000bdc 	.word	0x20000bdc
   116b4:	00032af8 	.word	0x00032af8
   116b8:	2000337b 	.word	0x2000337b
   116bc:	00034b77 	.word	0x00034b77
   116c0:	2000339b 	.word	0x2000339b
   116c4:	00034b1b 	.word	0x00034b1b
   116c8:	00032454 	.word	0x00032454
   116cc:	00034b44 	.word	0x00034b44

000116d0 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
   116d0:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   116d2:	7d06      	ldrb	r6, [r0, #20]
   116d4:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
   116d6:	b976      	cbnz	r6, 116f6 <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
   116d8:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
   116da:	881d      	ldrh	r5, [r3, #0]
   116dc:	f242 0226 	movw	r2, #8230	; 0x2026
   116e0:	4295      	cmp	r5, r2
   116e2:	d045      	beq.n	11770 <bt_hci_ecc_send+0xa0>
   116e4:	d80f      	bhi.n	11706 <bt_hci_ecc_send+0x36>
   116e6:	f242 0201 	movw	r2, #8193	; 0x2001
   116ea:	4295      	cmp	r5, r2
   116ec:	d04f      	beq.n	1178e <bt_hci_ecc_send+0xbe>
   116ee:	f242 0325 	movw	r3, #8229	; 0x2025
   116f2:	429d      	cmp	r5, r3
   116f4:	d013      	beq.n	1171e <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
   116f6:	4b2a      	ldr	r3, [pc, #168]	; (117a0 <bt_hci_ecc_send+0xd0>)
   116f8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   116fc:	4620      	mov	r0, r4
   116fe:	695b      	ldr	r3, [r3, #20]
}
   11700:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
   11704:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
   11706:	f242 035e 	movw	r3, #8286	; 0x205e
   1170a:	429d      	cmp	r5, r3
   1170c:	d1f3      	bne.n	116f6 <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
   1170e:	2103      	movs	r1, #3
   11710:	3008      	adds	r0, #8
   11712:	f01f f9ce 	bl	30ab2 <net_buf_simple_pull>
	cmd = (void *)buf->data;
   11716:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   11718:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   1171c:	e02e      	b.n	1177c <bt_hci_ecc_send+0xac>
   1171e:	2103      	movs	r1, #3
   11720:	3008      	adds	r0, #8
   11722:	f01f f9c6 	bl	30ab2 <net_buf_simple_pull>
	net_buf_unref(buf);
   11726:	4620      	mov	r0, r4
   11728:	f016 fabc 	bl	27ca4 <net_buf_unref>
   1172c:	f3bf 8f5b 	dmb	ish
   11730:	4b1c      	ldr	r3, [pc, #112]	; (117a4 <bt_hci_ecc_send+0xd4>)
   11732:	681a      	ldr	r2, [r3, #0]
   11734:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
   11738:	0792      	lsls	r2, r2, #30
   1173a:	d507      	bpl.n	1174c <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   1173c:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
   1173e:	4631      	mov	r1, r6
   11740:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   11744:	f01c fce1 	bl	2e10a <send_cmd_status>
}
   11748:	2000      	movs	r0, #0
   1174a:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1174c:	f3bf 8f5b 	dmb	ish
   11750:	e853 2f00 	ldrex	r2, [r3]
   11754:	f042 0101 	orr.w	r1, r2, #1
   11758:	e843 1000 	strex	r0, r1, [r3]
   1175c:	2800      	cmp	r0, #0
   1175e:	d1f7      	bne.n	11750 <bt_hci_ecc_send+0x80>
   11760:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
   11764:	07d3      	lsls	r3, r2, #31
   11766:	d4e9      	bmi.n	1173c <bt_hci_ecc_send+0x6c>
	z_impl_k_sem_give(sem);
   11768:	480f      	ldr	r0, [pc, #60]	; (117a8 <bt_hci_ecc_send+0xd8>)
   1176a:	f018 ff8f 	bl	2a68c <z_impl_k_sem_give>
}
   1176e:	e7e6      	b.n	1173e <bt_hci_ecc_send+0x6e>
   11770:	2103      	movs	r1, #3
   11772:	3008      	adds	r0, #8
   11774:	f01f f99d 	bl	30ab2 <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
   11778:	68a0      	ldr	r0, [r4, #8]
   1177a:	4631      	mov	r1, r6
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   1177c:	f7ff fe6e 	bl	1145c <le_gen_dhkey>
   11780:	4606      	mov	r6, r0
	net_buf_unref(buf);
   11782:	4620      	mov	r0, r4
   11784:	f016 fa8e 	bl	27ca4 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   11788:	4631      	mov	r1, r6
   1178a:	4628      	mov	r0, r5
   1178c:	e7da      	b.n	11744 <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
   1178e:	78da      	ldrb	r2, [r3, #3]
   11790:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11794:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
   11796:	791a      	ldrb	r2, [r3, #4]
   11798:	f022 0201 	bic.w	r2, r2, #1
   1179c:	711a      	strb	r2, [r3, #4]
}
   1179e:	e7aa      	b.n	116f6 <bt_hci_ecc_send+0x26>
   117a0:	20000000 	.word	0x20000000
   117a4:	20001e68 	.word	0x20001e68
   117a8:	20000bdc 	.word	0x20000bdc

000117ac <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
   117ac:	b510      	push	{r4, lr}
   117ae:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   117b0:	4c0c      	ldr	r4, [pc, #48]	; (117e4 <bt_hci_ecc_init+0x38>)
   117b2:	490d      	ldr	r1, [pc, #52]	; (117e8 <bt_hci_ecc_init+0x3c>)
   117b4:	2200      	movs	r2, #0
   117b6:	2300      	movs	r3, #0
   117b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   117bc:	2300      	movs	r3, #0
   117be:	220a      	movs	r2, #10
   117c0:	e9cd 2303 	strd	r2, r3, [sp, #12]
   117c4:	e9cd 3301 	strd	r3, r3, [sp, #4]
   117c8:	9300      	str	r3, [sp, #0]
   117ca:	f44f 628f 	mov.w	r2, #1144	; 0x478
   117ce:	4b07      	ldr	r3, [pc, #28]	; (117ec <bt_hci_ecc_init+0x40>)
   117d0:	4620      	mov	r0, r4
   117d2:	f018 fdc9 	bl	2a368 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   117d6:	4906      	ldr	r1, [pc, #24]	; (117f0 <bt_hci_ecc_init+0x44>)
   117d8:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
   117da:	b008      	add	sp, #32
   117dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   117e0:	f01f beff 	b.w	315e2 <z_impl_k_thread_name_set>
   117e4:	20001288 	.word	0x20001288
   117e8:	20003b60 	.word	0x20003b60
   117ec:	000114f5 	.word	0x000114f5
   117f0:	00034b65 	.word	0x00034b65

000117f4 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   117f4:	b510      	push	{r4, lr}
   117f6:	b086      	sub	sp, #24
	int err;
	BT_INFO("Saving ID");
   117f8:	4b18      	ldr	r3, [pc, #96]	; (1185c <save_id+0x68>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   117fa:	4c19      	ldr	r4, [pc, #100]	; (11860 <save_id+0x6c>)
	BT_INFO("Saving ID");
   117fc:	4819      	ldr	r0, [pc, #100]	; (11864 <save_id+0x70>)
   117fe:	9304      	str	r3, [sp, #16]
   11800:	aa03      	add	r2, sp, #12
   11802:	2302      	movs	r3, #2
   11804:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   11808:	9303      	str	r3, [sp, #12]
   1180a:	f01c fcc0 	bl	2e18e <z_log_msg2_static_create.constprop.0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   1180e:	79e2      	ldrb	r2, [r4, #7]
   11810:	4815      	ldr	r0, [pc, #84]	; (11868 <save_id+0x74>)
   11812:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   11816:	4621      	mov	r1, r4
   11818:	f7fe faf0 	bl	fdfc <settings_save_one>
	if (err) {
   1181c:	b150      	cbz	r0, 11834 <save_id+0x40>
		BT_ERR("Failed to save ID (err %d)", err);
   1181e:	4b13      	ldr	r3, [pc, #76]	; (1186c <save_id+0x78>)
   11820:	aa03      	add	r2, sp, #12
   11822:	e9cd 3004 	strd	r3, r0, [sp, #16]
   11826:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1182a:	2303      	movs	r3, #3
   1182c:	480d      	ldr	r0, [pc, #52]	; (11864 <save_id+0x70>)
   1182e:	9303      	str	r3, [sp, #12]
   11830:	f01c fcad 	bl	2e18e <z_log_msg2_static_create.constprop.0>
	}

#if defined(CONFIG_BT_PRIVACY)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
   11834:	79e2      	ldrb	r2, [r4, #7]
   11836:	490e      	ldr	r1, [pc, #56]	; (11870 <save_id+0x7c>)
   11838:	480e      	ldr	r0, [pc, #56]	; (11874 <save_id+0x80>)
   1183a:	0112      	lsls	r2, r2, #4
   1183c:	f7fe fade 	bl	fdfc <settings_save_one>
	if (err) {
   11840:	b150      	cbz	r0, 11858 <save_id+0x64>
		BT_ERR("Failed to save IRK (err %d)", err);
   11842:	4b0d      	ldr	r3, [pc, #52]	; (11878 <save_id+0x84>)
   11844:	aa03      	add	r2, sp, #12
   11846:	e9cd 3004 	strd	r3, r0, [sp, #16]
   1184a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1184e:	2303      	movs	r3, #3
   11850:	4804      	ldr	r0, [pc, #16]	; (11864 <save_id+0x70>)
   11852:	9303      	str	r3, [sp, #12]
   11854:	f01c fc9b 	bl	2e18e <z_log_msg2_static_create.constprop.0>
	}
#endif
}
   11858:	b006      	add	sp, #24
   1185a:	bd10      	pop	{r4, pc}
   1185c:	00034b97 	.word	0x00034b97
   11860:	20000000 	.word	0x20000000
   11864:	0003247c 	.word	0x0003247c
   11868:	00034ba1 	.word	0x00034ba1
   1186c:	00034ba7 	.word	0x00034ba7
   11870:	20000158 	.word	0x20000158
   11874:	00034bc2 	.word	0x00034bc2
   11878:	00034bc9 	.word	0x00034bc9

0001187c <set.part.0>:
static int set(const char *name, size_t len_rd, settings_read_cb read_cb,
   1187c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11880:	4605      	mov	r5, r0
   11882:	b088      	sub	sp, #32
   11884:	460f      	mov	r7, r1
   11886:	4690      	mov	r8, r2
	if (!name) {
   11888:	b960      	cbnz	r0, 118a4 <set.part.0+0x28>
		BT_ERR("Insufficient number of arguments");
   1188a:	4b42      	ldr	r3, [pc, #264]	; (11994 <set.part.0+0x118>)
   1188c:	9306      	str	r3, [sp, #24]
   1188e:	4842      	ldr	r0, [pc, #264]	; (11998 <set.part.0+0x11c>)
   11890:	2302      	movs	r3, #2
   11892:	aa05      	add	r2, sp, #20
   11894:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11898:	9305      	str	r3, [sp, #20]
   1189a:	f01c fc78 	bl	2e18e <z_log_msg2_static_create.constprop.0>
	return -ENOENT;
   1189e:	f06f 0401 	mvn.w	r4, #1
   118a2:	e035      	b.n	11910 <set.part.0+0x94>
	len = settings_name_next(name, &next);
   118a4:	a901      	add	r1, sp, #4
   118a6:	f01b f905 	bl	2cab4 <settings_name_next>
	if (!strncmp(name, "id", len)) {
   118aa:	493c      	ldr	r1, [pc, #240]	; (1199c <set.part.0+0x120>)
   118ac:	4602      	mov	r2, r0
	len = settings_name_next(name, &next);
   118ae:	4606      	mov	r6, r0
	if (!strncmp(name, "id", len)) {
   118b0:	4628      	mov	r0, r5
   118b2:	f01c fb98 	bl	2dfe6 <strncmp>
   118b6:	4604      	mov	r4, r0
   118b8:	2800      	cmp	r0, #0
   118ba:	d132      	bne.n	11922 <set.part.0+0xa6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   118bc:	f3bf 8f5b 	dmb	ish
   118c0:	4d37      	ldr	r5, [pc, #220]	; (119a0 <set.part.0+0x124>)
   118c2:	682b      	ldr	r3, [r5, #0]
   118c4:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   118c8:	071b      	lsls	r3, r3, #28
   118ca:	d50a      	bpl.n	118e2 <set.part.0+0x66>
			BT_WARN("Ignoring identities stored in flash");
   118cc:	4b35      	ldr	r3, [pc, #212]	; (119a4 <set.part.0+0x128>)
   118ce:	9306      	str	r3, [sp, #24]
   118d0:	2302      	movs	r3, #2
   118d2:	9305      	str	r3, [sp, #20]
   118d4:	aa05      	add	r2, sp, #20
   118d6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
			BT_ERR("Failed to read device name from storage"
   118da:	482f      	ldr	r0, [pc, #188]	; (11998 <set.part.0+0x11c>)
   118dc:	f01c fc57 	bl	2e18e <z_log_msg2_static_create.constprop.0>
   118e0:	e016      	b.n	11910 <set.part.0+0x94>
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   118e2:	3dcc      	subs	r5, #204	; 0xcc
   118e4:	2207      	movs	r2, #7
   118e6:	4629      	mov	r1, r5
   118e8:	4640      	mov	r0, r8
   118ea:	47b8      	blx	r7
		if (len < sizeof(bt_dev.id_addr[0])) {
   118ec:	2806      	cmp	r0, #6
   118ee:	d813      	bhi.n	11918 <set.part.0+0x9c>
				BT_ERR("Invalid length ID address in storage");
   118f0:	4b2d      	ldr	r3, [pc, #180]	; (119a8 <set.part.0+0x12c>)
   118f2:	4829      	ldr	r0, [pc, #164]	; (11998 <set.part.0+0x11c>)
   118f4:	9306      	str	r3, [sp, #24]
   118f6:	aa05      	add	r2, sp, #20
   118f8:	2302      	movs	r3, #2
   118fa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   118fe:	9305      	str	r3, [sp, #20]
   11900:	f01c fc45 	bl	2e18e <z_log_msg2_static_create.constprop.0>
			(void)memset(bt_dev.id_addr, 0,
   11904:	2207      	movs	r2, #7
   11906:	4621      	mov	r1, r4
   11908:	4628      	mov	r0, r5
   1190a:	f01c fb99 	bl	2e040 <memset>
			bt_dev.id_count = 0U;
   1190e:	71ec      	strb	r4, [r5, #7]
}
   11910:	4620      	mov	r0, r4
   11912:	b008      	add	sp, #32
   11914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   11918:	2307      	movs	r3, #7
   1191a:	fbb0 f0f3 	udiv	r0, r0, r3
   1191e:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   11920:	e7f6      	b.n	11910 <set.part.0+0x94>
	if (!strncmp(name, "name", len)) {
   11922:	4922      	ldr	r1, [pc, #136]	; (119ac <set.part.0+0x130>)
   11924:	4632      	mov	r2, r6
   11926:	4628      	mov	r0, r5
   11928:	f01c fb5d 	bl	2dfe6 <strncmp>
   1192c:	4604      	mov	r4, r0
   1192e:	b998      	cbnz	r0, 11958 <set.part.0+0xdc>
		len = read_cb(cb_arg, &bt_dev.name, sizeof(bt_dev.name) - 1);
   11930:	491f      	ldr	r1, [pc, #124]	; (119b0 <set.part.0+0x134>)
   11932:	2241      	movs	r2, #65	; 0x41
   11934:	4640      	mov	r0, r8
   11936:	47b8      	blx	r7
		if (len < 0) {
   11938:	2800      	cmp	r0, #0
   1193a:	da08      	bge.n	1194e <set.part.0+0xd2>
			BT_ERR("Failed to read device name from storage"
   1193c:	4b1d      	ldr	r3, [pc, #116]	; (119b4 <set.part.0+0x138>)
   1193e:	e9cd 3006 	strd	r3, r0, [sp, #24]
   11942:	2303      	movs	r3, #3
   11944:	9305      	str	r3, [sp, #20]
   11946:	aa05      	add	r2, sp, #20
   11948:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1194c:	e7c5      	b.n	118da <set.part.0+0x5e>
			bt_dev.name[len] = '\0';
   1194e:	4b1a      	ldr	r3, [pc, #104]	; (119b8 <set.part.0+0x13c>)
   11950:	4418      	add	r0, r3
   11952:	f880 4198 	strb.w	r4, [r0, #408]	; 0x198
			BT_DBG("Name set to %s", log_strdup(bt_dev.name));
   11956:	e7db      	b.n	11910 <set.part.0+0x94>
	if (!strncmp(name, "irk", len)) {
   11958:	4918      	ldr	r1, [pc, #96]	; (119bc <set.part.0+0x140>)
   1195a:	4632      	mov	r2, r6
   1195c:	4628      	mov	r0, r5
   1195e:	f01c fb42 	bl	2dfe6 <strncmp>
   11962:	4604      	mov	r4, r0
   11964:	2800      	cmp	r0, #0
   11966:	d19a      	bne.n	1189e <set.part.0+0x22>
		len = read_cb(cb_arg, bt_dev.irk, sizeof(bt_dev.irk));
   11968:	4915      	ldr	r1, [pc, #84]	; (119c0 <set.part.0+0x144>)
   1196a:	2210      	movs	r2, #16
   1196c:	4640      	mov	r0, r8
   1196e:	47b8      	blx	r7
		if (len < sizeof(bt_dev.irk[0])) {
   11970:	280f      	cmp	r0, #15
   11972:	d8cd      	bhi.n	11910 <set.part.0+0x94>
				BT_ERR("Invalid length IRK in storage");
   11974:	4b13      	ldr	r3, [pc, #76]	; (119c4 <set.part.0+0x148>)
   11976:	9306      	str	r3, [sp, #24]
   11978:	aa05      	add	r2, sp, #20
   1197a:	2302      	movs	r3, #2
   1197c:	4806      	ldr	r0, [pc, #24]	; (11998 <set.part.0+0x11c>)
   1197e:	9305      	str	r3, [sp, #20]
   11980:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11984:	f01c fc03 	bl	2e18e <z_log_msg2_static_create.constprop.0>
				(void)memset(bt_dev.irk, 0, sizeof(bt_dev.irk));
   11988:	2210      	movs	r2, #16
   1198a:	4621      	mov	r1, r4
   1198c:	480c      	ldr	r0, [pc, #48]	; (119c0 <set.part.0+0x144>)
   1198e:	f01c fb57 	bl	2e040 <memset>
   11992:	e7bd      	b.n	11910 <set.part.0+0x94>
   11994:	00034be5 	.word	0x00034be5
   11998:	0003247c 	.word	0x0003247c
   1199c:	000341f5 	.word	0x000341f5
   119a0:	200000cc 	.word	0x200000cc
   119a4:	00034c06 	.word	0x00034c06
   119a8:	00034c2a 	.word	0x00034c2a
   119ac:	00035538 	.word	0x00035538
   119b0:	20000198 	.word	0x20000198
   119b4:	00034c4f 	.word	0x00034c4f
   119b8:	20000000 	.word	0x20000000
   119bc:	00034bc5 	.word	0x00034bc5
   119c0:	20000158 	.word	0x20000158
   119c4:	00034c81 	.word	0x00034c81

000119c8 <set>:
{
   119c8:	b410      	push	{r4}
   119ca:	4611      	mov	r1, r2
   119cc:	461a      	mov	r2, r3
   119ce:	4b07      	ldr	r3, [pc, #28]	; (119ec <set+0x24>)
   119d0:	f3bf 8f5b 	dmb	ish
   119d4:	681c      	ldr	r4, [r3, #0]
   119d6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   119da:	f014 0401 	ands.w	r4, r4, #1
   119de:	d002      	beq.n	119e6 <set+0x1e>
}
   119e0:	bc10      	pop	{r4}
   119e2:	f7ff bf4b 	b.w	1187c <set.part.0>
   119e6:	4620      	mov	r0, r4
   119e8:	bc10      	pop	{r4}
   119ea:	4770      	bx	lr
   119ec:	200000cc 	.word	0x200000cc

000119f0 <bt_settings_encode_key>:
{
   119f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   119f4:	b088      	sub	sp, #32
		snprintk(path, path_size,
   119f6:	799c      	ldrb	r4, [r3, #6]
{
   119f8:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   119fc:	795d      	ldrb	r5, [r3, #5]
   119fe:	791e      	ldrb	r6, [r3, #4]
   11a00:	78df      	ldrb	r7, [r3, #3]
   11a02:	f893 c002 	ldrb.w	ip, [r3, #2]
   11a06:	f893 e001 	ldrb.w	lr, [r3, #1]
   11a0a:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   11a0c:	f1b8 0f00 	cmp.w	r8, #0
   11a10:	d00e      	beq.n	11a30 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   11a12:	e9cd 3806 	strd	r3, r8, [sp, #24]
   11a16:	e9cd ce04 	strd	ip, lr, [sp, #16]
   11a1a:	4613      	mov	r3, r2
   11a1c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   11a20:	e9cd 4500 	strd	r4, r5, [sp]
   11a24:	4a08      	ldr	r2, [pc, #32]	; (11a48 <bt_settings_encode_key+0x58>)
   11a26:	f019 ffc5 	bl	2b9b4 <snprintk>
}
   11a2a:	b008      	add	sp, #32
   11a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   11a30:	e9cd e305 	strd	lr, r3, [sp, #20]
   11a34:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   11a38:	4613      	mov	r3, r2
   11a3a:	e9cd 5601 	strd	r5, r6, [sp, #4]
   11a3e:	4a03      	ldr	r2, [pc, #12]	; (11a4c <bt_settings_encode_key+0x5c>)
   11a40:	9400      	str	r4, [sp, #0]
   11a42:	f019 ffb7 	bl	2b9b4 <snprintk>
}
   11a46:	e7f0      	b.n	11a2a <bt_settings_encode_key+0x3a>
   11a48:	00034c9f 	.word	0x00034c9f
   11a4c:	00034cc3 	.word	0x00034cc3

00011a50 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   11a50:	4801      	ldr	r0, [pc, #4]	; (11a58 <bt_settings_save_id+0x8>)
   11a52:	f018 bf87 	b.w	2a964 <k_work_submit>
   11a56:	bf00      	nop
   11a58:	20000300 	.word	0x20000300

00011a5c <commit.part.0>:
}

static int commit(void)
   11a5c:	b530      	push	{r4, r5, lr}
		 */
		return 0;
	}

#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
   11a5e:	4d1f      	ldr	r5, [pc, #124]	; (11adc <commit.part.0+0x80>)
   11a60:	f895 3198 	ldrb.w	r3, [r5, #408]	; 0x198
static int commit(void)
   11a64:	b087      	sub	sp, #28
	if (bt_dev.name[0] == '\0') {
   11a66:	b913      	cbnz	r3, 11a6e <commit.part.0+0x12>
		bt_set_name(CONFIG_BT_DEVICE_NAME);
   11a68:	481d      	ldr	r0, [pc, #116]	; (11ae0 <commit.part.0+0x84>)
   11a6a:	f001 fc99 	bl	133a0 <bt_set_name>
	}
#endif
	if (!bt_dev.id_count) {
   11a6e:	79eb      	ldrb	r3, [r5, #7]
   11a70:	b9bb      	cbnz	r3, 11aa2 <commit.part.0+0x46>
		err = bt_setup_public_id_addr();
   11a72:	f002 f893 	bl	13b9c <bt_setup_public_id_addr>
		if (err) {
   11a76:	4604      	mov	r4, r0
   11a78:	b160      	cbz	r0, 11a94 <commit.part.0+0x38>
	}

	if (!bt_dev.id_count) {
		err = bt_setup_random_id_addr();
		if (err) {
			BT_ERR("Unable to setup an identity address");
   11a7a:	4b1a      	ldr	r3, [pc, #104]	; (11ae4 <commit.part.0+0x88>)
   11a7c:	9304      	str	r3, [sp, #16]
   11a7e:	481a      	ldr	r0, [pc, #104]	; (11ae8 <commit.part.0+0x8c>)
   11a80:	2302      	movs	r3, #2
   11a82:	aa03      	add	r2, sp, #12
   11a84:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11a88:	9303      	str	r3, [sp, #12]
   11a8a:	f01c fb80 	bl	2e18e <z_log_msg2_static_create.constprop.0>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
   11a8e:	4620      	mov	r0, r4
   11a90:	b007      	add	sp, #28
   11a92:	bd30      	pop	{r4, r5, pc}
	if (!bt_dev.id_count) {
   11a94:	79eb      	ldrb	r3, [r5, #7]
   11a96:	b923      	cbnz	r3, 11aa2 <commit.part.0+0x46>
		err = bt_setup_random_id_addr();
   11a98:	f002 f91c 	bl	13cd4 <bt_setup_random_id_addr>
		if (err) {
   11a9c:	4604      	mov	r4, r0
   11a9e:	2800      	cmp	r0, #0
   11aa0:	d1eb      	bne.n	11a7a <commit.part.0+0x1e>
   11aa2:	f3bf 8f5b 	dmb	ish
   11aa6:	4d11      	ldr	r5, [pc, #68]	; (11aec <commit.part.0+0x90>)
   11aa8:	682b      	ldr	r3, [r5, #0]
   11aaa:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11aae:	075b      	lsls	r3, r3, #29
   11ab0:	d401      	bmi.n	11ab6 <commit.part.0+0x5a>
		bt_finalize_init();
   11ab2:	f001 fb5d 	bl	13170 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11ab6:	f3bf 8f5b 	dmb	ish
   11aba:	e855 4f00 	ldrex	r4, [r5]
   11abe:	f424 4300 	bic.w	r3, r4, #32768	; 0x8000
   11ac2:	e845 3200 	strex	r2, r3, [r5]
   11ac6:	2a00      	cmp	r2, #0
   11ac8:	d1f7      	bne.n	11aba <commit.part.0+0x5e>
   11aca:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   11ace:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
   11ad2:	d0dc      	beq.n	11a8e <commit.part.0+0x32>
		bt_settings_save_id();
   11ad4:	f7ff ffbc 	bl	11a50 <bt_settings_save_id>
	return 0;
   11ad8:	2400      	movs	r4, #0
   11ada:	e7d8      	b.n	11a8e <commit.part.0+0x32>
   11adc:	20000000 	.word	0x20000000
   11ae0:	00034ce4 	.word	0x00034ce4
   11ae4:	00034d07 	.word	0x00034d07
   11ae8:	0003247c 	.word	0x0003247c
   11aec:	200000cc 	.word	0x200000cc

00011af0 <commit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11af0:	4b05      	ldr	r3, [pc, #20]	; (11b08 <commit+0x18>)
   11af2:	f3bf 8f5b 	dmb	ish
   11af6:	6818      	ldr	r0, [r3, #0]
   11af8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   11afc:	f010 0001 	ands.w	r0, r0, #1
   11b00:	d001      	beq.n	11b06 <commit+0x16>
   11b02:	f7ff bfab 	b.w	11a5c <commit.part.0>
}
   11b06:	4770      	bx	lr
   11b08:	200000cc 	.word	0x200000cc

00011b0c <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
   11b0c:	b510      	push	{r4, lr}
   11b0e:	b086      	sub	sp, #24
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   11b10:	f7fe fad4 	bl	100bc <settings_subsys_init>
	if (err) {
   11b14:	4604      	mov	r4, r0
   11b16:	b150      	cbz	r0, 11b2e <bt_settings_init+0x22>
		BT_ERR("settings_subsys_init failed (err %d)", err);
   11b18:	4b06      	ldr	r3, [pc, #24]	; (11b34 <bt_settings_init+0x28>)
   11b1a:	aa03      	add	r2, sp, #12
   11b1c:	e9cd 3004 	strd	r3, r0, [sp, #16]
   11b20:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11b24:	2303      	movs	r3, #3
   11b26:	4804      	ldr	r0, [pc, #16]	; (11b38 <bt_settings_init+0x2c>)
   11b28:	9303      	str	r3, [sp, #12]
   11b2a:	f01c fb30 	bl	2e18e <z_log_msg2_static_create.constprop.0>
		return err;
	}

	return 0;
}
   11b2e:	4620      	mov	r0, r4
   11b30:	b006      	add	sp, #24
   11b32:	bd10      	pop	{r4, pc}
   11b34:	00034d2b 	.word	0x00034d2b
   11b38:	0003247c 	.word	0x0003247c

00011b3c <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   11b3c:	b430      	push	{r4, r5}
   11b3e:	4603      	mov	r3, r0
   11b40:	4608      	mov	r0, r1
	switch (src->type) {
   11b42:	781a      	ldrb	r2, [r3, #0]
   11b44:	2a01      	cmp	r2, #1
   11b46:	d013      	beq.n	11b70 <uuid_to_uuid128+0x34>
   11b48:	2a02      	cmp	r2, #2
   11b4a:	d026      	beq.n	11b9a <uuid_to_uuid128+0x5e>
   11b4c:	b972      	cbnz	r2, 11b6c <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   11b4e:	4a15      	ldr	r2, [pc, #84]	; (11ba4 <uuid_to_uuid128+0x68>)
   11b50:	f102 0410 	add.w	r4, r2, #16
   11b54:	f852 5b04 	ldr.w	r5, [r2], #4
   11b58:	f841 5b04 	str.w	r5, [r1], #4
   11b5c:	42a2      	cmp	r2, r4
   11b5e:	d1f9      	bne.n	11b54 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
   11b60:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
   11b62:	7812      	ldrb	r2, [r2, #0]
   11b64:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
   11b66:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   11b68:	0a1b      	lsrs	r3, r3, #8
   11b6a:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   11b6c:	bc30      	pop	{r4, r5}
   11b6e:	4770      	bx	lr
		*dst = uuid128_base;
   11b70:	4a0c      	ldr	r2, [pc, #48]	; (11ba4 <uuid_to_uuid128+0x68>)
   11b72:	f102 0410 	add.w	r4, r2, #16
   11b76:	f852 5b04 	ldr.w	r5, [r2], #4
   11b7a:	f841 5b04 	str.w	r5, [r1], #4
   11b7e:	42a2      	cmp	r2, r4
   11b80:	d1f9      	bne.n	11b76 <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
   11b82:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
   11b84:	7812      	ldrb	r2, [r2, #0]
   11b86:	700a      	strb	r2, [r1, #0]
   11b88:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   11b8c:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
   11b8e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   11b90:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   11b92:	0a1b      	lsrs	r3, r3, #8
   11b94:	7382      	strb	r2, [r0, #14]
   11b96:	7403      	strb	r3, [r0, #16]
}
   11b98:	e7e8      	b.n	11b6c <uuid_to_uuid128+0x30>
}
   11b9a:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   11b9c:	2211      	movs	r2, #17
   11b9e:	4619      	mov	r1, r3
   11ba0:	f01c ba43 	b.w	2e02a <memcpy>
   11ba4:	00034d7c 	.word	0x00034d7c

00011ba8 <bt_uuid_to_str>:
	}
	return true;
}

void bt_uuid_to_str(const struct bt_uuid *uuid, char *str, size_t len)
{
   11ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t tmp1, tmp5;
	uint16_t tmp0, tmp2, tmp3, tmp4;

	switch (uuid->type) {
   11baa:	7805      	ldrb	r5, [r0, #0]
   11bac:	2d01      	cmp	r5, #1
{
   11bae:	b08b      	sub	sp, #44	; 0x2c
   11bb0:	4604      	mov	r4, r0
   11bb2:	460e      	mov	r6, r1
   11bb4:	4617      	mov	r7, r2
	switch (uuid->type) {
   11bb6:	d00c      	beq.n	11bd2 <bt_uuid_to_str+0x2a>
   11bb8:	2d02      	cmp	r5, #2
   11bba:	d00d      	beq.n	11bd8 <bt_uuid_to_str+0x30>
   11bbc:	2d00      	cmp	r5, #0
   11bbe:	d144      	bne.n	11c4a <bt_uuid_to_str+0xa2>
	case BT_UUID_TYPE_16:
		snprintk(str, len, "%04x", BT_UUID_16(uuid)->val);
   11bc0:	8843      	ldrh	r3, [r0, #2]
   11bc2:	4a25      	ldr	r2, [pc, #148]	; (11c58 <bt_uuid_to_str+0xb0>)
		break;
	case BT_UUID_TYPE_32:
		snprintk(str, len, "%08x", BT_UUID_32(uuid)->val);
   11bc4:	4639      	mov	r1, r7
   11bc6:	4630      	mov	r0, r6
		break;
	default:
		(void)memset(str, 0, len);
		return;
	}
}
   11bc8:	b00b      	add	sp, #44	; 0x2c
   11bca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		snprintk(str, len, "%08x", BT_UUID_32(uuid)->val);
   11bce:	f019 bef1 	b.w	2b9b4 <snprintk>
   11bd2:	6843      	ldr	r3, [r0, #4]
   11bd4:	4a21      	ldr	r2, [pc, #132]	; (11c5c <bt_uuid_to_str+0xb4>)
   11bd6:	e7f5      	b.n	11bc4 <bt_uuid_to_str+0x1c>
		memcpy(&tmp0, &BT_UUID_128(uuid)->val[0], sizeof(tmp0));
   11bd8:	462a      	mov	r2, r5
   11bda:	1c41      	adds	r1, r0, #1
   11bdc:	a806      	add	r0, sp, #24
   11bde:	f01c fa24 	bl	2e02a <memcpy>
		memcpy(&tmp1, &BT_UUID_128(uuid)->val[2], sizeof(tmp1));
   11be2:	1ce1      	adds	r1, r4, #3
   11be4:	2204      	movs	r2, #4
   11be6:	a808      	add	r0, sp, #32
   11be8:	f01c fa1f 	bl	2e02a <memcpy>
		memcpy(&tmp2, &BT_UUID_128(uuid)->val[6], sizeof(tmp2));
   11bec:	462a      	mov	r2, r5
   11bee:	1de1      	adds	r1, r4, #7
   11bf0:	f10d 001a 	add.w	r0, sp, #26
   11bf4:	f01c fa19 	bl	2e02a <memcpy>
		memcpy(&tmp3, &BT_UUID_128(uuid)->val[8], sizeof(tmp3));
   11bf8:	462a      	mov	r2, r5
   11bfa:	f104 0109 	add.w	r1, r4, #9
   11bfe:	a807      	add	r0, sp, #28
   11c00:	f01c fa13 	bl	2e02a <memcpy>
		memcpy(&tmp4, &BT_UUID_128(uuid)->val[10], sizeof(tmp4));
   11c04:	462a      	mov	r2, r5
   11c06:	f104 010b 	add.w	r1, r4, #11
   11c0a:	f10d 001e 	add.w	r0, sp, #30
   11c0e:	f01c fa0c 	bl	2e02a <memcpy>
		memcpy(&tmp5, &BT_UUID_128(uuid)->val[12], sizeof(tmp5));
   11c12:	f104 010d 	add.w	r1, r4, #13
   11c16:	2204      	movs	r2, #4
   11c18:	a809      	add	r0, sp, #36	; 0x24
   11c1a:	f01c fa06 	bl	2e02a <memcpy>
		snprintk(str, len, "%08x-%04x-%04x-%04x-%08x%04x",
   11c1e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   11c22:	9304      	str	r3, [sp, #16]
   11c24:	9b08      	ldr	r3, [sp, #32]
   11c26:	9303      	str	r3, [sp, #12]
   11c28:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   11c2c:	9302      	str	r3, [sp, #8]
   11c2e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   11c32:	9301      	str	r3, [sp, #4]
   11c34:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   11c38:	9300      	str	r3, [sp, #0]
   11c3a:	4a09      	ldr	r2, [pc, #36]	; (11c60 <bt_uuid_to_str+0xb8>)
   11c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11c3e:	4639      	mov	r1, r7
   11c40:	4630      	mov	r0, r6
   11c42:	f019 feb7 	bl	2b9b4 <snprintk>
}
   11c46:	b00b      	add	sp, #44	; 0x2c
   11c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)memset(str, 0, len);
   11c4a:	2100      	movs	r1, #0
   11c4c:	4630      	mov	r0, r6
}
   11c4e:	b00b      	add	sp, #44	; 0x2c
   11c50:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		(void)memset(str, 0, len);
   11c54:	f01c b9f4 	b.w	2e040 <memset>
   11c58:	00035c30 	.word	0x00035c30
   11c5c:	000346ee 	.word	0x000346ee
   11c60:	00034d5f 	.word	0x00034d5f

00011c64 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   11c64:	b538      	push	{r3, r4, r5, lr}
   11c66:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   11c68:	4805      	ldr	r0, [pc, #20]	; (11c80 <bt_buf_get_rx+0x1c>)
   11c6a:	f01e fe59 	bl	30920 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   11c6e:	4604      	mov	r4, r0
   11c70:	b120      	cbz	r0, 11c7c <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   11c72:	2100      	movs	r1, #0
   11c74:	3008      	adds	r0, #8
   11c76:	f01e fe72 	bl	3095e <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   11c7a:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   11c7c:	4620      	mov	r0, r4
   11c7e:	bd38      	pop	{r3, r4, r5, pc}
   11c80:	20000d1c 	.word	0x20000d1c

00011c84 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   11c84:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   11c86:	490b      	ldr	r1, [pc, #44]	; (11cb4 <bt_buf_get_cmd_complete+0x30>)
{
   11c88:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   11c8a:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
{
   11c8e:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   11c90:	b920      	cbnz	r0, 11c9c <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   11c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   11c96:	2001      	movs	r0, #1
   11c98:	f7ff bfe4 	b.w	11c64 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   11c9c:	f01e feb8 	bl	30a10 <net_buf_ref>
   11ca0:	2301      	movs	r3, #1
		buf->len = 0U;
   11ca2:	2100      	movs	r1, #0
   11ca4:	7503      	strb	r3, [r0, #20]
   11ca6:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   11ca8:	4604      	mov	r4, r0
   11caa:	3008      	adds	r0, #8
   11cac:	f01e fe57 	bl	3095e <net_buf_simple_reserve>
}
   11cb0:	4620      	mov	r0, r4
   11cb2:	bd10      	pop	{r4, pc}
   11cb4:	20000000 	.word	0x20000000

00011cb8 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   11cb8:	b570      	push	{r4, r5, r6, lr}
   11cba:	4604      	mov	r4, r0
	switch (evt) {
   11cbc:	2c0f      	cmp	r4, #15
{
   11cbe:	460d      	mov	r5, r1
   11cc0:	4610      	mov	r0, r2
   11cc2:	4619      	mov	r1, r3
	switch (evt) {
   11cc4:	d805      	bhi.n	11cd2 <bt_buf_get_evt+0x1a>
   11cc6:	2c0d      	cmp	r4, #13
   11cc8:	d912      	bls.n	11cf0 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   11cca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   11cce:	f7ff bfd9 	b.w	11c84 <bt_buf_get_cmd_complete>
	switch (evt) {
   11cd2:	2c13      	cmp	r4, #19
   11cd4:	d10c      	bne.n	11cf0 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   11cd6:	480b      	ldr	r0, [pc, #44]	; (11d04 <bt_buf_get_evt+0x4c>)
   11cd8:	f01e fe22 	bl	30920 <net_buf_alloc_fixed>
			if (buf) {
   11cdc:	4604      	mov	r4, r0
   11cde:	b128      	cbz	r0, 11cec <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   11ce0:	2100      	movs	r1, #0
   11ce2:	3008      	adds	r0, #8
   11ce4:	f01e fe3b 	bl	3095e <net_buf_simple_reserve>
   11ce8:	2301      	movs	r3, #1
   11cea:	7523      	strb	r3, [r4, #20]
}
   11cec:	4620      	mov	r0, r4
   11cee:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   11cf0:	4602      	mov	r2, r0
   11cf2:	460b      	mov	r3, r1
		if (discardable) {
   11cf4:	b10d      	cbz	r5, 11cfa <bt_buf_get_evt+0x42>
   11cf6:	4804      	ldr	r0, [pc, #16]	; (11d08 <bt_buf_get_evt+0x50>)
   11cf8:	e7ee      	b.n	11cd8 <bt_buf_get_evt+0x20>
}
   11cfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   11cfe:	2001      	movs	r0, #1
   11d00:	f7ff bfb0 	b.w	11c64 <bt_buf_get_rx>
   11d04:	20000d48 	.word	0x20000d48
   11d08:	20000c98 	.word	0x20000c98

00011d0c <ver_str>:
{
   11d0c:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
   11d0e:	4d0b      	ldr	r5, [pc, #44]	; (11d3c <ver_str+0x30>)
{
   11d10:	4606      	mov	r6, r0
	const char * const str[] = {
   11d12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   11d14:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
   11d16:	ac01      	add	r4, sp, #4
   11d18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11d1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11d1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11d1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11d20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
   11d22:	2e0c      	cmp	r6, #12
	const char * const str[] = {
   11d24:	682b      	ldr	r3, [r5, #0]
   11d26:	6023      	str	r3, [r4, #0]
		return str[ver];
   11d28:	bf9b      	ittet	ls
   11d2a:	ab0e      	addls	r3, sp, #56	; 0x38
   11d2c:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
   11d30:	4803      	ldrhi	r0, [pc, #12]	; (11d40 <ver_str+0x34>)
		return str[ver];
   11d32:	f856 0c34 	ldrls.w	r0, [r6, #-52]
}
   11d36:	b00e      	add	sp, #56	; 0x38
   11d38:	bd70      	pop	{r4, r5, r6, pc}
   11d3a:	bf00      	nop
   11d3c:	000325a0 	.word	0x000325a0
   11d40:	00034e83 	.word	0x00034e83

00011d44 <unpair>:
{
   11d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11d46:	4606      	mov	r6, r0
   11d48:	460f      	mov	r7, r1
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, addr);
   11d4a:	f003 f93b 	bl	14fc4 <bt_conn_lookup_addr_le>
	if (conn) {
   11d4e:	4604      	mov	r4, r0
   11d50:	b9f8      	cbnz	r0, 11d92 <unpair+0x4e>
			keys = bt_keys_find_addr(id, addr);
   11d52:	4639      	mov	r1, r7
   11d54:	4630      	mov	r0, r6
   11d56:	f008 f85f 	bl	19e18 <bt_keys_find_addr>
		if (keys) {
   11d5a:	4605      	mov	r5, r0
   11d5c:	b110      	cbz	r0, 11d64 <unpair+0x20>
			bt_keys_clear(keys);
   11d5e:	4628      	mov	r0, r5
   11d60:	f008 f86a 	bl	19e38 <bt_keys_clear>
	bt_gatt_clear(id, addr);
   11d64:	4639      	mov	r1, r7
   11d66:	4630      	mov	r0, r6
   11d68:	f006 f8a2 	bl	17eb0 <bt_gatt_clear>
	return list->head;
   11d6c:	4b14      	ldr	r3, [pc, #80]	; (11dc0 <unpair+0x7c>)
   11d6e:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   11d70:	b323      	cbz	r3, 11dbc <unpair+0x78>
	return node->next;
   11d72:	f853 490c 	ldr.w	r4, [r3], #-12
   11d76:	b104      	cbz	r4, 11d7a <unpair+0x36>
   11d78:	3c0c      	subs	r4, #12
		if (listener->bond_deleted) {
   11d7a:	689b      	ldr	r3, [r3, #8]
   11d7c:	b113      	cbz	r3, 11d84 <unpair+0x40>
			listener->bond_deleted(id, addr);
   11d7e:	4639      	mov	r1, r7
   11d80:	4630      	mov	r0, r6
   11d82:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   11d84:	b1d4      	cbz	r4, 11dbc <unpair+0x78>
   11d86:	68e2      	ldr	r2, [r4, #12]
   11d88:	b102      	cbz	r2, 11d8c <unpair+0x48>
   11d8a:	3a0c      	subs	r2, #12
	struct bt_keys *keys = NULL;
   11d8c:	4623      	mov	r3, r4
   11d8e:	4614      	mov	r4, r2
   11d90:	e7f3      	b.n	11d7a <unpair+0x36>
		if (conn->type == BT_CONN_TYPE_LE) {
   11d92:	7883      	ldrb	r3, [r0, #2]
   11d94:	2b01      	cmp	r3, #1
   11d96:	f04f 0300 	mov.w	r3, #0
			keys = conn->le.keys;
   11d9a:	bf04      	itt	eq
   11d9c:	f8d0 50b4 	ldreq.w	r5, [r0, #180]	; 0xb4
			conn->le.keys = NULL;
   11da0:	f8c0 30b4 	streq.w	r3, [r0, #180]	; 0xb4
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   11da4:	f04f 0113 	mov.w	r1, #19
	struct bt_keys *keys = NULL;
   11da8:	bf18      	it	ne
   11daa:	461d      	movne	r5, r3
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   11dac:	f01c fe22 	bl	2e9f4 <bt_conn_disconnect>
		bt_conn_unref(conn);
   11db0:	4620      	mov	r0, r4
   11db2:	f01c fdda 	bl	2e96a <bt_conn_unref>
		if (!keys) {
   11db6:	2d00      	cmp	r5, #0
   11db8:	d1d1      	bne.n	11d5e <unpair+0x1a>
   11dba:	e7ca      	b.n	11d52 <unpair+0xe>
}
   11dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11dbe:	bf00      	nop
   11dc0:	20001e9c 	.word	0x20001e9c

00011dc4 <hci_disconn_complete_prio>:
{
   11dc4:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   11dc6:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   11dc8:	781a      	ldrb	r2, [r3, #0]
   11dca:	b972      	cbnz	r2, 11dea <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11dcc:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   11dd0:	4620      	mov	r0, r4
   11dd2:	f002 fedb 	bl	14b8c <bt_conn_lookup_handle>
	if (!conn) {
   11dd6:	4605      	mov	r5, r0
   11dd8:	b940      	cbnz	r0, 11dec <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   11dda:	4b08      	ldr	r3, [pc, #32]	; (11dfc <hci_disconn_complete_prio+0x38>)
   11ddc:	881a      	ldrh	r2, [r3, #0]
   11dde:	b922      	cbnz	r2, 11dea <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   11de0:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   11de4:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   11de8:	8018      	strh	r0, [r3, #0]
}
   11dea:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   11dec:	2101      	movs	r1, #1
   11dee:	f002 fed5 	bl	14b9c <bt_conn_set_state>
	bt_conn_unref(conn);
   11df2:	4628      	mov	r0, r5
}
   11df4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   11df8:	f01c bdb7 	b.w	2e96a <bt_conn_unref>
   11dfc:	20003290 	.word	0x20003290

00011e00 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   11e00:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   11e02:	4c0d      	ldr	r4, [pc, #52]	; (11e38 <find_pending_connect.part.0+0x38>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   11e04:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   11e06:	2205      	movs	r2, #5
   11e08:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   11e0c:	f003 f926 	bl	1505c <bt_conn_lookup_state_le>
		if (!conn) {
   11e10:	b978      	cbnz	r0, 11e32 <find_pending_connect.part.0+0x32>
						       BT_ADDR_LE_NONE,
   11e12:	4b0a      	ldr	r3, [pc, #40]	; (11e3c <find_pending_connect.part.0+0x3c>)
   11e14:	6b58      	ldr	r0, [r3, #52]	; 0x34
   11e16:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   11e18:	9000      	str	r0, [sp, #0]
   11e1a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   11e1e:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   11e22:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
   11e26:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   11e2a:	2204      	movs	r2, #4
   11e2c:	4669      	mov	r1, sp
   11e2e:	f003 f915 	bl	1505c <bt_conn_lookup_state_le>
}
   11e32:	b002      	add	sp, #8
   11e34:	bd10      	pop	{r4, pc}
   11e36:	bf00      	nop
   11e38:	20000000 	.word	0x20000000
   11e3c:	000325a0 	.word	0x000325a0

00011e40 <bt_init.part.0>:
static int bt_init(void)
   11e40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			BT_INFO("No ID address. App must call settings_load()");
   11e42:	4b07      	ldr	r3, [pc, #28]	; (11e60 <bt_init.part.0+0x20>)
   11e44:	9304      	str	r3, [sp, #16]
   11e46:	4807      	ldr	r0, [pc, #28]	; (11e64 <bt_init.part.0+0x24>)
   11e48:	2302      	movs	r3, #2
   11e4a:	aa03      	add	r2, sp, #12
   11e4c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   11e50:	9303      	str	r3, [sp, #12]
   11e52:	f01c fa58 	bl	2e306 <z_log_msg2_static_create.constprop.0>
}
   11e56:	2000      	movs	r0, #0
   11e58:	b007      	add	sp, #28
   11e5a:	f85d fb04 	ldr.w	pc, [sp], #4
   11e5e:	bf00      	nop
   11e60:	00034e8b 	.word	0x00034e8b
   11e64:	0003244c 	.word	0x0003244c

00011e68 <hci_data_buf_overflow>:
{
   11e68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   11e6a:	6883      	ldr	r3, [r0, #8]
   11e6c:	4a07      	ldr	r2, [pc, #28]	; (11e8c <hci_data_buf_overflow+0x24>)
   11e6e:	781b      	ldrb	r3, [r3, #0]
   11e70:	4807      	ldr	r0, [pc, #28]	; (11e90 <hci_data_buf_overflow+0x28>)
   11e72:	e9cd 2304 	strd	r2, r3, [sp, #16]
   11e76:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11e7a:	2303      	movs	r3, #3
   11e7c:	aa03      	add	r2, sp, #12
   11e7e:	9303      	str	r3, [sp, #12]
   11e80:	f01c fa41 	bl	2e306 <z_log_msg2_static_create.constprop.0>
}
   11e84:	b007      	add	sp, #28
   11e86:	f85d fb04 	ldr.w	pc, [sp], #4
   11e8a:	bf00      	nop
   11e8c:	00034eb8 	.word	0x00034eb8
   11e90:	0003244c 	.word	0x0003244c

00011e94 <le_conn_param_neg_reply.part.0>:
static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
   11e94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
   11e96:	4b06      	ldr	r3, [pc, #24]	; (11eb0 <le_conn_param_neg_reply.part.0+0x1c>)
   11e98:	9304      	str	r3, [sp, #16]
   11e9a:	4806      	ldr	r0, [pc, #24]	; (11eb4 <le_conn_param_neg_reply.part.0+0x20>)
   11e9c:	2302      	movs	r3, #2
   11e9e:	aa03      	add	r2, sp, #12
   11ea0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11ea4:	9303      	str	r3, [sp, #12]
   11ea6:	f01c fa2e 	bl	2e306 <z_log_msg2_static_create.constprop.0>
}
   11eaa:	b007      	add	sp, #28
   11eac:	f85d fb04 	ldr.w	pc, [sp], #4
   11eb0:	00034ee0 	.word	0x00034ee0
   11eb4:	0003244c 	.word	0x0003244c

00011eb8 <le_conn_update_complete>:
{
   11eb8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   11eba:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   11ebc:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   11ec0:	b086      	sub	sp, #24
	conn = bt_conn_lookup_handle(handle);
   11ec2:	4630      	mov	r0, r6
   11ec4:	f002 fe62 	bl	14b8c <bt_conn_lookup_handle>
	if (!conn) {
   11ec8:	4604      	mov	r4, r0
   11eca:	b960      	cbnz	r0, 11ee6 <le_conn_update_complete+0x2e>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   11ecc:	4b24      	ldr	r3, [pc, #144]	; (11f60 <le_conn_update_complete+0xa8>)
   11ece:	4825      	ldr	r0, [pc, #148]	; (11f64 <le_conn_update_complete+0xac>)
   11ed0:	e9cd 3604 	strd	r3, r6, [sp, #16]
   11ed4:	aa03      	add	r2, sp, #12
   11ed6:	2303      	movs	r3, #3
   11ed8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11edc:	9303      	str	r3, [sp, #12]
   11ede:	f01c fa12 	bl	2e306 <z_log_msg2_static_create.constprop.0>
}
   11ee2:	b006      	add	sp, #24
   11ee4:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
   11ee6:	782b      	ldrb	r3, [r5, #0]
   11ee8:	b9cb      	cbnz	r3, 11f1e <le_conn_update_complete+0x66>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   11eea:	792a      	ldrb	r2, [r5, #4]
   11eec:	78eb      	ldrb	r3, [r5, #3]
   11eee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   11ef2:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   11ef6:	79aa      	ldrb	r2, [r5, #6]
   11ef8:	796b      	ldrb	r3, [r5, #5]
   11efa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   11efe:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   11f02:	79eb      	ldrb	r3, [r5, #7]
   11f04:	7a2a      	ldrb	r2, [r5, #8]
   11f06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   11f0a:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   11f0e:	f002 ff5d 	bl	14dcc <notify_le_param_updated>
	bt_conn_unref(conn);
   11f12:	4620      	mov	r0, r4
}
   11f14:	b006      	add	sp, #24
   11f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   11f1a:	f01c bd26 	b.w	2e96a <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   11f1e:	2b1a      	cmp	r3, #26
   11f20:	d1f7      	bne.n	11f12 <le_conn_update_complete+0x5a>
   11f22:	78c3      	ldrb	r3, [r0, #3]
   11f24:	2b01      	cmp	r3, #1
   11f26:	d1f4      	bne.n	11f12 <le_conn_update_complete+0x5a>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   11f28:	f44f 7100 	mov.w	r1, #512	; 0x200
   11f2c:	3004      	adds	r0, #4
   11f2e:	f01c f9d6 	bl	2e2de <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   11f32:	0583      	lsls	r3, r0, #22
   11f34:	d4ed      	bmi.n	11f12 <le_conn_update_complete+0x5a>
		param.interval_min = conn->le.interval_min;
   11f36:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   11f3a:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   11f3e:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
   11f42:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   11f46:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
   11f4a:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   11f4e:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
   11f50:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   11f54:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   11f58:	4620      	mov	r0, r4
   11f5a:	f003 fb6f 	bl	1563c <bt_l2cap_update_conn_param>
   11f5e:	e7d8      	b.n	11f12 <le_conn_update_complete+0x5a>
   11f60:	00034efa 	.word	0x00034efa
   11f64:	0003244c 	.word	0x0003244c

00011f68 <hci_vendor_event>:
{
   11f68:	b580      	push	{r7, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
   11f6a:	8981      	ldrh	r1, [r0, #12]
   11f6c:	6880      	ldr	r0, [r0, #8]
{
   11f6e:	af00      	add	r7, sp, #0
		BT_WARN("Unhandled vendor-specific event: %s",
   11f70:	f7ff fa14 	bl	1139c <bt_hex_real>
   11f74:	b088      	sub	sp, #32
   11f76:	4b08      	ldr	r3, [pc, #32]	; (11f98 <hci_vendor_event+0x30>)
   11f78:	466a      	mov	r2, sp
   11f7a:	e9c2 3004 	strd	r3, r0, [r2, #16]
   11f7e:	2302      	movs	r3, #2
   11f80:	7613      	strb	r3, [r2, #24]
   11f82:	4b06      	ldr	r3, [pc, #24]	; (11f9c <hci_vendor_event+0x34>)
   11f84:	f842 3f0c 	str.w	r3, [r2, #12]!
   11f88:	4805      	ldr	r0, [pc, #20]	; (11fa0 <hci_vendor_event+0x38>)
   11f8a:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
   11f8e:	f01c f9ba 	bl	2e306 <z_log_msg2_static_create.constprop.0>
}
   11f92:	46bd      	mov	sp, r7
   11f94:	bd80      	pop	{r7, pc}
   11f96:	bf00      	nop
   11f98:	00034f1e 	.word	0x00034f1e
   11f9c:	01000003 	.word	0x01000003
   11fa0:	0003244c 	.word	0x0003244c

00011fa4 <handle_event.part.0>:
static inline void handle_event(uint8_t event, struct net_buf *buf,
   11fa4:	b5b0      	push	{r4, r5, r7, lr}
   11fa6:	460b      	mov	r3, r1
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   11fa8:	898d      	ldrh	r5, [r1, #12]
static inline void handle_event(uint8_t event, struct net_buf *buf,
   11faa:	af00      	add	r7, sp, #0
   11fac:	4604      	mov	r4, r0
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   11fae:	4629      	mov	r1, r5
   11fb0:	6898      	ldr	r0, [r3, #8]
   11fb2:	f7ff f9f3 	bl	1139c <bt_hex_real>
   11fb6:	b08a      	sub	sp, #40	; 0x28
   11fb8:	4b09      	ldr	r3, [pc, #36]	; (11fe0 <handle_event.part.0+0x3c>)
   11fba:	466a      	mov	r2, sp
   11fbc:	e9c2 3404 	strd	r3, r4, [r2, #16]
   11fc0:	2304      	movs	r3, #4
   11fc2:	f882 3020 	strb.w	r3, [r2, #32]
   11fc6:	4b07      	ldr	r3, [pc, #28]	; (11fe4 <handle_event.part.0+0x40>)
   11fc8:	e9c2 5006 	strd	r5, r0, [r2, #24]
   11fcc:	f44f 512a 	mov.w	r1, #10880	; 0x2a80
   11fd0:	f842 3f0c 	str.w	r3, [r2, #12]!
   11fd4:	4804      	ldr	r0, [pc, #16]	; (11fe8 <handle_event.part.0+0x44>)
   11fd6:	f01c f996 	bl	2e306 <z_log_msg2_static_create.constprop.0>
}
   11fda:	46bd      	mov	sp, r7
   11fdc:	bdb0      	pop	{r4, r5, r7, pc}
   11fde:	bf00      	nop
   11fe0:	00034f42 	.word	0x00034f42
   11fe4:	01000005 	.word	0x01000005
   11fe8:	0003244c 	.word	0x0003244c

00011fec <handle_event>:
{
   11fec:	b598      	push	{r3, r4, r7, lr}
   11fee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   11ff2:	af00      	add	r7, sp, #0
		if (handler->event != event) {
   11ff4:	7814      	ldrb	r4, [r2, #0]
   11ff6:	4284      	cmp	r4, r0
   11ff8:	d005      	beq.n	12006 <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   11ffa:	3208      	adds	r2, #8
   11ffc:	429a      	cmp	r2, r3
   11ffe:	d1f9      	bne.n	11ff4 <handle_event+0x8>
   12000:	f7ff ffd0 	bl	11fa4 <handle_event.part.0>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   12004:	e013      	b.n	1202e <handle_event+0x42>
		if (buf->len < handler->min_len) {
   12006:	898b      	ldrh	r3, [r1, #12]
   12008:	7854      	ldrb	r4, [r2, #1]
   1200a:	429c      	cmp	r4, r3
   1200c:	d911      	bls.n	12032 <handle_event+0x46>
			BT_ERR("Too small (%u bytes) event 0x%02x",
   1200e:	490b      	ldr	r1, [pc, #44]	; (1203c <handle_event+0x50>)
   12010:	466c      	mov	r4, sp
   12012:	b088      	sub	sp, #32
   12014:	466a      	mov	r2, sp
   12016:	e9c2 1304 	strd	r1, r3, [r2, #16]
   1201a:	2304      	movs	r3, #4
   1201c:	6190      	str	r0, [r2, #24]
   1201e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   12022:	f842 3f0c 	str.w	r3, [r2, #12]!
   12026:	4806      	ldr	r0, [pc, #24]	; (12040 <handle_event+0x54>)
   12028:	f01c f96d 	bl	2e306 <z_log_msg2_static_create.constprop.0>
   1202c:	46a5      	mov	sp, r4
}
   1202e:	46bd      	mov	sp, r7
   12030:	bd98      	pop	{r3, r4, r7, pc}
		handler->handler(buf);
   12032:	6853      	ldr	r3, [r2, #4]
   12034:	4608      	mov	r0, r1
   12036:	4798      	blx	r3
		return;
   12038:	e7f9      	b.n	1202e <handle_event+0x42>
   1203a:	bf00      	nop
   1203c:	00034f64 	.word	0x00034f64
   12040:	0003244c 	.word	0x0003244c

00012044 <hci_le_meta_event>:
{
   12044:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   12046:	2101      	movs	r1, #1
   12048:	4604      	mov	r4, r0
   1204a:	3008      	adds	r0, #8
   1204c:	f01e fd39 	bl	30ac2 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   12050:	4621      	mov	r1, r4
   12052:	4a03      	ldr	r2, [pc, #12]	; (12060 <hci_le_meta_event+0x1c>)
   12054:	7800      	ldrb	r0, [r0, #0]
}
   12056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   1205a:	230a      	movs	r3, #10
   1205c:	f7ff bfc6 	b.w	11fec <handle_event>
   12060:	00032bd8 	.word	0x00032bd8

00012064 <hci_hardware_error>:
{
   12064:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   12066:	2101      	movs	r1, #1
   12068:	3008      	adds	r0, #8
   1206a:	f01e fd2a 	bl	30ac2 <net_buf_simple_pull_mem>
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   1206e:	4a07      	ldr	r2, [pc, #28]	; (1208c <hci_hardware_error+0x28>)
   12070:	7803      	ldrb	r3, [r0, #0]
   12072:	4807      	ldr	r0, [pc, #28]	; (12090 <hci_hardware_error+0x2c>)
   12074:	e9cd 2304 	strd	r2, r3, [sp, #16]
   12078:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1207c:	2303      	movs	r3, #3
   1207e:	aa03      	add	r2, sp, #12
   12080:	9303      	str	r3, [sp, #12]
   12082:	f01c f940 	bl	2e306 <z_log_msg2_static_create.constprop.0>
}
   12086:	b007      	add	sp, #28
   12088:	f85d fb04 	ldr.w	pc, [sp], #4
   1208c:	00034f86 	.word	0x00034f86
   12090:	0003244c 	.word	0x0003244c

00012094 <le_data_len_change>:
{
   12094:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12096:	6883      	ldr	r3, [r0, #8]
   12098:	881c      	ldrh	r4, [r3, #0]
{
   1209a:	b086      	sub	sp, #24
	conn = bt_conn_lookup_handle(handle);
   1209c:	4620      	mov	r0, r4
   1209e:	f002 fd75 	bl	14b8c <bt_conn_lookup_handle>
	if (!conn) {
   120a2:	b960      	cbnz	r0, 120be <le_data_len_change+0x2a>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   120a4:	4b08      	ldr	r3, [pc, #32]	; (120c8 <le_data_len_change+0x34>)
   120a6:	4809      	ldr	r0, [pc, #36]	; (120cc <le_data_len_change+0x38>)
   120a8:	e9cd 3404 	strd	r3, r4, [sp, #16]
   120ac:	aa03      	add	r2, sp, #12
   120ae:	2303      	movs	r3, #3
   120b0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   120b4:	9303      	str	r3, [sp, #12]
   120b6:	f01c f926 	bl	2e306 <z_log_msg2_static_create.constprop.0>
}
   120ba:	b006      	add	sp, #24
   120bc:	bd10      	pop	{r4, pc}
   120be:	b006      	add	sp, #24
   120c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   120c4:	f01c bc51 	b.w	2e96a <bt_conn_unref>
   120c8:	00034efa 	.word	0x00034efa
   120cc:	0003244c 	.word	0x0003244c

000120d0 <le_phy_update_complete>:
{
   120d0:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   120d2:	6883      	ldr	r3, [r0, #8]
   120d4:	f8b3 4001 	ldrh.w	r4, [r3, #1]
{
   120d8:	b086      	sub	sp, #24
	conn = bt_conn_lookup_handle(handle);
   120da:	4620      	mov	r0, r4
   120dc:	f002 fd56 	bl	14b8c <bt_conn_lookup_handle>
	if (!conn) {
   120e0:	b960      	cbnz	r0, 120fc <le_phy_update_complete+0x2c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   120e2:	4b09      	ldr	r3, [pc, #36]	; (12108 <le_phy_update_complete+0x38>)
   120e4:	4809      	ldr	r0, [pc, #36]	; (1210c <le_phy_update_complete+0x3c>)
   120e6:	e9cd 3404 	strd	r3, r4, [sp, #16]
   120ea:	aa03      	add	r2, sp, #12
   120ec:	2303      	movs	r3, #3
   120ee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   120f2:	9303      	str	r3, [sp, #12]
   120f4:	f01c f907 	bl	2e306 <z_log_msg2_static_create.constprop.0>
}
   120f8:	b006      	add	sp, #24
   120fa:	bd10      	pop	{r4, pc}
   120fc:	b006      	add	sp, #24
   120fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   12102:	f01c bc32 	b.w	2e96a <bt_conn_unref>
   12106:	bf00      	nop
   12108:	00034efa 	.word	0x00034efa
   1210c:	0003244c 	.word	0x0003244c

00012110 <hci_disconn_complete>:
{
   12110:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   12112:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
   12114:	782e      	ldrb	r6, [r5, #0]
{
   12116:	b087      	sub	sp, #28
	if (evt->status) {
   12118:	b98e      	cbnz	r6, 1213e <hci_disconn_complete+0x2e>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1211a:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   1211e:	4638      	mov	r0, r7
   12120:	f002 fd34 	bl	14b8c <bt_conn_lookup_handle>
	if (!conn) {
   12124:	4604      	mov	r4, r0
   12126:	b960      	cbnz	r0, 12142 <hci_disconn_complete+0x32>
		BT_ERR("Unable to look up conn with handle %u", handle);
   12128:	4b0b      	ldr	r3, [pc, #44]	; (12158 <hci_disconn_complete+0x48>)
   1212a:	480c      	ldr	r0, [pc, #48]	; (1215c <hci_disconn_complete+0x4c>)
   1212c:	e9cd 3704 	strd	r3, r7, [sp, #16]
   12130:	aa03      	add	r2, sp, #12
   12132:	2303      	movs	r3, #3
   12134:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12138:	9303      	str	r3, [sp, #12]
   1213a:	f01c f8e4 	bl	2e306 <z_log_msg2_static_create.constprop.0>
}
   1213e:	b007      	add	sp, #28
   12140:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn->err = evt->reason;
   12142:	78eb      	ldrb	r3, [r5, #3]
   12144:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   12146:	4631      	mov	r1, r6
   12148:	f002 fd28 	bl	14b9c <bt_conn_set_state>
		bt_conn_unref(conn);
   1214c:	4620      	mov	r0, r4
}
   1214e:	b007      	add	sp, #28
   12150:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   12154:	f01c bc09 	b.w	2e96a <bt_conn_unref>
   12158:	00034fa8 	.word	0x00034fa8
   1215c:	0003244c 	.word	0x0003244c

00012160 <le_remote_feat_complete>:
{
   12160:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   12162:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12164:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   12168:	b086      	sub	sp, #24
	conn = bt_conn_lookup_handle(handle);
   1216a:	4630      	mov	r0, r6
   1216c:	f002 fd0e 	bl	14b8c <bt_conn_lookup_handle>
	if (!conn) {
   12170:	4604      	mov	r4, r0
   12172:	b960      	cbnz	r0, 1218e <le_remote_feat_complete+0x2e>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   12174:	4b0f      	ldr	r3, [pc, #60]	; (121b4 <le_remote_feat_complete+0x54>)
   12176:	4810      	ldr	r0, [pc, #64]	; (121b8 <le_remote_feat_complete+0x58>)
   12178:	e9cd 3604 	strd	r3, r6, [sp, #16]
   1217c:	aa03      	add	r2, sp, #12
   1217e:	2303      	movs	r3, #3
   12180:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12184:	9303      	str	r3, [sp, #12]
   12186:	f01c f8be 	bl	2e306 <z_log_msg2_static_create.constprop.0>
}
   1218a:	b006      	add	sp, #24
   1218c:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
   1218e:	782b      	ldrb	r3, [r5, #0]
   12190:	b923      	cbnz	r3, 1219c <le_remote_feat_complete+0x3c>
		memcpy(conn->le.features, evt->features,
   12192:	2208      	movs	r2, #8
   12194:	1ce9      	adds	r1, r5, #3
   12196:	30ac      	adds	r0, #172	; 0xac
   12198:	f01b ff47 	bl	2e02a <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1219c:	f44f 6100 	mov.w	r1, #2048	; 0x800
   121a0:	1d20      	adds	r0, r4, #4
   121a2:	f01c f89c 	bl	2e2de <atomic_or>
	bt_conn_unref(conn);
   121a6:	4620      	mov	r0, r4
}
   121a8:	b006      	add	sp, #24
   121aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   121ae:	f01c bbdc 	b.w	2e96a <bt_conn_unref>
   121b2:	bf00      	nop
   121b4:	00034efa 	.word	0x00034efa
   121b8:	0003244c 	.word	0x0003244c

000121bc <hci_cmd_done>:
{
   121bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   121c0:	4606      	mov	r6, r0
   121c2:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   121c4:	7990      	ldrb	r0, [r2, #6]
   121c6:	4d43      	ldr	r5, [pc, #268]	; (122d4 <hci_cmd_done+0x118>)
{
   121c8:	4688      	mov	r8, r1
   121ca:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   121cc:	f015 fca6 	bl	27b1c <net_buf_pool_get>
   121d0:	4285      	cmp	r5, r0
   121d2:	d018      	beq.n	12206 <hci_cmd_done+0x4a>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   121d4:	79a4      	ldrb	r4, [r4, #6]
   121d6:	4620      	mov	r0, r4
   121d8:	f015 fca0 	bl	27b1c <net_buf_pool_get>
   121dc:	46e8      	mov	r8, sp
   121de:	4b3e      	ldr	r3, [pc, #248]	; (122d8 <hci_cmd_done+0x11c>)
   121e0:	b08a      	sub	sp, #40	; 0x28
   121e2:	466a      	mov	r2, sp
   121e4:	e9c2 3604 	strd	r3, r6, [r2, #16]
   121e8:	2306      	movs	r3, #6
   121ea:	e9c2 4006 	strd	r4, r0, [r2, #24]
   121ee:	6215      	str	r5, [r2, #32]
   121f0:	483a      	ldr	r0, [pc, #232]	; (122dc <hci_cmd_done+0x120>)
   121f2:	f842 3f0c 	str.w	r3, [r2, #12]!
   121f6:	f44f 5142 	mov.w	r1, #12416	; 0x3080
   121fa:	f01c f884 	bl	2e306 <z_log_msg2_static_create.constprop.0>
   121fe:	46c5      	mov	sp, r8
}
   12200:	46bd      	mov	sp, r7
   12202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   12206:	4620      	mov	r0, r4
   12208:	f015 fc90 	bl	27b2c <net_buf_id>
   1220c:	4d34      	ldr	r5, [pc, #208]	; (122e0 <hci_cmd_done+0x124>)
   1220e:	f04f 090c 	mov.w	r9, #12
   12212:	fb09 5000 	mla	r0, r9, r0, r5
   12216:	8843      	ldrh	r3, [r0, #2]
   12218:	42b3      	cmp	r3, r6
   1221a:	d016      	beq.n	1224a <hci_cmd_done+0x8e>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   1221c:	4620      	mov	r0, r4
   1221e:	f015 fc85 	bl	27b2c <net_buf_id>
   12222:	466c      	mov	r4, sp
   12224:	fb09 5500 	mla	r5, r9, r0, r5
   12228:	b088      	sub	sp, #32
   1222a:	466a      	mov	r2, sp
   1222c:	886b      	ldrh	r3, [r5, #2]
   1222e:	492d      	ldr	r1, [pc, #180]	; (122e4 <hci_cmd_done+0x128>)
   12230:	6193      	str	r3, [r2, #24]
   12232:	2304      	movs	r3, #4
   12234:	e9c2 1604 	strd	r1, r6, [r2, #16]
   12238:	4828      	ldr	r0, [pc, #160]	; (122dc <hci_cmd_done+0x120>)
   1223a:	f842 3f0c 	str.w	r3, [r2, #12]!
   1223e:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   12242:	f01c f860 	bl	2e306 <z_log_msg2_static_create.constprop.0>
   12246:	46a5      	mov	sp, r4
		return;
   12248:	e7da      	b.n	12200 <hci_cmd_done+0x44>
	if (bt_dev.sent_cmd) {
   1224a:	4e27      	ldr	r6, [pc, #156]	; (122e8 <hci_cmd_done+0x12c>)
   1224c:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   12250:	b120      	cbz	r0, 1225c <hci_cmd_done+0xa0>
		net_buf_unref(bt_dev.sent_cmd);
   12252:	f015 fd27 	bl	27ca4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   12256:	2300      	movs	r3, #0
   12258:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   1225c:	4620      	mov	r0, r4
   1225e:	f015 fc65 	bl	27b2c <net_buf_id>
   12262:	260c      	movs	r6, #12
   12264:	fb06 5000 	mla	r0, r6, r0, r5
   12268:	6843      	ldr	r3, [r0, #4]
   1226a:	b1ab      	cbz	r3, 12298 <hci_cmd_done+0xdc>
   1226c:	f1b8 0f00 	cmp.w	r8, #0
   12270:	d112      	bne.n	12298 <hci_cmd_done+0xdc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   12272:	4620      	mov	r0, r4
   12274:	f015 fc5a 	bl	27b2c <net_buf_id>
   12278:	fb06 5000 	mla	r0, r6, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1227c:	2101      	movs	r1, #1
   1227e:	6842      	ldr	r2, [r0, #4]
   12280:	e9d2 0300 	ldrd	r0, r3, [r2]
	if (val) {
   12284:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   12286:	f003 061f 	and.w	r6, r3, #31
   1228a:	40b1      	lsls	r1, r6
	if (val) {
   1228c:	095b      	lsrs	r3, r3, #5
   1228e:	b1da      	cbz	r2, 122c8 <hci_cmd_done+0x10c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12290:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   12294:	f01c f823 	bl	2e2de <atomic_or>
	if (cmd(buf)->sync) {
   12298:	4620      	mov	r0, r4
   1229a:	f015 fc47 	bl	27b2c <net_buf_id>
   1229e:	260c      	movs	r6, #12
   122a0:	fb06 5000 	mla	r0, r6, r0, r5
   122a4:	6883      	ldr	r3, [r0, #8]
   122a6:	2b00      	cmp	r3, #0
   122a8:	d0aa      	beq.n	12200 <hci_cmd_done+0x44>
		cmd(buf)->status = status;
   122aa:	4620      	mov	r0, r4
   122ac:	f015 fc3e 	bl	27b2c <net_buf_id>
   122b0:	4370      	muls	r0, r6
   122b2:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   122b6:	4620      	mov	r0, r4
   122b8:	f015 fc38 	bl	27b2c <net_buf_id>
   122bc:	fb06 5500 	mla	r5, r6, r0, r5
   122c0:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   122c2:	f018 f9e3 	bl	2a68c <z_impl_k_sem_give>
}
   122c6:	e79b      	b.n	12200 <hci_cmd_done+0x44>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   122c8:	43c9      	mvns	r1, r1
   122ca:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   122ce:	f01c f81d 	bl	2e30c <atomic_and.isra.0>
   122d2:	e7e1      	b.n	12298 <hci_cmd_done+0xdc>
   122d4:	20000cf0 	.word	0x20000cf0
   122d8:	00034fce 	.word	0x00034fce
   122dc:	0003244c 	.word	0x0003244c
   122e0:	20001e70 	.word	0x20001e70
   122e4:	00035003 	.word	0x00035003
   122e8:	20000000 	.word	0x20000000

000122ec <hci_cmd_status>:
{
   122ec:	b538      	push	{r3, r4, r5, lr}
   122ee:	2104      	movs	r1, #4
   122f0:	4604      	mov	r4, r0
   122f2:	3008      	adds	r0, #8
   122f4:	f01e fbe5 	bl	30ac2 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   122f8:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   122fa:	7801      	ldrb	r1, [r0, #0]
   122fc:	8840      	ldrh	r0, [r0, #2]
   122fe:	4622      	mov	r2, r4
   12300:	f7ff ff5c 	bl	121bc <hci_cmd_done>
	if (ncmd) {
   12304:	b125      	cbz	r5, 12310 <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
   12306:	4803      	ldr	r0, [pc, #12]	; (12314 <hci_cmd_status+0x28>)
}
   12308:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1230c:	f018 b9be 	b.w	2a68c <z_impl_k_sem_give>
   12310:	bd38      	pop	{r3, r4, r5, pc}
   12312:	bf00      	nop
   12314:	20000120 	.word	0x20000120

00012318 <hci_cmd_complete>:
{
   12318:	b538      	push	{r3, r4, r5, lr}
   1231a:	2103      	movs	r1, #3
   1231c:	4604      	mov	r4, r0
   1231e:	3008      	adds	r0, #8
   12320:	f01e fbcf 	bl	30ac2 <net_buf_simple_pull_mem>
	status = buf->data[0];
   12324:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   12326:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   12328:	7819      	ldrb	r1, [r3, #0]
   1232a:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   1232e:	4622      	mov	r2, r4
   12330:	f7ff ff44 	bl	121bc <hci_cmd_done>
	if (ncmd) {
   12334:	b125      	cbz	r5, 12340 <hci_cmd_complete+0x28>
   12336:	4803      	ldr	r0, [pc, #12]	; (12344 <hci_cmd_complete+0x2c>)
}
   12338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1233c:	f018 b9a6 	b.w	2a68c <z_impl_k_sem_give>
   12340:	bd38      	pop	{r3, r4, r5, pc}
   12342:	bf00      	nop
   12344:	20000120 	.word	0x20000120

00012348 <hci_tx_thread>:
{
   12348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   1234c:	f8df 8154 	ldr.w	r8, [pc, #340]	; 124a4 <hci_tx_thread+0x15c>
		BT_ASSERT(err == 0);
   12350:	f8df 9154 	ldr.w	r9, [pc, #340]	; 124a8 <hci_tx_thread+0x160>
{
   12354:	b087      	sub	sp, #28
			ev_count += bt_conn_prepare_events(&events[1]);
   12356:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   1235a:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1235e:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
   12360:	f36f 3352 	bfc	r3, #13, #6
   12364:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   12368:	f002 fbda 	bl	14b20 <bt_conn_prepare_events>
   1236c:	1c46      	adds	r6, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   1236e:	484d      	ldr	r0, [pc, #308]	; (124a4 <hci_tx_thread+0x15c>)
   12370:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12374:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12378:	4631      	mov	r1, r6
   1237a:	f019 f8eb 	bl	2b554 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   1237e:	b160      	cbz	r0, 1239a <hci_tx_thread+0x52>
   12380:	494a      	ldr	r1, [pc, #296]	; (124ac <hci_tx_thread+0x164>)
   12382:	484b      	ldr	r0, [pc, #300]	; (124b0 <hci_tx_thread+0x168>)
   12384:	f640 13ad 	movw	r3, #2477	; 0x9ad
   12388:	464a      	mov	r2, r9
   1238a:	f019 fe1c 	bl	2bfc6 <assert_print>
   1238e:	4040      	eors	r0, r0
   12390:	f380 8811 	msr	BASEPRI, r0
   12394:	f04f 0003 	mov.w	r0, #3
   12398:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   1239a:	4d46      	ldr	r5, [pc, #280]	; (124b4 <hci_tx_thread+0x16c>)
{
   1239c:	4f41      	ldr	r7, [pc, #260]	; (124a4 <hci_tx_thread+0x15c>)
   1239e:	f505 7b90 	add.w	fp, r5, #288	; 0x120
	for (; count; ev++, count--) {
   123a2:	b916      	cbnz	r6, 123aa <hci_tx_thread+0x62>
	z_impl_k_yield();
   123a4:	f018 fdd0 	bl	2af48 <z_impl_k_yield>
	while (1) {
   123a8:	e7d7      	b.n	1235a <hci_tx_thread+0x12>
		switch (ev->state) {
   123aa:	68fb      	ldr	r3, [r7, #12]
   123ac:	f3c3 3345 	ubfx	r3, r3, #13, #6
   123b0:	2b01      	cmp	r3, #1
   123b2:	d960      	bls.n	12476 <hci_tx_thread+0x12e>
   123b4:	2b04      	cmp	r3, #4
   123b6:	d168      	bne.n	1248a <hci_tx_thread+0x142>
			if (ev->tag == BT_EVENT_CMD_TX) {
   123b8:	7b3b      	ldrb	r3, [r7, #12]
   123ba:	2b00      	cmp	r3, #0
   123bc:	d15e      	bne.n	1247c <hci_tx_thread+0x134>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   123be:	483e      	ldr	r0, [pc, #248]	; (124b8 <hci_tx_thread+0x170>)
   123c0:	2200      	movs	r2, #0
   123c2:	2300      	movs	r3, #0
   123c4:	f01e fab1 	bl	3092a <net_buf_get>
	BT_ASSERT(buf);
   123c8:	4604      	mov	r4, r0
   123ca:	b960      	cbnz	r0, 123e6 <hci_tx_thread+0x9e>
   123cc:	493b      	ldr	r1, [pc, #236]	; (124bc <hci_tx_thread+0x174>)
   123ce:	4838      	ldr	r0, [pc, #224]	; (124b0 <hci_tx_thread+0x168>)
   123d0:	f640 1344 	movw	r3, #2372	; 0x944
   123d4:	464a      	mov	r2, r9
   123d6:	f019 fdf6 	bl	2bfc6 <assert_print>
   123da:	4040      	eors	r0, r0
   123dc:	f380 8811 	msr	BASEPRI, r0
   123e0:	f04f 0003 	mov.w	r0, #3
   123e4:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   123e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   123ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   123ee:	4658      	mov	r0, fp
   123f0:	f018 f972 	bl	2a6d8 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   123f4:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
   123f8:	b183      	cbz	r3, 1241c <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
   123fa:	4b31      	ldr	r3, [pc, #196]	; (124c0 <hci_tx_thread+0x178>)
   123fc:	4831      	ldr	r0, [pc, #196]	; (124c4 <hci_tx_thread+0x17c>)
   123fe:	9304      	str	r3, [sp, #16]
   12400:	aa03      	add	r2, sp, #12
   12402:	2302      	movs	r3, #2
   12404:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12408:	9303      	str	r3, [sp, #12]
   1240a:	f01b ff7c 	bl	2e306 <z_log_msg2_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
   1240e:	f8d5 0138 	ldr.w	r0, [r5, #312]	; 0x138
   12412:	f015 fc47 	bl	27ca4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   12416:	2300      	movs	r3, #0
   12418:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   1241c:	4620      	mov	r0, r4
   1241e:	f01e faf7 	bl	30a10 <net_buf_ref>
   12422:	f8c5 0138 	str.w	r0, [r5, #312]	; 0x138
		return bt_hci_ecc_send(buf);
   12426:	4620      	mov	r0, r4
   12428:	f7ff f952 	bl	116d0 <bt_hci_ecc_send>
	if (err) {
   1242c:	b318      	cbz	r0, 12476 <hci_tx_thread+0x12e>
		BT_ERR("Unable to send to driver (err %d)", err);
   1242e:	4b26      	ldr	r3, [pc, #152]	; (124c8 <hci_tx_thread+0x180>)
   12430:	aa03      	add	r2, sp, #12
   12432:	e9cd 3004 	strd	r3, r0, [sp, #16]
   12436:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1243a:	2303      	movs	r3, #3
   1243c:	4821      	ldr	r0, [pc, #132]	; (124c4 <hci_tx_thread+0x17c>)
   1243e:	9303      	str	r3, [sp, #12]
   12440:	f01b ff61 	bl	2e306 <z_log_msg2_static_create.constprop.0>
	z_impl_k_sem_give(sem);
   12444:	4821      	ldr	r0, [pc, #132]	; (124cc <hci_tx_thread+0x184>)
   12446:	f018 f921 	bl	2a68c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   1244a:	4620      	mov	r0, r4
   1244c:	f015 fb6e 	bl	27b2c <net_buf_id>
   12450:	4b1f      	ldr	r3, [pc, #124]	; (124d0 <hci_tx_thread+0x188>)
   12452:	220c      	movs	r2, #12
   12454:	fb02 3000 	mla	r0, r2, r0, r3
   12458:	211f      	movs	r1, #31
   1245a:	8840      	ldrh	r0, [r0, #2]
   1245c:	4622      	mov	r2, r4
   1245e:	f7ff fead 	bl	121bc <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   12462:	f8d5 0138 	ldr.w	r0, [r5, #312]	; 0x138
   12466:	f015 fc1d 	bl	27ca4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1246a:	2300      	movs	r3, #0
		net_buf_unref(buf);
   1246c:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   1246e:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
		net_buf_unref(buf);
   12472:	f015 fc17 	bl	27ca4 <net_buf_unref>
	for (; count; ev++, count--) {
   12476:	3714      	adds	r7, #20
   12478:	3e01      	subs	r6, #1
   1247a:	e792      	b.n	123a2 <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   1247c:	2b01      	cmp	r3, #1
   1247e:	d1fa      	bne.n	12476 <hci_tx_thread+0x12e>
					conn = CONTAINER_OF(ev->fifo,
   12480:	6938      	ldr	r0, [r7, #16]
					bt_conn_process_tx(conn);
   12482:	3838      	subs	r0, #56	; 0x38
   12484:	f002 fee2 	bl	1524c <bt_conn_process_tx>
   12488:	e7f5      	b.n	12476 <hci_tx_thread+0x12e>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   1248a:	4a12      	ldr	r2, [pc, #72]	; (124d4 <hci_tx_thread+0x18c>)
   1248c:	480d      	ldr	r0, [pc, #52]	; (124c4 <hci_tx_thread+0x17c>)
		switch (ev->state) {
   1248e:	e9cd 2304 	strd	r2, r3, [sp, #16]
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   12492:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   12496:	2303      	movs	r3, #3
   12498:	aa03      	add	r2, sp, #12
   1249a:	9303      	str	r3, [sp, #12]
   1249c:	f01b ff33 	bl	2e306 <z_log_msg2_static_create.constprop.0>
   124a0:	e7e9      	b.n	12476 <hci_tx_thread+0x12e>
   124a2:	bf00      	nop
   124a4:	20000310 	.word	0x20000310
   124a8:	00035036 	.word	0x00035036
   124ac:	0003506a 	.word	0x0003506a
   124b0:	00035073 	.word	0x00035073
   124b4:	20000000 	.word	0x20000000
   124b8:	2000013c 	.word	0x2000013c
   124bc:	00034d90 	.word	0x00034d90
   124c0:	00035090 	.word	0x00035090
   124c4:	0003244c 	.word	0x0003244c
   124c8:	000350ab 	.word	0x000350ab
   124cc:	20000120 	.word	0x20000120
   124d0:	20001e70 	.word	0x20001e70
   124d4:	000350cd 	.word	0x000350cd

000124d8 <hci_num_completed_packets>:
{
   124d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
   124dc:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   124de:	6887      	ldr	r7, [r0, #8]
				BT_ERR("packets count mismatch");
   124e0:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 125cc <hci_num_completed_packets+0xf4>
{
   124e4:	b086      	sub	sp, #24
			tx->pending_no_cb = 0U;
   124e6:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   124e8:	783b      	ldrb	r3, [r7, #0]
   124ea:	429d      	cmp	r5, r3
   124ec:	db02      	blt.n	124f4 <hci_num_completed_packets+0x1c>
}
   124ee:	b006      	add	sp, #24
   124f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   124f4:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   124f8:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   124fc:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   12500:	4650      	mov	r0, sl
   12502:	f002 fb43 	bl	14b8c <bt_conn_lookup_handle>
		if (!conn) {
   12506:	4604      	mov	r4, r0
   12508:	b1d8      	cbz	r0, 12542 <hci_num_completed_packets+0x6a>
			k_work_submit(&conn->tx_complete_work);
   1250a:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
   1250e:	2e00      	cmp	r6, #0
   12510:	d03b      	beq.n	1258a <hci_num_completed_packets+0xb2>
	__asm__ volatile(
   12512:	f04f 0320 	mov.w	r3, #32
   12516:	f3ef 8211 	mrs	r2, BASEPRI
   1251a:	f383 8812 	msr	BASEPRI_MAX, r3
   1251e:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   12522:	69e3      	ldr	r3, [r4, #28]
   12524:	b1d3      	cbz	r3, 1255c <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
   12526:	3b01      	subs	r3, #1
   12528:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1252a:	f382 8811 	msr	BASEPRI, r2
   1252e:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   12532:	4620      	mov	r0, r4
   12534:	f002 f9c4 	bl	148c0 <bt_conn_get_pkts>
   12538:	3e01      	subs	r6, #1
   1253a:	f018 f8a7 	bl	2a68c <z_impl_k_sem_give>
   1253e:	b2b6      	uxth	r6, r6
   12540:	e7e5      	b.n	1250e <hci_num_completed_packets+0x36>
			BT_ERR("No connection for handle %u", handle);
   12542:	4b23      	ldr	r3, [pc, #140]	; (125d0 <hci_num_completed_packets+0xf8>)
   12544:	4823      	ldr	r0, [pc, #140]	; (125d4 <hci_num_completed_packets+0xfc>)
   12546:	e9cd 3a04 	strd	r3, sl, [sp, #16]
   1254a:	aa03      	add	r2, sp, #12
   1254c:	2303      	movs	r3, #3
   1254e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12552:	9303      	str	r3, [sp, #12]
   12554:	f01b fed7 	bl	2e306 <z_log_msg2_static_create.constprop.0>
	for (i = 0; i < evt->num_handles; i++) {
   12558:	3501      	adds	r5, #1
   1255a:	e7c5      	b.n	124e8 <hci_num_completed_packets+0x10>
	return list->head;
   1255c:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   1255e:	b12b      	cbz	r3, 1256c <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12560:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   12562:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   12564:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12566:	428b      	cmp	r3, r1
	list->tail = node;
   12568:	bf08      	it	eq
   1256a:	61a0      	streq	r0, [r4, #24]
   1256c:	f382 8811 	msr	BASEPRI, r2
   12570:	f3bf 8f6f 	isb	sy
			if (!node) {
   12574:	b96b      	cbnz	r3, 12592 <hci_num_completed_packets+0xba>
				BT_ERR("packets count mismatch");
   12576:	2302      	movs	r3, #2
   12578:	4816      	ldr	r0, [pc, #88]	; (125d4 <hci_num_completed_packets+0xfc>)
   1257a:	f8cd 9010 	str.w	r9, [sp, #16]
   1257e:	aa03      	add	r2, sp, #12
   12580:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12584:	9303      	str	r3, [sp, #12]
   12586:	f01b febe 	bl	2e306 <z_log_msg2_static_create.constprop.0>
		bt_conn_unref(conn);
   1258a:	4620      	mov	r0, r4
   1258c:	f01c f9ed 	bl	2e96a <bt_conn_unref>
   12590:	e7e2      	b.n	12558 <hci_num_completed_packets+0x80>
	__asm__ volatile(
   12592:	f04f 0220 	mov.w	r2, #32
   12596:	f3ef 8111 	mrs	r1, BASEPRI
   1259a:	f382 8812 	msr	BASEPRI_MAX, r2
   1259e:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   125a2:	68da      	ldr	r2, [r3, #12]
   125a4:	61e2      	str	r2, [r4, #28]
	return list->tail;
   125a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   125a8:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   125ac:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   125b0:	b94a      	cbnz	r2, 125c6 <hci_num_completed_packets+0xee>
	list->head = node;
   125b2:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   125b6:	f381 8811 	msr	BASEPRI, r1
   125ba:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   125be:	4650      	mov	r0, sl
   125c0:	f018 f9d0 	bl	2a964 <k_work_submit>
   125c4:	e7b5      	b.n	12532 <hci_num_completed_packets+0x5a>
	parent->next = child;
   125c6:	6013      	str	r3, [r2, #0]
	list->tail = node;
   125c8:	6263      	str	r3, [r4, #36]	; 0x24
}
   125ca:	e7f4      	b.n	125b6 <hci_num_completed_packets+0xde>
   125cc:	0003510a 	.word	0x0003510a
   125d0:	000350ee 	.word	0x000350ee
   125d4:	0003244c 	.word	0x0003244c

000125d8 <bt_hci_cmd_state_set_init>:
{
   125d8:	b510      	push	{r4, lr}
	state->bit = bit;
   125da:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   125de:	f89d 3008 	ldrb.w	r3, [sp, #8]
   125e2:	720b      	strb	r3, [r1, #8]
{
   125e4:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   125e6:	f015 faa1 	bl	27b2c <net_buf_id>
   125ea:	4b03      	ldr	r3, [pc, #12]	; (125f8 <bt_hci_cmd_state_set_init+0x20>)
   125ec:	220c      	movs	r2, #12
   125ee:	fb02 3300 	mla	r3, r2, r0, r3
   125f2:	605c      	str	r4, [r3, #4]
}
   125f4:	bd10      	pop	{r4, pc}
   125f6:	bf00      	nop
   125f8:	20001e70 	.word	0x20001e70

000125fc <bt_hci_cmd_create>:
{
   125fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   12600:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12604:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12608:	4606      	mov	r6, r0
   1260a:	4817      	ldr	r0, [pc, #92]	; (12668 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   1260c:	4d17      	ldr	r5, [pc, #92]	; (1266c <bt_hci_cmd_create+0x70>)
{
   1260e:	460f      	mov	r7, r1
   12610:	f01e f986 	bl	30920 <net_buf_alloc_fixed>
   12614:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   12616:	f100 0a08 	add.w	sl, r0, #8
   1261a:	2100      	movs	r1, #0
   1261c:	f04f 0800 	mov.w	r8, #0
   12620:	4650      	mov	r0, sl
   12622:	f01e f99c 	bl	3095e <net_buf_simple_reserve>
   12626:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   1262a:	4620      	mov	r0, r4
   1262c:	f015 fa7e 	bl	27b2c <net_buf_id>
   12630:	f04f 090c 	mov.w	r9, #12
   12634:	fb09 5000 	mla	r0, r9, r0, r5
   12638:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   1263a:	4620      	mov	r0, r4
   1263c:	f015 fa76 	bl	27b2c <net_buf_id>
   12640:	fb09 5000 	mla	r0, r9, r0, r5
   12644:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   12648:	4620      	mov	r0, r4
   1264a:	f015 fa6f 	bl	27b2c <net_buf_id>
   1264e:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   12652:	2103      	movs	r1, #3
   12654:	f8c5 8004 	str.w	r8, [r5, #4]
   12658:	4650      	mov	r0, sl
   1265a:	f01e fa0b 	bl	30a74 <net_buf_simple_add>
	hdr->param_len = param_len;
   1265e:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   12660:	8006      	strh	r6, [r0, #0]
}
   12662:	4620      	mov	r0, r4
   12664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12668:	20000cf0 	.word	0x20000cf0
   1266c:	20001e70 	.word	0x20001e70

00012670 <bt_hci_cmd_send>:
{
   12670:	b530      	push	{r4, r5, lr}
   12672:	4605      	mov	r5, r0
   12674:	b087      	sub	sp, #28
	if (!buf) {
   12676:	460c      	mov	r4, r1
   12678:	b919      	cbnz	r1, 12682 <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   1267a:	f7ff ffbf 	bl	125fc <bt_hci_cmd_create>
		if (!buf) {
   1267e:	4604      	mov	r4, r0
   12680:	b1f8      	cbz	r0, 126c2 <bt_hci_cmd_send+0x52>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   12682:	f640 4335 	movw	r3, #3125	; 0xc35
   12686:	429d      	cmp	r5, r3
   12688:	d115      	bne.n	126b6 <bt_hci_cmd_send+0x46>
		return bt_hci_ecc_send(buf);
   1268a:	4620      	mov	r0, r4
   1268c:	f7ff f820 	bl	116d0 <bt_hci_ecc_send>
		if (err) {
   12690:	4605      	mov	r5, r0
   12692:	b168      	cbz	r0, 126b0 <bt_hci_cmd_send+0x40>
			BT_ERR("Unable to send to driver (err %d)", err);
   12694:	4b0c      	ldr	r3, [pc, #48]	; (126c8 <bt_hci_cmd_send+0x58>)
   12696:	aa03      	add	r2, sp, #12
   12698:	e9cd 3004 	strd	r3, r0, [sp, #16]
   1269c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   126a0:	480a      	ldr	r0, [pc, #40]	; (126cc <bt_hci_cmd_send+0x5c>)
   126a2:	2303      	movs	r3, #3
   126a4:	9303      	str	r3, [sp, #12]
   126a6:	f01b fe2e 	bl	2e306 <z_log_msg2_static_create.constprop.0>
			net_buf_unref(buf);
   126aa:	4620      	mov	r0, r4
   126ac:	f015 fafa 	bl	27ca4 <net_buf_unref>
}
   126b0:	4628      	mov	r0, r5
   126b2:	b007      	add	sp, #28
   126b4:	bd30      	pop	{r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   126b6:	4806      	ldr	r0, [pc, #24]	; (126d0 <bt_hci_cmd_send+0x60>)
   126b8:	4621      	mov	r1, r4
   126ba:	f01e f99c 	bl	309f6 <net_buf_put>
	return 0;
   126be:	2500      	movs	r5, #0
   126c0:	e7f6      	b.n	126b0 <bt_hci_cmd_send+0x40>
			return -ENOBUFS;
   126c2:	f06f 0568 	mvn.w	r5, #104	; 0x68
   126c6:	e7f3      	b.n	126b0 <bt_hci_cmd_send+0x40>
   126c8:	000350ab 	.word	0x000350ab
   126cc:	0003244c 	.word	0x0003244c
   126d0:	2000013c 	.word	0x2000013c

000126d4 <le_ltk_request>:
{
   126d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   126d6:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   126d8:	8826      	ldrh	r6, [r4, #0]
   126da:	b2b7      	uxth	r7, r6
{
   126dc:	b08d      	sub	sp, #52	; 0x34
	conn = bt_conn_lookup_handle(handle);
   126de:	4638      	mov	r0, r7
   126e0:	f002 fa54 	bl	14b8c <bt_conn_lookup_handle>
	if (!conn) {
   126e4:	4605      	mov	r5, r0
   126e6:	b960      	cbnz	r0, 12702 <le_ltk_request+0x2e>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   126e8:	4b26      	ldr	r3, [pc, #152]	; (12784 <le_ltk_request+0xb0>)
   126ea:	4827      	ldr	r0, [pc, #156]	; (12788 <le_ltk_request+0xb4>)
   126ec:	e9cd 370a 	strd	r3, r7, [sp, #40]	; 0x28
   126f0:	aa09      	add	r2, sp, #36	; 0x24
   126f2:	2303      	movs	r3, #3
   126f4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   126f8:	9309      	str	r3, [sp, #36]	; 0x24
   126fa:	f01b fe04 	bl	2e306 <z_log_msg2_static_create.constprop.0>
}
   126fe:	b00d      	add	sp, #52	; 0x34
   12700:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   12702:	af02      	add	r7, sp, #8
   12704:	f8d4 2002 	ldr.w	r2, [r4, #2]
   12708:	f8d4 3006 	ldr.w	r3, [r4, #6]
   1270c:	9701      	str	r7, [sp, #4]
   1270e:	8961      	ldrh	r1, [r4, #10]
   12710:	9100      	str	r1, [sp, #0]
   12712:	f01d fca9 	bl	30068 <bt_smp_request_ltk>
   12716:	b320      	cbz	r0, 12762 <le_ltk_request+0x8e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   12718:	2112      	movs	r1, #18
   1271a:	f242 001a 	movw	r0, #8218	; 0x201a
   1271e:	f7ff ff6d 	bl	125fc <bt_hci_cmd_create>
	if (!buf) {
   12722:	4604      	mov	r4, r0
   12724:	b968      	cbnz	r0, 12742 <le_ltk_request+0x6e>
		BT_ERR("Out of command buffers");
   12726:	4b19      	ldr	r3, [pc, #100]	; (1278c <le_ltk_request+0xb8>)
   12728:	930a      	str	r3, [sp, #40]	; 0x28
   1272a:	4817      	ldr	r0, [pc, #92]	; (12788 <le_ltk_request+0xb4>)
   1272c:	2302      	movs	r3, #2
   1272e:	aa09      	add	r2, sp, #36	; 0x24
   12730:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12734:	9309      	str	r3, [sp, #36]	; 0x24
   12736:	f01b fde6 	bl	2e306 <z_log_msg2_static_create.constprop.0>
	bt_conn_unref(conn);
   1273a:	4628      	mov	r0, r5
   1273c:	f01c f915 	bl	2e96a <bt_conn_unref>
   12740:	e7dd      	b.n	126fe <le_ltk_request+0x2a>
   12742:	2112      	movs	r1, #18
   12744:	3008      	adds	r0, #8
   12746:	f01e f995 	bl	30a74 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   1274a:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   1274c:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   12750:	2210      	movs	r2, #16
   12752:	f01b fc6a 	bl	2e02a <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   12756:	4621      	mov	r1, r4
   12758:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1275c:	f7ff ff88 	bl	12670 <bt_hci_cmd_send>
   12760:	e7eb      	b.n	1273a <le_ltk_request+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   12762:	2102      	movs	r1, #2
   12764:	f242 001b 	movw	r0, #8219	; 0x201b
   12768:	f7ff ff48 	bl	125fc <bt_hci_cmd_create>
	if (!buf) {
   1276c:	4604      	mov	r4, r0
   1276e:	2800      	cmp	r0, #0
   12770:	d0d9      	beq.n	12726 <le_ltk_request+0x52>
   12772:	2102      	movs	r1, #2
   12774:	3008      	adds	r0, #8
   12776:	f01e f97d 	bl	30a74 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1277a:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   1277c:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1277e:	f242 001b 	movw	r0, #8219	; 0x201b
   12782:	e7eb      	b.n	1275c <le_ltk_request+0x88>
   12784:	00034efa 	.word	0x00034efa
   12788:	0003244c 	.word	0x0003244c
   1278c:	00035121 	.word	0x00035121

00012790 <le_conn_param_req>:
{
   12790:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   12792:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   12794:	78d9      	ldrb	r1, [r3, #3]
   12796:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   12798:	881f      	ldrh	r7, [r3, #0]
{
   1279a:	b089      	sub	sp, #36	; 0x24
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1279c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   127a0:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   127a4:	7959      	ldrb	r1, [r3, #5]
   127a6:	791a      	ldrb	r2, [r3, #4]
   127a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   127ac:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   127b0:	799a      	ldrb	r2, [r3, #6]
   127b2:	79d9      	ldrb	r1, [r3, #7]
   127b4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   127b8:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   127bc:	7a1a      	ldrb	r2, [r3, #8]
   127be:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   127c0:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   127c2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   127c6:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   127c8:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   127cc:	f002 f9de 	bl	14b8c <bt_conn_lookup_handle>
	if (!conn) {
   127d0:	4606      	mov	r6, r0
   127d2:	b980      	cbnz	r0, 127f6 <le_conn_param_req+0x66>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   127d4:	4b20      	ldr	r3, [pc, #128]	; (12858 <le_conn_param_req+0xc8>)
   127d6:	4821      	ldr	r0, [pc, #132]	; (1285c <le_conn_param_req+0xcc>)
   127d8:	e9cd 3406 	strd	r3, r4, [sp, #24]
   127dc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   127e0:	2303      	movs	r3, #3
   127e2:	aa05      	add	r2, sp, #20
   127e4:	9305      	str	r3, [sp, #20]
   127e6:	f01b fd8e 	bl	2e306 <z_log_msg2_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   127ea:	2102      	movs	r1, #2
   127ec:	4620      	mov	r0, r4
   127ee:	f01b fda9 	bl	2e344 <le_conn_param_neg_reply>
}
   127f2:	b009      	add	sp, #36	; 0x24
   127f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   127f6:	4669      	mov	r1, sp
   127f8:	f002 fb2c 	bl	14e54 <le_param_req>
   127fc:	b938      	cbnz	r0, 1280e <le_conn_param_req+0x7e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   127fe:	211e      	movs	r1, #30
   12800:	4620      	mov	r0, r4
   12802:	f01b fd9f 	bl	2e344 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   12806:	4630      	mov	r0, r6
   12808:	f01c f8af 	bl	2e96a <bt_conn_unref>
   1280c:	e7f1      	b.n	127f2 <le_conn_param_req+0x62>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1280e:	210e      	movs	r1, #14
   12810:	f242 0020 	movw	r0, #8224	; 0x2020
   12814:	f7ff fef2 	bl	125fc <bt_hci_cmd_create>
	if (!buf) {
   12818:	4605      	mov	r5, r0
   1281a:	2800      	cmp	r0, #0
   1281c:	d0f3      	beq.n	12806 <le_conn_param_req+0x76>
   1281e:	210e      	movs	r1, #14
   12820:	3008      	adds	r0, #8
   12822:	f01e f927 	bl	30a74 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   12826:	220e      	movs	r2, #14
   12828:	4604      	mov	r4, r0
   1282a:	2100      	movs	r1, #0
   1282c:	f01b fc08 	bl	2e040 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   12830:	f8bd 3000 	ldrh.w	r3, [sp]
   12834:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   12836:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1283a:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1283c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   12840:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   12842:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   12846:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   12848:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1284a:	4629      	mov	r1, r5
   1284c:	f242 0020 	movw	r0, #8224	; 0x2020
   12850:	f7ff ff0e 	bl	12670 <bt_hci_cmd_send>
   12854:	e7d7      	b.n	12806 <le_conn_param_req+0x76>
   12856:	bf00      	nop
   12858:	00034efa 	.word	0x00034efa
   1285c:	0003244c 	.word	0x0003244c

00012860 <bt_hci_cmd_send_sync>:
{
   12860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12864:	b087      	sub	sp, #28
   12866:	4680      	mov	r8, r0
   12868:	af00      	add	r7, sp, #0
   1286a:	4615      	mov	r5, r2
	if (!buf) {
   1286c:	460c      	mov	r4, r1
   1286e:	b921      	cbnz	r1, 1287a <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
   12870:	f7ff fec4 	bl	125fc <bt_hci_cmd_create>
		if (!buf) {
   12874:	4604      	mov	r4, r0
   12876:	2800      	cmp	r0, #0
   12878:	d05b      	beq.n	12932 <bt_hci_cmd_send_sync+0xd2>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1287a:	2201      	movs	r2, #1
   1287c:	2100      	movs	r1, #0
   1287e:	4638      	mov	r0, r7
   12880:	f01e ff99 	bl	317b6 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   12884:	4620      	mov	r0, r4
   12886:	f015 f951 	bl	27b2c <net_buf_id>
   1288a:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 12938 <bt_hci_cmd_send_sync+0xd8>
   1288e:	230c      	movs	r3, #12
   12890:	fb03 9000 	mla	r0, r3, r0, r9
   12894:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   12896:	4620      	mov	r0, r4
   12898:	f01e f8ba 	bl	30a10 <net_buf_ref>
   1289c:	4601      	mov	r1, r0
   1289e:	4827      	ldr	r0, [pc, #156]	; (1293c <bt_hci_cmd_send_sync+0xdc>)
   128a0:	f01e f8a9 	bl	309f6 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   128a4:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   128a8:	2300      	movs	r3, #0
   128aa:	4638      	mov	r0, r7
   128ac:	f017 ff14 	bl	2a6d8 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   128b0:	4606      	mov	r6, r0
   128b2:	b180      	cbz	r0, 128d6 <bt_hci_cmd_send_sync+0x76>
   128b4:	4a22      	ldr	r2, [pc, #136]	; (12940 <bt_hci_cmd_send_sync+0xe0>)
   128b6:	4923      	ldr	r1, [pc, #140]	; (12944 <bt_hci_cmd_send_sync+0xe4>)
   128b8:	4823      	ldr	r0, [pc, #140]	; (12948 <bt_hci_cmd_send_sync+0xe8>)
   128ba:	f44f 739a 	mov.w	r3, #308	; 0x134
   128be:	f019 fb82 	bl	2bfc6 <assert_print>
   128c2:	4822      	ldr	r0, [pc, #136]	; (1294c <bt_hci_cmd_send_sync+0xec>)
   128c4:	4631      	mov	r1, r6
   128c6:	f019 fb7e 	bl	2bfc6 <assert_print>
   128ca:	4040      	eors	r0, r0
   128cc:	f380 8811 	msr	BASEPRI, r0
   128d0:	f04f 0003 	mov.w	r0, #3
   128d4:	df02      	svc	2
	status = cmd(buf)->status;
   128d6:	4620      	mov	r0, r4
   128d8:	f015 f928 	bl	27b2c <net_buf_id>
   128dc:	230c      	movs	r3, #12
   128de:	4358      	muls	r0, r3
   128e0:	f819 6000 	ldrb.w	r6, [r9, r0]
	if (status) {
   128e4:	b1e6      	cbz	r6, 12920 <bt_hci_cmd_send_sync+0xc0>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   128e6:	4b1a      	ldr	r3, [pc, #104]	; (12950 <bt_hci_cmd_send_sync+0xf0>)
   128e8:	481a      	ldr	r0, [pc, #104]	; (12954 <bt_hci_cmd_send_sync+0xf4>)
   128ea:	466d      	mov	r5, sp
   128ec:	b088      	sub	sp, #32
   128ee:	466a      	mov	r2, sp
   128f0:	e9c2 3804 	strd	r3, r8, [r2, #16]
   128f4:	2304      	movs	r3, #4
   128f6:	6196      	str	r6, [r2, #24]
   128f8:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   128fc:	f842 3f0c 	str.w	r3, [r2, #12]!
   12900:	f01b fd01 	bl	2e306 <z_log_msg2_static_create.constprop.0>
		net_buf_unref(buf);
   12904:	4620      	mov	r0, r4
   12906:	46ad      	mov	sp, r5
   12908:	f015 f9cc 	bl	27ca4 <net_buf_unref>
			return -EIO;
   1290c:	2e09      	cmp	r6, #9
   1290e:	bf0c      	ite	eq
   12910:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   12914:	f06f 0004 	mvnne.w	r0, #4
}
   12918:	371c      	adds	r7, #28
   1291a:	46bd      	mov	sp, r7
   1291c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
   12920:	b115      	cbz	r5, 12928 <bt_hci_cmd_send_sync+0xc8>
		*rsp = buf;
   12922:	602c      	str	r4, [r5, #0]
	return 0;
   12924:	4630      	mov	r0, r6
   12926:	e7f7      	b.n	12918 <bt_hci_cmd_send_sync+0xb8>
		net_buf_unref(buf);
   12928:	4620      	mov	r0, r4
   1292a:	f015 f9bb 	bl	27ca4 <net_buf_unref>
	return 0;
   1292e:	4628      	mov	r0, r5
   12930:	e7f2      	b.n	12918 <bt_hci_cmd_send_sync+0xb8>
			return -ENOBUFS;
   12932:	f06f 0068 	mvn.w	r0, #104	; 0x68
   12936:	e7ef      	b.n	12918 <bt_hci_cmd_send_sync+0xb8>
   12938:	20001e70 	.word	0x20001e70
   1293c:	2000013c 	.word	0x2000013c
   12940:	00035036 	.word	0x00035036
   12944:	0003506a 	.word	0x0003506a
   12948:	00035073 	.word	0x00035073
   1294c:	00035138 	.word	0x00035138
   12950:	00035158 	.word	0x00035158
   12954:	0003244c 	.word	0x0003244c

00012958 <hci_le_read_max_data_len>:
{
   12958:	b570      	push	{r4, r5, r6, lr}
   1295a:	b088      	sub	sp, #32
   1295c:	4606      	mov	r6, r0
   1295e:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   12960:	aa01      	add	r2, sp, #4
   12962:	2100      	movs	r1, #0
   12964:	f242 002f 	movw	r0, #8239	; 0x202f
   12968:	f7ff ff7a 	bl	12860 <bt_hci_cmd_send_sync>
	if (err) {
   1296c:	4604      	mov	r4, r0
   1296e:	b160      	cbz	r0, 1298a <hci_le_read_max_data_len+0x32>
		BT_ERR("Failed to read DLE max data len");
   12970:	4b0b      	ldr	r3, [pc, #44]	; (129a0 <hci_le_read_max_data_len+0x48>)
   12972:	9306      	str	r3, [sp, #24]
   12974:	480b      	ldr	r0, [pc, #44]	; (129a4 <hci_le_read_max_data_len+0x4c>)
   12976:	2302      	movs	r3, #2
   12978:	aa05      	add	r2, sp, #20
   1297a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1297e:	9305      	str	r3, [sp, #20]
   12980:	f01b fcc1 	bl	2e306 <z_log_msg2_static_create.constprop.0>
}
   12984:	4620      	mov	r0, r4
   12986:	b008      	add	sp, #32
   12988:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   1298a:	9801      	ldr	r0, [sp, #4]
   1298c:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   1298e:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   12992:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   12994:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   12998:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   1299a:	f015 f983 	bl	27ca4 <net_buf_unref>
	return 0;
   1299e:	e7f1      	b.n	12984 <hci_le_read_max_data_len+0x2c>
   129a0:	00035174 	.word	0x00035174
   129a4:	0003244c 	.word	0x0003244c

000129a8 <bt_hci_le_enh_conn_complete>:
{
   129a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129ac:	b08f      	sub	sp, #60	; 0x3c
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   129ae:	f8b0 9001 	ldrh.w	r9, [r0, #1]
		if (disconnected_handles[i] == handle) {
   129b2:	4abf      	ldr	r2, [pc, #764]	; (12cb0 <bt_hci_le_enh_conn_complete+0x308>)
	handle |= ~BT_ACL_HANDLE_MASK;
   129b4:	ea6f 5309 	mvn.w	r3, r9, lsl #20
		if (disconnected_handles[i] == handle) {
   129b8:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   129ba:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   129be:	b29b      	uxth	r3, r3
   129c0:	4299      	cmp	r1, r3
{
   129c2:	4605      	mov	r5, r0
   129c4:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   129c8:	bf08      	it	eq
   129ca:	8016      	strheq	r6, [r2, #0]
{
   129cc:	af02      	add	r7, sp, #8
			return true;
   129ce:	bf08      	it	eq
   129d0:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
   129d2:	f000 ffe5 	bl	139a0 <bt_id_pending_keys_update>
	if (evt->status) {
   129d6:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   129d8:	fa1f f889 	uxth.w	r8, r9
	if (evt->status) {
   129dc:	b374      	cbz	r4, 12a3c <bt_hci_le_enh_conn_complete+0x94>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   129de:	2c3c      	cmp	r4, #60	; 0x3c
   129e0:	d122      	bne.n	12a28 <bt_hci_le_enh_conn_complete+0x80>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   129e2:	f001 fb33 	bl	1404c <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   129e6:	f06f 0140 	mvn.w	r1, #64	; 0x40
   129ea:	3010      	adds	r0, #16
   129ec:	f01b fc8e 	bl	2e30c <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   129f0:	2000      	movs	r0, #0
   129f2:	f7ff fa05 	bl	11e00 <find_pending_connect.part.0>
		if (!conn) {
   129f6:	4605      	mov	r5, r0
   129f8:	b970      	cbnz	r0, 12a18 <bt_hci_le_enh_conn_complete+0x70>
			BT_ERR("No pending peripheral connection");
   129fa:	4bae      	ldr	r3, [pc, #696]	; (12cb4 <bt_hci_le_enh_conn_complete+0x30c>)
   129fc:	62bb      	str	r3, [r7, #40]	; 0x28
   129fe:	2302      	movs	r3, #2
   12a00:	627b      	str	r3, [r7, #36]	; 0x24
   12a02:	f107 0224 	add.w	r2, r7, #36	; 0x24
   12a06:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_WARN("Unexpected status 0x%02x", evt->status);
   12a0a:	48ab      	ldr	r0, [pc, #684]	; (12cb8 <bt_hci_le_enh_conn_complete+0x310>)
   12a0c:	f01b fc7b 	bl	2e306 <z_log_msg2_static_create.constprop.0>
}
   12a10:	3734      	adds	r7, #52	; 0x34
   12a12:	46bd      	mov	sp, r7
   12a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   12a18:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   12a1a:	2100      	movs	r1, #0
   12a1c:	f002 f8be 	bl	14b9c <bt_conn_set_state>
		bt_conn_unref(conn);
   12a20:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   12a22:	f01b ffa2 	bl	2e96a <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   12a26:	e7f3      	b.n	12a10 <bt_hci_le_enh_conn_complete+0x68>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   12a28:	4ba4      	ldr	r3, [pc, #656]	; (12cbc <bt_hci_le_enh_conn_complete+0x314>)
   12a2a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
   12a2e:	2303      	movs	r3, #3
   12a30:	627b      	str	r3, [r7, #36]	; 0x24
   12a32:	f107 0224 	add.w	r2, r7, #36	; 0x24
   12a36:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   12a3a:	e7e6      	b.n	12a0a <bt_hci_le_enh_conn_complete+0x62>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   12a3c:	792b      	ldrb	r3, [r5, #4]
   12a3e:	3b02      	subs	r3, #2
   12a40:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   12a42:	f105 0a04 	add.w	sl, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   12a46:	d841      	bhi.n	12acc <bt_hci_le_enh_conn_complete+0x124>
	memcpy(dst, src, sizeof(*dst));
   12a48:	2207      	movs	r2, #7
   12a4a:	4651      	mov	r1, sl
   12a4c:	f107 0010 	add.w	r0, r7, #16
   12a50:	f01b faeb 	bl	2e02a <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   12a54:	7c3b      	ldrb	r3, [r7, #16]
	memcpy(dst, src, sizeof(*dst));
   12a56:	2206      	movs	r2, #6
   12a58:	3b02      	subs	r3, #2
   12a5a:	f105 0111 	add.w	r1, r5, #17
   12a5e:	f107 0009 	add.w	r0, r7, #9
   12a62:	743b      	strb	r3, [r7, #16]
   12a64:	f01b fae1 	bl	2e02a <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   12a68:	2301      	movs	r3, #1
   12a6a:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   12a6c:	78eb      	ldrb	r3, [r5, #3]
   12a6e:	2b01      	cmp	r3, #1
   12a70:	d113      	bne.n	12a9a <bt_hci_le_enh_conn_complete+0xf2>
   12a72:	f107 0010 	add.w	r0, r7, #16
   12a76:	f7ff f9c3 	bl	11e00 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12a7a:	78eb      	ldrb	r3, [r5, #3]
   12a7c:	2b01      	cmp	r3, #1
   12a7e:	4604      	mov	r4, r0
   12a80:	d10a      	bne.n	12a98 <bt_hci_le_enh_conn_complete+0xf0>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   12a82:	f001 fae3 	bl	1404c <bt_le_adv_lookup_legacy>
   12a86:	f06f 0140 	mvn.w	r1, #64	; 0x40
   12a8a:	4683      	mov	fp, r0
   12a8c:	3010      	adds	r0, #16
   12a8e:	f01b fc3d 	bl	2e30c <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   12a92:	4658      	mov	r0, fp
   12a94:	f01b fed2 	bl	2e83c <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   12a98:	bb7c      	cbnz	r4, 12afa <bt_hci_le_enh_conn_complete+0x152>
		BT_ERR("No pending conn for peer %s",
   12a9a:	4650      	mov	r0, sl
   12a9c:	f7fe fca0 	bl	113e0 <bt_addr_le_str_real>
   12aa0:	466c      	mov	r4, sp
   12aa2:	4b87      	ldr	r3, [pc, #540]	; (12cc0 <bt_hci_le_enh_conn_complete+0x318>)
   12aa4:	b088      	sub	sp, #32
   12aa6:	aa02      	add	r2, sp, #8
   12aa8:	e9c2 3004 	strd	r3, r0, [r2, #16]
   12aac:	2302      	movs	r3, #2
   12aae:	7613      	strb	r3, [r2, #24]
   12ab0:	4b84      	ldr	r3, [pc, #528]	; (12cc4 <bt_hci_le_enh_conn_complete+0x31c>)
   12ab2:	f842 3f0c 	str.w	r3, [r2, #12]!
   12ab6:	4880      	ldr	r0, [pc, #512]	; (12cb8 <bt_hci_le_enh_conn_complete+0x310>)
   12ab8:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   12abc:	f01b fc23 	bl	2e306 <z_log_msg2_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   12ac0:	211f      	movs	r1, #31
   12ac2:	46a5      	mov	sp, r4
   12ac4:	4640      	mov	r0, r8
   12ac6:	f01b fc58 	bl	2e37a <bt_hci_disconnect>
		return;
   12aca:	e7a1      	b.n	12a10 <bt_hci_le_enh_conn_complete+0x68>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   12acc:	78eb      	ldrb	r3, [r5, #3]
   12ace:	2b01      	cmp	r3, #1
   12ad0:	bf04      	itt	eq
   12ad2:	4b7d      	ldreq	r3, [pc, #500]	; (12cc8 <bt_hci_le_enh_conn_complete+0x320>)
   12ad4:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   12ad8:	4651      	mov	r1, sl
   12ada:	4620      	mov	r0, r4
   12adc:	f01b fda8 	bl	2e630 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   12ae0:	2207      	movs	r2, #7
   12ae2:	4601      	mov	r1, r0
   12ae4:	f107 0010 	add.w	r0, r7, #16
   12ae8:	f01b fa9f 	bl	2e02a <memcpy>
   12aec:	2207      	movs	r2, #7
   12aee:	4651      	mov	r1, sl
   12af0:	f107 0008 	add.w	r0, r7, #8
   12af4:	f01b fa99 	bl	2e02a <memcpy>
}
   12af8:	e7b8      	b.n	12a6c <bt_hci_le_enh_conn_complete+0xc4>
	conn->handle = handle;
   12afa:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
   12afc:	2207      	movs	r2, #7
   12afe:	f820 9b88 	strh.w	r9, [r0], #136
   12b02:	f107 0110 	add.w	r1, r7, #16
   12b06:	f01b fa90 	bl	2e02a <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   12b0a:	7e2a      	ldrb	r2, [r5, #24]
   12b0c:	7deb      	ldrb	r3, [r5, #23]
   12b0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12b12:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   12b16:	7eaa      	ldrb	r2, [r5, #26]
   12b18:	7e6b      	ldrb	r3, [r5, #25]
   12b1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12b1e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   12b22:	7eeb      	ldrb	r3, [r5, #27]
   12b24:	7f2a      	ldrb	r2, [r5, #28]
   12b26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12b2a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   12b2e:	f895 9003 	ldrb.w	r9, [r5, #3]
   12b32:	f884 9003 	strb.w	r9, [r4, #3]
	conn->err = 0U;
   12b36:	2300      	movs	r3, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12b38:	f1b9 0f01 	cmp.w	r9, #1
	conn->err = 0U;
   12b3c:	7323      	strb	r3, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12b3e:	d130      	bne.n	12ba2 <bt_hci_le_enh_conn_complete+0x1fa>
   12b40:	2207      	movs	r2, #7
   12b42:	f107 0108 	add.w	r1, r7, #8
   12b46:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   12b4a:	f01b fa6e 	bl	2e02a <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   12b4e:	f001 fa7d 	bl	1404c <bt_le_adv_lookup_legacy>
   12b52:	f3bf 8f5b 	dmb	ish
   12b56:	6902      	ldr	r2, [r0, #16]
   12b58:	f8df 816c 	ldr.w	r8, [pc, #364]	; 12cc8 <bt_hci_le_enh_conn_complete+0x320>
   12b5c:	f3bf 8f5b 	dmb	ish
			if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   12b60:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   12b64:	f3c2 3300 	ubfx	r3, r2, #12, #1
   12b68:	f040 8097 	bne.w	12c9a <bt_hci_le_enh_conn_complete+0x2f2>
				if (bt_addr_cmp(&evt->local_rpa,
   12b6c:	350b      	adds	r5, #11
				conn->le.resp_addr.type = BT_ADDR_LE_RANDOM;
   12b6e:	f884 9096 	strb.w	r9, [r4, #150]	; 0x96
	return memcmp(a, b, sizeof(*a));
   12b72:	2206      	movs	r2, #6
   12b74:	f107 0118 	add.w	r1, r7, #24
   12b78:	4628      	mov	r0, r5
						BT_ADDR_ANY) != 0) {
   12b7a:	61bb      	str	r3, [r7, #24]
   12b7c:	83bb      	strh	r3, [r7, #28]
   12b7e:	f01b fa43 	bl	2e008 <memcmp>
   12b82:	4603      	mov	r3, r0
	memcpy(dst, src, sizeof(*dst));
   12b84:	2206      	movs	r2, #6
					bt_addr_copy(&conn->le.resp_addr.a,
   12b86:	f104 0097 	add.w	r0, r4, #151	; 0x97
				if (bt_addr_cmp(&evt->local_rpa,
   12b8a:	2b00      	cmp	r3, #0
   12b8c:	f000 8082 	beq.w	12c94 <bt_hci_le_enh_conn_complete+0x2ec>
   12b90:	4629      	mov	r1, r5
	memcpy(dst, src, sizeof(*dst));
   12b92:	f01b fa4a 	bl	2e02a <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   12b96:	f8d8 30dc 	ldr.w	r3, [r8, #220]	; 0xdc
   12b9a:	065d      	lsls	r5, r3, #25
   12b9c:	d501      	bpl.n	12ba2 <bt_hci_le_enh_conn_complete+0x1fa>
			bt_le_adv_resume();
   12b9e:	f001 fc2d 	bl	143fc <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   12ba2:	2107      	movs	r1, #7
   12ba4:	4620      	mov	r0, r4
   12ba6:	f001 fff9 	bl	14b9c <bt_conn_set_state>
	if (is_disconnected) {
   12baa:	b11e      	cbz	r6, 12bb4 <bt_hci_le_enh_conn_complete+0x20c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   12bac:	2101      	movs	r1, #1
   12bae:	4620      	mov	r0, r4
   12bb0:	f001 fff4 	bl	14b9c <bt_conn_set_state>
	bt_conn_connected(conn);
   12bb4:	4620      	mov	r0, r4
   12bb6:	f01b ff14 	bl	2e9e2 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   12bba:	7b63      	ldrb	r3, [r4, #13]
   12bbc:	2b07      	cmp	r3, #7
   12bbe:	d167      	bne.n	12c90 <bt_hci_le_enh_conn_complete+0x2e8>
   12bc0:	f3bf 8f5b 	dmb	ish
   12bc4:	6863      	ldr	r3, [r4, #4]
   12bc6:	4e40      	ldr	r6, [pc, #256]	; (12cc8 <bt_hci_le_enh_conn_complete+0x320>)
   12bc8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   12bcc:	f413 6f00 	tst.w	r3, #2048	; 0x800
   12bd0:	d126      	bne.n	12c20 <bt_hci_le_enh_conn_complete+0x278>
   12bd2:	78e3      	ldrb	r3, [r4, #3]
   12bd4:	b11b      	cbz	r3, 12bde <bt_hci_le_enh_conn_complete+0x236>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   12bd6:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   12bda:	0718      	lsls	r0, r3, #28
   12bdc:	d520      	bpl.n	12c20 <bt_hci_le_enh_conn_complete+0x278>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   12bde:	2102      	movs	r1, #2
   12be0:	f242 0016 	movw	r0, #8214	; 0x2016
   12be4:	f7ff fd0a 	bl	125fc <bt_hci_cmd_create>
	if (!buf) {
   12be8:	4605      	mov	r5, r0
   12bea:	2800      	cmp	r0, #0
   12bec:	d05d      	beq.n	12caa <bt_hci_le_enh_conn_complete+0x302>
   12bee:	2102      	movs	r1, #2
   12bf0:	3008      	adds	r0, #8
   12bf2:	f01d ff3f 	bl	30a74 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   12bf6:	8823      	ldrh	r3, [r4, #0]
   12bf8:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   12bfa:	2200      	movs	r2, #0
   12bfc:	4629      	mov	r1, r5
   12bfe:	f242 0016 	movw	r0, #8214	; 0x2016
   12c02:	f7ff fe2d 	bl	12860 <bt_hci_cmd_send_sync>
		if (err) {
   12c06:	b158      	cbz	r0, 12c20 <bt_hci_le_enh_conn_complete+0x278>
			BT_ERR("Failed read remote features (%d)", err);
   12c08:	4b30      	ldr	r3, [pc, #192]	; (12ccc <bt_hci_le_enh_conn_complete+0x324>)
   12c0a:	f107 0224 	add.w	r2, r7, #36	; 0x24
   12c0e:	e9c7 300a 	strd	r3, r0, [r7, #40]	; 0x28
   12c12:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12c16:	2303      	movs	r3, #3
   12c18:	4827      	ldr	r0, [pc, #156]	; (12cb8 <bt_hci_le_enh_conn_complete+0x310>)
   12c1a:	627b      	str	r3, [r7, #36]	; 0x24
   12c1c:	f01b fb73 	bl	2e306 <z_log_msg2_static_create.constprop.0>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   12c20:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
   12c24:	07d9      	lsls	r1, r3, #31
   12c26:	d513      	bpl.n	12c50 <bt_hci_le_enh_conn_complete+0x2a8>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   12c28:	2100      	movs	r1, #0
   12c2a:	2302      	movs	r3, #2
   12c2c:	9100      	str	r1, [sp, #0]
   12c2e:	461a      	mov	r2, r3
   12c30:	4620      	mov	r0, r4
   12c32:	f01b fbdb 	bl	2e3ec <bt_le_set_phy>
		if (err) {
   12c36:	b158      	cbz	r0, 12c50 <bt_hci_le_enh_conn_complete+0x2a8>
			BT_ERR("Failed LE Set PHY (%d)", err);
   12c38:	4b25      	ldr	r3, [pc, #148]	; (12cd0 <bt_hci_le_enh_conn_complete+0x328>)
   12c3a:	f107 0224 	add.w	r2, r7, #36	; 0x24
   12c3e:	e9c7 300a 	strd	r3, r0, [r7, #40]	; 0x28
   12c42:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12c46:	2303      	movs	r3, #3
   12c48:	481b      	ldr	r0, [pc, #108]	; (12cb8 <bt_hci_le_enh_conn_complete+0x310>)
   12c4a:	627b      	str	r3, [r7, #36]	; 0x24
   12c4c:	f01b fb5b 	bl	2e306 <z_log_msg2_static_create.constprop.0>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   12c50:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   12c54:	069a      	lsls	r2, r3, #26
   12c56:	d51b      	bpl.n	12c90 <bt_hci_le_enh_conn_complete+0x2e8>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   12c58:	f8d6 3154 	ldr.w	r3, [r6, #340]	; 0x154
   12c5c:	689b      	ldr	r3, [r3, #8]
   12c5e:	079b      	lsls	r3, r3, #30
   12c60:	d516      	bpl.n	12c90 <bt_hci_le_enh_conn_complete+0x2e8>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   12c62:	1db9      	adds	r1, r7, #6
   12c64:	1d38      	adds	r0, r7, #4
   12c66:	f7ff fe77 	bl	12958 <hci_le_read_max_data_len>
			if (!err) {
   12c6a:	b988      	cbnz	r0, 12c90 <bt_hci_le_enh_conn_complete+0x2e8>
				err = bt_le_set_data_len(conn,
   12c6c:	88fa      	ldrh	r2, [r7, #6]
   12c6e:	88b9      	ldrh	r1, [r7, #4]
   12c70:	4620      	mov	r0, r4
   12c72:	f01b fb9d 	bl	2e3b0 <bt_le_set_data_len>
				if (err) {
   12c76:	b158      	cbz	r0, 12c90 <bt_hci_le_enh_conn_complete+0x2e8>
					BT_ERR("Failed to set data len (%d)", err);
   12c78:	4b16      	ldr	r3, [pc, #88]	; (12cd4 <bt_hci_le_enh_conn_complete+0x32c>)
   12c7a:	f107 0224 	add.w	r2, r7, #36	; 0x24
   12c7e:	e9c7 300a 	strd	r3, r0, [r7, #40]	; 0x28
   12c82:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12c86:	2303      	movs	r3, #3
   12c88:	480b      	ldr	r0, [pc, #44]	; (12cb8 <bt_hci_le_enh_conn_complete+0x310>)
   12c8a:	627b      	str	r3, [r7, #36]	; 0x24
   12c8c:	f01b fb3b 	bl	2e306 <z_log_msg2_static_create.constprop.0>
	bt_conn_unref(conn);
   12c90:	4620      	mov	r0, r4
   12c92:	e6c6      	b.n	12a22 <bt_hci_le_enh_conn_complete+0x7a>
	memcpy(dst, src, sizeof(*dst));
   12c94:	f108 0161 	add.w	r1, r8, #97	; 0x61
   12c98:	e77b      	b.n	12b92 <bt_hci_le_enh_conn_complete+0x1ea>
						&bt_dev.id_addr[conn->id]);
   12c9a:	7a21      	ldrb	r1, [r4, #8]
   12c9c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
	memcpy(dst, src, sizeof(*dst));
   12ca0:	2207      	movs	r2, #7
   12ca2:	4441      	add	r1, r8
   12ca4:	f104 0096 	add.w	r0, r4, #150	; 0x96
   12ca8:	e773      	b.n	12b92 <bt_hci_le_enh_conn_complete+0x1ea>
		return -ENOBUFS;
   12caa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   12cae:	e7ab      	b.n	12c08 <bt_hci_le_enh_conn_complete+0x260>
   12cb0:	20003290 	.word	0x20003290
   12cb4:	00035194 	.word	0x00035194
   12cb8:	0003244c 	.word	0x0003244c
   12cbc:	000351b5 	.word	0x000351b5
   12cc0:	000351ce 	.word	0x000351ce
   12cc4:	01000003 	.word	0x01000003
   12cc8:	20000000 	.word	0x20000000
   12ccc:	000351ea 	.word	0x000351ea
   12cd0:	0003520b 	.word	0x0003520b
   12cd4:	00035222 	.word	0x00035222

00012cd8 <le_legacy_conn_complete>:
{
   12cd8:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   12cda:	6881      	ldr	r1, [r0, #8]
{
   12cdc:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
   12cde:	780b      	ldrb	r3, [r1, #0]
   12ce0:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   12ce4:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   12ce8:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   12cec:	78cb      	ldrb	r3, [r1, #3]
   12cee:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   12cf2:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   12cf6:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   12cfa:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   12cfe:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   12d02:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   12d06:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   12d0a:	7c4b      	ldrb	r3, [r1, #17]
   12d0c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   12d10:	2207      	movs	r2, #7
   12d12:	3104      	adds	r1, #4
   12d14:	a803      	add	r0, sp, #12
   12d16:	f01b f988 	bl	2e02a <memcpy>
	memcpy(dst, src, sizeof(*dst));
   12d1a:	490b      	ldr	r1, [pc, #44]	; (12d48 <le_legacy_conn_complete+0x70>)
   12d1c:	2206      	movs	r2, #6
   12d1e:	f10d 0013 	add.w	r0, sp, #19
   12d22:	f01b f982 	bl	2e02a <memcpy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   12d26:	2300      	movs	r3, #0
   12d28:	2206      	movs	r2, #6
   12d2a:	4669      	mov	r1, sp
   12d2c:	f10d 0019 	add.w	r0, sp, #25
   12d30:	9300      	str	r3, [sp, #0]
   12d32:	f8ad 3004 	strh.w	r3, [sp, #4]
   12d36:	f01b f978 	bl	2e02a <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   12d3a:	a802      	add	r0, sp, #8
   12d3c:	f7ff fe34 	bl	129a8 <bt_hci_le_enh_conn_complete>
}
   12d40:	b00b      	add	sp, #44	; 0x2c
   12d42:	f85d fb04 	ldr.w	pc, [sp], #4
   12d46:	bf00      	nop
   12d48:	20000061 	.word	0x20000061

00012d4c <bt_unpair>:
{
   12d4c:	b530      	push	{r4, r5, lr}
   12d4e:	b085      	sub	sp, #20
   12d50:	460d      	mov	r5, r1
   12d52:	f88d 0007 	strb.w	r0, [sp, #7]
	if (id >= CONFIG_BT_ID_MAX) {
   12d56:	b9d0      	cbnz	r0, 12d8e <bt_unpair+0x42>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   12d58:	b949      	cbnz	r1, 12d6e <bt_unpair+0x22>
		bt_foreach_bond(id, unpair_remote, &id);
   12d5a:	490e      	ldr	r1, [pc, #56]	; (12d94 <bt_unpair+0x48>)
   12d5c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   12d60:	f10d 0207 	add.w	r2, sp, #7
   12d64:	f006 ffdc 	bl	19d20 <bt_foreach_bond>
		return 0;
   12d68:	2000      	movs	r0, #0
}
   12d6a:	b005      	add	sp, #20
   12d6c:	bd30      	pop	{r4, r5, pc}
	    (!addr || !bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   12d6e:	9002      	str	r0, [sp, #8]
	return memcmp(a, b, sizeof(*a));
   12d70:	2207      	movs	r2, #7
   12d72:	f8cd 000b 	str.w	r0, [sp, #11]
   12d76:	a902      	add	r1, sp, #8
   12d78:	4628      	mov	r0, r5
   12d7a:	f01b f945 	bl	2e008 <memcmp>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   12d7e:	2800      	cmp	r0, #0
   12d80:	d0eb      	beq.n	12d5a <bt_unpair+0xe>
	unpair(id, addr);
   12d82:	f89d 0007 	ldrb.w	r0, [sp, #7]
   12d86:	4629      	mov	r1, r5
   12d88:	f7fe ffdc 	bl	11d44 <unpair>
	return 0;
   12d8c:	e7ec      	b.n	12d68 <bt_unpair+0x1c>
		return -EINVAL;
   12d8e:	f06f 0015 	mvn.w	r0, #21
   12d92:	e7ea      	b.n	12d6a <bt_unpair+0x1e>
   12d94:	0002e2fd 	.word	0x0002e2fd

00012d98 <bt_security_err_get>:
	switch (hci_err) {
   12d98:	2829      	cmp	r0, #41	; 0x29
   12d9a:	bf9a      	itte	ls
   12d9c:	4b01      	ldrls	r3, [pc, #4]	; (12da4 <bt_security_err_get+0xc>)
   12d9e:	5c18      	ldrbls	r0, [r3, r0]
{
   12da0:	2009      	movhi	r0, #9
}
   12da2:	4770      	bx	lr
   12da4:	0003553d 	.word	0x0003553d

00012da8 <hci_encrypt_key_refresh_complete>:
{
   12da8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   12daa:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   12dac:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   12db0:	781d      	ldrb	r5, [r3, #0]
{
   12db2:	b086      	sub	sp, #24
	conn = bt_conn_lookup_handle(handle);
   12db4:	4630      	mov	r0, r6
   12db6:	f001 fee9 	bl	14b8c <bt_conn_lookup_handle>
	if (!conn) {
   12dba:	4604      	mov	r4, r0
   12dbc:	b960      	cbnz	r0, 12dd8 <hci_encrypt_key_refresh_complete+0x30>
		BT_ERR("Unable to look up conn with handle %u", handle);
   12dbe:	4b20      	ldr	r3, [pc, #128]	; (12e40 <hci_encrypt_key_refresh_complete+0x98>)
   12dc0:	4820      	ldr	r0, [pc, #128]	; (12e44 <hci_encrypt_key_refresh_complete+0x9c>)
   12dc2:	e9cd 3604 	strd	r3, r6, [sp, #16]
   12dc6:	aa03      	add	r2, sp, #12
   12dc8:	2303      	movs	r3, #3
   12dca:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12dce:	9303      	str	r3, [sp, #12]
   12dd0:	f01b fa99 	bl	2e306 <z_log_msg2_static_create.constprop.0>
}
   12dd4:	b006      	add	sp, #24
   12dd6:	bd70      	pop	{r4, r5, r6, pc}
	if (status) {
   12dd8:	b16d      	cbz	r5, 12df6 <hci_encrypt_key_refresh_complete+0x4e>
		bt_conn_security_changed(conn, status,
   12dda:	4628      	mov	r0, r5
   12ddc:	f7ff ffdc 	bl	12d98 <bt_security_err_get>
   12de0:	4629      	mov	r1, r5
   12de2:	4602      	mov	r2, r0
   12de4:	4620      	mov	r0, r4
   12de6:	f002 f89d 	bl	14f24 <bt_conn_security_changed>
	bt_conn_unref(conn);
   12dea:	4620      	mov	r0, r4
}
   12dec:	b006      	add	sp, #24
   12dee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   12df2:	f01b bdba 	b.w	2e96a <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   12df6:	7883      	ldrb	r3, [r0, #2]
   12df8:	2b01      	cmp	r3, #1
   12dfa:	d107      	bne.n	12e0c <hci_encrypt_key_refresh_complete+0x64>
		bt_smp_update_keys(conn);
   12dfc:	f006 fea2 	bl	19b44 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   12e00:	4620      	mov	r0, r4
   12e02:	f01b fa54 	bl	2e2ae <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   12e06:	2800      	cmp	r0, #0
   12e08:	bf08      	it	eq
   12e0a:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   12e0c:	4628      	mov	r0, r5
   12e0e:	f7ff ffc3 	bl	12d98 <bt_security_err_get>
   12e12:	4629      	mov	r1, r5
   12e14:	4602      	mov	r2, r0
   12e16:	4620      	mov	r0, r4
   12e18:	f002 f884 	bl	14f24 <bt_conn_security_changed>
	if (status) {
   12e1c:	2d00      	cmp	r5, #0
   12e1e:	d0e4      	beq.n	12dea <hci_encrypt_key_refresh_complete+0x42>
		BT_ERR("Failed to set required security level");
   12e20:	4b09      	ldr	r3, [pc, #36]	; (12e48 <hci_encrypt_key_refresh_complete+0xa0>)
   12e22:	9304      	str	r3, [sp, #16]
   12e24:	4807      	ldr	r0, [pc, #28]	; (12e44 <hci_encrypt_key_refresh_complete+0x9c>)
   12e26:	2302      	movs	r3, #2
   12e28:	aa03      	add	r2, sp, #12
   12e2a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12e2e:	9303      	str	r3, [sp, #12]
   12e30:	f01b fa69 	bl	2e306 <z_log_msg2_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   12e34:	4629      	mov	r1, r5
   12e36:	4620      	mov	r0, r4
   12e38:	f01b fddc 	bl	2e9f4 <bt_conn_disconnect>
   12e3c:	e7d5      	b.n	12dea <hci_encrypt_key_refresh_complete+0x42>
   12e3e:	bf00      	nop
   12e40:	00034fa8 	.word	0x00034fa8
   12e44:	0003244c 	.word	0x0003244c
   12e48:	0003523e 	.word	0x0003523e

00012e4c <hci_encrypt_change>:
{
   12e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   12e4e:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12e50:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
   12e54:	7835      	ldrb	r5, [r6, #0]
{
   12e56:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   12e58:	4638      	mov	r0, r7
   12e5a:	f001 fe97 	bl	14b8c <bt_conn_lookup_handle>
	if (!conn) {
   12e5e:	4604      	mov	r4, r0
   12e60:	b960      	cbnz	r0, 12e7c <hci_encrypt_change+0x30>
		BT_ERR("Unable to look up conn with handle %u", handle);
   12e62:	4b21      	ldr	r3, [pc, #132]	; (12ee8 <hci_encrypt_change+0x9c>)
   12e64:	4821      	ldr	r0, [pc, #132]	; (12eec <hci_encrypt_change+0xa0>)
   12e66:	e9cd 3704 	strd	r3, r7, [sp, #16]
   12e6a:	aa03      	add	r2, sp, #12
   12e6c:	2303      	movs	r3, #3
   12e6e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12e72:	9303      	str	r3, [sp, #12]
   12e74:	f01b fa47 	bl	2e306 <z_log_msg2_static_create.constprop.0>
}
   12e78:	b007      	add	sp, #28
   12e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
   12e7c:	b16d      	cbz	r5, 12e9a <hci_encrypt_change+0x4e>
		bt_conn_security_changed(conn, status,
   12e7e:	4628      	mov	r0, r5
   12e80:	f7ff ff8a 	bl	12d98 <bt_security_err_get>
   12e84:	4629      	mov	r1, r5
   12e86:	4602      	mov	r2, r0
   12e88:	4620      	mov	r0, r4
   12e8a:	f002 f84b 	bl	14f24 <bt_conn_security_changed>
	bt_conn_unref(conn);
   12e8e:	4620      	mov	r0, r4
}
   12e90:	b007      	add	sp, #28
   12e92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   12e96:	f01b bd68 	b.w	2e96a <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   12e9a:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   12e9c:	78f3      	ldrb	r3, [r6, #3]
   12e9e:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   12ea0:	2a01      	cmp	r2, #1
   12ea2:	d108      	bne.n	12eb6 <hci_encrypt_change+0x6a>
		if (conn->encrypt) {
   12ea4:	b10b      	cbz	r3, 12eaa <hci_encrypt_change+0x5e>
			bt_smp_update_keys(conn);
   12ea6:	f006 fe4d 	bl	19b44 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   12eaa:	4620      	mov	r0, r4
   12eac:	f01b f9ff 	bl	2e2ae <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   12eb0:	2800      	cmp	r0, #0
   12eb2:	bf08      	it	eq
   12eb4:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   12eb6:	4628      	mov	r0, r5
   12eb8:	f7ff ff6e 	bl	12d98 <bt_security_err_get>
   12ebc:	4629      	mov	r1, r5
   12ebe:	4602      	mov	r2, r0
   12ec0:	4620      	mov	r0, r4
   12ec2:	f002 f82f 	bl	14f24 <bt_conn_security_changed>
	if (status) {
   12ec6:	2d00      	cmp	r5, #0
   12ec8:	d0e1      	beq.n	12e8e <hci_encrypt_change+0x42>
		BT_ERR("Failed to set required security level");
   12eca:	4b09      	ldr	r3, [pc, #36]	; (12ef0 <hci_encrypt_change+0xa4>)
   12ecc:	9304      	str	r3, [sp, #16]
   12ece:	4807      	ldr	r0, [pc, #28]	; (12eec <hci_encrypt_change+0xa0>)
   12ed0:	2302      	movs	r3, #2
   12ed2:	aa03      	add	r2, sp, #12
   12ed4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12ed8:	9303      	str	r3, [sp, #12]
   12eda:	f01b fa14 	bl	2e306 <z_log_msg2_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   12ede:	4629      	mov	r1, r5
   12ee0:	4620      	mov	r0, r4
   12ee2:	f01b fd87 	bl	2e9f4 <bt_conn_disconnect>
   12ee6:	e7d2      	b.n	12e8e <hci_encrypt_change+0x42>
   12ee8:	00034fa8 	.word	0x00034fa8
   12eec:	0003244c 	.word	0x0003244c
   12ef0:	0003523e 	.word	0x0003523e

00012ef4 <hci_event_prio>:
{
   12ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12ef8:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   12efa:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   12efe:	4630      	mov	r0, r6
   12f00:	f01d fdef 	bl	30ae2 <net_buf_simple_headroom>
	state->len = buf->len;
   12f04:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   12f08:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   12f0c:	4605      	mov	r5, r0
   12f0e:	d80c      	bhi.n	12f2a <hci_event_prio+0x36>
   12f10:	4a1c      	ldr	r2, [pc, #112]	; (12f84 <hci_event_prio+0x90>)
   12f12:	491d      	ldr	r1, [pc, #116]	; (12f88 <hci_event_prio+0x94>)
   12f14:	481d      	ldr	r0, [pc, #116]	; (12f8c <hci_event_prio+0x98>)
   12f16:	f640 5349 	movw	r3, #3401	; 0xd49
   12f1a:	f019 f854 	bl	2bfc6 <assert_print>
   12f1e:	4040      	eors	r0, r0
   12f20:	f380 8811 	msr	BASEPRI, r0
   12f24:	f04f 0003 	mov.w	r0, #3
   12f28:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   12f2a:	4630      	mov	r0, r6
   12f2c:	2102      	movs	r1, #2
   12f2e:	f01d fdc8 	bl	30ac2 <net_buf_simple_pull_mem>
   12f32:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   12f34:	7800      	ldrb	r0, [r0, #0]
   12f36:	f01b f9a8 	bl	2e28a <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   12f3a:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   12f3c:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   12f3e:	d40c      	bmi.n	12f5a <hci_event_prio+0x66>
   12f40:	4a10      	ldr	r2, [pc, #64]	; (12f84 <hci_event_prio+0x90>)
   12f42:	4913      	ldr	r1, [pc, #76]	; (12f90 <hci_event_prio+0x9c>)
   12f44:	4811      	ldr	r0, [pc, #68]	; (12f8c <hci_event_prio+0x98>)
   12f46:	f640 534d 	movw	r3, #3405	; 0xd4d
   12f4a:	f019 f83c 	bl	2bfc6 <assert_print>
   12f4e:	4040      	eors	r0, r0
   12f50:	f380 8811 	msr	BASEPRI, r0
   12f54:	f04f 0003 	mov.w	r0, #3
   12f58:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   12f5a:	2305      	movs	r3, #5
   12f5c:	4a0d      	ldr	r2, [pc, #52]	; (12f94 <hci_event_prio+0xa0>)
   12f5e:	7838      	ldrb	r0, [r7, #0]
   12f60:	4621      	mov	r1, r4
   12f62:	f7ff f843 	bl	11fec <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   12f66:	07b3      	lsls	r3, r6, #30
   12f68:	d507      	bpl.n	12f7a <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   12f6a:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   12f6c:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   12f70:	fa10 f585 	uxtah	r5, r0, r5
   12f74:	60a5      	str	r5, [r4, #8]
}
   12f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   12f7a:	4620      	mov	r0, r4
}
   12f7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   12f80:	f014 be90 	b.w	27ca4 <net_buf_unref>
   12f84:	00035036 	.word	0x00035036
   12f88:	00035264 	.word	0x00035264
   12f8c:	00035073 	.word	0x00035073
   12f90:	0003527d 	.word	0x0003527d
   12f94:	00032c88 	.word	0x00032c88

00012f98 <bt_recv>:
{
   12f98:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (bt_recv_thread_id == NULL) {
   12f9a:	4d52      	ldr	r5, [pc, #328]	; (130e4 <bt_recv+0x14c>)
{
   12f9c:	b087      	sub	sp, #28
	if (bt_recv_thread_id == NULL) {
   12f9e:	682b      	ldr	r3, [r5, #0]
{
   12fa0:	af00      	add	r7, sp, #0
   12fa2:	4604      	mov	r4, r0
	if (bt_recv_thread_id == NULL) {
   12fa4:	b913      	cbnz	r3, 12fac <bt_recv+0x14>
	return z_impl_z_current_get();
   12fa6:	f018 f871 	bl	2b08c <z_impl_z_current_get>
		bt_recv_thread_id = k_current_get();
   12faa:	6028      	str	r0, [r5, #0]
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   12fac:	7d23      	ldrb	r3, [r4, #20]
	switch (bt_buf_get_type(buf)) {
   12fae:	2b01      	cmp	r3, #1
   12fb0:	d056      	beq.n	13060 <bt_recv+0xc8>
   12fb2:	2b03      	cmp	r3, #3
   12fb4:	f040 8083 	bne.w	130be <bt_recv+0x126>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   12fb8:	89a3      	ldrh	r3, [r4, #12]
   12fba:	2b03      	cmp	r3, #3
   12fbc:	d80c      	bhi.n	12fd8 <bt_recv+0x40>
   12fbe:	4a4a      	ldr	r2, [pc, #296]	; (130e8 <bt_recv+0x150>)
   12fc0:	494a      	ldr	r1, [pc, #296]	; (130ec <bt_recv+0x154>)
   12fc2:	484b      	ldr	r0, [pc, #300]	; (130f0 <bt_recv+0x158>)
   12fc4:	f44f 73ec 	mov.w	r3, #472	; 0x1d8
   12fc8:	f018 fffd 	bl	2bfc6 <assert_print>
   12fcc:	4040      	eors	r0, r0
   12fce:	f380 8811 	msr	BASEPRI, r0
   12fd2:	f04f 0003 	mov.w	r0, #3
   12fd6:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   12fd8:	2104      	movs	r1, #4
   12fda:	f104 0008 	add.w	r0, r4, #8
   12fde:	f01d fd70 	bl	30ac2 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   12fe2:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
   12fe4:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   12fe6:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   12fe8:	22ff      	movs	r2, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   12fea:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   12fee:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
   12ff0:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   12ff2:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   12ff4:	d013      	beq.n	1301e <bt_recv+0x86>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   12ff6:	466d      	mov	r5, sp
   12ff8:	b088      	sub	sp, #32
   12ffa:	466a      	mov	r2, sp
   12ffc:	483d      	ldr	r0, [pc, #244]	; (130f4 <bt_recv+0x15c>)
   12ffe:	6193      	str	r3, [r2, #24]
   13000:	2304      	movs	r3, #4
   13002:	e9c2 0104 	strd	r0, r1, [r2, #16]
   13006:	f842 3f0c 	str.w	r3, [r2, #12]!
   1300a:	483b      	ldr	r0, [pc, #236]	; (130f8 <bt_recv+0x160>)
   1300c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   13010:	f01b f979 	bl	2e306 <z_log_msg2_static_create.constprop.0>
   13014:	46ad      	mov	sp, r5
	net_buf_unref(buf);
   13016:	4620      	mov	r0, r4
   13018:	f014 fe44 	bl	27ca4 <net_buf_unref>
   1301c:	e01c      	b.n	13058 <bt_recv+0xc0>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   1301e:	f001 fdb5 	bl	14b8c <bt_conn_lookup_handle>
	if (!conn) {
   13022:	4605      	mov	r5, r0
   13024:	b968      	cbnz	r0, 13042 <bt_recv+0xaa>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   13026:	8ae3      	ldrh	r3, [r4, #22]
   13028:	4a34      	ldr	r2, [pc, #208]	; (130fc <bt_recv+0x164>)
   1302a:	4833      	ldr	r0, [pc, #204]	; (130f8 <bt_recv+0x160>)
   1302c:	e9c7 2304 	strd	r2, r3, [r7, #16]
   13030:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13034:	2303      	movs	r3, #3
   13036:	f107 020c 	add.w	r2, r7, #12
   1303a:	60fb      	str	r3, [r7, #12]
   1303c:	f01b f963 	bl	2e306 <z_log_msg2_static_create.constprop.0>
		net_buf_unref(buf);
   13040:	e7e9      	b.n	13016 <bt_recv+0x7e>
	acl(buf)->index = bt_conn_index(conn);
   13042:	f001 fea1 	bl	14d88 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   13046:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   13048:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   1304a:	4621      	mov	r1, r4
   1304c:	4628      	mov	r0, r5
   1304e:	f001 fc6f 	bl	14930 <bt_conn_recv>
	bt_conn_unref(conn);
   13052:	4628      	mov	r0, r5
   13054:	f01b fc89 	bl	2e96a <bt_conn_unref>
		return 0;
   13058:	2000      	movs	r0, #0
}
   1305a:	371c      	adds	r7, #28
   1305c:	46bd      	mov	sp, r7
   1305e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   13060:	89a3      	ldrh	r3, [r4, #12]
   13062:	2b01      	cmp	r3, #1
   13064:	d80c      	bhi.n	13080 <bt_recv+0xe8>
   13066:	4a20      	ldr	r2, [pc, #128]	; (130e8 <bt_recv+0x150>)
   13068:	4920      	ldr	r1, [pc, #128]	; (130ec <bt_recv+0x154>)
   1306a:	4821      	ldr	r0, [pc, #132]	; (130f0 <bt_recv+0x158>)
   1306c:	f640 1331 	movw	r3, #2353	; 0x931
   13070:	f018 ffa9 	bl	2bfc6 <assert_print>
   13074:	4040      	eors	r0, r0
   13076:	f380 8811 	msr	BASEPRI, r0
   1307a:	f04f 0003 	mov.w	r0, #3
   1307e:	df02      	svc	2
   13080:	2102      	movs	r1, #2
   13082:	f104 0008 	add.w	r0, r4, #8
   13086:	f01d fd1c 	bl	30ac2 <net_buf_simple_pull_mem>
   1308a:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   1308c:	7800      	ldrb	r0, [r0, #0]
   1308e:	f01b f8fc 	bl	2e28a <bt_hci_evt_get_flags>
   13092:	0783      	lsls	r3, r0, #30
   13094:	d40c      	bmi.n	130b0 <bt_recv+0x118>
   13096:	4a14      	ldr	r2, [pc, #80]	; (130e8 <bt_recv+0x150>)
   13098:	4919      	ldr	r1, [pc, #100]	; (13100 <bt_recv+0x168>)
   1309a:	4815      	ldr	r0, [pc, #84]	; (130f0 <bt_recv+0x158>)
   1309c:	f640 1335 	movw	r3, #2357	; 0x935
   130a0:	f018 ff91 	bl	2bfc6 <assert_print>
   130a4:	4040      	eors	r0, r0
   130a6:	f380 8811 	msr	BASEPRI, r0
   130aa:	f04f 0003 	mov.w	r0, #3
   130ae:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   130b0:	4a14      	ldr	r2, [pc, #80]	; (13104 <bt_recv+0x16c>)
   130b2:	7828      	ldrb	r0, [r5, #0]
   130b4:	2306      	movs	r3, #6
   130b6:	4621      	mov	r1, r4
   130b8:	f7fe ff98 	bl	11fec <handle_event>
   130bc:	e7ab      	b.n	13016 <bt_recv+0x7e>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   130be:	4a12      	ldr	r2, [pc, #72]	; (13108 <bt_recv+0x170>)
   130c0:	480d      	ldr	r0, [pc, #52]	; (130f8 <bt_recv+0x160>)
	switch (bt_buf_get_type(buf)) {
   130c2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   130c6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   130ca:	2303      	movs	r3, #3
   130cc:	f107 020c 	add.w	r2, r7, #12
   130d0:	60fb      	str	r3, [r7, #12]
   130d2:	f01b f918 	bl	2e306 <z_log_msg2_static_create.constprop.0>
		net_buf_unref(buf);
   130d6:	4620      	mov	r0, r4
   130d8:	f014 fde4 	bl	27ca4 <net_buf_unref>
		return -EINVAL;
   130dc:	f06f 0015 	mvn.w	r0, #21
   130e0:	e7bb      	b.n	1305a <bt_recv+0xc2>
   130e2:	bf00      	nop
   130e4:	20001e6c 	.word	0x20001e6c
   130e8:	00035036 	.word	0x00035036
   130ec:	00035264 	.word	0x00035264
   130f0:	00035073 	.word	0x00035073
   130f4:	00035296 	.word	0x00035296
   130f8:	0003244c 	.word	0x0003244c
   130fc:	000352ba 	.word	0x000352ba
   13100:	000352dc 	.word	0x000352dc
   13104:	00032c48 	.word	0x00032c48
   13108:	0003530a 	.word	0x0003530a

0001310c <bt_recv_prio>:
{
   1310c:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   1310e:	7d03      	ldrb	r3, [r0, #20]
   13110:	2b01      	cmp	r3, #1
{
   13112:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   13114:	d00c      	beq.n	13130 <bt_recv_prio+0x24>
   13116:	4a09      	ldr	r2, [pc, #36]	; (1313c <bt_recv_prio+0x30>)
   13118:	4909      	ldr	r1, [pc, #36]	; (13140 <bt_recv_prio+0x34>)
   1311a:	480a      	ldr	r0, [pc, #40]	; (13144 <bt_recv_prio+0x38>)
   1311c:	f640 5396 	movw	r3, #3478	; 0xd96
   13120:	f018 ff51 	bl	2bfc6 <assert_print>
   13124:	4040      	eors	r0, r0
   13126:	f380 8811 	msr	BASEPRI, r0
   1312a:	f04f 0003 	mov.w	r0, #3
   1312e:	df02      	svc	2
	hci_event_prio(buf);
   13130:	4620      	mov	r0, r4
   13132:	f7ff fedf 	bl	12ef4 <hci_event_prio>
}
   13136:	2000      	movs	r0, #0
   13138:	bd10      	pop	{r4, pc}
   1313a:	bf00      	nop
   1313c:	00035036 	.word	0x00035036
   13140:	0003531e 	.word	0x0003531e
   13144:	00035073 	.word	0x00035073

00013148 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   13148:	4a08      	ldr	r2, [pc, #32]	; (1316c <bt_hci_driver_register+0x24>)
{
   1314a:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   1314c:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
   13150:	b930      	cbnz	r0, 13160 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   13152:	68d9      	ldr	r1, [r3, #12]
   13154:	b139      	cbz	r1, 13166 <bt_hci_driver_register+0x1e>
   13156:	6959      	ldr	r1, [r3, #20]
   13158:	b129      	cbz	r1, 13166 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   1315a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
	return 0;
   1315e:	4770      	bx	lr
		return -EALREADY;
   13160:	f06f 0077 	mvn.w	r0, #119	; 0x77
   13164:	4770      	bx	lr
		return -EINVAL;
   13166:	f06f 0015 	mvn.w	r0, #21
}
   1316a:	4770      	bx	lr
   1316c:	20000000 	.word	0x20000000

00013170 <bt_finalize_init>:
{
   13170:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13174:	4d3f      	ldr	r5, [pc, #252]	; (13274 <bt_finalize_init+0x104>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   13176:	4c40      	ldr	r4, [pc, #256]	; (13278 <bt_finalize_init+0x108>)
		BT_INFO("Identity[%d]: %s",
   13178:	f8df 8100 	ldr.w	r8, [pc, #256]	; 1327c <bt_finalize_init+0x10c>
   1317c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 13280 <bt_finalize_init+0x110>
   13180:	f8df a100 	ldr.w	sl, [pc, #256]	; 13284 <bt_finalize_init+0x114>
{
   13184:	af00      	add	r7, sp, #0
   13186:	2104      	movs	r1, #4
   13188:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   1318c:	f01b f8a7 	bl	2e2de <atomic_or>
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   13190:	79ea      	ldrb	r2, [r5, #7]
   13192:	4b3d      	ldr	r3, [pc, #244]	; (13288 <bt_finalize_init+0x118>)
   13194:	4628      	mov	r0, r5
   13196:	2a01      	cmp	r2, #1
   13198:	bf98      	it	ls
   1319a:	461c      	movls	r4, r3
   1319c:	466e      	mov	r6, sp
   1319e:	f7fe f91f 	bl	113e0 <bt_addr_le_str_real>
   131a2:	b088      	sub	sp, #32
   131a4:	4b39      	ldr	r3, [pc, #228]	; (1328c <bt_finalize_init+0x11c>)
   131a6:	466a      	mov	r2, sp
   131a8:	e9c2 3404 	strd	r3, r4, [r2, #16]
   131ac:	f240 3302 	movw	r3, #770	; 0x302
   131b0:	8393      	strh	r3, [r2, #28]
   131b2:	4b37      	ldr	r3, [pc, #220]	; (13290 <bt_finalize_init+0x120>)
   131b4:	6190      	str	r0, [r2, #24]
   131b6:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   131ba:	f842 3f0c 	str.w	r3, [r2, #12]!
   131be:	4831      	ldr	r0, [pc, #196]	; (13284 <bt_finalize_init+0x114>)
   131c0:	f01b f8a1 	bl	2e306 <z_log_msg2_static_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
   131c4:	2401      	movs	r4, #1
   131c6:	46b5      	mov	sp, r6
   131c8:	462e      	mov	r6, r5
   131ca:	79eb      	ldrb	r3, [r5, #7]
   131cc:	429c      	cmp	r4, r3
   131ce:	f106 0607 	add.w	r6, r6, #7
   131d2:	db3a      	blt.n	1324a <bt_finalize_init+0xda>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   131d4:	f895 6068 	ldrb.w	r6, [r5, #104]	; 0x68
   131d8:	4630      	mov	r0, r6
   131da:	f7fe fd97 	bl	11d0c <ver_str>
   131de:	46e9      	mov	r9, sp
   131e0:	f8b5 206a 	ldrh.w	r2, [r5, #106]	; 0x6a
   131e4:	f8b5 306e 	ldrh.w	r3, [r5, #110]	; 0x6e
   131e8:	492a      	ldr	r1, [pc, #168]	; (13294 <bt_finalize_init+0x124>)
   131ea:	b08a      	sub	sp, #40	; 0x28
   131ec:	466c      	mov	r4, sp
   131ee:	e9c4 6206 	strd	r6, r2, [r4, #24]
   131f2:	4626      	mov	r6, r4
   131f4:	6223      	str	r3, [r4, #32]
   131f6:	f04f 0802 	mov.w	r8, #2
   131fa:	4b27      	ldr	r3, [pc, #156]	; (13298 <bt_finalize_init+0x128>)
   131fc:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
   13200:	e9c4 1004 	strd	r1, r0, [r4, #16]
   13204:	f846 3f0c 	str.w	r3, [r6, #12]!
   13208:	f44f 514b 	mov.w	r1, #12992	; 0x32c0
   1320c:	4632      	mov	r2, r6
   1320e:	481d      	ldr	r0, [pc, #116]	; (13284 <bt_finalize_init+0x114>)
   13210:	f01b f879 	bl	2e306 <z_log_msg2_static_create.constprop.0>
   13214:	46cd      	mov	sp, r9
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
   13216:	f895 9069 	ldrb.w	r9, [r5, #105]	; 0x69
   1321a:	4648      	mov	r0, r9
   1321c:	f7fe fd76 	bl	11d0c <ver_str>
   13220:	f8b5 306c 	ldrh.w	r3, [r5, #108]	; 0x6c
   13224:	4a1d      	ldr	r2, [pc, #116]	; (1329c <bt_finalize_init+0x12c>)
   13226:	f884 8020 	strb.w	r8, [r4, #32]
   1322a:	e9c4 9306 	strd	r9, r3, [r4, #24]
   1322e:	4b1c      	ldr	r3, [pc, #112]	; (132a0 <bt_finalize_init+0x130>)
   13230:	60e3      	str	r3, [r4, #12]
   13232:	e9c4 2004 	strd	r2, r0, [r4, #16]
   13236:	46a5      	mov	sp, r4
   13238:	4812      	ldr	r0, [pc, #72]	; (13284 <bt_finalize_init+0x114>)
   1323a:	4632      	mov	r2, r6
   1323c:	f44f 512b 	mov.w	r1, #10944	; 0x2ac0
   13240:	f01b f861 	bl	2e306 <z_log_msg2_static_create.constprop.0>
}
   13244:	46bd      	mov	sp, r7
   13246:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		BT_INFO("Identity[%d]: %s",
   1324a:	4630      	mov	r0, r6
   1324c:	f7fe f8c8 	bl	113e0 <bt_addr_le_str_real>
   13250:	46eb      	mov	fp, sp
   13252:	b088      	sub	sp, #32
   13254:	466a      	mov	r2, sp
   13256:	2303      	movs	r3, #3
   13258:	e9c2 8404 	strd	r8, r4, [r2, #16]
   1325c:	6190      	str	r0, [r2, #24]
   1325e:	7713      	strb	r3, [r2, #28]
   13260:	f44f 510b 	mov.w	r1, #8896	; 0x22c0
   13264:	f842 9f0c 	str.w	r9, [r2, #12]!
   13268:	4650      	mov	r0, sl
   1326a:	f01b f84c 	bl	2e306 <z_log_msg2_static_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
   1326e:	3401      	adds	r4, #1
   13270:	46dd      	mov	sp, fp
   13272:	e7aa      	b.n	131ca <bt_finalize_init+0x5a>
   13274:	20000000 	.word	0x20000000
   13278:	00035341 	.word	0x00035341
   1327c:	00035354 	.word	0x00035354
   13280:	01000004 	.word	0x01000004
   13284:	0003244c 	.word	0x0003244c
   13288:	00034348 	.word	0x00034348
   1328c:	00035345 	.word	0x00035345
   13290:	02000004 	.word	0x02000004
   13294:	00035365 	.word	0x00035365
   13298:	01000006 	.word	0x01000006
   1329c:	000353a3 	.word	0x000353a3
   132a0:	01000005 	.word	0x01000005

000132a4 <init_work>:

static void init_work(struct k_work *work)
{
   132a4:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
   132a6:	f7f9 f99b 	bl	c5e0 <bt_init>
	if (ready_cb) {
   132aa:	4b03      	ldr	r3, [pc, #12]	; (132b8 <init_work+0x14>)
   132ac:	681b      	ldr	r3, [r3, #0]
   132ae:	b113      	cbz	r3, 132b6 <init_work+0x12>
		ready_cb(err);
	}
}
   132b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   132b4:	4718      	bx	r3
}
   132b6:	bd10      	pop	{r4, pc}
   132b8:	20001e88 	.word	0x20001e88

000132bc <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   132bc:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
   132be:	4d2f      	ldr	r5, [pc, #188]	; (1337c <bt_enable+0xc0>)
   132c0:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
{
   132c4:	b08e      	sub	sp, #56	; 0x38
   132c6:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   132c8:	b973      	cbnz	r3, 132e8 <bt_enable+0x2c>
		BT_ERR("No HCI driver registered");
   132ca:	4b2d      	ldr	r3, [pc, #180]	; (13380 <bt_enable+0xc4>)
   132cc:	930c      	str	r3, [sp, #48]	; 0x30
   132ce:	482d      	ldr	r0, [pc, #180]	; (13384 <bt_enable+0xc8>)
   132d0:	2302      	movs	r3, #2
   132d2:	aa0b      	add	r2, sp, #44	; 0x2c
   132d4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   132d8:	f06f 0412 	mvn.w	r4, #18
		BT_ERR("No HCI driver registered");
   132dc:	930b      	str	r3, [sp, #44]	; 0x2c
   132de:	f01b f812 	bl	2e306 <z_log_msg2_static_create.constprop.0>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   132e2:	4620      	mov	r0, r4
   132e4:	b00e      	add	sp, #56	; 0x38
   132e6:	bd70      	pop	{r4, r5, r6, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   132e8:	f06f 0102 	mvn.w	r1, #2
   132ec:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   132f0:	f01b f80c 	bl	2e30c <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   132f4:	2101      	movs	r1, #1
   132f6:	f01a fff2 	bl	2e2de <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   132fa:	07c3      	lsls	r3, r0, #31
   132fc:	d43b      	bmi.n	13376 <bt_enable+0xba>
		err = bt_settings_init();
   132fe:	f7fe fc05 	bl	11b0c <bt_settings_init>
		if (err) {
   13302:	4604      	mov	r4, r0
   13304:	2800      	cmp	r0, #0
   13306:	d1ec      	bne.n	132e2 <bt_enable+0x26>
	ready_cb = cb;
   13308:	4b1f      	ldr	r3, [pc, #124]	; (13388 <bt_enable+0xcc>)
   1330a:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1330c:	2200      	movs	r2, #0
   1330e:	2300      	movs	r3, #0
   13310:	e9cd 2306 	strd	r2, r3, [sp, #24]
   13314:	f06f 0308 	mvn.w	r3, #8
   13318:	e9cd 0302 	strd	r0, r3, [sp, #8]
   1331c:	e9cd 0000 	strd	r0, r0, [sp]
   13320:	9004      	str	r0, [sp, #16]
   13322:	4b1a      	ldr	r3, [pc, #104]	; (1338c <bt_enable+0xd0>)
   13324:	491a      	ldr	r1, [pc, #104]	; (13390 <bt_enable+0xd4>)
   13326:	481b      	ldr	r0, [pc, #108]	; (13394 <bt_enable+0xd8>)
   13328:	f44f 7220 	mov.w	r2, #640	; 0x280
   1332c:	f017 f81c 	bl	2a368 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   13330:	4919      	ldr	r1, [pc, #100]	; (13398 <bt_enable+0xdc>)
   13332:	4818      	ldr	r0, [pc, #96]	; (13394 <bt_enable+0xd8>)
   13334:	f01e f955 	bl	315e2 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
   13338:	f7fe fa38 	bl	117ac <bt_hci_ecc_init>
	err = bt_dev.drv->open();
   1333c:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   13340:	68db      	ldr	r3, [r3, #12]
   13342:	4798      	blx	r3
	if (err) {
   13344:	4604      	mov	r4, r0
   13346:	b158      	cbz	r0, 13360 <bt_enable+0xa4>
		BT_ERR("HCI driver open failed (%d)", err);
   13348:	4b14      	ldr	r3, [pc, #80]	; (1339c <bt_enable+0xe0>)
   1334a:	aa0b      	add	r2, sp, #44	; 0x2c
   1334c:	e9cd 300c 	strd	r3, r0, [sp, #48]	; 0x30
   13350:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13354:	2303      	movs	r3, #3
   13356:	480b      	ldr	r0, [pc, #44]	; (13384 <bt_enable+0xc8>)
   13358:	930b      	str	r3, [sp, #44]	; 0x2c
   1335a:	f01a ffd4 	bl	2e306 <z_log_msg2_static_create.constprop.0>
		return err;
   1335e:	e7c0      	b.n	132e2 <bt_enable+0x26>
	if (!cb) {
   13360:	b926      	cbnz	r6, 1336c <bt_enable+0xb0>
}
   13362:	b00e      	add	sp, #56	; 0x38
   13364:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
   13368:	f7f9 b93a 	b.w	c5e0 <bt_init>
	k_work_submit(&bt_dev.init);
   1336c:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   13370:	f017 faf8 	bl	2a964 <k_work_submit>
	return 0;
   13374:	e7b5      	b.n	132e2 <bt_enable+0x26>
		return -EALREADY;
   13376:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1337a:	e7b2      	b.n	132e2 <bt_enable+0x26>
   1337c:	20000000 	.word	0x20000000
   13380:	000354e5 	.word	0x000354e5
   13384:	0003244c 	.word	0x0003244c
   13388:	20001e88 	.word	0x20001e88
   1338c:	00012349 	.word	0x00012349
   13390:	20004000 	.word	0x20004000
   13394:	20001308 	.word	0x20001308
   13398:	000354fe 	.word	0x000354fe
   1339c:	00035504 	.word	0x00035504

000133a0 <bt_set_name>:
#else
BUILD_ASSERT(DEVICE_NAME_LEN < 248);
#endif

int bt_set_name(const char *name)
{
   133a0:	b570      	push	{r4, r5, r6, lr}
   133a2:	b086      	sub	sp, #24
   133a4:	4604      	mov	r4, r0
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	size_t len = strlen(name);
   133a6:	f01a fe02 	bl	2dfae <strlen>
	int err;

	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   133aa:	2841      	cmp	r0, #65	; 0x41
	size_t len = strlen(name);
   133ac:	4605      	mov	r5, r0
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   133ae:	d826      	bhi.n	133fe <bt_set_name+0x5e>
		return -ENOMEM;
	}

	if (!strcmp(bt_dev.name, name)) {
   133b0:	4e14      	ldr	r6, [pc, #80]	; (13404 <bt_set_name+0x64>)
   133b2:	4621      	mov	r1, r4
   133b4:	f506 70cc 	add.w	r0, r6, #408	; 0x198
   133b8:	f01a fe09 	bl	2dfce <strcmp>
   133bc:	b910      	cbnz	r0, 133c4 <bt_set_name+0x24>
		return 0;
   133be:	2000      	movs	r0, #0

	return 0;
#else
	return -ENOMEM;
#endif
}
   133c0:	b006      	add	sp, #24
   133c2:	bd70      	pop	{r4, r5, r6, pc}
	strncpy(bt_dev.name, name, len);
   133c4:	4621      	mov	r1, r4
   133c6:	462a      	mov	r2, r5
   133c8:	f506 70cc 	add.w	r0, r6, #408	; 0x198
   133cc:	f01a fddd 	bl	2df8a <strncpy>
	bt_dev.name[len] = '\0';
   133d0:	1973      	adds	r3, r6, r5
   133d2:	2400      	movs	r4, #0
		err = settings_save_one("bt/name", bt_dev.name, len);
   133d4:	480c      	ldr	r0, [pc, #48]	; (13408 <bt_set_name+0x68>)
	bt_dev.name[len] = '\0';
   133d6:	f883 4198 	strb.w	r4, [r3, #408]	; 0x198
		err = settings_save_one("bt/name", bt_dev.name, len);
   133da:	462a      	mov	r2, r5
   133dc:	f506 71cc 	add.w	r1, r6, #408	; 0x198
   133e0:	f7fc fd0c 	bl	fdfc <settings_save_one>
		if (err) {
   133e4:	2800      	cmp	r0, #0
   133e6:	d0ea      	beq.n	133be <bt_set_name+0x1e>
			BT_WARN("Unable to store name");
   133e8:	4b08      	ldr	r3, [pc, #32]	; (1340c <bt_set_name+0x6c>)
   133ea:	9304      	str	r3, [sp, #16]
   133ec:	4808      	ldr	r0, [pc, #32]	; (13410 <bt_set_name+0x70>)
   133ee:	2302      	movs	r3, #2
   133f0:	aa03      	add	r2, sp, #12
   133f2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   133f6:	9303      	str	r3, [sp, #12]
   133f8:	f01a ff85 	bl	2e306 <z_log_msg2_static_create.constprop.0>
   133fc:	e7df      	b.n	133be <bt_set_name+0x1e>
		return -ENOMEM;
   133fe:	f06f 000b 	mvn.w	r0, #11
   13402:	e7dd      	b.n	133c0 <bt_set_name+0x20>
   13404:	20000000 	.word	0x20000000
   13408:	00035520 	.word	0x00035520
   1340c:	00035528 	.word	0x00035528
   13410:	0003244c 	.word	0x0003244c

00013414 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   13414:	4800      	ldr	r0, [pc, #0]	; (13418 <bt_get_name+0x4>)
   13416:	4770      	bx	lr
   13418:	20000198 	.word	0x20000198

0001341c <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   1341c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1341e:	4f0b      	ldr	r7, [pc, #44]	; (1344c <id_find+0x30>)
{
   13420:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   13422:	2500      	movs	r5, #0
   13424:	79fb      	ldrb	r3, [r7, #7]
   13426:	b2ec      	uxtb	r4, r5
   13428:	42a3      	cmp	r3, r4
   1342a:	d802      	bhi.n	13432 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   1342c:	f06f 0401 	mvn.w	r4, #1
   13430:	e009      	b.n	13446 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   13432:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   13436:	2207      	movs	r2, #7
   13438:	4439      	add	r1, r7
   1343a:	4630      	mov	r0, r6
   1343c:	f01a fde4 	bl	2e008 <memcmp>
   13440:	3501      	adds	r5, #1
   13442:	2800      	cmp	r0, #0
   13444:	d1ee      	bne.n	13424 <id_find+0x8>
}
   13446:	4620      	mov	r0, r4
   13448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1344a:	bf00      	nop
   1344c:	20000000 	.word	0x20000000

00013450 <le_rpa_invalidate>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13450:	4b08      	ldr	r3, [pc, #32]	; (13474 <le_rpa_invalidate+0x24>)
   13452:	f3bf 8f5b 	dmb	ish
   13456:	e853 2f00 	ldrex	r2, [r3]
   1345a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1345e:	e843 2100 	strex	r1, r2, [r3]
   13462:	2900      	cmp	r1, #0
   13464:	d1f7      	bne.n	13456 <le_rpa_invalidate+0x6>
   13466:	f3bf 8f5b 	dmb	ish
		bt_le_ext_adv_foreach(adv_rpa_invalidate, NULL);
   1346a:	4803      	ldr	r0, [pc, #12]	; (13478 <le_rpa_invalidate+0x28>)
   1346c:	2100      	movs	r1, #0
   1346e:	f000 bde7 	b.w	14040 <bt_le_ext_adv_foreach>
   13472:	bf00      	nop
   13474:	200000cc 	.word	0x200000cc
   13478:	0002e607 	.word	0x0002e607

0001347c <hci_id_add>:
{
   1347c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13480:	4605      	mov	r5, r0
   13482:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   13484:	f242 0027 	movw	r0, #8231	; 0x2027
   13488:	2127      	movs	r1, #39	; 0x27
{
   1348a:	4617      	mov	r7, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   1348c:	f7ff f8b6 	bl	125fc <bt_hci_cmd_create>
	if (!buf) {
   13490:	4604      	mov	r4, r0
   13492:	b1f8      	cbz	r0, 134d4 <hci_id_add+0x58>
	return net_buf_simple_add(&buf->b, len);
   13494:	2127      	movs	r1, #39	; 0x27
   13496:	3008      	adds	r0, #8
   13498:	f01d faec 	bl	30a74 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1349c:	4641      	mov	r1, r8
   1349e:	4606      	mov	r6, r0
   134a0:	f01b f834 	bl	2e50c <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   134a4:	4639      	mov	r1, r7
   134a6:	2210      	movs	r2, #16
   134a8:	1df0      	adds	r0, r6, #7
   134aa:	f01a fdbe 	bl	2e02a <memcpy>
	(void)memcpy(cp->local_irk, &bt_dev.irk[id], 16);
   134ae:	2210      	movs	r2, #16
   134b0:	f44f 71ac 	mov.w	r1, #344	; 0x158
   134b4:	fb12 1505 	smlabb	r5, r2, r5, r1
   134b8:	4908      	ldr	r1, [pc, #32]	; (134dc <hci_id_add+0x60>)
   134ba:	f106 0017 	add.w	r0, r6, #23
   134be:	4429      	add	r1, r5
   134c0:	f01a fdb3 	bl	2e02a <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   134c4:	4621      	mov	r1, r4
   134c6:	2200      	movs	r2, #0
}
   134c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   134cc:	f242 0027 	movw	r0, #8231	; 0x2027
   134d0:	f7ff b9c6 	b.w	12860 <bt_hci_cmd_send_sync>
}
   134d4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   134d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   134dc:	20000000 	.word	0x20000000

000134e0 <bt_id_add.part.0>:
void bt_id_add(struct bt_keys *keys)
   134e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   134e2:	2100      	movs	r1, #0
void bt_id_add(struct bt_keys *keys)
   134e4:	b087      	sub	sp, #28
   134e6:	4604      	mov	r4, r0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   134e8:	2206      	movs	r2, #6
   134ea:	4608      	mov	r0, r1
   134ec:	f001 fdb6 	bl	1505c <bt_conn_lookup_state_le>
	if (conn) {
   134f0:	4606      	mov	r6, r0
   134f2:	b170      	cbz	r0, 13512 <bt_id_add.part.0+0x32>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   134f4:	4848      	ldr	r0, [pc, #288]	; (13618 <bt_id_add.part.0+0x138>)
   134f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   134fa:	f01b f84e 	bl	2e59a <atomic_or.isra.0>
	keys->state |= flag;
   134fe:	7a23      	ldrb	r3, [r4, #8]
		bt_conn_unref(conn);
   13500:	4630      	mov	r0, r6
	keys->state |= flag;
   13502:	f043 0301 	orr.w	r3, r3, #1
   13506:	7223      	strb	r3, [r4, #8]
}
   13508:	b007      	add	sp, #28
   1350a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   1350e:	f01b ba2c 	b.w	2e96a <bt_conn_unref>
	if (bt_dev.le.rl_entries) {
   13512:	4d42      	ldr	r5, [pc, #264]	; (1361c <bt_id_add.part.0+0x13c>)
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   13514:	4601      	mov	r1, r0
   13516:	4842      	ldr	r0, [pc, #264]	; (13620 <bt_id_add.part.0+0x140>)
   13518:	f000 fd92 	bl	14040 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   1351c:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   13520:	b173      	cbz	r3, 13540 <bt_id_add.part.0+0x60>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   13522:	4630      	mov	r0, r6
   13524:	f01b f821 	bl	2e56a <addr_res_enable>
		if (err) {
   13528:	b150      	cbz	r0, 13540 <bt_id_add.part.0+0x60>
			BT_WARN("Failed to disable address resolution");
   1352a:	4b3e      	ldr	r3, [pc, #248]	; (13624 <bt_id_add.part.0+0x144>)
		BT_WARN("Set privacy mode command is not supported");
   1352c:	9304      	str	r3, [sp, #16]
   1352e:	2302      	movs	r3, #2
   13530:	9303      	str	r3, [sp, #12]
   13532:	aa03      	add	r2, sp, #12
   13534:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   13538:	483b      	ldr	r0, [pc, #236]	; (13628 <bt_id_add.part.0+0x148>)
   1353a:	f01b f813 	bl	2e564 <z_log_msg2_static_create.constprop.0>
	if (err) {
   1353e:	e026      	b.n	1358e <bt_id_add.part.0+0xae>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   13540:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
   13544:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   13548:	429a      	cmp	r2, r3
   1354a:	d12a      	bne.n	135a2 <bt_id_add.part.0+0xc2>
		BT_WARN("Resolving list size exceeded. Switching to host.");
   1354c:	4b37      	ldr	r3, [pc, #220]	; (1362c <bt_id_add.part.0+0x14c>)
   1354e:	4836      	ldr	r0, [pc, #216]	; (13628 <bt_id_add.part.0+0x148>)
   13550:	9304      	str	r3, [sp, #16]
   13552:	aa03      	add	r2, sp, #12
   13554:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   13558:	2602      	movs	r6, #2
   1355a:	9603      	str	r6, [sp, #12]
   1355c:	f01b f802 	bl	2e564 <z_log_msg2_static_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   13560:	2200      	movs	r2, #0
   13562:	4611      	mov	r1, r2
   13564:	f242 0029 	movw	r0, #8233	; 0x2029
   13568:	f7ff f97a 	bl	12860 <bt_hci_cmd_send_sync>
		if (err) {
   1356c:	b130      	cbz	r0, 1357c <bt_id_add.part.0+0x9c>
			BT_ERR("Failed to clear resolution list");
   1356e:	4b30      	ldr	r3, [pc, #192]	; (13630 <bt_id_add.part.0+0x150>)
   13570:	e9cd 6303 	strd	r6, r3, [sp, #12]
		BT_ERR("Failed to set privacy mode");
   13574:	aa03      	add	r2, sp, #12
   13576:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1357a:	e7dd      	b.n	13538 <bt_id_add.part.0+0x58>
		bt_dev.le.rl_entries++;
   1357c:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   13580:	3301      	adds	r3, #1
   13582:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   13586:	7a23      	ldrb	r3, [r4, #8]
   13588:	f043 0304 	orr.w	r3, r3, #4
   1358c:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   1358e:	2001      	movs	r0, #1
   13590:	f01a ffeb 	bl	2e56a <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   13594:	4827      	ldr	r0, [pc, #156]	; (13634 <bt_id_add.part.0+0x154>)
   13596:	2100      	movs	r1, #0
}
   13598:	b007      	add	sp, #28
   1359a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   1359e:	f000 bd4f 	b.w	14040 <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   135a2:	4622      	mov	r2, r4
   135a4:	1c67      	adds	r7, r4, #1
   135a6:	f812 0b2a 	ldrb.w	r0, [r2], #42
   135aa:	4639      	mov	r1, r7
   135ac:	f7ff ff66 	bl	1347c <hci_id_add>
	if (err) {
   135b0:	4606      	mov	r6, r0
   135b2:	b120      	cbz	r0, 135be <bt_id_add.part.0+0xde>
		BT_ERR("Failed to add IRK to controller");
   135b4:	4b20      	ldr	r3, [pc, #128]	; (13638 <bt_id_add.part.0+0x158>)
		BT_ERR("Failed to set privacy mode");
   135b6:	9304      	str	r3, [sp, #16]
   135b8:	2302      	movs	r3, #2
   135ba:	9303      	str	r3, [sp, #12]
   135bc:	e7da      	b.n	13574 <bt_id_add.part.0+0x94>
	bt_dev.le.rl_entries++;
   135be:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   135c2:	3301      	adds	r3, #1
   135c4:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   135c8:	7a23      	ldrb	r3, [r4, #8]
   135ca:	f043 0304 	orr.w	r3, r3, #4
   135ce:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   135d0:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
   135d4:	075b      	lsls	r3, r3, #29
   135d6:	d401      	bmi.n	135dc <bt_id_add.part.0+0xfc>
		BT_WARN("Set privacy mode command is not supported");
   135d8:	4b18      	ldr	r3, [pc, #96]	; (1363c <bt_id_add.part.0+0x15c>)
   135da:	e7a7      	b.n	1352c <bt_id_add.part.0+0x4c>
	bt_addr_le_copy(&cp.id_addr, addr);
   135dc:	4639      	mov	r1, r7
   135de:	4668      	mov	r0, sp
   135e0:	f01a ff94 	bl	2e50c <bt_addr_le_copy>
	cp.mode = mode;
   135e4:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   135e6:	2108      	movs	r1, #8
   135e8:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   135ec:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   135f0:	f7ff f804 	bl	125fc <bt_hci_cmd_create>
	if (!buf) {
   135f4:	4604      	mov	r4, r0
   135f6:	b908      	cbnz	r0, 135fc <bt_id_add.part.0+0x11c>
		BT_ERR("Failed to set privacy mode");
   135f8:	4b11      	ldr	r3, [pc, #68]	; (13640 <bt_id_add.part.0+0x160>)
   135fa:	e7dc      	b.n	135b6 <bt_id_add.part.0+0xd6>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   135fc:	2208      	movs	r2, #8
   135fe:	4669      	mov	r1, sp
   13600:	4410      	add	r0, r2
   13602:	f01d fa3d 	bl	30a80 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   13606:	4632      	mov	r2, r6
   13608:	4621      	mov	r1, r4
   1360a:	f242 004e 	movw	r0, #8270	; 0x204e
   1360e:	f7ff f927 	bl	12860 <bt_hci_cmd_send_sync>
	if (err) {
   13612:	2800      	cmp	r0, #0
   13614:	d0bb      	beq.n	1358e <bt_id_add.part.0+0xae>
   13616:	e7ef      	b.n	135f8 <bt_id_add.part.0+0x118>
   13618:	200000cc 	.word	0x200000cc
   1361c:	20000000 	.word	0x20000000
   13620:	0002e5b3 	.word	0x0002e5b3
   13624:	00035567 	.word	0x00035567
   13628:	0003245c 	.word	0x0003245c
   1362c:	0003558c 	.word	0x0003558c
   13630:	000355bd 	.word	0x000355bd
   13634:	0002e5dd 	.word	0x0002e5dd
   13638:	000355dd 	.word	0x000355dd
   1363c:	000355fd 	.word	0x000355fd
   13640:	00035627 	.word	0x00035627

00013644 <set_random_address>:
{
   13644:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   13646:	4914      	ldr	r1, [pc, #80]	; (13698 <set_random_address+0x54>)
   13648:	2206      	movs	r2, #6
   1364a:	4605      	mov	r5, r0
   1364c:	f01a fcdc 	bl	2e008 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   13650:	4604      	mov	r4, r0
   13652:	b1e0      	cbz	r0, 1368e <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   13654:	2106      	movs	r1, #6
   13656:	f242 0005 	movw	r0, #8197	; 0x2005
   1365a:	f7fe ffcf 	bl	125fc <bt_hci_cmd_create>
	if (!buf) {
   1365e:	4604      	mov	r4, r0
   13660:	b1b8      	cbz	r0, 13692 <set_random_address+0x4e>
   13662:	2206      	movs	r2, #6
   13664:	4629      	mov	r1, r5
   13666:	3008      	adds	r0, #8
   13668:	f01d fa0a 	bl	30a80 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   1366c:	4621      	mov	r1, r4
   1366e:	2200      	movs	r2, #0
   13670:	f242 0005 	movw	r0, #8197	; 0x2005
   13674:	f7ff f8f4 	bl	12860 <bt_hci_cmd_send_sync>
	if (err) {
   13678:	4604      	mov	r4, r0
   1367a:	b940      	cbnz	r0, 1368e <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
   1367c:	2206      	movs	r2, #6
   1367e:	4806      	ldr	r0, [pc, #24]	; (13698 <set_random_address+0x54>)
   13680:	4629      	mov	r1, r5
   13682:	f01a fcd2 	bl	2e02a <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   13686:	4b05      	ldr	r3, [pc, #20]	; (1369c <set_random_address+0x58>)
   13688:	2201      	movs	r2, #1
   1368a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
   1368e:	4620      	mov	r0, r4
   13690:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   13692:	f06f 0468 	mvn.w	r4, #104	; 0x68
   13696:	e7fa      	b.n	1368e <set_random_address+0x4a>
   13698:	20000061 	.word	0x20000061
   1369c:	20000000 	.word	0x20000000

000136a0 <bt_id_del.part.0>:
void bt_id_del(struct bt_keys *keys)
   136a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   136a4:	2100      	movs	r1, #0
void bt_id_del(struct bt_keys *keys)
   136a6:	b086      	sub	sp, #24
   136a8:	4604      	mov	r4, r0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   136aa:	2206      	movs	r2, #6
   136ac:	4608      	mov	r0, r1
   136ae:	f001 fcd5 	bl	1505c <bt_conn_lookup_state_le>
	if (conn) {
   136b2:	4605      	mov	r5, r0
   136b4:	b170      	cbz	r0, 136d4 <bt_id_del.part.0+0x34>
   136b6:	4837      	ldr	r0, [pc, #220]	; (13794 <bt_id_del.part.0+0xf4>)
   136b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   136bc:	f01a ff6d 	bl	2e59a <atomic_or.isra.0>
	keys->state |= flag;
   136c0:	7a23      	ldrb	r3, [r4, #8]
		bt_conn_unref(conn);
   136c2:	4628      	mov	r0, r5
	keys->state |= flag;
   136c4:	f043 0302 	orr.w	r3, r3, #2
   136c8:	7223      	strb	r3, [r4, #8]
}
   136ca:	b006      	add	sp, #24
   136cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   136d0:	f01b b94b 	b.w	2e96a <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   136d4:	4601      	mov	r1, r0
   136d6:	4830      	ldr	r0, [pc, #192]	; (13798 <bt_id_del.part.0+0xf8>)
   136d8:	f000 fcb2 	bl	14040 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   136dc:	4628      	mov	r0, r5
   136de:	f01a ff44 	bl	2e56a <addr_res_enable>
	if (err) {
   136e2:	4d2e      	ldr	r5, [pc, #184]	; (1379c <bt_id_del.part.0+0xfc>)
   136e4:	4606      	mov	r6, r0
   136e6:	b158      	cbz	r0, 13700 <bt_id_del.part.0+0x60>
		BT_ERR("Disabling address resolution failed (err %d)", err);
   136e8:	4b2d      	ldr	r3, [pc, #180]	; (137a0 <bt_id_del.part.0+0x100>)
   136ea:	e9cd 3004 	strd	r3, r0, [sp, #16]
   136ee:	2303      	movs	r3, #3
   136f0:	9303      	str	r3, [sp, #12]
   136f2:	aa03      	add	r2, sp, #12
   136f4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		BT_ERR("Failed to remove IRK from controller");
   136f8:	482a      	ldr	r0, [pc, #168]	; (137a4 <bt_id_del.part.0+0x104>)
   136fa:	f01a ff33 	bl	2e564 <z_log_msg2_static_create.constprop.0>
		goto done;
   136fe:	e011      	b.n	13724 <bt_id_del.part.0+0x84>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   13700:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   13704:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
   13708:	429a      	cmp	r2, r3
   1370a:	d218      	bcs.n	1373e <bt_id_del.part.0+0x9e>
		bt_dev.le.rl_entries--;
   1370c:	3b01      	subs	r3, #1
   1370e:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   13712:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   13714:	4924      	ldr	r1, [pc, #144]	; (137a8 <bt_id_del.part.0+0x108>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   13716:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   1371a:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   1371c:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   1371e:	2002      	movs	r0, #2
   13720:	f006 fb14 	bl	19d4c <bt_keys_foreach>
	if (bt_dev.le.rl_entries) {
   13724:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   13728:	b113      	cbz	r3, 13730 <bt_id_del.part.0+0x90>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   1372a:	2001      	movs	r0, #1
   1372c:	f01a ff1d 	bl	2e56a <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   13730:	481e      	ldr	r0, [pc, #120]	; (137ac <bt_id_del.part.0+0x10c>)
   13732:	2100      	movs	r1, #0
}
   13734:	b006      	add	sp, #24
   13736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   1373a:	f000 bc81 	b.w	14040 <bt_le_ext_adv_foreach>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   1373e:	2107      	movs	r1, #7
   13740:	f242 0028 	movw	r0, #8232	; 0x2028
   13744:	f7fe ff5a 	bl	125fc <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   13748:	f104 0801 	add.w	r8, r4, #1
	if (!buf) {
   1374c:	4607      	mov	r7, r0
   1374e:	b938      	cbnz	r0, 13760 <bt_id_del.part.0+0xc0>
		BT_ERR("Failed to remove IRK from controller");
   13750:	4b17      	ldr	r3, [pc, #92]	; (137b0 <bt_id_del.part.0+0x110>)
   13752:	9304      	str	r3, [sp, #16]
   13754:	2302      	movs	r3, #2
   13756:	9303      	str	r3, [sp, #12]
   13758:	aa03      	add	r2, sp, #12
   1375a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1375e:	e7cb      	b.n	136f8 <bt_id_del.part.0+0x58>
	return net_buf_simple_add(&buf->b, len);
   13760:	2107      	movs	r1, #7
   13762:	3008      	adds	r0, #8
   13764:	f01d f986 	bl	30a74 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   13768:	4641      	mov	r1, r8
   1376a:	f01a fecf 	bl	2e50c <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   1376e:	4632      	mov	r2, r6
   13770:	4639      	mov	r1, r7
   13772:	f242 0028 	movw	r0, #8232	; 0x2028
   13776:	f7ff f873 	bl	12860 <bt_hci_cmd_send_sync>
	if (err) {
   1377a:	2800      	cmp	r0, #0
   1377c:	d1e8      	bne.n	13750 <bt_id_del.part.0+0xb0>
	bt_dev.le.rl_entries--;
   1377e:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   13782:	3b01      	subs	r3, #1
   13784:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   13788:	7a23      	ldrb	r3, [r4, #8]
   1378a:	f023 0304 	bic.w	r3, r3, #4
   1378e:	7223      	strb	r3, [r4, #8]
   13790:	e7c8      	b.n	13724 <bt_id_del.part.0+0x84>
   13792:	bf00      	nop
   13794:	200000cc 	.word	0x200000cc
   13798:	0002e5b3 	.word	0x0002e5b3
   1379c:	20000000 	.word	0x20000000
   137a0:	00035642 	.word	0x00035642
   137a4:	0003245c 	.word	0x0003245c
   137a8:	0002e54f 	.word	0x0002e54f
   137ac:	0002e5dd 	.word	0x0002e5dd
   137b0:	0003566f 	.word	0x0003566f

000137b4 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   137b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   137b6:	4604      	mov	r4, r0
   137b8:	b087      	sub	sp, #28
   137ba:	4615      	mov	r5, r2
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   137bc:	460e      	mov	r6, r1
   137be:	b3a1      	cbz	r1, 1382a <id_create+0x76>
   137c0:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   137c2:	2207      	movs	r2, #7
   137c4:	4669      	mov	r1, sp
   137c6:	4630      	mov	r0, r6
   137c8:	9300      	str	r3, [sp, #0]
   137ca:	f8cd 3003 	str.w	r3, [sp, #3]
   137ce:	f01a fc1b 	bl	2e008 <memcmp>
   137d2:	b350      	cbz	r0, 1382a <id_create+0x76>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   137d4:	4827      	ldr	r0, [pc, #156]	; (13874 <id_create+0xc0>)
   137d6:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   137da:	4631      	mov	r1, r6
   137dc:	4418      	add	r0, r3
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   137de:	f01a fe95 	bl	2e50c <bt_addr_le_copy>
#if defined(CONFIG_BT_PRIVACY)
	{
		uint8_t zero_irk[16] = { 0 };

		if (irk && memcmp(irk, zero_irk, 16)) {
			memcpy(&bt_dev.irk[id], irk, 16);
   137e2:	f44f 70ac 	mov.w	r0, #344	; 0x158
   137e6:	2610      	movs	r6, #16
   137e8:	fb16 0404 	smlabb	r4, r6, r4, r0
   137ec:	4821      	ldr	r0, [pc, #132]	; (13874 <id_create+0xc0>)
		uint8_t zero_irk[16] = { 0 };
   137ee:	2300      	movs	r3, #0
   137f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
   137f4:	e9cd 3304 	strd	r3, r3, [sp, #16]
			memcpy(&bt_dev.irk[id], irk, 16);
   137f8:	4404      	add	r4, r0
		if (irk && memcmp(irk, zero_irk, 16)) {
   137fa:	b36d      	cbz	r5, 13858 <id_create+0xa4>
   137fc:	4632      	mov	r2, r6
   137fe:	a902      	add	r1, sp, #8
   13800:	4628      	mov	r0, r5
   13802:	f01a fc01 	bl	2e008 <memcmp>
   13806:	b338      	cbz	r0, 13858 <id_create+0xa4>
			memcpy(&bt_dev.irk[id], irk, 16);
   13808:	4632      	mov	r2, r6
   1380a:	4629      	mov	r1, r5
   1380c:	4620      	mov	r0, r4
			if (err) {
				return err;
			}

			if (irk) {
				memcpy(irk, &bt_dev.irk[id], 16);
   1380e:	f01a fc0c 	bl	2e02a <memcpy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13812:	4819      	ldr	r0, [pc, #100]	; (13878 <id_create+0xc4>)
   13814:	f01a fe7d 	bl	2e512 <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   13818:	0742      	lsls	r2, r0, #29
   1381a:	f3c0 0380 	ubfx	r3, r0, #2, #1
   1381e:	d527      	bpl.n	13870 <id_create+0xbc>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   13820:	f7fe f916 	bl	11a50 <bt_settings_save_id>
	}

	return 0;
   13824:	2000      	movs	r0, #0
}
   13826:	b007      	add	sp, #28
   13828:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = bt_addr_le_create_static(&new_addr);
   1382a:	a802      	add	r0, sp, #8
   1382c:	f01a fd1f 	bl	2e26e <bt_addr_le_create_static>
			if (err) {
   13830:	2800      	cmp	r0, #0
   13832:	d1f8      	bne.n	13826 <id_create+0x72>
		} while (id_find(&new_addr) >= 0);
   13834:	a802      	add	r0, sp, #8
   13836:	f7ff fdf1 	bl	1341c <id_find>
   1383a:	2800      	cmp	r0, #0
   1383c:	daf5      	bge.n	1382a <id_create+0x76>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   1383e:	480d      	ldr	r0, [pc, #52]	; (13874 <id_create+0xc0>)
   13840:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   13844:	4407      	add	r7, r0
   13846:	a902      	add	r1, sp, #8
   13848:	4638      	mov	r0, r7
   1384a:	f01a fe5f 	bl	2e50c <bt_addr_le_copy>
		if (addr) {
   1384e:	2e00      	cmp	r6, #0
   13850:	d0c7      	beq.n	137e2 <id_create+0x2e>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   13852:	4639      	mov	r1, r7
   13854:	4630      	mov	r0, r6
   13856:	e7c2      	b.n	137de <id_create+0x2a>
			err = bt_rand(&bt_dev.irk[id], 16);
   13858:	2110      	movs	r1, #16
   1385a:	4620      	mov	r0, r4
   1385c:	f009 fbc2 	bl	1cfe4 <bt_rand>
			if (err) {
   13860:	2800      	cmp	r0, #0
   13862:	d1e0      	bne.n	13826 <id_create+0x72>
			if (irk) {
   13864:	2d00      	cmp	r5, #0
   13866:	d0d4      	beq.n	13812 <id_create+0x5e>
				memcpy(irk, &bt_dev.irk[id], 16);
   13868:	2210      	movs	r2, #16
   1386a:	4621      	mov	r1, r4
   1386c:	4628      	mov	r0, r5
   1386e:	e7ce      	b.n	1380e <id_create+0x5a>
	return 0;
   13870:	4618      	mov	r0, r3
   13872:	e7d8      	b.n	13826 <id_create+0x72>
   13874:	20000000 	.word	0x20000000
   13878:	200000cc 	.word	0x200000cc

0001387c <bt_id_set_private_addr>:
{
   1387c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1387e:	4602      	mov	r2, r0
   13880:	4812      	ldr	r0, [pc, #72]	; (138cc <bt_id_set_private_addr+0x50>)
   13882:	f01a fe46 	bl	2e512 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_RPA_VALID)) {
   13886:	0483      	lsls	r3, r0, #18
   13888:	d41e      	bmi.n	138c8 <bt_id_set_private_addr+0x4c>
	err = bt_rpa_create(bt_dev.irk[id], &rpa);
   1388a:	f44f 73ac 	mov.w	r3, #344	; 0x158
   1388e:	4d10      	ldr	r5, [pc, #64]	; (138d0 <bt_id_set_private_addr+0x54>)
   13890:	eb03 1002 	add.w	r0, r3, r2, lsl #4
   13894:	4669      	mov	r1, sp
   13896:	4428      	add	r0, r5
   13898:	f01a fc20 	bl	2e0dc <bt_rpa_create>
	if (!err) {
   1389c:	4604      	mov	r4, r0
   1389e:	b950      	cbnz	r0, 138b6 <bt_id_set_private_addr+0x3a>
		err = set_random_address(&rpa);
   138a0:	4668      	mov	r0, sp
   138a2:	f7ff fecf 	bl	13644 <set_random_address>
		if (!err) {
   138a6:	4604      	mov	r4, r0
   138a8:	b928      	cbnz	r0, 138b6 <bt_id_set_private_addr+0x3a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   138aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   138ae:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   138b2:	f01a fe72 	bl	2e59a <atomic_or.isra.0>
	(void)k_work_schedule(&bt_dev.rpa_update, RPA_TIMEOUT);
   138b6:	4807      	ldr	r0, [pc, #28]	; (138d4 <bt_id_set_private_addr+0x58>)
   138b8:	f04f 72e1 	mov.w	r2, #29491200	; 0x1c20000
   138bc:	2300      	movs	r3, #0
   138be:	f017 f8b9 	bl	2aa34 <k_work_schedule>
}
   138c2:	4620      	mov	r0, r4
   138c4:	b003      	add	sp, #12
   138c6:	bd30      	pop	{r4, r5, pc}
		return 0;
   138c8:	2400      	movs	r4, #0
   138ca:	e7fa      	b.n	138c2 <bt_id_set_private_addr+0x46>
   138cc:	200000cc 	.word	0x200000cc
   138d0:	20000000 	.word	0x20000000
   138d4:	20000168 	.word	0x20000168

000138d8 <le_update_private_addr>:
{
   138d8:	b570      	push	{r4, r5, r6, lr}
   138da:	b086      	sub	sp, #24
		adv = bt_le_adv_lookup_legacy();
   138dc:	f000 fbb6 	bl	1404c <bt_le_adv_lookup_legacy>
		if (adv &&
   138e0:	4604      	mov	r4, r0
   138e2:	b990      	cbnz	r0, 1390a <le_update_private_addr+0x32>
	uint8_t id = BT_ID_DEFAULT;
   138e4:	2600      	movs	r6, #0
	bool adv_enabled = false;
   138e6:	4635      	mov	r5, r6
	err = bt_id_set_private_addr(id);
   138e8:	4630      	mov	r0, r6
   138ea:	f7ff ffc7 	bl	1387c <bt_id_set_private_addr>
	if (err) {
   138ee:	b308      	cbz	r0, 13934 <le_update_private_addr+0x5c>
		BT_WARN("Failed to update RPA address (%d)", err);
   138f0:	4b16      	ldr	r3, [pc, #88]	; (1394c <le_update_private_addr+0x74>)
   138f2:	aa03      	add	r2, sp, #12
   138f4:	e9cd 3004 	strd	r3, r0, [sp, #16]
   138f8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   138fc:	2303      	movs	r3, #3
   138fe:	4814      	ldr	r0, [pc, #80]	; (13950 <le_update_private_addr+0x78>)
   13900:	9303      	str	r3, [sp, #12]
   13902:	f01a fe2f 	bl	2e564 <z_log_msg2_static_create.constprop.0>
}
   13906:	b006      	add	sp, #24
   13908:	bd70      	pop	{r4, r5, r6, pc}
		    atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1390a:	f100 0210 	add.w	r2, r0, #16
   1390e:	2106      	movs	r1, #6
   13910:	4610      	mov	r0, r2
   13912:	f01a fe04 	bl	2e51e <atomic_test_bit>
		if (adv &&
   13916:	4605      	mov	r5, r0
   13918:	2800      	cmp	r0, #0
   1391a:	d0e3      	beq.n	138e4 <le_update_private_addr+0xc>
		    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   1391c:	210c      	movs	r1, #12
   1391e:	4610      	mov	r0, r2
   13920:	f01a fdfd 	bl	2e51e <atomic_test_bit>
		    atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   13924:	4601      	mov	r1, r0
   13926:	2800      	cmp	r0, #0
   13928:	d1dc      	bne.n	138e4 <le_update_private_addr+0xc>
			bt_le_adv_set_enable_legacy(adv, false);
   1392a:	4620      	mov	r0, r4
			id = adv->id;
   1392c:	7826      	ldrb	r6, [r4, #0]
			bt_le_adv_set_enable_legacy(adv, false);
   1392e:	f01a ff5e 	bl	2e7ee <bt_le_adv_set_enable_legacy>
   13932:	e7d9      	b.n	138e8 <le_update_private_addr+0x10>
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
   13934:	2c00      	cmp	r4, #0
   13936:	d0e6      	beq.n	13906 <le_update_private_addr+0x2e>
	    adv && adv_enabled) {
   13938:	2d00      	cmp	r5, #0
   1393a:	d0e4      	beq.n	13906 <le_update_private_addr+0x2e>
		bt_le_adv_set_enable_legacy(adv, true);
   1393c:	2101      	movs	r1, #1
   1393e:	4620      	mov	r0, r4
}
   13940:	b006      	add	sp, #24
   13942:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_le_adv_set_enable_legacy(adv, true);
   13946:	f01a bf52 	b.w	2e7ee <bt_le_adv_set_enable_legacy>
   1394a:	bf00      	nop
   1394c:	00035694 	.word	0x00035694
   13950:	0003245c 	.word	0x0003245c

00013954 <rpa_timeout>:
{
   13954:	b507      	push	{r0, r1, r2, lr}
	bool adv_enabled = false;
   13956:	2300      	movs	r3, #0
   13958:	f88d 3007 	strb.w	r3, [sp, #7]
	le_rpa_invalidate();
   1395c:	f7ff fd78 	bl	13450 <le_rpa_invalidate>
		bt_le_ext_adv_foreach(adv_is_private_enabled, &adv_enabled);
   13960:	480d      	ldr	r0, [pc, #52]	; (13998 <rpa_timeout+0x44>)
   13962:	f10d 0107 	add.w	r1, sp, #7
   13966:	f000 fb6b 	bl	14040 <bt_le_ext_adv_foreach>
	if (!(adv_enabled ||
   1396a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1396e:	b973      	cbnz	r3, 1398e <rpa_timeout+0x3a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13970:	480a      	ldr	r0, [pc, #40]	; (1399c <rpa_timeout+0x48>)
   13972:	f01a fdce 	bl	2e512 <atomic_get>
   13976:	04c1      	lsls	r1, r0, #19
   13978:	d409      	bmi.n	1398e <rpa_timeout+0x3a>
   1397a:	4808      	ldr	r0, [pc, #32]	; (1399c <rpa_timeout+0x48>)
   1397c:	f01a fdc9 	bl	2e512 <atomic_get>
   13980:	0642      	lsls	r2, r0, #25
   13982:	d506      	bpl.n	13992 <rpa_timeout+0x3e>
   13984:	4805      	ldr	r0, [pc, #20]	; (1399c <rpa_timeout+0x48>)
   13986:	f01a fdc4 	bl	2e512 <atomic_get>
	      (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   1398a:	05c3      	lsls	r3, r0, #23
   1398c:	d501      	bpl.n	13992 <rpa_timeout+0x3e>
	le_update_private_addr();
   1398e:	f7ff ffa3 	bl	138d8 <le_update_private_addr>
}
   13992:	b003      	add	sp, #12
   13994:	f85d fb04 	ldr.w	pc, [sp], #4
   13998:	0002e52d 	.word	0x0002e52d
   1399c:	200000cc 	.word	0x200000cc

000139a0 <bt_id_pending_keys_update>:
   139a0:	4b0a      	ldr	r3, [pc, #40]	; (139cc <bt_id_pending_keys_update+0x2c>)
   139a2:	f3bf 8f5b 	dmb	ish
   139a6:	e853 2f00 	ldrex	r2, [r3]
   139aa:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
   139ae:	e843 1000 	strex	r0, r1, [r3]
   139b2:	2800      	cmp	r0, #0
   139b4:	d1f7      	bne.n	139a6 <bt_id_pending_keys_update+0x6>
   139b6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   139ba:	0453      	lsls	r3, r2, #17
   139bc:	d504      	bpl.n	139c8 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   139be:	4904      	ldr	r1, [pc, #16]	; (139d0 <bt_id_pending_keys_update+0x30>)
   139c0:	2200      	movs	r2, #0
   139c2:	2002      	movs	r0, #2
   139c4:	f006 b9c2 	b.w	19d4c <bt_keys_foreach>
}
   139c8:	4770      	bx	lr
   139ca:	bf00      	nop
   139cc:	200000cc 	.word	0x200000cc
   139d0:	0002e64b 	.word	0x0002e64b

000139d4 <bt_id_add>:
{
   139d4:	b410      	push	{r4}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   139d6:	490a      	ldr	r1, [pc, #40]	; (13a00 <bt_id_add+0x2c>)
   139d8:	f891 4118 	ldrb.w	r4, [r1, #280]	; 0x118
   139dc:	f891 2119 	ldrb.w	r2, [r1, #281]	; 0x119
{
   139e0:	4603      	mov	r3, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   139e2:	b10c      	cbz	r4, 139e8 <bt_id_add+0x14>
   139e4:	4294      	cmp	r4, r2
   139e6:	d208      	bcs.n	139fa <bt_id_add+0x26>
		bt_dev.le.rl_entries++;
   139e8:	3201      	adds	r2, #1
   139ea:	f881 2119 	strb.w	r2, [r1, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   139ee:	7a1a      	ldrb	r2, [r3, #8]
}
   139f0:	bc10      	pop	{r4}
		keys->state |= BT_KEYS_ID_ADDED;
   139f2:	f042 0204 	orr.w	r2, r2, #4
   139f6:	721a      	strb	r2, [r3, #8]
}
   139f8:	4770      	bx	lr
   139fa:	bc10      	pop	{r4}
   139fc:	f7ff bd70 	b.w	134e0 <bt_id_add.part.0>
   13a00:	20000000 	.word	0x20000000

00013a04 <bt_id_del>:
{
   13a04:	b410      	push	{r4}
	if (!bt_dev.le.rl_size ||
   13a06:	4c0b      	ldr	r4, [pc, #44]	; (13a34 <bt_id_del+0x30>)
   13a08:	f894 1118 	ldrb.w	r1, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   13a0c:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
{
   13a10:	4603      	mov	r3, r0
	if (!bt_dev.le.rl_size ||
   13a12:	b111      	cbz	r1, 13a1a <bt_id_del+0x16>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   13a14:	3101      	adds	r1, #1
	if (!bt_dev.le.rl_size ||
   13a16:	428a      	cmp	r2, r1
   13a18:	dd08      	ble.n	13a2c <bt_id_del+0x28>
		bt_dev.le.rl_entries--;
   13a1a:	3a01      	subs	r2, #1
   13a1c:	f884 2119 	strb.w	r2, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   13a20:	7a1a      	ldrb	r2, [r3, #8]
}
   13a22:	bc10      	pop	{r4}
		keys->state &= ~BT_KEYS_ID_ADDED;
   13a24:	f022 0204 	bic.w	r2, r2, #4
   13a28:	721a      	strb	r2, [r3, #8]
}
   13a2a:	4770      	bx	lr
   13a2c:	bc10      	pop	{r4}
   13a2e:	f7ff be37 	b.w	136a0 <bt_id_del.part.0>
   13a32:	bf00      	nop
   13a34:	20000000 	.word	0x20000000

00013a38 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   13a38:	b5f0      	push	{r4, r5, r6, r7, lr}
   13a3a:	460e      	mov	r6, r1
   13a3c:	b089      	sub	sp, #36	; 0x24
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   13a3e:	4605      	mov	r5, r0
   13a40:	b930      	cbnz	r0, 13a50 <bt_id_create+0x18>

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   13a42:	4f2d      	ldr	r7, [pc, #180]	; (13af8 <bt_id_create+0xc0>)
   13a44:	79fb      	ldrb	r3, [r7, #7]
   13a46:	2b01      	cmp	r3, #1
   13a48:	d12a      	bne.n	13aa0 <bt_id_create+0x68>
		return -ENOMEM;
   13a4a:	f06f 000b 	mvn.w	r0, #11
   13a4e:	e025      	b.n	13a9c <bt_id_create+0x64>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   13a50:	2300      	movs	r3, #0
   13a52:	2207      	movs	r2, #7
   13a54:	4669      	mov	r1, sp
   13a56:	9300      	str	r3, [sp, #0]
   13a58:	f8cd 3003 	str.w	r3, [sp, #3]
   13a5c:	f01a fad4 	bl	2e008 <memcmp>
   13a60:	2800      	cmp	r0, #0
   13a62:	d0ee      	beq.n	13a42 <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   13a64:	782b      	ldrb	r3, [r5, #0]
   13a66:	2b01      	cmp	r3, #1
   13a68:	d104      	bne.n	13a74 <bt_id_create+0x3c>
   13a6a:	79ab      	ldrb	r3, [r5, #6]
   13a6c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   13a70:	2bc0      	cmp	r3, #192	; 0xc0
   13a72:	d00c      	beq.n	13a8e <bt_id_create+0x56>
			BT_ERR("Only static random identity address supported");
   13a74:	4b21      	ldr	r3, [pc, #132]	; (13afc <bt_id_create+0xc4>)
   13a76:	9306      	str	r3, [sp, #24]
   13a78:	4821      	ldr	r0, [pc, #132]	; (13b00 <bt_id_create+0xc8>)
   13a7a:	2302      	movs	r3, #2
   13a7c:	aa05      	add	r2, sp, #20
   13a7e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13a82:	9305      	str	r3, [sp, #20]
   13a84:	f01a fd6e 	bl	2e564 <z_log_msg2_static_create.constprop.0>
			return -EINVAL;
   13a88:	f06f 0015 	mvn.w	r0, #21
   13a8c:	e006      	b.n	13a9c <bt_id_create+0x64>
		if (id_find(addr) >= 0) {
   13a8e:	4628      	mov	r0, r5
   13a90:	f7ff fcc4 	bl	1341c <id_find>
   13a94:	2800      	cmp	r0, #0
   13a96:	dbd4      	blt.n	13a42 <bt_id_create+0xa>
			return -EALREADY;
   13a98:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   13a9c:	b009      	add	sp, #36	; 0x24
   13a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13aa0:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
   13aa4:	f01a fd35 	bl	2e512 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   13aa8:	f010 0001 	ands.w	r0, r0, #1
   13aac:	d118      	bne.n	13ae0 <bt_id_create+0xa8>
		uint8_t zero_irk[16] = { 0 };
   13aae:	e9cd 0002 	strd	r0, r0, [sp, #8]
   13ab2:	e9cd 0004 	strd	r0, r0, [sp, #16]
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   13ab6:	2d00      	cmp	r5, #0
   13ab8:	d0e6      	beq.n	13a88 <bt_id_create+0x50>
   13aba:	9000      	str	r0, [sp, #0]
   13abc:	2207      	movs	r2, #7
   13abe:	f8cd 0003 	str.w	r0, [sp, #3]
   13ac2:	4669      	mov	r1, sp
   13ac4:	4628      	mov	r0, r5
   13ac6:	f01a fa9f 	bl	2e008 <memcmp>
   13aca:	2800      	cmp	r0, #0
   13acc:	d0dc      	beq.n	13a88 <bt_id_create+0x50>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   13ace:	2e00      	cmp	r6, #0
   13ad0:	d0da      	beq.n	13a88 <bt_id_create+0x50>
		    !(irk && memcmp(irk, zero_irk, 16))) {
   13ad2:	2210      	movs	r2, #16
   13ad4:	a902      	add	r1, sp, #8
   13ad6:	4630      	mov	r0, r6
   13ad8:	f01a fa96 	bl	2e008 <memcmp>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   13adc:	2800      	cmp	r0, #0
   13ade:	d0d3      	beq.n	13a88 <bt_id_create+0x50>
	new_id = bt_dev.id_count++;
   13ae0:	79fc      	ldrb	r4, [r7, #7]
	err = id_create(new_id, addr, irk);
   13ae2:	4632      	mov	r2, r6
	new_id = bt_dev.id_count++;
   13ae4:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
   13ae6:	4629      	mov	r1, r5
   13ae8:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   13aea:	71fb      	strb	r3, [r7, #7]
	err = id_create(new_id, addr, irk);
   13aec:	f7ff fe62 	bl	137b4 <id_create>
	new_id = bt_dev.id_count++;
   13af0:	2800      	cmp	r0, #0
   13af2:	bf08      	it	eq
   13af4:	4620      	moveq	r0, r4
   13af6:	e7d1      	b.n	13a9c <bt_id_create+0x64>
   13af8:	20000000 	.word	0x20000000
   13afc:	000356b6 	.word	0x000356b6
   13b00:	0003245c 	.word	0x0003245c

00013b04 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   13b04:	b570      	push	{r4, r5, r6, lr}
   13b06:	b08a      	sub	sp, #40	; 0x28
   13b08:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   13b0a:	aa01      	add	r2, sp, #4
   13b0c:	2100      	movs	r1, #0
   13b0e:	f241 0009 	movw	r0, #4105	; 0x1009
   13b12:	f7fe fea5 	bl	12860 <bt_hci_cmd_send_sync>
	if (err) {
   13b16:	4604      	mov	r4, r0
   13b18:	b160      	cbz	r0, 13b34 <bt_id_read_public_addr+0x30>
		BT_WARN("Failed to read public address");
   13b1a:	4b1e      	ldr	r3, [pc, #120]	; (13b94 <bt_id_read_public_addr+0x90>)
   13b1c:	9308      	str	r3, [sp, #32]
   13b1e:	481e      	ldr	r0, [pc, #120]	; (13b98 <bt_id_read_public_addr+0x94>)
   13b20:	2302      	movs	r3, #2
   13b22:	aa07      	add	r2, sp, #28
   13b24:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   13b28:	9307      	str	r3, [sp, #28]
   13b2a:	f01a fd1b 	bl	2e564 <z_log_msg2_static_create.constprop.0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
   13b2e:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   13b30:	b00a      	add	sp, #40	; 0x28
   13b32:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   13b34:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   13b36:	9002      	str	r0, [sp, #8]
   13b38:	689d      	ldr	r5, [r3, #8]
   13b3a:	f8ad 000c 	strh.w	r0, [sp, #12]
   13b3e:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   13b40:	2206      	movs	r2, #6
   13b42:	a902      	add	r1, sp, #8
   13b44:	4628      	mov	r0, r5
   13b46:	f01a fa5f 	bl	2e008 <memcmp>
   13b4a:	b918      	cbnz	r0, 13b54 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   13b4c:	9801      	ldr	r0, [sp, #4]
   13b4e:	f014 f8a9 	bl	27ca4 <net_buf_unref>
   13b52:	e7ec      	b.n	13b2e <bt_id_read_public_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   13b54:	23ff      	movs	r3, #255	; 0xff
   13b56:	2206      	movs	r2, #6
   13b58:	a904      	add	r1, sp, #16
   13b5a:	4628      	mov	r0, r5
   13b5c:	f88d 3010 	strb.w	r3, [sp, #16]
   13b60:	f88d 3011 	strb.w	r3, [sp, #17]
   13b64:	f88d 3012 	strb.w	r3, [sp, #18]
   13b68:	f88d 3013 	strb.w	r3, [sp, #19]
   13b6c:	f88d 3014 	strb.w	r3, [sp, #20]
   13b70:	f88d 3015 	strb.w	r3, [sp, #21]
   13b74:	f01a fa48 	bl	2e008 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   13b78:	2800      	cmp	r0, #0
   13b7a:	d0e7      	beq.n	13b4c <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
   13b7c:	2206      	movs	r2, #6
   13b7e:	4629      	mov	r1, r5
   13b80:	1c70      	adds	r0, r6, #1
   13b82:	f01a fa52 	bl	2e02a <memcpy>
	net_buf_unref(rsp);
   13b86:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   13b88:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   13b8a:	f014 f88b 	bl	27ca4 <net_buf_unref>
	return 1U;
   13b8e:	2001      	movs	r0, #1
   13b90:	e7ce      	b.n	13b30 <bt_id_read_public_addr+0x2c>
   13b92:	bf00      	nop
   13b94:	000356e4 	.word	0x000356e4
   13b98:	0003245c 	.word	0x0003245c

00013b9c <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   13b9c:	b510      	push	{r4, lr}
   13b9e:	b08e      	sub	sp, #56	; 0x38
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   13ba0:	a802      	add	r0, sp, #8
   13ba2:	f7ff ffaf 	bl	13b04 <bt_id_read_public_addr>
   13ba6:	4c1e      	ldr	r4, [pc, #120]	; (13c20 <bt_setup_public_id_addr+0x84>)
   13ba8:	71e0      	strb	r0, [r4, #7]

	if (!bt_dev.id_count) {
   13baa:	b348      	cbz	r0, 13c00 <bt_setup_public_id_addr+0x64>
	memset(ir, 0, 16);
   13bac:	2210      	movs	r2, #16
   13bae:	2100      	movs	r1, #0
   13bb0:	eb0d 0002 	add.w	r0, sp, r2
   13bb4:	f01a fa44 	bl	2e040 <memset>
	if (!BT_VS_CMD_READ_KEY_ROOTS(bt_dev.vs_commands)) {
   13bb8:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   13bbc:	079b      	lsls	r3, r3, #30
   13bbe:	d510      	bpl.n	13be2 <bt_setup_public_id_addr+0x46>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_KEY_HIERARCHY_ROOTS, NULL,
   13bc0:	aa01      	add	r2, sp, #4
   13bc2:	2100      	movs	r1, #0
   13bc4:	f64f 400a 	movw	r0, #64522	; 0xfc0a
   13bc8:	f7fe fe4a 	bl	12860 <bt_hci_cmd_send_sync>
	if (err) {
   13bcc:	b1d0      	cbz	r0, 13c04 <bt_setup_public_id_addr+0x68>
		BT_WARN("Failed to read identity root");
   13bce:	4b15      	ldr	r3, [pc, #84]	; (13c24 <bt_setup_public_id_addr+0x88>)
   13bd0:	930c      	str	r3, [sp, #48]	; 0x30
   13bd2:	4815      	ldr	r0, [pc, #84]	; (13c28 <bt_setup_public_id_addr+0x8c>)
   13bd4:	2302      	movs	r3, #2
   13bd6:	aa0b      	add	r2, sp, #44	; 0x2c
   13bd8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   13bdc:	930b      	str	r3, [sp, #44]	; 0x2c
   13bde:	f01a fcc1 	bl	2e564 <z_log_msg2_static_create.constprop.0>
	uint8_t ir_irk[16];
	uint8_t ir[16];

	bt_read_identity_root(ir);

	if (!bt_smp_irk_get(ir, ir_irk)) {
   13be2:	a908      	add	r1, sp, #32
   13be4:	a804      	add	r0, sp, #16
   13be6:	f01c fade 	bl	301a6 <bt_smp_irk_get>
   13bea:	b1b8      	cbz	r0, 13c1c <bt_setup_public_id_addr+0x80>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13bec:	480f      	ldr	r0, [pc, #60]	; (13c2c <bt_setup_public_id_addr+0x90>)
   13bee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13bf2:	f01a fcd2 	bl	2e59a <atomic_or.isra.0>
	uint8_t *irk = NULL;
   13bf6:	2200      	movs	r2, #0
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   13bf8:	a902      	add	r1, sp, #8
   13bfa:	2000      	movs	r0, #0
   13bfc:	f7ff fdda 	bl	137b4 <id_create>
}
   13c00:	b00e      	add	sp, #56	; 0x38
   13c02:	bd10      	pop	{r4, pc}
	rp = (void *)rsp->data;
   13c04:	9b01      	ldr	r3, [sp, #4]
	memcpy(ir, rp->ir, 16);
   13c06:	6899      	ldr	r1, [r3, #8]
   13c08:	2210      	movs	r2, #16
   13c0a:	3101      	adds	r1, #1
   13c0c:	eb0d 0002 	add.w	r0, sp, r2
   13c10:	f01a fa0b 	bl	2e02a <memcpy>
	net_buf_unref(rsp);
   13c14:	9801      	ldr	r0, [sp, #4]
   13c16:	f014 f845 	bl	27ca4 <net_buf_unref>
   13c1a:	e7e2      	b.n	13be2 <bt_setup_public_id_addr+0x46>
		irk = ir_irk;
   13c1c:	aa08      	add	r2, sp, #32
   13c1e:	e7eb      	b.n	13bf8 <bt_setup_public_id_addr+0x5c>
   13c20:	20000000 	.word	0x20000000
   13c24:	00035702 	.word	0x00035702
   13c28:	0003245c 	.word	0x0003245c
   13c2c:	200000cc 	.word	0x200000cc

00013c30 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   13c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13c34:	4b22      	ldr	r3, [pc, #136]	; (13cc0 <bt_read_static_addr+0x90>)
   13c36:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   13c3a:	f014 0401 	ands.w	r4, r4, #1
{
   13c3e:	b088      	sub	sp, #32
   13c40:	4607      	mov	r7, r0
   13c42:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13c44:	d10a      	bne.n	13c5c <bt_read_static_addr+0x2c>
		BT_WARN("Read Static Addresses command not available");
   13c46:	4b1f      	ldr	r3, [pc, #124]	; (13cc4 <bt_read_static_addr+0x94>)
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
   13c48:	9306      	str	r3, [sp, #24]
   13c4a:	481f      	ldr	r0, [pc, #124]	; (13cc8 <bt_read_static_addr+0x98>)
   13c4c:	2302      	movs	r3, #2
   13c4e:	aa05      	add	r2, sp, #20
   13c50:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   13c54:	9305      	str	r3, [sp, #20]
   13c56:	f01a fc85 	bl	2e564 <z_log_msg2_static_create.constprop.0>
   13c5a:	e012      	b.n	13c82 <bt_read_static_addr+0x52>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   13c5c:	aa01      	add	r2, sp, #4
   13c5e:	2100      	movs	r1, #0
   13c60:	f64f 4009 	movw	r0, #64521	; 0xfc09
   13c64:	f7fe fdfc 	bl	12860 <bt_hci_cmd_send_sync>
	if (err) {
   13c68:	4605      	mov	r5, r0
   13c6a:	b170      	cbz	r0, 13c8a <bt_read_static_addr+0x5a>
		BT_WARN("Failed to read static addresses");
   13c6c:	4b17      	ldr	r3, [pc, #92]	; (13ccc <bt_read_static_addr+0x9c>)
   13c6e:	9306      	str	r3, [sp, #24]
   13c70:	4815      	ldr	r0, [pc, #84]	; (13cc8 <bt_read_static_addr+0x98>)
   13c72:	2302      	movs	r3, #2
   13c74:	aa05      	add	r2, sp, #20
   13c76:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return 0;
   13c7a:	2400      	movs	r4, #0
		BT_WARN("Failed to read static addresses");
   13c7c:	9305      	str	r3, [sp, #20]
   13c7e:	f01a fc71 	bl	2e564 <z_log_msg2_static_create.constprop.0>
	}

	return cnt;
}
   13c82:	4620      	mov	r0, r4
   13c84:	b008      	add	sp, #32
   13c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
   13c8a:	9b01      	ldr	r3, [sp, #4]
   13c8c:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   13c8e:	785c      	ldrb	r4, [r3, #1]
   13c90:	42b4      	cmp	r4, r6
   13c92:	bf28      	it	cs
   13c94:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   13c96:	f04f 0816 	mov.w	r8, #22
   13c9a:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   13c9c:	42ac      	cmp	r4, r5
   13c9e:	dc06      	bgt.n	13cae <bt_read_static_addr+0x7e>
	net_buf_unref(rsp);
   13ca0:	9801      	ldr	r0, [sp, #4]
   13ca2:	f013 ffff 	bl	27ca4 <net_buf_unref>
	if (!cnt) {
   13ca6:	2c00      	cmp	r4, #0
   13ca8:	d1eb      	bne.n	13c82 <bt_read_static_addr+0x52>
		BT_WARN("No static addresses stored in controller");
   13caa:	4b09      	ldr	r3, [pc, #36]	; (13cd0 <bt_read_static_addr+0xa0>)
   13cac:	e7cc      	b.n	13c48 <bt_read_static_addr+0x18>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   13cae:	fb08 7005 	mla	r0, r8, r5, r7
   13cb2:	2216      	movs	r2, #22
   13cb4:	4631      	mov	r1, r6
   13cb6:	f01a f9b8 	bl	2e02a <memcpy>
	for (i = 0; i < cnt; i++) {
   13cba:	3501      	adds	r5, #1
   13cbc:	e7ee      	b.n	13c9c <bt_read_static_addr+0x6c>
   13cbe:	bf00      	nop
   13cc0:	20000000 	.word	0x20000000
   13cc4:	0003571f 	.word	0x0003571f
   13cc8:	0003245c 	.word	0x0003245c
   13ccc:	0003574b 	.word	0x0003574b
   13cd0:	0003576b 	.word	0x0003576b

00013cd4 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   13cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   13cd8:	4d22      	ldr	r5, [pc, #136]	; (13d64 <bt_setup_random_id_addr+0x90>)
   13cda:	79ec      	ldrb	r4, [r5, #7]
{
   13cdc:	b08c      	sub	sp, #48	; 0x30
	if (!bt_dev.id_count) {
   13cde:	bbac      	cbnz	r4, 13d4c <bt_setup_random_id_addr+0x78>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   13ce0:	2101      	movs	r1, #1
   13ce2:	a806      	add	r0, sp, #24
   13ce4:	f7ff ffa4 	bl	13c30 <bt_read_static_addr>
   13ce8:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   13cea:	b378      	cbz	r0, 13d4c <bt_setup_random_id_addr+0x78>
   13cec:	f04f 0816 	mov.w	r8, #22
   13cf0:	f105 09cc 	add.w	r9, r5, #204	; 0xcc
   13cf4:	b2e6      	uxtb	r6, r4
				bt_addr_le_t addr;
				uint8_t *irk = NULL;
#if defined(CONFIG_BT_PRIVACY)
				uint8_t ir_irk[16];

				if (!bt_smp_irk_get(addrs[i].ir, ir_irk)) {
   13cf6:	fb08 fa06 	mul.w	sl, r8, r6
   13cfa:	f10a 0006 	add.w	r0, sl, #6
   13cfe:	ab06      	add	r3, sp, #24
   13d00:	a902      	add	r1, sp, #8
   13d02:	4418      	add	r0, r3
   13d04:	f01c fa4f 	bl	301a6 <bt_smp_irk_get>
   13d08:	b1f0      	cbz	r0, 13d48 <bt_setup_random_id_addr+0x74>
   13d0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13d0e:	4648      	mov	r0, r9
   13d10:	f01a fc43 	bl	2e59a <atomic_or.isra.0>
				uint8_t *irk = NULL;
   13d14:	2700      	movs	r7, #0
   13d16:	ab06      	add	r3, sp, #24
   13d18:	eb03 010a 	add.w	r1, r3, sl
   13d1c:	2206      	movs	r2, #6
   13d1e:	f10d 0001 	add.w	r0, sp, #1
   13d22:	f01a f982 	bl	2e02a <memcpy>
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
				addr.type = BT_ADDR_LE_RANDOM;
   13d26:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
   13d28:	463a      	mov	r2, r7
   13d2a:	4669      	mov	r1, sp
   13d2c:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   13d2e:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   13d32:	f7ff fd3f 	bl	137b4 <id_create>
				if (err) {
   13d36:	b920      	cbnz	r0, 13d42 <bt_setup_random_id_addr+0x6e>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   13d38:	79ea      	ldrb	r2, [r5, #7]
   13d3a:	3401      	adds	r4, #1
   13d3c:	b2e3      	uxtb	r3, r4
   13d3e:	429a      	cmp	r2, r3
   13d40:	d8d8      	bhi.n	13cf4 <bt_setup_random_id_addr+0x20>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
   13d42:	b00c      	add	sp, #48	; 0x30
   13d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					irk = ir_irk;
   13d48:	af02      	add	r7, sp, #8
   13d4a:	e7e4      	b.n	13d16 <bt_setup_random_id_addr+0x42>
   13d4c:	4806      	ldr	r0, [pc, #24]	; (13d68 <bt_setup_random_id_addr+0x94>)
   13d4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13d52:	f01a fc22 	bl	2e59a <atomic_or.isra.0>
	return bt_id_create(NULL, NULL);
   13d56:	2100      	movs	r1, #0
   13d58:	4608      	mov	r0, r1
}
   13d5a:	b00c      	add	sp, #48	; 0x30
   13d5c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_id_create(NULL, NULL);
   13d60:	f7ff be6a 	b.w	13a38 <bt_id_create>
   13d64:	20000000 	.word	0x20000000
   13d68:	200000cc 	.word	0x200000cc

00013d6c <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   13d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   13d70:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
   13d74:	7805      	ldrb	r5, [r0, #0]
{
   13d76:	4684      	mov	ip, r0
   13d78:	460f      	mov	r7, r1
   13d7a:	4690      	mov	r8, r2
   13d7c:	461e      	mov	r6, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   13d7e:	d035      	beq.n	13dec <bt_id_set_adv_own_addr+0x80>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   13d80:	b132      	cbz	r2, 13d90 <bt_id_set_adv_own_addr+0x24>
   13d82:	068b      	lsls	r3, r1, #26
   13d84:	d504      	bpl.n	13d90 <bt_id_set_adv_own_addr+0x24>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   13d86:	4b28      	ldr	r3, [pc, #160]	; (13e28 <bt_id_set_adv_own_addr+0xbc>)
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   13d88:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   13d8c:	065c      	lsls	r4, r3, #25
   13d8e:	d548      	bpl.n	13e22 <bt_id_set_adv_own_addr+0xb6>
			return -ENOTSUP;
		}

		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   13d90:	0778      	lsls	r0, r7, #29
   13d92:	d40b      	bmi.n	13dac <bt_id_set_adv_own_addr+0x40>
		    !(options & BT_LE_ADV_OPT_USE_IDENTITY)) {
			err = bt_id_set_adv_private_addr(adv);
   13d94:	4660      	mov	r0, ip
   13d96:	f01a fc53 	bl	2e640 <bt_id_set_adv_private_addr>
			if (err) {
   13d9a:	bb00      	cbnz	r0, 13dde <bt_id_set_adv_own_addr+0x72>
				return err;
			}

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   13d9c:	f1b8 0f00 	cmp.w	r8, #0
   13da0:	d03d      	beq.n	13e1e <bt_id_set_adv_own_addr+0xb2>
   13da2:	06b9      	lsls	r1, r7, #26
   13da4:	d53b      	bpl.n	13e1e <bt_id_set_adv_own_addr+0xb2>
				*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
   13da6:	2303      	movs	r3, #3
				scan_enabled = true;
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
			}
#endif /* defined(CONFIG_BT_OBSERVER) */
			err = bt_id_set_adv_private_addr(adv);
			*own_addr_type = BT_ADDR_LE_RANDOM;
   13da8:	7033      	strb	r3, [r6, #0]
		} else {
			err = bt_id_set_adv_private_addr(adv);
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}

		if (err) {
   13daa:	e018      	b.n	13dde <bt_id_set_adv_own_addr+0x72>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   13dac:	4c1e      	ldr	r4, [pc, #120]	; (13e28 <bt_id_set_adv_own_addr+0xbc>)
   13dae:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   13db2:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   13db6:	5ce3      	ldrb	r3, [r4, r3]
   13db8:	2b01      	cmp	r3, #1
   13dba:	d008      	beq.n	13dce <bt_id_set_adv_own_addr+0x62>
			*own_addr_type = id_addr->type;
   13dbc:	eba9 0505 	sub.w	r5, r9, r5
   13dc0:	5d63      	ldrb	r3, [r4, r5]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   13dc2:	f1b8 0f00 	cmp.w	r8, #0
   13dc6:	d10c      	bne.n	13de2 <bt_id_set_adv_own_addr+0x76>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   13dc8:	7033      	strb	r3, [r6, #0]
			return err;
		}
	}

	return 0;
   13dca:	2000      	movs	r0, #0
   13dcc:	e007      	b.n	13dde <bt_id_set_adv_own_addr+0x72>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   13dce:	2007      	movs	r0, #7
   13dd0:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   13dd4:	4420      	add	r0, r4
   13dd6:	f7ff fc35 	bl	13644 <set_random_address>
				if (err) {
   13dda:	2800      	cmp	r0, #0
   13ddc:	d0ee      	beq.n	13dbc <bt_id_set_adv_own_addr+0x50>
}
   13dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   13de2:	06ba      	lsls	r2, r7, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   13de4:	bf48      	it	mi
   13de6:	f043 0302 	orrmi.w	r3, r3, #2
   13dea:	e7ed      	b.n	13dc8 <bt_id_set_adv_own_addr+0x5c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   13dec:	074b      	lsls	r3, r1, #29
   13dee:	d514      	bpl.n	13e1a <bt_id_set_adv_own_addr+0xae>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   13df0:	f8df 8034 	ldr.w	r8, [pc, #52]	; 13e28 <bt_id_set_adv_own_addr+0xbc>
   13df4:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   13df8:	00ef      	lsls	r7, r5, #3
   13dfa:	f818 3003 	ldrb.w	r3, [r8, r3]
   13dfe:	2b01      	cmp	r3, #1
   13e00:	d109      	bne.n	13e16 <bt_id_set_adv_own_addr+0xaa>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   13e02:	2007      	movs	r0, #7
   13e04:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   13e08:	4440      	add	r0, r8
   13e0a:	f7ff fc1b 	bl	13644 <set_random_address>
			*own_addr_type = id_addr->type;
   13e0e:	1b7d      	subs	r5, r7, r5
   13e10:	f818 3005 	ldrb.w	r3, [r8, r5]
   13e14:	e7c8      	b.n	13da8 <bt_id_set_adv_own_addr+0x3c>
	int err = 0;
   13e16:	4620      	mov	r0, r4
   13e18:	e7f9      	b.n	13e0e <bt_id_set_adv_own_addr+0xa2>
			err = bt_id_set_adv_private_addr(adv);
   13e1a:	f01a fc11 	bl	2e640 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   13e1e:	2301      	movs	r3, #1
   13e20:	e7c2      	b.n	13da8 <bt_id_set_adv_own_addr+0x3c>
			return -ENOTSUP;
   13e22:	f06f 0085 	mvn.w	r0, #133	; 0x85
   13e26:	e7da      	b.n	13dde <bt_id_set_adv_own_addr+0x72>
   13e28:	20000000 	.word	0x20000000

00013e2c <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   13e2c:	b508      	push	{r3, lr}
			return err;
		}
	}

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
   13e2e:	4903      	ldr	r1, [pc, #12]	; (13e3c <bt_id_init+0x10>)
   13e30:	4803      	ldr	r0, [pc, #12]	; (13e40 <bt_id_init+0x14>)
   13e32:	f01d fd66 	bl	31902 <k_work_init_delayable>
#endif

	return 0;
}
   13e36:	2000      	movs	r0, #0
   13e38:	bd08      	pop	{r3, pc}
   13e3a:	bf00      	nop
   13e3c:	00013955 	.word	0x00013955
   13e40:	20000168 	.word	0x20000168

00013e44 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   13e44:	6843      	ldr	r3, [r0, #4]
{
   13e46:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13e48:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   13e4a:	0558      	lsls	r0, r3, #21
   13e4c:	d502      	bpl.n	13e54 <valid_adv_param+0x10>
		return false;
   13e4e:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   13e50:	b003      	add	sp, #12
   13e52:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   13e54:	6922      	ldr	r2, [r4, #16]
   13e56:	b12a      	cbz	r2, 13e64 <valid_adv_param+0x20>
   13e58:	07d9      	lsls	r1, r3, #31
   13e5a:	d5f8      	bpl.n	13e4e <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_USE_IDENTITY) &&
   13e5c:	f003 0324 	and.w	r3, r3, #36	; 0x24
   13e60:	2b24      	cmp	r3, #36	; 0x24
   13e62:	d0f4      	beq.n	13e4e <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   13e64:	4d1a      	ldr	r5, [pc, #104]	; (13ed0 <valid_adv_param+0x8c>)
   13e66:	7820      	ldrb	r0, [r4, #0]
   13e68:	79eb      	ldrb	r3, [r5, #7]
   13e6a:	4283      	cmp	r3, r0
   13e6c:	d9ef      	bls.n	13e4e <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   13e6e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   13e72:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   13e74:	2207      	movs	r2, #7
   13e76:	4669      	mov	r1, sp
   13e78:	4428      	add	r0, r5
   13e7a:	9300      	str	r3, [sp, #0]
   13e7c:	f8cd 3003 	str.w	r3, [sp, #3]
   13e80:	f01a f8c2 	bl	2e008 <memcmp>
	if (param->id >= bt_dev.id_count ||
   13e84:	2800      	cmp	r0, #0
   13e86:	d0e2      	beq.n	13e4e <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   13e88:	6860      	ldr	r0, [r4, #4]
   13e8a:	07c2      	lsls	r2, r0, #31
   13e8c:	d406      	bmi.n	13e9c <valid_adv_param+0x58>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   13e8e:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   13e92:	2b08      	cmp	r3, #8
   13e94:	d802      	bhi.n	13e9c <valid_adv_param+0x58>
   13e96:	68a3      	ldr	r3, [r4, #8]
   13e98:	2b9f      	cmp	r3, #159	; 0x9f
   13e9a:	d9d8      	bls.n	13e4e <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   13e9c:	f010 0f30 	tst.w	r0, #48	; 0x30
   13ea0:	d002      	beq.n	13ea8 <valid_adv_param+0x64>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   13ea2:	6923      	ldr	r3, [r4, #16]
   13ea4:	2b00      	cmp	r3, #0
   13ea6:	d0d2      	beq.n	13e4e <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   13ea8:	06c3      	lsls	r3, r0, #27
   13eaa:	d401      	bmi.n	13eb0 <valid_adv_param+0x6c>
   13eac:	6923      	ldr	r3, [r4, #16]
   13eae:	b943      	cbnz	r3, 13ec2 <valid_adv_param+0x7e>
		if (param->interval_min > param->interval_max ||
   13eb0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   13eb4:	429a      	cmp	r2, r3
   13eb6:	d8ca      	bhi.n	13e4e <valid_adv_param+0xa>
   13eb8:	2a1f      	cmp	r2, #31
   13eba:	d9c8      	bls.n	13e4e <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   13ebc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   13ec0:	d8c5      	bhi.n	13e4e <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   13ec2:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   13ec6:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   13eca:	bf18      	it	ne
   13ecc:	2001      	movne	r0, #1
   13ece:	e7bf      	b.n	13e50 <valid_adv_param+0xc>
   13ed0:	20000000 	.word	0x20000000

00013ed4 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   13ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ed8:	460c      	mov	r4, r1
   13eda:	b089      	sub	sp, #36	; 0x24
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   13edc:	2120      	movs	r1, #32
{
   13ede:	4682      	mov	sl, r0
   13ee0:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   13ee2:	f7fe fb8b 	bl	125fc <bt_hci_cmd_create>
	if (!buf) {
   13ee6:	4605      	mov	r5, r0
   13ee8:	2800      	cmp	r0, #0
   13eea:	d05d      	beq.n	13fa8 <hci_set_ad+0xd4>
   13eec:	2120      	movs	r1, #32
   13eee:	3008      	adds	r0, #8
   13ef0:	f01c fdc0 	bl	30a74 <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
   13ef4:	2220      	movs	r2, #32
   13ef6:	2100      	movs	r1, #0
   13ef8:	4681      	mov	r9, r0
   13efa:	f01a f8a1 	bl	2e040 <memset>

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   13efe:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
   13f02:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   13f06:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   13f08:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   13f0a:	f8d4 8000 	ldr.w	r8, [r4]
   13f0e:	2300      	movs	r3, #0
   13f10:	6862      	ldr	r2, [r4, #4]
   13f12:	4293      	cmp	r3, r2
   13f14:	d30d      	bcc.n	13f32 <hci_set_ad+0x5e>
	for (size_t i = 0; i < ad_len; i++) {
   13f16:	9b00      	ldr	r3, [sp, #0]
   13f18:	3408      	adds	r4, #8
   13f1a:	42a3      	cmp	r3, r4
   13f1c:	d1f5      	bne.n	13f0a <hci_set_ad+0x36>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   13f1e:	2200      	movs	r2, #0
   13f20:	4629      	mov	r1, r5
   13f22:	4650      	mov	r0, sl
	*data_len = set_data_len;
   13f24:	f889 6000 	strb.w	r6, [r9]
}
   13f28:	b009      	add	sp, #36	; 0x24
   13f2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   13f2e:	f7fe bc97 	b.w	12860 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   13f32:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   13f36:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   13f3a:	1cb0      	adds	r0, r6, #2
   13f3c:	1881      	adds	r1, r0, r2
   13f3e:	291f      	cmp	r1, #31
   13f40:	d91b      	bls.n	13f7a <hci_set_ad+0xa6>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   13f42:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   13f46:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   13f4a:	d101      	bne.n	13f50 <hci_set_ad+0x7c>
   13f4c:	2a00      	cmp	r2, #0
   13f4e:	dc12      	bgt.n	13f76 <hci_set_ad+0xa2>
					BT_ERR("Too big advertising data");
   13f50:	4b17      	ldr	r3, [pc, #92]	; (13fb0 <hci_set_ad+0xdc>)
   13f52:	9306      	str	r3, [sp, #24]
   13f54:	2302      	movs	r3, #2
   13f56:	9305      	str	r3, [sp, #20]
   13f58:	4816      	ldr	r0, [pc, #88]	; (13fb4 <hci_set_ad+0xe0>)
   13f5a:	2300      	movs	r3, #0
   13f5c:	aa05      	add	r2, sp, #20
   13f5e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13f62:	f018 fab0 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
		net_buf_unref(buf);
   13f66:	4628      	mov	r0, r5
   13f68:	f013 fe9c 	bl	27ca4 <net_buf_unref>
					return -EINVAL;
   13f6c:	f06f 0015 	mvn.w	r0, #21
}
   13f70:	b009      	add	sp, #36	; 0x24
   13f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   13f76:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   13f7a:	b2d7      	uxtb	r7, r2
   13f7c:	1c79      	adds	r1, r7, #1
   13f7e:	f80b 1006 	strb.w	r1, [fp, r6]
   13f82:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   13f84:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   13f86:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   13f8a:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   13f8e:	f8d8 1004 	ldr.w	r1, [r8, #4]
   13f92:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   13f94:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   13f96:	f01a f848 	bl	2e02a <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   13f9a:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   13f9c:	443e      	add	r6, r7
   13f9e:	b2f6      	uxtb	r6, r6
		for (size_t j = 0; j < ad[i].len; j++) {
   13fa0:	3301      	adds	r3, #1
   13fa2:	f108 0808 	add.w	r8, r8, #8
   13fa6:	e7b3      	b.n	13f10 <hci_set_ad+0x3c>
		return -ENOBUFS;
   13fa8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13fac:	e7e0      	b.n	13f70 <hci_set_ad+0x9c>
   13fae:	bf00      	nop
   13fb0:	0003579a 	.word	0x0003579a
   13fb4:	0003236c 	.word	0x0003236c

00013fb8 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   13fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   13fba:	4606      	mov	r6, r0
   13fbc:	4b1e      	ldr	r3, [pc, #120]	; (14038 <le_adv_start_add_conn+0x80>)
   13fbe:	f816 2b09 	ldrb.w	r2, [r6], #9
   13fc2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   13fc6:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   13fc8:	2300      	movs	r3, #0
{
   13fca:	4605      	mov	r5, r0
   13fcc:	2207      	movs	r2, #7
   13fce:	460f      	mov	r7, r1
   13fd0:	4630      	mov	r0, r6
   13fd2:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   13fd4:	9300      	str	r3, [sp, #0]
   13fd6:	f8cd 3003 	str.w	r3, [sp, #3]
   13fda:	f01a f815 	bl	2e008 <memcmp>
   13fde:	782a      	ldrb	r2, [r5, #0]
   13fe0:	4604      	mov	r4, r0
   13fe2:	b9a8      	cbnz	r0, 14010 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   13fe4:	4b15      	ldr	r3, [pc, #84]	; (1403c <le_adv_start_add_conn+0x84>)
   13fe6:	6818      	ldr	r0, [r3, #0]
   13fe8:	8899      	ldrh	r1, [r3, #4]
   13fea:	9002      	str	r0, [sp, #8]
   13fec:	799b      	ldrb	r3, [r3, #6]
   13fee:	f8ad 100c 	strh.w	r1, [sp, #12]
   13ff2:	4610      	mov	r0, r2
   13ff4:	a902      	add	r1, sp, #8
   13ff6:	f88d 300e 	strb.w	r3, [sp, #14]
   13ffa:	f000 ffc7 	bl	14f8c <bt_conn_add_le>
		if (!conn) {
   13ffe:	4605      	mov	r5, r0
   14000:	b1b8      	cbz	r0, 14032 <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   14002:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   14004:	f000 fdca 	bl	14b9c <bt_conn_set_state>
	*out_conn = conn;
   14008:	603d      	str	r5, [r7, #0]
	return 0;
}
   1400a:	4620      	mov	r0, r4
   1400c:	b005      	add	sp, #20
   1400e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   14010:	4631      	mov	r1, r6
   14012:	4610      	mov	r0, r2
   14014:	f000 fff4 	bl	15000 <bt_conn_exists_le>
   14018:	4604      	mov	r4, r0
   1401a:	b938      	cbnz	r0, 1402c <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   1401c:	7828      	ldrb	r0, [r5, #0]
   1401e:	4631      	mov	r1, r6
   14020:	f000 ffb4 	bl	14f8c <bt_conn_add_le>
	if (!conn) {
   14024:	4605      	mov	r5, r0
   14026:	b120      	cbz	r0, 14032 <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   14028:	2105      	movs	r1, #5
   1402a:	e7eb      	b.n	14004 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   1402c:	f06f 0415 	mvn.w	r4, #21
   14030:	e7eb      	b.n	1400a <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   14032:	f06f 040b 	mvn.w	r4, #11
   14036:	e7e8      	b.n	1400a <le_adv_start_add_conn+0x52>
   14038:	20000000 	.word	0x20000000
   1403c:	000325ea 	.word	0x000325ea

00014040 <bt_le_ext_adv_foreach>:
{
   14040:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   14042:	4801      	ldr	r0, [pc, #4]	; (14048 <bt_le_ext_adv_foreach+0x8>)
   14044:	4718      	bx	r3
   14046:	bf00      	nop
   14048:	20000018 	.word	0x20000018

0001404c <bt_le_adv_lookup_legacy>:
}
   1404c:	4800      	ldr	r0, [pc, #0]	; (14050 <bt_le_adv_lookup_legacy+0x4>)
   1404e:	4770      	bx	lr
   14050:	20000018 	.word	0x20000018

00014054 <bt_le_adv_stop.part.0>:
	}

	return err;
}

int bt_le_adv_stop(void)
   14054:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14056:	4819      	ldr	r0, [pc, #100]	; (140bc <bt_le_adv_stop.part.0+0x68>)
   14058:	f01a fb16 	bl	2e688 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1405c:	0583      	lsls	r3, r0, #22
   1405e:	d521      	bpl.n	140a4 <bt_le_adv_stop.part.0+0x50>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   14060:	2300      	movs	r3, #0
   14062:	4817      	ldr	r0, [pc, #92]	; (140c0 <bt_le_adv_stop.part.0+0x6c>)
   14064:	9300      	str	r3, [sp, #0]
   14066:	2207      	movs	r2, #7
   14068:	4669      	mov	r1, sp
   1406a:	f8cd 3003 	str.w	r3, [sp, #3]
   1406e:	f019 ffcb 	bl	2e008 <memcmp>
   14072:	4b14      	ldr	r3, [pc, #80]	; (140c4 <bt_le_adv_stop.part.0+0x70>)
   14074:	b9e8      	cbnz	r0, 140b2 <bt_le_adv_stop.part.0+0x5e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   14076:	4a14      	ldr	r2, [pc, #80]	; (140c8 <bt_le_adv_stop.part.0+0x74>)
   14078:	8891      	ldrh	r1, [r2, #4]
   1407a:	6810      	ldr	r0, [r2, #0]
   1407c:	7992      	ldrb	r2, [r2, #6]
   1407e:	f8ad 100c 	strh.w	r1, [sp, #12]
   14082:	f88d 200e 	strb.w	r2, [sp, #14]
   14086:	9002      	str	r0, [sp, #8]
   14088:	2204      	movs	r2, #4
   1408a:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1408c:	7e18      	ldrb	r0, [r3, #24]
   1408e:	f000 ffe5 	bl	1505c <bt_conn_lookup_state_le>
   14092:	4604      	mov	r4, r0
	if (conn) {
   14094:	b130      	cbz	r0, 140a4 <bt_le_adv_stop.part.0+0x50>
		conn->err = status;
   14096:	2100      	movs	r1, #0
   14098:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1409a:	f000 fd7f 	bl	14b9c <bt_conn_set_state>
		bt_conn_unref(conn);
   1409e:	4620      	mov	r0, r4
   140a0:	f01a fc63 	bl	2e96a <bt_conn_unref>
		err = bt_le_adv_set_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = bt_le_adv_set_enable_legacy(adv, false);
   140a4:	4809      	ldr	r0, [pc, #36]	; (140cc <bt_le_adv_stop.part.0+0x78>)
   140a6:	2100      	movs	r1, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   140a8:	b004      	add	sp, #16
   140aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   140ae:	f01a bb9e 	b.w	2e7ee <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   140b2:	2205      	movs	r2, #5
   140b4:	f103 0121 	add.w	r1, r3, #33	; 0x21
   140b8:	e7e8      	b.n	1408c <bt_le_adv_stop.part.0+0x38>
   140ba:	bf00      	nop
   140bc:	20000028 	.word	0x20000028
   140c0:	20000021 	.word	0x20000021
   140c4:	20000000 	.word	0x20000000
   140c8:	000325ea 	.word	0x000325ea
   140cc:	20000018 	.word	0x20000018

000140d0 <bt_le_adv_start_legacy>:
{
   140d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140d4:	b093      	sub	sp, #76	; 0x4c
	bool dir_adv = (param->peer != NULL), scannable = false;
   140d6:	690f      	ldr	r7, [r1, #16]
{
   140d8:	9305      	str	r3, [sp, #20]
	struct bt_conn *conn = NULL;
   140da:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   140dc:	1afc      	subs	r4, r7, r3
{
   140de:	4606      	mov	r6, r0
   140e0:	4891      	ldr	r0, [pc, #580]	; (14328 <bt_le_adv_start_legacy+0x258>)
	struct bt_conn *conn = NULL;
   140e2:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable = false;
   140e4:	bf18      	it	ne
   140e6:	2401      	movne	r4, #1
   140e8:	f01a face 	bl	2e688 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   140ec:	0740      	lsls	r0, r0, #29
{
   140ee:	460d      	mov	r5, r1
   140f0:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   140f2:	f140 810d 	bpl.w	14310 <bt_le_adv_start_legacy+0x240>
	if (!valid_adv_param(param)) {
   140f6:	4608      	mov	r0, r1
   140f8:	f7ff fea4 	bl	13e44 <valid_adv_param>
   140fc:	b928      	cbnz	r0, 1410a <bt_le_adv_start_legacy+0x3a>
		return -EINVAL;
   140fe:	f06f 0415 	mvn.w	r4, #21
}
   14102:	4620      	mov	r0, r4
   14104:	b013      	add	sp, #76	; 0x4c
   14106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   1410a:	4628      	mov	r0, r5
   1410c:	f01a fa9b 	bl	2e646 <bt_id_adv_random_addr_check>
   14110:	4681      	mov	r9, r0
   14112:	2800      	cmp	r0, #0
   14114:	d0f3      	beq.n	140fe <bt_le_adv_start_legacy+0x2e>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   14116:	f106 0810 	add.w	r8, r6, #16
   1411a:	4640      	mov	r0, r8
   1411c:	f01a fab4 	bl	2e688 <atomic_get>
   14120:	0641      	lsls	r1, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14122:	f3c0 1a80 	ubfx	sl, r0, #6, #1
   14126:	f100 80f6 	bmi.w	14316 <bt_le_adv_start_legacy+0x246>
	(void)memset(&set_param, 0, sizeof(set_param));
   1412a:	220f      	movs	r2, #15
   1412c:	4651      	mov	r1, sl
   1412e:	a808      	add	r0, sp, #32
   14130:	f019 ff86 	bl	2e040 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   14134:	68ab      	ldr	r3, [r5, #8]
   14136:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.channel_map  = get_adv_channel_map(param->options);
   1413a:	6868      	ldr	r0, [r5, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   1413c:	68eb      	ldr	r3, [r5, #12]
   1413e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   14142:	f01a fa92 	bl	2e66a <get_adv_channel_map>
	if (adv->id != param->id) {
   14146:	7832      	ldrb	r2, [r6, #0]
   14148:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   1414a:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
   1414e:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   14150:	f88d a02e 	strb.w	sl, [sp, #46]	; 0x2e
	if (adv->id != param->id) {
   14154:	d004      	beq.n	14160 <bt_le_adv_start_legacy+0x90>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14156:	4874      	ldr	r0, [pc, #464]	; (14328 <bt_le_adv_start_legacy+0x258>)
   14158:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   1415c:	f01a fa9a 	bl	2e694 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   14160:	4a72      	ldr	r2, [pc, #456]	; (1432c <bt_le_adv_start_legacy+0x25c>)
	adv->id = param->id;
   14162:	782b      	ldrb	r3, [r5, #0]
   14164:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   14166:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   1416a:	6869      	ldr	r1, [r5, #4]
   1416c:	4622      	mov	r2, r4
   1416e:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   14172:	4630      	mov	r0, r6
   14174:	f7ff fdfa 	bl	13d6c <bt_id_set_adv_own_addr>
	if (err) {
   14178:	4604      	mov	r4, r0
   1417a:	2800      	cmp	r0, #0
   1417c:	d1c1      	bne.n	14102 <bt_le_adv_start_legacy+0x32>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   1417e:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
   14182:	2f00      	cmp	r7, #0
   14184:	d054      	beq.n	14230 <bt_le_adv_start_legacy+0x160>
	memcpy(dst, src, sizeof(*dst));
   14186:	6929      	ldr	r1, [r5, #16]
   14188:	2207      	movs	r2, #7
   1418a:	f019 ff4e 	bl	2e02a <memcpy>
	name_type = get_adv_name_type_param(param);
   1418e:	4628      	mov	r0, r5
   14190:	f01a fb1d 	bl	2e7ce <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   14194:	686b      	ldr	r3, [r5, #4]
   14196:	07da      	lsls	r2, r3, #31
	name_type = get_adv_name_type_param(param);
   14198:	4682      	mov	sl, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1419a:	d552      	bpl.n	14242 <bt_le_adv_start_legacy+0x172>
		if (dir_adv) {
   1419c:	2f00      	cmp	r7, #0
   1419e:	d04d      	beq.n	1423c <bt_le_adv_start_legacy+0x16c>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   141a0:	f013 0f10 	tst.w	r3, #16
   141a4:	bf14      	ite	ne
   141a6:	2304      	movne	r3, #4
   141a8:	2301      	moveq	r3, #1
   141aa:	6929      	ldr	r1, [r5, #16]
   141ac:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   141b0:	2207      	movs	r2, #7
   141b2:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   141b6:	f019 ff38 	bl	2e02a <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   141ba:	f04f 0900 	mov.w	r9, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   141be:	210f      	movs	r1, #15
   141c0:	f242 0006 	movw	r0, #8198	; 0x2006
   141c4:	f7fe fa1a 	bl	125fc <bt_hci_cmd_create>
	if (!buf) {
   141c8:	4604      	mov	r4, r0
   141ca:	2800      	cmp	r0, #0
   141cc:	f000 80a6 	beq.w	1431c <bt_le_adv_start_legacy+0x24c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   141d0:	220f      	movs	r2, #15
   141d2:	a908      	add	r1, sp, #32
   141d4:	3008      	adds	r0, #8
   141d6:	f01c fc53 	bl	30a80 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   141da:	2200      	movs	r2, #0
   141dc:	4621      	mov	r1, r4
   141de:	f242 0006 	movw	r0, #8198	; 0x2006
   141e2:	f7fe fb3d 	bl	12860 <bt_hci_cmd_send_sync>
	if (err) {
   141e6:	2800      	cmp	r0, #0
   141e8:	f040 809b 	bne.w	14322 <bt_le_adv_start_legacy+0x252>
	if (!dir_adv) {
   141ec:	2f00      	cmp	r7, #0
   141ee:	d038      	beq.n	14262 <bt_le_adv_start_legacy+0x192>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   141f0:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   141f2:	07dc      	lsls	r4, r3, #31
   141f4:	d443      	bmi.n	1427e <bt_le_adv_start_legacy+0x1ae>
	return bt_le_adv_set_enable_legacy(adv, enable);
   141f6:	2101      	movs	r1, #1
   141f8:	4630      	mov	r0, r6
   141fa:	f01a faf8 	bl	2e7ee <bt_le_adv_set_enable_legacy>
	if (err) {
   141fe:	4604      	mov	r4, r0
   14200:	2800      	cmp	r0, #0
   14202:	d07e      	beq.n	14302 <bt_le_adv_start_legacy+0x232>
		BT_ERR("Failed to start advertiser");
   14204:	4b4a      	ldr	r3, [pc, #296]	; (14330 <bt_le_adv_start_legacy+0x260>)
   14206:	9310      	str	r3, [sp, #64]	; 0x40
   14208:	2302      	movs	r3, #2
   1420a:	930f      	str	r3, [sp, #60]	; 0x3c
   1420c:	4849      	ldr	r0, [pc, #292]	; (14334 <bt_le_adv_start_legacy+0x264>)
   1420e:	2300      	movs	r3, #0
   14210:	aa0f      	add	r2, sp, #60	; 0x3c
   14212:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14216:	f018 f956 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1421a:	9807      	ldr	r0, [sp, #28]
   1421c:	2800      	cmp	r0, #0
   1421e:	f43f af70 	beq.w	14102 <bt_le_adv_start_legacy+0x32>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14222:	2100      	movs	r1, #0
   14224:	f000 fcba 	bl	14b9c <bt_conn_set_state>
			bt_conn_unref(conn);
   14228:	9807      	ldr	r0, [sp, #28]
   1422a:	f01a fb9e 	bl	2e96a <bt_conn_unref>
   1422e:	e768      	b.n	14102 <bt_le_adv_start_legacy+0x32>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   14230:	970c      	str	r7, [sp, #48]	; 0x30
   14232:	2207      	movs	r2, #7
   14234:	f8cd 7033 	str.w	r7, [sp, #51]	; 0x33
   14238:	a90c      	add	r1, sp, #48	; 0x30
   1423a:	e7a6      	b.n	1418a <bt_le_adv_start_legacy+0xba>
			set_param.type = BT_HCI_ADV_IND;
   1423c:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
   14240:	e7bd      	b.n	141be <bt_le_adv_start_legacy+0xee>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   14242:	059b      	lsls	r3, r3, #22
   14244:	d403      	bmi.n	1424e <bt_le_adv_start_legacy+0x17e>
   14246:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   14248:	b90b      	cbnz	r3, 1424e <bt_le_adv_start_legacy+0x17e>
   1424a:	2802      	cmp	r0, #2
   1424c:	d103      	bne.n	14256 <bt_le_adv_start_legacy+0x186>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   1424e:	2302      	movs	r3, #2
   14250:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   14254:	e7b3      	b.n	141be <bt_le_adv_start_legacy+0xee>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   14256:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   14258:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   1425c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   14260:	e7ad      	b.n	141be <bt_le_adv_start_legacy+0xee>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   14262:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14264:	9300      	str	r3, [sp, #0]
   14266:	e9cd 9a01 	strd	r9, sl, [sp, #4]
   1426a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   1426c:	9a05      	ldr	r2, [sp, #20]
   1426e:	4659      	mov	r1, fp
   14270:	4630      	mov	r0, r6
   14272:	f01a fa35 	bl	2e6e0 <le_adv_update.constprop.0>
		if (err) {
   14276:	4604      	mov	r4, r0
   14278:	2800      	cmp	r0, #0
   1427a:	d0b9      	beq.n	141f0 <bt_le_adv_start_legacy+0x120>
   1427c:	e741      	b.n	14102 <bt_le_adv_start_legacy+0x32>
		err = le_adv_start_add_conn(adv, &conn);
   1427e:	a907      	add	r1, sp, #28
   14280:	4630      	mov	r0, r6
   14282:	f7ff fe99 	bl	13fb8 <le_adv_start_add_conn>
		if (err) {
   14286:	4604      	mov	r4, r0
   14288:	2800      	cmp	r0, #0
   1428a:	d0b4      	beq.n	141f6 <bt_le_adv_start_legacy+0x126>
			if (err == -ENOMEM && !dir_adv &&
   1428c:	f110 0f0c 	cmn.w	r0, #12
   14290:	f47f af37 	bne.w	14102 <bt_le_adv_start_legacy+0x32>
   14294:	2f00      	cmp	r7, #0
   14296:	f47f af34 	bne.w	14102 <bt_le_adv_start_legacy+0x32>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   1429a:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
   1429c:	0798      	lsls	r0, r3, #30
   1429e:	f53f af30 	bmi.w	14102 <bt_le_adv_start_legacy+0x32>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   142a2:	686c      	ldr	r4, [r5, #4]
   142a4:	f084 0402 	eor.w	r4, r4, #2
   142a8:	f3c4 0440 	ubfx	r4, r4, #1, #1
   142ac:	f004 0201 	and.w	r2, r4, #1
   142b0:	210d      	movs	r1, #13
   142b2:	4640      	mov	r0, r8
   142b4:	f01a f9fd 	bl	2e6b2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   142b8:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   142bc:	425a      	negs	r2, r3
   142be:	415a      	adcs	r2, r3
   142c0:	2107      	movs	r1, #7
   142c2:	4640      	mov	r0, r8
   142c4:	f01a f9f5 	bl	2e6b2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   142c8:	f1aa 0102 	sub.w	r1, sl, #2
   142cc:	424a      	negs	r2, r1
   142ce:	414a      	adcs	r2, r1
   142d0:	4640      	mov	r0, r8
   142d2:	2108      	movs	r1, #8
   142d4:	f01a f9ed 	bl	2e6b2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   142d8:	686a      	ldr	r2, [r5, #4]
   142da:	2109      	movs	r1, #9
   142dc:	f002 0201 	and.w	r2, r2, #1
   142e0:	4640      	mov	r0, r8
   142e2:	f01a f9e6 	bl	2e6b2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   142e6:	464a      	mov	r2, r9
   142e8:	210a      	movs	r1, #10
   142ea:	4640      	mov	r0, r8
   142ec:	f01a f9e1 	bl	2e6b2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   142f0:	686a      	ldr	r2, [r5, #4]
   142f2:	210c      	movs	r1, #12
   142f4:	f3c2 0280 	ubfx	r2, r2, #2, #1
   142f8:	4640      	mov	r0, r8
   142fa:	f01a f9da 	bl	2e6b2 <atomic_set_bit_to>
	return 0;
   142fe:	2400      	movs	r4, #0
   14300:	e6ff      	b.n	14102 <bt_le_adv_start_legacy+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   14302:	9807      	ldr	r0, [sp, #28]
   14304:	b108      	cbz	r0, 1430a <bt_le_adv_start_legacy+0x23a>
		bt_conn_unref(conn);
   14306:	f01a fb30 	bl	2e96a <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1430a:	2f00      	cmp	r7, #0
   1430c:	d1ce      	bne.n	142ac <bt_le_adv_start_legacy+0x1dc>
   1430e:	e7c8      	b.n	142a2 <bt_le_adv_start_legacy+0x1d2>
		return -EAGAIN;
   14310:	f06f 040a 	mvn.w	r4, #10
   14314:	e6f5      	b.n	14102 <bt_le_adv_start_legacy+0x32>
		return -EALREADY;
   14316:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1431a:	e6f2      	b.n	14102 <bt_le_adv_start_legacy+0x32>
		return -ENOBUFS;
   1431c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   14320:	e6ef      	b.n	14102 <bt_le_adv_start_legacy+0x32>
   14322:	4604      	mov	r4, r0
   14324:	e6ed      	b.n	14102 <bt_le_adv_start_legacy+0x32>
   14326:	bf00      	nop
   14328:	200000cc 	.word	0x200000cc
   1432c:	20000000 	.word	0x20000000
   14330:	000357b3 	.word	0x000357b3
   14334:	0003236c 	.word	0x0003236c

00014338 <bt_le_adv_start>:
{
   14338:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1433a:	4615      	mov	r5, r2
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   1433c:	9a06      	ldr	r2, [sp, #24]
{
   1433e:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   14340:	e9cd 3200 	strd	r3, r2, [sp]
   14344:	462b      	mov	r3, r5
   14346:	460a      	mov	r2, r1
   14348:	4601      	mov	r1, r0
   1434a:	4811      	ldr	r0, [pc, #68]	; (14390 <bt_le_adv_start+0x58>)
   1434c:	f7ff fec0 	bl	140d0 <bt_le_adv_start_legacy>
   14350:	4621      	mov	r1, r4
   14352:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   14354:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   14356:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   1435a:	429d      	cmp	r5, r3
   1435c:	d102      	bne.n	14364 <bt_le_adv_start+0x2c>
}
   1435e:	4630      	mov	r0, r6
   14360:	b002      	add	sp, #8
   14362:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   14364:	880a      	ldrh	r2, [r1, #0]
   14366:	4282      	cmp	r2, r0
   14368:	d104      	bne.n	14374 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   1436a:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   1436c:	b112      	cbz	r2, 14374 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   1436e:	7812      	ldrb	r2, [r2, #0]
   14370:	07d2      	lsls	r2, r2, #31
   14372:	d402      	bmi.n	1437a <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   14374:	3301      	adds	r3, #1
   14376:	3108      	adds	r1, #8
   14378:	e7ef      	b.n	1435a <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   1437a:	4906      	ldr	r1, [pc, #24]	; (14394 <bt_le_adv_start+0x5c>)
   1437c:	4806      	ldr	r0, [pc, #24]	; (14398 <bt_le_adv_start+0x60>)
   1437e:	f01d fac0 	bl	31902 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   14382:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   14386:	2300      	movs	r3, #0
   14388:	4803      	ldr	r0, [pc, #12]	; (14398 <bt_le_adv_start+0x60>)
   1438a:	f016 fb87 	bl	2aa9c <k_work_reschedule>
   1438e:	e7e6      	b.n	1435e <bt_le_adv_start+0x26>
   14390:	20000018 	.word	0x20000018
   14394:	000143d1 	.word	0x000143d1
   14398:	20000030 	.word	0x20000030

0001439c <bt_le_adv_stop>:
{
   1439c:	b508      	push	{r3, lr}
	(void)bt_le_lim_adv_cancel_timeout(adv);
   1439e:	480a      	ldr	r0, [pc, #40]	; (143c8 <bt_le_adv_stop+0x2c>)
   143a0:	f01a fa4c 	bl	2e83c <bt_le_lim_adv_cancel_timeout>
   143a4:	4809      	ldr	r0, [pc, #36]	; (143cc <bt_le_adv_stop+0x30>)
   143a6:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   143aa:	f01a f973 	bl	2e694 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   143ae:	4807      	ldr	r0, [pc, #28]	; (143cc <bt_le_adv_stop+0x30>)
   143b0:	f01a f96a 	bl	2e688 <atomic_get>
   143b4:	4603      	mov	r3, r0
	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   143b6:	065b      	lsls	r3, r3, #25
   143b8:	f3c0 1080 	ubfx	r0, r0, #6, #1
   143bc:	d503      	bpl.n	143c6 <bt_le_adv_stop+0x2a>
}
   143be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   143c2:	f7ff be47 	b.w	14054 <bt_le_adv_stop.part.0>
   143c6:	bd08      	pop	{r3, pc}
   143c8:	20000018 	.word	0x20000018
   143cc:	20000028 	.word	0x20000028

000143d0 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   143d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   143d2:	f7ff ffe3 	bl	1439c <bt_le_adv_stop>
#endif
	BT_WARN("Failed to stop advertising: %d", err);
   143d6:	4b07      	ldr	r3, [pc, #28]	; (143f4 <adv_timeout+0x24>)
   143d8:	e9cd 3004 	strd	r3, r0, [sp, #16]
   143dc:	2303      	movs	r3, #3
   143de:	9303      	str	r3, [sp, #12]
   143e0:	4805      	ldr	r0, [pc, #20]	; (143f8 <adv_timeout+0x28>)
   143e2:	2300      	movs	r3, #0
   143e4:	aa03      	add	r2, sp, #12
   143e6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   143ea:	f018 f86c 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
}
   143ee:	b007      	add	sp, #28
   143f0:	f85d fb04 	ldr.w	pc, [sp], #4
   143f4:	000357ce 	.word	0x000357ce
   143f8:	0003236c 	.word	0x0003236c

000143fc <bt_le_adv_resume>:
{
   143fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   143fe:	4822      	ldr	r0, [pc, #136]	; (14488 <bt_le_adv_resume+0x8c>)
   14400:	4c21      	ldr	r4, [pc, #132]	; (14488 <bt_le_adv_resume+0x8c>)
   14402:	f01a f941 	bl	2e688 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   14406:	f410 5f00 	tst.w	r0, #8192	; 0x2000
   1440a:	d03a      	beq.n	14482 <bt_le_adv_resume+0x86>
   1440c:	4620      	mov	r0, r4
   1440e:	f01a f93b 	bl	2e688 <atomic_get>
   14412:	0641      	lsls	r1, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14414:	f3c0 1580 	ubfx	r5, r0, #6, #1
   14418:	d433      	bmi.n	14482 <bt_le_adv_resume+0x86>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1441a:	4620      	mov	r0, r4
   1441c:	f01a f934 	bl	2e688 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   14420:	0582      	lsls	r2, r0, #22
   14422:	d52e      	bpl.n	14482 <bt_le_adv_resume+0x86>
	err = le_adv_start_add_conn(adv, &conn);
   14424:	a901      	add	r1, sp, #4
   14426:	f1a4 0010 	sub.w	r0, r4, #16
   1442a:	f7ff fdc5 	bl	13fb8 <le_adv_start_add_conn>
	if (err) {
   1442e:	bb40      	cbnz	r0, 14482 <bt_le_adv_resume+0x86>
   14430:	4620      	mov	r0, r4
   14432:	f01a f929 	bl	2e688 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   14436:	04c3      	lsls	r3, r0, #19
   14438:	d403      	bmi.n	14442 <bt_le_adv_resume+0x46>
		bt_id_set_adv_private_addr(adv);
   1443a:	f1a4 0010 	sub.w	r0, r4, #16
   1443e:	f01a f8ff 	bl	2e640 <bt_id_set_adv_private_addr>
	return bt_le_adv_set_enable_legacy(adv, enable);
   14442:	4812      	ldr	r0, [pc, #72]	; (1448c <bt_le_adv_resume+0x90>)
   14444:	2101      	movs	r1, #1
   14446:	f01a f9d2 	bl	2e7ee <bt_le_adv_set_enable_legacy>
	if (err) {
   1444a:	b150      	cbz	r0, 14462 <bt_le_adv_resume+0x66>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1444c:	9801      	ldr	r0, [sp, #4]
   1444e:	2100      	movs	r1, #0
   14450:	f000 fba4 	bl	14b9c <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14454:	480c      	ldr	r0, [pc, #48]	; (14488 <bt_le_adv_resume+0x8c>)
   14456:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   1445a:	f01a f91b 	bl	2e694 <atomic_and>
	return (old & mask) != 0;
   1445e:	f3c0 3540 	ubfx	r5, r0, #13, #1
	bt_conn_unref(conn);
   14462:	9801      	ldr	r0, [sp, #4]
   14464:	f01a fa81 	bl	2e96a <bt_conn_unref>
	if (persist_paused) {
   14468:	b15d      	cbz	r5, 14482 <bt_le_adv_resume+0x86>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1446a:	f3bf 8f5b 	dmb	ish
   1446e:	e854 3f00 	ldrex	r3, [r4]
   14472:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   14476:	e844 3200 	strex	r2, r3, [r4]
   1447a:	2a00      	cmp	r2, #0
   1447c:	d1f7      	bne.n	1446e <bt_le_adv_resume+0x72>
   1447e:	f3bf 8f5b 	dmb	ish
}
   14482:	b003      	add	sp, #12
   14484:	bd30      	pop	{r4, r5, pc}
   14486:	bf00      	nop
   14488:	20000028 	.word	0x20000028
   1448c:	20000018 	.word	0x20000018

00014490 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   14490:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   14492:	4904      	ldr	r1, [pc, #16]	; (144a4 <bt_pub_key_is_debug+0x14>)
   14494:	2240      	movs	r2, #64	; 0x40
   14496:	f019 fdb7 	bl	2e008 <memcmp>
}
   1449a:	fab0 f080 	clz	r0, r0
   1449e:	0940      	lsrs	r0, r0, #5
   144a0:	bd08      	pop	{r3, pc}
   144a2:	bf00      	nop
   144a4:	00035882 	.word	0x00035882

000144a8 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   144a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   144aa:	4b43      	ldr	r3, [pc, #268]	; (145b8 <bt_pub_key_gen+0x110>)
   144ac:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   144b0:	f003 0306 	and.w	r3, r3, #6
   144b4:	2b06      	cmp	r3, #6
{
   144b6:	b087      	sub	sp, #28
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   144b8:	d00f      	beq.n	144da <bt_pub_key_gen+0x32>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
   144ba:	4b40      	ldr	r3, [pc, #256]	; (145bc <bt_pub_key_gen+0x114>)
   144bc:	9304      	str	r3, [sp, #16]
   144be:	2302      	movs	r3, #2
   144c0:	9303      	str	r3, [sp, #12]
   144c2:	483f      	ldr	r0, [pc, #252]	; (145c0 <bt_pub_key_gen+0x118>)
   144c4:	2300      	movs	r3, #0
   144c6:	aa03      	add	r2, sp, #12
   144c8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return -ENOTSUP;
   144cc:	f06f 0585 	mvn.w	r5, #133	; 0x85
   144d0:	f017 fff9 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   144d4:	4628      	mov	r0, r5
   144d6:	b007      	add	sp, #28
   144d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!new_cb) {
   144da:	2800      	cmp	r0, #0
   144dc:	d069      	beq.n	145b2 <bt_pub_key_gen+0x10a>
	return list->head;
   144de:	4e39      	ldr	r6, [pc, #228]	; (145c4 <bt_pub_key_gen+0x11c>)
   144e0:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   144e2:	b1a2      	cbz	r2, 1450e <bt_pub_key_gen+0x66>
   144e4:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   144e6:	4298      	cmp	r0, r3
   144e8:	d10d      	bne.n	14506 <bt_pub_key_gen+0x5e>
			BT_WARN("Callback already registered");
   144ea:	4b37      	ldr	r3, [pc, #220]	; (145c8 <bt_pub_key_gen+0x120>)
   144ec:	9304      	str	r3, [sp, #16]
   144ee:	2302      	movs	r3, #2
   144f0:	9303      	str	r3, [sp, #12]
   144f2:	4833      	ldr	r0, [pc, #204]	; (145c0 <bt_pub_key_gen+0x118>)
   144f4:	2300      	movs	r3, #0
   144f6:	aa03      	add	r2, sp, #12
   144f8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   144fc:	f017 ffe3 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
			return -EALREADY;
   14500:	f06f 0577 	mvn.w	r5, #119	; 0x77
   14504:	e7e6      	b.n	144d4 <bt_pub_key_gen+0x2c>
	return node->next;
   14506:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   14508:	b10b      	cbz	r3, 1450e <bt_pub_key_gen+0x66>
   1450a:	3b04      	subs	r3, #4
   1450c:	e7eb      	b.n	144e6 <bt_pub_key_gen+0x3e>
	parent->next = child;
   1450e:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   14510:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   14512:	1d03      	adds	r3, r0, #4
	list->head = node;
   14514:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   14516:	b902      	cbnz	r2, 1451a <bt_pub_key_gen+0x72>
	list->tail = node;
   14518:	6073      	str	r3, [r6, #4]
   1451a:	4c2c      	ldr	r4, [pc, #176]	; (145cc <bt_pub_key_gen+0x124>)
   1451c:	f3bf 8f5b 	dmb	ish
   14520:	e854 7f00 	ldrex	r7, [r4]
   14524:	f047 0320 	orr.w	r3, r7, #32
   14528:	e844 3200 	strex	r2, r3, [r4]
   1452c:	2a00      	cmp	r2, #0
   1452e:	d1f7      	bne.n	14520 <bt_pub_key_gen+0x78>
   14530:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   14534:	f017 0720 	ands.w	r7, r7, #32
   14538:	d001      	beq.n	1453e <bt_pub_key_gen+0x96>
		return 0;
   1453a:	2500      	movs	r5, #0
   1453c:	e7ca      	b.n	144d4 <bt_pub_key_gen+0x2c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1453e:	f3bf 8f5b 	dmb	ish
   14542:	e854 3f00 	ldrex	r3, [r4]
   14546:	f023 0310 	bic.w	r3, r3, #16
   1454a:	e844 3200 	strex	r2, r3, [r4]
   1454e:	2a00      	cmp	r2, #0
   14550:	d1f7      	bne.n	14542 <bt_pub_key_gen+0x9a>
   14552:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   14556:	463a      	mov	r2, r7
   14558:	4639      	mov	r1, r7
   1455a:	f242 0025 	movw	r0, #8229	; 0x2025
   1455e:	f7fe f97f 	bl	12860 <bt_hci_cmd_send_sync>
	if (err) {
   14562:	4605      	mov	r5, r0
   14564:	2800      	cmp	r0, #0
   14566:	d0e8      	beq.n	1453a <bt_pub_key_gen+0x92>
		BT_ERR("Sending LE P256 Public Key command failed");
   14568:	4b19      	ldr	r3, [pc, #100]	; (145d0 <bt_pub_key_gen+0x128>)
   1456a:	9304      	str	r3, [sp, #16]
   1456c:	2302      	movs	r3, #2
   1456e:	9303      	str	r3, [sp, #12]
   14570:	4813      	ldr	r0, [pc, #76]	; (145c0 <bt_pub_key_gen+0x118>)
   14572:	463b      	mov	r3, r7
   14574:	aa03      	add	r2, sp, #12
   14576:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1457a:	f017 ffa4 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
   1457e:	f3bf 8f5b 	dmb	ish
   14582:	e854 3f00 	ldrex	r3, [r4]
   14586:	f023 0320 	bic.w	r3, r3, #32
   1458a:	e844 3200 	strex	r2, r3, [r4]
   1458e:	2a00      	cmp	r2, #0
   14590:	d1f7      	bne.n	14582 <bt_pub_key_gen+0xda>
   14592:	f3bf 8f5b 	dmb	ish
	return list->head;
   14596:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   14598:	b13c      	cbz	r4, 145aa <bt_pub_key_gen+0x102>
			if (cb->func) {
   1459a:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1459e:	3c04      	subs	r4, #4
			if (cb->func) {
   145a0:	b10b      	cbz	r3, 145a6 <bt_pub_key_gen+0xfe>
				cb->func(NULL);
   145a2:	2000      	movs	r0, #0
   145a4:	4798      	blx	r3
	return node->next;
   145a6:	6864      	ldr	r4, [r4, #4]
   145a8:	e7f6      	b.n	14598 <bt_pub_key_gen+0xf0>
	list->head = NULL;
   145aa:	2300      	movs	r3, #0
	list->tail = NULL;
   145ac:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   145b0:	e790      	b.n	144d4 <bt_pub_key_gen+0x2c>
		return -EINVAL;
   145b2:	f06f 0515 	mvn.w	r5, #21
   145b6:	e78d      	b.n	144d4 <bt_pub_key_gen+0x2c>
   145b8:	20000000 	.word	0x20000000
   145bc:	000357f4 	.word	0x000357f4
   145c0:	0003243c 	.word	0x0003243c
   145c4:	20001e90 	.word	0x20001e90
   145c8:	00035813 	.word	0x00035813
   145cc:	200000cc 	.word	0x200000cc
   145d0:	0003582f 	.word	0x0003582f

000145d4 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   145d4:	4b05      	ldr	r3, [pc, #20]	; (145ec <bt_pub_key_get+0x18>)
   145d6:	f3bf 8f5b 	dmb	ish
   145da:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   145dc:	4804      	ldr	r0, [pc, #16]	; (145f0 <bt_pub_key_get+0x1c>)
   145de:	f3bf 8f5b 	dmb	ish
		return pub_key;
   145e2:	f013 0f10 	tst.w	r3, #16
}
   145e6:	bf08      	it	eq
   145e8:	2000      	moveq	r0, #0
   145ea:	4770      	bx	lr
   145ec:	200000cc 	.word	0x200000cc
   145f0:	200033db 	.word	0x200033db

000145f4 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   145f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   145f6:	4d26      	ldr	r5, [pc, #152]	; (14690 <bt_dh_key_gen+0x9c>)
   145f8:	682b      	ldr	r3, [r5, #0]
   145fa:	428b      	cmp	r3, r1
{
   145fc:	b087      	sub	sp, #28
   145fe:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   14600:	d040      	beq.n	14684 <bt_dh_key_gen+0x90>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   14602:	b123      	cbz	r3, 1460e <bt_dh_key_gen+0x1a>
		return -EBUSY;
   14604:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   14608:	4620      	mov	r0, r4
   1460a:	b007      	add	sp, #28
   1460c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1460e:	4b21      	ldr	r3, [pc, #132]	; (14694 <bt_dh_key_gen+0xa0>)
   14610:	f3bf 8f5b 	dmb	ish
   14614:	681a      	ldr	r2, [r3, #0]
   14616:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1461a:	f3c2 1740 	ubfx	r7, r2, #5, #1
   1461e:	0692      	lsls	r2, r2, #26
   14620:	d4f0      	bmi.n	14604 <bt_dh_key_gen+0x10>
   14622:	f3bf 8f5b 	dmb	ish
   14626:	681b      	ldr	r3, [r3, #0]
   14628:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   1462c:	06db      	lsls	r3, r3, #27
   1462e:	d52c      	bpl.n	1468a <bt_dh_key_gen+0x96>
	dh_key_cb = cb;
   14630:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   14632:	f242 0026 	movw	r0, #8230	; 0x2026
   14636:	2140      	movs	r1, #64	; 0x40
   14638:	f7fd ffe0 	bl	125fc <bt_hci_cmd_create>
	if (!buf) {
   1463c:	4604      	mov	r4, r0
   1463e:	b1f0      	cbz	r0, 1467e <bt_dh_key_gen+0x8a>
	return net_buf_simple_add(&buf->b, len);
   14640:	2140      	movs	r1, #64	; 0x40
   14642:	3008      	adds	r0, #8
   14644:	f01c fa16 	bl	30a74 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   14648:	2240      	movs	r2, #64	; 0x40
   1464a:	4631      	mov	r1, r6
   1464c:	f019 fced 	bl	2e02a <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   14650:	4621      	mov	r1, r4
   14652:	463a      	mov	r2, r7
   14654:	f242 0026 	movw	r0, #8230	; 0x2026
   14658:	f7fe f902 	bl	12860 <bt_hci_cmd_send_sync>
	if (err) {
   1465c:	4604      	mov	r4, r0
   1465e:	2800      	cmp	r0, #0
   14660:	d0d2      	beq.n	14608 <bt_dh_key_gen+0x14>
		BT_WARN("Failed to generate DHKey (err %d)", err);
   14662:	4a0d      	ldr	r2, [pc, #52]	; (14698 <bt_dh_key_gen+0xa4>)
		dh_key_cb = NULL;
   14664:	2300      	movs	r3, #0
		BT_WARN("Failed to generate DHKey (err %d)", err);
   14666:	e9cd 2404 	strd	r2, r4, [sp, #16]
   1466a:	2203      	movs	r2, #3
		dh_key_cb = NULL;
   1466c:	602b      	str	r3, [r5, #0]
		BT_WARN("Failed to generate DHKey (err %d)", err);
   1466e:	9203      	str	r2, [sp, #12]
   14670:	480a      	ldr	r0, [pc, #40]	; (1469c <bt_dh_key_gen+0xa8>)
   14672:	aa03      	add	r2, sp, #12
   14674:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   14678:	f017 ff25 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
		return err;
   1467c:	e7c4      	b.n	14608 <bt_dh_key_gen+0x14>
		return -ENOBUFS;
   1467e:	f06f 0468 	mvn.w	r4, #104	; 0x68
   14682:	e7ee      	b.n	14662 <bt_dh_key_gen+0x6e>
		return -EALREADY;
   14684:	f06f 0477 	mvn.w	r4, #119	; 0x77
   14688:	e7be      	b.n	14608 <bt_dh_key_gen+0x14>
		return -EADDRNOTAVAIL;
   1468a:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   1468e:	e7bb      	b.n	14608 <bt_dh_key_gen+0x14>
   14690:	20001e8c 	.word	0x20001e8c
   14694:	200000cc 	.word	0x200000cc
   14698:	00035859 	.word	0x00035859
   1469c:	0003243c 	.word	0x0003243c

000146a0 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   146a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   146a2:	4c1b      	ldr	r4, [pc, #108]	; (14710 <bt_hci_evt_le_pkey_complete+0x70>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   146a4:	6886      	ldr	r6, [r0, #8]
   146a6:	f3bf 8f5b 	dmb	ish
   146aa:	e854 3f00 	ldrex	r3, [r4]
   146ae:	f023 0320 	bic.w	r3, r3, #32
   146b2:	e844 3200 	strex	r2, r3, [r4]
   146b6:	2a00      	cmp	r2, #0
   146b8:	d1f7      	bne.n	146aa <bt_hci_evt_le_pkey_complete+0xa>
   146ba:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   146be:	7833      	ldrb	r3, [r6, #0]
   146c0:	b983      	cbnz	r3, 146e4 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   146c2:	4814      	ldr	r0, [pc, #80]	; (14714 <bt_hci_evt_le_pkey_complete+0x74>)
   146c4:	2240      	movs	r2, #64	; 0x40
   146c6:	1c71      	adds	r1, r6, #1
   146c8:	f019 fcaf 	bl	2e02a <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   146cc:	f3bf 8f5b 	dmb	ish
   146d0:	e854 3f00 	ldrex	r3, [r4]
   146d4:	f043 0310 	orr.w	r3, r3, #16
   146d8:	e844 3200 	strex	r2, r3, [r4]
   146dc:	2a00      	cmp	r2, #0
   146de:	d1f7      	bne.n	146d0 <bt_hci_evt_le_pkey_complete+0x30>
   146e0:	f3bf 8f5b 	dmb	ish
	return list->head;
   146e4:	4d0c      	ldr	r5, [pc, #48]	; (14718 <bt_hci_evt_le_pkey_complete+0x78>)
   146e6:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   146e8:	b16c      	cbz	r4, 14706 <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   146ea:	4f0a      	ldr	r7, [pc, #40]	; (14714 <bt_hci_evt_le_pkey_complete+0x74>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   146ec:	3c04      	subs	r4, #4
		if (cb->func) {
   146ee:	6823      	ldr	r3, [r4, #0]
   146f0:	b12b      	cbz	r3, 146fe <bt_hci_evt_le_pkey_complete+0x5e>
			cb->func(evt->status ? NULL : pub_key);
   146f2:	7832      	ldrb	r2, [r6, #0]
   146f4:	2a00      	cmp	r2, #0
   146f6:	bf0c      	ite	eq
   146f8:	4638      	moveq	r0, r7
   146fa:	2000      	movne	r0, #0
   146fc:	4798      	blx	r3
	return node->next;
   146fe:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   14700:	b10c      	cbz	r4, 14706 <bt_hci_evt_le_pkey_complete+0x66>
   14702:	3c04      	subs	r4, #4
   14704:	e7f3      	b.n	146ee <bt_hci_evt_le_pkey_complete+0x4e>
	list->head = NULL;
   14706:	2300      	movs	r3, #0
	list->tail = NULL;
   14708:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   1470c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1470e:	bf00      	nop
   14710:	200000cc 	.word	0x200000cc
   14714:	200033db 	.word	0x200033db
   14718:	20001e90 	.word	0x20001e90

0001471c <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   1471c:	4905      	ldr	r1, [pc, #20]	; (14734 <bt_hci_evt_le_dhkey_complete+0x18>)
   1471e:	680b      	ldr	r3, [r1, #0]
   14720:	b133      	cbz	r3, 14730 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   14722:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   14724:	2000      	movs	r0, #0
   14726:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   14728:	7811      	ldrb	r1, [r2, #0]
   1472a:	b901      	cbnz	r1, 1472e <bt_hci_evt_le_dhkey_complete+0x12>
   1472c:	1c50      	adds	r0, r2, #1
   1472e:	4718      	bx	r3
	}
}
   14730:	4770      	bx	lr
   14732:	bf00      	nop
   14734:	20001e8c 	.word	0x20001e8c

00014738 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   14738:	4b0b      	ldr	r3, [pc, #44]	; (14768 <notify_connected+0x30>)
{
   1473a:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   1473c:	681d      	ldr	r5, [r3, #0]
{
   1473e:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   14740:	b925      	cbnz	r5, 1474c <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14742:	4d0a      	ldr	r5, [pc, #40]	; (1476c <notify_connected+0x34>)
   14744:	4e0a      	ldr	r6, [pc, #40]	; (14770 <notify_connected+0x38>)
   14746:	42b5      	cmp	r5, r6
   14748:	d307      	bcc.n	1475a <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   1474a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
   1474c:	682b      	ldr	r3, [r5, #0]
   1474e:	b113      	cbz	r3, 14756 <notify_connected+0x1e>
			cb->connected(conn, conn->err);
   14750:	7b21      	ldrb	r1, [r4, #12]
   14752:	4620      	mov	r0, r4
   14754:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   14756:	69ad      	ldr	r5, [r5, #24]
   14758:	e7f2      	b.n	14740 <notify_connected+0x8>
		if (cb->connected) {
   1475a:	682b      	ldr	r3, [r5, #0]
   1475c:	b113      	cbz	r3, 14764 <notify_connected+0x2c>
			cb->connected(conn, conn->err);
   1475e:	7b21      	ldrb	r1, [r4, #12]
   14760:	4620      	mov	r0, r4
   14762:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14764:	351c      	adds	r5, #28
   14766:	e7ee      	b.n	14746 <notify_connected+0xe>
   14768:	20001ea4 	.word	0x20001ea4
   1476c:	00032290 	.word	0x00032290
   14770:	000322ac 	.word	0x000322ac

00014774 <tx_free>:
	tx->cb = NULL;
   14774:	2300      	movs	r3, #0
	tx->user_data = NULL;
   14776:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   1477a:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   1477c:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   1477e:	4801      	ldr	r0, [pc, #4]	; (14784 <tx_free+0x10>)
   14780:	f01c bfc8 	b.w	31714 <k_queue_append>
   14784:	20000c3c 	.word	0x20000c3c

00014788 <bt_conn_create_pdu_timeout.part.0>:
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
   14788:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		BT_WARN("Unable to allocate buffer within timeout");
   1478a:	4b07      	ldr	r3, [pc, #28]	; (147a8 <bt_conn_create_pdu_timeout.part.0+0x20>)
   1478c:	9304      	str	r3, [sp, #16]
   1478e:	4807      	ldr	r0, [pc, #28]	; (147ac <bt_conn_create_pdu_timeout.part.0+0x24>)
   14790:	2302      	movs	r3, #2
   14792:	aa03      	add	r2, sp, #12
   14794:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   14798:	9303      	str	r3, [sp, #12]
   1479a:	f01a f87b 	bl	2e894 <z_log_msg2_static_create.constprop.0>
}
   1479e:	2000      	movs	r0, #0
   147a0:	b007      	add	sp, #28
   147a2:	f85d fb04 	ldr.w	pc, [sp], #4
   147a6:	bf00      	nop
   147a8:	000358c2 	.word	0x000358c2
   147ac:	00032384 	.word	0x00032384

000147b0 <send_frag>:
{
   147b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   147b4:	694d      	ldr	r5, [r1, #20]
{
   147b6:	b087      	sub	sp, #28
   147b8:	4604      	mov	r4, r0
   147ba:	460e      	mov	r6, r1
   147bc:	4690      	mov	r8, r2
   147be:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   147c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   147c4:	483b      	ldr	r0, [pc, #236]	; (148b4 <send_frag+0x104>)
   147c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   147ca:	f015 ff85 	bl	2a6d8 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   147ce:	7b63      	ldrb	r3, [r4, #13]
   147d0:	2b07      	cmp	r3, #7
   147d2:	d147      	bne.n	14864 <send_frag+0xb4>
	__asm__ volatile(
   147d4:	f04f 0320 	mov.w	r3, #32
   147d8:	f3ef 8211 	mrs	r2, BASEPRI
   147dc:	f383 8812 	msr	BASEPRI_MAX, r3
   147e0:	f3bf 8f6f 	isb	sy
	if (tx) {
   147e4:	69a3      	ldr	r3, [r4, #24]
   147e6:	2d00      	cmp	r5, #0
   147e8:	d04f      	beq.n	1488a <send_frag+0xda>
	parent->next = child;
   147ea:	2100      	movs	r1, #0
   147ec:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   147ee:	2b00      	cmp	r3, #0
   147f0:	d148      	bne.n	14884 <send_frag+0xd4>
	list->head = node;
   147f2:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   147f6:	f382 8811 	msr	BASEPRI, r2
   147fa:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   147fe:	2104      	movs	r1, #4
   14800:	f106 0008 	add.w	r0, r6, #8
   14804:	f01c f94d 	bl	30aa2 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   14808:	8823      	ldrh	r3, [r4, #0]
   1480a:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
   1480e:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   14812:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   14814:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   14818:	3b04      	subs	r3, #4
   1481a:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1481c:	2302      	movs	r3, #2
   1481e:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   14820:	4630      	mov	r0, r6
   14822:	f019 fe2e 	bl	2e482 <bt_send>
	if (err) {
   14826:	2800      	cmp	r0, #0
   14828:	d041      	beq.n	148ae <send_frag+0xfe>
		BT_ERR("Unable to send to driver (err %d)", err);
   1482a:	4b23      	ldr	r3, [pc, #140]	; (148b8 <send_frag+0x108>)
   1482c:	aa03      	add	r2, sp, #12
   1482e:	e9cd 3004 	strd	r3, r0, [sp, #16]
   14832:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14836:	2303      	movs	r3, #3
   14838:	4820      	ldr	r0, [pc, #128]	; (148bc <send_frag+0x10c>)
   1483a:	9303      	str	r3, [sp, #12]
   1483c:	f01a f82a 	bl	2e894 <z_log_msg2_static_create.constprop.0>
	__asm__ volatile(
   14840:	f04f 0320 	mov.w	r3, #32
   14844:	f3ef 8811 	mrs	r8, BASEPRI
   14848:	f383 8812 	msr	BASEPRI_MAX, r3
   1484c:	f3bf 8f6f 	isb	sy
		if (tx) {
   14850:	b33d      	cbz	r5, 148a2 <send_frag+0xf2>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   14852:	4629      	mov	r1, r5
   14854:	f104 0014 	add.w	r0, r4, #20
   14858:	f019 fff3 	bl	2e842 <sys_slist_find_and_remove>
	__asm__ volatile(
   1485c:	f388 8811 	msr	BASEPRI, r8
   14860:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   14864:	4813      	ldr	r0, [pc, #76]	; (148b4 <send_frag+0x104>)
   14866:	f015 ff11 	bl	2a68c <z_impl_k_sem_give>
	if (tx) {
   1486a:	b115      	cbz	r5, 14872 <send_frag+0xc2>
		tx_free(tx);
   1486c:	4628      	mov	r0, r5
   1486e:	f7ff ff81 	bl	14774 <tx_free>
	if (always_consume) {
   14872:	b11f      	cbz	r7, 1487c <send_frag+0xcc>
		net_buf_unref(buf);
   14874:	4630      	mov	r0, r6
   14876:	f013 fa15 	bl	27ca4 <net_buf_unref>
	return false;
   1487a:	2700      	movs	r7, #0
}
   1487c:	4638      	mov	r0, r7
   1487e:	b007      	add	sp, #28
   14880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	parent->next = child;
   14884:	601d      	str	r5, [r3, #0]
	list->tail = node;
   14886:	61a5      	str	r5, [r4, #24]
}
   14888:	e7b5      	b.n	147f6 <send_frag+0x46>
		if (tail_tx) {
   1488a:	b133      	cbz	r3, 1489a <send_frag+0xea>
			pending_no_cb = &tail_tx->pending_no_cb;
   1488c:	f103 090c 	add.w	r9, r3, #12
   14890:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   14892:	3301      	adds	r3, #1
   14894:	f8c9 3000 	str.w	r3, [r9]
   14898:	e7ad      	b.n	147f6 <send_frag+0x46>
			pending_no_cb = &conn->pending_no_cb;
   1489a:	69e3      	ldr	r3, [r4, #28]
   1489c:	f104 091c 	add.w	r9, r4, #28
   148a0:	e7f7      	b.n	14892 <send_frag+0xe2>
			(*pending_no_cb)--;
   148a2:	f8d9 3000 	ldr.w	r3, [r9]
   148a6:	3b01      	subs	r3, #1
   148a8:	f8c9 3000 	str.w	r3, [r9]
   148ac:	e7d6      	b.n	1485c <send_frag+0xac>
	return true;
   148ae:	2701      	movs	r7, #1
   148b0:	e7e4      	b.n	1487c <send_frag+0xcc>
   148b2:	bf00      	nop
   148b4:	20000100 	.word	0x20000100
   148b8:	000350ab 	.word	0x000350ab
   148bc:	00032384 	.word	0x00032384

000148c0 <bt_conn_get_pkts>:
}
   148c0:	4800      	ldr	r0, [pc, #0]	; (148c4 <bt_conn_get_pkts+0x4>)
   148c2:	4770      	bx	lr
   148c4:	20000100 	.word	0x20000100

000148c8 <bt_conn_new>:
{
   148c8:	b538      	push	{r3, r4, r5, lr}
   148ca:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   148cc:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   148ce:	2501      	movs	r5, #1
   148d0:	428b      	cmp	r3, r1
   148d2:	d102      	bne.n	148da <bt_conn_new+0x12>
		return NULL;
   148d4:	2400      	movs	r4, #0
}
   148d6:	4620      	mov	r0, r4
   148d8:	bd38      	pop	{r3, r4, r5, pc}
   148da:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   148de:	f3bf 8f5b 	dmb	ish
   148e2:	e852 0f00 	ldrex	r0, [r2]
   148e6:	2800      	cmp	r0, #0
   148e8:	d104      	bne.n	148f4 <bt_conn_new+0x2c>
   148ea:	e842 5c00 	strex	ip, r5, [r2]
   148ee:	f1bc 0f00 	cmp.w	ip, #0
   148f2:	d1f6      	bne.n	148e2 <bt_conn_new+0x1a>
   148f4:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   148f8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   148fc:	d002      	beq.n	14904 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   148fe:	3301      	adds	r3, #1
   14900:	4604      	mov	r4, r0
   14902:	e7e5      	b.n	148d0 <bt_conn_new+0x8>
	if (!conn) {
   14904:	2c00      	cmp	r4, #0
   14906:	d0e6      	beq.n	148d6 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   14908:	22b8      	movs	r2, #184	; 0xb8
   1490a:	2100      	movs	r1, #0
   1490c:	4620      	mov	r0, r4
   1490e:	f019 fb97 	bl	2e040 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   14912:	f104 0058 	add.w	r0, r4, #88	; 0x58
   14916:	4904      	ldr	r1, [pc, #16]	; (14928 <bt_conn_new+0x60>)
   14918:	f01c fff3 	bl	31902 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   1491c:	4903      	ldr	r1, [pc, #12]	; (1492c <bt_conn_new+0x64>)
   1491e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   14922:	f01c ffc8 	bl	318b6 <k_work_init>
	return conn;
   14926:	e7d6      	b.n	148d6 <bt_conn_new+0xe>
   14928:	0001510d 	.word	0x0001510d
   1492c:	0002e8e1 	.word	0x0002e8e1

00014930 <bt_conn_recv>:
{
   14930:	b5f0      	push	{r4, r5, r6, r7, lr}
   14932:	b087      	sub	sp, #28
   14934:	4616      	mov	r6, r2
   14936:	af00      	add	r7, sp, #0
   14938:	4604      	mov	r4, r0
   1493a:	460d      	mov	r5, r1
	tx_notify(conn);
   1493c:	f019 ffad 	bl	2e89a <tx_notify>
	switch (flags) {
   14940:	2e01      	cmp	r6, #1
   14942:	d030      	beq.n	149a6 <bt_conn_recv+0x76>
   14944:	2e02      	cmp	r6, #2
   14946:	d169      	bne.n	14a1c <bt_conn_recv+0xec>
		if (conn->rx) {
   14948:	6923      	ldr	r3, [r4, #16]
   1494a:	b163      	cbz	r3, 14966 <bt_conn_recv+0x36>
			BT_ERR("Unexpected first L2CAP frame");
   1494c:	4b3c      	ldr	r3, [pc, #240]	; (14a40 <bt_conn_recv+0x110>)
   1494e:	483d      	ldr	r0, [pc, #244]	; (14a44 <bt_conn_recv+0x114>)
   14950:	f107 020c 	add.w	r2, r7, #12
   14954:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14958:	e9c7 6303 	strd	r6, r3, [r7, #12]
   1495c:	f019 ff9a 	bl	2e894 <z_log_msg2_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   14960:	4620      	mov	r0, r4
   14962:	f019 ffc0 	bl	2e8e6 <bt_conn_reset_rx_state>
		conn->rx = buf;
   14966:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   14968:	6921      	ldr	r1, [r4, #16]
   1496a:	8988      	ldrh	r0, [r1, #12]
   1496c:	2801      	cmp	r0, #1
   1496e:	d930      	bls.n	149d2 <bt_conn_recv+0xa2>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   14970:	688b      	ldr	r3, [r1, #8]
   14972:	881b      	ldrh	r3, [r3, #0]
   14974:	3304      	adds	r3, #4
   14976:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   14978:	4298      	cmp	r0, r3
   1497a:	d32a      	bcc.n	149d2 <bt_conn_recv+0xa2>
	if (conn->rx->len > acl_total_len) {
   1497c:	d958      	bls.n	14a30 <bt_conn_recv+0x100>
		BT_ERR("ACL len mismatch (%u > %u)",
   1497e:	466d      	mov	r5, sp
   14980:	b088      	sub	sp, #32
   14982:	466a      	mov	r2, sp
   14984:	4930      	ldr	r1, [pc, #192]	; (14a48 <bt_conn_recv+0x118>)
   14986:	6193      	str	r3, [r2, #24]
   14988:	2304      	movs	r3, #4
   1498a:	e9c2 1004 	strd	r1, r0, [r2, #16]
   1498e:	f842 3f0c 	str.w	r3, [r2, #12]!
   14992:	482c      	ldr	r0, [pc, #176]	; (14a44 <bt_conn_recv+0x114>)
   14994:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   14998:	f019 ff7c 	bl	2e894 <z_log_msg2_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   1499c:	4620      	mov	r0, r4
   1499e:	46ad      	mov	sp, r5
   149a0:	f019 ffa1 	bl	2e8e6 <bt_conn_reset_rx_state>
		return;
   149a4:	e015      	b.n	149d2 <bt_conn_recv+0xa2>
		if (!conn->rx) {
   149a6:	6920      	ldr	r0, [r4, #16]
   149a8:	b970      	cbnz	r0, 149c8 <bt_conn_recv+0x98>
			BT_ERR("Unexpected L2CAP continuation");
   149aa:	4b28      	ldr	r3, [pc, #160]	; (14a4c <bt_conn_recv+0x11c>)
   149ac:	613b      	str	r3, [r7, #16]
   149ae:	2302      	movs	r3, #2
   149b0:	60fb      	str	r3, [r7, #12]
   149b2:	f107 020c 	add.w	r2, r7, #12
   149b6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   149ba:	4822      	ldr	r0, [pc, #136]	; (14a44 <bt_conn_recv+0x114>)
   149bc:	f019 ff6a 	bl	2e894 <z_log_msg2_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   149c0:	4620      	mov	r0, r4
   149c2:	f019 ff90 	bl	2e8e6 <bt_conn_reset_rx_state>
   149c6:	e001      	b.n	149cc <bt_conn_recv+0x9c>
		if (!buf->len) {
   149c8:	89ae      	ldrh	r6, [r5, #12]
   149ca:	b92e      	cbnz	r6, 149d8 <bt_conn_recv+0xa8>
		net_buf_unref(buf);
   149cc:	4628      	mov	r0, r5
   149ce:	f013 f969 	bl	27ca4 <net_buf_unref>
}
   149d2:	371c      	adds	r7, #28
   149d4:	46bd      	mov	sp, r7
   149d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   149d8:	3008      	adds	r0, #8
   149da:	f01c f886 	bl	30aea <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   149de:	4286      	cmp	r6, r0
   149e0:	d912      	bls.n	14a08 <bt_conn_recv+0xd8>
			BT_ERR("Not enough buffer space for L2CAP data");
   149e2:	4b1b      	ldr	r3, [pc, #108]	; (14a50 <bt_conn_recv+0x120>)
   149e4:	4817      	ldr	r0, [pc, #92]	; (14a44 <bt_conn_recv+0x114>)
   149e6:	613b      	str	r3, [r7, #16]
   149e8:	f107 020c 	add.w	r2, r7, #12
   149ec:	2302      	movs	r3, #2
   149ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   149f2:	60fb      	str	r3, [r7, #12]
   149f4:	f019 ff4e 	bl	2e894 <z_log_msg2_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   149f8:	2200      	movs	r2, #0
   149fa:	6921      	ldr	r1, [r4, #16]
   149fc:	4620      	mov	r0, r4
   149fe:	f000 fde7 	bl	155d0 <bt_l2cap_recv>
			conn->rx = NULL;
   14a02:	2300      	movs	r3, #0
   14a04:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   14a06:	e7e1      	b.n	149cc <bt_conn_recv+0x9c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14a08:	6920      	ldr	r0, [r4, #16]
   14a0a:	89aa      	ldrh	r2, [r5, #12]
   14a0c:	68a9      	ldr	r1, [r5, #8]
   14a0e:	3008      	adds	r0, #8
   14a10:	f01c f836 	bl	30a80 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   14a14:	4628      	mov	r0, r5
   14a16:	f013 f945 	bl	27ca4 <net_buf_unref>
		break;
   14a1a:	e7a5      	b.n	14968 <bt_conn_recv+0x38>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   14a1c:	4b0d      	ldr	r3, [pc, #52]	; (14a54 <bt_conn_recv+0x124>)
	switch (flags) {
   14a1e:	e9c7 3604 	strd	r3, r6, [r7, #16]
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   14a22:	2303      	movs	r3, #3
   14a24:	60fb      	str	r3, [r7, #12]
   14a26:	f107 020c 	add.w	r2, r7, #12
   14a2a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14a2e:	e7c4      	b.n	149ba <bt_conn_recv+0x8a>
	conn->rx = NULL;
   14a30:	2300      	movs	r3, #0
   14a32:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   14a34:	2201      	movs	r2, #1
   14a36:	4620      	mov	r0, r4
   14a38:	f000 fdca 	bl	155d0 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   14a3c:	e7c9      	b.n	149d2 <bt_conn_recv+0xa2>
   14a3e:	bf00      	nop
   14a40:	000358eb 	.word	0x000358eb
   14a44:	00032384 	.word	0x00032384
   14a48:	0003596b 	.word	0x0003596b
   14a4c:	00035908 	.word	0x00035908
   14a50:	00035926 	.word	0x00035926
   14a54:	0003594d 	.word	0x0003594d

00014a58 <bt_conn_send_cb>:
{
   14a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14a5c:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   14a5e:	7b43      	ldrb	r3, [r0, #13]
   14a60:	2b07      	cmp	r3, #7
{
   14a62:	b086      	sub	sp, #24
   14a64:	4605      	mov	r5, r0
   14a66:	460e      	mov	r6, r1
   14a68:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   14a6a:	d00c      	beq.n	14a86 <bt_conn_send_cb+0x2e>
		BT_ERR("not connected!");
   14a6c:	4b26      	ldr	r3, [pc, #152]	; (14b08 <bt_conn_send_cb+0xb0>)
   14a6e:	9304      	str	r3, [sp, #16]
   14a70:	4826      	ldr	r0, [pc, #152]	; (14b0c <bt_conn_send_cb+0xb4>)
   14a72:	2302      	movs	r3, #2
   14a74:	aa03      	add	r2, sp, #12
   14a76:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14a7a:	9303      	str	r3, [sp, #12]
   14a7c:	f019 ff0a 	bl	2e894 <z_log_msg2_static_create.constprop.0>
			return -ENOTCONN;
   14a80:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   14a84:	e01d      	b.n	14ac2 <bt_conn_send_cb+0x6a>
	if (cb) {
   14a86:	2a00      	cmp	r2, #0
   14a88:	d03b      	beq.n	14b02 <bt_conn_send_cb+0xaa>
	return z_impl_z_current_get();
   14a8a:	f016 faff 	bl	2b08c <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   14a8e:	4b20      	ldr	r3, [pc, #128]	; (14b10 <bt_conn_send_cb+0xb8>)
   14a90:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   14a92:	4820      	ldr	r0, [pc, #128]	; (14b14 <bt_conn_send_cb+0xbc>)
   14a94:	bf07      	ittee	eq
   14a96:	2200      	moveq	r2, #0
   14a98:	2300      	moveq	r3, #0
   14a9a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   14a9e:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   14aa2:	f015 fdbf 	bl	2a624 <z_impl_k_queue_get>
   14aa6:	4604      	mov	r4, r0
		if (!tx) {
   14aa8:	b970      	cbnz	r0, 14ac8 <bt_conn_send_cb+0x70>
			BT_ERR("Unable to allocate TX context");
   14aaa:	4b1b      	ldr	r3, [pc, #108]	; (14b18 <bt_conn_send_cb+0xc0>)
   14aac:	4817      	ldr	r0, [pc, #92]	; (14b0c <bt_conn_send_cb+0xb4>)
   14aae:	9304      	str	r3, [sp, #16]
   14ab0:	aa03      	add	r2, sp, #12
   14ab2:	2302      	movs	r3, #2
   14ab4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14ab8:	9303      	str	r3, [sp, #12]
   14aba:	f019 feeb 	bl	2e894 <z_log_msg2_static_create.constprop.0>
			return -ENOBUFS;
   14abe:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   14ac2:	b006      	add	sp, #24
   14ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   14ac8:	7b6b      	ldrb	r3, [r5, #13]
   14aca:	2b07      	cmp	r3, #7
   14acc:	d00d      	beq.n	14aea <bt_conn_send_cb+0x92>
			BT_WARN("Disconnected while allocating context");
   14ace:	4b13      	ldr	r3, [pc, #76]	; (14b1c <bt_conn_send_cb+0xc4>)
   14ad0:	9304      	str	r3, [sp, #16]
   14ad2:	480e      	ldr	r0, [pc, #56]	; (14b0c <bt_conn_send_cb+0xb4>)
   14ad4:	2302      	movs	r3, #2
   14ad6:	aa03      	add	r2, sp, #12
   14ad8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   14adc:	9303      	str	r3, [sp, #12]
   14ade:	f019 fed9 	bl	2e894 <z_log_msg2_static_create.constprop.0>
			tx_free(tx);
   14ae2:	4620      	mov	r0, r4
   14ae4:	f7ff fe46 	bl	14774 <tx_free>
   14ae8:	e7ca      	b.n	14a80 <bt_conn_send_cb+0x28>
		tx->pending_no_cb = 0U;
   14aea:	2300      	movs	r3, #0
		tx->user_data = user_data;
   14aec:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   14af0:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   14af2:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   14af4:	f105 0038 	add.w	r0, r5, #56	; 0x38
   14af8:	4631      	mov	r1, r6
   14afa:	f01b ff7c 	bl	309f6 <net_buf_put>
	return 0;
   14afe:	2000      	movs	r0, #0
   14b00:	e7df      	b.n	14ac2 <bt_conn_send_cb+0x6a>
		tx_data(buf)->tx = NULL;
   14b02:	614a      	str	r2, [r1, #20]
   14b04:	e7f6      	b.n	14af4 <bt_conn_send_cb+0x9c>
   14b06:	bf00      	nop
   14b08:	00035986 	.word	0x00035986
   14b0c:	00032384 	.word	0x00032384
   14b10:	20001c80 	.word	0x20001c80
   14b14:	20000c3c 	.word	0x20000c3c
   14b18:	00035995 	.word	0x00035995
   14b1c:	000359b3 	.word	0x000359b3

00014b20 <bt_conn_prepare_events>:
{
   14b20:	b570      	push	{r4, r5, r6, lr}
	conn_change.signaled = 0U;
   14b22:	4b17      	ldr	r3, [pc, #92]	; (14b80 <bt_conn_prepare_events+0x60>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14b24:	4c17      	ldr	r4, [pc, #92]	; (14b84 <bt_conn_prepare_events+0x64>)
   14b26:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   14b28:	2101      	movs	r1, #1
{
   14b2a:	4605      	mov	r5, r0
	conn_change.signaled = 0U;
   14b2c:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   14b2e:	f01d fa12 	bl	31f56 <k_poll_event_init>
   14b32:	f3bf 8f5b 	dmb	ish
   14b36:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   14b3a:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   14b3e:	f105 0614 	add.w	r6, r5, #20
	if (!atomic_get(&conn->ref)) {
   14b42:	b90b      	cbnz	r3, 14b48 <bt_conn_prepare_events+0x28>
		conn_cleanup(conn);
   14b44:	2001      	movs	r0, #1
}
   14b46:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   14b48:	7b63      	ldrb	r3, [r4, #13]
   14b4a:	b953      	cbnz	r3, 14b62 <bt_conn_prepare_events+0x42>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14b4c:	f06f 0140 	mvn.w	r1, #64	; 0x40
   14b50:	1d20      	adds	r0, r4, #4
   14b52:	f019 fe90 	bl	2e876 <atomic_and>
   14b56:	0643      	lsls	r3, r0, #25
   14b58:	d503      	bpl.n	14b62 <bt_conn_prepare_events+0x42>
		conn_cleanup(conn);
   14b5a:	4620      	mov	r0, r4
   14b5c:	f019 fecc 	bl	2e8f8 <conn_cleanup>
   14b60:	e7f0      	b.n	14b44 <bt_conn_prepare_events+0x24>
	if (conn->state != BT_CONN_CONNECTED) {
   14b62:	7b63      	ldrb	r3, [r4, #13]
   14b64:	2b07      	cmp	r3, #7
   14b66:	d1ed      	bne.n	14b44 <bt_conn_prepare_events+0x24>
	k_poll_event_init(&events[0],
   14b68:	4b07      	ldr	r3, [pc, #28]	; (14b88 <bt_conn_prepare_events+0x68>)
   14b6a:	4630      	mov	r0, r6
   14b6c:	2200      	movs	r2, #0
   14b6e:	2104      	movs	r1, #4
   14b70:	f01d f9f1 	bl	31f56 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   14b74:	2301      	movs	r3, #1
   14b76:	f885 3020 	strb.w	r3, [r5, #32]
			ev_count++;
   14b7a:	2002      	movs	r0, #2
	return ev_count;
   14b7c:	e7e3      	b.n	14b46 <bt_conn_prepare_events+0x26>
   14b7e:	bf00      	nop
   14b80:	2000034c 	.word	0x2000034c
   14b84:	20001388 	.word	0x20001388
   14b88:	200013c0 	.word	0x200013c0

00014b8c <bt_conn_lookup_handle>:
{
   14b8c:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   14b8e:	2101      	movs	r1, #1
   14b90:	4801      	ldr	r0, [pc, #4]	; (14b98 <bt_conn_lookup_handle+0xc>)
   14b92:	f019 bf04 	b.w	2e99e <conn_lookup_handle>
   14b96:	bf00      	nop
   14b98:	20001388 	.word	0x20001388

00014b9c <bt_conn_set_state>:
{
   14b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   14b9e:	b087      	sub	sp, #28
	if (conn->state == state) {
   14ba0:	7b46      	ldrb	r6, [r0, #13]
   14ba2:	428e      	cmp	r6, r1
{
   14ba4:	af00      	add	r7, sp, #0
   14ba6:	4604      	mov	r4, r0
   14ba8:	460d      	mov	r5, r1
	if (conn->state == state) {
   14baa:	d119      	bne.n	14be0 <bt_conn_set_state+0x44>
	switch (state) {
   14bac:	2e08      	cmp	r6, #8
   14bae:	bf96      	itet	ls
   14bb0:	4b6c      	ldrls	r3, [pc, #432]	; (14d64 <bt_conn_set_state+0x1c8>)
	if (conn->state == state) {
   14bb2:	4b6d      	ldrhi	r3, [pc, #436]	; (14d68 <bt_conn_set_state+0x1cc>)
   14bb4:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
		BT_WARN("no transition %s", state2str(state));
   14bb8:	496c      	ldr	r1, [pc, #432]	; (14d6c <bt_conn_set_state+0x1d0>)
   14bba:	486d      	ldr	r0, [pc, #436]	; (14d70 <bt_conn_set_state+0x1d4>)
   14bbc:	466c      	mov	r4, sp
   14bbe:	b088      	sub	sp, #32
   14bc0:	466a      	mov	r2, sp
   14bc2:	e9c2 1304 	strd	r1, r3, [r2, #16]
   14bc6:	2302      	movs	r3, #2
   14bc8:	7613      	strb	r3, [r2, #24]
   14bca:	4b6a      	ldr	r3, [pc, #424]	; (14d74 <bt_conn_set_state+0x1d8>)
   14bcc:	f842 3f0c 	str.w	r3, [r2, #12]!
   14bd0:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
   14bd4:	f019 fe5e 	bl	2e894 <z_log_msg2_static_create.constprop.0>
   14bd8:	46a5      	mov	sp, r4
}
   14bda:	371c      	adds	r7, #28
   14bdc:	46bd      	mov	sp, r7
   14bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn->state = state;
   14be0:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   14be2:	b926      	cbnz	r6, 14bee <bt_conn_set_state+0x52>
		if (conn->type != BT_CONN_TYPE_ISO) {
   14be4:	7883      	ldrb	r3, [r0, #2]
   14be6:	2b08      	cmp	r3, #8
   14be8:	d001      	beq.n	14bee <bt_conn_set_state+0x52>
			bt_conn_ref(conn);
   14bea:	f019 fea3 	bl	2e934 <bt_conn_ref>
	switch (conn->state) {
   14bee:	7b63      	ldrb	r3, [r4, #13]
   14bf0:	2b08      	cmp	r3, #8
   14bf2:	f200 80b4 	bhi.w	14d5e <bt_conn_set_state+0x1c2>
   14bf6:	a201      	add	r2, pc, #4	; (adr r2, 14bfc <bt_conn_set_state+0x60>)
   14bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14bfc:	00014c81 	.word	0x00014c81
   14c00:	00014c21 	.word	0x00014c21
   14c04:	00014bdb 	.word	0x00014bdb
   14c08:	00014bdb 	.word	0x00014bdb
   14c0c:	00014bdb 	.word	0x00014bdb
   14c10:	00014bdb 	.word	0x00014bdb
   14c14:	00014bdb 	.word	0x00014bdb
   14c18:	00014c4f 	.word	0x00014c4f
   14c1c:	00014bdb 	.word	0x00014bdb
	z_impl_k_sem_give(sem);
   14c20:	4d55      	ldr	r5, [pc, #340]	; (14d78 <bt_conn_set_state+0x1dc>)
		tx->pending_no_cb = 0U;
   14c22:	2600      	movs	r6, #0
	__asm__ volatile(
   14c24:	f04f 0320 	mov.w	r3, #32
   14c28:	f3ef 8211 	mrs	r2, BASEPRI
   14c2c:	f383 8812 	msr	BASEPRI_MAX, r3
   14c30:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   14c34:	69e3      	ldr	r3, [r4, #28]
   14c36:	2b00      	cmp	r3, #0
   14c38:	d070      	beq.n	14d1c <bt_conn_set_state+0x180>
			conn->pending_no_cb--;
   14c3a:	3b01      	subs	r3, #1
   14c3c:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   14c3e:	f382 8811 	msr	BASEPRI, r2
   14c42:	f3bf 8f6f 	isb	sy
   14c46:	4628      	mov	r0, r5
   14c48:	f015 fd20 	bl	2a68c <z_impl_k_sem_give>
}
   14c4c:	e7ea      	b.n	14c24 <bt_conn_set_state+0x88>
		if (conn->type == BT_CONN_TYPE_SCO) {
   14c4e:	78a3      	ldrb	r3, [r4, #2]
   14c50:	2b04      	cmp	r3, #4
   14c52:	d0c2      	beq.n	14bda <bt_conn_set_state+0x3e>
	z_impl_k_queue_init(queue);
   14c54:	f104 0038 	add.w	r0, r4, #56	; 0x38
   14c58:	f01c fd50 	bl	316fc <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   14c5c:	4847      	ldr	r0, [pc, #284]	; (14d7c <bt_conn_set_state+0x1e0>)
   14c5e:	2100      	movs	r1, #0
   14c60:	f016 fcd4 	bl	2b60c <z_impl_k_poll_signal_raise>
	list->head = NULL;
   14c64:	2300      	movs	r3, #0
	list->tail = NULL;
   14c66:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14c6a:	78e3      	ldrb	r3, [r4, #3]
   14c6c:	2b01      	cmp	r3, #1
   14c6e:	d1b4      	bne.n	14bda <bt_conn_set_state+0x3e>
			k_work_schedule(&conn->deferred_work,
   14c70:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   14c74:	2300      	movs	r3, #0
   14c76:	f104 0058 	add.w	r0, r4, #88	; 0x58
   14c7a:	f015 fedb 	bl	2aa34 <k_work_schedule>
   14c7e:	e7ac      	b.n	14bda <bt_conn_set_state+0x3e>
		if (conn->type == BT_CONN_TYPE_SCO) {
   14c80:	78a3      	ldrb	r3, [r4, #2]
   14c82:	2b04      	cmp	r3, #4
   14c84:	d103      	bne.n	14c8e <bt_conn_set_state+0xf2>
			bt_conn_unref(conn);
   14c86:	4620      	mov	r0, r4
   14c88:	f019 fe6f 	bl	2e96a <bt_conn_unref>
			break;
   14c8c:	e7a5      	b.n	14bda <bt_conn_set_state+0x3e>
		switch (old_state) {
   14c8e:	2e08      	cmp	r6, #8
   14c90:	d8a3      	bhi.n	14bda <bt_conn_set_state+0x3e>
   14c92:	a301      	add	r3, pc, #4	; (adr r3, 14c98 <bt_conn_set_state+0xfc>)
   14c94:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   14c98:	00014d03 	.word	0x00014d03
   14c9c:	00014cbd 	.word	0x00014cbd
   14ca0:	00014cf5 	.word	0x00014cf5
   14ca4:	00014c87 	.word	0x00014c87
   14ca8:	00014c87 	.word	0x00014c87
   14cac:	00014cf5 	.word	0x00014cf5
   14cb0:	00014cf5 	.word	0x00014cf5
   14cb4:	00014d03 	.word	0x00014d03
   14cb8:	00014d03 	.word	0x00014d03
			tx_notify(conn);
   14cbc:	4620      	mov	r0, r4
   14cbe:	f019 fdec 	bl	2e89a <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   14cc2:	78a3      	ldrb	r3, [r4, #2]
   14cc4:	2b01      	cmp	r3, #1
   14cc6:	d103      	bne.n	14cd0 <bt_conn_set_state+0x134>
				k_work_cancel_delayable(&conn->deferred_work);
   14cc8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   14ccc:	f01c fe25 	bl	3191a <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14cd0:	f3bf 8f5b 	dmb	ish
   14cd4:	3404      	adds	r4, #4
   14cd6:	e854 3f00 	ldrex	r3, [r4]
   14cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14cde:	e844 3200 	strex	r2, r3, [r4]
   14ce2:	2a00      	cmp	r2, #0
   14ce4:	d1f7      	bne.n	14cd6 <bt_conn_set_state+0x13a>
   14ce6:	f3bf 8f5b 	dmb	ish
   14cea:	2100      	movs	r1, #0
   14cec:	4823      	ldr	r0, [pc, #140]	; (14d7c <bt_conn_set_state+0x1e0>)
   14cee:	f016 fc8d 	bl	2b60c <z_impl_k_poll_signal_raise>
   14cf2:	e772      	b.n	14bda <bt_conn_set_state+0x3e>
			if (conn->err) {
   14cf4:	7b23      	ldrb	r3, [r4, #12]
   14cf6:	2b00      	cmp	r3, #0
   14cf8:	d0c5      	beq.n	14c86 <bt_conn_set_state+0xea>
				notify_connected(conn);
   14cfa:	4620      	mov	r0, r4
   14cfc:	f7ff fd1c 	bl	14738 <notify_connected>
   14d00:	e7c1      	b.n	14c86 <bt_conn_set_state+0xea>
			BT_WARN("Invalid (%u) old state", state);
   14d02:	4b1f      	ldr	r3, [pc, #124]	; (14d80 <bt_conn_set_state+0x1e4>)
		BT_WARN("no valid (%u) state was set", state);
   14d04:	481a      	ldr	r0, [pc, #104]	; (14d70 <bt_conn_set_state+0x1d4>)
   14d06:	e9c7 3504 	strd	r3, r5, [r7, #16]
   14d0a:	f107 020c 	add.w	r2, r7, #12
   14d0e:	2303      	movs	r3, #3
   14d10:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   14d14:	60fb      	str	r3, [r7, #12]
   14d16:	f019 fdbd 	bl	2e894 <z_log_msg2_static_create.constprop.0>
   14d1a:	e75e      	b.n	14bda <bt_conn_set_state+0x3e>
	return list->head;
   14d1c:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   14d1e:	b128      	cbz	r0, 14d2c <bt_conn_set_state+0x190>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14d20:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   14d22:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   14d24:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14d26:	4288      	cmp	r0, r1
	list->tail = node;
   14d28:	bf08      	it	eq
   14d2a:	61a3      	streq	r3, [r4, #24]
   14d2c:	f382 8811 	msr	BASEPRI, r2
   14d30:	f3bf 8f6f 	isb	sy
		if (!node) {
   14d34:	2800      	cmp	r0, #0
   14d36:	f43f af50 	beq.w	14bda <bt_conn_set_state+0x3e>
	__asm__ volatile(
   14d3a:	f04f 0220 	mov.w	r2, #32
   14d3e:	f3ef 8311 	mrs	r3, BASEPRI
   14d42:	f382 8812 	msr	BASEPRI_MAX, r2
   14d46:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   14d4a:	68c2      	ldr	r2, [r0, #12]
   14d4c:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   14d4e:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   14d50:	f383 8811 	msr	BASEPRI, r3
   14d54:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   14d58:	f7ff fd0c 	bl	14774 <tx_free>
   14d5c:	e773      	b.n	14c46 <bt_conn_set_state+0xaa>
		BT_WARN("no valid (%u) state was set", state);
   14d5e:	4b09      	ldr	r3, [pc, #36]	; (14d84 <bt_conn_set_state+0x1e8>)
   14d60:	e7d0      	b.n	14d04 <bt_conn_set_state+0x168>
   14d62:	bf00      	nop
   14d64:	00032cc0 	.word	0x00032cc0
   14d68:	000359d9 	.word	0x000359d9
   14d6c:	000359e3 	.word	0x000359e3
   14d70:	00032384 	.word	0x00032384
   14d74:	01000003 	.word	0x01000003
   14d78:	20000100 	.word	0x20000100
   14d7c:	2000034c 	.word	0x2000034c
   14d80:	000359f4 	.word	0x000359f4
   14d84:	00035a0b 	.word	0x00035a0b

00014d88 <bt_conn_index>:
		index = conn - acl_conns;
   14d88:	4b03      	ldr	r3, [pc, #12]	; (14d98 <bt_conn_index+0x10>)
   14d8a:	1ac0      	subs	r0, r0, r3
   14d8c:	4b03      	ldr	r3, [pc, #12]	; (14d9c <bt_conn_index+0x14>)
   14d8e:	1180      	asrs	r0, r0, #6
   14d90:	4358      	muls	r0, r3
}
   14d92:	b2c0      	uxtb	r0, r0
   14d94:	4770      	bx	lr
   14d96:	bf00      	nop
   14d98:	20001388 	.word	0x20001388
   14d9c:	aaaaaaab 	.word	0xaaaaaaab

00014da0 <bt_conn_create_pdu_timeout>:
{
   14da0:	b538      	push	{r3, r4, r5, lr}
   14da2:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   14da4:	4908      	ldr	r1, [pc, #32]	; (14dc8 <bt_conn_create_pdu_timeout+0x28>)
   14da6:	2800      	cmp	r0, #0
   14da8:	bf08      	it	eq
   14daa:	4608      	moveq	r0, r1
   14dac:	f01b fdb8 	bl	30920 <net_buf_alloc_fixed>
	if (!buf) {
   14db0:	4604      	mov	r4, r0
   14db2:	b918      	cbnz	r0, 14dbc <bt_conn_create_pdu_timeout+0x1c>
}
   14db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   14db8:	f7ff bce6 	b.w	14788 <bt_conn_create_pdu_timeout.part.0>
	net_buf_simple_reserve(&buf->b, reserve);
   14dbc:	1d29      	adds	r1, r5, #4
   14dbe:	3008      	adds	r0, #8
   14dc0:	f01b fdcd 	bl	3095e <net_buf_simple_reserve>
   14dc4:	4620      	mov	r0, r4
   14dc6:	bd38      	pop	{r3, r4, r5, pc}
   14dc8:	20000c6c 	.word	0x20000c6c

00014dcc <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   14dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14dce:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14dd0:	f3bf 8f5b 	dmb	ish
   14dd4:	6863      	ldr	r3, [r4, #4]
   14dd6:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   14dda:	05db      	lsls	r3, r3, #23
   14ddc:	f100 0004 	add.w	r0, r0, #4
   14de0:	d511      	bpl.n	14e06 <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   14de2:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   14de6:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
   14dea:	429a      	cmp	r2, r3
   14dec:	d80b      	bhi.n	14e06 <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   14dee:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
   14df2:	429a      	cmp	r2, r3
   14df4:	d307      	bcc.n	14e06 <notify_le_param_updated+0x3a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   14df6:	e9d4 2329 	ldrd	r2, r3, [r4, #164]	; 0xa4
   14dfa:	429a      	cmp	r2, r3
   14dfc:	d103      	bne.n	14e06 <notify_le_param_updated+0x3a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14dfe:	f46f 7180 	mvn.w	r1, #256	; 0x100
   14e02:	f019 fd38 	bl	2e876 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   14e06:	4b10      	ldr	r3, [pc, #64]	; (14e48 <notify_le_param_updated+0x7c>)
   14e08:	681d      	ldr	r5, [r3, #0]
   14e0a:	b925      	cbnz	r5, 14e16 <notify_le_param_updated+0x4a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14e0c:	4d0f      	ldr	r5, [pc, #60]	; (14e4c <notify_le_param_updated+0x80>)
   14e0e:	4f10      	ldr	r7, [pc, #64]	; (14e50 <notify_le_param_updated+0x84>)
   14e10:	42bd      	cmp	r5, r7
   14e12:	d30c      	bcc.n	14e2e <notify_le_param_updated+0x62>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   14e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   14e16:	68ee      	ldr	r6, [r5, #12]
   14e18:	b13e      	cbz	r6, 14e2a <notify_le_param_updated+0x5e>
			cb->le_param_updated(conn, conn->le.interval,
   14e1a:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   14e1e:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   14e22:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   14e26:	4620      	mov	r0, r4
   14e28:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   14e2a:	69ad      	ldr	r5, [r5, #24]
   14e2c:	e7ed      	b.n	14e0a <notify_le_param_updated+0x3e>
		if (cb->le_param_updated) {
   14e2e:	68ee      	ldr	r6, [r5, #12]
   14e30:	b13e      	cbz	r6, 14e42 <notify_le_param_updated+0x76>
			cb->le_param_updated(conn, conn->le.interval,
   14e32:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   14e36:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   14e3a:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   14e3e:	4620      	mov	r0, r4
   14e40:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14e42:	351c      	adds	r5, #28
   14e44:	e7e4      	b.n	14e10 <notify_le_param_updated+0x44>
   14e46:	bf00      	nop
   14e48:	20001ea4 	.word	0x20001ea4
   14e4c:	00032290 	.word	0x00032290
   14e50:	000322ac 	.word	0x000322ac

00014e54 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   14e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14e58:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   14e5a:	4608      	mov	r0, r1
{
   14e5c:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   14e5e:	f019 faef 	bl	2e440 <bt_le_conn_params_valid>
   14e62:	4605      	mov	r5, r0
   14e64:	b918      	cbnz	r0, 14e6e <le_param_req+0x1a>
		return false;
   14e66:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   14e68:	4628      	mov	r0, r5
   14e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   14e6e:	4b13      	ldr	r3, [pc, #76]	; (14ebc <le_param_req+0x68>)
   14e70:	681e      	ldr	r6, [r3, #0]
   14e72:	b946      	cbnz	r6, 14e86 <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14e74:	4e12      	ldr	r6, [pc, #72]	; (14ec0 <le_param_req+0x6c>)
   14e76:	f8df 804c 	ldr.w	r8, [pc, #76]	; 14ec4 <le_param_req+0x70>
   14e7a:	4546      	cmp	r6, r8
   14e7c:	d2f4      	bcs.n	14e68 <le_param_req+0x14>
		if (!cb->le_param_req) {
   14e7e:	68b3      	ldr	r3, [r6, #8]
   14e80:	b983      	cbnz	r3, 14ea4 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14e82:	361c      	adds	r6, #28
   14e84:	e7f9      	b.n	14e7a <le_param_req+0x26>
		if (!cb->le_param_req) {
   14e86:	68b3      	ldr	r3, [r6, #8]
   14e88:	b90b      	cbnz	r3, 14e8e <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   14e8a:	69b6      	ldr	r6, [r6, #24]
   14e8c:	e7f1      	b.n	14e72 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   14e8e:	4621      	mov	r1, r4
   14e90:	4638      	mov	r0, r7
   14e92:	4798      	blx	r3
   14e94:	2800      	cmp	r0, #0
   14e96:	d0e6      	beq.n	14e66 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   14e98:	4620      	mov	r0, r4
   14e9a:	f019 fad1 	bl	2e440 <bt_le_conn_params_valid>
   14e9e:	2800      	cmp	r0, #0
   14ea0:	d1f3      	bne.n	14e8a <le_param_req+0x36>
   14ea2:	e7e0      	b.n	14e66 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   14ea4:	4621      	mov	r1, r4
   14ea6:	4638      	mov	r0, r7
   14ea8:	4798      	blx	r3
   14eaa:	2800      	cmp	r0, #0
   14eac:	d0db      	beq.n	14e66 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   14eae:	4620      	mov	r0, r4
   14eb0:	f019 fac6 	bl	2e440 <bt_le_conn_params_valid>
   14eb4:	2800      	cmp	r0, #0
   14eb6:	d1e4      	bne.n	14e82 <le_param_req+0x2e>
   14eb8:	e7d5      	b.n	14e66 <le_param_req+0x12>
   14eba:	bf00      	nop
   14ebc:	20001ea4 	.word	0x20001ea4
   14ec0:	00032290 	.word	0x00032290
   14ec4:	000322ac 	.word	0x000322ac

00014ec8 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   14ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   14ecc:	78c3      	ldrb	r3, [r0, #3]
{
   14ece:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   14ed0:	b973      	cbnz	r3, 14ef0 <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
   14ed2:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   14ed6:	4b10      	ldr	r3, [pc, #64]	; (14f18 <bt_conn_identity_resolved+0x50>)
   14ed8:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   14eda:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   14ede:	b955      	cbnz	r5, 14ef6 <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14ee0:	4d0e      	ldr	r5, [pc, #56]	; (14f1c <bt_conn_identity_resolved+0x54>)
   14ee2:	4f0f      	ldr	r7, [pc, #60]	; (14f20 <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   14ee4:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14ee8:	42bd      	cmp	r5, r7
   14eea:	d30c      	bcc.n	14f06 <bt_conn_identity_resolved+0x3e>
		}
	}
}
   14eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   14ef0:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   14ef4:	e7ef      	b.n	14ed6 <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   14ef6:	692b      	ldr	r3, [r5, #16]
   14ef8:	b11b      	cbz	r3, 14f02 <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   14efa:	463a      	mov	r2, r7
   14efc:	4631      	mov	r1, r6
   14efe:	4620      	mov	r0, r4
   14f00:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   14f02:	69ad      	ldr	r5, [r5, #24]
   14f04:	e7eb      	b.n	14ede <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   14f06:	692b      	ldr	r3, [r5, #16]
   14f08:	b11b      	cbz	r3, 14f12 <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   14f0a:	4642      	mov	r2, r8
   14f0c:	4631      	mov	r1, r6
   14f0e:	4620      	mov	r0, r4
   14f10:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14f12:	351c      	adds	r5, #28
   14f14:	e7e8      	b.n	14ee8 <bt_conn_identity_resolved+0x20>
   14f16:	bf00      	nop
   14f18:	20001ea4 	.word	0x20001ea4
   14f1c:	00032290 	.word	0x00032290
   14f20:	000322ac 	.word	0x000322ac

00014f24 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   14f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   14f26:	7a43      	ldrb	r3, [r0, #9]
   14f28:	7283      	strb	r3, [r0, #10]
{
   14f2a:	4604      	mov	r4, r0
   14f2c:	4615      	mov	r5, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   14f2e:	f019 fe67 	bl	2ec00 <bt_l2cap_security_changed>

	for (cb = callback_list; cb; cb = cb->_next) {
   14f32:	4b13      	ldr	r3, [pc, #76]	; (14f80 <bt_conn_security_changed+0x5c>)
   14f34:	681e      	ldr	r6, [r3, #0]
   14f36:	b98e      	cbnz	r6, 14f5c <bt_conn_security_changed+0x38>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14f38:	4e12      	ldr	r6, [pc, #72]	; (14f84 <bt_conn_security_changed+0x60>)
   14f3a:	4f13      	ldr	r7, [pc, #76]	; (14f88 <bt_conn_security_changed+0x64>)
   14f3c:	42be      	cmp	r6, r7
   14f3e:	d315      	bcc.n	14f6c <bt_conn_security_changed+0x48>
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

#if IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
	if (!err && conn->sec_level >= BT_SECURITY_L2) {
   14f40:	b9e5      	cbnz	r5, 14f7c <bt_conn_security_changed+0x58>
   14f42:	7a63      	ldrb	r3, [r4, #9]
   14f44:	2b01      	cmp	r3, #1
   14f46:	d919      	bls.n	14f7c <bt_conn_security_changed+0x58>
		if (conn->type == BT_CONN_TYPE_LE) {
   14f48:	78a3      	ldrb	r3, [r4, #2]
   14f4a:	2b01      	cmp	r3, #1
   14f4c:	d116      	bne.n	14f7c <bt_conn_security_changed+0x58>
			bt_keys_update_usage(conn->id, bt_conn_get_dst(conn));
   14f4e:	7a20      	ldrb	r0, [r4, #8]
   14f50:	f104 0188 	add.w	r1, r4, #136	; 0x88
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   14f54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			bt_keys_update_usage(conn->id, bt_conn_get_dst(conn));
   14f58:	f005 b8ba 	b.w	1a0d0 <bt_keys_update_usage>
		if (cb->security_changed) {
   14f5c:	6973      	ldr	r3, [r6, #20]
   14f5e:	b11b      	cbz	r3, 14f68 <bt_conn_security_changed+0x44>
			cb->security_changed(conn, conn->sec_level, err);
   14f60:	7a61      	ldrb	r1, [r4, #9]
   14f62:	462a      	mov	r2, r5
   14f64:	4620      	mov	r0, r4
   14f66:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   14f68:	69b6      	ldr	r6, [r6, #24]
   14f6a:	e7e4      	b.n	14f36 <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   14f6c:	6973      	ldr	r3, [r6, #20]
   14f6e:	b11b      	cbz	r3, 14f78 <bt_conn_security_changed+0x54>
			cb->security_changed(conn, conn->sec_level, err);
   14f70:	7a61      	ldrb	r1, [r4, #9]
   14f72:	462a      	mov	r2, r5
   14f74:	4620      	mov	r0, r4
   14f76:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14f78:	361c      	adds	r6, #28
   14f7a:	e7df      	b.n	14f3c <bt_conn_security_changed+0x18>
}
   14f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14f7e:	bf00      	nop
   14f80:	20001ea4 	.word	0x20001ea4
   14f84:	00032290 	.word	0x00032290
   14f88:	000322ac 	.word	0x000322ac

00014f8c <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   14f8c:	b570      	push	{r4, r5, r6, lr}
   14f8e:	4606      	mov	r6, r0
   14f90:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   14f92:	480a      	ldr	r0, [pc, #40]	; (14fbc <bt_conn_add_le+0x30>)
   14f94:	2101      	movs	r1, #1
   14f96:	f7ff fc97 	bl	148c8 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   14f9a:	4604      	mov	r4, r0
   14f9c:	b160      	cbz	r0, 14fb8 <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
   14f9e:	7206      	strb	r6, [r0, #8]
   14fa0:	2207      	movs	r2, #7
   14fa2:	4629      	mov	r1, r5
   14fa4:	3088      	adds	r0, #136	; 0x88
   14fa6:	f019 f840 	bl	2e02a <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   14faa:	2301      	movs	r3, #1
   14fac:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   14fae:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   14fb0:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   14fb2:	4b03      	ldr	r3, [pc, #12]	; (14fc0 <bt_conn_add_le+0x34>)
   14fb4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   14fb8:	4620      	mov	r0, r4
   14fba:	bd70      	pop	{r4, r5, r6, pc}
   14fbc:	20001388 	.word	0x20001388
   14fc0:	00280018 	.word	0x00280018

00014fc4 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   14fc4:	b570      	push	{r4, r5, r6, lr}
   14fc6:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   14fc8:	480c      	ldr	r0, [pc, #48]	; (14ffc <bt_conn_lookup_addr_le+0x38>)
{
   14fca:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   14fcc:	f019 fcb2 	bl	2e934 <bt_conn_ref>

		if (!conn) {
   14fd0:	4604      	mov	r4, r0
   14fd2:	b128      	cbz	r0, 14fe0 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   14fd4:	7883      	ldrb	r3, [r0, #2]
   14fd6:	2b01      	cmp	r3, #1
   14fd8:	d004      	beq.n	14fe4 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   14fda:	f019 fcc6 	bl	2e96a <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   14fde:	2400      	movs	r4, #0
}
   14fe0:	4620      	mov	r0, r4
   14fe2:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   14fe4:	4629      	mov	r1, r5
   14fe6:	4632      	mov	r2, r6
   14fe8:	f019 fd5a 	bl	2eaa0 <bt_conn_is_peer_addr_le>
   14fec:	4605      	mov	r5, r0
   14fee:	2800      	cmp	r0, #0
   14ff0:	d1f6      	bne.n	14fe0 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   14ff2:	4620      	mov	r0, r4
   14ff4:	f019 fcb9 	bl	2e96a <bt_conn_unref>
	return NULL;
   14ff8:	462c      	mov	r4, r5
			continue;
   14ffa:	e7f1      	b.n	14fe0 <bt_conn_lookup_addr_le+0x1c>
   14ffc:	20001388 	.word	0x20001388

00015000 <bt_conn_exists_le>:
{
   15000:	b5b0      	push	{r4, r5, r7, lr}
   15002:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   15004:	f7ff ffde 	bl	14fc4 <bt_conn_lookup_addr_le>
	if (conn) {
   15008:	4604      	mov	r4, r0
   1500a:	b1d8      	cbz	r0, 15044 <bt_conn_exists_le+0x44>
		BT_WARN("Found valid connection in %s state",
   1500c:	7b43      	ldrb	r3, [r0, #13]
   1500e:	490e      	ldr	r1, [pc, #56]	; (15048 <bt_conn_exists_le+0x48>)
   15010:	480e      	ldr	r0, [pc, #56]	; (1504c <bt_conn_exists_le+0x4c>)
   15012:	2b08      	cmp	r3, #8
   15014:	bf96      	itet	ls
   15016:	4a0e      	ldrls	r2, [pc, #56]	; (15050 <bt_conn_exists_le+0x50>)
   15018:	4b0e      	ldrhi	r3, [pc, #56]	; (15054 <bt_conn_exists_le+0x54>)
   1501a:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1501e:	466d      	mov	r5, sp
   15020:	b088      	sub	sp, #32
   15022:	466a      	mov	r2, sp
   15024:	e9c2 1304 	strd	r1, r3, [r2, #16]
   15028:	2302      	movs	r3, #2
   1502a:	7613      	strb	r3, [r2, #24]
   1502c:	4b0a      	ldr	r3, [pc, #40]	; (15058 <bt_conn_exists_le+0x58>)
   1502e:	f842 3f0c 	str.w	r3, [r2, #12]!
   15032:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
   15036:	f019 fc2d 	bl	2e894 <z_log_msg2_static_create.constprop.0>
		bt_conn_unref(conn);
   1503a:	4620      	mov	r0, r4
   1503c:	46ad      	mov	sp, r5
   1503e:	f019 fc94 	bl	2e96a <bt_conn_unref>
		return true;
   15042:	2001      	movs	r0, #1
}
   15044:	46bd      	mov	sp, r7
   15046:	bdb0      	pop	{r4, r5, r7, pc}
   15048:	00035a27 	.word	0x00035a27
   1504c:	00032384 	.word	0x00032384
   15050:	00032cc0 	.word	0x00032cc0
   15054:	000359d9 	.word	0x000359d9
   15058:	01000003 	.word	0x01000003

0001505c <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   1505c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1505e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15060:	480e      	ldr	r0, [pc, #56]	; (1509c <bt_conn_lookup_state_le+0x40>)
{
   15062:	460e      	mov	r6, r1
   15064:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15066:	f019 fc65 	bl	2e934 <bt_conn_ref>

		if (!conn) {
   1506a:	4604      	mov	r4, r0
   1506c:	b1a0      	cbz	r0, 15098 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1506e:	7883      	ldrb	r3, [r0, #2]
   15070:	2b01      	cmp	r3, #1
   15072:	d003      	beq.n	1507c <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   15074:	f019 fc79 	bl	2e96a <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   15078:	2400      	movs	r4, #0
			continue;
   1507a:	e00d      	b.n	15098 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   1507c:	b136      	cbz	r6, 1508c <bt_conn_lookup_state_le+0x30>
   1507e:	4632      	mov	r2, r6
   15080:	4629      	mov	r1, r5
   15082:	f019 fd0d 	bl	2eaa0 <bt_conn_is_peer_addr_le>
   15086:	b908      	cbnz	r0, 1508c <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   15088:	4620      	mov	r0, r4
   1508a:	e7f3      	b.n	15074 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   1508c:	7b63      	ldrb	r3, [r4, #13]
   1508e:	42bb      	cmp	r3, r7
   15090:	d1fa      	bne.n	15088 <bt_conn_lookup_state_le+0x2c>
   15092:	7a23      	ldrb	r3, [r4, #8]
   15094:	42ab      	cmp	r3, r5
   15096:	d1f7      	bne.n	15088 <bt_conn_lookup_state_le+0x2c>
}
   15098:	4620      	mov	r0, r4
   1509a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1509c:	20001388 	.word	0x20001388

000150a0 <send_conn_le_param_update>:
{
   150a0:	b538      	push	{r3, r4, r5, lr}
   150a2:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   150a4:	4608      	mov	r0, r1
{
   150a6:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   150a8:	f019 f9ca 	bl	2e440 <bt_le_conn_params_valid>
   150ac:	b348      	cbz	r0, 15102 <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   150ae:	4b16      	ldr	r3, [pc, #88]	; (15108 <send_conn_le_param_update+0x68>)
   150b0:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   150b4:	0799      	lsls	r1, r3, #30
   150b6:	d407      	bmi.n	150c8 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   150b8:	78e3      	ldrb	r3, [r4, #3]
   150ba:	b183      	cbz	r3, 150de <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   150bc:	4629      	mov	r1, r5
   150be:	4620      	mov	r0, r4
}
   150c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   150c4:	f000 baba 	b.w	1563c <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   150c8:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   150cc:	079a      	lsls	r2, r3, #30
   150ce:	d5f3      	bpl.n	150b8 <send_conn_le_param_update+0x18>
   150d0:	f3bf 8f5b 	dmb	ish
   150d4:	6863      	ldr	r3, [r4, #4]
   150d6:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   150da:	059b      	lsls	r3, r3, #22
   150dc:	d4ec      	bmi.n	150b8 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   150de:	4629      	mov	r1, r5
   150e0:	4620      	mov	r0, r4
   150e2:	f019 fcff 	bl	2eae4 <bt_conn_le_conn_update>
		if (rc == 0) {
   150e6:	b958      	cbnz	r0, 15100 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   150e8:	882b      	ldrh	r3, [r5, #0]
   150ea:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   150ee:	886b      	ldrh	r3, [r5, #2]
   150f0:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   150f4:	88ab      	ldrh	r3, [r5, #4]
   150f6:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   150fa:	88eb      	ldrh	r3, [r5, #6]
   150fc:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   15100:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   15102:	f06f 0015 	mvn.w	r0, #21
   15106:	e7fb      	b.n	15100 <send_conn_le_param_update+0x60>
   15108:	20000000 	.word	0x20000000

0001510c <deferred_work>:
{
   1510c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   1510e:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   15112:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   15114:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   15118:	b9fb      	cbnz	r3, 1515a <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
   1511a:	4628      	mov	r0, r5
   1511c:	f019 fd5f 	bl	2ebde <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   15120:	4b28      	ldr	r3, [pc, #160]	; (151c4 <deferred_work+0xb8>)
   15122:	681e      	ldr	r6, [r3, #0]
   15124:	b94e      	cbnz	r6, 1513a <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15126:	4e28      	ldr	r6, [pc, #160]	; (151c8 <deferred_work+0xbc>)
   15128:	4f28      	ldr	r7, [pc, #160]	; (151cc <deferred_work+0xc0>)
   1512a:	42be      	cmp	r6, r7
   1512c:	d30d      	bcc.n	1514a <deferred_work+0x3e>
		bt_conn_unref(conn);
   1512e:	4628      	mov	r0, r5
}
   15130:	b003      	add	sp, #12
   15132:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   15136:	f019 bc18 	b.w	2e96a <bt_conn_unref>
		if (cb->disconnected) {
   1513a:	6873      	ldr	r3, [r6, #4]
   1513c:	b11b      	cbz	r3, 15146 <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
   1513e:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   15142:	4628      	mov	r0, r5
   15144:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   15146:	69b6      	ldr	r6, [r6, #24]
   15148:	e7ec      	b.n	15124 <deferred_work+0x18>
		if (cb->disconnected) {
   1514a:	6873      	ldr	r3, [r6, #4]
   1514c:	b11b      	cbz	r3, 15156 <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
   1514e:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   15152:	4628      	mov	r0, r5
   15154:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15156:	361c      	adds	r6, #28
   15158:	e7e7      	b.n	1512a <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
   1515a:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   1515e:	2b01      	cmp	r3, #1
   15160:	d128      	bne.n	151b4 <deferred_work+0xa8>
	if (atomic_test_and_clear_bit(conn->flags,
   15162:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15166:	f46f 7180 	mvn.w	r1, #256	; 0x100
   1516a:	4630      	mov	r0, r6
   1516c:	f019 fb83 	bl	2e876 <atomic_and>
   15170:	05c3      	lsls	r3, r0, #23
   15172:	d521      	bpl.n	151b8 <deferred_work+0xac>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   15174:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   15178:	f8ad 3000 	strh.w	r3, [sp]
   1517c:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   15180:	f8ad 3002 	strh.w	r3, [sp, #2]
   15184:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   15188:	f8ad 3004 	strh.w	r3, [sp, #4]
   1518c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   15190:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   15194:	4669      	mov	r1, sp
   15196:	4628      	mov	r0, r5
   15198:	f7ff ff82 	bl	150a0 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1519c:	f3bf 8f5b 	dmb	ish
   151a0:	e856 3f00 	ldrex	r3, [r6]
   151a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   151a8:	e846 3200 	strex	r2, r3, [r6]
   151ac:	2a00      	cmp	r2, #0
   151ae:	d1f7      	bne.n	151a0 <deferred_work+0x94>
   151b0:	f3bf 8f5b 	dmb	ish
}
   151b4:	b003      	add	sp, #12
   151b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
   151b8:	4a05      	ldr	r2, [pc, #20]	; (151d0 <deferred_work+0xc4>)
   151ba:	6810      	ldr	r0, [r2, #0]
   151bc:	6851      	ldr	r1, [r2, #4]
   151be:	466b      	mov	r3, sp
   151c0:	c303      	stmia	r3!, {r0, r1}
   151c2:	e7e7      	b.n	15194 <deferred_work+0x88>
   151c4:	20001ea4 	.word	0x20001ea4
   151c8:	00032290 	.word	0x00032290
   151cc:	000322ac 	.word	0x000322ac
   151d0:	000325e2 	.word	0x000325e2

000151d4 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   151d4:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   151d6:	4801      	ldr	r0, [pc, #4]	; (151dc <bt_conn_create_frag_timeout+0x8>)
   151d8:	f7ff bde2 	b.w	14da0 <bt_conn_create_pdu_timeout>
   151dc:	20000cc4 	.word	0x20000cc4

000151e0 <create_frag>:
{
   151e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   151e4:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   151e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   151ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   151ee:	2000      	movs	r0, #0
{
   151f0:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   151f2:	f7ff ffef 	bl	151d4 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   151f6:	7b73      	ldrb	r3, [r6, #13]
   151f8:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   151fa:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   151fc:	f04f 0600 	mov.w	r6, #0
   15200:	d005      	beq.n	1520e <create_frag+0x2e>
		net_buf_unref(frag);
   15202:	f012 fd4f 	bl	27ca4 <net_buf_unref>
		return NULL;
   15206:	4635      	mov	r5, r6
}
   15208:	4628      	mov	r0, r5
   1520a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   1520e:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   15210:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   15214:	4e0c      	ldr	r6, [pc, #48]	; (15248 <create_frag+0x68>)
   15216:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   15218:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   1521c:	f01b fc65 	bl	30aea <net_buf_simple_tailroom>
   15220:	4580      	cmp	r8, r0
   15222:	d20c      	bcs.n	1523e <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   15224:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15228:	f854 1f08 	ldr.w	r1, [r4, #8]!
   1522c:	4632      	mov	r2, r6
   1522e:	4638      	mov	r0, r7
   15230:	f01b fc26 	bl	30a80 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   15234:	4631      	mov	r1, r6
   15236:	4620      	mov	r0, r4
   15238:	f01b fc3b 	bl	30ab2 <net_buf_simple_pull>
   1523c:	e7e4      	b.n	15208 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   1523e:	4638      	mov	r0, r7
   15240:	f01b fc53 	bl	30aea <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   15244:	b286      	uxth	r6, r0
   15246:	e7ef      	b.n	15228 <create_frag+0x48>
   15248:	20000000 	.word	0x20000000

0001524c <bt_conn_process_tx>:
{
   1524c:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1524e:	7b43      	ldrb	r3, [r0, #13]
{
   15250:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   15252:	b95b      	cbnz	r3, 1526c <bt_conn_process_tx+0x20>
   15254:	f06f 0140 	mvn.w	r1, #64	; 0x40
   15258:	3004      	adds	r0, #4
   1525a:	f019 fb0c 	bl	2e876 <atomic_and>
   1525e:	0643      	lsls	r3, r0, #25
   15260:	d504      	bpl.n	1526c <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   15262:	4620      	mov	r0, r4
}
   15264:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   15268:	f019 bb46 	b.w	2e8f8 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   1526c:	2200      	movs	r2, #0
   1526e:	2300      	movs	r3, #0
   15270:	f104 0038 	add.w	r0, r4, #56	; 0x38
   15274:	f01b fb59 	bl	3092a <net_buf_get>
	BT_ASSERT(buf);
   15278:	4605      	mov	r5, r0
   1527a:	b960      	cbnz	r0, 15296 <bt_conn_process_tx+0x4a>
   1527c:	4a1f      	ldr	r2, [pc, #124]	; (152fc <bt_conn_process_tx+0xb0>)
   1527e:	4920      	ldr	r1, [pc, #128]	; (15300 <bt_conn_process_tx+0xb4>)
   15280:	4820      	ldr	r0, [pc, #128]	; (15304 <bt_conn_process_tx+0xb8>)
   15282:	f44f 733a 	mov.w	r3, #744	; 0x2e8
   15286:	f016 fe9e 	bl	2bfc6 <assert_print>
   1528a:	4040      	eors	r0, r0
   1528c:	f380 8811 	msr	BASEPRI, r0
   15290:	f04f 0003 	mov.w	r0, #3
   15294:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   15296:	4e1c      	ldr	r6, [pc, #112]	; (15308 <bt_conn_process_tx+0xbc>)
	if (buf->len <= conn_mtu(conn)) {
   15298:	89aa      	ldrh	r2, [r5, #12]
   1529a:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   1529e:	429a      	cmp	r2, r3
   152a0:	d807      	bhi.n	152b2 <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   152a2:	2300      	movs	r3, #0
   152a4:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   152a6:	4629      	mov	r1, r5
   152a8:	4620      	mov	r0, r4
   152aa:	f7ff fa81 	bl	147b0 <send_frag>
	if (!send_buf(conn, buf)) {
   152ae:	b130      	cbz	r0, 152be <bt_conn_process_tx+0x72>
}
   152b0:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
   152b2:	4629      	mov	r1, r5
   152b4:	4620      	mov	r0, r4
   152b6:	f7ff ff93 	bl	151e0 <create_frag>
	if (!frag) {
   152ba:	4601      	mov	r1, r0
   152bc:	b920      	cbnz	r0, 152c8 <bt_conn_process_tx+0x7c>
		net_buf_unref(buf);
   152be:	4628      	mov	r0, r5
}
   152c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   152c4:	f012 bcee 	b.w	27ca4 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   152c8:	2301      	movs	r3, #1
   152ca:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   152cc:	4620      	mov	r0, r4
   152ce:	f7ff fa6f 	bl	147b0 <send_frag>
   152d2:	2800      	cmp	r0, #0
   152d4:	d0f3      	beq.n	152be <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
   152d6:	89aa      	ldrh	r2, [r5, #12]
   152d8:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   152dc:	429a      	cmp	r2, r3
   152de:	d802      	bhi.n	152e6 <bt_conn_process_tx+0x9a>
	return send_frag(conn, buf, FRAG_END, false);
   152e0:	2300      	movs	r3, #0
   152e2:	2203      	movs	r2, #3
   152e4:	e7df      	b.n	152a6 <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
   152e6:	4629      	mov	r1, r5
   152e8:	4620      	mov	r0, r4
   152ea:	f7ff ff79 	bl	151e0 <create_frag>
		if (!frag) {
   152ee:	4601      	mov	r1, r0
   152f0:	2800      	cmp	r0, #0
   152f2:	d0e4      	beq.n	152be <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   152f4:	2301      	movs	r3, #1
   152f6:	461a      	mov	r2, r3
   152f8:	e7e8      	b.n	152cc <bt_conn_process_tx+0x80>
   152fa:	bf00      	nop
   152fc:	00035a4a 	.word	0x00035a4a
   15300:	00034d90 	.word	0x00034d90
   15304:	00035073 	.word	0x00035073
   15308:	20000000 	.word	0x20000000

0001530c <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   1530c:	4b0c      	ldr	r3, [pc, #48]	; (15340 <bt_conn_auth_cb_register+0x34>)
   1530e:	b908      	cbnz	r0, 15314 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
   15310:	6018      	str	r0, [r3, #0]
		return 0;
   15312:	4770      	bx	lr
	}

	if (bt_auth) {
   15314:	681a      	ldr	r2, [r3, #0]
   15316:	b962      	cbnz	r2, 15332 <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   15318:	6902      	ldr	r2, [r0, #16]
   1531a:	b93a      	cbnz	r2, 1532c <bt_conn_auth_cb_register+0x20>
   1531c:	6802      	ldr	r2, [r0, #0]
   1531e:	b95a      	cbnz	r2, 15338 <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   15320:	6842      	ldr	r2, [r0, #4]
   15322:	b94a      	cbnz	r2, 15338 <bt_conn_auth_cb_register+0x2c>
   15324:	6882      	ldr	r2, [r0, #8]
   15326:	b93a      	cbnz	r2, 15338 <bt_conn_auth_cb_register+0x2c>
   15328:	6942      	ldr	r2, [r0, #20]
   1532a:	b92a      	cbnz	r2, 15338 <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   1532c:	6018      	str	r0, [r3, #0]
	return 0;
   1532e:	2000      	movs	r0, #0
   15330:	4770      	bx	lr
		return -EALREADY;
   15332:	f06f 0077 	mvn.w	r0, #119	; 0x77
   15336:	4770      	bx	lr
		return -EINVAL;
   15338:	f06f 0015 	mvn.w	r0, #21
}
   1533c:	4770      	bx	lr
   1533e:	bf00      	nop
   15340:	20001e98 	.word	0x20001e98

00015344 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   15344:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   15346:	490b      	ldr	r1, [pc, #44]	; (15374 <bt_conn_init+0x30>)
   15348:	480b      	ldr	r0, [pc, #44]	; (15378 <bt_conn_init+0x34>)
   1534a:	f01c f9e3 	bl	31714 <k_queue_append>
   1534e:	490b      	ldr	r1, [pc, #44]	; (1537c <bt_conn_init+0x38>)
   15350:	4809      	ldr	r0, [pc, #36]	; (15378 <bt_conn_init+0x34>)
   15352:	f01c f9df 	bl	31714 <k_queue_append>
   15356:	490a      	ldr	r1, [pc, #40]	; (15380 <bt_conn_init+0x3c>)
   15358:	4807      	ldr	r0, [pc, #28]	; (15378 <bt_conn_init+0x34>)
   1535a:	f01c f9db 	bl	31714 <k_queue_append>
	}

	bt_att_init();
   1535e:	f01a f81f 	bl	2f3a0 <bt_att_init>

	err = bt_smp_init();
   15362:	f004 fc7f 	bl	19c64 <bt_smp_init>
	if (err) {
   15366:	4604      	mov	r4, r0
   15368:	b908      	cbnz	r0, 1536e <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   1536a:	f019 fc90 	bl	2ec8e <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   1536e:	4620      	mov	r0, r4
   15370:	bd10      	pop	{r4, pc}
   15372:	bf00      	nop
   15374:	20001ea8 	.word	0x20001ea8
   15378:	20000c3c 	.word	0x20000c3c
   1537c:	20001eb8 	.word	0x20001eb8
   15380:	20001ec8 	.word	0x20001ec8

00015384 <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   15384:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   15386:	4b07      	ldr	r3, [pc, #28]	; (153a4 <l2cap_create_le_sig_pdu.part.0+0x20>)
   15388:	aa03      	add	r2, sp, #12
   1538a:	e9cd 3004 	strd	r3, r0, [sp, #16]
   1538e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15392:	2303      	movs	r3, #3
   15394:	4804      	ldr	r0, [pc, #16]	; (153a8 <l2cap_create_le_sig_pdu.part.0+0x24>)
   15396:	9303      	str	r3, [sp, #12]
   15398:	f019 fbd0 	bl	2eb3c <z_log_msg2_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   1539c:	2000      	movs	r0, #0
   1539e:	b007      	add	sp, #28
   153a0:	f85d fb04 	ldr.w	pc, [sp], #4
   153a4:	00035af3 	.word	0x00035af3
   153a8:	0003246c 	.word	0x0003246c

000153ac <l2cap_accept.part.0>:
	 * so this should always succeed.
	 */
	(void)k_work_cancel_delayable(&chan->rtx_work);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   153ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   153ae:	4b08      	ldr	r3, [pc, #32]	; (153d0 <l2cap_accept.part.0+0x24>)
   153b0:	aa03      	add	r2, sp, #12
   153b2:	e9cd 3004 	strd	r3, r0, [sp, #16]
   153b6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   153ba:	2303      	movs	r3, #3
   153bc:	4805      	ldr	r0, [pc, #20]	; (153d4 <l2cap_accept.part.0+0x28>)
   153be:	9303      	str	r3, [sp, #12]
   153c0:	f019 fbbc 	bl	2eb3c <z_log_msg2_static_create.constprop.0>

	return -ENOMEM;
}
   153c4:	f06f 000b 	mvn.w	r0, #11
   153c8:	b007      	add	sp, #28
   153ca:	f85d fb04 	ldr.w	pc, [sp], #4
   153ce:	bf00      	nop
   153d0:	00035b1b 	.word	0x00035b1b
   153d4:	0003246c 	.word	0x0003246c

000153d8 <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   153d8:	4b04      	ldr	r3, [pc, #16]	; (153ec <l2cap_accept+0x14>)
   153da:	681a      	ldr	r2, [r3, #0]
   153dc:	b10a      	cbz	r2, 153e2 <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   153de:	f7ff bfe5 	b.w	153ac <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   153e2:	4803      	ldr	r0, [pc, #12]	; (153f0 <l2cap_accept+0x18>)
   153e4:	6058      	str	r0, [r3, #4]
		*chan = &l2cap->chan.chan;
   153e6:	600b      	str	r3, [r1, #0]
}
   153e8:	4610      	mov	r0, r2
   153ea:	4770      	bx	lr
   153ec:	20001448 	.word	0x20001448
   153f0:	00032d04 	.word	0x00032d04

000153f4 <l2cap_rtx_timeout>:
{
   153f4:	b530      	push	{r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
   153f6:	4604      	mov	r4, r0
	BT_ERR("chan %p timeout", chan);
   153f8:	4b0b      	ldr	r3, [pc, #44]	; (15428 <l2cap_rtx_timeout+0x34>)
	struct bt_conn *conn = chan->chan.conn;
   153fa:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
   153fe:	480b      	ldr	r0, [pc, #44]	; (1542c <l2cap_rtx_timeout+0x38>)
{
   15400:	b087      	sub	sp, #28
	BT_ERR("chan %p timeout", chan);
   15402:	e9cd 3404 	strd	r3, r4, [sp, #16]
   15406:	aa03      	add	r2, sp, #12
   15408:	2303      	movs	r3, #3
   1540a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1540e:	9303      	str	r3, [sp, #12]
   15410:	f019 fb94 	bl	2eb3c <z_log_msg2_static_create.constprop.0>
	bt_l2cap_chan_remove(conn, &chan->chan);
   15414:	4628      	mov	r0, r5
   15416:	4621      	mov	r1, r4
   15418:	f019 fbae 	bl	2eb78 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   1541c:	4620      	mov	r0, r4
}
   1541e:	b007      	add	sp, #28
   15420:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   15424:	f019 bbc6 	b.w	2ebb4 <bt_l2cap_chan_del>
   15428:	00035b42 	.word	0x00035b42
   1542c:	0003246c 	.word	0x0003246c

00015430 <bt_l2cap_connected>:
{
   15430:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   15434:	4e29      	ldr	r6, [pc, #164]	; (154dc <bt_l2cap_connected+0xac>)
   15436:	4f2a      	ldr	r7, [pc, #168]	; (154e0 <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   15438:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 154e4 <bt_l2cap_connected+0xb4>
{
   1543c:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1543e:	42be      	cmp	r6, r7
   15440:	d302      	bcc.n	15448 <bt_l2cap_connected+0x18>
}
   15442:	b003      	add	sp, #12
   15444:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   15448:	6873      	ldr	r3, [r6, #4]
   1544a:	a901      	add	r1, sp, #4
   1544c:	4620      	mov	r0, r4
   1544e:	4798      	blx	r3
   15450:	2800      	cmp	r0, #0
   15452:	db3d      	blt.n	154d0 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
   15454:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   15456:	8833      	ldrh	r3, [r6, #0]
   15458:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   1545c:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   15460:	4641      	mov	r1, r8
   15462:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   15466:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   1546a:	f01c fa4a 	bl	31902 <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1546e:	f3bf 8f5b 	dmb	ish
   15472:	f105 0368 	add.w	r3, r5, #104	; 0x68
   15476:	2200      	movs	r2, #0
   15478:	e853 1f00 	ldrex	r1, [r3]
   1547c:	e843 2000 	strex	r0, r2, [r3]
   15480:	2800      	cmp	r0, #0
   15482:	d1f9      	bne.n	15478 <bt_l2cap_connected+0x48>
   15484:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   15488:	60aa      	str	r2, [r5, #8]
	return list->tail;
   1548a:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   1548c:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode)
   15490:	bb02      	cbnz	r2, 154d4 <bt_l2cap_connected+0xa4>
	list->head = node;
   15492:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
   15496:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   15498:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   1549a:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   1549c:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
   154a0:	681b      	ldr	r3, [r3, #0]
   154a2:	b103      	cbz	r3, 154a6 <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
   154a4:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   154a6:	9b01      	ldr	r3, [sp, #4]
   154a8:	f3bf 8f5b 	dmb	ish
   154ac:	3368      	adds	r3, #104	; 0x68
   154ae:	e853 2f00 	ldrex	r2, [r3]
   154b2:	f042 0201 	orr.w	r2, r2, #1
   154b6:	e843 2100 	strex	r1, r2, [r3]
   154ba:	2900      	cmp	r1, #0
   154bc:	d1f7      	bne.n	154ae <bt_l2cap_connected+0x7e>
   154be:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   154c2:	9801      	ldr	r0, [sp, #4]
   154c4:	6843      	ldr	r3, [r0, #4]
   154c6:	699b      	ldr	r3, [r3, #24]
   154c8:	b113      	cbz	r3, 154d0 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
   154ca:	f100 0168 	add.w	r1, r0, #104	; 0x68
   154ce:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   154d0:	360c      	adds	r6, #12
   154d2:	e7b4      	b.n	1543e <bt_l2cap_connected+0xe>
	parent->next = child;
   154d4:	6013      	str	r3, [r2, #0]
	list->tail = node;
   154d6:	6563      	str	r3, [r4, #84]	; 0x54
}
   154d8:	e7dd      	b.n	15496 <bt_l2cap_connected+0x66>
   154da:	bf00      	nop
   154dc:	0003226c 	.word	0x0003226c
   154e0:	00032290 	.word	0x00032290
   154e4:	000153f5 	.word	0x000153f5

000154e8 <l2cap_recv>:
{
   154e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   154ea:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
   154ec:	898b      	ldrh	r3, [r1, #12]
   154ee:	2b03      	cmp	r3, #3
{
   154f0:	af02      	add	r7, sp, #8
   154f2:	4606      	mov	r6, r0
   154f4:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   154f6:	d80b      	bhi.n	15510 <l2cap_recv+0x28>
		BT_ERR("Too small L2CAP signaling PDU");
   154f8:	4b2f      	ldr	r3, [pc, #188]	; (155b8 <l2cap_recv+0xd0>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   154fa:	613b      	str	r3, [r7, #16]
   154fc:	482f      	ldr	r0, [pc, #188]	; (155bc <l2cap_recv+0xd4>)
   154fe:	2302      	movs	r3, #2
   15500:	f107 020c 	add.w	r2, r7, #12
   15504:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15508:	60fb      	str	r3, [r7, #12]
   1550a:	f019 fb17 	bl	2eb3c <z_log_msg2_static_create.constprop.0>
		return 0;
   1550e:	e019      	b.n	15544 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   15510:	2104      	movs	r1, #4
   15512:	f105 0008 	add.w	r0, r5, #8
   15516:	f01b fad4 	bl	30ac2 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1551a:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   1551c:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
   1551e:	4299      	cmp	r1, r3
   15520:	4604      	mov	r4, r0
   15522:	d013      	beq.n	1554c <l2cap_recv+0x64>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   15524:	466c      	mov	r4, sp
   15526:	b088      	sub	sp, #32
   15528:	aa02      	add	r2, sp, #8
   1552a:	4825      	ldr	r0, [pc, #148]	; (155c0 <l2cap_recv+0xd8>)
   1552c:	6193      	str	r3, [r2, #24]
   1552e:	2304      	movs	r3, #4
   15530:	e9c2 0104 	strd	r0, r1, [r2, #16]
   15534:	f842 3f0c 	str.w	r3, [r2, #12]!
   15538:	4820      	ldr	r0, [pc, #128]	; (155bc <l2cap_recv+0xd4>)
   1553a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1553e:	f019 fafd 	bl	2eb3c <z_log_msg2_static_create.constprop.0>
   15542:	46a5      	mov	sp, r4
}
   15544:	2000      	movs	r0, #0
   15546:	371c      	adds	r7, #28
   15548:	46bd      	mov	sp, r7
   1554a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   1554c:	7843      	ldrb	r3, [r0, #1]
   1554e:	b90b      	cbnz	r3, 15554 <l2cap_recv+0x6c>
		BT_ERR("Invalid ident value in L2CAP PDU");
   15550:	4b1c      	ldr	r3, [pc, #112]	; (155c4 <l2cap_recv+0xdc>)
   15552:	e7d2      	b.n	154fa <l2cap_recv+0x12>
	switch (hdr->code) {
   15554:	7803      	ldrb	r3, [r0, #0]
   15556:	2b01      	cmp	r3, #1
   15558:	d0f4      	beq.n	15544 <l2cap_recv+0x5c>
   1555a:	2b13      	cmp	r3, #19
   1555c:	d103      	bne.n	15566 <l2cap_recv+0x7e>
	if (buf->len < sizeof(*rsp)) {
   1555e:	2901      	cmp	r1, #1
   15560:	d8f0      	bhi.n	15544 <l2cap_recv+0x5c>
		BT_ERR("Too small LE conn param rsp");
   15562:	4b19      	ldr	r3, [pc, #100]	; (155c8 <l2cap_recv+0xe0>)
   15564:	e7c9      	b.n	154fa <l2cap_recv+0x12>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   15566:	4a19      	ldr	r2, [pc, #100]	; (155cc <l2cap_recv+0xe4>)
   15568:	4814      	ldr	r0, [pc, #80]	; (155bc <l2cap_recv+0xd4>)
	switch (hdr->code) {
   1556a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   1556e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15572:	2303      	movs	r3, #3
   15574:	f107 020c 	add.w	r2, r7, #12
   15578:	60fb      	str	r3, [r7, #12]
   1557a:	f019 fadf 	bl	2eb3c <z_log_msg2_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1557e:	2202      	movs	r2, #2
   15580:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
   15582:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   15584:	2001      	movs	r0, #1
   15586:	f019 fadc 	bl	2eb42 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1558a:	4604      	mov	r4, r0
   1558c:	2800      	cmp	r0, #0
   1558e:	d0d9      	beq.n	15544 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   15590:	2102      	movs	r1, #2
   15592:	3008      	adds	r0, #8
   15594:	f01b fa6e 	bl	30a74 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   15598:	2300      	movs	r3, #0
   1559a:	7003      	strb	r3, [r0, #0]
   1559c:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1559e:	4622      	mov	r2, r4
   155a0:	9300      	str	r3, [sp, #0]
   155a2:	2105      	movs	r1, #5
   155a4:	4628      	mov	r0, r5
   155a6:	f019 fb43 	bl	2ec30 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   155aa:	2800      	cmp	r0, #0
   155ac:	d0ca      	beq.n	15544 <l2cap_recv+0x5c>
		net_buf_unref(buf);
   155ae:	4620      	mov	r0, r4
   155b0:	f012 fb78 	bl	27ca4 <net_buf_unref>
   155b4:	e7c6      	b.n	15544 <l2cap_recv+0x5c>
   155b6:	bf00      	nop
   155b8:	00035b52 	.word	0x00035b52
   155bc:	0003246c 	.word	0x0003246c
   155c0:	00035b70 	.word	0x00035b70
   155c4:	00035b91 	.word	0x00035b91
   155c8:	00035bb2 	.word	0x00035bb2
   155cc:	00035bce 	.word	0x00035bce

000155d0 <bt_l2cap_recv>:
{
   155d0:	b530      	push	{r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   155d2:	898b      	ldrh	r3, [r1, #12]
   155d4:	2b03      	cmp	r3, #3
{
   155d6:	b087      	sub	sp, #28
   155d8:	4605      	mov	r5, r0
   155da:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   155dc:	d80f      	bhi.n	155fe <bt_l2cap_recv+0x2e>
		BT_ERR("Too small L2CAP PDU received");
   155de:	4b14      	ldr	r3, [pc, #80]	; (15630 <bt_l2cap_recv+0x60>)
   155e0:	9304      	str	r3, [sp, #16]
   155e2:	2302      	movs	r3, #2
   155e4:	9303      	str	r3, [sp, #12]
   155e6:	aa03      	add	r2, sp, #12
   155e8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   155ec:	4811      	ldr	r0, [pc, #68]	; (15634 <bt_l2cap_recv+0x64>)
   155ee:	f019 faa5 	bl	2eb3c <z_log_msg2_static_create.constprop.0>
	net_buf_unref(buf);
   155f2:	4620      	mov	r0, r4
}
   155f4:	b007      	add	sp, #28
   155f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	net_buf_unref(buf);
   155fa:	f012 bb53 	b.w	27ca4 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   155fe:	2104      	movs	r1, #4
   15600:	f104 0008 	add.w	r0, r4, #8
   15604:	f01b fa5d 	bl	30ac2 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   15608:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1560a:	4628      	mov	r0, r5
   1560c:	f019 fb34 	bl	2ec78 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   15610:	b940      	cbnz	r0, 15624 <bt_l2cap_recv+0x54>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   15612:	4b09      	ldr	r3, [pc, #36]	; (15638 <bt_l2cap_recv+0x68>)
   15614:	e9cd 3104 	strd	r3, r1, [sp, #16]
   15618:	2303      	movs	r3, #3
   1561a:	9303      	str	r3, [sp, #12]
   1561c:	aa03      	add	r2, sp, #12
   1561e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15622:	e7e3      	b.n	155ec <bt_l2cap_recv+0x1c>
	chan->ops->recv(chan, buf);
   15624:	6843      	ldr	r3, [r0, #4]
   15626:	4621      	mov	r1, r4
   15628:	691b      	ldr	r3, [r3, #16]
   1562a:	4798      	blx	r3
   1562c:	e7e1      	b.n	155f2 <bt_l2cap_recv+0x22>
   1562e:	bf00      	nop
   15630:	00035bec 	.word	0x00035bec
   15634:	0003246c 	.word	0x0003246c
   15638:	00035c09 	.word	0x00035c09

0001563c <bt_l2cap_update_conn_param>:
{
   1563c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1563e:	460d      	mov	r5, r1
	ident++;
   15640:	4916      	ldr	r1, [pc, #88]	; (1569c <bt_l2cap_update_conn_param+0x60>)
   15642:	780b      	ldrb	r3, [r1, #0]
   15644:	3301      	adds	r3, #1
	if (!ident) {
   15646:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   1564a:	bf08      	it	eq
   1564c:	2301      	moveq	r3, #1
   1564e:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   15650:	7809      	ldrb	r1, [r1, #0]
{
   15652:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   15654:	2208      	movs	r2, #8
   15656:	2012      	movs	r0, #18
   15658:	f019 fa73 	bl	2eb42 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1565c:	4604      	mov	r4, r0
   1565e:	b1d0      	cbz	r0, 15696 <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   15660:	2108      	movs	r1, #8
   15662:	4408      	add	r0, r1
   15664:	f01b fa06 	bl	30a74 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   15668:	882b      	ldrh	r3, [r5, #0]
   1566a:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   1566c:	886b      	ldrh	r3, [r5, #2]
   1566e:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   15670:	88ab      	ldrh	r3, [r5, #4]
   15672:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   15674:	88eb      	ldrh	r3, [r5, #6]
   15676:	80c3      	strh	r3, [r0, #6]
   15678:	2300      	movs	r3, #0
   1567a:	9300      	str	r3, [sp, #0]
   1567c:	4622      	mov	r2, r4
   1567e:	2105      	movs	r1, #5
   15680:	4630      	mov	r0, r6
   15682:	f019 fad5 	bl	2ec30 <bt_l2cap_send_cb>
	if (err) {
   15686:	4605      	mov	r5, r0
   15688:	b110      	cbz	r0, 15690 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   1568a:	4620      	mov	r0, r4
   1568c:	f012 fb0a 	bl	27ca4 <net_buf_unref>
}
   15690:	4628      	mov	r0, r5
   15692:	b002      	add	sp, #8
   15694:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   15696:	f06f 050b 	mvn.w	r5, #11
   1569a:	e7f9      	b.n	15690 <bt_l2cap_update_conn_param+0x54>
   1569c:	2000341b 	.word	0x2000341b

000156a0 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   156a0:	4b02      	ldr	r3, [pc, #8]	; (156ac <att_cfm_sent+0xc>)
   156a2:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   156a6:	f019 bb05 	b.w	2ecb4 <att_sent>
   156aa:	bf00      	nop
   156ac:	0002f0d7 	.word	0x0002f0d7

000156b0 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   156b0:	4b02      	ldr	r3, [pc, #8]	; (156bc <att_rsp_sent+0xc>)
   156b2:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   156b6:	f019 bafd 	b.w	2ecb4 <att_sent>
   156ba:	bf00      	nop
   156bc:	0002f0f3 	.word	0x0002f0f3

000156c0 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   156c0:	4b02      	ldr	r3, [pc, #8]	; (156cc <att_req_sent+0xc>)
   156c2:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   156c6:	f019 baf5 	b.w	2ecb4 <att_sent>
   156ca:	bf00      	nop
   156cc:	0002eea5 	.word	0x0002eea5

000156d0 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   156d0:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   156d2:	3808      	subs	r0, #8
   156d4:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   156d6:	a901      	add	r1, sp, #4
   156d8:	4802      	ldr	r0, [pc, #8]	; (156e4 <bt_att_released+0x14>)
   156da:	f01b ff53 	bl	31584 <k_mem_slab_free>
}
   156de:	b003      	add	sp, #12
   156e0:	f85d fb04 	ldr.w	pc, [sp], #4
   156e4:	20000b7c 	.word	0x20000b7c

000156e8 <find_type_cb>:
{
   156e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   156ec:	f8d2 9000 	ldr.w	r9, [r2]
{
   156f0:	b097      	sub	sp, #92	; 0x5c
   156f2:	4606      	mov	r6, r0
   156f4:	460f      	mov	r7, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   156f6:	2500      	movs	r5, #0
   156f8:	f642 0301 	movw	r3, #10241	; 0x2801
   156fc:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   156fe:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15702:	f88d 5040 	strb.w	r5, [sp, #64]	; 0x40
   15706:	a910      	add	r1, sp, #64	; 0x40
{
   15708:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1570a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   1570e:	f018 fd65 	bl	2e1dc <bt_uuid_cmp>
   15712:	2800      	cmp	r0, #0
   15714:	d067      	beq.n	157e6 <find_type_cb+0xfe>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   15716:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1571a:	6830      	ldr	r0, [r6, #0]
   1571c:	f88d 5040 	strb.w	r5, [sp, #64]	; 0x40
   15720:	a910      	add	r1, sp, #64	; 0x40
   15722:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   15726:	f018 fd59 	bl	2e1dc <bt_uuid_cmp>
   1572a:	b138      	cbz	r0, 1573c <find_type_cb+0x54>
		if (data->group &&
   1572c:	68a3      	ldr	r3, [r4, #8]
   1572e:	b11b      	cbz	r3, 15738 <find_type_cb+0x50>
   15730:	885a      	ldrh	r2, [r3, #2]
   15732:	42ba      	cmp	r2, r7
   15734:	d200      	bcs.n	15738 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   15736:	805f      	strh	r7, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   15738:	2001      	movs	r0, #1
   1573a:	e009      	b.n	15750 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1573c:	6861      	ldr	r1, [r4, #4]
   1573e:	4608      	mov	r0, r1
   15740:	f019 fab0 	bl	2eca4 <net_buf_frags_len>
   15744:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   15748:	1a1b      	subs	r3, r3, r0
   1574a:	2b03      	cmp	r3, #3
   1574c:	d803      	bhi.n	15756 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1574e:	2000      	movs	r0, #0
}
   15750:	b017      	add	sp, #92	; 0x5c
   15752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   15756:	4608      	mov	r0, r1
   15758:	f01b f95e 	bl	30a18 <net_buf_frag_last>
   1575c:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1575e:	6860      	ldr	r0, [r4, #4]
   15760:	f019 faa0 	bl	2eca4 <net_buf_frags_len>
   15764:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   15768:	f105 0b08 	add.w	fp, r5, #8
   1576c:	ebaa 0a00 	sub.w	sl, sl, r0
   15770:	4658      	mov	r0, fp
   15772:	f01b f9ba 	bl	30aea <net_buf_simple_tailroom>
   15776:	4550      	cmp	r0, sl
   15778:	d938      	bls.n	157ec <find_type_cb+0x104>
   1577a:	6860      	ldr	r0, [r4, #4]
   1577c:	f019 fa92 	bl	2eca4 <net_buf_frags_len>
   15780:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   15784:	1a18      	subs	r0, r3, r0
	if (!len) {
   15786:	b970      	cbnz	r0, 157a6 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   15788:	6863      	ldr	r3, [r4, #4]
   1578a:	7998      	ldrb	r0, [r3, #6]
   1578c:	f012 f9c6 	bl	27b1c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   15790:	2200      	movs	r2, #0
   15792:	2300      	movs	r3, #0
   15794:	f01b f8c4 	bl	30920 <net_buf_alloc_fixed>
		if (!frag) {
   15798:	4605      	mov	r5, r0
   1579a:	2800      	cmp	r0, #0
   1579c:	d0d7      	beq.n	1574e <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1579e:	4601      	mov	r1, r0
   157a0:	6860      	ldr	r0, [r4, #4]
   157a2:	f01b f94a 	bl	30a3a <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   157a6:	2300      	movs	r3, #0
   157a8:	9300      	str	r3, [sp, #0]
   157aa:	f8d6 9004 	ldr.w	r9, [r6, #4]
   157ae:	4631      	mov	r1, r6
   157b0:	2310      	movs	r3, #16
   157b2:	aa02      	add	r2, sp, #8
   157b4:	4640      	mov	r0, r8
   157b6:	47c8      	blx	r9
	if (read < 0) {
   157b8:	1e06      	subs	r6, r0, #0
   157ba:	db14      	blt.n	157e6 <find_type_cb+0xfe>
	if (read != data->value_len) {
   157bc:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   157be:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   157c0:	4296      	cmp	r6, r2
   157c2:	d032      	beq.n	1582a <find_type_cb+0x142>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   157c4:	4601      	mov	r1, r0
   157c6:	a80b      	add	r0, sp, #44	; 0x2c
   157c8:	f018 fd36 	bl	2e238 <bt_uuid_create>
   157cc:	b990      	cbnz	r0, 157f4 <find_type_cb+0x10c>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   157ce:	7c23      	ldrb	r3, [r4, #16]
   157d0:	4a18      	ldr	r2, [pc, #96]	; (15834 <find_type_cb+0x14c>)
   157d2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
			BT_WARN("Unable to create UUID: size %d", read);
   157d6:	2303      	movs	r3, #3
   157d8:	4817      	ldr	r0, [pc, #92]	; (15838 <find_type_cb+0x150>)
   157da:	9313      	str	r3, [sp, #76]	; 0x4c
   157dc:	aa13      	add	r2, sp, #76	; 0x4c
   157de:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   157e2:	f019 fb9c 	bl	2ef1e <z_log_msg2_static_create.constprop.0>
	data->group = NULL;
   157e6:	2300      	movs	r3, #0
   157e8:	60a3      	str	r3, [r4, #8]
   157ea:	e7a5      	b.n	15738 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   157ec:	4658      	mov	r0, fp
   157ee:	f01b f97c 	bl	30aea <net_buf_simple_tailroom>
   157f2:	e7c8      	b.n	15786 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   157f4:	b2f2      	uxtb	r2, r6
   157f6:	a902      	add	r1, sp, #8
   157f8:	a806      	add	r0, sp, #24
   157fa:	f018 fd1d 	bl	2e238 <bt_uuid_create>
   157fe:	b918      	cbnz	r0, 15808 <find_type_cb+0x120>
			BT_WARN("Unable to create UUID: size %d", read);
   15800:	4b0e      	ldr	r3, [pc, #56]	; (1583c <find_type_cb+0x154>)
   15802:	e9cd 3614 	strd	r3, r6, [sp, #80]	; 0x50
   15806:	e7e6      	b.n	157d6 <find_type_cb+0xee>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   15808:	a906      	add	r1, sp, #24
   1580a:	a80b      	add	r0, sp, #44	; 0x2c
   1580c:	f018 fce6 	bl	2e1dc <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   15810:	2800      	cmp	r0, #0
   15812:	d1e8      	bne.n	157e6 <find_type_cb+0xfe>
	data->err = 0x00;
   15814:	2300      	movs	r3, #0
   15816:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   15818:	2104      	movs	r1, #4
   1581a:	f105 0008 	add.w	r0, r5, #8
   1581e:	f01b f929 	bl	30a74 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   15822:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   15824:	8007      	strh	r7, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   15826:	8047      	strh	r7, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   15828:	e786      	b.n	15738 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   1582a:	4632      	mov	r2, r6
   1582c:	a902      	add	r1, sp, #8
   1582e:	f018 fbeb 	bl	2e008 <memcmp>
   15832:	e7ed      	b.n	15810 <find_type_cb+0x128>
   15834:	00035c45 	.word	0x00035c45
   15838:	00032374 	.word	0x00032374
   1583c:	00035c64 	.word	0x00035c64

00015840 <att_get>:
{
   15840:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   15842:	7b43      	ldrb	r3, [r0, #13]
   15844:	2b07      	cmp	r3, #7
{
   15846:	b086      	sub	sp, #24
	if (conn->state != BT_CONN_CONNECTED) {
   15848:	d00d      	beq.n	15866 <att_get+0x26>
		BT_WARN("Not connected");
   1584a:	4b10      	ldr	r3, [pc, #64]	; (1588c <att_get+0x4c>)
   1584c:	9304      	str	r3, [sp, #16]
   1584e:	4810      	ldr	r0, [pc, #64]	; (15890 <att_get+0x50>)
   15850:	2302      	movs	r3, #2
   15852:	aa03      	add	r2, sp, #12
   15854:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return NULL;
   15858:	2400      	movs	r4, #0
		BT_WARN("Not connected");
   1585a:	9303      	str	r3, [sp, #12]
   1585c:	f019 fb5f 	bl	2ef1e <z_log_msg2_static_create.constprop.0>
}
   15860:	4620      	mov	r0, r4
   15862:	b006      	add	sp, #24
   15864:	bd10      	pop	{r4, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   15866:	2104      	movs	r1, #4
   15868:	f019 fa06 	bl	2ec78 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1586c:	4604      	mov	r4, r0
   1586e:	b950      	cbnz	r0, 15886 <att_get+0x46>
		BT_ERR("Unable to find ATT channel");
   15870:	4b08      	ldr	r3, [pc, #32]	; (15894 <att_get+0x54>)
   15872:	9304      	str	r3, [sp, #16]
   15874:	4806      	ldr	r0, [pc, #24]	; (15890 <att_get+0x50>)
   15876:	2302      	movs	r3, #2
   15878:	aa03      	add	r2, sp, #12
   1587a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1587e:	9303      	str	r3, [sp, #12]
   15880:	f019 fb4d 	bl	2ef1e <z_log_msg2_static_create.constprop.0>
		return NULL;
   15884:	e7ec      	b.n	15860 <att_get+0x20>
	return att_chan->att;
   15886:	f850 4c08 	ldr.w	r4, [r0, #-8]
   1588a:	e7e9      	b.n	15860 <att_get+0x20>
   1588c:	00035c83 	.word	0x00035c83
   15890:	00032374 	.word	0x00032374
   15894:	00035c91 	.word	0x00035c91

00015898 <chan_send>:
{
   15898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	hdr = (void *)buf->data;
   1589c:	688b      	ldr	r3, [r1, #8]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1589e:	f3bf 8f5b 	dmb	ish
{
   158a2:	4617      	mov	r7, r2
   158a4:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
   158a8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   158ac:	0752      	lsls	r2, r2, #29
{
   158ae:	b089      	sub	sp, #36	; 0x24
   158b0:	4606      	mov	r6, r0
   158b2:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   158b4:	d550      	bpl.n	15958 <chan_send+0xc0>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   158b6:	781b      	ldrb	r3, [r3, #0]
   158b8:	2bd2      	cmp	r3, #210	; 0xd2
   158ba:	d116      	bne.n	158ea <chan_send+0x52>
		err = bt_smp_sign(chan->att->conn, buf);
   158bc:	6803      	ldr	r3, [r0, #0]
   158be:	6818      	ldr	r0, [r3, #0]
   158c0:	f003 fb96 	bl	18ff0 <bt_smp_sign>
		if (err) {
   158c4:	4605      	mov	r5, r0
   158c6:	b180      	cbz	r0, 158ea <chan_send+0x52>
			BT_ERR("Error signing data");
   158c8:	4b25      	ldr	r3, [pc, #148]	; (15960 <chan_send+0xc8>)
   158ca:	4826      	ldr	r0, [pc, #152]	; (15964 <chan_send+0xcc>)
   158cc:	9306      	str	r3, [sp, #24]
   158ce:	aa05      	add	r2, sp, #20
   158d0:	2302      	movs	r3, #2
   158d2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   158d6:	9305      	str	r3, [sp, #20]
   158d8:	f019 fb21 	bl	2ef1e <z_log_msg2_static_create.constprop.0>
			net_buf_unref(buf);
   158dc:	4620      	mov	r0, r4
   158de:	f012 f9e1 	bl	27ca4 <net_buf_unref>
}
   158e2:	4628      	mov	r0, r5
   158e4:	b009      	add	sp, #36	; 0x24
   158e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   158ea:	f104 0008 	add.w	r0, r4, #8
   158ee:	f01b f8f8 	bl	30ae2 <net_buf_simple_headroom>
	state->len = buf->len;
   158f2:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   158f6:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   158f8:	b957      	cbnz	r7, 15910 <chan_send+0x78>
	switch (att_op_get_type(buf->data[0])) {
   158fa:	68a3      	ldr	r3, [r4, #8]
   158fc:	7818      	ldrb	r0, [r3, #0]
   158fe:	f019 f9ef 	bl	2ece0 <att_op_get_type>
   15902:	1e43      	subs	r3, r0, #1
   15904:	b2db      	uxtb	r3, r3
   15906:	2b04      	cmp	r3, #4
   15908:	bf9c      	itt	ls
   1590a:	4a17      	ldrls	r2, [pc, #92]	; (15968 <chan_send+0xd0>)
   1590c:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15910:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   15912:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15916:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   15918:	4b14      	ldr	r3, [pc, #80]	; (1596c <chan_send+0xd4>)
   1591a:	429f      	cmp	r7, r3
   1591c:	d018      	beq.n	15950 <chan_send+0xb8>
	} else if (cb == chan_cfm_sent) {
   1591e:	4b14      	ldr	r3, [pc, #80]	; (15970 <chan_send+0xd8>)
   15920:	429f      	cmp	r7, r3
   15922:	d017      	beq.n	15954 <chan_send+0xbc>
		return att_sent;
   15924:	4913      	ldr	r1, [pc, #76]	; (15974 <chan_send+0xdc>)
   15926:	4b14      	ldr	r3, [pc, #80]	; (15978 <chan_send+0xe0>)
   15928:	4a14      	ldr	r2, [pc, #80]	; (1597c <chan_send+0xe4>)
   1592a:	428f      	cmp	r7, r1
   1592c:	bf18      	it	ne
   1592e:	4613      	movne	r3, r2
			       &chan->chan.chan);
   15930:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15932:	9600      	str	r6, [sp, #0]
   15934:	4622      	mov	r2, r4
   15936:	2104      	movs	r1, #4
   15938:	f019 f97a 	bl	2ec30 <bt_l2cap_send_cb>
	if (err) {
   1593c:	4605      	mov	r5, r0
   1593e:	2800      	cmp	r0, #0
   15940:	d0cf      	beq.n	158e2 <chan_send+0x4a>
	buf->data = buf->__buf + state->offset;
   15942:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   15944:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   15948:	fa10 f088 	uxtah	r0, r0, r8
   1594c:	60a0      	str	r0, [r4, #8]
}
   1594e:	e7c8      	b.n	158e2 <chan_send+0x4a>
		return att_rsp_sent;
   15950:	4b0b      	ldr	r3, [pc, #44]	; (15980 <chan_send+0xe8>)
   15952:	e7ed      	b.n	15930 <chan_send+0x98>
		return att_cfm_sent;
   15954:	4b0b      	ldr	r3, [pc, #44]	; (15984 <chan_send+0xec>)
   15956:	e7eb      	b.n	15930 <chan_send+0x98>
		return -EINVAL;
   15958:	f06f 0515 	mvn.w	r5, #21
   1595c:	e7c1      	b.n	158e2 <chan_send+0x4a>
   1595e:	bf00      	nop
   15960:	00035cac 	.word	0x00035cac
   15964:	00032374 	.word	0x00032374
   15968:	00032d28 	.word	0x00032d28
   1596c:	0002f0f3 	.word	0x0002f0f3
   15970:	0002f0d7 	.word	0x0002f0d7
   15974:	0002eea5 	.word	0x0002eea5
   15978:	000156c1 	.word	0x000156c1
   1597c:	0002ecb5 	.word	0x0002ecb5
   15980:	000156b1 	.word	0x000156b1
   15984:	000156a1 	.word	0x000156a1

00015988 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   15988:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
   1598a:	4a07      	ldr	r2, [pc, #28]	; (159a8 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   1598c:	4604      	mov	r4, r0
   1598e:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   15990:	f7ff ff82 	bl	15898 <chan_send>
	if (err) {
   15994:	b130      	cbz	r0, 159a4 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
   15996:	4629      	mov	r1, r5
   15998:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
   1599c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   159a0:	f01b b829 	b.w	309f6 <net_buf_put>
}
   159a4:	bd38      	pop	{r3, r4, r5, pc}
   159a6:	bf00      	nop
   159a8:	0002f0f3 	.word	0x0002f0f3

000159ac <read_group_cb>:
{
   159ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   159b0:	4605      	mov	r5, r0
   159b2:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   159b4:	f04f 0800 	mov.w	r8, #0
   159b8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   159bc:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   159be:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   159c0:	f88d 8008 	strb.w	r8, [sp, #8]
   159c4:	a902      	add	r1, sp, #8
{
   159c6:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   159c8:	f8ad 300a 	strh.w	r3, [sp, #10]
   159cc:	f018 fc06 	bl	2e1dc <bt_uuid_cmp>
   159d0:	b1a0      	cbz	r0, 159fc <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   159d2:	f642 0301 	movw	r3, #10241	; 0x2801
   159d6:	6828      	ldr	r0, [r5, #0]
   159d8:	f88d 800c 	strb.w	r8, [sp, #12]
   159dc:	a903      	add	r1, sp, #12
   159de:	f8ad 300e 	strh.w	r3, [sp, #14]
   159e2:	f018 fbfb 	bl	2e1dc <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   159e6:	b148      	cbz	r0, 159fc <read_group_cb+0x50>
		if (data->group &&
   159e8:	6923      	ldr	r3, [r4, #16]
   159ea:	b11b      	cbz	r3, 159f4 <read_group_cb+0x48>
   159ec:	885a      	ldrh	r2, [r3, #2]
   159ee:	42b2      	cmp	r2, r6
   159f0:	d200      	bcs.n	159f4 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   159f2:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   159f4:	2001      	movs	r0, #1
}
   159f6:	b004      	add	sp, #16
   159f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   159fc:	6861      	ldr	r1, [r4, #4]
   159fe:	6828      	ldr	r0, [r5, #0]
   15a00:	f018 fbec 	bl	2e1dc <bt_uuid_cmp>
   15a04:	b110      	cbz	r0, 15a0c <read_group_cb+0x60>
		data->group = NULL;
   15a06:	2300      	movs	r3, #0
   15a08:	6123      	str	r3, [r4, #16]
   15a0a:	e7f3      	b.n	159f4 <read_group_cb+0x48>
	if (data->rsp->len &&
   15a0c:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   15a0e:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   15a10:	781a      	ldrb	r2, [r3, #0]
   15a12:	b13a      	cbz	r2, 15a24 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   15a14:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   15a18:	8981      	ldrh	r1, [r0, #12]
   15a1a:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   15a1c:	4293      	cmp	r3, r2
   15a1e:	da01      	bge.n	15a24 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   15a20:	2000      	movs	r0, #0
   15a22:	e7e8      	b.n	159f6 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   15a24:	2104      	movs	r1, #4
   15a26:	3008      	adds	r0, #8
   15a28:	f01b f824 	bl	30a74 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   15a2c:	4b09      	ldr	r3, [pc, #36]	; (15a54 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   15a2e:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   15a30:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   15a32:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   15a34:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   15a36:	4629      	mov	r1, r5
   15a38:	9300      	str	r3, [sp, #0]
   15a3a:	9401      	str	r4, [sp, #4]
   15a3c:	2300      	movs	r3, #0
   15a3e:	4638      	mov	r0, r7
   15a40:	f019 fabe 	bl	2efc0 <att_chan_read>
	if (read < 0) {
   15a44:	2800      	cmp	r0, #0
   15a46:	dbeb      	blt.n	15a20 <read_group_cb+0x74>
	if (!data->group) {
   15a48:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   15a4a:	3800      	subs	r0, #0
   15a4c:	bf18      	it	ne
   15a4e:	2001      	movne	r0, #1
   15a50:	e7d1      	b.n	159f6 <read_group_cb+0x4a>
   15a52:	bf00      	nop
   15a54:	0002ee85 	.word	0x0002ee85

00015a58 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   15a58:	b5f0      	push	{r4, r5, r6, r7, lr}
   15a5a:	b089      	sub	sp, #36	; 0x24
   15a5c:	4607      	mov	r7, r0
   15a5e:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   15a60:	4833      	ldr	r0, [pc, #204]	; (15b30 <bt_att_accept+0xd8>)
   15a62:	2200      	movs	r2, #0
   15a64:	2300      	movs	r3, #0
   15a66:	4669      	mov	r1, sp
   15a68:	f014 fc1e 	bl	2a2a8 <k_mem_slab_alloc>
   15a6c:	4605      	mov	r5, r0
   15a6e:	b168      	cbz	r0, 15a8c <bt_att_accept+0x34>
		BT_ERR("No available ATT context for conn %p", conn);
   15a70:	4b30      	ldr	r3, [pc, #192]	; (15b34 <bt_att_accept+0xdc>)
   15a72:	e9cd 3706 	strd	r3, r7, [sp, #24]
   15a76:	2303      	movs	r3, #3
   15a78:	9305      	str	r3, [sp, #20]
   15a7a:	aa05      	add	r2, sp, #20
   15a7c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		BT_WARN("No available ATT channel for conn %p", att->conn);
   15a80:	482d      	ldr	r0, [pc, #180]	; (15b38 <bt_att_accept+0xe0>)
   15a82:	f019 fa4c 	bl	2ef1e <z_log_msg2_static_create.constprop.0>
	k_work_init_delayable(&att->connection_work, att_enhanced_connection_work_handler);
#endif /* CONFIG_BT_EATT */

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   15a86:	f06f 050b 	mvn.w	r5, #11
   15a8a:	e04d      	b.n	15b28 <bt_att_accept+0xd0>
	(void)memset(att, 0, sizeof(*att));
   15a8c:	4601      	mov	r1, r0
   15a8e:	2234      	movs	r2, #52	; 0x34
   15a90:	9800      	ldr	r0, [sp, #0]
   15a92:	f018 fad5 	bl	2e040 <memset>
	att->conn = conn;
   15a96:	9c00      	ldr	r4, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   15a98:	4828      	ldr	r0, [pc, #160]	; (15b3c <bt_att_accept+0xe4>)
	list->tail = NULL;
   15a9a:	60a5      	str	r5, [r4, #8]
	list->head = NULL;
   15a9c:	e9c4 7500 	strd	r7, r5, [r4]
	list->tail = NULL;
   15aa0:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
   15aa4:	2200      	movs	r2, #0
   15aa6:	2300      	movs	r3, #0
   15aa8:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   15aaa:	9501      	str	r5, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   15aac:	f014 fbfc 	bl	2a2a8 <k_mem_slab_alloc>
   15ab0:	4605      	mov	r5, r0
   15ab2:	b148      	cbz	r0, 15ac8 <bt_att_accept+0x70>
		BT_WARN("No available ATT channel for conn %p", att->conn);
   15ab4:	6823      	ldr	r3, [r4, #0]
   15ab6:	4a22      	ldr	r2, [pc, #136]	; (15b40 <bt_att_accept+0xe8>)
   15ab8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   15abc:	2303      	movs	r3, #3
   15abe:	9305      	str	r3, [sp, #20]
   15ac0:	aa05      	add	r2, sp, #20
   15ac2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15ac6:	e7db      	b.n	15a80 <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
   15ac8:	4601      	mov	r1, r0
   15aca:	f44f 72a4 	mov.w	r2, #328	; 0x148
   15ace:	9801      	ldr	r0, [sp, #4]
   15ad0:	f018 fab6 	bl	2e040 <memset>
	chan->chan.chan.ops = &ops;
   15ad4:	9801      	ldr	r0, [sp, #4]
   15ad6:	4b1b      	ldr	r3, [pc, #108]	; (15b44 <bt_att_accept+0xec>)
   15ad8:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   15ada:	30f8      	adds	r0, #248	; 0xf8
   15adc:	f01b fe0e 	bl	316fc <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15ae0:	9b01      	ldr	r3, [sp, #4]
   15ae2:	f3bf 8f5b 	dmb	ish
   15ae6:	33f0      	adds	r3, #240	; 0xf0
   15ae8:	e853 2f00 	ldrex	r2, [r3]
   15aec:	e843 5100 	strex	r1, r5, [r3]
   15af0:	2900      	cmp	r1, #0
   15af2:	d1f9      	bne.n	15ae8 <bt_att_accept+0x90>
   15af4:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   15af8:	9f01      	ldr	r7, [sp, #4]
	if (sys_slist_is_empty(&att->chans)) {
   15afa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	chan->att = att;
   15afc:	603c      	str	r4, [r7, #0]
	if (sys_slist_is_empty(&att->chans)) {
   15afe:	b92b      	cbnz	r3, 15b0c <bt_att_accept+0xb4>
   15b00:	f104 000c 	add.w	r0, r4, #12
   15b04:	f01b fdfa 	bl	316fc <z_impl_k_queue_init>
   15b08:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
	parent->next = child;
   15b0c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   15b0e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
Z_GENLIST_PREPEND(slist, snode)
   15b12:	6b22      	ldr	r2, [r4, #48]	; 0x30
	sys_slist_prepend(&att->chans, &chan->node);
   15b14:	f507 73a2 	add.w	r3, r7, #324	; 0x144
	list->head = node;
   15b18:	62e3      	str	r3, [r4, #44]	; 0x2c
Z_GENLIST_PREPEND(slist, snode)
   15b1a:	b902      	cbnz	r2, 15b1e <bt_att_accept+0xc6>
	list->tail = node;
   15b1c:	6323      	str	r3, [r4, #48]	; 0x30
	return chan;
   15b1e:	9b01      	ldr	r3, [sp, #4]
	if (!chan) {
   15b20:	2b00      	cmp	r3, #0
   15b22:	d0b0      	beq.n	15a86 <bt_att_accept+0x2e>
	}

	*ch = &chan->chan.chan;
   15b24:	3308      	adds	r3, #8
   15b26:	6033      	str	r3, [r6, #0]

	return 0;
}
   15b28:	4628      	mov	r0, r5
   15b2a:	b009      	add	sp, #36	; 0x24
   15b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15b2e:	bf00      	nop
   15b30:	20000b60 	.word	0x20000b60
   15b34:	00035cbf 	.word	0x00035cbf
   15b38:	00032374 	.word	0x00032374
   15b3c:	20000b7c 	.word	0x20000b7c
   15b40:	00035ce4 	.word	0x00035ce4
   15b44:	2000035c 	.word	0x2000035c

00015b48 <read_type_cb>:
{
   15b48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   15b4c:	f8d2 8000 	ldr.w	r8, [r2]
{
   15b50:	4606      	mov	r6, r0
   15b52:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   15b54:	6800      	ldr	r0, [r0, #0]
   15b56:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   15b58:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   15b5c:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   15b5e:	f018 fb3d 	bl	2e1dc <bt_uuid_cmp>
   15b62:	4607      	mov	r7, r0
   15b64:	2800      	cmp	r0, #0
   15b66:	d13e      	bne.n	15be6 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   15b68:	4628      	mov	r0, r5
   15b6a:	2215      	movs	r2, #21
   15b6c:	4631      	mov	r1, r6
   15b6e:	f019 ff9e 	bl	2faae <bt_gatt_check_perm>
   15b72:	4605      	mov	r5, r0
   15b74:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   15b76:	b148      	cbz	r0, 15b8c <read_type_cb+0x44>
		if (data->rsp->len) {
   15b78:	68e3      	ldr	r3, [r4, #12]
   15b7a:	781b      	ldrb	r3, [r3, #0]
   15b7c:	b923      	cbnz	r3, 15b88 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   15b7e:	2500      	movs	r5, #0
}
   15b80:	4628      	mov	r0, r5
   15b82:	b003      	add	sp, #12
   15b84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   15b88:	7527      	strb	r7, [r4, #20]
   15b8a:	e7f8      	b.n	15b7e <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   15b8c:	68a0      	ldr	r0, [r4, #8]
   15b8e:	f01a ff43 	bl	30a18 <net_buf_frag_last>
   15b92:	2102      	movs	r1, #2
   15b94:	3008      	adds	r0, #8
   15b96:	f01a ff6d 	bl	30a74 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   15b9a:	4b14      	ldr	r3, [pc, #80]	; (15bec <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   15b9c:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   15b9e:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   15ba0:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   15ba4:	4631      	mov	r1, r6
   15ba6:	9300      	str	r3, [sp, #0]
   15ba8:	9401      	str	r4, [sp, #4]
   15baa:	462b      	mov	r3, r5
   15bac:	4640      	mov	r0, r8
   15bae:	f019 fa07 	bl	2efc0 <att_chan_read>
	if (read < 0) {
   15bb2:	2800      	cmp	r0, #0
   15bb4:	da07      	bge.n	15bc6 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   15bb6:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   15bba:	bf26      	itte	cs
   15bbc:	4240      	negcs	r0, r0
   15bbe:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   15bc0:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   15bc2:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   15bc4:	e7dc      	b.n	15b80 <read_type_cb+0x38>
	if (!data->item) {
   15bc6:	6923      	ldr	r3, [r4, #16]
   15bc8:	2b00      	cmp	r3, #0
   15bca:	d0d8      	beq.n	15b7e <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   15bcc:	68a0      	ldr	r0, [r4, #8]
   15bce:	f019 f869 	bl	2eca4 <net_buf_frags_len>
   15bd2:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   15bd6:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   15bd8:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   15bda:	7818      	ldrb	r0, [r3, #0]
   15bdc:	4285      	cmp	r5, r0
   15bde:	bf94      	ite	ls
   15be0:	2500      	movls	r5, #0
   15be2:	2501      	movhi	r5, #1
   15be4:	e7cc      	b.n	15b80 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   15be6:	2501      	movs	r5, #1
   15be8:	e7ca      	b.n	15b80 <read_type_cb+0x38>
   15bea:	bf00      	nop
   15bec:	0002ecc1 	.word	0x0002ecc1

00015bf0 <prep_write_cb>:
{
   15bf0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15bf4:	4614      	mov	r4, r2
   15bf6:	4606      	mov	r6, r0
   15bf8:	460f      	mov	r7, r1
	data->err = bt_gatt_check_perm(data->conn, attr,
   15bfa:	222a      	movs	r2, #42	; 0x2a
   15bfc:	4601      	mov	r1, r0
   15bfe:	6820      	ldr	r0, [r4, #0]
   15c00:	f019 ff55 	bl	2faae <bt_gatt_check_perm>
   15c04:	4605      	mov	r5, r0
   15c06:	7420      	strb	r0, [r4, #16]
	if (data->err) {
   15c08:	2800      	cmp	r0, #0
   15c0a:	d12e      	bne.n	15c6a <prep_write_cb+0x7a>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
   15c0c:	7cb3      	ldrb	r3, [r6, #18]
   15c0e:	065b      	lsls	r3, r3, #25
   15c10:	d516      	bpl.n	15c40 <prep_write_cb+0x50>
	write = attr->write(data->conn, attr, data->value, data->len,
   15c12:	2301      	movs	r3, #1
   15c14:	9301      	str	r3, [sp, #4]
   15c16:	89e3      	ldrh	r3, [r4, #14]
   15c18:	9300      	str	r3, [sp, #0]
   15c1a:	f8d6 8008 	ldr.w	r8, [r6, #8]
   15c1e:	89a3      	ldrh	r3, [r4, #12]
   15c20:	68a2      	ldr	r2, [r4, #8]
   15c22:	6820      	ldr	r0, [r4, #0]
   15c24:	4631      	mov	r1, r6
   15c26:	47c0      	blx	r8
	if (write != 0) {
   15c28:	b150      	cbz	r0, 15c40 <prep_write_cb+0x50>
	if (err < 0 && err >= -0xff) {
   15c2a:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   15c2e:	bf26      	itte	cs
   15c30:	4243      	negcs	r3, r0
   15c32:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   15c34:	230e      	movcc	r3, #14
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
   15c36:	7423      	strb	r3, [r4, #16]
}
   15c38:	4628      	mov	r0, r5
   15c3a:	b002      	add	sp, #8
   15c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_alloc_fixed(pool, timeout);
   15c40:	480b      	ldr	r0, [pc, #44]	; (15c70 <prep_write_cb+0x80>)
   15c42:	2200      	movs	r2, #0
   15c44:	2300      	movs	r3, #0
   15c46:	f01a fe6b 	bl	30920 <net_buf_alloc_fixed>
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
   15c4a:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
   15c4c:	b908      	cbnz	r0, 15c52 <prep_write_cb+0x62>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
   15c4e:	2309      	movs	r3, #9
   15c50:	e7f1      	b.n	15c36 <prep_write_cb+0x46>
	attr_data->offset = data->offset;
   15c52:	89e3      	ldrh	r3, [r4, #14]
   15c54:	82c3      	strh	r3, [r0, #22]
	attr_data->handle = handle;
   15c56:	8287      	strh	r7, [r0, #20]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15c58:	89a2      	ldrh	r2, [r4, #12]
   15c5a:	68a1      	ldr	r1, [r4, #8]
   15c5c:	3008      	adds	r0, #8
   15c5e:	f01a ff0f 	bl	30a80 <net_buf_simple_add_mem>
	data->err = 0U;
   15c62:	2300      	movs	r3, #0
   15c64:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
   15c66:	2501      	movs	r5, #1
   15c68:	e7e6      	b.n	15c38 <prep_write_cb+0x48>
		return BT_GATT_ITER_STOP;
   15c6a:	2500      	movs	r5, #0
   15c6c:	e7e4      	b.n	15c38 <prep_write_cb+0x48>
   15c6e:	bf00      	nop
   15c70:	20000da0 	.word	0x20000da0

00015c74 <bt_att_connected>:
{
   15c74:	b510      	push	{r4, lr}
   15c76:	4604      	mov	r4, r0
	atomic_set_bit(att_chan->flags, ATT_CONNECTED);
   15c78:	f104 03e8 	add.w	r3, r4, #232	; 0xe8
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   15c7c:	3808      	subs	r0, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15c7e:	f3bf 8f5b 	dmb	ish
   15c82:	e853 2f00 	ldrex	r2, [r3]
   15c86:	f042 0204 	orr.w	r2, r2, #4
   15c8a:	e843 2100 	strex	r1, r2, [r3]
   15c8e:	2900      	cmp	r1, #0
   15c90:	d1f7      	bne.n	15c82 <bt_att_connected+0xe>
   15c92:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15c96:	f3bf 8f5b 	dmb	ish
   15c9a:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   15c9e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   15ca2:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15ca4:	bf5e      	ittt	pl
   15ca6:	2317      	movpl	r3, #23
   15ca8:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15cac:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   15cb0:	f019 f8b2 	bl	2ee18 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   15cb4:	f504 7084 	add.w	r0, r4, #264	; 0x108
   15cb8:	4903      	ldr	r1, [pc, #12]	; (15cc8 <bt_att_connected+0x54>)
   15cba:	f01b fe22 	bl	31902 <k_work_init_delayable>
	bt_gatt_connected(ch->chan.conn);
   15cbe:	6820      	ldr	r0, [r4, #0]
}
   15cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
   15cc4:	f002 b812 	b.w	17cec <bt_gatt_connected>
   15cc8:	0001688d 	.word	0x0001688d

00015ccc <bt_att_chan_create_pdu>:
{
   15ccc:	b5b0      	push	{r4, r5, r7, lr}
   15cce:	b086      	sub	sp, #24
   15cd0:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   15cd2:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   15cd6:	1c53      	adds	r3, r2, #1
   15cd8:	428b      	cmp	r3, r1
{
   15cda:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   15cdc:	d914      	bls.n	15d08 <bt_att_chan_create_pdu+0x3c>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   15cde:	466c      	mov	r4, sp
   15ce0:	b088      	sub	sp, #32
   15ce2:	466a      	mov	r2, sp
   15ce4:	481c      	ldr	r0, [pc, #112]	; (15d58 <bt_att_chan_create_pdu+0x8c>)
   15ce6:	6193      	str	r3, [r2, #24]
   15ce8:	2304      	movs	r3, #4
   15cea:	e9c2 0104 	strd	r0, r1, [r2, #16]
   15cee:	f842 3f0c 	str.w	r3, [r2, #12]!
   15cf2:	481a      	ldr	r0, [pc, #104]	; (15d5c <bt_att_chan_create_pdu+0x90>)
   15cf4:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   15cf8:	f019 f911 	bl	2ef1e <z_log_msg2_static_create.constprop.0>
   15cfc:	46a5      	mov	sp, r4
		return NULL;
   15cfe:	2400      	movs	r4, #0
}
   15d00:	4620      	mov	r0, r4
   15d02:	3718      	adds	r7, #24
   15d04:	46bd      	mov	sp, r7
   15d06:	bdb0      	pop	{r4, r5, r7, pc}
	switch (att_op_get_type(op)) {
   15d08:	4628      	mov	r0, r5
   15d0a:	f018 ffe9 	bl	2ece0 <att_op_get_type>
   15d0e:	2802      	cmp	r0, #2
   15d10:	d001      	beq.n	15d16 <bt_att_chan_create_pdu+0x4a>
   15d12:	2804      	cmp	r0, #4
   15d14:	d115      	bne.n	15d42 <bt_att_chan_create_pdu+0x76>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   15d16:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   15d1a:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   15d1c:	2100      	movs	r1, #0
   15d1e:	4608      	mov	r0, r1
   15d20:	f018 ff83 	bl	2ec2a <bt_l2cap_create_pdu_timeout>
   15d24:	4604      	mov	r4, r0
	if (!buf) {
   15d26:	b988      	cbnz	r0, 15d4c <bt_att_chan_create_pdu+0x80>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   15d28:	4b0d      	ldr	r3, [pc, #52]	; (15d60 <bt_att_chan_create_pdu+0x94>)
   15d2a:	480c      	ldr	r0, [pc, #48]	; (15d5c <bt_att_chan_create_pdu+0x90>)
   15d2c:	e9c7 3504 	strd	r3, r5, [r7, #16]
   15d30:	f107 020c 	add.w	r2, r7, #12
   15d34:	2303      	movs	r3, #3
   15d36:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15d3a:	60fb      	str	r3, [r7, #12]
   15d3c:	f019 f8ef 	bl	2ef1e <z_log_msg2_static_create.constprop.0>
		return NULL;
   15d40:	e7de      	b.n	15d00 <bt_att_chan_create_pdu+0x34>
		buf = bt_l2cap_create_pdu(NULL, 0);
   15d42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15d46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15d4a:	e7e7      	b.n	15d1c <bt_att_chan_create_pdu+0x50>
	return net_buf_simple_add(&buf->b, len);
   15d4c:	2101      	movs	r1, #1
   15d4e:	3008      	adds	r0, #8
   15d50:	f01a fe90 	bl	30a74 <net_buf_simple_add>
	hdr->code = op;
   15d54:	7005      	strb	r5, [r0, #0]
	return buf;
   15d56:	e7d3      	b.n	15d00 <bt_att_chan_create_pdu+0x34>
   15d58:	00035d09 	.word	0x00035d09
   15d5c:	00032374 	.word	0x00032374
   15d60:	00035af3 	.word	0x00035af3

00015d64 <bt_att_recv>:
{
   15d64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15d68:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
   15d6a:	898b      	ldrh	r3, [r1, #12]
{
   15d6c:	af00      	add	r7, sp, #0
   15d6e:	4604      	mov	r4, r0
   15d70:	4689      	mov	r9, r1
	if (buf->len < sizeof(*hdr)) {
   15d72:	b97b      	cbnz	r3, 15d94 <bt_att_recv+0x30>
		BT_ERR("Too small ATT PDU received");
   15d74:	4b52      	ldr	r3, [pc, #328]	; (15ec0 <bt_att_recv+0x15c>)
   15d76:	613b      	str	r3, [r7, #16]
   15d78:	2302      	movs	r3, #2
   15d7a:	60fb      	str	r3, [r7, #12]
   15d7c:	f107 020c 	add.w	r2, r7, #12
   15d80:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			BT_WARN("Ignoring unexpected indication");
   15d84:	484f      	ldr	r0, [pc, #316]	; (15ec4 <bt_att_recv+0x160>)
   15d86:	f019 f8ca 	bl	2ef1e <z_log_msg2_static_create.constprop.0>
}
   15d8a:	2000      	movs	r0, #0
   15d8c:	371c      	adds	r7, #28
   15d8e:	46bd      	mov	sp, r7
   15d90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   15d94:	2101      	movs	r1, #1
   15d96:	f109 0008 	add.w	r0, r9, #8
   15d9a:	f01a fe92 	bl	30ac2 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   15d9e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   15da2:	4605      	mov	r5, r0
   15da4:	2b00      	cmp	r3, #0
   15da6:	d0f0      	beq.n	15d8a <bt_att_recv+0x26>
		if (hdr->code == handlers[i].op) {
   15da8:	7801      	ldrb	r1, [r0, #0]
   15daa:	4a47      	ldr	r2, [pc, #284]	; (15ec8 <bt_att_recv+0x164>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   15dac:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   15db0:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   15db2:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   15db6:	4288      	cmp	r0, r1
   15db8:	d120      	bne.n	15dfc <bt_att_recv+0x98>
		if (handler->type == ATT_REQUEST &&
   15dba:	00d9      	lsls	r1, r3, #3
   15dbc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   15dc0:	f893 8002 	ldrb.w	r8, [r3, #2]
   15dc4:	f1b8 0f01 	cmp.w	r8, #1
   15dc8:	d137      	bne.n	15e3a <bt_att_recv+0xd6>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15dca:	f3bf 8f5b 	dmb	ish
   15dce:	34e8      	adds	r4, #232	; 0xe8
   15dd0:	e854 3f00 	ldrex	r3, [r4]
   15dd4:	f043 0001 	orr.w	r0, r3, #1
   15dd8:	e844 0c00 	strex	ip, r0, [r4]
   15ddc:	f1bc 0f00 	cmp.w	ip, #0
   15de0:	d1f6      	bne.n	15dd0 <bt_att_recv+0x6c>
   15de2:	f3bf 8f5b 	dmb	ish
   15de6:	07d8      	lsls	r0, r3, #31
   15de8:	d53c      	bpl.n	15e64 <bt_att_recv+0x100>
			BT_WARN("Ignoring unexpected request");
   15dea:	4b38      	ldr	r3, [pc, #224]	; (15ecc <bt_att_recv+0x168>)
			BT_WARN("Ignoring unexpected indication");
   15dec:	613b      	str	r3, [r7, #16]
   15dee:	2302      	movs	r3, #2
   15df0:	60fb      	str	r3, [r7, #12]
   15df2:	f107 020c 	add.w	r2, r7, #12
   15df6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   15dfa:	e7c3      	b.n	15d84 <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   15dfc:	3301      	adds	r3, #1
   15dfe:	2b0e      	cmp	r3, #14
   15e00:	d1d7      	bne.n	15db2 <bt_att_recv+0x4e>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   15e02:	4b33      	ldr	r3, [pc, #204]	; (15ed0 <bt_att_recv+0x16c>)
   15e04:	482f      	ldr	r0, [pc, #188]	; (15ec4 <bt_att_recv+0x160>)
   15e06:	e9c7 3104 	strd	r3, r1, [r7, #16]
   15e0a:	f107 020c 	add.w	r2, r7, #12
   15e0e:	2303      	movs	r3, #3
   15e10:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15e14:	60fb      	str	r3, [r7, #12]
   15e16:	f019 f882 	bl	2ef1e <z_log_msg2_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   15e1a:	7829      	ldrb	r1, [r5, #0]
   15e1c:	4608      	mov	r0, r1
   15e1e:	f018 ff5f 	bl	2ece0 <att_op_get_type>
   15e22:	2800      	cmp	r0, #0
   15e24:	d0b1      	beq.n	15d8a <bt_att_recv+0x26>
   15e26:	2805      	cmp	r0, #5
   15e28:	d0af      	beq.n	15d8a <bt_att_recv+0x26>
	if (!req) {
   15e2a:	2900      	cmp	r1, #0
   15e2c:	d0ad      	beq.n	15d8a <bt_att_recv+0x26>
   15e2e:	2306      	movs	r3, #6
   15e30:	2200      	movs	r2, #0
   15e32:	4630      	mov	r0, r6
   15e34:	f019 fa1e 	bl	2f274 <send_err_rsp.part.0>
   15e38:	e7a7      	b.n	15d8a <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   15e3a:	f1b8 0f05 	cmp.w	r8, #5
   15e3e:	d111      	bne.n	15e64 <bt_att_recv+0x100>
   15e40:	f3bf 8f5b 	dmb	ish
   15e44:	34e8      	adds	r4, #232	; 0xe8
   15e46:	e854 3f00 	ldrex	r3, [r4]
   15e4a:	f043 0002 	orr.w	r0, r3, #2
   15e4e:	e844 0c00 	strex	ip, r0, [r4]
   15e52:	f1bc 0f00 	cmp.w	ip, #0
   15e56:	d1f6      	bne.n	15e46 <bt_att_recv+0xe2>
   15e58:	f3bf 8f5b 	dmb	ish
   15e5c:	079b      	lsls	r3, r3, #30
   15e5e:	d501      	bpl.n	15e64 <bt_att_recv+0x100>
			BT_WARN("Ignoring unexpected indication");
   15e60:	4b1c      	ldr	r3, [pc, #112]	; (15ed4 <bt_att_recv+0x170>)
   15e62:	e7c3      	b.n	15dec <bt_att_recv+0x88>
	if (buf->len < handler->expect_len) {
   15e64:	440a      	add	r2, r1
   15e66:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   15e6a:	7851      	ldrb	r1, [r2, #1]
   15e6c:	4299      	cmp	r1, r3
   15e6e:	d916      	bls.n	15e9e <bt_att_recv+0x13a>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   15e70:	46e9      	mov	r9, sp
   15e72:	b088      	sub	sp, #32
   15e74:	466a      	mov	r2, sp
   15e76:	4818      	ldr	r0, [pc, #96]	; (15ed8 <bt_att_recv+0x174>)
   15e78:	7829      	ldrb	r1, [r5, #0]
   15e7a:	6191      	str	r1, [r2, #24]
   15e7c:	2404      	movs	r4, #4
   15e7e:	e9c2 0304 	strd	r0, r3, [r2, #16]
   15e82:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   15e86:	f842 4f0c 	str.w	r4, [r2, #12]!
   15e8a:	480e      	ldr	r0, [pc, #56]	; (15ec4 <bt_att_recv+0x160>)
   15e8c:	f019 f847 	bl	2ef1e <z_log_msg2_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   15e90:	f1b8 0f01 	cmp.w	r8, #1
   15e94:	46cd      	mov	sp, r9
   15e96:	f47f af78 	bne.w	15d8a <bt_att_recv+0x26>
		err = BT_ATT_ERR_INVALID_PDU;
   15e9a:	4623      	mov	r3, r4
   15e9c:	e00b      	b.n	15eb6 <bt_att_recv+0x152>
		err = handler->func(att_chan, buf);
   15e9e:	6853      	ldr	r3, [r2, #4]
   15ea0:	4649      	mov	r1, r9
   15ea2:	4630      	mov	r0, r6
   15ea4:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   15ea6:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
   15eaa:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   15eac:	f47f af6d 	bne.w	15d8a <bt_att_recv+0x26>
   15eb0:	2800      	cmp	r0, #0
   15eb2:	f43f af6a 	beq.w	15d8a <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   15eb6:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   15eb8:	2900      	cmp	r1, #0
   15eba:	f43f af66 	beq.w	15d8a <bt_att_recv+0x26>
   15ebe:	e7b7      	b.n	15e30 <bt_att_recv+0xcc>
   15ec0:	00035d2e 	.word	0x00035d2e
   15ec4:	00032374 	.word	0x00032374
   15ec8:	00032d3c 	.word	0x00032d3c
   15ecc:	00035d49 	.word	0x00035d49
   15ed0:	00035da3 	.word	0x00035da3
   15ed4:	00035d65 	.word	0x00035d65
   15ed8:	00035d84 	.word	0x00035d84

00015edc <att_write_rsp>:
{
   15edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15ee0:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   15ee2:	6803      	ldr	r3, [r0, #0]
   15ee4:	460e      	mov	r6, r1
   15ee6:	3900      	subs	r1, #0
{
   15ee8:	b086      	sub	sp, #24
   15eea:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   15eec:	bf18      	it	ne
   15eee:	2101      	movne	r1, #1
   15ef0:	6818      	ldr	r0, [r3, #0]
{
   15ef2:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   15ef4:	f019 fe06 	bl	2fb04 <bt_gatt_change_aware>
   15ef8:	2800      	cmp	r0, #0
   15efa:	d04d      	beq.n	15f98 <att_write_rsp+0xbc>
	if (!handle) {
   15efc:	2f00      	cmp	r7, #0
   15efe:	d04d      	beq.n	15f9c <att_write_rsp+0xc0>
	(void)memset(&data, 0, sizeof(data));
   15f00:	2218      	movs	r2, #24
   15f02:	2100      	movs	r1, #0
   15f04:	4668      	mov	r0, sp
   15f06:	f018 f89b 	bl	2e040 <memset>
	if (rsp) {
   15f0a:	f1b8 0f00 	cmp.w	r8, #0
   15f0e:	d126      	bne.n	15f5e <att_write_rsp+0x82>
	data.conn = chan->att->conn;
   15f10:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15f12:	4a23      	ldr	r2, [pc, #140]	; (15fa0 <att_write_rsp+0xc4>)
	data.conn = chan->att->conn;
   15f14:	681b      	ldr	r3, [r3, #0]
   15f16:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   15f18:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   15f1c:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   15f20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15f22:	9303      	str	r3, [sp, #12]
	data.len = len;
   15f24:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   15f28:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   15f2c:	2301      	movs	r3, #1
   15f2e:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15f32:	4639      	mov	r1, r7
   15f34:	466b      	mov	r3, sp
   15f36:	4638      	mov	r0, r7
	data.req = req;
   15f38:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15f3c:	f018 ff15 	bl	2ed6a <bt_gatt_foreach_attr>
	if (data.err) {
   15f40:	f89d 4014 	ldrb.w	r4, [sp, #20]
   15f44:	b30c      	cbz	r4, 15f8a <att_write_rsp+0xae>
		if (rsp) {
   15f46:	f1b8 0f00 	cmp.w	r8, #0
   15f4a:	d019      	beq.n	15f80 <att_write_rsp+0xa4>
			net_buf_unref(data.buf);
   15f4c:	9801      	ldr	r0, [sp, #4]
   15f4e:	f011 fea9 	bl	27ca4 <net_buf_unref>
	if (!req) {
   15f52:	b976      	cbnz	r6, 15f72 <att_write_rsp+0x96>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   15f54:	2400      	movs	r4, #0
}
   15f56:	4620      	mov	r0, r4
   15f58:	b006      	add	sp, #24
   15f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   15f5e:	2200      	movs	r2, #0
   15f60:	4641      	mov	r1, r8
   15f62:	4628      	mov	r0, r5
   15f64:	f7ff feb2 	bl	15ccc <bt_att_chan_create_pdu>
   15f68:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   15f6a:	2800      	cmp	r0, #0
   15f6c:	d1d0      	bne.n	15f10 <att_write_rsp+0x34>
			return BT_ATT_ERR_UNLIKELY;
   15f6e:	240e      	movs	r4, #14
   15f70:	e7f1      	b.n	15f56 <att_write_rsp+0x7a>
   15f72:	f89d 3014 	ldrb.w	r3, [sp, #20]
   15f76:	463a      	mov	r2, r7
   15f78:	4631      	mov	r1, r6
   15f7a:	4628      	mov	r0, r5
   15f7c:	f019 f97a 	bl	2f274 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   15f80:	2e18      	cmp	r6, #24
   15f82:	d1e7      	bne.n	15f54 <att_write_rsp+0x78>
   15f84:	f89d 4014 	ldrb.w	r4, [sp, #20]
   15f88:	e7e5      	b.n	15f56 <att_write_rsp+0x7a>
	if (data.buf) {
   15f8a:	9901      	ldr	r1, [sp, #4]
   15f8c:	2900      	cmp	r1, #0
   15f8e:	d0e1      	beq.n	15f54 <att_write_rsp+0x78>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15f90:	4628      	mov	r0, r5
   15f92:	f7ff fcf9 	bl	15988 <bt_att_chan_send_rsp.constprop.0>
   15f96:	e7de      	b.n	15f56 <att_write_rsp+0x7a>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   15f98:	2412      	movs	r4, #18
   15f9a:	e7dc      	b.n	15f56 <att_write_rsp+0x7a>
		return BT_ATT_ERR_INVALID_HANDLE;
   15f9c:	2401      	movs	r4, #1
   15f9e:	e7da      	b.n	15f56 <att_write_rsp+0x7a>
   15fa0:	0002eebb 	.word	0x0002eebb

00015fa4 <att_signed_write_cmd>:
{
   15fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   15fa8:	6887      	ldr	r7, [r0, #8]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15faa:	f3bf 8f5b 	dmb	ish
   15fae:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   15fb2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   15fb6:	071b      	lsls	r3, r3, #28
{
   15fb8:	b08b      	sub	sp, #44	; 0x2c
   15fba:	4606      	mov	r6, r0
   15fbc:	460d      	mov	r5, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   15fbe:	d418      	bmi.n	15ff2 <att_signed_write_cmd+0x4e>
	handle = sys_le16_to_cpu(req->handle);
   15fc0:	4689      	mov	r9, r1
	return net_buf_simple_push(&buf->b, len);
   15fc2:	2101      	movs	r1, #1
   15fc4:	f859 3f08 	ldr.w	r3, [r9, #8]!
   15fc8:	4648      	mov	r0, r9
   15fca:	f8b3 8000 	ldrh.w	r8, [r3]
   15fce:	f01a fd68 	bl	30aa2 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
   15fd2:	4638      	mov	r0, r7
   15fd4:	4629      	mov	r1, r5
   15fd6:	f002 ff83 	bl	18ee0 <bt_smp_sign_verify>
	if (err) {
   15fda:	4607      	mov	r7, r0
   15fdc:	b158      	cbz	r0, 15ff6 <att_signed_write_cmd+0x52>
		BT_ERR("Error verifying data");
   15fde:	4b12      	ldr	r3, [pc, #72]	; (16028 <att_signed_write_cmd+0x84>)
   15fe0:	9308      	str	r3, [sp, #32]
   15fe2:	4812      	ldr	r0, [pc, #72]	; (1602c <att_signed_write_cmd+0x88>)
   15fe4:	2302      	movs	r3, #2
   15fe6:	aa07      	add	r2, sp, #28
   15fe8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15fec:	9307      	str	r3, [sp, #28]
   15fee:	f018 ff96 	bl	2ef1e <z_log_msg2_static_create.constprop.0>
		return 0;
   15ff2:	2000      	movs	r0, #0
   15ff4:	e014      	b.n	16020 <att_signed_write_cmd+0x7c>
	return net_buf_simple_pull(&buf->b, len);
   15ff6:	2101      	movs	r1, #1
   15ff8:	4648      	mov	r0, r9
   15ffa:	f01a fd5a 	bl	30ab2 <net_buf_simple_pull>
   15ffe:	2102      	movs	r1, #2
   16000:	4648      	mov	r0, r9
   16002:	f01a fd56 	bl	30ab2 <net_buf_simple_pull>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data,
   16006:	89ab      	ldrh	r3, [r5, #12]
   16008:	3b0c      	subs	r3, #12
   1600a:	b29b      	uxth	r3, r3
   1600c:	9302      	str	r3, [sp, #8]
   1600e:	68ab      	ldr	r3, [r5, #8]
   16010:	463a      	mov	r2, r7
   16012:	e9cd 7300 	strd	r7, r3, [sp]
   16016:	4639      	mov	r1, r7
   16018:	4643      	mov	r3, r8
   1601a:	4630      	mov	r0, r6
   1601c:	f7ff ff5e 	bl	15edc <att_write_rsp>
}
   16020:	b00b      	add	sp, #44	; 0x2c
   16022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16026:	bf00      	nop
   16028:	00035dbd 	.word	0x00035dbd
   1602c:	00032374 	.word	0x00032374

00016030 <bt_att_create_pdu>:
{
   16030:	b570      	push	{r4, r5, r6, lr}
   16032:	b086      	sub	sp, #24
   16034:	460e      	mov	r6, r1
   16036:	4615      	mov	r5, r2
	att = att_get(conn);
   16038:	f7ff fc02 	bl	15840 <att_get>
	if (!att) {
   1603c:	b1c0      	cbz	r0, 16070 <bt_att_create_pdu+0x40>
	return list->head;
   1603e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   16040:	1c6a      	adds	r2, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16042:	b153      	cbz	r3, 1605a <bt_att_create_pdu+0x2a>
   16044:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
	return node->next;
   16048:	681b      	ldr	r3, [r3, #0]
   1604a:	b10b      	cbz	r3, 16050 <bt_att_create_pdu+0x20>
   1604c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   16050:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   16054:	428a      	cmp	r2, r1
   16056:	d90e      	bls.n	16076 <bt_att_create_pdu+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16058:	b9a3      	cbnz	r3, 16084 <bt_att_create_pdu+0x54>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   1605a:	4b0e      	ldr	r3, [pc, #56]	; (16094 <bt_att_create_pdu+0x64>)
   1605c:	480e      	ldr	r0, [pc, #56]	; (16098 <bt_att_create_pdu+0x68>)
   1605e:	e9cd 3204 	strd	r3, r2, [sp, #16]
   16062:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   16066:	2303      	movs	r3, #3
   16068:	aa03      	add	r2, sp, #12
   1606a:	9303      	str	r3, [sp, #12]
   1606c:	f018 ff57 	bl	2ef1e <z_log_msg2_static_create.constprop.0>
}
   16070:	2000      	movs	r0, #0
   16072:	b006      	add	sp, #24
   16074:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   16076:	462a      	mov	r2, r5
   16078:	4631      	mov	r1, r6
}
   1607a:	b006      	add	sp, #24
   1607c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   16080:	f7ff be24 	b.w	15ccc <bt_att_chan_create_pdu>
   16084:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16088:	b10c      	cbz	r4, 1608e <bt_att_create_pdu+0x5e>
   1608a:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   1608e:	4618      	mov	r0, r3
   16090:	4623      	mov	r3, r4
   16092:	e7dd      	b.n	16050 <bt_att_create_pdu+0x20>
   16094:	00035dd2 	.word	0x00035dd2
   16098:	00032374 	.word	0x00032374

0001609c <att_exec_write_req>:
{
   1609c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return att_exec_write_rsp(chan, req->flags);
   160a0:	688b      	ldr	r3, [r1, #8]
	buf->len  = 0U;
   160a2:	4f4b      	ldr	r7, [pc, #300]	; (161d0 <att_exec_write_req+0x134>)
   160a4:	781b      	ldrb	r3, [r3, #0]
{
   160a6:	b089      	sub	sp, #36	; 0x24
   160a8:	4605      	mov	r5, r0
	return att_exec_write_rsp(chan, req->flags);
   160aa:	9305      	str	r3, [sp, #20]
	struct bt_conn *conn = chan->chan.chan.conn;
   160ac:	6883      	ldr	r3, [r0, #8]
   160ae:	9306      	str	r3, [sp, #24]
	uint8_t err = 0U;
   160b0:	2400      	movs	r4, #0
	while (!sys_slist_is_empty(&chan->att->prep_queue)) {
   160b2:	6828      	ldr	r0, [r5, #0]
   160b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   160b6:	b98b      	cbnz	r3, 160dc <att_exec_write_req+0x40>
	if (err) {
   160b8:	2c00      	cmp	r4, #0
   160ba:	f040 8085 	bne.w	161c8 <att_exec_write_req+0x12c>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
   160be:	2119      	movs	r1, #25
   160c0:	9806      	ldr	r0, [sp, #24]
   160c2:	4622      	mov	r2, r4
   160c4:	f7ff ffb4 	bl	16030 <bt_att_create_pdu>
	if (!buf) {
   160c8:	4601      	mov	r1, r0
   160ca:	2800      	cmp	r0, #0
   160cc:	d06f      	beq.n	161ae <att_exec_write_req+0x112>
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   160ce:	4628      	mov	r0, r5
   160d0:	f7ff fc5a 	bl	15988 <bt_att_chan_send_rsp.constprop.0>
}
   160d4:	4620      	mov	r0, r4
   160d6:	b009      	add	sp, #36	; 0x24
   160d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf = net_buf_slist_get(&chan->att->prep_queue);
   160dc:	3024      	adds	r0, #36	; 0x24
   160de:	f01a fc5f 	bl	309a0 <net_buf_slist_get>
   160e2:	f04f 0300 	mov.w	r3, #0
		handle = data->handle;
   160e6:	f8b0 a014 	ldrh.w	sl, [r0, #20]
		net_buf_simple_add_mem(&reassembled_data, buf->data, buf->len);
   160ea:	8982      	ldrh	r2, [r0, #12]
   160ec:	6881      	ldr	r1, [r0, #8]
   160ee:	80bb      	strh	r3, [r7, #4]
		buf = net_buf_slist_get(&chan->att->prep_queue);
   160f0:	4606      	mov	r6, r0
	buf->data = buf->__buf;
   160f2:	68bb      	ldr	r3, [r7, #8]
		net_buf_simple_add_mem(&reassembled_data, buf->data, buf->len);
   160f4:	4836      	ldr	r0, [pc, #216]	; (161d0 <att_exec_write_req+0x134>)
   160f6:	603b      	str	r3, [r7, #0]
   160f8:	f01a fcc2 	bl	30a80 <net_buf_simple_add_mem>
					    &chan->att->prep_queue,
   160fc:	f8d5 8000 	ldr.w	r8, [r5]
	return list->head;
   16100:	f8d8 4024 	ldr.w	r4, [r8, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, entry, next, node) {
   16104:	2c00      	cmp	r4, #0
   16106:	d054      	beq.n	161b2 <att_exec_write_req+0x116>
		err = exec_write_reassemble(handle, data->offset,
   16108:	8af3      	ldrh	r3, [r6, #22]
	return node->next;
   1610a:	f8d4 9000 	ldr.w	r9, [r4]
   1610e:	9307      	str	r3, [sp, #28]
   16110:	f04f 0b00 	mov.w	fp, #0
		if (tmp_data->handle == handle) {
   16114:	8aa2      	ldrh	r2, [r4, #20]
   16116:	4552      	cmp	r2, sl
   16118:	d12f      	bne.n	1617a <att_exec_write_req+0xde>
			if (tmp_data->offset == 0) {
   1611a:	8ae2      	ldrh	r2, [r4, #22]
   1611c:	2a00      	cmp	r2, #0
   1611e:	d048      	beq.n	161b2 <att_exec_write_req+0x116>
			if (tmp_data->offset != buf->len + offset) {
   16120:	88b9      	ldrh	r1, [r7, #4]
   16122:	9b07      	ldr	r3, [sp, #28]
   16124:	1858      	adds	r0, r3, r1
   16126:	4282      	cmp	r2, r0
   16128:	d148      	bne.n	161bc <att_exec_write_req+0x120>
			if (buf->len + entry->len > buf->size) {
   1612a:	89a2      	ldrh	r2, [r4, #12]
   1612c:	88f8      	ldrh	r0, [r7, #6]
   1612e:	4411      	add	r1, r2
   16130:	4281      	cmp	r1, r0
   16132:	dc4b      	bgt.n	161cc <att_exec_write_req+0x130>
			net_buf_simple_add_mem(buf, entry->data, entry->len);
   16134:	68a1      	ldr	r1, [r4, #8]
   16136:	4638      	mov	r0, r7
   16138:	f01a fca2 	bl	30a80 <net_buf_simple_add_mem>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   1613c:	6822      	ldr	r2, [r4, #0]
   1613e:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
   16142:	f1bb 0f00 	cmp.w	fp, #0
   16146:	d111      	bne.n	1616c <att_exec_write_req+0xd0>
   16148:	428c      	cmp	r4, r1
	list->head = node;
   1614a:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
Z_GENLIST_REMOVE(slist, snode)
   1614e:	d101      	bne.n	16154 <att_exec_write_req+0xb8>
	list->tail = node;
   16150:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
	parent->next = child;
   16154:	2300      	movs	r3, #0
   16156:	6023      	str	r3, [r4, #0]
			net_buf_unref(entry);
   16158:	4620      	mov	r0, r4
   1615a:	f011 fda3 	bl	27ca4 <net_buf_unref>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, entry, next, node) {
   1615e:	f1b9 0f00 	cmp.w	r9, #0
   16162:	d026      	beq.n	161b2 <att_exec_write_req+0x116>
	return node->next;
   16164:	464c      	mov	r4, r9
   16166:	f8d9 9000 	ldr.w	r9, [r9]
   1616a:	e7d3      	b.n	16114 <att_exec_write_req+0x78>
Z_GENLIST_REMOVE(slist, snode)
   1616c:	428c      	cmp	r4, r1
	parent->next = child;
   1616e:	f8cb 2000 	str.w	r2, [fp]
	list->tail = node;
   16172:	bf08      	it	eq
   16174:	f8c8 b028 	streq.w	fp, [r8, #40]	; 0x28
}
   16178:	e7ec      	b.n	16154 <att_exec_write_req+0xb8>
			prev = &entry->node;
   1617a:	46a3      	mov	fp, r4
   1617c:	e7ef      	b.n	1615e <att_exec_write_req+0xc2>
			err = att_write_rsp(chan, BT_ATT_OP_EXEC_WRITE_REQ, 0,
   1617e:	88bb      	ldrh	r3, [r7, #4]
   16180:	9302      	str	r3, [sp, #8]
   16182:	683b      	ldr	r3, [r7, #0]
   16184:	9301      	str	r3, [sp, #4]
   16186:	8af3      	ldrh	r3, [r6, #22]
   16188:	9300      	str	r3, [sp, #0]
   1618a:	2200      	movs	r2, #0
   1618c:	4653      	mov	r3, sl
   1618e:	2118      	movs	r1, #24
   16190:	4628      	mov	r0, r5
   16192:	f7ff fea3 	bl	15edc <att_write_rsp>
			if (err) {
   16196:	4604      	mov	r4, r0
   16198:	b128      	cbz	r0, 161a6 <att_exec_write_req+0x10a>
	if (!req) {
   1619a:	4603      	mov	r3, r0
   1619c:	8ab2      	ldrh	r2, [r6, #20]
   1619e:	2118      	movs	r1, #24
   161a0:	4628      	mov	r0, r5
   161a2:	f019 f867 	bl	2f274 <send_err_rsp.part.0>
		net_buf_unref(buf);
   161a6:	4630      	mov	r0, r6
   161a8:	f011 fd7c 	bl	27ca4 <net_buf_unref>
   161ac:	e781      	b.n	160b2 <att_exec_write_req+0x16>
		return BT_ATT_ERR_UNLIKELY;
   161ae:	240e      	movs	r4, #14
   161b0:	e790      	b.n	160d4 <att_exec_write_req+0x38>
		if (!err && flags == BT_ATT_FLAG_EXEC) {
   161b2:	9b05      	ldr	r3, [sp, #20]
   161b4:	2b01      	cmp	r3, #1
   161b6:	d0e2      	beq.n	1617e <att_exec_write_req+0xe2>
		err = exec_write_reassemble(handle, data->offset,
   161b8:	2400      	movs	r4, #0
   161ba:	e7f4      	b.n	161a6 <att_exec_write_req+0x10a>
				return BT_ATT_ERR_INVALID_OFFSET;
   161bc:	2307      	movs	r3, #7
	if (!req) {
   161be:	4652      	mov	r2, sl
   161c0:	2118      	movs	r1, #24
   161c2:	4628      	mov	r0, r5
   161c4:	f019 f856 	bl	2f274 <send_err_rsp.part.0>
			return 0;
   161c8:	2400      	movs	r4, #0
	return att_exec_write_rsp(chan, req->flags);
   161ca:	e783      	b.n	160d4 <att_exec_write_req+0x38>
				return BT_ATT_ERR_INVALID_ATTRIBUTE_LEN;
   161cc:	230d      	movs	r3, #13
   161ce:	e7f6      	b.n	161be <att_exec_write_req+0x122>
   161d0:	20000380 	.word	0x20000380

000161d4 <att_prepare_write_req>:
{
   161d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   161d8:	460c      	mov	r4, r1
   161da:	b087      	sub	sp, #28
   161dc:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   161de:	2104      	movs	r1, #4
   161e0:	f104 0008 	add.w	r0, r4, #8
   161e4:	f01a fc6d 	bl	30ac2 <net_buf_simple_pull_mem>
	struct bt_conn *conn = chan->chan.chan.conn;
   161e8:	f8d5 b008 	ldr.w	fp, [r5, #8]
	handle = sys_le16_to_cpu(req->handle);
   161ec:	f8b0 a000 	ldrh.w	sl, [r0]
	offset = sys_le16_to_cpu(req->offset);
   161f0:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	return att_prep_write_rsp(chan, handle, offset, buf->data, buf->len);
   161f4:	f8d4 8008 	ldr.w	r8, [r4, #8]
   161f8:	89a7      	ldrh	r7, [r4, #12]
	if (!bt_gatt_change_aware(conn, true)) {
   161fa:	2101      	movs	r1, #1
   161fc:	4658      	mov	r0, fp
	handle = sys_le16_to_cpu(req->handle);
   161fe:	fa1f f68a 	uxth.w	r6, sl
	if (!bt_gatt_change_aware(conn, true)) {
   16202:	f019 fc7f 	bl	2fb04 <bt_gatt_change_aware>
   16206:	2800      	cmp	r0, #0
   16208:	d04a      	beq.n	162a0 <att_prepare_write_req+0xcc>
	if (!handle) {
   1620a:	2e00      	cmp	r6, #0
   1620c:	d04a      	beq.n	162a4 <att_prepare_write_req+0xd0>
	(void)memset(&data, 0, sizeof(data));
   1620e:	2214      	movs	r2, #20
   16210:	2100      	movs	r1, #0
   16212:	a801      	add	r0, sp, #4
   16214:	f017 ff14 	bl	2e040 <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   16218:	2301      	movs	r3, #1
   1621a:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
   1621e:	4a23      	ldr	r2, [pc, #140]	; (162ac <att_prepare_write_req+0xd8>)
	data.conn = conn;
   16220:	f8cd b004 	str.w	fp, [sp, #4]
	data.len = len;
   16224:	b2ff      	uxtb	r7, r7
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
   16226:	ab01      	add	r3, sp, #4
   16228:	4631      	mov	r1, r6
   1622a:	4630      	mov	r0, r6
	data.offset = offset;
   1622c:	f8ad 9012 	strh.w	r9, [sp, #18]
	data.value = value;
   16230:	f8cd 800c 	str.w	r8, [sp, #12]
	data.len = len;
   16234:	f8ad 7010 	strh.w	r7, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
   16238:	f018 fd97 	bl	2ed6a <bt_gatt_foreach_attr>
	if (data.err) {
   1623c:	f89d 4014 	ldrb.w	r4, [sp, #20]
   16240:	b154      	cbz	r4, 16258 <att_prepare_write_req+0x84>
	if (!req) {
   16242:	4623      	mov	r3, r4
   16244:	4632      	mov	r2, r6
   16246:	2116      	movs	r1, #22
   16248:	4628      	mov	r0, r5
   1624a:	f019 f813 	bl	2f274 <send_err_rsp.part.0>
		return 0;
   1624e:	2400      	movs	r4, #0
}
   16250:	4620      	mov	r0, r4
   16252:	b007      	add	sp, #28
   16254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_slist_put(&chan->att->prep_queue, data.buf);
   16258:	6828      	ldr	r0, [r5, #0]
   1625a:	9902      	ldr	r1, [sp, #8]
   1625c:	3024      	adds	r0, #36	; 0x24
   1625e:	f01a fb82 	bl	30966 <net_buf_slist_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
   16262:	4622      	mov	r2, r4
   16264:	2117      	movs	r1, #23
   16266:	4658      	mov	r0, fp
   16268:	f7ff fee2 	bl	16030 <bt_att_create_pdu>
   1626c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1626e:	b1d8      	cbz	r0, 162a8 <att_prepare_write_req+0xd4>
	return net_buf_simple_add(&buf->b, len);
   16270:	2104      	movs	r1, #4
   16272:	3008      	adds	r0, #8
   16274:	f01a fbfe 	bl	30a74 <net_buf_simple_add>
   16278:	4606      	mov	r6, r0
	rsp->handle = sys_cpu_to_le16(handle);
   1627a:	f8a0 a000 	strh.w	sl, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
   1627e:	f8a0 9002 	strh.w	r9, [r0, #2]
   16282:	9802      	ldr	r0, [sp, #8]
   16284:	4639      	mov	r1, r7
   16286:	3008      	adds	r0, #8
   16288:	f01a fbf4 	bl	30a74 <net_buf_simple_add>
	memcpy(rsp->value, value, len);
   1628c:	4641      	mov	r1, r8
   1628e:	463a      	mov	r2, r7
   16290:	1d30      	adds	r0, r6, #4
   16292:	f017 feca 	bl	2e02a <memcpy>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16296:	9902      	ldr	r1, [sp, #8]
   16298:	4628      	mov	r0, r5
   1629a:	f7ff fb75 	bl	15988 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   1629e:	e7d7      	b.n	16250 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   162a0:	2412      	movs	r4, #18
   162a2:	e7d5      	b.n	16250 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_INVALID_HANDLE;
   162a4:	2401      	movs	r4, #1
   162a6:	e7d3      	b.n	16250 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_UNLIKELY;
   162a8:	240e      	movs	r4, #14
   162aa:	e7d1      	b.n	16250 <att_prepare_write_req+0x7c>
   162ac:	00015bf1 	.word	0x00015bf1

000162b0 <att_read_group_req>:
{
   162b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   162b4:	898c      	ldrh	r4, [r1, #12]
   162b6:	3c04      	subs	r4, #4
   162b8:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   162ba:	2c02      	cmp	r4, #2
{
   162bc:	4605      	mov	r5, r0
   162be:	b08c      	sub	sp, #48	; 0x30
   162c0:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   162c2:	d001      	beq.n	162c8 <att_read_group_req+0x18>
   162c4:	2c10      	cmp	r4, #16
   162c6:	d16e      	bne.n	163a6 <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
   162c8:	2104      	movs	r1, #4
   162ca:	3008      	adds	r0, #8
   162cc:	f01a fbf9 	bl	30ac2 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   162d0:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   162d4:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   162d6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   162d8:	1d01      	adds	r1, r0, #4
   162da:	4622      	mov	r2, r4
   162dc:	4640      	mov	r0, r8
   162de:	f017 ffab 	bl	2e238 <bt_uuid_create>
   162e2:	2800      	cmp	r0, #0
   162e4:	d061      	beq.n	163aa <att_read_group_req+0xfa>
	if (!start || !end) {
   162e6:	2e00      	cmp	r6, #0
   162e8:	d03a      	beq.n	16360 <att_read_group_req+0xb0>
   162ea:	2400      	movs	r4, #0
   162ec:	2f00      	cmp	r7, #0
   162ee:	d036      	beq.n	1635e <att_read_group_req+0xae>
	if (start > end) {
   162f0:	42b7      	cmp	r7, r6
   162f2:	d335      	bcc.n	16360 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   162f4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   162f8:	a901      	add	r1, sp, #4
   162fa:	4640      	mov	r0, r8
   162fc:	f88d 4004 	strb.w	r4, [sp, #4]
   16300:	f8ad 3006 	strh.w	r3, [sp, #6]
   16304:	f017 ff6a 	bl	2e1dc <bt_uuid_cmp>
   16308:	2800      	cmp	r0, #0
   1630a:	d134      	bne.n	16376 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   1630c:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   1630e:	2214      	movs	r2, #20
   16310:	2100      	movs	r1, #0
   16312:	a807      	add	r0, sp, #28
   16314:	f017 fe94 	bl	2e040 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   16318:	2201      	movs	r2, #1
   1631a:	2111      	movs	r1, #17
   1631c:	4620      	mov	r0, r4
   1631e:	f7ff fe87 	bl	16030 <bt_att_create_pdu>
   16322:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   16324:	2800      	cmp	r0, #0
   16326:	d040      	beq.n	163aa <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
   16328:	2101      	movs	r1, #1
   1632a:	3008      	adds	r0, #8
	data.uuid = uuid;
   1632c:	e9cd 5807 	strd	r5, r8, [sp, #28]
   16330:	f01a fba0 	bl	30a74 <net_buf_simple_add>
	data.rsp->len = 0U;
   16334:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   16338:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1633a:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   1633c:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   16340:	4a1b      	ldr	r2, [pc, #108]	; (163b0 <att_read_group_req+0x100>)
	data.group = NULL;
   16342:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   16346:	4639      	mov	r1, r7
   16348:	4630      	mov	r0, r6
   1634a:	f018 fd0e 	bl	2ed6a <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1634e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16350:	781c      	ldrb	r4, [r3, #0]
   16352:	bb1c      	cbnz	r4, 1639c <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   16354:	9809      	ldr	r0, [sp, #36]	; 0x24
   16356:	f011 fca5 	bl	27ca4 <net_buf_unref>
	if (!req) {
   1635a:	230a      	movs	r3, #10
   1635c:	e018      	b.n	16390 <att_read_group_req+0xe0>
			*err = 0U;
   1635e:	463e      	mov	r6, r7
	if (!req) {
   16360:	2301      	movs	r3, #1
   16362:	4632      	mov	r2, r6
   16364:	2110      	movs	r1, #16
   16366:	4628      	mov	r0, r5
   16368:	f018 ff84 	bl	2f274 <send_err_rsp.part.0>
		return 0;
   1636c:	2400      	movs	r4, #0
}
   1636e:	4620      	mov	r0, r4
   16370:	b00c      	add	sp, #48	; 0x30
   16372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   16376:	f642 0301 	movw	r3, #10241	; 0x2801
   1637a:	a907      	add	r1, sp, #28
   1637c:	4640      	mov	r0, r8
   1637e:	f88d 401c 	strb.w	r4, [sp, #28]
   16382:	f8ad 301e 	strh.w	r3, [sp, #30]
   16386:	f017 ff29 	bl	2e1dc <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1638a:	2800      	cmp	r0, #0
   1638c:	d0be      	beq.n	1630c <att_read_group_req+0x5c>
	if (!req) {
   1638e:	2310      	movs	r3, #16
   16390:	4632      	mov	r2, r6
   16392:	2110      	movs	r1, #16
   16394:	4628      	mov	r0, r5
   16396:	f018 ff6d 	bl	2f274 <send_err_rsp.part.0>
		return 0;
   1639a:	e7e8      	b.n	1636e <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1639c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1639e:	4628      	mov	r0, r5
   163a0:	f7ff faf2 	bl	15988 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   163a4:	e7e2      	b.n	1636c <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   163a6:	2404      	movs	r4, #4
   163a8:	e7e1      	b.n	1636e <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   163aa:	240e      	movs	r4, #14
   163ac:	e7df      	b.n	1636e <att_read_group_req+0xbe>
   163ae:	bf00      	nop
   163b0:	000159ad 	.word	0x000159ad

000163b4 <att_read_mult_req>:
{
   163b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   163b8:	6886      	ldr	r6, [r0, #8]
{
   163ba:	b085      	sub	sp, #20
   163bc:	4604      	mov	r4, r0
   163be:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   163c0:	4630      	mov	r0, r6
   163c2:	2101      	movs	r1, #1
   163c4:	f019 fb9e 	bl	2fb04 <bt_gatt_change_aware>
   163c8:	b3b8      	cbz	r0, 1643a <att_read_mult_req+0x86>
	(void)memset(&data, 0, sizeof(data));
   163ca:	2210      	movs	r2, #16
   163cc:	2100      	movs	r1, #0
   163ce:	4668      	mov	r0, sp
   163d0:	f017 fe36 	bl	2e040 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   163d4:	2200      	movs	r2, #0
   163d6:	210f      	movs	r1, #15
   163d8:	4630      	mov	r0, r6
   163da:	f7ff fe29 	bl	16030 <bt_att_create_pdu>
   163de:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   163e0:	b368      	cbz	r0, 1643e <att_read_mult_req+0x8a>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   163e2:	f8df 9060 	ldr.w	r9, [pc, #96]	; 16444 <att_read_mult_req+0x90>
	data.chan = chan;
   163e6:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   163e8:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   163ec:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   163f0:	89ab      	ldrh	r3, [r5, #12]
   163f2:	2b01      	cmp	r3, #1
   163f4:	d804      	bhi.n	16400 <att_read_mult_req+0x4c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   163f6:	9902      	ldr	r1, [sp, #8]
   163f8:	4620      	mov	r0, r4
   163fa:	f7ff fac5 	bl	15988 <bt_att_chan_send_rsp.constprop.0>
   163fe:	e018      	b.n	16432 <att_read_mult_req+0x7e>
   16400:	4638      	mov	r0, r7
   16402:	f01a fb66 	bl	30ad2 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16406:	466b      	mov	r3, sp
   16408:	464a      	mov	r2, r9
   1640a:	4601      	mov	r1, r0
   1640c:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1640e:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16412:	f018 fcaa 	bl	2ed6a <bt_gatt_foreach_attr>
		if (data.err) {
   16416:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1641a:	2b00      	cmp	r3, #0
   1641c:	d0e8      	beq.n	163f0 <att_read_mult_req+0x3c>
			net_buf_unref(data.buf);
   1641e:	9802      	ldr	r0, [sp, #8]
   16420:	f011 fc40 	bl	27ca4 <net_buf_unref>
	if (!req) {
   16424:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16428:	4632      	mov	r2, r6
   1642a:	210e      	movs	r1, #14
   1642c:	4620      	mov	r0, r4
   1642e:	f018 ff21 	bl	2f274 <send_err_rsp.part.0>
	return 0;
   16432:	2000      	movs	r0, #0
}
   16434:	b005      	add	sp, #20
   16436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1643a:	2012      	movs	r0, #18
   1643c:	e7fa      	b.n	16434 <att_read_mult_req+0x80>
		return BT_ATT_ERR_UNLIKELY;
   1643e:	200e      	movs	r0, #14
   16440:	e7f8      	b.n	16434 <att_read_mult_req+0x80>
   16442:	bf00      	nop
   16444:	0002f10f 	.word	0x0002f10f

00016448 <att_read_rsp>:
{
   16448:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1644c:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   16450:	4605      	mov	r5, r0
   16452:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   16454:	4640      	mov	r0, r8
   16456:	2101      	movs	r1, #1
{
   16458:	4614      	mov	r4, r2
   1645a:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   1645c:	f019 fb52 	bl	2fb04 <bt_gatt_change_aware>
   16460:	b388      	cbz	r0, 164c6 <att_read_rsp+0x7e>
	if (!handle) {
   16462:	b396      	cbz	r6, 164ca <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
   16464:	2210      	movs	r2, #16
   16466:	2100      	movs	r1, #0
   16468:	4668      	mov	r0, sp
   1646a:	f017 fde9 	bl	2e040 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1646e:	2200      	movs	r2, #0
   16470:	4621      	mov	r1, r4
   16472:	4640      	mov	r0, r8
   16474:	f7ff fddc 	bl	16030 <bt_att_create_pdu>
   16478:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1647a:	b340      	cbz	r0, 164ce <att_read_rsp+0x86>
	data.offset = offset;
   1647c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   16480:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   16484:	2301      	movs	r3, #1
   16486:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1648a:	4a12      	ldr	r2, [pc, #72]	; (164d4 <att_read_rsp+0x8c>)
	data.chan = chan;
   1648c:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1648e:	466b      	mov	r3, sp
   16490:	4631      	mov	r1, r6
   16492:	4630      	mov	r0, r6
   16494:	f018 fc69 	bl	2ed6a <bt_gatt_foreach_attr>
	if (data.err) {
   16498:	f89d 400c 	ldrb.w	r4, [sp, #12]
   1649c:	b174      	cbz	r4, 164bc <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   1649e:	9802      	ldr	r0, [sp, #8]
   164a0:	f011 fc00 	bl	27ca4 <net_buf_unref>
	if (!req) {
   164a4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   164a8:	4632      	mov	r2, r6
   164aa:	4639      	mov	r1, r7
   164ac:	4628      	mov	r0, r5
   164ae:	f018 fee1 	bl	2f274 <send_err_rsp.part.0>
		return 0;
   164b2:	2400      	movs	r4, #0
}
   164b4:	4620      	mov	r0, r4
   164b6:	b004      	add	sp, #16
   164b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   164bc:	9902      	ldr	r1, [sp, #8]
   164be:	4628      	mov	r0, r5
   164c0:	f7ff fa62 	bl	15988 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   164c4:	e7f6      	b.n	164b4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   164c6:	2412      	movs	r4, #18
   164c8:	e7f4      	b.n	164b4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   164ca:	2401      	movs	r4, #1
   164cc:	e7f2      	b.n	164b4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   164ce:	240e      	movs	r4, #14
   164d0:	e7f0      	b.n	164b4 <att_read_rsp+0x6c>
   164d2:	bf00      	nop
   164d4:	0002f10f 	.word	0x0002f10f

000164d8 <att_read_type_req>:
{
   164d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   164dc:	898c      	ldrh	r4, [r1, #12]
   164de:	3c04      	subs	r4, #4
   164e0:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   164e2:	2c02      	cmp	r4, #2
{
   164e4:	4605      	mov	r5, r0
   164e6:	b08c      	sub	sp, #48	; 0x30
   164e8:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   164ea:	d001      	beq.n	164f0 <att_read_type_req+0x18>
   164ec:	2c10      	cmp	r4, #16
   164ee:	d14f      	bne.n	16590 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
   164f0:	2104      	movs	r1, #4
   164f2:	3008      	adds	r0, #8
   164f4:	f01a fae5 	bl	30ac2 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   164f8:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   164fc:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   164fe:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   16500:	1d01      	adds	r1, r0, #4
   16502:	4622      	mov	r2, r4
   16504:	4640      	mov	r0, r8
   16506:	f017 fe97 	bl	2e238 <bt_uuid_create>
   1650a:	b188      	cbz	r0, 16530 <att_read_type_req+0x58>
	if (!start || !end) {
   1650c:	b19e      	cbz	r6, 16536 <att_read_type_req+0x5e>
   1650e:	b18f      	cbz	r7, 16534 <att_read_type_req+0x5c>
	if (start > end) {
   16510:	42be      	cmp	r6, r7
   16512:	d810      	bhi.n	16536 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   16514:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   16516:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   16518:	2100      	movs	r1, #0
   1651a:	eb0d 0002 	add.w	r0, sp, r2
   1651e:	f017 fd8f 	bl	2e040 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   16522:	2201      	movs	r2, #1
   16524:	2109      	movs	r1, #9
   16526:	4620      	mov	r0, r4
   16528:	f7ff fd82 	bl	16030 <bt_att_create_pdu>
   1652c:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   1652e:	b968      	cbnz	r0, 1654c <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   16530:	240e      	movs	r4, #14
   16532:	e007      	b.n	16544 <att_read_type_req+0x6c>
			*err = 0U;
   16534:	463e      	mov	r6, r7
	if (!req) {
   16536:	2301      	movs	r3, #1
   16538:	4632      	mov	r2, r6
   1653a:	2108      	movs	r1, #8
   1653c:	4628      	mov	r0, r5
   1653e:	f018 fe99 	bl	2f274 <send_err_rsp.part.0>
		return 0;
   16542:	2400      	movs	r4, #0
}
   16544:	4620      	mov	r0, r4
   16546:	b00c      	add	sp, #48	; 0x30
   16548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   1654c:	2101      	movs	r1, #1
   1654e:	3008      	adds	r0, #8
	data.uuid = uuid;
   16550:	e9cd 5806 	strd	r5, r8, [sp, #24]
   16554:	f01a fa8e 	bl	30a74 <net_buf_simple_add>
	data.rsp->len = 0U;
   16558:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1655c:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1655e:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   16560:	4a0c      	ldr	r2, [pc, #48]	; (16594 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
   16562:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   16566:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16568:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1656c:	4630      	mov	r0, r6
   1656e:	ab06      	add	r3, sp, #24
   16570:	f018 fbfb 	bl	2ed6a <bt_gatt_foreach_attr>
	if (data.err) {
   16574:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   16578:	b12c      	cbz	r4, 16586 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   1657a:	9808      	ldr	r0, [sp, #32]
   1657c:	f011 fb92 	bl	27ca4 <net_buf_unref>
	if (!req) {
   16580:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   16584:	e7d8      	b.n	16538 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16586:	9908      	ldr	r1, [sp, #32]
   16588:	4628      	mov	r0, r5
   1658a:	f7ff f9fd 	bl	15988 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   1658e:	e7d9      	b.n	16544 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   16590:	2404      	movs	r4, #4
   16592:	e7d7      	b.n	16544 <att_read_type_req+0x6c>
   16594:	00015b49 	.word	0x00015b49

00016598 <att_find_type_req>:
{
   16598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1659c:	4688      	mov	r8, r1
   1659e:	b086      	sub	sp, #24
   165a0:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   165a2:	2106      	movs	r1, #6
   165a4:	f108 0008 	add.w	r0, r8, #8
   165a8:	f01a fa8b 	bl	30ac2 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   165ac:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   165ae:	b317      	cbz	r7, 165f6 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   165b0:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   165b4:	f1b9 0f00 	cmp.w	r9, #0
   165b8:	d01c      	beq.n	165f4 <att_find_type_req+0x5c>
	if (start > end) {
   165ba:	45b9      	cmp	r9, r7
   165bc:	d31b      	bcc.n	165f6 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   165be:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   165c0:	f8ad 3002 	strh.w	r3, [sp, #2]
   165c4:	2400      	movs	r4, #0
   165c6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   165ca:	a901      	add	r1, sp, #4
   165cc:	4668      	mov	r0, sp
	value = buf->data;
   165ce:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   165d2:	f88d 4000 	strb.w	r4, [sp]
   165d6:	f88d 4004 	strb.w	r4, [sp, #4]
   165da:	f8ad 3006 	strh.w	r3, [sp, #6]
   165de:	f017 fdfd 	bl	2e1dc <bt_uuid_cmp>
   165e2:	4606      	mov	r6, r0
   165e4:	b190      	cbz	r0, 1660c <att_find_type_req+0x74>
	if (!req) {
   165e6:	230a      	movs	r3, #10
   165e8:	463a      	mov	r2, r7
   165ea:	2106      	movs	r1, #6
   165ec:	4628      	mov	r0, r5
   165ee:	f018 fe41 	bl	2f274 <send_err_rsp.part.0>
		return 0;
   165f2:	e007      	b.n	16604 <att_find_type_req+0x6c>
			*err = 0U;
   165f4:	464f      	mov	r7, r9
	if (!req) {
   165f6:	2301      	movs	r3, #1
   165f8:	463a      	mov	r2, r7
   165fa:	2106      	movs	r1, #6
   165fc:	4628      	mov	r0, r5
   165fe:	f018 fe39 	bl	2f274 <send_err_rsp.part.0>
		return 0;
   16602:	2400      	movs	r4, #0
}
   16604:	4620      	mov	r0, r4
   16606:	b006      	add	sp, #24
   16608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1660c:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   16610:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   16614:	4601      	mov	r1, r0
   16616:	2214      	movs	r2, #20
   16618:	a801      	add	r0, sp, #4
   1661a:	f017 fd11 	bl	2e040 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1661e:	4632      	mov	r2, r6
   16620:	2107      	movs	r1, #7
   16622:	4640      	mov	r0, r8
   16624:	f7ff fd04 	bl	16030 <bt_att_create_pdu>
   16628:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1662a:	b1d8      	cbz	r0, 16664 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1662c:	230a      	movs	r3, #10
   1662e:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   16632:	4a0d      	ldr	r2, [pc, #52]	; (16668 <att_find_type_req+0xd0>)
	data.value_len = value_len;
   16634:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   16638:	ab01      	add	r3, sp, #4
   1663a:	4649      	mov	r1, r9
   1663c:	4638      	mov	r0, r7
	data.value = value;
   1663e:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   16642:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   16644:	f018 fb91 	bl	2ed6a <bt_gatt_foreach_attr>
	if (data.err) {
   16648:	f89d 4015 	ldrb.w	r4, [sp, #21]
   1664c:	b12c      	cbz	r4, 1665a <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   1664e:	9802      	ldr	r0, [sp, #8]
   16650:	f011 fb28 	bl	27ca4 <net_buf_unref>
	if (!req) {
   16654:	f89d 3015 	ldrb.w	r3, [sp, #21]
   16658:	e7ce      	b.n	165f8 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1665a:	9902      	ldr	r1, [sp, #8]
   1665c:	4628      	mov	r0, r5
   1665e:	f7ff f993 	bl	15988 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   16662:	e7cf      	b.n	16604 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   16664:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   16666:	e7cd      	b.n	16604 <att_find_type_req+0x6c>
   16668:	000156e9 	.word	0x000156e9

0001666c <att_find_info_req>:
{
   1666c:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1666e:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   16670:	881e      	ldrh	r6, [r3, #0]
{
   16672:	b085      	sub	sp, #20
   16674:	4605      	mov	r5, r0
	if (!start || !end) {
   16676:	b19e      	cbz	r6, 166a0 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   16678:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   1667a:	b184      	cbz	r4, 1669e <att_find_info_req+0x32>
	if (start > end) {
   1667c:	42a6      	cmp	r6, r4
   1667e:	d80f      	bhi.n	166a0 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   16680:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   16682:	2210      	movs	r2, #16
   16684:	2100      	movs	r1, #0
   16686:	4668      	mov	r0, sp
   16688:	f017 fcda 	bl	2e040 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1668c:	2200      	movs	r2, #0
   1668e:	2105      	movs	r1, #5
   16690:	4638      	mov	r0, r7
   16692:	f7ff fccd 	bl	16030 <bt_att_create_pdu>
   16696:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   16698:	b958      	cbnz	r0, 166b2 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1669a:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   1669c:	e007      	b.n	166ae <att_find_info_req+0x42>
			*err = 0U;
   1669e:	4626      	mov	r6, r4
	if (!req) {
   166a0:	2301      	movs	r3, #1
   166a2:	4632      	mov	r2, r6
   166a4:	2104      	movs	r1, #4
   166a6:	4628      	mov	r0, r5
   166a8:	f018 fde4 	bl	2f274 <send_err_rsp.part.0>
	return 0;
   166ac:	2000      	movs	r0, #0
}
   166ae:	b005      	add	sp, #20
   166b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   166b2:	4621      	mov	r1, r4
   166b4:	4a08      	ldr	r2, [pc, #32]	; (166d8 <att_find_info_req+0x6c>)
	data.chan = chan;
   166b6:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   166b8:	466b      	mov	r3, sp
   166ba:	4630      	mov	r0, r6
   166bc:	f018 fb55 	bl	2ed6a <bt_gatt_foreach_attr>
	if (!data.rsp) {
   166c0:	9c02      	ldr	r4, [sp, #8]
   166c2:	b924      	cbnz	r4, 166ce <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   166c4:	9801      	ldr	r0, [sp, #4]
   166c6:	f011 faed 	bl	27ca4 <net_buf_unref>
	if (!req) {
   166ca:	230a      	movs	r3, #10
   166cc:	e7e9      	b.n	166a2 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   166ce:	9901      	ldr	r1, [sp, #4]
   166d0:	4628      	mov	r0, r5
   166d2:	f7ff f959 	bl	15988 <bt_att_chan_send_rsp.constprop.0>
   166d6:	e7e9      	b.n	166ac <att_find_info_req+0x40>
   166d8:	0002ed81 	.word	0x0002ed81

000166dc <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   166dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   166de:	2300      	movs	r3, #0
{
   166e0:	4605      	mov	r5, r0
   166e2:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   166e4:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   166e6:	f014 fcd1 	bl	2b08c <z_impl_z_current_get>

	if (k_current_get() == bt_recv_thread_id) {
   166ea:	4b0b      	ldr	r3, [pc, #44]	; (16718 <bt_att_req_alloc+0x3c>)
   166ec:	681b      	ldr	r3, [r3, #0]
   166ee:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   166f0:	bf04      	itt	eq
   166f2:	2500      	moveq	r5, #0
   166f4:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   166f6:	a901      	add	r1, sp, #4
   166f8:	4808      	ldr	r0, [pc, #32]	; (1671c <bt_att_req_alloc+0x40>)
   166fa:	462a      	mov	r2, r5
   166fc:	4623      	mov	r3, r4
   166fe:	f013 fdd3 	bl	2a2a8 <k_mem_slab_alloc>
   16702:	4601      	mov	r1, r0
   16704:	b930      	cbnz	r0, 16714 <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   16706:	9801      	ldr	r0, [sp, #4]
   16708:	221c      	movs	r2, #28
   1670a:	f017 fc99 	bl	2e040 <memset>

	return req;
   1670e:	9801      	ldr	r0, [sp, #4]
}
   16710:	b003      	add	sp, #12
   16712:	bd30      	pop	{r4, r5, pc}
		return NULL;
   16714:	2000      	movs	r0, #0
   16716:	e7fb      	b.n	16710 <bt_att_req_alloc+0x34>
   16718:	20001e6c 	.word	0x20001e6c
   1671c:	20000b98 	.word	0x20000b98

00016720 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   16720:	b507      	push	{r0, r1, r2, lr}
   16722:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   16724:	6880      	ldr	r0, [r0, #8]
   16726:	b120      	cbz	r0, 16732 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   16728:	f011 fabc 	bl	27ca4 <net_buf_unref>
		req->buf = NULL;
   1672c:	9b01      	ldr	r3, [sp, #4]
   1672e:	2200      	movs	r2, #0
   16730:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   16732:	4803      	ldr	r0, [pc, #12]	; (16740 <bt_att_req_free+0x20>)
   16734:	a901      	add	r1, sp, #4
   16736:	f01a ff25 	bl	31584 <k_mem_slab_free>
}
   1673a:	b003      	add	sp, #12
   1673c:	f85d fb04 	ldr.w	pc, [sp], #4
   16740:	20000b98 	.word	0x20000b98

00016744 <att_handle_rsp>:
{
   16744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16748:	4604      	mov	r4, r0
   1674a:	b089      	sub	sp, #36	; 0x24
	k_work_cancel_delayable(&chan->timeout_work);
   1674c:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
   16750:	4689      	mov	r9, r1
   16752:	4692      	mov	sl, r2
   16754:	4698      	mov	r8, r3
	k_work_cancel_delayable(&chan->timeout_work);
   16756:	f01b f8e0 	bl	3191a <k_work_cancel_delayable>
	if (!chan->req) {
   1675a:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
   1675e:	b9d5      	cbnz	r5, 16796 <att_handle_rsp+0x52>
		BT_WARN("No pending ATT request");
   16760:	4b16      	ldr	r3, [pc, #88]	; (167bc <att_handle_rsp+0x78>)
   16762:	9306      	str	r3, [sp, #24]
   16764:	4816      	ldr	r0, [pc, #88]	; (167c0 <att_handle_rsp+0x7c>)
   16766:	2302      	movs	r3, #2
   16768:	aa05      	add	r2, sp, #20
   1676a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
	bt_att_func_t func = NULL;
   1676e:	462e      	mov	r6, r5
		BT_WARN("No pending ATT request");
   16770:	9305      	str	r3, [sp, #20]
   16772:	f018 fbd4 	bl	2ef1e <z_log_msg2_static_create.constprop.0>
	att_req_send_process(chan->att);
   16776:	6820      	ldr	r0, [r4, #0]
   16778:	f018 fd30 	bl	2f1dc <att_req_send_process>
	if (func) {
   1677c:	b13e      	cbz	r6, 1678e <att_handle_rsp+0x4a>
		func(chan->att->conn, err, pdu, len, params);
   1677e:	6820      	ldr	r0, [r4, #0]
   16780:	f8cd b000 	str.w	fp, [sp]
   16784:	6800      	ldr	r0, [r0, #0]
   16786:	4653      	mov	r3, sl
   16788:	464a      	mov	r2, r9
   1678a:	4641      	mov	r1, r8
   1678c:	47b0      	blx	r6
}
   1678e:	2000      	movs	r0, #0
   16790:	b009      	add	sp, #36	; 0x24
   16792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   16796:	4b0b      	ldr	r3, [pc, #44]	; (167c4 <att_handle_rsp+0x80>)
   16798:	429d      	cmp	r5, r3
   1679a:	f04f 0700 	mov.w	r7, #0
   1679e:	d103      	bne.n	167a8 <att_handle_rsp+0x64>
		chan->req = NULL;
   167a0:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
   167a4:	463e      	mov	r6, r7
		goto process;
   167a6:	e7e6      	b.n	16776 <att_handle_rsp+0x32>
	func = chan->req->func;
   167a8:	686e      	ldr	r6, [r5, #4]
	chan->req->func = NULL;
   167aa:	606f      	str	r7, [r5, #4]
	bt_att_req_free(chan->req);
   167ac:	4628      	mov	r0, r5
	params = chan->req->user_data;
   167ae:	f8d5 b018 	ldr.w	fp, [r5, #24]
	bt_att_req_free(chan->req);
   167b2:	f7ff ffb5 	bl	16720 <bt_att_req_free>
	chan->req = NULL;
   167b6:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
   167ba:	e7dc      	b.n	16776 <att_handle_rsp+0x32>
   167bc:	00035ded 	.word	0x00035ded
   167c0:	00032374 	.word	0x00032374
   167c4:	20001ed8 	.word	0x20001ed8

000167c8 <bt_att_disconnected>:
{
   167c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   167ca:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   167ce:	b085      	sub	sp, #20
   167d0:	4604      	mov	r4, r0
	if (!att_chan->att) {
   167d2:	2d00      	cmp	r5, #0
   167d4:	d055      	beq.n	16882 <bt_att_disconnected+0xba>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   167d6:	f500 719e 	add.w	r1, r0, #316	; 0x13c
   167da:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   167de:	f018 fbd7 	bl	2ef90 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   167e2:	f1a4 0608 	sub.w	r6, r4, #8
   167e6:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
   167ea:	2200      	movs	r2, #0
   167ec:	2300      	movs	r3, #0
   167ee:	4638      	mov	r0, r7
   167f0:	f01a f89b 	bl	3092a <net_buf_get>
   167f4:	4602      	mov	r2, r0
   167f6:	bb40      	cbnz	r0, 1684a <bt_att_disconnected+0x82>
	if (chan->req) {
   167f8:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   167fc:	b123      	cbz	r3, 16808 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   167fe:	4601      	mov	r1, r0
   16800:	230e      	movs	r3, #14
   16802:	4630      	mov	r0, r6
   16804:	f7ff ff9e 	bl	16744 <att_handle_rsp>
	chan->att = NULL;
   16808:	2300      	movs	r3, #0
   1680a:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   1680e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   16810:	2b00      	cmp	r3, #0
   16812:	d136      	bne.n	16882 <bt_att_disconnected+0xba>
	att_reset(att);
   16814:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_slist_get(&att->prep_queue))) {
   16816:	9803      	ldr	r0, [sp, #12]
   16818:	3024      	adds	r0, #36	; 0x24
   1681a:	f01a f8c1 	bl	309a0 <net_buf_slist_get>
   1681e:	b9b8      	cbnz	r0, 16850 <bt_att_disconnected+0x88>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   16820:	9803      	ldr	r0, [sp, #12]
   16822:	2200      	movs	r2, #0
   16824:	2300      	movs	r3, #0
   16826:	300c      	adds	r0, #12
   16828:	f01a f87f 	bl	3092a <net_buf_get>
   1682c:	b998      	cbnz	r0, 16856 <bt_att_disconnected+0x8e>
	while (!sys_slist_is_empty(&att->reqs)) {
   1682e:	9803      	ldr	r0, [sp, #12]
	return list->head;
   16830:	6845      	ldr	r5, [r0, #4]
   16832:	b99d      	cbnz	r5, 1685c <bt_att_disconnected+0x94>
	att->conn = NULL;
   16834:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   16836:	a903      	add	r1, sp, #12
   16838:	4813      	ldr	r0, [pc, #76]	; (16888 <bt_att_disconnected+0xc0>)
   1683a:	f01a fea3 	bl	31584 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   1683e:	6820      	ldr	r0, [r4, #0]
}
   16840:	b005      	add	sp, #20
   16842:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
   16846:	f001 bb81 	b.w	17f4c <bt_gatt_disconnected>
		net_buf_unref(buf);
   1684a:	f011 fa2b 	bl	27ca4 <net_buf_unref>
   1684e:	e7cc      	b.n	167ea <bt_att_disconnected+0x22>
		net_buf_unref(buf);
   16850:	f011 fa28 	bl	27ca4 <net_buf_unref>
   16854:	e7df      	b.n	16816 <bt_att_disconnected+0x4e>
		net_buf_unref(buf);
   16856:	f011 fa25 	bl	27ca4 <net_buf_unref>
   1685a:	e7e1      	b.n	16820 <bt_att_disconnected+0x58>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1685c:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
   1685e:	686e      	ldr	r6, [r5, #4]
	return node->next;
   16860:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   16862:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16864:	4295      	cmp	r5, r2
	list->tail = node;
   16866:	bf08      	it	eq
   16868:	6083      	streq	r3, [r0, #8]
   1686a:	b136      	cbz	r6, 1687a <bt_att_disconnected+0xb2>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1686c:	69ab      	ldr	r3, [r5, #24]
   1686e:	9300      	str	r3, [sp, #0]
   16870:	2300      	movs	r3, #0
   16872:	6800      	ldr	r0, [r0, #0]
   16874:	461a      	mov	r2, r3
   16876:	210e      	movs	r1, #14
   16878:	47b0      	blx	r6
		bt_att_req_free(req);
   1687a:	4628      	mov	r0, r5
   1687c:	f7ff ff50 	bl	16720 <bt_att_req_free>
   16880:	e7d5      	b.n	1682e <bt_att_disconnected+0x66>
}
   16882:	b005      	add	sp, #20
   16884:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16886:	bf00      	nop
   16888:	20000b60 	.word	0x20000b60

0001688c <att_timeout>:
{
   1688c:	b510      	push	{r4, lr}
   1688e:	b086      	sub	sp, #24
	BT_ERR("ATT Timeout");
   16890:	4b08      	ldr	r3, [pc, #32]	; (168b4 <att_timeout+0x28>)
   16892:	9304      	str	r3, [sp, #16]
{
   16894:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   16896:	2302      	movs	r3, #2
   16898:	4807      	ldr	r0, [pc, #28]	; (168b8 <att_timeout+0x2c>)
   1689a:	9303      	str	r3, [sp, #12]
   1689c:	aa03      	add	r2, sp, #12
   1689e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   168a2:	f018 fb3c 	bl	2ef1e <z_log_msg2_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   168a6:	f5a4 7084 	sub.w	r0, r4, #264	; 0x108
}
   168aa:	b006      	add	sp, #24
   168ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   168b0:	f7ff bf8a 	b.w	167c8 <bt_att_disconnected>
   168b4:	00035e04 	.word	0x00035e04
   168b8:	00032374 	.word	0x00032374

000168bc <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   168bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   168be:	4d0f      	ldr	r5, [pc, #60]	; (168fc <find_cf_cfg+0x40>)
   168c0:	4604      	mov	r4, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   168c2:	2700      	movs	r7, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   168c4:	462e      	mov	r6, r5

		if (!conn) {
   168c6:	1c68      	adds	r0, r5, #1
   168c8:	b964      	cbnz	r4, 168e4 <find_cf_cfg+0x28>
	return memcmp(a, b, sizeof(*a));
   168ca:	2207      	movs	r2, #7
   168cc:	4669      	mov	r1, sp
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   168ce:	9400      	str	r4, [sp, #0]
   168d0:	f8cd 4003 	str.w	r4, [sp, #3]
   168d4:	f017 fb98 	bl	2e008 <memcmp>
   168d8:	b958      	cbnz	r0, 168f2 <find_cf_cfg+0x36>
			return cfg;
		}
	}

	return NULL;
}
   168da:	4630      	mov	r0, r6
   168dc:	b003      	add	sp, #12
   168de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   168e0:	2701      	movs	r7, #1
   168e2:	e7ef      	b.n	168c4 <find_cf_cfg+0x8>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   168e4:	4602      	mov	r2, r0
   168e6:	7829      	ldrb	r1, [r5, #0]
   168e8:	4620      	mov	r0, r4
   168ea:	f018 f8d9 	bl	2eaa0 <bt_conn_is_peer_addr_le>
   168ee:	2800      	cmp	r0, #0
   168f0:	d1f3      	bne.n	168da <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   168f2:	3510      	adds	r5, #16
   168f4:	2f00      	cmp	r7, #0
   168f6:	d0f3      	beq.n	168e0 <find_cf_cfg+0x24>
	return NULL;
   168f8:	2600      	movs	r6, #0
   168fa:	e7ee      	b.n	168da <find_cf_cfg+0x1e>
   168fc:	20001efc 	.word	0x20001efc

00016900 <db_hash_commit>:

	return 0;
}

static int db_hash_commit(void)
{
   16900:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16902:	2108      	movs	r1, #8
   16904:	4804      	ldr	r0, [pc, #16]	; (16918 <db_hash_commit+0x18>)
   16906:	f018 febf 	bl	2f688 <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	k_work_reschedule(&db_hash.work, K_NO_WAIT);
   1690a:	2200      	movs	r2, #0
   1690c:	2300      	movs	r3, #0
   1690e:	4803      	ldr	r0, [pc, #12]	; (1691c <db_hash_commit+0x1c>)
   16910:	f014 f8c4 	bl	2aa9c <k_work_reschedule>

	return 0;
}
   16914:	2000      	movs	r0, #0
   16916:	bd08      	pop	{r3, pc}
   16918:	20001630 	.word	0x20001630
   1691c:	20001550 	.word	0x20001550

00016920 <bt_gatt_service_init.part.0>:
static void bt_gatt_service_init(void)
   16920:	4908      	ldr	r1, [pc, #32]	; (16944 <bt_gatt_service_init.part.0+0x24>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   16922:	4a09      	ldr	r2, [pc, #36]	; (16948 <bt_gatt_service_init.part.0+0x28>)
   16924:	880b      	ldrh	r3, [r1, #0]
static void bt_gatt_service_init(void)
   16926:	b510      	push	{r4, lr}
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   16928:	4c08      	ldr	r4, [pc, #32]	; (1694c <bt_gatt_service_init.part.0+0x2c>)
   1692a:	2000      	movs	r0, #0
   1692c:	42a2      	cmp	r2, r4
   1692e:	d302      	bcc.n	16936 <bt_gatt_service_init.part.0+0x16>
   16930:	b100      	cbz	r0, 16934 <bt_gatt_service_init.part.0+0x14>
   16932:	800b      	strh	r3, [r1, #0]
}
   16934:	bd10      	pop	{r4, pc}
		last_static_handle += svc->attr_count;
   16936:	6850      	ldr	r0, [r2, #4]
   16938:	4403      	add	r3, r0
   1693a:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1693c:	3208      	adds	r2, #8
   1693e:	2001      	movs	r0, #1
   16940:	e7f4      	b.n	1692c <bt_gatt_service_init.part.0+0xc>
   16942:	bf00      	nop
   16944:	20003292 	.word	0x20003292
   16948:	000322ac 	.word	0x000322ac
   1694c:	000322e4 	.word	0x000322e4

00016950 <gatt_ccc_conn_enqueue>:
{
   16950:	b570      	push	{r4, r5, r6, lr}
   16952:	4604      	mov	r4, r0
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   16954:	f7fe fa18 	bl	14d88 <bt_conn_index>
   16958:	4d0e      	ldr	r5, [pc, #56]	; (16994 <gatt_ccc_conn_enqueue+0x44>)
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   1695a:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
   1695e:	429c      	cmp	r4, r3
   16960:	d017      	beq.n	16992 <gatt_ccc_conn_enqueue+0x42>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   16962:	7a20      	ldrb	r0, [r4, #8]
   16964:	f104 0188 	add.w	r1, r4, #136	; 0x88
   16968:	f017 fd90 	bl	2e48c <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   1696c:	b188      	cbz	r0, 16992 <gatt_ccc_conn_enqueue+0x42>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   1696e:	4620      	mov	r0, r4
   16970:	f7fe fa0a 	bl	14d88 <bt_conn_index>
   16974:	4606      	mov	r6, r0
			bt_conn_ref(conn);
   16976:	4620      	mov	r0, r4
   16978:	f017 ffdc 	bl	2e934 <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   1697c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   16980:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   16984:	2300      	movs	r3, #0
   16986:	f105 0008 	add.w	r0, r5, #8
}
   1698a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   1698e:	f014 b885 	b.w	2aa9c <k_work_reschedule>
}
   16992:	bd70      	pop	{r4, r5, r6, pc}
   16994:	200015a8 	.word	0x200015a8

00016998 <ccc_set_direct.part.0>:
static int ccc_set_direct(const char *key, size_t len, settings_read_cb read_cb,
   16998:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			BT_ERR("Invalid key");
   1699a:	4b07      	ldr	r3, [pc, #28]	; (169b8 <ccc_set_direct.part.0+0x20>)
   1699c:	9304      	str	r3, [sp, #16]
   1699e:	4807      	ldr	r0, [pc, #28]	; (169bc <ccc_set_direct.part.0+0x24>)
   169a0:	2302      	movs	r3, #2
   169a2:	aa03      	add	r2, sp, #12
   169a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   169a8:	9303      	str	r3, [sp, #12]
   169aa:	f018 feb0 	bl	2f70e <z_log_msg2_static_create.constprop.0>
}
   169ae:	f06f 0015 	mvn.w	r0, #21
   169b2:	b007      	add	sp, #28
   169b4:	f85d fb04 	ldr.w	pc, [sp], #4
   169b8:	00035e17 	.word	0x00035e17
   169bc:	00032444 	.word	0x00032444

000169c0 <sc_store>:
{
   169c0:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   169c2:	4605      	mov	r5, r0
{
   169c4:	b092      	sub	sp, #72	; 0x48
	if (cfg->id) {
   169c6:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   169ca:	4604      	mov	r4, r0
	if (cfg->id) {
   169cc:	b302      	cbz	r2, 16a10 <sc_store+0x50>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   169ce:	ae02      	add	r6, sp, #8
   169d0:	2104      	movs	r1, #4
   169d2:	4630      	mov	r0, r6
   169d4:	f014 ff2e 	bl	2b834 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   169d8:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   169da:	2124      	movs	r1, #36	; 0x24
   169dc:	eb0d 0001 	add.w	r0, sp, r1
   169e0:	4a0c      	ldr	r2, [pc, #48]	; (16a14 <sc_store+0x54>)
   169e2:	462b      	mov	r3, r5
   169e4:	f7fb f804 	bl	119f0 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   169e8:	2204      	movs	r2, #4
   169ea:	f104 0108 	add.w	r1, r4, #8
   169ee:	a809      	add	r0, sp, #36	; 0x24
   169f0:	f7f9 fa04 	bl	fdfc <settings_save_one>
	if (err) {
   169f4:	b150      	cbz	r0, 16a0c <sc_store+0x4c>
		BT_ERR("failed to store SC (err %d)", err);
   169f6:	4b08      	ldr	r3, [pc, #32]	; (16a18 <sc_store+0x58>)
   169f8:	aa05      	add	r2, sp, #20
   169fa:	e9cd 3006 	strd	r3, r0, [sp, #24]
   169fe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16a02:	2303      	movs	r3, #3
   16a04:	4805      	ldr	r0, [pc, #20]	; (16a1c <sc_store+0x5c>)
   16a06:	9305      	str	r3, [sp, #20]
   16a08:	f018 fe81 	bl	2f70e <z_log_msg2_static_create.constprop.0>
}
   16a0c:	b012      	add	sp, #72	; 0x48
   16a0e:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   16a10:	9200      	str	r2, [sp, #0]
   16a12:	e7e2      	b.n	169da <sc_store+0x1a>
   16a14:	000360ed 	.word	0x000360ed
   16a18:	00035e23 	.word	0x00035e23
   16a1c:	00032444 	.word	0x00032444

00016a20 <cf_write>:
{
   16a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16a24:	b086      	sub	sp, #24
   16a26:	4698      	mov	r8, r3
   16a28:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	if (offset > sizeof(cfg->data)) {
   16a2c:	2b01      	cmp	r3, #1
{
   16a2e:	4606      	mov	r6, r0
   16a30:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   16a32:	d83e      	bhi.n	16ab2 <cf_write+0x92>
	if (offset + len > sizeof(cfg->data)) {
   16a34:	4443      	add	r3, r8
   16a36:	2b01      	cmp	r3, #1
   16a38:	4645      	mov	r5, r8
   16a3a:	dc3d      	bgt.n	16ab8 <cf_write+0x98>
	cfg = find_cf_cfg(conn);
   16a3c:	f7ff ff3e 	bl	168bc <find_cf_cfg>
	if (!cfg) {
   16a40:	4604      	mov	r4, r0
   16a42:	b918      	cbnz	r0, 16a4c <cf_write+0x2c>
		cfg = find_cf_cfg(NULL);
   16a44:	f7ff ff3a 	bl	168bc <find_cf_cfg>
	if (!cfg) {
   16a48:	4604      	mov	r4, r0
   16a4a:	b180      	cbz	r0, 16a6e <cf_write+0x4e>
{
   16a4c:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   16a4e:	f1b8 0f00 	cmp.w	r8, #0
   16a52:	d11c      	bne.n	16a8e <cf_write+0x6e>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   16a54:	f106 0188 	add.w	r1, r6, #136	; 0x88
   16a58:	1c60      	adds	r0, r4, #1
   16a5a:	f018 fd87 	bl	2f56c <bt_addr_le_copy>
	cfg->id = conn->id;
   16a5e:	4620      	mov	r0, r4
   16a60:	7a33      	ldrb	r3, [r6, #8]
   16a62:	f800 3b0c 	strb.w	r3, [r0], #12
   16a66:	2101      	movs	r1, #1
   16a68:	f018 fe0e 	bl	2f688 <atomic_or>
}
   16a6c:	e00b      	b.n	16a86 <cf_write+0x66>
		BT_WARN("No space to store Client Supported Features");
   16a6e:	4b15      	ldr	r3, [pc, #84]	; (16ac4 <cf_write+0xa4>)
   16a70:	9304      	str	r3, [sp, #16]
   16a72:	4815      	ldr	r0, [pc, #84]	; (16ac8 <cf_write+0xa8>)
   16a74:	2302      	movs	r3, #2
   16a76:	aa03      	add	r2, sp, #12
   16a78:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   16a7c:	f06f 0510 	mvn.w	r5, #16
		BT_WARN("No space to store Client Supported Features");
   16a80:	9303      	str	r3, [sp, #12]
   16a82:	f018 fe44 	bl	2f70e <z_log_msg2_static_create.constprop.0>
}
   16a86:	4628      	mov	r0, r5
   16a88:	b006      	add	sp, #24
   16a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   16a8e:	7a20      	ldrb	r0, [r4, #8]
   16a90:	fa20 f301 	lsr.w	r3, r0, r1
   16a94:	07da      	lsls	r2, r3, #31
   16a96:	d503      	bpl.n	16aa0 <cf_write+0x80>
		    !(value[i / 8] & BIT(i % 8))) {
   16a98:	783b      	ldrb	r3, [r7, #0]
   16a9a:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   16a9c:	07db      	lsls	r3, r3, #31
   16a9e:	d50e      	bpl.n	16abe <cf_write+0x9e>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   16aa0:	3101      	adds	r1, #1
   16aa2:	2903      	cmp	r1, #3
   16aa4:	d1d3      	bne.n	16a4e <cf_write+0x2e>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   16aa6:	783b      	ldrb	r3, [r7, #0]
   16aa8:	f003 0307 	and.w	r3, r3, #7
   16aac:	4318      	orrs	r0, r3
   16aae:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   16ab0:	e7d0      	b.n	16a54 <cf_write+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   16ab2:	f06f 0506 	mvn.w	r5, #6
   16ab6:	e7e6      	b.n	16a86 <cf_write+0x66>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   16ab8:	f06f 050c 	mvn.w	r5, #12
   16abc:	e7e3      	b.n	16a86 <cf_write+0x66>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   16abe:	f06f 0512 	mvn.w	r5, #18
   16ac2:	e7e0      	b.n	16a86 <cf_write+0x66>
   16ac4:	00035e3f 	.word	0x00035e3f
   16ac8:	00032444 	.word	0x00032444

00016acc <db_hash_store>:
{
   16acc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   16ace:	490a      	ldr	r1, [pc, #40]	; (16af8 <db_hash_store+0x2c>)
   16ad0:	480a      	ldr	r0, [pc, #40]	; (16afc <db_hash_store+0x30>)
   16ad2:	2210      	movs	r2, #16
   16ad4:	f7f9 f992 	bl	fdfc <settings_save_one>
	if (err) {
   16ad8:	b150      	cbz	r0, 16af0 <db_hash_store+0x24>
		BT_ERR("Failed to save Database Hash (err %d)", err);
   16ada:	4b09      	ldr	r3, [pc, #36]	; (16b00 <db_hash_store+0x34>)
   16adc:	aa03      	add	r2, sp, #12
   16ade:	e9cd 3004 	strd	r3, r0, [sp, #16]
   16ae2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16ae6:	2303      	movs	r3, #3
   16ae8:	4806      	ldr	r0, [pc, #24]	; (16b04 <db_hash_store+0x38>)
   16aea:	9303      	str	r3, [sp, #12]
   16aec:	f018 fe0f 	bl	2f70e <z_log_msg2_static_create.constprop.0>
}
   16af0:	b007      	add	sp, #28
   16af2:	f85d fb04 	ldr.w	pc, [sp], #4
   16af6:	bf00      	nop
   16af8:	20001530 	.word	0x20001530
   16afc:	00035e6b 	.word	0x00035e6b
   16b00:	00035e73 	.word	0x00035e73
   16b04:	00032444 	.word	0x00032444

00016b08 <db_hash_set>:
{
   16b08:	b510      	push	{r4, lr}
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   16b0a:	490c      	ldr	r1, [pc, #48]	; (16b3c <db_hash_set+0x34>)
{
   16b0c:	4614      	mov	r4, r2
   16b0e:	b086      	sub	sp, #24
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   16b10:	2210      	movs	r2, #16
   16b12:	4618      	mov	r0, r3
   16b14:	47a0      	blx	r4
	if (len < 0) {
   16b16:	1e04      	subs	r4, r0, #0
   16b18:	da0d      	bge.n	16b36 <db_hash_set+0x2e>
		BT_ERR("Failed to decode value (err %zd)", len);
   16b1a:	4b09      	ldr	r3, [pc, #36]	; (16b40 <db_hash_set+0x38>)
   16b1c:	4809      	ldr	r0, [pc, #36]	; (16b44 <db_hash_set+0x3c>)
   16b1e:	e9cd 3404 	strd	r3, r4, [sp, #16]
   16b22:	aa03      	add	r2, sp, #12
   16b24:	2303      	movs	r3, #3
   16b26:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16b2a:	9303      	str	r3, [sp, #12]
   16b2c:	f018 fdef 	bl	2f70e <z_log_msg2_static_create.constprop.0>
}
   16b30:	4620      	mov	r0, r4
   16b32:	b006      	add	sp, #24
   16b34:	bd10      	pop	{r4, pc}
	return 0;
   16b36:	2400      	movs	r4, #0
   16b38:	e7fa      	b.n	16b30 <db_hash_set+0x28>
   16b3a:	bf00      	nop
   16b3c:	20001540 	.word	0x20001540
   16b40:	00035e99 	.word	0x00035e99
   16b44:	00032444 	.word	0x00032444

00016b48 <sc_indicate>:
{
   16b48:	b570      	push	{r4, r5, r6, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   16b4a:	4c12      	ldr	r4, [pc, #72]	; (16b94 <sc_indicate+0x4c>)
   16b4c:	4606      	mov	r6, r0
   16b4e:	460d      	mov	r5, r1
   16b50:	f104 0050 	add.w	r0, r4, #80	; 0x50
   16b54:	2101      	movs	r1, #1
   16b56:	f018 fd97 	bl	2f688 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   16b5a:	07c2      	lsls	r2, r0, #31
   16b5c:	d40e      	bmi.n	16b7c <sc_indicate+0x34>
		gatt_sc.start = start;
   16b5e:	8326      	strh	r6, [r4, #24]
		*end = new_end;
   16b60:	8365      	strh	r5, [r4, #26]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16b62:	480d      	ldr	r0, [pc, #52]	; (16b98 <sc_indicate+0x50>)
   16b64:	f018 fd35 	bl	2f5d2 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   16b68:	0783      	lsls	r3, r0, #30
   16b6a:	d40d      	bmi.n	16b88 <sc_indicate+0x40>
}
   16b6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&gatt_sc.work, timeout);
   16b70:	480a      	ldr	r0, [pc, #40]	; (16b9c <sc_indicate+0x54>)
   16b72:	f44f 72a4 	mov.w	r2, #328	; 0x148
   16b76:	2300      	movs	r3, #0
   16b78:	f013 bf90 	b.w	2aa9c <k_work_reschedule>
	if (new_start >= *start && new_end <= *end) {
   16b7c:	8b22      	ldrh	r2, [r4, #24]
   16b7e:	8b63      	ldrh	r3, [r4, #26]
   16b80:	42b2      	cmp	r2, r6
   16b82:	d802      	bhi.n	16b8a <sc_indicate+0x42>
   16b84:	42ab      	cmp	r3, r5
   16b86:	d3eb      	bcc.n	16b60 <sc_indicate+0x18>
}
   16b88:	bd70      	pop	{r4, r5, r6, pc}
	if (*end < new_end) {
   16b8a:	42ab      	cmp	r3, r5
		*start = new_start;
   16b8c:	8326      	strh	r6, [r4, #24]
	if (*end < new_end) {
   16b8e:	d2e8      	bcs.n	16b62 <sc_indicate+0x1a>
   16b90:	e7e6      	b.n	16b60 <sc_indicate+0x18>
   16b92:	bf00      	nop
   16b94:	200015e0 	.word	0x200015e0
   16b98:	20001630 	.word	0x20001630
   16b9c:	20001600 	.word	0x20001600

00016ba0 <sc_commit>:
{
   16ba0:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16ba2:	4809      	ldr	r0, [pc, #36]	; (16bc8 <sc_commit+0x28>)
   16ba4:	f06f 0102 	mvn.w	r1, #2
   16ba8:	f018 fd7d 	bl	2f6a6 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16bac:	4806      	ldr	r0, [pc, #24]	; (16bc8 <sc_commit+0x28>)
   16bae:	f018 fd10 	bl	2f5d2 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   16bb2:	07c3      	lsls	r3, r0, #31
   16bb4:	d505      	bpl.n	16bc2 <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   16bb6:	4805      	ldr	r0, [pc, #20]	; (16bcc <sc_commit+0x2c>)
   16bb8:	f44f 72a4 	mov.w	r2, #328	; 0x148
   16bbc:	2300      	movs	r3, #0
   16bbe:	f013 ff6d 	bl	2aa9c <k_work_reschedule>
}
   16bc2:	2000      	movs	r0, #0
   16bc4:	bd08      	pop	{r3, pc}
   16bc6:	bf00      	nop
   16bc8:	20001630 	.word	0x20001630
   16bcc:	20001600 	.word	0x20001600

00016bd0 <find_cf_cfg_by_addr>:
{
   16bd0:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
   16bd2:	4c0e      	ldr	r4, [pc, #56]	; (16c0c <find_cf_cfg_by_addr+0x3c>)
   16bd4:	7823      	ldrb	r3, [r4, #0]
   16bd6:	4283      	cmp	r3, r0
{
   16bd8:	4606      	mov	r6, r0
   16bda:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   16bdc:	d00a      	beq.n	16bf4 <find_cf_cfg_by_addr+0x24>
   16bde:	7c23      	ldrb	r3, [r4, #16]
   16be0:	42b3      	cmp	r3, r6
   16be2:	d111      	bne.n	16c08 <find_cf_cfg_by_addr+0x38>
   16be4:	490a      	ldr	r1, [pc, #40]	; (16c10 <find_cf_cfg_by_addr+0x40>)
   16be6:	2207      	movs	r2, #7
   16be8:	4628      	mov	r0, r5
   16bea:	f017 fa0d 	bl	2e008 <memcmp>
   16bee:	b958      	cbnz	r0, 16c08 <find_cf_cfg_by_addr+0x38>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   16bf0:	2001      	movs	r0, #1
   16bf2:	e006      	b.n	16c02 <find_cf_cfg_by_addr+0x32>
   16bf4:	2207      	movs	r2, #7
   16bf6:	1c61      	adds	r1, r4, #1
   16bf8:	4628      	mov	r0, r5
   16bfa:	f017 fa05 	bl	2e008 <memcmp>
			if (id == cf_cfg[i].id &&
   16bfe:	2800      	cmp	r0, #0
   16c00:	d1ed      	bne.n	16bde <find_cf_cfg_by_addr+0xe>
				return &cf_cfg[i];
   16c02:	eb04 1000 	add.w	r0, r4, r0, lsl #4
   16c06:	e000      	b.n	16c0a <find_cf_cfg_by_addr+0x3a>
	return NULL;
   16c08:	2000      	movs	r0, #0
}
   16c0a:	bd70      	pop	{r4, r5, r6, pc}
   16c0c:	20001efc 	.word	0x20001efc
   16c10:	20001f0d 	.word	0x20001f0d

00016c14 <cf_set>:
{
   16c14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16c18:	b08b      	sub	sp, #44	; 0x2c
   16c1a:	4689      	mov	r9, r1
   16c1c:	af00      	add	r7, sp, #0
   16c1e:	4616      	mov	r6, r2
   16c20:	4698      	mov	r8, r3
	if (!name) {
   16c22:	4605      	mov	r5, r0
   16c24:	b958      	cbnz	r0, 16c3e <cf_set+0x2a>
		BT_ERR("Insufficient number of arguments");
   16c26:	4b3d      	ldr	r3, [pc, #244]	; (16d1c <cf_set+0x108>)
   16c28:	623b      	str	r3, [r7, #32]
   16c2a:	2302      	movs	r3, #2
   16c2c:	61fb      	str	r3, [r7, #28]
   16c2e:	f107 021c 	add.w	r2, r7, #28
   16c32:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			BT_ERR("Invalid local identity %lu", next_id);
   16c36:	483a      	ldr	r0, [pc, #232]	; (16d20 <cf_set+0x10c>)
   16c38:	f018 fd69 	bl	2f70e <z_log_msg2_static_create.constprop.0>
			return -EINVAL;
   16c3c:	e016      	b.n	16c6c <cf_set+0x58>
	err = bt_settings_decode_key(name, &addr);
   16c3e:	f107 0108 	add.w	r1, r7, #8
   16c42:	f017 faa7 	bl	2e194 <bt_settings_decode_key>
	if (err) {
   16c46:	4604      	mov	r4, r0
   16c48:	b1b8      	cbz	r0, 16c7a <cf_set+0x66>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   16c4a:	4b36      	ldr	r3, [pc, #216]	; (16d24 <cf_set+0x110>)
   16c4c:	4834      	ldr	r0, [pc, #208]	; (16d20 <cf_set+0x10c>)
   16c4e:	466c      	mov	r4, sp
   16c50:	b088      	sub	sp, #32
   16c52:	466a      	mov	r2, sp
   16c54:	e9c2 3504 	strd	r3, r5, [r2, #16]
   16c58:	2302      	movs	r3, #2
   16c5a:	7613      	strb	r3, [r2, #24]
   16c5c:	4b32      	ldr	r3, [pc, #200]	; (16d28 <cf_set+0x114>)
   16c5e:	f842 3f0c 	str.w	r3, [r2, #12]!
   16c62:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   16c66:	f018 fd52 	bl	2f70e <z_log_msg2_static_create.constprop.0>
   16c6a:	46a5      	mov	sp, r4
		return -EINVAL;
   16c6c:	f06f 0415 	mvn.w	r4, #21
}
   16c70:	4620      	mov	r0, r4
   16c72:	372c      	adds	r7, #44	; 0x2c
   16c74:	46bd      	mov	sp, r7
   16c76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	settings_name_next(name, &next);
   16c7a:	1d39      	adds	r1, r7, #4
   16c7c:	4628      	mov	r0, r5
   16c7e:	f015 ff19 	bl	2cab4 <settings_name_next>
	if (!next) {
   16c82:	6878      	ldr	r0, [r7, #4]
   16c84:	b170      	cbz	r0, 16ca4 <cf_set+0x90>
		unsigned long next_id = strtoul(next, NULL, 10);
   16c86:	220a      	movs	r2, #10
   16c88:	4621      	mov	r1, r4
   16c8a:	f017 f8fb 	bl	2de84 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   16c8e:	b148      	cbz	r0, 16ca4 <cf_set+0x90>
			BT_ERR("Invalid local identity %lu", next_id);
   16c90:	4b26      	ldr	r3, [pc, #152]	; (16d2c <cf_set+0x118>)
   16c92:	e9c7 3008 	strd	r3, r0, [r7, #32]
   16c96:	2303      	movs	r3, #3
   16c98:	61fb      	str	r3, [r7, #28]
   16c9a:	f107 021c 	add.w	r2, r7, #28
   16c9e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16ca2:	e7c8      	b.n	16c36 <cf_set+0x22>
	cfg = find_cf_cfg_by_addr(id, &addr);
   16ca4:	f107 0108 	add.w	r1, r7, #8
   16ca8:	2000      	movs	r0, #0
   16caa:	f7ff ff91 	bl	16bd0 <find_cf_cfg_by_addr>
	if (!cfg) {
   16cae:	4605      	mov	r5, r0
   16cb0:	b9c0      	cbnz	r0, 16ce4 <cf_set+0xd0>
		cfg = find_cf_cfg(NULL);
   16cb2:	f7ff fe03 	bl	168bc <find_cf_cfg>
		if (!cfg) {
   16cb6:	4605      	mov	r5, r0
   16cb8:	b968      	cbnz	r0, 16cd6 <cf_set+0xc2>
			BT_ERR("Unable to restore CF: no cfg left");
   16cba:	4b1d      	ldr	r3, [pc, #116]	; (16d30 <cf_set+0x11c>)
   16cbc:	623b      	str	r3, [r7, #32]
   16cbe:	4818      	ldr	r0, [pc, #96]	; (16d20 <cf_set+0x10c>)
   16cc0:	2302      	movs	r3, #2
   16cc2:	f107 021c 	add.w	r2, r7, #28
   16cc6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16cca:	61fb      	str	r3, [r7, #28]
			return -ENOMEM;
   16ccc:	f06f 040b 	mvn.w	r4, #11
			BT_ERR("Unable to restore CF: no cfg left");
   16cd0:	f018 fd1d 	bl	2f70e <z_log_msg2_static_create.constprop.0>
			return -ENOMEM;
   16cd4:	e7cc      	b.n	16c70 <cf_set+0x5c>
		cfg->id = id;
   16cd6:	2300      	movs	r3, #0
   16cd8:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   16cdc:	f107 0108 	add.w	r1, r7, #8
   16ce0:	f018 fc44 	bl	2f56c <bt_addr_le_copy>
	if (len_rd) {
   16ce4:	f1b9 0f00 	cmp.w	r9, #0
   16ce8:	d014      	beq.n	16d14 <cf_set+0x100>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   16cea:	f105 0108 	add.w	r1, r5, #8
   16cee:	2201      	movs	r2, #1
   16cf0:	4640      	mov	r0, r8
   16cf2:	47b0      	blx	r6
		if (len < 0) {
   16cf4:	1e05      	subs	r5, r0, #0
   16cf6:	dabb      	bge.n	16c70 <cf_set+0x5c>
			BT_ERR("Failed to decode value (err %zd)", len);
   16cf8:	4b0e      	ldr	r3, [pc, #56]	; (16d34 <cf_set+0x120>)
   16cfa:	4809      	ldr	r0, [pc, #36]	; (16d20 <cf_set+0x10c>)
   16cfc:	e9c7 3508 	strd	r3, r5, [r7, #32]
   16d00:	f107 021c 	add.w	r2, r7, #28
   16d04:	2303      	movs	r3, #3
   16d06:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16d0a:	61fb      	str	r3, [r7, #28]
			return len;
   16d0c:	462c      	mov	r4, r5
			BT_ERR("Failed to decode value (err %zd)", len);
   16d0e:	f018 fcfe 	bl	2f70e <z_log_msg2_static_create.constprop.0>
			return len;
   16d12:	e7ad      	b.n	16c70 <cf_set+0x5c>
		clear_cf_cfg(cfg);
   16d14:	4628      	mov	r0, r5
   16d16:	f018 fcfd 	bl	2f714 <clear_cf_cfg>
   16d1a:	e7a9      	b.n	16c70 <cf_set+0x5c>
   16d1c:	00034be5 	.word	0x00034be5
   16d20:	00032444 	.word	0x00032444
   16d24:	00035eba 	.word	0x00035eba
   16d28:	01000003 	.word	0x01000003
   16d2c:	00035ed6 	.word	0x00035ed6
   16d30:	00035ef1 	.word	0x00035ef1
   16d34:	00035e99 	.word	0x00035e99

00016d38 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   16d38:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   16d3a:	6881      	ldr	r1, [r0, #8]
{
   16d3c:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   16d3e:	4a07      	ldr	r2, [pc, #28]	; (16d5c <remove_peer_from_attr+0x24>)
   16d40:	4291      	cmp	r1, r2
   16d42:	d109      	bne.n	16d58 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   16d44:	791a      	ldrb	r2, [r3, #4]
   16d46:	6819      	ldr	r1, [r3, #0]
   16d48:	68c0      	ldr	r0, [r0, #12]
   16d4a:	f018 fdab 	bl	2f8a4 <ccc_find_cfg>
	if (cfg) {
   16d4e:	b118      	cbz	r0, 16d58 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   16d50:	220a      	movs	r2, #10
   16d52:	2100      	movs	r1, #0
   16d54:	f017 f974 	bl	2e040 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   16d58:	2001      	movs	r0, #1
   16d5a:	bd08      	pop	{r3, pc}
   16d5c:	00016e25 	.word	0x00016e25

00016d60 <ccc_save>:
{
   16d60:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   16d62:	4b0c      	ldr	r3, [pc, #48]	; (16d94 <ccc_save+0x34>)
{
   16d64:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   16d66:	6882      	ldr	r2, [r0, #8]
   16d68:	429a      	cmp	r2, r3
{
   16d6a:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   16d6c:	d10f      	bne.n	16d8e <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   16d6e:	7922      	ldrb	r2, [r4, #4]
   16d70:	6821      	ldr	r1, [r4, #0]
   16d72:	68c0      	ldr	r0, [r0, #12]
   16d74:	f018 fd96 	bl	2f8a4 <ccc_find_cfg>
	if (!cfg) {
   16d78:	b148      	cbz	r0, 16d8e <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   16d7a:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   16d7e:	8901      	ldrh	r1, [r0, #8]
   16d80:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   16d84:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   16d86:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   16d88:	8151      	strh	r1, [r2, #10]
	save->count++;
   16d8a:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   16d8e:	2001      	movs	r0, #1
   16d90:	bd38      	pop	{r3, r4, r5, pc}
   16d92:	bf00      	nop
   16d94:	00016e25 	.word	0x00016e25

00016d98 <ccc_load>:
{
   16d98:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   16d9a:	4b21      	ldr	r3, [pc, #132]	; (16e20 <ccc_load+0x88>)
{
   16d9c:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   16d9e:	6882      	ldr	r2, [r0, #8]
   16da0:	429a      	cmp	r2, r3
   16da2:	d002      	beq.n	16daa <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   16da4:	2001      	movs	r0, #1
}
   16da6:	b002      	add	sp, #8
   16da8:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   16daa:	68a3      	ldr	r3, [r4, #8]
   16dac:	68c6      	ldr	r6, [r0, #12]
   16dae:	b94b      	cbnz	r3, 16dc4 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   16db0:	7922      	ldrb	r2, [r4, #4]
   16db2:	6821      	ldr	r1, [r4, #0]
   16db4:	4630      	mov	r0, r6
   16db6:	f018 fd75 	bl	2f8a4 <ccc_find_cfg>
	if (!cfg) {
   16dba:	2800      	cmp	r0, #0
   16dbc:	d0f2      	beq.n	16da4 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   16dbe:	f018 fbd8 	bl	2f572 <clear_ccc_cfg>
   16dc2:	e7ef      	b.n	16da4 <ccc_load+0xc>
	} else if (!load->count) {
   16dc4:	68e0      	ldr	r0, [r4, #12]
   16dc6:	2800      	cmp	r0, #0
   16dc8:	d0ed      	beq.n	16da6 <ccc_load+0xe>
	if (load->entry->handle != handle) {
   16dca:	881b      	ldrh	r3, [r3, #0]
   16dcc:	4299      	cmp	r1, r3
   16dce:	d00a      	beq.n	16de6 <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   16dd0:	d9e8      	bls.n	16da4 <ccc_load+0xc>
	load->count--;
   16dd2:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   16dd4:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   16dd6:	3801      	subs	r0, #1
	load->entry++;
   16dd8:	3304      	adds	r3, #4
	load->count--;
   16dda:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   16ddc:	3800      	subs	r0, #0
	load->entry++;
   16dde:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   16de0:	bf18      	it	ne
   16de2:	2001      	movne	r0, #1
   16de4:	e7df      	b.n	16da6 <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   16de6:	7922      	ldrb	r2, [r4, #4]
   16de8:	6821      	ldr	r1, [r4, #0]
   16dea:	4630      	mov	r0, r6
   16dec:	f018 fd5a 	bl	2f8a4 <ccc_find_cfg>
	if (!cfg) {
   16df0:	4605      	mov	r5, r0
   16df2:	b980      	cbnz	r0, 16e16 <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   16df4:	9000      	str	r0, [sp, #0]
   16df6:	4602      	mov	r2, r0
   16df8:	f8cd 0003 	str.w	r0, [sp, #3]
   16dfc:	4669      	mov	r1, sp
   16dfe:	4630      	mov	r0, r6
   16e00:	f018 fd50 	bl	2f8a4 <ccc_find_cfg>
		if (!cfg) {
   16e04:	4605      	mov	r5, r0
   16e06:	2800      	cmp	r0, #0
   16e08:	d0e3      	beq.n	16dd2 <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   16e0a:	6821      	ldr	r1, [r4, #0]
   16e0c:	3001      	adds	r0, #1
   16e0e:	f018 fbad 	bl	2f56c <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   16e12:	7923      	ldrb	r3, [r4, #4]
   16e14:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   16e16:	68a3      	ldr	r3, [r4, #8]
   16e18:	885b      	ldrh	r3, [r3, #2]
   16e1a:	812b      	strh	r3, [r5, #8]
   16e1c:	e7d9      	b.n	16dd2 <ccc_load+0x3a>
   16e1e:	bf00      	nop
   16e20:	00016e25 	.word	0x00016e25

00016e24 <bt_gatt_attr_write_ccc>:
{
   16e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16e28:	b086      	sub	sp, #24
   16e2a:	4698      	mov	r8, r3
   16e2c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	struct _bt_gatt_ccc *ccc = attr->user_data;
   16e30:	f8d1 a00c 	ldr.w	sl, [r1, #12]
{
   16e34:	4607      	mov	r7, r0
   16e36:	4689      	mov	r9, r1
	if (offset) {
   16e38:	2b00      	cmp	r3, #0
   16e3a:	d150      	bne.n	16ede <bt_gatt_attr_write_ccc+0xba>
	if (!len || len > sizeof(uint16_t)) {
   16e3c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   16e40:	2b01      	cmp	r3, #1
   16e42:	d84f      	bhi.n	16ee4 <bt_gatt_attr_write_ccc+0xc0>
		value = *(uint8_t *)buf;
   16e44:	7816      	ldrb	r6, [r2, #0]
	if (len < sizeof(uint16_t)) {
   16e46:	f1b8 0f01 	cmp.w	r8, #1
	cfg = find_ccc_cfg(conn, ccc);
   16e4a:	4651      	mov	r1, sl
   16e4c:	bf14      	ite	ne
   16e4e:	8816      	ldrhne	r6, [r2, #0]
		value = *(uint8_t *)buf;
   16e50:	b2b6      	uxtheq	r6, r6
	cfg = find_ccc_cfg(conn, ccc);
   16e52:	f018 fd36 	bl	2f8c2 <find_ccc_cfg>
	if (!cfg) {
   16e56:	4605      	mov	r5, r0
   16e58:	b9e8      	cbnz	r0, 16e96 <bt_gatt_attr_write_ccc+0x72>
		if (!value) {
   16e5a:	b91e      	cbnz	r6, 16e64 <bt_gatt_attr_write_ccc+0x40>
			return len;
   16e5c:	4640      	mov	r0, r8
}
   16e5e:	b006      	add	sp, #24
   16e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   16e64:	4651      	mov	r1, sl
   16e66:	f018 fd2c 	bl	2f8c2 <find_ccc_cfg>
		if (!cfg) {
   16e6a:	4605      	mov	r5, r0
   16e6c:	b960      	cbnz	r0, 16e88 <bt_gatt_attr_write_ccc+0x64>
			BT_WARN("No space to store CCC cfg");
   16e6e:	4b1f      	ldr	r3, [pc, #124]	; (16eec <bt_gatt_attr_write_ccc+0xc8>)
   16e70:	481f      	ldr	r0, [pc, #124]	; (16ef0 <bt_gatt_attr_write_ccc+0xcc>)
   16e72:	9304      	str	r3, [sp, #16]
   16e74:	aa03      	add	r2, sp, #12
   16e76:	2302      	movs	r3, #2
   16e78:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   16e7c:	9303      	str	r3, [sp, #12]
   16e7e:	f018 fc46 	bl	2f70e <z_log_msg2_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   16e82:	f06f 0010 	mvn.w	r0, #16
   16e86:	e7ea      	b.n	16e5e <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   16e88:	f107 0188 	add.w	r1, r7, #136	; 0x88
   16e8c:	3001      	adds	r0, #1
   16e8e:	f018 fb6d 	bl	2f56c <bt_addr_le_copy>
		cfg->id = conn->id;
   16e92:	7a3b      	ldrb	r3, [r7, #8]
   16e94:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   16e96:	f8da 3010 	ldr.w	r3, [sl, #16]
   16e9a:	b9a3      	cbnz	r3, 16ec6 <bt_gatt_attr_write_ccc+0xa2>
	if (cfg->value != ccc->value) {
   16e9c:	f8ba 300a 	ldrh.w	r3, [sl, #10]
	value_changed = cfg->value != value;
   16ea0:	892c      	ldrh	r4, [r5, #8]
	cfg->value = value;
   16ea2:	812e      	strh	r6, [r5, #8]
	if (cfg->value != ccc->value) {
   16ea4:	42b3      	cmp	r3, r6
   16ea6:	d003      	beq.n	16eb0 <bt_gatt_attr_write_ccc+0x8c>
		gatt_ccc_changed(attr, ccc);
   16ea8:	4651      	mov	r1, sl
   16eaa:	4648      	mov	r0, r9
   16eac:	f018 fb3b 	bl	2f526 <gatt_ccc_changed>
	if (value_changed) {
   16eb0:	42b4      	cmp	r4, r6
   16eb2:	d002      	beq.n	16eba <bt_gatt_attr_write_ccc+0x96>
		gatt_ccc_conn_enqueue(conn);
   16eb4:	4638      	mov	r0, r7
   16eb6:	f7ff fd4b 	bl	16950 <gatt_ccc_conn_enqueue>
	if (!value) {
   16eba:	2e00      	cmp	r6, #0
   16ebc:	d1ce      	bne.n	16e5c <bt_gatt_attr_write_ccc+0x38>
		clear_ccc_cfg(cfg);
   16ebe:	4628      	mov	r0, r5
   16ec0:	f018 fb57 	bl	2f572 <clear_ccc_cfg>
   16ec4:	e7ca      	b.n	16e5c <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   16ec6:	4632      	mov	r2, r6
   16ec8:	4649      	mov	r1, r9
   16eca:	4638      	mov	r0, r7
   16ecc:	4798      	blx	r3
		if (write < 0) {
   16ece:	2800      	cmp	r0, #0
   16ed0:	dbc5      	blt.n	16e5e <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   16ed2:	1e44      	subs	r4, r0, #1
   16ed4:	2c01      	cmp	r4, #1
   16ed6:	d9e1      	bls.n	16e9c <bt_gatt_attr_write_ccc+0x78>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   16ed8:	f06f 000d 	mvn.w	r0, #13
   16edc:	e7bf      	b.n	16e5e <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   16ede:	f06f 0006 	mvn.w	r0, #6
   16ee2:	e7bc      	b.n	16e5e <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   16ee4:	f06f 000c 	mvn.w	r0, #12
   16ee8:	e7b9      	b.n	16e5e <bt_gatt_attr_write_ccc+0x3a>
   16eea:	bf00      	nop
   16eec:	00035f13 	.word	0x00035f13
   16ef0:	00032444 	.word	0x00032444

00016ef4 <find_sc_cfg>:
{
   16ef4:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   16ef6:	4c0e      	ldr	r4, [pc, #56]	; (16f30 <find_sc_cfg+0x3c>)
   16ef8:	7823      	ldrb	r3, [r4, #0]
   16efa:	4283      	cmp	r3, r0
{
   16efc:	4605      	mov	r5, r0
   16efe:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   16f00:	d00a      	beq.n	16f18 <find_sc_cfg+0x24>
   16f02:	7b23      	ldrb	r3, [r4, #12]
   16f04:	42ab      	cmp	r3, r5
   16f06:	d111      	bne.n	16f2c <find_sc_cfg+0x38>
   16f08:	480a      	ldr	r0, [pc, #40]	; (16f34 <find_sc_cfg+0x40>)
   16f0a:	2207      	movs	r2, #7
   16f0c:	4631      	mov	r1, r6
   16f0e:	f017 f87b 	bl	2e008 <memcmp>
   16f12:	b958      	cbnz	r0, 16f2c <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   16f14:	2001      	movs	r0, #1
   16f16:	e005      	b.n	16f24 <find_sc_cfg+0x30>
   16f18:	2207      	movs	r2, #7
   16f1a:	1c60      	adds	r0, r4, #1
   16f1c:	f017 f874 	bl	2e008 <memcmp>
		if (id == sc_cfg[i].id &&
   16f20:	2800      	cmp	r0, #0
   16f22:	d1ee      	bne.n	16f02 <find_sc_cfg+0xe>
			return &sc_cfg[i];
   16f24:	230c      	movs	r3, #12
   16f26:	fb03 4000 	mla	r0, r3, r0, r4
   16f2a:	e000      	b.n	16f2e <find_sc_cfg+0x3a>
	return NULL;
   16f2c:	2000      	movs	r0, #0
}
   16f2e:	bd70      	pop	{r4, r5, r6, pc}
   16f30:	20003294 	.word	0x20003294
   16f34:	200032a1 	.word	0x200032a1

00016f38 <sc_save>:
{
   16f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16f3c:	b088      	sub	sp, #32
   16f3e:	4680      	mov	r8, r0
   16f40:	460f      	mov	r7, r1
   16f42:	4616      	mov	r6, r2
   16f44:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   16f46:	f7ff ffd5 	bl	16ef4 <find_sc_cfg>
	if (!cfg) {
   16f4a:	4604      	mov	r4, r0
   16f4c:	b9c8      	cbnz	r0, 16f82 <sc_save+0x4a>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   16f4e:	4669      	mov	r1, sp
   16f50:	9000      	str	r0, [sp, #0]
   16f52:	f8cd 0003 	str.w	r0, [sp, #3]
   16f56:	f7ff ffcd 	bl	16ef4 <find_sc_cfg>
		if (!cfg) {
   16f5a:	4604      	mov	r4, r0
   16f5c:	b960      	cbnz	r0, 16f78 <sc_save+0x40>
			BT_ERR("unable to save SC: no cfg left");
   16f5e:	4b17      	ldr	r3, [pc, #92]	; (16fbc <sc_save+0x84>)
   16f60:	9306      	str	r3, [sp, #24]
   16f62:	4817      	ldr	r0, [pc, #92]	; (16fc0 <sc_save+0x88>)
   16f64:	2302      	movs	r3, #2
   16f66:	aa05      	add	r2, sp, #20
   16f68:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16f6c:	9305      	str	r3, [sp, #20]
   16f6e:	f018 fbce 	bl	2f70e <z_log_msg2_static_create.constprop.0>
}
   16f72:	b008      	add	sp, #32
   16f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   16f78:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   16f7c:	4639      	mov	r1, r7
   16f7e:	f018 faf5 	bl	2f56c <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   16f82:	8922      	ldrh	r2, [r4, #8]
   16f84:	8963      	ldrh	r3, [r4, #10]
   16f86:	b97a      	cbnz	r2, 16fa8 <sc_save+0x70>
   16f88:	b983      	cbnz	r3, 16fac <sc_save+0x74>
		cfg->data.start = start;
   16f8a:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   16f8c:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   16f8e:	4621      	mov	r1, r4
   16f90:	f811 0b01 	ldrb.w	r0, [r1], #1
   16f94:	f017 fa7a 	bl	2e48c <bt_addr_le_is_bonded>
   16f98:	2800      	cmp	r0, #0
   16f9a:	d0ea      	beq.n	16f72 <sc_save+0x3a>
		sc_store(cfg);
   16f9c:	4620      	mov	r0, r4
}
   16f9e:	b008      	add	sp, #32
   16fa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   16fa4:	f7ff bd0c 	b.w	169c0 <sc_store>
	if (new_start >= *start && new_end <= *end) {
   16fa8:	4296      	cmp	r6, r2
   16faa:	d302      	bcc.n	16fb2 <sc_save+0x7a>
   16fac:	429d      	cmp	r5, r3
   16fae:	d8ed      	bhi.n	16f8c <sc_save+0x54>
   16fb0:	e7df      	b.n	16f72 <sc_save+0x3a>
	if (*end < new_end) {
   16fb2:	429d      	cmp	r5, r3
		*start = new_start;
   16fb4:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   16fb6:	d9ea      	bls.n	16f8e <sc_save+0x56>
   16fb8:	e7e8      	b.n	16f8c <sc_save+0x54>
   16fba:	bf00      	nop
   16fbc:	00035f2d 	.word	0x00035f2d
   16fc0:	00032444 	.word	0x00032444

00016fc4 <bt_gatt_clear_sc>:
{
   16fc4:	b570      	push	{r4, r5, r6, lr}
   16fc6:	b092      	sub	sp, #72	; 0x48
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   16fc8:	f7ff ff94 	bl	16ef4 <find_sc_cfg>
	if (!cfg) {
   16fcc:	4604      	mov	r4, r0
   16fce:	b320      	cbz	r0, 1701a <bt_gatt_clear_sc+0x56>
		if (cfg->id) {
   16fd0:	4605      	mov	r5, r0
   16fd2:	f815 2b01 	ldrb.w	r2, [r5], #1
   16fd6:	b31a      	cbz	r2, 17020 <bt_gatt_clear_sc+0x5c>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   16fd8:	ae02      	add	r6, sp, #8
   16fda:	2104      	movs	r1, #4
   16fdc:	4630      	mov	r0, r6
   16fde:	f014 fc29 	bl	2b834 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   16fe2:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   16fe4:	2124      	movs	r1, #36	; 0x24
   16fe6:	eb0d 0001 	add.w	r0, sp, r1
   16fea:	4a0e      	ldr	r2, [pc, #56]	; (17024 <bt_gatt_clear_sc+0x60>)
   16fec:	462b      	mov	r3, r5
   16fee:	f7fa fcff 	bl	119f0 <bt_settings_encode_key>
		err = settings_delete(key);
   16ff2:	a809      	add	r0, sp, #36	; 0x24
   16ff4:	f015 fd37 	bl	2ca66 <settings_delete>
		if (err) {
   16ff8:	b150      	cbz	r0, 17010 <bt_gatt_clear_sc+0x4c>
			BT_ERR("failed to delete SC (err %d)", err);
   16ffa:	4b0b      	ldr	r3, [pc, #44]	; (17028 <bt_gatt_clear_sc+0x64>)
   16ffc:	aa05      	add	r2, sp, #20
   16ffe:	e9cd 3006 	strd	r3, r0, [sp, #24]
   17002:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17006:	2303      	movs	r3, #3
   17008:	4808      	ldr	r0, [pc, #32]	; (1702c <bt_gatt_clear_sc+0x68>)
   1700a:	9305      	str	r3, [sp, #20]
   1700c:	f018 fb7f 	bl	2f70e <z_log_msg2_static_create.constprop.0>
	memset(cfg, 0, sizeof(*cfg));
   17010:	220c      	movs	r2, #12
   17012:	2100      	movs	r1, #0
   17014:	4620      	mov	r0, r4
   17016:	f017 f813 	bl	2e040 <memset>
}
   1701a:	2000      	movs	r0, #0
   1701c:	b012      	add	sp, #72	; 0x48
   1701e:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   17020:	9200      	str	r2, [sp, #0]
   17022:	e7df      	b.n	16fe4 <bt_gatt_clear_sc+0x20>
   17024:	000360ed 	.word	0x000360ed
   17028:	00035f4c 	.word	0x00035f4c
   1702c:	00032444 	.word	0x00032444

00017030 <sc_clear>:
{
   17030:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17032:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   17036:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17038:	4631      	mov	r1, r6
   1703a:	7a00      	ldrb	r0, [r0, #8]
{
   1703c:	b086      	sub	sp, #24
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1703e:	f017 fa25 	bl	2e48c <bt_addr_le_is_bonded>
   17042:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   17044:	4631      	mov	r1, r6
   17046:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17048:	b17d      	cbz	r5, 1706a <sc_clear+0x3a>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1704a:	f7ff ffbb 	bl	16fc4 <bt_gatt_clear_sc>
		if (err) {
   1704e:	b150      	cbz	r0, 17066 <sc_clear+0x36>
			BT_ERR("Failed to clear SC %d", err);
   17050:	4b0b      	ldr	r3, [pc, #44]	; (17080 <sc_clear+0x50>)
   17052:	aa03      	add	r2, sp, #12
   17054:	e9cd 3004 	strd	r3, r0, [sp, #16]
   17058:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1705c:	2303      	movs	r3, #3
   1705e:	4809      	ldr	r0, [pc, #36]	; (17084 <sc_clear+0x54>)
   17060:	9303      	str	r3, [sp, #12]
   17062:	f018 fb54 	bl	2f70e <z_log_msg2_static_create.constprop.0>
}
   17066:	b006      	add	sp, #24
   17068:	bd70      	pop	{r4, r5, r6, pc}
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1706a:	f7ff ff43 	bl	16ef4 <find_sc_cfg>
		if (cfg) {
   1706e:	2800      	cmp	r0, #0
   17070:	d0f9      	beq.n	17066 <sc_clear+0x36>
	memset(cfg, 0, sizeof(*cfg));
   17072:	220c      	movs	r2, #12
   17074:	4629      	mov	r1, r5
}
   17076:	b006      	add	sp, #24
   17078:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1707c:	f016 bfe0 	b.w	2e040 <memset>
   17080:	00035f69 	.word	0x00035f69
   17084:	00032444 	.word	0x00032444

00017088 <disconnected_cb>:
{
   17088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1708c:	4b1f      	ldr	r3, [pc, #124]	; (1710c <disconnected_cb+0x84>)
{
   1708e:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17090:	6882      	ldr	r2, [r0, #8]
   17092:	429a      	cmp	r2, r3
{
   17094:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   17096:	d102      	bne.n	1709e <disconnected_cb+0x16>
	ccc = attr->user_data;
   17098:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   1709a:	8963      	ldrh	r3, [r4, #10]
   1709c:	b9c3      	cbnz	r3, 170d0 <disconnected_cb+0x48>
}
   1709e:	2001      	movs	r0, #1
   170a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   170a4:	f105 0888 	add.w	r8, r5, #136	; 0x88
   170a8:	7a28      	ldrb	r0, [r5, #8]
   170aa:	4641      	mov	r1, r8
   170ac:	f017 f9ee 	bl	2e48c <bt_addr_le_is_bonded>
   170b0:	b948      	cbnz	r0, 170c6 <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
   170b2:	4b17      	ldr	r3, [pc, #92]	; (17110 <disconnected_cb+0x88>)
   170b4:	429c      	cmp	r4, r3
   170b6:	d102      	bne.n	170be <disconnected_cb+0x36>
					sc_clear(conn);
   170b8:	4628      	mov	r0, r5
   170ba:	f7ff ffb9 	bl	17030 <sc_clear>
				clear_ccc_cfg(cfg);
   170be:	4620      	mov	r0, r4
   170c0:	f018 fa57 	bl	2f572 <clear_ccc_cfg>
	if (!value_used) {
   170c4:	e019      	b.n	170fa <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   170c6:	4641      	mov	r1, r8
   170c8:	4638      	mov	r0, r7
   170ca:	f018 fa4f 	bl	2f56c <bt_addr_le_copy>
	if (!value_used) {
   170ce:	e014      	b.n	170fa <disconnected_cb+0x72>
		if (!cfg->value) {
   170d0:	8923      	ldrh	r3, [r4, #8]
   170d2:	b193      	cbz	r3, 170fa <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   170d4:	4627      	mov	r7, r4
   170d6:	4628      	mov	r0, r5
   170d8:	f817 1b01 	ldrb.w	r1, [r7], #1
   170dc:	463a      	mov	r2, r7
   170de:	f017 fcdf 	bl	2eaa0 <bt_conn_is_peer_addr_le>
   170e2:	2800      	cmp	r0, #0
   170e4:	d1de      	bne.n	170a4 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   170e6:	7820      	ldrb	r0, [r4, #0]
   170e8:	4639      	mov	r1, r7
   170ea:	f7fd ff6b 	bl	14fc4 <bt_conn_lookup_addr_le>
			if (tmp) {
   170ee:	b120      	cbz	r0, 170fa <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
   170f0:	7b45      	ldrb	r5, [r0, #13]
				bt_conn_unref(tmp);
   170f2:	f017 fc3a 	bl	2e96a <bt_conn_unref>
	if (!value_used) {
   170f6:	2d07      	cmp	r5, #7
   170f8:	d0d1      	beq.n	1709e <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   170fa:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   170fc:	2100      	movs	r1, #0
   170fe:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   17100:	2b00      	cmp	r3, #0
   17102:	d0cc      	beq.n	1709e <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   17104:	4630      	mov	r0, r6
   17106:	4798      	blx	r3
   17108:	e7c9      	b.n	1709e <disconnected_cb+0x16>
   1710a:	bf00      	nop
   1710c:	00016e25 	.word	0x00016e25
   17110:	200003bc 	.word	0x200003bc

00017114 <sc_set>:
{
   17114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17118:	b08d      	sub	sp, #52	; 0x34
   1711a:	460e      	mov	r6, r1
   1711c:	af00      	add	r7, sp, #0
   1711e:	4690      	mov	r8, r2
   17120:	4699      	mov	r9, r3
	if (!name) {
   17122:	4605      	mov	r5, r0
   17124:	b958      	cbnz	r0, 1713e <sc_set+0x2a>
		BT_ERR("Insufficient number of arguments");
   17126:	4b41      	ldr	r3, [pc, #260]	; (1722c <sc_set+0x118>)
   17128:	62bb      	str	r3, [r7, #40]	; 0x28
   1712a:	2302      	movs	r3, #2
   1712c:	627b      	str	r3, [r7, #36]	; 0x24
   1712e:	f107 0224 	add.w	r2, r7, #36	; 0x24
   17132:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			BT_ERR("Invalid local identity %lu", next_id);
   17136:	483e      	ldr	r0, [pc, #248]	; (17230 <sc_set+0x11c>)
   17138:	f018 fae9 	bl	2f70e <z_log_msg2_static_create.constprop.0>
			return -EINVAL;
   1713c:	e016      	b.n	1716c <sc_set+0x58>
	err = bt_settings_decode_key(name, &addr);
   1713e:	f107 0108 	add.w	r1, r7, #8
   17142:	f017 f827 	bl	2e194 <bt_settings_decode_key>
	if (err) {
   17146:	4604      	mov	r4, r0
   17148:	b1b8      	cbz	r0, 1717a <sc_set+0x66>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   1714a:	4b3a      	ldr	r3, [pc, #232]	; (17234 <sc_set+0x120>)
   1714c:	4838      	ldr	r0, [pc, #224]	; (17230 <sc_set+0x11c>)
   1714e:	466c      	mov	r4, sp
   17150:	b088      	sub	sp, #32
   17152:	466a      	mov	r2, sp
   17154:	e9c2 3504 	strd	r3, r5, [r2, #16]
   17158:	2302      	movs	r3, #2
   1715a:	7613      	strb	r3, [r2, #24]
   1715c:	4b36      	ldr	r3, [pc, #216]	; (17238 <sc_set+0x124>)
   1715e:	f842 3f0c 	str.w	r3, [r2, #12]!
   17162:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   17166:	f018 fad2 	bl	2f70e <z_log_msg2_static_create.constprop.0>
   1716a:	46a5      	mov	sp, r4
		return -EINVAL;
   1716c:	f06f 0415 	mvn.w	r4, #21
}
   17170:	4620      	mov	r0, r4
   17172:	3734      	adds	r7, #52	; 0x34
   17174:	46bd      	mov	sp, r7
   17176:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	settings_name_next(name, &next);
   1717a:	1d39      	adds	r1, r7, #4
   1717c:	4628      	mov	r0, r5
   1717e:	f015 fc99 	bl	2cab4 <settings_name_next>
	if (!next) {
   17182:	6878      	ldr	r0, [r7, #4]
   17184:	b170      	cbz	r0, 171a4 <sc_set+0x90>
		unsigned long next_id = strtoul(next, NULL, 10);
   17186:	220a      	movs	r2, #10
   17188:	4621      	mov	r1, r4
   1718a:	f016 fe7b 	bl	2de84 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1718e:	b148      	cbz	r0, 171a4 <sc_set+0x90>
			BT_ERR("Invalid local identity %lu", next_id);
   17190:	4b2a      	ldr	r3, [pc, #168]	; (1723c <sc_set+0x128>)
   17192:	e9c7 300a 	strd	r3, r0, [r7, #40]	; 0x28
   17196:	2303      	movs	r3, #3
   17198:	627b      	str	r3, [r7, #36]	; 0x24
   1719a:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1719e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   171a2:	e7c8      	b.n	17136 <sc_set+0x22>
	cfg = find_sc_cfg(id, &addr);
   171a4:	f107 0108 	add.w	r1, r7, #8
   171a8:	2000      	movs	r0, #0
   171aa:	f7ff fea3 	bl	16ef4 <find_sc_cfg>
	if (!cfg && len_rd) {
   171ae:	4605      	mov	r5, r0
   171b0:	bba0      	cbnz	r0, 1721c <sc_set+0x108>
   171b2:	2e00      	cmp	r6, #0
   171b4:	d0dc      	beq.n	17170 <sc_set+0x5c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   171b6:	f107 0110 	add.w	r1, r7, #16
   171ba:	6138      	str	r0, [r7, #16]
   171bc:	4606      	mov	r6, r0
   171be:	f8c7 0013 	str.w	r0, [r7, #19]
   171c2:	f7ff fe97 	bl	16ef4 <find_sc_cfg>
		if (!cfg) {
   171c6:	4605      	mov	r5, r0
   171c8:	b968      	cbnz	r0, 171e6 <sc_set+0xd2>
			BT_ERR("Unable to restore SC: no cfg left");
   171ca:	4b1d      	ldr	r3, [pc, #116]	; (17240 <sc_set+0x12c>)
   171cc:	62bb      	str	r3, [r7, #40]	; 0x28
   171ce:	4818      	ldr	r0, [pc, #96]	; (17230 <sc_set+0x11c>)
   171d0:	2302      	movs	r3, #2
   171d2:	f107 0224 	add.w	r2, r7, #36	; 0x24
   171d6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   171da:	627b      	str	r3, [r7, #36]	; 0x24
			return -ENOMEM;
   171dc:	f06f 040b 	mvn.w	r4, #11
			BT_ERR("Unable to restore SC: no cfg left");
   171e0:	f018 fa95 	bl	2f70e <z_log_msg2_static_create.constprop.0>
			return -ENOMEM;
   171e4:	e7c4      	b.n	17170 <sc_set+0x5c>
		cfg->id = id;
   171e6:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   171ea:	f107 0108 	add.w	r1, r7, #8
   171ee:	f018 f9bd 	bl	2f56c <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   171f2:	f105 0108 	add.w	r1, r5, #8
   171f6:	2204      	movs	r2, #4
   171f8:	4648      	mov	r0, r9
   171fa:	47c0      	blx	r8
		if (len < 0) {
   171fc:	1e05      	subs	r5, r0, #0
   171fe:	dab7      	bge.n	17170 <sc_set+0x5c>
			BT_ERR("Failed to decode value (err %zd)", len);
   17200:	4b10      	ldr	r3, [pc, #64]	; (17244 <sc_set+0x130>)
   17202:	480b      	ldr	r0, [pc, #44]	; (17230 <sc_set+0x11c>)
   17204:	e9c7 350a 	strd	r3, r5, [r7, #40]	; 0x28
   17208:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1720c:	2303      	movs	r3, #3
   1720e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17212:	627b      	str	r3, [r7, #36]	; 0x24
			return len;
   17214:	462c      	mov	r4, r5
			BT_ERR("Failed to decode value (err %zd)", len);
   17216:	f018 fa7a 	bl	2f70e <z_log_msg2_static_create.constprop.0>
			return len;
   1721a:	e7a9      	b.n	17170 <sc_set+0x5c>
	if (len_rd) {
   1721c:	2e00      	cmp	r6, #0
   1721e:	d1e8      	bne.n	171f2 <sc_set+0xde>
		memset(cfg, 0, sizeof(*cfg));
   17220:	220c      	movs	r2, #12
   17222:	4631      	mov	r1, r6
   17224:	f016 ff0c 	bl	2e040 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   17228:	e7a2      	b.n	17170 <sc_set+0x5c>
   1722a:	bf00      	nop
   1722c:	00034be5 	.word	0x00034be5
   17230:	00032444 	.word	0x00032444
   17234:	00035eba 	.word	0x00035eba
   17238:	01000003 	.word	0x01000003
   1723c:	00035ed6 	.word	0x00035ed6
   17240:	00035f7f 	.word	0x00035f7f
   17244:	00035e99 	.word	0x00035e99

00017248 <sc_indicate_rsp>:
{
   17248:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1724a:	f06f 0102 	mvn.w	r1, #2
   1724e:	4604      	mov	r4, r0
   17250:	480d      	ldr	r0, [pc, #52]	; (17288 <sc_indicate_rsp+0x40>)
   17252:	f018 fa28 	bl	2f6a6 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17256:	480c      	ldr	r0, [pc, #48]	; (17288 <sc_indicate_rsp+0x40>)
   17258:	f018 f9bb 	bl	2f5d2 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1725c:	07c2      	lsls	r2, r0, #31
   1725e:	d504      	bpl.n	1726a <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   17260:	480a      	ldr	r0, [pc, #40]	; (1728c <sc_indicate_rsp+0x44>)
   17262:	2200      	movs	r2, #0
   17264:	2300      	movs	r3, #0
   17266:	f013 fc19 	bl	2aa9c <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   1726a:	4620      	mov	r0, r4
   1726c:	f7ff fb26 	bl	168bc <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   17270:	b140      	cbz	r0, 17284 <sc_indicate_rsp+0x3c>
   17272:	7a03      	ldrb	r3, [r0, #8]
   17274:	07db      	lsls	r3, r3, #31
   17276:	d505      	bpl.n	17284 <sc_indicate_rsp+0x3c>
}
   17278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1727c:	2101      	movs	r1, #1
   1727e:	300c      	adds	r0, #12
   17280:	f018 ba02 	b.w	2f688 <atomic_or>
   17284:	bd10      	pop	{r4, pc}
   17286:	bf00      	nop
   17288:	20001630 	.word	0x20001630
   1728c:	20001600 	.word	0x20001600

00017290 <bt_gatt_init>:
{
   17290:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   17292:	4b1e      	ldr	r3, [pc, #120]	; (1730c <bt_gatt_init+0x7c>)
   17294:	f3bf 8f5b 	dmb	ish
   17298:	2201      	movs	r2, #1
   1729a:	e853 1f00 	ldrex	r1, [r3]
   1729e:	2900      	cmp	r1, #0
   172a0:	d103      	bne.n	172aa <bt_gatt_init+0x1a>
   172a2:	e843 2000 	strex	r0, r2, [r3]
   172a6:	2800      	cmp	r0, #0
   172a8:	d1f7      	bne.n	1729a <bt_gatt_init+0xa>
   172aa:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   172ae:	d12b      	bne.n	17308 <bt_gatt_init+0x78>
   172b0:	f3bf 8f5b 	dmb	ish
   172b4:	4b16      	ldr	r3, [pc, #88]	; (17310 <bt_gatt_init+0x80>)
   172b6:	e853 1f00 	ldrex	r1, [r3]
   172ba:	2900      	cmp	r1, #0
   172bc:	d103      	bne.n	172c6 <bt_gatt_init+0x36>
   172be:	e843 2000 	strex	r0, r2, [r3]
   172c2:	2800      	cmp	r0, #0
   172c4:	d1f7      	bne.n	172b6 <bt_gatt_init+0x26>
   172c6:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   172ca:	d101      	bne.n	172d0 <bt_gatt_init+0x40>
   172cc:	f7ff fb28 	bl	16920 <bt_gatt_service_init.part.0>
	list->head = NULL;
   172d0:	4b10      	ldr	r3, [pc, #64]	; (17314 <bt_gatt_init+0x84>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   172d2:	4911      	ldr	r1, [pc, #68]	; (17318 <bt_gatt_init+0x88>)
   172d4:	4811      	ldr	r0, [pc, #68]	; (1731c <bt_gatt_init+0x8c>)
   172d6:	2200      	movs	r2, #0
	list->tail = NULL;
   172d8:	e9c3 2200 	strd	r2, r2, [r3]
   172dc:	f01a fb11 	bl	31902 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   172e0:	2300      	movs	r3, #0
   172e2:	f44f 72a4 	mov.w	r2, #328	; 0x148
   172e6:	480d      	ldr	r0, [pc, #52]	; (1731c <bt_gatt_init+0x8c>)
   172e8:	f013 fba4 	bl	2aa34 <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   172ec:	490c      	ldr	r1, [pc, #48]	; (17320 <bt_gatt_init+0x90>)
   172ee:	480d      	ldr	r0, [pc, #52]	; (17324 <bt_gatt_init+0x94>)
   172f0:	f01a fb07 	bl	31902 <k_work_init_delayable>
   172f4:	2102      	movs	r1, #2
   172f6:	480c      	ldr	r0, [pc, #48]	; (17328 <bt_gatt_init+0x98>)
   172f8:	f018 f9c6 	bl	2f688 <atomic_or>
}
   172fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   17300:	490a      	ldr	r1, [pc, #40]	; (1732c <bt_gatt_init+0x9c>)
   17302:	480b      	ldr	r0, [pc, #44]	; (17330 <bt_gatt_init+0xa0>)
   17304:	f01a bafd 	b.w	31902 <k_work_init_delayable>
}
   17308:	bd08      	pop	{r3, pc}
   1730a:	bf00      	nop
   1730c:	20001f24 	.word	0x20001f24
   17310:	20001f40 	.word	0x20001f40
   17314:	20001ef4 	.word	0x20001ef4
   17318:	00017535 	.word	0x00017535
   1731c:	20001550 	.word	0x20001550
   17320:	000178dd 	.word	0x000178dd
   17324:	20001600 	.word	0x20001600
   17328:	20001630 	.word	0x20001630
   1732c:	0002fb53 	.word	0x0002fb53
   17330:	200015b0 	.word	0x200015b0

00017334 <bt_gatt_cb_register>:
	parent->next = child;
   17334:	2300      	movs	r3, #0
   17336:	6043      	str	r3, [r0, #4]
	return list->tail;
   17338:	4b04      	ldr	r3, [pc, #16]	; (1734c <bt_gatt_cb_register+0x18>)
   1733a:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&callback_list, &cb->node);
   1733c:	1d02      	adds	r2, r0, #4
Z_GENLIST_APPEND(slist, snode)
   1733e:	b911      	cbnz	r1, 17346 <bt_gatt_cb_register+0x12>
	list->head = node;
   17340:	e9c3 2200 	strd	r2, r2, [r3]
}
   17344:	4770      	bx	lr
	parent->next = child;
   17346:	600a      	str	r2, [r1, #0]
	list->tail = node;
   17348:	605a      	str	r2, [r3, #4]
}
   1734a:	4770      	bx	lr
   1734c:	20001ef4 	.word	0x20001ef4

00017350 <bt_gatt_attr_get_handle>:
{
   17350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   17354:	4603      	mov	r3, r0
   17356:	b148      	cbz	r0, 1736c <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   17358:	8a00      	ldrh	r0, [r0, #16]
   1735a:	b938      	cbnz	r0, 1736c <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1735c:	4912      	ldr	r1, [pc, #72]	; (173a8 <bt_gatt_attr_get_handle+0x58>)
   1735e:	f8df e04c 	ldr.w	lr, [pc, #76]	; 173ac <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   17362:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   17364:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17368:	4571      	cmp	r1, lr
   1736a:	d301      	bcc.n	17370 <bt_gatt_attr_get_handle+0x20>
}
   1736c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   17370:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   17374:	42bb      	cmp	r3, r7
   17376:	d304      	bcc.n	17382 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   17378:	fb0c 7206 	mla	r2, ip, r6, r7
   1737c:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   1737e:	4293      	cmp	r3, r2
   17380:	d90e      	bls.n	173a0 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   17382:	19a2      	adds	r2, r4, r6
   17384:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17386:	3108      	adds	r1, #8
   17388:	4614      	mov	r4, r2
   1738a:	e7ed      	b.n	17368 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1738c:	fb0c 7805 	mla	r8, ip, r5, r7
   17390:	4543      	cmp	r3, r8
   17392:	d007      	beq.n	173a4 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   17394:	3501      	adds	r5, #1
   17396:	1962      	adds	r2, r4, r5
   17398:	42b5      	cmp	r5, r6
   1739a:	b292      	uxth	r2, r2
   1739c:	d1f6      	bne.n	1738c <bt_gatt_attr_get_handle+0x3c>
   1739e:	e7f2      	b.n	17386 <bt_gatt_attr_get_handle+0x36>
   173a0:	2500      	movs	r5, #0
   173a2:	e7f8      	b.n	17396 <bt_gatt_attr_get_handle+0x46>
   173a4:	4610      	mov	r0, r2
   173a6:	e7e1      	b.n	1736c <bt_gatt_attr_get_handle+0x1c>
   173a8:	000322ac 	.word	0x000322ac
   173ac:	000322e4 	.word	0x000322e4

000173b0 <bt_gatt_foreach_attr_type>:
{
   173b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173b4:	b089      	sub	sp, #36	; 0x24
   173b6:	4699      	mov	r9, r3
	if (!num_matches) {
   173b8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
{
   173bc:	4604      	mov	r4, r0
   173be:	460f      	mov	r7, r1
   173c0:	4690      	mov	r8, r2
	if (!num_matches) {
   173c2:	b91b      	cbnz	r3, 173cc <bt_gatt_foreach_attr_type+0x1c>
		num_matches = UINT16_MAX;
   173c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   173c8:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
	if (start_handle <= last_static_handle) {
   173cc:	4b31      	ldr	r3, [pc, #196]	; (17494 <bt_gatt_foreach_attr_type+0xe4>)
   173ce:	881b      	ldrh	r3, [r3, #0]
   173d0:	42a3      	cmp	r3, r4
   173d2:	d230      	bcs.n	17436 <bt_gatt_foreach_attr_type+0x86>
	foreach_attr_type_dyndb(start_handle, end_handle, uuid, attr_data,
   173d4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   173d8:	f8ad 301e 	strh.w	r3, [sp, #30]
	return list->head;
   173dc:	4b2e      	ldr	r3, [pc, #184]	; (17498 <bt_gatt_foreach_attr_type+0xe8>)
   173de:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
   173e0:	bb7d      	cbnz	r5, 17442 <bt_gatt_foreach_attr_type+0x92>
}
   173e2:	b009      	add	sp, #36	; 0x24
   173e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   173e8:	6869      	ldr	r1, [r5, #4]
   173ea:	4451      	add	r1, sl
   173ec:	42a1      	cmp	r1, r4
   173ee:	d220      	bcs.n	17432 <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
   173f0:	b289      	uxth	r1, r1
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   173f2:	3508      	adds	r5, #8
   173f4:	468a      	mov	sl, r1
   173f6:	4b29      	ldr	r3, [pc, #164]	; (1749c <bt_gatt_foreach_attr_type+0xec>)
   173f8:	429d      	cmp	r5, r3
   173fa:	d3f5      	bcc.n	173e8 <bt_gatt_foreach_attr_type+0x38>
   173fc:	e7ea      	b.n	173d4 <bt_gatt_foreach_attr_type+0x24>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   173fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
   17400:	6828      	ldr	r0, [r5, #0]
   17402:	9304      	str	r3, [sp, #16]
   17404:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   17406:	9303      	str	r3, [sp, #12]
   17408:	ab12      	add	r3, sp, #72	; 0x48
   1740a:	e9cd 9301 	strd	r9, r3, [sp, #4]
   1740e:	f8cd 8000 	str.w	r8, [sp]
   17412:	463b      	mov	r3, r7
   17414:	4622      	mov	r2, r4
   17416:	fb0b 0006 	mla	r0, fp, r6, r0
   1741a:	f018 f953 	bl	2f6c4 <gatt_foreach_iter>
   1741e:	2800      	cmp	r0, #0
   17420:	d0df      	beq.n	173e2 <bt_gatt_foreach_attr_type+0x32>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   17422:	3601      	adds	r6, #1
   17424:	686b      	ldr	r3, [r5, #4]
   17426:	eb0a 0106 	add.w	r1, sl, r6
   1742a:	42b3      	cmp	r3, r6
   1742c:	b289      	uxth	r1, r1
   1742e:	d8e6      	bhi.n	173fe <bt_gatt_foreach_attr_type+0x4e>
   17430:	e7df      	b.n	173f2 <bt_gatt_foreach_attr_type+0x42>
   17432:	2600      	movs	r6, #0
   17434:	e7f6      	b.n	17424 <bt_gatt_foreach_attr_type+0x74>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17436:	4d1a      	ldr	r5, [pc, #104]	; (174a0 <bt_gatt_foreach_attr_type+0xf0>)
		uint16_t handle = 1;
   17438:	f04f 0a01 	mov.w	sl, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1743c:	f04f 0b14 	mov.w	fp, #20
   17440:	e7d9      	b.n	173f6 <bt_gatt_foreach_attr_type+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
   17442:	3d08      	subs	r5, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
   17444:	f04f 0a14 	mov.w	sl, #20
			if (gatt_foreach_iter(attr, attr->handle,
   17448:	f10d 0b1e 	add.w	fp, sp, #30
	return node->next;
   1744c:	68ae      	ldr	r6, [r5, #8]
		next = SYS_SLIST_PEEK_NEXT_CONTAINER(svc, node);
   1744e:	b1de      	cbz	r6, 17488 <bt_gatt_foreach_attr_type+0xd8>
			if (next->attrs[0].handle <= start_handle) {
   17450:	f856 3c08 	ldr.w	r3, [r6, #-8]
   17454:	8a1b      	ldrh	r3, [r3, #16]
   17456:	42a3      	cmp	r3, r4
   17458:	d81a      	bhi.n	17490 <bt_gatt_foreach_attr_type+0xe0>
   1745a:	68ad      	ldr	r5, [r5, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
   1745c:	2d00      	cmp	r5, #0
   1745e:	d0c0      	beq.n	173e2 <bt_gatt_foreach_attr_type+0x32>
   17460:	3d08      	subs	r5, #8
   17462:	e7f3      	b.n	1744c <bt_gatt_foreach_attr_type+0x9c>
			struct bt_gatt_attr *attr = &svc->attrs[i];
   17464:	6828      	ldr	r0, [r5, #0]
			if (gatt_foreach_iter(attr, attr->handle,
   17466:	9b14      	ldr	r3, [sp, #80]	; 0x50
			struct bt_gatt_attr *attr = &svc->attrs[i];
   17468:	fb0a 0006 	mla	r0, sl, r6, r0
			if (gatt_foreach_iter(attr, attr->handle,
   1746c:	4622      	mov	r2, r4
   1746e:	8a01      	ldrh	r1, [r0, #16]
   17470:	9304      	str	r3, [sp, #16]
   17472:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   17474:	e9cd 8900 	strd	r8, r9, [sp]
   17478:	e9cd b302 	strd	fp, r3, [sp, #8]
   1747c:	463b      	mov	r3, r7
   1747e:	f018 f921 	bl	2f6c4 <gatt_foreach_iter>
   17482:	2800      	cmp	r0, #0
   17484:	d0ad      	beq.n	173e2 <bt_gatt_foreach_attr_type+0x32>
		for (i = 0; i < svc->attr_count; i++) {
   17486:	3601      	adds	r6, #1
   17488:	686b      	ldr	r3, [r5, #4]
   1748a:	429e      	cmp	r6, r3
   1748c:	d3ea      	bcc.n	17464 <bt_gatt_foreach_attr_type+0xb4>
   1748e:	e7e4      	b.n	1745a <bt_gatt_foreach_attr_type+0xaa>
   17490:	2600      	movs	r6, #0
   17492:	e7f9      	b.n	17488 <bt_gatt_foreach_attr_type+0xd8>
   17494:	20003292 	.word	0x20003292
   17498:	20001f1c 	.word	0x20001f1c
   1749c:	000322e4 	.word	0x000322e4
   174a0:	000322ac 	.word	0x000322ac

000174a4 <db_hash_gen>:
{
   174a4:	b530      	push	{r4, r5, lr}
   174a6:	b0cf      	sub	sp, #316	; 0x13c
	uint8_t key[16] = {};
   174a8:	2300      	movs	r3, #0
{
   174aa:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   174ac:	aa22      	add	r2, sp, #136	; 0x88
   174ae:	4669      	mov	r1, sp
   174b0:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t key[16] = {};
   174b2:	e9cd 3300 	strd	r3, r3, [sp]
   174b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   174ba:	f016 fc06 	bl	2dcca <tc_cmac_setup>
   174be:	b958      	cbnz	r0, 174d8 <db_hash_gen+0x34>
		BT_ERR("Unable to setup AES CMAC");
   174c0:	4b16      	ldr	r3, [pc, #88]	; (1751c <db_hash_gen+0x78>)
		BT_ERR("Unable to calculate hash");
   174c2:	9308      	str	r3, [sp, #32]
   174c4:	4816      	ldr	r0, [pc, #88]	; (17520 <db_hash_gen+0x7c>)
   174c6:	2302      	movs	r3, #2
   174c8:	aa07      	add	r2, sp, #28
   174ca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   174ce:	9307      	str	r3, [sp, #28]
   174d0:	f018 f91d 	bl	2f70e <z_log_msg2_static_create.constprop.0>
}
   174d4:	b04f      	add	sp, #316	; 0x13c
   174d6:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   174d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   174dc:	2001      	movs	r0, #1
   174de:	4a11      	ldr	r2, [pc, #68]	; (17524 <db_hash_gen+0x80>)
   174e0:	ab0a      	add	r3, sp, #40	; 0x28
   174e2:	f018 fabc 	bl	2fa5e <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   174e6:	4810      	ldr	r0, [pc, #64]	; (17528 <db_hash_gen+0x84>)
   174e8:	a90a      	add	r1, sp, #40	; 0x28
   174ea:	f016 fc84 	bl	2ddf6 <tc_cmac_final>
   174ee:	b908      	cbnz	r0, 174f4 <db_hash_gen+0x50>
		BT_ERR("Unable to calculate hash");
   174f0:	4b0e      	ldr	r3, [pc, #56]	; (1752c <db_hash_gen+0x88>)
   174f2:	e7e6      	b.n	174c2 <db_hash_gen+0x1e>
   174f4:	4b0c      	ldr	r3, [pc, #48]	; (17528 <db_hash_gen+0x84>)
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   174f6:	2208      	movs	r2, #8
   174f8:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   174fc:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   174fe:	780d      	ldrb	r5, [r1, #0]
   17500:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
   17504:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   17506:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   1750a:	d1f7      	bne.n	174fc <db_hash_gen+0x58>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   1750c:	b10c      	cbz	r4, 17512 <db_hash_gen+0x6e>
		db_hash_store();
   1750e:	f7ff fadd 	bl	16acc <db_hash_store>
   17512:	2104      	movs	r1, #4
   17514:	4806      	ldr	r0, [pc, #24]	; (17530 <db_hash_gen+0x8c>)
   17516:	f018 f8b7 	bl	2f688 <atomic_or>
   1751a:	e7db      	b.n	174d4 <db_hash_gen+0x30>
   1751c:	00035fa1 	.word	0x00035fa1
   17520:	00032444 	.word	0x00032444
   17524:	0002f5df 	.word	0x0002f5df
   17528:	20001530 	.word	0x20001530
   1752c:	00035fba 	.word	0x00035fba
   17530:	20001630 	.word	0x20001630

00017534 <db_hash_process>:
{
   17534:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17536:	4817      	ldr	r0, [pc, #92]	; (17594 <db_hash_process+0x60>)
   17538:	f06f 0108 	mvn.w	r1, #8
   1753c:	f018 f8b3 	bl	2f6a6 <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   17540:	0702      	lsls	r2, r0, #28
   17542:	d522      	bpl.n	1758a <db_hash_process+0x56>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17544:	4813      	ldr	r0, [pc, #76]	; (17594 <db_hash_process+0x60>)
   17546:	f018 f844 	bl	2f5d2 <atomic_get>
   1754a:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1754c:	075b      	lsls	r3, r3, #29
   1754e:	f3c0 0080 	ubfx	r0, r0, #2, #1
   17552:	d401      	bmi.n	17558 <db_hash_process+0x24>
			db_hash_gen(false);
   17554:	f7ff ffa6 	bl	174a4 <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   17558:	490f      	ldr	r1, [pc, #60]	; (17598 <db_hash_process+0x64>)
   1755a:	2210      	movs	r2, #16
   1755c:	1888      	adds	r0, r1, r2
   1755e:	f016 fd53 	bl	2e008 <memcmp>
   17562:	b948      	cbnz	r0, 17578 <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   17564:	480d      	ldr	r0, [pc, #52]	; (1759c <db_hash_process+0x68>)
   17566:	f01a f9d8 	bl	3191a <k_work_cancel_delayable>
}
   1756a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1756e:	4809      	ldr	r0, [pc, #36]	; (17594 <db_hash_process+0x60>)
   17570:	f06f 0101 	mvn.w	r1, #1
   17574:	f018 b897 	b.w	2f6a6 <atomic_and>
		sc_indicate(0x0001, 0xffff);
   17578:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1757c:	2001      	movs	r0, #1
   1757e:	f7ff fae3 	bl	16b48 <sc_indicate>
}
   17582:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		db_hash_store();
   17586:	f7ff baa1 	b.w	16acc <db_hash_store>
}
   1758a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	db_hash_gen(true);
   1758e:	2001      	movs	r0, #1
   17590:	f7ff bf88 	b.w	174a4 <db_hash_gen>
   17594:	20001630 	.word	0x20001630
   17598:	20001530 	.word	0x20001530
   1759c:	20001600 	.word	0x20001600

000175a0 <ccc_set>:
{
   175a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   175a4:	b0be      	sub	sp, #248	; 0xf8
   175a6:	af00      	add	r7, sp, #0
   175a8:	4604      	mov	r4, r0
   175aa:	4689      	mov	r9, r1
		settings_name_next(name, &next);
   175ac:	1d39      	adds	r1, r7, #4
{
   175ae:	4616      	mov	r6, r2
   175b0:	4698      	mov	r8, r3
		settings_name_next(name, &next);
   175b2:	f015 fa7f 	bl	2cab4 <settings_name_next>
		if (!name) {
   175b6:	b974      	cbnz	r4, 175d6 <ccc_set+0x36>
			BT_ERR("Insufficient number of arguments");
   175b8:	4b35      	ldr	r3, [pc, #212]	; (17690 <ccc_set+0xf0>)
   175ba:	64bb      	str	r3, [r7, #72]	; 0x48
   175bc:	2302      	movs	r3, #2
   175be:	647b      	str	r3, [r7, #68]	; 0x44
   175c0:	f107 0244 	add.w	r2, r7, #68	; 0x44
   175c4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
				BT_ERR("Invalid local identity %lu", next_id);
   175c8:	4832      	ldr	r0, [pc, #200]	; (17694 <ccc_set+0xf4>)
   175ca:	f018 f8a0 	bl	2f70e <z_log_msg2_static_create.constprop.0>
			return -EINVAL;
   175ce:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
   175d2:	4625      	mov	r5, r4
   175d4:	e053      	b.n	1767e <ccc_set+0xde>
		} else if (!next) {
   175d6:	6878      	ldr	r0, [r7, #4]
   175d8:	b9d8      	cbnz	r0, 17612 <ccc_set+0x72>
		err = bt_settings_decode_key(name, &addr);
   175da:	f107 0a08 	add.w	sl, r7, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
   175de:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   175e0:	4651      	mov	r1, sl
   175e2:	4620      	mov	r0, r4
			load.addr_with_id.id = BT_ID_DEFAULT;
   175e4:	753b      	strb	r3, [r7, #20]
		err = bt_settings_decode_key(name, &addr);
   175e6:	f016 fdd5 	bl	2e194 <bt_settings_decode_key>
		if (err) {
   175ea:	4605      	mov	r5, r0
   175ec:	b308      	cbz	r0, 17632 <ccc_set+0x92>
			BT_ERR("Unable to decode address %s", log_strdup(name));
   175ee:	4b2a      	ldr	r3, [pc, #168]	; (17698 <ccc_set+0xf8>)
   175f0:	4828      	ldr	r0, [pc, #160]	; (17694 <ccc_set+0xf4>)
   175f2:	466d      	mov	r5, sp
   175f4:	b088      	sub	sp, #32
   175f6:	466a      	mov	r2, sp
   175f8:	e9c2 3404 	strd	r3, r4, [r2, #16]
   175fc:	2302      	movs	r3, #2
   175fe:	7613      	strb	r3, [r2, #24]
   17600:	4b26      	ldr	r3, [pc, #152]	; (1769c <ccc_set+0xfc>)
   17602:	f842 3f0c 	str.w	r3, [r2, #12]!
   17606:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1760a:	f018 f880 	bl	2f70e <z_log_msg2_static_create.constprop.0>
   1760e:	46ad      	mov	sp, r5
   17610:	e7dd      	b.n	175ce <ccc_set+0x2e>
			unsigned long next_id = strtoul(next, NULL, 10);
   17612:	220a      	movs	r2, #10
   17614:	2100      	movs	r1, #0
   17616:	f016 fc35 	bl	2de84 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   1761a:	2800      	cmp	r0, #0
   1761c:	d0dd      	beq.n	175da <ccc_set+0x3a>
				BT_ERR("Invalid local identity %lu", next_id);
   1761e:	4b20      	ldr	r3, [pc, #128]	; (176a0 <ccc_set+0x100>)
   17620:	e9c7 3012 	strd	r3, r0, [r7, #72]	; 0x48
   17624:	2303      	movs	r3, #3
   17626:	647b      	str	r3, [r7, #68]	; 0x44
   17628:	f107 0244 	add.w	r2, r7, #68	; 0x44
   1762c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17630:	e7ca      	b.n	175c8 <ccc_set+0x28>
		load.addr_with_id.addr = &addr;
   17632:	f8c7 a010 	str.w	sl, [r7, #16]
		if (len_rd) {
   17636:	f1b9 0f00 	cmp.w	r9, #0
   1763a:	d025      	beq.n	17688 <ccc_set+0xe8>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   1763c:	f107 0938 	add.w	r9, r7, #56	; 0x38
   17640:	22c0      	movs	r2, #192	; 0xc0
   17642:	4649      	mov	r1, r9
   17644:	4640      	mov	r0, r8
   17646:	47b0      	blx	r6
			if (len < 0) {
   17648:	1e04      	subs	r4, r0, #0
   1764a:	da0c      	bge.n	17666 <ccc_set+0xc6>
				BT_ERR("Failed to decode value (err %zd)", len);
   1764c:	4b15      	ldr	r3, [pc, #84]	; (176a4 <ccc_set+0x104>)
   1764e:	4811      	ldr	r0, [pc, #68]	; (17694 <ccc_set+0xf4>)
   17650:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
   17654:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   17658:	2303      	movs	r3, #3
   1765a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1765e:	62fb      	str	r3, [r7, #44]	; 0x2c
   17660:	f018 f855 	bl	2f70e <z_log_msg2_static_create.constprop.0>
				return len;
   17664:	e7b5      	b.n	175d2 <ccc_set+0x32>
			load.count = len / sizeof(*ccc_store);
   17666:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
   17668:	f8c7 9018 	str.w	r9, [r7, #24]
			load.count = len / sizeof(*ccc_store);
   1766c:	61fc      	str	r4, [r7, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   1766e:	4a0e      	ldr	r2, [pc, #56]	; (176a8 <ccc_set+0x108>)
   17670:	f107 0310 	add.w	r3, r7, #16
   17674:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17678:	2001      	movs	r0, #1
   1767a:	f018 f9f0 	bl	2fa5e <bt_gatt_foreach_attr>
}
   1767e:	4628      	mov	r0, r5
   17680:	37f8      	adds	r7, #248	; 0xf8
   17682:	46bd      	mov	sp, r7
   17684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			load.count = 0;
   17688:	e9c7 0006 	strd	r0, r0, [r7, #24]
   1768c:	e7ef      	b.n	1766e <ccc_set+0xce>
   1768e:	bf00      	nop
   17690:	00034be5 	.word	0x00034be5
   17694:	00032444 	.word	0x00032444
   17698:	00035eba 	.word	0x00035eba
   1769c:	01000003 	.word	0x01000003
   176a0:	00035ed6 	.word	0x00035ed6
   176a4:	00035e99 	.word	0x00035e99
   176a8:	00016d99 	.word	0x00016d99

000176ac <ccc_set_direct>:
{
   176ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   176ae:	9806      	ldr	r0, [sp, #24]
{
   176b0:	460c      	mov	r4, r1
   176b2:	4615      	mov	r5, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   176b4:	4908      	ldr	r1, [pc, #32]	; (176d8 <ccc_set_direct+0x2c>)
   176b6:	aa01      	add	r2, sp, #4
{
   176b8:	461e      	mov	r6, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   176ba:	f015 f9d8 	bl	2ca6e <settings_name_steq>
   176be:	b918      	cbnz	r0, 176c8 <ccc_set_direct+0x1c>
   176c0:	f7ff f96a 	bl	16998 <ccc_set_direct.part.0>
}
   176c4:	b002      	add	sp, #8
   176c6:	bd70      	pop	{r4, r5, r6, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   176c8:	9801      	ldr	r0, [sp, #4]
   176ca:	4633      	mov	r3, r6
   176cc:	462a      	mov	r2, r5
   176ce:	4621      	mov	r1, r4
   176d0:	f7ff ff66 	bl	175a0 <ccc_set>
   176d4:	e7f6      	b.n	176c4 <ccc_set_direct+0x18>
   176d6:	bf00      	nop
   176d8:	00035fd3 	.word	0x00035fd3

000176dc <bt_gatt_find_by_uuid>:
{
   176dc:	b530      	push	{r4, r5, lr}
   176de:	b087      	sub	sp, #28
	struct bt_gatt_attr *found = NULL;
   176e0:	2300      	movs	r3, #0
{
   176e2:	460c      	mov	r4, r1
   176e4:	4615      	mov	r5, r2
	struct bt_gatt_attr *found = NULL;
   176e6:	9305      	str	r3, [sp, #20]
	uint16_t start_handle = bt_gatt_attr_value_handle(attr);
   176e8:	f018 f96b 	bl	2f9c2 <bt_gatt_attr_value_handle>
	uint16_t end_handle = start_handle && attr_count ?
   176ec:	b178      	cbz	r0, 1770e <bt_gatt_find_by_uuid+0x32>
   176ee:	b174      	cbz	r4, 1770e <bt_gatt_find_by_uuid+0x32>
   176f0:	1901      	adds	r1, r0, r4
   176f2:	b289      	uxth	r1, r1
	bt_gatt_foreach_attr_type(start_handle, end_handle, uuid, NULL, 1,
   176f4:	ab05      	add	r3, sp, #20
   176f6:	9302      	str	r3, [sp, #8]
   176f8:	4b06      	ldr	r3, [pc, #24]	; (17714 <bt_gatt_find_by_uuid+0x38>)
   176fa:	9301      	str	r3, [sp, #4]
   176fc:	2301      	movs	r3, #1
   176fe:	9300      	str	r3, [sp, #0]
   17700:	462a      	mov	r2, r5
   17702:	2300      	movs	r3, #0
   17704:	f7ff fe54 	bl	173b0 <bt_gatt_foreach_attr_type>
}
   17708:	9805      	ldr	r0, [sp, #20]
   1770a:	b007      	add	sp, #28
   1770c:	bd30      	pop	{r4, r5, pc}
	uint16_t end_handle = start_handle && attr_count ?
   1770e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17712:	e7ef      	b.n	176f4 <bt_gatt_find_by_uuid+0x18>
   17714:	0002f521 	.word	0x0002f521

00017718 <gatt_indicate>:
{
   17718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1771c:	4615      	mov	r5, r2
   1771e:	b086      	sub	sp, #24
   17720:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   17722:	2214      	movs	r2, #20
   17724:	6869      	ldr	r1, [r5, #4]
{
   17726:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   17728:	f018 f9c1 	bl	2faae <bt_gatt_check_perm>
   1772c:	4607      	mov	r7, r0
   1772e:	b178      	cbz	r0, 17750 <gatt_indicate+0x38>
		BT_WARN("Link is not encrypted");
   17730:	4b2a      	ldr	r3, [pc, #168]	; (177dc <gatt_indicate+0xc4>)
   17732:	9304      	str	r3, [sp, #16]
   17734:	482a      	ldr	r0, [pc, #168]	; (177e0 <gatt_indicate+0xc8>)
   17736:	2302      	movs	r3, #2
   17738:	aa03      	add	r2, sp, #12
   1773a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return -EPERM;
   1773e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		BT_WARN("Link is not encrypted");
   17742:	9303      	str	r3, [sp, #12]
   17744:	f017 ffe3 	bl	2f70e <z_log_msg2_static_create.constprop.0>
}
   17748:	4628      	mov	r0, r5
   1774a:	b006      	add	sp, #24
   1774c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   17750:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   17754:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   17756:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   17758:	f7fe ffc0 	bl	166dc <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1775c:	3602      	adds	r6, #2
	if (!req) {
   1775e:	4604      	mov	r4, r0
   17760:	b910      	cbnz	r0, 17768 <gatt_indicate+0x50>
		return -ENOMEM;
   17762:	f06f 050b 	mvn.w	r5, #11
   17766:	e7ef      	b.n	17748 <gatt_indicate+0x30>
	req->func = func;
   17768:	4b1e      	ldr	r3, [pc, #120]	; (177e4 <gatt_indicate+0xcc>)
	req->len = len;
   1776a:	6146      	str	r6, [r0, #20]
	req->att_op = op;
   1776c:	211d      	movs	r1, #29
   1776e:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   17770:	60c7      	str	r7, [r0, #12]
	req->func = func;
   17772:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   17774:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   17776:	4632      	mov	r2, r6
   17778:	4640      	mov	r0, r8
   1777a:	f7fe fc59 	bl	16030 <bt_att_create_pdu>
	if (!buf) {
   1777e:	4606      	mov	r6, r0
   17780:	b968      	cbnz	r0, 1779e <gatt_indicate+0x86>
		BT_WARN("No buffer available to send indication");
   17782:	4b19      	ldr	r3, [pc, #100]	; (177e8 <gatt_indicate+0xd0>)
   17784:	9304      	str	r3, [sp, #16]
   17786:	4816      	ldr	r0, [pc, #88]	; (177e0 <gatt_indicate+0xc8>)
   17788:	2302      	movs	r3, #2
   1778a:	aa03      	add	r2, sp, #12
   1778c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17790:	9303      	str	r3, [sp, #12]
   17792:	f017 ffbc 	bl	2f70e <z_log_msg2_static_create.constprop.0>
		bt_att_req_free(req);
   17796:	4620      	mov	r0, r4
   17798:	f7fe ffc2 	bl	16720 <bt_att_req_free>
   1779c:	e7e1      	b.n	17762 <gatt_indicate+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1779e:	f100 0a08 	add.w	sl, r0, #8
   177a2:	2102      	movs	r1, #2
   177a4:	4650      	mov	r0, sl
   177a6:	f019 f965 	bl	30a74 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   177aa:	4607      	mov	r7, r0
   177ac:	8aa9      	ldrh	r1, [r5, #20]
   177ae:	f827 9b02 	strh.w	r9, [r7], #2
   177b2:	4650      	mov	r0, sl
   177b4:	f019 f95e 	bl	30a74 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   177b8:	8aaa      	ldrh	r2, [r5, #20]
   177ba:	6929      	ldr	r1, [r5, #16]
   177bc:	4638      	mov	r0, r7
   177be:	f016 fc34 	bl	2e02a <memcpy>
	req->buf = buf;
   177c2:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   177c4:	4621      	mov	r1, r4
   177c6:	4640      	mov	r0, r8
   177c8:	f017 fe95 	bl	2f4f6 <bt_att_req_send>
	if (err) {
   177cc:	4605      	mov	r5, r0
   177ce:	2800      	cmp	r0, #0
   177d0:	d0ba      	beq.n	17748 <gatt_indicate+0x30>
		bt_att_req_free(req);
   177d2:	4620      	mov	r0, r4
   177d4:	f7fe ffa4 	bl	16720 <bt_att_req_free>
   177d8:	e7b6      	b.n	17748 <gatt_indicate+0x30>
   177da:	bf00      	nop
   177dc:	00035fda 	.word	0x00035fda
   177e0:	00032444 	.word	0x00032444
   177e4:	0002f53b 	.word	0x0002f53b
   177e8:	00035ff0 	.word	0x00035ff0

000177ec <bt_gatt_indicate>:
{
   177ec:	b530      	push	{r4, r5, lr}
   177ee:	4604      	mov	r4, r0
   177f0:	b08b      	sub	sp, #44	; 0x2c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   177f2:	4837      	ldr	r0, [pc, #220]	; (178d0 <bt_gatt_indicate+0xe4>)
   177f4:	f017 feed 	bl	2f5d2 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   177f8:	0742      	lsls	r2, r0, #29
{
   177fa:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   177fc:	d561      	bpl.n	178c2 <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   177fe:	b114      	cbz	r4, 17806 <bt_gatt_indicate+0x1a>
   17800:	7b63      	ldrb	r3, [r4, #13]
   17802:	2b07      	cmp	r3, #7
   17804:	d160      	bne.n	178c8 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   17806:	6868      	ldr	r0, [r5, #4]
   17808:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1780a:	f7ff fda1 	bl	17350 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1780e:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   17810:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   17814:	b33a      	cbz	r2, 17866 <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17816:	a905      	add	r1, sp, #20
   17818:	9102      	str	r1, [sp, #8]
   1781a:	492e      	ldr	r1, [pc, #184]	; (178d4 <bt_gatt_indicate+0xe8>)
   1781c:	9101      	str	r1, [sp, #4]
   1781e:	2101      	movs	r1, #1
	found->attr = NULL;
   17820:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17822:	9100      	str	r1, [sp, #0]
   17824:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   17828:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1782a:	f7ff fdc1 	bl	173b0 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1782e:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   17830:	b91b      	cbnz	r3, 1783a <bt_gatt_indicate+0x4e>
			return -ENOENT;
   17832:	f06f 0001 	mvn.w	r0, #1
}
   17836:	b00b      	add	sp, #44	; 0x2c
   17838:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1783a:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1783c:	9b05      	ldr	r3, [sp, #20]
   1783e:	6818      	ldr	r0, [r3, #0]
   17840:	2300      	movs	r3, #0
   17842:	f88d 3010 	strb.w	r3, [sp, #16]
   17846:	a904      	add	r1, sp, #16
   17848:	f642 0303 	movw	r3, #10243	; 0x2803
   1784c:	f8ad 3012 	strh.w	r3, [sp, #18]
   17850:	f016 fcc4 	bl	2e1dc <bt_uuid_cmp>
   17854:	b970      	cbnz	r0, 17874 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   17856:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   17858:	68c3      	ldr	r3, [r0, #12]
   1785a:	799b      	ldrb	r3, [r3, #6]
   1785c:	069b      	lsls	r3, r3, #26
   1785e:	d405      	bmi.n	1786c <bt_gatt_indicate+0x80>
			return -EINVAL;
   17860:	f06f 0015 	mvn.w	r0, #21
   17864:	e7e7      	b.n	17836 <bt_gatt_indicate+0x4a>
		if (!data.handle) {
   17866:	2800      	cmp	r0, #0
   17868:	d1e8      	bne.n	1783c <bt_gatt_indicate+0x50>
   1786a:	e7e2      	b.n	17832 <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1786c:	f018 f8a9 	bl	2f9c2 <bt_gatt_attr_value_handle>
   17870:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   17874:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   17878:	b13c      	cbz	r4, 1788a <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   1787a:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1787c:	4601      	mov	r1, r0
		params->_ref = 1;
   1787e:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   17880:	462a      	mov	r2, r5
   17882:	4620      	mov	r0, r4
   17884:	f7ff ff48 	bl	17718 <gatt_indicate>
   17888:	e7d5      	b.n	17836 <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   1788a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1788e:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   17890:	2302      	movs	r3, #2
   17892:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17896:	f642 1302 	movw	r3, #10498	; 0x2902
   1789a:	f8ad 3012 	strh.w	r3, [sp, #18]
   1789e:	ab05      	add	r3, sp, #20
   178a0:	9302      	str	r3, [sp, #8]
   178a2:	4b0d      	ldr	r3, [pc, #52]	; (178d8 <bt_gatt_indicate+0xec>)
   178a4:	9301      	str	r3, [sp, #4]
   178a6:	2301      	movs	r3, #1
   178a8:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   178aa:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   178ac:	4623      	mov	r3, r4
   178ae:	aa04      	add	r2, sp, #16
   178b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   178b4:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   178b6:	f88d 4010 	strb.w	r4, [sp, #16]
   178ba:	f7ff fd79 	bl	173b0 <bt_gatt_foreach_attr_type>
	return data.err;
   178be:	9807      	ldr	r0, [sp, #28]
   178c0:	e7b9      	b.n	17836 <bt_gatt_indicate+0x4a>
		return -EAGAIN;
   178c2:	f06f 000a 	mvn.w	r0, #10
   178c6:	e7b6      	b.n	17836 <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
   178c8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   178cc:	e7b3      	b.n	17836 <bt_gatt_indicate+0x4a>
   178ce:	bf00      	nop
   178d0:	200000cc 	.word	0x200000cc
   178d4:	0002f561 	.word	0x0002f561
   178d8:	00017bcd 	.word	0x00017bcd

000178dc <sc_process>:
{
   178dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   178de:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   178e2:	f8ad 3004 	strh.w	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   178e6:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   178ea:	4604      	mov	r4, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
   178ec:	f830 3c06 	ldrh.w	r3, [r0, #-6]
   178f0:	f8ad 3006 	strh.w	r3, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   178f4:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   178f8:	f06f 0101 	mvn.w	r1, #1
   178fc:	4628      	mov	r0, r5
   178fe:	f017 fed2 	bl	2f6a6 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   17902:	4b0d      	ldr	r3, [pc, #52]	; (17938 <sc_process+0x5c>)
   17904:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   17908:	4b0c      	ldr	r3, [pc, #48]	; (1793c <sc_process+0x60>)
   1790a:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1790e:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   17910:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   17912:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   17916:	2304      	movs	r3, #4
	sc->start = 0U;
   17918:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   1791c:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   17920:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   17924:	4631      	mov	r1, r6
   17926:	f7ff ff61 	bl	177ec <bt_gatt_indicate>
   1792a:	b918      	cbnz	r0, 17934 <sc_process+0x58>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1792c:	2102      	movs	r1, #2
   1792e:	4628      	mov	r0, r5
   17930:	f017 feaa 	bl	2f688 <atomic_or>
}
   17934:	b002      	add	sp, #8
   17936:	bd70      	pop	{r4, r5, r6, pc}
   17938:	00032de4 	.word	0x00032de4
   1793c:	00017249 	.word	0x00017249

00017940 <gatt_notify>:
{
   17940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17944:	4614      	mov	r4, r2
   17946:	b087      	sub	sp, #28
   17948:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   1794a:	2214      	movs	r2, #20
   1794c:	6861      	ldr	r1, [r4, #4]
{
   1794e:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   17950:	f018 f8ad 	bl	2faae <bt_gatt_check_perm>
   17954:	b170      	cbz	r0, 17974 <gatt_notify+0x34>
		BT_WARN("Link is not encrypted");
   17956:	4b1f      	ldr	r3, [pc, #124]	; (179d4 <gatt_notify+0x94>)
   17958:	481f      	ldr	r0, [pc, #124]	; (179d8 <gatt_notify+0x98>)
   1795a:	9304      	str	r3, [sp, #16]
   1795c:	aa03      	add	r2, sp, #12
   1795e:	2302      	movs	r3, #2
   17960:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17964:	9303      	str	r3, [sp, #12]
   17966:	f017 fed2 	bl	2f70e <z_log_msg2_static_create.constprop.0>
		return -EPERM;
   1796a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1796e:	b007      	add	sp, #28
   17970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				sizeof(*nfy) + params->len);
   17974:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   17976:	211b      	movs	r1, #27
   17978:	3202      	adds	r2, #2
   1797a:	4638      	mov	r0, r7
   1797c:	f7fe fb58 	bl	16030 <bt_att_create_pdu>
	if (!buf) {
   17980:	4605      	mov	r5, r0
   17982:	b960      	cbnz	r0, 1799e <gatt_notify+0x5e>
		BT_WARN("No buffer available to send notification");
   17984:	4b15      	ldr	r3, [pc, #84]	; (179dc <gatt_notify+0x9c>)
   17986:	4814      	ldr	r0, [pc, #80]	; (179d8 <gatt_notify+0x98>)
   17988:	9304      	str	r3, [sp, #16]
   1798a:	aa03      	add	r2, sp, #12
   1798c:	2302      	movs	r3, #2
   1798e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17992:	9303      	str	r3, [sp, #12]
   17994:	f017 febb 	bl	2f70e <z_log_msg2_static_create.constprop.0>
		return -ENOMEM;
   17998:	f06f 000b 	mvn.w	r0, #11
   1799c:	e7e7      	b.n	1796e <gatt_notify+0x2e>
   1799e:	f100 0908 	add.w	r9, r0, #8
   179a2:	2102      	movs	r1, #2
   179a4:	4648      	mov	r0, r9
   179a6:	f019 f865 	bl	30a74 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   179aa:	4606      	mov	r6, r0
   179ac:	89a1      	ldrh	r1, [r4, #12]
   179ae:	f826 8b02 	strh.w	r8, [r6], #2
   179b2:	4648      	mov	r0, r9
   179b4:	f019 f85e 	bl	30a74 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   179b8:	89a2      	ldrh	r2, [r4, #12]
   179ba:	68a1      	ldr	r1, [r4, #8]
   179bc:	4630      	mov	r0, r6
   179be:	f016 fb34 	bl	2e02a <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   179c2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   179c6:	4629      	mov	r1, r5
   179c8:	4638      	mov	r0, r7
}
   179ca:	b007      	add	sp, #28
   179cc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   179d0:	f017 bd4a 	b.w	2f468 <bt_att_send>
   179d4:	00035fda 	.word	0x00035fda
   179d8:	00032444 	.word	0x00032444
   179dc:	00036017 	.word	0x00036017

000179e0 <bt_gatt_notify_cb>:
{
   179e0:	b530      	push	{r4, r5, lr}
   179e2:	4604      	mov	r4, r0
   179e4:	b08b      	sub	sp, #44	; 0x2c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   179e6:	4835      	ldr	r0, [pc, #212]	; (17abc <bt_gatt_notify_cb+0xdc>)
   179e8:	f017 fdf3 	bl	2f5d2 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   179ec:	0742      	lsls	r2, r0, #29
{
   179ee:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   179f0:	d55d      	bpl.n	17aae <bt_gatt_notify_cb+0xce>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   179f2:	b114      	cbz	r4, 179fa <bt_gatt_notify_cb+0x1a>
   179f4:	7b63      	ldrb	r3, [r4, #13]
   179f6:	2b07      	cmp	r3, #7
   179f8:	d15c      	bne.n	17ab4 <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
   179fa:	6868      	ldr	r0, [r5, #4]
   179fc:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   179fe:	f7ff fca7 	bl	17350 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   17a02:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   17a04:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   17a08:	b33a      	cbz	r2, 17a5a <bt_gatt_notify_cb+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17a0a:	a905      	add	r1, sp, #20
   17a0c:	9102      	str	r1, [sp, #8]
   17a0e:	492c      	ldr	r1, [pc, #176]	; (17ac0 <bt_gatt_notify_cb+0xe0>)
   17a10:	9101      	str	r1, [sp, #4]
   17a12:	2101      	movs	r1, #1
	found->attr = NULL;
   17a14:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17a16:	9100      	str	r1, [sp, #0]
   17a18:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   17a1c:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17a1e:	f7ff fcc7 	bl	173b0 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   17a22:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   17a24:	b91b      	cbnz	r3, 17a2e <bt_gatt_notify_cb+0x4e>
			return -ENOENT;
   17a26:	f06f 0001 	mvn.w	r0, #1
}
   17a2a:	b00b      	add	sp, #44	; 0x2c
   17a2c:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   17a2e:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   17a30:	9b05      	ldr	r3, [sp, #20]
   17a32:	6818      	ldr	r0, [r3, #0]
   17a34:	2300      	movs	r3, #0
   17a36:	f88d 3010 	strb.w	r3, [sp, #16]
   17a3a:	a904      	add	r1, sp, #16
   17a3c:	f642 0303 	movw	r3, #10243	; 0x2803
   17a40:	f8ad 3012 	strh.w	r3, [sp, #18]
   17a44:	f016 fbca 	bl	2e1dc <bt_uuid_cmp>
   17a48:	b970      	cbnz	r0, 17a68 <bt_gatt_notify_cb+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   17a4a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   17a4c:	68c3      	ldr	r3, [r0, #12]
   17a4e:	799b      	ldrb	r3, [r3, #6]
   17a50:	06db      	lsls	r3, r3, #27
   17a52:	d405      	bmi.n	17a60 <bt_gatt_notify_cb+0x80>
			return -EINVAL;
   17a54:	f06f 0015 	mvn.w	r0, #21
   17a58:	e7e7      	b.n	17a2a <bt_gatt_notify_cb+0x4a>
		if (!data.handle) {
   17a5a:	2800      	cmp	r0, #0
   17a5c:	d1e8      	bne.n	17a30 <bt_gatt_notify_cb+0x50>
   17a5e:	e7e2      	b.n	17a26 <bt_gatt_notify_cb+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   17a60:	f017 ffaf 	bl	2f9c2 <bt_gatt_attr_value_handle>
   17a64:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   17a68:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   17a6c:	b12c      	cbz	r4, 17a7a <bt_gatt_notify_cb+0x9a>
		return gatt_notify(conn, data.handle, params);
   17a6e:	4601      	mov	r1, r0
   17a70:	462a      	mov	r2, r5
   17a72:	4620      	mov	r0, r4
   17a74:	f7ff ff64 	bl	17940 <gatt_notify>
   17a78:	e7d7      	b.n	17a2a <bt_gatt_notify_cb+0x4a>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17a7a:	f642 1202 	movw	r2, #10498	; 0x2902
   17a7e:	f8ad 2012 	strh.w	r2, [sp, #18]
   17a82:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   17a84:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17a88:	9202      	str	r2, [sp, #8]
   17a8a:	4a0e      	ldr	r2, [pc, #56]	; (17ac4 <bt_gatt_notify_cb+0xe4>)
	data.err = -ENOTCONN;
   17a8c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   17a8e:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17a90:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   17a94:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17a98:	aa04      	add	r2, sp, #16
   17a9a:	4623      	mov	r3, r4
   17a9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   17aa0:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17aa2:	f88d 4010 	strb.w	r4, [sp, #16]
   17aa6:	f7ff fc83 	bl	173b0 <bt_gatt_foreach_attr_type>
	return data.err;
   17aaa:	9807      	ldr	r0, [sp, #28]
   17aac:	e7bd      	b.n	17a2a <bt_gatt_notify_cb+0x4a>
		return -EAGAIN;
   17aae:	f06f 000a 	mvn.w	r0, #10
   17ab2:	e7ba      	b.n	17a2a <bt_gatt_notify_cb+0x4a>
		return -ENOTCONN;
   17ab4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   17ab8:	e7b7      	b.n	17a2a <bt_gatt_notify_cb+0x4a>
   17aba:	bf00      	nop
   17abc:	200000cc 	.word	0x200000cc
   17ac0:	0002f561 	.word	0x0002f561
   17ac4:	00017bcd 	.word	0x00017bcd

00017ac8 <notify_cb.part.0>:
static uint8_t notify_cb(const struct bt_gatt_attr *attr, uint16_t handle,
   17ac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   17acc:	4b3b      	ldr	r3, [pc, #236]	; (17bbc <notify_cb.part.0+0xf4>)
	ccc = attr->user_data;
   17ace:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   17ad0:	429f      	cmp	r7, r3
static uint8_t notify_cb(const struct bt_gatt_attr *attr, uint16_t handle,
   17ad2:	b087      	sub	sp, #28
   17ad4:	4606      	mov	r6, r0
   17ad6:	460c      	mov	r4, r1
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   17ad8:	d014      	beq.n	17b04 <notify_cb.part.0+0x3c>
		if (cfg->value != data->type) {
   17ada:	893a      	ldrh	r2, [r7, #8]
   17adc:	89a3      	ldrh	r3, [r4, #12]
   17ade:	429a      	cmp	r2, r3
   17ae0:	d10b      	bne.n	17afa <notify_cb.part.0+0x32>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   17ae2:	4639      	mov	r1, r7
   17ae4:	f811 0b01 	ldrb.w	r0, [r1], #1
   17ae8:	f7fd fa6c 	bl	14fc4 <bt_conn_lookup_addr_le>
		if (!conn) {
   17aec:	4605      	mov	r5, r0
   17aee:	b120      	cbz	r0, 17afa <notify_cb.part.0+0x32>
		if (conn->state != BT_CONN_CONNECTED) {
   17af0:	7b43      	ldrb	r3, [r0, #13]
   17af2:	2b07      	cmp	r3, #7
   17af4:	d02e      	beq.n	17b54 <notify_cb.part.0+0x8c>
			bt_conn_unref(conn);
   17af6:	f016 ff38 	bl	2e96a <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   17afa:	2701      	movs	r7, #1
}
   17afc:	4638      	mov	r0, r7
   17afe:	b007      	add	sp, #28
   17b00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   17b04:	f04f 0800 	mov.w	r8, #0
   17b08:	4d2d      	ldr	r5, [pc, #180]	; (17bc0 <notify_cb.part.0+0xf8>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   17b0a:	46c1      	mov	r9, r8
   17b0c:	2207      	movs	r2, #7
   17b0e:	4669      	mov	r1, sp
   17b10:	4628      	mov	r0, r5
   17b12:	f8cd 9000 	str.w	r9, [sp]
   17b16:	f8cd 9003 	str.w	r9, [sp, #3]
   17b1a:	f016 fa75 	bl	2e008 <memcmp>
   17b1e:	b178      	cbz	r0, 17b40 <notify_cb.part.0+0x78>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   17b20:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   17b24:	2207      	movs	r2, #7
   17b26:	4629      	mov	r1, r5
   17b28:	f7fd fa98 	bl	1505c <bt_conn_lookup_state_le>
			if (!conn) {
   17b2c:	b978      	cbnz	r0, 17b4e <notify_cb.part.0+0x86>
				sc = (struct sc_data *)data->ind_params->data;
   17b2e:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   17b30:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   17b34:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   17b36:	4629      	mov	r1, r5
   17b38:	8853      	ldrh	r3, [r2, #2]
   17b3a:	8812      	ldrh	r2, [r2, #0]
   17b3c:	f7ff f9fc 	bl	16f38 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   17b40:	350c      	adds	r5, #12
   17b42:	f1b8 0f00 	cmp.w	r8, #0
   17b46:	d1c8      	bne.n	17ada <notify_cb.part.0+0x12>
   17b48:	f04f 0801 	mov.w	r8, #1
   17b4c:	e7de      	b.n	17b0c <notify_cb.part.0+0x44>
			bt_conn_unref(conn);
   17b4e:	f016 ff0c 	bl	2e96a <bt_conn_unref>
   17b52:	e7f5      	b.n	17b40 <notify_cb.part.0+0x78>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   17b54:	697b      	ldr	r3, [r7, #20]
   17b56:	b123      	cbz	r3, 17b62 <notify_cb.part.0+0x9a>
   17b58:	4631      	mov	r1, r6
   17b5a:	4798      	blx	r3
   17b5c:	b908      	cbnz	r0, 17b62 <notify_cb.part.0+0x9a>
			bt_conn_unref(conn);
   17b5e:	4628      	mov	r0, r5
   17b60:	e7c9      	b.n	17af6 <notify_cb.part.0+0x2e>
		if (bt_gatt_check_perm(conn, attr,
   17b62:	2214      	movs	r2, #20
   17b64:	4631      	mov	r1, r6
   17b66:	4628      	mov	r0, r5
   17b68:	f017 ffa1 	bl	2faae <bt_gatt_check_perm>
   17b6c:	4607      	mov	r7, r0
   17b6e:	b150      	cbz	r0, 17b86 <notify_cb.part.0+0xbe>
			BT_WARN("Link is not encrypted");
   17b70:	4b14      	ldr	r3, [pc, #80]	; (17bc4 <notify_cb.part.0+0xfc>)
   17b72:	9304      	str	r3, [sp, #16]
   17b74:	4814      	ldr	r0, [pc, #80]	; (17bc8 <notify_cb.part.0+0x100>)
   17b76:	2302      	movs	r3, #2
   17b78:	aa03      	add	r2, sp, #12
   17b7a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17b7e:	9303      	str	r3, [sp, #12]
   17b80:	f017 fdc5 	bl	2f70e <z_log_msg2_static_create.constprop.0>
			continue;
   17b84:	e7b9      	b.n	17afa <notify_cb.part.0+0x32>
		if (data->type == BT_GATT_CCC_INDICATE) {
   17b86:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
   17b88:	88a1      	ldrh	r1, [r4, #4]
   17b8a:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
   17b8c:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   17b8e:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   17b90:	d10f      	bne.n	17bb2 <notify_cb.part.0+0xea>
			err = gatt_indicate(conn, data->handle,
   17b92:	f7ff fdc1 	bl	17718 <gatt_indicate>
			if (err == 0) {
   17b96:	4606      	mov	r6, r0
   17b98:	b918      	cbnz	r0, 17ba2 <notify_cb.part.0+0xda>
				data->ind_params->_ref++;
   17b9a:	6922      	ldr	r2, [r4, #16]
   17b9c:	7d93      	ldrb	r3, [r2, #22]
   17b9e:	3301      	adds	r3, #1
   17ba0:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   17ba2:	4628      	mov	r0, r5
   17ba4:	f016 fee1 	bl	2e96a <bt_conn_unref>
		if (err < 0) {
   17ba8:	2e00      	cmp	r6, #0
   17baa:	dba7      	blt.n	17afc <notify_cb.part.0+0x34>
		data->err = 0;
   17bac:	2300      	movs	r3, #0
   17bae:	60a3      	str	r3, [r4, #8]
   17bb0:	e7a3      	b.n	17afa <notify_cb.part.0+0x32>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   17bb2:	f7ff fec5 	bl	17940 <gatt_notify>
   17bb6:	4606      	mov	r6, r0
   17bb8:	e7f3      	b.n	17ba2 <notify_cb.part.0+0xda>
   17bba:	bf00      	nop
   17bbc:	200003bc 	.word	0x200003bc
   17bc0:	20003295 	.word	0x20003295
   17bc4:	00035fda 	.word	0x00035fda
   17bc8:	00032444 	.word	0x00032444

00017bcc <notify_cb>:
	if (attr->write != bt_gatt_attr_write_ccc) {
   17bcc:	4b04      	ldr	r3, [pc, #16]	; (17be0 <notify_cb+0x14>)
{
   17bce:	4611      	mov	r1, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17bd0:	6882      	ldr	r2, [r0, #8]
   17bd2:	429a      	cmp	r2, r3
   17bd4:	d101      	bne.n	17bda <notify_cb+0xe>
   17bd6:	f7ff bf77 	b.w	17ac8 <notify_cb.part.0>
}
   17bda:	2001      	movs	r0, #1
   17bdc:	4770      	bx	lr
   17bde:	bf00      	nop
   17be0:	00016e25 	.word	0x00016e25

00017be4 <update_ccc>:
{
   17be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   17be8:	4b38      	ldr	r3, [pc, #224]	; (17ccc <update_ccc+0xe8>)
	struct bt_conn *conn = data->conn;
   17bea:	6814      	ldr	r4, [r2, #0]
{
   17bec:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17bee:	6882      	ldr	r2, [r0, #8]
   17bf0:	429a      	cmp	r2, r3
{
   17bf2:	b088      	sub	sp, #32
   17bf4:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   17bf6:	d12c      	bne.n	17c52 <update_ccc+0x6e>
	ccc = attr->user_data;
   17bf8:	68c7      	ldr	r7, [r0, #12]
		if (!cfg->value ||
   17bfa:	893b      	ldrh	r3, [r7, #8]
   17bfc:	b34b      	cbz	r3, 17c52 <update_ccc+0x6e>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   17bfe:	463a      	mov	r2, r7
   17c00:	4620      	mov	r0, r4
   17c02:	f812 1b01 	ldrb.w	r1, [r2], #1
   17c06:	f016 ff4b 	bl	2eaa0 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   17c0a:	b310      	cbz	r0, 17c52 <update_ccc+0x6e>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   17c0c:	222a      	movs	r2, #42	; 0x2a
   17c0e:	4629      	mov	r1, r5
   17c10:	4620      	mov	r0, r4
   17c12:	f017 ff4c 	bl	2faae <bt_gatt_check_perm>
		if (err) {
   17c16:	b300      	cbz	r0, 17c5a <update_ccc+0x76>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   17c18:	2803      	cmp	r0, #3
   17c1a:	d10a      	bne.n	17c32 <update_ccc+0x4e>
				BT_WARN("CCC %p not writable", attr);
   17c1c:	4b2c      	ldr	r3, [pc, #176]	; (17cd0 <update_ccc+0xec>)
   17c1e:	9005      	str	r0, [sp, #20]
   17c20:	e9cd 3506 	strd	r3, r5, [sp, #24]
   17c24:	aa05      	add	r2, sp, #20
   17c26:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
		BT_ERR("SC restore indication failed");
   17c2a:	482a      	ldr	r0, [pc, #168]	; (17cd4 <update_ccc+0xf0>)
   17c2c:	f017 fd6f 	bl	2f70e <z_log_msg2_static_create.constprop.0>
   17c30:	e00f      	b.n	17c52 <update_ccc+0x6e>
				sec = BT_SECURITY_L3;
   17c32:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   17c34:	4620      	mov	r0, r4
				sec = BT_SECURITY_L3;
   17c36:	bf14      	ite	ne
   17c38:	f04f 0802 	movne.w	r8, #2
   17c3c:	f04f 0803 	moveq.w	r8, #3
			    bt_conn_get_security(conn) < sec) {
   17c40:	f016 ff2c 	bl	2ea9c <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   17c44:	4580      	cmp	r8, r0
   17c46:	d908      	bls.n	17c5a <update_ccc+0x76>
				if (data->sec < sec) {
   17c48:	7933      	ldrb	r3, [r6, #4]
   17c4a:	4543      	cmp	r3, r8
   17c4c:	d201      	bcs.n	17c52 <update_ccc+0x6e>
					data->sec = sec;
   17c4e:	f886 8004 	strb.w	r8, [r6, #4]
}
   17c52:	2001      	movs	r0, #1
   17c54:	b008      	add	sp, #32
   17c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		gatt_ccc_changed(attr, ccc);
   17c5a:	4639      	mov	r1, r7
   17c5c:	4628      	mov	r0, r5
   17c5e:	f017 fc62 	bl	2f526 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   17c62:	4b1d      	ldr	r3, [pc, #116]	; (17cd8 <update_ccc+0xf4>)
   17c64:	429f      	cmp	r7, r3
   17c66:	d1f4      	bne.n	17c52 <update_ccc+0x6e>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   17c68:	7a20      	ldrb	r0, [r4, #8]
   17c6a:	f104 0188 	add.w	r1, r4, #136	; 0x88
   17c6e:	f7ff f941 	bl	16ef4 <find_sc_cfg>
	if (!cfg) {
   17c72:	2800      	cmp	r0, #0
   17c74:	d0ed      	beq.n	17c52 <update_ccc+0x6e>
	if (!(cfg->data.start || cfg->data.end)) {
   17c76:	8902      	ldrh	r2, [r0, #8]
   17c78:	8943      	ldrh	r3, [r0, #10]
   17c7a:	ea52 0103 	orrs.w	r1, r2, r3
   17c7e:	d0e8      	beq.n	17c52 <update_ccc+0x6e>
	index = bt_conn_index(conn);
   17c80:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   17c82:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   17c86:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   17c8a:	f7fd f87d 	bl	14d88 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   17c8e:	4913      	ldr	r1, [pc, #76]	; (17cdc <update_ccc+0xf8>)
   17c90:	4a13      	ldr	r2, [pc, #76]	; (17ce0 <update_ccc+0xfc>)
   17c92:	2318      	movs	r3, #24
   17c94:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17c98:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   17c9a:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   17c9c:	4a11      	ldr	r2, [pc, #68]	; (17ce4 <update_ccc+0x100>)
   17c9e:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   17ca0:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17ca2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   17ca6:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   17ca8:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17caa:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   17cae:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17cb0:	4620      	mov	r0, r4
   17cb2:	f7ff fd9b 	bl	177ec <bt_gatt_indicate>
   17cb6:	2800      	cmp	r0, #0
   17cb8:	d0cb      	beq.n	17c52 <update_ccc+0x6e>
		BT_ERR("SC restore indication failed");
   17cba:	4b0b      	ldr	r3, [pc, #44]	; (17ce8 <update_ccc+0x104>)
   17cbc:	9306      	str	r3, [sp, #24]
   17cbe:	2302      	movs	r3, #2
   17cc0:	9305      	str	r3, [sp, #20]
   17cc2:	aa05      	add	r2, sp, #20
   17cc4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17cc8:	e7af      	b.n	17c2a <update_ccc+0x46>
   17cca:	bf00      	nop
   17ccc:	00016e25 	.word	0x00016e25
   17cd0:	00036040 	.word	0x00036040
   17cd4:	00032444 	.word	0x00032444
   17cd8:	200003bc 	.word	0x200003bc
   17cdc:	20001f28 	.word	0x20001f28
   17ce0:	00032de4 	.word	0x00032de4
   17ce4:	0002f955 	.word	0x0002f955
   17ce8:	00036054 	.word	0x00036054

00017cec <bt_gatt_connected>:
{
   17cec:	b570      	push	{r4, r5, r6, lr}
   17cee:	b090      	sub	sp, #64	; 0x40
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17cf0:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   17cf4:	4604      	mov	r4, r0
	data.conn = conn;
   17cf6:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
   17cf8:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17cfa:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   17cfc:	f88d 3014 	strb.w	r3, [sp, #20]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17d00:	4629      	mov	r1, r5
   17d02:	f016 fbc3 	bl	2e48c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   17d06:	b190      	cbz	r0, 17d2e <bt_gatt_connected+0x42>
		if (conn->id) {
   17d08:	7a22      	ldrb	r2, [r4, #8]
   17d0a:	b37a      	cbz	r2, 17d6c <bt_gatt_connected+0x80>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   17d0c:	ae03      	add	r6, sp, #12
   17d0e:	2104      	movs	r1, #4
   17d10:	4630      	mov	r0, r6
   17d12:	f013 fd8f 	bl	2b834 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   17d16:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   17d18:	4a15      	ldr	r2, [pc, #84]	; (17d70 <bt_gatt_connected+0x84>)
   17d1a:	2124      	movs	r1, #36	; 0x24
   17d1c:	a806      	add	r0, sp, #24
   17d1e:	462b      	mov	r3, r5
   17d20:	f7f9 fe66 	bl	119f0 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   17d24:	aa06      	add	r2, sp, #24
   17d26:	4913      	ldr	r1, [pc, #76]	; (17d74 <bt_gatt_connected+0x88>)
   17d28:	4610      	mov	r0, r2
   17d2a:	f7f8 f8c7 	bl	febc <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   17d2e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17d32:	4a11      	ldr	r2, [pc, #68]	; (17d78 <bt_gatt_connected+0x8c>)
   17d34:	ab04      	add	r3, sp, #16
   17d36:	2001      	movs	r0, #1
   17d38:	f017 fe91 	bl	2fa5e <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   17d3c:	4620      	mov	r0, r4
   17d3e:	f016 fead 	bl	2ea9c <bt_conn_get_security>
   17d42:	f89d 1014 	ldrb.w	r1, [sp, #20]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   17d46:	4288      	cmp	r0, r1
   17d48:	d20e      	bcs.n	17d68 <bt_gatt_connected+0x7c>
		int err = bt_conn_set_security(conn, data.sec);
   17d4a:	4620      	mov	r0, r4
   17d4c:	f016 fe76 	bl	2ea3c <bt_conn_set_security>
		if (err) {
   17d50:	b150      	cbz	r0, 17d68 <bt_gatt_connected+0x7c>
			BT_WARN("Failed to set security for bonded peer (%d)",
   17d52:	4b0a      	ldr	r3, [pc, #40]	; (17d7c <bt_gatt_connected+0x90>)
   17d54:	aa09      	add	r2, sp, #36	; 0x24
   17d56:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
   17d5a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17d5e:	2303      	movs	r3, #3
   17d60:	4807      	ldr	r0, [pc, #28]	; (17d80 <bt_gatt_connected+0x94>)
   17d62:	9309      	str	r3, [sp, #36]	; 0x24
   17d64:	f017 fcd3 	bl	2f70e <z_log_msg2_static_create.constprop.0>
}
   17d68:	b010      	add	sp, #64	; 0x40
   17d6a:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   17d6c:	9200      	str	r2, [sp, #0]
   17d6e:	e7d3      	b.n	17d18 <bt_gatt_connected+0x2c>
   17d70:	00035fd6 	.word	0x00035fd6
   17d74:	000176ad 	.word	0x000176ad
   17d78:	00017be5 	.word	0x00017be5
   17d7c:	00036071 	.word	0x00036071
   17d80:	00032444 	.word	0x00032444

00017d84 <bt_gatt_att_max_mtu_changed>:
{
   17d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   17d86:	4b08      	ldr	r3, [pc, #32]	; (17da8 <bt_gatt_att_max_mtu_changed+0x24>)
   17d88:	681c      	ldr	r4, [r3, #0]
   17d8a:	4605      	mov	r5, r0
   17d8c:	460e      	mov	r6, r1
   17d8e:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   17d90:	b14c      	cbz	r4, 17da6 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   17d92:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   17d96:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   17d98:	b11b      	cbz	r3, 17da2 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   17d9a:	463a      	mov	r2, r7
   17d9c:	4631      	mov	r1, r6
   17d9e:	4628      	mov	r0, r5
   17da0:	4798      	blx	r3
	return node->next;
   17da2:	6864      	ldr	r4, [r4, #4]
   17da4:	e7f4      	b.n	17d90 <bt_gatt_att_max_mtu_changed+0xc>
}
   17da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17da8:	20001ef4 	.word	0x20001ef4

00017dac <bt_gatt_encrypt_change>:
{
   17dac:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   17dae:	4a06      	ldr	r2, [pc, #24]	; (17dc8 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   17db0:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   17db2:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   17db4:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   17db6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   17dba:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   17dbe:	f017 fe4e 	bl	2fa5e <bt_gatt_foreach_attr>
}
   17dc2:	b003      	add	sp, #12
   17dc4:	f85d fb04 	ldr.w	pc, [sp], #4
   17dc8:	00017be5 	.word	0x00017be5

00017dcc <db_hash_read>:
{
   17dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   17dce:	4914      	ldr	r1, [pc, #80]	; (17e20 <db_hash_read+0x54>)
{
   17dd0:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   17dd4:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   17dd6:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   17dda:	461f      	mov	r7, r3
   17ddc:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   17dde:	f019 fdb0 	bl	31942 <k_work_cancel_delayable_sync>
   17de2:	4810      	ldr	r0, [pc, #64]	; (17e24 <db_hash_read+0x58>)
   17de4:	f017 fbf5 	bl	2f5d2 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   17de8:	0743      	lsls	r3, r0, #29
   17dea:	d402      	bmi.n	17df2 <db_hash_read+0x26>
		db_hash_gen(true);
   17dec:	2001      	movs	r0, #1
   17dee:	f7ff fb59 	bl	174a4 <db_hash_gen>
	(void)bt_gatt_change_aware(conn, true);
   17df2:	2101      	movs	r1, #1
   17df4:	4620      	mov	r0, r4
   17df6:	f017 fe85 	bl	2fb04 <bt_gatt_change_aware>
	if (offset > value_len) {
   17dfa:	2e10      	cmp	r6, #16
   17dfc:	d80c      	bhi.n	17e18 <db_hash_read+0x4c>
	len = MIN(buf_len, value_len - offset);
   17dfe:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   17e02:	4909      	ldr	r1, [pc, #36]	; (17e28 <db_hash_read+0x5c>)
	len = MIN(buf_len, value_len - offset);
   17e04:	42bc      	cmp	r4, r7
   17e06:	bfa8      	it	ge
   17e08:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   17e0a:	4622      	mov	r2, r4
   17e0c:	4431      	add	r1, r6
   17e0e:	4628      	mov	r0, r5
   17e10:	f016 f90b 	bl	2e02a <memcpy>
}
   17e14:	4620      	mov	r0, r4
   17e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   17e18:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   17e1c:	e7fa      	b.n	17e14 <db_hash_read+0x48>
   17e1e:	bf00      	nop
   17e20:	20001580 	.word	0x20001580
   17e24:	20001630 	.word	0x20001630
   17e28:	20001530 	.word	0x20001530

00017e2c <bt_gatt_store_ccc>:
{
   17e2c:	b570      	push	{r4, r5, r6, lr}
   17e2e:	b0c4      	sub	sp, #272	; 0x110
	save.count = 0;
   17e30:	2300      	movs	r3, #0
{
   17e32:	4604      	mov	r4, r0
   17e34:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   17e36:	9111      	str	r1, [sp, #68]	; 0x44
	save.addr_with_id.id = id;
   17e38:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
	save.count = 0;
   17e3c:	9343      	str	r3, [sp, #268]	; 0x10c
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   17e3e:	4a18      	ldr	r2, [pc, #96]	; (17ea0 <bt_gatt_store_ccc+0x74>)
   17e40:	ab11      	add	r3, sp, #68	; 0x44
   17e42:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17e46:	2001      	movs	r0, #1
   17e48:	f017 fe09 	bl	2fa5e <bt_gatt_foreach_attr>
	if (id) {
   17e4c:	b31c      	cbz	r4, 17e96 <bt_gatt_store_ccc+0x6a>
		u8_to_dec(id_str, sizeof(id_str), id);
   17e4e:	ae02      	add	r6, sp, #8
   17e50:	4622      	mov	r2, r4
   17e52:	2104      	movs	r1, #4
   17e54:	4630      	mov	r0, r6
   17e56:	f013 fced 	bl	2b834 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   17e5a:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   17e5c:	4a11      	ldr	r2, [pc, #68]	; (17ea4 <bt_gatt_store_ccc+0x78>)
   17e5e:	462b      	mov	r3, r5
   17e60:	2124      	movs	r1, #36	; 0x24
   17e62:	a808      	add	r0, sp, #32
   17e64:	f7f9 fdc4 	bl	119f0 <bt_settings_encode_key>
	if (save.count) {
   17e68:	9a43      	ldr	r2, [sp, #268]	; 0x10c
   17e6a:	b1b2      	cbz	r2, 17e9a <bt_gatt_store_ccc+0x6e>
		len = save.count * sizeof(*save.store);
   17e6c:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   17e6e:	a913      	add	r1, sp, #76	; 0x4c
	err = settings_save_one(key, str, len);
   17e70:	a808      	add	r0, sp, #32
   17e72:	f7f7 ffc3 	bl	fdfc <settings_save_one>
	if (err) {
   17e76:	4604      	mov	r4, r0
   17e78:	b150      	cbz	r0, 17e90 <bt_gatt_store_ccc+0x64>
		BT_ERR("Failed to store CCCs (err %d)", err);
   17e7a:	4b0b      	ldr	r3, [pc, #44]	; (17ea8 <bt_gatt_store_ccc+0x7c>)
   17e7c:	aa05      	add	r2, sp, #20
   17e7e:	e9cd 3006 	strd	r3, r0, [sp, #24]
   17e82:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17e86:	2303      	movs	r3, #3
   17e88:	4808      	ldr	r0, [pc, #32]	; (17eac <bt_gatt_store_ccc+0x80>)
   17e8a:	9305      	str	r3, [sp, #20]
   17e8c:	f017 fc3f 	bl	2f70e <z_log_msg2_static_create.constprop.0>
}
   17e90:	4620      	mov	r0, r4
   17e92:	b044      	add	sp, #272	; 0x110
   17e94:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   17e96:	9400      	str	r4, [sp, #0]
   17e98:	e7e0      	b.n	17e5c <bt_gatt_store_ccc+0x30>
		str = NULL;
   17e9a:	4611      	mov	r1, r2
   17e9c:	e7e8      	b.n	17e70 <bt_gatt_store_ccc+0x44>
   17e9e:	bf00      	nop
   17ea0:	00016d61 	.word	0x00016d61
   17ea4:	00035fd6 	.word	0x00035fd6
   17ea8:	0003609d 	.word	0x0003609d
   17eac:	00032444 	.word	0x00032444

00017eb0 <bt_gatt_clear>:
		gatt_sub_remove(NULL, sub, prev, params);
	}
}

int bt_gatt_clear(uint8_t id, const bt_addr_le_t *addr)
{
   17eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   17eb2:	b08f      	sub	sp, #60	; 0x3c
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   17eb4:	ae03      	add	r6, sp, #12
{
   17eb6:	4604      	mov	r4, r0
   17eb8:	460d      	mov	r5, r1
	struct addr_with_id addr_with_id = {
   17eba:	9103      	str	r1, [sp, #12]
   17ebc:	f88d 0010 	strb.w	r0, [sp, #16]
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   17ec0:	4a1f      	ldr	r2, [pc, #124]	; (17f40 <bt_gatt_clear+0x90>)
   17ec2:	4633      	mov	r3, r6
   17ec4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17ec8:	2001      	movs	r0, #1
   17eca:	f017 fdc8 	bl	2fa5e <bt_gatt_foreach_attr>
		if (id) {
   17ece:	b394      	cbz	r4, 17f36 <bt_gatt_clear+0x86>
			u8_to_dec(id_str, sizeof(id_str), id);
   17ed0:	af02      	add	r7, sp, #8
   17ed2:	4622      	mov	r2, r4
   17ed4:	2104      	movs	r1, #4
   17ed6:	4638      	mov	r0, r7
   17ed8:	f013 fcac 	bl	2b834 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   17edc:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   17ede:	4a19      	ldr	r2, [pc, #100]	; (17f44 <bt_gatt_clear+0x94>)
   17ee0:	462b      	mov	r3, r5
   17ee2:	2124      	movs	r1, #36	; 0x24
   17ee4:	a805      	add	r0, sp, #20
   17ee6:	f7f9 fd83 	bl	119f0 <bt_settings_encode_key>
		return settings_delete(key);
   17eea:	a805      	add	r0, sp, #20
   17eec:	f014 fdbb 	bl	2ca66 <settings_delete>
	int err;

	err = bt_gatt_clear_ccc(id, addr);
	if (err < 0) {
   17ef0:	2800      	cmp	r0, #0
   17ef2:	db1e      	blt.n	17f32 <bt_gatt_clear+0x82>
		return err;
	}

	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
		err = bt_gatt_clear_sc(id, addr);
   17ef4:	4629      	mov	r1, r5
   17ef6:	4620      	mov	r0, r4
   17ef8:	f7ff f864 	bl	16fc4 <bt_gatt_clear_sc>
		if (err < 0) {
   17efc:	2800      	cmp	r0, #0
   17efe:	db18      	blt.n	17f32 <bt_gatt_clear+0x82>
	cfg = find_cf_cfg_by_addr(id, addr);
   17f00:	4629      	mov	r1, r5
   17f02:	4620      	mov	r0, r4
   17f04:	f7fe fe64 	bl	16bd0 <find_cf_cfg_by_addr>
	if (cfg) {
   17f08:	b108      	cbz	r0, 17f0e <bt_gatt_clear+0x5e>
		clear_cf_cfg(cfg);
   17f0a:	f017 fc03 	bl	2f714 <clear_cf_cfg>
		if (id) {
   17f0e:	b1a4      	cbz	r4, 17f3a <bt_gatt_clear+0x8a>
			u8_to_dec(id_str, sizeof(id_str), id);
   17f10:	4622      	mov	r2, r4
   17f12:	2104      	movs	r1, #4
   17f14:	4630      	mov	r0, r6
   17f16:	f013 fc8d 	bl	2b834 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   17f1a:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "cf",
   17f1c:	4a0a      	ldr	r2, [pc, #40]	; (17f48 <bt_gatt_clear+0x98>)
   17f1e:	462b      	mov	r3, r5
   17f20:	2124      	movs	r1, #36	; 0x24
   17f22:	a805      	add	r0, sp, #20
   17f24:	f7f9 fd64 	bl	119f0 <bt_settings_encode_key>
		return settings_delete(key);
   17f28:	a805      	add	r0, sp, #20
   17f2a:	f014 fd9c 	bl	2ca66 <settings_delete>
		}
	}

	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		err = bt_gatt_clear_cf(id, addr);
		if (err < 0) {
   17f2e:	ea00 70e0 	and.w	r0, r0, r0, asr #31
	if (IS_ENABLED(CONFIG_BT_GATT_CLIENT)) {
		bt_gatt_clear_subscriptions(id, addr);
	}

	return 0;
}
   17f32:	b00f      	add	sp, #60	; 0x3c
   17f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   17f36:	9400      	str	r4, [sp, #0]
   17f38:	e7d1      	b.n	17ede <bt_gatt_clear+0x2e>
			bt_settings_encode_key(key, sizeof(key), "cf",
   17f3a:	9400      	str	r4, [sp, #0]
   17f3c:	e7ee      	b.n	17f1c <bt_gatt_clear+0x6c>
   17f3e:	bf00      	nop
   17f40:	00016d39 	.word	0x00016d39
   17f44:	00035fd6 	.word	0x00035fd6
   17f48:	000360e7 	.word	0x000360e7

00017f4c <bt_gatt_disconnected>:

void bt_gatt_disconnected(struct bt_conn *conn)
{
   17f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   17f4e:	4603      	mov	r3, r0
   17f50:	4a45      	ldr	r2, [pc, #276]	; (18068 <bt_gatt_disconnected+0x11c>)
	if (gatt_ccc_store.conn_list[index] != NULL) {
   17f52:	4e46      	ldr	r6, [pc, #280]	; (1806c <bt_gatt_disconnected+0x120>)
{
   17f54:	b093      	sub	sp, #76	; 0x4c
   17f56:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   17f58:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17f5c:	2001      	movs	r0, #1
   17f5e:	f017 fd7e 	bl	2fa5e <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   17f62:	4620      	mov	r0, r4
   17f64:	f7fc ff10 	bl	14d88 <bt_conn_index>
   17f68:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   17f6a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   17f6e:	b120      	cbz	r0, 17f7a <bt_gatt_disconnected+0x2e>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   17f70:	f016 fcfb 	bl	2e96a <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   17f74:	2300      	movs	r3, #0
   17f76:	f846 3025 	str.w	r3, [r6, r5, lsl #2]

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   17f7a:	483d      	ldr	r0, [pc, #244]	; (18070 <bt_gatt_disconnected+0x124>)
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17f7c:	f104 0588 	add.w	r5, r4, #136	; 0x88
		k_work_cancel_delayable(&gatt_ccc_store.work);
   17f80:	f019 fccb 	bl	3191a <k_work_cancel_delayable>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17f84:	7a20      	ldrb	r0, [r4, #8]
   17f86:	4629      	mov	r1, r5
   17f88:	f016 fa80 	bl	2e48c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   17f8c:	2800      	cmp	r0, #0
   17f8e:	d037      	beq.n	18000 <bt_gatt_disconnected+0xb4>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   17f90:	4629      	mov	r1, r5
   17f92:	7a20      	ldrb	r0, [r4, #8]
   17f94:	f7ff ff4a 	bl	17e2c <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   17f98:	4620      	mov	r0, r4
   17f9a:	f7fe fc8f 	bl	168bc <find_cf_cfg>
	if (!cfg) {
   17f9e:	4606      	mov	r6, r0
   17fa0:	2800      	cmp	r0, #0
   17fa2:	d04d      	beq.n	18040 <bt_gatt_disconnected+0xf4>
		if (conn->id) {
   17fa4:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   17fa6:	3608      	adds	r6, #8
		if (conn->id) {
   17fa8:	2a00      	cmp	r2, #0
   17faa:	d04b      	beq.n	18044 <bt_gatt_disconnected+0xf8>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   17fac:	af02      	add	r7, sp, #8
   17fae:	2104      	movs	r1, #4
   17fb0:	4638      	mov	r0, r7
   17fb2:	f013 fc3f 	bl	2b834 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   17fb6:	2124      	movs	r1, #36	; 0x24
   17fb8:	9700      	str	r7, [sp, #0]
   17fba:	462b      	mov	r3, r5
   17fbc:	4a2d      	ldr	r2, [pc, #180]	; (18074 <bt_gatt_disconnected+0x128>)
   17fbe:	eb0d 0001 	add.w	r0, sp, r1
   17fc2:	f7f9 fd15 	bl	119f0 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   17fc6:	7a23      	ldrb	r3, [r4, #8]
   17fc8:	2701      	movs	r7, #1
   17fca:	b943      	cbnz	r3, 17fde <bt_gatt_disconnected+0x92>
		bt_settings_encode_key(key, sizeof(key), "cf",
   17fcc:	2300      	movs	r3, #0
   17fce:	2124      	movs	r1, #36	; 0x24
   17fd0:	9300      	str	r3, [sp, #0]
   17fd2:	4a28      	ldr	r2, [pc, #160]	; (18074 <bt_gatt_disconnected+0x128>)
   17fd4:	462b      	mov	r3, r5
   17fd6:	eb0d 0001 	add.w	r0, sp, r1
   17fda:	f7f9 fd09 	bl	119f0 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   17fde:	463a      	mov	r2, r7
   17fe0:	4631      	mov	r1, r6
   17fe2:	a809      	add	r0, sp, #36	; 0x24
   17fe4:	f7f7 ff0a 	bl	fdfc <settings_save_one>
	if (err) {
   17fe8:	b150      	cbz	r0, 18000 <bt_gatt_disconnected+0xb4>
		BT_ERR("Failed to store Client Features (err %d)", err);
   17fea:	4b23      	ldr	r3, [pc, #140]	; (18078 <bt_gatt_disconnected+0x12c>)
   17fec:	aa05      	add	r2, sp, #20
   17fee:	e9cd 3006 	strd	r3, r0, [sp, #24]
   17ff2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17ff6:	2303      	movs	r3, #3
   17ff8:	4820      	ldr	r0, [pc, #128]	; (1807c <bt_gatt_disconnected+0x130>)
   17ffa:	9305      	str	r3, [sp, #20]
   17ffc:	f017 fb87 	bl	2f70e <z_log_msg2_static_create.constprop.0>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18000:	7a20      	ldrb	r0, [r4, #8]
   18002:	4629      	mov	r1, r5
   18004:	f016 fa42 	bl	2e48c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   18008:	b150      	cbz	r0, 18020 <bt_gatt_disconnected+0xd4>
		struct addr_with_id addr_with_id = {
   1800a:	7a23      	ldrb	r3, [r4, #8]
   1800c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   18010:	4a1b      	ldr	r2, [pc, #108]	; (18080 <bt_gatt_disconnected+0x134>)
		struct addr_with_id addr_with_id = {
   18012:	9509      	str	r5, [sp, #36]	; 0x24
		bt_gatt_foreach_attr(0x0001, 0xffff,
   18014:	ab09      	add	r3, sp, #36	; 0x24
   18016:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1801a:	2001      	movs	r0, #1
   1801c:	f017 fd1f 	bl	2fa5e <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   18020:	4620      	mov	r0, r4
   18022:	f7fe fc4b 	bl	168bc <find_cf_cfg>
	if (!cfg) {
   18026:	4606      	mov	r6, r0
   18028:	b1d8      	cbz	r0, 18062 <bt_gatt_disconnected+0x116>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1802a:	7a20      	ldrb	r0, [r4, #8]
   1802c:	4629      	mov	r1, r5
   1802e:	f016 fa2d 	bl	2e48c <bt_addr_le_is_bonded>
   18032:	b948      	cbnz	r0, 18048 <bt_gatt_disconnected+0xfc>
		clear_cf_cfg(cfg);
   18034:	4630      	mov	r0, r6
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   18036:	b013      	add	sp, #76	; 0x4c
   18038:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		clear_cf_cfg(cfg);
   1803c:	f017 bb6a 	b.w	2f714 <clear_cf_cfg>
		len = 0;
   18040:	4607      	mov	r7, r0
   18042:	e7c3      	b.n	17fcc <bt_gatt_disconnected+0x80>
   18044:	2701      	movs	r7, #1
   18046:	e7c1      	b.n	17fcc <bt_gatt_disconnected+0x80>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   18048:	4629      	mov	r1, r5
   1804a:	1c70      	adds	r0, r6, #1
   1804c:	f017 fa8e 	bl	2f56c <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18050:	f06f 0102 	mvn.w	r1, #2
   18054:	f106 000c 	add.w	r0, r6, #12
}
   18058:	b013      	add	sp, #76	; 0x4c
   1805a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1805e:	f017 bb22 	b.w	2f6a6 <atomic_and>
   18062:	b013      	add	sp, #76	; 0x4c
   18064:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18066:	bf00      	nop
   18068:	00017089 	.word	0x00017089
   1806c:	200015a8 	.word	0x200015a8
   18070:	200015b0 	.word	0x200015b0
   18074:	000360e7 	.word	0x000360e7
   18078:	000360bb 	.word	0x000360bb
   1807c:	00032444 	.word	0x00032444
   18080:	00016d39 	.word	0x00016d39

00018084 <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   18084:	4b10      	ldr	r3, [pc, #64]	; (180c8 <get_io_capa+0x44>)
   18086:	681b      	ldr	r3, [r3, #0]
   18088:	b1bb      	cbz	r3, 180ba <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   1808a:	681a      	ldr	r2, [r3, #0]
   1808c:	b142      	cbz	r2, 180a0 <get_io_capa+0x1c>
   1808e:	6859      	ldr	r1, [r3, #4]
   18090:	b131      	cbz	r1, 180a0 <get_io_capa+0x1c>
   18092:	6899      	ldr	r1, [r3, #8]
   18094:	b911      	cbnz	r1, 1809c <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   18096:	490d      	ldr	r1, [pc, #52]	; (180cc <get_io_capa+0x48>)
   18098:	7809      	ldrb	r1, [r1, #0]
   1809a:	b939      	cbnz	r1, 180ac <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1809c:	2004      	movs	r0, #4
   1809e:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
   180a0:	490a      	ldr	r1, [pc, #40]	; (180cc <get_io_capa+0x48>)
   180a2:	7809      	ldrb	r1, [r1, #0]
   180a4:	b111      	cbz	r1, 180ac <get_io_capa+0x28>
   180a6:	b10a      	cbz	r2, 180ac <get_io_capa+0x28>
   180a8:	6899      	ldr	r1, [r3, #8]
   180aa:	b941      	cbnz	r1, 180be <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
   180ac:	685b      	ldr	r3, [r3, #4]
   180ae:	b943      	cbnz	r3, 180c2 <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
   180b0:	2a00      	cmp	r2, #0
   180b2:	bf0c      	ite	eq
   180b4:	2003      	moveq	r0, #3
   180b6:	2000      	movne	r0, #0
   180b8:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   180ba:	2003      	movs	r0, #3
   180bc:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
   180be:	2001      	movs	r0, #1
   180c0:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
   180c2:	2002      	movs	r0, #2
	}
}
   180c4:	4770      	bx	lr
   180c6:	bf00      	nop
   180c8:	20001e98 	.word	0x20001e98
   180cc:	2000341d 	.word	0x2000341d

000180d0 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   180d0:	4601      	mov	r1, r0
   180d2:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   180d4:	4803      	ldr	r0, [pc, #12]	; (180e4 <smp_find+0x14>)
   180d6:	f017 fd6e 	bl	2fbb6 <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   180da:	2800      	cmp	r0, #0
}
   180dc:	4802      	ldr	r0, [pc, #8]	; (180e8 <smp_find+0x18>)
   180de:	bf08      	it	eq
   180e0:	2000      	moveq	r0, #0
   180e2:	bd08      	pop	{r3, pc}
   180e4:	2000163c 	.word	0x2000163c
   180e8:	20001638 	.word	0x20001638

000180ec <get_auth.constprop.0>:
	if (sc_supported) {
   180ec:	4b0c      	ldr	r3, [pc, #48]	; (18120 <get_auth.constprop.0+0x34>)
   180ee:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
   180f0:	b510      	push	{r4, lr}
	if (sc_supported) {
   180f2:	b17b      	cbz	r3, 18114 <get_auth.constprop.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   180f4:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   180f8:	f7ff ffc4 	bl	18084 <get_io_capa>
	if (bondable) {
   180fc:	4b09      	ldr	r3, [pc, #36]	; (18124 <get_auth.constprop.0+0x38>)
   180fe:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   18100:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   18102:	bf0c      	ite	eq
   18104:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   18108:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   1810c:	b12b      	cbz	r3, 1811a <get_auth.constprop.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   1810e:	f044 0001 	orr.w	r0, r4, #1
}
   18112:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   18114:	f000 0407 	and.w	r4, r0, #7
   18118:	e7ee      	b.n	180f8 <get_auth.constprop.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   1811a:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   1811e:	e7f8      	b.n	18112 <get_auth.constprop.0+0x26>
   18120:	2000341d 	.word	0x2000341d
   18124:	20000b1f 	.word	0x20000b1f

00018128 <bt_smp_pkey_ready.part.0>:
	}

	return 0;
}

static void bt_smp_pkey_ready(const uint8_t *pkey)
   18128:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_DBG("");

	sc_public_key = pkey;

	if (!pkey) {
		BT_WARN("Public key not available");
   1812a:	4b06      	ldr	r3, [pc, #24]	; (18144 <bt_smp_pkey_ready.part.0+0x1c>)
   1812c:	9304      	str	r3, [sp, #16]
   1812e:	4806      	ldr	r0, [pc, #24]	; (18148 <bt_smp_pkey_ready.part.0+0x20>)
   18130:	2302      	movs	r3, #2
   18132:	aa03      	add	r2, sp, #12
   18134:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18138:	9303      	str	r3, [sp, #12]
   1813a:	f017 fe21 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
		if (err) {
			smp_error(smp, err);
		}
#endif /* CONFIG_BT_PERIPHERAL */
	}
}
   1813e:	b007      	add	sp, #28
   18140:	f85d fb04 	ldr.w	pc, [sp], #4
   18144:	000360f8 	.word	0x000360f8
   18148:	00032484 	.word	0x00032484

0001814c <smp_sign_buf>:
 * msg buffer contains message itself, 32 bit count and signature,
 * so total buffer size is len + 4 + 8 octets.
 * API is Little Endian to make it suitable for Bluetooth.
 */
static int smp_sign_buf(const uint8_t *key, uint8_t *msg, uint16_t len)
{
   1814c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	BT_DBG("Signing msg %s len %u key %s", bt_hex(msg, len), len,
	       bt_hex(key, 16));

	sys_mem_swap(m, len + sizeof(cnt));
   1814e:	1d14      	adds	r4, r2, #4
{
   18150:	b091      	sub	sp, #68	; 0x44
   18152:	460d      	mov	r5, r1
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
   18154:	588b      	ldr	r3, [r1, r2]
   18156:	9301      	str	r3, [sp, #4]
{
   18158:	4606      	mov	r6, r0
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
   1815a:	188f      	adds	r7, r1, r2
	sys_mem_swap(m, len + sizeof(cnt));
   1815c:	4628      	mov	r0, r5
   1815e:	4621      	mov	r1, r4
   18160:	f017 fd1a 	bl	2fb98 <sys_mem_swap>
	sys_memcpy_swap(key_s, key, 16);
   18164:	4631      	mov	r1, r6
   18166:	2210      	movs	r2, #16
   18168:	a802      	add	r0, sp, #8
   1816a:	f017 fd0b 	bl	2fb84 <sys_memcpy_swap>

	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
   1816e:	ab06      	add	r3, sp, #24
   18170:	4622      	mov	r2, r4
   18172:	4629      	mov	r1, r5
   18174:	a802      	add	r0, sp, #8
   18176:	f017 fd48 	bl	2fc0a <bt_smp_aes_cmac>
	if (err) {
   1817a:	4606      	mov	r6, r0
   1817c:	b160      	cbz	r0, 18198 <smp_sign_buf+0x4c>
		BT_ERR("Data signing failed");
   1817e:	4b10      	ldr	r3, [pc, #64]	; (181c0 <smp_sign_buf+0x74>)
   18180:	930e      	str	r3, [sp, #56]	; 0x38
   18182:	4810      	ldr	r0, [pc, #64]	; (181c4 <smp_sign_buf+0x78>)
   18184:	2302      	movs	r3, #2
   18186:	aa0d      	add	r2, sp, #52	; 0x34
   18188:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1818c:	930d      	str	r3, [sp, #52]	; 0x34
   1818e:	f017 fdf7 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
	memcpy(sig, tmp + 4, 12);

	BT_DBG("sig %s", bt_hex(sig, 12));

	return 0;
}
   18192:	4630      	mov	r0, r6
   18194:	b011      	add	sp, #68	; 0x44
   18196:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sys_mem_swap(tmp, sizeof(tmp));
   18198:	a806      	add	r0, sp, #24
   1819a:	2110      	movs	r1, #16
   1819c:	f017 fcfc 	bl	2fb98 <sys_mem_swap>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
   181a0:	2204      	movs	r2, #4
   181a2:	eb0d 0102 	add.w	r1, sp, r2
   181a6:	a807      	add	r0, sp, #28
   181a8:	f015 ff3f 	bl	2e02a <memcpy>
	sys_mem_swap(m, len + sizeof(cnt));
   181ac:	4621      	mov	r1, r4
   181ae:	4628      	mov	r0, r5
   181b0:	f017 fcf2 	bl	2fb98 <sys_mem_swap>
	memcpy(sig, tmp + 4, 12);
   181b4:	220c      	movs	r2, #12
   181b6:	a907      	add	r1, sp, #28
   181b8:	4638      	mov	r0, r7
   181ba:	f015 ff36 	bl	2e02a <memcpy>
	return 0;
   181be:	e7e8      	b.n	18192 <smp_sign_buf+0x46>
   181c0:	00036111 	.word	0x00036111
   181c4:	00032484 	.word	0x00032484

000181c8 <bt_smp_accept.part.0>:
	} else {
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   181c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		*chan = &smp->chan.chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   181ca:	4b08      	ldr	r3, [pc, #32]	; (181ec <bt_smp_accept.part.0+0x24>)
   181cc:	aa03      	add	r2, sp, #12
   181ce:	e9cd 3004 	strd	r3, r0, [sp, #16]
   181d2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   181d6:	2303      	movs	r3, #3
   181d8:	4805      	ldr	r0, [pc, #20]	; (181f0 <bt_smp_accept.part.0+0x28>)
   181da:	9303      	str	r3, [sp, #12]
   181dc:	f017 fdd0 	bl	2fd80 <z_log_msg2_static_create.constprop.0>

	return -ENOMEM;
}
   181e0:	f06f 000b 	mvn.w	r0, #11
   181e4:	b007      	add	sp, #28
   181e6:	f85d fb04 	ldr.w	pc, [sp], #4
   181ea:	bf00      	nop
   181ec:	00036125 	.word	0x00036125
   181f0:	00032484 	.word	0x00032484

000181f4 <bt_smp_accept>:
		if (smp->chan.chan.conn) {
   181f4:	4b06      	ldr	r3, [pc, #24]	; (18210 <bt_smp_accept+0x1c>)
   181f6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   181fa:	b10a      	cbz	r2, 18200 <bt_smp_accept+0xc>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   181fc:	f7ff bfe4 	b.w	181c8 <bt_smp_accept.part.0>
		smp->chan.chan.ops = &ops;
   18200:	4804      	ldr	r0, [pc, #16]	; (18214 <bt_smp_accept+0x20>)
   18202:	f8c3 00f4 	str.w	r0, [r3, #244]	; 0xf4
		*chan = &smp->chan.chan;
   18206:	33f0      	adds	r3, #240	; 0xf0
   18208:	600b      	str	r3, [r1, #0]
}
   1820a:	4610      	mov	r0, r2
   1820c:	4770      	bx	lr
   1820e:	bf00      	nop
   18210:	20001638 	.word	0x20001638
   18214:	00032f60 	.word	0x00032f60

00018218 <smp_chan_get.part.0>:
static struct bt_smp *smp_chan_get(struct bt_conn *conn)
   18218:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		BT_ERR("Unable to find SMP channel");
   1821a:	4b07      	ldr	r3, [pc, #28]	; (18238 <smp_chan_get.part.0+0x20>)
   1821c:	9304      	str	r3, [sp, #16]
   1821e:	4807      	ldr	r0, [pc, #28]	; (1823c <smp_chan_get.part.0+0x24>)
   18220:	2302      	movs	r3, #2
   18222:	aa03      	add	r2, sp, #12
   18224:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18228:	9303      	str	r3, [sp, #12]
   1822a:	f017 fda9 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
}
   1822e:	2000      	movs	r0, #0
   18230:	b007      	add	sp, #28
   18232:	f85d fb04 	ldr.w	pc, [sp], #4
   18236:	bf00      	nop
   18238:	0003614a 	.word	0x0003614a
   1823c:	00032484 	.word	0x00032484

00018240 <smp_init>:
{
   18240:	b538      	push	{r3, r4, r5, lr}
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   18242:	22f0      	movs	r2, #240	; 0xf0
{
   18244:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   18246:	2100      	movs	r1, #0
   18248:	f015 fefa 	bl	2e040 <memset>
	if (bt_rand(smp->prnd, 16)) {
   1824c:	2110      	movs	r1, #16
   1824e:	f105 0027 	add.w	r0, r5, #39	; 0x27
   18252:	f004 fec7 	bl	1cfe4 <bt_rand>
   18256:	4604      	mov	r4, r0
   18258:	b948      	cbnz	r0, 1826e <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   1825a:	2105      	movs	r1, #5
   1825c:	4628      	mov	r0, r5
   1825e:	f017 fd9d 	bl	2fd9c <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   18262:	f7fc f9b7 	bl	145d4 <bt_pub_key_get>
   18266:	4b03      	ldr	r3, [pc, #12]	; (18274 <smp_init+0x34>)
   18268:	6018      	str	r0, [r3, #0]
}
   1826a:	4620      	mov	r0, r4
   1826c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1826e:	2408      	movs	r4, #8
   18270:	e7fb      	b.n	1826a <smp_init+0x2a>
   18272:	bf00      	nop
   18274:	20001f44 	.word	0x20001f44

00018278 <smp_dhkey_generate>:
{
   18278:	b530      	push	{r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1827a:	1d05      	adds	r5, r0, #4
{
   1827c:	b087      	sub	sp, #28
   1827e:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   18280:	2108      	movs	r1, #8
   18282:	4628      	mov	r0, r5
   18284:	f017 fd8a 	bl	2fd9c <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   18288:	490b      	ldr	r1, [pc, #44]	; (182b8 <smp_dhkey_generate+0x40>)
   1828a:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1828e:	f7fc f9b1 	bl	145f4 <bt_dh_key_gen>
	if (err) {
   18292:	b170      	cbz	r0, 182b2 <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   18294:	2108      	movs	r1, #8
   18296:	4628      	mov	r0, r5
   18298:	f017 fd46 	bl	2fd28 <atomic_clear_bit>
		BT_ERR("Failed to generate DHKey");
   1829c:	4b07      	ldr	r3, [pc, #28]	; (182bc <smp_dhkey_generate+0x44>)
   1829e:	4808      	ldr	r0, [pc, #32]	; (182c0 <smp_dhkey_generate+0x48>)
   182a0:	9304      	str	r3, [sp, #16]
   182a2:	aa03      	add	r2, sp, #12
   182a4:	2302      	movs	r3, #2
   182a6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   182aa:	9303      	str	r3, [sp, #12]
   182ac:	f017 fd68 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   182b0:	2008      	movs	r0, #8
}
   182b2:	b007      	add	sp, #28
   182b4:	bd30      	pop	{r4, r5, pc}
   182b6:	bf00      	nop
   182b8:	00030259 	.word	0x00030259
   182bc:	00036165 	.word	0x00036165
   182c0:	00032484 	.word	0x00032484

000182c4 <smp_ident_info>:
{
   182c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   182c6:	4604      	mov	r4, r0
   182c8:	af00      	add	r7, sp, #0
   182ca:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   182cc:	3004      	adds	r0, #4
   182ce:	210d      	movs	r1, #13
   182d0:	f017 fc71 	bl	2fbb6 <atomic_test_bit>
   182d4:	b330      	cbz	r0, 18324 <smp_ident_info+0x60>
		struct bt_smp_ident_info *req = (void *)buf->data;
   182d6:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   182d8:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   182dc:	f103 0588 	add.w	r5, r3, #136	; 0x88
   182e0:	7a19      	ldrb	r1, [r3, #8]
   182e2:	462a      	mov	r2, r5
   182e4:	2002      	movs	r0, #2
   182e6:	f018 f84c 	bl	30382 <bt_keys_get_type>
		if (!keys) {
   182ea:	b9b0      	cbnz	r0, 1831a <smp_ident_info+0x56>
			BT_ERR("Unable to get keys for %s",
   182ec:	4628      	mov	r0, r5
   182ee:	f7f9 f877 	bl	113e0 <bt_addr_le_str_real>
   182f2:	466c      	mov	r4, sp
   182f4:	4b0e      	ldr	r3, [pc, #56]	; (18330 <smp_ident_info+0x6c>)
   182f6:	b088      	sub	sp, #32
   182f8:	466a      	mov	r2, sp
   182fa:	e9c2 3004 	strd	r3, r0, [r2, #16]
   182fe:	2302      	movs	r3, #2
   18300:	7613      	strb	r3, [r2, #24]
   18302:	4b0c      	ldr	r3, [pc, #48]	; (18334 <smp_ident_info+0x70>)
   18304:	480c      	ldr	r0, [pc, #48]	; (18338 <smp_ident_info+0x74>)
   18306:	f842 3f0c 	str.w	r3, [r2, #12]!
   1830a:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1830e:	f017 fd37 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   18312:	2008      	movs	r0, #8
   18314:	46a5      	mov	sp, r4
}
   18316:	46bd      	mov	sp, r7
   18318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->irk.val, req->irk, 16);
   1831a:	2210      	movs	r2, #16
   1831c:	4631      	mov	r1, r6
   1831e:	302a      	adds	r0, #42	; 0x2a
   18320:	f015 fe83 	bl	2e02a <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   18324:	4620      	mov	r0, r4
   18326:	2109      	movs	r1, #9
   18328:	f017 fd38 	bl	2fd9c <atomic_set_bit>
	return 0;
   1832c:	2000      	movs	r0, #0
   1832e:	e7f2      	b.n	18316 <smp_ident_info+0x52>
   18330:	0003617e 	.word	0x0003617e
   18334:	01000003 	.word	0x01000003
   18338:	00032484 	.word	0x00032484

0001833c <smp_encrypt_info>:
{
   1833c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1833e:	4604      	mov	r4, r0
   18340:	af00      	add	r7, sp, #0
   18342:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   18344:	3004      	adds	r0, #4
   18346:	210d      	movs	r1, #13
   18348:	f017 fc35 	bl	2fbb6 <atomic_test_bit>
   1834c:	b330      	cbz	r0, 1839c <smp_encrypt_info+0x60>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1834e:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   18350:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   18354:	f103 0588 	add.w	r5, r3, #136	; 0x88
   18358:	7a19      	ldrb	r1, [r3, #8]
   1835a:	462a      	mov	r2, r5
   1835c:	2004      	movs	r0, #4
   1835e:	f018 f810 	bl	30382 <bt_keys_get_type>
		if (!keys) {
   18362:	b9b0      	cbnz	r0, 18392 <smp_encrypt_info+0x56>
			BT_ERR("Unable to get keys for %s",
   18364:	4628      	mov	r0, r5
   18366:	f7f9 f83b 	bl	113e0 <bt_addr_le_str_real>
   1836a:	466c      	mov	r4, sp
   1836c:	4b0e      	ldr	r3, [pc, #56]	; (183a8 <smp_encrypt_info+0x6c>)
   1836e:	b088      	sub	sp, #32
   18370:	466a      	mov	r2, sp
   18372:	e9c2 3004 	strd	r3, r0, [r2, #16]
   18376:	2302      	movs	r3, #2
   18378:	7613      	strb	r3, [r2, #24]
   1837a:	4b0c      	ldr	r3, [pc, #48]	; (183ac <smp_encrypt_info+0x70>)
   1837c:	480c      	ldr	r0, [pc, #48]	; (183b0 <smp_encrypt_info+0x74>)
   1837e:	f842 3f0c 	str.w	r3, [r2, #12]!
   18382:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   18386:	f017 fcfb 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1838a:	2008      	movs	r0, #8
   1838c:	46a5      	mov	sp, r4
}
   1838e:	46bd      	mov	sp, r7
   18390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
   18392:	2210      	movs	r2, #16
   18394:	4631      	mov	r1, r6
   18396:	301a      	adds	r0, #26
   18398:	f015 fe47 	bl	2e02a <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   1839c:	4620      	mov	r0, r4
   1839e:	2107      	movs	r1, #7
   183a0:	f017 fcfc 	bl	2fd9c <atomic_set_bit>
	return 0;
   183a4:	2000      	movs	r0, #0
   183a6:	e7f2      	b.n	1838e <smp_encrypt_info+0x52>
   183a8:	0003617e 	.word	0x0003617e
   183ac:	01000003 	.word	0x01000003
   183b0:	00032484 	.word	0x00032484

000183b4 <smp_pairing_req>:
{
   183b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
   183b8:	688f      	ldr	r7, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   183ba:	78fb      	ldrb	r3, [r7, #3]
   183bc:	3b07      	subs	r3, #7
   183be:	2b09      	cmp	r3, #9
{
   183c0:	b086      	sub	sp, #24
   183c2:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   183c4:	d904      	bls.n	183d0 <smp_pairing_req+0x1c>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   183c6:	2706      	movs	r7, #6
}
   183c8:	4638      	mov	r0, r7
   183ca:	b006      	add	sp, #24
   183cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
   183d0:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
	if (!conn->le.keys) {
   183d4:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
   183d8:	b15b      	cbz	r3, 183f2 <smp_pairing_req+0x3e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   183da:	1d25      	adds	r5, r4, #4
   183dc:	210f      	movs	r1, #15
   183de:	4628      	mov	r0, r5
   183e0:	f017 fbe9 	bl	2fbb6 <atomic_test_bit>
   183e4:	b980      	cbnz	r0, 18408 <smp_pairing_req+0x54>
		int ret = smp_init(smp);
   183e6:	4620      	mov	r0, r4
   183e8:	f7ff ff2a 	bl	18240 <smp_init>
		if (ret) {
   183ec:	b160      	cbz	r0, 18408 <smp_pairing_req+0x54>
			return ret;
   183ee:	b2c7      	uxtb	r7, r0
   183f0:	e7ea      	b.n	183c8 <smp_pairing_req+0x14>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   183f2:	7a30      	ldrb	r0, [r6, #8]
   183f4:	f106 0188 	add.w	r1, r6, #136	; 0x88
   183f8:	f001 fc4a 	bl	19c90 <bt_keys_get_addr>
   183fc:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
		if (!conn->le.keys) {
   18400:	2800      	cmp	r0, #0
   18402:	d1ea      	bne.n	183da <smp_pairing_req+0x26>
	switch (sec) {
   18404:	2708      	movs	r7, #8
   18406:	e7df      	b.n	183c8 <smp_pairing_req+0x14>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   18408:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   1840a:	2206      	movs	r2, #6
   1840c:	4639      	mov	r1, r7
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1840e:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   18410:	f104 000a 	add.w	r0, r4, #10
   18414:	f015 fe09 	bl	2e02a <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   18418:	2302      	movs	r3, #2
   1841a:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(conn, req->auth_req);
   1841c:	78b8      	ldrb	r0, [r7, #2]
   1841e:	f7ff fe65 	bl	180ec <get_auth.constprop.0>
   18422:	74e0      	strb	r0, [r4, #19]
   18424:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
   18426:	f7ff fe2d 	bl	18084 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1842a:	4b9e      	ldr	r3, [pc, #632]	; (186a4 <smp_pairing_req+0x2f0>)
	rsp->io_capability = get_io_capa();
   1842c:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1842e:	781b      	ldrb	r3, [r3, #0]
   18430:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   18432:	2310      	movs	r3, #16
   18434:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   18436:	793b      	ldrb	r3, [r7, #4]
   18438:	f003 0307 	and.w	r3, r3, #7
   1843c:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1843e:	797b      	ldrb	r3, [r7, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   18440:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   18444:	f003 0307 	and.w	r3, r3, #7
   18448:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1844a:	d00e      	beq.n	1846a <smp_pairing_req+0xb6>
   1844c:	78bb      	ldrb	r3, [r7, #2]
   1844e:	0719      	lsls	r1, r3, #28
   18450:	d50b      	bpl.n	1846a <smp_pairing_req+0xb6>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   18452:	2105      	movs	r1, #5
   18454:	4628      	mov	r0, r5
   18456:	f017 fca1 	bl	2fd9c <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   1845a:	7d63      	ldrb	r3, [r4, #21]
   1845c:	f003 0306 	and.w	r3, r3, #6
   18460:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   18462:	7da3      	ldrb	r3, [r4, #22]
   18464:	f003 0306 	and.w	r3, r3, #6
   18468:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1846a:	7ce3      	ldrb	r3, [r4, #19]
   1846c:	069a      	lsls	r2, r3, #26
   1846e:	d506      	bpl.n	1847e <smp_pairing_req+0xca>
   18470:	78bb      	ldrb	r3, [r7, #2]
   18472:	069b      	lsls	r3, r3, #26
   18474:	d503      	bpl.n	1847e <smp_pairing_req+0xca>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   18476:	2114      	movs	r1, #20
   18478:	4628      	mov	r0, r5
   1847a:	f017 fc8f 	bl	2fd9c <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   1847e:	7da3      	ldrb	r3, [r4, #22]
   18480:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   18484:	7d63      	ldrb	r3, [r4, #21]
   18486:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1848a:	7ce3      	ldrb	r3, [r4, #19]
   1848c:	07d8      	lsls	r0, r3, #31
   1848e:	d506      	bpl.n	1849e <smp_pairing_req+0xea>
   18490:	78bb      	ldrb	r3, [r7, #2]
   18492:	07d9      	lsls	r1, r3, #31
   18494:	d503      	bpl.n	1849e <smp_pairing_req+0xea>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   18496:	210d      	movs	r1, #13
   18498:	4628      	mov	r0, r5
   1849a:	f017 fc7f 	bl	2fd9c <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1849e:	2103      	movs	r1, #3
   184a0:	4628      	mov	r0, r5
   184a2:	f017 fc7b 	bl	2fd9c <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   184a6:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   184a8:	783f      	ldrb	r7, [r7, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   184aa:	f017 fb84 	bl	2fbb6 <atomic_test_bit>
   184ae:	bb28      	cbnz	r0, 184fc <smp_pairing_req+0x148>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   184b0:	2f04      	cmp	r7, #4
   184b2:	d841      	bhi.n	18538 <smp_pairing_req+0x184>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   184b4:	7ca2      	ldrb	r2, [r4, #18]
   184b6:	7ae3      	ldrb	r3, [r4, #11]
   184b8:	4013      	ands	r3, r2
   184ba:	07da      	lsls	r2, r3, #31
   184bc:	d43a      	bmi.n	18534 <smp_pairing_req+0x180>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   184be:	7b21      	ldrb	r1, [r4, #12]
   184c0:	7ce0      	ldrb	r0, [r4, #19]
   184c2:	4301      	orrs	r1, r0
   184c4:	f011 0104 	ands.w	r1, r1, #4
   184c8:	d00f      	beq.n	184ea <smp_pairing_req+0x136>
	method = gen_method_legacy[remote_io][get_io_capa()];
   184ca:	f7ff fddb 	bl	18084 <get_io_capa>
   184ce:	4b76      	ldr	r3, [pc, #472]	; (186a8 <smp_pairing_req+0x2f4>)
   184d0:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   184d4:	441f      	add	r7, r3
   184d6:	5c39      	ldrb	r1, [r7, r0]
	if (method == PASSKEY_ROLE) {
   184d8:	2904      	cmp	r1, #4
   184da:	d106      	bne.n	184ea <smp_pairing_req+0x136>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   184dc:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   184e0:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
   184e2:	2b00      	cmp	r3, #0
   184e4:	bf0c      	ite	eq
   184e6:	2102      	moveq	r1, #2
   184e8:	2101      	movne	r1, #1
	smp->method = get_pair_method(smp, req->io_capability);
   184ea:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   184ec:	f8d6 10b4 	ldr.w	r1, [r6, #180]	; 0xb4
   184f0:	4620      	mov	r0, r4
   184f2:	f017 fb69 	bl	2fbc8 <update_keys_check>
   184f6:	bb08      	cbnz	r0, 1853c <smp_pairing_req+0x188>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   184f8:	2703      	movs	r7, #3
   184fa:	e765      	b.n	183c8 <smp_pairing_req+0x14>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   184fc:	7b20      	ldrb	r0, [r4, #12]
   184fe:	7ce2      	ldrb	r2, [r4, #19]
   18500:	ea00 0302 	and.w	r3, r0, r2
   18504:	071b      	lsls	r3, r3, #28
   18506:	d506      	bpl.n	18516 <smp_pairing_req+0x162>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   18508:	7ae3      	ldrb	r3, [r4, #11]
   1850a:	f894 c012 	ldrb.w	ip, [r4, #18]
   1850e:	ea43 030c 	orr.w	r3, r3, ip
   18512:	07db      	lsls	r3, r3, #31
   18514:	d4e9      	bmi.n	184ea <smp_pairing_req+0x136>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   18516:	2f04      	cmp	r7, #4
   18518:	d80e      	bhi.n	18538 <smp_pairing_req+0x184>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1851a:	ea40 0102 	orr.w	r1, r0, r2
   1851e:	f011 0104 	ands.w	r1, r1, #4
   18522:	d0e2      	beq.n	184ea <smp_pairing_req+0x136>
	return gen_method_sc[remote_io][get_io_capa()];
   18524:	f7ff fdae 	bl	18084 <get_io_capa>
   18528:	4b60      	ldr	r3, [pc, #384]	; (186ac <smp_pairing_req+0x2f8>)
   1852a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   1852e:	441f      	add	r7, r3
   18530:	5c39      	ldrb	r1, [r7, r0]
   18532:	e7da      	b.n	184ea <smp_pairing_req+0x136>
		return LEGACY_OOB;
   18534:	2106      	movs	r1, #6
   18536:	e7d8      	b.n	184ea <smp_pairing_req+0x136>
		return JUST_WORKS;
   18538:	2100      	movs	r1, #0
   1853a:	e7d6      	b.n	184ea <smp_pairing_req+0x136>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1853c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   18540:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   18542:	2b03      	cmp	r3, #3
   18544:	d034      	beq.n	185b0 <smp_pairing_req+0x1fc>
   18546:	d822      	bhi.n	1858e <smp_pairing_req+0x1da>
   18548:	3b01      	subs	r3, #1
   1854a:	2b01      	cmp	r3, #1
   1854c:	f63f af5a 	bhi.w	18404 <smp_pairing_req+0x50>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18550:	2105      	movs	r1, #5
   18552:	4628      	mov	r0, r5
   18554:	f017 fb2f 	bl	2fbb6 <atomic_test_bit>
   18558:	2800      	cmp	r0, #0
   1855a:	f040 80bf 	bne.w	186dc <smp_pairing_req+0x328>
	struct bt_conn *conn = smp->chan.chan.conn;
   1855e:	f8d4 60f0 	ldr.w	r6, [r4, #240]	; 0xf0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   18562:	7a30      	ldrb	r0, [r6, #8]
   18564:	f106 0188 	add.w	r1, r6, #136	; 0x88
   18568:	f001 fc56 	bl	19e18 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1856c:	7a23      	ldrb	r3, [r4, #8]
   1856e:	b318      	cbz	r0, 185b8 <smp_pairing_req+0x204>
   18570:	7b42      	ldrb	r2, [r0, #13]
   18572:	07d2      	lsls	r2, r2, #31
   18574:	d520      	bpl.n	185b8 <smp_pairing_req+0x204>
   18576:	b9fb      	cbnz	r3, 185b8 <smp_pairing_req+0x204>
		BT_ERR("JustWorks failed, authenticated keys present");
   18578:	4b4d      	ldr	r3, [pc, #308]	; (186b0 <smp_pairing_req+0x2fc>)
   1857a:	9304      	str	r3, [sp, #16]
   1857c:	2302      	movs	r3, #2
   1857e:	9303      	str	r3, [sp, #12]
   18580:	aa03      	add	r2, sp, #12
   18582:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_ERR("Unknown pairing method (%u)", smp->method);
   18586:	484b      	ldr	r0, [pc, #300]	; (186b4 <smp_pairing_req+0x300>)
   18588:	f017 fbfa 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
	if (ret) {
   1858c:	e73a      	b.n	18404 <smp_pairing_req+0x50>
	switch (sec) {
   1858e:	2b04      	cmp	r3, #4
   18590:	f47f af38 	bne.w	18404 <smp_pairing_req+0x50>
	return MIN(req->max_key_size, rsp->max_key_size);
   18594:	7d23      	ldrb	r3, [r4, #20]
   18596:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   18598:	4293      	cmp	r3, r2
   1859a:	bf28      	it	cs
   1859c:	4613      	movcs	r3, r2
   1859e:	2b10      	cmp	r3, #16
   185a0:	f47f af11 	bne.w	183c6 <smp_pairing_req+0x12>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   185a4:	2105      	movs	r1, #5
   185a6:	4628      	mov	r0, r5
   185a8:	f017 fb05 	bl	2fbb6 <atomic_test_bit>
   185ac:	2800      	cmp	r0, #0
   185ae:	d0a3      	beq.n	184f8 <smp_pairing_req+0x144>
		if (smp->method == JUST_WORKS) {
   185b0:	7a23      	ldrb	r3, [r4, #8]
   185b2:	2b00      	cmp	r3, #0
   185b4:	d1cc      	bne.n	18550 <smp_pairing_req+0x19c>
   185b6:	e79f      	b.n	184f8 <smp_pairing_req+0x144>
	switch (smp->method) {
   185b8:	2b06      	cmp	r3, #6
   185ba:	d868      	bhi.n	1868e <smp_pairing_req+0x2da>
   185bc:	e8df f003 	tbb	[pc, r3]
   185c0:	67335d1b 	.word	0x67335d1b
   185c4:	6767      	.short	0x6767
   185c6:	04          	.byte	0x04
   185c7:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
   185c8:	4e3b      	ldr	r6, [pc, #236]	; (186b8 <smp_pairing_req+0x304>)
   185ca:	6833      	ldr	r3, [r6, #0]
   185cc:	2b00      	cmp	r3, #0
   185ce:	d067      	beq.n	186a0 <smp_pairing_req+0x2ec>
   185d0:	68db      	ldr	r3, [r3, #12]
   185d2:	2b00      	cmp	r3, #0
   185d4:	d064      	beq.n	186a0 <smp_pairing_req+0x2ec>
			struct bt_conn_oob_info info = {
   185d6:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   185d8:	210a      	movs	r1, #10
   185da:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   185dc:	f8ad 3000 	strh.w	r3, [sp]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   185e0:	f017 fbdc 	bl	2fd9c <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   185e4:	6833      	ldr	r3, [r6, #0]
   185e6:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   185ea:	68db      	ldr	r3, [r3, #12]
   185ec:	4669      	mov	r1, sp
   185ee:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   185f0:	7a23      	ldrb	r3, [r4, #8]
   185f2:	2b00      	cmp	r3, #0
   185f4:	d166      	bne.n	186c4 <smp_pairing_req+0x310>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   185f6:	210f      	movs	r1, #15
   185f8:	4628      	mov	r0, r5
   185fa:	f017 fadc 	bl	2fbb6 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   185fe:	4607      	mov	r7, r0
   18600:	2800      	cmp	r0, #0
   18602:	d15f      	bne.n	186c4 <smp_pairing_req+0x310>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   18604:	4e2c      	ldr	r6, [pc, #176]	; (186b8 <smp_pairing_req+0x304>)
   18606:	6833      	ldr	r3, [r6, #0]
   18608:	2b00      	cmp	r3, #0
   1860a:	d05b      	beq.n	186c4 <smp_pairing_req+0x310>
	    bt_auth && bt_auth->pairing_confirm) {
   1860c:	695b      	ldr	r3, [r3, #20]
   1860e:	2b00      	cmp	r3, #0
   18610:	d058      	beq.n	186c4 <smp_pairing_req+0x310>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   18612:	4628      	mov	r0, r5
   18614:	210a      	movs	r1, #10
   18616:	f017 fbc1 	bl	2fd9c <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   1861a:	6833      	ldr	r3, [r6, #0]
   1861c:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   18620:	695b      	ldr	r3, [r3, #20]
		bt_auth->pairing_confirm(conn);
   18622:	4798      	blx	r3
		return 0;
   18624:	e6d0      	b.n	183c8 <smp_pairing_req+0x14>
			if (bt_rand(&passkey, sizeof(passkey))) {
   18626:	2104      	movs	r1, #4
   18628:	4668      	mov	r0, sp
   1862a:	f004 fcdb 	bl	1cfe4 <bt_rand>
   1862e:	2800      	cmp	r0, #0
   18630:	f47f aee8 	bne.w	18404 <smp_pairing_req+0x50>
			passkey %= 1000000;
   18634:	9b00      	ldr	r3, [sp, #0]
   18636:	4a21      	ldr	r2, [pc, #132]	; (186bc <smp_pairing_req+0x308>)
		if (bt_auth && bt_auth->passkey_display) {
   18638:	4f1f      	ldr	r7, [pc, #124]	; (186b8 <smp_pairing_req+0x304>)
			passkey %= 1000000;
   1863a:	fbb3 f1f2 	udiv	r1, r3, r2
   1863e:	fb02 3311 	mls	r3, r2, r1, r3
   18642:	9300      	str	r3, [sp, #0]
		if (bt_auth && bt_auth->passkey_display) {
   18644:	683b      	ldr	r3, [r7, #0]
   18646:	b153      	cbz	r3, 1865e <smp_pairing_req+0x2aa>
   18648:	681b      	ldr	r3, [r3, #0]
   1864a:	b143      	cbz	r3, 1865e <smp_pairing_req+0x2aa>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1864c:	210b      	movs	r1, #11
   1864e:	4628      	mov	r0, r5
   18650:	f017 fba4 	bl	2fd9c <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
   18654:	683b      	ldr	r3, [r7, #0]
   18656:	9900      	ldr	r1, [sp, #0]
   18658:	681b      	ldr	r3, [r3, #0]
   1865a:	4630      	mov	r0, r6
   1865c:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1865e:	9b00      	ldr	r3, [sp, #0]
	dst[0] = val;
   18660:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   18664:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   18668:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1866a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1866e:	0a1b      	lsrs	r3, r3, #8
   18670:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   18674:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   18678:	e7ba      	b.n	185f0 <smp_pairing_req+0x23c>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1867a:	4628      	mov	r0, r5
   1867c:	210a      	movs	r1, #10
   1867e:	f017 fb8d 	bl	2fd9c <atomic_set_bit>
		bt_auth->passkey_entry(conn);
   18682:	4b0d      	ldr	r3, [pc, #52]	; (186b8 <smp_pairing_req+0x304>)
   18684:	681b      	ldr	r3, [r3, #0]
   18686:	4630      	mov	r0, r6
   18688:	685b      	ldr	r3, [r3, #4]
   1868a:	4798      	blx	r3
	if (ret) {
   1868c:	e7b0      	b.n	185f0 <smp_pairing_req+0x23c>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1868e:	4a0c      	ldr	r2, [pc, #48]	; (186c0 <smp_pairing_req+0x30c>)
	switch (smp->method) {
   18690:	e9cd 2304 	strd	r2, r3, [sp, #16]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   18694:	2303      	movs	r3, #3
   18696:	9303      	str	r3, [sp, #12]
   18698:	aa03      	add	r2, sp, #12
   1869a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1869e:	e772      	b.n	18586 <smp_pairing_req+0x1d2>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   186a0:	2702      	movs	r7, #2
   186a2:	e691      	b.n	183c8 <smp_pairing_req+0x14>
   186a4:	2000341c 	.word	0x2000341c
   186a8:	00036519 	.word	0x00036519
   186ac:	00036532 	.word	0x00036532
   186b0:	00036198 	.word	0x00036198
   186b4:	00032484 	.word	0x00032484
   186b8:	20001e98 	.word	0x20001e98
   186bc:	000f4240 	.word	0x000f4240
   186c0:	000361c5 	.word	0x000361c5
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   186c4:	2103      	movs	r1, #3
   186c6:	4620      	mov	r0, r4
   186c8:	f017 fb68 	bl	2fd9c <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   186cc:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   186ce:	f017 fb65 	bl	2fd9c <atomic_set_bit>
}
   186d2:	b006      	add	sp, #24
   186d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
   186d8:	f017 bb93 	b.w	2fe02 <send_pairing_rsp>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   186dc:	7a27      	ldrb	r7, [r4, #8]
   186de:	b9a7      	cbnz	r7, 1870a <smp_pairing_req+0x356>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   186e0:	210f      	movs	r1, #15
   186e2:	4628      	mov	r0, r5
   186e4:	f017 fa67 	bl	2fbb6 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   186e8:	b978      	cbnz	r0, 1870a <smp_pairing_req+0x356>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   186ea:	f8df 8024 	ldr.w	r8, [pc, #36]	; 18710 <smp_pairing_req+0x35c>
   186ee:	f8d8 3000 	ldr.w	r3, [r8]
   186f2:	b153      	cbz	r3, 1870a <smp_pairing_req+0x356>
	    bt_auth && bt_auth->pairing_confirm) {
   186f4:	695b      	ldr	r3, [r3, #20]
   186f6:	b143      	cbz	r3, 1870a <smp_pairing_req+0x356>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   186f8:	4628      	mov	r0, r5
   186fa:	210a      	movs	r1, #10
   186fc:	f017 fb4e 	bl	2fd9c <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   18700:	f8d8 3000 	ldr.w	r3, [r8]
   18704:	4630      	mov	r0, r6
   18706:	695b      	ldr	r3, [r3, #20]
   18708:	e78b      	b.n	18622 <smp_pairing_req+0x26e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1870a:	210c      	movs	r1, #12
   1870c:	4620      	mov	r0, r4
   1870e:	e7de      	b.n	186ce <smp_pairing_req+0x31a>
   18710:	20001e98 	.word	0x20001e98

00018714 <compute_and_check_and_send_periph_dhcheck>:
{
   18714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	(void)memset(r, 0, sizeof(r));
   18718:	2210      	movs	r2, #16
{
   1871a:	b0a2      	sub	sp, #136	; 0x88
   1871c:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   1871e:	2100      	movs	r1, #0
   18720:	eb0d 0002 	add.w	r0, sp, r2
   18724:	f015 fc8c 	bl	2e040 <memset>
	switch (smp->method) {
   18728:	7a23      	ldrb	r3, [r4, #8]
   1872a:	2b05      	cmp	r3, #5
   1872c:	f200 8097 	bhi.w	1885e <compute_and_check_and_send_periph_dhcheck+0x14a>
   18730:	e8df f003 	tbb	[pc, r3]
   18734:	09030309 	.word	0x09030309
   18738:	8c95      	.short	0x8c95
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1873a:	2204      	movs	r2, #4
   1873c:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
   18740:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   18742:	f015 fc72 	bl	2e02a <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
   18746:	4b72      	ldr	r3, [pc, #456]	; (18910 <compute_and_check_and_send_periph_dhcheck+0x1fc>)
		   &smp->chan.chan.conn->le.init_addr,
   18748:	f8d4 60f0 	ldr.w	r6, [r4, #240]	; 0xf0
	uint8_t m[53] = { 0x00, /* counter */
   1874c:	aa14      	add	r2, sp, #80	; 0x50
   1874e:	f103 0730 	add.w	r7, r3, #48	; 0x30
   18752:	4691      	mov	r9, r2
   18754:	6818      	ldr	r0, [r3, #0]
   18756:	6859      	ldr	r1, [r3, #4]
   18758:	4615      	mov	r5, r2
   1875a:	c503      	stmia	r5!, {r0, r1}
   1875c:	3308      	adds	r3, #8
   1875e:	42bb      	cmp	r3, r7
   18760:	462a      	mov	r2, r5
   18762:	d1f7      	bne.n	18754 <compute_and_check_and_send_periph_dhcheck+0x40>
   18764:	6818      	ldr	r0, [r3, #0]
   18766:	791b      	ldrb	r3, [r3, #4]
   18768:	6028      	str	r0, [r5, #0]
	sys_memcpy_swap(ws, w, 32);
   1876a:	af0c      	add	r7, sp, #48	; 0x30
	uint8_t m[53] = { 0x00, /* counter */
   1876c:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
   1876e:	2220      	movs	r2, #32
   18770:	f104 0197 	add.w	r1, r4, #151	; 0x97
   18774:	4638      	mov	r0, r7
   18776:	f017 fa05 	bl	2fb84 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   1877a:	4866      	ldr	r0, [pc, #408]	; (18914 <compute_and_check_and_send_periph_dhcheck+0x200>)
   1877c:	ab08      	add	r3, sp, #32
   1877e:	2220      	movs	r2, #32
   18780:	4639      	mov	r1, r7
   18782:	f017 fa42 	bl	2fc0a <bt_smp_aes_cmac>
	if (err) {
   18786:	2800      	cmp	r0, #0
   18788:	f040 80bf 	bne.w	1890a <compute_and_check_and_send_periph_dhcheck+0x1f6>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1878c:	f104 0837 	add.w	r8, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
   18790:	2210      	movs	r2, #16
   18792:	4641      	mov	r1, r8
   18794:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   18798:	f104 0a27 	add.w	sl, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
   1879c:	f017 f9f2 	bl	2fb84 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   187a0:	2210      	movs	r2, #16
   187a2:	4651      	mov	r1, sl
   187a4:	f10d 0065 	add.w	r0, sp, #101	; 0x65
   187a8:	f017 f9ec 	bl	2fb84 <sys_memcpy_swap>
	m[37] = a1->type;
   187ac:	f896 308f 	ldrb.w	r3, [r6, #143]	; 0x8f
   187b0:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   187b4:	2206      	movs	r2, #6
   187b6:	f106 0190 	add.w	r1, r6, #144	; 0x90
   187ba:	f10d 0076 	add.w	r0, sp, #118	; 0x76
   187be:	f017 f9e1 	bl	2fb84 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   187c2:	f104 05c7 	add.w	r5, r4, #199	; 0xc7
	m[44] = a2->type;
   187c6:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
   187ca:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   187ce:	2206      	movs	r2, #6
   187d0:	f106 0197 	add.w	r1, r6, #151	; 0x97
   187d4:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
   187d8:	f017 f9d4 	bl	2fb84 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   187dc:	462b      	mov	r3, r5
   187de:	2235      	movs	r2, #53	; 0x35
   187e0:	4649      	mov	r1, r9
   187e2:	a808      	add	r0, sp, #32
   187e4:	f017 fa11 	bl	2fc0a <bt_smp_aes_cmac>
	if (err) {
   187e8:	2800      	cmp	r0, #0
   187ea:	f040 808e 	bne.w	1890a <compute_and_check_and_send_periph_dhcheck+0x1f6>
	sys_mem_swap(mackey, 16);
   187ee:	2110      	movs	r1, #16
   187f0:	4628      	mov	r0, r5
   187f2:	f017 f9d1 	bl	2fb98 <sys_mem_swap>
		   smp->tk)) {
   187f6:	f104 0647 	add.w	r6, r4, #71	; 0x47
	m[0] = 0x01;
   187fa:	2301      	movs	r3, #1
   187fc:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   18800:	2235      	movs	r2, #53	; 0x35
   18802:	4633      	mov	r3, r6
   18804:	4649      	mov	r1, r9
   18806:	a808      	add	r0, sp, #32
   18808:	f017 f9ff 	bl	2fc0a <bt_smp_aes_cmac>
	if (err) {
   1880c:	2800      	cmp	r0, #0
   1880e:	d17c      	bne.n	1890a <compute_and_check_and_send_periph_dhcheck+0x1f6>
	sys_mem_swap(ltk, 16);
   18810:	2110      	movs	r1, #16
   18812:	4630      	mov	r0, r6
   18814:	f017 f9c0 	bl	2fb98 <sys_mem_swap>
		   &smp->chan.chan.conn->le.resp_addr,
   18818:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1881c:	9703      	str	r7, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
   1881e:	f103 028f 	add.w	r2, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
   18822:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   18824:	9301      	str	r3, [sp, #4]
   18826:	f104 0311 	add.w	r3, r4, #17
   1882a:	9202      	str	r2, [sp, #8]
   1882c:	9300      	str	r3, [sp, #0]
   1882e:	4642      	mov	r2, r8
   18830:	ab04      	add	r3, sp, #16
   18832:	4651      	mov	r1, sl
   18834:	4628      	mov	r0, r5
   18836:	f017 fa2a 	bl	2fc8e <smp_f6>
   1883a:	b1e8      	cbz	r0, 18878 <compute_and_check_and_send_periph_dhcheck+0x164>
		BT_ERR("Calculate local DHKey check failed");
   1883c:	4b36      	ldr	r3, [pc, #216]	; (18918 <compute_and_check_and_send_periph_dhcheck+0x204>)
		BT_ERR("Calculate LTK failed");
   1883e:	9318      	str	r3, [sp, #96]	; 0x60
   18840:	2302      	movs	r3, #2
   18842:	9317      	str	r3, [sp, #92]	; 0x5c
   18844:	aa17      	add	r2, sp, #92	; 0x5c
   18846:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1884a:	e010      	b.n	1886e <compute_and_check_and_send_periph_dhcheck+0x15a>
		if (smp->oobd_remote) {
   1884c:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   18850:	2900      	cmp	r1, #0
   18852:	f43f af78 	beq.w	18746 <compute_and_check_and_send_periph_dhcheck+0x32>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   18856:	2210      	movs	r2, #16
   18858:	eb0d 0002 	add.w	r0, sp, r2
   1885c:	e771      	b.n	18742 <compute_and_check_and_send_periph_dhcheck+0x2e>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1885e:	4a2f      	ldr	r2, [pc, #188]	; (1891c <compute_and_check_and_send_periph_dhcheck+0x208>)
	switch (smp->method) {
   18860:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
		BT_ERR("Unknown pairing method (%u)", smp->method);
   18864:	2303      	movs	r3, #3
   18866:	9317      	str	r3, [sp, #92]	; 0x5c
   18868:	aa17      	add	r2, sp, #92	; 0x5c
   1886a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		BT_ERR("Calculate LTK failed");
   1886e:	482c      	ldr	r0, [pc, #176]	; (18920 <compute_and_check_and_send_periph_dhcheck+0x20c>)
   18870:	f017 fa86 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   18874:	2008      	movs	r0, #8
   18876:	e043      	b.n	18900 <compute_and_check_and_send_periph_dhcheck+0x1ec>
	if (smp->method == LE_SC_OOB) {
   18878:	7a23      	ldrb	r3, [r4, #8]
   1887a:	2b05      	cmp	r3, #5
   1887c:	d107      	bne.n	1888e <compute_and_check_and_send_periph_dhcheck+0x17a>
		if (smp->oobd_local) {
   1887e:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   18882:	2210      	movs	r2, #16
   18884:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
   18888:	b1b1      	cbz	r1, 188b8 <compute_and_check_and_send_periph_dhcheck+0x1a4>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1888a:	f015 fbce 	bl	2e02a <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   1888e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   18892:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   18896:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   18898:	ae08      	add	r6, sp, #32
   1889a:	9301      	str	r3, [sp, #4]
   1889c:	f104 030a 	add.w	r3, r4, #10
   188a0:	9202      	str	r2, [sp, #8]
   188a2:	9300      	str	r3, [sp, #0]
   188a4:	9603      	str	r6, [sp, #12]
   188a6:	ab04      	add	r3, sp, #16
   188a8:	4652      	mov	r2, sl
   188aa:	4641      	mov	r1, r8
   188ac:	4628      	mov	r0, r5
   188ae:	f017 f9ee 	bl	2fc8e <smp_f6>
   188b2:	b120      	cbz	r0, 188be <compute_and_check_and_send_periph_dhcheck+0x1aa>
		BT_ERR("Calculate remote DHKey check failed");
   188b4:	4b1b      	ldr	r3, [pc, #108]	; (18924 <compute_and_check_and_send_periph_dhcheck+0x210>)
   188b6:	e7c2      	b.n	1883e <compute_and_check_and_send_periph_dhcheck+0x12a>
			memset(r, 0, sizeof(r));
   188b8:	f015 fbc2 	bl	2e040 <memset>
   188bc:	e7e7      	b.n	1888e <compute_and_check_and_send_periph_dhcheck+0x17a>
	if (memcmp(smp->e, re, 16)) {
   188be:	2210      	movs	r2, #16
   188c0:	4631      	mov	r1, r6
   188c2:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   188c6:	f015 fb9f 	bl	2e008 <memcmp>
   188ca:	4605      	mov	r5, r0
   188cc:	b9d8      	cbnz	r0, 18906 <compute_and_check_and_send_periph_dhcheck+0x1f2>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   188ce:	210d      	movs	r1, #13
   188d0:	4620      	mov	r0, r4
   188d2:	f017 fa77 	bl	2fdc4 <smp_create_pdu.constprop.0>
	if (!buf) {
   188d6:	4606      	mov	r6, r0
   188d8:	2800      	cmp	r0, #0
   188da:	d0cb      	beq.n	18874 <compute_and_check_and_send_periph_dhcheck+0x160>
   188dc:	2110      	movs	r1, #16
   188de:	3008      	adds	r0, #8
   188e0:	f018 f8c8 	bl	30a74 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   188e4:	2210      	movs	r2, #16
   188e6:	4639      	mov	r1, r7
   188e8:	f015 fb9f 	bl	2e02a <memcpy>
	smp_send(smp, buf, NULL, NULL);
   188ec:	462a      	mov	r2, r5
   188ee:	4631      	mov	r1, r6
   188f0:	4620      	mov	r0, r4
   188f2:	f017 fa28 	bl	2fd46 <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   188f6:	1d20      	adds	r0, r4, #4
   188f8:	2101      	movs	r1, #1
   188fa:	f017 fa4f 	bl	2fd9c <atomic_set_bit>
	return 0;
   188fe:	4628      	mov	r0, r5
}
   18900:	b022      	add	sp, #136	; 0x88
   18902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   18906:	200b      	movs	r0, #11
   18908:	e7fa      	b.n	18900 <compute_and_check_and_send_periph_dhcheck+0x1ec>
		BT_ERR("Calculate LTK failed");
   1890a:	4b07      	ldr	r3, [pc, #28]	; (18928 <compute_and_check_and_send_periph_dhcheck+0x214>)
   1890c:	e797      	b.n	1883e <compute_and_check_and_send_periph_dhcheck+0x12a>
   1890e:	bf00      	nop
   18910:	000325f1 	.word	0x000325f1
   18914:	0003654b 	.word	0x0003654b
   18918:	000361e1 	.word	0x000361e1
   1891c:	000361c5 	.word	0x000361c5
   18920:	00032484 	.word	0x00032484
   18924:	00036204 	.word	0x00036204
   18928:	00036228 	.word	0x00036228

0001892c <smp_send_pairing_confirm>:
{
   1892c:	b570      	push	{r4, r5, r6, lr}
	switch (smp->method) {
   1892e:	7a04      	ldrb	r4, [r0, #8]
   18930:	2c02      	cmp	r4, #2
{
   18932:	b088      	sub	sp, #32
   18934:	4605      	mov	r5, r0
	switch (smp->method) {
   18936:	d823      	bhi.n	18980 <smp_send_pairing_confirm+0x54>
   18938:	b144      	cbz	r4, 1894c <smp_send_pairing_confirm+0x20>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1893a:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   1893e:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   18942:	40dc      	lsrs	r4, r3
   18944:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   18948:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1894c:	2103      	movs	r1, #3
   1894e:	4628      	mov	r0, r5
   18950:	f017 fa38 	bl	2fdc4 <smp_create_pdu.constprop.0>
	if (!buf) {
   18954:	4606      	mov	r6, r0
   18956:	b300      	cbz	r0, 1899a <smp_send_pairing_confirm+0x6e>
   18958:	2110      	movs	r1, #16
   1895a:	3008      	adds	r0, #8
   1895c:	f018 f88a 	bl	30a74 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   18960:	9000      	str	r0, [sp, #0]
   18962:	4816      	ldr	r0, [pc, #88]	; (189bc <smp_send_pairing_confirm+0x90>)
   18964:	4623      	mov	r3, r4
   18966:	6800      	ldr	r0, [r0, #0]
   18968:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1896c:	f105 0157 	add.w	r1, r5, #87	; 0x57
   18970:	f017 f967 	bl	2fc42 <smp_f4>
   18974:	4604      	mov	r4, r0
   18976:	b1a0      	cbz	r0, 189a2 <smp_send_pairing_confirm+0x76>
		net_buf_unref(buf);
   18978:	4630      	mov	r0, r6
   1897a:	f00f f993 	bl	27ca4 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1897e:	e00c      	b.n	1899a <smp_send_pairing_confirm+0x6e>
	switch (smp->method) {
   18980:	2c03      	cmp	r4, #3
   18982:	d00c      	beq.n	1899e <smp_send_pairing_confirm+0x72>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   18984:	4b0e      	ldr	r3, [pc, #56]	; (189c0 <smp_send_pairing_confirm+0x94>)
   18986:	480f      	ldr	r0, [pc, #60]	; (189c4 <smp_send_pairing_confirm+0x98>)
	switch (smp->method) {
   18988:	e9cd 3406 	strd	r3, r4, [sp, #24]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1898c:	aa05      	add	r2, sp, #20
   1898e:	2303      	movs	r3, #3
   18990:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18994:	9305      	str	r3, [sp, #20]
   18996:	f017 f9f3 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1899a:	2008      	movs	r0, #8
   1899c:	e00b      	b.n	189b6 <smp_send_pairing_confirm+0x8a>
	switch (smp->method) {
   1899e:	2400      	movs	r4, #0
   189a0:	e7d4      	b.n	1894c <smp_send_pairing_confirm+0x20>
	smp_send(smp, buf, NULL, NULL);
   189a2:	4602      	mov	r2, r0
   189a4:	4631      	mov	r1, r6
   189a6:	4628      	mov	r0, r5
   189a8:	f017 f9cd 	bl	2fd46 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   189ac:	1d28      	adds	r0, r5, #4
   189ae:	4621      	mov	r1, r4
   189b0:	f017 f9ba 	bl	2fd28 <atomic_clear_bit>
	return 0;
   189b4:	4620      	mov	r0, r4
}
   189b6:	b008      	add	sp, #32
   189b8:	bd70      	pop	{r4, r5, r6, pc}
   189ba:	bf00      	nop
   189bc:	20001f44 	.word	0x20001f44
   189c0:	000361c5 	.word	0x000361c5
   189c4:	00032484 	.word	0x00032484

000189c8 <smp_public_key_periph>:
{
   189c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   189cc:	1d06      	adds	r6, r0, #4
{
   189ce:	b086      	sub	sp, #24
   189d0:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   189d2:	210e      	movs	r1, #14
   189d4:	4630      	mov	r0, r6
   189d6:	f017 f8ee 	bl	2fbb6 <atomic_test_bit>
   189da:	b990      	cbnz	r0, 18a02 <smp_public_key_periph+0x3a>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   189dc:	4b4e      	ldr	r3, [pc, #312]	; (18b18 <smp_public_key_periph+0x150>)
   189de:	2220      	movs	r2, #32
   189e0:	6819      	ldr	r1, [r3, #0]
   189e2:	f104 0057 	add.w	r0, r4, #87	; 0x57
   189e6:	f015 fb0f 	bl	2e008 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   189ea:	b950      	cbnz	r0, 18a02 <smp_public_key_periph+0x3a>
		BT_WARN("Remote public key rejected");
   189ec:	4b4b      	ldr	r3, [pc, #300]	; (18b1c <smp_public_key_periph+0x154>)
   189ee:	9304      	str	r3, [sp, #16]
   189f0:	2302      	movs	r3, #2
   189f2:	9303      	str	r3, [sp, #12]
   189f4:	aa03      	add	r2, sp, #12
   189f6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		BT_ERR("Unknown pairing method (%u)", smp->method);
   189fa:	4849      	ldr	r0, [pc, #292]	; (18b20 <smp_public_key_periph+0x158>)
   189fc:	f017 f9c0 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
   18a00:	e005      	b.n	18a0e <smp_public_key_periph+0x46>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   18a02:	210c      	movs	r1, #12
   18a04:	4620      	mov	r0, r4
   18a06:	f017 f9dd 	bl	2fdc4 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   18a0a:	4605      	mov	r5, r0
   18a0c:	b908      	cbnz	r0, 18a12 <smp_public_key_periph+0x4a>
		return BT_SMP_ERR_UNSPECIFIED;
   18a0e:	2008      	movs	r0, #8
   18a10:	e027      	b.n	18a62 <smp_public_key_periph+0x9a>
   18a12:	2140      	movs	r1, #64	; 0x40
   18a14:	3008      	adds	r0, #8
   18a16:	f018 f82d 	bl	30a74 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   18a1a:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 18b18 <smp_public_key_periph+0x150>
   18a1e:	2220      	movs	r2, #32
   18a20:	f8d8 1000 	ldr.w	r1, [r8]
   18a24:	4607      	mov	r7, r0
   18a26:	f015 fb00 	bl	2e02a <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   18a2a:	f8d8 1000 	ldr.w	r1, [r8]
   18a2e:	2220      	movs	r2, #32
   18a30:	4411      	add	r1, r2
   18a32:	18b8      	adds	r0, r7, r2
   18a34:	f015 faf9 	bl	2e02a <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   18a38:	2200      	movs	r2, #0
   18a3a:	4629      	mov	r1, r5
   18a3c:	4620      	mov	r0, r4
   18a3e:	f017 f982 	bl	2fd46 <smp_send.constprop.0>
	switch (smp->method) {
   18a42:	7a23      	ldrb	r3, [r4, #8]
   18a44:	2b05      	cmp	r3, #5
   18a46:	d85b      	bhi.n	18b00 <smp_public_key_periph+0x138>
   18a48:	e8df f003 	tbb	[pc, r3]
   18a4c:	030e3803 	.word	0x030e3803
   18a50:	575a      	.short	0x575a
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   18a52:	2104      	movs	r1, #4
   18a54:	4620      	mov	r0, r4
   18a56:	f017 f9a1 	bl	2fd9c <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   18a5a:	f7ff ff67 	bl	1892c <smp_send_pairing_confirm>
		if (err) {
   18a5e:	2800      	cmp	r0, #0
   18a60:	d03d      	beq.n	18ade <smp_public_key_periph+0x116>
}
   18a62:	b006      	add	sp, #24
   18a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   18a68:	2104      	movs	r1, #4
   18a6a:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   18a6e:	f004 fab9 	bl	1cfe4 <bt_rand>
   18a72:	2800      	cmp	r0, #0
   18a74:	d1cb      	bne.n	18a0e <smp_public_key_periph+0x46>
		smp->passkey %= 1000000;
   18a76:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   18a7a:	4a2a      	ldr	r2, [pc, #168]	; (18b24 <smp_public_key_periph+0x15c>)
	if (bt_auth && bt_auth->passkey_display) {
   18a7c:	4d2a      	ldr	r5, [pc, #168]	; (18b28 <smp_public_key_periph+0x160>)
		smp->passkey %= 1000000;
   18a7e:	fbb3 f1f2 	udiv	r1, r3, r2
   18a82:	fb02 3311 	mls	r3, r2, r1, r3
   18a86:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (bt_auth && bt_auth->passkey_display) {
   18a8a:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
   18a8c:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (bt_auth && bt_auth->passkey_display) {
   18a90:	b163      	cbz	r3, 18aac <smp_public_key_periph+0xe4>
   18a92:	681b      	ldr	r3, [r3, #0]
   18a94:	b153      	cbz	r3, 18aac <smp_public_key_periph+0xe4>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   18a96:	210b      	movs	r1, #11
   18a98:	4630      	mov	r0, r6
   18a9a:	f017 f97f 	bl	2fd9c <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   18a9e:	682b      	ldr	r3, [r5, #0]
   18aa0:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   18aa4:	681b      	ldr	r3, [r3, #0]
   18aa6:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   18aaa:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   18aac:	2103      	movs	r1, #3
   18aae:	4620      	mov	r0, r4
   18ab0:	f017 f974 	bl	2fd9c <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   18ab4:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   18ab6:	f017 f971 	bl	2fd9c <atomic_set_bit>
		break;
   18aba:	e010      	b.n	18ade <smp_public_key_periph+0x116>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   18abc:	4620      	mov	r0, r4
   18abe:	2103      	movs	r1, #3
   18ac0:	f017 f96c 	bl	2fd9c <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   18ac4:	210e      	movs	r1, #14
   18ac6:	f017 f969 	bl	2fd9c <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   18aca:	4630      	mov	r0, r6
   18acc:	210a      	movs	r1, #10
   18ace:	f017 f965 	bl	2fd9c <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
   18ad2:	4b15      	ldr	r3, [pc, #84]	; (18b28 <smp_public_key_periph+0x160>)
   18ad4:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   18ad8:	681b      	ldr	r3, [r3, #0]
   18ada:	685b      	ldr	r3, [r3, #4]
   18adc:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   18ade:	4630      	mov	r0, r6
   18ae0:	2107      	movs	r1, #7
   18ae2:	f017 f95b 	bl	2fd9c <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   18ae6:	2008      	movs	r0, #8
   18ae8:	f7ff faf2 	bl	180d0 <smp_find>
   18aec:	b988      	cbnz	r0, 18b12 <smp_public_key_periph+0x14a>
		return smp_dhkey_generate(smp);
   18aee:	4620      	mov	r0, r4
}
   18af0:	b006      	add	sp, #24
   18af2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return smp_dhkey_generate(smp);
   18af6:	f7ff bbbf 	b.w	18278 <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   18afa:	2104      	movs	r1, #4
   18afc:	4620      	mov	r0, r4
   18afe:	e7da      	b.n	18ab6 <smp_public_key_periph+0xee>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   18b00:	4a0a      	ldr	r2, [pc, #40]	; (18b2c <smp_public_key_periph+0x164>)
	switch (smp->method) {
   18b02:	e9cd 2304 	strd	r2, r3, [sp, #16]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   18b06:	2303      	movs	r3, #3
   18b08:	9303      	str	r3, [sp, #12]
   18b0a:	aa03      	add	r2, sp, #12
   18b0c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18b10:	e773      	b.n	189fa <smp_public_key_periph+0x32>
	return 0;
   18b12:	2000      	movs	r0, #0
   18b14:	e7a5      	b.n	18a62 <smp_public_key_periph+0x9a>
   18b16:	bf00      	nop
   18b18:	20001f44 	.word	0x20001f44
   18b1c:	0003623d 	.word	0x0003623d
   18b20:	00032484 	.word	0x00032484
   18b24:	000f4240 	.word	0x000f4240
   18b28:	20001e98 	.word	0x20001e98
   18b2c:	000361c5 	.word	0x000361c5

00018b30 <smp_public_key>:
{
   18b30:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
   18b32:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   18b34:	f100 0557 	add.w	r5, r0, #87	; 0x57
{
   18b38:	b086      	sub	sp, #24
   18b3a:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   18b3c:	2220      	movs	r2, #32
   18b3e:	4631      	mov	r1, r6
   18b40:	4628      	mov	r0, r5
   18b42:	f015 fa72 	bl	2e02a <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   18b46:	2220      	movs	r2, #32
   18b48:	18b1      	adds	r1, r6, r2
   18b4a:	f104 0077 	add.w	r0, r4, #119	; 0x77
   18b4e:	f015 fa6c 	bl	2e02a <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   18b52:	4628      	mov	r0, r5
   18b54:	f7fb fc9c 	bl	14490 <bt_pub_key_is_debug>
   18b58:	b940      	cbnz	r0, 18b6c <smp_public_key+0x3c>
	if (!sc_public_key) {
   18b5a:	4b1c      	ldr	r3, [pc, #112]	; (18bcc <smp_public_key+0x9c>)
   18b5c:	681d      	ldr	r5, [r3, #0]
   18b5e:	bb75      	cbnz	r5, 18bbe <smp_public_key+0x8e>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   18b60:	1d20      	adds	r0, r4, #4
   18b62:	2106      	movs	r1, #6
   18b64:	f017 f91a 	bl	2fd9c <atomic_set_bit>
		return 0;
   18b68:	4628      	mov	r0, r5
   18b6a:	e026      	b.n	18bba <smp_public_key+0x8a>
		BT_INFO("Remote is using Debug Public key");
   18b6c:	4b18      	ldr	r3, [pc, #96]	; (18bd0 <smp_public_key+0xa0>)
   18b6e:	4819      	ldr	r0, [pc, #100]	; (18bd4 <smp_public_key+0xa4>)
   18b70:	9304      	str	r3, [sp, #16]
   18b72:	aa03      	add	r2, sp, #12
   18b74:	2302      	movs	r3, #2
   18b76:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   18b7a:	9303      	str	r3, [sp, #12]
   18b7c:	f017 f900 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   18b80:	210e      	movs	r1, #14
   18b82:	1d20      	adds	r0, r4, #4
   18b84:	f017 f90a 	bl	2fd9c <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   18b88:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (!conn->le.keys) {
   18b8c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   18b90:	b933      	cbnz	r3, 18ba0 <smp_public_key+0x70>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   18b92:	7a28      	ldrb	r0, [r5, #8]
   18b94:	f105 0188 	add.w	r1, r5, #136	; 0x88
   18b98:	f001 f87a 	bl	19c90 <bt_keys_get_addr>
   18b9c:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   18ba0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   18ba4:	2b00      	cmp	r3, #0
   18ba6:	d0d8      	beq.n	18b5a <smp_public_key+0x2a>
   18ba8:	89da      	ldrh	r2, [r3, #14]
   18baa:	f002 0224 	and.w	r2, r2, #36	; 0x24
   18bae:	2a00      	cmp	r2, #0
   18bb0:	d0d3      	beq.n	18b5a <smp_public_key+0x2a>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   18bb2:	7b5b      	ldrb	r3, [r3, #13]
   18bb4:	079b      	lsls	r3, r3, #30
   18bb6:	d4d0      	bmi.n	18b5a <smp_public_key+0x2a>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   18bb8:	2003      	movs	r0, #3
}
   18bba:	b006      	add	sp, #24
   18bbc:	bd70      	pop	{r4, r5, r6, pc}
	err = smp_public_key_periph(smp);
   18bbe:	4620      	mov	r0, r4
}
   18bc0:	b006      	add	sp, #24
   18bc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = smp_public_key_periph(smp);
   18bc6:	f7ff beff 	b.w	189c8 <smp_public_key_periph>
   18bca:	bf00      	nop
   18bcc:	20001f44 	.word	0x20001f44
   18bd0:	00036258 	.word	0x00036258
   18bd4:	00032484 	.word	0x00032484

00018bd8 <bt_smp_connected>:
{
   18bd8:	b510      	push	{r4, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   18bda:	4905      	ldr	r1, [pc, #20]	; (18bf0 <bt_smp_connected+0x18>)
   18bdc:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   18be0:	30e8      	adds	r0, #232	; 0xe8
   18be2:	f018 fe8e 	bl	31902 <k_work_init_delayable>
	smp_reset(smp);
   18be6:	4620      	mov	r0, r4
}
   18be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
   18bec:	f017 b97e 	b.w	2feec <smp_reset>
   18bf0:	00019b09 	.word	0x00019b09

00018bf4 <smp_pairing_confirm>:
{
   18bf4:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   18bf6:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   18bf8:	1d05      	adds	r5, r0, #4
{
   18bfa:	b086      	sub	sp, #24
   18bfc:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   18bfe:	210b      	movs	r1, #11
   18c00:	4628      	mov	r0, r5
   18c02:	f017 f891 	bl	2fd28 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   18c06:	4631      	mov	r1, r6
   18c08:	2210      	movs	r2, #16
   18c0a:	f104 0017 	add.w	r0, r4, #23
   18c0e:	f015 fa0c 	bl	2e02a <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18c12:	2105      	movs	r1, #5
   18c14:	4628      	mov	r0, r5
   18c16:	f016 ffce 	bl	2fbb6 <atomic_test_bit>
   18c1a:	b928      	cbnz	r0, 18c28 <smp_pairing_confirm+0x34>
		return legacy_pairing_confirm(smp);
   18c1c:	4620      	mov	r0, r4
}
   18c1e:	b006      	add	sp, #24
   18c20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   18c24:	f017 b9e0 	b.w	2ffe8 <legacy_pairing_confirm>
	switch (smp->method) {
   18c28:	7a23      	ldrb	r3, [r4, #8]
   18c2a:	2b01      	cmp	r3, #1
   18c2c:	d00a      	beq.n	18c44 <smp_pairing_confirm+0x50>
   18c2e:	2b02      	cmp	r3, #2
   18c30:	d115      	bne.n	18c5e <smp_pairing_confirm+0x6a>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   18c32:	2104      	movs	r1, #4
   18c34:	4620      	mov	r0, r4
   18c36:	f017 f8b1 	bl	2fd9c <atomic_set_bit>
}
   18c3a:	b006      	add	sp, #24
   18c3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   18c40:	f7ff be74 	b.w	1892c <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   18c44:	210a      	movs	r1, #10
   18c46:	4628      	mov	r0, r5
   18c48:	f016 ffb5 	bl	2fbb6 <atomic_test_bit>
   18c4c:	2800      	cmp	r0, #0
   18c4e:	d0f0      	beq.n	18c32 <smp_pairing_confirm+0x3e>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   18c50:	4628      	mov	r0, r5
   18c52:	2100      	movs	r1, #0
   18c54:	f017 f8a2 	bl	2fd9c <atomic_set_bit>
			return 0;
   18c58:	2000      	movs	r0, #0
}
   18c5a:	b006      	add	sp, #24
   18c5c:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unknown pairing method (%u)", smp->method);
   18c5e:	4a06      	ldr	r2, [pc, #24]	; (18c78 <smp_pairing_confirm+0x84>)
   18c60:	4806      	ldr	r0, [pc, #24]	; (18c7c <smp_pairing_confirm+0x88>)
	switch (smp->method) {
   18c62:	e9cd 2304 	strd	r2, r3, [sp, #16]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   18c66:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18c6a:	2303      	movs	r3, #3
   18c6c:	aa03      	add	r2, sp, #12
   18c6e:	9303      	str	r3, [sp, #12]
   18c70:	f017 f886 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   18c74:	2008      	movs	r0, #8
   18c76:	e7f0      	b.n	18c5a <smp_pairing_confirm+0x66>
   18c78:	000361c5 	.word	0x000361c5
   18c7c:	00032484 	.word	0x00032484

00018c80 <smp_pairing_random>:
{
   18c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18c84:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   18c86:	f100 0737 	add.w	r7, r0, #55	; 0x37
   18c8a:	6889      	ldr	r1, [r1, #8]
{
   18c8c:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   18c8e:	2210      	movs	r2, #16
   18c90:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18c92:	1d26      	adds	r6, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   18c94:	f015 f9c9 	bl	2e02a <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18c98:	2105      	movs	r1, #5
   18c9a:	4630      	mov	r0, r6
   18c9c:	f016 ff8b 	bl	2fbb6 <atomic_test_bit>
   18ca0:	2800      	cmp	r0, #0
   18ca2:	d148      	bne.n	18d36 <smp_pairing_random+0xb6>
	struct bt_conn *conn = smp->chan.chan.conn;
   18ca4:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   18ca8:	f104 0847 	add.w	r8, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   18cac:	f103 0296 	add.w	r2, r3, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   18cb0:	ad06      	add	r5, sp, #24
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   18cb2:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   18cb4:	9201      	str	r2, [sp, #4]
   18cb6:	9300      	str	r3, [sp, #0]
   18cb8:	9502      	str	r5, [sp, #8]
   18cba:	f104 0310 	add.w	r3, r4, #16
   18cbe:	f104 0209 	add.w	r2, r4, #9
   18cc2:	4639      	mov	r1, r7
   18cc4:	4640      	mov	r0, r8
   18cc6:	f017 f934 	bl	2ff32 <smp_c1>
	if (err) {
   18cca:	2800      	cmp	r0, #0
   18ccc:	f040 80bc 	bne.w	18e48 <smp_pairing_random+0x1c8>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   18cd0:	2210      	movs	r2, #16
   18cd2:	4629      	mov	r1, r5
   18cd4:	f104 0017 	add.w	r0, r4, #23
   18cd8:	f015 f996 	bl	2e008 <memcmp>
   18cdc:	2800      	cmp	r0, #0
   18cde:	f040 808d 	bne.w	18dfc <smp_pairing_random+0x17c>
	memcpy(out, r2, 8);
   18ce2:	2208      	movs	r2, #8
   18ce4:	4639      	mov	r1, r7
   18ce6:	4628      	mov	r0, r5
   18ce8:	f015 f99f 	bl	2e02a <memcpy>
	memcpy(out + 8, r1, 8);
   18cec:	2208      	movs	r2, #8
   18cee:	f104 0127 	add.w	r1, r4, #39	; 0x27
   18cf2:	a808      	add	r0, sp, #32
   18cf4:	f015 f999 	bl	2e02a <memcpy>
	return bt_encrypt_le(k, out, out);
   18cf8:	462a      	mov	r2, r5
   18cfa:	4629      	mov	r1, r5
   18cfc:	4640      	mov	r0, r8
   18cfe:	f004 f973 	bl	1cfe8 <bt_encrypt_le>
		if (err) {
   18d02:	b150      	cbz	r0, 18d1a <smp_pairing_random+0x9a>
			BT_ERR("Calculate STK failed");
   18d04:	4b6e      	ldr	r3, [pc, #440]	; (18ec0 <smp_pairing_random+0x240>)
		BT_ERR("Calculate confirm failed");
   18d06:	930e      	str	r3, [sp, #56]	; 0x38
   18d08:	2302      	movs	r3, #2
   18d0a:	930d      	str	r3, [sp, #52]	; 0x34
   18d0c:	aa0d      	add	r2, sp, #52	; 0x34
   18d0e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_ERR("Unknown pairing method (%u)", smp->method);
   18d12:	486c      	ldr	r0, [pc, #432]	; (18ec4 <smp_pairing_random+0x244>)
   18d14:	f017 f834 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
   18d18:	e096      	b.n	18e48 <smp_pairing_random+0x1c8>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   18d1a:	4629      	mov	r1, r5
   18d1c:	2210      	movs	r2, #16
   18d1e:	4640      	mov	r0, r8
   18d20:	f015 f983 	bl	2e02a <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   18d24:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   18d26:	4630      	mov	r0, r6
   18d28:	f017 f838 	bl	2fd9c <atomic_set_bit>
	return smp_send_pairing_random(smp);
   18d2c:	4620      	mov	r0, r4
   18d2e:	f017 f881 	bl	2fe34 <smp_send_pairing_random>
   18d32:	4605      	mov	r5, r0
   18d34:	e063      	b.n	18dfe <smp_pairing_random+0x17e>
	switch (smp->method) {
   18d36:	7a23      	ldrb	r3, [r4, #8]
   18d38:	2b05      	cmp	r3, #5
   18d3a:	f200 80a3 	bhi.w	18e84 <smp_pairing_random+0x204>
   18d3e:	e8df f003 	tbb	[pc, r3]
   18d42:	413b      	.short	0x413b
   18d44:	85a10341 	.word	0x85a10341
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   18d48:	4b5f      	ldr	r3, [pc, #380]	; (18ec8 <smp_pairing_random+0x248>)
   18d4a:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
   18d4c:	2220      	movs	r2, #32
   18d4e:	f104 0157 	add.w	r1, r4, #87	; 0x57
   18d52:	a80a      	add	r0, sp, #40	; 0x28
   18d54:	f016 ff16 	bl	2fb84 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   18d58:	2220      	movs	r2, #32
   18d5a:	4629      	mov	r1, r5
   18d5c:	a812      	add	r0, sp, #72	; 0x48
   18d5e:	f016 ff11 	bl	2fb84 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   18d62:	2210      	movs	r2, #16
   18d64:	f104 0127 	add.w	r1, r4, #39	; 0x27
   18d68:	a81a      	add	r0, sp, #104	; 0x68
   18d6a:	f016 ff0b 	bl	2fb84 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   18d6e:	2210      	movs	r2, #16
   18d70:	4639      	mov	r1, r7
   18d72:	a806      	add	r0, sp, #24
   18d74:	f016 ff06 	bl	2fb84 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   18d78:	ab06      	add	r3, sp, #24
   18d7a:	2250      	movs	r2, #80	; 0x50
   18d7c:	a90a      	add	r1, sp, #40	; 0x28
   18d7e:	4618      	mov	r0, r3
   18d80:	f016 ff43 	bl	2fc0a <bt_smp_aes_cmac>
	if (err) {
   18d84:	2800      	cmp	r0, #0
   18d86:	d15f      	bne.n	18e48 <smp_pairing_random+0x1c8>
	memcpy(passkey, xs + 12, 4);
   18d88:	2204      	movs	r2, #4
   18d8a:	a909      	add	r1, sp, #36	; 0x24
   18d8c:	a805      	add	r0, sp, #20
   18d8e:	f015 f94c 	bl	2e02a <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   18d92:	9b05      	ldr	r3, [sp, #20]
   18d94:	4a4d      	ldr	r2, [pc, #308]	; (18ecc <smp_pairing_random+0x24c>)
   18d96:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   18d98:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   18d9a:	fbb3 f1f2 	udiv	r1, r3, r2
   18d9e:	fb02 3311 	mls	r3, r2, r1, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   18da2:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   18da4:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   18da6:	f016 fff9 	bl	2fd9c <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   18daa:	4b49      	ldr	r3, [pc, #292]	; (18ed0 <smp_pairing_random+0x250>)
   18dac:	9905      	ldr	r1, [sp, #20]
   18dae:	681b      	ldr	r3, [r3, #0]
   18db0:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   18db4:	689b      	ldr	r3, [r3, #8]
   18db6:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   18db8:	210d      	movs	r1, #13
   18dba:	4620      	mov	r0, r4
   18dbc:	f016 ffee 	bl	2fd9c <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   18dc0:	2110      	movs	r1, #16
   18dc2:	e7b0      	b.n	18d26 <smp_pairing_random+0xa6>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   18dc4:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   18dc8:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   18dcc:	493e      	ldr	r1, [pc, #248]	; (18ec8 <smp_pairing_random+0x248>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   18dce:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   18dd0:	ad06      	add	r5, sp, #24
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   18dd2:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   18dd6:	9500      	str	r5, [sp, #0]
   18dd8:	6809      	ldr	r1, [r1, #0]
   18dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   18dde:	463a      	mov	r2, r7
   18de0:	f104 0057 	add.w	r0, r4, #87	; 0x57
   18de4:	f016 ff2d 	bl	2fc42 <smp_f4>
   18de8:	b108      	cbz	r0, 18dee <smp_pairing_random+0x16e>
		BT_ERR("Calculate confirm failed");
   18dea:	4b3a      	ldr	r3, [pc, #232]	; (18ed4 <smp_pairing_random+0x254>)
   18dec:	e78b      	b.n	18d06 <smp_pairing_random+0x86>
	if (memcmp(smp->pcnf, cfm, 16)) {
   18dee:	2210      	movs	r2, #16
   18df0:	4629      	mov	r1, r5
   18df2:	f104 0017 	add.w	r0, r4, #23
   18df6:	f015 f907 	bl	2e008 <memcmp>
   18dfa:	b120      	cbz	r0, 18e06 <smp_pairing_random+0x186>
		return BT_SMP_ERR_CONFIRM_FAILED;
   18dfc:	2504      	movs	r5, #4
}
   18dfe:	4628      	mov	r0, r5
   18e00:	b01e      	add	sp, #120	; 0x78
   18e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(smp->allowed_cmds,
   18e06:	2103      	movs	r1, #3
   18e08:	4620      	mov	r0, r4
   18e0a:	f016 ffc7 	bl	2fd9c <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   18e0e:	f017 f811 	bl	2fe34 <smp_send_pairing_random>
		if (err) {
   18e12:	4605      	mov	r5, r0
   18e14:	2800      	cmp	r0, #0
   18e16:	d1f2      	bne.n	18dfe <smp_pairing_random+0x17e>
		smp->passkey_round++;
   18e18:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   18e1c:	3301      	adds	r3, #1
   18e1e:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   18e20:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   18e22:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   18e26:	d108      	bne.n	18e3a <smp_pairing_random+0x1ba>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   18e28:	4620      	mov	r0, r4
   18e2a:	210d      	movs	r1, #13
   18e2c:	f016 ffb6 	bl	2fd9c <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   18e30:	2110      	movs	r1, #16
   18e32:	4630      	mov	r0, r6
   18e34:	f016 ffb2 	bl	2fd9c <atomic_set_bit>
			return 0;
   18e38:	e7e1      	b.n	18dfe <smp_pairing_random+0x17e>
		if (bt_rand(smp->prnd, 16)) {
   18e3a:	2110      	movs	r1, #16
   18e3c:	f104 0027 	add.w	r0, r4, #39	; 0x27
   18e40:	f004 f8d0 	bl	1cfe4 <bt_rand>
   18e44:	2800      	cmp	r0, #0
   18e46:	d0da      	beq.n	18dfe <smp_pairing_random+0x17e>
		return BT_SMP_ERR_UNSPECIFIED;
   18e48:	2508      	movs	r5, #8
   18e4a:	e7d8      	b.n	18dfe <smp_pairing_random+0x17e>
		if (bt_rand(smp->prnd, 16)) {
   18e4c:	2110      	movs	r1, #16
   18e4e:	f104 0027 	add.w	r0, r4, #39	; 0x27
   18e52:	f004 f8c7 	bl	1cfe4 <bt_rand>
   18e56:	2800      	cmp	r0, #0
   18e58:	d1f6      	bne.n	18e48 <smp_pairing_random+0x1c8>
		if (bt_auth && bt_auth->oob_data_request) {
   18e5a:	4f1d      	ldr	r7, [pc, #116]	; (18ed0 <smp_pairing_random+0x250>)
   18e5c:	683b      	ldr	r3, [r7, #0]
   18e5e:	b1d3      	cbz	r3, 18e96 <smp_pairing_random+0x216>
   18e60:	68db      	ldr	r3, [r3, #12]
   18e62:	b1c3      	cbz	r3, 18e96 <smp_pairing_random+0x216>
			struct bt_conn_oob_info info = {
   18e64:	4b1c      	ldr	r3, [pc, #112]	; (18ed8 <smp_pairing_random+0x258>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   18e66:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   18e68:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
   18e6c:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   18e70:	7ca3      	ldrb	r3, [r4, #18]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   18e72:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   18e74:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   18e78:	d40f      	bmi.n	18e9a <smp_pairing_random+0x21a>
				     BT_CONN_OOB_BOTH_PEERS :
   18e7a:	2b00      	cmp	r3, #0
   18e7c:	bf0c      	ite	eq
   18e7e:	2003      	moveq	r0, #3
   18e80:	2001      	movne	r0, #1
   18e82:	e00d      	b.n	18ea0 <smp_pairing_random+0x220>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   18e84:	4a15      	ldr	r2, [pc, #84]	; (18edc <smp_pairing_random+0x25c>)
	switch (smp->method) {
   18e86:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
		BT_ERR("Unknown pairing method (%u)", smp->method);
   18e8a:	2303      	movs	r3, #3
   18e8c:	930d      	str	r3, [sp, #52]	; 0x34
   18e8e:	aa0d      	add	r2, sp, #52	; 0x34
   18e90:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18e94:	e73d      	b.n	18d12 <smp_pairing_random+0x92>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   18e96:	2502      	movs	r5, #2
   18e98:	e7b1      	b.n	18dfe <smp_pairing_random+0x17e>
				     BT_CONN_OOB_BOTH_PEERS :
   18e9a:	2b00      	cmp	r3, #0
   18e9c:	bf18      	it	ne
   18e9e:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
   18ea0:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
   18ea2:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
			smp->oobd_remote = NULL;
   18ea6:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   18eaa:	4630      	mov	r0, r6
   18eac:	210c      	movs	r1, #12
   18eae:	f016 ff75 	bl	2fd9c <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   18eb2:	683b      	ldr	r3, [r7, #0]
   18eb4:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   18eb8:	68db      	ldr	r3, [r3, #12]
   18eba:	a90a      	add	r1, sp, #40	; 0x28
   18ebc:	4798      	blx	r3
			return 0;
   18ebe:	e79e      	b.n	18dfe <smp_pairing_random+0x17e>
   18ec0:	00036279 	.word	0x00036279
   18ec4:	00032484 	.word	0x00032484
   18ec8:	20001f44 	.word	0x20001f44
   18ecc:	000f4240 	.word	0x000f4240
   18ed0:	20001e98 	.word	0x20001e98
   18ed4:	0003628e 	.word	0x0003628e
   18ed8:	000325f1 	.word	0x000325f1
   18edc:	000361c5 	.word	0x000361c5

00018ee0 <bt_smp_sign_verify>:
{
   18ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
   18ee2:	b085      	sub	sp, #20
	return buf->data + buf->len;
   18ee4:	898b      	ldrh	r3, [r1, #12]
   18ee6:	460c      	mov	r4, r1
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   18ee8:	6889      	ldr	r1, [r1, #8]
{
   18eea:	4605      	mov	r5, r0
   18eec:	af00      	add	r7, sp, #0
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   18eee:	3b0c      	subs	r3, #12
   18ef0:	4419      	add	r1, r3
   18ef2:	220c      	movs	r2, #12
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
   18ef4:	f105 0688 	add.w	r6, r5, #136	; 0x88
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   18ef8:	1d38      	adds	r0, r7, #4
   18efa:	f015 f896 	bl	2e02a <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
   18efe:	7a29      	ldrb	r1, [r5, #8]
   18f00:	4632      	mov	r2, r6
   18f02:	2010      	movs	r0, #16
   18f04:	f000 ff3a 	bl	19d7c <bt_keys_find>
	if (!keys) {
   18f08:	4605      	mov	r5, r0
   18f0a:	b9c0      	cbnz	r0, 18f3e <bt_smp_sign_verify+0x5e>
		BT_ERR("Unable to find Remote CSRK for %s",
   18f0c:	4630      	mov	r0, r6
   18f0e:	f7f8 fa67 	bl	113e0 <bt_addr_le_str_real>
   18f12:	466c      	mov	r4, sp
   18f14:	4b31      	ldr	r3, [pc, #196]	; (18fdc <bt_smp_sign_verify+0xfc>)
   18f16:	b088      	sub	sp, #32
   18f18:	466a      	mov	r2, sp
   18f1a:	e9c2 3004 	strd	r3, r0, [r2, #16]
   18f1e:	2302      	movs	r3, #2
   18f20:	7613      	strb	r3, [r2, #24]
   18f22:	4b2f      	ldr	r3, [pc, #188]	; (18fe0 <bt_smp_sign_verify+0x100>)
   18f24:	482f      	ldr	r0, [pc, #188]	; (18fe4 <bt_smp_sign_verify+0x104>)
   18f26:	f842 3f0c 	str.w	r3, [r2, #12]!
   18f2a:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   18f2e:	f016 ff27 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
		return -ENOENT;
   18f32:	f06f 0001 	mvn.w	r0, #1
   18f36:	46a5      	mov	sp, r4
}
   18f38:	3714      	adds	r7, #20
   18f3a:	46bd      	mov	sp, r7
   18f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
   18f3e:	6e43      	ldr	r3, [r0, #100]	; 0x64
   18f40:	603b      	str	r3, [r7, #0]
   18f42:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
   18f44:	68a0      	ldr	r0, [r4, #8]
   18f46:	3b0c      	subs	r3, #12
   18f48:	2204      	movs	r2, #4
   18f4a:	4639      	mov	r1, r7
   18f4c:	4418      	add	r0, r3
   18f4e:	f015 f86c 	bl	2e02a <memcpy>
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
   18f52:	89a2      	ldrh	r2, [r4, #12]
   18f54:	68a1      	ldr	r1, [r4, #8]
   18f56:	3a0c      	subs	r2, #12
   18f58:	b292      	uxth	r2, r2
   18f5a:	f105 0054 	add.w	r0, r5, #84	; 0x54
   18f5e:	f7ff f8f5 	bl	1814c <smp_sign_buf>
	if (err) {
   18f62:	b1b0      	cbz	r0, 18f92 <bt_smp_sign_verify+0xb2>
		BT_ERR("Unable to create signature for %s",
   18f64:	4630      	mov	r0, r6
   18f66:	f7f8 fa3b 	bl	113e0 <bt_addr_le_str_real>
   18f6a:	466c      	mov	r4, sp
   18f6c:	4b1e      	ldr	r3, [pc, #120]	; (18fe8 <bt_smp_sign_verify+0x108>)
   18f6e:	b088      	sub	sp, #32
   18f70:	466a      	mov	r2, sp
   18f72:	e9c2 3004 	strd	r3, r0, [r2, #16]
   18f76:	2302      	movs	r3, #2
   18f78:	7613      	strb	r3, [r2, #24]
   18f7a:	4b19      	ldr	r3, [pc, #100]	; (18fe0 <bt_smp_sign_verify+0x100>)
   18f7c:	4819      	ldr	r0, [pc, #100]	; (18fe4 <bt_smp_sign_verify+0x104>)
   18f7e:	f842 3f0c 	str.w	r3, [r2, #12]!
   18f82:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   18f86:	f016 fefb 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
		return -EIO;
   18f8a:	f06f 0004 	mvn.w	r0, #4
   18f8e:	46a5      	mov	sp, r4
   18f90:	e7d2      	b.n	18f38 <bt_smp_sign_verify+0x58>
   18f92:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
   18f94:	68a1      	ldr	r1, [r4, #8]
   18f96:	3b0c      	subs	r3, #12
   18f98:	220c      	movs	r2, #12
   18f9a:	4419      	add	r1, r3
   18f9c:	1d38      	adds	r0, r7, #4
   18f9e:	f015 f833 	bl	2e008 <memcmp>
   18fa2:	b1b0      	cbz	r0, 18fd2 <bt_smp_sign_verify+0xf2>
		BT_ERR("Unable to verify signature for %s",
   18fa4:	4630      	mov	r0, r6
   18fa6:	f7f8 fa1b 	bl	113e0 <bt_addr_le_str_real>
   18faa:	466c      	mov	r4, sp
   18fac:	4b0f      	ldr	r3, [pc, #60]	; (18fec <bt_smp_sign_verify+0x10c>)
   18fae:	b088      	sub	sp, #32
   18fb0:	466a      	mov	r2, sp
   18fb2:	e9c2 3004 	strd	r3, r0, [r2, #16]
   18fb6:	2302      	movs	r3, #2
   18fb8:	7613      	strb	r3, [r2, #24]
   18fba:	4b09      	ldr	r3, [pc, #36]	; (18fe0 <bt_smp_sign_verify+0x100>)
   18fbc:	4809      	ldr	r0, [pc, #36]	; (18fe4 <bt_smp_sign_verify+0x104>)
   18fbe:	f842 3f0c 	str.w	r3, [r2, #12]!
   18fc2:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   18fc6:	f016 fedb 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
		return -EBADMSG;
   18fca:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   18fce:	46a5      	mov	sp, r4
   18fd0:	e7b2      	b.n	18f38 <bt_smp_sign_verify+0x58>
	keys->remote_csrk.cnt++;
   18fd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   18fd4:	3301      	adds	r3, #1
   18fd6:	666b      	str	r3, [r5, #100]	; 0x64
	return 0;
   18fd8:	e7ae      	b.n	18f38 <bt_smp_sign_verify+0x58>
   18fda:	bf00      	nop
   18fdc:	000362a7 	.word	0x000362a7
   18fe0:	01000003 	.word	0x01000003
   18fe4:	00032484 	.word	0x00032484
   18fe8:	000362c9 	.word	0x000362c9
   18fec:	000362eb 	.word	0x000362eb

00018ff0 <bt_smp_sign>:
{
   18ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
   18ff2:	b083      	sub	sp, #12
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
   18ff4:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   18ff8:	af00      	add	r7, sp, #0
   18ffa:	460d      	mov	r5, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
   18ffc:	4632      	mov	r2, r6
   18ffe:	7a01      	ldrb	r1, [r0, #8]
   19000:	2008      	movs	r0, #8
   19002:	f000 febb 	bl	19d7c <bt_keys_find>
	if (!keys) {
   19006:	4604      	mov	r4, r0
   19008:	b9c0      	cbnz	r0, 1903c <bt_smp_sign+0x4c>
		BT_ERR("Unable to find local CSRK for %s",
   1900a:	4630      	mov	r0, r6
   1900c:	f7f8 f9e8 	bl	113e0 <bt_addr_le_str_real>
   19010:	466c      	mov	r4, sp
   19012:	4b24      	ldr	r3, [pc, #144]	; (190a4 <bt_smp_sign+0xb4>)
   19014:	b088      	sub	sp, #32
   19016:	466a      	mov	r2, sp
   19018:	e9c2 3004 	strd	r3, r0, [r2, #16]
   1901c:	2302      	movs	r3, #2
   1901e:	7613      	strb	r3, [r2, #24]
   19020:	4b21      	ldr	r3, [pc, #132]	; (190a8 <bt_smp_sign+0xb8>)
   19022:	4822      	ldr	r0, [pc, #136]	; (190ac <bt_smp_sign+0xbc>)
   19024:	f842 3f0c 	str.w	r3, [r2, #12]!
   19028:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1902c:	f016 fea8 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
		return -ENOENT;
   19030:	f06f 0001 	mvn.w	r0, #1
   19034:	46a5      	mov	sp, r4
}
   19036:	370c      	adds	r7, #12
   19038:	46bd      	mov	sp, r7
   1903a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   1903c:	210c      	movs	r1, #12
   1903e:	f105 0008 	add.w	r0, r5, #8
   19042:	f017 fd17 	bl	30a74 <net_buf_simple_add>
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
   19046:	6d23      	ldr	r3, [r4, #80]	; 0x50
   19048:	607b      	str	r3, [r7, #4]
	return buf->data + buf->len;
   1904a:	89ab      	ldrh	r3, [r5, #12]
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
   1904c:	68a8      	ldr	r0, [r5, #8]
   1904e:	2204      	movs	r2, #4
   19050:	3b0c      	subs	r3, #12
   19052:	18b9      	adds	r1, r7, r2
   19054:	4418      	add	r0, r3
   19056:	f014 ffe8 	bl	2e02a <memcpy>
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
   1905a:	89aa      	ldrh	r2, [r5, #12]
   1905c:	68a9      	ldr	r1, [r5, #8]
   1905e:	3a0c      	subs	r2, #12
   19060:	b292      	uxth	r2, r2
   19062:	f104 0040 	add.w	r0, r4, #64	; 0x40
   19066:	f7ff f871 	bl	1814c <smp_sign_buf>
	if (err) {
   1906a:	b1b0      	cbz	r0, 1909a <bt_smp_sign+0xaa>
		BT_ERR("Unable to create signature for %s",
   1906c:	4630      	mov	r0, r6
   1906e:	f7f8 f9b7 	bl	113e0 <bt_addr_le_str_real>
   19072:	466c      	mov	r4, sp
   19074:	4b0e      	ldr	r3, [pc, #56]	; (190b0 <bt_smp_sign+0xc0>)
   19076:	b088      	sub	sp, #32
   19078:	466a      	mov	r2, sp
   1907a:	e9c2 3004 	strd	r3, r0, [r2, #16]
   1907e:	2302      	movs	r3, #2
   19080:	7613      	strb	r3, [r2, #24]
   19082:	4b09      	ldr	r3, [pc, #36]	; (190a8 <bt_smp_sign+0xb8>)
   19084:	4809      	ldr	r0, [pc, #36]	; (190ac <bt_smp_sign+0xbc>)
   19086:	f842 3f0c 	str.w	r3, [r2, #12]!
   1908a:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1908e:	f016 fe77 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
		return -EIO;
   19092:	f06f 0004 	mvn.w	r0, #4
   19096:	46a5      	mov	sp, r4
   19098:	e7cd      	b.n	19036 <bt_smp_sign+0x46>
	keys->local_csrk.cnt++;
   1909a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1909c:	3301      	adds	r3, #1
   1909e:	6523      	str	r3, [r4, #80]	; 0x50
	return 0;
   190a0:	e7c9      	b.n	19036 <bt_smp_sign+0x46>
   190a2:	bf00      	nop
   190a4:	0003630d 	.word	0x0003630d
   190a8:	01000003 	.word	0x01000003
   190ac:	00032484 	.word	0x00032484
   190b0:	000362c9 	.word	0x000362c9

000190b4 <bt_smp_start_security>:
{
   190b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   190b8:	78c4      	ldrb	r4, [r0, #3]
   190ba:	2c01      	cmp	r4, #1
{
   190bc:	4605      	mov	r5, r0
	switch (conn->role) {
   190be:	d005      	beq.n	190cc <bt_smp_start_security+0x18>
		return -EINVAL;
   190c0:	f06f 0415 	mvn.w	r4, #21
}
   190c4:	4620      	mov	r0, r4
   190c6:	b003      	add	sp, #12
   190c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   190cc:	f016 fe5b 	bl	2fd86 <smp_chan_get>
	if (!smp) {
   190d0:	4606      	mov	r6, r0
   190d2:	2800      	cmp	r0, #0
   190d4:	f000 80a4 	beq.w	19220 <bt_smp_start_security+0x16c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   190d8:	1d07      	adds	r7, r0, #4
   190da:	2104      	movs	r1, #4
   190dc:	4638      	mov	r0, r7
   190de:	f016 fd6a 	bl	2fbb6 <atomic_test_bit>
   190e2:	2800      	cmp	r0, #0
   190e4:	f040 809f 	bne.w	19226 <bt_smp_start_security+0x172>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   190e8:	2103      	movs	r1, #3
   190ea:	4638      	mov	r0, r7
   190ec:	f016 fd63 	bl	2fbb6 <atomic_test_bit>
   190f0:	b110      	cbz	r0, 190f8 <bt_smp_start_security+0x44>
		return -EBUSY;
   190f2:	f06f 040f 	mvn.w	r4, #15
   190f6:	e7e5      	b.n	190c4 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   190f8:	4621      	mov	r1, r4
   190fa:	4638      	mov	r0, r7
   190fc:	f016 fd5b 	bl	2fbb6 <atomic_test_bit>
   19100:	2800      	cmp	r0, #0
   19102:	d1f6      	bne.n	190f2 <bt_smp_start_security+0x3e>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   19104:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
   19106:	2b03      	cmp	r3, #3
   19108:	d03d      	beq.n	19186 <bt_smp_start_security+0xd2>
   1910a:	d82c      	bhi.n	19166 <bt_smp_start_security+0xb2>
   1910c:	3b01      	subs	r3, #1
   1910e:	2b01      	cmp	r3, #1
   19110:	d946      	bls.n	191a0 <bt_smp_start_security+0xec>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   19112:	210a      	movs	r1, #10
   19114:	1d28      	adds	r0, r5, #4
   19116:	f016 fd4e 	bl	2fbb6 <atomic_test_bit>
   1911a:	2800      	cmp	r0, #0
   1911c:	d1d0      	bne.n	190c0 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   1911e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   19122:	b983      	cbnz	r3, 19146 <bt_smp_start_security+0x92>
						     conn->id, &conn->le.dst);
   19124:	f105 0488 	add.w	r4, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   19128:	7a29      	ldrb	r1, [r5, #8]
   1912a:	4622      	mov	r2, r4
   1912c:	2020      	movs	r0, #32
   1912e:	f000 fe25 	bl	19d7c <bt_keys_find>
   19132:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   19136:	b930      	cbnz	r0, 19146 <bt_smp_start_security+0x92>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   19138:	7a29      	ldrb	r1, [r5, #8]
   1913a:	4622      	mov	r2, r4
   1913c:	2004      	movs	r0, #4
   1913e:	f000 fe1d 	bl	19d7c <bt_keys_find>
   19142:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   19146:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1914a:	2b00      	cmp	r3, #0
   1914c:	d0b8      	beq.n	190c0 <bt_smp_start_security+0xc>
   1914e:	89da      	ldrh	r2, [r3, #14]
   19150:	f002 0224 	and.w	r2, r2, #36	; 0x24
   19154:	2a00      	cmp	r2, #0
   19156:	d0b3      	beq.n	190c0 <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   19158:	7aaa      	ldrb	r2, [r5, #10]
   1915a:	2a02      	cmp	r2, #2
   1915c:	d920      	bls.n	191a0 <bt_smp_start_security+0xec>
   1915e:	7b5b      	ldrb	r3, [r3, #13]
   19160:	07db      	lsls	r3, r3, #31
   19162:	d5ad      	bpl.n	190c0 <bt_smp_start_security+0xc>
   19164:	e01c      	b.n	191a0 <bt_smp_start_security+0xec>
	switch (conn->required_sec_level) {
   19166:	2b04      	cmp	r3, #4
   19168:	d1d3      	bne.n	19112 <bt_smp_start_security+0x5e>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1916a:	f7fe ff8b 	bl	18084 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1916e:	2803      	cmp	r0, #3
   19170:	d104      	bne.n	1917c <bt_smp_start_security+0xc8>
   19172:	4b2e      	ldr	r3, [pc, #184]	; (1922c <bt_smp_start_security+0x178>)
   19174:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   19176:	b1f3      	cbz	r3, 191b6 <bt_smp_start_security+0x102>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   19178:	68dc      	ldr	r4, [r3, #12]
   1917a:	b10c      	cbz	r4, 19180 <bt_smp_start_security+0xcc>
   1917c:	4b2c      	ldr	r3, [pc, #176]	; (19230 <bt_smp_start_security+0x17c>)
   1917e:	781c      	ldrb	r4, [r3, #0]
   19180:	f004 0401 	and.w	r4, r4, #1
   19184:	e00a      	b.n	1919c <bt_smp_start_security+0xe8>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   19186:	f7fe ff7d 	bl	18084 <get_io_capa>
   1918a:	2803      	cmp	r0, #3
   1918c:	d106      	bne.n	1919c <bt_smp_start_security+0xe8>
		       (bt_auth && bt_auth->oob_data_request);
   1918e:	4b27      	ldr	r3, [pc, #156]	; (1922c <bt_smp_start_security+0x178>)
   19190:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   19192:	b11c      	cbz	r4, 1919c <bt_smp_start_security+0xe8>
		       (bt_auth && bt_auth->oob_data_request);
   19194:	68e4      	ldr	r4, [r4, #12]
   19196:	3c00      	subs	r4, #0
   19198:	bf18      	it	ne
   1919a:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   1919c:	2c00      	cmp	r4, #0
   1919e:	d0b8      	beq.n	19112 <bt_smp_start_security+0x5e>
	if (!conn->le.keys) {
   191a0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   191a4:	b14b      	cbz	r3, 191ba <bt_smp_start_security+0x106>
	if (smp_init(smp) != 0) {
   191a6:	4630      	mov	r0, r6
   191a8:	f7ff f84a 	bl	18240 <smp_init>
   191ac:	4604      	mov	r4, r0
   191ae:	b180      	cbz	r0, 191d2 <bt_smp_start_security+0x11e>
		return -ENOBUFS;
   191b0:	f06f 0468 	mvn.w	r4, #104	; 0x68
   191b4:	e786      	b.n	190c4 <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   191b6:	2400      	movs	r4, #0
   191b8:	e7e2      	b.n	19180 <bt_smp_start_security+0xcc>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   191ba:	7a28      	ldrb	r0, [r5, #8]
   191bc:	f105 0188 	add.w	r1, r5, #136	; 0x88
   191c0:	f000 fd66 	bl	19c90 <bt_keys_get_addr>
   191c4:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   191c8:	2800      	cmp	r0, #0
   191ca:	d1ec      	bne.n	191a6 <bt_smp_start_security+0xf2>
			return -ENOMEM;
   191cc:	f06f 040b 	mvn.w	r4, #11
   191d0:	e778      	b.n	190c4 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   191d2:	210b      	movs	r1, #11
   191d4:	4630      	mov	r0, r6
   191d6:	f016 fdf5 	bl	2fdc4 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   191da:	4680      	mov	r8, r0
   191dc:	2800      	cmp	r0, #0
   191de:	d0e7      	beq.n	191b0 <bt_smp_start_security+0xfc>
	return net_buf_simple_add(&buf->b, len);
   191e0:	2101      	movs	r1, #1
   191e2:	3008      	adds	r0, #8
   191e4:	f017 fc46 	bl	30a74 <net_buf_simple_add>
   191e8:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   191ea:	2009      	movs	r0, #9
   191ec:	f7fe ff7e 	bl	180ec <get_auth.constprop.0>
   191f0:	4623      	mov	r3, r4
   191f2:	f889 0000 	strb.w	r0, [r9]
   191f6:	4642      	mov	r2, r8
   191f8:	9400      	str	r4, [sp, #0]
   191fa:	2106      	movs	r1, #6
   191fc:	4628      	mov	r0, r5
   191fe:	f015 fd17 	bl	2ec30 <bt_l2cap_send_cb>
	if (err) {
   19202:	4604      	mov	r4, r0
   19204:	b118      	cbz	r0, 1920e <bt_smp_start_security+0x15a>
		net_buf_unref(req_buf);
   19206:	4640      	mov	r0, r8
   19208:	f00e fd4c 	bl	27ca4 <net_buf_unref>
		return err;
   1920c:	e75a      	b.n	190c4 <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1920e:	4638      	mov	r0, r7
   19210:	210f      	movs	r1, #15
   19212:	f016 fdc3 	bl	2fd9c <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   19216:	2101      	movs	r1, #1
   19218:	4630      	mov	r0, r6
   1921a:	f016 fdbf 	bl	2fd9c <atomic_set_bit>
	return 0;
   1921e:	e751      	b.n	190c4 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   19220:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   19224:	e74e      	b.n	190c4 <bt_smp_start_security+0x10>
		return -EIO;
   19226:	f06f 0404 	mvn.w	r4, #4
   1922a:	e74b      	b.n	190c4 <bt_smp_start_security+0x10>
   1922c:	20001e98 	.word	0x20001e98
   19230:	2000341d 	.word	0x2000341d

00019234 <smp_pairing_complete>:
{
   19234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   19236:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
{
   1923a:	4606      	mov	r6, r0
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1923c:	1d05      	adds	r5, r0, #4
	if (!status) {
   1923e:	b9f1      	cbnz	r1, 1927e <smp_pairing_complete+0x4a>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   19240:	210d      	movs	r1, #13
   19242:	4628      	mov	r0, r5
   19244:	f016 fcb7 	bl	2fbb6 <atomic_test_bit>
		if (bond_flag) {
   19248:	4607      	mov	r7, r0
   1924a:	b118      	cbz	r0, 19254 <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   1924c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   19250:	f000 ff0a 	bl	1a068 <bt_keys_store>
	return list->head;
   19254:	4b31      	ldr	r3, [pc, #196]	; (1931c <smp_pairing_complete+0xe8>)
   19256:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   19258:	2b00      	cmp	r3, #0
   1925a:	d051      	beq.n	19300 <smp_pairing_complete+0xcc>
	return node->next;
   1925c:	f853 590c 	ldr.w	r5, [r3], #-12
   19260:	b105      	cbz	r5, 19264 <smp_pairing_complete+0x30>
   19262:	3d0c      	subs	r5, #12
			if (listener->pairing_complete) {
   19264:	681b      	ldr	r3, [r3, #0]
   19266:	b113      	cbz	r3, 1926e <smp_pairing_complete+0x3a>
				listener->pairing_complete(conn, bond_flag);
   19268:	4639      	mov	r1, r7
   1926a:	4620      	mov	r0, r4
   1926c:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1926e:	2d00      	cmp	r5, #0
   19270:	d046      	beq.n	19300 <smp_pairing_complete+0xcc>
   19272:	68ea      	ldr	r2, [r5, #12]
   19274:	b102      	cbz	r2, 19278 <smp_pairing_complete+0x44>
   19276:	3a0c      	subs	r2, #12
{
   19278:	462b      	mov	r3, r5
   1927a:	4615      	mov	r5, r2
   1927c:	e7f2      	b.n	19264 <smp_pairing_complete+0x30>
	switch (smp_err) {
   1927e:	3901      	subs	r1, #1
   19280:	b2c9      	uxtb	r1, r1
   19282:	290e      	cmp	r1, #14
   19284:	bf9c      	itt	ls
   19286:	4b26      	ldrls	r3, [pc, #152]	; (19320 <smp_pairing_complete+0xec>)
   19288:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   1928a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
   1928e:	bf88      	it	hi
   19290:	2709      	movhi	r7, #9
		if (conn->le.keys &&
   19292:	b143      	cbz	r3, 192a6 <smp_pairing_complete+0x72>
   19294:	7b1b      	ldrb	r3, [r3, #12]
   19296:	bb63      	cbnz	r3, 192f2 <smp_pairing_complete+0xbe>
			bt_keys_clear(conn->le.keys);
   19298:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1929c:	f000 fdcc 	bl	19e38 <bt_keys_clear>
			conn->le.keys = NULL;
   192a0:	2300      	movs	r3, #0
   192a2:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   192a6:	2102      	movs	r1, #2
   192a8:	4628      	mov	r0, r5
   192aa:	f016 fc84 	bl	2fbb6 <atomic_test_bit>
   192ae:	b940      	cbnz	r0, 192c2 <smp_pairing_complete+0x8e>
	switch (err) {
   192b0:	2f07      	cmp	r7, #7
   192b2:	bf96      	itet	ls
   192b4:	4b1b      	ldrls	r3, [pc, #108]	; (19324 <smp_pairing_complete+0xf0>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   192b6:	211f      	movhi	r1, #31
   192b8:	5dd9      	ldrbls	r1, [r3, r7]
			bt_conn_security_changed(conn,
   192ba:	463a      	mov	r2, r7
   192bc:	4620      	mov	r0, r4
   192be:	f7fb fe31 	bl	14f24 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   192c2:	2103      	movs	r1, #3
   192c4:	4628      	mov	r0, r5
   192c6:	f016 fc76 	bl	2fbb6 <atomic_test_bit>
   192ca:	b1c8      	cbz	r0, 19300 <smp_pairing_complete+0xcc>
	return list->head;
   192cc:	4b13      	ldr	r3, [pc, #76]	; (1931c <smp_pairing_complete+0xe8>)
   192ce:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   192d0:	b1b3      	cbz	r3, 19300 <smp_pairing_complete+0xcc>
	return node->next;
   192d2:	f853 590c 	ldr.w	r5, [r3], #-12
   192d6:	b105      	cbz	r5, 192da <smp_pairing_complete+0xa6>
   192d8:	3d0c      	subs	r5, #12
				if (listener->pairing_failed) {
   192da:	685b      	ldr	r3, [r3, #4]
   192dc:	b113      	cbz	r3, 192e4 <smp_pairing_complete+0xb0>
					listener->pairing_failed(conn, security_err);
   192de:	4639      	mov	r1, r7
   192e0:	4620      	mov	r0, r4
   192e2:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   192e4:	b165      	cbz	r5, 19300 <smp_pairing_complete+0xcc>
   192e6:	68ea      	ldr	r2, [r5, #12]
   192e8:	b102      	cbz	r2, 192ec <smp_pairing_complete+0xb8>
   192ea:	3a0c      	subs	r2, #12
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   192ec:	462b      	mov	r3, r5
   192ee:	4615      	mov	r5, r2
   192f0:	e7f3      	b.n	192da <smp_pairing_complete+0xa6>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   192f2:	2102      	movs	r1, #2
   192f4:	4628      	mov	r0, r5
   192f6:	f016 fc5e 	bl	2fbb6 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   192fa:	2800      	cmp	r0, #0
   192fc:	d1cc      	bne.n	19298 <smp_pairing_complete+0x64>
   192fe:	e7d2      	b.n	192a6 <smp_pairing_complete+0x72>
	smp_reset(smp);
   19300:	4630      	mov	r0, r6
   19302:	f016 fdf3 	bl	2feec <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   19306:	7a62      	ldrb	r2, [r4, #9]
   19308:	7aa3      	ldrb	r3, [r4, #10]
   1930a:	429a      	cmp	r2, r3
   1930c:	d004      	beq.n	19318 <smp_pairing_complete+0xe4>
		bt_smp_start_security(conn);
   1930e:	4620      	mov	r0, r4
}
   19310:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   19314:	f7ff bece 	b.w	190b4 <bt_smp_start_security>
}
   19318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1931a:	bf00      	nop
   1931c:	20001e9c 	.word	0x20001e9c
   19320:	000364f9 	.word	0x000364f9
   19324:	00036511 	.word	0x00036511

00019328 <bt_smp_recv>:
{
   19328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1932c:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   1932e:	898b      	ldrh	r3, [r1, #12]
{
   19330:	af00      	add	r7, sp, #0
   19332:	4680      	mov	r8, r0
   19334:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   19336:	b97b      	cbnz	r3, 19358 <bt_smp_recv+0x30>
		BT_ERR("Too small SMP PDU received");
   19338:	4b3c      	ldr	r3, [pc, #240]	; (1942c <bt_smp_recv+0x104>)
   1933a:	613b      	str	r3, [r7, #16]
   1933c:	2302      	movs	r3, #2
   1933e:	60fb      	str	r3, [r7, #12]
   19340:	f107 020c 	add.w	r2, r7, #12
   19344:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   19348:	4839      	ldr	r0, [pc, #228]	; (19430 <bt_smp_recv+0x108>)
   1934a:	f016 fd19 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
}
   1934e:	2000      	movs	r0, #0
   19350:	3718      	adds	r7, #24
   19352:	46bd      	mov	sp, r7
   19354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   19358:	2101      	movs	r1, #1
   1935a:	f105 0008 	add.w	r0, r5, #8
   1935e:	f017 fbb0 	bl	30ac2 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   19362:	2104      	movs	r1, #4
   19364:	4606      	mov	r6, r0
   19366:	f1a8 00ec 	sub.w	r0, r8, #236	; 0xec
   1936a:	f016 fc24 	bl	2fbb6 <atomic_test_bit>
   1936e:	f1a8 04f0 	sub.w	r4, r8, #240	; 0xf0
   19372:	7831      	ldrb	r1, [r6, #0]
   19374:	b148      	cbz	r0, 1938a <bt_smp_recv+0x62>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   19376:	4b2f      	ldr	r3, [pc, #188]	; (19434 <bt_smp_recv+0x10c>)
   19378:	e9c7 3104 	strd	r3, r1, [r7, #16]
   1937c:	2303      	movs	r3, #3
   1937e:	60fb      	str	r3, [r7, #12]
   19380:	f107 020c 	add.w	r2, r7, #12
   19384:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19388:	e7de      	b.n	19348 <bt_smp_recv+0x20>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1938a:	290e      	cmp	r1, #14
   1938c:	d901      	bls.n	19392 <bt_smp_recv+0x6a>
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1938e:	4b2a      	ldr	r3, [pc, #168]	; (19438 <bt_smp_recv+0x110>)
   19390:	e7f2      	b.n	19378 <bt_smp_recv+0x50>
	if (!handlers[hdr->code].func) {
   19392:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1943c <bt_smp_recv+0x114>
   19396:	f858 3031 	ldr.w	r3, [r8, r1, lsl #3]
   1939a:	b983      	cbnz	r3, 193be <bt_smp_recv+0x96>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   1939c:	4b28      	ldr	r3, [pc, #160]	; (19440 <bt_smp_recv+0x118>)
   1939e:	4824      	ldr	r0, [pc, #144]	; (19430 <bt_smp_recv+0x108>)
   193a0:	e9c7 3104 	strd	r3, r1, [r7, #16]
   193a4:	f107 020c 	add.w	r2, r7, #12
   193a8:	2303      	movs	r3, #3
   193aa:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   193ae:	60fb      	str	r3, [r7, #12]
   193b0:	f016 fce6 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   193b4:	2107      	movs	r1, #7
		smp_error(smp, err);
   193b6:	4620      	mov	r0, r4
   193b8:	f016 ff16 	bl	301e8 <smp_error>
   193bc:	e7c7      	b.n	1934e <bt_smp_recv+0x26>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   193be:	4620      	mov	r0, r4
   193c0:	f016 fd7c 	bl	2febc <atomic_test_and_clear_bit>
   193c4:	7833      	ldrb	r3, [r6, #0]
   193c6:	b980      	cbnz	r0, 193ea <bt_smp_recv+0xc2>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   193c8:	4a1e      	ldr	r2, [pc, #120]	; (19444 <bt_smp_recv+0x11c>)
   193ca:	4819      	ldr	r0, [pc, #100]	; (19430 <bt_smp_recv+0x108>)
   193cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
   193d0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   193d4:	2303      	movs	r3, #3
   193d6:	f107 020c 	add.w	r2, r7, #12
   193da:	60fb      	str	r3, [r7, #12]
   193dc:	f016 fcd0 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   193e0:	7833      	ldrb	r3, [r6, #0]
   193e2:	2b05      	cmp	r3, #5
   193e4:	d0b3      	beq.n	1934e <bt_smp_recv+0x26>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   193e6:	2108      	movs	r1, #8
   193e8:	e7e5      	b.n	193b6 <bt_smp_recv+0x8e>
	if (buf->len != handlers[hdr->code].expect_len) {
   193ea:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   193ee:	89a9      	ldrh	r1, [r5, #12]
   193f0:	7912      	ldrb	r2, [r2, #4]
   193f2:	428a      	cmp	r2, r1
   193f4:	d011      	beq.n	1941a <bt_smp_recv+0xf2>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   193f6:	466d      	mov	r5, sp
   193f8:	b088      	sub	sp, #32
   193fa:	466a      	mov	r2, sp
   193fc:	4812      	ldr	r0, [pc, #72]	; (19448 <bt_smp_recv+0x120>)
   193fe:	6193      	str	r3, [r2, #24]
   19400:	2304      	movs	r3, #4
   19402:	e9c2 0104 	strd	r0, r1, [r2, #16]
   19406:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1940a:	f842 3f0c 	str.w	r3, [r2, #12]!
   1940e:	4808      	ldr	r0, [pc, #32]	; (19430 <bt_smp_recv+0x108>)
   19410:	f016 fcb6 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   19414:	210a      	movs	r1, #10
   19416:	46ad      	mov	sp, r5
   19418:	e7cd      	b.n	193b6 <bt_smp_recv+0x8e>
	err = handlers[hdr->code].func(smp, buf);
   1941a:	4629      	mov	r1, r5
   1941c:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
   19420:	4620      	mov	r0, r4
   19422:	4798      	blx	r3
	if (err) {
   19424:	4601      	mov	r1, r0
   19426:	2800      	cmp	r0, #0
   19428:	d091      	beq.n	1934e <bt_smp_recv+0x26>
   1942a:	e7c4      	b.n	193b6 <bt_smp_recv+0x8e>
   1942c:	0003632e 	.word	0x0003632e
   19430:	00032484 	.word	0x00032484
   19434:	00036349 	.word	0x00036349
   19438:	0003637a 	.word	0x0003637a
   1943c:	00032ee8 	.word	0x00032ee8
   19440:	0003639c 	.word	0x0003639c
   19444:	000363b6 	.word	0x000363b6
   19448:	00035d84 	.word	0x00035d84

0001944c <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   1944c:	4b0e      	ldr	r3, [pc, #56]	; (19488 <bt_smp_pkey_ready+0x3c>)
{
   1944e:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   19450:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   19452:	b918      	cbnz	r0, 1945c <bt_smp_pkey_ready+0x10>
}
   19454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19458:	f7fe be66 	b.w	18128 <bt_smp_pkey_ready.part.0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1945c:	4c0b      	ldr	r4, [pc, #44]	; (1948c <bt_smp_pkey_ready+0x40>)
	z_impl_k_sem_give(sem);
   1945e:	480c      	ldr	r0, [pc, #48]	; (19490 <bt_smp_pkey_ready+0x44>)
   19460:	f011 f914 	bl	2a68c <z_impl_k_sem_give>
   19464:	f3bf 8f5b 	dmb	ish
   19468:	6863      	ldr	r3, [r4, #4]
   1946a:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1946e:	065b      	lsls	r3, r3, #25
   19470:	d509      	bpl.n	19486 <bt_smp_pkey_ready+0x3a>
		err = smp_public_key_periph(smp);
   19472:	4620      	mov	r0, r4
   19474:	f7ff faa8 	bl	189c8 <smp_public_key_periph>
		if (err) {
   19478:	4601      	mov	r1, r0
   1947a:	b120      	cbz	r0, 19486 <bt_smp_pkey_ready+0x3a>
			smp_error(smp, err);
   1947c:	4620      	mov	r0, r4
}
   1947e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
   19482:	f016 beb1 	b.w	301e8 <smp_error>
}
   19486:	bd10      	pop	{r4, pc}
   19488:	20001f44 	.word	0x20001f44
   1948c:	20001638 	.word	0x20001638
   19490:	20000c0c 	.word	0x20000c0c

00019494 <smp_signing_info>:
{
   19494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19498:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1949a:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
{
   1949e:	af00      	add	r7, sp, #0
   194a0:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   194a2:	210d      	movs	r1, #13
   194a4:	3004      	adds	r0, #4
   194a6:	f016 fb86 	bl	2fbb6 <atomic_test_bit>
   194aa:	b330      	cbz	r0, 194fa <smp_signing_info+0x66>
					&conn->le.dst);
   194ac:	f106 0588 	add.w	r5, r6, #136	; 0x88
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
   194b0:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_signing_info *req = (void *)buf->data;
   194b2:	f8d3 8008 	ldr.w	r8, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
   194b6:	462a      	mov	r2, r5
   194b8:	2010      	movs	r0, #16
   194ba:	f016 ff62 	bl	30382 <bt_keys_get_type>
		if (!keys) {
   194be:	b9b8      	cbnz	r0, 194f0 <smp_signing_info+0x5c>
			BT_ERR("Unable to get keys for %s",
   194c0:	4628      	mov	r0, r5
   194c2:	f7f7 ff8d 	bl	113e0 <bt_addr_le_str_real>
   194c6:	466c      	mov	r4, sp
   194c8:	4b13      	ldr	r3, [pc, #76]	; (19518 <smp_signing_info+0x84>)
   194ca:	b088      	sub	sp, #32
   194cc:	466a      	mov	r2, sp
   194ce:	e9c2 3004 	strd	r3, r0, [r2, #16]
   194d2:	2302      	movs	r3, #2
   194d4:	7613      	strb	r3, [r2, #24]
   194d6:	4b11      	ldr	r3, [pc, #68]	; (1951c <smp_signing_info+0x88>)
   194d8:	4811      	ldr	r0, [pc, #68]	; (19520 <smp_signing_info+0x8c>)
   194da:	f842 3f0c 	str.w	r3, [r2, #12]!
   194de:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   194e2:	f016 fc4d 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   194e6:	2008      	movs	r0, #8
   194e8:	46a5      	mov	sp, r4
}
   194ea:	46bd      	mov	sp, r7
   194ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->remote_csrk.val, req->csrk,
   194f0:	2210      	movs	r2, #16
   194f2:	4641      	mov	r1, r8
   194f4:	3054      	adds	r0, #84	; 0x54
   194f6:	f014 fd98 	bl	2e02a <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
   194fa:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   194fe:	f023 0304 	bic.w	r3, r3, #4
   19502:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if (!smp->local_dist && !smp->remote_dist) {
   19506:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1950a:	b91d      	cbnz	r5, 19514 <smp_signing_info+0x80>
		smp_pairing_complete(smp, 0);
   1950c:	4629      	mov	r1, r5
   1950e:	4620      	mov	r0, r4
   19510:	f7ff fe90 	bl	19234 <smp_pairing_complete>
	return 0;
   19514:	2000      	movs	r0, #0
   19516:	e7e8      	b.n	194ea <smp_signing_info+0x56>
   19518:	0003617e 	.word	0x0003617e
   1951c:	01000003 	.word	0x01000003
   19520:	00032484 	.word	0x00032484

00019524 <smp_ident_addr_info>:
{
   19524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   19528:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   1952a:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1952e:	7833      	ldrb	r3, [r6, #0]
{
   19530:	af00      	add	r7, sp, #0
   19532:	4604      	mov	r4, r0
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   19534:	f105 0988 	add.w	r9, r5, #136	; 0x88
   19538:	b39b      	cbz	r3, 195a2 <smp_ident_addr_info+0x7e>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1953a:	79b3      	ldrb	r3, [r6, #6]
   1953c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19540:	2bc0      	cmp	r3, #192	; 0xc0
   19542:	d02e      	beq.n	195a2 <smp_ident_addr_info+0x7e>
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   19544:	4630      	mov	r0, r6
   19546:	f7f7 ff4b 	bl	113e0 <bt_addr_le_str_real>
   1954a:	466e      	mov	r6, sp
   1954c:	b088      	sub	sp, #32
   1954e:	466c      	mov	r4, sp
   19550:	4b52      	ldr	r3, [pc, #328]	; (1969c <smp_ident_addr_info+0x178>)
   19552:	f8df 814c 	ldr.w	r8, [pc, #332]	; 196a0 <smp_ident_addr_info+0x17c>
   19556:	4625      	mov	r5, r4
   19558:	f04f 0a02 	mov.w	sl, #2
   1955c:	e9c4 3004 	strd	r3, r0, [r4, #16]
   19560:	f884 a018 	strb.w	sl, [r4, #24]
   19564:	f845 8f0c 	str.w	r8, [r5, #12]!
   19568:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1956c:	462a      	mov	r2, r5
   1956e:	484d      	ldr	r0, [pc, #308]	; (196a4 <smp_ident_addr_info+0x180>)
   19570:	f016 fc06 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   19574:	4648      	mov	r0, r9
   19576:	46b5      	mov	sp, r6
   19578:	f7f7 ff32 	bl	113e0 <bt_addr_le_str_real>
   1957c:	4b4a      	ldr	r3, [pc, #296]	; (196a8 <smp_ident_addr_info+0x184>)
   1957e:	f884 a018 	strb.w	sl, [r4, #24]
   19582:	46a5      	mov	sp, r4
   19584:	e9c4 3004 	strd	r3, r0, [r4, #16]
   19588:	f8c4 800c 	str.w	r8, [r4, #12]
   1958c:	4845      	ldr	r0, [pc, #276]	; (196a4 <smp_ident_addr_info+0x180>)
   1958e:	462a      	mov	r2, r5
   19590:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   19594:	f016 fbf4 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
   19598:	200a      	movs	r0, #10
   1959a:	46b5      	mov	sp, r6
}
   1959c:	46bd      	mov	sp, r7
   1959e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return memcmp(a, b, sizeof(*a));
   195a2:	2207      	movs	r2, #7
   195a4:	4631      	mov	r1, r6
   195a6:	4648      	mov	r0, r9
   195a8:	f014 fd2e 	bl	2e008 <memcmp>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   195ac:	b168      	cbz	r0, 195ca <smp_ident_addr_info+0xa6>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   195ae:	7a28      	ldrb	r0, [r5, #8]
   195b0:	4631      	mov	r1, r6
   195b2:	f000 fc31 	bl	19e18 <bt_keys_find_addr>
		if (keys) {
   195b6:	4680      	mov	r8, r0
   195b8:	b138      	cbz	r0, 195ca <smp_ident_addr_info+0xa6>
			if (!update_keys_check(smp, keys)) {
   195ba:	4601      	mov	r1, r0
   195bc:	4620      	mov	r0, r4
   195be:	f016 fb03 	bl	2fbc8 <update_keys_check>
   195c2:	b318      	cbz	r0, 1960c <smp_ident_addr_info+0xe8>
			bt_keys_clear(keys);
   195c4:	4640      	mov	r0, r8
   195c6:	f000 fc37 	bl	19e38 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   195ca:	210d      	movs	r1, #13
   195cc:	1d20      	adds	r0, r4, #4
   195ce:	f016 faf2 	bl	2fbb6 <atomic_test_bit>
   195d2:	2800      	cmp	r0, #0
   195d4:	d049      	beq.n	1966a <smp_ident_addr_info+0x146>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   195d6:	7a29      	ldrb	r1, [r5, #8]
   195d8:	464a      	mov	r2, r9
   195da:	2002      	movs	r0, #2
   195dc:	f016 fed1 	bl	30382 <bt_keys_get_type>
		if (!keys) {
   195e0:	4680      	mov	r8, r0
   195e2:	b9a8      	cbnz	r0, 19610 <smp_ident_addr_info+0xec>
			BT_ERR("Unable to get keys for %s",
   195e4:	4648      	mov	r0, r9
   195e6:	f7f7 fefb 	bl	113e0 <bt_addr_le_str_real>
   195ea:	466c      	mov	r4, sp
   195ec:	4b2f      	ldr	r3, [pc, #188]	; (196ac <smp_ident_addr_info+0x188>)
   195ee:	b088      	sub	sp, #32
   195f0:	466a      	mov	r2, sp
   195f2:	e9c2 3004 	strd	r3, r0, [r2, #16]
   195f6:	2302      	movs	r3, #2
   195f8:	7613      	strb	r3, [r2, #24]
   195fa:	4b29      	ldr	r3, [pc, #164]	; (196a0 <smp_ident_addr_info+0x17c>)
   195fc:	f842 3f0c 	str.w	r3, [r2, #12]!
   19600:	4828      	ldr	r0, [pc, #160]	; (196a4 <smp_ident_addr_info+0x180>)
   19602:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   19606:	f016 fbbb 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
   1960a:	46a5      	mov	sp, r4
				return BT_SMP_ERR_UNSPECIFIED;
   1960c:	2008      	movs	r0, #8
   1960e:	e7c5      	b.n	1959c <smp_ident_addr_info+0x78>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   19610:	78eb      	ldrb	r3, [r5, #3]
   19612:	2b00      	cmp	r3, #0
   19614:	d13e      	bne.n	19694 <smp_ident_addr_info+0x170>
			dst = &conn->le.resp_addr;
   19616:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1961a:	780b      	ldrb	r3, [r1, #0]
   1961c:	2b01      	cmp	r3, #1
   1961e:	d121      	bne.n	19664 <smp_ident_addr_info+0x140>
		if (bt_addr_le_is_rpa(dst)) {
   19620:	798b      	ldrb	r3, [r1, #6]
   19622:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19626:	2b40      	cmp	r3, #64	; 0x40
   19628:	d11c      	bne.n	19664 <smp_ident_addr_info+0x140>
	memcpy(dst, src, sizeof(*dst));
   1962a:	2206      	movs	r2, #6
   1962c:	3101      	adds	r1, #1
   1962e:	f108 003a 	add.w	r0, r8, #58	; 0x3a
   19632:	f014 fcfa 	bl	2e02a <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   19636:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
   1963a:	b19b      	cbz	r3, 19664 <smp_ident_addr_info+0x140>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1963c:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   19640:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19644:	2bc0      	cmp	r3, #192	; 0xc0
   19646:	d00d      	beq.n	19664 <smp_ident_addr_info+0x140>
	memcpy(dst, src, sizeof(*dst));
   19648:	2207      	movs	r2, #7
   1964a:	4631      	mov	r1, r6
   1964c:	f108 0001 	add.w	r0, r8, #1
   19650:	f014 fceb 	bl	2e02a <memcpy>
   19654:	2207      	movs	r2, #7
   19656:	4631      	mov	r1, r6
   19658:	4648      	mov	r0, r9
   1965a:	f014 fce6 	bl	2e02a <memcpy>
				bt_conn_identity_resolved(conn);
   1965e:	4628      	mov	r0, r5
   19660:	f7fb fc32 	bl	14ec8 <bt_conn_identity_resolved>
		bt_id_add(keys);
   19664:	4640      	mov	r0, r8
   19666:	f7fa f9b5 	bl	139d4 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1966a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1966e:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   19672:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   19674:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   19678:	d503      	bpl.n	19682 <smp_ident_addr_info+0x15e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1967a:	210a      	movs	r1, #10
   1967c:	4620      	mov	r0, r4
   1967e:	f016 fb8d 	bl	2fd9c <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   19682:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   19686:	b91d      	cbnz	r5, 19690 <smp_ident_addr_info+0x16c>
		smp_pairing_complete(smp, 0);
   19688:	4629      	mov	r1, r5
   1968a:	4620      	mov	r0, r4
   1968c:	f7ff fdd2 	bl	19234 <smp_pairing_complete>
	return 0;
   19690:	2000      	movs	r0, #0
   19692:	e783      	b.n	1959c <smp_ident_addr_info+0x78>
			dst = &conn->le.init_addr;
   19694:	f105 018f 	add.w	r1, r5, #143	; 0x8f
   19698:	e7bf      	b.n	1961a <smp_ident_addr_info+0xf6>
   1969a:	bf00      	nop
   1969c:	000363d1 	.word	0x000363d1
   196a0:	01000003 	.word	0x01000003
   196a4:	00032484 	.word	0x00032484
   196a8:	000362c1 	.word	0x000362c1
   196ac:	0003617e 	.word	0x0003617e

000196b0 <smp_central_ident>:
{
   196b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   196b4:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   196b6:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
{
   196ba:	af00      	add	r7, sp, #0
   196bc:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   196be:	210d      	movs	r1, #13
   196c0:	3004      	adds	r0, #4
   196c2:	f016 fa78 	bl	2fbb6 <atomic_test_bit>
   196c6:	b360      	cbz	r0, 19722 <smp_central_ident+0x72>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   196c8:	f105 0888 	add.w	r8, r5, #136	; 0x88
   196cc:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   196ce:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   196d0:	4642      	mov	r2, r8
   196d2:	2004      	movs	r0, #4
   196d4:	f016 fe55 	bl	30382 <bt_keys_get_type>
		if (!keys) {
   196d8:	4605      	mov	r5, r0
   196da:	b9b8      	cbnz	r0, 1970c <smp_central_ident+0x5c>
			BT_ERR("Unable to get keys for %s",
   196dc:	4640      	mov	r0, r8
   196de:	f7f7 fe7f 	bl	113e0 <bt_addr_le_str_real>
   196e2:	466c      	mov	r4, sp
   196e4:	4b1b      	ldr	r3, [pc, #108]	; (19754 <smp_central_ident+0xa4>)
   196e6:	b088      	sub	sp, #32
   196e8:	466a      	mov	r2, sp
   196ea:	e9c2 3004 	strd	r3, r0, [r2, #16]
   196ee:	2302      	movs	r3, #2
   196f0:	7613      	strb	r3, [r2, #24]
   196f2:	4b19      	ldr	r3, [pc, #100]	; (19758 <smp_central_ident+0xa8>)
   196f4:	4819      	ldr	r0, [pc, #100]	; (1975c <smp_central_ident+0xac>)
   196f6:	f842 3f0c 	str.w	r3, [r2, #12]!
   196fa:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   196fe:	f016 fb3f 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   19702:	2008      	movs	r0, #8
   19704:	46a5      	mov	sp, r4
}
   19706:	46bd      	mov	sp, r7
   19708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   1970c:	2202      	movs	r2, #2
   1970e:	4631      	mov	r1, r6
   19710:	3018      	adds	r0, #24
   19712:	f014 fc8a 	bl	2e02a <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   19716:	2208      	movs	r2, #8
   19718:	1cb1      	adds	r1, r6, #2
   1971a:	f105 0010 	add.w	r0, r5, #16
   1971e:	f014 fc84 	bl	2e02a <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   19722:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   19726:	f023 0201 	bic.w	r2, r3, #1
   1972a:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1972e:	079a      	lsls	r2, r3, #30
   19730:	d50c      	bpl.n	1974c <smp_central_ident+0x9c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   19732:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   19734:	4620      	mov	r0, r4
   19736:	f016 fb31 	bl	2fd9c <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1973a:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1973e:	b91d      	cbnz	r5, 19748 <smp_central_ident+0x98>
		smp_pairing_complete(smp, 0);
   19740:	4629      	mov	r1, r5
   19742:	4620      	mov	r0, r4
   19744:	f7ff fd76 	bl	19234 <smp_pairing_complete>
	return 0;
   19748:	2000      	movs	r0, #0
   1974a:	e7dc      	b.n	19706 <smp_central_ident+0x56>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1974c:	075b      	lsls	r3, r3, #29
   1974e:	d5f4      	bpl.n	1973a <smp_central_ident+0x8a>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   19750:	210a      	movs	r1, #10
   19752:	e7ef      	b.n	19734 <smp_central_ident+0x84>
   19754:	0003617e 	.word	0x0003617e
   19758:	01000003 	.word	0x01000003
   1975c:	00032484 	.word	0x00032484

00019760 <smp_pairing_failed>:
{
   19760:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   19762:	688d      	ldr	r5, [r1, #8]
	BT_ERR("reason 0x%x", req->reason);
   19764:	4a16      	ldr	r2, [pc, #88]	; (197c0 <smp_pairing_failed+0x60>)
   19766:	782b      	ldrb	r3, [r5, #0]
	struct bt_conn *conn = smp->chan.chan.conn;
   19768:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
{
   1976c:	b087      	sub	sp, #28
   1976e:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
   19770:	e9cd 2304 	strd	r2, r3, [sp, #16]
   19774:	4813      	ldr	r0, [pc, #76]	; (197c4 <smp_pairing_failed+0x64>)
   19776:	2303      	movs	r3, #3
   19778:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1977c:	aa03      	add	r2, sp, #12
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1977e:	1d26      	adds	r6, r4, #4
	BT_ERR("reason 0x%x", req->reason);
   19780:	9303      	str	r3, [sp, #12]
   19782:	f016 fafd 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   19786:	210a      	movs	r1, #10
   19788:	4630      	mov	r0, r6
   1978a:	f016 fb97 	bl	2febc <atomic_test_and_clear_bit>
   1978e:	b148      	cbz	r0, 197a4 <smp_pairing_failed+0x44>
		if (bt_auth && bt_auth->cancel) {
   19790:	4b0d      	ldr	r3, [pc, #52]	; (197c8 <smp_pairing_failed+0x68>)
   19792:	681b      	ldr	r3, [r3, #0]
   19794:	b96b      	cbnz	r3, 197b2 <smp_pairing_failed+0x52>
	smp_pairing_complete(smp, req->reason);
   19796:	4620      	mov	r0, r4
   19798:	7829      	ldrb	r1, [r5, #0]
   1979a:	f7ff fd4b 	bl	19234 <smp_pairing_complete>
}
   1979e:	2000      	movs	r0, #0
   197a0:	b007      	add	sp, #28
   197a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   197a4:	210b      	movs	r1, #11
   197a6:	4630      	mov	r0, r6
   197a8:	f016 fb88 	bl	2febc <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   197ac:	2800      	cmp	r0, #0
   197ae:	d1ef      	bne.n	19790 <smp_pairing_failed+0x30>
   197b0:	e7f1      	b.n	19796 <smp_pairing_failed+0x36>
		if (bt_auth && bt_auth->cancel) {
   197b2:	691b      	ldr	r3, [r3, #16]
   197b4:	2b00      	cmp	r3, #0
   197b6:	d0ee      	beq.n	19796 <smp_pairing_failed+0x36>
			bt_auth->cancel(conn);
   197b8:	4638      	mov	r0, r7
   197ba:	4798      	blx	r3
   197bc:	e7eb      	b.n	19796 <smp_pairing_failed+0x36>
   197be:	bf00      	nop
   197c0:	000363e5 	.word	0x000363e5
   197c4:	00032484 	.word	0x00032484
   197c8:	20001e98 	.word	0x20001e98

000197cc <bt_smp_encrypt_change>:
{
   197cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = chan->conn;
   197d0:	4604      	mov	r4, r0
{
   197d2:	b091      	sub	sp, #68	; 0x44
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   197d4:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
{
   197d8:	4605      	mov	r5, r0
   197da:	af00      	add	r7, sp, #0
   197dc:	4688      	mov	r8, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   197de:	4630      	mov	r0, r6
   197e0:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   197e2:	f854 99f0 	ldr.w	r9, [r4], #-240
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   197e6:	f016 fb69 	bl	2febc <atomic_test_and_clear_bit>
   197ea:	b328      	cbz	r0, 19838 <bt_smp_encrypt_change+0x6c>
	if (hci_status) {
   197ec:	f1b8 0f00 	cmp.w	r8, #0
   197f0:	d017      	beq.n	19822 <bt_smp_encrypt_change+0x56>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   197f2:	2103      	movs	r1, #3
   197f4:	4630      	mov	r0, r6
   197f6:	f016 f9de 	bl	2fbb6 <atomic_test_bit>
   197fa:	b1e8      	cbz	r0, 19838 <bt_smp_encrypt_change+0x6c>
			uint8_t smp_err = smp_err_get(
   197fc:	4640      	mov	r0, r8
   197fe:	f7f9 facb 	bl	12d98 <bt_security_err_get>
	switch (auth_err) {
   19802:	3801      	subs	r0, #1
   19804:	b2c0      	uxtb	r0, r0
   19806:	2808      	cmp	r0, #8
   19808:	bf9a      	itte	ls
   1980a:	4bb1      	ldrls	r3, [pc, #708]	; (19ad0 <bt_smp_encrypt_change+0x304>)
   1980c:	5c1d      	ldrbls	r5, [r3, r0]
			uint8_t smp_err = smp_err_get(
   1980e:	2500      	movhi	r5, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   19810:	2102      	movs	r1, #2
   19812:	4630      	mov	r0, r6
   19814:	f016 fac2 	bl	2fd9c <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   19818:	4629      	mov	r1, r5
		smp_pairing_complete(smp, 0);
   1981a:	4620      	mov	r0, r4
   1981c:	f7ff fd0a 	bl	19234 <smp_pairing_complete>
   19820:	e00a      	b.n	19838 <bt_smp_encrypt_change+0x6c>
	if (!conn->encrypt) {
   19822:	f899 300b 	ldrb.w	r3, [r9, #11]
   19826:	b13b      	cbz	r3, 19838 <bt_smp_encrypt_change+0x6c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   19828:	2103      	movs	r1, #3
   1982a:	4630      	mov	r0, r6
   1982c:	f016 f9c3 	bl	2fbb6 <atomic_test_bit>
   19830:	b930      	cbnz	r0, 19840 <bt_smp_encrypt_change+0x74>
		smp_reset(smp);
   19832:	4620      	mov	r0, r4
   19834:	f016 fb5a 	bl	2feec <smp_reset>
}
   19838:	3744      	adds	r7, #68	; 0x44
   1983a:	46bd      	mov	sp, r7
   1983c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19840:	2105      	movs	r1, #5
   19842:	4630      	mov	r0, r6
   19844:	f016 f9b7 	bl	2fbb6 <atomic_test_bit>
   19848:	b1b8      	cbz	r0, 1987a <bt_smp_encrypt_change+0xae>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1984a:	f815 3c08 	ldrb.w	r3, [r5, #-8]
   1984e:	071b      	lsls	r3, r3, #28
   19850:	d507      	bpl.n	19862 <bt_smp_encrypt_change+0x96>
   19852:	f815 3c07 	ldrb.w	r3, [r5, #-7]
   19856:	0718      	lsls	r0, r3, #28
   19858:	d503      	bpl.n	19862 <bt_smp_encrypt_change+0x96>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1985a:	2111      	movs	r1, #17
   1985c:	4630      	mov	r0, r6
   1985e:	f016 fa9d 	bl	2fd9c <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   19862:	f815 3c08 	ldrb.w	r3, [r5, #-8]
   19866:	f023 0308 	bic.w	r3, r3, #8
   1986a:	f805 3c08 	strb.w	r3, [r5, #-8]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   1986e:	f815 3c07 	ldrb.w	r3, [r5, #-7]
   19872:	f023 0308 	bic.w	r3, r3, #8
   19876:	f805 3c07 	strb.w	r3, [r5, #-7]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1987a:	f815 3c07 	ldrb.w	r3, [r5, #-7]
   1987e:	07d9      	lsls	r1, r3, #31
   19880:	d524      	bpl.n	198cc <bt_smp_encrypt_change+0x100>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   19882:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   19884:	4620      	mov	r0, r4
   19886:	f016 fa89 	bl	2fd9c <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1988a:	2102      	movs	r1, #2
   1988c:	4630      	mov	r0, r6
   1988e:	f016 fa85 	bl	2fd9c <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   19892:	f8d5 b000 	ldr.w	fp, [r5]
	struct bt_keys *keys = conn->le.keys;
   19896:	f8db a0b4 	ldr.w	sl, [fp, #180]	; 0xb4
	if (!keys) {
   1989a:	f1ba 0f00 	cmp.w	sl, #0
   1989e:	d11d      	bne.n	198dc <bt_smp_encrypt_change+0x110>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   198a0:	f10b 0088 	add.w	r0, fp, #136	; 0x88
   198a4:	f7f7 fd9c 	bl	113e0 <bt_addr_le_str_real>
   198a8:	466c      	mov	r4, sp
   198aa:	4b8a      	ldr	r3, [pc, #552]	; (19ad4 <bt_smp_encrypt_change+0x308>)
   198ac:	b088      	sub	sp, #32
   198ae:	466a      	mov	r2, sp
   198b0:	e9c2 3004 	strd	r3, r0, [r2, #16]
   198b4:	2302      	movs	r3, #2
   198b6:	7613      	strb	r3, [r2, #24]
   198b8:	4b87      	ldr	r3, [pc, #540]	; (19ad8 <bt_smp_encrypt_change+0x30c>)
   198ba:	f842 3f0c 	str.w	r3, [r2, #12]!
   198be:	4887      	ldr	r0, [pc, #540]	; (19adc <bt_smp_encrypt_change+0x310>)
   198c0:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   198c4:	f016 fa5c 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
   198c8:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   198ca:	e7b5      	b.n	19838 <bt_smp_encrypt_change+0x6c>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   198cc:	079a      	lsls	r2, r3, #30
   198ce:	d501      	bpl.n	198d4 <bt_smp_encrypt_change+0x108>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   198d0:	2108      	movs	r1, #8
   198d2:	e7d7      	b.n	19884 <bt_smp_encrypt_change+0xb8>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   198d4:	0758      	lsls	r0, r3, #29
   198d6:	d5d8      	bpl.n	1988a <bt_smp_encrypt_change+0xbe>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   198d8:	210a      	movs	r1, #10
   198da:	e7d3      	b.n	19884 <bt_smp_encrypt_change+0xb8>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   198dc:	2105      	movs	r1, #5
   198de:	f016 f96a 	bl	2fbb6 <atomic_test_bit>
   198e2:	b9c0      	cbnz	r0, 19916 <bt_smp_encrypt_change+0x14a>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   198e4:	f815 3c08 	ldrb.w	r3, [r5, #-8]
   198e8:	07d9      	lsls	r1, r3, #31
   198ea:	d514      	bpl.n	19916 <bt_smp_encrypt_change+0x14a>
	struct bt_keys *keys = conn->le.keys;
   198ec:	682b      	ldr	r3, [r5, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   198ee:	211a      	movs	r1, #26
   198f0:	f107 0020 	add.w	r0, r7, #32
	struct bt_keys *keys = conn->le.keys;
   198f4:	f8d3 80b4 	ldr.w	r8, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
   198f8:	f003 fb74 	bl	1cfe4 <bt_rand>
   198fc:	6078      	str	r0, [r7, #4]
   198fe:	b310      	cbz	r0, 19946 <bt_smp_encrypt_change+0x17a>
			BT_ERR("Unable to get random bytes");
   19900:	4b77      	ldr	r3, [pc, #476]	; (19ae0 <bt_smp_encrypt_change+0x314>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
   19902:	61bb      	str	r3, [r7, #24]
   19904:	4875      	ldr	r0, [pc, #468]	; (19adc <bt_smp_encrypt_change+0x310>)
   19906:	2302      	movs	r3, #2
   19908:	f107 0214 	add.w	r2, r7, #20
   1990c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19910:	617b      	str	r3, [r7, #20]
   19912:	f016 fa35 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
	if (smp->local_dist & BT_SMP_DIST_ID_KEY) {
   19916:	f815 3c08 	ldrb.w	r3, [r5, #-8]
   1991a:	079a      	lsls	r2, r3, #30
   1991c:	f140 80a4 	bpl.w	19a68 <bt_smp_encrypt_change+0x29c>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_INFO,
   19920:	2108      	movs	r1, #8
   19922:	4620      	mov	r0, r4
   19924:	f016 fa4e 	bl	2fdc4 <smp_create_pdu.constprop.0>
		if (!buf) {
   19928:	4680      	mov	r8, r0
   1992a:	2800      	cmp	r0, #0
   1992c:	d16e      	bne.n	19a0c <bt_smp_encrypt_change+0x240>
			BT_ERR("Unable to allocate Ident Info buffer");
   1992e:	4b6d      	ldr	r3, [pc, #436]	; (19ae4 <bt_smp_encrypt_change+0x318>)
			BT_ERR("Unable to allocate Signing Info buffer");
   19930:	633b      	str	r3, [r7, #48]	; 0x30
   19932:	486a      	ldr	r0, [pc, #424]	; (19adc <bt_smp_encrypt_change+0x310>)
   19934:	2302      	movs	r3, #2
   19936:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   1993a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1993e:	62fb      	str	r3, [r7, #44]	; 0x2c
   19940:	f016 fa1e 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   19944:	e778      	b.n	19838 <bt_smp_encrypt_change+0x6c>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   19946:	2106      	movs	r1, #6
   19948:	4620      	mov	r0, r4
   1994a:	f016 fa3b 	bl	2fdc4 <smp_create_pdu.constprop.0>
		if (!buf) {
   1994e:	4681      	mov	r9, r0
   19950:	b908      	cbnz	r0, 19956 <bt_smp_encrypt_change+0x18a>
			BT_ERR("Unable to allocate Encrypt Info buffer");
   19952:	4b65      	ldr	r3, [pc, #404]	; (19ae8 <bt_smp_encrypt_change+0x31c>)
   19954:	e7d5      	b.n	19902 <bt_smp_encrypt_change+0x136>
	return net_buf_simple_add(&buf->b, len);
   19956:	2110      	movs	r1, #16
   19958:	3008      	adds	r0, #8
   1995a:	f017 f88b 	bl	30a74 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   1995e:	f898 200c 	ldrb.w	r2, [r8, #12]
   19962:	6038      	str	r0, [r7, #0]
   19964:	f107 0120 	add.w	r1, r7, #32
   19968:	f014 fb5f 	bl	2e02a <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1996c:	f898 000c 	ldrb.w	r0, [r8, #12]
   19970:	683b      	ldr	r3, [r7, #0]
   19972:	280f      	cmp	r0, #15
   19974:	d805      	bhi.n	19982 <bt_smp_encrypt_change+0x1b6>
			(void)memset(info->ltk + keys->enc_size, 0,
   19976:	f1c0 0210 	rsb	r2, r0, #16
   1997a:	6879      	ldr	r1, [r7, #4]
   1997c:	4418      	add	r0, r3
   1997e:	f014 fb5f 	bl	2e040 <memset>
		smp_send(smp, buf, NULL, NULL);
   19982:	4649      	mov	r1, r9
   19984:	2200      	movs	r2, #0
   19986:	4620      	mov	r0, r4
   19988:	f016 f9dd 	bl	2fd46 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   1998c:	2107      	movs	r1, #7
   1998e:	4620      	mov	r0, r4
   19990:	f016 fa18 	bl	2fdc4 <smp_create_pdu.constprop.0>
		if (!buf) {
   19994:	4681      	mov	r9, r0
   19996:	b908      	cbnz	r0, 1999c <bt_smp_encrypt_change+0x1d0>
			BT_ERR("Unable to allocate Central Ident buffer");
   19998:	4b54      	ldr	r3, [pc, #336]	; (19aec <bt_smp_encrypt_change+0x320>)
   1999a:	e7b2      	b.n	19902 <bt_smp_encrypt_change+0x136>
   1999c:	210a      	movs	r1, #10
   1999e:	3008      	adds	r0, #8
   199a0:	f017 f868 	bl	30a74 <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   199a4:	2208      	movs	r2, #8
   199a6:	4603      	mov	r3, r0
   199a8:	f107 0130 	add.w	r1, r7, #48	; 0x30
   199ac:	3002      	adds	r0, #2
   199ae:	607b      	str	r3, [r7, #4]
   199b0:	f014 fb3b 	bl	2e02a <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   199b4:	687b      	ldr	r3, [r7, #4]
   199b6:	2202      	movs	r2, #2
   199b8:	f107 0138 	add.w	r1, r7, #56	; 0x38
   199bc:	4618      	mov	r0, r3
   199be:	f014 fb34 	bl	2e02a <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   199c2:	4649      	mov	r1, r9
   199c4:	4620      	mov	r0, r4
   199c6:	4a4a      	ldr	r2, [pc, #296]	; (19af0 <bt_smp_encrypt_change+0x324>)
   199c8:	f016 f9bd 	bl	2fd46 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   199cc:	210d      	movs	r1, #13
   199ce:	4630      	mov	r0, r6
   199d0:	f016 f8f1 	bl	2fbb6 <atomic_test_bit>
   199d4:	2800      	cmp	r0, #0
   199d6:	d09e      	beq.n	19916 <bt_smp_encrypt_change+0x14a>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   199d8:	4640      	mov	r0, r8
   199da:	2101      	movs	r1, #1
   199dc:	f016 fce1 	bl	303a2 <bt_keys_add_type>
			memcpy(keys->periph_ltk.val, rand.key,
   199e0:	f107 0120 	add.w	r1, r7, #32
   199e4:	2210      	movs	r2, #16
   199e6:	f108 0072 	add.w	r0, r8, #114	; 0x72
   199ea:	f014 fb1e 	bl	2e02a <memcpy>
			memcpy(keys->periph_ltk.rand, rand.rand,
   199ee:	f107 0130 	add.w	r1, r7, #48	; 0x30
   199f2:	2208      	movs	r2, #8
   199f4:	f108 0068 	add.w	r0, r8, #104	; 0x68
   199f8:	f014 fb17 	bl	2e02a <memcpy>
			memcpy(keys->periph_ltk.ediv, rand.ediv,
   199fc:	2202      	movs	r2, #2
   199fe:	f107 0138 	add.w	r1, r7, #56	; 0x38
   19a02:	f108 0070 	add.w	r0, r8, #112	; 0x70
   19a06:	f014 fb10 	bl	2e02a <memcpy>
   19a0a:	e784      	b.n	19916 <bt_smp_encrypt_change+0x14a>
   19a0c:	2110      	movs	r1, #16
   19a0e:	3008      	adds	r0, #8
   19a10:	f017 f830 	bl	30a74 <net_buf_simple_add>
		memcpy(id_info->irk, bt_dev.irk[conn->id], 16);
   19a14:	f89b 1008 	ldrb.w	r1, [fp, #8]
   19a18:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 19af4 <bt_smp_encrypt_change+0x328>
   19a1c:	f44f 73ac 	mov.w	r3, #344	; 0x158
   19a20:	2210      	movs	r2, #16
   19a22:	fb12 3101 	smlabb	r1, r2, r1, r3
   19a26:	4449      	add	r1, r9
   19a28:	f014 faff 	bl	2e02a <memcpy>
		smp_send(smp, buf, NULL, NULL);
   19a2c:	4641      	mov	r1, r8
   19a2e:	2200      	movs	r2, #0
   19a30:	4620      	mov	r0, r4
   19a32:	f016 f988 	bl	2fd46 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_ADDR_INFO,
   19a36:	2109      	movs	r1, #9
   19a38:	4620      	mov	r0, r4
   19a3a:	f016 f9c3 	bl	2fdc4 <smp_create_pdu.constprop.0>
		if (!buf) {
   19a3e:	4680      	mov	r8, r0
   19a40:	b908      	cbnz	r0, 19a46 <bt_smp_encrypt_change+0x27a>
			BT_ERR("Unable to allocate Ident Addr Info buffer");
   19a42:	4b2d      	ldr	r3, [pc, #180]	; (19af8 <bt_smp_encrypt_change+0x32c>)
   19a44:	e774      	b.n	19930 <bt_smp_encrypt_change+0x164>
   19a46:	2107      	movs	r1, #7
   19a48:	3008      	adds	r0, #8
   19a4a:	f017 f813 	bl	30a74 <net_buf_simple_add>
		bt_addr_le_copy(&id_addr_info->addr, &bt_dev.id_addr[conn->id]);
   19a4e:	f89b 1008 	ldrb.w	r1, [fp, #8]
   19a52:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   19a56:	2207      	movs	r2, #7
   19a58:	4449      	add	r1, r9
   19a5a:	f014 fae6 	bl	2e02a <memcpy>
		smp_send(smp, buf, smp_id_sent, NULL);
   19a5e:	4a27      	ldr	r2, [pc, #156]	; (19afc <bt_smp_encrypt_change+0x330>)
   19a60:	4641      	mov	r1, r8
   19a62:	4620      	mov	r0, r4
   19a64:	f016 f96f 	bl	2fd46 <smp_send.constprop.0>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
   19a68:	f815 3c08 	ldrb.w	r3, [r5, #-8]
   19a6c:	075b      	lsls	r3, r3, #29
   19a6e:	d529      	bpl.n	19ac4 <bt_smp_encrypt_change+0x2f8>
		buf = smp_create_pdu(smp, BT_SMP_CMD_SIGNING_INFO,
   19a70:	210a      	movs	r1, #10
   19a72:	4620      	mov	r0, r4
   19a74:	f016 f9a6 	bl	2fdc4 <smp_create_pdu.constprop.0>
		if (!buf) {
   19a78:	4680      	mov	r8, r0
   19a7a:	b908      	cbnz	r0, 19a80 <bt_smp_encrypt_change+0x2b4>
			BT_ERR("Unable to allocate Signing Info buffer");
   19a7c:	4b20      	ldr	r3, [pc, #128]	; (19b00 <bt_smp_encrypt_change+0x334>)
   19a7e:	e757      	b.n	19930 <bt_smp_encrypt_change+0x164>
   19a80:	2110      	movs	r1, #16
   19a82:	3008      	adds	r0, #8
   19a84:	f016 fff6 	bl	30a74 <net_buf_simple_add>
		if (bt_rand(info->csrk, sizeof(info->csrk))) {
   19a88:	2110      	movs	r1, #16
   19a8a:	4683      	mov	fp, r0
   19a8c:	f003 faaa 	bl	1cfe4 <bt_rand>
   19a90:	4681      	mov	r9, r0
   19a92:	2800      	cmp	r0, #0
   19a94:	f47f aed0 	bne.w	19838 <bt_smp_encrypt_change+0x6c>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   19a98:	210d      	movs	r1, #13
   19a9a:	4630      	mov	r0, r6
   19a9c:	f016 f88b 	bl	2fbb6 <atomic_test_bit>
   19aa0:	b158      	cbz	r0, 19aba <bt_smp_encrypt_change+0x2ee>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
   19aa2:	2108      	movs	r1, #8
   19aa4:	4650      	mov	r0, sl
   19aa6:	f016 fc7c 	bl	303a2 <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
   19aaa:	2210      	movs	r2, #16
   19aac:	4659      	mov	r1, fp
   19aae:	f10a 0040 	add.w	r0, sl, #64	; 0x40
   19ab2:	f014 faba 	bl	2e02a <memcpy>
			keys->local_csrk.cnt = 0U;
   19ab6:	f8ca 9050 	str.w	r9, [sl, #80]	; 0x50
		smp_send(smp, buf, smp_sign_info_sent, NULL);
   19aba:	4a12      	ldr	r2, [pc, #72]	; (19b04 <bt_smp_encrypt_change+0x338>)
   19abc:	4641      	mov	r1, r8
   19abe:	4620      	mov	r0, r4
   19ac0:	f016 f941 	bl	2fd46 <smp_send.constprop.0>
	if (!smp->local_dist && !smp->remote_dist) {
   19ac4:	f835 1c08 	ldrh.w	r1, [r5, #-8]
   19ac8:	2900      	cmp	r1, #0
   19aca:	f47f aeb5 	bne.w	19838 <bt_smp_encrypt_change+0x6c>
   19ace:	e6a4      	b.n	1981a <bt_smp_encrypt_change+0x4e>
   19ad0:	00036508 	.word	0x00036508
   19ad4:	000363f1 	.word	0x000363f1
   19ad8:	01000003 	.word	0x01000003
   19adc:	00032484 	.word	0x00032484
   19ae0:	00036406 	.word	0x00036406
   19ae4:	00036470 	.word	0x00036470
   19ae8:	00036421 	.word	0x00036421
   19aec:	00036448 	.word	0x00036448
   19af0:	00030315 	.word	0x00030315
   19af4:	20000000 	.word	0x20000000
   19af8:	00036495 	.word	0x00036495
   19afc:	0003030f 	.word	0x0003030f
   19b00:	000364bf 	.word	0x000364bf
   19b04:	00030309 	.word	0x00030309

00019b08 <smp_timeout>:
{
   19b08:	b510      	push	{r4, lr}
   19b0a:	b086      	sub	sp, #24
	BT_ERR("SMP Timeout");
   19b0c:	4b0b      	ldr	r3, [pc, #44]	; (19b3c <smp_timeout+0x34>)
   19b0e:	9304      	str	r3, [sp, #16]
{
   19b10:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
   19b12:	2302      	movs	r3, #2
   19b14:	aa03      	add	r2, sp, #12
   19b16:	480a      	ldr	r0, [pc, #40]	; (19b40 <smp_timeout+0x38>)
   19b18:	9303      	str	r3, [sp, #12]
   19b1a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19b1e:	f016 f92f 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   19b22:	f5a4 70ec 	sub.w	r0, r4, #472	; 0x1d8
   19b26:	2108      	movs	r1, #8
   19b28:	f7ff fb84 	bl	19234 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   19b2c:	2104      	movs	r1, #4
   19b2e:	f5a4 70ea 	sub.w	r0, r4, #468	; 0x1d4
}
   19b32:	b006      	add	sp, #24
   19b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   19b38:	f016 b930 	b.w	2fd9c <atomic_set_bit>
   19b3c:	000364e6 	.word	0x000364e6
   19b40:	00032484 	.word	0x00032484

00019b44 <bt_smp_update_keys>:
{
   19b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19b48:	af00      	add	r7, sp, #0
   19b4a:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   19b4c:	f016 f91b 	bl	2fd86 <smp_chan_get>
	if (!smp) {
   19b50:	4605      	mov	r5, r0
   19b52:	b358      	cbz	r0, 19bac <bt_smp_update_keys+0x68>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   19b54:	1d06      	adds	r6, r0, #4
   19b56:	2103      	movs	r1, #3
   19b58:	4630      	mov	r0, r6
   19b5a:	f016 f82c 	bl	2fbb6 <atomic_test_bit>
   19b5e:	b328      	cbz	r0, 19bac <bt_smp_update_keys+0x68>
	if (conn->le.keys) {
   19b60:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   19b64:	b108      	cbz	r0, 19b6a <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   19b66:	f000 f967 	bl	19e38 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   19b6a:	f104 0888 	add.w	r8, r4, #136	; 0x88
   19b6e:	7a20      	ldrb	r0, [r4, #8]
   19b70:	4641      	mov	r1, r8
   19b72:	f000 f88d 	bl	19c90 <bt_keys_get_addr>
   19b76:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   19b7a:	b9d0      	cbnz	r0, 19bb2 <bt_smp_update_keys+0x6e>
		BT_ERR("Unable to get keys for %s",
   19b7c:	4640      	mov	r0, r8
   19b7e:	f7f7 fc2f 	bl	113e0 <bt_addr_le_str_real>
   19b82:	466c      	mov	r4, sp
   19b84:	4b34      	ldr	r3, [pc, #208]	; (19c58 <bt_smp_update_keys+0x114>)
   19b86:	b088      	sub	sp, #32
   19b88:	466a      	mov	r2, sp
   19b8a:	e9c2 3004 	strd	r3, r0, [r2, #16]
   19b8e:	2302      	movs	r3, #2
   19b90:	7613      	strb	r3, [r2, #24]
   19b92:	4b32      	ldr	r3, [pc, #200]	; (19c5c <bt_smp_update_keys+0x118>)
   19b94:	4832      	ldr	r0, [pc, #200]	; (19c60 <bt_smp_update_keys+0x11c>)
   19b96:	f842 3f0c 	str.w	r3, [r2, #12]!
   19b9a:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   19b9e:	f016 f8ef 	bl	2fd80 <z_log_msg2_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   19ba2:	2108      	movs	r1, #8
   19ba4:	46a5      	mov	sp, r4
   19ba6:	4628      	mov	r0, r5
   19ba8:	f016 fb1e 	bl	301e8 <smp_error>
}
   19bac:	46bd      	mov	sp, r7
   19bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   19bb2:	210e      	movs	r1, #14
   19bb4:	4630      	mov	r0, r6
   19bb6:	f015 fffe 	bl	2fbb6 <atomic_test_bit>
   19bba:	b128      	cbz	r0, 19bc8 <bt_smp_update_keys+0x84>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   19bbc:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   19bc0:	7b53      	ldrb	r3, [r2, #13]
   19bc2:	f043 0302 	orr.w	r3, r3, #2
   19bc6:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   19bc8:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   19bca:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
   19bce:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   19bd0:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   19bd2:	d836      	bhi.n	19c42 <bt_smp_update_keys+0xfe>
   19bd4:	b3c2      	cbz	r2, 19c48 <bt_smp_update_keys+0x104>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   19bd6:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   19bda:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   19bdc:	7d2b      	ldrb	r3, [r5, #20]
   19bde:	7b6a      	ldrb	r2, [r5, #13]
   19be0:	4293      	cmp	r3, r2
   19be2:	bf28      	it	cs
   19be4:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   19be6:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19be8:	4630      	mov	r0, r6
   19bea:	2105      	movs	r1, #5
   19bec:	f015 ffe3 	bl	2fbb6 <atomic_test_bit>
   19bf0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   19bf4:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19bf6:	b350      	cbz	r0, 19c4e <bt_smp_update_keys+0x10a>
		conn->le.keys->flags |= BT_KEYS_SC;
   19bf8:	f042 0210 	orr.w	r2, r2, #16
   19bfc:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   19bfe:	210d      	movs	r1, #13
   19c00:	4630      	mov	r0, r6
   19c02:	f015 ffd8 	bl	2fbb6 <atomic_test_bit>
   19c06:	2800      	cmp	r0, #0
   19c08:	d0d0      	beq.n	19bac <bt_smp_update_keys+0x68>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   19c0a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   19c0e:	2120      	movs	r1, #32
   19c10:	f016 fbc7 	bl	303a2 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   19c14:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   19c18:	f105 0147 	add.w	r1, r5, #71	; 0x47
   19c1c:	2210      	movs	r2, #16
   19c1e:	301a      	adds	r0, #26
   19c20:	f014 fa03 	bl	2e02a <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   19c24:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   19c28:	2208      	movs	r2, #8
   19c2a:	2100      	movs	r1, #0
   19c2c:	3010      	adds	r0, #16
   19c2e:	f014 fa07 	bl	2e040 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   19c32:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   19c36:	2202      	movs	r2, #2
   19c38:	2100      	movs	r1, #0
   19c3a:	3018      	adds	r0, #24
   19c3c:	f014 fa00 	bl	2e040 <memset>
   19c40:	e7b4      	b.n	19bac <bt_smp_update_keys+0x68>
	switch (smp->method) {
   19c42:	3a05      	subs	r2, #5
   19c44:	2a01      	cmp	r2, #1
   19c46:	d9c6      	bls.n	19bd6 <bt_smp_update_keys+0x92>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   19c48:	f023 0301 	bic.w	r3, r3, #1
   19c4c:	e7c5      	b.n	19bda <bt_smp_update_keys+0x96>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   19c4e:	f022 0210 	bic.w	r2, r2, #16
   19c52:	735a      	strb	r2, [r3, #13]
   19c54:	e7aa      	b.n	19bac <bt_smp_update_keys+0x68>
   19c56:	bf00      	nop
   19c58:	0003617e 	.word	0x0003617e
   19c5c:	01000003 	.word	0x01000003
   19c60:	00032484 	.word	0x00032484

00019c64 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   19c64:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   19c66:	4b07      	ldr	r3, [pc, #28]	; (19c84 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   19c68:	4807      	ldr	r0, [pc, #28]	; (19c88 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   19c6a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   19c6e:	f003 0306 	and.w	r3, r3, #6
   19c72:	1f9a      	subs	r2, r3, #6
   19c74:	4253      	negs	r3, r2
   19c76:	4153      	adcs	r3, r2
   19c78:	4a04      	ldr	r2, [pc, #16]	; (19c8c <bt_smp_init+0x28>)
   19c7a:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   19c7c:	f7fa fc14 	bl	144a8 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   19c80:	2000      	movs	r0, #0
   19c82:	bd08      	pop	{r3, pc}
   19c84:	20000000 	.word	0x20000000
   19c88:	200003d4 	.word	0x200003d4
   19c8c:	2000341d 	.word	0x2000341d

00019c90 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   19c90:	b5f0      	push	{r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   19c92:	4c1f      	ldr	r4, [pc, #124]	; (19d10 <bt_keys_get_addr+0x80>)
   19c94:	7823      	ldrb	r3, [r4, #0]
   19c96:	4283      	cmp	r3, r0
{
   19c98:	b085      	sub	sp, #20
   19c9a:	4606      	mov	r6, r0
   19c9c:	460f      	mov	r7, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   19c9e:	d01e      	beq.n	19cde <bt_keys_get_addr+0x4e>
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   19ca0:	2500      	movs	r5, #0
	return memcmp(a, b, sizeof(*a));
   19ca2:	481c      	ldr	r0, [pc, #112]	; (19d14 <bt_keys_get_addr+0x84>)
   19ca4:	9502      	str	r5, [sp, #8]
   19ca6:	2207      	movs	r2, #7
   19ca8:	a902      	add	r1, sp, #8
   19caa:	f8cd 500b 	str.w	r5, [sp, #11]
   19cae:	f014 f9ab 	bl	2e008 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   19cb2:	b1e0      	cbz	r0, 19cee <bt_keys_get_addr+0x5e>
	memcpy(dst, src, sizeof(*dst));
   19cb4:	2207      	movs	r2, #7
   19cb6:	4917      	ldr	r1, [pc, #92]	; (19d14 <bt_keys_get_addr+0x84>)
   19cb8:	4668      	mov	r0, sp
   19cba:	f014 f9b6 	bl	2e02a <memcpy>
			return NULL;
		}

		/* Use a copy as bt_unpair will clear the oldest key. */
		bt_addr_le_copy(&oldest_addr, &oldest->addr);
		bt_unpair(oldest->id, &oldest_addr);
   19cbe:	4669      	mov	r1, sp
   19cc0:	7820      	ldrb	r0, [r4, #0]
   19cc2:	f7f9 f843 	bl	12d4c <bt_unpair>
	return memcmp(a, b, sizeof(*a));
   19cc6:	4813      	ldr	r0, [pc, #76]	; (19d14 <bt_keys_get_addr+0x84>)
		if (!bt_addr_le_cmp(&oldest->addr, BT_ADDR_LE_ANY)) {
   19cc8:	9502      	str	r5, [sp, #8]
   19cca:	2207      	movs	r2, #7
   19ccc:	a902      	add	r1, sp, #8
   19cce:	f8cd 500b 	str.w	r5, [sp, #11]
   19cd2:	f014 f999 	bl	2e008 <memcmp>
   19cd6:	b150      	cbz	r0, 19cee <bt_keys_get_addr+0x5e>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   19cd8:	4628      	mov	r0, r5
}
   19cda:	b005      	add	sp, #20
   19cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19cde:	2207      	movs	r2, #7
   19ce0:	1c60      	adds	r0, r4, #1
   19ce2:	f014 f991 	bl	2e008 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   19ce6:	2800      	cmp	r0, #0
   19ce8:	d1da      	bne.n	19ca0 <bt_keys_get_addr+0x10>
		keys = &key_pool[i];
   19cea:	4620      	mov	r0, r4
   19cec:	e7f5      	b.n	19cda <bt_keys_get_addr+0x4a>
	memcpy(dst, src, sizeof(*dst));
   19cee:	2207      	movs	r2, #7
   19cf0:	4808      	ldr	r0, [pc, #32]	; (19d14 <bt_keys_get_addr+0x84>)
		keys->id = id;
   19cf2:	7026      	strb	r6, [r4, #0]
   19cf4:	4639      	mov	r1, r7
   19cf6:	f014 f998 	bl	2e02a <memcpy>
		keys->aging_counter = ++aging_counter_val;
   19cfa:	4a07      	ldr	r2, [pc, #28]	; (19d18 <bt_keys_get_addr+0x88>)
		return keys;
   19cfc:	4804      	ldr	r0, [pc, #16]	; (19d10 <bt_keys_get_addr+0x80>)
		keys->aging_counter = ++aging_counter_val;
   19cfe:	6813      	ldr	r3, [r2, #0]
   19d00:	3301      	adds	r3, #1
   19d02:	6013      	str	r3, [r2, #0]
   19d04:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		last_keys_updated = keys;
   19d08:	4b04      	ldr	r3, [pc, #16]	; (19d1c <bt_keys_get_addr+0x8c>)
   19d0a:	601c      	str	r4, [r3, #0]
		return keys;
   19d0c:	e7e5      	b.n	19cda <bt_keys_get_addr+0x4a>
   19d0e:	bf00      	nop
   19d10:	20001f4c 	.word	0x20001f4c
   19d14:	20001f4d 	.word	0x20001f4d
   19d18:	20001f48 	.word	0x20001f48
   19d1c:	20001fd4 	.word	0x20001fd4

00019d20 <bt_foreach_bond>:

void bt_foreach_bond(uint8_t id, void (*func)(const struct bt_bond_info *info,
					   void *user_data),
		     void *user_data)
{
   19d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
   19d22:	460c      	mov	r4, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		struct bt_keys *keys = &key_pool[i];

		if (keys->keys && keys->id == id) {
   19d24:	4908      	ldr	r1, [pc, #32]	; (19d48 <bt_foreach_bond+0x28>)
   19d26:	89cb      	ldrh	r3, [r1, #14]
{
   19d28:	4615      	mov	r5, r2
		if (keys->keys && keys->id == id) {
   19d2a:	b153      	cbz	r3, 19d42 <bt_foreach_bond+0x22>
   19d2c:	780b      	ldrb	r3, [r1, #0]
   19d2e:	4283      	cmp	r3, r0
   19d30:	d107      	bne.n	19d42 <bt_foreach_bond+0x22>
   19d32:	3101      	adds	r1, #1
   19d34:	2207      	movs	r2, #7
   19d36:	4668      	mov	r0, sp
   19d38:	f014 f977 	bl	2e02a <memcpy>
			struct bt_bond_info info;

			bt_addr_le_copy(&info.addr, &keys->addr);
			func(&info, user_data);
   19d3c:	4629      	mov	r1, r5
   19d3e:	4668      	mov	r0, sp
   19d40:	47a0      	blx	r4
		}
	}
}
   19d42:	b003      	add	sp, #12
   19d44:	bd30      	pop	{r4, r5, pc}
   19d46:	bf00      	nop
   19d48:	20001f4c 	.word	0x20001f4c

00019d4c <bt_keys_foreach>:

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   19d4c:	460b      	mov	r3, r1
   19d4e:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   19d50:	4a04      	ldr	r2, [pc, #16]	; (19d64 <bt_keys_foreach+0x18>)
{
   19d52:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   19d54:	89d4      	ldrh	r4, [r2, #14]
   19d56:	4204      	tst	r4, r0
   19d58:	d002      	beq.n	19d60 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
   19d5a:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   19d5c:	4610      	mov	r0, r2
   19d5e:	4718      	bx	r3
}
   19d60:	bc10      	pop	{r4}
   19d62:	4770      	bx	lr
   19d64:	20001f4c 	.word	0x20001f4c

00019d68 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   19d68:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   19d6a:	4903      	ldr	r1, [pc, #12]	; (19d78 <keys_commit+0x10>)
   19d6c:	2200      	movs	r2, #0
   19d6e:	2002      	movs	r0, #2
   19d70:	f7ff ffec 	bl	19d4c <bt_keys_foreach>
	}

	return 0;
}
   19d74:	2000      	movs	r0, #0
   19d76:	bd08      	pop	{r3, pc}
   19d78:	0003037f 	.word	0x0003037f

00019d7c <bt_keys_find>:
{
   19d7c:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   19d7e:	4c09      	ldr	r4, [pc, #36]	; (19da4 <bt_keys_find+0x28>)
{
   19d80:	460b      	mov	r3, r1
   19d82:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   19d84:	89e2      	ldrh	r2, [r4, #14]
   19d86:	4202      	tst	r2, r0
   19d88:	d007      	beq.n	19d9a <bt_keys_find+0x1e>
   19d8a:	7822      	ldrb	r2, [r4, #0]
   19d8c:	429a      	cmp	r2, r3
   19d8e:	d104      	bne.n	19d9a <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   19d90:	2207      	movs	r2, #7
   19d92:	1c60      	adds	r0, r4, #1
   19d94:	f014 f938 	bl	2e008 <memcmp>
   19d98:	b108      	cbz	r0, 19d9e <bt_keys_find+0x22>
	return NULL;
   19d9a:	2000      	movs	r0, #0
}
   19d9c:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   19d9e:	4620      	mov	r0, r4
   19da0:	e7fc      	b.n	19d9c <bt_keys_find+0x20>
   19da2:	bf00      	nop
   19da4:	20001f4c 	.word	0x20001f4c

00019da8 <bt_keys_find_irk>:
{
   19da8:	b570      	push	{r4, r5, r6, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   19daa:	780b      	ldrb	r3, [r1, #0]
   19dac:	2b01      	cmp	r3, #1
   19dae:	4606      	mov	r6, r0
   19db0:	460d      	mov	r5, r1
   19db2:	d001      	beq.n	19db8 <bt_keys_find_irk+0x10>
		return NULL;
   19db4:	2000      	movs	r0, #0
}
   19db6:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   19db8:	798b      	ldrb	r3, [r1, #6]
   19dba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19dbe:	2b40      	cmp	r3, #64	; 0x40
   19dc0:	d1f8      	bne.n	19db4 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   19dc2:	4c12      	ldr	r4, [pc, #72]	; (19e0c <bt_keys_find_irk+0x64>)
   19dc4:	89e3      	ldrh	r3, [r4, #14]
   19dc6:	079b      	lsls	r3, r3, #30
   19dc8:	d5f4      	bpl.n	19db4 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   19dca:	7823      	ldrb	r3, [r4, #0]
   19dcc:	42b3      	cmp	r3, r6
   19dce:	d10b      	bne.n	19de8 <bt_keys_find_irk+0x40>
	return memcmp(a, b, sizeof(*a));
   19dd0:	2206      	movs	r2, #6
   19dd2:	f104 013a 	add.w	r1, r4, #58	; 0x3a
   19dd6:	1c68      	adds	r0, r5, #1
   19dd8:	f014 f916 	bl	2e008 <memcmp>
   19ddc:	b908      	cbnz	r0, 19de2 <bt_keys_find_irk+0x3a>
			return &key_pool[i];
   19dde:	4620      	mov	r0, r4
   19de0:	e7e9      	b.n	19db6 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   19de2:	89e3      	ldrh	r3, [r4, #14]
   19de4:	079a      	lsls	r2, r3, #30
   19de6:	d5e5      	bpl.n	19db4 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   19de8:	7823      	ldrb	r3, [r4, #0]
   19dea:	42b3      	cmp	r3, r6
   19dec:	d1e2      	bne.n	19db4 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   19dee:	3501      	adds	r5, #1
   19df0:	4807      	ldr	r0, [pc, #28]	; (19e10 <bt_keys_find_irk+0x68>)
   19df2:	4629      	mov	r1, r5
   19df4:	f014 f95f 	bl	2e0b6 <bt_rpa_irk_matches>
   19df8:	2800      	cmp	r0, #0
   19dfa:	d0db      	beq.n	19db4 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   19dfc:	4805      	ldr	r0, [pc, #20]	; (19e14 <bt_keys_find_irk+0x6c>)
   19dfe:	2206      	movs	r2, #6
   19e00:	4629      	mov	r1, r5
   19e02:	f014 f912 	bl	2e02a <memcpy>
			return &key_pool[i];
   19e06:	4801      	ldr	r0, [pc, #4]	; (19e0c <bt_keys_find_irk+0x64>)
}
   19e08:	e7d5      	b.n	19db6 <bt_keys_find_irk+0xe>
   19e0a:	bf00      	nop
   19e0c:	20001f4c 	.word	0x20001f4c
   19e10:	20001f76 	.word	0x20001f76
   19e14:	20001f86 	.word	0x20001f86

00019e18 <bt_keys_find_addr>:
{
   19e18:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
   19e1a:	4c06      	ldr	r4, [pc, #24]	; (19e34 <bt_keys_find_addr+0x1c>)
   19e1c:	7823      	ldrb	r3, [r4, #0]
   19e1e:	4283      	cmp	r3, r0
   19e20:	d104      	bne.n	19e2c <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   19e22:	2207      	movs	r2, #7
   19e24:	1c60      	adds	r0, r4, #1
   19e26:	f014 f8ef 	bl	2e008 <memcmp>
   19e2a:	b108      	cbz	r0, 19e30 <bt_keys_find_addr+0x18>
	return NULL;
   19e2c:	2000      	movs	r0, #0
}
   19e2e:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   19e30:	4620      	mov	r0, r4
   19e32:	e7fc      	b.n	19e2e <bt_keys_find_addr+0x16>
   19e34:	20001f4c 	.word	0x20001f4c

00019e38 <bt_keys_clear>:
{
   19e38:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   19e3a:	7a03      	ldrb	r3, [r0, #8]
   19e3c:	075b      	lsls	r3, r3, #29
{
   19e3e:	b08c      	sub	sp, #48	; 0x30
   19e40:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   19e42:	d501      	bpl.n	19e48 <bt_keys_clear+0x10>
		bt_id_del(keys);
   19e44:	f7f9 fdde 	bl	13a04 <bt_id_del>
		if (keys->id) {
   19e48:	4625      	mov	r5, r4
   19e4a:	f815 2b01 	ldrb.w	r2, [r5], #1
   19e4e:	b1b2      	cbz	r2, 19e7e <bt_keys_clear+0x46>
			u8_to_dec(id, sizeof(id), keys->id);
   19e50:	ae02      	add	r6, sp, #8
   19e52:	2104      	movs	r1, #4
   19e54:	4630      	mov	r0, r6
   19e56:	f011 fced 	bl	2b834 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   19e5a:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   19e5c:	4a09      	ldr	r2, [pc, #36]	; (19e84 <bt_keys_clear+0x4c>)
   19e5e:	462b      	mov	r3, r5
   19e60:	2124      	movs	r1, #36	; 0x24
   19e62:	a803      	add	r0, sp, #12
   19e64:	f7f7 fdc4 	bl	119f0 <bt_settings_encode_key>
		settings_delete(key);
   19e68:	a803      	add	r0, sp, #12
   19e6a:	f012 fdfc 	bl	2ca66 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   19e6e:	2288      	movs	r2, #136	; 0x88
   19e70:	2100      	movs	r1, #0
   19e72:	4620      	mov	r0, r4
}
   19e74:	b00c      	add	sp, #48	; 0x30
   19e76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(keys, 0, sizeof(*keys));
   19e7a:	f014 b8e1 	b.w	2e040 <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   19e7e:	9200      	str	r2, [sp, #0]
   19e80:	e7ec      	b.n	19e5c <bt_keys_clear+0x24>
   19e82:	bf00      	nop
   19e84:	0003661c 	.word	0x0003661c

00019e88 <keys_set>:
{
   19e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19e8c:	b0aa      	sub	sp, #168	; 0xa8
   19e8e:	4614      	mov	r4, r2
   19e90:	af00      	add	r7, sp, #0
	if (!name) {
   19e92:	4606      	mov	r6, r0
   19e94:	b990      	cbnz	r0, 19ebc <keys_set+0x34>
		BT_ERR("Insufficient number of arguments");
   19e96:	4b69      	ldr	r3, [pc, #420]	; (1a03c <keys_set+0x1b4>)
   19e98:	63bb      	str	r3, [r7, #56]	; 0x38
   19e9a:	2302      	movs	r3, #2
   19e9c:	637b      	str	r3, [r7, #52]	; 0x34
   19e9e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19ea2:	4603      	mov	r3, r0
   19ea4:	f107 0234 	add.w	r2, r7, #52	; 0x34
   19ea8:	4865      	ldr	r0, [pc, #404]	; (1a040 <keys_set+0x1b8>)
   19eaa:	f012 fb0c 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
   19eae:	f06f 0515 	mvn.w	r5, #21
}
   19eb2:	4628      	mov	r0, r5
   19eb4:	37a8      	adds	r7, #168	; 0xa8
   19eb6:	46bd      	mov	sp, r7
   19eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   19ebc:	227c      	movs	r2, #124	; 0x7c
   19ebe:	f107 0128 	add.w	r1, r7, #40	; 0x28
   19ec2:	4618      	mov	r0, r3
   19ec4:	47a0      	blx	r4
	if (len < 0) {
   19ec6:	1e04      	subs	r4, r0, #0
   19ec8:	da0a      	bge.n	19ee0 <keys_set+0x58>
		BT_ERR("Failed to read value (err %zd)", len);
   19eca:	4b5e      	ldr	r3, [pc, #376]	; (1a044 <keys_set+0x1bc>)
   19ecc:	e9c7 3408 	strd	r3, r4, [r7, #32]
   19ed0:	2303      	movs	r3, #3
   19ed2:	61fb      	str	r3, [r7, #28]
   19ed4:	2300      	movs	r3, #0
   19ed6:	f107 021c 	add.w	r2, r7, #28
   19eda:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19ede:	e7e3      	b.n	19ea8 <keys_set+0x20>
	err = bt_settings_decode_key(name, &addr);
   19ee0:	f107 0108 	add.w	r1, r7, #8
   19ee4:	4630      	mov	r0, r6
   19ee6:	f014 f955 	bl	2e194 <bt_settings_decode_key>
	if (err) {
   19eea:	4605      	mov	r5, r0
   19eec:	b190      	cbz	r0, 19f14 <keys_set+0x8c>
		BT_ERR("Unable to decode address %s", name);
   19eee:	4b56      	ldr	r3, [pc, #344]	; (1a048 <keys_set+0x1c0>)
   19ef0:	466c      	mov	r4, sp
   19ef2:	b088      	sub	sp, #32
   19ef4:	466a      	mov	r2, sp
   19ef6:	e9c2 3604 	strd	r3, r6, [r2, #16]
   19efa:	2302      	movs	r3, #2
   19efc:	7613      	strb	r3, [r2, #24]
   19efe:	4b53      	ldr	r3, [pc, #332]	; (1a04c <keys_set+0x1c4>)
   19f00:	f842 3f0c 	str.w	r3, [r2, #12]!
   19f04:	484e      	ldr	r0, [pc, #312]	; (1a040 <keys_set+0x1b8>)
   19f06:	2300      	movs	r3, #0
   19f08:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   19f0c:	f012 fadb 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
   19f10:	46a5      	mov	sp, r4
		return -EINVAL;
   19f12:	e7cc      	b.n	19eae <keys_set+0x26>
	settings_name_next(name, &next);
   19f14:	1d39      	adds	r1, r7, #4
   19f16:	4630      	mov	r0, r6
   19f18:	f012 fdcc 	bl	2cab4 <settings_name_next>
	if (!next) {
   19f1c:	6878      	ldr	r0, [r7, #4]
   19f1e:	b140      	cbz	r0, 19f32 <keys_set+0xaa>
		unsigned long next_id = strtoul(next, NULL, 10);
   19f20:	220a      	movs	r2, #10
   19f22:	4629      	mov	r1, r5
   19f24:	f013 ffae 	bl	2de84 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   19f28:	b118      	cbz	r0, 19f32 <keys_set+0xaa>
			BT_ERR("Invalid local identity %lu", next_id);
   19f2a:	4b49      	ldr	r3, [pc, #292]	; (1a050 <keys_set+0x1c8>)
   19f2c:	e9c7 3008 	strd	r3, r0, [r7, #32]
   19f30:	e7ce      	b.n	19ed0 <keys_set+0x48>
	if (!len) {
   19f32:	bb1c      	cbnz	r4, 19f7c <keys_set+0xf4>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   19f34:	f107 0208 	add.w	r2, r7, #8
   19f38:	4621      	mov	r1, r4
   19f3a:	203f      	movs	r0, #63	; 0x3f
   19f3c:	f7ff ff1e 	bl	19d7c <bt_keys_find>
		if (keys) {
   19f40:	b128      	cbz	r0, 19f4e <keys_set+0xc6>
			(void)memset(keys, 0, sizeof(*keys));
   19f42:	2288      	movs	r2, #136	; 0x88
   19f44:	4621      	mov	r1, r4
   19f46:	f014 f87b 	bl	2e040 <memset>
		return 0;
   19f4a:	4625      	mov	r5, r4
   19f4c:	e7b1      	b.n	19eb2 <keys_set+0x2a>
			BT_WARN("Unable to find deleted keys for %s",
   19f4e:	f107 0008 	add.w	r0, r7, #8
   19f52:	f7f7 fa45 	bl	113e0 <bt_addr_le_str_real>
   19f56:	466d      	mov	r5, sp
   19f58:	4b3e      	ldr	r3, [pc, #248]	; (1a054 <keys_set+0x1cc>)
   19f5a:	b088      	sub	sp, #32
   19f5c:	466a      	mov	r2, sp
   19f5e:	e9c2 3004 	strd	r3, r0, [r2, #16]
   19f62:	2302      	movs	r3, #2
   19f64:	7613      	strb	r3, [r2, #24]
   19f66:	4b39      	ldr	r3, [pc, #228]	; (1a04c <keys_set+0x1c4>)
   19f68:	f842 3f0c 	str.w	r3, [r2, #12]!
   19f6c:	4834      	ldr	r0, [pc, #208]	; (1a040 <keys_set+0x1b8>)
   19f6e:	4623      	mov	r3, r4
   19f70:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
   19f74:	f012 faa7 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
   19f78:	46ad      	mov	sp, r5
   19f7a:	e7e6      	b.n	19f4a <keys_set+0xc2>
	keys = bt_keys_get_addr(id, &addr);
   19f7c:	f107 0108 	add.w	r1, r7, #8
   19f80:	2000      	movs	r0, #0
   19f82:	f7ff fe85 	bl	19c90 <bt_keys_get_addr>
	if (!keys) {
   19f86:	4606      	mov	r6, r0
   19f88:	b9c0      	cbnz	r0, 19fbc <keys_set+0x134>
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   19f8a:	f107 0008 	add.w	r0, r7, #8
   19f8e:	f7f7 fa27 	bl	113e0 <bt_addr_le_str_real>
   19f92:	466c      	mov	r4, sp
   19f94:	4b30      	ldr	r3, [pc, #192]	; (1a058 <keys_set+0x1d0>)
   19f96:	b088      	sub	sp, #32
   19f98:	466a      	mov	r2, sp
   19f9a:	e9c2 3004 	strd	r3, r0, [r2, #16]
   19f9e:	2302      	movs	r3, #2
   19fa0:	7613      	strb	r3, [r2, #24]
   19fa2:	4b2a      	ldr	r3, [pc, #168]	; (1a04c <keys_set+0x1c4>)
   19fa4:	f842 3f0c 	str.w	r3, [r2, #12]!
   19fa8:	4825      	ldr	r0, [pc, #148]	; (1a040 <keys_set+0x1b8>)
   19faa:	4633      	mov	r3, r6
   19fac:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   19fb0:	f012 fa89 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
		return -ENOMEM;
   19fb4:	f06f 050b 	mvn.w	r5, #11
   19fb8:	46a5      	mov	sp, r4
   19fba:	e77a      	b.n	19eb2 <keys_set+0x2a>
	if (len != BT_KEYS_STORAGE_LEN) {
   19fbc:	2c7c      	cmp	r4, #124	; 0x7c
   19fbe:	d017      	beq.n	19ff0 <keys_set+0x168>
		if (IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST) &&
   19fc0:	2c78      	cmp	r4, #120	; 0x78
   19fc2:	d124      	bne.n	1a00e <keys_set+0x186>
			BT_WARN("Keys for %s have no aging counter",
   19fc4:	f107 0008 	add.w	r0, r7, #8
   19fc8:	f7f7 fa0a 	bl	113e0 <bt_addr_le_str_real>
   19fcc:	46e8      	mov	r8, sp
   19fce:	4b23      	ldr	r3, [pc, #140]	; (1a05c <keys_set+0x1d4>)
   19fd0:	b088      	sub	sp, #32
   19fd2:	466a      	mov	r2, sp
   19fd4:	e9c2 3004 	strd	r3, r0, [r2, #16]
   19fd8:	2302      	movs	r3, #2
   19fda:	7613      	strb	r3, [r2, #24]
   19fdc:	4b1b      	ldr	r3, [pc, #108]	; (1a04c <keys_set+0x1c4>)
   19fde:	f842 3f0c 	str.w	r3, [r2, #12]!
   19fe2:	4817      	ldr	r0, [pc, #92]	; (1a040 <keys_set+0x1b8>)
   19fe4:	2300      	movs	r3, #0
   19fe6:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
   19fea:	f012 fa6c 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
   19fee:	46c5      	mov	sp, r8
		memcpy(keys->storage_start, val, len);
   19ff0:	4622      	mov	r2, r4
   19ff2:	f107 0128 	add.w	r1, r7, #40	; 0x28
   19ff6:	f106 000c 	add.w	r0, r6, #12
   19ffa:	f014 f816 	bl	2e02a <memcpy>
	if (aging_counter_val < keys->aging_counter) {
   19ffe:	4b18      	ldr	r3, [pc, #96]	; (1a060 <keys_set+0x1d8>)
   1a000:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
   1a004:	6819      	ldr	r1, [r3, #0]
   1a006:	428a      	cmp	r2, r1
		aging_counter_val = keys->aging_counter;
   1a008:	bf88      	it	hi
   1a00a:	601a      	strhi	r2, [r3, #0]
   1a00c:	e751      	b.n	19eb2 <keys_set+0x2a>
			BT_ERR("Invalid key length %zd != %zu", len,
   1a00e:	4b15      	ldr	r3, [pc, #84]	; (1a064 <keys_set+0x1dc>)
   1a010:	466d      	mov	r5, sp
   1a012:	b088      	sub	sp, #32
   1a014:	466a      	mov	r2, sp
   1a016:	e9c2 3404 	strd	r3, r4, [r2, #16]
   1a01a:	237c      	movs	r3, #124	; 0x7c
   1a01c:	6193      	str	r3, [r2, #24]
   1a01e:	2304      	movs	r3, #4
   1a020:	f842 3f0c 	str.w	r3, [r2, #12]!
   1a024:	4806      	ldr	r0, [pc, #24]	; (1a040 <keys_set+0x1b8>)
   1a026:	2300      	movs	r3, #0
   1a028:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1a02c:	f012 fa4b 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
			bt_keys_clear(keys);
   1a030:	4630      	mov	r0, r6
   1a032:	46ad      	mov	sp, r5
   1a034:	f7ff ff00 	bl	19e38 <bt_keys_clear>
			return -EINVAL;
   1a038:	e739      	b.n	19eae <keys_set+0x26>
   1a03a:	bf00      	nop
   1a03c:	00034be5 	.word	0x00034be5
   1a040:	00032464 	.word	0x00032464
   1a044:	0003655b 	.word	0x0003655b
   1a048:	00035eba 	.word	0x00035eba
   1a04c:	01000003 	.word	0x01000003
   1a050:	00035ed6 	.word	0x00035ed6
   1a054:	0003657a 	.word	0x0003657a
   1a058:	0003659d 	.word	0x0003659d
   1a05c:	000365bc 	.word	0x000365bc
   1a060:	20001f48 	.word	0x20001f48
   1a064:	000365de 	.word	0x000365de

0001a068 <bt_keys_store>:
{
   1a068:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
   1a06a:	4605      	mov	r5, r0
{
   1a06c:	b092      	sub	sp, #72	; 0x48
	if (keys->id) {
   1a06e:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1a072:	4604      	mov	r4, r0
	if (keys->id) {
   1a074:	b31a      	cbz	r2, 1a0be <bt_keys_store+0x56>
		u8_to_dec(id, sizeof(id), keys->id);
   1a076:	ae02      	add	r6, sp, #8
   1a078:	2104      	movs	r1, #4
   1a07a:	4630      	mov	r0, r6
   1a07c:	f011 fbda 	bl	2b834 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1a080:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1a082:	2124      	movs	r1, #36	; 0x24
   1a084:	eb0d 0001 	add.w	r0, sp, r1
   1a088:	4a0e      	ldr	r2, [pc, #56]	; (1a0c4 <bt_keys_store+0x5c>)
   1a08a:	462b      	mov	r3, r5
   1a08c:	f7f7 fcb0 	bl	119f0 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1a090:	f104 010c 	add.w	r1, r4, #12
   1a094:	227c      	movs	r2, #124	; 0x7c
   1a096:	a809      	add	r0, sp, #36	; 0x24
   1a098:	f7f5 feb0 	bl	fdfc <settings_save_one>
	if (err) {
   1a09c:	4604      	mov	r4, r0
   1a09e:	b158      	cbz	r0, 1a0b8 <bt_keys_store+0x50>
		BT_ERR("Failed to save keys (err %d)", err);
   1a0a0:	4b09      	ldr	r3, [pc, #36]	; (1a0c8 <bt_keys_store+0x60>)
   1a0a2:	e9cd 3006 	strd	r3, r0, [sp, #24]
   1a0a6:	2303      	movs	r3, #3
   1a0a8:	9305      	str	r3, [sp, #20]
   1a0aa:	4808      	ldr	r0, [pc, #32]	; (1a0cc <bt_keys_store+0x64>)
   1a0ac:	2300      	movs	r3, #0
   1a0ae:	aa05      	add	r2, sp, #20
   1a0b0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a0b4:	f012 fa07 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
}
   1a0b8:	4620      	mov	r0, r4
   1a0ba:	b012      	add	sp, #72	; 0x48
   1a0bc:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1a0be:	9200      	str	r2, [sp, #0]
   1a0c0:	e7df      	b.n	1a082 <bt_keys_store+0x1a>
   1a0c2:	bf00      	nop
   1a0c4:	0003661c 	.word	0x0003661c
   1a0c8:	000365fc 	.word	0x000365fc
   1a0cc:	00032464 	.word	0x00032464

0001a0d0 <bt_keys_update_usage>:

#endif /* CONFIG_BT_SETTINGS */

#if IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
void bt_keys_update_usage(uint8_t id, const bt_addr_le_t *addr)
{
   1a0d0:	b508      	push	{r3, lr}
	struct bt_keys *keys = bt_keys_find_addr(id, addr);
   1a0d2:	f7ff fea1 	bl	19e18 <bt_keys_find_addr>

	if (!keys) {
   1a0d6:	b150      	cbz	r0, 1a0ee <bt_keys_update_usage+0x1e>
		return;
	}

	if (last_keys_updated == keys) {
   1a0d8:	4a05      	ldr	r2, [pc, #20]	; (1a0f0 <bt_keys_update_usage+0x20>)
   1a0da:	6813      	ldr	r3, [r2, #0]
   1a0dc:	4283      	cmp	r3, r0
   1a0de:	d006      	beq.n	1a0ee <bt_keys_update_usage+0x1e>
		return;
	}

	keys->aging_counter = ++aging_counter_val;
   1a0e0:	4904      	ldr	r1, [pc, #16]	; (1a0f4 <bt_keys_update_usage+0x24>)
	last_keys_updated = keys;
   1a0e2:	6010      	str	r0, [r2, #0]
	keys->aging_counter = ++aging_counter_val;
   1a0e4:	680b      	ldr	r3, [r1, #0]
   1a0e6:	3301      	adds	r3, #1
   1a0e8:	600b      	str	r3, [r1, #0]
   1a0ea:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	       keys->aging_counter);

	if (IS_ENABLED(CONFIG_BT_KEYS_SAVE_AGING_COUNTER_ON_PAIRING)) {
		bt_keys_store(keys);
	}
}
   1a0ee:	bd08      	pop	{r3, pc}
   1a0f0:	20001fd4 	.word	0x20001fd4
   1a0f4:	20001f48 	.word	0x20001f48

0001a0f8 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
   1a0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a0fc:	4616      	mov	r6, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   1a0fe:	1dc2      	adds	r2, r0, #7
   1a100:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   1a104:	1e75      	subs	r5, r6, #1
{
   1a106:	460f      	mov	r7, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   1a108:	b2ad      	uxth	r5, r5
	*mem_head = mem_pool;
   1a10a:	6018      	str	r0, [r3, #0]
{
   1a10c:	b082      	sub	sp, #8
   1a10e:	4604      	mov	r4, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   1a110:	8016      	strh	r6, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   1a112:	2100      	movs	r1, #0
   1a114:	2204      	movs	r2, #4
   1a116:	fb07 0005 	mla	r0, r7, r5, r0
   1a11a:	f013 ff91 	bl	2e040 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   1a11e:	b1bd      	cbz	r5, 1a150 <mem_init+0x58>
   1a120:	3e02      	subs	r6, #2
   1a122:	b2b6      	uxth	r6, r6
   1a124:	fb06 7307 	mla	r3, r6, r7, r7
   1a128:	fb06 f807 	mul.w	r8, r6, r7
   1a12c:	441c      	add	r4, r3
   1a12e:	eba8 0803 	sub.w	r8, r8, r3
   1a132:	2500      	movs	r5, #0
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   1a134:	2204      	movs	r2, #4
   1a136:	eb04 0008 	add.w	r0, r4, r8
   1a13a:	eb0d 0102 	add.w	r1, sp, r2
		next = (uint32_t)((uint8_t *) mem_pool +
   1a13e:	9401      	str	r4, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   1a140:	f013 ff73 	bl	2e02a <memcpy>
	while (mem_count--) {
   1a144:	42b5      	cmp	r5, r6
   1a146:	eba4 0407 	sub.w	r4, r4, r7
   1a14a:	f105 0501 	add.w	r5, r5, #1
   1a14e:	d1f1      	bne.n	1a134 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
   1a150:	b002      	add	sp, #8
   1a152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a156:	bf00      	nop

0001a158 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   1a158:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
   1a15a:	6805      	ldr	r5, [r0, #0]
{
   1a15c:	b082      	sub	sp, #8
	if (*mem_head) {
   1a15e:	b195      	cbz	r5, 1a186 <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   1a160:	1deb      	adds	r3, r5, #7
   1a162:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   1a166:	2204      	movs	r2, #4
   1a168:	4604      	mov	r4, r0
   1a16a:	4629      	mov	r1, r5
   1a16c:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   1a170:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   1a172:	f013 ff5a 	bl	2e02a <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   1a176:	9b01      	ldr	r3, [sp, #4]
   1a178:	b123      	cbz	r3, 1a184 <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   1a17a:	1dda      	adds	r2, r3, #7
   1a17c:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   1a180:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   1a182:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
   1a184:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
   1a186:	4628      	mov	r0, r5
   1a188:	b002      	add	sp, #8
   1a18a:	bd70      	pop	{r4, r5, r6, pc}

0001a18c <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   1a18c:	680b      	ldr	r3, [r1, #0]
{
   1a18e:	b570      	push	{r4, r5, r6, lr}
   1a190:	460c      	mov	r4, r1
   1a192:	4605      	mov	r5, r0
	if (*mem_head) {
   1a194:	b183      	cbz	r3, 1a1b8 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   1a196:	3307      	adds	r3, #7
   1a198:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
   1a19c:	881e      	ldrh	r6, [r3, #0]
   1a19e:	3601      	adds	r6, #1
   1a1a0:	b2b6      	uxth	r6, r6

	memcpy(mem, mem_head, sizeof(mem));
   1a1a2:	2204      	movs	r2, #4
   1a1a4:	4621      	mov	r1, r4
   1a1a6:	4628      	mov	r0, r5
   1a1a8:	f013 ff3f 	bl	2e02a <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   1a1ac:	1deb      	adds	r3, r5, #7
   1a1ae:	f023 0303 	bic.w	r3, r3, #3
   1a1b2:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
   1a1b4:	6025      	str	r5, [r4, #0]
}
   1a1b6:	bd70      	pop	{r4, r5, r6, pc}
   1a1b8:	2601      	movs	r6, #1
   1a1ba:	e7f2      	b.n	1a1a2 <mem_release+0x16>

0001a1bc <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   1a1bc:	fb02 0001 	mla	r0, r2, r1, r0
   1a1c0:	4770      	bx	lr
   1a1c2:	bf00      	nop

0001a1c4 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size;
   1a1c4:	1a40      	subs	r0, r0, r1
   1a1c6:	fb90 f0f2 	sdiv	r0, r0, r2
}
   1a1ca:	b280      	uxth	r0, r0
   1a1cc:	4770      	bx	lr
   1a1ce:	bf00      	nop

0001a1d0 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
   1a1d0:	1e53      	subs	r3, r2, #1
	src += len;
   1a1d2:	4411      	add	r1, r2
	while (len--) {
   1a1d4:	b29b      	uxth	r3, r3
   1a1d6:	b142      	cbz	r2, 1a1ea <mem_rcopy+0x1a>
   1a1d8:	43db      	mvns	r3, r3
   1a1da:	3801      	subs	r0, #1
   1a1dc:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
   1a1de:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   1a1e2:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
   1a1e6:	4291      	cmp	r1, r2
   1a1e8:	d1f9      	bne.n	1a1de <mem_rcopy+0xe>
	}
}
   1a1ea:	4770      	bx	lr

0001a1ec <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   1a1ec:	4401      	add	r1, r0
   1a1ee:	e002      	b.n	1a1f6 <mem_nz+0xa>
		if (*src++) {
   1a1f0:	f810 3b01 	ldrb.w	r3, [r0], #1
   1a1f4:	b91b      	cbnz	r3, 1a1fe <mem_nz+0x12>
	while (len--) {
   1a1f6:	4288      	cmp	r0, r1
   1a1f8:	d1fa      	bne.n	1a1f0 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
   1a1fa:	2000      	movs	r0, #0
   1a1fc:	4770      	bx	lr
			return 1;
   1a1fe:	2001      	movs	r0, #1
}
   1a200:	4770      	bx	lr
   1a202:	bf00      	nop

0001a204 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   1a204:	6010      	str	r0, [r2, #0]
   1a206:	6008      	str	r0, [r1, #0]

	return link;
}
   1a208:	4770      	bx	lr
   1a20a:	bf00      	nop

0001a20c <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   1a20c:	680a      	ldr	r2, [r1, #0]
{
   1a20e:	4603      	mov	r3, r0
	if (*head != *tail) {
   1a210:	6800      	ldr	r0, [r0, #0]
   1a212:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
   1a214:	bf05      	ittet	eq
   1a216:	2200      	moveq	r2, #0
   1a218:	600a      	streq	r2, [r1, #0]
		return NULL;
   1a21a:	2000      	movne	r0, #0
	*head = *tail = NULL;
   1a21c:	601a      	streq	r2, [r3, #0]

	return old_head;
}
   1a21e:	4770      	bx	lr

0001a220 <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   1a220:	f8d2 c000 	ldr.w	ip, [r2]
   1a224:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   1a228:	f8d2 c000 	ldr.w	ip, [r2]
   1a22c:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
   1a230:	6010      	str	r0, [r2, #0]

	return link;
}
   1a232:	4770      	bx	lr

0001a234 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   1a234:	4288      	cmp	r0, r1
   1a236:	d003      	beq.n	1a240 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   1a238:	b11a      	cbz	r2, 1a242 <memq_peek+0xe>
		*mem = head->mem;
   1a23a:	6843      	ldr	r3, [r0, #4]
   1a23c:	6013      	str	r3, [r2, #0]
   1a23e:	4770      	bx	lr
		return NULL;
   1a240:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   1a242:	4770      	bx	lr

0001a244 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   1a244:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   1a246:	4283      	cmp	r3, r0
   1a248:	d009      	beq.n	1a25e <memq_dequeue+0x1a>
	if (mem) {
   1a24a:	b12a      	cbz	r2, 1a258 <memq_dequeue+0x14>
		*mem = head->mem;
   1a24c:	6858      	ldr	r0, [r3, #4]
   1a24e:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   1a250:	681a      	ldr	r2, [r3, #0]
   1a252:	600a      	str	r2, [r1, #0]

	return old_head;
}
   1a254:	4618      	mov	r0, r3
   1a256:	4770      	bx	lr
	if (old_head == NULL) {
   1a258:	2b00      	cmp	r3, #0
   1a25a:	d1f9      	bne.n	1a250 <memq_dequeue+0xc>
   1a25c:	e7fa      	b.n	1a254 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
   1a25e:	2300      	movs	r3, #0
   1a260:	e7f8      	b.n	1a254 <memq_dequeue+0x10>
   1a262:	bf00      	nop

0001a264 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   1a264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a268:	f8df 8030 	ldr.w	r8, [pc, #48]	; 1a29c <mayfly_init+0x38>
   1a26c:	4e0c      	ldr	r6, [pc, #48]	; (1a2a0 <mayfly_init+0x3c>)
   1a26e:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
   1a270:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
   1a274:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
   1a276:	1d22      	adds	r2, r4, #4
   1a278:	4621      	mov	r1, r4
   1a27a:	4628      	mov	r0, r5
		while (caller_id--) {
   1a27c:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
   1a27e:	f7ff ffc1 	bl	1a204 <memq_init>
		while (caller_id--) {
   1a282:	42b4      	cmp	r4, r6
   1a284:	f1a5 0508 	sub.w	r5, r5, #8
   1a288:	d1f5      	bne.n	1a276 <mayfly_init+0x12>
	while (callee_id--) {
   1a28a:	3f04      	subs	r7, #4
   1a28c:	1d3b      	adds	r3, r7, #4
   1a28e:	f1a8 0820 	sub.w	r8, r8, #32
   1a292:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   1a296:	d1eb      	bne.n	1a270 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   1a298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a29c:	20002050 	.word	0x20002050
   1a2a0:	200020e0 	.word	0x200020e0

0001a2a4 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
   1a2a4:	b410      	push	{r4}
   1a2a6:	4603      	mov	r3, r0
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
   1a2a8:	4c15      	ldr	r4, [pc, #84]	; (1a300 <mayfly_enable+0x5c>)
{
   1a2aa:	468c      	mov	ip, r1
	if (enable) {
   1a2ac:	b192      	cbz	r2, 1a2d4 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
   1a2ae:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   1a2b2:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
   1a2b6:	0100      	lsls	r0, r0, #4
   1a2b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1a2bc:	4421      	add	r1, r4
   1a2be:	7a48      	ldrb	r0, [r1, #9]
   1a2c0:	7a0c      	ldrb	r4, [r1, #8]
   1a2c2:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   1a2c4:	bf04      	itt	eq
   1a2c6:	3001      	addeq	r0, #1
   1a2c8:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
   1a2ca:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
   1a2cc:	4661      	mov	r1, ip
   1a2ce:	4618      	mov	r0, r3
   1a2d0:	f00d b908 	b.w	274e4 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   1a2d4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   1a2d8:	0112      	lsls	r2, r2, #4
   1a2da:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1a2de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1a2e2:	4423      	add	r3, r4
   1a2e4:	7a9c      	ldrb	r4, [r3, #10]
   1a2e6:	7ada      	ldrb	r2, [r3, #11]
   1a2e8:	42a2      	cmp	r2, r4
   1a2ea:	d001      	beq.n	1a2f0 <mayfly_enable+0x4c>
}
   1a2ec:	bc10      	pop	{r4}
   1a2ee:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
   1a2f0:	3201      	adds	r2, #1
   1a2f2:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   1a2f4:	4b03      	ldr	r3, [pc, #12]	; (1a304 <mayfly_enable+0x60>)
   1a2f6:	2201      	movs	r2, #1
   1a2f8:	545a      	strb	r2, [r3, r1]
}
   1a2fa:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
   1a2fc:	f00d b948 	b.w	27590 <mayfly_pend>
   1a300:	2000205c 	.word	0x2000205c
   1a304:	20002058 	.word	0x20002058

0001a308 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
   1a308:	b570      	push	{r4, r5, r6, lr}
   1a30a:	b082      	sub	sp, #8
   1a30c:	4606      	mov	r6, r0
   1a30e:	9101      	str	r1, [sp, #4]
   1a310:	461c      	mov	r4, r3
   1a312:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   1a314:	b32a      	cbz	r2, 1a362 <mayfly_enqueue+0x5a>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   1a316:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   1a318:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   1a31a:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   1a31c:	f012 0203 	ands.w	r2, r2, #3
   1a320:	d005      	beq.n	1a32e <mayfly_enqueue+0x26>
		if (chain) {
			if (state != 1U) {
   1a322:	2a01      	cmp	r2, #1
   1a324:	d042      	beq.n	1a3ac <mayfly_enqueue+0xa4>
				/* mark as ready in queue */
				m->_req = ack + 1;
   1a326:	3301      	adds	r3, #1
   1a328:	b2db      	uxtb	r3, r3
   1a32a:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
   1a32c:	e00f      	b.n	1a34e <mayfly_enqueue+0x46>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
   1a32e:	3301      	adds	r3, #1
   1a330:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   1a332:	2130      	movs	r1, #48	; 0x30
	m->_req = ack + 1;
   1a334:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   1a336:	2304      	movs	r3, #4
   1a338:	fb11 3105 	smlabb	r1, r1, r5, r3
   1a33c:	4a1c      	ldr	r2, [pc, #112]	; (1a3b0 <mayfly_enqueue+0xa8>)
   1a33e:	6860      	ldr	r0, [r4, #4]
   1a340:	230c      	movs	r3, #12
   1a342:	fb13 1306 	smlabb	r3, r3, r6, r1
   1a346:	441a      	add	r2, r3
   1a348:	4621      	mov	r1, r4
   1a34a:	f7ff ff69 	bl	1a220 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
   1a34e:	4b19      	ldr	r3, [pc, #100]	; (1a3b4 <mayfly_enqueue+0xac>)
   1a350:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   1a352:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
   1a354:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
   1a356:	4629      	mov	r1, r5
   1a358:	f00d f91a 	bl	27590 <mayfly_pend>

	return 0;
   1a35c:	2000      	movs	r0, #0
}
   1a35e:	b002      	add	sp, #8
   1a360:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   1a362:	f00d f8ff 	bl	27564 <mayfly_prio_is_equal>
   1a366:	2800      	cmp	r0, #0
   1a368:	d0d5      	beq.n	1a316 <mayfly_enqueue+0xe>
		!mayfly_is_enabled(caller_id, callee_id) ||
   1a36a:	4629      	mov	r1, r5
   1a36c:	4630      	mov	r0, r6
   1a36e:	f00d f8d9 	bl	27524 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   1a372:	2800      	cmp	r0, #0
   1a374:	d0cf      	beq.n	1a316 <mayfly_enqueue+0xe>
		(mft[callee_id][caller_id].disable_req !=
   1a376:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   1a37a:	0112      	lsls	r2, r2, #4
   1a37c:	490c      	ldr	r1, [pc, #48]	; (1a3b0 <mayfly_enqueue+0xa8>)
   1a37e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   1a382:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1a386:	440b      	add	r3, r1
		!mayfly_is_enabled(caller_id, callee_id) ||
   1a388:	7a9a      	ldrb	r2, [r3, #10]
   1a38a:	7adb      	ldrb	r3, [r3, #11]
   1a38c:	429a      	cmp	r2, r3
   1a38e:	d1c2      	bne.n	1a316 <mayfly_enqueue+0xe>
	state = (m->_req - ack) & 0x03;
   1a390:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   1a392:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   1a394:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   1a396:	0792      	lsls	r2, r2, #30
   1a398:	d002      	beq.n	1a3a0 <mayfly_enqueue+0x98>
		m->_req = ack + 2;
   1a39a:	3302      	adds	r3, #2
   1a39c:	b2db      	uxtb	r3, r3
   1a39e:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
   1a3a0:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   1a3a4:	4798      	blx	r3
		return 0;
   1a3a6:	2000      	movs	r0, #0
}
   1a3a8:	b002      	add	sp, #8
   1a3aa:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   1a3ac:	4610      	mov	r0, r2
   1a3ae:	e7d6      	b.n	1a35e <mayfly_enqueue+0x56>
   1a3b0:	2000205c 	.word	0x2000205c
   1a3b4:	20002058 	.word	0x20002058

0001a3b8 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
   1a3b8:	4a50      	ldr	r2, [pc, #320]	; (1a4fc <mayfly_run+0x144>)
   1a3ba:	5c13      	ldrb	r3, [r2, r0]
   1a3bc:	2b00      	cmp	r3, #0
   1a3be:	f000 809b 	beq.w	1a4f8 <mayfly_run+0x140>
{
   1a3c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return;
	}
	mfp[callee_id] = 0U;
   1a3c6:	2300      	movs	r3, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1a3c8:	4f4d      	ldr	r7, [pc, #308]	; (1a500 <mayfly_run+0x148>)
	mfp[callee_id] = 0U;
   1a3ca:	5413      	strb	r3, [r2, r0]
{
   1a3cc:	b087      	sub	sp, #28
	uint8_t enable = 0U;
   1a3ce:	461a      	mov	r2, r3
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1a3d0:	f04f 0b3c 	mov.w	fp, #60	; 0x3c

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;
   1a3d4:	e9cd 2001 	strd	r2, r0, [sp, #4]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1a3d8:	fb0b 7b00 	mla	fp, fp, r0, r7
	uint8_t enable = 0U;
   1a3dc:	9303      	str	r3, [sp, #12]
   1a3de:	eb00 0340 	add.w	r3, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1a3e2:	f10b 0804 	add.w	r8, fp, #4
   1a3e6:	eb07 1703 	add.w	r7, r7, r3, lsl #4
	while (caller_id--) {
   1a3ea:	f04f 0903 	mov.w	r9, #3
		struct mayfly *m = 0;
   1a3ee:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
   1a3f0:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   1a3f4:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
   1a3f6:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
   1a3f8:	f7ff ff1c 	bl	1a234 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
   1a3fc:	f107 0624 	add.w	r6, r7, #36	; 0x24
   1a400:	4683      	mov	fp, r0
   1a402:	2800      	cmp	r0, #0
   1a404:	d034      	beq.n	1a470 <mayfly_run+0xb8>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
   1a406:	9c05      	ldr	r4, [sp, #20]
   1a408:	7863      	ldrb	r3, [r4, #1]
   1a40a:	7825      	ldrb	r5, [r4, #0]
   1a40c:	1aed      	subs	r5, r5, r3
   1a40e:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
   1a412:	2d01      	cmp	r5, #1
   1a414:	d106      	bne.n	1a424 <mayfly_run+0x6c>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
   1a416:	3b01      	subs	r3, #1
   1a418:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
   1a41a:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
   1a41e:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
   1a420:	9c05      	ldr	r4, [sp, #20]
	if (((req - m->_ack) & 0x03) != 1U) {
   1a422:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
   1a424:	7820      	ldrb	r0, [r4, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
   1a426:	1ac3      	subs	r3, r0, r3
   1a428:	f003 0303 	and.w	r3, r3, #3
   1a42c:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
   1a42e:	f04f 0200 	mov.w	r2, #0
   1a432:	4631      	mov	r1, r6
	req = m->_req;
   1a434:	fa5f fa80 	uxtb.w	sl, r0
	if (((req - m->_ack) & 0x03) != 1U) {
   1a438:	d00f      	beq.n	1a45a <mayfly_run+0xa2>
		memq_dequeue(mft[callee_id][caller_id].tail,
   1a43a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1a43c:	f7ff ff02 	bl	1a244 <memq_dequeue>
		ack = m->_ack;
   1a440:	f894 c001 	ldrb.w	ip, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   1a444:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
   1a446:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   1a44a:	eba3 030c 	sub.w	r3, r3, ip
   1a44e:	f003 0303 	and.w	r3, r3, #3
   1a452:	2b01      	cmp	r3, #1
		m->_ack = req;
   1a454:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   1a458:	d046      	beq.n	1a4e8 <mayfly_run+0x130>

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
   1a45a:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   1a45e:	aa05      	add	r2, sp, #20
   1a460:	f7ff fee8 	bl	1a234 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
   1a464:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   1a466:	9000      	str	r0, [sp, #0]
   1a468:	4683      	mov	fp, r0
			if (state == 1U) {
   1a46a:	d02b      	beq.n	1a4c4 <mayfly_run+0x10c>
		while (link) {
   1a46c:	2800      	cmp	r0, #0
   1a46e:	d1ca      	bne.n	1a406 <mayfly_run+0x4e>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
   1a470:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   1a474:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   1a478:	429a      	cmp	r2, r3
   1a47a:	d003      	beq.n	1a484 <mayfly_run+0xcc>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
   1a47c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
   1a480:	2301      	movs	r3, #1
   1a482:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
   1a484:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   1a488:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   1a48c:	429a      	cmp	r2, r3
   1a48e:	d003      	beq.n	1a498 <mayfly_run+0xe0>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
   1a490:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
   1a494:	2301      	movs	r3, #1
   1a496:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
   1a498:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   1a49c:	fa5f f989 	uxtb.w	r9, r9
   1a4a0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   1a4a4:	f1a7 070c 	sub.w	r7, r7, #12
   1a4a8:	d1a1      	bne.n	1a3ee <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   1a4aa:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
   1a4ae:	b1c3      	cbz	r3, 1a4e2 <mayfly_run+0x12a>
   1a4b0:	9b03      	ldr	r3, [sp, #12]
   1a4b2:	b9b3      	cbnz	r3, 1a4e2 <mayfly_run+0x12a>
		mayfly_enable_cb(callee_id, callee_id, 0);
   1a4b4:	461a      	mov	r2, r3
   1a4b6:	4651      	mov	r1, sl
   1a4b8:	4650      	mov	r0, sl
	}
}
   1a4ba:	b007      	add	sp, #28
   1a4bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
   1a4c0:	f00d b810 	b.w	274e4 <mayfly_enable_cb>
				if (caller_id || link) {
   1a4c4:	f1b9 0f00 	cmp.w	r9, #0
   1a4c8:	d101      	bne.n	1a4ce <mayfly_run+0x116>
   1a4ca:	2800      	cmp	r0, #0
   1a4cc:	d0d0      	beq.n	1a470 <mayfly_run+0xb8>
					mfp[callee_id] = 1U;
   1a4ce:	f8dd a008 	ldr.w	sl, [sp, #8]
   1a4d2:	4a0a      	ldr	r2, [pc, #40]	; (1a4fc <mayfly_run+0x144>)
   1a4d4:	2301      	movs	r3, #1
   1a4d6:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
   1a4da:	4651      	mov	r1, sl
   1a4dc:	4650      	mov	r0, sl
   1a4de:	f00d f857 	bl	27590 <mayfly_pend>
}
   1a4e2:	b007      	add	sp, #28
   1a4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1a4e8:	4642      	mov	r2, r8
   1a4ea:	4621      	mov	r1, r4
   1a4ec:	4658      	mov	r0, fp
			m->_ack = ack;
   1a4ee:	f884 c001 	strb.w	ip, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1a4f2:	f7ff fe95 	bl	1a220 <memq_enqueue>
   1a4f6:	e7b0      	b.n	1a45a <mayfly_run+0xa2>
   1a4f8:	4770      	bx	lr
   1a4fa:	bf00      	nop
   1a4fc:	20002058 	.word	0x20002058
   1a500:	2000205c 	.word	0x2000205c

0001a504 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(const uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
   1a504:	1e4b      	subs	r3, r1, #1
   1a506:	b2db      	uxtb	r3, r3
   1a508:	b171      	cbz	r1, 1a528 <util_ones_count_get+0x24>
   1a50a:	1e41      	subs	r1, r0, #1
   1a50c:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
   1a510:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
   1a512:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
   1a516:	b123      	cbz	r3, 1a522 <util_ones_count_get+0x1e>
			bite &= (bite - 1);
   1a518:	1e5a      	subs	r2, r3, #1
			one_count++;
   1a51a:	3001      	adds	r0, #1
		while (bite) {
   1a51c:	4013      	ands	r3, r2
			one_count++;
   1a51e:	b2c0      	uxtb	r0, r0
		while (bite) {
   1a520:	d1fa      	bne.n	1a518 <util_ones_count_get+0x14>
	while (octets_len--) {
   1a522:	4561      	cmp	r1, ip
   1a524:	d1f5      	bne.n	1a512 <util_ones_count_get+0xe>
   1a526:	4770      	bx	lr
	uint8_t one_count = 0U;
   1a528:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
   1a52a:	4770      	bx	lr

0001a52c <ticker_dequeue>:
 * @return Total ticks until expiration for dequeued ticker node, or 0 if
 * node was not found
 * @internal
 */
static uint32_t ticker_dequeue(struct ticker_instance *instance, uint8_t id)
{
   1a52c:	b530      	push	{r4, r5, lr}

	/* Find the ticker's position in ticker node list while accumulating
	 * ticks_to_expire
	 */
	node = &instance->nodes[0];
	previous = instance->ticker_id_head;
   1a52e:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->nodes[0];
   1a530:	6805      	ldr	r5, [r0, #0]
	current = previous;
	total = 0U;
	ticker_current = 0;
	while (current != TICKER_NULL) {
   1a532:	2bff      	cmp	r3, #255	; 0xff
   1a534:	d014      	beq.n	1a560 <ticker_dequeue+0x34>
		ticker_current = &node[current];
   1a536:	eb03 0243 	add.w	r2, r3, r3, lsl #1

		if (current == id) {
   1a53a:	428b      	cmp	r3, r1
		ticker_current = &node[current];
   1a53c:	eb05 1202 	add.w	r2, r5, r2, lsl #4
		if (current == id) {
   1a540:	d028      	beq.n	1a594 <ticker_dequeue+0x68>
	total = 0U;
   1a542:	f04f 0c00 	mov.w	ip, #0
   1a546:	e001      	b.n	1a54c <ticker_dequeue+0x20>
		if (current == id) {
   1a548:	4299      	cmp	r1, r3
   1a54a:	d00b      	beq.n	1a564 <ticker_dequeue+0x38>
			break;
		}

		total += ticker_current->ticks_to_expire;
   1a54c:	469e      	mov	lr, r3
		previous = current;
		current = ticker_current->next;
   1a54e:	7813      	ldrb	r3, [r2, #0]
		total += ticker_current->ticks_to_expire;
   1a550:	6894      	ldr	r4, [r2, #8]
	while (current != TICKER_NULL) {
   1a552:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
   1a554:	eb03 0243 	add.w	r2, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
   1a558:	44a4      	add	ip, r4
		ticker_current = &node[current];
   1a55a:	eb05 1202 	add.w	r2, r5, r2, lsl #4
	while (current != TICKER_NULL) {
   1a55e:	d1f3      	bne.n	1a548 <ticker_dequeue+0x1c>
	}

	if (current == TICKER_NULL) {
		/* Ticker not in active list */
		return 0;
   1a560:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
   1a562:	bd30      	pop	{r4, r5, pc}
	if (previous == current) {
   1a564:	4571      	cmp	r1, lr
   1a566:	d018      	beq.n	1a59a <ticker_dequeue+0x6e>
	node[previous].next = ticker_current->next;
   1a568:	7813      	ldrb	r3, [r2, #0]
	timeout = ticker_current->ticks_to_expire;
   1a56a:	6890      	ldr	r0, [r2, #8]
	node[previous].next = ticker_current->next;
   1a56c:	fa0f fe8e 	sxth.w	lr, lr
   1a570:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   1a574:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   1a578:	f805 300e 	strb.w	r3, [r5, lr]
	if (ticker_current->next != TICKER_NULL) {
   1a57c:	7813      	ldrb	r3, [r2, #0]
   1a57e:	2bff      	cmp	r3, #255	; 0xff
   1a580:	d006      	beq.n	1a590 <ticker_dequeue+0x64>
		node[ticker_current->next].ticks_to_expire += timeout;
   1a582:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1a586:	eb05 1503 	add.w	r5, r5, r3, lsl #4
   1a58a:	68ab      	ldr	r3, [r5, #8]
   1a58c:	4403      	add	r3, r0
   1a58e:	60ab      	str	r3, [r5, #8]
	return (total + timeout);
   1a590:	4460      	add	r0, ip
}
   1a592:	bd30      	pop	{r4, r5, pc}
		if (current == id) {
   1a594:	469e      	mov	lr, r3
	total = 0U;
   1a596:	f04f 0c00 	mov.w	ip, #0
		instance->ticker_id_head = ticker_current->next;
   1a59a:	7813      	ldrb	r3, [r2, #0]
   1a59c:	7743      	strb	r3, [r0, #29]
   1a59e:	e7e4      	b.n	1a56a <ticker_dequeue+0x3e>

0001a5a0 <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   1a5a0:	eba2 0c01 	sub.w	ip, r2, r1
   1a5a4:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
   1a5a8:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   1a5aa:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   1a5ac:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   1a5ae:	d10a      	bne.n	1a5c6 <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1a5b0:	f02c 417f 	bic.w	r1, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   1a5b4:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   1a5b6:	42a3      	cmp	r3, r4
   1a5b8:	d914      	bls.n	1a5e4 <ticks_to_expire_prep+0x44>
		ticks_to_expire -= ticks_to_expire_minus;
   1a5ba:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
   1a5bc:	2100      	movs	r1, #0
}
   1a5be:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
   1a5c0:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   1a5c2:	6141      	str	r1, [r0, #20]
}
   1a5c4:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1a5c6:	1a89      	subs	r1, r1, r2
   1a5c8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   1a5cc:	428b      	cmp	r3, r1
   1a5ce:	d806      	bhi.n	1a5de <ticks_to_expire_prep+0x3e>
			ticks_to_expire_minus +=
   1a5d0:	4421      	add	r1, r4
   1a5d2:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
   1a5d4:	2300      	movs	r3, #0
}
   1a5d6:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
   1a5d8:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   1a5da:	6141      	str	r1, [r0, #20]
}
   1a5dc:	4770      	bx	lr
			ticks_to_expire -= delta_current_start;
   1a5de:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   1a5e0:	42a3      	cmp	r3, r4
   1a5e2:	d8ea      	bhi.n	1a5ba <ticks_to_expire_prep+0x1a>
		ticks_to_expire_minus -= ticks_to_expire;
   1a5e4:	1ae1      	subs	r1, r4, r3
   1a5e6:	e7f5      	b.n	1a5d4 <ticks_to_expire_prep+0x34>

0001a5e8 <ticker_job_list_insert>:
{
   1a5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5ec:	b087      	sub	sp, #28
   1a5ee:	4603      	mov	r3, r0
	count_user = instance->count_user;
   1a5f0:	7a42      	ldrb	r2, [r0, #9]
{
   1a5f2:	9001      	str	r0, [sp, #4]
	node = &instance->nodes[0];
   1a5f4:	6800      	ldr	r0, [r0, #0]
   1a5f6:	9002      	str	r0, [sp, #8]
	users = &instance->users[0];
   1a5f8:	6858      	ldr	r0, [r3, #4]
   1a5fa:	9005      	str	r0, [sp, #20]
	while (count_user--) {
   1a5fc:	2a00      	cmp	r2, #0
   1a5fe:	f000 80f4 	beq.w	1a7ea <ticker_job_list_insert+0x202>
   1a602:	1e53      	subs	r3, r2, #1
   1a604:	b2db      	uxtb	r3, r3
   1a606:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   1a60a:	460f      	mov	r7, r1
   1a60c:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
   1a60e:	9b03      	ldr	r3, [sp, #12]
   1a610:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
   1a612:	785e      	ldrb	r6, [r3, #1]
		user_ops = (void *)&user->user_op[0];
   1a614:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
   1a616:	2fff      	cmp	r7, #255	; 0xff
   1a618:	d05e      	beq.n	1a6d8 <ticker_job_list_insert+0xf0>
				ticker = &node[id_insert];
   1a61a:	eb07 0447 	add.w	r4, r7, r7, lsl #1
   1a61e:	9b02      	ldr	r3, [sp, #8]
   1a620:	ea4f 1a04 	mov.w	sl, r4, lsl #4
   1a624:	46b8      	mov	r8, r7
				insert_head = ticker->next;
   1a626:	f813 700a 	ldrb.w	r7, [r3, sl]
				ticker = &node[id_insert];
   1a62a:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				user_op = NULL;
   1a62e:	2500      	movs	r5, #0
	node = &instance->nodes[0];
   1a630:	9b01      	ldr	r3, [sp, #4]
	ticker->next = TICKER_NULL;
   1a632:	f04f 09ff 	mov.w	r9, #255	; 0xff
   1a636:	f884 9000 	strb.w	r9, [r4]
	node = &instance->nodes[0];
   1a63a:	f8d3 e000 	ldr.w	lr, [r3]
	current = instance->ticker_id_head;
   1a63e:	7f5a      	ldrb	r2, [r3, #29]
	ticker_new = &node[id];
   1a640:	eb0e 0b0a 	add.w	fp, lr, sl
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1a644:	454a      	cmp	r2, r9
	ticks_to_expire = ticker_new->ticks_to_expire;
   1a646:	f8db 1008 	ldr.w	r1, [fp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1a64a:	d10f      	bne.n	1a66c <ticker_job_list_insert+0x84>
   1a64c:	e0c8      	b.n	1a7e0 <ticker_job_list_insert+0x1f8>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   1a64e:	1a09      	subs	r1, r1, r0
   1a650:	d106      	bne.n	1a660 <ticker_job_list_insert+0x78>
   1a652:	f8bb a01e 	ldrh.w	sl, [fp, #30]
   1a656:	f8bc c01e 	ldrh.w	ip, [ip, #30]
   1a65a:	45e2      	cmp	sl, ip
   1a65c:	f200 8086 	bhi.w	1a76c <ticker_job_list_insert+0x184>
		current = ticker_current->next;
   1a660:	f81e 3003 	ldrb.w	r3, [lr, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1a664:	2bff      	cmp	r3, #255	; 0xff
   1a666:	4691      	mov	r9, r2
   1a668:	d072      	beq.n	1a750 <ticker_job_list_insert+0x168>
   1a66a:	461a      	mov	r2, r3
		(ticker_current = &node[current])->ticks_to_expire))) {
   1a66c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   1a670:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
   1a674:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
   1a676:	f8dc 0008 	ldr.w	r0, [ip, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1a67a:	4288      	cmp	r0, r1
   1a67c:	d9e7      	bls.n	1a64e <ticker_job_list_insert+0x66>
	if (previous == TICKER_NULL) {
   1a67e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
   1a682:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   1a686:	f88b 2000 	strb.w	r2, [fp]
	if (previous == TICKER_NULL) {
   1a68a:	d166      	bne.n	1a75a <ticker_job_list_insert+0x172>
		instance->ticker_id_head = id;
   1a68c:	9b01      	ldr	r3, [sp, #4]
   1a68e:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
   1a692:	2aff      	cmp	r2, #255	; 0xff
   1a694:	d008      	beq.n	1a6a8 <ticker_job_list_insert+0xc0>
		node[current].ticks_to_expire -= ticks_to_expire;
   1a696:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1a69a:	eb0e 1e02 	add.w	lr, lr, r2, lsl #4
   1a69e:	f8de 3008 	ldr.w	r3, [lr, #8]
   1a6a2:	1a5b      	subs	r3, r3, r1
   1a6a4:	f8ce 3008 	str.w	r3, [lr, #8]
	ticker->req = ticker->ack + 1;
   1a6a8:	78a3      	ldrb	r3, [r4, #2]
   1a6aa:	3301      	adds	r3, #1
   1a6ac:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   1a6ae:	2d00      	cmp	r5, #0
   1a6b0:	d0b1      	beq.n	1a616 <ticker_job_list_insert+0x2e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1a6b2:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
   1a6b6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1a6b8:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   1a6ba:	2200      	movs	r2, #0
   1a6bc:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   1a6be:	b113      	cbz	r3, 1a6c6 <ticker_job_list_insert+0xde>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1a6c0:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1a6c2:	4610      	mov	r0, r2
   1a6c4:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1a6c6:	6863      	ldr	r3, [r4, #4]
   1a6c8:	2b00      	cmp	r3, #0
   1a6ca:	d1a4      	bne.n	1a616 <ticker_job_list_insert+0x2e>
					ticker->op_context =
   1a6cc:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
		while ((insert_head != TICKER_NULL) ||
   1a6d0:	2fff      	cmp	r7, #255	; 0xff
					ticker->op_context =
   1a6d2:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
   1a6d6:	d1a0      	bne.n	1a61a <ticker_job_list_insert+0x32>
   1a6d8:	9b03      	ldr	r3, [sp, #12]
   1a6da:	7898      	ldrb	r0, [r3, #2]
   1a6dc:	42b0      	cmp	r0, r6
   1a6de:	d02f      	beq.n	1a740 <ticker_job_list_insert+0x158>
   1a6e0:	e9dd b903 	ldrd	fp, r9, [sp, #12]
				user_op = &user_ops[user_ops_first];
   1a6e4:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   1a6e8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				if (first == user->count_user_op) {
   1a6ec:	f89b 1000 	ldrb.w	r1, [fp]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   1a6f0:	f819 3022 	ldrb.w	r3, [r9, r2, lsl #2]
				first = user_ops_first + 1;
   1a6f4:	3601      	adds	r6, #1
   1a6f6:	b2f6      	uxtb	r6, r6
					first = 0U;
   1a6f8:	42b1      	cmp	r1, r6
   1a6fa:	bf08      	it	eq
   1a6fc:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   1a6fe:	2b04      	cmp	r3, #4
				user_op = &user_ops[user_ops_first];
   1a700:	eb09 0582 	add.w	r5, r9, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   1a704:	d11a      	bne.n	1a73c <ticker_job_list_insert+0x154>
				id_insert = user_op->id;
   1a706:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
   1a70a:	9902      	ldr	r1, [sp, #8]
   1a70c:	eb08 0348 	add.w	r3, r8, r8, lsl #1
   1a710:	eb01 1403 	add.w	r4, r1, r3, lsl #4
   1a714:	ea4f 1a03 	mov.w	sl, r3, lsl #4
				      ticker->ack) & 0xff) != 0U) {
   1a718:	78a1      	ldrb	r1, [r4, #2]
				if (((ticker->req -
   1a71a:	7863      	ldrb	r3, [r4, #1]
   1a71c:	1a5b      	subs	r3, r3, r1
   1a71e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   1a722:	d025      	beq.n	1a770 <ticker_job_list_insert+0x188>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1a724:	f04f 0300 	mov.w	r3, #0
   1a728:	f809 3022 	strb.w	r3, [r9, r2, lsl #2]
	if (user_op->fp_op_func) {
   1a72c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1a72e:	2001      	movs	r0, #1
	user_op->status = status;
   1a730:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   1a732:	b10b      	cbz	r3, 1a738 <ticker_job_list_insert+0x150>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1a734:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1a736:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
   1a738:	f89b 0002 	ldrb.w	r0, [fp, #2]
   1a73c:	42b0      	cmp	r0, r6
   1a73e:	d1d1      	bne.n	1a6e4 <ticker_job_list_insert+0xfc>
	while (count_user--) {
   1a740:	9a03      	ldr	r2, [sp, #12]
   1a742:	9905      	ldr	r1, [sp, #20]
   1a744:	4291      	cmp	r1, r2
   1a746:	f1a2 0308 	sub.w	r3, r2, #8
   1a74a:	d04e      	beq.n	1a7ea <ticker_job_list_insert+0x202>
   1a74c:	9303      	str	r3, [sp, #12]
   1a74e:	e75e      	b.n	1a60e <ticker_job_list_insert+0x26>
	ticker_new->ticks_to_expire = ticks_to_expire;
   1a750:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   1a754:	f88b 3000 	strb.w	r3, [fp]
   1a758:	461a      	mov	r2, r3
		node[previous].next = id;
   1a75a:	fa0f f989 	sxth.w	r9, r9
   1a75e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
   1a762:	ea4f 1909 	mov.w	r9, r9, lsl #4
   1a766:	f80e 8009 	strb.w	r8, [lr, r9]
   1a76a:	e792      	b.n	1a692 <ticker_job_list_insert+0xaa>
   1a76c:	4601      	mov	r1, r0
   1a76e:	e786      	b.n	1a67e <ticker_job_list_insert+0x96>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   1a770:	8aaa      	ldrh	r2, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   1a772:	9901      	ldr	r1, [sp, #4]
	ticker->ext_data = start->ext_data;
   1a774:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
				ticker_job_op_start(ticker, user_op,
   1a778:	6949      	ldr	r1, [r1, #20]
	ticker->remainder_periodic = start->remainder_periodic;
   1a77a:	e9d5 ec03 	ldrd	lr, ip, [r5, #12]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   1a77e:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   1a782:	4282      	cmp	r2, r0
	ticker->ext_data = start->ext_data;
   1a784:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   1a788:	f8c4 e004 	str.w	lr, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   1a78c:	f8c4 c020 	str.w	ip, [r4, #32]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   1a790:	d024      	beq.n	1a7dc <ticker_job_list_insert+0x1f4>
		ticker->must_expire =
   1a792:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a796:	1ad3      	subs	r3, r2, r3
   1a798:	fab3 f383 	clz	r3, r3
   1a79c:	095b      	lsrs	r3, r3, #5
   1a79e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->lazy_periodic =
   1a7a2:	f64f 73fd 	movw	r3, #65533	; 0xfffd
   1a7a6:	429a      	cmp	r2, r3
   1a7a8:	bf88      	it	hi
   1a7aa:	2200      	movhi	r2, #0
	ticker->ticks_slot = start->ticks_slot;
   1a7ac:	69ab      	ldr	r3, [r5, #24]
   1a7ae:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   1a7b0:	69eb      	ldr	r3, [r5, #28]
   1a7b2:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   1a7b4:	6a2b      	ldr	r3, [r5, #32]
   1a7b6:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
   1a7b8:	68ab      	ldr	r3, [r5, #8]
   1a7ba:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
   1a7bc:	2300      	movs	r3, #0
	ticker->lazy_periodic =
   1a7be:	83a2      	strh	r2, [r4, #28]
	ticker->ticks_to_expire_minus = 0U;
   1a7c0:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   1a7c2:	686a      	ldr	r2, [r5, #4]
   1a7c4:	4620      	mov	r0, r4
	ticker->ticks_to_expire_minus = 0U;
   1a7c6:	4699      	mov	r9, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   1a7c8:	f7ff feea 	bl	1a5a0 <ticks_to_expire_prep>
	ticker->force = 1U;
   1a7cc:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
   1a7d0:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   1a7d4:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
   1a7d8:	70e3      	strb	r3, [r4, #3]
}
   1a7da:	e729      	b.n	1a630 <ticker_job_list_insert+0x48>
	ticker->lazy_periodic =
   1a7dc:	461a      	mov	r2, r3
   1a7de:	e7e5      	b.n	1a7ac <ticker_job_list_insert+0x1c4>
	ticker_new->next = current;
   1a7e0:	f80e 200a 	strb.w	r2, [lr, sl]
		instance->ticker_id_head = id;
   1a7e4:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
   1a7e8:	e75e      	b.n	1a6a8 <ticker_job_list_insert+0xc0>
}
   1a7ea:	b007      	add	sp, #28
   1a7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001a7f0 <ticker_worker>:
{
   1a7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   1a7f4:	7f82      	ldrb	r2, [r0, #30]
{
   1a7f6:	b08f      	sub	sp, #60	; 0x3c
	instance->worker_trigger = 1U;
   1a7f8:	2301      	movs	r3, #1
	if (instance->job_guard) {
   1a7fa:	9206      	str	r2, [sp, #24]
	instance->worker_trigger = 1U;
   1a7fc:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   1a7fe:	2a00      	cmp	r2, #0
   1a800:	d15b      	bne.n	1a8ba <ticker_worker+0xca>
	if (instance->ticker_id_head == TICKER_NULL) {
   1a802:	7f43      	ldrb	r3, [r0, #29]
   1a804:	2bff      	cmp	r3, #255	; 0xff
   1a806:	4681      	mov	r9, r0
   1a808:	d056      	beq.n	1a8b8 <ticker_worker+0xc8>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   1a80a:	f00c f9a1 	bl	26b50 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1a80e:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1a812:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
   1a816:	f899 801d 	ldrb.w	r8, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1a81a:	1a80      	subs	r0, r0, r2
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1a81c:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1a81e:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1a822:	f000 813c 	beq.w	1aa9e <ticker_worker+0x2ae>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   1a826:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
   1a82a:	42bb      	cmp	r3, r7
   1a82c:	bf94      	ite	ls
   1a82e:	2300      	movls	r3, #0
   1a830:	2301      	movhi	r3, #1
   1a832:	9303      	str	r3, [sp, #12]
	while (ticker_id_head != TICKER_NULL) {
   1a834:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
	node = &instance->nodes[0];
   1a838:	f8d9 b000 	ldr.w	fp, [r9]
	while (ticker_id_head != TICKER_NULL) {
   1a83c:	f000 8145 	beq.w	1aaca <ticker_worker+0x2da>
	ticks_expired = 0U;
   1a840:	f04f 0a00 	mov.w	sl, #0
			must_expire_skip = 1U;
   1a844:	f8cd 9010 	str.w	r9, [sp, #16]
		ticker = &node[ticker_id_head];
   1a848:	eb08 0848 	add.w	r8, r8, r8, lsl #1
   1a84c:	eb0b 1408 	add.w	r4, fp, r8, lsl #4
   1a850:	ea4f 1808 	mov.w	r8, r8, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
   1a854:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   1a856:	42bb      	cmp	r3, r7
   1a858:	d837      	bhi.n	1a8ca <ticker_worker+0xda>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   1a85a:	78a1      	ldrb	r1, [r4, #2]
		ticker_id_head = ticker->next;
   1a85c:	f81b 8008 	ldrb.w	r8, [fp, r8]
		ticks_elapsed -= ticks_to_expire;
   1a860:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
   1a862:	449a      	add	sl, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   1a864:	7863      	ldrb	r3, [r4, #1]
   1a866:	1a5b      	subs	r3, r3, r1
   1a868:	b2db      	uxtb	r3, r3
   1a86a:	2b01      	cmp	r3, #1
   1a86c:	d12a      	bne.n	1a8c4 <ticker_worker+0xd4>
		if (ticker->ticks_slot != 0U &&
   1a86e:	69a6      	ldr	r6, [r4, #24]
   1a870:	2e00      	cmp	r6, #0
   1a872:	d054      	beq.n	1a91e <ticker_worker+0x12e>
   1a874:	9b03      	ldr	r3, [sp, #12]
   1a876:	2b00      	cmp	r3, #0
   1a878:	d04c      	beq.n	1a914 <ticker_worker+0x124>
		int32_t lazy_current = ticker->lazy_current;
   1a87a:	8be3      	ldrh	r3, [r4, #30]
   1a87c:	9305      	str	r3, [sp, #20]
			struct ticker_ext *ext_data = ticker->ext_data;
   1a87e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
   1a880:	b13b      	cbz	r3, 1a892 <ticker_worker+0xa2>
   1a882:	681a      	ldr	r2, [r3, #0]
   1a884:	b11a      	cbz	r2, 1a88e <ticker_worker+0x9e>
			    ext_data->ticks_slot_window != 0U &&
   1a886:	7a1a      	ldrb	r2, [r3, #8]
   1a888:	2a00      	cmp	r2, #0
   1a88a:	f000 80ef 	beq.w	1aa6c <ticker_worker+0x27c>
				ext_data->reschedule_state =
   1a88e:	2200      	movs	r2, #0
   1a890:	721a      	strb	r2, [r3, #8]
			ticker->lazy_current++;
   1a892:	9a05      	ldr	r2, [sp, #20]
			if ((ticker->must_expire == 0U) ||
   1a894:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   1a898:	3201      	adds	r2, #1
   1a89a:	b292      	uxth	r2, r2
   1a89c:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   1a89e:	b178      	cbz	r0, 1a8c0 <ticker_worker+0xd0>
   1a8a0:	8ba0      	ldrh	r0, [r4, #28]
   1a8a2:	4290      	cmp	r0, r2
   1a8a4:	d20c      	bcs.n	1a8c0 <ticker_worker+0xd0>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   1a8a6:	2b00      	cmp	r3, #0
   1a8a8:	f000 80fc 	beq.w	1aaa4 <ticker_worker+0x2b4>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   1a8ac:	7a1a      	ldrb	r2, [r3, #8]
   1a8ae:	2a01      	cmp	r2, #1
   1a8b0:	d006      	beq.n	1a8c0 <ticker_worker+0xd0>
			must_expire_skip = 1U;
   1a8b2:	f04f 0c01 	mov.w	ip, #1
   1a8b6:	e036      	b.n	1a926 <ticker_worker+0x136>
		instance->worker_trigger = 0U;
   1a8b8:	77c2      	strb	r2, [r0, #31]
}
   1a8ba:	b00f      	add	sp, #60	; 0x3c
   1a8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
   1a8c0:	3901      	subs	r1, #1
   1a8c2:	70a1      	strb	r1, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
   1a8c4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1a8c8:	d1be      	bne.n	1a848 <ticker_worker+0x58>
   1a8ca:	f8dd 9010 	ldr.w	r9, [sp, #16]
   1a8ce:	4651      	mov	r1, sl
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   1a8d0:	f899 300b 	ldrb.w	r3, [r9, #11]
   1a8d4:	f899 200a 	ldrb.w	r2, [r9, #10]
   1a8d8:	429a      	cmp	r2, r3
   1a8da:	d10a      	bne.n	1a8f2 <ticker_worker+0x102>
	uint8_t idx = *ticks_elapsed_index + 1;
   1a8dc:	3201      	adds	r2, #1
   1a8de:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
   1a8e0:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1a8e2:	bf1c      	itt	ne
   1a8e4:	4613      	movne	r3, r2
   1a8e6:	9306      	strne	r3, [sp, #24]
	*ticks_elapsed_index = idx;
   1a8e8:	9a06      	ldr	r2, [sp, #24]
   1a8ea:	f889 200b 	strb.w	r2, [r9, #11]
   1a8ee:	bf08      	it	eq
   1a8f0:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1a8f2:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1a8f6:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1a8fa:	60d9      	str	r1, [r3, #12]
	instance->worker_trigger = 0U;
   1a8fc:	2200      	movs	r2, #0
   1a8fe:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1a902:	464b      	mov	r3, r9
   1a904:	2201      	movs	r2, #1
   1a906:	2104      	movs	r1, #4
   1a908:	2003      	movs	r0, #3
   1a90a:	46a4      	mov	ip, r4
}
   1a90c:	b00f      	add	sp, #60	; 0x3c
   1a90e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1a912:	4760      	bx	ip
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   1a914:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   1a918:	9307      	str	r3, [sp, #28]
   1a91a:	3380      	adds	r3, #128	; 0x80
   1a91c:	d141      	bne.n	1a9a2 <ticker_worker+0x1b2>
		if (ticker->ext_data) {
   1a91e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1a920:	b1f3      	cbz	r3, 1a960 <ticker_worker+0x170>
   1a922:	f04f 0c00 	mov.w	ip, #0
			ticker->ext_data->ticks_drift = 0U;
   1a926:	2200      	movs	r2, #0
			ticker->ext_data->reschedule_state =
   1a928:	721a      	strb	r2, [r3, #8]
		if (ticker->timeout_func) {
   1a92a:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   1a92c:	1e48      	subs	r0, r1, #1
			ticks_drift = ticker->ext_data->ticks_drift;
   1a92e:	6859      	ldr	r1, [r3, #4]
			ticker->ext_data->ticks_drift = 0U;
   1a930:	605a      	str	r2, [r3, #4]
		ticker->ack--;
   1a932:	70a0      	strb	r0, [r4, #2]
		if (ticker->timeout_func) {
   1a934:	2d00      	cmp	r5, #0
   1a936:	d0c5      	beq.n	1a8c4 <ticker_worker+0xd4>
					   ticks_expired -
   1a938:	9b04      	ldr	r3, [sp, #16]
   1a93a:	6960      	ldr	r0, [r4, #20]
   1a93c:	695b      	ldr	r3, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
   1a93e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1a940:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
   1a942:	ebaa 0000 	sub.w	r0, sl, r0
   1a946:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   1a948:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			uint8_t next_force = (ticker_next->force > ticker->force);
   1a94c:	78e3      	ldrb	r3, [r4, #3]
			ticker->timeout_func(ticks_at_expire,
   1a94e:	f1bc 0f00 	cmp.w	ip, #0
   1a952:	d016      	beq.n	1a982 <ticker_worker+0x192>
   1a954:	e9cd 3600 	strd	r3, r6, [sp]
   1a958:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a95c:	47a8      	blx	r5
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1a95e:	e7b1      	b.n	1a8c4 <ticker_worker+0xd4>
		if (ticker->timeout_func) {
   1a960:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   1a962:	3901      	subs	r1, #1
   1a964:	70a1      	strb	r1, [r4, #2]
		if (ticker->timeout_func) {
   1a966:	2d00      	cmp	r5, #0
   1a968:	d0ac      	beq.n	1a8c4 <ticker_worker+0xd4>
			ticks_drift = 0U;
   1a96a:	4619      	mov	r1, r3
					   ticks_expired -
   1a96c:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   1a96e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1a970:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
   1a972:	ebaa 0003 	sub.w	r0, sl, r3
   1a976:	9b04      	ldr	r3, [sp, #16]
   1a978:	695b      	ldr	r3, [r3, #20]
   1a97a:	4418      	add	r0, r3
			uint8_t next_force = (ticker_next->force > ticker->force);
   1a97c:	78e3      	ldrb	r3, [r4, #3]
			ticks_at_expire = (instance->ticks_current +
   1a97e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   1a982:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
   1a986:	e9cd 3600 	strd	r3, r6, [sp]
   1a98a:	4663      	mov	r3, ip
   1a98c:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
   1a98e:	69a3      	ldr	r3, [r4, #24]
					slot_reserved = 1U;
   1a990:	2b00      	cmp	r3, #0
   1a992:	9b03      	ldr	r3, [sp, #12]
   1a994:	bf18      	it	ne
   1a996:	2301      	movne	r3, #1
   1a998:	9303      	str	r3, [sp, #12]
				ticker->lazy_current = 0U;
   1a99a:	2300      	movs	r3, #0
   1a99c:	83e3      	strh	r3, [r4, #30]
				ticker->force = 0U;
   1a99e:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
   1a9a0:	e790      	b.n	1a8c4 <ticker_worker+0xd4>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   1a9a2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1a9a6:	d0ba      	beq.n	1a91e <ticker_worker+0x12e>
		int32_t lazy_current = ticker->lazy_current;
   1a9a8:	8be2      	ldrh	r2, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   1a9aa:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
   1a9ac:	6865      	ldr	r5, [r4, #4]
		int32_t lazy_current = ticker->lazy_current;
   1a9ae:	9205      	str	r2, [sp, #20]
		if (lazy_current >= ticker->lazy_periodic) {
   1a9b0:	429a      	cmp	r2, r3
			lazy_current -= ticker->lazy_periodic;
   1a9b2:	bf28      	it	cs
   1a9b4:	1ad2      	subcs	r2, r2, r3
		uint32_t current_age = ticker->ticks_periodic +
   1a9b6:	fb02 5005 	mla	r0, r2, r5, r5
   1a9ba:	9008      	str	r0, [sp, #32]
				(lazy_current - ticker->priority);
   1a9bc:	9807      	ldr	r0, [sp, #28]
		uint32_t acc_ticks_to_expire = 0U;
   1a9be:	e9cd 170a 	strd	r1, r7, [sp, #40]	; 0x28
				(lazy_current - ticker->priority);
   1a9c2:	1a12      	subs	r2, r2, r0
		uint32_t acc_ticks_to_expire = 0U;
   1a9c4:	e9cd a80c 	strd	sl, r8, [sp, #48]	; 0x30
		uint32_t current_age = ticker->ticks_periodic +
   1a9c8:	4643      	mov	r3, r8
				(lazy_current - ticker->priority);
   1a9ca:	9209      	str	r2, [sp, #36]	; 0x24
		uint32_t acc_ticks_to_expire = 0U;
   1a9cc:	46a0      	mov	r8, r4
   1a9ce:	f04f 0c00 	mov.w	ip, #0
   1a9d2:	462c      	mov	r4, r5
			struct ticker_node *ticker_next = &nodes[id_head];
   1a9d4:	b21b      	sxth	r3, r3
   1a9d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1a9da:	eb0b 1203 	add.w	r2, fp, r3, lsl #4
   1a9de:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   1a9e0:	f8d2 e008 	ldr.w	lr, [r2, #8]
   1a9e4:	44f4      	add	ip, lr
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   1a9e6:	4566      	cmp	r6, ip
   1a9e8:	d339      	bcc.n	1aa5e <ticker_worker+0x26e>
			if (ticker_next->ticks_slot == 0U) {
   1a9ea:	6991      	ldr	r1, [r2, #24]
   1a9ec:	b399      	cbz	r1, 1aa56 <ticker_worker+0x266>
			int32_t lazy_next = ticker_next->lazy_current;
   1a9ee:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
   1a9f0:	8b90      	ldrh	r0, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   1a9f2:	f8d2 9004 	ldr.w	r9, [r2, #4]
				ticker_next->priority;
   1a9f6:	f992 702d 	ldrsb.w	r7, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
   1a9fa:	4281      	cmp	r1, r0
			int32_t lazy_next = ticker_next->lazy_current;
   1a9fc:	460d      	mov	r5, r1
				lazy_next -= ticker_next->lazy_periodic;
   1a9fe:	bf28      	it	cs
   1aa00:	1a0d      	subcs	r5, r1, r0
					  0U :
   1aa02:	f1b9 0f00 	cmp.w	r9, #0
   1aa06:	d03e      	beq.n	1aa86 <ticker_worker+0x296>
   1aa08:	eba9 0e0e 	sub.w	lr, r9, lr
				(ticker->ticks_periodic == 0U) ||
   1aa0c:	b3bc      	cbz	r4, 1aa7e <ticker_worker+0x28e>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   1aa0e:	fb09 ee05 	mla	lr, r9, r5, lr
				(ticker->ticks_periodic == 0U) ||
   1aa12:	f8dd 9020 	ldr.w	r9, [sp, #32]
   1aa16:	45f1      	cmp	r9, lr
   1aa18:	bf8c      	ite	hi
   1aa1a:	f04f 0e01 	movhi.w	lr, #1
   1aa1e:	f04f 0e00 	movls.w	lr, #0
					(ticker->ticks_periodic != 0U) &&
   1aa22:	bf34      	ite	cc
   1aa24:	f04f 0901 	movcc.w	r9, #1
   1aa28:	f04f 0900 	movcs.w	r9, #0
			if (!lazy_next_periodic_skip &&
   1aa2c:	4281      	cmp	r1, r0
			uint8_t next_force = (ticker_next->force > ticker->force);
   1aa2e:	f892 a003 	ldrb.w	sl, [r2, #3]
   1aa32:	f898 2003 	ldrb.w	r2, [r8, #3]
			if (!lazy_next_periodic_skip &&
   1aa36:	d30e      	bcc.n	1aa56 <ticker_worker+0x266>
   1aa38:	4592      	cmp	sl, r2
   1aa3a:	d829      	bhi.n	1aa90 <ticker_worker+0x2a0>
			    (next_force ||
   1aa3c:	f117 0f80 	cmn.w	r7, #128	; 0x80
   1aa40:	d026      	beq.n	1aa90 <ticker_worker+0x2a0>
			     next_is_critical ||
   1aa42:	9a09      	ldr	r2, [sp, #36]	; 0x24
				(lazy_next - ticker_next->priority) >
   1aa44:	1bed      	subs	r5, r5, r7
			     next_is_critical ||
   1aa46:	4295      	cmp	r5, r2
   1aa48:	dd02      	ble.n	1aa50 <ticker_worker+0x260>
			     (next_has_priority && !current_is_older) ||
   1aa4a:	f1be 0f00 	cmp.w	lr, #0
   1aa4e:	d01f      	beq.n	1aa90 <ticker_worker+0x2a0>
   1aa50:	9a07      	ldr	r2, [sp, #28]
   1aa52:	42ba      	cmp	r2, r7
   1aa54:	d019      	beq.n	1aa8a <ticker_worker+0x29a>
			id_head = ticker_next->next;
   1aa56:	f81b 3003 	ldrb.w	r3, [fp, r3]
		while (id_head != TICKER_NULL) {
   1aa5a:	2bff      	cmp	r3, #255	; 0xff
   1aa5c:	d1ba      	bne.n	1a9d4 <ticker_worker+0x1e4>
   1aa5e:	4644      	mov	r4, r8
   1aa60:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
   1aa64:	990a      	ldr	r1, [sp, #40]	; 0x28
   1aa66:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   1aa6a:	e758      	b.n	1a91e <ticker_worker+0x12e>
			    TICKER_RESCHEDULE_STATE_NONE &&
   1aa6c:	8ba2      	ldrh	r2, [r4, #28]
   1aa6e:	9805      	ldr	r0, [sp, #20]
   1aa70:	4282      	cmp	r2, r0
   1aa72:	f63f af0c 	bhi.w	1a88e <ticker_worker+0x9e>
				ext_data->reschedule_state =
   1aa76:	f04f 0201 	mov.w	r2, #1
   1aa7a:	721a      	strb	r2, [r3, #8]
   1aa7c:	e709      	b.n	1a892 <ticker_worker+0xa2>
				(ticker->ticks_periodic == 0U) ||
   1aa7e:	f04f 0e01 	mov.w	lr, #1
					(ticker->ticks_periodic != 0U) &&
   1aa82:	46a1      	mov	r9, r4
   1aa84:	e7d2      	b.n	1aa2c <ticker_worker+0x23c>
					  0U :
   1aa86:	46ce      	mov	lr, r9
   1aa88:	e7c0      	b.n	1aa0c <ticker_worker+0x21c>
			     (equal_priority && next_is_older))) {
   1aa8a:	f1b9 0f00 	cmp.w	r9, #0
   1aa8e:	d0e2      	beq.n	1aa56 <ticker_worker+0x266>
   1aa90:	4644      	mov	r4, r8
   1aa92:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
   1aa96:	990a      	ldr	r1, [sp, #40]	; 0x28
   1aa98:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   1aa9c:	e6ef      	b.n	1a87e <ticker_worker+0x8e>
	uint8_t slot_reserved = 0;
   1aa9e:	9b06      	ldr	r3, [sp, #24]
   1aaa0:	9303      	str	r3, [sp, #12]
   1aaa2:	e6c7      	b.n	1a834 <ticker_worker+0x44>
		if (ticker->timeout_func) {
   1aaa4:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   1aaa6:	3901      	subs	r1, #1
   1aaa8:	70a1      	strb	r1, [r4, #2]
		if (ticker->timeout_func) {
   1aaaa:	2d00      	cmp	r5, #0
   1aaac:	f43f af0a 	beq.w	1a8c4 <ticker_worker+0xd4>
			ticks_drift = 0U;
   1aab0:	4619      	mov	r1, r3
					   ticks_expired -
   1aab2:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   1aab4:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1aab6:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
   1aab8:	ebaa 0003 	sub.w	r0, sl, r3
   1aabc:	9b04      	ldr	r3, [sp, #16]
   1aabe:	695b      	ldr	r3, [r3, #20]
   1aac0:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   1aac2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			uint8_t next_force = (ticker_next->force > ticker->force);
   1aac6:	78e3      	ldrb	r3, [r4, #3]
   1aac8:	e744      	b.n	1a954 <ticker_worker+0x164>
	ticks_expired = 0U;
   1aaca:	2300      	movs	r3, #0
   1aacc:	4619      	mov	r1, r3
   1aace:	e6ff      	b.n	1a8d0 <ticker_worker+0xe0>

0001aad0 <ticker_job>:
	if (instance->worker_trigger) {
   1aad0:	7fc3      	ldrb	r3, [r0, #31]
   1aad2:	2b00      	cmp	r3, #0
   1aad4:	f040 8439 	bne.w	1b34a <ticker_job+0x87a>
{
   1aad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   1aadc:	7f82      	ldrb	r2, [r0, #30]
{
   1aade:	b08d      	sub	sp, #52	; 0x34
   1aae0:	4683      	mov	fp, r0
	if (instance->job_guard) {
   1aae2:	2a00      	cmp	r2, #0
   1aae4:	d17d      	bne.n	1abe2 <ticker_job+0x112>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   1aae6:	7a83      	ldrb	r3, [r0, #10]
   1aae8:	7ac1      	ldrb	r1, [r0, #11]
	instance->job_guard = 1U;
   1aaea:	2001      	movs	r0, #1
   1aaec:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   1aaf0:	4299      	cmp	r1, r3
	ticks_previous = instance->ticks_current;
   1aaf2:	f8db 0014 	ldr.w	r0, [fp, #20]
   1aaf6:	9007      	str	r0, [sp, #28]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   1aaf8:	f000 844d 	beq.w	1b396 <ticker_job+0x8c6>
	uint8_t idx = *ticks_elapsed_index + 1;
   1aafc:	3301      	adds	r3, #1
   1aafe:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
   1ab00:	2b02      	cmp	r3, #2
		idx = 0U;
   1ab02:	bf08      	it	eq
   1ab04:	4613      	moveq	r3, r2
		ticks_elapsed =
   1ab06:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
   1ab0a:	f88b 300a 	strb.w	r3, [fp, #10]
	ticker_id_old_head = instance->ticker_id_head;
   1ab0e:	f89b 301d 	ldrb.w	r3, [fp, #29]
		ticks_elapsed =
   1ab12:	68d2      	ldr	r2, [r2, #12]
	ticker_id_old_head = instance->ticker_id_head;
   1ab14:	9309      	str	r3, [sp, #36]	; 0x24
		instance->ticks_current += ticks_elapsed;
   1ab16:	9b07      	ldr	r3, [sp, #28]
		ticks_elapsed =
   1ab18:	9203      	str	r2, [sp, #12]
		instance->ticks_current += ticks_elapsed;
   1ab1a:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   1ab1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	count_user = instance->count_user;
   1ab20:	f89b 2009 	ldrb.w	r2, [fp, #9]
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   1ab24:	f8cb 3014 	str.w	r3, [fp, #20]
	node = &instance->nodes[0];
   1ab28:	f8db 3000 	ldr.w	r3, [fp]
   1ab2c:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
   1ab2e:	f8db 3004 	ldr.w	r3, [fp, #4]
   1ab32:	9305      	str	r3, [sp, #20]
	while (count_user--) {
   1ab34:	1e53      	subs	r3, r2, #1
	count_user = instance->count_user;
   1ab36:	9206      	str	r2, [sp, #24]
	while (count_user--) {
   1ab38:	b2db      	uxtb	r3, r3
   1ab3a:	2a00      	cmp	r2, #0
   1ab3c:	f000 81de 	beq.w	1aefc <ticker_job+0x42c>
		flag_elapsed = 1U;
   1ab40:	2201      	movs	r2, #1
   1ab42:	920b      	str	r2, [sp, #44]	; 0x2c
   1ab44:	9a05      	ldr	r2, [sp, #20]
   1ab46:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
	pending = 0U;
   1ab4a:	2300      	movs	r3, #0
   1ab4c:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   1ab4e:	23ff      	movs	r3, #255	; 0xff
   1ab50:	9301      	str	r3, [sp, #4]
   1ab52:	46ca      	mov	sl, r9
		user_ops = &user->user_op[0];
   1ab54:	f8da 8004 	ldr.w	r8, [sl, #4]
		while (user->middle != user->last) {
   1ab58:	f89a c003 	ldrb.w	ip, [sl, #3]
   1ab5c:	f89a 7002 	ldrb.w	r7, [sl, #2]
   1ab60:	4567      	cmp	r7, ip
   1ab62:	d037      	beq.n	1abd4 <ticker_job+0x104>
			if (middle == user->count_user_op) {
   1ab64:	f89a 2000 	ldrb.w	r2, [sl]
			middle = user->middle + 1;
   1ab68:	1c7b      	adds	r3, r7, #1
			user_op = &user_ops[user->middle];
   1ab6a:	b23e      	sxth	r6, r7
			middle = user->middle + 1;
   1ab6c:	b2db      	uxtb	r3, r3
				middle = 0U;
   1ab6e:	429a      	cmp	r2, r3
   1ab70:	bf08      	it	eq
   1ab72:	2300      	moveq	r3, #0
			user_op = &user_ops[user->middle];
   1ab74:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   1ab78:	eb06 0682 	add.w	r6, r6, r2, lsl #2
			user->middle = middle;
   1ab7c:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   1ab80:	f818 0026 	ldrb.w	r0, [r8, r6, lsl #2]
   1ab84:	2804      	cmp	r0, #4
			user_op = &user_ops[user->middle];
   1ab86:	eb08 0486 	add.w	r4, r8, r6, lsl #2
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   1ab8a:	d934      	bls.n	1abf6 <ticker_job+0x126>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   1ab8c:	2808      	cmp	r0, #8
   1ab8e:	d85c      	bhi.n	1ac4a <ticker_job+0x17a>
			ticker = &node[user_op->id];
   1ab90:	7861      	ldrb	r1, [r4, #1]
   1ab92:	9a00      	ldr	r2, [sp, #0]
   1ab94:	eb01 0541 	add.w	r5, r1, r1, lsl #1
   1ab98:	eb02 1505 	add.w	r5, r2, r5, lsl #4
			state = (ticker->req - ticker->ack) & 0xff;
   1ab9c:	786a      	ldrb	r2, [r5, #1]
   1ab9e:	f895 e002 	ldrb.w	lr, [r5, #2]
   1aba2:	eba2 020e 	sub.w	r2, r2, lr
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   1aba6:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   1abaa:	d126      	bne.n	1abfa <ticker_job+0x12a>
			    ((state == 0U) &&
   1abac:	2806      	cmp	r0, #6
   1abae:	d14c      	bne.n	1ac4a <ticker_job+0x17a>
		if (instance->ticker_id_slot_previous == user_op->id) {
   1abb0:	f89b 301c 	ldrb.w	r3, [fp, #28]
   1abb4:	428b      	cmp	r3, r1
   1abb6:	d02a      	beq.n	1ac0e <ticker_job+0x13e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1abb8:	2000      	movs	r0, #0
   1abba:	f808 0026 	strb.w	r0, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
   1abbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	user_op->status = status;
   1abc0:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
   1abc2:	b10b      	cbz	r3, 1abc8 <ticker_job+0xf8>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1abc4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1abc6:	4798      	blx	r3
		while (user->middle != user->last) {
   1abc8:	f89a c003 	ldrb.w	ip, [sl, #3]
   1abcc:	f89a 7002 	ldrb.w	r7, [sl, #2]
   1abd0:	4567      	cmp	r7, ip
   1abd2:	d1c7      	bne.n	1ab64 <ticker_job+0x94>
	while (count_user--) {
   1abd4:	9a05      	ldr	r2, [sp, #20]
   1abd6:	4552      	cmp	r2, sl
   1abd8:	f1aa 0308 	sub.w	r3, sl, #8
   1abdc:	d06c      	beq.n	1acb8 <ticker_job+0x1e8>
   1abde:	469a      	mov	sl, r3
   1abe0:	e7b8      	b.n	1ab54 <ticker_job+0x84>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
   1abe2:	6a44      	ldr	r4, [r0, #36]	; 0x24
   1abe4:	2104      	movs	r1, #4
   1abe6:	4603      	mov	r3, r0
   1abe8:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   1abea:	2004      	movs	r0, #4
   1abec:	46a4      	mov	ip, r4
}
   1abee:	b00d      	add	sp, #52	; 0x34
   1abf0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   1abf4:	4760      	bx	ip
   1abf6:	461f      	mov	r7, r3
   1abf8:	e7b2      	b.n	1ab60 <ticker_job+0x90>
			     (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS)) ||
   1abfa:	2805      	cmp	r0, #5
   1abfc:	d03e      	beq.n	1ac7c <ticker_job+0x1ac>
			if ((state == 1U) ||
   1abfe:	2a01      	cmp	r2, #1
   1ac00:	d032      	beq.n	1ac68 <ticker_job+0x198>
   1ac02:	2806      	cmp	r0, #6
   1ac04:	d148      	bne.n	1ac98 <ticker_job+0x1c8>
		if (instance->ticker_id_slot_previous == user_op->id) {
   1ac06:	f89b 301c 	ldrb.w	r3, [fp, #28]
   1ac0a:	428b      	cmp	r3, r1
   1ac0c:	d1d4      	bne.n	1abb8 <ticker_job+0xe8>
			instance->ticker_id_slot_previous = TICKER_NULL;
   1ac0e:	23ff      	movs	r3, #255	; 0xff
   1ac10:	f88b 301c 	strb.w	r3, [fp, #28]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
   1ac14:	f818 3026 	ldrb.w	r3, [r8, r6, lsl #2]
   1ac18:	2b06      	cmp	r3, #6
   1ac1a:	f000 814d 	beq.w	1aeb8 <ticker_job+0x3e8>
   1ac1e:	2b08      	cmp	r3, #8
   1ac20:	f000 814a 	beq.w	1aeb8 <ticker_job+0x3e8>
				ticks_at_yield = cntr_cnt_get();
   1ac24:	f00b ff94 	bl	26b50 <cntr_cnt_get>
			ticks_current = instance->ticks_current;
   1ac28:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
   1ac2c:	1a83      	subs	r3, r0, r2
   1ac2e:	021d      	lsls	r5, r3, #8
   1ac30:	f100 8149 	bmi.w	1aec6 <ticker_job+0x3f6>
				ticks_used = ticks_elapsed +
   1ac34:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1ac36:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   1ac3a:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
   1ac3c:	f8db 2018 	ldr.w	r2, [fp, #24]
   1ac40:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
   1ac42:	bf88      	it	hi
   1ac44:	f8cb 3018 	strhi.w	r3, [fp, #24]
   1ac48:	e7b6      	b.n	1abb8 <ticker_job+0xe8>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1ac4a:	2200      	movs	r2, #0
   1ac4c:	f808 2026 	strb.w	r2, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
   1ac50:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	user_op->status = status;
   1ac52:	2001      	movs	r0, #1
   1ac54:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
   1ac56:	2a00      	cmp	r2, #0
   1ac58:	d0cd      	beq.n	1abf6 <ticker_job+0x126>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1ac5a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1ac5c:	4790      	blx	r2
		while (user->middle != user->last) {
   1ac5e:	f89a c003 	ldrb.w	ip, [sl, #3]
   1ac62:	f89a 7002 	ldrb.w	r7, [sl, #2]
   1ac66:	e77b      	b.n	1ab60 <ticker_job+0x90>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
   1ac68:	2806      	cmp	r0, #6
   1ac6a:	d0a1      	beq.n	1abb0 <ticker_job+0xe0>
			ticker->ticks_to_expire = ticker_dequeue(instance,
   1ac6c:	4658      	mov	r0, fp
   1ac6e:	f7ff fc5d 	bl	1a52c <ticker_dequeue>
			ticker->req = ticker->ack;
   1ac72:	78ab      	ldrb	r3, [r5, #2]
			ticker->ticks_to_expire = ticker_dequeue(instance,
   1ac74:	60a8      	str	r0, [r5, #8]
			ticker->req = ticker->ack;
   1ac76:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   1ac78:	7861      	ldrb	r1, [r4, #1]
   1ac7a:	e799      	b.n	1abb0 <ticker_job+0xe0>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   1ac7c:	6860      	ldr	r0, [r4, #4]
   1ac7e:	b948      	cbnz	r0, 1ac94 <ticker_job+0x1c4>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   1ac80:	68a0      	ldr	r0, [r4, #8]
   1ac82:	b938      	cbnz	r0, 1ac94 <ticker_job+0x1c4>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   1ac84:	68e0      	ldr	r0, [r4, #12]
   1ac86:	b928      	cbnz	r0, 1ac94 <ticker_job+0x1c4>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   1ac88:	6920      	ldr	r0, [r4, #16]
   1ac8a:	b918      	cbnz	r0, 1ac94 <ticker_job+0x1c4>
			     (user_op->params.update.lazy == 0U) &&
   1ac8c:	6960      	ldr	r0, [r4, #20]
   1ac8e:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
   1ac92:	d0da      	beq.n	1ac4a <ticker_job+0x17a>
			if ((state == 1U) ||
   1ac94:	2a01      	cmp	r2, #1
   1ac96:	d076      	beq.n	1ad86 <ticker_job+0x2b6>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   1ac98:	2104      	movs	r1, #4
   1ac9a:	465b      	mov	r3, fp
   1ac9c:	2201      	movs	r2, #1
   1ac9e:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   1aca2:	4608      	mov	r0, r1
   1aca4:	47a0      	blx	r4
	while (count_user--) {
   1aca6:	9a05      	ldr	r2, [sp, #20]
				user->middle = prev;
   1aca8:	f88a 7002 	strb.w	r7, [sl, #2]
				pending = 1U;
   1acac:	2301      	movs	r3, #1
	while (count_user--) {
   1acae:	4552      	cmp	r2, sl
				pending = 1U;
   1acb0:	9308      	str	r3, [sp, #32]
	while (count_user--) {
   1acb2:	f1aa 0308 	sub.w	r3, sl, #8
   1acb6:	d192      	bne.n	1abde <ticker_job+0x10e>
	if (instance->ticker_id_head != ticker_id_old_head) {
   1acb8:	f89b 301d 	ldrb.w	r3, [fp, #29]
		flag_compare_update = 1U;
   1acbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1acbe:	1a9b      	subs	r3, r3, r2
   1acc0:	bf18      	it	ne
   1acc2:	2301      	movne	r3, #1
   1acc4:	9306      	str	r3, [sp, #24]
	if (flag_elapsed) {
   1acc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1acc8:	2b00      	cmp	r3, #0
   1acca:	f040 811b 	bne.w	1af04 <ticker_job+0x434>
		ticker_job_list_insert(instance, insert_head);
   1acce:	9901      	ldr	r1, [sp, #4]
   1acd0:	4658      	mov	r0, fp
   1acd2:	f7ff fc89 	bl	1a5e8 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
   1acd6:	f89b 301d 	ldrb.w	r3, [fp, #29]
   1acda:	9300      	str	r3, [sp, #0]
   1acdc:	9b00      	ldr	r3, [sp, #0]
   1acde:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ace0:	4293      	cmp	r3, r2
   1ace2:	f000 831c 	beq.w	1b31e <ticker_job+0x84e>
	if (!pending) {
   1ace6:	9b08      	ldr	r3, [sp, #32]
   1ace8:	2b00      	cmp	r3, #0
   1acea:	f000 8296 	beq.w	1b21a <ticker_job+0x74a>
	if (instance->ticker_id_head == TICKER_NULL) {
   1acee:	f89b 301d 	ldrb.w	r3, [fp, #29]
   1acf2:	9300      	str	r3, [sp, #0]
   1acf4:	9b00      	ldr	r3, [sp, #0]
   1acf6:	2bff      	cmp	r3, #255	; 0xff
   1acf8:	f000 8378 	beq.w	1b3ec <ticker_job+0x91c>
	if (ticker_id_old_head == TICKER_NULL) {
   1acfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1acfe:	2bff      	cmp	r3, #255	; 0xff
   1ad00:	f000 837f 	beq.w	1b402 <ticker_job+0x932>
	ticker = &instance->nodes[instance->ticker_id_head];
   1ad04:	9a00      	ldr	r2, [sp, #0]
	ticks_to_expire = ticker->ticks_to_expire;
   1ad06:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
   1ad0a:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 1aee8 <ticker_job+0x418>
   1ad0e:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 1aeec <ticker_job+0x41c>
   1ad12:	4f77      	ldr	r7, [pc, #476]	; (1aef0 <ticker_job+0x420>)
	ticker = &instance->nodes[instance->ticker_id_head];
   1ad14:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   1ad18:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	i = 10U;
   1ad1c:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
   1ad1e:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
   1ad20:	f00b ff16 	bl	26b50 <cntr_cnt_get>
		cc = instance->ticks_current;
   1ad24:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1ad28:	1b03      	subs	r3, r0, r4
   1ad2a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   1ad2e:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   1ad30:	42b3      	cmp	r3, r6
   1ad32:	bf2c      	ite	cs
   1ad34:	18e4      	addcs	r4, r4, r3
   1ad36:	19a4      	addcc	r4, r4, r6
		cc &= HAL_TICKER_CNTR_MASK;
   1ad38:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
   1ad3c:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
		ctr = cntr_cnt_get();
   1ad40:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
   1ad42:	4620      	mov	r0, r4
   1ad44:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   1ad46:	f00b ff03 	bl	26b50 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1ad4a:	eba0 030a 	sub.w	r3, r0, sl
   1ad4e:	eba4 040a 	sub.w	r4, r4, sl
   1ad52:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   1ad56:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1ad58:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
   1ad5c:	42a3      	cmp	r3, r4
		i--;
   1ad5e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
   1ad62:	f240 82e3 	bls.w	1b32c <ticker_job+0x85c>
		LL_ASSERT(i);
   1ad66:	2d00      	cmp	r5, #0
   1ad68:	d1da      	bne.n	1ad20 <ticker_job+0x250>
   1ad6a:	f44f 6314 	mov.w	r3, #2368	; 0x940
   1ad6e:	464a      	mov	r2, r9
   1ad70:	4641      	mov	r1, r8
   1ad72:	4638      	mov	r0, r7
   1ad74:	f011 f927 	bl	2bfc6 <assert_print>
   1ad78:	4040      	eors	r0, r0
   1ad7a:	f380 8811 	msr	BASEPRI, r0
   1ad7e:	f04f 0003 	mov.w	r0, #3
   1ad82:	df02      	svc	2
   1ad84:	e7cc      	b.n	1ad20 <ticker_job+0x250>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   1ad86:	4658      	mov	r0, fp
   1ad88:	f7ff fbd0 	bl	1a52c <ticker_dequeue>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   1ad8c:	f8db 3014 	ldr.w	r3, [fp, #20]
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   1ad90:	60a8      	str	r0, [r5, #8]
   1ad92:	4607      	mov	r7, r0
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   1ad94:	9302      	str	r3, [sp, #8]
	ticks_now = cntr_cnt_get();
   1ad96:	f00b fedb 	bl	26b50 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1ad9a:	9b02      	ldr	r3, [sp, #8]
   1ad9c:	1ac2      	subs	r2, r0, r3
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   1ad9e:	9b03      	ldr	r3, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1ada0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   1ada4:	18d1      	adds	r1, r2, r3
	if (ticks_to_expire > ticks_elapsed) {
   1ada6:	428f      	cmp	r7, r1
	ticks_now = cntr_cnt_get();
   1ada8:	4681      	mov	r9, r0
	if (ticks_to_expire > ticks_elapsed) {
   1adaa:	f240 8095 	bls.w	1aed8 <ticker_job+0x408>
	ticker->ticks_to_expire_minus +=
   1adae:	696b      	ldr	r3, [r5, #20]
   1adb0:	9304      	str	r3, [sp, #16]
		ticks_to_expire -= ticks_elapsed;
   1adb2:	1a7a      	subs	r2, r7, r1
	if ((ticker->ticks_periodic != 0U) &&
   1adb4:	f8d5 c004 	ldr.w	ip, [r5, #4]
   1adb8:	f1bc 0f00 	cmp.w	ip, #0
   1adbc:	d051      	beq.n	1ae62 <ticker_job+0x392>
	    (user_op->params.update.lazy != 0U)) {
   1adbe:	8aa3      	ldrh	r3, [r4, #20]
	if ((ticker->ticks_periodic != 0U) &&
   1adc0:	2b00      	cmp	r3, #0
   1adc2:	d04e      	beq.n	1ae62 <ticker_job+0x392>
		user_op->params.update.lazy--;
   1adc4:	3b01      	subs	r3, #1
   1adc6:	b29f      	uxth	r7, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1adc8:	4594      	cmp	ip, r2
		while (ticker->lazy_current < user_op->params.update.lazy) {
   1adca:	8beb      	ldrh	r3, [r5, #30]
		user_op->params.update.lazy--;
   1adcc:	82a7      	strh	r7, [r4, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1adce:	d223      	bcs.n	1ae18 <ticker_job+0x348>
   1add0:	f10c 0e01 	add.w	lr, ip, #1
   1add4:	f8cd 8018 	str.w	r8, [sp, #24]
   1add8:	940a      	str	r4, [sp, #40]	; 0x28
   1adda:	e018      	b.n	1ae0e <ticker_job+0x33e>
	if ((ticker->remainder_current >= BIT(31)) ||
   1addc:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1adde:	f8df 8114 	ldr.w	r8, [pc, #276]	; 1aef4 <ticker_job+0x424>
   1ade2:	4c45      	ldr	r4, [pc, #276]	; (1aef8 <ticker_job+0x428>)
   1ade4:	4488      	add	r8, r1
   1ade6:	45a0      	cmp	r8, r4
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   1ade8:	bf84      	itt	hi
   1adea:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
   1adee:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
   1adf2:	4670      	mov	r0, lr
	ticker->remainder_current -= ticker->remainder_periodic;
   1adf4:	6a2c      	ldr	r4, [r5, #32]
   1adf6:	bf94      	ite	ls
   1adf8:	4660      	movls	r0, ip
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   1adfa:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
			ticker->lazy_current--;
   1adfe:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
   1ae00:	1a12      	subs	r2, r2, r0
	ticker->remainder_current -= ticker->remainder_periodic;
   1ae02:	1b09      	subs	r1, r1, r4
			ticker->lazy_current--;
   1ae04:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1ae06:	4594      	cmp	ip, r2
	ticker->remainder_current -= ticker->remainder_periodic;
   1ae08:	6269      	str	r1, [r5, #36]	; 0x24
			ticker->lazy_current--;
   1ae0a:	83eb      	strh	r3, [r5, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1ae0c:	d201      	bcs.n	1ae12 <ticker_job+0x342>
   1ae0e:	429f      	cmp	r7, r3
   1ae10:	d3e4      	bcc.n	1addc <ticker_job+0x30c>
   1ae12:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1ae16:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		while (ticker->lazy_current < user_op->params.update.lazy) {
   1ae18:	429f      	cmp	r7, r3
   1ae1a:	d921      	bls.n	1ae60 <ticker_job+0x390>
			ticks_to_expire += ticker->ticks_periodic +
   1ae1c:	f10c 0001 	add.w	r0, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
   1ae20:	e9d5 e108 	ldrd	lr, r1, [r5, #32]
			ticks_to_expire += ticker->ticks_periodic +
   1ae24:	9006      	str	r0, [sp, #24]
   1ae26:	940a      	str	r4, [sp, #40]	; 0x28
   1ae28:	e005      	b.n	1ae36 <ticker_job+0x366>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   1ae2a:	3301      	adds	r3, #1
   1ae2c:	b29b      	uxth	r3, r3
   1ae2e:	4660      	mov	r0, ip
   1ae30:	429f      	cmp	r7, r3
			ticks_to_expire += ticker->ticks_periodic +
   1ae32:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   1ae34:	d011      	beq.n	1ae5a <ticker_job+0x38a>
	if ((ticker->remainder_current < BIT(31)) &&
   1ae36:	482f      	ldr	r0, [pc, #188]	; (1aef4 <ticker_job+0x424>)
   1ae38:	4c2f      	ldr	r4, [pc, #188]	; (1aef8 <ticker_job+0x428>)
	ticker->remainder_current += ticker->remainder_periodic;
   1ae3a:	4471      	add	r1, lr
	if ((ticker->remainder_current < BIT(31)) &&
   1ae3c:	1808      	adds	r0, r1, r0
   1ae3e:	42a0      	cmp	r0, r4
   1ae40:	d8f3      	bhi.n	1ae2a <ticker_job+0x35a>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   1ae42:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
   1ae44:	9806      	ldr	r0, [sp, #24]
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1ae46:	f1a1 71e8 	sub.w	r1, r1, #30408704	; 0x1d00000
		while (ticker->lazy_current < user_op->params.update.lazy) {
   1ae4a:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1ae4c:	f5a1 31d4 	sub.w	r1, r1, #108544	; 0x1a800
		while (ticker->lazy_current < user_op->params.update.lazy) {
   1ae50:	429f      	cmp	r7, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1ae52:	f5a1 71a5 	sub.w	r1, r1, #330	; 0x14a
			ticks_to_expire += ticker->ticks_periodic +
   1ae56:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   1ae58:	d1ed      	bne.n	1ae36 <ticker_job+0x366>
   1ae5a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1ae5c:	6269      	str	r1, [r5, #36]	; 0x24
   1ae5e:	83ef      	strh	r7, [r5, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
   1ae60:	83af      	strh	r7, [r5, #28]
				  user_op->params.update.ticks_drift_plus;
   1ae62:	6861      	ldr	r1, [r4, #4]
				user_op->params.update.ticks_drift_minus;
   1ae64:	68a0      	ldr	r0, [r4, #8]
	ticker->ticks_to_expire_minus +=
   1ae66:	9b04      	ldr	r3, [sp, #16]
	ticker->ticks_to_expire = ticks_to_expire +
   1ae68:	440a      	add	r2, r1
   1ae6a:	60aa      	str	r2, [r5, #8]
	struct ticker_ext *ext_data = ticker->ext_data;
   1ae6c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	ticker->ticks_to_expire_minus +=
   1ae6e:	4403      	add	r3, r0
   1ae70:	616b      	str	r3, [r5, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   1ae72:	b11a      	cbz	r2, 1ae7c <ticker_job+0x3ac>
   1ae74:	6813      	ldr	r3, [r2, #0]
   1ae76:	b10b      	cbz	r3, 1ae7c <ticker_job+0x3ac>
			user_op->params.update.ticks_drift_plus -
   1ae78:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
   1ae7a:	6051      	str	r1, [r2, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   1ae7c:	464a      	mov	r2, r9
   1ae7e:	9902      	ldr	r1, [sp, #8]
   1ae80:	4628      	mov	r0, r5
   1ae82:	f7ff fb8d 	bl	1a5a0 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   1ae86:	68e2      	ldr	r2, [r4, #12]
   1ae88:	69ab      	ldr	r3, [r5, #24]
   1ae8a:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   1ae8c:	6922      	ldr	r2, [r4, #16]
   1ae8e:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   1ae90:	bf8c      	ite	hi
   1ae92:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   1ae94:	2300      	movls	r3, #0
   1ae96:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
   1ae98:	7da3      	ldrb	r3, [r4, #22]
   1ae9a:	b103      	cbz	r3, 1ae9e <ticker_job+0x3ce>
		ticker->force = user_op->params.update.force;
   1ae9c:	70eb      	strb	r3, [r5, #3]
	if (user_op->params.update.must_expire) {
   1ae9e:	7de3      	ldrb	r3, [r4, #23]
   1aea0:	b113      	cbz	r3, 1aea8 <ticker_job+0x3d8>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
   1aea2:	3b01      	subs	r3, #1
   1aea4:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	ticker->next = *insert_head;
   1aea8:	9b01      	ldr	r3, [sp, #4]
   1aeaa:	702b      	strb	r3, [r5, #0]
		ticker->req++;
   1aeac:	786b      	ldrb	r3, [r5, #1]
	*insert_head = user_op->id;
   1aeae:	7862      	ldrb	r2, [r4, #1]
   1aeb0:	9201      	str	r2, [sp, #4]
		ticker->req++;
   1aeb2:	3301      	adds	r3, #1
   1aeb4:	706b      	strb	r3, [r5, #1]
   1aeb6:	e67f      	b.n	1abb8 <ticker_job+0xe8>
				ticks_at_yield =
   1aeb8:	6860      	ldr	r0, [r4, #4]
			ticks_current = instance->ticks_current;
   1aeba:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
   1aebe:	1a83      	subs	r3, r0, r2
   1aec0:	021d      	lsls	r5, r3, #8
   1aec2:	f57f aeb7 	bpl.w	1ac34 <ticker_job+0x164>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1aec6:	1a13      	subs	r3, r2, r0
				if (ticks_elapsed > ticks_used) {
   1aec8:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1aeca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   1aece:	4293      	cmp	r3, r2
					ticks_used = ticks_elapsed -
   1aed0:	bf34      	ite	cc
   1aed2:	1ad3      	subcc	r3, r2, r3
					ticks_used = 0;
   1aed4:	2300      	movcs	r3, #0
   1aed6:	e6b1      	b.n	1ac3c <ticker_job+0x16c>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   1aed8:	696b      	ldr	r3, [r5, #20]
   1aeda:	1bda      	subs	r2, r3, r7
   1aedc:	1853      	adds	r3, r2, r1
   1aede:	9304      	str	r3, [sp, #16]
   1aee0:	616b      	str	r3, [r5, #20]
		ticks_to_expire = 0U;
   1aee2:	2200      	movs	r2, #0
   1aee4:	e766      	b.n	1adb4 <ticker_job+0x2e4>
   1aee6:	bf00      	nop
   1aee8:	00032f84 	.word	0x00032f84
   1aeec:	00033088 	.word	0x00033088
   1aef0:	00032fc4 	.word	0x00032fc4
   1aef4:	ff172b5a 	.word	0xff172b5a
   1aef8:	7f172b59 	.word	0x7f172b59
	pending = 0U;
   1aefc:	9b06      	ldr	r3, [sp, #24]
   1aefe:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   1af00:	23ff      	movs	r3, #255	; 0xff
   1af02:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
   1af04:	f00b fe24 	bl	26b50 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1af08:	9b07      	ldr	r3, [sp, #28]
	while (instance->ticker_id_head != TICKER_NULL) {
   1af0a:	f89b 601d 	ldrb.w	r6, [fp, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1af0e:	1ac3      	subs	r3, r0, r3
   1af10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1af14:	9304      	str	r3, [sp, #16]
	while (instance->ticker_id_head != TICKER_NULL) {
   1af16:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
   1af18:	f8db 3000 	ldr.w	r3, [fp]
   1af1c:	9300      	str	r3, [sp, #0]
	while (instance->ticker_id_head != TICKER_NULL) {
   1af1e:	d04f      	beq.n	1afc0 <ticker_job+0x4f0>
	if ((ticker->remainder_current < BIT(31)) &&
   1af20:	f8df 8290 	ldr.w	r8, [pc, #656]	; 1b1b4 <ticker_job+0x6e4>
   1af24:	f8df 9290 	ldr.w	r9, [pc, #656]	; 1b1b8 <ticker_job+0x6e8>
	while (instance->ticker_id_head != TICKER_NULL) {
   1af28:	9f03      	ldr	r7, [sp, #12]
	ticks_expired = 0U;
   1af2a:	f04f 0a00 	mov.w	sl, #0
		ticker = &node[id_expired];
   1af2e:	9a00      	ldr	r2, [sp, #0]
   1af30:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   1af34:	eb02 1403 	add.w	r4, r2, r3, lsl #4
   1af38:	011b      	lsls	r3, r3, #4
   1af3a:	9302      	str	r3, [sp, #8]
		ticks_to_expire = ticker->ticks_to_expire;
   1af3c:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   1af3e:	429f      	cmp	r7, r3
   1af40:	f0c0 8246 	bcc.w	1b3d0 <ticker_job+0x900>
		ticks_latency -= ticks_to_expire;
   1af44:	9a04      	ldr	r2, [sp, #16]
		skip_collision = (ticker->lazy_current != 0U);
   1af46:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		instance->ticker_id_head = ticker->next;
   1af4a:	f8dd c008 	ldr.w	ip, [sp, #8]
		ticks_latency -= ticks_to_expire;
   1af4e:	1ad2      	subs	r2, r2, r3
   1af50:	9204      	str	r2, [sp, #16]
		if (instance->ticks_slot_previous > ticks_to_expire) {
   1af52:	f8db 2018 	ldr.w	r2, [fp, #24]
   1af56:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
   1af58:	eba7 0703 	sub.w	r7, r7, r3
		ticks_expired += ticks_to_expire;
   1af5c:	449a      	add	sl, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   1af5e:	bf25      	ittet	cs
   1af60:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
   1af64:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
   1af68:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
   1af6a:	2300      	movcs	r3, #0
   1af6c:	f8cb 3018 	str.w	r3, [fp, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   1af70:	78a2      	ldrb	r2, [r4, #2]
   1af72:	7863      	ldrb	r3, [r4, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   1af74:	69a0      	ldr	r0, [r4, #24]
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   1af76:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		if ((ticker->ticks_periodic != 0U) ||
   1af78:	6865      	ldr	r5, [r4, #4]
		state = (ticker->req - ticker->ack) & 0xff;
   1af7a:	1a9b      	subs	r3, r3, r2
   1af7c:	b2db      	uxtb	r3, r3
   1af7e:	9305      	str	r3, [sp, #20]
		instance->ticker_id_head = ticker->next;
   1af80:	9b00      	ldr	r3, [sp, #0]
   1af82:	f813 c00c 	ldrb.w	ip, [r3, ip]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   1af86:	b118      	cbz	r0, 1af90 <ticker_job+0x4c0>
   1af88:	9b05      	ldr	r3, [sp, #20]
   1af8a:	2b02      	cmp	r3, #2
   1af8c:	f000 8135 	beq.w	1b1fa <ticker_job+0x72a>
		ticker->ticks_to_expire = 0U;
   1af90:	2300      	movs	r3, #0
   1af92:	60a3      	str	r3, [r4, #8]
		instance->ticker_id_head = ticker->next;
   1af94:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   1af98:	2d00      	cmp	r5, #0
   1af9a:	f040 80da 	bne.w	1b152 <ticker_job+0x682>
   1af9e:	b119      	cbz	r1, 1afa8 <ticker_job+0x4d8>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   1afa0:	7a09      	ldrb	r1, [r1, #8]
   1afa2:	2901      	cmp	r1, #1
   1afa4:	f000 8111 	beq.w	1b1ca <ticker_job+0x6fa>
			if (state && ((state == 1U) || skip_collision) &&
   1afa8:	9b05      	ldr	r3, [sp, #20]
   1afaa:	b123      	cbz	r3, 1afb6 <ticker_job+0x4e6>
   1afac:	2b01      	cmp	r3, #1
   1afae:	d045      	beq.n	1b03c <ticker_job+0x56c>
   1afb0:	f1be 0f00 	cmp.w	lr, #0
   1afb4:	d142      	bne.n	1b03c <ticker_job+0x56c>
			ticker->req = ticker->ack;
   1afb6:	7062      	strb	r2, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   1afb8:	f89b 601d 	ldrb.w	r6, [fp, #29]
   1afbc:	2eff      	cmp	r6, #255	; 0xff
   1afbe:	d1b6      	bne.n	1af2e <ticker_job+0x45e>
			flag_compare_update = 1U;
   1afc0:	9b06      	ldr	r3, [sp, #24]
   1afc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
		ticker_job_list_insert(instance, insert_head);
   1afc4:	9901      	ldr	r1, [sp, #4]
			flag_compare_update = 1U;
   1afc6:	4296      	cmp	r6, r2
   1afc8:	bf18      	it	ne
   1afca:	2301      	movne	r3, #1
		ticker_job_list_insert(instance, insert_head);
   1afcc:	4658      	mov	r0, fp
			flag_compare_update = 1U;
   1afce:	9306      	str	r3, [sp, #24]
		ticker_job_list_insert(instance, insert_head);
   1afd0:	f7ff fb0a 	bl	1a5e8 <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
   1afd4:	f89b 301d 	ldrb.w	r3, [fp, #29]
	nodes = &instance->nodes[0];
   1afd8:	f8db a000 	ldr.w	sl, [fp]
	while (rescheduling) {
   1afdc:	e9cd 3b00 	strd	r3, fp, [sp]
	uint8_t  rescheduled = 0U;
   1afe0:	2200      	movs	r2, #0
		while (ticker_id_head != TICKER_NULL) {
   1afe2:	9b00      	ldr	r3, [sp, #0]
   1afe4:	2bff      	cmp	r3, #255	; 0xff
   1afe6:	d00f      	beq.n	1b008 <ticker_job+0x538>
   1afe8:	9e00      	ldr	r6, [sp, #0]
			ticker = &nodes[ticker_id_head];
   1afea:	b233      	sxth	r3, r6
   1afec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1aff0:	eb0a 1503 	add.w	r5, sl, r3, lsl #4
   1aff4:	011b      	lsls	r3, r3, #4
			ext_data = ticker->ext_data;
   1aff6:	6aaf      	ldr	r7, [r5, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   1aff8:	b117      	cbz	r7, 1b000 <ticker_job+0x530>
   1affa:	7a39      	ldrb	r1, [r7, #8]
   1affc:	2901      	cmp	r1, #1
   1affe:	d025      	beq.n	1b04c <ticker_job+0x57c>
			ticker_id_head = ticker->next;
   1b000:	f81a 6003 	ldrb.w	r6, [sl, r3]
		while (ticker_id_head != TICKER_NULL) {
   1b004:	2eff      	cmp	r6, #255	; 0xff
   1b006:	d1f0      	bne.n	1afea <ticker_job+0x51a>
	return rescheduled;
   1b008:	f8dd b004 	ldr.w	fp, [sp, #4]
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   1b00c:	2a00      	cmp	r2, #0
   1b00e:	f43f ae65 	beq.w	1acdc <ticker_job+0x20c>
	if (instance->ticker_id_head != ticker_id_old_head) {
   1b012:	9b00      	ldr	r3, [sp, #0]
   1b014:	9909      	ldr	r1, [sp, #36]	; 0x24
   1b016:	428b      	cmp	r3, r1
   1b018:	f47f ae65 	bne.w	1ace6 <ticker_job+0x216>
	if (!pending) {
   1b01c:	9b08      	ldr	r3, [sp, #32]
   1b01e:	2b00      	cmp	r3, #0
   1b020:	f47f ae68 	bne.w	1acf4 <ticker_job+0x224>
	users = &instance->users[0];
   1b024:	f8db 3004 	ldr.w	r3, [fp, #4]
   1b028:	9301      	str	r3, [sp, #4]
	count_user = instance->count_user;
   1b02a:	f89b 3009 	ldrb.w	r3, [fp, #9]
	while (count_user--) {
   1b02e:	1e5f      	subs	r7, r3, #1
   1b030:	b2ff      	uxtb	r7, r7
   1b032:	2b00      	cmp	r3, #0
   1b034:	f43f ae5e 	beq.w	1acf4 <ticker_job+0x224>
			flag_compare_update = 1U;
   1b038:	9206      	str	r2, [sp, #24]
   1b03a:	e0fa      	b.n	1b232 <ticker_job+0x762>
			    ticker->fp_op_func) {
   1b03c:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
   1b03e:	2b00      	cmp	r3, #0
   1b040:	d0b9      	beq.n	1afb6 <ticker_job+0x4e6>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   1b042:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1b044:	2001      	movs	r0, #1
   1b046:	4798      	blx	r3
			ticker->req = ticker->ack;
   1b048:	78a2      	ldrb	r2, [r4, #2]
   1b04a:	e7b4      	b.n	1afb6 <ticker_job+0x4e6>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   1b04c:	9b01      	ldr	r3, [sp, #4]
   1b04e:	7f1b      	ldrb	r3, [r3, #28]
   1b050:	2bff      	cmp	r3, #255	; 0xff
   1b052:	d04b      	beq.n	1b0ec <ticker_job+0x61c>
			instance->ticks_slot_previous > ticks_elapsed) {
   1b054:	9b01      	ldr	r3, [sp, #4]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   1b056:	9a03      	ldr	r2, [sp, #12]
			instance->ticks_slot_previous > ticks_elapsed) {
   1b058:	699b      	ldr	r3, [r3, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   1b05a:	4293      	cmp	r3, r2
   1b05c:	d946      	bls.n	1b0ec <ticker_job+0x61c>
			window_start_ticks = instance->ticks_slot_previous -
   1b05e:	eba3 0c02 	sub.w	ip, r3, r2
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   1b062:	687a      	ldr	r2, [r7, #4]
   1b064:	68ab      	ldr	r3, [r5, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
   1b066:	f895 b000 	ldrb.w	fp, [r5]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   1b06a:	1ad3      	subs	r3, r2, r3
   1b06c:	9302      	str	r3, [sp, #8]
   1b06e:	683b      	ldr	r3, [r7, #0]
   1b070:	429a      	cmp	r2, r3
   1b072:	f080 80bd 	bcs.w	1b1f0 <ticker_job+0x720>
		while (ticker_id_iter != TICKER_NULL &&
   1b076:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
   1b07a:	eba3 0802 	sub.w	r8, r3, r2
		while (ticker_id_iter != TICKER_NULL &&
   1b07e:	f000 80b7 	beq.w	1b1f0 <ticker_job+0x720>
		       ticks_start_offset + ticker->ticks_slot <=
   1b082:	f8d5 e018 	ldr.w	lr, [r5, #24]
		while (ticker_id_iter != TICKER_NULL &&
   1b086:	45f0      	cmp	r8, lr
   1b088:	f04f 0300 	mov.w	r3, #0
   1b08c:	d331      	bcc.n	1b0f2 <ticker_job+0x622>
   1b08e:	46f1      	mov	r9, lr
   1b090:	465a      	mov	r2, fp
   1b092:	461c      	mov	r4, r3
   1b094:	e01c      	b.n	1b0d0 <ticker_job+0x600>
			if (node->ticks_to_expire >
   1b096:	6881      	ldr	r1, [r0, #8]
					MIN(ticks_slot_window,
   1b098:	1f0b      	subs	r3, r1, #4
			if (node->ticks_to_expire >
   1b09a:	2904      	cmp	r1, #4
					MIN(ticks_slot_window,
   1b09c:	4423      	add	r3, r4
			if (node->ticks_to_expire >
   1b09e:	d909      	bls.n	1b0b4 <ticker_job+0x5e4>
				window_end_ticks =
   1b0a0:	4543      	cmp	r3, r8
   1b0a2:	bf28      	it	cs
   1b0a4:	4643      	movcs	r3, r8
			if (window_end_ticks > ticks_start_offset +
   1b0a6:	4599      	cmp	r9, r3
   1b0a8:	d204      	bcs.n	1b0b4 <ticker_job+0x5e4>
			if (ticks_to_expire != 0U &&
   1b0aa:	ebb3 030e 	subs.w	r3, r3, lr
   1b0ae:	d001      	beq.n	1b0b4 <ticker_job+0x5e4>
   1b0b0:	459c      	cmp	ip, r3
   1b0b2:	d91e      	bls.n	1b0f2 <ticker_job+0x622>
			window_start_ticks  = node->ticks_to_expire +
   1b0b4:	6983      	ldr	r3, [r0, #24]
			ticker_id_iter = node->next;
   1b0b6:	f81a 2002 	ldrb.w	r2, [sl, r2]
			window_start_ticks  = node->ticks_to_expire +
   1b0ba:	eb01 0c03 	add.w	ip, r1, r3
			ticks_start_offset += node->ticks_to_expire;
   1b0be:	440c      	add	r4, r1
			ticks_to_expire     = ticks_slot_window -
   1b0c0:	eba8 030e 	sub.w	r3, r8, lr
		while (ticker_id_iter != TICKER_NULL &&
   1b0c4:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
   1b0c6:	eb04 090e 	add.w	r9, r4, lr
		while (ticker_id_iter != TICKER_NULL &&
   1b0ca:	d012      	beq.n	1b0f2 <ticker_job+0x622>
   1b0cc:	45c8      	cmp	r8, r9
   1b0ce:	d310      	bcc.n	1b0f2 <ticker_job+0x622>
			node = &nodes[ticker_id_iter];
   1b0d0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1b0d4:	eb0a 1002 	add.w	r0, sl, r2, lsl #4
   1b0d8:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
   1b0da:	6a81      	ldr	r1, [r0, #40]	; 0x28
   1b0dc:	2900      	cmp	r1, #0
   1b0de:	d0da      	beq.n	1b096 <ticker_job+0x5c6>
   1b0e0:	7a09      	ldrb	r1, [r1, #8]
   1b0e2:	2901      	cmp	r1, #1
   1b0e4:	d1d7      	bne.n	1b096 <ticker_job+0x5c6>
				ticker_id_iter = node->next;
   1b0e6:	f81a 2002 	ldrb.w	r2, [sl, r2]
				continue;
   1b0ea:	e7eb      	b.n	1b0c4 <ticker_job+0x5f4>
		window_start_ticks = 0U;
   1b0ec:	f04f 0c00 	mov.w	ip, #0
   1b0f0:	e7b7      	b.n	1b062 <ticker_job+0x592>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   1b0f2:	9a02      	ldr	r2, [sp, #8]
   1b0f4:	441a      	add	r2, r3
   1b0f6:	607a      	str	r2, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   1b0f8:	465c      	mov	r4, fp
   1b0fa:	60ab      	str	r3, [r5, #8]
   1b0fc:	f04f 0eff 	mov.w	lr, #255	; 0xff
   1b100:	e000      	b.n	1b104 <ticker_job+0x634>
   1b102:	4614      	mov	r4, r2
			node = &nodes[ticker_id_iter];
   1b104:	b221      	sxth	r1, r4
   1b106:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   1b10a:	eb0a 1c02 	add.w	ip, sl, r2, lsl #4
   1b10e:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   1b110:	f8dc 0008 	ldr.w	r0, [ip, #8]
   1b114:	4283      	cmp	r3, r0
   1b116:	f240 8151 	bls.w	1b3bc <ticker_job+0x8ec>
				ticker->ticks_to_expire -=
   1b11a:	1a1b      	subs	r3, r3, r0
   1b11c:	60ab      	str	r3, [r5, #8]
			ticker_id_iter = node->next;
   1b11e:	f81a 2002 	ldrb.w	r2, [sl, r2]
		while (ticker_id_iter != TICKER_NULL) {
   1b122:	2aff      	cmp	r2, #255	; 0xff
   1b124:	46a6      	mov	lr, r4
   1b126:	d1ec      	bne.n	1b102 <ticker_job+0x632>
			instance->ticker_id_head = nodes[ticker_id_head].next;
   1b128:	9b01      	ldr	r3, [sp, #4]
			nodes[ticker_id_prev].next = ticker_id_head;
   1b12a:	f8cd b000 	str.w	fp, [sp]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   1b12e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1b132:	0109      	lsls	r1, r1, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
   1b134:	f883 b01d 	strb.w	fp, [r3, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   1b138:	f81a 3001 	ldrb.w	r3, [sl, r1]
   1b13c:	702b      	strb	r3, [r5, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
   1b13e:	f80a 6001 	strb.w	r6, [sl, r1]
		ticker->lazy_current--;
   1b142:	8beb      	ldrh	r3, [r5, #30]
   1b144:	3b01      	subs	r3, #1
   1b146:	83eb      	strh	r3, [r5, #30]
		ext_data->reschedule_state =
   1b148:	f04f 0302 	mov.w	r3, #2
   1b14c:	723b      	strb	r3, [r7, #8]
		rescheduled  = 1U;
   1b14e:	2201      	movs	r2, #1
   1b150:	e747      	b.n	1afe2 <ticker_job+0x512>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   1b152:	b111      	cbz	r1, 1b15a <ticker_job+0x68a>
   1b154:	7a0b      	ldrb	r3, [r1, #8]
   1b156:	2b01      	cmp	r3, #1
   1b158:	d037      	beq.n	1b1ca <ticker_job+0x6fa>
				if (!ticker->lazy_current) {
   1b15a:	f1be 0f00 	cmp.w	lr, #0
   1b15e:	d159      	bne.n	1b214 <ticker_job+0x744>
					lazy_periodic = ticker->lazy_periodic;
   1b160:	f8b4 e01c 	ldrh.w	lr, [r4, #28]
   1b164:	4672      	mov	r2, lr
				while (count--) {
   1b166:	1c68      	adds	r0, r5, #1
	ticker->remainder_current += ticker->remainder_periodic;
   1b168:	e9d4 c308 	ldrd	ip, r3, [r4, #32]
				ticks_to_expire = 0U;
   1b16c:	2100      	movs	r1, #0
   1b16e:	9005      	str	r0, [sp, #20]
   1b170:	e004      	b.n	1b17c <ticker_job+0x6ac>
   1b172:	4628      	mov	r0, r5
				while (count--) {
   1b174:	3a01      	subs	r2, #1
					ticks_to_expire +=
   1b176:	4401      	add	r1, r0
				while (count--) {
   1b178:	1c50      	adds	r0, r2, #1
   1b17a:	d00f      	beq.n	1b19c <ticker_job+0x6cc>
	ticker->remainder_current += ticker->remainder_periodic;
   1b17c:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   1b17e:	eb03 0008 	add.w	r0, r3, r8
   1b182:	4548      	cmp	r0, r9
   1b184:	d8f5      	bhi.n	1b172 <ticker_job+0x6a2>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1b186:	9805      	ldr	r0, [sp, #20]
   1b188:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
   1b18c:	3a01      	subs	r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1b18e:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
					ticks_to_expire +=
   1b192:	4401      	add	r1, r0
				while (count--) {
   1b194:	1c50      	adds	r0, r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1b196:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
				while (count--) {
   1b19a:	d1ef      	bne.n	1b17c <ticker_job+0x6ac>
				} else if (!ticker->must_expire) {
   1b19c:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   1b1a0:	6263      	str	r3, [r4, #36]	; 0x24
   1b1a2:	2a00      	cmp	r2, #0
   1b1a4:	f000 80d2 	beq.w	1b34c <ticker_job+0x87c>
				lazy = 0U;
   1b1a8:	2200      	movs	r2, #0
				ticker->lazy_current += (lazy_periodic + lazy);
   1b1aa:	4472      	add	r2, lr
				ticker->ticks_to_expire = ticks_to_expire;
   1b1ac:	60a1      	str	r1, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
   1b1ae:	83e2      	strh	r2, [r4, #30]
   1b1b0:	e00d      	b.n	1b1ce <ticker_job+0x6fe>
   1b1b2:	bf00      	nop
   1b1b4:	ff172b5a 	.word	0xff172b5a
   1b1b8:	7f172b59 	.word	0x7f172b59
		ticker->ticks_to_expire = 0U;
   1b1bc:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
   1b1c0:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   1b1c4:	2d00      	cmp	r5, #0
   1b1c6:	f43f aeeb 	beq.w	1afa0 <ticker_job+0x4d0>
				ticker->req = ticker->ack;
   1b1ca:	7062      	strb	r2, [r4, #1]
				ticker->ticks_to_expire = ticks_elapsed;
   1b1cc:	60a7      	str	r7, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   1b1ce:	9b07      	ldr	r3, [sp, #28]
   1b1d0:	f8db 1014 	ldr.w	r1, [fp, #20]
   1b1d4:	eb03 020a 	add.w	r2, r3, sl
   1b1d8:	4620      	mov	r0, r4
   1b1da:	f7ff f9e1 	bl	1a5a0 <ticks_to_expire_prep>
			ticker->next = *insert_head;
   1b1de:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
   1b1e2:	9a00      	ldr	r2, [sp, #0]
			ticker->req++;
   1b1e4:	9601      	str	r6, [sp, #4]
			ticker->next = *insert_head;
   1b1e6:	5453      	strb	r3, [r2, r1]
			ticker->req++;
   1b1e8:	7863      	ldrb	r3, [r4, #1]
   1b1ea:	3301      	adds	r3, #1
   1b1ec:	7063      	strb	r3, [r4, #1]
   1b1ee:	e6e3      	b.n	1afb8 <ticker_job+0x4e8>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   1b1f0:	9b02      	ldr	r3, [sp, #8]
   1b1f2:	607b      	str	r3, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   1b1f4:	2300      	movs	r3, #0
   1b1f6:	60ab      	str	r3, [r5, #8]
		while (ticker_id_iter != TICKER_NULL) {
   1b1f8:	e7a3      	b.n	1b142 <ticker_job+0x672>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   1b1fa:	f1be 0f00 	cmp.w	lr, #0
   1b1fe:	f47f aec7 	bne.w	1af90 <ticker_job+0x4c0>
   1b202:	b111      	cbz	r1, 1b20a <ticker_job+0x73a>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   1b204:	7a0b      	ldrb	r3, [r1, #8]
   1b206:	2b01      	cmp	r3, #1
   1b208:	d0d8      	beq.n	1b1bc <ticker_job+0x6ec>
			instance->ticks_slot_previous = ticker->ticks_slot;
   1b20a:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticker_id_slot_previous = id_expired;
   1b20e:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   1b212:	e6bd      	b.n	1af90 <ticker_job+0x4c0>
					ticker->req = ticker->ack;
   1b214:	7062      	strb	r2, [r4, #1]
   1b216:	2200      	movs	r2, #0
   1b218:	e7a5      	b.n	1b166 <ticker_job+0x696>
	count_user = instance->count_user;
   1b21a:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   1b21e:	f8db 2004 	ldr.w	r2, [fp, #4]
   1b222:	9201      	str	r2, [sp, #4]
	while (count_user--) {
   1b224:	1e5f      	subs	r7, r3, #1
   1b226:	b2ff      	uxtb	r7, r7
   1b228:	2b00      	cmp	r3, #0
   1b22a:	f43f ad60 	beq.w	1acee <ticker_job+0x21e>
		flag_compare_update = 1U;
   1b22e:	2301      	movs	r3, #1
   1b230:	9306      	str	r3, [sp, #24]
   1b232:	9b01      	ldr	r3, [sp, #4]
		uop->status = TICKER_STATUS_SUCCESS;
   1b234:	2500      	movs	r5, #0
   1b236:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
			uop->status = TICKER_STATUS_FAILURE;
   1b23a:	f04f 0a01 	mov.w	sl, #1
		while (user->first != user->last) {
   1b23e:	787b      	ldrb	r3, [r7, #1]
   1b240:	78fa      	ldrb	r2, [r7, #3]
		user_op = &user->user_op[0];
   1b242:	687e      	ldr	r6, [r7, #4]
		while (user->first != user->last) {
   1b244:	429a      	cmp	r2, r3
   1b246:	d10c      	bne.n	1b262 <ticker_job+0x792>
   1b248:	e05b      	b.n	1b302 <ticker_job+0x832>
	switch (uop->op) {
   1b24a:	2b01      	cmp	r3, #1
   1b24c:	d053      	beq.n	1b2f6 <ticker_job+0x826>
			first = user->first + 1;
   1b24e:	787b      	ldrb	r3, [r7, #1]
			if (first == user->count_user_op) {
   1b250:	7839      	ldrb	r1, [r7, #0]
			first = user->first + 1;
   1b252:	3301      	adds	r3, #1
   1b254:	b2db      	uxtb	r3, r3
				first = 0U;
   1b256:	4299      	cmp	r1, r3
   1b258:	bf08      	it	eq
   1b25a:	2300      	moveq	r3, #0
		while (user->first != user->last) {
   1b25c:	429a      	cmp	r2, r3
			user->first = first;
   1b25e:	707b      	strb	r3, [r7, #1]
		while (user->first != user->last) {
   1b260:	d04f      	beq.n	1b302 <ticker_job+0x832>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   1b262:	b21b      	sxth	r3, r3
   1b264:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   1b268:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1b26c:	eb06 0083 	add.w	r0, r6, r3, lsl #2
	switch (uop->op) {
   1b270:	f816 3023 	ldrb.w	r3, [r6, r3, lsl #2]
   1b274:	2b02      	cmp	r3, #2
   1b276:	d017      	beq.n	1b2a8 <ticker_job+0x7d8>
   1b278:	2b03      	cmp	r3, #3
   1b27a:	d1e6      	bne.n	1b24a <ticker_job+0x77a>
		if (uop->id < instance->count_node) {
   1b27c:	7843      	ldrb	r3, [r0, #1]
   1b27e:	f89b 2008 	ldrb.w	r2, [fp, #8]
   1b282:	429a      	cmp	r2, r3
   1b284:	d93a      	bls.n	1b2fc <ticker_job+0x82c>
			node[uop->id].priority =
   1b286:	f8db 2000 	ldr.w	r2, [fp]
   1b28a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1b28e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   1b292:	7902      	ldrb	r2, [r0, #4]
   1b294:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
   1b298:	6285      	str	r5, [r0, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
   1b29a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (fp_op_func) {
   1b29c:	b113      	cbz	r3, 1b2a4 <ticker_job+0x7d4>
		fp_op_func(uop->status, uop->op_context);
   1b29e:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1b2a0:	6a80      	ldr	r0, [r0, #40]	; 0x28
   1b2a2:	4798      	blx	r3
   1b2a4:	78fa      	ldrb	r2, [r7, #3]
   1b2a6:	e7d2      	b.n	1b24e <ticker_job+0x77e>
		ticker_by_next_slot_get(instance,
   1b2a8:	e9d0 c101 	ldrd	ip, r1, [r0, #4]
	_ticker_id_head = *ticker_id_head;
   1b2ac:	f89c 2000 	ldrb.w	r2, [ip]
		ticker_by_next_slot_get(instance,
   1b2b0:	f8d0 e00c 	ldr.w	lr, [r0, #12]
	node = instance->nodes;
   1b2b4:	f8db 4000 	ldr.w	r4, [fp]
	    (*ticks_current != instance->ticks_current)) {
   1b2b8:	f8db 3014 	ldr.w	r3, [fp, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
   1b2bc:	2aff      	cmp	r2, #255	; 0xff
   1b2be:	d003      	beq.n	1b2c8 <ticker_job+0x7f8>
   1b2c0:	f8d1 8000 	ldr.w	r8, [r1]
   1b2c4:	4598      	cmp	r8, r3
   1b2c6:	d023      	beq.n	1b310 <ticker_job+0x840>
		_ticker_id_head = instance->ticker_id_head;
   1b2c8:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
   1b2cc:	600b      	str	r3, [r1, #0]
		_ticks_to_expire = 0U;
   1b2ce:	f04f 0800 	mov.w	r8, #0
   1b2d2:	e00a      	b.n	1b2ea <ticker_job+0x81a>
		ticker = &node[_ticker_id_head];
   1b2d4:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   1b2d8:	eb04 1103 	add.w	r1, r4, r3, lsl #4
   1b2dc:	011b      	lsls	r3, r3, #4
		_ticks_to_expire += ticker->ticks_to_expire;
   1b2de:	f8d1 9008 	ldr.w	r9, [r1, #8]
			if (ticker->ticks_slot) {
   1b2e2:	6989      	ldr	r1, [r1, #24]
		_ticks_to_expire += ticker->ticks_to_expire;
   1b2e4:	44c8      	add	r8, r9
			if (ticker->ticks_slot) {
   1b2e6:	b911      	cbnz	r1, 1b2ee <ticker_job+0x81e>
		_ticker_id_head = ticker->next;
   1b2e8:	5ce2      	ldrb	r2, [r4, r3]
	while (_ticker_id_head != TICKER_NULL) {
   1b2ea:	2aff      	cmp	r2, #255	; 0xff
   1b2ec:	d1f2      	bne.n	1b2d4 <ticker_job+0x804>
	*ticker_id_head = _ticker_id_head;
   1b2ee:	f88c 2000 	strb.w	r2, [ip]
	*ticks_to_expire = _ticks_to_expire;
   1b2f2:	f8ce 8000 	str.w	r8, [lr]
		fp_op_func = uop->fp_op_func;
   1b2f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
   1b2f8:	6285      	str	r5, [r0, #40]	; 0x28
		break;
   1b2fa:	e7cf      	b.n	1b29c <ticker_job+0x7cc>
			uop->status = TICKER_STATUS_FAILURE;
   1b2fc:	f8c0 a028 	str.w	sl, [r0, #40]	; 0x28
   1b300:	e7cb      	b.n	1b29a <ticker_job+0x7ca>
	while (count_user--) {
   1b302:	9a01      	ldr	r2, [sp, #4]
   1b304:	42ba      	cmp	r2, r7
   1b306:	f1a7 0308 	sub.w	r3, r7, #8
   1b30a:	d00b      	beq.n	1b324 <ticker_job+0x854>
   1b30c:	461f      	mov	r7, r3
   1b30e:	e796      	b.n	1b23e <ticker_job+0x76e>
		ticker = &node[_ticker_id_head];
   1b310:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1b314:	0113      	lsls	r3, r2, #4
	_ticks_to_expire = *ticks_to_expire;
   1b316:	f8de 8000 	ldr.w	r8, [lr]
		_ticker_id_head = ticker->next;
   1b31a:	5ce2      	ldrb	r2, [r4, r3]
	while (_ticker_id_head != TICKER_NULL) {
   1b31c:	e7e5      	b.n	1b2ea <ticker_job+0x81a>
	if (!pending) {
   1b31e:	9b08      	ldr	r3, [sp, #32]
   1b320:	2b00      	cmp	r3, #0
   1b322:	d058      	beq.n	1b3d6 <ticker_job+0x906>
	if (flag_compare_update) {
   1b324:	9b06      	ldr	r3, [sp, #24]
   1b326:	2b00      	cmp	r3, #0
   1b328:	f47f ace1 	bne.w	1acee <ticker_job+0x21e>
	if (instance->worker_trigger) {
   1b32c:	f89b 301f 	ldrb.w	r3, [fp, #31]
	instance->job_guard = 0U;
   1b330:	2200      	movs	r2, #0
   1b332:	f88b 201e 	strb.w	r2, [fp, #30]
	if (instance->worker_trigger) {
   1b336:	b12b      	cbz	r3, 1b344 <ticker_job+0x874>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   1b338:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   1b33c:	465b      	mov	r3, fp
   1b33e:	2201      	movs	r2, #1
   1b340:	2103      	movs	r1, #3
   1b342:	e452      	b.n	1abea <ticker_job+0x11a>
}
   1b344:	b00d      	add	sp, #52	; 0x34
   1b346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b34a:	4770      	bx	lr
					while (ticks_to_expire <
   1b34c:	9804      	ldr	r0, [sp, #16]
   1b34e:	4288      	cmp	r0, r1
   1b350:	f67f af2b 	bls.w	1b1aa <ticker_job+0x6da>
   1b354:	1c68      	adds	r0, r5, #1
   1b356:	9705      	str	r7, [sp, #20]
   1b358:	940a      	str	r4, [sp, #40]	; 0x28
   1b35a:	9f04      	ldr	r7, [sp, #16]
   1b35c:	4604      	mov	r4, r0
   1b35e:	e005      	b.n	1b36c <ticker_job+0x89c>
   1b360:	4628      	mov	r0, r5
						ticks_to_expire +=
   1b362:	4401      	add	r1, r0
						lazy++;
   1b364:	3201      	adds	r2, #1
					while (ticks_to_expire <
   1b366:	428f      	cmp	r7, r1
						lazy++;
   1b368:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   1b36a:	d910      	bls.n	1b38e <ticker_job+0x8be>
	ticker->remainder_current += ticker->remainder_periodic;
   1b36c:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   1b36e:	eb03 0008 	add.w	r0, r3, r8
   1b372:	4548      	cmp	r0, r9
   1b374:	d8f4      	bhi.n	1b360 <ticker_job+0x890>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1b376:	4620      	mov	r0, r4
   1b378:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
   1b37c:	4401      	add	r1, r0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1b37e:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
   1b382:	3201      	adds	r2, #1
					while (ticks_to_expire <
   1b384:	428f      	cmp	r7, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1b386:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
   1b38a:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   1b38c:	d8ee      	bhi.n	1b36c <ticker_job+0x89c>
   1b38e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1b390:	9f05      	ldr	r7, [sp, #20]
   1b392:	6263      	str	r3, [r4, #36]	; 0x24
   1b394:	e709      	b.n	1b1aa <ticker_job+0x6da>
	ticker_id_old_head = instance->ticker_id_head;
   1b396:	f89b 301d 	ldrb.w	r3, [fp, #29]
	count_user = instance->count_user;
   1b39a:	f89b 1009 	ldrb.w	r1, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
   1b39e:	9309      	str	r3, [sp, #36]	; 0x24
	node = &instance->nodes[0];
   1b3a0:	f8db 3000 	ldr.w	r3, [fp]
   1b3a4:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
   1b3a6:	f8db 3004 	ldr.w	r3, [fp, #4]
   1b3aa:	9305      	str	r3, [sp, #20]
	while (count_user--) {
   1b3ac:	1e4b      	subs	r3, r1, #1
	count_user = instance->count_user;
   1b3ae:	9108      	str	r1, [sp, #32]
	while (count_user--) {
   1b3b0:	b2db      	uxtb	r3, r3
   1b3b2:	b3a1      	cbz	r1, 1b41e <ticker_job+0x94e>
		flag_elapsed = 0U;
   1b3b4:	920b      	str	r2, [sp, #44]	; 0x2c
		ticks_elapsed = 0U;
   1b3b6:	9203      	str	r2, [sp, #12]
   1b3b8:	f7ff bbc4 	b.w	1ab44 <ticker_job+0x74>
				node->ticks_to_expire -=
   1b3bc:	1ac3      	subs	r3, r0, r3
		if (ticker_id_prev != TICKER_NULL) {
   1b3be:	f1be 0fff 	cmp.w	lr, #255	; 0xff
				node->ticks_to_expire -=
   1b3c2:	f8cc 3008 	str.w	r3, [ip, #8]
		if (ticker_id_prev != TICKER_NULL) {
   1b3c6:	f43f aebc 	beq.w	1b142 <ticker_job+0x672>
   1b3ca:	fa0f f18e 	sxth.w	r1, lr
   1b3ce:	e6ab      	b.n	1b128 <ticker_job+0x658>
			ticker->ticks_to_expire -= ticks_elapsed;
   1b3d0:	1bdb      	subs	r3, r3, r7
   1b3d2:	60a3      	str	r3, [r4, #8]
			break;
   1b3d4:	e5f4      	b.n	1afc0 <ticker_job+0x4f0>
	count_user = instance->count_user;
   1b3d6:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   1b3da:	f8db 2004 	ldr.w	r2, [fp, #4]
   1b3de:	9201      	str	r2, [sp, #4]
	while (count_user--) {
   1b3e0:	1e5f      	subs	r7, r3, #1
   1b3e2:	b2ff      	uxtb	r7, r7
   1b3e4:	2b00      	cmp	r3, #0
   1b3e6:	f47f af24 	bne.w	1b232 <ticker_job+0x762>
   1b3ea:	e79b      	b.n	1b324 <ticker_job+0x854>
		if (cntr_stop() == 0) {
   1b3ec:	f00b fb8a 	bl	26b04 <cntr_stop>
   1b3f0:	2800      	cmp	r0, #0
   1b3f2:	d19b      	bne.n	1b32c <ticker_job+0x85c>
			instance->ticks_slot_previous = 0U;
   1b3f4:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
   1b3f8:	f00b fbaa 	bl	26b50 <cntr_cnt_get>
   1b3fc:	f8cb 0014 	str.w	r0, [fp, #20]
   1b400:	e794      	b.n	1b32c <ticker_job+0x85c>
		ticks_current = cntr_cnt_get();
   1b402:	f00b fba5 	bl	26b50 <cntr_cnt_get>
   1b406:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   1b408:	f00b fb6c 	bl	26ae4 <cntr_start>
	ticker = &instance->nodes[instance->ticker_id_head];
   1b40c:	f89b 301d 	ldrb.w	r3, [fp, #29]
   1b410:	9300      	str	r3, [sp, #0]
		if (cntr_start() == 0) {
   1b412:	2800      	cmp	r0, #0
   1b414:	f47f ac76 	bne.w	1ad04 <ticker_job+0x234>
			instance->ticks_current = ticks_current;
   1b418:	f8cb 4014 	str.w	r4, [fp, #20]
   1b41c:	e472      	b.n	1ad04 <ticker_job+0x234>
	insert_head = TICKER_NULL;
   1b41e:	23ff      	movs	r3, #255	; 0xff
	while (count_user--) {
   1b420:	9106      	str	r1, [sp, #24]
	insert_head = TICKER_NULL;
   1b422:	9301      	str	r3, [sp, #4]
   1b424:	e453      	b.n	1acce <ticker_job+0x1fe>
   1b426:	bf00      	nop

0001b428 <ticker_init>:
{
   1b428:	b4f0      	push	{r4, r5, r6, r7}
   1b42a:	9d04      	ldr	r5, [sp, #16]
   1b42c:	f89d 7014 	ldrb.w	r7, [sp, #20]
   1b430:	9c06      	ldr	r4, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   1b432:	2800      	cmp	r0, #0
   1b434:	d137      	bne.n	1b4a6 <ticker_init+0x7e>
	instance->count_node = count_node;
   1b436:	4e1d      	ldr	r6, [pc, #116]	; (1b4ac <ticker_init+0x84>)
	while (count_node--) {
   1b438:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
	instance->count_node = count_node;
   1b43c:	7231      	strb	r1, [r6, #8]
	instance->nodes = node;
   1b43e:	6032      	str	r2, [r6, #0]
	while (count_node--) {
   1b440:	fa5f fc8c 	uxtb.w	ip, ip
   1b444:	b149      	cbz	r1, 1b45a <ticker_init+0x32>
   1b446:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   1b44a:	eb02 110c 	add.w	r1, r2, ip, lsl #4
   1b44e:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
   1b450:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
   1b454:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
   1b458:	d1f9      	bne.n	1b44e <ticker_init+0x26>
	while (count_user--) {
   1b45a:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
   1b45c:	7273      	strb	r3, [r6, #9]
	instance->users = user;
   1b45e:	6075      	str	r5, [r6, #4]
	while (count_user--) {
   1b460:	b2d2      	uxtb	r2, r2
   1b462:	b183      	cbz	r3, 1b486 <ticker_init+0x5e>
   1b464:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
		users[count_user].user_op = user_op_;
   1b468:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
   1b46a:	4610      	mov	r0, r2
   1b46c:	f812 3908 	ldrb.w	r3, [r2], #-8
   1b470:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   1b474:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	while (count_user--) {
   1b478:	4285      	cmp	r5, r0
		count_op -= users[count_user].count_user_op;
   1b47a:	eba7 0303 	sub.w	r3, r7, r3
		user_op_ += users[count_user].count_user_op;
   1b47e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		count_op -= users[count_user].count_user_op;
   1b482:	b2df      	uxtb	r7, r3
	while (count_user--) {
   1b484:	d1f0      	bne.n	1b468 <ticker_init+0x40>
	if (count_op) {
   1b486:	b977      	cbnz	r7, 1b4a6 <ticker_init+0x7e>
	instance->caller_id_get_cb = caller_id_get_cb;
   1b488:	9a07      	ldr	r2, [sp, #28]
   1b48a:	6232      	str	r2, [r6, #32]
	instance->sched_cb = sched_cb;
   1b48c:	9a08      	ldr	r2, [sp, #32]
   1b48e:	6272      	str	r2, [r6, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
   1b490:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
   1b494:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1b496:	62b2      	str	r2, [r6, #40]	; 0x28
	return TICKER_STATUS_SUCCESS;
   1b498:	4638      	mov	r0, r7
	instance->ticks_slot_previous = 0U;
   1b49a:	e9c6 7705 	strd	r7, r7, [r6, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
   1b49e:	83b3      	strh	r3, [r6, #28]
	instance->ticks_elapsed_first = 0U;
   1b4a0:	8177      	strh	r7, [r6, #10]
}
   1b4a2:	bcf0      	pop	{r4, r5, r6, r7}
   1b4a4:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
   1b4a6:	2001      	movs	r0, #1
}
   1b4a8:	bcf0      	pop	{r4, r5, r6, r7}
   1b4aa:	4770      	bx	lr
   1b4ac:	2000211c 	.word	0x2000211c

0001b4b0 <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
   1b4b0:	4b04      	ldr	r3, [pc, #16]	; (1b4c4 <ticker_is_initialized+0x14>)
   1b4b2:	222c      	movs	r2, #44	; 0x2c
   1b4b4:	fb02 3300 	mla	r3, r2, r0, r3
   1b4b8:	7a18      	ldrb	r0, [r3, #8]
}
   1b4ba:	3800      	subs	r0, #0
   1b4bc:	bf18      	it	ne
   1b4be:	2001      	movne	r0, #1
   1b4c0:	4770      	bx	lr
   1b4c2:	bf00      	nop
   1b4c4:	2000211c 	.word	0x2000211c

0001b4c8 <ticker_trigger>:
	if (instance->sched_cb) {
   1b4c8:	4b0a      	ldr	r3, [pc, #40]	; (1b4f4 <ticker_trigger+0x2c>)
   1b4ca:	222c      	movs	r2, #44	; 0x2c
   1b4cc:	fb02 3200 	mla	r2, r2, r0, r3
{
   1b4d0:	b410      	push	{r4}
	if (instance->sched_cb) {
   1b4d2:	6a54      	ldr	r4, [r2, #36]	; 0x24
   1b4d4:	b15c      	cbz	r4, 1b4ee <ticker_trigger+0x26>
	instance = &_instance[instance_index];
   1b4d6:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   1b4da:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   1b4de:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1b4e2:	46a4      	mov	ip, r4
   1b4e4:	2201      	movs	r2, #1
}
   1b4e6:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   1b4e8:	2103      	movs	r1, #3
   1b4ea:	2002      	movs	r0, #2
   1b4ec:	4760      	bx	ip
}
   1b4ee:	bc10      	pop	{r4}
   1b4f0:	4770      	bx	lr
   1b4f2:	bf00      	nop
   1b4f4:	2000211c 	.word	0x2000211c

0001b4f8 <ticker_start_ext>:
{
   1b4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   1b4fc:	4e28      	ldr	r6, [pc, #160]	; (1b5a0 <ticker_start_ext+0xa8>)
{
   1b4fe:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   1b502:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   1b504:	252c      	movs	r5, #44	; 0x2c
   1b506:	fb05 6504 	mla	r5, r5, r4, r6
{
   1b50a:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   1b50c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   1b510:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
   1b514:	6869      	ldr	r1, [r5, #4]
   1b516:	eb01 07c0 	add.w	r7, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
   1b51a:	eb06 0684 	add.w	r6, r6, r4, lsl #2
	last = user->last + 1;
   1b51e:	f897 e003 	ldrb.w	lr, [r7, #3]
	if (last >= user->count_user_op) {
   1b522:	f811 4030 	ldrb.w	r4, [r1, r0, lsl #3]
	if (last == user->first) {
   1b526:	7879      	ldrb	r1, [r7, #1]
	last = user->last + 1;
   1b528:	f10e 0c01 	add.w	ip, lr, #1
   1b52c:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   1b530:	4564      	cmp	r4, ip
   1b532:	bf98      	it	ls
   1b534:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   1b538:	4561      	cmp	r1, ip
   1b53a:	d02e      	beq.n	1b59a <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
   1b53c:	6879      	ldr	r1, [r7, #4]
   1b53e:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   1b542:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   1b546:	eb01 048e 	add.w	r4, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
   1b54a:	f04f 0904 	mov.w	r9, #4
   1b54e:	f801 902e 	strb.w	r9, [r1, lr, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
   1b552:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   1b554:	9b08      	ldr	r3, [sp, #32]
   1b556:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   1b558:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b55a:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   1b55c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b55e:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   1b560:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b562:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
   1b564:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b566:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   1b568:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b56a:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   1b56c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b56e:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   1b570:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b572:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   1b574:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b576:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   1b578:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   1b57a:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   1b57c:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.start.lazy = lazy;
   1b57e:	f8a4 8014 	strh.w	r8, [r4, #20]
	user->last = last;
   1b582:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1b586:	e9d5 3508 	ldrd	r3, r5, [r5, #32]
   1b58a:	4798      	blx	r3
   1b58c:	4633      	mov	r3, r6
   1b58e:	4649      	mov	r1, r9
   1b590:	2200      	movs	r2, #0
   1b592:	47a8      	blx	r5
	return user_op->status;
   1b594:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   1b596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   1b59a:	2001      	movs	r0, #1
}
   1b59c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b5a0:	2000211c 	.word	0x2000211c

0001b5a4 <ticker_start>:
{
   1b5a4:	b510      	push	{r4, lr}
   1b5a6:	b08a      	sub	sp, #40	; 0x28
   1b5a8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1b5aa:	9400      	str	r4, [sp, #0]
{
   1b5ac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1b5ae:	9401      	str	r4, [sp, #4]
{
   1b5b0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1b5b2:	9402      	str	r4, [sp, #8]
{
   1b5b4:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1b5b8:	9403      	str	r4, [sp, #12]
{
   1b5ba:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1b5bc:	9404      	str	r4, [sp, #16]
{
   1b5be:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1b5c0:	9405      	str	r4, [sp, #20]
{
   1b5c2:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1b5c4:	9406      	str	r4, [sp, #24]
{
   1b5c6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1b5c8:	9407      	str	r4, [sp, #28]
{
   1b5ca:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1b5cc:	9408      	str	r4, [sp, #32]
   1b5ce:	2400      	movs	r4, #0
   1b5d0:	9409      	str	r4, [sp, #36]	; 0x24
   1b5d2:	f7ff ff91 	bl	1b4f8 <ticker_start_ext>
}
   1b5d6:	b00a      	add	sp, #40	; 0x28
   1b5d8:	bd10      	pop	{r4, pc}
   1b5da:	bf00      	nop

0001b5dc <ticker_update_ext>:
{
   1b5dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   1b5e0:	4d28      	ldr	r5, [pc, #160]	; (1b684 <ticker_update_ext+0xa8>)
{
   1b5e2:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
   1b5e6:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   1b5ea:	4604      	mov	r4, r0
   1b5ec:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   1b5ee:	212c      	movs	r1, #44	; 0x2c
   1b5f0:	fb01 5104 	mla	r1, r1, r4, r5
	struct ticker_instance *instance = &_instance[instance_index];
   1b5f4:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   1b5f8:	eb04 0446 	add.w	r4, r4, r6, lsl #1
   1b5fc:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	user = &instance->users[user_id];
   1b600:	684c      	ldr	r4, [r1, #4]
   1b602:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
   1b606:	f814 9030 	ldrb.w	r9, [r4, r0, lsl #3]
	last = user->last + 1;
   1b60a:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   1b60e:	7874      	ldrb	r4, [r6, #1]
	last = user->last + 1;
   1b610:	f10e 0c01 	add.w	ip, lr, #1
   1b614:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   1b618:	45e1      	cmp	r9, ip
   1b61a:	bf98      	it	ls
   1b61c:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   1b620:	4564      	cmp	r4, ip
{
   1b622:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
	if (last == user->first) {
   1b626:	d02a      	beq.n	1b67e <ticker_update_ext+0xa2>
	user_op = &user->user_op[user->last];
   1b628:	f8d6 a004 	ldr.w	sl, [r6, #4]
   1b62c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   1b630:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   1b634:	eb0a 048e 	add.w	r4, sl, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   1b638:	f04f 0b05 	mov.w	fp, #5
   1b63c:	f80a b02e 	strb.w	fp, [sl, lr, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   1b640:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   1b642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b644:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   1b646:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b648:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   1b64a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b64c:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
   1b64e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b650:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   1b652:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b654:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   1b656:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   1b658:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   1b65a:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.update.lazy = lazy;
   1b65c:	82a7      	strh	r7, [r4, #20]
	user_op->params.update.force = force;
   1b65e:	f884 8016 	strb.w	r8, [r4, #22]
	user_op->params.update.must_expire = must_expire;
   1b662:	f884 9017 	strb.w	r9, [r4, #23]
	user->last = last;
   1b666:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1b66a:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   1b66e:	4798      	blx	r3
   1b670:	462b      	mov	r3, r5
   1b672:	2200      	movs	r2, #0
   1b674:	2104      	movs	r1, #4
   1b676:	47b0      	blx	r6
	return user_op->status;
   1b678:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   1b67a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
   1b67e:	2001      	movs	r0, #1
}
   1b680:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b684:	2000211c 	.word	0x2000211c

0001b688 <ticker_update>:
{
   1b688:	b510      	push	{r4, lr}
   1b68a:	b088      	sub	sp, #32
   1b68c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
   1b68e:	9400      	str	r4, [sp, #0]
{
   1b690:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   1b692:	9401      	str	r4, [sp, #4]
{
   1b694:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
   1b696:	9402      	str	r4, [sp, #8]
{
   1b698:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
   1b69c:	9403      	str	r4, [sp, #12]
{
   1b69e:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
   1b6a2:	9404      	str	r4, [sp, #16]
{
   1b6a4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   1b6a6:	9405      	str	r4, [sp, #20]
{
   1b6a8:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
   1b6aa:	9406      	str	r4, [sp, #24]
   1b6ac:	2400      	movs	r4, #0
   1b6ae:	9407      	str	r4, [sp, #28]
   1b6b0:	f7ff ff94 	bl	1b5dc <ticker_update_ext>
}
   1b6b4:	b008      	add	sp, #32
   1b6b6:	bd10      	pop	{r4, pc}

0001b6b8 <ticker_stop>:
{
   1b6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   1b6bc:	4c1e      	ldr	r4, [pc, #120]	; (1b738 <ticker_stop+0x80>)
{
   1b6be:	4684      	mov	ip, r0
   1b6c0:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   1b6c2:	212c      	movs	r1, #44	; 0x2c
   1b6c4:	fb01 410c 	mla	r1, r1, ip, r4
	struct ticker_instance *instance = &_instance[instance_index];
   1b6c8:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
   1b6cc:	eb0c 0c45 	add.w	ip, ip, r5, lsl #1
	user = &instance->users[user_id];
   1b6d0:	684d      	ldr	r5, [r1, #4]
   1b6d2:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	if (last >= user->count_user_op) {
   1b6d6:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
   1b6da:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   1b6de:	7875      	ldrb	r5, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   1b6e0:	eb04 048c 	add.w	r4, r4, ip, lsl #2
	last = user->last + 1;
   1b6e4:	f10e 0c01 	add.w	ip, lr, #1
   1b6e8:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   1b6ec:	4567      	cmp	r7, ip
   1b6ee:	bf98      	it	ls
   1b6f0:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   1b6f4:	4565      	cmp	r5, ip
   1b6f6:	d01c      	beq.n	1b732 <ticker_stop+0x7a>
	user_op = &user->user_op[user->last];
   1b6f8:	6877      	ldr	r7, [r6, #4]
   1b6fa:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
   1b6fe:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
   1b702:	eb07 058e 	add.w	r5, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   1b706:	f04f 0807 	mov.w	r8, #7
   1b70a:	f807 802e 	strb.w	r8, [r7, lr, lsl #2]
	user_op->fp_op_func = fp_op_func;
   1b70e:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
   1b710:	9b06      	ldr	r3, [sp, #24]
   1b712:	632b      	str	r3, [r5, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   1b714:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   1b716:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
   1b718:	62ab      	str	r3, [r5, #40]	; 0x28
	user->last = last;
   1b71a:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1b71e:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   1b722:	4798      	blx	r3
   1b724:	4623      	mov	r3, r4
   1b726:	2200      	movs	r2, #0
   1b728:	2104      	movs	r1, #4
   1b72a:	47b0      	blx	r6
	return user_op->status;
   1b72c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
   1b72e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   1b732:	2001      	movs	r0, #1
}
   1b734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b738:	2000211c 	.word	0x2000211c

0001b73c <ticker_ticks_now_get>:
	return cntr_cnt_get();
   1b73c:	f00b ba08 	b.w	26b50 <cntr_cnt_get>

0001b740 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1b740:	1a40      	subs	r0, r0, r1
}
   1b742:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1b746:	4770      	bx	lr

0001b748 <ll_addr_set>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   1b748:	b570      	push	{r4, r5, r6, lr}
   1b74a:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
   1b74c:	2000      	movs	r0, #0
{
   1b74e:	460e      	mov	r6, r1
		if (ull_adv_is_enabled(0)) {
   1b750:	f003 fa2e 	bl	1ebb0 <ull_adv_is_enabled>
   1b754:	b978      	cbnz	r0, 1b776 <ll_addr_set+0x2e>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
   1b756:	b13c      	cbz	r4, 1b768 <ll_addr_set+0x20>
   1b758:	4605      	mov	r5, r0
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   1b75a:	2206      	movs	r2, #6
   1b75c:	4631      	mov	r1, r6
   1b75e:	4807      	ldr	r0, [pc, #28]	; (1b77c <ll_addr_set+0x34>)
   1b760:	f012 fc63 	bl	2e02a <memcpy>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
   1b764:	4628      	mov	r0, r5
}
   1b766:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   1b768:	2206      	movs	r2, #6
   1b76a:	4631      	mov	r1, r6
   1b76c:	4804      	ldr	r0, [pc, #16]	; (1b780 <ll_addr_set+0x38>)
   1b76e:	f012 fc5c 	bl	2e02a <memcpy>
	return 0;
   1b772:	4620      	mov	r0, r4
}
   1b774:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   1b776:	200c      	movs	r0, #12
}
   1b778:	bd70      	pop	{r4, r5, r6, pc}
   1b77a:	bf00      	nop
   1b77c:	20002150 	.word	0x20002150
   1b780:	20002148 	.word	0x20002148

0001b784 <ll_addr_get>:

uint8_t *ll_addr_get(uint8_t addr_type)
{
	if (addr_type > BT_ADDR_LE_RANDOM) {
   1b784:	2801      	cmp	r0, #1
{
   1b786:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   1b788:	d805      	bhi.n	1b796 <ll_addr_get+0x12>
		return NULL;
	}

	if (addr_type) {
		return rnd_addr;
   1b78a:	4a04      	ldr	r2, [pc, #16]	; (1b79c <ll_addr_get+0x18>)
   1b78c:	4804      	ldr	r0, [pc, #16]	; (1b7a0 <ll_addr_get+0x1c>)
   1b78e:	2b00      	cmp	r3, #0
   1b790:	bf18      	it	ne
   1b792:	4610      	movne	r0, r2
   1b794:	4770      	bx	lr
		return NULL;
   1b796:	2000      	movs	r0, #0
	}

	return pub_addr;
}
   1b798:	4770      	bx	lr
   1b79a:	bf00      	nop
   1b79c:	20002150 	.word	0x20002150
   1b7a0:	20002148 	.word	0x20002148

0001b7a4 <ll_addr_read>:
	if (addr_type > BT_ADDR_LE_RANDOM) {
   1b7a4:	2801      	cmp	r0, #1

uint8_t *ll_addr_read(uint8_t addr_type, uint8_t *const bdaddr)
{
   1b7a6:	b510      	push	{r4, lr}
   1b7a8:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   1b7aa:	d80b      	bhi.n	1b7c4 <ll_addr_read+0x20>
	if (addr_type) {
   1b7ac:	4608      	mov	r0, r1
		return rnd_addr;
   1b7ae:	4c07      	ldr	r4, [pc, #28]	; (1b7cc <ll_addr_read+0x28>)
   1b7b0:	4907      	ldr	r1, [pc, #28]	; (1b7d0 <ll_addr_read+0x2c>)
   1b7b2:	2b00      	cmp	r3, #0
   1b7b4:	bf18      	it	ne
   1b7b6:	460c      	movne	r4, r1
	uint8_t *addr;

	addr = ll_addr_get(addr_type);
	if (addr) {
		memcpy(bdaddr, addr, BDADDR_SIZE);
   1b7b8:	2206      	movs	r2, #6
   1b7ba:	4621      	mov	r1, r4
   1b7bc:	f012 fc35 	bl	2e02a <memcpy>
	}

	return addr;
}
   1b7c0:	4620      	mov	r0, r4
   1b7c2:	bd10      	pop	{r4, pc}
		return NULL;
   1b7c4:	2400      	movs	r4, #0
}
   1b7c6:	4620      	mov	r0, r4
   1b7c8:	bd10      	pop	{r4, pc}
   1b7ca:	bf00      	nop
   1b7cc:	20002148 	.word	0x20002148
   1b7d0:	20002150 	.word	0x20002150

0001b7d4 <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   1b7d4:	2802      	cmp	r0, #2
   1b7d6:	d001      	beq.n	1b7dc <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
   1b7d8:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   1b7da:	4770      	bx	lr
{
   1b7dc:	b538      	push	{r3, r4, r5, lr}
   1b7de:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
   1b7e0:	4608      	mov	r0, r1
   1b7e2:	461d      	mov	r5, r3
   1b7e4:	f004 f90a 	bl	1f9fc <ll_connected_get>
			if (!conn) {
   1b7e8:	b110      	cbz	r0, 1b7f0 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   1b7ea:	2000      	movs	r0, #0
   1b7ec:	7028      	strb	r0, [r5, #0]
}
   1b7ee:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1b7f0:	4620      	mov	r0, r4
}
   1b7f2:	bd38      	pop	{r3, r4, r5, pc}

0001b7f4 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   1b7f4:	2300      	movs	r3, #0
   1b7f6:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   1b7f8:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   1b7fa:	4770      	bx	lr

0001b7fc <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   1b7fc:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   1b7fe:	4802      	ldr	r0, [pc, #8]	; (1b808 <hci_driver_init+0xc>)
   1b800:	f7f7 fca2 	bl	13148 <bt_hci_driver_register>

	return 0;
}
   1b804:	2000      	movs	r0, #0
   1b806:	bd08      	pop	{r3, pc}
   1b808:	000330b4 	.word	0x000330b4

0001b80c <hci_driver_send>:
{
   1b80c:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
   1b80e:	8983      	ldrh	r3, [r0, #12]
{
   1b810:	b087      	sub	sp, #28
	if (!buf->len) {
   1b812:	2b00      	cmp	r3, #0
   1b814:	d03b      	beq.n	1b88e <hci_driver_send+0x82>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1b816:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   1b818:	4604      	mov	r4, r0
   1b81a:	b323      	cbz	r3, 1b866 <hci_driver_send+0x5a>
   1b81c:	2b02      	cmp	r3, #2
   1b81e:	d010      	beq.n	1b842 <hci_driver_send+0x36>
		BT_ERR("Unknown HCI type %u", type);
   1b820:	4921      	ldr	r1, [pc, #132]	; (1b8a8 <hci_driver_send+0x9c>)
   1b822:	2203      	movs	r2, #3
	switch (type) {
   1b824:	e9cd 1304 	strd	r1, r3, [sp, #16]
		BT_ERR("Unknown HCI type %u", type);
   1b828:	9203      	str	r2, [sp, #12]
   1b82a:	4820      	ldr	r0, [pc, #128]	; (1b8ac <hci_driver_send+0xa0>)
   1b82c:	2300      	movs	r3, #0
   1b82e:	aa03      	add	r2, sp, #12
   1b830:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b834:	f010 fe47 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
   1b838:	f06f 0515 	mvn.w	r5, #21
}
   1b83c:	4628      	mov	r0, r5
   1b83e:	b007      	add	sp, #28
   1b840:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
   1b842:	4669      	mov	r1, sp
   1b844:	f000 ff5a 	bl	1c6fc <hci_acl_handle>
	if (evt) {
   1b848:	9b00      	ldr	r3, [sp, #0]
	err = hci_acl_handle(buf, &evt);
   1b84a:	4605      	mov	r5, r0
	if (evt) {
   1b84c:	b113      	cbz	r3, 1b854 <hci_driver_send+0x48>
		bt_recv_prio(evt);
   1b84e:	4618      	mov	r0, r3
   1b850:	f7f7 fc5c 	bl	1310c <bt_recv_prio>
	if (!err) {
   1b854:	2d00      	cmp	r5, #0
   1b856:	d1f1      	bne.n	1b83c <hci_driver_send+0x30>
		net_buf_unref(buf);
   1b858:	4620      	mov	r0, r4
   1b85a:	f00c fa23 	bl	27ca4 <net_buf_unref>
   1b85e:	2500      	movs	r5, #0
}
   1b860:	4628      	mov	r0, r5
   1b862:	b007      	add	sp, #28
   1b864:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   1b866:	4669      	mov	r1, sp
	struct node_rx_pdu *node_rx = NULL;
   1b868:	9300      	str	r3, [sp, #0]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   1b86a:	f000 fa67 	bl	1bd3c <hci_cmd_handle>
	if (evt) {
   1b86e:	2800      	cmp	r0, #0
   1b870:	d0f2      	beq.n	1b858 <hci_driver_send+0x4c>
		bt_recv_prio(evt);
   1b872:	f7f7 fc4b 	bl	1310c <bt_recv_prio>
		if (node_rx) {
   1b876:	9d00      	ldr	r5, [sp, #0]
   1b878:	2d00      	cmp	r5, #0
   1b87a:	d0ed      	beq.n	1b858 <hci_driver_send+0x4c>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   1b87c:	4628      	mov	r0, r5
   1b87e:	f001 fb7b 	bl	1cf78 <hci_get_class>
   1b882:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
   1b884:	9900      	ldr	r1, [sp, #0]
   1b886:	480a      	ldr	r0, [pc, #40]	; (1b8b0 <hci_driver_send+0xa4>)
   1b888:	f015 ff44 	bl	31714 <k_queue_append>
	if (!err) {
   1b88c:	e7e4      	b.n	1b858 <hci_driver_send+0x4c>
		BT_ERR("Empty HCI packet");
   1b88e:	4909      	ldr	r1, [pc, #36]	; (1b8b4 <hci_driver_send+0xa8>)
   1b890:	2202      	movs	r2, #2
   1b892:	e9cd 2103 	strd	r2, r1, [sp, #12]
   1b896:	4805      	ldr	r0, [pc, #20]	; (1b8ac <hci_driver_send+0xa0>)
   1b898:	aa03      	add	r2, sp, #12
   1b89a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b89e:	f010 fe12 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
   1b8a2:	f06f 0515 	mvn.w	r5, #21
   1b8a6:	e7c9      	b.n	1b83c <hci_driver_send+0x30>
   1b8a8:	00033008 	.word	0x00033008
   1b8ac:	000323bc 	.word	0x000323bc
   1b8b0:	20000c54 	.word	0x20000c54
   1b8b4:	00032ff4 	.word	0x00032ff4

0001b8b8 <recv_thread>:
{
   1b8b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   1b8ba:	4e41      	ldr	r6, [pc, #260]	; (1b9c0 <recv_thread+0x108>)
		LL_ASSERT(0);
   1b8bc:	4f41      	ldr	r7, [pc, #260]	; (1b9c4 <recv_thread+0x10c>)
{
   1b8be:	b083      	sub	sp, #12
   1b8c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b8c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b8c8:	4630      	mov	r0, r6
   1b8ca:	f00e feab 	bl	2a624 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   1b8ce:	2800      	cmp	r0, #0
   1b8d0:	d0f6      	beq.n	1b8c0 <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
   1b8d2:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   1b8d4:	9001      	str	r0, [sp, #4]
	switch (class) {
   1b8d6:	2b04      	cmp	r3, #4
   1b8d8:	d821      	bhi.n	1b91e <recv_thread+0x66>
   1b8da:	2b00      	cmp	r3, #0
   1b8dc:	d14b      	bne.n	1b976 <recv_thread+0xbe>
		LL_ASSERT(0);
   1b8de:	493a      	ldr	r1, [pc, #232]	; (1b9c8 <recv_thread+0x110>)
   1b8e0:	483a      	ldr	r0, [pc, #232]	; (1b9cc <recv_thread+0x114>)
   1b8e2:	f240 13a3 	movw	r3, #419	; 0x1a3
   1b8e6:	463a      	mov	r2, r7
   1b8e8:	f010 fb6d 	bl	2bfc6 <assert_print>
   1b8ec:	4040      	eors	r0, r0
   1b8ee:	f380 8811 	msr	BASEPRI, r0
   1b8f2:	f04f 0003 	mov.w	r0, #3
   1b8f6:	df02      	svc	2
	node_rx->hdr.next = NULL;
   1b8f8:	9b01      	ldr	r3, [sp, #4]
   1b8fa:	2200      	movs	r2, #0
   1b8fc:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   1b8fe:	a801      	add	r0, sp, #4
   1b900:	f001 ff60 	bl	1d7c4 <ll_rx_mem_release>
   1b904:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b908:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b90c:	4630      	mov	r0, r6
   1b90e:	f00e fe89 	bl	2a624 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   1b912:	2800      	cmp	r0, #0
   1b914:	d0d4      	beq.n	1b8c0 <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
   1b916:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   1b918:	9001      	str	r0, [sp, #4]
	switch (class) {
   1b91a:	2b04      	cmp	r3, #4
   1b91c:	d9dd      	bls.n	1b8da <recv_thread+0x22>
   1b91e:	2b05      	cmp	r3, #5
   1b920:	d1dd      	bne.n	1b8de <recv_thread+0x26>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1b922:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b92a:	2003      	movs	r0, #3
   1b92c:	f7f6 f99a 	bl	11c64 <bt_buf_get_rx>
   1b930:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   1b932:	4621      	mov	r1, r4
   1b934:	9801      	ldr	r0, [sp, #4]
   1b936:	f000 ffa7 	bl	1c888 <hci_acl_encode>
	node_rx->hdr.next = NULL;
   1b93a:	9b01      	ldr	r3, [sp, #4]
   1b93c:	2200      	movs	r2, #0
   1b93e:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   1b940:	a801      	add	r0, sp, #4
   1b942:	f001 ff3f 	bl	1d7c4 <ll_rx_mem_release>
		while (buf) {
   1b946:	2c00      	cmp	r4, #0
   1b948:	d0ba      	beq.n	1b8c0 <recv_thread+0x8>
			frag = net_buf_ref(buf);
   1b94a:	4620      	mov	r0, r4
   1b94c:	f015 f860 	bl	30a10 <net_buf_ref>
			buf = net_buf_frag_del(NULL, buf);
   1b950:	4621      	mov	r1, r4
			frag = net_buf_ref(buf);
   1b952:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
   1b954:	2000      	movs	r0, #0
   1b956:	f015 f881 	bl	30a5c <net_buf_frag_del>
			if (frag->len) {
   1b95a:	89ab      	ldrh	r3, [r5, #12]
			buf = net_buf_frag_del(NULL, buf);
   1b95c:	4604      	mov	r4, r0
				bt_recv(frag);
   1b95e:	4628      	mov	r0, r5
			if (frag->len) {
   1b960:	b133      	cbz	r3, 1b970 <recv_thread+0xb8>
				bt_recv(frag);
   1b962:	f7f7 fb19 	bl	12f98 <bt_recv>
	z_impl_k_yield();
   1b966:	f00f faef 	bl	2af48 <z_impl_k_yield>
		while (buf) {
   1b96a:	2c00      	cmp	r4, #0
   1b96c:	d1ed      	bne.n	1b94a <recv_thread+0x92>
   1b96e:	e7a7      	b.n	1b8c0 <recv_thread+0x8>
				net_buf_unref(frag);
   1b970:	f00c f998 	bl	27ca4 <net_buf_unref>
   1b974:	e7f7      	b.n	1b966 <recv_thread+0xae>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   1b976:	2b02      	cmp	r3, #2
   1b978:	d013      	beq.n	1b9a2 <recv_thread+0xea>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1b97a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b97e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b982:	2001      	movs	r0, #1
   1b984:	f7f6 f96e 	bl	11c64 <bt_buf_get_rx>
   1b988:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
   1b98a:	9801      	ldr	r0, [sp, #4]
		if (buf) {
   1b98c:	b19c      	cbz	r4, 1b9b6 <recv_thread+0xfe>
			hci_evt_encode(node_rx, buf);
   1b98e:	4621      	mov	r1, r4
   1b990:	f000 ffb4 	bl	1c8fc <hci_evt_encode>
	node_rx->hdr.next = NULL;
   1b994:	9b01      	ldr	r3, [sp, #4]
   1b996:	2200      	movs	r2, #0
   1b998:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   1b99a:	a801      	add	r0, sp, #4
   1b99c:	f001 ff12 	bl	1d7c4 <ll_rx_mem_release>
		while (buf) {
   1b9a0:	e7d3      	b.n	1b94a <recv_thread+0x92>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   1b9a2:	2200      	movs	r2, #0
   1b9a4:	2300      	movs	r3, #0
   1b9a6:	2101      	movs	r1, #1
   1b9a8:	2000      	movs	r0, #0
   1b9aa:	f7f6 f985 	bl	11cb8 <bt_buf_get_evt>
   1b9ae:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
   1b9b0:	9801      	ldr	r0, [sp, #4]
		if (buf) {
   1b9b2:	2c00      	cmp	r4, #0
   1b9b4:	d1eb      	bne.n	1b98e <recv_thread+0xd6>
	node_rx->hdr.next = NULL;
   1b9b6:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
   1b9b8:	a801      	add	r0, sp, #4
   1b9ba:	f001 ff03 	bl	1d7c4 <ll_rx_mem_release>
		while (buf) {
   1b9be:	e77f      	b.n	1b8c0 <recv_thread+0x8>
   1b9c0:	20000c54 	.word	0x20000c54
   1b9c4:	0003301c 	.word	0x0003301c
   1b9c8:	0003305c 	.word	0x0003305c
   1b9cc:	00032fc4 	.word	0x00032fc4

0001b9d0 <prio_recv_thread>:
{
   1b9d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   1b9d4:	4f2e      	ldr	r7, [pc, #184]	; (1ba90 <prio_recv_thread+0xc0>)
				k_fifo_put(&recv_fifo, node_rx);
   1b9d6:	4e2f      	ldr	r6, [pc, #188]	; (1ba94 <prio_recv_thread+0xc4>)
{
   1b9d8:	b082      	sub	sp, #8
   1b9da:	e00c      	b.n	1b9f6 <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   1b9dc:	f7f6 f96c 	bl	11cb8 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   1b9e0:	4622      	mov	r2, r4
   1b9e2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   1b9e6:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   1b9e8:	f001 faae 	bl	1cf48 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   1b9ec:	4620      	mov	r0, r4
   1b9ee:	f7f7 fb8d 	bl	1310c <bt_recv_prio>
	z_impl_k_yield();
   1b9f2:	f00f faa9 	bl	2af48 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   1b9f6:	f10d 0102 	add.w	r1, sp, #2
   1b9fa:	a801      	add	r0, sp, #4
   1b9fc:	f001 fd9c 	bl	1d538 <ll_rx_get>
   1ba00:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   1ba02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ba06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ba0a:	2100      	movs	r1, #0
   1ba0c:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   1ba0e:	2c00      	cmp	r4, #0
   1ba10:	d1e4      	bne.n	1b9dc <prio_recv_thread+0xc>
		if (node_rx) {
   1ba12:	9b01      	ldr	r3, [sp, #4]
   1ba14:	b1b3      	cbz	r3, 1ba44 <prio_recv_thread+0x74>
			ll_rx_dequeue();
   1ba16:	f001 fe05 	bl	1d624 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   1ba1a:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1ba1e:	4640      	mov	r0, r8
   1ba20:	f001 faaa 	bl	1cf78 <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
   1ba24:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   1ba26:	f888 0005 	strb.w	r0, [r8, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   1ba2a:	796b      	ldrb	r3, [r5, #5]
   1ba2c:	2b03      	cmp	r3, #3
   1ba2e:	d102      	bne.n	1ba36 <prio_recv_thread+0x66>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   1ba30:	792b      	ldrb	r3, [r5, #4]
   1ba32:	2b18      	cmp	r3, #24
   1ba34:	d00e      	beq.n	1ba54 <prio_recv_thread+0x84>
				k_fifo_put(&recv_fifo, node_rx);
   1ba36:	4629      	mov	r1, r5
   1ba38:	4630      	mov	r0, r6
   1ba3a:	f015 fe6b 	bl	31714 <k_queue_append>
		if (iso_received || node_rx) {
   1ba3e:	9b01      	ldr	r3, [sp, #4]
   1ba40:	2b00      	cmp	r3, #0
   1ba42:	d1d8      	bne.n	1b9f6 <prio_recv_thread+0x26>
	return z_impl_k_sem_take(sem, timeout);
   1ba44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ba48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ba4c:	4638      	mov	r0, r7
   1ba4e:	f00e fe43 	bl	2a6d8 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   1ba52:	e7d0      	b.n	1b9f6 <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   1ba54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ba58:	4621      	mov	r1, r4
   1ba5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ba5e:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   1ba60:	f8b5 8006 	ldrh.w	r8, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   1ba64:	f7f6 f928 	bl	11cb8 <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
   1ba68:	4641      	mov	r1, r8
   1ba6a:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   1ba6c:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   1ba6e:	f105 001c 	add.w	r0, r5, #28
   1ba72:	f000 fee1 	bl	1c838 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   1ba76:	4640      	mov	r0, r8
   1ba78:	f000 fefe 	bl	1c878 <hci_disconn_complete_process>
				bt_recv_prio(buf);
   1ba7c:	4620      	mov	r0, r4
			if (buf) {
   1ba7e:	b124      	cbz	r4, 1ba8a <prio_recv_thread+0xba>
				bt_recv_prio(buf);
   1ba80:	f7f7 fb44 	bl	1310c <bt_recv_prio>
					net_buf_unref(buf);
   1ba84:	4620      	mov	r0, r4
   1ba86:	f00c f90d 	bl	27ca4 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
   1ba8a:	9d01      	ldr	r5, [sp, #4]
   1ba8c:	e7d3      	b.n	1ba36 <prio_recv_thread+0x66>
   1ba8e:	bf00      	nop
   1ba90:	20000c24 	.word	0x20000c24
   1ba94:	20000c54 	.word	0x20000c54

0001ba98 <hci_driver_open>:
{
   1ba98:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   1ba9a:	4822      	ldr	r0, [pc, #136]	; (1bb24 <hci_driver_open+0x8c>)
{
   1ba9c:	b08e      	sub	sp, #56	; 0x38
	err = ll_init(&sem_prio_recv);
   1ba9e:	f002 fb0b 	bl	1e0b8 <ll_init>
	if (err) {
   1baa2:	4604      	mov	r4, r0
   1baa4:	bb70      	cbnz	r0, 1bb04 <hci_driver_open+0x6c>
	hci_init(NULL);
   1baa6:	f001 fa7d 	bl	1cfa4 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   1baaa:	2600      	movs	r6, #0
   1baac:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1baae:	f06f 0209 	mvn.w	r2, #9
   1bab2:	e9cd 2403 	strd	r2, r4, [sp, #12]
   1bab6:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1baba:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1babe:	4b1a      	ldr	r3, [pc, #104]	; (1bb28 <hci_driver_open+0x90>)
   1bac0:	491a      	ldr	r1, [pc, #104]	; (1bb2c <hci_driver_open+0x94>)
   1bac2:	9400      	str	r4, [sp, #0]
   1bac4:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   1bac8:	4819      	ldr	r0, [pc, #100]	; (1bb30 <hci_driver_open+0x98>)
   1baca:	f00e fc4d 	bl	2a368 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1bace:	4919      	ldr	r1, [pc, #100]	; (1bb34 <hci_driver_open+0x9c>)
   1bad0:	4817      	ldr	r0, [pc, #92]	; (1bb30 <hci_driver_open+0x98>)
   1bad2:	f015 fd86 	bl	315e2 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1bad6:	f06f 0207 	mvn.w	r2, #7
   1bada:	e9cd 2403 	strd	r2, r4, [sp, #12]
   1bade:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1bae2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1bae6:	4b14      	ldr	r3, [pc, #80]	; (1bb38 <hci_driver_open+0xa0>)
   1bae8:	4914      	ldr	r1, [pc, #80]	; (1bb3c <hci_driver_open+0xa4>)
   1baea:	9400      	str	r4, [sp, #0]
   1baec:	f640 0298 	movw	r2, #2200	; 0x898
   1baf0:	4813      	ldr	r0, [pc, #76]	; (1bb40 <hci_driver_open+0xa8>)
   1baf2:	f00e fc39 	bl	2a368 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1baf6:	4913      	ldr	r1, [pc, #76]	; (1bb44 <hci_driver_open+0xac>)
   1baf8:	4811      	ldr	r0, [pc, #68]	; (1bb40 <hci_driver_open+0xa8>)
   1bafa:	f015 fd72 	bl	315e2 <z_impl_k_thread_name_set>
}
   1bafe:	4620      	mov	r0, r4
   1bb00:	b00e      	add	sp, #56	; 0x38
   1bb02:	bdd0      	pop	{r4, r6, r7, pc}
		BT_ERR("LL initialization failed: %d", err);
   1bb04:	4a10      	ldr	r2, [pc, #64]	; (1bb48 <hci_driver_open+0xb0>)
   1bb06:	2303      	movs	r3, #3
   1bb08:	e9cd 200c 	strd	r2, r0, [sp, #48]	; 0x30
   1bb0c:	930b      	str	r3, [sp, #44]	; 0x2c
   1bb0e:	480f      	ldr	r0, [pc, #60]	; (1bb4c <hci_driver_open+0xb4>)
   1bb10:	2300      	movs	r3, #0
   1bb12:	aa0b      	add	r2, sp, #44	; 0x2c
   1bb14:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bb18:	f010 fcd5 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
}
   1bb1c:	4620      	mov	r0, r4
   1bb1e:	b00e      	add	sp, #56	; 0x38
   1bb20:	bdd0      	pop	{r4, r6, r7, pc}
   1bb22:	bf00      	nop
   1bb24:	20000c24 	.word	0x20000c24
   1bb28:	0001b9d1 	.word	0x0001b9d1
   1bb2c:	200042a0 	.word	0x200042a0
   1bb30:	20001840 	.word	0x20001840
   1bb34:	00033080 	.word	0x00033080
   1bb38:	0001b8b9 	.word	0x0001b8b9
   1bb3c:	20004480 	.word	0x20004480
   1bb40:	200018c0 	.word	0x200018c0
   1bb44:	0003308c 	.word	0x0003308c
   1bb48:	00033060 	.word	0x00033060
   1bb4c:	000323bc 	.word	0x000323bc

0001bb50 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   1bb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1bb52:	4c19      	ldr	r4, [pc, #100]	; (1bbb8 <le_remote_feat_complete+0x68>)
   1bb54:	6864      	ldr	r4, [r4, #4]
   1bb56:	00a4      	lsls	r4, r4, #2
   1bb58:	d504      	bpl.n	1bb64 <le_remote_feat_complete+0x14>
   1bb5a:	4615      	mov	r5, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   1bb5c:	4a17      	ldr	r2, [pc, #92]	; (1bbbc <le_remote_feat_complete+0x6c>)
   1bb5e:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1bb60:	0712      	lsls	r2, r2, #28
   1bb62:	d400      	bmi.n	1bb66 <le_remote_feat_complete+0x16>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   1bb64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bb66:	f103 0408 	add.w	r4, r3, #8
   1bb6a:	4607      	mov	r7, r0
   1bb6c:	460e      	mov	r6, r1
   1bb6e:	4620      	mov	r0, r4
   1bb70:	2102      	movs	r1, #2
   1bb72:	f014 ff7f 	bl	30a74 <net_buf_simple_add>
	hdr->evt = evt;
   1bb76:	233e      	movs	r3, #62	; 0x3e
   1bb78:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1bb7a:	230c      	movs	r3, #12
   1bb7c:	7043      	strb	r3, [r0, #1]
   1bb7e:	2101      	movs	r1, #1
   1bb80:	4620      	mov	r0, r4
   1bb82:	f014 ff77 	bl	30a74 <net_buf_simple_add>
   1bb86:	4603      	mov	r3, r0
	me->subevent = subevt;
   1bb88:	2204      	movs	r2, #4
   1bb8a:	701a      	strb	r2, [r3, #0]
   1bb8c:	4620      	mov	r0, r4
   1bb8e:	210b      	movs	r1, #11
   1bb90:	f014 ff70 	bl	30a74 <net_buf_simple_add>
		memcpy(&sep->features[0],
   1bb94:	2208      	movs	r2, #8
	sep->status = status;
   1bb96:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   1bb98:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
   1bb9c:	b92f      	cbnz	r7, 1bbaa <le_remote_feat_complete+0x5a>
		memcpy(&sep->features[0],
   1bb9e:	1d31      	adds	r1, r6, #4
   1bba0:	3003      	adds	r0, #3
}
   1bba2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
   1bba6:	f012 ba40 	b.w	2e02a <memcpy>
}
   1bbaa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   1bbae:	2100      	movs	r1, #0
   1bbb0:	3003      	adds	r0, #3
   1bbb2:	f012 ba45 	b.w	2e040 <memset>
   1bbb6:	bf00      	nop
   1bbb8:	200001e0 	.word	0x200001e0
   1bbbc:	200001e8 	.word	0x200001e8

0001bbc0 <hci_vendor_cmd_handle_common>:
{
   1bbc0:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (ocf) {
   1bbc2:	3801      	subs	r0, #1
{
   1bbc4:	b087      	sub	sp, #28
   1bbc6:	4615      	mov	r5, r2
	switch (ocf) {
   1bbc8:	2809      	cmp	r0, #9
   1bbca:	d806      	bhi.n	1bbda <hci_vendor_cmd_handle_common+0x1a>
   1bbcc:	e8df f000 	tbb	[pc, r0]
   1bbd0:	05442709 	.word	0x05442709
   1bbd4:	6c055805 	.word	0x6c055805
   1bbd8:	9e89      	.short	0x9e89
   1bbda:	f06f 0015 	mvn.w	r0, #21
}
   1bbde:	b007      	add	sp, #28
   1bbe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1bbe2:	4b54      	ldr	r3, [pc, #336]	; (1bd34 <hci_vendor_cmd_handle_common+0x174>)
   1bbe4:	210d      	movs	r1, #13
   1bbe6:	8818      	ldrh	r0, [r3, #0]
   1bbe8:	f012 fc6c 	bl	2e4c4 <bt_hci_cmd_complete_create>
   1bbec:	210d      	movs	r1, #13
   1bbee:	6028      	str	r0, [r5, #0]
   1bbf0:	3008      	adds	r0, #8
   1bbf2:	f014 ff3f 	bl	30a74 <net_buf_simple_add>
   1bbf6:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   1bbf8:	2202      	movs	r2, #2
	rp->status = 0x00;
   1bbfa:	2000      	movs	r0, #0
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   1bbfc:	2403      	movs	r4, #3
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   1bbfe:	2163      	movs	r1, #99	; 0x63
	rp->status = 0x00;
   1bc00:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   1bc02:	705a      	strb	r2, [r3, #1]
   1bc04:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   1bc06:	70da      	strb	r2, [r3, #3]
   1bc08:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
   1bc0a:	7158      	strb	r0, [r3, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   1bc0c:	719c      	strb	r4, [r3, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   1bc0e:	71d8      	strb	r0, [r3, #7]
   1bc10:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   1bc12:	7259      	strb	r1, [r3, #9]
   1bc14:	7298      	strb	r0, [r3, #10]
   1bc16:	72d8      	strb	r0, [r3, #11]
   1bc18:	7318      	strb	r0, [r3, #12]
}
   1bc1a:	b007      	add	sp, #28
   1bc1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1bc1e:	4b45      	ldr	r3, [pc, #276]	; (1bd34 <hci_vendor_cmd_handle_common+0x174>)
   1bc20:	2141      	movs	r1, #65	; 0x41
   1bc22:	8818      	ldrh	r0, [r3, #0]
   1bc24:	f012 fc4e 	bl	2e4c4 <bt_hci_cmd_complete_create>
   1bc28:	2141      	movs	r1, #65	; 0x41
   1bc2a:	6028      	str	r0, [r5, #0]
   1bc2c:	3008      	adds	r0, #8
   1bc2e:	f014 ff21 	bl	30a74 <net_buf_simple_add>
	rp->status = 0x00;
   1bc32:	2400      	movs	r4, #0
   1bc34:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1bc36:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   1bc38:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1bc3c:	4621      	mov	r1, r4
   1bc3e:	f012 f9ff 	bl	2e040 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   1bc42:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   1bc44:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
   1bc46:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
   1bc4a:	f043 0303 	orr.w	r3, r3, #3
	return 0;
   1bc4e:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
   1bc50:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   1bc52:	70ab      	strb	r3, [r5, #2]
}
   1bc54:	b007      	add	sp, #28
   1bc56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1bc58:	4b36      	ldr	r3, [pc, #216]	; (1bd34 <hci_vendor_cmd_handle_common+0x174>)
   1bc5a:	2109      	movs	r1, #9
   1bc5c:	8818      	ldrh	r0, [r3, #0]
   1bc5e:	f012 fc31 	bl	2e4c4 <bt_hci_cmd_complete_create>
   1bc62:	2109      	movs	r1, #9
   1bc64:	6028      	str	r0, [r5, #0]
   1bc66:	3008      	adds	r0, #8
   1bc68:	f014 ff04 	bl	30a74 <net_buf_simple_add>
	rp->status = 0x00;
   1bc6c:	2400      	movs	r4, #0
   1bc6e:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1bc72:	2208      	movs	r2, #8
   1bc74:	4621      	mov	r1, r4
   1bc76:	f012 f9e3 	bl	2e040 <memset>
	return 0;
   1bc7a:	4620      	mov	r0, r4
}
   1bc7c:	b007      	add	sp, #28
   1bc7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   1bc80:	6889      	ldr	r1, [r1, #8]
   1bc82:	2000      	movs	r0, #0
   1bc84:	f7ff fd60 	bl	1b748 <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   1bc88:	4b2a      	ldr	r3, [pc, #168]	; (1bd34 <hci_vendor_cmd_handle_common+0x174>)
   1bc8a:	2101      	movs	r1, #1
   1bc8c:	8818      	ldrh	r0, [r3, #0]
   1bc8e:	f012 fc19 	bl	2e4c4 <bt_hci_cmd_complete_create>
   1bc92:	2101      	movs	r1, #1
   1bc94:	4604      	mov	r4, r0
   1bc96:	3008      	adds	r0, #8
   1bc98:	f014 feec 	bl	30a74 <net_buf_simple_add>
   1bc9c:	4603      	mov	r3, r0
	ccst->status = status;
   1bc9e:	2000      	movs	r0, #0
   1bca0:	7018      	strb	r0, [r3, #0]
	*evt = cmd_complete_status(0x00);
   1bca2:	602c      	str	r4, [r5, #0]
}
   1bca4:	b007      	add	sp, #28
   1bca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
   1bca8:	4e23      	ldr	r6, [pc, #140]	; (1bd38 <hci_vendor_cmd_handle_common+0x178>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1bcaa:	4f22      	ldr	r7, [pc, #136]	; (1bd34 <hci_vendor_cmd_handle_common+0x174>)
	const char build_info[] = HCI_VS_BUILD_INFO;
   1bcac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1bcae:	f10d 0c04 	add.w	ip, sp, #4
   1bcb2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1bcb6:	6833      	ldr	r3, [r6, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1bcb8:	8838      	ldrh	r0, [r7, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
   1bcba:	f8ac 3000 	strh.w	r3, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1bcbe:	2113      	movs	r1, #19
   1bcc0:	f012 fc00 	bl	2e4c4 <bt_hci_cmd_complete_create>
   1bcc4:	2113      	movs	r1, #19
   1bcc6:	6028      	str	r0, [r5, #0]
   1bcc8:	3008      	adds	r0, #8
   1bcca:	f014 fed3 	bl	30a74 <net_buf_simple_add>
	rp->status = 0x00;
   1bcce:	2400      	movs	r4, #0
   1bcd0:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   1bcd4:	2212      	movs	r2, #18
   1bcd6:	a901      	add	r1, sp, #4
   1bcd8:	f012 f9a7 	bl	2e02a <memcpy>
	return 0;
   1bcdc:	4620      	mov	r0, r4
}
   1bcde:	b007      	add	sp, #28
   1bce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1bce2:	4b14      	ldr	r3, [pc, #80]	; (1bd34 <hci_vendor_cmd_handle_common+0x174>)
   1bce4:	2118      	movs	r1, #24
   1bce6:	8818      	ldrh	r0, [r3, #0]
   1bce8:	f012 fbec 	bl	2e4c4 <bt_hci_cmd_complete_create>
   1bcec:	2118      	movs	r1, #24
   1bcee:	6028      	str	r0, [r5, #0]
   1bcf0:	3008      	adds	r0, #8
   1bcf2:	f014 febf 	bl	30a74 <net_buf_simple_add>
	rp->status = 0x00;
   1bcf6:	2400      	movs	r4, #0
   1bcf8:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   1bcfa:	2101      	movs	r1, #1
	rp->status = 0x00;
   1bcfc:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   1bd00:	f00b fd4c 	bl	2779c <hci_vendor_read_static_addr>
   1bd04:	7068      	strb	r0, [r5, #1]
	return 0;
   1bd06:	4620      	mov	r0, r4
}
   1bd08:	b007      	add	sp, #28
   1bd0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1bd0c:	4b09      	ldr	r3, [pc, #36]	; (1bd34 <hci_vendor_cmd_handle_common+0x174>)
   1bd0e:	2121      	movs	r1, #33	; 0x21
   1bd10:	8818      	ldrh	r0, [r3, #0]
   1bd12:	f012 fbd7 	bl	2e4c4 <bt_hci_cmd_complete_create>
   1bd16:	2121      	movs	r1, #33	; 0x21
   1bd18:	6028      	str	r0, [r5, #0]
   1bd1a:	3008      	adds	r0, #8
   1bd1c:	f014 feaa 	bl	30a74 <net_buf_simple_add>
	rp->status = 0x00;
   1bd20:	4601      	mov	r1, r0
   1bd22:	2400      	movs	r4, #0
   1bd24:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   1bd28:	3001      	adds	r0, #1
   1bd2a:	f00b fdab 	bl	27884 <hci_vendor_read_key_hierarchy_roots>
	return 0;
   1bd2e:	4620      	mov	r0, r4
}
   1bd30:	b007      	add	sp, #28
   1bd32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bd34:	200032ac 	.word	0x200032ac
   1bd38:	000330cc 	.word	0x000330cc

0001bd3c <hci_cmd_handle>:
{
   1bd3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   1bd3e:	8982      	ldrh	r2, [r0, #12]
{
   1bd40:	b08f      	sub	sp, #60	; 0x3c
	struct net_buf *evt = NULL;
   1bd42:	2400      	movs	r4, #0
	if (cmd->len < sizeof(*chdr)) {
   1bd44:	2a02      	cmp	r2, #2
	struct net_buf *evt = NULL;
   1bd46:	9407      	str	r4, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
   1bd48:	f240 811c 	bls.w	1bf84 <hci_cmd_handle+0x248>
	return net_buf_simple_pull_mem(&buf->b, len);
   1bd4c:	4605      	mov	r5, r0
   1bd4e:	2103      	movs	r1, #3
   1bd50:	3008      	adds	r0, #8
   1bd52:	f014 feb6 	bl	30ac2 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   1bd56:	89a9      	ldrh	r1, [r5, #12]
   1bd58:	7882      	ldrb	r2, [r0, #2]
   1bd5a:	4291      	cmp	r1, r2
   1bd5c:	f0c0 8151 	bcc.w	1c002 <hci_cmd_handle+0x2c6>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   1bd60:	8802      	ldrh	r2, [r0, #0]
   1bd62:	4ebb      	ldr	r6, [pc, #748]	; (1c050 <hci_cmd_handle+0x314>)
	switch (BT_OGF(_opcode)) {
   1bd64:	f3c2 2385 	ubfx	r3, r2, #10, #6
   1bd68:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
   1bd6a:	8032      	strh	r2, [r6, #0]
   1bd6c:	b290      	uxth	r0, r2
	ocf = BT_OCF(_opcode);
   1bd6e:	f3c2 0409 	ubfx	r4, r2, #0, #10
	switch (BT_OGF(_opcode)) {
   1bd72:	d809      	bhi.n	1bd88 <hci_cmd_handle+0x4c>
   1bd74:	b1a3      	cbz	r3, 1bda0 <hci_cmd_handle+0x64>
   1bd76:	3b01      	subs	r3, #1
   1bd78:	2b07      	cmp	r3, #7
   1bd7a:	d811      	bhi.n	1bda0 <hci_cmd_handle+0x64>
   1bd7c:	e8df f003 	tbb	[pc, r3]
   1bd80:	e9c81017 	.word	0xe9c81017
   1bd84:	26101010 	.word	0x26101010
   1bd88:	2b3f      	cmp	r3, #63	; 0x3f
   1bd8a:	d109      	bne.n	1bda0 <hci_cmd_handle+0x64>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   1bd8c:	4629      	mov	r1, r5
   1bd8e:	aa07      	add	r2, sp, #28
   1bd90:	4620      	mov	r0, r4
   1bd92:	f7ff ff15 	bl	1bbc0 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   1bd96:	3016      	adds	r0, #22
	return evt;
   1bd98:	bf18      	it	ne
   1bd9a:	9d07      	ldrne	r5, [sp, #28]
	if (err == -EINVAL) {
   1bd9c:	d104      	bne.n	1bda8 <hci_cmd_handle+0x6c>
	return bt_hci_cmd_status_create(_opcode, status);
   1bd9e:	8830      	ldrh	r0, [r6, #0]
   1bda0:	2101      	movs	r1, #1
   1bda2:	f012 fba1 	bl	2e4e8 <bt_hci_cmd_status_create>
   1bda6:	4605      	mov	r5, r0
}
   1bda8:	4628      	mov	r0, r5
   1bdaa:	b00f      	add	sp, #60	; 0x3c
   1bdac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   1bdae:	2c06      	cmp	r4, #6
   1bdb0:	f000 843f 	beq.w	1c632 <hci_cmd_handle+0x8f6>
   1bdb4:	2c1d      	cmp	r4, #29
   1bdb6:	d1f3      	bne.n	1bda0 <hci_cmd_handle+0x64>
	handle = sys_le16_to_cpu(cmd->handle);
   1bdb8:	68ab      	ldr	r3, [r5, #8]
	status = ll_version_ind_send(handle);
   1bdba:	8818      	ldrh	r0, [r3, #0]
   1bdbc:	f003 ffac 	bl	1fd18 <ll_version_ind_send>
   1bdc0:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   1bdc2:	8830      	ldrh	r0, [r6, #0]
   1bdc4:	f012 fb90 	bl	2e4e8 <bt_hci_cmd_status_create>
   1bdc8:	4605      	mov	r5, r0
}
   1bdca:	e7ed      	b.n	1bda8 <hci_cmd_handle+0x6c>
	switch (ocf) {
   1bdcc:	1e62      	subs	r2, r4, #1
   1bdce:	2a4d      	cmp	r2, #77	; 0x4d
   1bdd0:	d8e6      	bhi.n	1bda0 <hci_cmd_handle+0x64>
   1bdd2:	a301      	add	r3, pc, #4	; (adr r3, 1bdd8 <hci_cmd_handle+0x9c>)
   1bdd4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   1bdd8:	0001c353 	.word	0x0001c353
   1bddc:	0001c3cd 	.word	0x0001c3cd
   1bde0:	0001c385 	.word	0x0001c385
   1bde4:	0001bda1 	.word	0x0001bda1
   1bde8:	0001c37b 	.word	0x0001c37b
   1bdec:	0001c35f 	.word	0x0001c35f
   1bdf0:	0001c44b 	.word	0x0001c44b
   1bdf4:	0001c43f 	.word	0x0001c43f
   1bdf8:	0001c433 	.word	0x0001c433
   1bdfc:	0001c429 	.word	0x0001c429
   1be00:	0001bda1 	.word	0x0001bda1
   1be04:	0001bda1 	.word	0x0001bda1
   1be08:	0001bda1 	.word	0x0001bda1
   1be0c:	0001bda1 	.word	0x0001bda1
   1be10:	0001c407 	.word	0x0001c407
   1be14:	0001c401 	.word	0x0001c401
   1be18:	0001c3f9 	.word	0x0001c3f9
   1be1c:	0001c3f1 	.word	0x0001c3f1
   1be20:	0001c60b 	.word	0x0001c60b
   1be24:	0001bda1 	.word	0x0001bda1
   1be28:	0001c5df 	.word	0x0001c5df
   1be2c:	0001c5c9 	.word	0x0001c5c9
   1be30:	0001c593 	.word	0x0001c593
   1be34:	0001c571 	.word	0x0001c571
   1be38:	0001bda1 	.word	0x0001bda1
   1be3c:	0001c567 	.word	0x0001c567
   1be40:	0001c557 	.word	0x0001c557
   1be44:	0001c521 	.word	0x0001c521
   1be48:	0001bda1 	.word	0x0001bda1
   1be4c:	0001bda1 	.word	0x0001bda1
   1be50:	0001bda1 	.word	0x0001bda1
   1be54:	0001c50b 	.word	0x0001c50b
   1be58:	0001c4d5 	.word	0x0001c4d5
   1be5c:	0001c4c5 	.word	0x0001c4c5
   1be60:	0001c48f 	.word	0x0001c48f
   1be64:	0001c483 	.word	0x0001c483
   1be68:	0001bda1 	.word	0x0001bda1
   1be6c:	0001bda1 	.word	0x0001bda1
   1be70:	0001c475 	.word	0x0001c475
   1be74:	0001c46d 	.word	0x0001c46d
   1be78:	0001c467 	.word	0x0001c467
   1be7c:	0001c2d7 	.word	0x0001c2d7
   1be80:	0001c2a9 	.word	0x0001c2a9
   1be84:	0001c27b 	.word	0x0001c27b
   1be88:	0001c271 	.word	0x0001c271
   1be8c:	0001c345 	.word	0x0001c345
   1be90:	0001c2f9 	.word	0x0001c2f9
   1be94:	0001c217 	.word	0x0001c217
   1be98:	0001c1f9 	.word	0x0001c1f9
   1be9c:	0001c19d 	.word	0x0001c19d
   1bea0:	0001bda1 	.word	0x0001bda1
   1bea4:	0001bda1 	.word	0x0001bda1
   1bea8:	0001bda1 	.word	0x0001bda1
   1beac:	0001bda1 	.word	0x0001bda1
   1beb0:	0001bda1 	.word	0x0001bda1
   1beb4:	0001bda1 	.word	0x0001bda1
   1beb8:	0001bda1 	.word	0x0001bda1
   1bebc:	0001bda1 	.word	0x0001bda1
   1bec0:	0001bda1 	.word	0x0001bda1
   1bec4:	0001bda1 	.word	0x0001bda1
   1bec8:	0001bda1 	.word	0x0001bda1
   1becc:	0001bda1 	.word	0x0001bda1
   1bed0:	0001bda1 	.word	0x0001bda1
   1bed4:	0001bda1 	.word	0x0001bda1
   1bed8:	0001bda1 	.word	0x0001bda1
   1bedc:	0001bda1 	.word	0x0001bda1
   1bee0:	0001bda1 	.word	0x0001bda1
   1bee4:	0001bda1 	.word	0x0001bda1
   1bee8:	0001bda1 	.word	0x0001bda1
   1beec:	0001bda1 	.word	0x0001bda1
   1bef0:	0001bda1 	.word	0x0001bda1
   1bef4:	0001bda1 	.word	0x0001bda1
   1bef8:	0001bda1 	.word	0x0001bda1
   1befc:	0001bda1 	.word	0x0001bda1
   1bf00:	0001c179 	.word	0x0001c179
   1bf04:	0001bda1 	.word	0x0001bda1
   1bf08:	0001bda1 	.word	0x0001bda1
   1bf0c:	0001c157 	.word	0x0001c157
	switch (ocf) {
   1bf10:	2c63      	cmp	r4, #99	; 0x63
   1bf12:	f000 839a 	beq.w	1c64a <hci_cmd_handle+0x90e>
   1bf16:	d858      	bhi.n	1bfca <hci_cmd_handle+0x28e>
   1bf18:	2c03      	cmp	r4, #3
   1bf1a:	f000 839d 	beq.w	1c658 <hci_cmd_handle+0x91c>
   1bf1e:	2c2d      	cmp	r4, #45	; 0x2d
   1bf20:	d13f      	bne.n	1bfa2 <hci_cmd_handle+0x266>
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
   1bf22:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1bf24:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
   1bf26:	881e      	ldrh	r6, [r3, #0]
	type = cmd->type;
   1bf28:	789f      	ldrb	r7, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1bf2a:	f012 facb 	bl	2e4c4 <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
   1bf2e:	2104      	movs	r1, #4
   1bf30:	9007      	str	r0, [sp, #28]
   1bf32:	3008      	adds	r0, #8
   1bf34:	f014 fd9e 	bl	30a74 <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
   1bf38:	b2b5      	uxth	r5, r6
   1bf3a:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   1bf3c:	1cc3      	adds	r3, r0, #3
   1bf3e:	4629      	mov	r1, r5
   1bf40:	463a      	mov	r2, r7
   1bf42:	2002      	movs	r0, #2
   1bf44:	f7ff fc46 	bl	1b7d4 <ll_tx_pwr_lvl_get>
	rp->status = status;
   1bf48:	7020      	strb	r0, [r4, #0]
	return evt;
   1bf4a:	9d07      	ldr	r5, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
   1bf4c:	f8a4 6001 	strh.w	r6, [r4, #1]
}
   1bf50:	e72a      	b.n	1bda8 <hci_cmd_handle+0x6c>
	switch (ocf) {
   1bf52:	1e62      	subs	r2, r4, #1
   1bf54:	2a08      	cmp	r2, #8
   1bf56:	f63f af23 	bhi.w	1bda0 <hci_cmd_handle+0x64>
   1bf5a:	a301      	add	r3, pc, #4	; (adr r3, 1bf60 <hci_cmd_handle+0x224>)
   1bf5c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   1bf60:	0001c121 	.word	0x0001c121
   1bf64:	0001c065 	.word	0x0001c065
   1bf68:	0001c029 	.word	0x0001c029
   1bf6c:	0001bda1 	.word	0x0001bda1
   1bf70:	0001bda1 	.word	0x0001bda1
   1bf74:	0001bda1 	.word	0x0001bda1
   1bf78:	0001bda1 	.word	0x0001bda1
   1bf7c:	0001bda1 	.word	0x0001bda1
   1bf80:	0001c007 	.word	0x0001c007
		BT_ERR("No HCI Command header");
   1bf84:	4a33      	ldr	r2, [pc, #204]	; (1c054 <hci_cmd_handle+0x318>)
		BT_ERR("Invalid HCI CMD packet length");
   1bf86:	2302      	movs	r3, #2
   1bf88:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
   1bf8c:	4832      	ldr	r0, [pc, #200]	; (1c058 <hci_cmd_handle+0x31c>)
   1bf8e:	4623      	mov	r3, r4
   1bf90:	aa0b      	add	r2, sp, #44	; 0x2c
   1bf92:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bf96:	f010 fa96 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
		return NULL;
   1bf9a:	4625      	mov	r5, r4
}
   1bf9c:	4628      	mov	r0, r5
   1bf9e:	b00f      	add	sp, #60	; 0x3c
   1bfa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   1bfa2:	2c01      	cmp	r4, #1
   1bfa4:	f47f aefc 	bne.w	1bda0 <hci_cmd_handle+0x64>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   1bfa8:	68aa      	ldr	r2, [r5, #8]
	event_mask = sys_get_le64(cmd->events);
   1bfaa:	4b2c      	ldr	r3, [pc, #176]	; (1c05c <hci_cmd_handle+0x320>)
   1bfac:	6811      	ldr	r1, [r2, #0]
   1bfae:	6852      	ldr	r2, [r2, #4]
   1bfb0:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   1bfb2:	2101      	movs	r1, #1
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   1bfb4:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   1bfb6:	f012 fa85 	bl	2e4c4 <bt_hci_cmd_complete_create>
   1bfba:	2101      	movs	r1, #1
   1bfbc:	4605      	mov	r5, r0
   1bfbe:	3008      	adds	r0, #8
   1bfc0:	f014 fd58 	bl	30a74 <net_buf_simple_add>
	ccst->status = status;
   1bfc4:	2300      	movs	r3, #0
   1bfc6:	7003      	strb	r3, [r0, #0]
}
   1bfc8:	e6ee      	b.n	1bda8 <hci_cmd_handle+0x6c>
	switch (ocf) {
   1bfca:	2c7b      	cmp	r4, #123	; 0x7b
   1bfcc:	f000 8366 	beq.w	1c69c <hci_cmd_handle+0x960>
   1bfd0:	2c7c      	cmp	r4, #124	; 0x7c
   1bfd2:	f47f aee5 	bne.w	1bda0 <hci_cmd_handle+0x64>
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
   1bfd6:	68ab      	ldr	r3, [r5, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1bfd8:	881f      	ldrh	r7, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   1bfda:	8859      	ldrh	r1, [r3, #2]
   1bfdc:	b2b8      	uxth	r0, r7
   1bfde:	f003 ffd5 	bl	1ff8c <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   1bfe2:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1bfe4:	2103      	movs	r1, #3
   1bfe6:	8830      	ldrh	r0, [r6, #0]
   1bfe8:	f012 fa6c 	bl	2e4c4 <bt_hci_cmd_complete_create>
   1bfec:	2103      	movs	r1, #3
   1bfee:	4603      	mov	r3, r0
   1bff0:	3008      	adds	r0, #8
   1bff2:	9307      	str	r3, [sp, #28]
   1bff4:	f014 fd3e 	bl	30a74 <net_buf_simple_add>
	rp->status = status;
   1bff8:	7004      	strb	r4, [r0, #0]
	return evt;
   1bffa:	9d07      	ldr	r5, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
   1bffc:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (err == -EINVAL) {
   1c000:	e6d2      	b.n	1bda8 <hci_cmd_handle+0x6c>
		BT_ERR("Invalid HCI CMD packet length");
   1c002:	4a17      	ldr	r2, [pc, #92]	; (1c060 <hci_cmd_handle+0x324>)
   1c004:	e7bf      	b.n	1bf86 <hci_cmd_handle+0x24a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1c006:	2107      	movs	r1, #7
   1c008:	f012 fa5c 	bl	2e4c4 <bt_hci_cmd_complete_create>
   1c00c:	2107      	movs	r1, #7
   1c00e:	4603      	mov	r3, r0
   1c010:	3008      	adds	r0, #8
   1c012:	9307      	str	r3, [sp, #28]
   1c014:	f014 fd2e 	bl	30a74 <net_buf_simple_add>
	rp->status = 0x00;
   1c018:	4601      	mov	r1, r0
   1c01a:	2000      	movs	r0, #0
   1c01c:	f801 0b01 	strb.w	r0, [r1], #1
	(void)ll_addr_read(0, &rp->bdaddr.val[0]);
   1c020:	f7ff fbc0 	bl	1b7a4 <ll_addr_read>
	return evt;
   1c024:	9d07      	ldr	r5, [sp, #28]
   1c026:	e6bf      	b.n	1bda8 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1c028:	2109      	movs	r1, #9
   1c02a:	f012 fa4b 	bl	2e4c4 <bt_hci_cmd_complete_create>
   1c02e:	2109      	movs	r1, #9
   1c030:	4603      	mov	r3, r0
   1c032:	3008      	adds	r0, #8
   1c034:	9307      	str	r3, [sp, #28]
   1c036:	f014 fd1d 	bl	30a74 <net_buf_simple_add>
	rp->status = 0x00;
   1c03a:	2100      	movs	r1, #0
   1c03c:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1c03e:	2208      	movs	r2, #8
	rp->status = 0x00;
   1c040:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1c044:	f011 fffc 	bl	2e040 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   1c048:	2360      	movs	r3, #96	; 0x60
	return evt;
   1c04a:	9d07      	ldr	r5, [sp, #28]
	rp->features[4] = (1 << 5) | (1 << 6);
   1c04c:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
   1c04e:	e6ab      	b.n	1bda8 <hci_cmd_handle+0x6c>
   1c050:	200032ac 	.word	0x200032ac
   1c054:	000330e0 	.word	0x000330e0
   1c058:	000323b4 	.word	0x000323b4
   1c05c:	200001e0 	.word	0x200001e0
   1c060:	000330f8 	.word	0x000330f8
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1c064:	2141      	movs	r1, #65	; 0x41
   1c066:	f012 fa2d 	bl	2e4c4 <bt_hci_cmd_complete_create>
   1c06a:	2141      	movs	r1, #65	; 0x41
   1c06c:	4603      	mov	r3, r0
   1c06e:	3008      	adds	r0, #8
   1c070:	9307      	str	r3, [sp, #28]
   1c072:	f014 fcff 	bl	30a74 <net_buf_simple_add>
	rp->status = 0x00;
   1c076:	2100      	movs	r1, #0
   1c078:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1c07a:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   1c07c:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1c080:	f011 ffde 	bl	2e040 <memset>
	rp->commands[15] |= BIT(1);
   1c084:	7c23      	ldrb	r3, [r4, #16]
	rp->commands[5] |= BIT(6) | BIT(7);
   1c086:	79a0      	ldrb	r0, [r4, #6]
	rp->commands[10] |= BIT(2);
   1c088:	7ae1      	ldrb	r1, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
   1c08a:	7be2      	ldrb	r2, [r4, #15]
	rp->commands[15] |= BIT(1);
   1c08c:	f043 0302 	orr.w	r3, r3, #2
   1c090:	7423      	strb	r3, [r4, #16]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   1c092:	7ea3      	ldrb	r3, [r4, #26]
	rp->commands[5] |= BIT(6) | BIT(7);
   1c094:	f060 003f 	orn	r0, r0, #63	; 0x3f
	rp->commands[10] |= BIT(2);
   1c098:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   1c09c:	f063 0308 	orn	r3, r3, #8
	rp->commands[5] |= BIT(6) | BIT(7);
   1c0a0:	71a0      	strb	r0, [r4, #6]
	rp->commands[10] |= BIT(2);
   1c0a2:	72e1      	strb	r1, [r4, #11]
	rp->commands[26] |= BIT(6) | BIT(7);
   1c0a4:	7ee0      	ldrb	r0, [r4, #27]
	rp->commands[22] |= BIT(2);
   1c0a6:	7de1      	ldrb	r1, [r4, #23]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   1c0a8:	76a3      	strb	r3, [r4, #26]
	rp->commands[33] |= BIT(4) | BIT(5);
   1c0aa:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[14] |= BIT(3) | BIT(5);
   1c0ae:	f042 0228 	orr.w	r2, r2, #40	; 0x28
	rp->commands[22] |= BIT(2);
   1c0b2:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[26] |= BIT(0) | BIT(1);
   1c0b6:	f060 003c 	orn	r0, r0, #60	; 0x3c
	rp->commands[33] |= BIT(6) | BIT(7);
   1c0ba:	f063 030f 	orn	r3, r3, #15
	rp->commands[26] |= BIT(0) | BIT(1);
   1c0be:	76e0      	strb	r0, [r4, #27]
	rp->commands[14] |= BIT(3) | BIT(5);
   1c0c0:	73e2      	strb	r2, [r4, #15]
	rp->commands[28] |= BIT(3);
   1c0c2:	7f60      	ldrb	r0, [r4, #29]
	rp->commands[27] |= BIT(0) | BIT(1);
   1c0c4:	7f22      	ldrb	r2, [r4, #28]
	rp->commands[22] |= BIT(2);
   1c0c6:	75e1      	strb	r1, [r4, #23]
	rp->commands[33] |= BIT(6) | BIT(7);
   1c0c8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[0] |= BIT(5);
   1c0cc:	7861      	ldrb	r1, [r4, #1]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   1c0ce:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
	rp->commands[28] |= BIT(1) | BIT(2);
   1c0d2:	f040 000e 	orr.w	r0, r0, #14
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   1c0d6:	f062 0208 	orn	r2, r2, #8
	rp->commands[0] |= BIT(5);
   1c0da:	f041 0120 	orr.w	r1, r1, #32
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   1c0de:	f063 0306 	orn	r3, r3, #6
	rp->commands[0] |= BIT(5);
   1c0e2:	7061      	strb	r1, [r4, #1]
	rp->commands[28] |= BIT(1) | BIT(2);
   1c0e4:	7760      	strb	r0, [r4, #29]
	rp->commands[35] |= BIT(3);
   1c0e6:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
   1c0ea:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   1c0ee:	7722      	strb	r2, [r4, #28]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   1c0f0:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	rp->commands[39] |= BIT(2);
   1c0f4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   1c0f8:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   1c0fc:	f041 017f 	orr.w	r1, r1, #127	; 0x7f
	rp->commands[32] |= BIT(4) | BIT(5);
   1c100:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	rp->commands[39] |= BIT(2);
   1c104:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[38] |= BIT(7);
   1c108:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[32] |= BIT(4) | BIT(5);
   1c10c:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   1c110:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   1c114:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   1c118:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	return evt;
   1c11c:	9d07      	ldr	r5, [sp, #28]
   1c11e:	e643      	b.n	1bda8 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1c120:	2109      	movs	r1, #9
   1c122:	f012 f9cf 	bl	2e4c4 <bt_hci_cmd_complete_create>
   1c126:	2109      	movs	r1, #9
   1c128:	4603      	mov	r3, r0
   1c12a:	3008      	adds	r0, #8
   1c12c:	9307      	str	r3, [sp, #28]
   1c12e:	f014 fca1 	bl	30a74 <net_buf_simple_add>
	rp->status = 0x00;
   1c132:	2300      	movs	r3, #0
	rp->hci_version = LL_VERSION_NUMBER;
   1c134:	210c      	movs	r1, #12
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   1c136:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	rp->status = 0x00;
   1c13a:	7003      	strb	r3, [r0, #0]
	rp->hci_version = LL_VERSION_NUMBER;
   1c13c:	7041      	strb	r1, [r0, #1]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   1c13e:	f06f 040e 	mvn.w	r4, #14
	rp->hci_revision = sys_cpu_to_le16(0);
   1c142:	7083      	strb	r3, [r0, #2]
   1c144:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   1c146:	2305      	movs	r3, #5
	return evt;
   1c148:	9d07      	ldr	r5, [sp, #28]
	rp->lmp_version = LL_VERSION_NUMBER;
   1c14a:	7101      	strb	r1, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   1c14c:	7144      	strb	r4, [r0, #5]
   1c14e:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   1c150:	71c2      	strb	r2, [r0, #7]
   1c152:	7202      	strb	r2, [r0, #8]
	if (err == -EINVAL) {
   1c154:	e628      	b.n	1bda8 <hci_cmd_handle+0x6c>
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
   1c156:	68a8      	ldr	r0, [r5, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   1c158:	79c1      	ldrb	r1, [r0, #7]
   1c15a:	f008 f88d 	bl	24278 <ll_priv_mode_set>
   1c15e:	4603      	mov	r3, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   1c160:	2101      	movs	r1, #1
   1c162:	8830      	ldrh	r0, [r6, #0]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   1c164:	461e      	mov	r6, r3
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   1c166:	f012 f9ad 	bl	2e4c4 <bt_hci_cmd_complete_create>
   1c16a:	2101      	movs	r1, #1
   1c16c:	4605      	mov	r5, r0
   1c16e:	3008      	adds	r0, #8
   1c170:	f014 fc80 	bl	30a74 <net_buf_simple_add>
	ccst->status = status;
   1c174:	7006      	strb	r6, [r0, #0]
	if (err == -EINVAL) {
   1c176:	e617      	b.n	1bda8 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1c178:	2103      	movs	r1, #3
   1c17a:	f012 f9a3 	bl	2e4c4 <bt_hci_cmd_complete_create>
   1c17e:	2103      	movs	r1, #3
   1c180:	4603      	mov	r3, r0
   1c182:	3008      	adds	r0, #8
   1c184:	9307      	str	r3, [sp, #28]
   1c186:	f014 fc75 	bl	30a74 <net_buf_simple_add>
	rp->status = 0x00;
   1c18a:	4601      	mov	r1, r0
   1c18c:	2300      	movs	r3, #0
   1c18e:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   1c192:	3001      	adds	r0, #1
   1c194:	f7ff fb2e 	bl	1b7f4 <ll_tx_pwr_get>
	return evt;
   1c198:	9d07      	ldr	r5, [sp, #28]
   1c19a:	e605      	b.n	1bda8 <hci_cmd_handle+0x6c>
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
   1c19c:	68aa      	ldr	r2, [r5, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   1c19e:	7894      	ldrb	r4, [r2, #2]
	return ((uint16_t)src[1] << 8) | src[0];
   1c1a0:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
   1c1a2:	8817      	ldrh	r7, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   1c1a4:	f8b2 5005 	ldrh.w	r5, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   1c1a8:	07e3      	lsls	r3, r4, #31
		cmd->tx_phys |= mask_phys;
   1c1aa:	bf48      	it	mi
   1c1ac:	f041 0103 	orrmi.w	r1, r1, #3
   1c1b0:	7913      	ldrb	r3, [r2, #4]
   1c1b2:	bf48      	it	mi
   1c1b4:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   1c1b6:	07a4      	lsls	r4, r4, #30
		cmd->rx_phys |= mask_phys;
   1c1b8:	bf44      	itt	mi
   1c1ba:	f043 0303 	orrmi.w	r3, r3, #3
   1c1be:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   1c1c0:	ea43 0201 	orr.w	r2, r3, r1
   1c1c4:	f032 0203 	bics.w	r2, r2, #3
   1c1c8:	f040 8289 	bne.w	1c6de <hci_cmd_handle+0x9a2>
	if (!(cmd->tx_phys & 0x07) ||
   1c1cc:	074c      	lsls	r4, r1, #29
   1c1ce:	f000 8280 	beq.w	1c6d2 <hci_cmd_handle+0x996>
   1c1d2:	075a      	lsls	r2, r3, #29
   1c1d4:	f000 827d 	beq.w	1c6d2 <hci_cmd_handle+0x996>
	if (phy_opts & 0x03) {
   1c1d8:	f015 0203 	ands.w	r2, r5, #3
		phy_opts -= 1U;
   1c1dc:	bf1c      	itt	ne
   1c1de:	f105 35ff 	addne.w	r5, r5, #4294967295	; 0xffffffff
		phy_opts &= 1;
   1c1e2:	f005 0201 	andne.w	r2, r5, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   1c1e6:	4638      	mov	r0, r7
   1c1e8:	f003 fe5a 	bl	1fea0 <ll_phy_req_send>
   1c1ec:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   1c1ee:	8830      	ldrh	r0, [r6, #0]
   1c1f0:	f012 f97a 	bl	2e4e8 <bt_hci_cmd_status_create>
   1c1f4:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   1c1f6:	e5d7      	b.n	1bda8 <hci_cmd_handle+0x6c>
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
   1c1f8:	68ab      	ldr	r3, [r5, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   1c1fa:	781a      	ldrb	r2, [r3, #0]
   1c1fc:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   1c1fe:	bf4a      	itet	mi
   1c200:	2007      	movmi	r0, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   1c202:	7858      	ldrbpl	r0, [r3, #1]
		cmd->tx_phys = 0x07;
   1c204:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   1c206:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   1c208:	bf4a      	itet	mi
   1c20a:	2107      	movmi	r1, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   1c20c:	7899      	ldrbpl	r1, [r3, #2]
		cmd->rx_phys = 0x07;
   1c20e:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   1c210:	f003 fe3c 	bl	1fe8c <ll_phy_default_set>
   1c214:	e7a3      	b.n	1c15e <hci_cmd_handle+0x422>
	handle = sys_le16_to_cpu(cmd->handle);
   1c216:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1c218:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
   1c21a:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1c21c:	f012 f952 	bl	2e4c4 <bt_hci_cmd_complete_create>
   1c220:	2105      	movs	r1, #5
   1c222:	4603      	mov	r3, r0
   1c224:	3008      	adds	r0, #8
   1c226:	9307      	str	r3, [sp, #28]
   1c228:	f014 fc24 	bl	30a74 <net_buf_simple_add>
   1c22c:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   1c22e:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
   1c230:	b2b0      	uxth	r0, r6
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   1c232:	1ce1      	adds	r1, r4, #3
   1c234:	f003 fe0c 	bl	1fe50 <ll_phy_get>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
   1c238:	78e3      	ldrb	r3, [r4, #3]
	rp->status = status;
   1c23a:	7020      	strb	r0, [r4, #0]
   1c23c:	2b00      	cmp	r3, #0
   1c23e:	fa93 f2a3 	rbit	r2, r3
   1c242:	7923      	ldrb	r3, [r4, #4]
   1c244:	fab2 f282 	clz	r2, r2
   1c248:	bf08      	it	eq
   1c24a:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   1c24e:	2b00      	cmp	r3, #0
   1c250:	fa93 f3a3 	rbit	r3, r3
   1c254:	fab3 f383 	clz	r3, r3
   1c258:	f102 0201 	add.w	r2, r2, #1
   1c25c:	bf08      	it	eq
   1c25e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   1c262:	70e2      	strb	r2, [r4, #3]
   1c264:	3301      	adds	r3, #1
	return evt;
   1c266:	9d07      	ldr	r5, [sp, #28]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   1c268:	7123      	strb	r3, [r4, #4]
	rp->handle = sys_cpu_to_le16(handle);
   1c26a:	f8a4 6001 	strh.w	r6, [r4, #1]
	if (err == -EINVAL) {
   1c26e:	e59b      	b.n	1bda8 <hci_cmd_handle+0x6c>
	status = ll_rl_enable(cmd->enable);
   1c270:	68ab      	ldr	r3, [r5, #8]
   1c272:	7818      	ldrb	r0, [r3, #0]
   1c274:	f007 ffe0 	bl	24238 <ll_rl_enable>
   1c278:	e771      	b.n	1c15e <hci_cmd_handle+0x422>
	memcpy(dst, src, sizeof(*dst));
   1c27a:	2207      	movs	r2, #7
   1c27c:	68a9      	ldr	r1, [r5, #8]
   1c27e:	a808      	add	r0, sp, #32
   1c280:	f011 fed3 	bl	2e02a <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1c284:	2107      	movs	r1, #7
   1c286:	8830      	ldrh	r0, [r6, #0]
   1c288:	f012 f91c 	bl	2e4c4 <bt_hci_cmd_complete_create>
   1c28c:	2107      	movs	r1, #7
   1c28e:	4603      	mov	r3, r0
   1c290:	3008      	adds	r0, #8
   1c292:	9307      	str	r3, [sp, #28]
   1c294:	f014 fbee 	bl	30a74 <net_buf_simple_add>
   1c298:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   1c29a:	1c41      	adds	r1, r0, #1
   1c29c:	a808      	add	r0, sp, #32
   1c29e:	f007 ff99 	bl	241d4 <ll_rl_lrpa_get>
   1c2a2:	7020      	strb	r0, [r4, #0]
	return evt;
   1c2a4:	9d07      	ldr	r5, [sp, #28]
   1c2a6:	e57f      	b.n	1bda8 <hci_cmd_handle+0x6c>
   1c2a8:	2207      	movs	r2, #7
   1c2aa:	68a9      	ldr	r1, [r5, #8]
   1c2ac:	a808      	add	r0, sp, #32
   1c2ae:	f011 febc 	bl	2e02a <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1c2b2:	2107      	movs	r1, #7
   1c2b4:	8830      	ldrh	r0, [r6, #0]
   1c2b6:	f012 f905 	bl	2e4c4 <bt_hci_cmd_complete_create>
   1c2ba:	2107      	movs	r1, #7
   1c2bc:	4603      	mov	r3, r0
   1c2be:	3008      	adds	r0, #8
   1c2c0:	9307      	str	r3, [sp, #28]
   1c2c2:	f014 fbd7 	bl	30a74 <net_buf_simple_add>
   1c2c6:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   1c2c8:	1c41      	adds	r1, r0, #1
   1c2ca:	a808      	add	r0, sp, #32
   1c2cc:	f007 ff48 	bl	24160 <ll_rl_crpa_get>
   1c2d0:	7020      	strb	r0, [r4, #0]
	return evt;
   1c2d2:	9d07      	ldr	r5, [sp, #28]
   1c2d4:	e568      	b.n	1bda8 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1c2d6:	2102      	movs	r1, #2
   1c2d8:	f012 f8f4 	bl	2e4c4 <bt_hci_cmd_complete_create>
   1c2dc:	2102      	movs	r1, #2
   1c2de:	4603      	mov	r3, r0
   1c2e0:	3008      	adds	r0, #8
   1c2e2:	9307      	str	r3, [sp, #28]
   1c2e4:	f014 fbc6 	bl	30a74 <net_buf_simple_add>
   1c2e8:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
   1c2ea:	f007 fdff 	bl	23eec <ll_rl_size_get>
	rp->status = 0x00;
   1c2ee:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   1c2f0:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
   1c2f2:	7023      	strb	r3, [r4, #0]
	return evt;
   1c2f4:	9d07      	ldr	r5, [sp, #28]
   1c2f6:	e557      	b.n	1bda8 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1c2f8:	2109      	movs	r1, #9
   1c2fa:	f012 f8e3 	bl	2e4c4 <bt_hci_cmd_complete_create>
   1c2fe:	2109      	movs	r1, #9
   1c300:	4603      	mov	r3, r0
   1c302:	3008      	adds	r0, #8
   1c304:	9307      	str	r3, [sp, #28]
   1c306:	f014 fbb5 	bl	30a74 <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   1c30a:	ab08      	add	r3, sp, #32
   1c30c:	4604      	mov	r4, r0
   1c30e:	f10d 021a 	add.w	r2, sp, #26
   1c312:	a906      	add	r1, sp, #24
   1c314:	f10d 0016 	add.w	r0, sp, #22
   1c318:	f003 fd8e 	bl	1fe38 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   1c31c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   1c320:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1c324:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   1c328:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   1c32c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1c330:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
   1c334:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   1c336:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
   1c33a:	7022      	strb	r2, [r4, #0]
	return evt;
   1c33c:	9d07      	ldr	r5, [sp, #28]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   1c33e:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
   1c342:	e531      	b.n	1bda8 <hci_cmd_handle+0x6c>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   1c344:	68ab      	ldr	r3, [r5, #8]
	ll_rl_timeout_set(timeout);
   1c346:	8818      	ldrh	r0, [r3, #0]
   1c348:	f007 ff8c 	bl	24264 <ll_rl_timeout_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   1c34c:	8830      	ldrh	r0, [r6, #0]
   1c34e:	2101      	movs	r1, #1
   1c350:	e631      	b.n	1bfb6 <hci_cmd_handle+0x27a>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   1c352:	68aa      	ldr	r2, [r5, #8]
	le_event_mask = sys_get_le64(cmd->events);
   1c354:	4bbe      	ldr	r3, [pc, #760]	; (1c650 <hci_cmd_handle+0x914>)
   1c356:	6811      	ldr	r1, [r2, #0]
   1c358:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   1c35a:	6019      	str	r1, [r3, #0]
   1c35c:	e629      	b.n	1bfb2 <hci_cmd_handle+0x276>
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
   1c35e:	68ac      	ldr	r4, [r5, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   1c360:	7ba5      	ldrb	r5, [r4, #14]
   1c362:	79a3      	ldrb	r3, [r4, #6]
   1c364:	7962      	ldrb	r2, [r4, #5]
   1c366:	7921      	ldrb	r1, [r4, #4]
   1c368:	8820      	ldrh	r0, [r4, #0]
   1c36a:	9502      	str	r5, [sp, #8]
   1c36c:	7b65      	ldrb	r5, [r4, #13]
   1c36e:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   1c370:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   1c372:	9400      	str	r4, [sp, #0]
   1c374:	f002 fac6 	bl	1e904 <ll_adv_params_set>
   1c378:	e6f1      	b.n	1c15e <hci_cmd_handle+0x422>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   1c37a:	68a9      	ldr	r1, [r5, #8]
   1c37c:	2001      	movs	r0, #1
   1c37e:	f7ff f9e3 	bl	1b748 <ll_addr_set>
   1c382:	e6ec      	b.n	1c15e <hci_cmd_handle+0x422>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1c384:	2109      	movs	r1, #9
   1c386:	f012 f89d 	bl	2e4c4 <bt_hci_cmd_complete_create>
   1c38a:	2109      	movs	r1, #9
   1c38c:	4603      	mov	r3, r0
   1c38e:	3008      	adds	r0, #8
   1c390:	9307      	str	r3, [sp, #28]
   1c392:	f014 fb6f 	bl	30a74 <net_buf_simple_add>
	rp->status = 0x00;
   1c396:	2100      	movs	r1, #0
   1c398:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1c39a:	2208      	movs	r2, #8
	rp->status = 0x00;
   1c39c:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1c3a0:	f011 fe4e 	bl	2e040 <memset>
	sys_put_le64(ll_feat_get(), rp->features);
   1c3a4:	f000 fe26 	bl	1cff4 <ll_feat_get>
	sys_put_le16(val >> 16, &dst[2]);
   1c3a8:	0c03      	lsrs	r3, r0, #16
	dst[1] = val >> 8;
   1c3aa:	f3c0 2507 	ubfx	r5, r0, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1c3ae:	0c0a      	lsrs	r2, r1, #16
	dst[0] = val;
   1c3b0:	70e3      	strb	r3, [r4, #3]
	dst[1] = val >> 8;
   1c3b2:	0a1b      	lsrs	r3, r3, #8
	dst[0] = val;
   1c3b4:	7060      	strb	r0, [r4, #1]
	dst[1] = val >> 8;
   1c3b6:	70a5      	strb	r5, [r4, #2]
   1c3b8:	f3c1 2007 	ubfx	r0, r1, #8, #8
   1c3bc:	7123      	strb	r3, [r4, #4]
   1c3be:	0a13      	lsrs	r3, r2, #8
	return evt;
   1c3c0:	9d07      	ldr	r5, [sp, #28]
	dst[0] = val;
   1c3c2:	7161      	strb	r1, [r4, #5]
	dst[1] = val >> 8;
   1c3c4:	71a0      	strb	r0, [r4, #6]
	dst[0] = val;
   1c3c6:	71e2      	strb	r2, [r4, #7]
	dst[1] = val >> 8;
   1c3c8:	7223      	strb	r3, [r4, #8]
	if (err == -EINVAL) {
   1c3ca:	e4ed      	b.n	1bda8 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1c3cc:	2104      	movs	r1, #4
   1c3ce:	f012 f879 	bl	2e4c4 <bt_hci_cmd_complete_create>
   1c3d2:	2104      	movs	r1, #4
   1c3d4:	4603      	mov	r3, r0
   1c3d6:	3008      	adds	r0, #8
   1c3d8:	9307      	str	r3, [sp, #28]
   1c3da:	f014 fb4b 	bl	30a74 <net_buf_simple_add>
	rp->status = 0x00;
   1c3de:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   1c3e0:	2103      	movs	r1, #3
	rp->status = 0x00;
   1c3e2:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   1c3e4:	221b      	movs	r2, #27
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   1c3e6:	70c1      	strb	r1, [r0, #3]
	return evt;
   1c3e8:	9d07      	ldr	r5, [sp, #28]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   1c3ea:	7042      	strb	r2, [r0, #1]
   1c3ec:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
   1c3ee:	e4db      	b.n	1bda8 <hci_cmd_handle+0x6c>
	status = ll_fal_remove(&cmd->addr);
   1c3f0:	68a8      	ldr	r0, [r5, #8]
   1c3f2:	f007 fcef 	bl	23dd4 <ll_fal_remove>
   1c3f6:	e6b2      	b.n	1c15e <hci_cmd_handle+0x422>
	status = ll_fal_add(&cmd->addr);
   1c3f8:	68a8      	ldr	r0, [r5, #8]
   1c3fa:	f007 fc53 	bl	23ca4 <ll_fal_add>
   1c3fe:	e6ae      	b.n	1c15e <hci_cmd_handle+0x422>
	status = ll_fal_clear();
   1c400:	f007 fc2a 	bl	23c58 <ll_fal_clear>
   1c404:	e6ab      	b.n	1c15e <hci_cmd_handle+0x422>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1c406:	2102      	movs	r1, #2
   1c408:	f012 f85c 	bl	2e4c4 <bt_hci_cmd_complete_create>
   1c40c:	2102      	movs	r1, #2
   1c40e:	4603      	mov	r3, r0
   1c410:	3008      	adds	r0, #8
   1c412:	9307      	str	r3, [sp, #28]
   1c414:	f014 fb2e 	bl	30a74 <net_buf_simple_add>
	rp->status = 0x00;
   1c418:	2300      	movs	r3, #0
   1c41a:	7003      	strb	r3, [r0, #0]
   1c41c:	4604      	mov	r4, r0
	rp->fal_size = ll_fal_size_get();
   1c41e:	f007 fc19 	bl	23c54 <ll_fal_size_get>
   1c422:	7060      	strb	r0, [r4, #1]
	return evt;
   1c424:	9d07      	ldr	r5, [sp, #28]
   1c426:	e4bf      	b.n	1bda8 <hci_cmd_handle+0x6c>
	status = ll_adv_enable(cmd->enable);
   1c428:	68ab      	ldr	r3, [r5, #8]
   1c42a:	7818      	ldrb	r0, [r3, #0]
   1c42c:	f7f0 fc04 	bl	cc38 <ll_adv_enable>
   1c430:	e695      	b.n	1c15e <hci_cmd_handle+0x422>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   1c432:	68a9      	ldr	r1, [r5, #8]
   1c434:	f811 0b01 	ldrb.w	r0, [r1], #1
   1c438:	f002 fcaa 	bl	1ed90 <ll_adv_scan_rsp_set>
   1c43c:	e68f      	b.n	1c15e <hci_cmd_handle+0x422>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   1c43e:	68a9      	ldr	r1, [r5, #8]
   1c440:	f811 0b01 	ldrb.w	r0, [r1], #1
   1c444:	f002 fc5a 	bl	1ecfc <ll_adv_data_set>
   1c448:	e689      	b.n	1c15e <hci_cmd_handle+0x422>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1c44a:	2102      	movs	r1, #2
   1c44c:	f012 f83a 	bl	2e4c4 <bt_hci_cmd_complete_create>
   1c450:	2102      	movs	r1, #2
   1c452:	4603      	mov	r3, r0
   1c454:	3008      	adds	r0, #8
   1c456:	9307      	str	r3, [sp, #28]
   1c458:	f014 fb0c 	bl	30a74 <net_buf_simple_add>
	rp->status = 0x00;
   1c45c:	2300      	movs	r3, #0
   1c45e:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   1c460:	7043      	strb	r3, [r0, #1]
	return evt;
   1c462:	9d07      	ldr	r5, [sp, #28]
   1c464:	e4a0      	b.n	1bda8 <hci_cmd_handle+0x6c>
	status = ll_rl_clear();
   1c466:	f007 fd43 	bl	23ef0 <ll_rl_clear>
   1c46a:	e678      	b.n	1c15e <hci_cmd_handle+0x422>
	status = ll_rl_remove(&cmd->peer_id_addr);
   1c46c:	68a8      	ldr	r0, [r5, #8]
   1c46e:	f007 fd7d 	bl	23f6c <ll_rl_remove>
   1c472:	e674      	b.n	1c15e <hci_cmd_handle+0x422>
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
   1c474:	68a8      	ldr	r0, [r5, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   1c476:	f100 0217 	add.w	r2, r0, #23
   1c47a:	1dc1      	adds	r1, r0, #7
   1c47c:	f008 f98e 	bl	2479c <ll_rl_add>
   1c480:	e66d      	b.n	1c15e <hci_cmd_handle+0x422>
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
   1c482:	68ab      	ldr	r3, [r5, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   1c484:	8859      	ldrh	r1, [r3, #2]
   1c486:	8818      	ldrh	r0, [r3, #0]
   1c488:	f003 fccc 	bl	1fe24 <ll_length_default_set>
   1c48c:	e667      	b.n	1c15e <hci_cmd_handle+0x422>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1c48e:	2105      	movs	r1, #5
   1c490:	f012 f818 	bl	2e4c4 <bt_hci_cmd_complete_create>
   1c494:	2105      	movs	r1, #5
   1c496:	4603      	mov	r3, r0
   1c498:	3008      	adds	r0, #8
   1c49a:	9307      	str	r3, [sp, #28]
   1c49c:	f014 faea 	bl	30a74 <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   1c4a0:	a908      	add	r1, sp, #32
   1c4a2:	4604      	mov	r4, r0
   1c4a4:	f10d 001a 	add.w	r0, sp, #26
   1c4a8:	f003 fcb0 	bl	1fe0c <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   1c4ac:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1c4b0:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
   1c4b4:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   1c4b6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
   1c4ba:	7022      	strb	r2, [r4, #0]
	return evt;
   1c4bc:	9d07      	ldr	r5, [sp, #28]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   1c4be:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
   1c4c2:	e471      	b.n	1bda8 <hci_cmd_handle+0x6c>
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
   1c4c4:	68ab      	ldr	r3, [r5, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1c4c6:	881f      	ldrh	r7, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   1c4c8:	889a      	ldrh	r2, [r3, #4]
   1c4ca:	8859      	ldrh	r1, [r3, #2]
   1c4cc:	b2b8      	uxth	r0, r7
   1c4ce:	f003 fc49 	bl	1fd64 <ll_length_req_send>
   1c4d2:	e586      	b.n	1bfe2 <hci_cmd_handle+0x2a6>
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
   1c4d4:	68aa      	ldr	r2, [r5, #8]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   1c4d6:	2300      	movs	r3, #0
	handle = sys_le16_to_cpu(cmd->handle);
   1c4d8:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   1c4da:	7892      	ldrb	r2, [r2, #2]
   1c4dc:	9300      	str	r3, [sp, #0]
   1c4de:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1c4e2:	2102      	movs	r1, #2
   1c4e4:	b2a0      	uxth	r0, r4
   1c4e6:	f003 faf3 	bl	1fad0 <ll_conn_update>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1c4ea:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   1c4ec:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1c4ee:	8830      	ldrh	r0, [r6, #0]
   1c4f0:	f011 ffe8 	bl	2e4c4 <bt_hci_cmd_complete_create>
   1c4f4:	2103      	movs	r1, #3
   1c4f6:	4603      	mov	r3, r0
   1c4f8:	3008      	adds	r0, #8
   1c4fa:	9307      	str	r3, [sp, #28]
   1c4fc:	f014 faba 	bl	30a74 <net_buf_simple_add>
	rp->status = status;
   1c500:	7005      	strb	r5, [r0, #0]
	return evt;
   1c502:	9d07      	ldr	r5, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
   1c504:	f8a0 4001 	strh.w	r4, [r0, #1]
	if (err == -EINVAL) {
   1c508:	e44e      	b.n	1bda8 <hci_cmd_handle+0x6c>
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
   1c50a:	68aa      	ldr	r2, [r5, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   1c50c:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1c50e:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   1c510:	8853      	ldrh	r3, [r2, #2]
   1c512:	9102      	str	r1, [sp, #8]
   1c514:	88d1      	ldrh	r1, [r2, #6]
   1c516:	9101      	str	r1, [sp, #4]
   1c518:	8891      	ldrh	r1, [r2, #4]
   1c51a:	9100      	str	r1, [sp, #0]
   1c51c:	2200      	movs	r2, #0
   1c51e:	e7e0      	b.n	1c4e2 <hci_cmd_handle+0x7a6>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1c520:	2109      	movs	r1, #9
   1c522:	f011 ffcf 	bl	2e4c4 <bt_hci_cmd_complete_create>
   1c526:	2109      	movs	r1, #9
   1c528:	4603      	mov	r3, r0
   1c52a:	3008      	adds	r0, #8
   1c52c:	9307      	str	r3, [sp, #28]
   1c52e:	f014 faa1 	bl	30a74 <net_buf_simple_add>
	dst[0] = val;
   1c532:	248f      	movs	r4, #143	; 0x8f
	rp->status = 0x00;
   1c534:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   1c536:	21cc      	movs	r1, #204	; 0xcc
	dst[0] = val;
   1c538:	2230      	movs	r2, #48	; 0x30
   1c53a:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
   1c53c:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
   1c53e:	70c2      	strb	r2, [r0, #3]
   1c540:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1c542:	24ec      	movs	r4, #236	; 0xec
	dst[0] = val;
   1c544:	21c0      	movs	r1, #192	; 0xc0
	dst[1] = val >> 8;
   1c546:	2201      	movs	r2, #1
	return evt;
   1c548:	9d07      	ldr	r5, [sp, #28]
   1c54a:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
   1c54c:	7141      	strb	r1, [r0, #5]
	dst[1] = val >> 8;
   1c54e:	7182      	strb	r2, [r0, #6]
	dst[0] = val;
   1c550:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
   1c552:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   1c554:	e428      	b.n	1bda8 <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
   1c556:	68ab      	ldr	r3, [r5, #8]
   1c558:	881f      	ldrh	r7, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   1c55a:	2200      	movs	r2, #0
   1c55c:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   1c55e:	b2b8      	uxth	r0, r7
   1c560:	f007 fa00 	bl	23964 <ll_start_enc_req_send>
   1c564:	e53d      	b.n	1bfe2 <hci_cmd_handle+0x2a6>
	handle = sys_le16_to_cpu(cmd->handle);
   1c566:	68aa      	ldr	r2, [r5, #8]
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   1c568:	2100      	movs	r1, #0
	handle = sys_le16_to_cpu(cmd->handle);
   1c56a:	f832 7b02 	ldrh.w	r7, [r2], #2
   1c56e:	e7f6      	b.n	1c55e <hci_cmd_handle+0x822>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1c570:	2109      	movs	r1, #9
   1c572:	f011 ffa7 	bl	2e4c4 <bt_hci_cmd_complete_create>
   1c576:	2109      	movs	r1, #9
   1c578:	4603      	mov	r3, r0
   1c57a:	3008      	adds	r0, #8
   1c57c:	9307      	str	r3, [sp, #28]
   1c57e:	f014 fa79 	bl	30a74 <net_buf_simple_add>
	rp->status = 0x00;
   1c582:	2300      	movs	r3, #0
   1c584:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   1c588:	2108      	movs	r1, #8
   1c58a:	f008 fd29 	bl	24fe0 <lll_csrand_get>
	return evt;
   1c58e:	9d07      	ldr	r5, [sp, #28]
   1c590:	e40a      	b.n	1bda8 <hci_cmd_handle+0x6c>
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
   1c592:	68a8      	ldr	r0, [r5, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   1c594:	aa08      	add	r2, sp, #32
   1c596:	2300      	movs	r3, #0
   1c598:	f100 0110 	add.w	r1, r0, #16
   1c59c:	f00a fb0e 	bl	26bbc <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1c5a0:	2111      	movs	r1, #17
   1c5a2:	8830      	ldrh	r0, [r6, #0]
   1c5a4:	f011 ff8e 	bl	2e4c4 <bt_hci_cmd_complete_create>
   1c5a8:	2111      	movs	r1, #17
   1c5aa:	4603      	mov	r3, r0
   1c5ac:	3008      	adds	r0, #8
   1c5ae:	9307      	str	r3, [sp, #28]
   1c5b0:	f014 fa60 	bl	30a74 <net_buf_simple_add>
	rp->status = 0x00;
   1c5b4:	2300      	movs	r3, #0
   1c5b6:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   1c5ba:	2210      	movs	r2, #16
   1c5bc:	a908      	add	r1, sp, #32
   1c5be:	f011 fd34 	bl	2e02a <memcpy>
	return evt;
   1c5c2:	9d07      	ldr	r5, [sp, #28]
   1c5c4:	f7ff bbf0 	b.w	1bda8 <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
   1c5c8:	68ab      	ldr	r3, [r5, #8]
	status = ll_feature_req_send(handle);
   1c5ca:	8818      	ldrh	r0, [r3, #0]
   1c5cc:	f003 fb7e 	bl	1fccc <ll_feature_req_send>
   1c5d0:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   1c5d2:	8830      	ldrh	r0, [r6, #0]
   1c5d4:	f011 ff88 	bl	2e4e8 <bt_hci_cmd_status_create>
   1c5d8:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   1c5da:	f7ff bbe5 	b.w	1bda8 <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
   1c5de:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1c5e0:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
   1c5e2:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1c5e4:	f011 ff6e 	bl	2e4c4 <bt_hci_cmd_complete_create>
   1c5e8:	2108      	movs	r1, #8
   1c5ea:	4603      	mov	r3, r0
   1c5ec:	4408      	add	r0, r1
   1c5ee:	9307      	str	r3, [sp, #28]
   1c5f0:	f014 fa40 	bl	30a74 <net_buf_simple_add>
   1c5f4:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   1c5f6:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
   1c5f8:	b2b0      	uxth	r0, r6
	status = ll_chm_get(handle, rp->ch_map);
   1c5fa:	f003 fafd 	bl	1fbf8 <ll_chm_get>
	rp->status = status;
   1c5fe:	7020      	strb	r0, [r4, #0]
	return evt;
   1c600:	9d07      	ldr	r5, [sp, #28]
	rp->handle = sys_le16_to_cpu(handle);
   1c602:	f8a4 6001 	strh.w	r6, [r4, #1]
	if (err == -EINVAL) {
   1c606:	f7ff bbcf 	b.w	1bda8 <hci_cmd_handle+0x6c>
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
   1c60a:	68a9      	ldr	r1, [r5, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   1c60c:	890a      	ldrh	r2, [r1, #8]
   1c60e:	884b      	ldrh	r3, [r1, #2]
   1c610:	8808      	ldrh	r0, [r1, #0]
   1c612:	9202      	str	r2, [sp, #8]
   1c614:	88ca      	ldrh	r2, [r1, #6]
   1c616:	9201      	str	r2, [sp, #4]
   1c618:	8889      	ldrh	r1, [r1, #4]
   1c61a:	9100      	str	r1, [sp, #0]
   1c61c:	2200      	movs	r2, #0
   1c61e:	4611      	mov	r1, r2
   1c620:	f003 fa56 	bl	1fad0 <ll_conn_update>
   1c624:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   1c626:	8830      	ldrh	r0, [r6, #0]
   1c628:	f011 ff5e 	bl	2e4e8 <bt_hci_cmd_status_create>
   1c62c:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   1c62e:	f7ff bbbb 	b.w	1bda8 <hci_cmd_handle+0x6c>
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
   1c632:	68ab      	ldr	r3, [r5, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   1c634:	7899      	ldrb	r1, [r3, #2]
   1c636:	8818      	ldrh	r0, [r3, #0]
   1c638:	f003 fafe 	bl	1fc38 <ll_terminate_ind_send>
   1c63c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   1c63e:	8830      	ldrh	r0, [r6, #0]
   1c640:	f011 ff52 	bl	2e4e8 <bt_hci_cmd_status_create>
   1c644:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   1c646:	f7ff bbaf 	b.w	1bda8 <hci_cmd_handle+0x6c>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   1c64a:	68aa      	ldr	r2, [r5, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   1c64c:	4b01      	ldr	r3, [pc, #4]	; (1c654 <hci_cmd_handle+0x918>)
   1c64e:	e682      	b.n	1c356 <hci_cmd_handle+0x61a>
   1c650:	200001e8 	.word	0x200001e8
   1c654:	20001940 	.word	0x20001940
	event_mask = DEFAULT_EVENT_MASK;
   1c658:	4b24      	ldr	r3, [pc, #144]	; (1c6ec <hci_cmd_handle+0x9b0>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   1c65a:	4a25      	ldr	r2, [pc, #148]	; (1c6f0 <hci_cmd_handle+0x9b4>)
	event_mask = DEFAULT_EVENT_MASK;
   1c65c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c660:	f641 71ff 	movw	r1, #8191	; 0x1fff
   1c664:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   1c668:	4b22      	ldr	r3, [pc, #136]	; (1c6f4 <hci_cmd_handle+0x9b8>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   1c66a:	2000      	movs	r0, #0
   1c66c:	2100      	movs	r1, #0
   1c66e:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   1c672:	201f      	movs	r0, #31
   1c674:	2100      	movs	r1, #0
   1c676:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   1c67a:	f001 fd8d 	bl	1e198 <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   1c67e:	2101      	movs	r1, #1
   1c680:	8830      	ldrh	r0, [r6, #0]
   1c682:	f011 ff1f 	bl	2e4c4 <bt_hci_cmd_complete_create>
   1c686:	2101      	movs	r1, #1
   1c688:	4605      	mov	r5, r0
   1c68a:	3008      	adds	r0, #8
   1c68c:	f014 f9f2 	bl	30a74 <net_buf_simple_add>
	conn_count = 0U;
   1c690:	4a19      	ldr	r2, [pc, #100]	; (1c6f8 <hci_cmd_handle+0x9bc>)
	ccst->status = status;
   1c692:	2300      	movs	r3, #0
   1c694:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
   1c696:	6013      	str	r3, [r2, #0]
}
   1c698:	f7ff bb86 	b.w	1bda8 <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
   1c69c:	68ab      	ldr	r3, [r5, #8]
   1c69e:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   1c6a0:	a908      	add	r1, sp, #32
   1c6a2:	b2a8      	uxth	r0, r5
   1c6a4:	f003 fc4e 	bl	1ff44 <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1c6a8:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   1c6aa:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1c6ac:	8830      	ldrh	r0, [r6, #0]
   1c6ae:	f011 ff09 	bl	2e4c4 <bt_hci_cmd_complete_create>
   1c6b2:	2105      	movs	r1, #5
   1c6b4:	4603      	mov	r3, r0
   1c6b6:	3008      	adds	r0, #8
   1c6b8:	9307      	str	r3, [sp, #28]
   1c6ba:	f014 f9db 	bl	30a74 <net_buf_simple_add>
	rp->status = status;
   1c6be:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   1c6c0:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   1c6c4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	return evt;
   1c6c8:	9d07      	ldr	r5, [sp, #28]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   1c6ca:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   1c6ce:	f7ff bb6b 	b.w	1bda8 <hci_cmd_handle+0x6c>
	return bt_hci_cmd_status_create(_opcode, status);
   1c6d2:	2112      	movs	r1, #18
   1c6d4:	f011 ff08 	bl	2e4e8 <bt_hci_cmd_status_create>
   1c6d8:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   1c6da:	f7ff bb65 	b.w	1bda8 <hci_cmd_handle+0x6c>
	return bt_hci_cmd_status_create(_opcode, status);
   1c6de:	2111      	movs	r1, #17
   1c6e0:	f011 ff02 	bl	2e4e8 <bt_hci_cmd_status_create>
   1c6e4:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   1c6e6:	f7ff bb5f 	b.w	1bda8 <hci_cmd_handle+0x6c>
   1c6ea:	bf00      	nop
   1c6ec:	200001e0 	.word	0x200001e0
   1c6f0:	20001940 	.word	0x20001940
   1c6f4:	200001e8 	.word	0x200001e8
   1c6f8:	20002158 	.word	0x20002158

0001c6fc <hci_acl_handle>:
{
   1c6fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*acl)) {
   1c700:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   1c702:	2400      	movs	r4, #0
	if (buf->len < sizeof(*acl)) {
   1c704:	2b03      	cmp	r3, #3
{
   1c706:	b087      	sub	sp, #28
	*evt = NULL;
   1c708:	600c      	str	r4, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   1c70a:	d946      	bls.n	1c79a <hci_acl_handle+0x9e>
	return net_buf_simple_pull_mem(&buf->b, len);
   1c70c:	4605      	mov	r5, r0
   1c70e:	4688      	mov	r8, r1
   1c710:	3008      	adds	r0, #8
   1c712:	2104      	movs	r1, #4
   1c714:	f014 f9d5 	bl	30ac2 <net_buf_simple_pull_mem>
	if (buf->len < len) {
   1c718:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   1c71a:	8846      	ldrh	r6, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   1c71c:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
   1c720:	42b3      	cmp	r3, r6
   1c722:	d34a      	bcc.n	1c7ba <hci_acl_handle+0xbe>
	if (len > LL_LENGTH_OCTETS_TX_MAX) {
   1c724:	2e1b      	cmp	r6, #27
   1c726:	d846      	bhi.n	1c7b6 <hci_acl_handle+0xba>
	node_tx = ll_tx_mem_acquire();
   1c728:	f003 f97a 	bl	1fa20 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   1c72c:	ea4f 3719 	mov.w	r7, r9, lsr #12
	if (!node_tx) {
   1c730:	4604      	mov	r4, r0
   1c732:	2800      	cmp	r0, #0
   1c734:	d043      	beq.n	1c7be <hci_acl_handle+0xc2>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   1c736:	08bb      	lsrs	r3, r7, #2
   1c738:	d102      	bne.n	1c740 <hci_acl_handle+0x44>
	switch (bt_acl_flags_pb(flags)) {
   1c73a:	b347      	cbz	r7, 1c78e <hci_acl_handle+0x92>
   1c73c:	2f01      	cmp	r7, #1
   1c73e:	d004      	beq.n	1c74a <hci_acl_handle+0x4e>
		return -EINVAL;
   1c740:	f06f 0015 	mvn.w	r0, #21
}
   1c744:	b007      	add	sp, #28
   1c746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1c74a:	7903      	ldrb	r3, [r0, #4]
   1c74c:	f367 0301 	bfi	r3, r7, #0, #2
   1c750:	7103      	strb	r3, [r0, #4]
	pdu_data->len = len;
   1c752:	7166      	strb	r6, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   1c754:	68a9      	ldr	r1, [r5, #8]
   1c756:	4632      	mov	r2, r6
   1c758:	1de0      	adds	r0, r4, #7
   1c75a:	f011 fc66 	bl	2e02a <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   1c75e:	4621      	mov	r1, r4
   1c760:	f3c9 000b 	ubfx	r0, r9, #0, #12
   1c764:	f003 f968 	bl	1fa38 <ll_tx_mem_enqueue>
   1c768:	2800      	cmp	r0, #0
   1c76a:	d0eb      	beq.n	1c744 <hci_acl_handle+0x48>
		BT_ERR("Invalid Tx Enqueue");
   1c76c:	4a2b      	ldr	r2, [pc, #172]	; (1c81c <hci_acl_handle+0x120>)
   1c76e:	2302      	movs	r3, #2
   1c770:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1c774:	482a      	ldr	r0, [pc, #168]	; (1c820 <hci_acl_handle+0x124>)
   1c776:	2300      	movs	r3, #0
   1c778:	aa03      	add	r2, sp, #12
   1c77a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c77e:	f00f fea2 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
		ll_tx_mem_release(node_tx);
   1c782:	4620      	mov	r0, r4
   1c784:	f003 f952 	bl	1fa2c <ll_tx_mem_release>
		return -EINVAL;
   1c788:	f06f 0015 	mvn.w	r0, #21
   1c78c:	e7da      	b.n	1c744 <hci_acl_handle+0x48>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   1c78e:	7903      	ldrb	r3, [r0, #4]
   1c790:	2202      	movs	r2, #2
   1c792:	f362 0301 	bfi	r3, r2, #0, #2
   1c796:	7103      	strb	r3, [r0, #4]
		break;
   1c798:	e7db      	b.n	1c752 <hci_acl_handle+0x56>
		BT_ERR("No HCI ACL header");
   1c79a:	4a22      	ldr	r2, [pc, #136]	; (1c824 <hci_acl_handle+0x128>)
		BT_ERR("Invalid HCI ACL packet length");
   1c79c:	2302      	movs	r3, #2
   1c79e:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1c7a2:	481f      	ldr	r0, [pc, #124]	; (1c820 <hci_acl_handle+0x124>)
   1c7a4:	4623      	mov	r3, r4
   1c7a6:	aa03      	add	r2, sp, #12
   1c7a8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c7ac:	f00f fe8b 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
   1c7b0:	f06f 0015 	mvn.w	r0, #21
   1c7b4:	e7c6      	b.n	1c744 <hci_acl_handle+0x48>
		BT_ERR("Invalid HCI ACL Data length");
   1c7b6:	4a1c      	ldr	r2, [pc, #112]	; (1c828 <hci_acl_handle+0x12c>)
   1c7b8:	e7f0      	b.n	1c79c <hci_acl_handle+0xa0>
		BT_ERR("Invalid HCI ACL packet length");
   1c7ba:	4a1c      	ldr	r2, [pc, #112]	; (1c82c <hci_acl_handle+0x130>)
   1c7bc:	e7ee      	b.n	1c79c <hci_acl_handle+0xa0>
		BT_ERR("Tx Buffer Overflow");
   1c7be:	4b1c      	ldr	r3, [pc, #112]	; (1c830 <hci_acl_handle+0x134>)
   1c7c0:	2502      	movs	r5, #2
   1c7c2:	e9cd 5303 	strd	r5, r3, [sp, #12]
   1c7c6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c7ca:	4603      	mov	r3, r0
   1c7cc:	aa03      	add	r2, sp, #12
   1c7ce:	4814      	ldr	r0, [pc, #80]	; (1c820 <hci_acl_handle+0x124>)
   1c7d0:	f00f fe79 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   1c7d4:	4b17      	ldr	r3, [pc, #92]	; (1c834 <hci_acl_handle+0x138>)
   1c7d6:	681b      	ldr	r3, [r3, #0]
   1c7d8:	019b      	lsls	r3, r3, #6
   1c7da:	d402      	bmi.n	1c7e2 <hci_acl_handle+0xe6>
		return -ENOBUFS;
   1c7dc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1c7e0:	e7b0      	b.n	1c744 <hci_acl_handle+0x48>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1c7e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c7e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c7ea:	2001      	movs	r0, #1
   1c7ec:	f7f5 fa3a 	bl	11c64 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   1c7f0:	4629      	mov	r1, r5
   1c7f2:	f8c8 0000 	str.w	r0, [r8]
   1c7f6:	3008      	adds	r0, #8
   1c7f8:	f014 f93c 	bl	30a74 <net_buf_simple_add>
	hdr->len = len;
   1c7fc:	2401      	movs	r4, #1
	hdr->evt = evt;
   1c7fe:	221a      	movs	r2, #26
   1c800:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   1c802:	7044      	strb	r4, [r0, #1]
   1c804:	f8d8 0000 	ldr.w	r0, [r8]
   1c808:	4621      	mov	r1, r4
   1c80a:	3008      	adds	r0, #8
   1c80c:	f014 f932 	bl	30a74 <net_buf_simple_add>
   1c810:	4603      	mov	r3, r0
		return -ENOBUFS;
   1c812:	f06f 0068 	mvn.w	r0, #104	; 0x68
	ep->link_type = link_type;
   1c816:	701c      	strb	r4, [r3, #0]
   1c818:	e794      	b.n	1c744 <hci_acl_handle+0x48>
   1c81a:	bf00      	nop
   1c81c:	0003317c 	.word	0x0003317c
   1c820:	000323b4 	.word	0x000323b4
   1c824:	00033118 	.word	0x00033118
   1c828:	0003314c 	.word	0x0003314c
   1c82c:	0003312c 	.word	0x0003312c
   1c830:	00033168 	.word	0x00033168
   1c834:	200001e0 	.word	0x200001e0

0001c838 <hci_disconn_complete_encode>:
{
   1c838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   1c83a:	4b0e      	ldr	r3, [pc, #56]	; (1c874 <hci_disconn_complete_encode+0x3c>)
   1c83c:	681b      	ldr	r3, [r3, #0]
   1c83e:	06db      	lsls	r3, r3, #27
   1c840:	d400      	bmi.n	1c844 <hci_disconn_complete_encode+0xc>
}
   1c842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c844:	f102 0408 	add.w	r4, r2, #8
   1c848:	4605      	mov	r5, r0
   1c84a:	460e      	mov	r6, r1
   1c84c:	4620      	mov	r0, r4
   1c84e:	2102      	movs	r1, #2
   1c850:	f014 f910 	bl	30a74 <net_buf_simple_add>
   1c854:	4603      	mov	r3, r0
	hdr->len = len;
   1c856:	2104      	movs	r1, #4
	hdr->evt = evt;
   1c858:	2205      	movs	r2, #5
	hdr->len = len;
   1c85a:	7059      	strb	r1, [r3, #1]
	hdr->evt = evt;
   1c85c:	701a      	strb	r2, [r3, #0]
   1c85e:	4620      	mov	r0, r4
   1c860:	f014 f908 	bl	30a74 <net_buf_simple_add>
   1c864:	2700      	movs	r7, #0
	ep->status = 0x00;
   1c866:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   1c868:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   1c86c:	782b      	ldrb	r3, [r5, #0]
   1c86e:	70c3      	strb	r3, [r0, #3]
}
   1c870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c872:	bf00      	nop
   1c874:	200001e0 	.word	0x200001e0

0001c878 <hci_disconn_complete_process>:
	conn_count--;
   1c878:	4a02      	ldr	r2, [pc, #8]	; (1c884 <hci_disconn_complete_process+0xc>)
   1c87a:	6813      	ldr	r3, [r2, #0]
   1c87c:	3b01      	subs	r3, #1
   1c87e:	6013      	str	r3, [r2, #0]
}
   1c880:	4770      	bx	lr
   1c882:	bf00      	nop
   1c884:	20002158 	.word	0x20002158

0001c888 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   1c888:	7f03      	ldrb	r3, [r0, #28]
   1c88a:	f003 0303 	and.w	r3, r3, #3
   1c88e:	3b01      	subs	r3, #1
   1c890:	2b01      	cmp	r3, #1
{
   1c892:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
   1c894:	d90d      	bls.n	1c8b2 <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   1c896:	4a16      	ldr	r2, [pc, #88]	; (1c8f0 <hci_acl_encode+0x68>)
   1c898:	4916      	ldr	r1, [pc, #88]	; (1c8f4 <hci_acl_encode+0x6c>)
   1c89a:	4817      	ldr	r0, [pc, #92]	; (1c8f8 <hci_acl_encode+0x70>)
   1c89c:	f641 7326 	movw	r3, #7974	; 0x1f26
   1c8a0:	f00f fb91 	bl	2bfc6 <assert_print>
   1c8a4:	4040      	eors	r0, r0
   1c8a6:	f380 8811 	msr	BASEPRI, r0
   1c8aa:	f04f 0003 	mov.w	r0, #3
   1c8ae:	df02      	svc	2
		break;
	}
}
   1c8b0:	bd70      	pop	{r4, r5, r6, pc}
   1c8b2:	4604      	mov	r4, r0
   1c8b4:	f101 0508 	add.w	r5, r1, #8
   1c8b8:	4628      	mov	r0, r5
   1c8ba:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
   1c8bc:	88e6      	ldrh	r6, [r4, #6]
   1c8be:	f014 f8d9 	bl	30a74 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   1c8c2:	7f23      	ldrb	r3, [r4, #28]
   1c8c4:	f003 0303 	and.w	r3, r3, #3
   1c8c8:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   1c8ca:	bf0c      	ite	eq
   1c8cc:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   1c8d0:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   1c8d4:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   1c8d6:	7f61      	ldrb	r1, [r4, #29]
   1c8d8:	8041      	strh	r1, [r0, #2]
   1c8da:	4628      	mov	r0, r5
   1c8dc:	f014 f8ca 	bl	30a74 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   1c8e0:	7f62      	ldrb	r2, [r4, #29]
   1c8e2:	f104 011f 	add.w	r1, r4, #31
}
   1c8e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   1c8ea:	f011 bb9e 	b.w	2e02a <memcpy>
   1c8ee:	bf00      	nop
   1c8f0:	00033190 	.word	0x00033190
   1c8f4:	0003305c 	.word	0x0003305c
   1c8f8:	00032fc4 	.word	0x00032fc4

0001c8fc <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   1c8fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c900:	b08a      	sub	sp, #40	; 0x28
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1c902:	f890 c004 	ldrb.w	ip, [r0, #4]
   1c906:	88c6      	ldrh	r6, [r0, #6]
   1c908:	f1bc 0f03 	cmp.w	ip, #3
{
   1c90c:	af04      	add	r7, sp, #16
   1c90e:	4604      	mov	r4, r0
   1c910:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   1c912:	f100 081c 	add.w	r8, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1c916:	d00e      	beq.n	1c936 <hci_evt_encode+0x3a>
	switch (node_rx->hdr.type) {
   1c918:	f1ac 0c17 	sub.w	ip, ip, #23
   1c91c:	f1bc 0f06 	cmp.w	ip, #6
   1c920:	f200 82f3 	bhi.w	1cf0a <hci_evt_encode+0x60e>
   1c924:	e8df f01c 	tbh	[pc, ip, lsl #1]
   1c928:	00820021 	.word	0x00820021
   1c92c:	00b9008b 	.word	0x00b9008b
   1c930:	00e100cf 	.word	0x00e100cf
   1c934:	0100      	.short	0x0100
	switch (pdu_data->llctrl.opcode) {
   1c936:	7fc3      	ldrb	r3, [r0, #31]
   1c938:	3b03      	subs	r3, #3
   1c93a:	2b12      	cmp	r3, #18
   1c93c:	f200 8127 	bhi.w	1cb8e <hci_evt_encode+0x292>
   1c940:	e8df f013 	tbh	[pc, r3, lsl #1]
   1c944:	012501ee 	.word	0x012501ee
   1c948:	022d0125 	.word	0x022d0125
   1c94c:	0125021b 	.word	0x0125021b
   1c950:	01250226 	.word	0x01250226
   1c954:	01250125 	.word	0x01250125
   1c958:	012501ac 	.word	0x012501ac
   1c95c:	012501c7 	.word	0x012501c7
   1c960:	01250188 	.word	0x01250188
   1c964:	01330125 	.word	0x01330125
   1c968:	0133      	.short	0x0133
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   1c96a:	f018 0f01 	tst.w	r8, #1
   1c96e:	f040 8238 	bne.w	1cde2 <hci_evt_encode+0x4e6>
	status = cc->status;
   1c972:	f894 801c 	ldrb.w	r8, [r4, #28]
	if (!status) {
   1c976:	f1b8 0f00 	cmp.w	r8, #0
   1c97a:	f000 8229 	beq.w	1cdd0 <hci_evt_encode+0x4d4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1c97e:	4bbd      	ldr	r3, [pc, #756]	; (1cc74 <hci_evt_encode+0x378>)
   1c980:	685b      	ldr	r3, [r3, #4]
   1c982:	0098      	lsls	r0, r3, #2
   1c984:	d557      	bpl.n	1ca36 <hci_evt_encode+0x13a>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   1c986:	4bbc      	ldr	r3, [pc, #752]	; (1cc78 <hci_evt_encode+0x37c>)
   1c988:	681b      	ldr	r3, [r3, #0]
   1c98a:	f240 2201 	movw	r2, #513	; 0x201
   1c98e:	4213      	tst	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   1c990:	f403 7900 	and.w	r9, r3, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   1c994:	d04f      	beq.n	1ca36 <hci_evt_encode+0x13a>
   1c996:	3508      	adds	r5, #8
	if (!status) {
   1c998:	f1b8 0f00 	cmp.w	r8, #0
   1c99c:	f040 8239 	bne.w	1ce12 <hci_evt_encode+0x516>
		conn_count++;
   1c9a0:	4ab6      	ldr	r2, [pc, #728]	; (1cc7c <hci_evt_encode+0x380>)
   1c9a2:	6813      	ldr	r3, [r2, #0]
   1c9a4:	3301      	adds	r3, #1
		ll_rl_crpa_set(cc->peer_addr_type,
   1c9a6:	f104 0a1f 	add.w	sl, r4, #31
		conn_count++;
   1c9aa:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   1c9ac:	f1b9 0f00 	cmp.w	r9, #0
   1c9b0:	f000 824c 	beq.w	1ce4c <hci_evt_encode+0x550>
   1c9b4:	2102      	movs	r1, #2
   1c9b6:	4628      	mov	r0, r5
   1c9b8:	f014 f85c 	bl	30a74 <net_buf_simple_add>
	hdr->evt = evt;
   1c9bc:	233e      	movs	r3, #62	; 0x3e
   1c9be:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1c9c0:	231f      	movs	r3, #31
   1c9c2:	7043      	strb	r3, [r0, #1]
   1c9c4:	2101      	movs	r1, #1
   1c9c6:	4628      	mov	r0, r5
   1c9c8:	f014 f854 	bl	30a74 <net_buf_simple_add>
   1c9cc:	4603      	mov	r3, r0
	me->subevent = subevt;
   1c9ce:	220a      	movs	r2, #10
   1c9d0:	701a      	strb	r2, [r3, #0]
   1c9d2:	4628      	mov	r0, r5
   1c9d4:	211e      	movs	r1, #30
   1c9d6:	f014 f84d 	bl	30a74 <net_buf_simple_add>
		leecc->status = 0x00;
   1c9da:	f880 8000 	strb.w	r8, [r0]
		leecc->handle = sys_cpu_to_le16(handle);
   1c9de:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = cc->role;
   1c9e2:	7f63      	ldrb	r3, [r4, #29]
   1c9e4:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
   1c9e6:	7fa3      	ldrb	r3, [r4, #30]
   1c9e8:	7103      	strb	r3, [r0, #4]
   1c9ea:	4605      	mov	r5, r0
		memcpy(&leecc->peer_addr.a.val[0], &cc->peer_addr[0],
   1c9ec:	2206      	movs	r2, #6
   1c9ee:	4651      	mov	r1, sl
   1c9f0:	3005      	adds	r0, #5
   1c9f2:	f011 fb1a 	bl	2e02a <memcpy>
		memcpy(&leecc->local_rpa.val[0], &cc->local_rpa[0],
   1c9f6:	2206      	movs	r2, #6
   1c9f8:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   1c9fc:	f105 000b 	add.w	r0, r5, #11
   1ca00:	f011 fb13 	bl	2e02a <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &cc->peer_rpa[0],
   1ca04:	2206      	movs	r2, #6
   1ca06:	f104 0125 	add.w	r1, r4, #37	; 0x25
   1ca0a:	f105 0011 	add.w	r0, r5, #17
   1ca0e:	f011 fb0c 	bl	2e02a <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   1ca12:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
   1ca14:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
   1ca16:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   1ca18:	f8a5 2019 	strh.w	r2, [r5, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
   1ca1c:	f8a5 1017 	strh.w	r1, [r5, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   1ca20:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = cc->sca;
   1ca24:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1ca28:	776b      	strb	r3, [r5, #29]
		return;
   1ca2a:	e004      	b.n	1ca36 <hci_evt_encode+0x13a>
		hci_disconn_complete_encode(pdu_data, handle, buf);
   1ca2c:	460a      	mov	r2, r1
   1ca2e:	4640      	mov	r0, r8
   1ca30:	4631      	mov	r1, r6
   1ca32:	f7ff ff01 	bl	1c838 <hci_disconn_complete_encode>
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   1ca36:	3718      	adds	r7, #24
   1ca38:	46bd      	mov	sp, r7
   1ca3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1ca3e:	4b8d      	ldr	r3, [pc, #564]	; (1cc74 <hci_evt_encode+0x378>)
   1ca40:	685b      	ldr	r3, [r3, #4]
   1ca42:	0099      	lsls	r1, r3, #2
   1ca44:	d5f7      	bpl.n	1ca36 <hci_evt_encode+0x13a>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   1ca46:	4b8c      	ldr	r3, [pc, #560]	; (1cc78 <hci_evt_encode+0x37c>)
   1ca48:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1ca4a:	075a      	lsls	r2, r3, #29
   1ca4c:	d5f3      	bpl.n	1ca36 <hci_evt_encode+0x13a>
   1ca4e:	3508      	adds	r5, #8
   1ca50:	2102      	movs	r1, #2
   1ca52:	4628      	mov	r0, r5
   1ca54:	f014 f80e 	bl	30a74 <net_buf_simple_add>
	hdr->evt = evt;
   1ca58:	233e      	movs	r3, #62	; 0x3e
   1ca5a:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1ca5c:	230a      	movs	r3, #10
   1ca5e:	7043      	strb	r3, [r0, #1]
   1ca60:	2101      	movs	r1, #1
   1ca62:	4628      	mov	r0, r5
   1ca64:	f014 f806 	bl	30a74 <net_buf_simple_add>
	me->subevent = subevt;
   1ca68:	2303      	movs	r3, #3
   1ca6a:	7003      	strb	r3, [r0, #0]
   1ca6c:	2109      	movs	r1, #9
   1ca6e:	4628      	mov	r0, r5
   1ca70:	f014 f800 	bl	30a74 <net_buf_simple_add>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   1ca74:	f018 0f01 	tst.w	r8, #1
   1ca78:	4605      	mov	r5, r0
   1ca7a:	f040 8238 	bne.w	1ceee <hci_evt_encode+0x5f2>
	sep->status = cu->status;
   1ca7e:	7f23      	ldrb	r3, [r4, #28]
   1ca80:	702b      	strb	r3, [r5, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   1ca82:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
   1ca84:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   1ca86:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   1ca88:	f8a5 3007 	strh.w	r3, [r5, #7]
	sep->handle = sys_cpu_to_le16(handle);
   1ca8c:	f8a5 6001 	strh.w	r6, [r5, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   1ca90:	f8a5 1003 	strh.w	r1, [r5, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   1ca94:	f8a5 2005 	strh.w	r2, [r5, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   1ca98:	e7cd      	b.n	1ca36 <hci_evt_encode+0x13a>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   1ca9a:	4b76      	ldr	r3, [pc, #472]	; (1cc74 <hci_evt_encode+0x378>)
   1ca9c:	685b      	ldr	r3, [r3, #4]
   1ca9e:	041b      	lsls	r3, r3, #16
   1caa0:	f04f 0400 	mov.w	r4, #0
   1caa4:	d5c7      	bpl.n	1ca36 <hci_evt_encode+0x13a>
   1caa6:	3508      	adds	r5, #8
   1caa8:	2102      	movs	r1, #2
   1caaa:	4628      	mov	r0, r5
   1caac:	f013 ffe2 	bl	30a74 <net_buf_simple_add>
	hdr->len = len;
   1cab0:	2103      	movs	r1, #3
	hdr->evt = evt;
   1cab2:	2330      	movs	r3, #48	; 0x30
   1cab4:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1cab6:	7041      	strb	r1, [r0, #1]
   1cab8:	4628      	mov	r0, r5
   1caba:	f013 ffdb 	bl	30a74 <net_buf_simple_add>
	ep->status = 0x00;
   1cabe:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   1cac0:	f8a0 6001 	strh.w	r6, [r0, #1]
   1cac4:	e7b7      	b.n	1ca36 <hci_evt_encode+0x13a>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   1cac6:	4b6e      	ldr	r3, [pc, #440]	; (1cc80 <hci_evt_encode+0x384>)
   1cac8:	681b      	ldr	r3, [r3, #0]
   1caca:	021c      	lsls	r4, r3, #8
   1cacc:	d5b3      	bpl.n	1ca36 <hci_evt_encode+0x13a>
   1cace:	3508      	adds	r5, #8
   1cad0:	2102      	movs	r1, #2
   1cad2:	4628      	mov	r0, r5
   1cad4:	f013 ffce 	bl	30a74 <net_buf_simple_add>
	hdr->len = len;
   1cad8:	2102      	movs	r1, #2
	hdr->evt = evt;
   1cada:	2357      	movs	r3, #87	; 0x57
   1cadc:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1cade:	7041      	strb	r1, [r0, #1]
   1cae0:	4628      	mov	r0, r5
   1cae2:	f013 ffc7 	bl	30a74 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   1cae6:	8006      	strh	r6, [r0, #0]
   1cae8:	e7a5      	b.n	1ca36 <hci_evt_encode+0x13a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1caea:	4b62      	ldr	r3, [pc, #392]	; (1cc74 <hci_evt_encode+0x378>)
   1caec:	685b      	ldr	r3, [r3, #4]
   1caee:	0098      	lsls	r0, r3, #2
   1caf0:	d5a1      	bpl.n	1ca36 <hci_evt_encode+0x13a>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   1caf2:	4b61      	ldr	r3, [pc, #388]	; (1cc78 <hci_evt_encode+0x37c>)
   1caf4:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1caf6:	0319      	lsls	r1, r3, #12
   1caf8:	d59d      	bpl.n	1ca36 <hci_evt_encode+0x13a>
   1cafa:	3508      	adds	r5, #8
   1cafc:	2102      	movs	r1, #2
   1cafe:	4628      	mov	r0, r5
   1cb00:	f013 ffb8 	bl	30a74 <net_buf_simple_add>
	hdr->evt = evt;
   1cb04:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   1cb06:	2304      	movs	r3, #4
	hdr->evt = evt;
   1cb08:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   1cb0a:	7043      	strb	r3, [r0, #1]
   1cb0c:	2101      	movs	r1, #1
   1cb0e:	4628      	mov	r0, r5
   1cb10:	f013 ffb0 	bl	30a74 <net_buf_simple_add>
	me->subevent = subevt;
   1cb14:	2314      	movs	r3, #20
   1cb16:	7003      	strb	r3, [r0, #0]
   1cb18:	2103      	movs	r1, #3
   1cb1a:	4628      	mov	r0, r5
   1cb1c:	f013 ffaa 	bl	30a74 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   1cb20:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   1cb22:	7f23      	ldrb	r3, [r4, #28]
   1cb24:	7083      	strb	r3, [r0, #2]
   1cb26:	e786      	b.n	1ca36 <hci_evt_encode+0x13a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1cb28:	4b52      	ldr	r3, [pc, #328]	; (1cc74 <hci_evt_encode+0x378>)
   1cb2a:	685b      	ldr	r3, [r3, #4]
   1cb2c:	009a      	lsls	r2, r3, #2
   1cb2e:	d503      	bpl.n	1cb38 <hci_evt_encode+0x23c>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   1cb30:	4b51      	ldr	r3, [pc, #324]	; (1cc78 <hci_evt_encode+0x37c>)
   1cb32:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1cb34:	051b      	lsls	r3, r3, #20
   1cb36:	d45f      	bmi.n	1cbf8 <hci_evt_encode+0x2fc>
   1cb38:	7f62      	ldrb	r2, [r4, #29]
   1cb3a:	7fa3      	ldrb	r3, [r4, #30]
   1cb3c:	2a00      	cmp	r2, #0
   1cb3e:	fa92 f2a2 	rbit	r2, r2
   1cb42:	fab2 f282 	clz	r2, r2
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
   1cb46:	466d      	mov	r5, sp
   1cb48:	bf08      	it	eq
   1cb4a:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   1cb4e:	b08a      	sub	sp, #40	; 0x28
   1cb50:	2b00      	cmp	r3, #0
   1cb52:	f102 0101 	add.w	r1, r2, #1
   1cb56:	a804      	add	r0, sp, #16
   1cb58:	4a4a      	ldr	r2, [pc, #296]	; (1cc84 <hci_evt_encode+0x388>)
   1cb5a:	9609      	str	r6, [sp, #36]	; 0x24
   1cb5c:	fa93 f3a3 	rbit	r3, r3
   1cb60:	7f26      	ldrb	r6, [r4, #28]
   1cb62:	9208      	str	r2, [sp, #32]
   1cb64:	fab3 f383 	clz	r3, r3
   1cb68:	4602      	mov	r2, r0
   1cb6a:	bf08      	it	eq
   1cb6c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   1cb70:	3301      	adds	r3, #1
   1cb72:	2406      	movs	r4, #6
   1cb74:	e9cd 610a 	strd	r6, r1, [sp, #40]	; 0x28
   1cb78:	930c      	str	r3, [sp, #48]	; 0x30
   1cb7a:	f842 4f0c 	str.w	r4, [r2, #12]!
   1cb7e:	4842      	ldr	r0, [pc, #264]	; (1cc88 <hci_evt_encode+0x38c>)
   1cb80:	2300      	movs	r3, #0
   1cb82:	f44f 5142 	mov.w	r1, #12416	; 0x3080
   1cb86:	f00f fc9e 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
   1cb8a:	46ad      	mov	sp, r5
		return;
   1cb8c:	e753      	b.n	1ca36 <hci_evt_encode+0x13a>
		LL_ASSERT(0);
   1cb8e:	4a3f      	ldr	r2, [pc, #252]	; (1cc8c <hci_evt_encode+0x390>)
   1cb90:	493f      	ldr	r1, [pc, #252]	; (1cc90 <hci_evt_encode+0x394>)
   1cb92:	4840      	ldr	r0, [pc, #256]	; (1cc94 <hci_evt_encode+0x398>)
   1cb94:	f641 63fa 	movw	r3, #7930	; 0x1efa
   1cb98:	f00f fa15 	bl	2bfc6 <assert_print>
   1cb9c:	4040      	eors	r0, r0
   1cb9e:	f380 8811 	msr	BASEPRI, r0
   1cba2:	f04f 0003 	mov.w	r0, #3
   1cba6:	df02      	svc	2
}
   1cba8:	e745      	b.n	1ca36 <hci_evt_encode+0x13a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1cbaa:	4b32      	ldr	r3, [pc, #200]	; (1cc74 <hci_evt_encode+0x378>)
   1cbac:	685b      	ldr	r3, [r3, #4]
   1cbae:	009a      	lsls	r2, r3, #2
   1cbb0:	f57f af41 	bpl.w	1ca36 <hci_evt_encode+0x13a>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   1cbb4:	4b30      	ldr	r3, [pc, #192]	; (1cc78 <hci_evt_encode+0x37c>)
   1cbb6:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1cbb8:	065b      	lsls	r3, r3, #25
   1cbba:	f57f af3c 	bpl.w	1ca36 <hci_evt_encode+0x13a>
   1cbbe:	3508      	adds	r5, #8
   1cbc0:	2102      	movs	r1, #2
   1cbc2:	4628      	mov	r0, r5
   1cbc4:	f013 ff56 	bl	30a74 <net_buf_simple_add>
	hdr->evt = evt;
   1cbc8:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   1cbca:	230b      	movs	r3, #11
	hdr->evt = evt;
   1cbcc:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   1cbce:	7043      	strb	r3, [r0, #1]
   1cbd0:	2101      	movs	r1, #1
   1cbd2:	4628      	mov	r0, r5
   1cbd4:	f013 ff4e 	bl	30a74 <net_buf_simple_add>
	me->subevent = subevt;
   1cbd8:	2307      	movs	r3, #7
   1cbda:	7003      	strb	r3, [r0, #0]
   1cbdc:	210a      	movs	r1, #10
   1cbde:	4628      	mov	r0, r5
   1cbe0:	f013 ff48 	bl	30a74 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   1cbe4:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   1cbe6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   1cbe8:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   1cbea:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1cbec:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   1cbee:	8c23      	ldrh	r3, [r4, #32]
   1cbf0:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   1cbf2:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   1cbf4:	8103      	strh	r3, [r0, #8]
   1cbf6:	e71e      	b.n	1ca36 <hci_evt_encode+0x13a>
   1cbf8:	3508      	adds	r5, #8
   1cbfa:	2102      	movs	r1, #2
   1cbfc:	4628      	mov	r0, r5
   1cbfe:	f013 ff39 	bl	30a74 <net_buf_simple_add>
	hdr->evt = evt;
   1cc02:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   1cc04:	2306      	movs	r3, #6
	hdr->evt = evt;
   1cc06:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   1cc08:	7043      	strb	r3, [r0, #1]
   1cc0a:	2101      	movs	r1, #1
   1cc0c:	4628      	mov	r0, r5
   1cc0e:	f013 ff31 	bl	30a74 <net_buf_simple_add>
	me->subevent = subevt;
   1cc12:	230c      	movs	r3, #12
   1cc14:	7003      	strb	r3, [r0, #0]
   1cc16:	2105      	movs	r1, #5
   1cc18:	4628      	mov	r0, r5
   1cc1a:	f013 ff2b 	bl	30a74 <net_buf_simple_add>
	sep->status = pu->status;
   1cc1e:	7f23      	ldrb	r3, [r4, #28]
   1cc20:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   1cc22:	f8a0 6001 	strh.w	r6, [r0, #1]
   1cc26:	7f62      	ldrb	r2, [r4, #29]
   1cc28:	2a00      	cmp	r2, #0
   1cc2a:	fa92 f3a2 	rbit	r3, r2
   1cc2e:	fab3 f383 	clz	r3, r3
   1cc32:	bf08      	it	eq
   1cc34:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   1cc38:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   1cc3a:	70c3      	strb	r3, [r0, #3]
   1cc3c:	7fa2      	ldrb	r2, [r4, #30]
   1cc3e:	fa92 f3a2 	rbit	r3, r2
   1cc42:	2a00      	cmp	r2, #0
   1cc44:	fab3 f383 	clz	r3, r3
   1cc48:	bf08      	it	eq
   1cc4a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   1cc4e:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   1cc50:	7103      	strb	r3, [r0, #4]
   1cc52:	e6f0      	b.n	1ca36 <hci_evt_encode+0x13a>
	switch (pdu->llctrl.reject_ext_ind.reject_opcode) {
   1cc54:	f890 2020 	ldrb.w	r2, [r0, #32]
		BT_WARN("reject opcode: 0x%02x", pdu->llctrl.reject_ext_ind.reject_opcode);
   1cc58:	490f      	ldr	r1, [pc, #60]	; (1cc98 <hci_evt_encode+0x39c>)
   1cc5a:	e9c7 1204 	strd	r1, r2, [r7, #16]
   1cc5e:	2303      	movs	r3, #3
   1cc60:	60fb      	str	r3, [r7, #12]
   1cc62:	4809      	ldr	r0, [pc, #36]	; (1cc88 <hci_evt_encode+0x38c>)
   1cc64:	2300      	movs	r3, #0
   1cc66:	f107 020c 	add.w	r2, r7, #12
   1cc6a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1cc6e:	f00f fc2a 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
}
   1cc72:	e6e0      	b.n	1ca36 <hci_evt_encode+0x13a>
   1cc74:	200001e0 	.word	0x200001e0
   1cc78:	200001e8 	.word	0x200001e8
   1cc7c:	20002158 	.word	0x20002158
   1cc80:	20001940 	.word	0x20001940
   1cc84:	00033244 	.word	0x00033244
   1cc88:	000323b4 	.word	0x000323b4
   1cc8c:	00033190 	.word	0x00033190
   1cc90:	0003305c 	.word	0x0003305c
   1cc94:	00032fc4 	.word	0x00032fc4
   1cc98:	00033280 	.word	0x00033280
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   1cc9c:	4ba2      	ldr	r3, [pc, #648]	; (1cf28 <hci_evt_encode+0x62c>)
   1cc9e:	681b      	ldr	r3, [r3, #0]
   1cca0:	061b      	lsls	r3, r3, #24
   1cca2:	f57f aec8 	bpl.w	1ca36 <hci_evt_encode+0x13a>
   1cca6:	3508      	adds	r5, #8
   1cca8:	2102      	movs	r1, #2
   1ccaa:	4628      	mov	r0, r5
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
   1ccac:	f894 4020 	ldrb.w	r4, [r4, #32]
   1ccb0:	f013 fee0 	bl	30a74 <net_buf_simple_add>
	hdr->evt = evt;
   1ccb4:	2308      	movs	r3, #8
	hdr->len = len;
   1ccb6:	2104      	movs	r1, #4
	hdr->evt = evt;
   1ccb8:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1ccba:	7041      	strb	r1, [r0, #1]
   1ccbc:	4628      	mov	r0, r5
   1ccbe:	f013 fed9 	bl	30a74 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   1ccc2:	fab4 f384 	clz	r3, r4
   1ccc6:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   1ccc8:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   1ccca:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   1ccce:	70c3      	strb	r3, [r0, #3]
   1ccd0:	e6b1      	b.n	1ca36 <hci_evt_encode+0x13a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1ccd2:	4b95      	ldr	r3, [pc, #596]	; (1cf28 <hci_evt_encode+0x62c>)
   1ccd4:	685b      	ldr	r3, [r3, #4]
   1ccd6:	0098      	lsls	r0, r3, #2
   1ccd8:	f140 8091 	bpl.w	1cdfe <hci_evt_encode+0x502>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   1ccdc:	4b93      	ldr	r3, [pc, #588]	; (1cf2c <hci_evt_encode+0x630>)
   1ccde:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1cce0:	0699      	lsls	r1, r3, #26
   1cce2:	f140 808c 	bpl.w	1cdfe <hci_evt_encode+0x502>
   1cce6:	3508      	adds	r5, #8
   1cce8:	2102      	movs	r1, #2
   1ccea:	4628      	mov	r0, r5
   1ccec:	f013 fec2 	bl	30a74 <net_buf_simple_add>
	hdr->evt = evt;
   1ccf0:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   1ccf2:	230b      	movs	r3, #11
	hdr->evt = evt;
   1ccf4:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   1ccf6:	7043      	strb	r3, [r0, #1]
   1ccf8:	2101      	movs	r1, #1
   1ccfa:	4628      	mov	r0, r5
   1ccfc:	f013 feba 	bl	30a74 <net_buf_simple_add>
	me->subevent = subevt;
   1cd00:	2306      	movs	r3, #6
   1cd02:	7003      	strb	r3, [r0, #0]
   1cd04:	210a      	movs	r1, #10
   1cd06:	4628      	mov	r0, r5
   1cd08:	f013 feb4 	bl	30a74 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   1cd0c:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   1cd0e:	8c23      	ldrh	r3, [r4, #32]
   1cd10:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   1cd12:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   1cd14:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   1cd16:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   1cd18:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   1cd1a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1cd1c:	8103      	strh	r3, [r0, #8]
   1cd1e:	e68a      	b.n	1ca36 <hci_evt_encode+0x13a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1cd20:	4b81      	ldr	r3, [pc, #516]	; (1cf28 <hci_evt_encode+0x62c>)
   1cd22:	685b      	ldr	r3, [r3, #4]
   1cd24:	0098      	lsls	r0, r3, #2
   1cd26:	f57f ae86 	bpl.w	1ca36 <hci_evt_encode+0x13a>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   1cd2a:	4b80      	ldr	r3, [pc, #512]	; (1cf2c <hci_evt_encode+0x630>)
   1cd2c:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1cd2e:	06d9      	lsls	r1, r3, #27
   1cd30:	f57f ae81 	bpl.w	1ca36 <hci_evt_encode+0x13a>
   1cd34:	3508      	adds	r5, #8
   1cd36:	2102      	movs	r1, #2
   1cd38:	4628      	mov	r0, r5
   1cd3a:	f013 fe9b 	bl	30a74 <net_buf_simple_add>
	hdr->evt = evt;
   1cd3e:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   1cd40:	230d      	movs	r3, #13
	hdr->evt = evt;
   1cd42:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   1cd44:	7043      	strb	r3, [r0, #1]
   1cd46:	2101      	movs	r1, #1
   1cd48:	4628      	mov	r0, r5
   1cd4a:	f013 fe93 	bl	30a74 <net_buf_simple_add>
	me->subevent = subevt;
   1cd4e:	2305      	movs	r3, #5
   1cd50:	7003      	strb	r3, [r0, #0]
   1cd52:	210c      	movs	r1, #12
   1cd54:	4628      	mov	r0, r5
   1cd56:	f013 fe8d 	bl	30a74 <net_buf_simple_add>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   1cd5a:	f104 0120 	add.w	r1, r4, #32
   1cd5e:	4605      	mov	r5, r0
   1cd60:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   1cd62:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   1cd66:	f011 f960 	bl	2e02a <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   1cd6a:	2202      	movs	r2, #2
   1cd6c:	f104 0128 	add.w	r1, r4, #40	; 0x28
   1cd70:	f105 000a 	add.w	r0, r5, #10
   1cd74:	f011 f959 	bl	2e02a <memcpy>
   1cd78:	e65d      	b.n	1ca36 <hci_evt_encode+0x13a>
		le_unknown_rsp(pdu_data, handle, buf);
   1cd7a:	f890 3020 	ldrb.w	r3, [r0, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   1cd7e:	2b0e      	cmp	r3, #14
   1cd80:	f000 8094 	beq.w	1ceac <hci_evt_encode+0x5b0>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   1cd84:	496a      	ldr	r1, [pc, #424]	; (1cf30 <hci_evt_encode+0x634>)
   1cd86:	2203      	movs	r2, #3
	switch (pdu_data->llctrl.unknown_rsp.type) {
   1cd88:	e9c7 1304 	strd	r1, r3, [r7, #16]
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   1cd8c:	60fa      	str	r2, [r7, #12]
	compiler_barrier();
   1cd8e:	e768      	b.n	1cc62 <hci_evt_encode+0x366>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   1cd90:	460b      	mov	r3, r1
   1cd92:	4632      	mov	r2, r6
   1cd94:	4641      	mov	r1, r8
   1cd96:	2000      	movs	r0, #0
   1cd98:	f7fe feda 	bl	1bb50 <le_remote_feat_complete>
		break;
   1cd9c:	e64b      	b.n	1ca36 <hci_evt_encode+0x13a>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   1cd9e:	4b62      	ldr	r3, [pc, #392]	; (1cf28 <hci_evt_encode+0x62c>)
   1cda0:	681b      	ldr	r3, [r3, #0]
   1cda2:	061a      	lsls	r2, r3, #24
   1cda4:	f04f 0400 	mov.w	r4, #0
   1cda8:	f57f ae45 	bpl.w	1ca36 <hci_evt_encode+0x13a>
   1cdac:	3508      	adds	r5, #8
   1cdae:	2102      	movs	r1, #2
   1cdb0:	4628      	mov	r0, r5
   1cdb2:	f013 fe5f 	bl	30a74 <net_buf_simple_add>
	hdr->evt = evt;
   1cdb6:	2308      	movs	r3, #8
	hdr->len = len;
   1cdb8:	2104      	movs	r1, #4
	hdr->evt = evt;
   1cdba:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1cdbc:	7041      	strb	r1, [r0, #1]
   1cdbe:	4628      	mov	r0, r5
   1cdc0:	f013 fe58 	bl	30a74 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   1cdc4:	2301      	movs	r3, #1
	ep->status = err;
   1cdc6:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   1cdc8:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   1cdcc:	70c3      	strb	r3, [r0, #3]
   1cdce:	e632      	b.n	1ca36 <hci_evt_encode+0x13a>
		ll_rl_crpa_set(cc->peer_addr_type,
   1cdd0:	7fa0      	ldrb	r0, [r4, #30]
   1cdd2:	f104 0325 	add.w	r3, r4, #37	; 0x25
   1cdd6:	22ff      	movs	r2, #255	; 0xff
   1cdd8:	f104 011f 	add.w	r1, r4, #31
   1cddc:	f007 f97a 	bl	240d4 <ll_rl_crpa_set>
   1cde0:	e5cd      	b.n	1c97e <hci_evt_encode+0x82>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   1cde2:	4a54      	ldr	r2, [pc, #336]	; (1cf34 <hci_evt_encode+0x638>)
   1cde4:	4954      	ldr	r1, [pc, #336]	; (1cf38 <hci_evt_encode+0x63c>)
   1cde6:	4855      	ldr	r0, [pc, #340]	; (1cf3c <hci_evt_encode+0x640>)
   1cde8:	f641 435a 	movw	r3, #7258	; 0x1c5a
   1cdec:	f00f f8eb 	bl	2bfc6 <assert_print>
   1cdf0:	4040      	eors	r0, r0
   1cdf2:	f380 8811 	msr	BASEPRI, r0
   1cdf6:	f04f 0003 	mov.w	r0, #3
   1cdfa:	df02      	svc	2
   1cdfc:	e5b9      	b.n	1c972 <hci_evt_encode+0x76>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   1cdfe:	2300      	movs	r3, #0
   1ce00:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1ce04:	9300      	str	r3, [sp, #0]
   1ce06:	221a      	movs	r2, #26
   1ce08:	2102      	movs	r1, #2
   1ce0a:	4630      	mov	r0, r6
   1ce0c:	f002 fe60 	bl	1fad0 <ll_conn_update>
		return;
   1ce10:	e611      	b.n	1ca36 <hci_evt_encode+0x13a>
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   1ce12:	f1b9 0f00 	cmp.w	r9, #0
   1ce16:	d150      	bne.n	1ceba <hci_evt_encode+0x5be>
   1ce18:	2102      	movs	r1, #2
   1ce1a:	4628      	mov	r0, r5
   1ce1c:	f013 fe2a 	bl	30a74 <net_buf_simple_add>
	hdr->evt = evt;
   1ce20:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   1ce22:	2313      	movs	r3, #19
	hdr->evt = evt;
   1ce24:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   1ce26:	7043      	strb	r3, [r0, #1]
   1ce28:	2101      	movs	r1, #1
   1ce2a:	4628      	mov	r0, r5
   1ce2c:	f013 fe22 	bl	30a74 <net_buf_simple_add>
	me->subevent = subevt;
   1ce30:	2301      	movs	r3, #1
   1ce32:	7003      	strb	r3, [r0, #0]
   1ce34:	2112      	movs	r1, #18
   1ce36:	4628      	mov	r0, r5
   1ce38:	f013 fe1c 	bl	30a74 <net_buf_simple_add>
   1ce3c:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
   1ce3e:	2212      	movs	r2, #18
   1ce40:	4649      	mov	r1, r9
   1ce42:	f011 f8fd 	bl	2e040 <memset>
		lecc->status = status;
   1ce46:	f884 8000 	strb.w	r8, [r4]
		return;
   1ce4a:	e5f4      	b.n	1ca36 <hci_evt_encode+0x13a>
   1ce4c:	2102      	movs	r1, #2
   1ce4e:	4628      	mov	r0, r5
   1ce50:	f013 fe10 	bl	30a74 <net_buf_simple_add>
	hdr->evt = evt;
   1ce54:	233e      	movs	r3, #62	; 0x3e
   1ce56:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1ce58:	2313      	movs	r3, #19
   1ce5a:	7043      	strb	r3, [r0, #1]
   1ce5c:	2101      	movs	r1, #1
   1ce5e:	4628      	mov	r0, r5
   1ce60:	f013 fe08 	bl	30a74 <net_buf_simple_add>
   1ce64:	4603      	mov	r3, r0
	me->subevent = subevt;
   1ce66:	2201      	movs	r2, #1
   1ce68:	701a      	strb	r2, [r3, #0]
   1ce6a:	4628      	mov	r0, r5
   1ce6c:	2112      	movs	r1, #18
   1ce6e:	f013 fe01 	bl	30a74 <net_buf_simple_add>
	lecc->status = 0x00;
   1ce72:	f880 8000 	strb.w	r8, [r0]
	lecc->handle = sys_cpu_to_le16(handle);
   1ce76:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
   1ce7a:	7f63      	ldrb	r3, [r4, #29]
   1ce7c:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   1ce7e:	7fa3      	ldrb	r3, [r4, #30]
   1ce80:	f003 0301 	and.w	r3, r3, #1
   1ce84:	4605      	mov	r5, r0
   1ce86:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
   1ce88:	2206      	movs	r2, #6
   1ce8a:	4651      	mov	r1, sl
   1ce8c:	3005      	adds	r0, #5
   1ce8e:	f011 f8cc 	bl	2e02a <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   1ce92:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
   1ce94:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
   1ce96:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   1ce98:	f8a5 200d 	strh.w	r2, [r5, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
   1ce9c:	f8a5 100b 	strh.w	r1, [r5, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   1cea0:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
   1cea4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1cea8:	746b      	strb	r3, [r5, #17]
   1ceaa:	e5c4      	b.n	1ca36 <hci_evt_encode+0x13a>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   1ceac:	460b      	mov	r3, r1
   1ceae:	4632      	mov	r2, r6
   1ceb0:	2100      	movs	r1, #0
   1ceb2:	201a      	movs	r0, #26
   1ceb4:	f7fe fe4c 	bl	1bb50 <le_remote_feat_complete>
		break;
   1ceb8:	e5bd      	b.n	1ca36 <hci_evt_encode+0x13a>
   1ceba:	2102      	movs	r1, #2
   1cebc:	4628      	mov	r0, r5
   1cebe:	f013 fdd9 	bl	30a74 <net_buf_simple_add>
	hdr->evt = evt;
   1cec2:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   1cec4:	231f      	movs	r3, #31
	hdr->evt = evt;
   1cec6:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   1cec8:	7043      	strb	r3, [r0, #1]
   1ceca:	2101      	movs	r1, #1
   1cecc:	4628      	mov	r0, r5
   1cece:	f013 fdd1 	bl	30a74 <net_buf_simple_add>
	me->subevent = subevt;
   1ced2:	230a      	movs	r3, #10
   1ced4:	7003      	strb	r3, [r0, #0]
   1ced6:	211e      	movs	r1, #30
   1ced8:	4628      	mov	r0, r5
   1ceda:	f013 fdcb 	bl	30a74 <net_buf_simple_add>
   1cede:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
   1cee0:	221e      	movs	r2, #30
   1cee2:	2100      	movs	r1, #0
   1cee4:	f011 f8ac 	bl	2e040 <memset>
			leecc->status = status;
   1cee8:	f884 8000 	strb.w	r8, [r4]
			return;
   1ceec:	e5a3      	b.n	1ca36 <hci_evt_encode+0x13a>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   1ceee:	4a11      	ldr	r2, [pc, #68]	; (1cf34 <hci_evt_encode+0x638>)
   1cef0:	4913      	ldr	r1, [pc, #76]	; (1cf40 <hci_evt_encode+0x644>)
   1cef2:	4812      	ldr	r0, [pc, #72]	; (1cf3c <hci_evt_encode+0x640>)
   1cef4:	f641 43df 	movw	r3, #7391	; 0x1cdf
   1cef8:	f00f f865 	bl	2bfc6 <assert_print>
   1cefc:	4040      	eors	r0, r0
   1cefe:	f380 8811 	msr	BASEPRI, r0
   1cf02:	f04f 0003 	mov.w	r0, #3
   1cf06:	df02      	svc	2
   1cf08:	e5b9      	b.n	1ca7e <hci_evt_encode+0x182>
		LL_ASSERT(0);
   1cf0a:	4a0a      	ldr	r2, [pc, #40]	; (1cf34 <hci_evt_encode+0x638>)
   1cf0c:	490d      	ldr	r1, [pc, #52]	; (1cf44 <hci_evt_encode+0x648>)
   1cf0e:	480b      	ldr	r0, [pc, #44]	; (1cf3c <hci_evt_encode+0x640>)
   1cf10:	f641 631a 	movw	r3, #7706	; 0x1e1a
   1cf14:	f00f f857 	bl	2bfc6 <assert_print>
   1cf18:	4040      	eors	r0, r0
   1cf1a:	f380 8811 	msr	BASEPRI, r0
   1cf1e:	f04f 0003 	mov.w	r0, #3
   1cf22:	df02      	svc	2
		return;
   1cf24:	e587      	b.n	1ca36 <hci_evt_encode+0x13a>
   1cf26:	bf00      	nop
   1cf28:	200001e0 	.word	0x200001e0
   1cf2c:	200001e8 	.word	0x200001e8
   1cf30:	00033270 	.word	0x00033270
   1cf34:	00033190 	.word	0x00033190
   1cf38:	000331cc 	.word	0x000331cc
   1cf3c:	00032fc4 	.word	0x00032fc4
   1cf40:	00033208 	.word	0x00033208
   1cf44:	0003305c 	.word	0x0003305c

0001cf48 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN) || defined(CONFIG_BT_CTLR_ADV_ISO) || \
	defined(CONFIG_BT_CTLR_CONN_ISO)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   1cf48:	b570      	push	{r4, r5, r6, lr}
   1cf4a:	f100 0408 	add.w	r4, r0, #8
   1cf4e:	460e      	mov	r6, r1
   1cf50:	4620      	mov	r0, r4
   1cf52:	2102      	movs	r1, #2
   1cf54:	4615      	mov	r5, r2
   1cf56:	f013 fd8d 	bl	30a74 <net_buf_simple_add>
	hdr->evt = evt;
   1cf5a:	2313      	movs	r3, #19
	hdr->len = len;
   1cf5c:	2105      	movs	r1, #5
	hdr->evt = evt;
   1cf5e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1cf60:	7041      	strb	r1, [r0, #1]
   1cf62:	4620      	mov	r0, r4
   1cf64:	f013 fd86 	bl	30a74 <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
   1cf68:	2301      	movs	r3, #1
   1cf6a:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   1cf6c:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   1cf70:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   1cf74:	bd70      	pop	{r4, r5, r6, pc}
   1cf76:	bf00      	nop

0001cf78 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1cf78:	7903      	ldrb	r3, [r0, #4]
   1cf7a:	2b03      	cmp	r3, #3
   1cf7c:	d009      	beq.n	1cf92 <hci_get_class+0x1a>

		switch (node_rx->hdr.type) {
   1cf7e:	2b17      	cmp	r3, #23
   1cf80:	d005      	beq.n	1cf8e <hci_get_class+0x16>
   1cf82:	3b18      	subs	r3, #24
		case NODE_RX_TYPE_USER_START ... NODE_RX_TYPE_USER_END - 1:
			return hci_user_ext_get_class(node_rx);
#endif /* CONFIG_BT_CTLR_USER_EVT_RANGE > 0 */

		default:
			return HCI_CLASS_NONE;
   1cf84:	2b05      	cmp	r3, #5
   1cf86:	bf94      	ite	ls
   1cf88:	2003      	movls	r0, #3
   1cf8a:	2000      	movhi	r0, #0
   1cf8c:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
   1cf8e:	2001      	movs	r0, #1
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   1cf90:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   1cf92:	7f03      	ldrb	r3, [r0, #28]
   1cf94:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_ACL_DATA;
   1cf98:	2b03      	cmp	r3, #3
   1cf9a:	bf0c      	ite	eq
   1cf9c:	2004      	moveq	r0, #4
   1cf9e:	2005      	movne	r0, #5
   1cfa0:	4770      	bx	lr
   1cfa2:	bf00      	nop

0001cfa4 <hci_init>:

void hci_init(struct k_poll_signal *signal_host_buf)
{
   1cfa4:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   1cfa6:	4b0b      	ldr	r3, [pc, #44]	; (1cfd4 <hci_init+0x30>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   1cfa8:	490b      	ldr	r1, [pc, #44]	; (1cfd8 <hci_init+0x34>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   1cfaa:	4a0c      	ldr	r2, [pc, #48]	; (1cfdc <hci_init+0x38>)
	event_mask = DEFAULT_EVENT_MASK;
   1cfac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1cfb0:	f641 75ff 	movw	r5, #8191	; 0x1fff
   1cfb4:	e9c3 4500 	strd	r4, r5, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   1cfb8:	2400      	movs	r4, #0
   1cfba:	2500      	movs	r5, #0
   1cfbc:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
   1cfc0:	4b07      	ldr	r3, [pc, #28]	; (1cfe0 <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   1cfc2:	201f      	movs	r0, #31
   1cfc4:	2100      	movs	r1, #0
   1cfc6:	e9c2 0100 	strd	r0, r1, [r2]
	conn_count = 0U;
   1cfca:	2200      	movs	r2, #0
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   1cfcc:	bc30      	pop	{r4, r5}
	conn_count = 0U;
   1cfce:	601a      	str	r2, [r3, #0]
}
   1cfd0:	4770      	bx	lr
   1cfd2:	bf00      	nop
   1cfd4:	200001e0 	.word	0x200001e0
   1cfd8:	20001940 	.word	0x20001940
   1cfdc:	200001e8 	.word	0x200001e8
   1cfe0:	20002158 	.word	0x20002158

0001cfe4 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   1cfe4:	f007 bffc 	b.w	24fe0 <lll_csrand_get>

0001cfe8 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   1cfe8:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   1cfea:	2300      	movs	r3, #0
   1cfec:	f009 fde6 	bl	26bbc <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   1cff0:	2000      	movs	r0, #0
   1cff2:	bd08      	pop	{r3, pc}

0001cff4 <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
   1cff4:	4801      	ldr	r0, [pc, #4]	; (1cffc <ll_feat_get+0x8>)
   1cff6:	2100      	movs	r1, #0
   1cff8:	4770      	bx	lr
   1cffa:	bf00      	nop
   1cffc:	0001417f 	.word	0x0001417f

0001d000 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   1d000:	b510      	push	{r4, lr}
   1d002:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   1d004:	f008 f822 	bl	2504c <lll_reset>
	LL_ASSERT(!err);
   1d008:	b950      	cbnz	r0, 1d020 <perform_lll_reset+0x20>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   1d00a:	f008 fc1f 	bl	2584c <lll_adv_reset>
	LL_ASSERT(!err);
   1d00e:	b9c0      	cbnz	r0, 1d042 <perform_lll_reset+0x42>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   1d010:	f009 f8cc 	bl	261ac <lll_conn_reset>
	LL_ASSERT(!err);
   1d014:	bb30      	cbnz	r0, 1d064 <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
   1d016:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   1d018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d01c:	f00d bb36 	b.w	2a68c <z_impl_k_sem_give>
	LL_ASSERT(!err);
   1d020:	4a19      	ldr	r2, [pc, #100]	; (1d088 <perform_lll_reset+0x88>)
   1d022:	491a      	ldr	r1, [pc, #104]	; (1d08c <perform_lll_reset+0x8c>)
   1d024:	481a      	ldr	r0, [pc, #104]	; (1d090 <perform_lll_reset+0x90>)
   1d026:	f640 034f 	movw	r3, #2127	; 0x84f
   1d02a:	f00e ffcc 	bl	2bfc6 <assert_print>
   1d02e:	4040      	eors	r0, r0
   1d030:	f380 8811 	msr	BASEPRI, r0
   1d034:	f04f 0003 	mov.w	r0, #3
   1d038:	df02      	svc	2
	err = lll_adv_reset();
   1d03a:	f008 fc07 	bl	2584c <lll_adv_reset>
	LL_ASSERT(!err);
   1d03e:	2800      	cmp	r0, #0
   1d040:	d0e6      	beq.n	1d010 <perform_lll_reset+0x10>
   1d042:	4a11      	ldr	r2, [pc, #68]	; (1d088 <perform_lll_reset+0x88>)
   1d044:	4911      	ldr	r1, [pc, #68]	; (1d08c <perform_lll_reset+0x8c>)
   1d046:	4812      	ldr	r0, [pc, #72]	; (1d090 <perform_lll_reset+0x90>)
   1d048:	f640 0354 	movw	r3, #2132	; 0x854
   1d04c:	f00e ffbb 	bl	2bfc6 <assert_print>
   1d050:	4040      	eors	r0, r0
   1d052:	f380 8811 	msr	BASEPRI, r0
   1d056:	f04f 0003 	mov.w	r0, #3
   1d05a:	df02      	svc	2
	err = lll_conn_reset();
   1d05c:	f009 f8a6 	bl	261ac <lll_conn_reset>
	LL_ASSERT(!err);
   1d060:	2800      	cmp	r0, #0
   1d062:	d0d8      	beq.n	1d016 <perform_lll_reset+0x16>
   1d064:	4a08      	ldr	r2, [pc, #32]	; (1d088 <perform_lll_reset+0x88>)
   1d066:	4909      	ldr	r1, [pc, #36]	; (1d08c <perform_lll_reset+0x8c>)
   1d068:	4809      	ldr	r0, [pc, #36]	; (1d090 <perform_lll_reset+0x90>)
   1d06a:	f44f 6306 	mov.w	r3, #2144	; 0x860
   1d06e:	f00e ffaa 	bl	2bfc6 <assert_print>
   1d072:	4040      	eors	r0, r0
   1d074:	f380 8811 	msr	BASEPRI, r0
   1d078:	f04f 0003 	mov.w	r0, #3
   1d07c:	df02      	svc	2
   1d07e:	4620      	mov	r0, r4
}
   1d080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d084:	f00d bb02 	b.w	2a68c <z_impl_k_sem_give>
   1d088:	000332c4 	.word	0x000332c4
   1d08c:	00033300 	.word	0x00033300
   1d090:	00032fc4 	.word	0x00032fc4

0001d094 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   1d094:	6008      	str	r0, [r1, #0]
   1d096:	4801      	ldr	r0, [pc, #4]	; (1d09c <ull_ticker_status_give+0x8>)
   1d098:	f00d baf8 	b.w	2a68c <z_impl_k_sem_give>
   1d09c:	2000240c 	.word	0x2000240c

0001d0a0 <disabled_cb>:
   1d0a0:	f00d baf4 	b.w	2a68c <z_impl_k_sem_give>

0001d0a4 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   1d0a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   1d0a8:	4d2c      	ldr	r5, [pc, #176]	; (1d15c <tx_cmplt_get+0xb8>)
{
   1d0aa:	460c      	mov	r4, r1
   1d0ac:	4691      	mov	r9, r2
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   1d0ae:	78a9      	ldrb	r1, [r5, #2]
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   1d0b0:	7822      	ldrb	r2, [r4, #0]
   1d0b2:	782b      	ldrb	r3, [r5, #0]
   1d0b4:	4291      	cmp	r1, r2
   1d0b6:	bf9c      	itt	ls
   1d0b8:	792a      	ldrbls	r2, [r5, #4]
		*idx = first;
   1d0ba:	7022      	strbls	r2, [r4, #0]
	}

	if (*idx == last) {
   1d0bc:	454a      	cmp	r2, r9
{
   1d0be:	4682      	mov	sl, r0
   1d0c0:	d042      	beq.n	1d148 <tx_cmplt_get+0xa4>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   1d0c2:	fb12 f303 	smulbb	r3, r2, r3
	i = *idx + 1;
   1d0c6:	3201      	adds	r2, #1
   1d0c8:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
   1d0ca:	4f25      	ldr	r7, [pc, #148]	; (1d160 <tx_cmplt_get+0xbc>)
		i = 0U;
   1d0cc:	4291      	cmp	r1, r2
   1d0ce:	bf08      	it	eq
   1d0d0:	2200      	moveq	r2, #0

	*idx = i;
   1d0d2:	7022      	strb	r2, [r4, #0]
				    first);
	if (!tx) {
		return 0;
	}

	*handle = tx->handle;
   1d0d4:	5afa      	ldrh	r2, [r7, r3]
   1d0d6:	8002      	strh	r2, [r0, #0]
	cmplt = 0U;
   1d0d8:	2600      	movs	r6, #0
	p = (void *)(fifo + (*idx) * size);
   1d0da:	443b      	add	r3, r7
   1d0dc:	f04f 0b01 	mov.w	fp, #1
   1d0e0:	f04f 0802 	mov.w	r8, #2
   1d0e4:	e021      	b.n	1d12a <tx_cmplt_get+0x86>
		struct node_tx *node_tx;
		struct pdu_data *p;

		node_tx = tx->node;
		p = (void *)node_tx->pdu;
		if (!node_tx || (node_tx == (void *)1) ||
   1d0e6:	b362      	cbz	r2, 1d142 <tx_cmplt_get+0x9e>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   1d0e8:	7902      	ldrb	r2, [r0, #4]
   1d0ea:	f002 0203 	and.w	r2, r2, #3
		    (((uint32_t)node_tx & ~3) &&
   1d0ee:	3a01      	subs	r2, #1
   1d0f0:	2a01      	cmp	r2, #1
   1d0f2:	d92d      	bls.n	1d150 <tx_cmplt_get+0xac>
   1d0f4:	f8c3 8004 	str.w	r8, [r3, #4]
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
			ll_tx_mem_release(node_tx);
   1d0f8:	f002 fc98 	bl	1fa2c <ll_tx_mem_release>
	if (*idx >= count) {
   1d0fc:	7823      	ldrb	r3, [r4, #0]
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   1d0fe:	78a9      	ldrb	r1, [r5, #2]
   1d100:	7828      	ldrb	r0, [r5, #0]
   1d102:	4299      	cmp	r1, r3
   1d104:	bf9c      	itt	ls
   1d106:	792b      	ldrbls	r3, [r5, #4]
		*idx = first;
   1d108:	7023      	strbls	r3, [r4, #0]
	if (*idx == last) {
   1d10a:	4599      	cmp	r9, r3
   1d10c:	d01d      	beq.n	1d14a <tx_cmplt_get+0xa6>
	i = *idx + 1;
   1d10e:	1c5a      	adds	r2, r3, #1
   1d110:	b2d2      	uxtb	r2, r2
		i = 0U;
   1d112:	4291      	cmp	r1, r2
   1d114:	bf08      	it	eq
   1d116:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
   1d118:	fb13 f300 	smulbb	r3, r3, r0
	*idx = i;
   1d11c:	7022      	strb	r2, [r4, #0]
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
   1d11e:	5af9      	ldrh	r1, [r7, r3]
   1d120:	f8ba 2000 	ldrh.w	r2, [sl]
   1d124:	4291      	cmp	r1, r2
	p = (void *)(fifo + (*idx) * size);
   1d126:	443b      	add	r3, r7
   1d128:	d10f      	bne.n	1d14a <tx_cmplt_get+0xa6>
		node_tx = tx->node;
   1d12a:	6858      	ldr	r0, [r3, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   1d12c:	2801      	cmp	r0, #1
		    (((uint32_t)node_tx & ~3) &&
   1d12e:	f020 0203 	bic.w	r2, r0, #3
		if (!node_tx || (node_tx == (void *)1) ||
   1d132:	d8d8      	bhi.n	1d0e6 <tx_cmplt_get+0x42>
			cmplt++;
   1d134:	3601      	adds	r6, #1
   1d136:	b2f6      	uxtb	r6, r6
   1d138:	f8c3 b004 	str.w	fp, [r3, #4]
		if (((uint32_t)node_tx & ~3)) {
   1d13c:	2a00      	cmp	r2, #0
   1d13e:	d0dd      	beq.n	1d0fc <tx_cmplt_get+0x58>
   1d140:	e7da      	b.n	1d0f8 <tx_cmplt_get+0x54>
   1d142:	f8c3 8004 	str.w	r8, [r3, #4]
   1d146:	e7d9      	b.n	1d0fc <tx_cmplt_get+0x58>
		return 0;
   1d148:	2600      	movs	r6, #0

	return cmplt;
}
   1d14a:	4630      	mov	r0, r6
   1d14c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
   1d150:	3601      	adds	r6, #1
   1d152:	f8c3 b004 	str.w	fp, [r3, #4]
   1d156:	b2f6      	uxtb	r6, r6
		if (((uint32_t)node_tx & ~3)) {
   1d158:	e7ce      	b.n	1d0f8 <tx_cmplt_get+0x54>
   1d15a:	bf00      	nop
   1d15c:	20000604 	.word	0x20000604
   1d160:	2000060c 	.word	0x2000060c

0001d164 <rx_replenish>:
{
   1d164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (max > mem_link_rx.quota_pdu) {
   1d168:	4f34      	ldr	r7, [pc, #208]	; (1d23c <rx_replenish+0xd8>)
   1d16a:	883b      	ldrh	r3, [r7, #0]
   1d16c:	4298      	cmp	r0, r3
   1d16e:	d95c      	bls.n	1d22a <rx_replenish+0xc6>
		max = mem_link_rx.quota_pdu;
   1d170:	b2de      	uxtb	r6, r3
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1d172:	b34b      	cbz	r3, 1d1c8 <rx_replenish+0x64>
   1d174:	4d32      	ldr	r5, [pc, #200]	; (1d240 <rx_replenish+0xdc>)
		link = mem_acquire(&mem_link_rx.free);
   1d176:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 1d244 <rx_replenish+0xe0>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1d17a:	796c      	ldrb	r4, [r5, #5]
		rx = mem_acquire(&mem_pdu_rx.free);
   1d17c:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 1d248 <rx_replenish+0xe4>
	if (last == count) {
   1d180:	78aa      	ldrb	r2, [r5, #2]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1d182:	792b      	ldrb	r3, [r5, #4]
	last = last + 1;
   1d184:	3401      	adds	r4, #1
   1d186:	b2e4      	uxtb	r4, r4
		last = 0U;
   1d188:	42a2      	cmp	r2, r4
   1d18a:	bf08      	it	eq
   1d18c:	2400      	moveq	r4, #0
	if (last == first) {
   1d18e:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
   1d190:	4640      	mov	r0, r8
   1d192:	d01b      	beq.n	1d1cc <rx_replenish+0x68>
   1d194:	f7fc ffe0 	bl	1a158 <mem_acquire>
   1d198:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   1d19a:	4648      	mov	r0, r9
		if (!link) {
   1d19c:	f1ba 0f00 	cmp.w	sl, #0
   1d1a0:	d012      	beq.n	1d1c8 <rx_replenish+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
   1d1a2:	f7fc ffd9 	bl	1a158 <mem_acquire>
		if (!rx) {
   1d1a6:	2800      	cmp	r0, #0
   1d1a8:	d041      	beq.n	1d22e <rx_replenish+0xca>
		rx->link = link;
   1d1aa:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1d1ae:	796a      	ldrb	r2, [r5, #5]
   1d1b0:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1d1b2:	fb02 5303 	mla	r3, r2, r3, r5
   1d1b6:	6098      	str	r0, [r3, #8]
	mem_link_rx.quota_pdu += delta;
   1d1b8:	883b      	ldrh	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   1d1ba:	716c      	strb	r4, [r5, #5]
		max--;
   1d1bc:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
   1d1be:	3b01      	subs	r3, #1
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1d1c0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   1d1c4:	803b      	strh	r3, [r7, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1d1c6:	d1db      	bne.n	1d180 <rx_replenish+0x1c>
}
   1d1c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while (mem_link_rx.quota_pdu &&
   1d1cc:	883b      	ldrh	r3, [r7, #0]
   1d1ce:	2b00      	cmp	r3, #0
   1d1d0:	d0fa      	beq.n	1d1c8 <rx_replenish+0x64>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   1d1d2:	4d1e      	ldr	r5, [pc, #120]	; (1d24c <rx_replenish+0xe8>)
		link = mem_acquire(&mem_link_rx.free);
   1d1d4:	4e1b      	ldr	r6, [pc, #108]	; (1d244 <rx_replenish+0xe0>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   1d1d6:	796c      	ldrb	r4, [r5, #5]
		rx = mem_acquire(&mem_pdu_rx.free);
   1d1d8:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1d248 <rx_replenish+0xe4>
		link->mem = NULL;
   1d1dc:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
   1d1e0:	78aa      	ldrb	r2, [r5, #2]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   1d1e2:	792b      	ldrb	r3, [r5, #4]
	last = last + 1;
   1d1e4:	3401      	adds	r4, #1
   1d1e6:	b2e4      	uxtb	r4, r4
		last = 0U;
   1d1e8:	42a2      	cmp	r2, r4
   1d1ea:	bf08      	it	eq
   1d1ec:	2400      	moveq	r4, #0
	if (last == first) {
   1d1ee:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
   1d1f0:	4630      	mov	r0, r6
   1d1f2:	d0e9      	beq.n	1d1c8 <rx_replenish+0x64>
   1d1f4:	f7fc ffb0 	bl	1a158 <mem_acquire>
   1d1f8:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   1d1fa:	4640      	mov	r0, r8
		if (!link) {
   1d1fc:	f1ba 0f00 	cmp.w	sl, #0
   1d200:	d0e2      	beq.n	1d1c8 <rx_replenish+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
   1d202:	f7fc ffa9 	bl	1a158 <mem_acquire>
		if (!rx) {
   1d206:	b190      	cbz	r0, 1d22e <rx_replenish+0xca>
		link->mem = NULL;
   1d208:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
   1d20c:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1d210:	796a      	ldrb	r2, [r5, #5]
   1d212:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1d214:	fb02 5303 	mla	r3, r2, r3, r5
   1d218:	6098      	str	r0, [r3, #8]
	mem_link_rx.quota_pdu += delta;
   1d21a:	883b      	ldrh	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   1d21c:	716c      	strb	r4, [r5, #5]
   1d21e:	3b01      	subs	r3, #1
   1d220:	b29b      	uxth	r3, r3
   1d222:	803b      	strh	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
   1d224:	2b00      	cmp	r3, #0
   1d226:	d1db      	bne.n	1d1e0 <rx_replenish+0x7c>
   1d228:	e7ce      	b.n	1d1c8 <rx_replenish+0x64>
   1d22a:	4606      	mov	r6, r0
   1d22c:	e7a2      	b.n	1d174 <rx_replenish+0x10>
	mem_release(link, &mem_link_rx.free);
   1d22e:	4650      	mov	r0, sl
   1d230:	4904      	ldr	r1, [pc, #16]	; (1d244 <rx_replenish+0xe0>)
}
   1d232:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	mem_release(link, &mem_link_rx.free);
   1d236:	f7fc bfa9 	b.w	1a18c <mem_release>
   1d23a:	bf00      	nop
   1d23c:	200021c0 	.word	0x200021c0
   1d240:	200004e0 	.word	0x200004e0
   1d244:	200021c4 	.word	0x200021c4
   1d248:	20002210 	.word	0x20002210
   1d24c:	200004d0 	.word	0x200004d0

0001d250 <ull_done>:
}
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
   1d250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d254:	4e3c      	ldr	r6, [pc, #240]	; (1d348 <ull_done+0xf8>)
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
	if (ull_hdr) {
		LL_ASSERT(ull_ref_get(ull_hdr));
   1d256:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1d34c <ull_done+0xfc>
   1d25a:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1d350 <ull_done+0x100>
{
   1d25e:	b083      	sub	sp, #12
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   1d260:	e9d6 0100 	ldrd	r0, r1, [r6]
   1d264:	aa01      	add	r2, sp, #4
   1d266:	f7fc ffe5 	bl	1a234 <memq_peek>
		if (link) {
   1d26a:	4604      	mov	r4, r0
   1d26c:	2800      	cmp	r0, #0
   1d26e:	d03e      	beq.n	1d2ee <ull_done+0x9e>
			(void)memq_dequeue(memq_ull_done.tail,
   1d270:	6870      	ldr	r0, [r6, #4]
   1d272:	2200      	movs	r2, #0
   1d274:	4631      	mov	r1, r6
   1d276:	f7fc ffe5 	bl	1a244 <memq_dequeue>
			rx_demux_event_done(link, done);
   1d27a:	9f01      	ldr	r7, [sp, #4]
	ull_hdr = done->param;
   1d27c:	69fd      	ldr	r5, [r7, #28]
	if (ull_hdr) {
   1d27e:	b135      	cbz	r5, 1d28e <ull_done+0x3e>
	return hdr->ref;
   1d280:	782b      	ldrb	r3, [r5, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
   1d282:	2b00      	cmp	r3, #0
   1d284:	d052      	beq.n	1d32c <ull_done+0xdc>
	return hdr->ref--;
   1d286:	782b      	ldrb	r3, [r5, #0]
   1d288:	3b01      	subs	r3, #1
   1d28a:	b2db      	uxtb	r3, r3
   1d28c:	702b      	strb	r3, [r5, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
   1d28e:	f897 3020 	ldrb.w	r3, [r7, #32]
   1d292:	b123      	cbz	r3, 1d29e <ull_done+0x4e>
   1d294:	2b01      	cmp	r3, #1
   1d296:	d13b      	bne.n	1d310 <ull_done+0xc0>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
   1d298:	4638      	mov	r0, r7
   1d29a:	f005 fe05 	bl	22ea8 <ull_conn_done>
		break;
	}

	/* Release done */
	done->extra.type = 0U;
	release = RXFIFO_RELEASE(done, link, done);
   1d29e:	4a2d      	ldr	r2, [pc, #180]	; (1d354 <ull_done+0x104>)
	last = last + 1;
   1d2a0:	7953      	ldrb	r3, [r2, #5]
	if (last == count) {
   1d2a2:	f892 c002 	ldrb.w	ip, [r2, #2]
   1d2a6:	7910      	ldrb	r0, [r2, #4]
	last = last + 1;
   1d2a8:	3301      	adds	r3, #1
	done->extra.type = 0U;
   1d2aa:	2100      	movs	r1, #0
   1d2ac:	b2db      	uxtb	r3, r3
		last = 0U;
   1d2ae:	459c      	cmp	ip, r3
   1d2b0:	bf08      	it	eq
   1d2b2:	460b      	moveq	r3, r1
	if (last == first) {
   1d2b4:	4298      	cmp	r0, r3
   1d2b6:	f887 1020 	strb.w	r1, [r7, #32]
	release = RXFIFO_RELEASE(done, link, done);
   1d2ba:	7811      	ldrb	r1, [r2, #0]
   1d2bc:	d01a      	beq.n	1d2f4 <ull_done+0xa4>

	if (!mfifo_enqueue_idx_get(n, f, *l, &idx)) {
		return NULL;
	}

	rx->link = link;
   1d2be:	603c      	str	r4, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1d2c0:	7950      	ldrb	r0, [r2, #5]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1d2c2:	fb00 2101 	mla	r1, r0, r1, r2
   1d2c6:	608f      	str	r7, [r1, #8]
	*last = idx; /* Commit: Update write index */
   1d2c8:	7153      	strb	r3, [r2, #5]
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   1d2ca:	2d00      	cmp	r5, #0
   1d2cc:	d0c8      	beq.n	1d260 <ull_done+0x10>
	return hdr->ref;
   1d2ce:	782b      	ldrb	r3, [r5, #0]
   1d2d0:	2b00      	cmp	r3, #0
   1d2d2:	d1c5      	bne.n	1d260 <ull_done+0x10>
   1d2d4:	696b      	ldr	r3, [r5, #20]
   1d2d6:	2b00      	cmp	r3, #0
   1d2d8:	d0c2      	beq.n	1d260 <ull_done+0x10>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   1d2da:	69a8      	ldr	r0, [r5, #24]
   1d2dc:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   1d2de:	e9d6 0100 	ldrd	r0, r1, [r6]
   1d2e2:	aa01      	add	r2, sp, #4
   1d2e4:	f7fc ffa6 	bl	1a234 <memq_peek>
		if (link) {
   1d2e8:	4604      	mov	r4, r0
   1d2ea:	2800      	cmp	r0, #0
   1d2ec:	d1c0      	bne.n	1d270 <ull_done+0x20>
}
   1d2ee:	b003      	add	sp, #12
   1d2f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(release == done);
   1d2f4:	4918      	ldr	r1, [pc, #96]	; (1d358 <ull_done+0x108>)
   1d2f6:	4819      	ldr	r0, [pc, #100]	; (1d35c <ull_done+0x10c>)
   1d2f8:	f44f 632c 	mov.w	r3, #2752	; 0xac0
   1d2fc:	4642      	mov	r2, r8
   1d2fe:	f00e fe62 	bl	2bfc6 <assert_print>
   1d302:	4040      	eors	r0, r0
   1d304:	f380 8811 	msr	BASEPRI, r0
   1d308:	f04f 0003 	mov.w	r0, #3
   1d30c:	df02      	svc	2
   1d30e:	e7dc      	b.n	1d2ca <ull_done+0x7a>
		LL_ASSERT(0);
   1d310:	4913      	ldr	r1, [pc, #76]	; (1d360 <ull_done+0x110>)
   1d312:	4812      	ldr	r0, [pc, #72]	; (1d35c <ull_done+0x10c>)
   1d314:	f640 23b9 	movw	r3, #2745	; 0xab9
   1d318:	4642      	mov	r2, r8
   1d31a:	f00e fe54 	bl	2bfc6 <assert_print>
   1d31e:	4040      	eors	r0, r0
   1d320:	f380 8811 	msr	BASEPRI, r0
   1d324:	f04f 0003 	mov.w	r0, #3
   1d328:	df02      	svc	2
		break;
   1d32a:	e7b8      	b.n	1d29e <ull_done+0x4e>
		LL_ASSERT(ull_ref_get(ull_hdr));
   1d32c:	480b      	ldr	r0, [pc, #44]	; (1d35c <ull_done+0x10c>)
   1d32e:	f640 2362 	movw	r3, #2658	; 0xa62
   1d332:	4642      	mov	r2, r8
   1d334:	4649      	mov	r1, r9
   1d336:	f00e fe46 	bl	2bfc6 <assert_print>
   1d33a:	4040      	eors	r0, r0
   1d33c:	f380 8811 	msr	BASEPRI, r0
   1d340:	f04f 0003 	mov.w	r0, #3
   1d344:	df02      	svc	2
   1d346:	e79e      	b.n	1d286 <ull_done+0x36>
   1d348:	200023f8 	.word	0x200023f8
   1d34c:	000332c4 	.word	0x000332c4
   1d350:	00033308 	.word	0x00033308
   1d354:	200004b4 	.word	0x200004b4
   1d358:	00033320 	.word	0x00033320
   1d35c:	00032fc4 	.word	0x00032fc4
   1d360:	0003305c 	.word	0x0003305c

0001d364 <rx_demux>:
{
   1d364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d368:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 1d518 <rx_demux+0x1b4>
	k_sem_give(sem_recv);
   1d36c:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 1d51c <rx_demux+0x1b8>
		LL_ASSERT(0);
   1d370:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 1d520 <rx_demux+0x1bc>
   1d374:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 1d524 <rx_demux+0x1c0>
{
   1d378:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   1d37a:	e9d8 0100 	ldrd	r0, r1, [r8]
   1d37e:	aa03      	add	r2, sp, #12
   1d380:	f7fc ff58 	bl	1a234 <memq_peek>
		if (link) {
   1d384:	4605      	mov	r5, r0
   1d386:	2800      	cmp	r0, #0
   1d388:	d035      	beq.n	1d3f6 <rx_demux+0x92>
			LL_ASSERT(rx);
   1d38a:	9b03      	ldr	r3, [sp, #12]
   1d38c:	2b00      	cmp	r3, #0
   1d38e:	f000 80a6 	beq.w	1d4de <rx_demux+0x17a>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   1d392:	7818      	ldrb	r0, [r3, #0]
   1d394:	aa04      	add	r2, sp, #16
   1d396:	a902      	add	r1, sp, #8
   1d398:	f006 f83c 	bl	23414 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   1d39c:	4604      	mov	r4, r0
   1d39e:	2800      	cmp	r0, #0
   1d3a0:	d055      	beq.n	1d44e <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   1d3a2:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   1d3a6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   1d3aa:	780f      	ldrb	r7, [r1, #0]
   1d3ac:	f8ad 200a 	strh.w	r2, [sp, #10]
   1d3b0:	ae05      	add	r6, sp, #20
   1d3b2:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   1d3b4:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   1d3b8:	f006 f846 	bl	23448 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   1d3bc:	4621      	mov	r1, r4
   1d3be:	9a05      	ldr	r2, [sp, #20]
   1d3c0:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   1d3c4:	f006 f88a 	bl	234dc <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   1d3c8:	4620      	mov	r0, r4
   1d3ca:	f005 fffb 	bl	233c4 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   1d3ce:	4632      	mov	r2, r6
   1d3d0:	4629      	mov	r1, r5
   1d3d2:	4638      	mov	r0, r7
   1d3d4:	f006 f81e 	bl	23414 <ull_conn_ack_by_last_peek>
	} while (link);
   1d3d8:	4604      	mov	r4, r0
   1d3da:	2800      	cmp	r0, #0
   1d3dc:	d1ec      	bne.n	1d3b8 <rx_demux+0x54>
	k_sem_give(sem_recv);
   1d3de:	f8d9 0000 	ldr.w	r0, [r9]
   1d3e2:	f00d f953 	bl	2a68c <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   1d3e6:	e9d8 0100 	ldrd	r0, r1, [r8]
   1d3ea:	aa03      	add	r2, sp, #12
   1d3ec:	f7fc ff22 	bl	1a234 <memq_peek>
		if (link) {
   1d3f0:	4605      	mov	r5, r0
   1d3f2:	2800      	cmp	r0, #0
   1d3f4:	d1c9      	bne.n	1d38a <rx_demux+0x26>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   1d3f6:	aa04      	add	r2, sp, #16
   1d3f8:	a902      	add	r1, sp, #8
   1d3fa:	f10d 0007 	add.w	r0, sp, #7
   1d3fe:	f005 ffed 	bl	233dc <ull_conn_ack_peek>
			if (link) {
   1d402:	4604      	mov	r4, r0
   1d404:	2800      	cmp	r0, #0
   1d406:	d067      	beq.n	1d4d8 <rx_demux+0x174>
				rx_demux_conn_tx_ack(ack_last, handle,
   1d408:	9b04      	ldr	r3, [sp, #16]
   1d40a:	9305      	str	r3, [sp, #20]
   1d40c:	f89d 7007 	ldrb.w	r7, [sp, #7]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   1d410:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1d414:	f8ad 300a 	strh.w	r3, [sp, #10]
   1d418:	ae05      	add	r6, sp, #20
   1d41a:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   1d41e:	f006 f813 	bl	23448 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   1d422:	4621      	mov	r1, r4
   1d424:	9a05      	ldr	r2, [sp, #20]
   1d426:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   1d42a:	f006 f857 	bl	234dc <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   1d42e:	4620      	mov	r0, r4
   1d430:	f005 ffc8 	bl	233c4 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   1d434:	4632      	mov	r2, r6
   1d436:	4629      	mov	r1, r5
   1d438:	4638      	mov	r0, r7
   1d43a:	f005 ffeb 	bl	23414 <ull_conn_ack_by_last_peek>
	} while (link);
   1d43e:	4604      	mov	r4, r0
   1d440:	2800      	cmp	r0, #0
   1d442:	d1ec      	bne.n	1d41e <rx_demux+0xba>
	k_sem_give(sem_recv);
   1d444:	f8d9 0000 	ldr.w	r0, [r9]
   1d448:	f00d f920 	bl	2a68c <z_impl_k_sem_give>
			if (nack) {
   1d44c:	e7cb      	b.n	1d3e6 <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
   1d44e:	9b03      	ldr	r3, [sp, #12]
   1d450:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   1d452:	791b      	ldrb	r3, [r3, #4]
   1d454:	3b01      	subs	r3, #1
   1d456:	2b17      	cmp	r3, #23
   1d458:	d80d      	bhi.n	1d476 <rx_demux+0x112>
   1d45a:	e8df f003 	tbb	[pc, r3]
   1d45e:	0c1a      	.short	0x0c1a
   1d460:	0c0c0c38 	.word	0x0c0c0c38
   1d464:	0c0c0c0c 	.word	0x0c0c0c0c
   1d468:	0c0c0c0c 	.word	0x0c0c0c0c
   1d46c:	0c0c0c0c 	.word	0x0c0c0c0c
   1d470:	0c0c0c0c 	.word	0x0c0c0c0c
   1d474:	1a2d      	.short	0x1a2d
		LL_ASSERT(0);
   1d476:	482c      	ldr	r0, [pc, #176]	; (1d528 <rx_demux+0x1c4>)
   1d478:	f640 234f 	movw	r3, #2639	; 0xa4f
   1d47c:	4652      	mov	r2, sl
   1d47e:	4659      	mov	r1, fp
   1d480:	f00e fda1 	bl	2bfc6 <assert_print>
   1d484:	4040      	eors	r0, r0
   1d486:	f380 8811 	msr	BASEPRI, r0
   1d48a:	f04f 0003 	mov.w	r0, #3
   1d48e:	df02      	svc	2
			if (nack) {
   1d490:	e773      	b.n	1d37a <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   1d492:	4921      	ldr	r1, [pc, #132]	; (1d518 <rx_demux+0x1b4>)
   1d494:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1d498:	2200      	movs	r2, #0
   1d49a:	f7fc fed3 	bl	1a244 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1d49e:	4b23      	ldr	r3, [pc, #140]	; (1d52c <rx_demux+0x1c8>)
		ll_rx_put(link, rx);
   1d4a0:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1d4a2:	795b      	ldrb	r3, [r3, #5]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1d4a4:	4628      	mov	r0, r5
   1d4a6:	4a22      	ldr	r2, [pc, #136]	; (1d530 <rx_demux+0x1cc>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1d4a8:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1d4aa:	f7fc feb9 	bl	1a220 <memq_enqueue>
	k_sem_give(sem_recv);
   1d4ae:	f8d9 0000 	ldr.w	r0, [r9]
   1d4b2:	f00d f8eb 	bl	2a68c <z_impl_k_sem_give>
			if (nack) {
   1d4b6:	e796      	b.n	1d3e6 <rx_demux+0x82>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   1d4b8:	4917      	ldr	r1, [pc, #92]	; (1d518 <rx_demux+0x1b4>)
   1d4ba:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1d4be:	2200      	movs	r2, #0
   1d4c0:	f7fc fec0 	bl	1a244 <memq_dequeue>
		ull_conn_setup(link, rx);
   1d4c4:	9905      	ldr	r1, [sp, #20]
   1d4c6:	4628      	mov	r0, r5
   1d4c8:	f002 fdda 	bl	20080 <ull_conn_setup>
			if (nack) {
   1d4cc:	e755      	b.n	1d37a <rx_demux+0x16>
		nack = ull_conn_rx(link, (void *)&rx);
   1d4ce:	a905      	add	r1, sp, #20
   1d4d0:	4628      	mov	r0, r5
   1d4d2:	f002 fdfd 	bl	200d0 <ull_conn_rx>
		if (nack) {
   1d4d6:	b188      	cbz	r0, 1d4fc <rx_demux+0x198>
}
   1d4d8:	b007      	add	sp, #28
   1d4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
   1d4de:	4915      	ldr	r1, [pc, #84]	; (1d534 <rx_demux+0x1d0>)
   1d4e0:	4811      	ldr	r0, [pc, #68]	; (1d528 <rx_demux+0x1c4>)
   1d4e2:	f640 03fd 	movw	r3, #2301	; 0x8fd
   1d4e6:	4652      	mov	r2, sl
   1d4e8:	f00e fd6d 	bl	2bfc6 <assert_print>
   1d4ec:	4040      	eors	r0, r0
   1d4ee:	f380 8811 	msr	BASEPRI, r0
   1d4f2:	f04f 0003 	mov.w	r0, #3
   1d4f6:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   1d4f8:	9b03      	ldr	r3, [sp, #12]
   1d4fa:	e74a      	b.n	1d392 <rx_demux+0x2e>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   1d4fc:	4906      	ldr	r1, [pc, #24]	; (1d518 <rx_demux+0x1b4>)
   1d4fe:	4602      	mov	r2, r0
   1d500:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1d504:	f7fc fe9e 	bl	1a244 <memq_dequeue>
		if (rx) {
   1d508:	9905      	ldr	r1, [sp, #20]
   1d50a:	2900      	cmp	r1, #0
   1d50c:	f43f af35 	beq.w	1d37a <rx_demux+0x16>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1d510:	4b06      	ldr	r3, [pc, #24]	; (1d52c <rx_demux+0x1c8>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1d512:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1d514:	795b      	ldrb	r3, [r3, #5]
   1d516:	e7c6      	b.n	1d4a6 <rx_demux+0x142>
   1d518:	20002400 	.word	0x20002400
   1d51c:	20002408 	.word	0x20002408
   1d520:	000332c4 	.word	0x000332c4
   1d524:	0003305c 	.word	0x0003305c
   1d528:	00032fc4 	.word	0x00032fc4
   1d52c:	20000604 	.word	0x20000604
   1d530:	200023f4 	.word	0x200023f4
   1d534:	00033330 	.word	0x00033330

0001d538 <ll_rx_get>:
{
   1d538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d53c:	4c31      	ldr	r4, [pc, #196]	; (1d604 <ll_rx_get+0xcc>)
	mem_release(link, &mem_link_rx.free);
   1d53e:	4f32      	ldr	r7, [pc, #200]	; (1d608 <ll_rx_get+0xd0>)
   1d540:	4e32      	ldr	r6, [pc, #200]	; (1d60c <ll_rx_get+0xd4>)
{
   1d542:	b085      	sub	sp, #20
   1d544:	4689      	mov	r9, r1
   1d546:	9001      	str	r0, [sp, #4]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   1d548:	f104 0a04 	add.w	sl, r4, #4
	mem_release(link, &mem_link_rx.free);
   1d54c:	f107 0b04 	add.w	fp, r7, #4
	*node_rx = NULL;
   1d550:	9a01      	ldr	r2, [sp, #4]
   1d552:	2300      	movs	r3, #0
   1d554:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   1d556:	e9d6 0100 	ldrd	r0, r1, [r6]
   1d55a:	aa03      	add	r2, sp, #12
   1d55c:	f7fc fe6a 	bl	1a234 <memq_peek>
	if (link) {
   1d560:	4605      	mov	r5, r0
   1d562:	2800      	cmp	r0, #0
   1d564:	d03f      	beq.n	1d5e6 <ll_rx_get+0xae>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   1d566:	9b03      	ldr	r3, [sp, #12]
   1d568:	4651      	mov	r1, sl
   1d56a:	781a      	ldrb	r2, [r3, #0]
   1d56c:	4648      	mov	r0, r9
   1d56e:	f7ff fd99 	bl	1d0a4 <tx_cmplt_get>
		if (!cmplt) {
   1d572:	2800      	cmp	r0, #0
   1d574:	d13c      	bne.n	1d5f0 <ll_rx_get+0xb8>
			f = mfifo_tx_ack.f;
   1d576:	7923      	ldrb	r3, [r4, #4]
   1d578:	f88d 3009 	strb.w	r3, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   1d57c:	7962      	ldrb	r2, [r4, #5]
   1d57e:	4680      	mov	r8, r0
   1d580:	f10d 0109 	add.w	r1, sp, #9
   1d584:	f10d 000a 	add.w	r0, sp, #10
   1d588:	f7ff fd8c 	bl	1d0a4 <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
   1d58c:	ea48 0200 	orr.w	r2, r8, r0
   1d590:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   1d594:	d1f2      	bne.n	1d57c <ll_rx_get+0x44>
			} else if (rx->type == NODE_RX_TYPE_RELEASE) {
   1d596:	9b03      	ldr	r3, [sp, #12]
   1d598:	7919      	ldrb	r1, [r3, #4]
   1d59a:	2901      	cmp	r1, #1
   1d59c:	d12b      	bne.n	1d5f6 <ll_rx_get+0xbe>
	(void)memq_dequeue(memq_ll_rx.tail,
   1d59e:	491b      	ldr	r1, [pc, #108]	; (1d60c <ll_rx_get+0xd4>)
   1d5a0:	6870      	ldr	r0, [r6, #4]
   1d5a2:	f7fc fe4f 	bl	1a244 <memq_dequeue>
	mem_release(link, &mem_link_rx.free);
   1d5a6:	4659      	mov	r1, fp
   1d5a8:	4628      	mov	r0, r5
   1d5aa:	f7fc fdef 	bl	1a18c <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   1d5ae:	883b      	ldrh	r3, [r7, #0]
   1d5b0:	2b04      	cmp	r3, #4
   1d5b2:	d809      	bhi.n	1d5c8 <ll_rx_get+0x90>
	mem_release(node_rx, &mem_pdu_rx.free);
   1d5b4:	9803      	ldr	r0, [sp, #12]
   1d5b6:	4916      	ldr	r1, [pc, #88]	; (1d610 <ll_rx_get+0xd8>)
	mem_link_rx.quota_pdu += delta;
   1d5b8:	3301      	adds	r3, #1
   1d5ba:	803b      	strh	r3, [r7, #0]
	mem_release(node_rx, &mem_pdu_rx.free);
   1d5bc:	f7fc fde6 	bl	1a18c <mem_release>
	rx_replenish(1U);
   1d5c0:	2001      	movs	r0, #1
   1d5c2:	f7ff fdcf 	bl	1d164 <rx_replenish>
				goto ll_rx_get_again;
   1d5c6:	e7c3      	b.n	1d550 <ll_rx_get+0x18>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   1d5c8:	4a12      	ldr	r2, [pc, #72]	; (1d614 <ll_rx_get+0xdc>)
   1d5ca:	4913      	ldr	r1, [pc, #76]	; (1d618 <ll_rx_get+0xe0>)
   1d5cc:	4813      	ldr	r0, [pc, #76]	; (1d61c <ll_rx_get+0xe4>)
   1d5ce:	f240 6327 	movw	r3, #1575	; 0x627
   1d5d2:	f00e fcf8 	bl	2bfc6 <assert_print>
   1d5d6:	4040      	eors	r0, r0
   1d5d8:	f380 8811 	msr	BASEPRI, r0
   1d5dc:	f04f 0003 	mov.w	r0, #3
   1d5e0:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   1d5e2:	883b      	ldrh	r3, [r7, #0]
   1d5e4:	e7e6      	b.n	1d5b4 <ll_rx_get+0x7c>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   1d5e6:	7962      	ldrb	r2, [r4, #5]
   1d5e8:	490d      	ldr	r1, [pc, #52]	; (1d620 <ll_rx_get+0xe8>)
   1d5ea:	4648      	mov	r0, r9
   1d5ec:	f7ff fd5a 	bl	1d0a4 <tx_cmplt_get>
}
   1d5f0:	b005      	add	sp, #20
   1d5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*node_rx = rx;
   1d5f6:	9901      	ldr	r1, [sp, #4]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   1d5f8:	4610      	mov	r0, r2
			*node_rx = rx;
   1d5fa:	600b      	str	r3, [r1, #0]
}
   1d5fc:	b005      	add	sp, #20
   1d5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d602:	bf00      	nop
   1d604:	20000604 	.word	0x20000604
   1d608:	200021c0 	.word	0x200021c0
   1d60c:	200023f0 	.word	0x200023f0
   1d610:	20002210 	.word	0x20002210
   1d614:	000332c4 	.word	0x000332c4
   1d618:	00033334 	.word	0x00033334
   1d61c:	00032fc4 	.word	0x00032fc4
   1d620:	20000608 	.word	0x20000608

0001d624 <ll_rx_dequeue>:
{
   1d624:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   1d626:	495d      	ldr	r1, [pc, #372]	; (1d79c <ll_rx_dequeue+0x178>)
{
   1d628:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   1d62a:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   1d62c:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   1d62e:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   1d630:	aa01      	add	r2, sp, #4
   1d632:	f7fc fe07 	bl	1a244 <memq_dequeue>
	LL_ASSERT(link);
   1d636:	4604      	mov	r4, r0
   1d638:	2800      	cmp	r0, #0
   1d63a:	d063      	beq.n	1d704 <ll_rx_dequeue+0xe0>
	mem_release(link, &mem_link_rx.free);
   1d63c:	4958      	ldr	r1, [pc, #352]	; (1d7a0 <ll_rx_dequeue+0x17c>)
   1d63e:	4620      	mov	r0, r4
   1d640:	f7fc fda4 	bl	1a18c <mem_release>
	switch (rx->type) {
   1d644:	9a01      	ldr	r2, [sp, #4]
   1d646:	7913      	ldrb	r3, [r2, #4]
   1d648:	2b1d      	cmp	r3, #29
   1d64a:	d810      	bhi.n	1d66e <ll_rx_dequeue+0x4a>
   1d64c:	e8df f003 	tbb	[pc, r3]
   1d650:	1e0f0f1e 	.word	0x1e0f0f1e
   1d654:	0f0f0f0f 	.word	0x0f0f0f0f
   1d658:	0f0f0f0f 	.word	0x0f0f0f0f
   1d65c:	0f0f0f0f 	.word	0x0f0f0f0f
   1d660:	0f0f0f0f 	.word	0x0f0f0f0f
   1d664:	2f0f0f0f 	.word	0x2f0f0f0f
   1d668:	1e1e1e1e 	.word	0x1e1e1e1e
   1d66c:	1e1e      	.short	0x1e1e
		LL_ASSERT(0);
   1d66e:	4a4d      	ldr	r2, [pc, #308]	; (1d7a4 <ll_rx_dequeue+0x180>)
   1d670:	494d      	ldr	r1, [pc, #308]	; (1d7a8 <ll_rx_dequeue+0x184>)
   1d672:	484e      	ldr	r0, [pc, #312]	; (1d7ac <ll_rx_dequeue+0x188>)
   1d674:	f240 43e6 	movw	r3, #1254	; 0x4e6
   1d678:	f00e fca5 	bl	2bfc6 <assert_print>
   1d67c:	4040      	eors	r0, r0
   1d67e:	f380 8811 	msr	BASEPRI, r0
   1d682:	f04f 0003 	mov.w	r0, #3
   1d686:	df02      	svc	2
}
   1d688:	b002      	add	sp, #8
   1d68a:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   1d68c:	2b00      	cmp	r3, #0
   1d68e:	d1fb      	bne.n	1d688 <ll_rx_dequeue+0x64>
   1d690:	4a44      	ldr	r2, [pc, #272]	; (1d7a4 <ll_rx_dequeue+0x180>)
   1d692:	4947      	ldr	r1, [pc, #284]	; (1d7b0 <ll_rx_dequeue+0x18c>)
   1d694:	4845      	ldr	r0, [pc, #276]	; (1d7ac <ll_rx_dequeue+0x188>)
   1d696:	f240 43e2 	movw	r3, #1250	; 0x4e2
   1d69a:	f00e fc94 	bl	2bfc6 <assert_print>
   1d69e:	4040      	eors	r0, r0
   1d6a0:	f380 8811 	msr	BASEPRI, r0
   1d6a4:	f04f 0003 	mov.w	r0, #3
   1d6a8:	df02      	svc	2
}
   1d6aa:	b002      	add	sp, #8
   1d6ac:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   1d6ae:	7f13      	ldrb	r3, [r2, #28]
   1d6b0:	2b3c      	cmp	r3, #60	; 0x3c
   1d6b2:	d035      	beq.n	1d720 <ll_rx_dequeue+0xfc>
   1d6b4:	7f53      	ldrb	r3, [r2, #29]
   1d6b6:	b1bb      	cbz	r3, 1d6e8 <ll_rx_dequeue+0xc4>
			adv = HDR_LLL2ULL(lll);
   1d6b8:	6893      	ldr	r3, [r2, #8]
   1d6ba:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
   1d6bc:	6e60      	ldr	r0, [r4, #100]	; 0x64
   1d6be:	b120      	cbz	r0, 1d6ca <ll_rx_dequeue+0xa6>
					adv->node_rx_cc_free = NULL;
   1d6c0:	2300      	movs	r3, #0
	mem_release(node_rx, &mem_pdu_rx.free);
   1d6c2:	493c      	ldr	r1, [pc, #240]	; (1d7b4 <ll_rx_dequeue+0x190>)
					adv->node_rx_cc_free = NULL;
   1d6c4:	6663      	str	r3, [r4, #100]	; 0x64
	mem_release(node_rx, &mem_pdu_rx.free);
   1d6c6:	f7fc fd61 	bl	1a18c <mem_release>
			adv->is_enabled = 0U;
   1d6ca:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   1d6ce:	f36f 0300 	bfc	r3, #0, #1
   1d6d2:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
			      ull_adv_is_enabled(0));
   1d6d6:	2000      	movs	r0, #0
   1d6d8:	f001 fa6a 	bl	1ebb0 <ull_adv_is_enabled>
			if (!bm) {
   1d6dc:	2800      	cmp	r0, #0
   1d6de:	d1d3      	bne.n	1d688 <ll_rx_dequeue+0x64>
				ull_filter_adv_scan_state_cb(0);
   1d6e0:	f006 fe90 	bl	24404 <ull_filter_adv_scan_state_cb>
}
   1d6e4:	b002      	add	sp, #8
   1d6e6:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
   1d6e8:	4a2e      	ldr	r2, [pc, #184]	; (1d7a4 <ll_rx_dequeue+0x180>)
   1d6ea:	492f      	ldr	r1, [pc, #188]	; (1d7a8 <ll_rx_dequeue+0x184>)
   1d6ec:	482f      	ldr	r0, [pc, #188]	; (1d7ac <ll_rx_dequeue+0x188>)
   1d6ee:	f240 436f 	movw	r3, #1135	; 0x46f
   1d6f2:	f00e fc68 	bl	2bfc6 <assert_print>
   1d6f6:	4040      	eors	r0, r0
   1d6f8:	f380 8811 	msr	BASEPRI, r0
   1d6fc:	f04f 0003 	mov.w	r0, #3
   1d700:	df02      	svc	2
   1d702:	e7e8      	b.n	1d6d6 <ll_rx_dequeue+0xb2>
	LL_ASSERT(link);
   1d704:	4a27      	ldr	r2, [pc, #156]	; (1d7a4 <ll_rx_dequeue+0x180>)
   1d706:	492c      	ldr	r1, [pc, #176]	; (1d7b8 <ll_rx_dequeue+0x194>)
   1d708:	4828      	ldr	r0, [pc, #160]	; (1d7ac <ll_rx_dequeue+0x188>)
   1d70a:	f44f 736f 	mov.w	r3, #956	; 0x3bc
   1d70e:	f00e fc5a 	bl	2bfc6 <assert_print>
   1d712:	4040      	eors	r0, r0
   1d714:	f380 8811 	msr	BASEPRI, r0
   1d718:	f04f 0003 	mov.w	r0, #3
   1d71c:	df02      	svc	2
   1d71e:	e78d      	b.n	1d63c <ll_rx_dequeue+0x18>
			lll = ftr->param;
   1d720:	6896      	ldr	r6, [r2, #8]
			adv = HDR_LLL2ULL(lll);
   1d722:	e9d6 4500 	ldrd	r4, r5, [r6]
				LL_ASSERT(conn_lll);
   1d726:	b1ed      	cbz	r5, 1d764 <ll_rx_dequeue+0x140>
				LL_ASSERT(!conn_lll->link_tx_free);
   1d728:	6dab      	ldr	r3, [r5, #88]	; 0x58
				lll->conn = NULL;
   1d72a:	2200      	movs	r2, #0
   1d72c:	6072      	str	r2, [r6, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
   1d72e:	b163      	cbz	r3, 1d74a <ll_rx_dequeue+0x126>
   1d730:	4a1c      	ldr	r2, [pc, #112]	; (1d7a4 <ll_rx_dequeue+0x180>)
   1d732:	4922      	ldr	r1, [pc, #136]	; (1d7bc <ll_rx_dequeue+0x198>)
   1d734:	481d      	ldr	r0, [pc, #116]	; (1d7ac <ll_rx_dequeue+0x188>)
   1d736:	f240 4335 	movw	r3, #1077	; 0x435
   1d73a:	f00e fc44 	bl	2bfc6 <assert_print>
   1d73e:	4040      	eors	r0, r0
   1d740:	f380 8811 	msr	BASEPRI, r0
   1d744:	f04f 0003 	mov.w	r0, #3
   1d748:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   1d74a:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   1d74e:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1d752:	f7fc fd5b 	bl	1a20c <memq_deinit>
				LL_ASSERT(link);
   1d756:	4606      	mov	r6, r0
   1d758:	b190      	cbz	r0, 1d780 <ll_rx_dequeue+0x15c>
				ll_conn_release(conn);
   1d75a:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
   1d75c:	65ae      	str	r6, [r5, #88]	; 0x58
				ll_conn_release(conn);
   1d75e:	f002 f937 	bl	1f9d0 <ll_conn_release>
   1d762:	e7b2      	b.n	1d6ca <ll_rx_dequeue+0xa6>
				LL_ASSERT(conn_lll);
   1d764:	4a0f      	ldr	r2, [pc, #60]	; (1d7a4 <ll_rx_dequeue+0x180>)
   1d766:	4916      	ldr	r1, [pc, #88]	; (1d7c0 <ll_rx_dequeue+0x19c>)
   1d768:	4810      	ldr	r0, [pc, #64]	; (1d7ac <ll_rx_dequeue+0x188>)
   1d76a:	f240 4332 	movw	r3, #1074	; 0x432
   1d76e:	f00e fc2a 	bl	2bfc6 <assert_print>
   1d772:	4040      	eors	r0, r0
   1d774:	f380 8811 	msr	BASEPRI, r0
   1d778:	f04f 0003 	mov.w	r0, #3
   1d77c:	df02      	svc	2
   1d77e:	e7d3      	b.n	1d728 <ll_rx_dequeue+0x104>
				LL_ASSERT(link);
   1d780:	4a08      	ldr	r2, [pc, #32]	; (1d7a4 <ll_rx_dequeue+0x180>)
   1d782:	490d      	ldr	r1, [pc, #52]	; (1d7b8 <ll_rx_dequeue+0x194>)
   1d784:	4809      	ldr	r0, [pc, #36]	; (1d7ac <ll_rx_dequeue+0x188>)
   1d786:	f44f 6387 	mov.w	r3, #1080	; 0x438
   1d78a:	f00e fc1c 	bl	2bfc6 <assert_print>
   1d78e:	4040      	eors	r0, r0
   1d790:	f380 8811 	msr	BASEPRI, r0
   1d794:	f04f 0003 	mov.w	r0, #3
   1d798:	df02      	svc	2
   1d79a:	e7de      	b.n	1d75a <ll_rx_dequeue+0x136>
   1d79c:	200023f0 	.word	0x200023f0
   1d7a0:	200021c4 	.word	0x200021c4
   1d7a4:	000332c4 	.word	0x000332c4
   1d7a8:	0003305c 	.word	0x0003305c
   1d7ac:	00032fc4 	.word	0x00032fc4
   1d7b0:	00033394 	.word	0x00033394
   1d7b4:	20002210 	.word	0x20002210
   1d7b8:	00033698 	.word	0x00033698
   1d7bc:	0003337c 	.word	0x0003337c
   1d7c0:	00033370 	.word	0x00033370

0001d7c4 <ll_rx_mem_release>:
{
   1d7c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   1d7c8:	6804      	ldr	r4, [r0, #0]
{
   1d7ca:	4680      	mov	r8, r0
	while (rx) {
   1d7cc:	b344      	cbz	r4, 1d820 <ll_rx_mem_release+0x5c>
			LL_ASSERT(0);
   1d7ce:	4f56      	ldr	r7, [pc, #344]	; (1d928 <ll_rx_mem_release+0x164>)
   1d7d0:	f8df 9158 	ldr.w	r9, [pc, #344]	; 1d92c <ll_rx_mem_release+0x168>
   1d7d4:	4e56      	ldr	r6, [pc, #344]	; (1d930 <ll_rx_mem_release+0x16c>)
		rx = rx->next;
   1d7d6:	4625      	mov	r5, r4
   1d7d8:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   1d7da:	792b      	ldrb	r3, [r5, #4]
   1d7dc:	2b1d      	cmp	r3, #29
   1d7de:	d810      	bhi.n	1d802 <ll_rx_mem_release+0x3e>
   1d7e0:	e8df f003 	tbb	[pc, r3]
   1d7e4:	380f0f38 	.word	0x380f0f38
   1d7e8:	0f0f0f0f 	.word	0x0f0f0f0f
   1d7ec:	0f0f0f0f 	.word	0x0f0f0f0f
   1d7f0:	0f0f0f0f 	.word	0x0f0f0f0f
   1d7f4:	0f0f0f0f 	.word	0x0f0f0f0f
   1d7f8:	260f0f0f 	.word	0x260f0f0f
   1d7fc:	38383856 	.word	0x38383856
   1d800:	3838      	.short	0x3838
			LL_ASSERT(0);
   1d802:	f240 631b 	movw	r3, #1563	; 0x61b
   1d806:	463a      	mov	r2, r7
   1d808:	4649      	mov	r1, r9
   1d80a:	4630      	mov	r0, r6
   1d80c:	f00e fbdb 	bl	2bfc6 <assert_print>
   1d810:	4040      	eors	r0, r0
   1d812:	f380 8811 	msr	BASEPRI, r0
   1d816:	f04f 0003 	mov.w	r0, #3
   1d81a:	df02      	svc	2
	while (rx) {
   1d81c:	2c00      	cmp	r4, #0
   1d81e:	d1da      	bne.n	1d7d6 <ll_rx_mem_release+0x12>
	*node_rx = rx;
   1d820:	2300      	movs	r3, #0
   1d822:	f8c8 3000 	str.w	r3, [r8]
	rx_replenish(UINT8_MAX);
   1d826:	20ff      	movs	r0, #255	; 0xff
}
   1d828:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_replenish(UINT8_MAX);
   1d82c:	f7ff bc9a 	b.w	1d164 <rx_replenish>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   1d830:	7f2b      	ldrb	r3, [r5, #28]
   1d832:	2b3c      	cmp	r3, #60	; 0x3c
   1d834:	d062      	beq.n	1d8fc <ll_rx_mem_release+0x138>
				LL_ASSERT(!cc->status);
   1d836:	b1db      	cbz	r3, 1d870 <ll_rx_mem_release+0xac>
   1d838:	493e      	ldr	r1, [pc, #248]	; (1d934 <ll_rx_mem_release+0x170>)
   1d83a:	f240 534a 	movw	r3, #1354	; 0x54a
   1d83e:	463a      	mov	r2, r7
   1d840:	4630      	mov	r0, r6
   1d842:	f00e fbc0 	bl	2bfc6 <assert_print>
   1d846:	4040      	eors	r0, r0
   1d848:	f380 8811 	msr	BASEPRI, r0
   1d84c:	f04f 0003 	mov.w	r0, #3
   1d850:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   1d852:	792b      	ldrb	r3, [r5, #4]
   1d854:	b963      	cbnz	r3, 1d870 <ll_rx_mem_release+0xac>
   1d856:	4938      	ldr	r1, [pc, #224]	; (1d938 <ll_rx_mem_release+0x174>)
   1d858:	f240 539c 	movw	r3, #1436	; 0x59c
   1d85c:	463a      	mov	r2, r7
   1d85e:	4630      	mov	r0, r6
   1d860:	f00e fbb1 	bl	2bfc6 <assert_print>
   1d864:	4040      	eors	r0, r0
   1d866:	f380 8811 	msr	BASEPRI, r0
   1d86a:	f04f 0003 	mov.w	r0, #3
   1d86e:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   1d870:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1d93c <ll_rx_mem_release+0x178>
   1d874:	f8ba 3000 	ldrh.w	r3, [sl]
   1d878:	2b04      	cmp	r3, #4
   1d87a:	d82f      	bhi.n	1d8dc <ll_rx_mem_release+0x118>
	mem_link_rx.quota_pdu += delta;
   1d87c:	3301      	adds	r3, #1
	mem_release(node_rx, &mem_pdu_rx.free);
   1d87e:	4930      	ldr	r1, [pc, #192]	; (1d940 <ll_rx_mem_release+0x17c>)
	mem_link_rx.quota_pdu += delta;
   1d880:	f8aa 3000 	strh.w	r3, [sl]
	mem_release(node_rx, &mem_pdu_rx.free);
   1d884:	4628      	mov	r0, r5
   1d886:	f7fc fc81 	bl	1a18c <mem_release>
	while (rx) {
   1d88a:	2c00      	cmp	r4, #0
   1d88c:	d1a3      	bne.n	1d7d6 <ll_rx_mem_release+0x12>
   1d88e:	e7c7      	b.n	1d820 <ll_rx_mem_release+0x5c>
			if (IS_ACL_HANDLE(rx_free->handle)) {
   1d890:	88e8      	ldrh	r0, [r5, #6]
   1d892:	2800      	cmp	r0, #0
   1d894:	d1c2      	bne.n	1d81c <ll_rx_mem_release+0x58>
				conn = ll_conn_get(rx_free->handle);
   1d896:	f002 f8a9 	bl	1f9ec <ll_conn_get>
				LL_ASSERT(!conn->lll.link_tx_free);
   1d89a:	6f43      	ldr	r3, [r0, #116]	; 0x74
				conn = ll_conn_get(rx_free->handle);
   1d89c:	4605      	mov	r5, r0
				LL_ASSERT(!conn->lll.link_tx_free);
   1d89e:	b163      	cbz	r3, 1d8ba <ll_rx_mem_release+0xf6>
   1d8a0:	4928      	ldr	r1, [pc, #160]	; (1d944 <ll_rx_mem_release+0x180>)
   1d8a2:	f240 630d 	movw	r3, #1549	; 0x60d
   1d8a6:	463a      	mov	r2, r7
   1d8a8:	4630      	mov	r0, r6
   1d8aa:	f00e fb8c 	bl	2bfc6 <assert_print>
   1d8ae:	4040      	eors	r0, r0
   1d8b0:	f380 8811 	msr	BASEPRI, r0
   1d8b4:	f04f 0003 	mov.w	r0, #3
   1d8b8:	df02      	svc	2
				link = memq_deinit(&conn->lll.memq_tx.head,
   1d8ba:	f105 0168 	add.w	r1, r5, #104	; 0x68
   1d8be:	f105 0064 	add.w	r0, r5, #100	; 0x64
   1d8c2:	f7fc fca3 	bl	1a20c <memq_deinit>
				LL_ASSERT(link);
   1d8c6:	4682      	mov	sl, r0
   1d8c8:	b300      	cbz	r0, 1d90c <ll_rx_mem_release+0x148>
				conn->lll.link_tx_free = link;
   1d8ca:	f8c5 a074 	str.w	sl, [r5, #116]	; 0x74
				ll_conn_release(conn);
   1d8ce:	4628      	mov	r0, r5
   1d8d0:	f002 f87e 	bl	1f9d0 <ll_conn_release>
	while (rx) {
   1d8d4:	2c00      	cmp	r4, #0
   1d8d6:	f47f af7e 	bne.w	1d7d6 <ll_rx_mem_release+0x12>
   1d8da:	e7a1      	b.n	1d820 <ll_rx_mem_release+0x5c>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   1d8dc:	491a      	ldr	r1, [pc, #104]	; (1d948 <ll_rx_mem_release+0x184>)
   1d8de:	f240 6327 	movw	r3, #1575	; 0x627
   1d8e2:	463a      	mov	r2, r7
   1d8e4:	4630      	mov	r0, r6
   1d8e6:	f00e fb6e 	bl	2bfc6 <assert_print>
   1d8ea:	4040      	eors	r0, r0
   1d8ec:	f380 8811 	msr	BASEPRI, r0
   1d8f0:	f04f 0003 	mov.w	r0, #3
   1d8f4:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   1d8f6:	f8ba 3000 	ldrh.w	r3, [sl]
   1d8fa:	e7bf      	b.n	1d87c <ll_rx_mem_release+0xb8>
	mem_release(node_rx, &mem_pdu_rx.free);
   1d8fc:	4910      	ldr	r1, [pc, #64]	; (1d940 <ll_rx_mem_release+0x17c>)
   1d8fe:	4628      	mov	r0, r5
   1d900:	f7fc fc44 	bl	1a18c <mem_release>
	while (rx) {
   1d904:	2c00      	cmp	r4, #0
   1d906:	f47f af66 	bne.w	1d7d6 <ll_rx_mem_release+0x12>
   1d90a:	e789      	b.n	1d820 <ll_rx_mem_release+0x5c>
				LL_ASSERT(link);
   1d90c:	490f      	ldr	r1, [pc, #60]	; (1d94c <ll_rx_mem_release+0x188>)
   1d90e:	f44f 63c2 	mov.w	r3, #1552	; 0x610
   1d912:	463a      	mov	r2, r7
   1d914:	4630      	mov	r0, r6
   1d916:	f00e fb56 	bl	2bfc6 <assert_print>
   1d91a:	4040      	eors	r0, r0
   1d91c:	f380 8811 	msr	BASEPRI, r0
   1d920:	f04f 0003 	mov.w	r0, #3
   1d924:	df02      	svc	2
   1d926:	e7d0      	b.n	1d8ca <ll_rx_mem_release+0x106>
   1d928:	000332c4 	.word	0x000332c4
   1d92c:	0003305c 	.word	0x0003305c
   1d930:	00032fc4 	.word	0x00032fc4
   1d934:	000333b4 	.word	0x000333b4
   1d938:	000333c0 	.word	0x000333c0
   1d93c:	200021c0 	.word	0x200021c0
   1d940:	20002210 	.word	0x20002210
   1d944:	000333e4 	.word	0x000333e4
   1d948:	00033334 	.word	0x00033334
   1d94c:	00033698 	.word	0x00033698

0001d950 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   1d950:	4801      	ldr	r0, [pc, #4]	; (1d958 <ll_rx_link_alloc+0x8>)
   1d952:	f7fc bc01 	b.w	1a158 <mem_acquire>
   1d956:	bf00      	nop
   1d958:	200021c4 	.word	0x200021c4

0001d95c <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   1d95c:	4901      	ldr	r1, [pc, #4]	; (1d964 <ll_rx_link_release+0x8>)
   1d95e:	f7fc bc15 	b.w	1a18c <mem_release>
   1d962:	bf00      	nop
   1d964:	200021c4 	.word	0x200021c4

0001d968 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   1d968:	4801      	ldr	r0, [pc, #4]	; (1d970 <ll_rx_alloc+0x8>)
   1d96a:	f7fc bbf5 	b.w	1a158 <mem_acquire>
   1d96e:	bf00      	nop
   1d970:	20002210 	.word	0x20002210

0001d974 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   1d974:	4901      	ldr	r1, [pc, #4]	; (1d97c <ll_rx_release+0x8>)
   1d976:	f7fc bc09 	b.w	1a18c <mem_release>
   1d97a:	bf00      	nop
   1d97c:	20002210 	.word	0x20002210

0001d980 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1d980:	4b02      	ldr	r3, [pc, #8]	; (1d98c <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1d982:	4a03      	ldr	r2, [pc, #12]	; (1d990 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1d984:	795b      	ldrb	r3, [r3, #5]
   1d986:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1d988:	f7fc bc4a 	b.w	1a220 <memq_enqueue>
   1d98c:	20000604 	.word	0x20000604
   1d990:	200023f4 	.word	0x200023f4

0001d994 <ll_rx_sched>:
	k_sem_give(sem_recv);
   1d994:	4b01      	ldr	r3, [pc, #4]	; (1d99c <ll_rx_sched+0x8>)
   1d996:	6818      	ldr	r0, [r3, #0]
   1d998:	f00c be78 	b.w	2a68c <z_impl_k_sem_give>
   1d99c:	20002408 	.word	0x20002408

0001d9a0 <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   1d9a0:	4b0e      	ldr	r3, [pc, #56]	; (1d9dc <ll_pdu_rx_alloc_peek+0x3c>)
   1d9a2:	7919      	ldrb	r1, [r3, #4]
   1d9a4:	795a      	ldrb	r2, [r3, #5]
	if (last >= first) {
   1d9a6:	4291      	cmp	r1, r2
   1d9a8:	d80a      	bhi.n	1d9c0 <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
   1d9aa:	eba2 0c01 	sub.w	ip, r2, r1
   1d9ae:	fa5f fc8c 	uxtb.w	ip, ip
   1d9b2:	4560      	cmp	r0, ip
   1d9b4:	d802      	bhi.n	1d9bc <ll_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   1d9b6:	4291      	cmp	r1, r2
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   1d9b8:	7818      	ldrb	r0, [r3, #0]
   1d9ba:	d10a      	bne.n	1d9d2 <ll_pdu_rx_alloc_peek+0x32>
		return NULL;
   1d9bc:	2000      	movs	r0, #0
}
   1d9be:	4770      	bx	lr
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   1d9c0:	f8b3 c002 	ldrh.w	ip, [r3, #2]
		return count - first + last;
   1d9c4:	ebac 0c01 	sub.w	ip, ip, r1
   1d9c8:	4462      	add	r2, ip
   1d9ca:	b2d2      	uxtb	r2, r2
   1d9cc:	4290      	cmp	r0, r2
   1d9ce:	d8f5      	bhi.n	1d9bc <ll_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   1d9d0:	7818      	ldrb	r0, [r3, #0]
	return *((void **)(fifo + first * size));
   1d9d2:	fb01 3300 	mla	r3, r1, r0, r3
   1d9d6:	6898      	ldr	r0, [r3, #8]
   1d9d8:	4770      	bx	lr
   1d9da:	bf00      	nop
   1d9dc:	200004d0 	.word	0x200004d0

0001d9e0 <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   1d9e0:	4b09      	ldr	r3, [pc, #36]	; (1da08 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   1d9e2:	7919      	ldrb	r1, [r3, #4]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   1d9e4:	795a      	ldrb	r2, [r3, #5]
   1d9e6:	7818      	ldrb	r0, [r3, #0]
   1d9e8:	f893 c002 	ldrb.w	ip, [r3, #2]
   1d9ec:	428a      	cmp	r2, r1
   1d9ee:	d009      	beq.n	1da04 <ll_pdu_rx_alloc+0x24>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   1d9f0:	1c4a      	adds	r2, r1, #1
   1d9f2:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   1d9f4:	fb01 3100 	mla	r1, r1, r0, r3
	if (_first == count) {
		_first = 0U;
   1d9f8:	4594      	cmp	ip, r2
   1d9fa:	bf08      	it	eq
   1d9fc:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   1d9fe:	6888      	ldr	r0, [r1, #8]
	}

	*first = _first; /* Write back read-index */
   1da00:	711a      	strb	r2, [r3, #4]

	return mem;
   1da02:	4770      	bx	lr
		return NULL;
   1da04:	2000      	movs	r0, #0
}
   1da06:	4770      	bx	lr
   1da08:	200004d0 	.word	0x200004d0

0001da0c <ll_tx_ack_put>:
{
   1da0c:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   1da0e:	4a15      	ldr	r2, [pc, #84]	; (1da64 <ll_tx_ack_put+0x58>)
   1da10:	f892 c005 	ldrb.w	ip, [r2, #5]
	if (last == count) {
   1da14:	7894      	ldrb	r4, [r2, #2]
   1da16:	f892 e004 	ldrb.w	lr, [r2, #4]
   1da1a:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
   1da1c:	f10c 0301 	add.w	r3, ip, #1
   1da20:	b2db      	uxtb	r3, r3
		last = 0U;
   1da22:	429c      	cmp	r4, r3
   1da24:	bf08      	it	eq
   1da26:	2300      	moveq	r3, #0
	if (last == first) {
   1da28:	459e      	cmp	lr, r3
   1da2a:	d00a      	beq.n	1da42 <ll_tx_ack_put+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1da2c:	fb1c fc05 	smulbb	ip, ip, r5
   1da30:	f102 0e08 	add.w	lr, r2, #8
	tx->handle = handle;
   1da34:	f82e 000c 	strh.w	r0, [lr, ip]
   1da38:	44f4      	add	ip, lr
	tx->node = node_tx;
   1da3a:	f8cc 1004 	str.w	r1, [ip, #4]
	*last = idx; /* Commit: Update write index */
   1da3e:	7153      	strb	r3, [r2, #5]
}
   1da40:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(tx);
   1da42:	4a09      	ldr	r2, [pc, #36]	; (1da68 <ll_tx_ack_put+0x5c>)
   1da44:	4909      	ldr	r1, [pc, #36]	; (1da6c <ll_tx_ack_put+0x60>)
   1da46:	480a      	ldr	r0, [pc, #40]	; (1da70 <ll_tx_ack_put+0x64>)
   1da48:	f240 6379 	movw	r3, #1657	; 0x679
   1da4c:	f00e fabb 	bl	2bfc6 <assert_print>
   1da50:	4040      	eors	r0, r0
   1da52:	f380 8811 	msr	BASEPRI, r0
   1da56:	f04f 0003 	mov.w	r0, #3
   1da5a:	df02      	svc	2
	tx->handle = handle;
   1da5c:	2300      	movs	r3, #0
   1da5e:	801b      	strh	r3, [r3, #0]
   1da60:	deff      	udf	#255	; 0xff
   1da62:	bf00      	nop
   1da64:	20000604 	.word	0x20000604
   1da68:	000332c4 	.word	0x000332c4
   1da6c:	0003368c 	.word	0x0003368c
   1da70:	00032fc4 	.word	0x00032fc4

0001da74 <ll_timeslice_ticker_id_get>:
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   1da74:	2200      	movs	r2, #0
	*ticker_id = (TICKER_NODES - FLASH_TICKER_NODES);
   1da76:	2304      	movs	r3, #4
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   1da78:	7002      	strb	r2, [r0, #0]
	*ticker_id = (TICKER_NODES - FLASH_TICKER_NODES);
   1da7a:	700b      	strb	r3, [r1, #0]
}
   1da7c:	4770      	bx	lr
   1da7e:	bf00      	nop

0001da80 <ll_radio_state_abort>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   1da80:	2200      	movs	r2, #0
{
   1da82:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   1da84:	4611      	mov	r1, r2
   1da86:	4b0a      	ldr	r3, [pc, #40]	; (1dab0 <ll_radio_state_abort+0x30>)
   1da88:	2001      	movs	r0, #1
   1da8a:	f7fc fc3d 	bl	1a308 <mayfly_enqueue>
	LL_ASSERT(!ret);
   1da8e:	b900      	cbnz	r0, 1da92 <ll_radio_state_abort+0x12>
}
   1da90:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   1da92:	4a08      	ldr	r2, [pc, #32]	; (1dab4 <ll_radio_state_abort+0x34>)
   1da94:	4908      	ldr	r1, [pc, #32]	; (1dab8 <ll_radio_state_abort+0x38>)
   1da96:	4809      	ldr	r0, [pc, #36]	; (1dabc <ll_radio_state_abort+0x3c>)
   1da98:	f240 6391 	movw	r3, #1681	; 0x691
   1da9c:	f00e fa93 	bl	2bfc6 <assert_print>
   1daa0:	4040      	eors	r0, r0
   1daa2:	f380 8811 	msr	BASEPRI, r0
   1daa6:	f04f 0003 	mov.w	r0, #3
   1daaa:	df02      	svc	2
}
   1daac:	bd08      	pop	{r3, pc}
   1daae:	bf00      	nop
   1dab0:	2000067c 	.word	0x2000067c
   1dab4:	000332c4 	.word	0x000332c4
   1dab8:	000333fc 	.word	0x000333fc
   1dabc:	00032fc4 	.word	0x00032fc4

0001dac0 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1dac0:	f030 0302 	bics.w	r3, r0, #2
{
   1dac4:	b510      	push	{r4, lr}
   1dac6:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1dac8:	d002      	beq.n	1dad0 <ull_ticker_status_take+0x10>
   1daca:	680b      	ldr	r3, [r1, #0]
   1dacc:	2b02      	cmp	r3, #2
   1dace:	d008      	beq.n	1dae2 <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
   1dad0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1dad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1dad8:	4809      	ldr	r0, [pc, #36]	; (1db00 <ull_ticker_status_take+0x40>)
   1dada:	f00c fdfd 	bl	2a6d8 <z_impl_k_sem_take>
	return *ret_cb;
   1dade:	6820      	ldr	r0, [r4, #0]
}
   1dae0:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1dae2:	4a08      	ldr	r2, [pc, #32]	; (1db04 <ull_ticker_status_take+0x44>)
   1dae4:	4908      	ldr	r1, [pc, #32]	; (1db08 <ull_ticker_status_take+0x48>)
   1dae6:	4809      	ldr	r0, [pc, #36]	; (1db0c <ull_ticker_status_take+0x4c>)
   1dae8:	f240 63ad 	movw	r3, #1709	; 0x6ad
   1daec:	f00e fa6b 	bl	2bfc6 <assert_print>
   1daf0:	4040      	eors	r0, r0
   1daf2:	f380 8811 	msr	BASEPRI, r0
   1daf6:	f04f 0003 	mov.w	r0, #3
   1dafa:	df02      	svc	2
   1dafc:	e7e8      	b.n	1dad0 <ull_ticker_status_take+0x10>
   1dafe:	bf00      	nop
   1db00:	2000240c 	.word	0x2000240c
   1db04:	000332c4 	.word	0x000332c4
   1db08:	00033404 	.word	0x00033404
   1db0c:	00032fc4 	.word	0x00032fc4

0001db10 <ull_disable_mark>:
	if (!*m) {
   1db10:	4a03      	ldr	r2, [pc, #12]	; (1db20 <ull_disable_mark+0x10>)
{
   1db12:	4603      	mov	r3, r0
	if (!*m) {
   1db14:	6810      	ldr	r0, [r2, #0]
   1db16:	b100      	cbz	r0, 1db1a <ull_disable_mark+0xa>
}
   1db18:	4770      	bx	lr
		*m = param;
   1db1a:	6013      	str	r3, [r2, #0]
   1db1c:	4618      	mov	r0, r3
}
   1db1e:	4770      	bx	lr
   1db20:	2000218c 	.word	0x2000218c

0001db24 <ull_disable_unmark>:
	if (*m && *m == param) {
   1db24:	4a04      	ldr	r2, [pc, #16]	; (1db38 <ull_disable_unmark+0x14>)
   1db26:	6813      	ldr	r3, [r2, #0]
   1db28:	b123      	cbz	r3, 1db34 <ull_disable_unmark+0x10>
   1db2a:	4298      	cmp	r0, r3
		*m = NULL;
   1db2c:	bf06      	itte	eq
   1db2e:	2100      	moveq	r1, #0
   1db30:	6011      	streq	r1, [r2, #0]
	return NULL;
   1db32:	2300      	movne	r3, #0
}
   1db34:	4618      	mov	r0, r3
   1db36:	4770      	bx	lr
   1db38:	2000218c 	.word	0x2000218c

0001db3c <ull_disable_mark_get>:
	return mark_get(mark_disable);
   1db3c:	4b01      	ldr	r3, [pc, #4]	; (1db44 <ull_disable_mark_get+0x8>)
}
   1db3e:	6818      	ldr	r0, [r3, #0]
   1db40:	4770      	bx	lr
   1db42:	bf00      	nop
   1db44:	2000218c 	.word	0x2000218c

0001db48 <ull_update_mark>:
	if (!*m) {
   1db48:	4a03      	ldr	r2, [pc, #12]	; (1db58 <ull_update_mark+0x10>)
{
   1db4a:	4603      	mov	r3, r0
	if (!*m) {
   1db4c:	6810      	ldr	r0, [r2, #0]
   1db4e:	b100      	cbz	r0, 1db52 <ull_update_mark+0xa>
}
   1db50:	4770      	bx	lr
		*m = param;
   1db52:	6013      	str	r3, [r2, #0]
   1db54:	4618      	mov	r0, r3
}
   1db56:	4770      	bx	lr
   1db58:	20002190 	.word	0x20002190

0001db5c <ull_update_unmark>:
	if (*m && *m == param) {
   1db5c:	4a04      	ldr	r2, [pc, #16]	; (1db70 <ull_update_unmark+0x14>)
   1db5e:	6813      	ldr	r3, [r2, #0]
   1db60:	b123      	cbz	r3, 1db6c <ull_update_unmark+0x10>
   1db62:	4298      	cmp	r0, r3
		*m = NULL;
   1db64:	bf06      	itte	eq
   1db66:	2100      	moveq	r1, #0
   1db68:	6011      	streq	r1, [r2, #0]
	return NULL;
   1db6a:	2300      	movne	r3, #0
}
   1db6c:	4618      	mov	r0, r3
   1db6e:	4770      	bx	lr
   1db70:	20002190 	.word	0x20002190

0001db74 <ull_update_mark_get>:
	return mark_get(mark_update);
   1db74:	4b01      	ldr	r3, [pc, #4]	; (1db7c <ull_update_mark_get+0x8>)
}
   1db76:	6818      	ldr	r0, [r3, #0]
   1db78:	4770      	bx	lr
   1db7a:	bf00      	nop
   1db7c:	20002190 	.word	0x20002190

0001db80 <ull_disable>:
{
   1db80:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
   1db82:	6805      	ldr	r5, [r0, #0]
   1db84:	782b      	ldrb	r3, [r5, #0]
{
   1db86:	b087      	sub	sp, #28
	if (!ull_ref_get(hdr)) {
   1db88:	b353      	cbz	r3, 1dbe0 <ull_disable+0x60>
	compiler_barrier();
   1db8a:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   1db8c:	2201      	movs	r2, #1
   1db8e:	2100      	movs	r1, #0
   1db90:	4668      	mov	r0, sp
   1db92:	f013 fe10 	bl	317b6 <z_impl_k_sem_init>
   1db96:	782b      	ldrb	r3, [r5, #0]
	hdr->disabled_cb = disabled_cb;
   1db98:	4a13      	ldr	r2, [pc, #76]	; (1dbe8 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   1db9a:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   1db9e:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
   1dba0:	b1f3      	cbz	r3, 1dbe0 <ull_disable+0x60>
	mfy.param = lll;
   1dba2:	4b12      	ldr	r3, [pc, #72]	; (1dbec <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   1dba4:	2200      	movs	r2, #0
   1dba6:	4611      	mov	r1, r2
   1dba8:	2003      	movs	r0, #3
	mfy.param = lll;
   1dbaa:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   1dbac:	f7fc fbac 	bl	1a308 <mayfly_enqueue>
	LL_ASSERT(!ret);
   1dbb0:	b940      	cbnz	r0, 1dbc4 <ull_disable+0x44>
	return z_impl_k_sem_take(sem, timeout);
   1dbb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1dbb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1dbba:	4668      	mov	r0, sp
   1dbbc:	f00c fd8c 	bl	2a6d8 <z_impl_k_sem_take>
}
   1dbc0:	b007      	add	sp, #28
   1dbc2:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   1dbc4:	4a0a      	ldr	r2, [pc, #40]	; (1dbf0 <ull_disable+0x70>)
   1dbc6:	490b      	ldr	r1, [pc, #44]	; (1dbf4 <ull_disable+0x74>)
   1dbc8:	480b      	ldr	r0, [pc, #44]	; (1dbf8 <ull_disable+0x78>)
   1dbca:	f240 732a 	movw	r3, #1834	; 0x72a
   1dbce:	f00e f9fa 	bl	2bfc6 <assert_print>
   1dbd2:	4040      	eors	r0, r0
   1dbd4:	f380 8811 	msr	BASEPRI, r0
   1dbd8:	f04f 0003 	mov.w	r0, #3
   1dbdc:	df02      	svc	2
   1dbde:	e7e8      	b.n	1dbb2 <ull_disable+0x32>
		return -EALREADY;
   1dbe0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1dbe4:	e7ec      	b.n	1dbc0 <ull_disable+0x40>
   1dbe6:	bf00      	nop
   1dbe8:	0001d0a1 	.word	0x0001d0a1
   1dbec:	2000066c 	.word	0x2000066c
   1dbf0:	000332c4 	.word	0x000332c4
   1dbf4:	000333fc 	.word	0x000333fc
   1dbf8:	00032fc4 	.word	0x00032fc4

0001dbfc <ull_ticker_stop_with_mark>:
{
   1dbfc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
   1dbfe:	4e20      	ldr	r6, [pc, #128]	; (1dc80 <ull_ticker_stop_with_mark+0x84>)
   1dc00:	6833      	ldr	r3, [r6, #0]
{
   1dc02:	b085      	sub	sp, #20
   1dc04:	460c      	mov	r4, r1
   1dc06:	4617      	mov	r7, r2
	if (!*m) {
   1dc08:	b353      	cbz	r3, 1dc60 <ull_ticker_stop_with_mark+0x64>
	if (mark != param) {
   1dc0a:	4299      	cmp	r1, r3
   1dc0c:	d113      	bne.n	1dc36 <ull_ticker_stop_with_mark+0x3a>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1dc0e:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   1dc10:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1dc12:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
   1dc14:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1dc16:	9500      	str	r5, [sp, #0]
   1dc18:	4b1a      	ldr	r3, [pc, #104]	; (1dc84 <ull_ticker_stop_with_mark+0x88>)
   1dc1a:	2103      	movs	r1, #3
   1dc1c:	2000      	movs	r0, #0
   1dc1e:	f7fd fd4b 	bl	1b6b8 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   1dc22:	4629      	mov	r1, r5
   1dc24:	f7ff ff4c 	bl	1dac0 <ull_ticker_status_take>
	if (ret) {
   1dc28:	4605      	mov	r5, r0
   1dc2a:	b140      	cbz	r0, 1dc3e <ull_ticker_stop_with_mark+0x42>
	if (*m && *m == param) {
   1dc2c:	6833      	ldr	r3, [r6, #0]
   1dc2e:	b10b      	cbz	r3, 1dc34 <ull_ticker_stop_with_mark+0x38>
   1dc30:	429c      	cmp	r4, r3
   1dc32:	d017      	beq.n	1dc64 <ull_ticker_stop_with_mark+0x68>
		if (mark != param) {
   1dc34:	b304      	cbz	r4, 1dc78 <ull_ticker_stop_with_mark+0x7c>
			return -ENOLCK;
   1dc36:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
   1dc3a:	b005      	add	sp, #20
   1dc3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = ull_disable(lll_disable);
   1dc3e:	4638      	mov	r0, r7
   1dc40:	f7ff ff9e 	bl	1db80 <ull_disable>
	if (*m && *m == param) {
   1dc44:	6833      	ldr	r3, [r6, #0]
   1dc46:	b10b      	cbz	r3, 1dc4c <ull_ticker_stop_with_mark+0x50>
   1dc48:	429c      	cmp	r4, r3
   1dc4a:	d011      	beq.n	1dc70 <ull_ticker_stop_with_mark+0x74>
	if (mark != param) {
   1dc4c:	2c00      	cmp	r4, #0
   1dc4e:	d1f2      	bne.n	1dc36 <ull_ticker_stop_with_mark+0x3a>
	if (err && (err != -EALREADY)) {
   1dc50:	2800      	cmp	r0, #0
   1dc52:	d0f2      	beq.n	1dc3a <ull_ticker_stop_with_mark+0x3e>
	return 0;
   1dc54:	f110 0f78 	cmn.w	r0, #120	; 0x78
   1dc58:	bf08      	it	eq
   1dc5a:	2000      	moveq	r0, #0
}
   1dc5c:	b005      	add	sp, #20
   1dc5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
   1dc60:	6031      	str	r1, [r6, #0]
	if (mark != param) {
   1dc62:	e7d4      	b.n	1dc0e <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
   1dc64:	2300      	movs	r3, #0
		return -EALREADY;
   1dc66:	f06f 0077 	mvn.w	r0, #119	; 0x77
		*m = NULL;
   1dc6a:	6033      	str	r3, [r6, #0]
}
   1dc6c:	b005      	add	sp, #20
   1dc6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
   1dc70:	6035      	str	r5, [r6, #0]
	if (err && (err != -EALREADY)) {
   1dc72:	2800      	cmp	r0, #0
   1dc74:	d0e1      	beq.n	1dc3a <ull_ticker_stop_with_mark+0x3e>
   1dc76:	e7ed      	b.n	1dc54 <ull_ticker_stop_with_mark+0x58>
		return -EALREADY;
   1dc78:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1dc7c:	e7dd      	b.n	1dc3a <ull_ticker_stop_with_mark+0x3e>
   1dc7e:	bf00      	nop
   1dc80:	2000218c 	.word	0x2000218c
   1dc84:	0001d095 	.word	0x0001d095

0001dc88 <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   1dc88:	4b0e      	ldr	r3, [pc, #56]	; (1dcc4 <ull_pdu_rx_alloc_peek+0x3c>)
   1dc8a:	7919      	ldrb	r1, [r3, #4]
   1dc8c:	795a      	ldrb	r2, [r3, #5]
	if (last >= first) {
   1dc8e:	4291      	cmp	r1, r2
   1dc90:	d80a      	bhi.n	1dca8 <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
   1dc92:	eba2 0c01 	sub.w	ip, r2, r1
   1dc96:	fa5f fc8c 	uxtb.w	ip, ip
   1dc9a:	4560      	cmp	r0, ip
   1dc9c:	d802      	bhi.n	1dca4 <ull_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   1dc9e:	4291      	cmp	r1, r2
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   1dca0:	7818      	ldrb	r0, [r3, #0]
   1dca2:	d10a      	bne.n	1dcba <ull_pdu_rx_alloc_peek+0x32>
		return NULL;
   1dca4:	2000      	movs	r0, #0
}
   1dca6:	4770      	bx	lr
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   1dca8:	f8b3 c002 	ldrh.w	ip, [r3, #2]
		return count - first + last;
   1dcac:	ebac 0c01 	sub.w	ip, ip, r1
   1dcb0:	4462      	add	r2, ip
   1dcb2:	b2d2      	uxtb	r2, r2
   1dcb4:	4290      	cmp	r0, r2
   1dcb6:	d8f5      	bhi.n	1dca4 <ull_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   1dcb8:	7818      	ldrb	r0, [r3, #0]
	return *((void **)(fifo + first * size));
   1dcba:	fb01 3300 	mla	r3, r1, r0, r3
   1dcbe:	6898      	ldr	r0, [r3, #8]
   1dcc0:	4770      	bx	lr
   1dcc2:	bf00      	nop
   1dcc4:	200004e0 	.word	0x200004e0

0001dcc8 <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
   1dcc8:	4b09      	ldr	r3, [pc, #36]	; (1dcf0 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   1dcca:	7919      	ldrb	r1, [r3, #4]
	if (_first == last) {
   1dccc:	795a      	ldrb	r2, [r3, #5]
   1dcce:	7818      	ldrb	r0, [r3, #0]
   1dcd0:	f893 c002 	ldrb.w	ip, [r3, #2]
   1dcd4:	428a      	cmp	r2, r1
   1dcd6:	d009      	beq.n	1dcec <ull_pdu_rx_alloc+0x24>
	_first += 1U;
   1dcd8:	1c4a      	adds	r2, r1, #1
   1dcda:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   1dcdc:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   1dce0:	4594      	cmp	ip, r2
   1dce2:	bf08      	it	eq
   1dce4:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   1dce6:	6888      	ldr	r0, [r1, #8]
	*first = _first; /* Write back read-index */
   1dce8:	711a      	strb	r2, [r3, #4]
	return mem;
   1dcea:	4770      	bx	lr
		return NULL;
   1dcec:	2000      	movs	r0, #0
}
   1dcee:	4770      	bx	lr
   1dcf0:	200004e0 	.word	0x200004e0

0001dcf4 <ull_rx_put>:
{
   1dcf4:	b538      	push	{r3, r4, r5, lr}
   1dcf6:	460c      	mov	r4, r1
   1dcf8:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   1dcfa:	f005 fb69 	bl	233d0 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1dcfe:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   1dd00:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1dd02:	4a03      	ldr	r2, [pc, #12]	; (1dd10 <ull_rx_put+0x1c>)
   1dd04:	4628      	mov	r0, r5
}
   1dd06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1dd0a:	f7fc ba89 	b.w	1a220 <memq_enqueue>
   1dd0e:	bf00      	nop
   1dd10:	20002404 	.word	0x20002404

0001dd14 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   1dd14:	2201      	movs	r2, #1
   1dd16:	4b02      	ldr	r3, [pc, #8]	; (1dd20 <ull_rx_sched+0xc>)
   1dd18:	4611      	mov	r1, r2
   1dd1a:	2000      	movs	r0, #0
   1dd1c:	f7fc baf4 	b.w	1a308 <mayfly_enqueue>
   1dd20:	2000065c 	.word	0x2000065c

0001dd24 <ull_prepare_enqueue>:
{
   1dd24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   1dd28:	4e16      	ldr	r6, [pc, #88]	; (1dd84 <ull_prepare_enqueue+0x60>)
{
   1dd2a:	f89d a020 	ldrb.w	sl, [sp, #32]
   1dd2e:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   1dd30:	7973      	ldrb	r3, [r6, #5]
{
   1dd32:	460f      	mov	r7, r1
	last = last + 1;
   1dd34:	1c5d      	adds	r5, r3, #1
   1dd36:	4611      	mov	r1, r2
	if (last == count) {
   1dd38:	78b2      	ldrb	r2, [r6, #2]
	last = last + 1;
   1dd3a:	b2ed      	uxtb	r5, r5
		last = 0U;
   1dd3c:	42aa      	cmp	r2, r5
   1dd3e:	bf08      	it	eq
   1dd40:	2500      	moveq	r5, #0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   1dd42:	7932      	ldrb	r2, [r6, #4]
	if (last == first) {
   1dd44:	42aa      	cmp	r2, r5
{
   1dd46:	4680      	mov	r8, r0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   1dd48:	7830      	ldrb	r0, [r6, #0]
   1dd4a:	d016      	beq.n	1dd7a <ull_prepare_enqueue+0x56>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1dd4c:	f106 0408 	add.w	r4, r6, #8
   1dd50:	fb03 4400 	mla	r4, r3, r0, r4
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   1dd54:	2210      	movs	r2, #16
   1dd56:	4620      	mov	r0, r4
   1dd58:	f010 f967 	bl	2e02a <memcpy>
	e->is_resume = is_resume;
   1dd5c:	7f23      	ldrb	r3, [r4, #28]
	e->abort_cb = abort_cb;
   1dd5e:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
   1dd60:	f00a 0a01 	and.w	sl, sl, #1
   1dd64:	f023 0303 	bic.w	r3, r3, #3
   1dd68:	ea43 030a 	orr.w	r3, r3, sl
	e->is_abort_cb = is_abort_cb;
   1dd6c:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
   1dd70:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
   1dd72:	7175      	strb	r5, [r6, #5]
}
   1dd74:	4620      	mov	r0, r4
   1dd76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return NULL;
   1dd7a:	2400      	movs	r4, #0
}
   1dd7c:	4620      	mov	r0, r4
   1dd7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1dd82:	bf00      	nop
   1dd84:	200004fc 	.word	0x200004fc

0001dd88 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   1dd88:	4b05      	ldr	r3, [pc, #20]	; (1dda0 <ull_prepare_dequeue_get+0x18>)
   1dd8a:	7918      	ldrb	r0, [r3, #4]
	if (first == last) {
   1dd8c:	795a      	ldrb	r2, [r3, #5]
   1dd8e:	7819      	ldrb	r1, [r3, #0]
   1dd90:	4282      	cmp	r2, r0
	return (void *)(fifo + first * size);
   1dd92:	bf1a      	itte	ne
   1dd94:	3308      	addne	r3, #8
   1dd96:	fb00 3001 	mlane	r0, r0, r1, r3
		return NULL;
   1dd9a:	2000      	moveq	r0, #0
}
   1dd9c:	4770      	bx	lr
   1dd9e:	bf00      	nop
   1dda0:	200004fc 	.word	0x200004fc

0001dda4 <ull_prepare_dequeue_iter>:
{
   1dda4:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   1dda6:	4b0d      	ldr	r3, [pc, #52]	; (1dddc <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
   1dda8:	7802      	ldrb	r2, [r0, #0]
   1ddaa:	7899      	ldrb	r1, [r3, #2]
   1ddac:	f893 c005 	ldrb.w	ip, [r3, #5]
   1ddb0:	f893 e000 	ldrb.w	lr, [r3]
   1ddb4:	4291      	cmp	r1, r2
   1ddb6:	bf9c      	itt	ls
   1ddb8:	791a      	ldrbls	r2, [r3, #4]
		*idx = first;
   1ddba:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   1ddbc:	4594      	cmp	ip, r2
   1ddbe:	d00a      	beq.n	1ddd6 <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
   1ddc0:	1c53      	adds	r3, r2, #1
   1ddc2:	b2db      	uxtb	r3, r3
		i = 0U;
   1ddc4:	4299      	cmp	r1, r3
   1ddc6:	bf08      	it	eq
   1ddc8:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
   1ddca:	4905      	ldr	r1, [pc, #20]	; (1dde0 <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
   1ddcc:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   1ddce:	fb02 100e 	mla	r0, r2, lr, r1
}
   1ddd2:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1ddd6:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   1ddd8:	e7fb      	b.n	1ddd2 <ull_prepare_dequeue_iter+0x2e>
   1ddda:	bf00      	nop
   1dddc:	200004fc 	.word	0x200004fc
   1dde0:	20000504 	.word	0x20000504

0001dde4 <ull_prepare_dequeue>:
{
   1dde4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return MFIFO_DEQUEUE_GET(prep);
   1dde8:	4c24      	ldr	r4, [pc, #144]	; (1de7c <ull_prepare_dequeue+0x98>)
   1ddea:	7922      	ldrb	r2, [r4, #4]
	if (first == last) {
   1ddec:	7961      	ldrb	r1, [r4, #5]
   1ddee:	7823      	ldrb	r3, [r4, #0]
   1ddf0:	4291      	cmp	r1, r2
   1ddf2:	d028      	beq.n	1de46 <ull_prepare_dequeue+0x62>
	return (void *)(fifo + first * size);
   1ddf4:	f104 0708 	add.w	r7, r4, #8
			mfy.param = next;
   1ddf8:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1de80 <ull_prepare_dequeue+0x9c>
			LL_ASSERT(!ret);
   1ddfc:	f8df b084 	ldr.w	fp, [pc, #132]	; 1de84 <ull_prepare_dequeue+0xa0>
   1de00:	f8df a084 	ldr.w	sl, [pc, #132]	; 1de88 <ull_prepare_dequeue+0xa4>
   1de04:	4680      	mov	r8, r0
   1de06:	fb02 7003 	mla	r0, r2, r3, r7
		uint8_t is_aborted = next->is_aborted;
   1de0a:	7f03      	ldrb	r3, [r0, #28]
		if (!is_aborted) {
   1de0c:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
   1de0e:	f3c3 0540 	ubfx	r5, r3, #1, #1
		uint8_t is_resume = next->is_resume;
   1de12:	f003 0601 	and.w	r6, r3, #1
		if (!is_aborted) {
   1de16:	d518      	bpl.n	1de4a <ull_prepare_dequeue+0x66>
	uint8_t _first = *first; /* Copy read-index */
   1de18:	7922      	ldrb	r2, [r4, #4]
		MFIFO_DEQUEUE(prep);
   1de1a:	7961      	ldrb	r1, [r4, #5]
   1de1c:	7820      	ldrb	r0, [r4, #0]
   1de1e:	f894 c002 	ldrb.w	ip, [r4, #2]
	_first += 1U;
   1de22:	1c53      	adds	r3, r2, #1
	if (_first == last) {
   1de24:	4291      	cmp	r1, r2
	_first += 1U;
   1de26:	b2db      	uxtb	r3, r3
	if (_first == last) {
   1de28:	d00d      	beq.n	1de46 <ull_prepare_dequeue+0x62>
		_first = 0U;
   1de2a:	459c      	cmp	ip, r3
   1de2c:	bf08      	it	eq
   1de2e:	2300      	moveq	r3, #0
	if (first == last) {
   1de30:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
   1de32:	7123      	strb	r3, [r4, #4]
	if (first == last) {
   1de34:	d007      	beq.n	1de46 <ull_prepare_dequeue+0x62>
	return (void *)(fifo + first * size);
   1de36:	fb03 7000 	mla	r0, r3, r0, r7
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   1de3a:	2d00      	cmp	r5, #0
   1de3c:	d1e5      	bne.n	1de0a <ull_prepare_dequeue+0x26>
   1de3e:	b116      	cbz	r6, 1de46 <ull_prepare_dequeue+0x62>
   1de40:	7f03      	ldrb	r3, [r0, #28]
   1de42:	07db      	lsls	r3, r3, #31
   1de44:	d5e1      	bpl.n	1de0a <ull_prepare_dequeue+0x26>
}
   1de46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mfy.param = next;
   1de4a:	f8c9 0008 	str.w	r0, [r9, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
   1de4e:	4b0c      	ldr	r3, [pc, #48]	; (1de80 <ull_prepare_dequeue+0x9c>)
   1de50:	462a      	mov	r2, r5
   1de52:	4629      	mov	r1, r5
   1de54:	4640      	mov	r0, r8
   1de56:	f7fc fa57 	bl	1a308 <mayfly_enqueue>
			LL_ASSERT(!ret);
   1de5a:	2800      	cmp	r0, #0
   1de5c:	d0dc      	beq.n	1de18 <ull_prepare_dequeue+0x34>
   1de5e:	480b      	ldr	r0, [pc, #44]	; (1de8c <ull_prepare_dequeue+0xa8>)
   1de60:	f240 73a1 	movw	r3, #1953	; 0x7a1
   1de64:	465a      	mov	r2, fp
   1de66:	4651      	mov	r1, sl
   1de68:	f00e f8ad 	bl	2bfc6 <assert_print>
   1de6c:	4040      	eors	r0, r0
   1de6e:	f380 8811 	msr	BASEPRI, r0
   1de72:	f04f 0003 	mov.w	r0, #3
   1de76:	df02      	svc	2
   1de78:	e7ce      	b.n	1de18 <ull_prepare_dequeue+0x34>
   1de7a:	bf00      	nop
   1de7c:	200004fc 	.word	0x200004fc
   1de80:	2000062c 	.word	0x2000062c
   1de84:	000332c4 	.word	0x000332c4
   1de88:	000333fc 	.word	0x000333fc
   1de8c:	00032fc4 	.word	0x00032fc4

0001de90 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   1de90:	4b06      	ldr	r3, [pc, #24]	; (1deac <ull_event_done_extra_get+0x1c>)
   1de92:	791a      	ldrb	r2, [r3, #4]
	if (first == last) {
   1de94:	7959      	ldrb	r1, [r3, #5]
   1de96:	7818      	ldrb	r0, [r3, #0]
   1de98:	4291      	cmp	r1, r2
   1de9a:	d005      	beq.n	1dea8 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   1de9c:	fb02 3300 	mla	r3, r2, r0, r3
   1dea0:	6898      	ldr	r0, [r3, #8]
	if (!evdone) {
   1dea2:	b110      	cbz	r0, 1deaa <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   1dea4:	3020      	adds	r0, #32
   1dea6:	4770      	bx	lr
		return NULL;
   1dea8:	2000      	movs	r0, #0
}
   1deaa:	4770      	bx	lr
   1deac:	200004b4 	.word	0x200004b4

0001deb0 <ull_event_done>:
{
   1deb0:	b570      	push	{r4, r5, r6, lr}
	evdone = MFIFO_DEQUEUE(done);
   1deb2:	4a13      	ldr	r2, [pc, #76]	; (1df00 <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
   1deb4:	7913      	ldrb	r3, [r2, #4]
	if (_first == last) {
   1deb6:	7954      	ldrb	r4, [r2, #5]
   1deb8:	7811      	ldrb	r1, [r2, #0]
   1deba:	429c      	cmp	r4, r3
{
   1debc:	4606      	mov	r6, r0
	evdone = MFIFO_DEQUEUE(done);
   1debe:	7890      	ldrb	r0, [r2, #2]
   1dec0:	d01b      	beq.n	1defa <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
   1dec2:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   1dec6:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   1dec8:	688c      	ldr	r4, [r1, #8]
	_first += 1U;
   1deca:	b2db      	uxtb	r3, r3
		_first = 0U;
   1decc:	4298      	cmp	r0, r3
   1dece:	bf08      	it	eq
   1ded0:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1ded2:	7113      	strb	r3, [r2, #4]
	if (!evdone) {
   1ded4:	b17c      	cbz	r4, 1def6 <ull_event_done+0x46>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   1ded6:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
   1ded8:	2500      	movs	r5, #0
	link = evdone->hdr.link;
   1deda:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   1dedc:	4a09      	ldr	r2, [pc, #36]	; (1df04 <ull_event_done+0x54>)
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   1dede:	7123      	strb	r3, [r4, #4]
	memq_enqueue(link, done, &memq_ull_done.tail);
   1dee0:	4621      	mov	r1, r4
	evdone->hdr.link = NULL;
   1dee2:	6025      	str	r5, [r4, #0]
	evdone->param = param;
   1dee4:	61e6      	str	r6, [r4, #28]
	memq_enqueue(link, done, &memq_ull_done.tail);
   1dee6:	f7fc f99b 	bl	1a220 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   1deea:	2201      	movs	r2, #1
   1deec:	4b06      	ldr	r3, [pc, #24]	; (1df08 <ull_event_done+0x58>)
   1deee:	4611      	mov	r1, r2
   1def0:	4628      	mov	r0, r5
   1def2:	f7fc fa09 	bl	1a308 <mayfly_enqueue>
}
   1def6:	4620      	mov	r0, r4
   1def8:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1defa:	2400      	movs	r4, #0
   1defc:	e7fb      	b.n	1def6 <ull_event_done+0x46>
   1defe:	bf00      	nop
   1df00:	200004b4 	.word	0x200004b4
   1df04:	200023fc 	.word	0x200023fc
   1df08:	2000064c 	.word	0x2000064c

0001df0c <ull_rxfifo_alloc>:
{
   1df0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df10:	b083      	sub	sp, #12
   1df12:	461d      	mov	r5, r3
   1df14:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1df16:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   1df1a:	e9cd 0400 	strd	r0, r4, [sp]
   1df1e:	e9dd a90d 	ldrd	sl, r9, [sp, #52]	; 0x34
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   1df22:	b33b      	cbz	r3, 1df74 <ull_rxfifo_alloc+0x68>
   1df24:	1e5c      	subs	r4, r3, #1
   1df26:	f895 b000 	ldrb.w	fp, [r5]
   1df2a:	4688      	mov	r8, r1
   1df2c:	4617      	mov	r7, r2
   1df2e:	b2e4      	uxtb	r4, r4
	last = last + 1;
   1df30:	f10b 0301 	add.w	r3, fp, #1
   1df34:	fa5f fb83 	uxtb.w	fp, r3
		last = 0U;
   1df38:	45d8      	cmp	r8, fp
   1df3a:	bf08      	it	eq
   1df3c:	f04f 0b00 	moveq.w	fp, #0
	if (last == first) {
   1df40:	455f      	cmp	r7, fp
		link = mem_acquire(link_free);
   1df42:	4648      	mov	r0, r9
   1df44:	d016      	beq.n	1df74 <ull_rxfifo_alloc+0x68>
   1df46:	f7fc f907 	bl	1a158 <mem_acquire>
   1df4a:	4606      	mov	r6, r0
		rx = mem_acquire(mem_free);
   1df4c:	4650      	mov	r0, sl
		if (!link) {
   1df4e:	b18e      	cbz	r6, 1df74 <ull_rxfifo_alloc+0x68>
		rx = mem_acquire(mem_free);
   1df50:	f7fc f902 	bl	1a158 <mem_acquire>
		if (!rx) {
   1df54:	b188      	cbz	r0, 1df7a <ull_rxfifo_alloc+0x6e>
		link->mem = NULL;
   1df56:	2300      	movs	r3, #0
   1df58:	6073      	str	r3, [r6, #4]
		rx->link = link;
   1df5a:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1df5c:	782a      	ldrb	r2, [r5, #0]
   1df5e:	9b00      	ldr	r3, [sp, #0]
   1df60:	fb12 f203 	smulbb	r2, r2, r3
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1df64:	9b01      	ldr	r3, [sp, #4]
   1df66:	5098      	str	r0, [r3, r2]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   1df68:	3c01      	subs	r4, #1
   1df6a:	b2e4      	uxtb	r4, r4
   1df6c:	2cff      	cmp	r4, #255	; 0xff
	*last = idx; /* Commit: Update write index */
   1df6e:	f885 b000 	strb.w	fp, [r5]
   1df72:	d1dd      	bne.n	1df30 <ull_rxfifo_alloc+0x24>
}
   1df74:	b003      	add	sp, #12
   1df76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, link_free);
   1df7a:	4649      	mov	r1, r9
   1df7c:	4630      	mov	r0, r6
}
   1df7e:	b003      	add	sp, #12
   1df80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, link_free);
   1df84:	f7fc b902 	b.w	1a18c <mem_release>

0001df88 <init_reset>:
{
   1df88:	b570      	push	{r4, r5, r6, lr}
	RXFIFO_INIT_ALLOC(done);
   1df8a:	4c3f      	ldr	r4, [pc, #252]	; (1e088 <init_reset+0x100>)
   1df8c:	4d3f      	ldr	r5, [pc, #252]	; (1e08c <init_reset+0x104>)
   1df8e:	79a2      	ldrb	r2, [r4, #6]
   1df90:	88a1      	ldrh	r1, [r4, #4]
   1df92:	4e3f      	ldr	r6, [pc, #252]	; (1e090 <init_reset+0x108>)
   1df94:	2000      	movs	r0, #0
{
   1df96:	b084      	sub	sp, #16
	RXFIFO_INIT_ALLOC(done);
   1df98:	4623      	mov	r3, r4
   1df9a:	80a8      	strh	r0, [r5, #4]
   1df9c:	f104 0008 	add.w	r0, r4, #8
   1dfa0:	f7fc f8aa 	bl	1a0f8 <mem_init>
   1dfa4:	79e3      	ldrb	r3, [r4, #7]
   1dfa6:	79a2      	ldrb	r2, [r4, #6]
   1dfa8:	1d30      	adds	r0, r6, #4
   1dfaa:	441a      	add	r2, r3
   1dfac:	2108      	movs	r1, #8
   1dfae:	4633      	mov	r3, r6
   1dfb0:	f7fc f8a2 	bl	1a0f8 <mem_init>
   1dfb4:	9602      	str	r6, [sp, #8]
   1dfb6:	462e      	mov	r6, r5
   1dfb8:	79a3      	ldrb	r3, [r4, #6]
   1dfba:	f816 0b08 	ldrb.w	r0, [r6], #8
   1dfbe:	792a      	ldrb	r2, [r5, #4]
   1dfc0:	78a9      	ldrb	r1, [r5, #2]
   1dfc2:	9303      	str	r3, [sp, #12]
   1dfc4:	e9cd 6400 	strd	r6, r4, [sp]
   1dfc8:	1d6b      	adds	r3, r5, #5
   1dfca:	f7ff ff9f 	bl	1df0c <ull_rxfifo_alloc>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   1dfce:	4b31      	ldr	r3, [pc, #196]	; (1e094 <init_reset+0x10c>)
   1dfd0:	2207      	movs	r2, #7
   1dfd2:	1d18      	adds	r0, r3, #4
   1dfd4:	2144      	movs	r1, #68	; 0x44
   1dfd6:	f7fc f88f 	bl	1a0f8 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   1dfda:	4b2f      	ldr	r3, [pc, #188]	; (1e098 <init_reset+0x110>)
   1dfdc:	2209      	movs	r2, #9
   1dfde:	1d18      	adds	r0, r3, #4
   1dfe0:	2108      	movs	r1, #8
   1dfe2:	f7fc f889 	bl	1a0f8 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   1dfe6:	482c      	ldr	r0, [pc, #176]	; (1e098 <init_reset+0x110>)
   1dfe8:	f7fc f8b6 	bl	1a158 <mem_acquire>
	LL_ASSERT(link);
   1dfec:	4604      	mov	r4, r0
   1dfee:	b308      	cbz	r0, 1e034 <init_reset+0xac>
	MEMQ_INIT(ull_rx, link);
   1dff0:	4a2a      	ldr	r2, [pc, #168]	; (1e09c <init_reset+0x114>)
   1dff2:	4620      	mov	r0, r4
   1dff4:	1f11      	subs	r1, r2, #4
   1dff6:	f7fc f905 	bl	1a204 <memq_init>
	link = mem_acquire(&mem_link_done.free);
   1dffa:	4825      	ldr	r0, [pc, #148]	; (1e090 <init_reset+0x108>)
   1dffc:	f7fc f8ac 	bl	1a158 <mem_acquire>
	LL_ASSERT(link);
   1e000:	4604      	mov	r4, r0
   1e002:	b328      	cbz	r0, 1e050 <init_reset+0xc8>
	MEMQ_INIT(ull_done, link);
   1e004:	4a26      	ldr	r2, [pc, #152]	; (1e0a0 <init_reset+0x118>)
   1e006:	4620      	mov	r0, r4
   1e008:	1f11      	subs	r1, r2, #4
   1e00a:	f7fc f8fb 	bl	1a204 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   1e00e:	4822      	ldr	r0, [pc, #136]	; (1e098 <init_reset+0x110>)
   1e010:	f7fc f8a2 	bl	1a158 <mem_acquire>
	LL_ASSERT(link);
   1e014:	4604      	mov	r4, r0
   1e016:	b348      	cbz	r0, 1e06c <init_reset+0xe4>
	MEMQ_INIT(ll_rx, link);
   1e018:	4a22      	ldr	r2, [pc, #136]	; (1e0a4 <init_reset+0x11c>)
   1e01a:	4620      	mov	r0, r4
   1e01c:	1f11      	subs	r1, r2, #4
   1e01e:	f7fc f8f1 	bl	1a204 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   1e022:	4b21      	ldr	r3, [pc, #132]	; (1e0a8 <init_reset+0x120>)
   1e024:	2205      	movs	r2, #5
	rx_replenish(UINT8_MAX);
   1e026:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   1e028:	801a      	strh	r2, [r3, #0]
	rx_replenish(UINT8_MAX);
   1e02a:	f7ff f89b 	bl	1d164 <rx_replenish>
}
   1e02e:	2000      	movs	r0, #0
   1e030:	b004      	add	sp, #16
   1e032:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   1e034:	4a1d      	ldr	r2, [pc, #116]	; (1e0ac <init_reset+0x124>)
   1e036:	491e      	ldr	r1, [pc, #120]	; (1e0b0 <init_reset+0x128>)
   1e038:	481e      	ldr	r0, [pc, #120]	; (1e0b4 <init_reset+0x12c>)
   1e03a:	f640 032d 	movw	r3, #2093	; 0x82d
   1e03e:	f00d ffc2 	bl	2bfc6 <assert_print>
   1e042:	4040      	eors	r0, r0
   1e044:	f380 8811 	msr	BASEPRI, r0
   1e048:	f04f 0003 	mov.w	r0, #3
   1e04c:	df02      	svc	2
   1e04e:	e7cf      	b.n	1dff0 <init_reset+0x68>
	LL_ASSERT(link);
   1e050:	4a16      	ldr	r2, [pc, #88]	; (1e0ac <init_reset+0x124>)
   1e052:	4917      	ldr	r1, [pc, #92]	; (1e0b0 <init_reset+0x128>)
   1e054:	4817      	ldr	r0, [pc, #92]	; (1e0b4 <init_reset+0x12c>)
   1e056:	f640 0335 	movw	r3, #2101	; 0x835
   1e05a:	f00d ffb4 	bl	2bfc6 <assert_print>
   1e05e:	4040      	eors	r0, r0
   1e060:	f380 8811 	msr	BASEPRI, r0
   1e064:	f04f 0003 	mov.w	r0, #3
   1e068:	df02      	svc	2
   1e06a:	e7cb      	b.n	1e004 <init_reset+0x7c>
	LL_ASSERT(link);
   1e06c:	4a0f      	ldr	r2, [pc, #60]	; (1e0ac <init_reset+0x124>)
   1e06e:	4910      	ldr	r1, [pc, #64]	; (1e0b0 <init_reset+0x128>)
   1e070:	4810      	ldr	r0, [pc, #64]	; (1e0b4 <init_reset+0x12c>)
   1e072:	f640 033d 	movw	r3, #2109	; 0x83d
   1e076:	f00d ffa6 	bl	2bfc6 <assert_print>
   1e07a:	4040      	eors	r0, r0
   1e07c:	f380 8811 	msr	BASEPRI, r0
   1e080:	f04f 0003 	mov.w	r0, #3
   1e084:	df02      	svc	2
   1e086:	e7c7      	b.n	1e018 <init_reset+0x90>
   1e088:	200003dc 	.word	0x200003dc
   1e08c:	200004b4 	.word	0x200004b4
   1e090:	20002194 	.word	0x20002194
   1e094:	20002210 	.word	0x20002210
   1e098:	200021c4 	.word	0x200021c4
   1e09c:	20002404 	.word	0x20002404
   1e0a0:	200023fc 	.word	0x200023fc
   1e0a4:	200023f4 	.word	0x200023f4
   1e0a8:	200021c0 	.word	0x200021c0
   1e0ac:	000332c4 	.word	0x000332c4
   1e0b0:	00033698 	.word	0x00033698
   1e0b4:	00032fc4 	.word	0x00032fc4

0001e0b8 <ll_init>:
{
   1e0b8:	b530      	push	{r4, r5, lr}
	sem_recv = sem_rx;
   1e0ba:	4b2c      	ldr	r3, [pc, #176]	; (1e16c <ll_init+0xb4>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1e0bc:	4d2c      	ldr	r5, [pc, #176]	; (1e170 <ll_init+0xb8>)
	sem_recv = sem_rx;
   1e0be:	6018      	str	r0, [r3, #0]
{
   1e0c0:	b087      	sub	sp, #28
	cntr_init();
   1e0c2:	f008 fd01 	bl	26ac8 <cntr_init>
	mayfly_init();
   1e0c6:	f7fc f8cd 	bl	1a264 <mayfly_init>
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   1e0ca:	492a      	ldr	r1, [pc, #168]	; (1e174 <ll_init+0xbc>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1e0cc:	4a2a      	ldr	r2, [pc, #168]	; (1e178 <ll_init+0xc0>)
   1e0ce:	9505      	str	r5, [sp, #20]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   1e0d0:	f04f 0c05 	mov.w	ip, #5
   1e0d4:	f881 c008 	strb.w	ip, [r1, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1e0d8:	4c28      	ldr	r4, [pc, #160]	; (1e17c <ll_init+0xc4>)
   1e0da:	9204      	str	r2, [sp, #16]
   1e0dc:	4a28      	ldr	r2, [pc, #160]	; (1e180 <ll_init+0xc8>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   1e0de:	2002      	movs	r0, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1e0e0:	e9cd 2402 	strd	r2, r4, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   1e0e4:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1e0e6:	240d      	movs	r4, #13
   1e0e8:	e9cd 1400 	strd	r1, r4, [sp]
   1e0ec:	4a25      	ldr	r2, [pc, #148]	; (1e184 <ll_init+0xcc>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   1e0ee:	7408      	strb	r0, [r1, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
   1e0f0:	7608      	strb	r0, [r1, #24]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   1e0f2:	700b      	strb	r3, [r1, #0]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1e0f4:	2000      	movs	r0, #0
   1e0f6:	2106      	movs	r1, #6
   1e0f8:	f7fd f996 	bl	1b428 <ticker_init>
	LL_ASSERT(!err);
   1e0fc:	bb40      	cbnz	r0, 1e150 <ll_init+0x98>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e0fe:	2201      	movs	r2, #1
   1e100:	2100      	movs	r1, #0
   1e102:	4821      	ldr	r0, [pc, #132]	; (1e188 <ll_init+0xd0>)
   1e104:	f013 fb57 	bl	317b6 <z_impl_k_sem_init>
	err = lll_init();
   1e108:	f006 ff36 	bl	24f78 <lll_init>
	if (err) {
   1e10c:	4604      	mov	r4, r0
   1e10e:	b110      	cbz	r0, 1e116 <ll_init+0x5e>
}
   1e110:	4620      	mov	r0, r4
   1e112:	b007      	add	sp, #28
   1e114:	bd30      	pop	{r4, r5, pc}
	err = init_reset();
   1e116:	f7ff ff37 	bl	1df88 <init_reset>
	if (err) {
   1e11a:	4604      	mov	r4, r0
   1e11c:	2800      	cmp	r0, #0
   1e11e:	d1f7      	bne.n	1e110 <ll_init+0x58>
	err = lll_adv_init();
   1e120:	f007 fb7c 	bl	2581c <lll_adv_init>
	if (err) {
   1e124:	4604      	mov	r4, r0
   1e126:	2800      	cmp	r0, #0
   1e128:	d1f2      	bne.n	1e110 <ll_init+0x58>
	err = ull_adv_init();
   1e12a:	f000 fcd7 	bl	1eadc <ull_adv_init>
	if (err) {
   1e12e:	4604      	mov	r4, r0
   1e130:	2800      	cmp	r0, #0
   1e132:	d1ed      	bne.n	1e110 <ll_init+0x58>
	err = lll_conn_init();
   1e134:	f008 f82e 	bl	26194 <lll_conn_init>
	if (err) {
   1e138:	4604      	mov	r4, r0
   1e13a:	2800      	cmp	r0, #0
   1e13c:	d1e8      	bne.n	1e110 <ll_init+0x58>
	err = ull_conn_init();
   1e13e:	f001 ff47 	bl	1ffd0 <ull_conn_init>
	if (err) {
   1e142:	4604      	mov	r4, r0
   1e144:	2800      	cmp	r0, #0
   1e146:	d1e3      	bne.n	1e110 <ll_init+0x58>
		ull_filter_reset(true);
   1e148:	2001      	movs	r0, #1
   1e14a:	f006 f8db 	bl	24304 <ull_filter_reset>
	return  0;
   1e14e:	e7df      	b.n	1e110 <ll_init+0x58>
	LL_ASSERT(!err);
   1e150:	4a0e      	ldr	r2, [pc, #56]	; (1e18c <ll_init+0xd4>)
   1e152:	490f      	ldr	r1, [pc, #60]	; (1e190 <ll_init+0xd8>)
   1e154:	480f      	ldr	r0, [pc, #60]	; (1e194 <ll_init+0xdc>)
   1e156:	f240 231f 	movw	r3, #543	; 0x21f
   1e15a:	f00d ff34 	bl	2bfc6 <assert_print>
   1e15e:	4040      	eors	r0, r0
   1e160:	f380 8811 	msr	BASEPRI, r0
   1e164:	f04f 0003 	mov.w	r0, #3
   1e168:	df02      	svc	2
   1e16a:	e7c8      	b.n	1e0fe <ll_init+0x46>
   1e16c:	20002408 	.word	0x20002408
   1e170:	00027795 	.word	0x00027795
   1e174:	200027e8 	.word	0x200027e8
   1e178:	00027645 	.word	0x00027645
   1e17c:	000275e1 	.word	0x000275e1
   1e180:	20002544 	.word	0x20002544
   1e184:	20002424 	.word	0x20002424
   1e188:	2000240c 	.word	0x2000240c
   1e18c:	000332c4 	.word	0x000332c4
   1e190:	00033300 	.word	0x00033300
   1e194:	00032fc4 	.word	0x00032fc4

0001e198 <ll_reset>:
{
   1e198:	b510      	push	{r4, lr}
   1e19a:	b086      	sub	sp, #24
	err = ull_adv_reset();
   1e19c:	f000 fcae 	bl	1eafc <ull_adv_reset>
	LL_ASSERT(!err);
   1e1a0:	bb70      	cbnz	r0, 1e200 <ll_reset+0x68>
	err = ull_conn_reset();
   1e1a2:	f001 ff17 	bl	1ffd4 <ull_conn_reset>
	LL_ASSERT(!err);
   1e1a6:	2800      	cmp	r0, #0
   1e1a8:	d13b      	bne.n	1e222 <ll_reset+0x8a>
	MFIFO_INIT(tx_ack);
   1e1aa:	4b3a      	ldr	r3, [pc, #232]	; (1e294 <ll_reset+0xfc>)
   1e1ac:	2400      	movs	r4, #0
   1e1ae:	809c      	strh	r4, [r3, #4]
		ull_filter_reset(false);
   1e1b0:	4620      	mov	r0, r4
   1e1b2:	f006 f8a7 	bl	24304 <ull_filter_reset>
	MFIFO_INIT(prep);
   1e1b6:	4938      	ldr	r1, [pc, #224]	; (1e298 <ll_reset+0x100>)
	MFIFO_INIT(pdu_rx_free);
   1e1b8:	4a38      	ldr	r2, [pc, #224]	; (1e29c <ll_reset+0x104>)
	MFIFO_INIT(ll_pdu_rx_free);
   1e1ba:	4b39      	ldr	r3, [pc, #228]	; (1e2a0 <ll_reset+0x108>)
	MFIFO_INIT(prep);
   1e1bc:	808c      	strh	r4, [r1, #4]
	MFIFO_INIT(pdu_rx_free);
   1e1be:	8094      	strh	r4, [r2, #4]
	MFIFO_INIT(ll_pdu_rx_free);
   1e1c0:	809c      	strh	r4, [r3, #4]
   1e1c2:	2201      	movs	r2, #1
   1e1c4:	4621      	mov	r1, r4
   1e1c6:	4668      	mov	r0, sp
   1e1c8:	f013 faf5 	bl	317b6 <z_impl_k_sem_init>
		mfy.param = &sem;
   1e1cc:	4b35      	ldr	r3, [pc, #212]	; (1e2a4 <ll_reset+0x10c>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   1e1ce:	4622      	mov	r2, r4
   1e1d0:	4621      	mov	r1, r4
   1e1d2:	2003      	movs	r0, #3
		mfy.param = &sem;
   1e1d4:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   1e1d8:	f7fc f896 	bl	1a308 <mayfly_enqueue>
		LL_ASSERT(!retval);
   1e1dc:	2800      	cmp	r0, #0
   1e1de:	d14b      	bne.n	1e278 <ll_reset+0xe0>
	return z_impl_k_sem_take(sem, timeout);
   1e1e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e1e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e1e8:	4668      	mov	r0, sp
   1e1ea:	f00c fa75 	bl	2a6d8 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   1e1ee:	f000 fc9f 	bl	1eb30 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   1e1f2:	2800      	cmp	r0, #0
   1e1f4:	d132      	bne.n	1e25c <ll_reset+0xc4>
	err = init_reset();
   1e1f6:	f7ff fec7 	bl	1df88 <init_reset>
	LL_ASSERT(!err);
   1e1fa:	bb00      	cbnz	r0, 1e23e <ll_reset+0xa6>
}
   1e1fc:	b006      	add	sp, #24
   1e1fe:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   1e200:	4a29      	ldr	r2, [pc, #164]	; (1e2a8 <ll_reset+0x110>)
   1e202:	492a      	ldr	r1, [pc, #168]	; (1e2ac <ll_reset+0x114>)
   1e204:	482a      	ldr	r0, [pc, #168]	; (1e2b0 <ll_reset+0x118>)
   1e206:	f240 23bf 	movw	r3, #703	; 0x2bf
   1e20a:	f00d fedc 	bl	2bfc6 <assert_print>
   1e20e:	4040      	eors	r0, r0
   1e210:	f380 8811 	msr	BASEPRI, r0
   1e214:	f04f 0003 	mov.w	r0, #3
   1e218:	df02      	svc	2
	err = ull_conn_reset();
   1e21a:	f001 fedb 	bl	1ffd4 <ull_conn_reset>
	LL_ASSERT(!err);
   1e21e:	2800      	cmp	r0, #0
   1e220:	d0c3      	beq.n	1e1aa <ll_reset+0x12>
   1e222:	4a21      	ldr	r2, [pc, #132]	; (1e2a8 <ll_reset+0x110>)
   1e224:	4921      	ldr	r1, [pc, #132]	; (1e2ac <ll_reset+0x114>)
   1e226:	4822      	ldr	r0, [pc, #136]	; (1e2b0 <ll_reset+0x118>)
   1e228:	f240 23f1 	movw	r3, #753	; 0x2f1
   1e22c:	f00d fecb 	bl	2bfc6 <assert_print>
   1e230:	4040      	eors	r0, r0
   1e232:	f380 8811 	msr	BASEPRI, r0
   1e236:	f04f 0003 	mov.w	r0, #3
   1e23a:	df02      	svc	2
   1e23c:	e7b5      	b.n	1e1aa <ll_reset+0x12>
	LL_ASSERT(!err);
   1e23e:	4a1a      	ldr	r2, [pc, #104]	; (1e2a8 <ll_reset+0x110>)
   1e240:	491a      	ldr	r1, [pc, #104]	; (1e2ac <ll_reset+0x114>)
   1e242:	481b      	ldr	r0, [pc, #108]	; (1e2b0 <ll_reset+0x118>)
   1e244:	f240 333a 	movw	r3, #826	; 0x33a
   1e248:	f00d febd 	bl	2bfc6 <assert_print>
   1e24c:	4040      	eors	r0, r0
   1e24e:	f380 8811 	msr	BASEPRI, r0
   1e252:	f04f 0003 	mov.w	r0, #3
   1e256:	df02      	svc	2
}
   1e258:	b006      	add	sp, #24
   1e25a:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   1e25c:	4a12      	ldr	r2, [pc, #72]	; (1e2a8 <ll_reset+0x110>)
   1e25e:	4913      	ldr	r1, [pc, #76]	; (1e2ac <ll_reset+0x114>)
   1e260:	4813      	ldr	r0, [pc, #76]	; (1e2b0 <ll_reset+0x118>)
   1e262:	f240 332d 	movw	r3, #813	; 0x32d
   1e266:	f00d feae 	bl	2bfc6 <assert_print>
   1e26a:	4040      	eors	r0, r0
   1e26c:	f380 8811 	msr	BASEPRI, r0
   1e270:	f04f 0003 	mov.w	r0, #3
   1e274:	df02      	svc	2
   1e276:	e7be      	b.n	1e1f6 <ll_reset+0x5e>
		LL_ASSERT(!retval);
   1e278:	4a0b      	ldr	r2, [pc, #44]	; (1e2a8 <ll_reset+0x110>)
   1e27a:	490e      	ldr	r1, [pc, #56]	; (1e2b4 <ll_reset+0x11c>)
   1e27c:	480c      	ldr	r0, [pc, #48]	; (1e2b0 <ll_reset+0x118>)
   1e27e:	f44f 7348 	mov.w	r3, #800	; 0x320
   1e282:	f00d fea0 	bl	2bfc6 <assert_print>
   1e286:	4040      	eors	r0, r0
   1e288:	f380 8811 	msr	BASEPRI, r0
   1e28c:	f04f 0003 	mov.w	r0, #3
   1e290:	df02      	svc	2
   1e292:	e7a5      	b.n	1e1e0 <ll_reset+0x48>
   1e294:	20000604 	.word	0x20000604
   1e298:	200004fc 	.word	0x200004fc
   1e29c:	200004e0 	.word	0x200004e0
   1e2a0:	200004d0 	.word	0x200004d0
   1e2a4:	2000063c 	.word	0x2000063c
   1e2a8:	000332c4 	.word	0x000332c4
   1e2ac:	00033300 	.word	0x00033300
   1e2b0:	00032fc4 	.word	0x00032fc4
   1e2b4:	00033424 	.word	0x00033424

0001e2b8 <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
   1e2b8:	b510      	push	{r4, lr}
   1e2ba:	b082      	sub	sp, #8
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
   1e2bc:	2400      	movs	r4, #0
   1e2be:	e9cd 4400 	strd	r4, r4, [sp]
   1e2c2:	9b04      	ldr	r3, [sp, #16]
   1e2c4:	f007 f86c 	bl	253a0 <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
   1e2c8:	b002      	add	sp, #8
   1e2ca:	bd10      	pop	{r4, pc}

0001e2cc <lll_resume>:

void lll_resume(void *param)
{
   1e2cc:	b510      	push	{r4, lr}
   1e2ce:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
   1e2d0:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   1e2d2:	691a      	ldr	r2, [r3, #16]
   1e2d4:	6999      	ldr	r1, [r3, #24]
   1e2d6:	2401      	movs	r4, #1
{
   1e2d8:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   1e2da:	4020      	ands	r0, r4
   1e2dc:	e9cd 0400 	strd	r0, r4, [sp]
   1e2e0:	6958      	ldr	r0, [r3, #20]
   1e2e2:	f007 f85d 	bl	253a0 <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   1e2e6:	b108      	cbz	r0, 1e2ec <lll_resume+0x20>
   1e2e8:	3077      	adds	r0, #119	; 0x77
   1e2ea:	d101      	bne.n	1e2f0 <lll_resume+0x24>
}
   1e2ec:	b002      	add	sp, #8
   1e2ee:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   1e2f0:	4a06      	ldr	r2, [pc, #24]	; (1e30c <lll_resume+0x40>)
   1e2f2:	4907      	ldr	r1, [pc, #28]	; (1e310 <lll_resume+0x44>)
   1e2f4:	4807      	ldr	r0, [pc, #28]	; (1e314 <lll_resume+0x48>)
   1e2f6:	234f      	movs	r3, #79	; 0x4f
   1e2f8:	f00d fe65 	bl	2bfc6 <assert_print>
   1e2fc:	4040      	eors	r0, r0
   1e2fe:	f380 8811 	msr	BASEPRI, r0
   1e302:	f04f 0003 	mov.w	r0, #3
   1e306:	df02      	svc	2
}
   1e308:	b002      	add	sp, #8
   1e30a:	bd10      	pop	{r4, pc}
   1e30c:	00033438 	.word	0x00033438
   1e310:	0003347c 	.word	0x0003347c
   1e314:	00032fc4 	.word	0x00032fc4

0001e318 <ticker_stop_cb>:
{
   1e318:	b530      	push	{r4, r5, lr}
   1e31a:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1e31c:	4b19      	ldr	r3, [pc, #100]	; (1e384 <ticker_stop_cb+0x6c>)
{
   1e31e:	9d07      	ldr	r5, [sp, #28]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1e320:	4a19      	ldr	r2, [pc, #100]	; (1e388 <ticker_stop_cb+0x70>)
   1e322:	1aeb      	subs	r3, r5, r3
   1e324:	fba2 2303 	umull	r2, r3, r2, r3
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   1e328:	f413 5f7f 	tst.w	r3, #16320	; 0x3fc0
	handle = ull_adv_handle_get(adv);
   1e32c:	f3c3 1487 	ubfx	r4, r3, #6, #8
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   1e330:	d119      	bne.n	1e366 <ticker_stop_cb+0x4e>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   1e332:	1ca2      	adds	r2, r4, #2
   1e334:	4b15      	ldr	r3, [pc, #84]	; (1e38c <ticker_stop_cb+0x74>)
   1e336:	9500      	str	r5, [sp, #0]
   1e338:	b2d2      	uxtb	r2, r2
   1e33a:	2101      	movs	r1, #1
   1e33c:	2000      	movs	r0, #0
   1e33e:	f7fd f9bb 	bl	1b6b8 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1e342:	f030 0302 	bics.w	r3, r0, #2
   1e346:	d00c      	beq.n	1e362 <ticker_stop_cb+0x4a>
   1e348:	4a11      	ldr	r2, [pc, #68]	; (1e390 <ticker_stop_cb+0x78>)
   1e34a:	4912      	ldr	r1, [pc, #72]	; (1e394 <ticker_stop_cb+0x7c>)
   1e34c:	4812      	ldr	r0, [pc, #72]	; (1e398 <ticker_stop_cb+0x80>)
   1e34e:	f44f 630f 	mov.w	r3, #2288	; 0x8f0
   1e352:	f00d fe38 	bl	2bfc6 <assert_print>
   1e356:	4040      	eors	r0, r0
   1e358:	f380 8811 	msr	BASEPRI, r0
   1e35c:	f04f 0003 	mov.w	r0, #3
   1e360:	df02      	svc	2
}
   1e362:	b003      	add	sp, #12
   1e364:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   1e366:	4a0a      	ldr	r2, [pc, #40]	; (1e390 <ticker_stop_cb+0x78>)
   1e368:	490c      	ldr	r1, [pc, #48]	; (1e39c <ticker_stop_cb+0x84>)
   1e36a:	480b      	ldr	r0, [pc, #44]	; (1e398 <ticker_stop_cb+0x80>)
   1e36c:	f640 03eb 	movw	r3, #2283	; 0x8eb
   1e370:	f00d fe29 	bl	2bfc6 <assert_print>
   1e374:	4040      	eors	r0, r0
   1e376:	f380 8811 	msr	BASEPRI, r0
   1e37a:	f04f 0003 	mov.w	r0, #3
   1e37e:	df02      	svc	2
   1e380:	e7d7      	b.n	1e332 <ticker_stop_cb+0x1a>
   1e382:	bf00      	nop
   1e384:	20002820 	.word	0x20002820
   1e388:	8d3dcb09 	.word	0x8d3dcb09
   1e38c:	0001e435 	.word	0x0001e435
   1e390:	000334a4 	.word	0x000334a4
   1e394:	000334f0 	.word	0x000334f0
   1e398:	00032fc4 	.word	0x00032fc4
   1e39c:	000334e4 	.word	0x000334e4

0001e3a0 <disabled_cb>:
{
   1e3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
   1e3a2:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
   1e3a4:	6e2f      	ldr	r7, [r5, #96]	; 0x60
{
   1e3a6:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   1e3a8:	b1d7      	cbz	r7, 1e3e0 <disabled_cb+0x40>
	LL_ASSERT(adv->node_rx_cc_free);
   1e3aa:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	adv->link_cc_free = NULL;
   1e3ac:	2300      	movs	r3, #0
   1e3ae:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   1e3b0:	b34c      	cbz	r4, 1e406 <disabled_cb+0x66>
	adv->node_rx_cc_free = NULL;
   1e3b2:	2100      	movs	r1, #0
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1e3b4:	2317      	movs	r3, #23
	adv->node_rx_cc_free = NULL;
   1e3b6:	6669      	str	r1, [r5, #100]	; 0x64
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1e3b8:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
   1e3ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e3be:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   1e3c0:	221e      	movs	r2, #30
   1e3c2:	f104 001c 	add.w	r0, r4, #28
   1e3c6:	f00f fe3b 	bl	2e040 <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   1e3ca:	233c      	movs	r3, #60	; 0x3c
   1e3cc:	7723      	strb	r3, [r4, #28]
	rx->hdr.rx_ftr.param = param;
   1e3ce:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
   1e3d0:	4621      	mov	r1, r4
   1e3d2:	4638      	mov	r0, r7
   1e3d4:	f7ff fad4 	bl	1d980 <ll_rx_put>
}
   1e3d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   1e3dc:	f7ff bada 	b.w	1d994 <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
   1e3e0:	4a10      	ldr	r2, [pc, #64]	; (1e424 <disabled_cb+0x84>)
   1e3e2:	4911      	ldr	r1, [pc, #68]	; (1e428 <disabled_cb+0x88>)
   1e3e4:	4811      	ldr	r0, [pc, #68]	; (1e42c <disabled_cb+0x8c>)
   1e3e6:	f640 1338 	movw	r3, #2360	; 0x938
   1e3ea:	f00d fdec 	bl	2bfc6 <assert_print>
   1e3ee:	4040      	eors	r0, r0
   1e3f0:	f380 8811 	msr	BASEPRI, r0
   1e3f4:	f04f 0003 	mov.w	r0, #3
   1e3f8:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
   1e3fa:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	link = adv->link_cc_free;
   1e3fc:	6e2f      	ldr	r7, [r5, #96]	; 0x60
	adv->link_cc_free = NULL;
   1e3fe:	2300      	movs	r3, #0
   1e400:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   1e402:	2c00      	cmp	r4, #0
   1e404:	d1d5      	bne.n	1e3b2 <disabled_cb+0x12>
   1e406:	4a07      	ldr	r2, [pc, #28]	; (1e424 <disabled_cb+0x84>)
   1e408:	4909      	ldr	r1, [pc, #36]	; (1e430 <disabled_cb+0x90>)
   1e40a:	4808      	ldr	r0, [pc, #32]	; (1e42c <disabled_cb+0x8c>)
   1e40c:	f640 133c 	movw	r3, #2364	; 0x93c
   1e410:	f00d fdd9 	bl	2bfc6 <assert_print>
   1e414:	4040      	eors	r0, r0
   1e416:	f380 8811 	msr	BASEPRI, r0
   1e41a:	f04f 0003 	mov.w	r0, #3
   1e41e:	df02      	svc	2
	rx = adv->node_rx_cc_free;
   1e420:	6e6c      	ldr	r4, [r5, #100]	; 0x64
   1e422:	e7c6      	b.n	1e3b2 <disabled_cb+0x12>
   1e424:	000334a4 	.word	0x000334a4
   1e428:	0003350c 	.word	0x0003350c
   1e42c:	00032fc4 	.word	0x00032fc4
   1e430:	00033520 	.word	0x00033520

0001e434 <ticker_stop_op_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
   1e434:	b100      	cbz	r0, 1e438 <ticker_stop_op_cb+0x4>
   1e436:	4770      	bx	lr
	mfy.param = param;
   1e438:	4b0c      	ldr	r3, [pc, #48]	; (1e46c <ticker_stop_op_cb+0x38>)
{
   1e43a:	b510      	push	{r4, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1e43c:	4602      	mov	r2, r0
   1e43e:	460c      	mov	r4, r1
   1e440:	2002      	movs	r0, #2
   1e442:	2101      	movs	r1, #1
	mfy.param = param;
   1e444:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1e446:	f7fb ff5f 	bl	1a308 <mayfly_enqueue>
	LL_ASSERT(!ret);
   1e44a:	b900      	cbnz	r0, 1e44e <ticker_stop_op_cb+0x1a>
}
   1e44c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   1e44e:	4a08      	ldr	r2, [pc, #32]	; (1e470 <ticker_stop_op_cb+0x3c>)
   1e450:	4908      	ldr	r1, [pc, #32]	; (1e474 <ticker_stop_op_cb+0x40>)
   1e452:	4809      	ldr	r0, [pc, #36]	; (1e478 <ticker_stop_op_cb+0x44>)
   1e454:	f640 130c 	movw	r3, #2316	; 0x90c
   1e458:	f00d fdb5 	bl	2bfc6 <assert_print>
   1e45c:	4040      	eors	r0, r0
   1e45e:	f380 8811 	msr	BASEPRI, r0
   1e462:	f04f 0003 	mov.w	r0, #3
   1e466:	df02      	svc	2
}
   1e468:	bd10      	pop	{r4, pc}
   1e46a:	bf00      	nop
   1e46c:	200006ac 	.word	0x200006ac
   1e470:	000334a4 	.word	0x000334a4
   1e474:	000333fc 	.word	0x000333fc
   1e478:	00032fc4 	.word	0x00032fc4

0001e47c <adv_disable>:
{
   1e47c:	b538      	push	{r3, r4, r5, lr}
   1e47e:	4604      	mov	r4, r0
   1e480:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   1e484:	b353      	cbz	r3, 1e4dc <adv_disable+0x60>
		mfy.param = &adv->lll;
   1e486:	4d17      	ldr	r5, [pc, #92]	; (1e4e4 <adv_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   1e488:	6963      	ldr	r3, [r4, #20]
		mfy.param = &adv->lll;
   1e48a:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   1e48c:	b16b      	cbz	r3, 1e4aa <adv_disable+0x2e>
   1e48e:	4a16      	ldr	r2, [pc, #88]	; (1e4e8 <adv_disable+0x6c>)
   1e490:	4916      	ldr	r1, [pc, #88]	; (1e4ec <adv_disable+0x70>)
   1e492:	4817      	ldr	r0, [pc, #92]	; (1e4f0 <adv_disable+0x74>)
   1e494:	f640 1321 	movw	r3, #2337	; 0x921
   1e498:	f00d fd95 	bl	2bfc6 <assert_print>
   1e49c:	4040      	eors	r0, r0
   1e49e:	f380 8811 	msr	BASEPRI, r0
   1e4a2:	f04f 0003 	mov.w	r0, #3
   1e4a6:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   1e4a8:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   1e4aa:	4912      	ldr	r1, [pc, #72]	; (1e4f4 <adv_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1e4ac:	4b0d      	ldr	r3, [pc, #52]	; (1e4e4 <adv_disable+0x68>)
   1e4ae:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   1e4b0:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1e4b4:	4611      	mov	r1, r2
   1e4b6:	2001      	movs	r0, #1
   1e4b8:	f7fb ff26 	bl	1a308 <mayfly_enqueue>
		LL_ASSERT(!ret);
   1e4bc:	b900      	cbnz	r0, 1e4c0 <adv_disable+0x44>
}
   1e4be:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   1e4c0:	4a09      	ldr	r2, [pc, #36]	; (1e4e8 <adv_disable+0x6c>)
   1e4c2:	490d      	ldr	r1, [pc, #52]	; (1e4f8 <adv_disable+0x7c>)
   1e4c4:	480a      	ldr	r0, [pc, #40]	; (1e4f0 <adv_disable+0x74>)
   1e4c6:	f640 1328 	movw	r3, #2344	; 0x928
   1e4ca:	f00d fd7c 	bl	2bfc6 <assert_print>
   1e4ce:	4040      	eors	r0, r0
   1e4d0:	f380 8811 	msr	BASEPRI, r0
   1e4d4:	f04f 0003 	mov.w	r0, #3
   1e4d8:	df02      	svc	2
}
   1e4da:	bd38      	pop	{r3, r4, r5, pc}
   1e4dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&adv->lll);
   1e4e0:	f7ff bf5e 	b.w	1e3a0 <disabled_cb>
   1e4e4:	2000069c 	.word	0x2000069c
   1e4e8:	000334a4 	.word	0x000334a4
   1e4ec:	00033538 	.word	0x00033538
   1e4f0:	00032fc4 	.word	0x00032fc4
   1e4f4:	0001e3a1 	.word	0x0001e3a1
   1e4f8:	000333fc 	.word	0x000333fc

0001e4fc <ticker_update_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   1e4fc:	b900      	cbnz	r0, 1e500 <ticker_update_op_cb+0x4>
   1e4fe:	4770      	bx	lr
{
   1e500:	b510      	push	{r4, lr}
   1e502:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   1e504:	f7ff fb1a 	bl	1db3c <ull_disable_mark_get>
   1e508:	4284      	cmp	r4, r0
   1e50a:	d00c      	beq.n	1e526 <ticker_update_op_cb+0x2a>
   1e50c:	4a06      	ldr	r2, [pc, #24]	; (1e528 <ticker_update_op_cb+0x2c>)
   1e50e:	4907      	ldr	r1, [pc, #28]	; (1e52c <ticker_update_op_cb+0x30>)
   1e510:	4807      	ldr	r0, [pc, #28]	; (1e530 <ticker_update_op_cb+0x34>)
   1e512:	f640 03dd 	movw	r3, #2269	; 0x8dd
   1e516:	f00d fd56 	bl	2bfc6 <assert_print>
   1e51a:	4040      	eors	r0, r0
   1e51c:	f380 8811 	msr	BASEPRI, r0
   1e520:	f04f 0003 	mov.w	r0, #3
   1e524:	df02      	svc	2
}
   1e526:	bd10      	pop	{r4, pc}
   1e528:	000334a4 	.word	0x000334a4
   1e52c:	0003354c 	.word	0x0003354c
   1e530:	00032fc4 	.word	0x00032fc4

0001e534 <init_set.constprop.0>:
	pdu->tx_addr = 0;
	pdu->rx_addr = 0;
	pdu->len = BDADDR_SIZE;
}

static void init_set(struct ll_adv_set *adv)
   1e534:	b500      	push	{lr}
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   1e536:	4b13      	ldr	r3, [pc, #76]	; (1e584 <init_set.constprop.0+0x50>)
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   1e538:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1e53a:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   1e53e:	f893 c06a 	ldrb.w	ip, [r3, #106]	; 0x6a
   1e542:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   1e546:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
   1e54a:	f022 0202 	bic.w	r2, r2, #2
   1e54e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   1e550:	f042 020e 	orr.w	r2, r2, #14
   1e554:	849a      	strh	r2, [r3, #36]	; 0x24
	pdu->len = BDADDR_SIZE;
   1e556:	2006      	movs	r0, #6
	pdu->type = pdu_type;
   1e558:	2200      	movs	r2, #0
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   1e55a:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   1e55e:	f36f 0c42 	bfc	ip, #1, #2
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   1e562:	f8a3 e068 	strh.w	lr, [r3, #104]	; 0x68
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   1e566:	f883 c06a 	strb.w	ip, [r3, #106]	; 0x6a
	pdu->len = BDADDR_SIZE;
   1e56a:	7048      	strb	r0, [r1, #1]
	pdu->type = pdu_type;
   1e56c:	700a      	strb	r2, [r1, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   1e56e:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
   1e572:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1e576:	2204      	movs	r2, #4
   1e578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	pdu->len = BDADDR_SIZE;
   1e57a:	7058      	strb	r0, [r3, #1]
	pdu->type = pdu_type;
   1e57c:	701a      	strb	r2, [r3, #0]
	adv->delay_remain = ULL_ADV_RANDOM_DELAY;
#endif /* ONFIG_BT_CTLR_JIT_SCHEDULING */

	init_pdu(lll_adv_data_peek(&ll_adv[0].lll), PDU_ADV_TYPE_ADV_IND);
	init_pdu(lll_adv_scan_rsp_peek(&ll_adv[0].lll), PDU_ADV_TYPE_SCAN_RSP);
}
   1e57e:	f85d fb04 	ldr.w	pc, [sp], #4
   1e582:	bf00      	nop
   1e584:	20002820 	.word	0x20002820

0001e588 <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
   1e588:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   1e58a:	4c1b      	ldr	r4, [pc, #108]	; (1e5f8 <conn_release.constprop.0+0x70>)
   1e58c:	6a25      	ldr	r5, [r4, #32]
	LL_ASSERT(!lll->link_tx_free);
   1e58e:	6dab      	ldr	r3, [r5, #88]	; 0x58
   1e590:	b163      	cbz	r3, 1e5ac <conn_release.constprop.0+0x24>
   1e592:	4a1a      	ldr	r2, [pc, #104]	; (1e5fc <conn_release.constprop.0+0x74>)
   1e594:	491a      	ldr	r1, [pc, #104]	; (1e600 <conn_release.constprop.0+0x78>)
   1e596:	481b      	ldr	r0, [pc, #108]	; (1e604 <conn_release.constprop.0+0x7c>)
   1e598:	f640 1366 	movw	r3, #2406	; 0x966
   1e59c:	f00d fd13 	bl	2bfc6 <assert_print>
   1e5a0:	4040      	eors	r0, r0
   1e5a2:	f380 8811 	msr	BASEPRI, r0
   1e5a6:	f04f 0003 	mov.w	r0, #3
   1e5aa:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   1e5ac:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   1e5b0:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1e5b4:	f7fb fe2a 	bl	1a20c <memq_deinit>
	LL_ASSERT(link);
   1e5b8:	4606      	mov	r6, r0
   1e5ba:	b170      	cbz	r0, 1e5da <conn_release.constprop.0+0x52>
	ll_conn_release(lll->hdr.parent);
   1e5bc:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   1e5be:	65ae      	str	r6, [r5, #88]	; 0x58
	ll_conn_release(lll->hdr.parent);
   1e5c0:	f001 fa06 	bl	1f9d0 <ll_conn_release>
	adv->lll.conn = NULL;
   1e5c4:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
   1e5c6:	6e60      	ldr	r0, [r4, #100]	; 0x64
	adv->lll.conn = NULL;
   1e5c8:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
   1e5ca:	f7ff f9d3 	bl	1d974 <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
   1e5ce:	6e20      	ldr	r0, [r4, #96]	; 0x60
	adv->node_rx_cc_free = NULL;
   1e5d0:	6665      	str	r5, [r4, #100]	; 0x64
	ll_rx_link_release(adv->link_cc_free);
   1e5d2:	f7ff f9c3 	bl	1d95c <ll_rx_link_release>
	adv->link_cc_free = NULL;
   1e5d6:	6625      	str	r5, [r4, #96]	; 0x60
}
   1e5d8:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   1e5da:	4a08      	ldr	r2, [pc, #32]	; (1e5fc <conn_release.constprop.0+0x74>)
   1e5dc:	490a      	ldr	r1, [pc, #40]	; (1e608 <conn_release.constprop.0+0x80>)
   1e5de:	4809      	ldr	r0, [pc, #36]	; (1e604 <conn_release.constprop.0+0x7c>)
   1e5e0:	f640 1368 	movw	r3, #2408	; 0x968
   1e5e4:	f00d fcef 	bl	2bfc6 <assert_print>
   1e5e8:	4040      	eors	r0, r0
   1e5ea:	f380 8811 	msr	BASEPRI, r0
   1e5ee:	f04f 0003 	mov.w	r0, #3
   1e5f2:	df02      	svc	2
   1e5f4:	e7e2      	b.n	1e5bc <conn_release.constprop.0+0x34>
   1e5f6:	bf00      	nop
   1e5f8:	20002820 	.word	0x20002820
   1e5fc:	000334a4 	.word	0x000334a4
   1e600:	0003357c 	.word	0x0003357c
   1e604:	00032fc4 	.word	0x00032fc4
   1e608:	00033698 	.word	0x00033698

0001e60c <disable.part.0>:
static inline uint8_t disable(uint8_t handle)
   1e60c:	b530      	push	{r4, r5, lr}
	mark = ull_disable_mark(adv);
   1e60e:	4c4c      	ldr	r4, [pc, #304]	; (1e740 <disable.part.0+0x134>)
static inline uint8_t disable(uint8_t handle)
   1e610:	b085      	sub	sp, #20
	mark = ull_disable_mark(adv);
   1e612:	4620      	mov	r0, r4
   1e614:	f7ff fa7c 	bl	1db10 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   1e618:	4284      	cmp	r4, r0
   1e61a:	d00c      	beq.n	1e636 <disable.part.0+0x2a>
   1e61c:	4a49      	ldr	r2, [pc, #292]	; (1e744 <disable.part.0+0x138>)
   1e61e:	494a      	ldr	r1, [pc, #296]	; (1e748 <disable.part.0+0x13c>)
   1e620:	484a      	ldr	r0, [pc, #296]	; (1e74c <disable.part.0+0x140>)
   1e622:	f640 231d 	movw	r3, #2589	; 0xa1d
   1e626:	f00d fcce 	bl	2bfc6 <assert_print>
   1e62a:	4040      	eors	r0, r0
   1e62c:	f380 8811 	msr	BASEPRI, r0
   1e630:	f04f 0003 	mov.w	r0, #3
   1e634:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   1e636:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1e63a:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1e63c:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
   1e63e:	d50d      	bpl.n	1e65c <disable.part.0+0x50>
		ret_cb = TICKER_STATUS_BUSY;
   1e640:	2102      	movs	r1, #2
   1e642:	9103      	str	r1, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1e644:	4b42      	ldr	r3, [pc, #264]	; (1e750 <disable.part.0+0x144>)
   1e646:	9500      	str	r5, [sp, #0]
   1e648:	2103      	movs	r1, #3
   1e64a:	2201      	movs	r2, #1
   1e64c:	2000      	movs	r0, #0
   1e64e:	f7fd f833 	bl	1b6b8 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   1e652:	4629      	mov	r1, r5
   1e654:	f7ff fa34 	bl	1dac0 <ull_ticker_status_take>
		if (ret) {
   1e658:	2800      	cmp	r0, #0
   1e65a:	d15b      	bne.n	1e714 <disable.part.0+0x108>
	ret_cb = TICKER_STATUS_BUSY;
   1e65c:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1e65e:	2103      	movs	r1, #3
   1e660:	4b3b      	ldr	r3, [pc, #236]	; (1e750 <disable.part.0+0x144>)
   1e662:	9500      	str	r5, [sp, #0]
   1e664:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
   1e666:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1e668:	f7fd f826 	bl	1b6b8 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   1e66c:	4629      	mov	r1, r5
   1e66e:	f7ff fa27 	bl	1dac0 <ull_ticker_status_take>
	if (ret) {
   1e672:	bb38      	cbnz	r0, 1e6c4 <disable.part.0+0xb8>
	err = ull_disable(&adv->lll);
   1e674:	4837      	ldr	r0, [pc, #220]	; (1e754 <disable.part.0+0x148>)
   1e676:	f7ff fa83 	bl	1db80 <ull_disable>
	LL_ASSERT(!err || (err == -EALREADY));
   1e67a:	b108      	cbz	r0, 1e680 <disable.part.0+0x74>
   1e67c:	3078      	adds	r0, #120	; 0x78
   1e67e:	d136      	bne.n	1e6ee <disable.part.0+0xe2>
	mark = ull_disable_unmark(adv);
   1e680:	482f      	ldr	r0, [pc, #188]	; (1e740 <disable.part.0+0x134>)
   1e682:	f7ff fa4f 	bl	1db24 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   1e686:	4284      	cmp	r4, r0
   1e688:	d00c      	beq.n	1e6a4 <disable.part.0+0x98>
   1e68a:	4a2e      	ldr	r2, [pc, #184]	; (1e744 <disable.part.0+0x138>)
   1e68c:	492e      	ldr	r1, [pc, #184]	; (1e748 <disable.part.0+0x13c>)
   1e68e:	482f      	ldr	r0, [pc, #188]	; (1e74c <disable.part.0+0x140>)
   1e690:	f640 233f 	movw	r3, #2623	; 0xa3f
   1e694:	f00d fc97 	bl	2bfc6 <assert_print>
   1e698:	4040      	eors	r0, r0
   1e69a:	f380 8811 	msr	BASEPRI, r0
   1e69e:	f04f 0003 	mov.w	r0, #3
   1e6a2:	df02      	svc	2
	if (adv->lll.conn) {
   1e6a4:	6a23      	ldr	r3, [r4, #32]
   1e6a6:	b10b      	cbz	r3, 1e6ac <disable.part.0+0xa0>
		conn_release(adv);
   1e6a8:	f7ff ff6e 	bl	1e588 <conn_release.constprop.0>
	adv->is_enabled = 0U;
   1e6ac:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
		ull_filter_adv_scan_state_cb(0);
   1e6b0:	2000      	movs	r0, #0
	adv->is_enabled = 0U;
   1e6b2:	f36f 0300 	bfc	r3, #0, #1
   1e6b6:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
		ull_filter_adv_scan_state_cb(0);
   1e6ba:	f005 fea3 	bl	24404 <ull_filter_adv_scan_state_cb>
	return 0;
   1e6be:	2000      	movs	r0, #0
}
   1e6c0:	b005      	add	sp, #20
   1e6c2:	bd30      	pop	{r4, r5, pc}
		mark = ull_disable_unmark(adv);
   1e6c4:	481e      	ldr	r0, [pc, #120]	; (1e740 <disable.part.0+0x134>)
   1e6c6:	f7ff fa2d 	bl	1db24 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   1e6ca:	4284      	cmp	r4, r0
   1e6cc:	d034      	beq.n	1e738 <disable.part.0+0x12c>
   1e6ce:	4a1d      	ldr	r2, [pc, #116]	; (1e744 <disable.part.0+0x138>)
   1e6d0:	491d      	ldr	r1, [pc, #116]	; (1e748 <disable.part.0+0x13c>)
   1e6d2:	481e      	ldr	r0, [pc, #120]	; (1e74c <disable.part.0+0x140>)
   1e6d4:	f640 2336 	movw	r3, #2614	; 0xa36
   1e6d8:	f00d fc75 	bl	2bfc6 <assert_print>
   1e6dc:	4040      	eors	r0, r0
   1e6de:	f380 8811 	msr	BASEPRI, r0
   1e6e2:	f04f 0003 	mov.w	r0, #3
   1e6e6:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   1e6e8:	200c      	movs	r0, #12
}
   1e6ea:	b005      	add	sp, #20
   1e6ec:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!err || (err == -EALREADY));
   1e6ee:	4a15      	ldr	r2, [pc, #84]	; (1e744 <disable.part.0+0x138>)
   1e6f0:	4919      	ldr	r1, [pc, #100]	; (1e758 <disable.part.0+0x14c>)
   1e6f2:	4816      	ldr	r0, [pc, #88]	; (1e74c <disable.part.0+0x140>)
   1e6f4:	f640 233c 	movw	r3, #2620	; 0xa3c
   1e6f8:	f00d fc65 	bl	2bfc6 <assert_print>
   1e6fc:	4040      	eors	r0, r0
   1e6fe:	f380 8811 	msr	BASEPRI, r0
   1e702:	f04f 0003 	mov.w	r0, #3
   1e706:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   1e708:	480d      	ldr	r0, [pc, #52]	; (1e740 <disable.part.0+0x134>)
   1e70a:	f7ff fa0b 	bl	1db24 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   1e70e:	4284      	cmp	r4, r0
   1e710:	d1bb      	bne.n	1e68a <disable.part.0+0x7e>
   1e712:	e7c7      	b.n	1e6a4 <disable.part.0+0x98>
			mark = ull_disable_unmark(adv);
   1e714:	480a      	ldr	r0, [pc, #40]	; (1e740 <disable.part.0+0x134>)
   1e716:	f7ff fa05 	bl	1db24 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   1e71a:	4284      	cmp	r4, r0
   1e71c:	d00c      	beq.n	1e738 <disable.part.0+0x12c>
   1e71e:	4a09      	ldr	r2, [pc, #36]	; (1e744 <disable.part.0+0x138>)
   1e720:	4909      	ldr	r1, [pc, #36]	; (1e748 <disable.part.0+0x13c>)
   1e722:	480a      	ldr	r0, [pc, #40]	; (1e74c <disable.part.0+0x140>)
   1e724:	f640 2328 	movw	r3, #2600	; 0xa28
   1e728:	f00d fc4d 	bl	2bfc6 <assert_print>
   1e72c:	4040      	eors	r0, r0
   1e72e:	f380 8811 	msr	BASEPRI, r0
   1e732:	f04f 0003 	mov.w	r0, #3
   1e736:	df02      	svc	2
			return BT_HCI_ERR_CMD_DISALLOWED;
   1e738:	200c      	movs	r0, #12
}
   1e73a:	b005      	add	sp, #20
   1e73c:	bd30      	pop	{r4, r5, pc}
   1e73e:	bf00      	nop
   1e740:	20002820 	.word	0x20002820
   1e744:	000334a4 	.word	0x000334a4
   1e748:	00033590 	.word	0x00033590
   1e74c:	00032fc4 	.word	0x00032fc4
   1e750:	0001d095 	.word	0x0001d095
   1e754:	2000283c 	.word	0x2000283c
   1e758:	0003359c 	.word	0x0003359c

0001e75c <adv_time_get.constprop.0.isra.0>:
static uint16_t adv_time_get(struct pdu_adv *pdu, struct pdu_adv *pdu_scan,
   1e75c:	b410      	push	{r4}
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   1e75e:	7804      	ldrb	r4, [r0, #0]
   1e760:	f004 040f 	and.w	r4, r4, #15
				   rxtx_turn_us * (adv_chn_cnt - 1);
   1e764:	1e53      	subs	r3, r2, #1
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   1e766:	2c02      	cmp	r4, #2
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   1e768:	fa1f fc83 	uxth.w	ip, r3
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   1e76c:	d01f      	beq.n	1e7ae <adv_time_get.constprop.0.isra.0+0x52>
			if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1e76e:	2c01      	cmp	r4, #1
   1e770:	d009      	beq.n	1e786 <adv_time_get.constprop.0.isra.0+0x2a>
			BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
   1e772:	3110      	adds	r1, #16
		const uint16_t scan_rsp_us =
   1e774:	00c9      	lsls	r1, r1, #3
			} else if (pdu->type == PDU_ADV_TYPE_ADV_IND) {
   1e776:	b18c      	cbz	r4, 1e79c <adv_time_get.constprop.0.isra.0+0x40>
			} else if (pdu->type == PDU_ADV_TYPE_SCAN_IND) {
   1e778:	2c06      	cmp	r4, #6
   1e77a:	d00f      	beq.n	1e79c <adv_time_get.constprop.0.isra.0+0x40>
   1e77c:	f44f 732a 	mov.w	r3, #680	; 0x2a8
   1e780:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
   1e784:	e003      	b.n	1e78e <adv_time_get.constprop.0.isra.0+0x32>
   1e786:	f44f 6387 	mov.w	r3, #1080	; 0x438
   1e78a:	f240 2216 	movw	r2, #534	; 0x216
			time_us += (BYTES2US(adv_size, PHY_1M) +
   1e78e:	fb0c 3302 	mla	r3, ip, r2, r3
   1e792:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   1e796:	4018      	ands	r0, r3
}
   1e798:	bc10      	pop	{r4}
   1e79a:	4770      	bx	lr
				adv_size += pdu->len;
   1e79c:	7843      	ldrb	r3, [r0, #1]
   1e79e:	3310      	adds	r3, #16
			time_us += (BYTES2US(adv_size, PHY_1M) +
   1e7a0:	00db      	lsls	r3, r3, #3
   1e7a2:	f501 715c 	add.w	r1, r1, #880	; 0x370
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
   1e7a6:	f503 72b3 	add.w	r2, r3, #358	; 0x166
   1e7aa:	440b      	add	r3, r1
   1e7ac:	e7ef      	b.n	1e78e <adv_time_get.constprop.0.isra.0+0x32>
			adv_size += pdu->len;
   1e7ae:	7840      	ldrb	r0, [r0, #1]
}
   1e7b0:	bc10      	pop	{r4}
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   1e7b2:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
   1e7b6:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1e7ba:	3010      	adds	r0, #16
   1e7bc:	005b      	lsls	r3, r3, #1
   1e7be:	00c1      	lsls	r1, r0, #3
   1e7c0:	f503 70c8 	add.w	r0, r3, #400	; 0x190
   1e7c4:	fb01 0002 	mla	r0, r1, r2, r0
   1e7c8:	b280      	uxth	r0, r0
}
   1e7ca:	4770      	bx	lr

0001e7cc <ticker_cb>:
{
   1e7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e7d0:	461d      	mov	r5, r3
   1e7d2:	b08a      	sub	sp, #40	; 0x28
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   1e7d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e7d8:	429d      	cmp	r5, r3
{
   1e7da:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   1e7de:	9c11      	ldr	r4, [sp, #68]	; 0x44
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   1e7e0:	d018      	beq.n	1e814 <ticker_cb+0x48>
	return ++hdr->ref;
   1e7e2:	7823      	ldrb	r3, [r4, #0]
   1e7e4:	3301      	adds	r3, #1
   1e7e6:	b2db      	uxtb	r3, r3
   1e7e8:	4607      	mov	r7, r0
   1e7ea:	4616      	mov	r6, r2
   1e7ec:	7023      	strb	r3, [r4, #0]
		LL_ASSERT(ref);
   1e7ee:	2b00      	cmp	r3, #0
   1e7f0:	d063      	beq.n	1e8ba <ticker_cb+0xee>
		p.ticks_at_expire = ticks_at_expire;
   1e7f2:	4939      	ldr	r1, [pc, #228]	; (1e8d8 <ticker_cb+0x10c>)
		mfy.param = &p;
   1e7f4:	4b39      	ldr	r3, [pc, #228]	; (1e8dc <ticker_cb+0x110>)
		p.lazy = lazy;
   1e7f6:	810d      	strh	r5, [r1, #8]
	lll = &adv->lll;
   1e7f8:	f104 001c 	add.w	r0, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1e7fc:	2200      	movs	r2, #0
		p.param = lll;
   1e7fe:	60c8      	str	r0, [r1, #12]
		p.remainder = remainder;
   1e800:	e9c1 7600 	strd	r7, r6, [r1]
		p.force = force;
   1e804:	f881 800a 	strb.w	r8, [r1, #10]
		mfy.param = &p;
   1e808:	6099      	str	r1, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1e80a:	2001      	movs	r0, #1
   1e80c:	4611      	mov	r1, r2
   1e80e:	f7fb fd7b 	bl	1a308 <mayfly_enqueue>
		LL_ASSERT(!ret);
   1e812:	b938      	cbnz	r0, 1e824 <ticker_cb+0x58>
	if (!lll->is_hdcd)
   1e814:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   1e818:	f010 0501 	ands.w	r5, r0, #1
   1e81c:	d014      	beq.n	1e848 <ticker_cb+0x7c>
}
   1e81e:	b00a      	add	sp, #40	; 0x28
   1e820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
   1e824:	4a2e      	ldr	r2, [pc, #184]	; (1e8e0 <ticker_cb+0x114>)
   1e826:	492f      	ldr	r1, [pc, #188]	; (1e8e4 <ticker_cb+0x118>)
   1e828:	482f      	ldr	r0, [pc, #188]	; (1e8e8 <ticker_cb+0x11c>)
   1e82a:	f640 03af 	movw	r3, #2223	; 0x8af
   1e82e:	f00d fbca 	bl	2bfc6 <assert_print>
   1e832:	4040      	eors	r0, r0
   1e834:	f380 8811 	msr	BASEPRI, r0
   1e838:	f04f 0003 	mov.w	r0, #3
   1e83c:	df02      	svc	2
	if (!lll->is_hdcd)
   1e83e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   1e842:	f010 0501 	ands.w	r5, r0, #1
   1e846:	d1ea      	bne.n	1e81e <ticker_cb+0x52>
	lll_rand_isr_get(&random_delay, sizeof(random_delay));
   1e848:	2104      	movs	r1, #4
   1e84a:	a809      	add	r0, sp, #36	; 0x24
   1e84c:	f006 fbea 	bl	25024 <lll_rand_isr_get>
	random_delay %= ticks_delay_window;
   1e850:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e852:	4a26      	ldr	r2, [pc, #152]	; (1e8ec <ticker_cb+0x120>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1e854:	9406      	str	r4, [sp, #24]
	random_delay %= ticks_delay_window;
   1e856:	fba2 1203 	umull	r1, r2, r2, r3
   1e85a:	1a99      	subs	r1, r3, r2
   1e85c:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   1e860:	0a12      	lsrs	r2, r2, #8
   1e862:	f240 1147 	movw	r1, #327	; 0x147
   1e866:	fb01 3312 	mls	r3, r1, r2, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1e86a:	4a21      	ldr	r2, [pc, #132]	; (1e8f0 <ticker_cb+0x124>)
   1e86c:	4921      	ldr	r1, [pc, #132]	; (1e8f4 <ticker_cb+0x128>)
   1e86e:	1aa2      	subs	r2, r4, r2
   1e870:	fba1 1202 	umull	r1, r2, r1, r2
   1e874:	0992      	lsrs	r2, r2, #6
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1e876:	4920      	ldr	r1, [pc, #128]	; (1e8f8 <ticker_cb+0x12c>)
   1e878:	3202      	adds	r2, #2
	random_delay += (ticks_delay_window_offset + 1);
   1e87a:	3301      	adds	r3, #1
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1e87c:	e9cd 5104 	strd	r5, r1, [sp, #16]
   1e880:	e9cd 5502 	strd	r5, r5, [sp, #8]
   1e884:	e9cd 5500 	strd	r5, r5, [sp]
   1e888:	b2d2      	uxtb	r2, r2
   1e88a:	2101      	movs	r1, #1
   1e88c:	4628      	mov	r0, r5
	random_delay += (ticks_delay_window_offset + 1);
   1e88e:	9309      	str	r3, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1e890:	f7fc fefa 	bl	1b688 <ticker_update>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1e894:	f030 0302 	bics.w	r3, r0, #2
   1e898:	d0c1      	beq.n	1e81e <ticker_cb+0x52>
   1e89a:	4a11      	ldr	r2, [pc, #68]	; (1e8e0 <ticker_cb+0x114>)
   1e89c:	4917      	ldr	r1, [pc, #92]	; (1e8fc <ticker_cb+0x130>)
   1e89e:	4812      	ldr	r0, [pc, #72]	; (1e8e8 <ticker_cb+0x11c>)
   1e8a0:	f240 7344 	movw	r3, #1860	; 0x744
   1e8a4:	f00d fb8f 	bl	2bfc6 <assert_print>
   1e8a8:	4040      	eors	r0, r0
   1e8aa:	f380 8811 	msr	BASEPRI, r0
   1e8ae:	f04f 0003 	mov.w	r0, #3
   1e8b2:	df02      	svc	2
}
   1e8b4:	b00a      	add	sp, #40	; 0x28
   1e8b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(ref);
   1e8ba:	4a09      	ldr	r2, [pc, #36]	; (1e8e0 <ticker_cb+0x114>)
   1e8bc:	4910      	ldr	r1, [pc, #64]	; (1e900 <ticker_cb+0x134>)
   1e8be:	480a      	ldr	r0, [pc, #40]	; (1e8e8 <ticker_cb+0x11c>)
   1e8c0:	f640 03a2 	movw	r3, #2210	; 0x8a2
   1e8c4:	f00d fb7f 	bl	2bfc6 <assert_print>
   1e8c8:	4040      	eors	r0, r0
   1e8ca:	f380 8811 	msr	BASEPRI, r0
   1e8ce:	f04f 0003 	mov.w	r0, #3
   1e8d2:	df02      	svc	2
   1e8d4:	e78d      	b.n	1e7f2 <ticker_cb+0x26>
   1e8d6:	bf00      	nop
   1e8d8:	200028a0 	.word	0x200028a0
   1e8dc:	2000068c 	.word	0x2000068c
   1e8e0:	000334a4 	.word	0x000334a4
   1e8e4:	000333fc 	.word	0x000333fc
   1e8e8:	00032fc4 	.word	0x00032fc4
   1e8ec:	90d4f121 	.word	0x90d4f121
   1e8f0:	20002820 	.word	0x20002820
   1e8f4:	8d3dcb09 	.word	0x8d3dcb09
   1e8f8:	0001e4fd 	.word	0x0001e4fd
   1e8fc:	000335b8 	.word	0x000335b8
   1e900:	000335b4 	.word	0x000335b4

0001e904 <ll_adv_params_set>:
{
   1e904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!adv || adv->is_enabled) {
   1e908:	4c6d      	ldr	r4, [pc, #436]	; (1eac0 <ll_adv_params_set+0x1bc>)
{
   1e90a:	461f      	mov	r7, r3
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1e90c:	4b6d      	ldr	r3, [pc, #436]	; (1eac4 <ll_adv_params_set+0x1c0>)
	if (!adv || adv->is_enabled) {
   1e90e:	f894 606a 	ldrb.w	r6, [r4, #106]	; 0x6a
{
   1e912:	4680      	mov	r8, r0
   1e914:	468e      	mov	lr, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1e916:	e893 0003 	ldmia.w	r3, {r0, r1}
{
   1e91a:	b082      	sub	sp, #8
	if (!adv || adv->is_enabled) {
   1e91c:	f016 0601 	ands.w	r6, r6, #1
{
   1e920:	4615      	mov	r5, r2
   1e922:	f89d c02c 	ldrb.w	ip, [sp, #44]	; 0x2c
   1e926:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1e92a:	9000      	str	r0, [sp, #0]
   1e92c:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
   1e930:	f040 8089 	bne.w	1ea46 <ll_adv_params_set+0x142>
	adv->lll.chan_map = chan_map;
   1e934:	f00c 0c07 	and.w	ip, ip, #7
   1e938:	f002 0203 	and.w	r2, r2, #3
   1e93c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   1e940:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1e944:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
		adv->interval = 0;
   1e948:	f1be 0f01 	cmp.w	lr, #1
   1e94c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1e950:	bf08      	it	eq
   1e952:	f04f 0800 	moveq.w	r8, #0
	pdu->type = pdu_adv_type[adv_type];
   1e956:	ab02      	add	r3, sp, #8
   1e958:	f8a4 8068 	strh.w	r8, [r4, #104]	; 0x68
   1e95c:	449e      	add	lr, r3
   1e95e:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
	adv->lll.chan_map = chan_map;
   1e962:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
	pdu_type_prev = pdu->type;
   1e964:	f898 9000 	ldrb.w	r9, [r8]
	pdu->type = pdu_adv_type[adv_type];
   1e968:	f81e 3c08 	ldrb.w	r3, [lr, #-8]
	adv->lll.chan_map = chan_map;
   1e96c:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   1e970:	f013 0f0e 	tst.w	r3, #14
	adv->lll.chan_map = chan_map;
   1e974:	f022 0202 	bic.w	r2, r2, #2
	pdu->type = pdu_adv_type[adv_type];
   1e978:	f029 011f 	bic.w	r1, r9, #31
   1e97c:	f003 030f 	and.w	r3, r3, #15
	adv->lll.chan_map = chan_map;
   1e980:	ea4c 0c02 	orr.w	ip, ip, r2
   1e984:	ea43 0301 	orr.w	r3, r3, r1
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   1e988:	bf0c      	ite	eq
   1e98a:	2201      	moveq	r2, #1
   1e98c:	2200      	movne	r2, #0
   1e98e:	f362 1345 	bfi	r3, r2, #5, #1
	adv->lll.chan_map = chan_map;
   1e992:	f8a4 c024 	strh.w	ip, [r4, #36]	; 0x24
	pdu_type_prev = pdu->type;
   1e996:	f888 3000 	strb.w	r3, [r8]
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1e99a:	f003 030f 	and.w	r3, r3, #15
   1e99e:	2b01      	cmp	r3, #1
	pdu_type_prev = pdu->type;
   1e9a0:	f009 090f 	and.w	r9, r9, #15
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1e9a4:	d046      	beq.n	1ea34 <ll_adv_params_set+0x130>
	adv->own_addr_type = own_addr_type;
   1e9a6:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   1e9aa:	f365 0342 	bfi	r3, r5, #1, #2
   1e9ae:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1e9b2:	b2da      	uxtb	r2, r3
   1e9b4:	075b      	lsls	r3, r3, #29
   1e9b6:	d508      	bpl.n	1e9ca <ll_adv_params_set+0xc6>
		adv->peer_addr_type = direct_addr_type;
   1e9b8:	f367 02c3 	bfi	r2, r7, #3, #1
   1e9bc:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
		memcpy(&adv->peer_addr, direct_addr, BDADDR_SIZE);
   1e9c0:	4841      	ldr	r0, [pc, #260]	; (1eac8 <ll_adv_params_set+0x1c4>)
   1e9c2:	990a      	ldr	r1, [sp, #40]	; 0x28
   1e9c4:	2206      	movs	r2, #6
   1e9c6:	f00f fb30 	bl	2e02a <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1e9ca:	f898 3000 	ldrb.w	r3, [r8]
   1e9ce:	f003 020f 	and.w	r2, r3, #15
   1e9d2:	2a01      	cmp	r2, #1
		pdu->tx_addr = own_addr_type & 0x1;
   1e9d4:	f005 0a01 	and.w	sl, r5, #1
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1e9d8:	d03a      	beq.n	1ea50 <ll_adv_params_set+0x14c>
	} else if (pdu->len == 0) {
   1e9da:	f898 2001 	ldrb.w	r2, [r8, #1]
   1e9de:	b1fa      	cbz	r2, 1ea20 <ll_adv_params_set+0x11c>
		if (((pdu_type_prev == PDU_ADV_TYPE_DIRECT_IND) ||
   1e9e0:	f1b9 0f01 	cmp.w	r9, #1
   1e9e4:	d04f      	beq.n	1ea86 <ll_adv_params_set+0x182>
		pdu->tx_addr = own_addr_type & 0x1;
   1e9e6:	f898 3000 	ldrb.w	r3, [r8]
   1e9ea:	f36a 1386 	bfi	r3, sl, #6, #1
		pdu->rx_addr = 0;
   1e9ee:	f36f 13c7 	bfc	r3, #7, #1
   1e9f2:	f888 3000 	strb.w	r3, [r8]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   1e9f6:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   1e9fa:	61e4      	str	r4, [r4, #28]
   1e9fc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1ea00:	01ad      	lsls	r5, r5, #6
   1ea02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1ea04:	f005 0540 	and.w	r5, r5, #64	; 0x40
		if (pdu->len == 0) {
   1ea08:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1ea0a:	f045 0504 	orr.w	r5, r5, #4
   1ea0e:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
   1ea10:	b912      	cbnz	r2, 1ea18 <ll_adv_params_set+0x114>
			pdu->len = BDADDR_SIZE;
   1ea12:	2106      	movs	r1, #6
   1ea14:	7059      	strb	r1, [r3, #1]
	return 0;
   1ea16:	4616      	mov	r6, r2
}
   1ea18:	4630      	mov	r0, r6
   1ea1a:	b002      	add	sp, #8
   1ea1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pdu->tx_addr = own_addr_type & 0x1;
   1ea20:	f36a 1386 	bfi	r3, sl, #6, #1
		pdu->rx_addr = 0;
   1ea24:	f362 13c7 	bfi	r3, r2, #7, #1
   1ea28:	f888 3000 	strb.w	r3, [r8]
		pdu->len = BDADDR_SIZE;
   1ea2c:	2306      	movs	r3, #6
   1ea2e:	f888 3001 	strb.w	r3, [r8, #1]
   1ea32:	e7e0      	b.n	1e9f6 <ll_adv_params_set+0xf2>
	    (pdu_type_prev != PDU_ADV_TYPE_DIRECT_IND) &&
   1ea34:	f1b9 0f01 	cmp.w	r9, #1
   1ea38:	d0b5      	beq.n	1e9a6 <ll_adv_params_set+0xa2>
		if (pdu->len == 0U) {
   1ea3a:	f898 2001 	ldrb.w	r2, [r8, #1]
   1ea3e:	b9b2      	cbnz	r2, 1ea6e <ll_adv_params_set+0x16a>
			adv->ad_data_backup.len = 0U;
   1ea40:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
   1ea44:	e7af      	b.n	1e9a6 <ll_adv_params_set+0xa2>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ea46:	260c      	movs	r6, #12
}
   1ea48:	4630      	mov	r0, r6
   1ea4a:	b002      	add	sp, #8
   1ea4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pdu->rx_addr = direct_addr_type;
   1ea50:	4640      	mov	r0, r8
		pdu->tx_addr = own_addr_type & 0x1;
   1ea52:	f36a 1386 	bfi	r3, sl, #6, #1
		pdu->rx_addr = direct_addr_type;
   1ea56:	f367 13c7 	bfi	r3, r7, #7, #1
   1ea5a:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   1ea5e:	990a      	ldr	r1, [sp, #40]	; 0x28
   1ea60:	2206      	movs	r2, #6
   1ea62:	f00f fae2 	bl	2e02a <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   1ea66:	230c      	movs	r3, #12
   1ea68:	f888 3001 	strb.w	r3, [r8, #1]
   1ea6c:	e7c3      	b.n	1e9f6 <ll_adv_params_set+0xf2>
			LL_ASSERT(pdu->len >=
   1ea6e:	2a05      	cmp	r2, #5
   1ea70:	d916      	bls.n	1eaa0 <ll_adv_params_set+0x19c>
			adv->ad_data_backup.len = pdu->len -
   1ea72:	3a06      	subs	r2, #6
   1ea74:	b2d2      	uxtb	r2, r2
   1ea76:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
   1ea7a:	f108 0108 	add.w	r1, r8, #8
   1ea7e:	4813      	ldr	r0, [pc, #76]	; (1eacc <ll_adv_params_set+0x1c8>)
   1ea80:	f00f fad3 	bl	2e02a <memcpy>
   1ea84:	e78f      	b.n	1e9a6 <ll_adv_params_set+0xa2>
			memcpy(pdu->adv_ind.data, adv->ad_data_backup.data,
   1ea86:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   1ea8a:	4910      	ldr	r1, [pc, #64]	; (1eacc <ll_adv_params_set+0x1c8>)
   1ea8c:	f108 0008 	add.w	r0, r8, #8
   1ea90:	f00f facb 	bl	2e02a <memcpy>
			pdu->len = offsetof(struct pdu_adv_adv_ind, data) +
   1ea94:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   1ea98:	3306      	adds	r3, #6
   1ea9a:	f888 3001 	strb.w	r3, [r8, #1]
   1ea9e:	e7a2      	b.n	1e9e6 <ll_adv_params_set+0xe2>
			LL_ASSERT(pdu->len >=
   1eaa0:	4a0b      	ldr	r2, [pc, #44]	; (1ead0 <ll_adv_params_set+0x1cc>)
   1eaa2:	490c      	ldr	r1, [pc, #48]	; (1ead4 <ll_adv_params_set+0x1d0>)
   1eaa4:	480c      	ldr	r0, [pc, #48]	; (1ead8 <ll_adv_params_set+0x1d4>)
   1eaa6:	f44f 73ce 	mov.w	r3, #412	; 0x19c
   1eaaa:	f00d fa8c 	bl	2bfc6 <assert_print>
   1eaae:	4040      	eors	r0, r0
   1eab0:	f380 8811 	msr	BASEPRI, r0
   1eab4:	f04f 0003 	mov.w	r0, #3
   1eab8:	df02      	svc	2
			adv->ad_data_backup.len = pdu->len -
   1eaba:	f898 2001 	ldrb.w	r2, [r8, #1]
   1eabe:	e7d8      	b.n	1ea72 <ll_adv_params_set+0x16e>
   1eac0:	20002820 	.word	0x20002820
   1eac4:	000325dc 	.word	0x000325dc
   1eac8:	2000288b 	.word	0x2000288b
   1eacc:	20002861 	.word	0x20002861
   1ead0:	000334a4 	.word	0x000334a4
   1ead4:	000335f0 	.word	0x000335f0
   1ead8:	00032fc4 	.word	0x00032fc4

0001eadc <ull_adv_init>:
{
   1eadc:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   1eade:	4c06      	ldr	r4, [pc, #24]	; (1eaf8 <ull_adv_init+0x1c>)
   1eae0:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1eae4:	f006 feca 	bl	2587c <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   1eae8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1eaec:	f006 fec6 	bl	2587c <lll_adv_data_init>
	init_set(&ll_adv[0]);
   1eaf0:	f7ff fd20 	bl	1e534 <init_set.constprop.0>
}
   1eaf4:	2000      	movs	r0, #0
   1eaf6:	bd10      	pop	{r4, pc}
   1eaf8:	20002820 	.word	0x20002820

0001eafc <ull_adv_reset>:
{
   1eafc:	b508      	push	{r3, lr}
	if (!adv || !adv->is_enabled) {
   1eafe:	4b0b      	ldr	r3, [pc, #44]	; (1eb2c <ull_adv_reset+0x30>)
   1eb00:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
   1eb04:	07d2      	lsls	r2, r2, #31
   1eb06:	d50e      	bpl.n	1eb26 <ull_adv_reset+0x2a>
	if (adv->lll.conn) {
   1eb08:	6a1a      	ldr	r2, [r3, #32]
   1eb0a:	b152      	cbz	r2, 1eb22 <ull_adv_reset+0x26>
		adv->lll.conn->periph.cancelled = 1U;
   1eb0c:	f892 1020 	ldrb.w	r1, [r2, #32]
   1eb10:	f041 0102 	orr.w	r1, r1, #2
   1eb14:	f882 1020 	strb.w	r1, [r2, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
   1eb18:	6a1b      	ldr	r3, [r3, #32]
   1eb1a:	f893 3020 	ldrb.w	r3, [r3, #32]
   1eb1e:	07db      	lsls	r3, r3, #31
   1eb20:	d401      	bmi.n	1eb26 <ull_adv_reset+0x2a>
   1eb22:	f7ff fd73 	bl	1e60c <disable.part.0>
}
   1eb26:	2000      	movs	r0, #0
   1eb28:	bd08      	pop	{r3, pc}
   1eb2a:	bf00      	nop
   1eb2c:	20002820 	.word	0x20002820

0001eb30 <ull_adv_reset_finalize>:
{
   1eb30:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&lll->adv_data);
   1eb32:	4c0a      	ldr	r4, [pc, #40]	; (1eb5c <ull_adv_reset_finalize+0x2c>)
   1eb34:	f104 0528 	add.w	r5, r4, #40	; 0x28
   1eb38:	4628      	mov	r0, r5
		lll_adv_data_reset(&lll->scan_rsp);
   1eb3a:	3434      	adds	r4, #52	; 0x34
		lll_adv_data_reset(&lll->adv_data);
   1eb3c:	f006 feae 	bl	2589c <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
   1eb40:	4620      	mov	r0, r4
   1eb42:	f006 feab 	bl	2589c <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   1eb46:	4628      	mov	r0, r5
   1eb48:	f006 fe98 	bl	2587c <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   1eb4c:	4620      	mov	r0, r4
   1eb4e:	f006 fe95 	bl	2587c <lll_adv_data_init>
	init_set(&ll_adv[0]);
   1eb52:	f7ff fcef 	bl	1e534 <init_set.constprop.0>
}
   1eb56:	2000      	movs	r0, #0
   1eb58:	bd38      	pop	{r3, r4, r5, pc}
   1eb5a:	bf00      	nop
   1eb5c:	20002820 	.word	0x20002820

0001eb60 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1eb60:	4a03      	ldr	r2, [pc, #12]	; (1eb70 <ull_adv_handle_get+0x10>)
   1eb62:	4b04      	ldr	r3, [pc, #16]	; (1eb74 <ull_adv_handle_get+0x14>)
   1eb64:	1a80      	subs	r0, r0, r2
   1eb66:	fba3 3000 	umull	r3, r0, r3, r0
}
   1eb6a:	f3c0 108f 	ubfx	r0, r0, #6, #16
   1eb6e:	4770      	bx	lr
   1eb70:	20002820 	.word	0x20002820
   1eb74:	8d3dcb09 	.word	0x8d3dcb09

0001eb78 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1eb78:	4a04      	ldr	r2, [pc, #16]	; (1eb8c <ull_adv_lll_handle_get+0x14>)
   1eb7a:	6800      	ldr	r0, [r0, #0]
   1eb7c:	4b04      	ldr	r3, [pc, #16]	; (1eb90 <ull_adv_lll_handle_get+0x18>)
   1eb7e:	1a80      	subs	r0, r0, r2
   1eb80:	fba3 3000 	umull	r3, r0, r3, r0
}
   1eb84:	f3c0 108f 	ubfx	r0, r0, #6, #16
   1eb88:	4770      	bx	lr
   1eb8a:	bf00      	nop
   1eb8c:	20002820 	.word	0x20002820
   1eb90:	8d3dcb09 	.word	0x8d3dcb09

0001eb94 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   1eb94:	b938      	cbnz	r0, 1eba6 <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   1eb96:	4805      	ldr	r0, [pc, #20]	; (1ebac <ull_adv_is_enabled_get+0x18>)
   1eb98:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
	return &ll_adv[handle];
   1eb9c:	f013 0f01 	tst.w	r3, #1
   1eba0:	bf08      	it	eq
   1eba2:	2000      	moveq	r0, #0
   1eba4:	4770      	bx	lr
		return NULL;
   1eba6:	2000      	movs	r0, #0
}
   1eba8:	4770      	bx	lr
   1ebaa:	bf00      	nop
   1ebac:	20002820 	.word	0x20002820

0001ebb0 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
   1ebb0:	b928      	cbnz	r0, 1ebbe <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   1ebb2:	4b04      	ldr	r3, [pc, #16]	; (1ebc4 <ull_adv_is_enabled+0x14>)
   1ebb4:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
   1ebb8:	f000 0001 	and.w	r0, r0, #1
   1ebbc:	4770      	bx	lr
   1ebbe:	2000      	movs	r0, #0
}
   1ebc0:	4770      	bx	lr
   1ebc2:	bf00      	nop
   1ebc4:	20002820 	.word	0x20002820

0001ebc8 <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   1ebc8:	b950      	cbnz	r0, 1ebe0 <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
   1ebca:	4b06      	ldr	r3, [pc, #24]	; (1ebe4 <ull_adv_filter_pol_get+0x1c>)
   1ebcc:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
   1ebd0:	f010 0001 	ands.w	r0, r0, #1
   1ebd4:	d005      	beq.n	1ebe2 <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
   1ebd6:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
   1ebda:	f000 0003 	and.w	r0, r0, #3
   1ebde:	4770      	bx	lr
		return 0;
   1ebe0:	2000      	movs	r0, #0
}
   1ebe2:	4770      	bx	lr
   1ebe4:	20002820 	.word	0x20002820

0001ebe8 <ull_adv_pdu_update_addrs>:
{
   1ebe8:	b570      	push	{r4, r5, r6, lr}
   1ebea:	4605      	mov	r5, r0
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
   1ebec:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
{
   1ebf0:	460c      	mov	r4, r1
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
   1ebf2:	f005 fd53 	bl	2469c <ull_filter_adva_get>
	if (!rpa || IS_ENABLED(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)) {
   1ebf6:	b310      	cbz	r0, 1ec3e <ull_adv_pdu_update_addrs+0x56>
		pdu->tx_addr = 1;
   1ebf8:	7823      	ldrb	r3, [r4, #0]
   1ebfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1ebfe:	4601      	mov	r1, r0
   1ec00:	7023      	strb	r3, [r4, #0]
	return pdu->adv_ind.addr;
   1ec02:	1ca6      	adds	r6, r4, #2
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   1ec04:	2206      	movs	r2, #6
   1ec06:	4630      	mov	r0, r6
   1ec08:	f00f fa0f 	bl	2e02a <memcpy>
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1ec0c:	7823      	ldrb	r3, [r4, #0]
   1ec0e:	f003 030f 	and.w	r3, r3, #15
   1ec12:	2b01      	cmp	r3, #1
   1ec14:	d001      	beq.n	1ec1a <ull_adv_pdu_update_addrs+0x32>
}
   1ec16:	4630      	mov	r0, r6
   1ec18:	bd70      	pop	{r4, r5, r6, pc}
	rx_addr = ull_filter_tgta_get(adv->lll.rl_idx);
   1ec1a:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
   1ec1e:	f005 fd6b 	bl	246f8 <ull_filter_tgta_get>
	if (rx_addr) {
   1ec22:	4601      	mov	r1, r0
   1ec24:	2800      	cmp	r0, #0
   1ec26:	d0f6      	beq.n	1ec16 <ull_adv_pdu_update_addrs+0x2e>
		pdu->rx_addr = 1;
   1ec28:	7823      	ldrb	r3, [r4, #0]
   1ec2a:	4620      	mov	r0, r4
   1ec2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1ec30:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(tgt_addr, rx_addr, BDADDR_SIZE);
   1ec34:	2206      	movs	r2, #6
   1ec36:	f00f f9f8 	bl	2e02a <memcpy>
}
   1ec3a:	4630      	mov	r0, r6
   1ec3c:	bd70      	pop	{r4, r5, r6, pc}
			own_id_addr = ll_addr_get(pdu->tx_addr);
   1ec3e:	7820      	ldrb	r0, [r4, #0]
   1ec40:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1ec44:	f7fc fd9e 	bl	1b784 <ll_addr_get>
   1ec48:	4601      	mov	r1, r0
	if (rpa) {
   1ec4a:	e7da      	b.n	1ec02 <ull_adv_pdu_update_addrs+0x1a>

0001ec4c <ull_adv_data_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   1ec4c:	291f      	cmp	r1, #31
   1ec4e:	d849      	bhi.n	1ece4 <ull_adv_data_set+0x98>
{
   1ec50:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1ec52:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   1ec56:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1ec5a:	b083      	sub	sp, #12
   1ec5c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1ec5e:	7833      	ldrb	r3, [r6, #0]
   1ec60:	f003 030f 	and.w	r3, r3, #15
   1ec64:	2b01      	cmp	r3, #1
   1ec66:	460d      	mov	r5, r1
   1ec68:	4604      	mov	r4, r0
   1ec6a:	4617      	mov	r7, r2
   1ec6c:	d03c      	beq.n	1ece8 <ull_adv_data_set+0x9c>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   1ec6e:	f10d 0107 	add.w	r1, sp, #7
   1ec72:	3028      	adds	r0, #40	; 0x28
   1ec74:	f006 fe92 	bl	2599c <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
   1ec78:	4631      	mov	r1, r6
   1ec7a:	4606      	mov	r6, r0
   1ec7c:	f811 2b02 	ldrb.w	r2, [r1], #2
   1ec80:	f3c2 1040 	ubfx	r0, r2, #5, #1
	pdu->type = prev->type;
   1ec84:	f3c2 0303 	ubfx	r3, r2, #0, #4
   1ec88:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	pdu->tx_addr = prev->tx_addr;
   1ec8c:	f3c2 1080 	ubfx	r0, r2, #6, #1
	pdu->type = prev->type;
   1ec90:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
   1ec94:	f002 0280 	and.w	r2, r2, #128	; 0x80
   1ec98:	4630      	mov	r0, r6
   1ec9a:	4313      	orrs	r3, r2
   1ec9c:	f800 3b02 	strb.w	r3, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   1eca0:	2206      	movs	r2, #6
   1eca2:	f00f f9c2 	bl	2e02a <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   1eca6:	462a      	mov	r2, r5
   1eca8:	4639      	mov	r1, r7
   1ecaa:	f106 0008 	add.w	r0, r6, #8
	pdu->len = BDADDR_SIZE + len;
   1ecae:	3506      	adds	r5, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   1ecb0:	f00f f9bb 	bl	2e02a <memcpy>
	pdu->len = BDADDR_SIZE + len;
   1ecb4:	7075      	strb	r5, [r6, #1]
	if (adv->is_enabled) {
   1ecb6:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   1ecba:	07db      	lsls	r3, r3, #31
   1ecbc:	d406      	bmi.n	1eccc <ull_adv_data_set+0x80>
	pdu->last = idx;
   1ecbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ecc2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	return 0;
   1ecc6:	2000      	movs	r0, #0
}
   1ecc8:	b003      	add	sp, #12
   1ecca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   1eccc:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   1ecd0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		err = ull_adv_time_update(adv, pdu, pdu_scan);
   1ecd4:	4631      	mov	r1, r6
   1ecd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1ecd8:	4620      	mov	r0, r4
   1ecda:	f7ee f9d5 	bl	d088 <ull_adv_time_update>
		if (err) {
   1ecde:	2800      	cmp	r0, #0
   1ece0:	d0ed      	beq.n	1ecbe <ull_adv_data_set+0x72>
   1ece2:	e7f1      	b.n	1ecc8 <ull_adv_data_set+0x7c>
		return BT_HCI_ERR_INVALID_PARAM;
   1ece4:	2012      	movs	r0, #18
}
   1ece6:	4770      	bx	lr
		adv->ad_data_backup.len = len;
   1ece8:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
		memcpy(adv->ad_data_backup.data, data, adv->ad_data_backup.len);
   1ecec:	460a      	mov	r2, r1
   1ecee:	3041      	adds	r0, #65	; 0x41
   1ecf0:	4639      	mov	r1, r7
   1ecf2:	f00f f99a 	bl	2e02a <memcpy>
		return 0;
   1ecf6:	2000      	movs	r0, #0
}
   1ecf8:	b003      	add	sp, #12
   1ecfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001ecfc <ll_adv_data_set>:
{
   1ecfc:	4603      	mov	r3, r0
   1ecfe:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
   1ed00:	4801      	ldr	r0, [pc, #4]	; (1ed08 <ll_adv_data_set+0xc>)
   1ed02:	4619      	mov	r1, r3
   1ed04:	f7ff bfa2 	b.w	1ec4c <ull_adv_data_set>
   1ed08:	20002820 	.word	0x20002820

0001ed0c <ull_scan_rsp_set.part.0>:
uint8_t ull_scan_rsp_set(struct ll_adv_set *adv, uint8_t len,
   1ed0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ed0e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   1ed12:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1ed16:	b083      	sub	sp, #12
   1ed18:	6b9d      	ldr	r5, [r3, #56]	; 0x38
   1ed1a:	460e      	mov	r6, r1
   1ed1c:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   1ed1e:	f10d 0107 	add.w	r1, sp, #7
   1ed22:	3034      	adds	r0, #52	; 0x34
   1ed24:	4617      	mov	r7, r2
   1ed26:	f006 fe39 	bl	2599c <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
   1ed2a:	4629      	mov	r1, r5
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   1ed2c:	2206      	movs	r2, #6
	pdu->tx_addr = prev->tx_addr;
   1ed2e:	f811 3b02 	ldrb.w	r3, [r1], #2
   1ed32:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1ed36:	019b      	lsls	r3, r3, #6
   1ed38:	f043 0304 	orr.w	r3, r3, #4
   1ed3c:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
   1ed3e:	1db3      	adds	r3, r6, #6
   1ed40:	7043      	strb	r3, [r0, #1]
   1ed42:	4605      	mov	r5, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   1ed44:	3002      	adds	r0, #2
   1ed46:	f00f f970 	bl	2e02a <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   1ed4a:	4632      	mov	r2, r6
   1ed4c:	4639      	mov	r1, r7
   1ed4e:	f105 0008 	add.w	r0, r5, #8
   1ed52:	f00f f96a 	bl	2e02a <memcpy>
	if (adv->is_enabled) {
   1ed56:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   1ed5a:	07db      	lsls	r3, r3, #31
   1ed5c:	d50a      	bpl.n	1ed74 <ull_scan_rsp_set.part.0+0x68>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1ed5e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1ed62:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1ed66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
		if ((pdu_adv_scan->type == PDU_ADV_TYPE_ADV_IND) ||
   1ed68:	780b      	ldrb	r3, [r1, #0]
   1ed6a:	f013 030f 	ands.w	r3, r3, #15
   1ed6e:	d008      	beq.n	1ed82 <ull_scan_rsp_set.part.0+0x76>
   1ed70:	2b06      	cmp	r3, #6
   1ed72:	d006      	beq.n	1ed82 <ull_scan_rsp_set.part.0+0x76>
	pdu->last = idx;
   1ed74:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ed78:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return 0;
   1ed7c:	2000      	movs	r0, #0
}
   1ed7e:	b003      	add	sp, #12
   1ed80:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = ull_adv_time_update(adv, pdu_adv_scan, pdu);
   1ed82:	462a      	mov	r2, r5
   1ed84:	4620      	mov	r0, r4
   1ed86:	f7ee f97f 	bl	d088 <ull_adv_time_update>
			if (err) {
   1ed8a:	2800      	cmp	r0, #0
   1ed8c:	d0f2      	beq.n	1ed74 <ull_scan_rsp_set.part.0+0x68>
   1ed8e:	e7f6      	b.n	1ed7e <ull_scan_rsp_set.part.0+0x72>

0001ed90 <ll_adv_scan_rsp_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   1ed90:	281f      	cmp	r0, #31
{
   1ed92:	4603      	mov	r3, r0
   1ed94:	460a      	mov	r2, r1
	if (len > PDU_AC_DATA_SIZE_MAX) {
   1ed96:	d803      	bhi.n	1eda0 <ll_adv_scan_rsp_set+0x10>
   1ed98:	4802      	ldr	r0, [pc, #8]	; (1eda4 <ll_adv_scan_rsp_set+0x14>)
   1ed9a:	4619      	mov	r1, r3
   1ed9c:	f7ff bfb6 	b.w	1ed0c <ull_scan_rsp_set.part.0>
}
   1eda0:	2012      	movs	r0, #18
   1eda2:	4770      	bx	lr
   1eda4:	20002820 	.word	0x20002820

0001eda8 <init_reset>:
{
   1eda8:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   1edaa:	4b15      	ldr	r3, [pc, #84]	; (1ee00 <init_reset+0x58>)
   1edac:	4815      	ldr	r0, [pc, #84]	; (1ee04 <init_reset+0x5c>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   1edae:	4c16      	ldr	r4, [pc, #88]	; (1ee08 <init_reset+0x60>)
	mem_init(conn_pool, sizeof(struct ll_conn),
   1edb0:	2201      	movs	r2, #1
   1edb2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1edb6:	f7fb f99f 	bl	1a0f8 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_BUF_ACL_TX_COUNT,
   1edba:	4b14      	ldr	r3, [pc, #80]	; (1ee0c <init_reset+0x64>)
   1edbc:	2203      	movs	r2, #3
   1edbe:	1d18      	adds	r0, r3, #4
   1edc0:	2124      	movs	r1, #36	; 0x24
   1edc2:	f7fb f999 	bl	1a0f8 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   1edc6:	4b12      	ldr	r3, [pc, #72]	; (1ee10 <init_reset+0x68>)
   1edc8:	2204      	movs	r2, #4
   1edca:	1898      	adds	r0, r3, r2
   1edcc:	212c      	movs	r1, #44	; 0x2c
   1edce:	f7fb f993 	bl	1a0f8 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   1edd2:	4b10      	ldr	r3, [pc, #64]	; (1ee14 <init_reset+0x6c>)
   1edd4:	2207      	movs	r2, #7
   1edd6:	1d18      	adds	r0, r3, #4
   1edd8:	2108      	movs	r1, #8
   1edda:	f7fb f98d 	bl	1a0f8 <mem_init>
	default_phy_tx |= PHY_2M;
   1edde:	490e      	ldr	r1, [pc, #56]	; (1ee18 <init_reset+0x70>)
	default_phy_rx |= PHY_2M;
   1ede0:	4a0e      	ldr	r2, [pc, #56]	; (1ee1c <init_reset+0x74>)
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   1ede2:	480f      	ldr	r0, [pc, #60]	; (1ee20 <init_reset+0x78>)
	default_phy_tx |= PHY_2M;
   1ede4:	2303      	movs	r3, #3
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   1ede6:	f04f 0c1b 	mov.w	ip, #27
   1edea:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= PHY_2M;
   1edee:	700b      	strb	r3, [r1, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   1edf0:	f44f 7ca4 	mov.w	ip, #328	; 0x148
	default_phy_rx |= PHY_2M;
   1edf4:	7013      	strb	r3, [r2, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   1edf6:	f8a0 c000 	strh.w	ip, [r0]
}
   1edfa:	2000      	movs	r0, #0
   1edfc:	bd10      	pop	{r4, pc}
   1edfe:	bf00      	nop
   1ee00:	200028b0 	.word	0x200028b0
   1ee04:	20001948 	.word	0x20001948
   1ee08:	200032ae 	.word	0x200032ae
   1ee0c:	200028d8 	.word	0x200028d8
   1ee10:	20002948 	.word	0x20002948
   1ee14:	200029fc 	.word	0x200029fc
   1ee18:	2000341f 	.word	0x2000341f
   1ee1c:	2000341e 	.word	0x2000341e
   1ee20:	200032b0 	.word	0x200032b0

0001ee24 <ctrl_tx_pause_enqueue>:
{
   1ee24:	b538      	push	{r3, r4, r5, lr}
   1ee26:	4604      	mov	r4, r0
		if (!conn->tx_ctrl) {
   1ee28:	e9d0 3071 	ldrd	r3, r0, [r0, #452]	; 0x1c4
{
   1ee2c:	460d      	mov	r5, r1
	if (
   1ee2e:	b11b      	cbz	r3, 1ee38 <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
   1ee30:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   1ee34:	0789      	lsls	r1, r1, #30
   1ee36:	d50c      	bpl.n	1ee52 <ctrl_tx_pause_enqueue+0x2e>
		if (!conn->tx_ctrl) {
   1ee38:	b340      	cbz	r0, 1ee8c <ctrl_tx_pause_enqueue+0x68>
			LL_ASSERT(!pause);
   1ee3a:	2a00      	cmp	r2, #0
   1ee3c:	d130      	bne.n	1eea0 <ctrl_tx_pause_enqueue+0x7c>
	tx->next = conn->tx_ctrl_last->next;
   1ee3e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1ee42:	681a      	ldr	r2, [r3, #0]
   1ee44:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   1ee46:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   1ee48:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   1ee4a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1ee4e:	b1d3      	cbz	r3, 1ee86 <ctrl_tx_pause_enqueue+0x62>
}
   1ee50:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
   1ee52:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   1ee56:	07c9      	lsls	r1, r1, #31
   1ee58:	d4ee      	bmi.n	1ee38 <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   1ee5a:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   1ee5e:	428b      	cmp	r3, r1
   1ee60:	d02c      	beq.n	1eebc <ctrl_tx_pause_enqueue+0x98>
		} else if (!conn->tx_ctrl) {
   1ee62:	2800      	cmp	r0, #0
   1ee64:	d036      	beq.n	1eed4 <ctrl_tx_pause_enqueue+0xb0>
			LL_ASSERT(!pause);
   1ee66:	2a00      	cmp	r2, #0
   1ee68:	d0e9      	beq.n	1ee3e <ctrl_tx_pause_enqueue+0x1a>
   1ee6a:	4a22      	ldr	r2, [pc, #136]	; (1eef4 <ctrl_tx_pause_enqueue+0xd0>)
   1ee6c:	4922      	ldr	r1, [pc, #136]	; (1eef8 <ctrl_tx_pause_enqueue+0xd4>)
   1ee6e:	4823      	ldr	r0, [pc, #140]	; (1eefc <ctrl_tx_pause_enqueue+0xd8>)
   1ee70:	f640 238e 	movw	r3, #2702	; 0xa8e
   1ee74:	f00d f8a7 	bl	2bfc6 <assert_print>
   1ee78:	4040      	eors	r0, r0
   1ee7a:	f380 8811 	msr	BASEPRI, r0
   1ee7e:	f04f 0003 	mov.w	r0, #3
   1ee82:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
   1ee84:	e7db      	b.n	1ee3e <ctrl_tx_pause_enqueue+0x1a>
		conn->tx_data_last = tx;
   1ee86:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
}
   1ee8a:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
   1ee8c:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   1ee8e:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
			if (!pause) {
   1ee92:	2a00      	cmp	r2, #0
   1ee94:	d1db      	bne.n	1ee4e <ctrl_tx_pause_enqueue+0x2a>
				conn->tx_ctrl_last = tx;
   1ee96:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
	if (!tx->next) {
   1ee9a:	2b00      	cmp	r3, #0
   1ee9c:	d1d8      	bne.n	1ee50 <ctrl_tx_pause_enqueue+0x2c>
   1ee9e:	e7f2      	b.n	1ee86 <ctrl_tx_pause_enqueue+0x62>
			LL_ASSERT(!pause);
   1eea0:	4a14      	ldr	r2, [pc, #80]	; (1eef4 <ctrl_tx_pause_enqueue+0xd0>)
   1eea2:	4915      	ldr	r1, [pc, #84]	; (1eef8 <ctrl_tx_pause_enqueue+0xd4>)
   1eea4:	4815      	ldr	r0, [pc, #84]	; (1eefc <ctrl_tx_pause_enqueue+0xd8>)
   1eea6:	f44f 632a 	mov.w	r3, #2720	; 0xaa0
   1eeaa:	f00d f88c 	bl	2bfc6 <assert_print>
   1eeae:	4040      	eors	r0, r0
   1eeb0:	f380 8811 	msr	BASEPRI, r0
   1eeb4:	f04f 0003 	mov.w	r0, #3
   1eeb8:	df02      	svc	2
   1eeba:	e7c0      	b.n	1ee3e <ctrl_tx_pause_enqueue+0x1a>
			conn->tx_data = conn->tx_data->next;
   1eebc:	6819      	ldr	r1, [r3, #0]
   1eebe:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1eec2:	2800      	cmp	r0, #0
   1eec4:	d1cf      	bne.n	1ee66 <ctrl_tx_pause_enqueue+0x42>
			tx->next = conn->tx_head->next;
   1eec6:	6819      	ldr	r1, [r3, #0]
   1eec8:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   1eeca:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   1eecc:	682b      	ldr	r3, [r5, #0]
			if (!pause) {
   1eece:	2a00      	cmp	r2, #0
   1eed0:	d0e1      	beq.n	1ee96 <ctrl_tx_pause_enqueue+0x72>
   1eed2:	e7bc      	b.n	1ee4e <ctrl_tx_pause_enqueue+0x2a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1eed4:	7919      	ldrb	r1, [r3, #4]
   1eed6:	f001 0103 	and.w	r1, r1, #3
   1eeda:	2903      	cmp	r1, #3
   1eedc:	d004      	beq.n	1eee8 <ctrl_tx_pause_enqueue+0xc4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1eede:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
			LL_ASSERT(!pause);
   1eee2:	2a00      	cmp	r2, #0
   1eee4:	d0ab      	beq.n	1ee3e <ctrl_tx_pause_enqueue+0x1a>
   1eee6:	e7c0      	b.n	1ee6a <ctrl_tx_pause_enqueue+0x46>
	    ((pdu_data_tx->llctrl.opcode !=
   1eee8:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1eeea:	2903      	cmp	r1, #3
   1eeec:	d0eb      	beq.n	1eec6 <ctrl_tx_pause_enqueue+0xa2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1eeee:	290a      	cmp	r1, #10
   1eef0:	d1f5      	bne.n	1eede <ctrl_tx_pause_enqueue+0xba>
   1eef2:	e7e8      	b.n	1eec6 <ctrl_tx_pause_enqueue+0xa2>
   1eef4:	00033640 	.word	0x00033640
   1eef8:	00033680 	.word	0x00033680
   1eefc:	00032fc4 	.word	0x00032fc4

0001ef00 <tx_lll_flush>:
{
   1ef00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = HDR_LLL2ULL(lll);
   1ef04:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   1ef08:	4934      	ldr	r1, [pc, #208]	; (1efdc <tx_lll_flush+0xdc>)
{
   1ef0a:	b083      	sub	sp, #12
   1ef0c:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   1ef0e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1ef12:	4640      	mov	r0, r8
   1ef14:	f7fb f956 	bl	1a1c4 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1ef18:	f105 0648 	add.w	r6, r5, #72	; 0x48
	lll_conn_flush(handle, lll);
   1ef1c:	4629      	mov	r1, r5
   1ef1e:	f007 f947 	bl	261b0 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1ef22:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   1ef24:	aa01      	add	r2, sp, #4
   1ef26:	4631      	mov	r1, r6
   1ef28:	f7fb f98c 	bl	1a244 <memq_dequeue>
	while (link) {
   1ef2c:	b328      	cbz	r0, 1ef7a <tx_lll_flush+0x7a>
   1ef2e:	4c2c      	ldr	r4, [pc, #176]	; (1efe0 <tx_lll_flush+0xe0>)
		lll_tx->handle = LLL_HANDLE_INVALID;
   1ef30:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1ef34:	f104 0908 	add.w	r9, r4, #8
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1ef38:	7962      	ldrb	r2, [r4, #5]
	if (last == count) {
   1ef3a:	f894 c002 	ldrb.w	ip, [r4, #2]
   1ef3e:	7921      	ldrb	r1, [r4, #4]
	last = last + 1;
   1ef40:	1c53      	adds	r3, r2, #1
   1ef42:	b2db      	uxtb	r3, r3
		last = 0U;
   1ef44:	459c      	cmp	ip, r3
   1ef46:	bf08      	it	eq
   1ef48:	2300      	moveq	r3, #0
	if (last == first) {
   1ef4a:	4299      	cmp	r1, r3
   1ef4c:	f894 c000 	ldrb.w	ip, [r4]
   1ef50:	d033      	beq.n	1efba <tx_lll_flush+0xba>
		lll_tx->node = tx;
   1ef52:	9901      	ldr	r1, [sp, #4]
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1ef54:	fb12 f20c 	smulbb	r2, r2, ip
   1ef58:	eb09 0c02 	add.w	ip, r9, r2
		lll_tx->handle = LLL_HANDLE_INVALID;
   1ef5c:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   1ef60:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
   1ef62:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   1ef66:	6002      	str	r2, [r0, #0]
		tx->next = link;
   1ef68:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1ef6a:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
	*last = idx; /* Commit: Update write index */
   1ef6c:	7163      	strb	r3, [r4, #5]
   1ef6e:	aa01      	add	r2, sp, #4
   1ef70:	4631      	mov	r1, r6
   1ef72:	f7fb f967 	bl	1a244 <memq_dequeue>
	while (link) {
   1ef76:	2800      	cmp	r0, #0
   1ef78:	d1de      	bne.n	1ef38 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   1ef7a:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
	rx = (void *)&conn->llcp_terminate.node_rx;
   1ef7e:	f508 74a2 	add.w	r4, r8, #324	; 0x144
	LL_ASSERT(rx->hdr.link);
   1ef82:	b150      	cbz	r0, 1ef9a <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
   1ef84:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   1ef86:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   1ef88:	f8c8 3144 	str.w	r3, [r8, #324]	; 0x144
	ull_rx_put(link, rx);
   1ef8c:	f7fe feb2 	bl	1dcf4 <ull_rx_put>
	ull_rx_sched();
   1ef90:	f7fe fec0 	bl	1dd14 <ull_rx_sched>
}
   1ef94:	b003      	add	sp, #12
   1ef96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   1ef9a:	4a12      	ldr	r2, [pc, #72]	; (1efe4 <tx_lll_flush+0xe4>)
   1ef9c:	4912      	ldr	r1, [pc, #72]	; (1efe8 <tx_lll_flush+0xe8>)
   1ef9e:	4813      	ldr	r0, [pc, #76]	; (1efec <tx_lll_flush+0xec>)
   1efa0:	f640 13fa 	movw	r3, #2554	; 0x9fa
   1efa4:	f00d f80f 	bl	2bfc6 <assert_print>
   1efa8:	4040      	eors	r0, r0
   1efaa:	f380 8811 	msr	BASEPRI, r0
   1efae:	f04f 0003 	mov.w	r0, #3
   1efb2:	df02      	svc	2
	link = rx->hdr.link;
   1efb4:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
   1efb8:	e7e4      	b.n	1ef84 <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
   1efba:	4a0a      	ldr	r2, [pc, #40]	; (1efe4 <tx_lll_flush+0xe4>)
   1efbc:	490c      	ldr	r1, [pc, #48]	; (1eff0 <tx_lll_flush+0xf0>)
   1efbe:	480b      	ldr	r0, [pc, #44]	; (1efec <tx_lll_flush+0xec>)
   1efc0:	f640 13e6 	movw	r3, #2534	; 0x9e6
   1efc4:	f00c ffff 	bl	2bfc6 <assert_print>
   1efc8:	4040      	eors	r0, r0
   1efca:	f380 8811 	msr	BASEPRI, r0
   1efce:	f04f 0003 	mov.w	r0, #3
   1efd2:	df02      	svc	2
		lll_tx->handle = LLL_HANDLE_INVALID;
   1efd4:	2300      	movs	r3, #0
   1efd6:	801b      	strh	r3, [r3, #0]
   1efd8:	deff      	udf	#255	; 0xff
   1efda:	bf00      	nop
   1efdc:	20001948 	.word	0x20001948
   1efe0:	200006bc 	.word	0x200006bc
   1efe4:	00033640 	.word	0x00033640
   1efe8:	00033690 	.word	0x00033690
   1efec:	00032fc4 	.word	0x00032fc4
   1eff0:	00033688 	.word	0x00033688

0001eff4 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   1eff4:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   1eff8:	f012 0202 	ands.w	r2, r2, #2
   1effc:	d00a      	beq.n	1f014 <ctrl_tx_sec_enqueue+0x20>
		if (!conn->tx_ctrl) {
   1effe:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
   1f002:	b1d3      	cbz	r3, 1f03a <ctrl_tx_sec_enqueue+0x46>
			tx->next = conn->tx_ctrl_last->next;
   1f004:	f8d0 31cc 	ldr.w	r3, [r0, #460]	; 0x1cc
   1f008:	681a      	ldr	r2, [r3, #0]
   1f00a:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   1f00c:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   1f00e:	680b      	ldr	r3, [r1, #0]
   1f010:	b1d3      	cbz	r3, 1f048 <ctrl_tx_sec_enqueue+0x54>
   1f012:	4770      	bx	lr
		if (conn->tx_head) {
   1f014:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   1f018:	b1cb      	cbz	r3, 1f04e <ctrl_tx_sec_enqueue+0x5a>
{
   1f01a:	b500      	push	{lr}
			if ((conn->llcp_req != conn->llcp_ack) &&
   1f01c:	f890 c0e5 	ldrb.w	ip, [r0, #229]	; 0xe5
   1f020:	f890 e0e4 	ldrb.w	lr, [r0, #228]	; 0xe4
   1f024:	45e6      	cmp	lr, ip
   1f026:	d004      	beq.n	1f032 <ctrl_tx_sec_enqueue+0x3e>
   1f028:	f890 c0e6 	ldrb.w	ip, [r0, #230]	; 0xe6
   1f02c:	f1bc 0f03 	cmp.w	ip, #3
   1f030:	d010      	beq.n	1f054 <ctrl_tx_sec_enqueue+0x60>
}
   1f032:	f85d eb04 	ldr.w	lr, [sp], #4
		ctrl_tx_pause_enqueue(conn, tx, pause);
   1f036:	f7ff bef5 	b.w	1ee24 <ctrl_tx_pause_enqueue>
			tx->next = conn->tx_head;
   1f03a:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   1f03e:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   1f040:	f8c0 11c4 	str.w	r1, [r0, #452]	; 0x1c4
		if (!tx->next) {
   1f044:	2b00      	cmp	r3, #0
   1f046:	d1e4      	bne.n	1f012 <ctrl_tx_sec_enqueue+0x1e>
			conn->tx_data_last = tx;
   1f048:	f8c0 11d4 	str.w	r1, [r0, #468]	; 0x1d4
   1f04c:	4770      	bx	lr
	bool pause = false;
   1f04e:	461a      	mov	r2, r3
		ctrl_tx_pause_enqueue(conn, tx, pause);
   1f050:	f7ff bee8 	b.w	1ee24 <ctrl_tx_pause_enqueue>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   1f054:	f893 c004 	ldrb.w	ip, [r3, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   1f058:	f00c 0c03 	and.w	ip, ip, #3
   1f05c:	f1bc 0f03 	cmp.w	ip, #3
   1f060:	d1e7      	bne.n	1f032 <ctrl_tx_sec_enqueue+0x3e>
			    ((pdu_data_tx->llctrl.opcode ==
   1f062:	79da      	ldrb	r2, [r3, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   1f064:	2a03      	cmp	r2, #3
   1f066:	d005      	beq.n	1f074 <ctrl_tx_sec_enqueue+0x80>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   1f068:	f1a2 020a 	sub.w	r2, r2, #10
   1f06c:	fab2 f282 	clz	r2, r2
   1f070:	0952      	lsrs	r2, r2, #5
   1f072:	e7de      	b.n	1f032 <ctrl_tx_sec_enqueue+0x3e>
				pause = true;
   1f074:	2201      	movs	r2, #1
   1f076:	e7dc      	b.n	1f032 <ctrl_tx_sec_enqueue+0x3e>

0001f078 <ticker_stop_op_cb>:
{
   1f078:	b510      	push	{r4, lr}
   1f07a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1f07c:	b9b0      	cbnz	r0, 1f0ac <ticker_stop_op_cb+0x34>
	mfy.param = param;
   1f07e:	4b12      	ldr	r3, [pc, #72]	; (1f0c8 <ticker_stop_op_cb+0x50>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1f080:	2200      	movs	r2, #0
   1f082:	2101      	movs	r1, #1
   1f084:	2002      	movs	r0, #2
	mfy.param = param;
   1f086:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1f088:	f7fb f93e 	bl	1a308 <mayfly_enqueue>
	LL_ASSERT(!ret);
   1f08c:	b900      	cbnz	r0, 1f090 <ticker_stop_op_cb+0x18>
}
   1f08e:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   1f090:	4a0e      	ldr	r2, [pc, #56]	; (1f0cc <ticker_stop_op_cb+0x54>)
   1f092:	490f      	ldr	r1, [pc, #60]	; (1f0d0 <ticker_stop_op_cb+0x58>)
   1f094:	480f      	ldr	r0, [pc, #60]	; (1f0d4 <ticker_stop_op_cb+0x5c>)
   1f096:	f44f 631a 	mov.w	r3, #2464	; 0x9a0
   1f09a:	f00c ff94 	bl	2bfc6 <assert_print>
   1f09e:	4040      	eors	r0, r0
   1f0a0:	f380 8811 	msr	BASEPRI, r0
   1f0a4:	f04f 0003 	mov.w	r0, #3
   1f0a8:	df02      	svc	2
}
   1f0aa:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1f0ac:	4a07      	ldr	r2, [pc, #28]	; (1f0cc <ticker_stop_op_cb+0x54>)
   1f0ae:	490a      	ldr	r1, [pc, #40]	; (1f0d8 <ticker_stop_op_cb+0x60>)
   1f0b0:	4808      	ldr	r0, [pc, #32]	; (1f0d4 <ticker_stop_op_cb+0x5c>)
   1f0b2:	f640 139a 	movw	r3, #2458	; 0x99a
   1f0b6:	f00c ff86 	bl	2bfc6 <assert_print>
   1f0ba:	4040      	eors	r0, r0
   1f0bc:	f380 8811 	msr	BASEPRI, r0
   1f0c0:	f04f 0003 	mov.w	r0, #3
   1f0c4:	df02      	svc	2
   1f0c6:	e7da      	b.n	1f07e <ticker_stop_op_cb+0x6>
   1f0c8:	2000074c 	.word	0x2000074c
   1f0cc:	00033640 	.word	0x00033640
   1f0d0:	000333fc 	.word	0x000333fc
   1f0d4:	00032fc4 	.word	0x00032fc4
   1f0d8:	000336a0 	.word	0x000336a0

0001f0dc <disabled_cb>:
{
   1f0dc:	b508      	push	{r3, lr}
	mfy.param = param;
   1f0de:	4b0b      	ldr	r3, [pc, #44]	; (1f10c <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1f0e0:	2200      	movs	r2, #0
	mfy.param = param;
   1f0e2:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1f0e4:	4611      	mov	r1, r2
   1f0e6:	2001      	movs	r0, #1
   1f0e8:	f7fb f90e 	bl	1a308 <mayfly_enqueue>
	LL_ASSERT(!ret);
   1f0ec:	b900      	cbnz	r0, 1f0f0 <disabled_cb+0x14>
}
   1f0ee:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   1f0f0:	4a07      	ldr	r2, [pc, #28]	; (1f110 <disabled_cb+0x34>)
   1f0f2:	4908      	ldr	r1, [pc, #32]	; (1f114 <disabled_cb+0x38>)
   1f0f4:	4808      	ldr	r0, [pc, #32]	; (1f118 <disabled_cb+0x3c>)
   1f0f6:	f640 13cc 	movw	r3, #2508	; 0x9cc
   1f0fa:	f00c ff64 	bl	2bfc6 <assert_print>
   1f0fe:	4040      	eors	r0, r0
   1f100:	f380 8811 	msr	BASEPRI, r0
   1f104:	f04f 0003 	mov.w	r0, #3
   1f108:	df02      	svc	2
}
   1f10a:	bd08      	pop	{r3, pc}
   1f10c:	2000072c 	.word	0x2000072c
   1f110:	00033640 	.word	0x00033640
   1f114:	000333fc 	.word	0x000333fc
   1f118:	00032fc4 	.word	0x00032fc4

0001f11c <conn_disable>:
{
   1f11c:	b538      	push	{r3, r4, r5, lr}
   1f11e:	4604      	mov	r4, r0
	return hdr->ref;
   1f120:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   1f124:	b353      	cbz	r3, 1f17c <conn_disable+0x60>
		mfy.param = &conn->lll;
   1f126:	4d17      	ldr	r5, [pc, #92]	; (1f184 <conn_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   1f128:	6963      	ldr	r3, [r4, #20]
		mfy.param = &conn->lll;
   1f12a:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   1f12c:	b16b      	cbz	r3, 1f14a <conn_disable+0x2e>
   1f12e:	4a16      	ldr	r2, [pc, #88]	; (1f188 <conn_disable+0x6c>)
   1f130:	4916      	ldr	r1, [pc, #88]	; (1f18c <conn_disable+0x70>)
   1f132:	4817      	ldr	r0, [pc, #92]	; (1f190 <conn_disable+0x74>)
   1f134:	f640 13b5 	movw	r3, #2485	; 0x9b5
   1f138:	f00c ff45 	bl	2bfc6 <assert_print>
   1f13c:	4040      	eors	r0, r0
   1f13e:	f380 8811 	msr	BASEPRI, r0
   1f142:	f04f 0003 	mov.w	r0, #3
   1f146:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   1f148:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   1f14a:	4912      	ldr	r1, [pc, #72]	; (1f194 <conn_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1f14c:	4b0d      	ldr	r3, [pc, #52]	; (1f184 <conn_disable+0x68>)
   1f14e:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   1f150:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1f154:	4611      	mov	r1, r2
   1f156:	2001      	movs	r0, #1
   1f158:	f7fb f8d6 	bl	1a308 <mayfly_enqueue>
		LL_ASSERT(!ret);
   1f15c:	b900      	cbnz	r0, 1f160 <conn_disable+0x44>
}
   1f15e:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   1f160:	4a09      	ldr	r2, [pc, #36]	; (1f188 <conn_disable+0x6c>)
   1f162:	490d      	ldr	r1, [pc, #52]	; (1f198 <conn_disable+0x7c>)
   1f164:	480a      	ldr	r0, [pc, #40]	; (1f190 <conn_disable+0x74>)
   1f166:	f640 13bc 	movw	r3, #2492	; 0x9bc
   1f16a:	f00c ff2c 	bl	2bfc6 <assert_print>
   1f16e:	4040      	eors	r0, r0
   1f170:	f380 8811 	msr	BASEPRI, r0
   1f174:	f04f 0003 	mov.w	r0, #3
   1f178:	df02      	svc	2
}
   1f17a:	bd38      	pop	{r3, r4, r5, pc}
   1f17c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&conn->lll);
   1f180:	f7ff bfac 	b.w	1f0dc <disabled_cb>
   1f184:	2000073c 	.word	0x2000073c
   1f188:	00033640 	.word	0x00033640
   1f18c:	00033538 	.word	0x00033538
   1f190:	00032fc4 	.word	0x00032fc4
   1f194:	0001f0dd 	.word	0x0001f0dd
   1f198:	000333fc 	.word	0x000333fc

0001f19c <conn_setup_adv_scan_disabled_cb>:
{
   1f19c:	b508      	push	{r3, lr}
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   1f19e:	6883      	ldr	r3, [r0, #8]
   1f1a0:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
   1f1a2:	7f53      	ldrb	r3, [r2, #29]
   1f1a4:	09db      	lsrs	r3, r3, #7
   1f1a6:	d10d      	bne.n	1f1c4 <conn_setup_adv_scan_disabled_cb+0x28>
		LL_ASSERT(0);
   1f1a8:	4a09      	ldr	r2, [pc, #36]	; (1f1d0 <conn_setup_adv_scan_disabled_cb+0x34>)
   1f1aa:	490a      	ldr	r1, [pc, #40]	; (1f1d4 <conn_setup_adv_scan_disabled_cb+0x38>)
   1f1ac:	480a      	ldr	r0, [pc, #40]	; (1f1d8 <conn_setup_adv_scan_disabled_cb+0x3c>)
   1f1ae:	f640 03f5 	movw	r3, #2293	; 0x8f5
   1f1b2:	f00c ff08 	bl	2bfc6 <assert_print>
   1f1b6:	4040      	eors	r0, r0
   1f1b8:	f380 8811 	msr	BASEPRI, r0
   1f1bc:	f04f 0003 	mov.w	r0, #3
   1f1c0:	df02      	svc	2
}
   1f1c2:	bd08      	pop	{r3, pc}
		ull_periph_setup(rx, ftr, lll);
   1f1c4:	4601      	mov	r1, r0
}
   1f1c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ull_periph_setup(rx, ftr, lll);
   1f1ca:	3108      	adds	r1, #8
   1f1cc:	f7ee ba64 	b.w	d698 <ull_periph_setup>
   1f1d0:	00033640 	.word	0x00033640
   1f1d4:	0003305c 	.word	0x0003305c
   1f1d8:	00032fc4 	.word	0x00032fc4

0001f1dc <ticker_start_conn_op_cb>:
{
   1f1dc:	b510      	push	{r4, lr}
   1f1de:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1f1e0:	b990      	cbnz	r0, 1f208 <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   1f1e2:	4620      	mov	r0, r4
   1f1e4:	f7fe fcba 	bl	1db5c <ull_update_unmark>
	LL_ASSERT(p == param);
   1f1e8:	4284      	cmp	r4, r0
   1f1ea:	d00c      	beq.n	1f206 <ticker_start_conn_op_cb+0x2a>
   1f1ec:	4a0d      	ldr	r2, [pc, #52]	; (1f224 <ticker_start_conn_op_cb+0x48>)
   1f1ee:	490e      	ldr	r1, [pc, #56]	; (1f228 <ticker_start_conn_op_cb+0x4c>)
   1f1f0:	480e      	ldr	r0, [pc, #56]	; (1f22c <ticker_start_conn_op_cb+0x50>)
   1f1f2:	f640 03ce 	movw	r3, #2254	; 0x8ce
   1f1f6:	f00c fee6 	bl	2bfc6 <assert_print>
   1f1fa:	4040      	eors	r0, r0
   1f1fc:	f380 8811 	msr	BASEPRI, r0
   1f200:	f04f 0003 	mov.w	r0, #3
   1f204:	df02      	svc	2
}
   1f206:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1f208:	4a06      	ldr	r2, [pc, #24]	; (1f224 <ticker_start_conn_op_cb+0x48>)
   1f20a:	4909      	ldr	r1, [pc, #36]	; (1f230 <ticker_start_conn_op_cb+0x54>)
   1f20c:	4807      	ldr	r0, [pc, #28]	; (1f22c <ticker_start_conn_op_cb+0x50>)
   1f20e:	f640 03cb 	movw	r3, #2251	; 0x8cb
   1f212:	f00c fed8 	bl	2bfc6 <assert_print>
   1f216:	4040      	eors	r0, r0
   1f218:	f380 8811 	msr	BASEPRI, r0
   1f21c:	f04f 0003 	mov.w	r0, #3
   1f220:	df02      	svc	2
   1f222:	e7de      	b.n	1f1e2 <ticker_start_conn_op_cb+0x6>
   1f224:	00033640 	.word	0x00033640
   1f228:	000336ac 	.word	0x000336ac
   1f22c:	00032fc4 	.word	0x00032fc4
   1f230:	000336a0 	.word	0x000336a0

0001f234 <ticker_stop_conn_op_cb>:
{
   1f234:	b510      	push	{r4, lr}
   1f236:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1f238:	b990      	cbnz	r0, 1f260 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   1f23a:	4620      	mov	r0, r4
   1f23c:	f7fe fc84 	bl	1db48 <ull_update_mark>
	LL_ASSERT(p == param);
   1f240:	4284      	cmp	r4, r0
   1f242:	d00c      	beq.n	1f25e <ticker_stop_conn_op_cb+0x2a>
   1f244:	4a0d      	ldr	r2, [pc, #52]	; (1f27c <ticker_stop_conn_op_cb+0x48>)
   1f246:	490e      	ldr	r1, [pc, #56]	; (1f280 <ticker_stop_conn_op_cb+0x4c>)
   1f248:	480e      	ldr	r0, [pc, #56]	; (1f284 <ticker_stop_conn_op_cb+0x50>)
   1f24a:	f640 03c4 	movw	r3, #2244	; 0x8c4
   1f24e:	f00c feba 	bl	2bfc6 <assert_print>
   1f252:	4040      	eors	r0, r0
   1f254:	f380 8811 	msr	BASEPRI, r0
   1f258:	f04f 0003 	mov.w	r0, #3
   1f25c:	df02      	svc	2
}
   1f25e:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1f260:	4a06      	ldr	r2, [pc, #24]	; (1f27c <ticker_stop_conn_op_cb+0x48>)
   1f262:	4909      	ldr	r1, [pc, #36]	; (1f288 <ticker_stop_conn_op_cb+0x54>)
   1f264:	4807      	ldr	r0, [pc, #28]	; (1f284 <ticker_stop_conn_op_cb+0x50>)
   1f266:	f640 03c1 	movw	r3, #2241	; 0x8c1
   1f26a:	f00c feac 	bl	2bfc6 <assert_print>
   1f26e:	4040      	eors	r0, r0
   1f270:	f380 8811 	msr	BASEPRI, r0
   1f274:	f04f 0003 	mov.w	r0, #3
   1f278:	df02      	svc	2
   1f27a:	e7de      	b.n	1f23a <ticker_stop_conn_op_cb+0x6>
   1f27c:	00033640 	.word	0x00033640
   1f280:	000336ac 	.word	0x000336ac
   1f284:	00032fc4 	.word	0x00032fc4
   1f288:	000336a0 	.word	0x000336a0

0001f28c <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   1f28c:	b900      	cbnz	r0, 1f290 <ticker_update_conn_op_cb+0x4>
   1f28e:	4770      	bx	lr
{
   1f290:	b510      	push	{r4, lr}
   1f292:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   1f294:	f7fe fc6e 	bl	1db74 <ull_update_mark_get>
   1f298:	4284      	cmp	r4, r0
   1f29a:	d010      	beq.n	1f2be <ticker_update_conn_op_cb+0x32>
   1f29c:	f7fe fc4e 	bl	1db3c <ull_disable_mark_get>
   1f2a0:	4284      	cmp	r4, r0
   1f2a2:	d00c      	beq.n	1f2be <ticker_update_conn_op_cb+0x32>
   1f2a4:	4a06      	ldr	r2, [pc, #24]	; (1f2c0 <ticker_update_conn_op_cb+0x34>)
   1f2a6:	4907      	ldr	r1, [pc, #28]	; (1f2c4 <ticker_update_conn_op_cb+0x38>)
   1f2a8:	4807      	ldr	r0, [pc, #28]	; (1f2c8 <ticker_update_conn_op_cb+0x3c>)
   1f2aa:	f640 03b8 	movw	r3, #2232	; 0x8b8
   1f2ae:	f00c fe8a 	bl	2bfc6 <assert_print>
   1f2b2:	4040      	eors	r0, r0
   1f2b4:	f380 8811 	msr	BASEPRI, r0
   1f2b8:	f04f 0003 	mov.w	r0, #3
   1f2bc:	df02      	svc	2
}
   1f2be:	bd10      	pop	{r4, pc}
   1f2c0:	00033640 	.word	0x00033640
   1f2c4:	000336b8 	.word	0x000336b8
   1f2c8:	00032fc4 	.word	0x00032fc4

0001f2cc <tx_ull_dequeue>:
{
   1f2cc:	b410      	push	{r4}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   1f2ce:	e9d0 2471 	ldrd	r2, r4, [r0, #452]	; 0x1c4
{
   1f2d2:	4603      	mov	r3, r0
   1f2d4:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   1f2d6:	b164      	cbz	r4, 1f2f2 <tx_ull_dequeue+0x26>
	if (conn->tx_head == conn->tx_ctrl) {
   1f2d8:	4294      	cmp	r4, r2
   1f2da:	d021      	beq.n	1f320 <tx_ull_dequeue+0x54>
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   1f2dc:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
   1f2e0:	428a      	cmp	r2, r1
   1f2e2:	d00b      	beq.n	1f2fc <tx_ull_dequeue+0x30>
		conn->tx_head = conn->tx_head->next;
   1f2e4:	6811      	ldr	r1, [r2, #0]
   1f2e6:	f8c3 11c4 	str.w	r1, [r3, #452]	; 0x1c4
		tx->next = NULL;
   1f2ea:	2200      	movs	r2, #0
}
   1f2ec:	bc10      	pop	{r4}
		tx->next = NULL;
   1f2ee:	6002      	str	r2, [r0, #0]
}
   1f2f0:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   1f2f2:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
   1f2f6:	4291      	cmp	r1, r2
   1f2f8:	d104      	bne.n	1f304 <tx_ull_dequeue+0x38>
	if (conn->tx_head == conn->tx_ctrl) {
   1f2fa:	b18a      	cbz	r2, 1f320 <tx_ull_dequeue+0x54>
			conn->tx_data = conn->tx_data->next;
   1f2fc:	6809      	ldr	r1, [r1, #0]
   1f2fe:	f8c3 11d0 	str.w	r1, [r3, #464]	; 0x1d0
   1f302:	e7ef      	b.n	1f2e4 <tx_ull_dequeue+0x18>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1f304:	7911      	ldrb	r1, [r2, #4]
   1f306:	f001 0103 	and.w	r1, r1, #3
   1f30a:	2903      	cmp	r1, #3
   1f30c:	d013      	beq.n	1f336 <tx_ull_dequeue+0x6a>
		conn->tx_head = conn->tx_head->next;
   1f30e:	6812      	ldr	r2, [r2, #0]
   1f310:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
			conn->tx_ctrl = NULL;
   1f314:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   1f316:	e9c3 2272 	strd	r2, r2, [r3, #456]	; 0x1c8
}
   1f31a:	bc10      	pop	{r4}
		tx->next = tx;
   1f31c:	6000      	str	r0, [r0, #0]
}
   1f31e:	4770      	bx	lr
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   1f320:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
		conn->tx_head = conn->tx_head->next;
   1f324:	6812      	ldr	r2, [r2, #0]
   1f326:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   1f32a:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
   1f32c:	bf18      	it	ne
   1f32e:	f8c3 21c8 	strne.w	r2, [r3, #456]	; 0x1c8
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   1f332:	d1f2      	bne.n	1f31a <tx_ull_dequeue+0x4e>
   1f334:	e7ee      	b.n	1f314 <tx_ull_dequeue+0x48>
	    ((pdu_data_tx->llctrl.opcode !=
   1f336:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1f338:	2903      	cmp	r1, #3
   1f33a:	d0d3      	beq.n	1f2e4 <tx_ull_dequeue+0x18>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1f33c:	290a      	cmp	r1, #10
   1f33e:	d1e6      	bne.n	1f30e <tx_ull_dequeue+0x42>
   1f340:	e7d0      	b.n	1f2e4 <tx_ull_dequeue+0x18>
   1f342:	bf00      	nop

0001f344 <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
   1f344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f346:	4604      	mov	r4, r0
	if (conn->common.txn_lock) {
   1f348:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
   1f34c:	0787      	lsls	r7, r0, #30
{
   1f34e:	460d      	mov	r5, r1
	if (conn->common.txn_lock) {
   1f350:	d433      	bmi.n	1f3ba <reject_ext_ind_send+0x76>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1f352:	482e      	ldr	r0, [pc, #184]	; (1f40c <reject_ext_ind_send+0xc8>)
   1f354:	4617      	mov	r7, r2
   1f356:	461e      	mov	r6, r3
   1f358:	f7fa fefe 	bl	1a158 <mem_acquire>
	if (!tx) {
   1f35c:	2800      	cmp	r0, #0
   1f35e:	d038      	beq.n	1f3d2 <reject_ext_ind_send+0x8e>
	conn->common.txn_lock = 1U;
   1f360:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1f364:	f043 0302 	orr.w	r3, r3, #2
   1f368:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_ctrl_tx = (void *)tx->pdu;

	ull_pdu_data_init(pdu_ctrl_tx);

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   1f36c:	2303      	movs	r3, #3
   1f36e:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   1f370:	2211      	movs	r2, #17
	    conn->tx_head &&
   1f372:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   1f376:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1f378:	7902      	ldrb	r2, [r0, #4]
		if (!conn->tx_ctrl) {
   1f37a:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   1f37e:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1f380:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   1f384:	7246      	strb	r6, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1f386:	7102      	strb	r2, [r0, #4]
	if (
   1f388:	b1db      	cbz	r3, 1f3c2 <reject_ext_ind_send+0x7e>
	    !conn->llcp_enc.pause_tx &&
   1f38a:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1f38e:	0796      	lsls	r6, r2, #30
   1f390:	d417      	bmi.n	1f3c2 <reject_ext_ind_send+0x7e>
	    !conn->llcp_phy.pause_tx &&
   1f392:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1f396:	07d2      	lsls	r2, r2, #31
   1f398:	d413      	bmi.n	1f3c2 <reject_ext_ind_send+0x7e>
		if (conn->tx_head == conn->tx_data) {
   1f39a:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   1f39e:	4293      	cmp	r3, r2
   1f3a0:	d022      	beq.n	1f3e8 <reject_ext_ind_send+0xa4>
		} else if (!conn->tx_ctrl) {
   1f3a2:	b1c9      	cbz	r1, 1f3d8 <reject_ext_ind_send+0x94>
	tx->next = conn->tx_ctrl_last->next;
   1f3a4:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1f3a8:	681a      	ldr	r2, [r3, #0]
   1f3aa:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1f3ac:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1f3ae:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   1f3b0:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1f3b4:	b90b      	cbnz	r3, 1f3ba <reject_ext_ind_send+0x76>
		conn->tx_data_last = tx;
   1f3b6:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1f3ba:	2301      	movs	r3, #1
   1f3bc:	712b      	strb	r3, [r5, #4]
		*err = 0U;
   1f3be:	2000      	movs	r0, #0

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;

	return 0;
}
   1f3c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!conn->tx_ctrl) {
   1f3c2:	2900      	cmp	r1, #0
   1f3c4:	d1ee      	bne.n	1f3a4 <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head;
   1f3c6:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   1f3c8:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1f3cc:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   1f3d0:	e7f0      	b.n	1f3b4 <reject_ext_ind_send+0x70>
		*err = -ENOBUFS;
   1f3d2:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1f3d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1f3d8:	791a      	ldrb	r2, [r3, #4]
   1f3da:	f002 0203 	and.w	r2, r2, #3
   1f3de:	2a03      	cmp	r2, #3
   1f3e0:	d00e      	beq.n	1f400 <reject_ext_ind_send+0xbc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1f3e2:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   1f3e6:	e7df      	b.n	1f3a8 <reject_ext_ind_send+0x64>
			conn->tx_data = conn->tx_data->next;
   1f3e8:	681a      	ldr	r2, [r3, #0]
   1f3ea:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1f3ee:	2900      	cmp	r1, #0
   1f3f0:	d1d8      	bne.n	1f3a4 <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head->next;
   1f3f2:	681a      	ldr	r2, [r3, #0]
   1f3f4:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1f3f6:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1f3f8:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   1f3fa:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   1f3fe:	e7d9      	b.n	1f3b4 <reject_ext_ind_send+0x70>
	    ((pdu_data_tx->llctrl.opcode !=
   1f400:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1f402:	2a03      	cmp	r2, #3
   1f404:	d0f5      	beq.n	1f3f2 <reject_ext_ind_send+0xae>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1f406:	2a0a      	cmp	r2, #10
   1f408:	d1eb      	bne.n	1f3e2 <reject_ext_ind_send+0x9e>
   1f40a:	e7f2      	b.n	1f3f2 <reject_ext_ind_send+0xae>
   1f40c:	20002948 	.word	0x20002948

0001f410 <event_len_prep>:
{
   1f410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp_length.state) {
   1f412:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   1f416:	f003 0207 	and.w	r2, r3, #7
{
   1f41a:	4604      	mov	r4, r0
	switch (conn->llcp_length.state) {
   1f41c:	2a06      	cmp	r2, #6
   1f41e:	f200 80d4 	bhi.w	1f5ca <event_len_prep+0x1ba>
   1f422:	e8df f002 	tbb	[pc, r2]
   1f426:	4704      	.short	0x4704
   1f428:	48484747 	.word	0x48484747
   1f42c:	47          	.byte	0x47
   1f42d:	00          	.byte	0x00
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1f42e:	486e      	ldr	r0, [pc, #440]	; (1f5e8 <event_len_prep+0x1d8>)
   1f430:	f7fa fe92 	bl	1a158 <mem_acquire>
		if (!tx) {
   1f434:	2800      	cmp	r0, #0
   1f436:	d03d      	beq.n	1f4b4 <event_len_prep+0xa4>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   1f438:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   1f43c:	f8b4 21b2 	ldrh.w	r2, [r4, #434]	; 0x1b2
		conn->default_tx_time = conn->llcp_length.tx_time;
   1f440:	f8b4 51b6 	ldrh.w	r5, [r4, #438]	; 0x1b6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   1f444:	f8a4 20d2 	strh.w	r2, [r4, #210]	; 0xd2
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   1f448:	2301      	movs	r3, #1
   1f44a:	f363 0102 	bfi	r1, r3, #0, #3
		conn->default_tx_time = conn->llcp_length.tx_time;
   1f44e:	f8a4 50d4 	strh.w	r5, [r4, #212]	; 0xd4
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   1f452:	f884 11ae 	strb.w	r1, [r4, #430]	; 0x1ae
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   1f456:	8182      	strh	r2, [r0, #12]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   1f458:	72c3      	strb	r3, [r0, #11]
   1f45a:	2248      	movs	r2, #72	; 0x48
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   1f45c:	73c3      	strb	r3, [r0, #15]
		pdu_ctrl_tx->len =
   1f45e:	2309      	movs	r3, #9
   1f460:	7143      	strb	r3, [r0, #5]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   1f462:	7282      	strb	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   1f464:	7382      	strb	r2, [r0, #14]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   1f466:	2214      	movs	r2, #20
	    conn->tx_head &&
   1f468:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   1f46c:	71c2      	strb	r2, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   1f46e:	2100      	movs	r1, #0
   1f470:	221b      	movs	r2, #27
   1f472:	7241      	strb	r1, [r0, #9]
		if (!conn->tx_ctrl) {
   1f474:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   1f478:	7202      	strb	r2, [r0, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1f47a:	7902      	ldrb	r2, [r0, #4]
   1f47c:	f042 0203 	orr.w	r2, r2, #3
   1f480:	7102      	strb	r2, [r0, #4]
	if (
   1f482:	b13b      	cbz	r3, 1f494 <event_len_prep+0x84>
	    !conn->llcp_enc.pause_tx &&
   1f484:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1f488:	0795      	lsls	r5, r2, #30
   1f48a:	d403      	bmi.n	1f494 <event_len_prep+0x84>
	    !conn->llcp_phy.pause_tx &&
   1f48c:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1f490:	07d2      	lsls	r2, r2, #31
   1f492:	d573      	bpl.n	1f57c <event_len_prep+0x16c>
		if (!conn->tx_ctrl) {
   1f494:	2900      	cmp	r1, #0
   1f496:	d07f      	beq.n	1f598 <event_len_prep+0x188>
	tx->next = conn->tx_ctrl_last->next;
   1f498:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1f49c:	681a      	ldr	r2, [r3, #0]
   1f49e:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1f4a0:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1f4a2:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   1f4a4:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1f4a8:	2b00      	cmp	r3, #0
   1f4aa:	d056      	beq.n	1f55a <event_len_prep+0x14a>
		conn->procedure_expire = conn->procedure_reload;
   1f4ac:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   1f4b0:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
}
   1f4b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   1f4b6:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   1f4ba:	f8b0 c1b0 	ldrh.w	ip, [r0, #432]	; 0x1b0
		lll->max_rx_time = conn->llcp_length.rx_time;
   1f4be:	f8b0 11b4 	ldrh.w	r1, [r0, #436]	; 0x1b4
		tx_octets = conn->llcp_length.tx_octets;
   1f4c2:	f8b0 71b2 	ldrh.w	r7, [r0, #434]	; 0x1b2
		uint16_t tx_time = conn->llcp_length.tx_time;
   1f4c6:	f8b0 61b6 	ldrh.w	r6, [r0, #438]	; 0x1b6
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   1f4ca:	f8a0 c05a 	strh.w	ip, [r0, #90]	; 0x5a
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   1f4ce:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
   1f4d0:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   1f4d4:	d024      	beq.n	1f520 <event_len_prep+0x110>
			conn->llcp_length.state =
   1f4d6:	2206      	movs	r2, #6
   1f4d8:	f362 0302 	bfi	r3, r2, #0, #3
   1f4dc:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
		rx = conn->llcp_rx;
   1f4e0:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   1f4e4:	b335      	cbz	r5, 1f534 <event_len_prep+0x124>
   1f4e6:	6828      	ldr	r0, [r5, #0]
   1f4e8:	b320      	cbz	r0, 1f534 <event_len_prep+0x124>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   1f4ea:	7f2b      	ldrb	r3, [r5, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   1f4ec:	6842      	ldr	r2, [r0, #4]
   1f4ee:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   1f4f2:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.handle = conn->lll.handle;
   1f4f6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   1f4f8:	772b      	strb	r3, [r5, #28]
		pdu_ctrl_rx->len =
   1f4fa:	2309      	movs	r3, #9
		rx->hdr.handle = conn->lll.handle;
   1f4fc:	80ea      	strh	r2, [r5, #6]
		pdu_ctrl_rx->len =
   1f4fe:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1f500:	2203      	movs	r2, #3
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1f502:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   1f504:	8469      	strh	r1, [r5, #34]	; 0x22
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   1f506:	f8a5 c020 	strh.w	ip, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   1f50a:	84af      	strh	r7, [r5, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   1f50c:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   1f50e:	4629      	mov	r1, r5
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1f510:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1f512:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   1f514:	f7fe fa34 	bl	1d980 <ll_rx_put>
}
   1f518:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_sched();
   1f51c:	f7fe ba3a 	b.w	1d994 <ll_rx_sched>
			if (!conn->llcp_length.cache.tx_octets) {
   1f520:	f8b0 21b8 	ldrh.w	r2, [r0, #440]	; 0x1b8
   1f524:	b9e2      	cbnz	r2, 1f560 <event_len_prep+0x150>
				conn->llcp_length.ack = conn->llcp_length.req;
   1f526:	f890 31ac 	ldrb.w	r3, [r0, #428]	; 0x1ac
				conn->procedure_expire = 0U;
   1f52a:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
				conn->llcp_length.ack = conn->llcp_length.req;
   1f52e:	f880 31ad 	strb.w	r3, [r0, #429]	; 0x1ad
				conn->procedure_expire = 0U;
   1f532:	e7d5      	b.n	1f4e0 <event_len_prep+0xd0>
		LL_ASSERT(rx && rx->hdr.link);
   1f534:	4a2d      	ldr	r2, [pc, #180]	; (1f5ec <event_len_prep+0x1dc>)
   1f536:	492e      	ldr	r1, [pc, #184]	; (1f5f0 <event_len_prep+0x1e0>)
   1f538:	482e      	ldr	r0, [pc, #184]	; (1f5f4 <event_len_prep+0x1e4>)
   1f53a:	f44f 5387 	mov.w	r3, #4320	; 0x10e0
   1f53e:	f00c fd42 	bl	2bfc6 <assert_print>
   1f542:	4040      	eors	r0, r0
   1f544:	f380 8811 	msr	BASEPRI, r0
   1f548:	f04f 0003 	mov.w	r0, #3
   1f54c:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   1f54e:	6828      	ldr	r0, [r5, #0]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   1f550:	f8b4 c05a 	ldrh.w	ip, [r4, #90]	; 0x5a
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   1f554:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
   1f558:	e7c7      	b.n	1f4ea <event_len_prep+0xda>
		conn->tx_data_last = tx;
   1f55a:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   1f55e:	e7a5      	b.n	1f4ac <event_len_prep+0x9c>
				conn->llcp_length.tx_octets =
   1f560:	f8a0 21b2 	strh.w	r2, [r0, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
   1f564:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1f566:	f362 0302 	bfi	r3, r2, #0, #3
   1f56a:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
				conn->llcp_length.tx_time =
   1f56e:	f8b0 31ba 	ldrh.w	r3, [r0, #442]	; 0x1ba
				conn->llcp_length.cache.tx_octets = 0;
   1f572:	f8a0 21b8 	strh.w	r2, [r0, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   1f576:	f8a0 31b6 	strh.w	r3, [r0, #438]	; 0x1b6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1f57a:	e7b1      	b.n	1f4e0 <event_len_prep+0xd0>
		if (conn->tx_head == conn->tx_data) {
   1f57c:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   1f580:	4293      	cmp	r3, r2
   1f582:	d00f      	beq.n	1f5a4 <event_len_prep+0x194>
		} else if (!conn->tx_ctrl) {
   1f584:	2900      	cmp	r1, #0
   1f586:	d187      	bne.n	1f498 <event_len_prep+0x88>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1f588:	791a      	ldrb	r2, [r3, #4]
   1f58a:	f002 0203 	and.w	r2, r2, #3
   1f58e:	2a03      	cmp	r2, #3
   1f590:	d015      	beq.n	1f5be <event_len_prep+0x1ae>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1f592:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   1f596:	e781      	b.n	1f49c <event_len_prep+0x8c>
			tx->next = conn->tx_head;
   1f598:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   1f59a:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1f59e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   1f5a2:	e781      	b.n	1f4a8 <event_len_prep+0x98>
			conn->tx_data = conn->tx_data->next;
   1f5a4:	681a      	ldr	r2, [r3, #0]
   1f5a6:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1f5aa:	2900      	cmp	r1, #0
   1f5ac:	f47f af74 	bne.w	1f498 <event_len_prep+0x88>
			tx->next = conn->tx_head->next;
   1f5b0:	681a      	ldr	r2, [r3, #0]
   1f5b2:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1f5b4:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1f5b6:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   1f5b8:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   1f5bc:	e774      	b.n	1f4a8 <event_len_prep+0x98>
	    ((pdu_data_tx->llctrl.opcode !=
   1f5be:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1f5c0:	2a03      	cmp	r2, #3
   1f5c2:	d0f5      	beq.n	1f5b0 <event_len_prep+0x1a0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1f5c4:	2a0a      	cmp	r2, #10
   1f5c6:	d1e4      	bne.n	1f592 <event_len_prep+0x182>
   1f5c8:	e7f2      	b.n	1f5b0 <event_len_prep+0x1a0>
		LL_ASSERT(0);
   1f5ca:	4a08      	ldr	r2, [pc, #32]	; (1f5ec <event_len_prep+0x1dc>)
   1f5cc:	490a      	ldr	r1, [pc, #40]	; (1f5f8 <event_len_prep+0x1e8>)
   1f5ce:	4809      	ldr	r0, [pc, #36]	; (1f5f4 <event_len_prep+0x1e4>)
   1f5d0:	f241 130a 	movw	r3, #4362	; 0x110a
   1f5d4:	f00c fcf7 	bl	2bfc6 <assert_print>
   1f5d8:	4040      	eors	r0, r0
   1f5da:	f380 8811 	msr	BASEPRI, r0
   1f5de:	f04f 0003 	mov.w	r0, #3
   1f5e2:	df02      	svc	2
}
   1f5e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f5e6:	bf00      	nop
   1f5e8:	20002948 	.word	0x20002948
   1f5ec:	00033640 	.word	0x00033640
   1f5f0:	0003370c 	.word	0x0003370c
   1f5f4:	00032fc4 	.word	0x00032fc4
   1f5f8:	0003305c 	.word	0x0003305c

0001f5fc <event_phy_upd_ind_prep>:
{
   1f5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->llcp.phy_upd_ind.initiate) {
   1f600:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
   1f604:	f013 0601 	ands.w	r6, r3, #1
{
   1f608:	4604      	mov	r4, r0
   1f60a:	460d      	mov	r5, r1
	if (conn->llcp.phy_upd_ind.initiate) {
   1f60c:	f040 8092 	bne.w	1f734 <event_phy_upd_ind_prep+0x138>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
   1f610:	f8b0 10ea 	ldrh.w	r1, [r0, #234]	; 0xea
   1f614:	1a69      	subs	r1, r5, r1
   1f616:	0409      	lsls	r1, r1, #16
   1f618:	f100 8093 	bmi.w	1f742 <event_phy_upd_ind_prep+0x146>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1f61c:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
   1f620:	2900      	cmp	r1, #0
   1f622:	f2c0 8110 	blt.w	1f846 <event_phy_upd_ind_prep+0x24a>
		rx = conn->llcp_rx;
   1f626:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
   1f62a:	461a      	mov	r2, r3
			conn->llcp_ack = conn->llcp_req;
   1f62c:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
   1f630:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
		old_tx = lll->phy_tx;
   1f634:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		old_rx = lll->phy_rx;
   1f638:	f894 8061 	ldrb.w	r8, [r4, #97]	; 0x61
		uint16_t eff_rx_time = lll->max_rx_time;
   1f63c:	f8b4 705e 	ldrh.w	r7, [r4, #94]	; 0x5e
		if (conn->llcp.phy_upd_ind.tx) {
   1f640:	f013 0f1c 	tst.w	r3, #28
		old_rx = lll->phy_rx;
   1f644:	f008 0807 	and.w	r8, r8, #7
		old_tx = lll->phy_tx;
   1f648:	f001 0907 	and.w	r9, r1, #7
		if (conn->llcp.phy_upd_ind.tx) {
   1f64c:	d17b      	bne.n	1f746 <event_phy_upd_ind_prep+0x14a>
		uint16_t eff_tx_time = lll->max_tx_time;
   1f64e:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
		if (conn->llcp.phy_upd_ind.rx) {
   1f652:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   1f656:	d008      	beq.n	1f66a <event_phy_upd_ind_prep+0x6e>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
   1f658:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
   1f65c:	095b      	lsrs	r3, r3, #5
   1f65e:	f363 0102 	bfi	r1, r3, #0, #3
   1f662:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
   1f666:	f44f 77a4 	mov.w	r7, #328	; 0x148
		LL_ASSERT(rx && rx->hdr.link);
   1f66a:	2d00      	cmp	r5, #0
   1f66c:	f000 80cb 	beq.w	1f806 <event_phy_upd_ind_prep+0x20a>
   1f670:	6828      	ldr	r0, [r5, #0]
   1f672:	2800      	cmp	r0, #0
   1f674:	f000 80c7 	beq.w	1f806 <event_phy_upd_ind_prep+0x20a>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   1f678:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		    (lll->phy_rx == old_rx)) {
   1f67c:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
		conn->llcp_rx = rx->hdr.link->mem;
   1f680:	f8d0 c004 	ldr.w	ip, [r0, #4]
   1f684:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   1f688:	0792      	lsls	r2, r2, #30
   1f68a:	f3c3 0c02 	ubfx	ip, r3, #0, #3
		    (lll->phy_rx == old_rx)) {
   1f68e:	f3c1 0e02 	ubfx	lr, r1, #0, #3
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   1f692:	f003 0307 	and.w	r3, r3, #7
		    (lll->phy_rx == old_rx)) {
   1f696:	f001 0107 	and.w	r1, r1, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   1f69a:	d402      	bmi.n	1f6a2 <event_phy_upd_ind_prep+0xa6>
   1f69c:	4599      	cmp	r9, r3
   1f69e:	f000 80ee 	beq.w	1f87e <event_phy_upd_ind_prep+0x282>
		rx->hdr.handle = lll->handle;
   1f6a2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   1f6a4:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1f6a6:	231d      	movs	r3, #29
   1f6a8:	712b      	strb	r3, [r5, #4]
		upd->status = 0U;
   1f6aa:	2300      	movs	r3, #0
		upd->tx = lll->phy_tx;
   1f6ac:	f885 c01d 	strb.w	ip, [r5, #29]
		upd->rx = lll->phy_rx;
   1f6b0:	f885 e01e 	strb.w	lr, [r5, #30]
		upd->status = 0U;
   1f6b4:	772b      	strb	r3, [r5, #28]
		ll_rx_put(rx->hdr.link, rx);
   1f6b6:	4629      	mov	r1, r5
   1f6b8:	f7fe f962 	bl	1d980 <ll_rx_put>
		rx = conn->llcp_rx;
   1f6bc:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   1f6c0:	2d00      	cmp	r5, #0
   1f6c2:	f000 80b1 	beq.w	1f828 <event_phy_upd_ind_prep+0x22c>
   1f6c6:	6828      	ldr	r0, [r5, #0]
   1f6c8:	2800      	cmp	r0, #0
   1f6ca:	f000 80ad 	beq.w	1f828 <event_phy_upd_ind_prep+0x22c>
		if ((eff_tx_time <= lll->max_tx_time) &&
   1f6ce:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
		conn->llcp_rx = rx->hdr.link->mem;
   1f6d2:	6842      	ldr	r2, [r0, #4]
   1f6d4:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		if ((eff_tx_time <= lll->max_tx_time) &&
   1f6d8:	42b3      	cmp	r3, r6
   1f6da:	d30a      	bcc.n	1f6f2 <event_phy_upd_ind_prep+0xf6>
   1f6dc:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   1f6e0:	d807      	bhi.n	1f6f2 <event_phy_upd_ind_prep+0xf6>
		    (eff_rx_time <= lll->max_rx_time) &&
   1f6e2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		    (lll->max_tx_time <= max_tx_time) &&
   1f6e6:	42bb      	cmp	r3, r7
   1f6e8:	d303      	bcc.n	1f6f2 <event_phy_upd_ind_prep+0xf6>
		    (eff_rx_time <= lll->max_rx_time) &&
   1f6ea:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   1f6ee:	f240 80ff 	bls.w	1f8f0 <event_phy_upd_ind_prep+0x2f4>
		lll->max_tx_time = eff_tx_time;
   1f6f2:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
		lll->max_rx_time = eff_rx_time;
   1f6f6:	f8a4 705e 	strh.w	r7, [r4, #94]	; 0x5e
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   1f6fa:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
   1f6fc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   1f6fe:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   1f700:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1f704:	f04f 0c03 	mov.w	ip, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1f708:	2109      	movs	r1, #9
   1f70a:	7769      	strb	r1, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1f70c:	f885 c004 	strb.w	ip, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   1f710:	772b      	strb	r3, [r5, #28]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   1f712:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
   1f716:	842b      	strh	r3, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
   1f718:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
   1f71c:	84ab      	strh	r3, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1f71e:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   1f720:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
   1f722:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   1f724:	4629      	mov	r1, r5
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1f726:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   1f728:	f7fe f92a 	bl	1d980 <ll_rx_put>
}
   1f72c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		ll_rx_sched();
   1f730:	f7fe b930 	b.w	1d994 <ll_rx_sched>
		if (memq_peek(conn->lll.memq_tx.head, conn->lll.memq_tx.tail,
   1f734:	e9d0 0119 	ldrd	r0, r1, [r0, #100]	; 0x64
   1f738:	2200      	movs	r2, #0
   1f73a:	f7fa fd7b 	bl	1a234 <memq_peek>
   1f73e:	4606      	mov	r6, r0
   1f740:	b150      	cbz	r0, 1f758 <event_phy_upd_ind_prep+0x15c>
}
   1f742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
   1f746:	f3c3 0082 	ubfx	r0, r3, #2, #3
   1f74a:	f360 0102 	bfi	r1, r0, #0, #3
   1f74e:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
   1f752:	f44f 76a4 	mov.w	r6, #328	; 0x148
   1f756:	e77c      	b.n	1f652 <event_phy_upd_ind_prep+0x56>
		rx = ll_pdu_rx_alloc_peek(2);
   1f758:	2002      	movs	r0, #2
   1f75a:	f7fe f921 	bl	1d9a0 <ll_pdu_rx_alloc_peek>
		if (!rx) {
   1f75e:	4680      	mov	r8, r0
   1f760:	2800      	cmp	r0, #0
   1f762:	d0ee      	beq.n	1f742 <event_phy_upd_ind_prep+0x146>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1f764:	4893      	ldr	r0, [pc, #588]	; (1f9b4 <event_phy_upd_ind_prep+0x3b8>)
   1f766:	f7fa fcf7 	bl	1a158 <mem_acquire>
		if (!tx) {
   1f76a:	4607      	mov	r7, r0
   1f76c:	2800      	cmp	r0, #0
   1f76e:	d0e8      	beq.n	1f742 <event_phy_upd_ind_prep+0x146>
		conn->llcp.phy_upd_ind.initiate = 0U;
   1f770:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1f774:	f366 0300 	bfi	r3, r6, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
   1f778:	f3c3 1642 	ubfx	r6, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
   1f77c:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
   1f780:	f016 0607 	ands.w	r6, r6, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
   1f784:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		if (!((conn->llcp.phy_upd_ind.tx |
   1f788:	b2db      	uxtb	r3, r3
   1f78a:	f040 8093 	bne.w	1f8b4 <event_phy_upd_ind_prep+0x2b8>
			conn->llcp_ack = conn->llcp_req;
   1f78e:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
			conn->llcp.phy_upd_ind.instant = 0U;
   1f792:	f8a4 60ea 	strh.w	r6, [r4, #234]	; 0xea
			if (conn->llcp.phy_upd_ind.cmd) {
   1f796:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
   1f798:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			if (conn->llcp.phy_upd_ind.cmd) {
   1f79c:	f100 80ba 	bmi.w	1f914 <event_phy_upd_ind_prep+0x318>
   1f7a0:	4633      	mov	r3, r6
   1f7a2:	4632      	mov	r2, r6
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   1f7a4:	727b      	strb	r3, [r7, #9]
		pdu_ctrl_tx->len =
   1f7a6:	2305      	movs	r3, #5
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   1f7a8:	723e      	strb	r6, [r7, #8]
		pdu_ctrl_tx->len =
   1f7aa:	717b      	strb	r3, [r7, #5]
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   1f7ac:	817a      	strh	r2, [r7, #10]
		pdu_ctrl_tx->llctrl.opcode =
   1f7ae:	2218      	movs	r2, #24
	    conn->tx_head &&
   1f7b0:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		if (!conn->tx_ctrl) {
   1f7b4:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		pdu_ctrl_tx->llctrl.opcode =
   1f7b8:	71fa      	strb	r2, [r7, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1f7ba:	793a      	ldrb	r2, [r7, #4]
   1f7bc:	f042 0203 	orr.w	r2, r2, #3
   1f7c0:	713a      	strb	r2, [r7, #4]
	if (
   1f7c2:	2b00      	cmp	r3, #0
   1f7c4:	f000 809d 	beq.w	1f902 <event_phy_upd_ind_prep+0x306>
	    !conn->llcp_enc.pause_tx &&
   1f7c8:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1f7cc:	0795      	lsls	r5, r2, #30
   1f7ce:	f100 8098 	bmi.w	1f902 <event_phy_upd_ind_prep+0x306>
	    !conn->llcp_phy.pause_tx &&
   1f7d2:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1f7d6:	07d0      	lsls	r0, r2, #31
   1f7d8:	f100 8093 	bmi.w	1f902 <event_phy_upd_ind_prep+0x306>
		if (conn->tx_head == conn->tx_data) {
   1f7dc:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   1f7e0:	4293      	cmp	r3, r2
   1f7e2:	f000 80cb 	beq.w	1f97c <event_phy_upd_ind_prep+0x380>
		} else if (!conn->tx_ctrl) {
   1f7e6:	2900      	cmp	r1, #0
   1f7e8:	f000 80d5 	beq.w	1f996 <event_phy_upd_ind_prep+0x39a>
	tx->next = conn->tx_ctrl_last->next;
   1f7ec:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1f7f0:	681a      	ldr	r2, [r3, #0]
   1f7f2:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   1f7f4:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   1f7f6:	683b      	ldr	r3, [r7, #0]
	conn->tx_ctrl_last = tx;
   1f7f8:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1f7fc:	2b00      	cmp	r3, #0
   1f7fe:	d1a0      	bne.n	1f742 <event_phy_upd_ind_prep+0x146>
		conn->tx_data_last = tx;
   1f800:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
   1f804:	e79d      	b.n	1f742 <event_phy_upd_ind_prep+0x146>
		LL_ASSERT(rx && rx->hdr.link);
   1f806:	4a6c      	ldr	r2, [pc, #432]	; (1f9b8 <event_phy_upd_ind_prep+0x3bc>)
   1f808:	496c      	ldr	r1, [pc, #432]	; (1f9bc <event_phy_upd_ind_prep+0x3c0>)
   1f80a:	486d      	ldr	r0, [pc, #436]	; (1f9c0 <event_phy_upd_ind_prep+0x3c4>)
   1f80c:	f241 233a 	movw	r3, #4666	; 0x123a
   1f810:	f00c fbd9 	bl	2bfc6 <assert_print>
   1f814:	4040      	eors	r0, r0
   1f816:	f380 8811 	msr	BASEPRI, r0
   1f81a:	f04f 0003 	mov.w	r0, #3
   1f81e:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   1f820:	6828      	ldr	r0, [r5, #0]
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   1f822:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   1f826:	e727      	b.n	1f678 <event_phy_upd_ind_prep+0x7c>
		LL_ASSERT(rx && rx->hdr.link);
   1f828:	4a63      	ldr	r2, [pc, #396]	; (1f9b8 <event_phy_upd_ind_prep+0x3bc>)
   1f82a:	4964      	ldr	r1, [pc, #400]	; (1f9bc <event_phy_upd_ind_prep+0x3c0>)
   1f82c:	4864      	ldr	r0, [pc, #400]	; (1f9c0 <event_phy_upd_ind_prep+0x3c4>)
   1f82e:	f241 2369 	movw	r3, #4713	; 0x1269
   1f832:	f00c fbc8 	bl	2bfc6 <assert_print>
   1f836:	4040      	eors	r0, r0
   1f838:	f380 8811 	msr	BASEPRI, r0
   1f83c:	f04f 0003 	mov.w	r0, #3
   1f840:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   1f842:	6828      	ldr	r0, [r5, #0]
   1f844:	e743      	b.n	1f6ce <event_phy_upd_ind_prep+0xd2>
			rx = ll_pdu_rx_alloc();
   1f846:	f7fe f8cb 	bl	1d9e0 <ll_pdu_rx_alloc>
			if (!rx) {
   1f84a:	4605      	mov	r5, r0
   1f84c:	2800      	cmp	r0, #0
   1f84e:	f43f af78 	beq.w	1f742 <event_phy_upd_ind_prep+0x146>
			rx->hdr.link->mem = conn->llcp_rx;
   1f852:	6803      	ldr	r3, [r0, #0]
   1f854:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   1f858:	605a      	str	r2, [r3, #4]
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   1f85a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
			conn->llcp_rx = rx;
   1f85e:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   1f862:	2b00      	cmp	r3, #0
		if (conn->llcp.phy_upd_ind.tx) {
   1f864:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1f868:	461a      	mov	r2, r3
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   1f86a:	f6bf aedf 	bge.w	1f62c <event_phy_upd_ind_prep+0x30>
   1f86e:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
   1f872:	2900      	cmp	r1, #0
   1f874:	f43f aeda 	beq.w	1f62c <event_phy_upd_ind_prep+0x30>
			conn->periph.llcp_type = LLCP_NONE;
   1f878:	f884 60d9 	strb.w	r6, [r4, #217]	; 0xd9
   1f87c:	e6da      	b.n	1f634 <event_phy_upd_ind_prep+0x38>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   1f87e:	4588      	cmp	r8, r1
   1f880:	f47f af0f 	bne.w	1f6a2 <event_phy_upd_ind_prep+0xa6>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1f884:	2301      	movs	r3, #1
   1f886:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   1f888:	4629      	mov	r1, r5
   1f88a:	f7fe f879 	bl	1d980 <ll_rx_put>
				rx = conn->llcp_rx;
   1f88e:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
				LL_ASSERT(rx && rx->hdr.link);
   1f892:	2d00      	cmp	r5, #0
   1f894:	d063      	beq.n	1f95e <event_phy_upd_ind_prep+0x362>
   1f896:	6828      	ldr	r0, [r5, #0]
   1f898:	2800      	cmp	r0, #0
   1f89a:	d060      	beq.n	1f95e <event_phy_upd_ind_prep+0x362>
				conn->llcp_rx = rx->hdr.link->mem;
   1f89c:	6842      	ldr	r2, [r0, #4]
   1f89e:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1f8a2:	2301      	movs	r3, #1
				ll_rx_put(rx->hdr.link, rx);
   1f8a4:	4629      	mov	r1, r5
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1f8a6:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
   1f8a8:	f7fe f86a 	bl	1d980 <ll_rx_put>
}
   1f8ac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   1f8b0:	f7fe b870 	b.w	1d994 <ll_rx_sched>
							 lll->latency +
   1f8b4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   1f8b6:	1da9      	adds	r1, r5, #6
   1f8b8:	4419      	add	r1, r3
			conn->llcp.phy_upd_ind.instant = event_counter +
   1f8ba:	f8a4 10ea 	strh.w	r1, [r4, #234]	; 0xea
			(void)ll_pdu_rx_alloc();
   1f8be:	f7fe f88f 	bl	1d9e0 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   1f8c2:	f8d8 3000 	ldr.w	r3, [r8]
   1f8c6:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   1f8ca:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   1f8cc:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
				rx = ll_pdu_rx_alloc();
   1f8d0:	f7fe f886 	bl	1d9e0 <ll_pdu_rx_alloc>
				rx->hdr.link->mem = conn->llcp_rx;
   1f8d4:	6803      	ldr	r3, [r0, #0]
   1f8d6:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   1f8da:	605a      	str	r2, [r3, #4]
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   1f8dc:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   1f8e0:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
				conn->llcp_rx = rx;
   1f8e4:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   1f8e8:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   1f8ec:	095b      	lsrs	r3, r3, #5
   1f8ee:	e759      	b.n	1f7a4 <event_phy_upd_ind_prep+0x1a8>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1f8f0:	2301      	movs	r3, #1
   1f8f2:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   1f8f4:	4629      	mov	r1, r5
   1f8f6:	f7fe f843 	bl	1d980 <ll_rx_put>
}
   1f8fa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   1f8fe:	f7fe b849 	b.w	1d994 <ll_rx_sched>
		if (!conn->tx_ctrl) {
   1f902:	2900      	cmp	r1, #0
   1f904:	f47f af72 	bne.w	1f7ec <event_phy_upd_ind_prep+0x1f0>
			tx->next = conn->tx_head;
   1f908:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   1f90a:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1f90e:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
   1f912:	e773      	b.n	1f7fc <event_phy_upd_ind_prep+0x200>
				(void)ll_pdu_rx_alloc();
   1f914:	f7fe f864 	bl	1d9e0 <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
   1f918:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   1f91a:	f8a8 3006 	strh.w	r3, [r8, #6]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1f91e:	231d      	movs	r3, #29
				upd->status = 0U;
   1f920:	f888 601c 	strb.w	r6, [r8, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1f924:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
   1f928:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
				ll_rx_put(rx->hdr.link, rx);
   1f92c:	f8d8 0000 	ldr.w	r0, [r8]
				upd->tx = lll->phy_tx;
   1f930:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1f934:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
   1f938:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   1f93c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1f940:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
   1f944:	4641      	mov	r1, r8
   1f946:	f7fe f81b 	bl	1d980 <ll_rx_put>
				ll_rx_sched();
   1f94a:	f7fe f823 	bl	1d994 <ll_rx_sched>
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   1f94e:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   1f952:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   1f956:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   1f95a:	095b      	lsrs	r3, r3, #5
   1f95c:	e722      	b.n	1f7a4 <event_phy_upd_ind_prep+0x1a8>
				LL_ASSERT(rx && rx->hdr.link);
   1f95e:	4a16      	ldr	r2, [pc, #88]	; (1f9b8 <event_phy_upd_ind_prep+0x3bc>)
   1f960:	4916      	ldr	r1, [pc, #88]	; (1f9bc <event_phy_upd_ind_prep+0x3c0>)
   1f962:	4817      	ldr	r0, [pc, #92]	; (1f9c0 <event_phy_upd_ind_prep+0x3c4>)
   1f964:	f241 234c 	movw	r3, #4684	; 0x124c
   1f968:	f00c fb2d 	bl	2bfc6 <assert_print>
   1f96c:	4040      	eors	r0, r0
   1f96e:	f380 8811 	msr	BASEPRI, r0
   1f972:	f04f 0003 	mov.w	r0, #3
   1f976:	df02      	svc	2
				conn->llcp_rx = rx->hdr.link->mem;
   1f978:	6828      	ldr	r0, [r5, #0]
   1f97a:	e78f      	b.n	1f89c <event_phy_upd_ind_prep+0x2a0>
			conn->tx_data = conn->tx_data->next;
   1f97c:	681a      	ldr	r2, [r3, #0]
   1f97e:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1f982:	2900      	cmp	r1, #0
   1f984:	f47f af32 	bne.w	1f7ec <event_phy_upd_ind_prep+0x1f0>
			tx->next = conn->tx_head->next;
   1f988:	681a      	ldr	r2, [r3, #0]
   1f98a:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
   1f98c:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   1f98e:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
   1f990:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
   1f994:	e732      	b.n	1f7fc <event_phy_upd_ind_prep+0x200>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1f996:	791a      	ldrb	r2, [r3, #4]
   1f998:	f002 0203 	and.w	r2, r2, #3
   1f99c:	2a03      	cmp	r2, #3
   1f99e:	d002      	beq.n	1f9a6 <event_phy_upd_ind_prep+0x3aa>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1f9a0:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1f9a4:	e722      	b.n	1f7ec <event_phy_upd_ind_prep+0x1f0>
	    ((pdu_data_tx->llctrl.opcode !=
   1f9a6:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1f9a8:	2a03      	cmp	r2, #3
   1f9aa:	d0ed      	beq.n	1f988 <event_phy_upd_ind_prep+0x38c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1f9ac:	2a0a      	cmp	r2, #10
   1f9ae:	d1f7      	bne.n	1f9a0 <event_phy_upd_ind_prep+0x3a4>
   1f9b0:	e7ea      	b.n	1f988 <event_phy_upd_ind_prep+0x38c>
   1f9b2:	bf00      	nop
   1f9b4:	20002948 	.word	0x20002948
   1f9b8:	00033640 	.word	0x00033640
   1f9bc:	0003370c 	.word	0x0003370c
   1f9c0:	00032fc4 	.word	0x00032fc4

0001f9c4 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   1f9c4:	4801      	ldr	r0, [pc, #4]	; (1f9cc <ll_conn_acquire+0x8>)
   1f9c6:	f7fa bbc7 	b.w	1a158 <mem_acquire>
   1f9ca:	bf00      	nop
   1f9cc:	200028b0 	.word	0x200028b0

0001f9d0 <ll_conn_release>:
	mem_release(conn, &conn_free);
   1f9d0:	4901      	ldr	r1, [pc, #4]	; (1f9d8 <ll_conn_release+0x8>)
   1f9d2:	f7fa bbdb 	b.w	1a18c <mem_release>
   1f9d6:	bf00      	nop
   1f9d8:	200028b0 	.word	0x200028b0

0001f9dc <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   1f9dc:	4902      	ldr	r1, [pc, #8]	; (1f9e8 <ll_conn_handle_get+0xc>)
   1f9de:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1f9e2:	f7fa bbef 	b.w	1a1c4 <mem_index_get>
   1f9e6:	bf00      	nop
   1f9e8:	20001948 	.word	0x20001948

0001f9ec <ll_conn_get>:
{
   1f9ec:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1f9ee:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1f9f2:	4801      	ldr	r0, [pc, #4]	; (1f9f8 <ll_conn_get+0xc>)
   1f9f4:	f7fa bbe2 	b.w	1a1bc <mem_get>
   1f9f8:	20001948 	.word	0x20001948

0001f9fc <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1f9fc:	b958      	cbnz	r0, 1fa16 <ll_connected_get+0x1a>
{
   1f9fe:	b508      	push	{r3, lr}
   1fa00:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1fa02:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1fa06:	4805      	ldr	r0, [pc, #20]	; (1fa1c <ll_connected_get+0x20>)
   1fa08:	f7fa fbd8 	bl	1a1bc <mem_get>
	if (conn->lll.handle != handle) {
   1fa0c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   1fa0e:	b903      	cbnz	r3, 1fa12 <ll_connected_get+0x16>
}
   1fa10:	bd08      	pop	{r3, pc}
		return NULL;
   1fa12:	2000      	movs	r0, #0
}
   1fa14:	bd08      	pop	{r3, pc}
		return NULL;
   1fa16:	2000      	movs	r0, #0
}
   1fa18:	4770      	bx	lr
   1fa1a:	bf00      	nop
   1fa1c:	20001948 	.word	0x20001948

0001fa20 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   1fa20:	4801      	ldr	r0, [pc, #4]	; (1fa28 <ll_tx_mem_acquire+0x8>)
   1fa22:	f7fa bb99 	b.w	1a158 <mem_acquire>
   1fa26:	bf00      	nop
   1fa28:	200028d8 	.word	0x200028d8

0001fa2c <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   1fa2c:	4901      	ldr	r1, [pc, #4]	; (1fa34 <ll_tx_mem_release+0x8>)
   1fa2e:	f7fa bbad 	b.w	1a18c <mem_release>
   1fa32:	bf00      	nop
   1fa34:	200028d8 	.word	0x200028d8

0001fa38 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1fa38:	2800      	cmp	r0, #0
   1fa3a:	d140      	bne.n	1fabe <ll_tx_mem_enqueue+0x86>
{
   1fa3c:	b570      	push	{r4, r5, r6, lr}
   1fa3e:	4602      	mov	r2, r0
   1fa40:	460e      	mov	r6, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1fa42:	4820      	ldr	r0, [pc, #128]	; (1fac4 <ll_tx_mem_enqueue+0x8c>)
   1fa44:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1fa48:	f7fa fbb8 	bl	1a1bc <mem_get>
	if (conn->lll.handle != handle) {
   1fa4c:	8d02      	ldrh	r2, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1fa4e:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   1fa50:	bb7a      	cbnz	r2, 1fab2 <ll_tx_mem_enqueue+0x7a>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   1fa52:	4c1d      	ldr	r4, [pc, #116]	; (1fac8 <ll_tx_mem_enqueue+0x90>)
   1fa54:	f894 c005 	ldrb.w	ip, [r4, #5]
	if (last == count) {
   1fa58:	78a1      	ldrb	r1, [r4, #2]
   1fa5a:	7820      	ldrb	r0, [r4, #0]
	last = last + 1;
   1fa5c:	f10c 0301 	add.w	r3, ip, #1
   1fa60:	b2db      	uxtb	r3, r3
		last = 0U;
   1fa62:	4299      	cmp	r1, r3
   1fa64:	bf08      	it	eq
   1fa66:	2300      	moveq	r3, #0
   1fa68:	7921      	ldrb	r1, [r4, #4]
	if (last == first) {
   1fa6a:	4299      	cmp	r1, r3
   1fa6c:	d024      	beq.n	1fab8 <ll_tx_mem_enqueue+0x80>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1fa6e:	fb1c fc00 	smulbb	ip, ip, r0
   1fa72:	f104 0008 	add.w	r0, r4, #8
	lll_tx->handle = handle;
   1fa76:	f820 200c 	strh.w	r2, [r0, ip]
   1fa7a:	4484      	add	ip, r0
	lll_tx->node = tx;
   1fa7c:	f8cc 6004 	str.w	r6, [ip, #4]
	*last = idx; /* Commit: Update write index */
   1fa80:	7163      	strb	r3, [r4, #5]
   1fa82:	782b      	ldrb	r3, [r5, #0]
	if (ull_ref_get(&conn->ull)) {
   1fa84:	b92b      	cbnz	r3, 1fa92 <ll_tx_mem_enqueue+0x5a>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1fa86:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   1fa8a:	2b00      	cmp	r3, #0
   1fa8c:	db0b      	blt.n	1faa6 <ll_tx_mem_enqueue+0x6e>
	return 0;
   1fa8e:	2000      	movs	r0, #0
}
   1fa90:	bd70      	pop	{r4, r5, r6, pc}
	mfy.param = conn;
   1fa92:	4b0e      	ldr	r3, [pc, #56]	; (1facc <ll_tx_mem_enqueue+0x94>)
	mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U, &mfy);
   1fa94:	2101      	movs	r1, #1
   1fa96:	2003      	movs	r0, #3
	mfy.param = conn;
   1fa98:	609d      	str	r5, [r3, #8]
	mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U, &mfy);
   1fa9a:	f7fa fc35 	bl	1a308 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1fa9e:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   1faa2:	2b00      	cmp	r3, #0
   1faa4:	daf3      	bge.n	1fa8e <ll_tx_mem_enqueue+0x56>
		ull_periph_latency_cancel(conn, handle);
   1faa6:	4628      	mov	r0, r5
   1faa8:	2100      	movs	r1, #0
   1faaa:	f003 ff23 	bl	238f4 <ull_periph_latency_cancel>
	return 0;
   1faae:	2000      	movs	r0, #0
}
   1fab0:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1fab2:	f06f 0015 	mvn.w	r0, #21
}
   1fab6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   1fab8:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1fabc:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1fabe:	f06f 0015 	mvn.w	r0, #21
}
   1fac2:	4770      	bx	lr
   1fac4:	20001948 	.word	0x20001948
   1fac8:	20000704 	.word	0x20000704
   1facc:	2000075c 	.word	0x2000075c

0001fad0 <ll_conn_update>:
{
   1fad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fad4:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   1fad8:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   1fadc:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   1fae0:	2800      	cmp	r0, #0
   1fae2:	d155      	bne.n	1fb90 <ll_conn_update+0xc0>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1fae4:	460c      	mov	r4, r1
   1fae6:	4615      	mov	r5, r2
   1fae8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1faec:	4602      	mov	r2, r0
   1faee:	4841      	ldr	r0, [pc, #260]	; (1fbf4 <ll_conn_update+0x124>)
   1faf0:	461e      	mov	r6, r3
   1faf2:	f7fa fb63 	bl	1a1bc <mem_get>
   1faf6:	4684      	mov	ip, r0
	if (conn->lll.handle != handle) {
   1faf8:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   1fafa:	2800      	cmp	r0, #0
   1fafc:	d148      	bne.n	1fb90 <ll_conn_update+0xc0>
	if (!cmd) {
   1fafe:	bb3c      	cbnz	r4, 1fb50 <ll_conn_update+0x80>
		if (!conn->llcp_conn_param.disabled &&
   1fb00:	f89c 3186 	ldrb.w	r3, [ip, #390]	; 0x186
   1fb04:	0699      	lsls	r1, r3, #26
   1fb06:	d44a      	bmi.n	1fb9e <ll_conn_update+0xce>
		    (!conn->common.fex_valid ||
   1fb08:	f89c 30d8 	ldrb.w	r3, [ip, #216]	; 0xd8
		if (!conn->llcp_conn_param.disabled &&
   1fb0c:	07da      	lsls	r2, r3, #31
   1fb0e:	d442      	bmi.n	1fb96 <ll_conn_update+0xc6>
			if (conn->llcp_conn_param.req !=
   1fb10:	f89c 2184 	ldrb.w	r2, [ip, #388]	; 0x184
   1fb14:	f89c 3185 	ldrb.w	r3, [ip, #389]	; 0x185
   1fb18:	4293      	cmp	r3, r2
   1fb1a:	d136      	bne.n	1fb8a <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   1fb1c:	f8bc 2186 	ldrh.w	r2, [ip, #390]	; 0x186
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1fb20:	f99c 1039 	ldrsb.w	r1, [ip, #57]	; 0x39
			conn->llcp_conn_param.interval_min = interval_min;
   1fb24:	f8ac 6188 	strh.w	r6, [ip, #392]	; 0x188
			conn->llcp_conn_param.state = cmd;
   1fb28:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
			conn->llcp_conn_param.req++;
   1fb2c:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
   1fb2e:	f042 0210 	orr.w	r2, r2, #16
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1fb32:	2900      	cmp	r1, #0
			conn->llcp_conn_param.interval_max = interval_max;
   1fb34:	f8ac 918a 	strh.w	r9, [ip, #394]	; 0x18a
			conn->llcp_conn_param.latency = latency;
   1fb38:	f8ac 818c 	strh.w	r8, [ip, #396]	; 0x18c
			conn->llcp_conn_param.timeout = timeout;
   1fb3c:	f8ac 718e 	strh.w	r7, [ip, #398]	; 0x18e
			conn->llcp_conn_param.state = cmd;
   1fb40:	f8ac 2186 	strh.w	r2, [ip, #390]	; 0x186
			conn->llcp_conn_param.req++;
   1fb44:	f88c 3184 	strb.w	r3, [ip, #388]	; 0x184
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1fb48:	db4e      	blt.n	1fbe8 <ll_conn_update+0x118>
	return 0;
   1fb4a:	2000      	movs	r0, #0
}
   1fb4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cmd--;
   1fb50:	3c01      	subs	r4, #1
		if (cmd) {
   1fb52:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1fb56:	d0db      	beq.n	1fb10 <ll_conn_update+0x40>
			if ((conn->llcp_conn_param.req ==
   1fb58:	f89c 2185 	ldrb.w	r2, [ip, #389]	; 0x185
   1fb5c:	f89c 3184 	ldrb.w	r3, [ip, #388]	; 0x184
   1fb60:	429a      	cmp	r2, r3
   1fb62:	d012      	beq.n	1fb8a <ll_conn_update+0xba>
			    (conn->llcp_conn_param.state !=
   1fb64:	f89c 3186 	ldrb.w	r3, [ip, #390]	; 0x186
			     conn->llcp_conn_param.ack) ||
   1fb68:	f003 020f 	and.w	r2, r3, #15
   1fb6c:	2a03      	cmp	r2, #3
   1fb6e:	d10c      	bne.n	1fb8a <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   1fb70:	f004 040f 	and.w	r4, r4, #15
   1fb74:	f023 031f 	bic.w	r3, r3, #31
   1fb78:	f044 0410 	orr.w	r4, r4, #16
   1fb7c:	431c      	orrs	r4, r3
			conn->llcp_conn_param.status = status;
   1fb7e:	f88c 5187 	strb.w	r5, [ip, #391]	; 0x187
			conn->llcp_conn_param.state = cmd;
   1fb82:	f88c 4186 	strb.w	r4, [ip, #390]	; 0x186
}
   1fb86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   1fb8a:	200c      	movs	r0, #12
}
   1fb8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1fb90:	2002      	movs	r0, #2
}
   1fb92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		     (conn->llcp_feature.features_conn &
   1fb96:	f8dc 3128 	ldr.w	r3, [ip, #296]	; 0x128
		    (!conn->common.fex_valid ||
   1fb9a:	079b      	lsls	r3, r3, #30
   1fb9c:	d4b8      	bmi.n	1fb10 <ll_conn_update+0x40>
		} else if (conn->lll.role) {
   1fb9e:	f99c 3039 	ldrsb.w	r3, [ip, #57]	; 0x39
   1fba2:	2b00      	cmp	r3, #0
   1fba4:	db1e      	blt.n	1fbe4 <ll_conn_update+0x114>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   1fba6:	f89c 210c 	ldrb.w	r2, [ip, #268]	; 0x10c
   1fbaa:	f89c 310d 	ldrb.w	r3, [ip, #269]	; 0x10d
   1fbae:	4293      	cmp	r3, r2
   1fbb0:	d1eb      	bne.n	1fb8a <ll_conn_update+0xba>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1fbb2:	f89c 210e 	ldrb.w	r2, [ip, #270]	; 0x10e
		conn->llcp_cu.interval = interval_max;
   1fbb6:	f8ac 9110 	strh.w	r9, [ip, #272]	; 0x110
		conn->llcp_cu.req++;
   1fbba:	3301      	adds	r3, #1
   1fbbc:	f88c 310c 	strb.w	r3, [ip, #268]	; 0x10c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1fbc0:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.win_size = 1U;
   1fbc4:	2301      	movs	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1fbc6:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
   1fbca:	2000      	movs	r0, #0
		conn->llcp_cu.win_size = 1U;
   1fbcc:	f88c 311c 	strb.w	r3, [ip, #284]	; 0x11c
		conn->llcp_cu.latency = latency;
   1fbd0:	f8ac 8112 	strh.w	r8, [ip, #274]	; 0x112
		conn->llcp_cu.timeout = timeout;
   1fbd4:	f8ac 7114 	strh.w	r7, [ip, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1fbd8:	f88c 210e 	strb.w	r2, [ip, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
   1fbdc:	f8cc 0118 	str.w	r0, [ip, #280]	; 0x118
}
   1fbe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1fbe4:	201a      	movs	r0, #26
   1fbe6:	e7d1      	b.n	1fb8c <ll_conn_update+0xbc>
				ull_periph_latency_cancel(conn, handle);
   1fbe8:	4660      	mov	r0, ip
   1fbea:	2100      	movs	r1, #0
   1fbec:	f003 fe82 	bl	238f4 <ull_periph_latency_cancel>
	return 0;
   1fbf0:	2000      	movs	r0, #0
   1fbf2:	e7cb      	b.n	1fb8c <ll_conn_update+0xbc>
   1fbf4:	20001948 	.word	0x20001948

0001fbf8 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1fbf8:	b9d0      	cbnz	r0, 1fc30 <ll_chm_get+0x38>
{
   1fbfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fbfc:	4602      	mov	r2, r0
   1fbfe:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1fc00:	480c      	ldr	r0, [pc, #48]	; (1fc34 <ll_chm_get+0x3c>)
   1fc02:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1fc06:	f7fa fad9 	bl	1a1bc <mem_get>
	if (conn->lll.handle != handle) {
   1fc0a:	8d06      	ldrh	r6, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1fc0c:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   1fc0e:	b96e      	cbnz	r6, 1fc2c <ll_chm_get+0x34>
		memcpy(chm, conn->lll.data_chan_map,
   1fc10:	f100 0734 	add.w	r7, r0, #52	; 0x34
		conn->chm_updated = 0U;
   1fc14:	f884 61d8 	strb.w	r6, [r4, #472]	; 0x1d8
		memcpy(chm, conn->lll.data_chan_map,
   1fc18:	2205      	movs	r2, #5
   1fc1a:	4639      	mov	r1, r7
   1fc1c:	4628      	mov	r0, r5
   1fc1e:	f00e fa04 	bl	2e02a <memcpy>
	} while (conn->chm_updated);
   1fc22:	f894 01d8 	ldrb.w	r0, [r4, #472]	; 0x1d8
   1fc26:	2800      	cmp	r0, #0
   1fc28:	d1f4      	bne.n	1fc14 <ll_chm_get+0x1c>
}
   1fc2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1fc2c:	2002      	movs	r0, #2
}
   1fc2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1fc30:	2002      	movs	r0, #2
}
   1fc32:	4770      	bx	lr
   1fc34:	20001948 	.word	0x20001948

0001fc38 <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1fc38:	2800      	cmp	r0, #0
   1fc3a:	d13e      	bne.n	1fcba <ll_terminate_ind_send+0x82>
{
   1fc3c:	b510      	push	{r4, lr}
   1fc3e:	4602      	mov	r2, r0
   1fc40:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1fc42:	4821      	ldr	r0, [pc, #132]	; (1fcc8 <ll_terminate_ind_send+0x90>)
   1fc44:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1fc48:	f7fa fab8 	bl	1a1bc <mem_get>
	if (conn->lll.handle != handle) {
   1fc4c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   1fc4e:	bb93      	cbnz	r3, 1fcb6 <ll_terminate_ind_send+0x7e>
	if (conn->llcp_terminate.req != conn->llcp_terminate.ack) {
   1fc50:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
   1fc54:	f890 2141 	ldrb.w	r2, [r0, #321]	; 0x141
   1fc58:	429a      	cmp	r2, r3
   1fc5a:	d12a      	bne.n	1fcb2 <ll_terminate_ind_send+0x7a>
	switch (reason) {
   1fc5c:	2c29      	cmp	r4, #41	; 0x29
   1fc5e:	d819      	bhi.n	1fc94 <ll_terminate_ind_send+0x5c>
   1fc60:	2c04      	cmp	r4, #4
   1fc62:	d919      	bls.n	1fc98 <ll_terminate_ind_send+0x60>
   1fc64:	1f62      	subs	r2, r4, #5
   1fc66:	2a24      	cmp	r2, #36	; 0x24
   1fc68:	d816      	bhi.n	1fc98 <ll_terminate_ind_send+0x60>
   1fc6a:	e8df f002 	tbb	[pc, r2]
   1fc6e:	1517      	.short	0x1517
   1fc70:	15151515 	.word	0x15151515
   1fc74:	15151515 	.word	0x15151515
   1fc78:	15151515 	.word	0x15151515
   1fc7c:	15171717 	.word	0x15171717
   1fc80:	17151515 	.word	0x17151515
   1fc84:	15151515 	.word	0x15151515
   1fc88:	15151515 	.word	0x15151515
   1fc8c:	15151515 	.word	0x15151515
   1fc90:	1515      	.short	0x1515
   1fc92:	17          	.byte	0x17
   1fc93:	00          	.byte	0x00
   1fc94:	2c3b      	cmp	r4, #59	; 0x3b
   1fc96:	d001      	beq.n	1fc9c <ll_terminate_ind_send+0x64>
   1fc98:	2012      	movs	r0, #18
}
   1fc9a:	bd10      	pop	{r4, pc}
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1fc9c:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	conn->llcp_terminate.reason_own = reason;
   1fca0:	f880 4142 	strb.w	r4, [r0, #322]	; 0x142
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   1fca4:	3301      	adds	r3, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1fca6:	2a00      	cmp	r2, #0
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   1fca8:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1fcac:	db07      	blt.n	1fcbe <ll_terminate_ind_send+0x86>
	return 0;
   1fcae:	2000      	movs	r0, #0
}
   1fcb0:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1fcb2:	200c      	movs	r0, #12
}
   1fcb4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1fcb6:	2002      	movs	r0, #2
}
   1fcb8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1fcba:	2002      	movs	r0, #2
}
   1fcbc:	4770      	bx	lr
		ull_periph_latency_cancel(conn, handle);
   1fcbe:	2100      	movs	r1, #0
   1fcc0:	f003 fe18 	bl	238f4 <ull_periph_latency_cancel>
	return 0;
   1fcc4:	2000      	movs	r0, #0
}
   1fcc6:	bd10      	pop	{r4, pc}
   1fcc8:	20001948 	.word	0x20001948

0001fccc <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1fccc:	bb00      	cbnz	r0, 1fd10 <ll_feature_req_send+0x44>
{
   1fcce:	b510      	push	{r4, lr}
   1fcd0:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1fcd2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1fcd6:	480f      	ldr	r0, [pc, #60]	; (1fd14 <ll_feature_req_send+0x48>)
   1fcd8:	f7fa fa70 	bl	1a1bc <mem_get>
	if (conn->lll.handle != handle) {
   1fcdc:	8d04      	ldrh	r4, [r0, #40]	; 0x28
   1fcde:	b984      	cbnz	r4, 1fd02 <ll_feature_req_send+0x36>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   1fce0:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
   1fce4:	f890 2121 	ldrb.w	r2, [r0, #289]	; 0x121
   1fce8:	428a      	cmp	r2, r1
   1fcea:	d108      	bne.n	1fcfe <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1fcec:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_feature.req++;
   1fcf0:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1fcf2:	2900      	cmp	r1, #0
	conn->llcp_feature.req++;
   1fcf4:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1fcf8:	db05      	blt.n	1fd06 <ll_feature_req_send+0x3a>
	return 0;
   1fcfa:	4620      	mov	r0, r4
}
   1fcfc:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1fcfe:	200c      	movs	r0, #12
}
   1fd00:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1fd02:	2002      	movs	r0, #2
}
   1fd04:	bd10      	pop	{r4, pc}
		ull_periph_latency_cancel(conn, handle);
   1fd06:	4621      	mov	r1, r4
   1fd08:	f003 fdf4 	bl	238f4 <ull_periph_latency_cancel>
	return 0;
   1fd0c:	4620      	mov	r0, r4
}
   1fd0e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1fd10:	2002      	movs	r0, #2
}
   1fd12:	4770      	bx	lr
   1fd14:	20001948 	.word	0x20001948

0001fd18 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1fd18:	bb00      	cbnz	r0, 1fd5c <ll_version_ind_send+0x44>
{
   1fd1a:	b510      	push	{r4, lr}
   1fd1c:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1fd1e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1fd22:	480f      	ldr	r0, [pc, #60]	; (1fd60 <ll_version_ind_send+0x48>)
   1fd24:	f7fa fa4a 	bl	1a1bc <mem_get>
	if (conn->lll.handle != handle) {
   1fd28:	8d04      	ldrh	r4, [r0, #40]	; 0x28
   1fd2a:	b984      	cbnz	r4, 1fd4e <ll_version_ind_send+0x36>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   1fd2c:	f890 1138 	ldrb.w	r1, [r0, #312]	; 0x138
   1fd30:	f890 2139 	ldrb.w	r2, [r0, #313]	; 0x139
   1fd34:	428a      	cmp	r2, r1
   1fd36:	d108      	bne.n	1fd4a <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1fd38:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_version.req++;
   1fd3c:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1fd3e:	2900      	cmp	r1, #0
	conn->llcp_version.req++;
   1fd40:	f880 2138 	strb.w	r2, [r0, #312]	; 0x138
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1fd44:	db05      	blt.n	1fd52 <ll_version_ind_send+0x3a>
	return 0;
   1fd46:	4620      	mov	r0, r4
}
   1fd48:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1fd4a:	200c      	movs	r0, #12
}
   1fd4c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1fd4e:	2002      	movs	r0, #2
}
   1fd50:	bd10      	pop	{r4, pc}
		ull_periph_latency_cancel(conn, handle);
   1fd52:	4621      	mov	r1, r4
   1fd54:	f003 fdce 	bl	238f4 <ull_periph_latency_cancel>
	return 0;
   1fd58:	4620      	mov	r0, r4
}
   1fd5a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1fd5c:	2002      	movs	r0, #2
}
   1fd5e:	4770      	bx	lr
   1fd60:	20001948 	.word	0x20001948

0001fd64 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1fd64:	2800      	cmp	r0, #0
   1fd66:	d14c      	bne.n	1fe02 <ll_length_req_send+0x9e>
{
   1fd68:	b538      	push	{r3, r4, r5, lr}
   1fd6a:	460d      	mov	r5, r1
   1fd6c:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1fd6e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1fd72:	4602      	mov	r2, r0
   1fd74:	4824      	ldr	r0, [pc, #144]	; (1fe08 <ll_length_req_send+0xa4>)
   1fd76:	f7fa fa21 	bl	1a1bc <mem_get>
	if (conn->lll.handle != handle) {
   1fd7a:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   1fd7c:	bbc3      	cbnz	r3, 1fdf0 <ll_length_req_send+0x8c>
	if (conn->llcp_length.disabled ||
   1fd7e:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   1fd82:	071a      	lsls	r2, r3, #28
   1fd84:	d432      	bmi.n	1fdec <ll_length_req_send+0x88>
	    (conn->common.fex_valid &&
   1fd86:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
	if (conn->llcp_length.disabled ||
   1fd8a:	07d1      	lsls	r1, r2, #31
   1fd8c:	d503      	bpl.n	1fd96 <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_DLE)))) {
   1fd8e:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
	    (conn->common.fex_valid &&
   1fd92:	0692      	lsls	r2, r2, #26
   1fd94:	d52a      	bpl.n	1fdec <ll_length_req_send+0x88>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   1fd96:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
   1fd9a:	f890 21ad 	ldrb.w	r2, [r0, #429]	; 0x1ad
   1fd9e:	428a      	cmp	r2, r1
   1fda0:	d011      	beq.n	1fdc6 <ll_length_req_send+0x62>
		switch (conn->llcp_length.state) {
   1fda2:	f003 0307 	and.w	r3, r3, #7
   1fda6:	2b03      	cmp	r3, #3
   1fda8:	d004      	beq.n	1fdb4 <ll_length_req_send+0x50>
   1fdaa:	3303      	adds	r3, #3
   1fdac:	f003 0307 	and.w	r3, r3, #7
   1fdb0:	2b01      	cmp	r3, #1
   1fdb2:	d824      	bhi.n	1fdfe <ll_length_req_send+0x9a>
			if (!conn->llcp_length.cache.tx_octets) {
   1fdb4:	f8b0 31b8 	ldrh.w	r3, [r0, #440]	; 0x1b8
   1fdb8:	bb0b      	cbnz	r3, 1fdfe <ll_length_req_send+0x9a>
				conn->llcp_length.cache.tx_octets = tx_octets;
   1fdba:	f8a0 51b8 	strh.w	r5, [r0, #440]	; 0x1b8
				conn->llcp_length.cache.tx_time = tx_time;
   1fdbe:	f8a0 41ba 	strh.w	r4, [r0, #442]	; 0x1ba
				return 0;
   1fdc2:	4618      	mov	r0, r3
}
   1fdc4:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1fdc6:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
	conn->llcp_length.tx_octets = tx_octets;
   1fdca:	f8a0 51b2 	strh.w	r5, [r0, #434]	; 0x1b2
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1fdce:	f36f 0302 	bfc	r3, #0, #3
   1fdd2:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1fdd6:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_length.tx_time = tx_time;
   1fdda:	f8a0 41b6 	strh.w	r4, [r0, #438]	; 0x1b6
	conn->llcp_length.req++;
   1fdde:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1fde0:	2b00      	cmp	r3, #0
	conn->llcp_length.req++;
   1fde2:	f880 21ac 	strb.w	r2, [r0, #428]	; 0x1ac
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1fde6:	db05      	blt.n	1fdf4 <ll_length_req_send+0x90>
	return 0;
   1fde8:	2000      	movs	r0, #0
}
   1fdea:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1fdec:	201a      	movs	r0, #26
}
   1fdee:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1fdf0:	2002      	movs	r0, #2
}
   1fdf2:	bd38      	pop	{r3, r4, r5, pc}
		ull_periph_latency_cancel(conn, handle);
   1fdf4:	2100      	movs	r1, #0
   1fdf6:	f003 fd7d 	bl	238f4 <ull_periph_latency_cancel>
	return 0;
   1fdfa:	2000      	movs	r0, #0
}
   1fdfc:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   1fdfe:	200c      	movs	r0, #12
}
   1fe00:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1fe02:	2002      	movs	r0, #2
}
   1fe04:	4770      	bx	lr
   1fe06:	bf00      	nop
   1fe08:	20001948 	.word	0x20001948

0001fe0c <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   1fe0c:	4a03      	ldr	r2, [pc, #12]	; (1fe1c <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   1fe0e:	4b04      	ldr	r3, [pc, #16]	; (1fe20 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   1fe10:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   1fe12:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   1fe14:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   1fe16:	800b      	strh	r3, [r1, #0]
}
   1fe18:	4770      	bx	lr
   1fe1a:	bf00      	nop
   1fe1c:	200032ae 	.word	0x200032ae
   1fe20:	200032b0 	.word	0x200032b0

0001fe24 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   1fe24:	4a02      	ldr	r2, [pc, #8]	; (1fe30 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   1fe26:	4b03      	ldr	r3, [pc, #12]	; (1fe34 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   1fe28:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   1fe2a:	8019      	strh	r1, [r3, #0]
}
   1fe2c:	2000      	movs	r0, #0
   1fe2e:	4770      	bx	lr
   1fe30:	200032ae 	.word	0x200032ae
   1fe34:	200032b0 	.word	0x200032b0

0001fe38 <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   1fe38:	f04f 0c1b 	mov.w	ip, #27
   1fe3c:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   1fe40:	f44f 70a4 	mov.w	r0, #328	; 0x148
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   1fe44:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   1fe48:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   1fe4a:	8018      	strh	r0, [r3, #0]
}
   1fe4c:	4770      	bx	lr
   1fe4e:	bf00      	nop

0001fe50 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1fe50:	b9c0      	cbnz	r0, 1fe84 <ll_phy_get+0x34>
{
   1fe52:	b538      	push	{r3, r4, r5, lr}
   1fe54:	460d      	mov	r5, r1
   1fe56:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1fe58:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1fe5c:	4602      	mov	r2, r0
   1fe5e:	480a      	ldr	r0, [pc, #40]	; (1fe88 <ll_phy_get+0x38>)
   1fe60:	f7fa f9ac 	bl	1a1bc <mem_get>
   1fe64:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   1fe66:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   1fe68:	b950      	cbnz	r0, 1fe80 <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   1fe6a:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   1fe6e:	f3c2 0202 	ubfx	r2, r2, #0, #3
   1fe72:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   1fe74:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   1fe78:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1fe7c:	7023      	strb	r3, [r4, #0]
}
   1fe7e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1fe80:	2002      	movs	r0, #2
}
   1fe82:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1fe84:	2002      	movs	r0, #2
}
   1fe86:	4770      	bx	lr
   1fe88:	20001948 	.word	0x20001948

0001fe8c <ll_phy_default_set>:
	default_phy_tx = tx;
   1fe8c:	4a02      	ldr	r2, [pc, #8]	; (1fe98 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   1fe8e:	4b03      	ldr	r3, [pc, #12]	; (1fe9c <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   1fe90:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   1fe92:	7019      	strb	r1, [r3, #0]
}
   1fe94:	2000      	movs	r0, #0
   1fe96:	4770      	bx	lr
   1fe98:	2000341f 	.word	0x2000341f
   1fe9c:	2000341e 	.word	0x2000341e

0001fea0 <ll_phy_req_send>:
{
   1fea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   1fea2:	2800      	cmp	r0, #0
   1fea4:	d143      	bne.n	1ff2e <ll_phy_req_send+0x8e>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1fea6:	460c      	mov	r4, r1
   1fea8:	4616      	mov	r6, r2
   1feaa:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1feae:	4602      	mov	r2, r0
   1feb0:	4823      	ldr	r0, [pc, #140]	; (1ff40 <ll_phy_req_send+0xa0>)
   1feb2:	461f      	mov	r7, r3
   1feb4:	f7fa f982 	bl	1a1bc <mem_get>
	if (conn->lll.handle != handle) {
   1feb8:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   1feba:	bbc3      	cbnz	r3, 1ff2e <ll_phy_req_send+0x8e>
	if (conn->llcp_phy.disabled ||
   1febc:	f890 51bf 	ldrb.w	r5, [r0, #447]	; 0x1bf
   1fec0:	f015 0508 	ands.w	r5, r5, #8
   1fec4:	d130      	bne.n	1ff28 <ll_phy_req_send+0x88>
	    (conn->common.fex_valid &&
   1fec6:	f890 30d8 	ldrb.w	r3, [r0, #216]	; 0xd8
	if (conn->llcp_phy.disabled ||
   1feca:	07db      	lsls	r3, r3, #31
   1fecc:	d504      	bpl.n	1fed8 <ll_phy_req_send+0x38>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_PHY_2M)) &&
   1fece:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   1fed2:	f413 6f10 	tst.w	r3, #2304	; 0x900
   1fed6:	d027      	beq.n	1ff28 <ll_phy_req_send+0x88>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
   1fed8:	f890 31bc 	ldrb.w	r3, [r0, #444]	; 0x1bc
   1fedc:	f890 11bd 	ldrb.w	r1, [r0, #445]	; 0x1bd
   1fee0:	4299      	cmp	r1, r3
   1fee2:	d11e      	bne.n	1ff22 <ll_phy_req_send+0x82>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   1fee4:	f004 0407 	and.w	r4, r4, #7
   1fee8:	f8b0 21be 	ldrh.w	r2, [r0, #446]	; 0x1be
   1feec:	00a4      	lsls	r4, r4, #2
   1feee:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   1fef2:	f007 0307 	and.w	r3, r7, #7
   1fef6:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
   1fefa:	f006 0601 	and.w	r6, r6, #1
   1fefe:	f422 62df 	bic.w	r2, r2, #1784	; 0x6f8
   1ff02:	f022 0207 	bic.w	r2, r2, #7
   1ff06:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
   1ff0a:	4313      	orrs	r3, r2
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1ff0c:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   1ff10:	f8a0 31be 	strh.w	r3, [r0, #446]	; 0x1be
	conn->llcp_phy.req++;
   1ff14:	3101      	adds	r1, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1ff16:	2a00      	cmp	r2, #0
	conn->llcp_phy.req++;
   1ff18:	f880 11bc 	strb.w	r1, [r0, #444]	; 0x1bc
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1ff1c:	db0a      	blt.n	1ff34 <ll_phy_req_send+0x94>
}
   1ff1e:	4628      	mov	r0, r5
   1ff20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ff22:	250c      	movs	r5, #12
}
   1ff24:	4628      	mov	r0, r5
   1ff26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1ff28:	251a      	movs	r5, #26
}
   1ff2a:	4628      	mov	r0, r5
   1ff2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ff2e:	2502      	movs	r5, #2
}
   1ff30:	4628      	mov	r0, r5
   1ff32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ull_periph_latency_cancel(conn, handle);
   1ff34:	2100      	movs	r1, #0
   1ff36:	f003 fcdd 	bl	238f4 <ull_periph_latency_cancel>
}
   1ff3a:	4628      	mov	r0, r5
   1ff3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ff3e:	bf00      	nop
   1ff40:	20001948 	.word	0x20001948

0001ff44 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1ff44:	b9d8      	cbnz	r0, 1ff7e <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1ff46:	4602      	mov	r2, r0
{
   1ff48:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1ff4a:	480e      	ldr	r0, [pc, #56]	; (1ff84 <ll_apto_get+0x40>)
   1ff4c:	460c      	mov	r4, r1
   1ff4e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1ff52:	f7fa f933 	bl	1a1bc <mem_get>
   1ff56:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   1ff58:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   1ff5a:	b970      	cbnz	r0, 1ff7a <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   1ff5c:	f8b2 30ce 	ldrh.w	r3, [r2, #206]	; 0xce
   1ff60:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
   1ff62:	fb02 f303 	mul.w	r3, r2, r3
   1ff66:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   1ff6a:	4a07      	ldr	r2, [pc, #28]	; (1ff88 <ll_apto_get+0x44>)
   1ff6c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1ff70:	fba2 2303 	umull	r2, r3, r2, r3
   1ff74:	099b      	lsrs	r3, r3, #6
   1ff76:	8023      	strh	r3, [r4, #0]
}
   1ff78:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ff7a:	2002      	movs	r0, #2
}
   1ff7c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ff7e:	2002      	movs	r0, #2
}
   1ff80:	4770      	bx	lr
   1ff82:	bf00      	nop
   1ff84:	20001948 	.word	0x20001948
   1ff88:	10624dd3 	.word	0x10624dd3

0001ff8c <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1ff8c:	b9e0      	cbnz	r0, 1ffc8 <ll_apto_set+0x3c>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1ff8e:	4602      	mov	r2, r0
{
   1ff90:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1ff92:	480e      	ldr	r0, [pc, #56]	; (1ffcc <ll_apto_set+0x40>)
   1ff94:	460c      	mov	r4, r1
   1ff96:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1ff9a:	f7fa f90f 	bl	1a1bc <mem_get>
   1ff9e:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   1ffa0:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   1ffa2:	b978      	cbnz	r0, 1ffc4 <ll_apto_set+0x38>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   1ffa4:	f8b2 c02a 	ldrh.w	ip, [r2, #42]	; 0x2a
   1ffa8:	f240 43e2 	movw	r3, #1250	; 0x4e2
   1ffac:	fb03 fc0c 	mul.w	ip, r3, ip
   1ffb0:	f242 7310 	movw	r3, #10000	; 0x2710
   1ffb4:	fb03 c304 	mla	r3, r3, r4, ip
   1ffb8:	3b01      	subs	r3, #1
   1ffba:	fbb3 f3fc 	udiv	r3, r3, ip
   1ffbe:	f8a2 30ce 	strh.w	r3, [r2, #206]	; 0xce
}
   1ffc2:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ffc4:	2002      	movs	r0, #2
}
   1ffc6:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ffc8:	2002      	movs	r0, #2
}
   1ffca:	4770      	bx	lr
   1ffcc:	20001948 	.word	0x20001948

0001ffd0 <ull_conn_init>:
	err = init_reset();
   1ffd0:	f7fe beea 	b.w	1eda8 <init_reset>

0001ffd4 <ull_conn_reset>:
{
   1ffd4:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1ffd6:	2200      	movs	r2, #0
   1ffd8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1ffdc:	4815      	ldr	r0, [pc, #84]	; (20034 <ull_conn_reset+0x60>)
   1ffde:	f7fa f8ed 	bl	1a1bc <mem_get>
   1ffe2:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   1ffe4:	f100 021c 	add.w	r2, r0, #28
   1ffe8:	4601      	mov	r1, r0
   1ffea:	2003      	movs	r0, #3
   1ffec:	f7fd fe06 	bl	1dbfc <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   1fff0:	b108      	cbz	r0, 1fff6 <ull_conn_reset+0x22>
   1fff2:	3078      	adds	r0, #120	; 0x78
   1fff4:	d10f      	bne.n	20016 <ull_conn_reset+0x42>
	MFIFO_INIT(conn_tx);
   1fff6:	4810      	ldr	r0, [pc, #64]	; (20038 <ull_conn_reset+0x64>)
	MFIFO_INIT(conn_ack);
   1fff8:	4910      	ldr	r1, [pc, #64]	; (2003c <ull_conn_reset+0x68>)
	conn_upd_curr = NULL;
   1fffa:	4a11      	ldr	r2, [pc, #68]	; (20040 <ull_conn_reset+0x6c>)
	conn->lll.link_tx_free = NULL;
   1fffc:	2300      	movs	r3, #0
	conn->lll.handle = LLL_HANDLE_INVALID;
   1fffe:	f64f 7cff 	movw	ip, #65535	; 0xffff
	MFIFO_INIT(conn_tx);
   20002:	8083      	strh	r3, [r0, #4]
	MFIFO_INIT(conn_ack);
   20004:	808b      	strh	r3, [r1, #4]
	conn->lll.handle = LLL_HANDLE_INVALID;
   20006:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
	conn->lll.link_tx_free = NULL;
   2000a:	6763      	str	r3, [r4, #116]	; 0x74
}
   2000c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
   20010:	6013      	str	r3, [r2, #0]
	err = init_reset();
   20012:	f7fe bec9 	b.w	1eda8 <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
   20016:	4a0b      	ldr	r2, [pc, #44]	; (20044 <ull_conn_reset+0x70>)
   20018:	490b      	ldr	r1, [pc, #44]	; (20048 <ull_conn_reset+0x74>)
   2001a:	480c      	ldr	r0, [pc, #48]	; (2004c <ull_conn_reset+0x78>)
   2001c:	f640 1303 	movw	r3, #2307	; 0x903
   20020:	f00b ffd1 	bl	2bfc6 <assert_print>
   20024:	4040      	eors	r0, r0
   20026:	f380 8811 	msr	BASEPRI, r0
   2002a:	f04f 0003 	mov.w	r0, #3
   2002e:	df02      	svc	2
   20030:	e7e1      	b.n	1fff6 <ull_conn_reset+0x22>
   20032:	bf00      	nop
   20034:	20001948 	.word	0x20001948
   20038:	20000704 	.word	0x20000704
   2003c:	200006bc 	.word	0x200006bc
   20040:	200028b4 	.word	0x200028b4
   20044:	00033640 	.word	0x00033640
   20048:	00033750 	.word	0x00033750
   2004c:	00032fc4 	.word	0x00032fc4

00020050 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   20050:	4b01      	ldr	r3, [pc, #4]	; (20058 <ull_conn_default_tx_octets_get+0x8>)
}
   20052:	8818      	ldrh	r0, [r3, #0]
   20054:	4770      	bx	lr
   20056:	bf00      	nop
   20058:	200032ae 	.word	0x200032ae

0002005c <ull_conn_default_tx_time_get>:
	return default_tx_time;
   2005c:	4b01      	ldr	r3, [pc, #4]	; (20064 <ull_conn_default_tx_time_get+0x8>)
}
   2005e:	8818      	ldrh	r0, [r3, #0]
   20060:	4770      	bx	lr
   20062:	bf00      	nop
   20064:	200032b0 	.word	0x200032b0

00020068 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   20068:	4b01      	ldr	r3, [pc, #4]	; (20070 <ull_conn_default_phy_tx_get+0x8>)
}
   2006a:	7818      	ldrb	r0, [r3, #0]
   2006c:	4770      	bx	lr
   2006e:	bf00      	nop
   20070:	2000341f 	.word	0x2000341f

00020074 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   20074:	4b01      	ldr	r3, [pc, #4]	; (2007c <ull_conn_default_phy_rx_get+0x8>)
}
   20076:	7818      	ldrb	r0, [r3, #0]
   20078:	4770      	bx	lr
   2007a:	bf00      	nop
   2007c:	2000341e 	.word	0x2000341e

00020080 <ull_conn_setup>:
{
   20080:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
   20082:	688b      	ldr	r3, [r1, #8]
	rx->link = rx_link;
   20084:	6008      	str	r0, [r1, #0]
	hdr = HDR_LLL2ULL(ftr->param);
   20086:	681d      	ldr	r5, [r3, #0]
   20088:	782b      	ldrb	r3, [r5, #0]
{
   2008a:	460c      	mov	r4, r1
	if (ull_ref_get(hdr)) {
   2008c:	b193      	cbz	r3, 200b4 <ull_conn_setup+0x34>
		LL_ASSERT(!hdr->disabled_cb);
   2008e:	696b      	ldr	r3, [r5, #20]
   20090:	b163      	cbz	r3, 200ac <ull_conn_setup+0x2c>
   20092:	4a0b      	ldr	r2, [pc, #44]	; (200c0 <ull_conn_setup+0x40>)
   20094:	490b      	ldr	r1, [pc, #44]	; (200c4 <ull_conn_setup+0x44>)
   20096:	480c      	ldr	r0, [pc, #48]	; (200c8 <ull_conn_setup+0x48>)
   20098:	f44f 737b 	mov.w	r3, #1004	; 0x3ec
   2009c:	f00b ff93 	bl	2bfc6 <assert_print>
   200a0:	4040      	eors	r0, r0
   200a2:	f380 8811 	msr	BASEPRI, r0
   200a6:	f04f 0003 	mov.w	r0, #3
   200aa:	df02      	svc	2
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
   200ac:	4b07      	ldr	r3, [pc, #28]	; (200cc <ull_conn_setup+0x4c>)
   200ae:	e9c5 3405 	strd	r3, r4, [r5, #20]
}
   200b2:	bd38      	pop	{r3, r4, r5, pc}
   200b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		conn_setup_adv_scan_disabled_cb(rx);
   200b8:	4608      	mov	r0, r1
   200ba:	f7ff b86f 	b.w	1f19c <conn_setup_adv_scan_disabled_cb>
   200be:	bf00      	nop
   200c0:	00033640 	.word	0x00033640
   200c4:	00033538 	.word	0x00033538
   200c8:	00032fc4 	.word	0x00032fc4
   200cc:	0001f19d 	.word	0x0001f19d

000200d0 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   200d0:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   200d2:	88da      	ldrh	r2, [r3, #6]
   200d4:	2a00      	cmp	r2, #0
   200d6:	f040 80cd 	bne.w	20274 <ull_conn_rx+0x1a4>
{
   200da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   200de:	460e      	mov	r6, r1
   200e0:	b085      	sub	sp, #20
   200e2:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   200e4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   200e8:	48bb      	ldr	r0, [pc, #748]	; (203d8 <ull_conn_rx+0x308>)
   200ea:	f7fa f867 	bl	1a1bc <mem_get>
	if (conn->lll.handle != handle) {
   200ee:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   200f0:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   200f2:	2b00      	cmp	r3, #0
   200f4:	f040 80b7 	bne.w	20266 <ull_conn_rx+0x196>
	pdu_rx = (void *)(*rx)->pdu;
   200f8:	6835      	ldr	r5, [r6, #0]

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   200fa:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
	switch (pdu_rx->ll_id) {
   200fe:	7f29      	ldrb	r1, [r5, #28]
   20100:	f001 0103 	and.w	r1, r1, #3
   20104:	2903      	cmp	r1, #3
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   20106:	f002 0001 	and.w	r0, r2, #1
	switch (pdu_rx->ll_id) {
   2010a:	d128      	bne.n	2015e <ull_conn_rx+0x8e>
	opcode = pdu_rx->llctrl.opcode;
   2010c:	f895 801f 	ldrb.w	r8, [r5, #31]
	pdu_rx = (void *)(*rx)->pdu;
   20110:	f105 0c1c 	add.w	ip, r5, #28
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   20114:	b3c8      	cbz	r0, 2018a <ull_conn_rx+0xba>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   20116:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   2011a:	2b00      	cmp	r3, #0
		((!conn->llcp_enc.refresh &&
   2011c:	f002 0104 	and.w	r1, r2, #4
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   20120:	f2c0 80ac 	blt.w	2027c <ull_conn_rx+0x1ac>
	return (!conn->lll.role &&
   20124:	2900      	cmp	r1, #0
   20126:	f040 80fd 	bne.w	20324 <ull_conn_rx+0x254>
		((!conn->llcp_enc.refresh &&
   2012a:	f1b8 0f02 	cmp.w	r8, #2
   2012e:	f000 810d 	beq.w	2034c <ull_conn_rx+0x27c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   20132:	f1b8 0f05 	cmp.w	r8, #5
   20136:	d04a      	beq.n	201ce <ull_conn_rx+0xfe>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   20138:	f1b8 0f06 	cmp.w	r8, #6
   2013c:	f000 836a 	beq.w	20814 <ull_conn_rx+0x744>
   20140:	f1b8 0f0d 	cmp.w	r8, #13
   20144:	f000 81da 	beq.w	204fc <ull_conn_rx+0x42c>
   20148:	f1b8 0f11 	cmp.w	r8, #17
   2014c:	f000 826c 	beq.w	20628 <ull_conn_rx+0x558>
		conn->llcp_terminate.reason_final =
   20150:	223d      	movs	r2, #61	; 0x3d
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   20152:	2301      	movs	r3, #1
		conn->llcp_terminate.reason_final =
   20154:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143

		return 0;
   20158:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   2015a:	712b      	strb	r3, [r5, #4]
		return 0;
   2015c:	e007      	b.n	2016e <ull_conn_rx+0x9e>
	switch (pdu_rx->ll_id) {
   2015e:	b949      	cbnz	r1, 20174 <ull_conn_rx+0xa4>
		if (conn->llcp_enc.pause_rx) {
   20160:	b110      	cbz	r0, 20168 <ull_conn_rx+0x98>
			conn->llcp_terminate.reason_final =
   20162:	233d      	movs	r3, #61	; 0x3d
   20164:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   20168:	2301      	movs	r3, #1
   2016a:	712b      	strb	r3, [r5, #4]
	return 0;
   2016c:	2000      	movs	r0, #0
}
   2016e:	b005      	add	sp, #20
   20170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   20174:	2800      	cmp	r0, #0
   20176:	d0f9      	beq.n	2016c <ull_conn_rx+0x9c>
			conn->llcp_terminate.reason_final =
   20178:	213d      	movs	r1, #61	; 0x3d
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   2017a:	2201      	movs	r2, #1
	return 0;
   2017c:	4618      	mov	r0, r3
			conn->llcp_terminate.reason_final =
   2017e:	f884 1143 	strb.w	r1, [r4, #323]	; 0x143
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   20182:	712a      	strb	r2, [r5, #4]
}
   20184:	b005      	add	sp, #20
   20186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   2018a:	f1b8 0f18 	cmp.w	r8, #24
   2018e:	d81e      	bhi.n	201ce <ull_conn_rx+0xfe>
   20190:	e8df f018 	tbh	[pc, r8, lsl #1]
   20194:	02800126 	.word	0x02800126
   20198:	001900dc 	.word	0x001900dc
   2019c:	001d001d 	.word	0x001d001d
   201a0:	03e80340 	.word	0x03e80340
   201a4:	0303036b 	.word	0x0303036b
   201a8:	047a02ba 	.word	0x047a02ba
   201ac:	01b401f7 	.word	0x01b401f7
   201b0:	019f001d 	.word	0x019f001d
   201b4:	024a001d 	.word	0x024a001d
   201b8:	01950226 	.word	0x01950226
   201bc:	00e800e8 	.word	0x00e800e8
   201c0:	001d044b 	.word	0x001d044b
   201c4:	040e      	.short	0x040e
		break;

#if defined(CONFIG_BT_CTLR_LE_ENC)
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		if (!conn->lll.role ||
   201c6:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   201ca:	2b00      	cmp	r3, #0
   201cc:	db63      	blt.n	20296 <ull_conn_rx+0x1c6>
	if (conn->common.txn_lock) {
   201ce:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   201d2:	0798      	lsls	r0, r3, #30
   201d4:	d4c8      	bmi.n	20168 <ull_conn_rx+0x98>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   201d6:	4881      	ldr	r0, [pc, #516]	; (203dc <ull_conn_rx+0x30c>)
   201d8:	f7f9 ffbe 	bl	1a158 <mem_acquire>
	if (!tx) {
   201dc:	2800      	cmp	r0, #0
   201de:	f000 851f 	beq.w	20c20 <ull_conn_rx+0xb50>
	conn->common.txn_lock = 1U;
   201e2:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   201e6:	f043 0302 	orr.w	r3, r3, #2
   201ea:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   201ee:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   201f0:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   201f4:	f043 0303 	orr.w	r3, r3, #3
   201f8:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   201fa:	2302      	movs	r3, #2
   201fc:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   201fe:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   20202:	2307      	movs	r3, #7
   20204:	71c3      	strb	r3, [r0, #7]
	if (
   20206:	b1f2      	cbz	r2, 20246 <ull_conn_rx+0x176>
	    !conn->llcp_enc.pause_tx &&
   20208:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   2020c:	0799      	lsls	r1, r3, #30
   2020e:	d41a      	bmi.n	20246 <ull_conn_rx+0x176>
	    !conn->llcp_phy.pause_tx &&
   20210:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   20214:	07db      	lsls	r3, r3, #31
   20216:	d416      	bmi.n	20246 <ull_conn_rx+0x176>
		if (conn->tx_head == conn->tx_data) {
   20218:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   2021c:	429a      	cmp	r2, r3
   2021e:	f000 8508 	beq.w	20c32 <ull_conn_rx+0xb62>
		} else if (!conn->tx_ctrl) {
   20222:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   20226:	2b00      	cmp	r3, #0
   20228:	f000 8556 	beq.w	20cd8 <ull_conn_rx+0xc08>
	tx->next = conn->tx_ctrl_last->next;
   2022c:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   20230:	6813      	ldr	r3, [r2, #0]
   20232:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   20234:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   20236:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   20238:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   2023c:	2a00      	cmp	r2, #0
   2023e:	d193      	bne.n	20168 <ull_conn_rx+0x98>
		conn->tx_data_last = tx;
   20240:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   20244:	e790      	b.n	20168 <ull_conn_rx+0x98>
		if (!conn->tx_ctrl) {
   20246:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   2024a:	2b00      	cmp	r3, #0
   2024c:	f000 84de 	beq.w	20c0c <ull_conn_rx+0xb3c>
	tx->next = conn->tx_ctrl_last->next;
   20250:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   20254:	681a      	ldr	r2, [r3, #0]
   20256:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   20258:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   2025a:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   2025c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   20260:	2a00      	cmp	r2, #0
   20262:	d181      	bne.n	20168 <ull_conn_rx+0x98>
   20264:	e7ec      	b.n	20240 <ull_conn_rx+0x170>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   20266:	6833      	ldr	r3, [r6, #0]
   20268:	2201      	movs	r2, #1
		return 0;
   2026a:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   2026c:	711a      	strb	r2, [r3, #4]
}
   2026e:	b005      	add	sp, #20
   20270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   20274:	2201      	movs	r2, #1
   20276:	711a      	strb	r2, [r3, #4]
		return 0;
   20278:	2000      	movs	r0, #0
}
   2027a:	4770      	bx	lr
	       (conn->lll.role &&
   2027c:	2900      	cmp	r1, #0
   2027e:	d05d      	beq.n	2033c <ull_conn_rx+0x26c>
		 (conn->llcp_enc.refresh &&
   20280:	f1b8 0f02 	cmp.w	r8, #2
   20284:	d062      	beq.n	2034c <ull_conn_rx+0x27c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   20286:	f1b8 0f0b 	cmp.w	r8, #11
   2028a:	f000 84e5 	beq.w	20c58 <ull_conn_rx+0xb88>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   2028e:	f1b8 0f03 	cmp.w	r8, #3
   20292:	f47f af51 	bne.w	20138 <ull_conn_rx+0x68>
		if (!conn->lll.role ||
   20296:	7f6b      	ldrb	r3, [r5, #29]
   20298:	2b17      	cmp	r3, #23
   2029a:	d198      	bne.n	201ce <ull_conn_rx+0xfe>

#if defined(CONFIG_BT_CTLR_PHY)
		/* LL_ENC_REQ was received while local peripheral initiated
		 * procedure is in progress.
		 */
		if (unlikely(((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   2029c:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   202a0:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   202a4:	1a9b      	subs	r3, r3, r2
   202a6:	f003 0303 	and.w	r3, r3, #3
   202aa:	2b02      	cmp	r3, #2
   202ac:	f001 8190 	beq.w	215d0 <ull_conn_rx+0x1500>

		/* Start Enc Req to be scheduled by LL api */
		conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
#else /* CONFIG_BT_CTLR_FAST_ENC */
		/* back up rand and ediv for deferred generation of Enc Req */
		memcpy(&conn->llcp_enc.rand[0],
   202b0:	2208      	movs	r2, #8
   202b2:	f105 0120 	add.w	r1, r5, #32
   202b6:	f204 1069 	addw	r0, r4, #361	; 0x169
   202ba:	f00d feb6 	bl	2e02a <memcpy>
		       &pdu_rx->llctrl.enc_req.rand[0],
		       sizeof(conn->llcp_enc.rand));
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   202be:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   202c2:	f884 3167 	strb.w	r3, [r4, #359]	; 0x167
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   202c6:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29

		/* Enc rsp to be scheduled in central prepare */
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   202ca:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   202ce:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   202d2:	6831      	ldr	r1, [r6, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   202d4:	2301      	movs	r3, #1
   202d6:	f363 0201 	bfi	r2, r3, #0, #2
   202da:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   202de:	710b      	strb	r3, [r1, #4]
#endif /* CONFIG_BT_CTLR_FAST_ENC */

		/* Enc Setup state machine active */
		conn->llcp_type = LLCP_ENCRYPTION;
		conn->llcp_ack -= 2U;
   202e0:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
		conn->llcp_type = LLCP_ENCRYPTION;
   202e4:	2103      	movs	r1, #3
		conn->llcp_ack -= 2U;
   202e6:	3b02      	subs	r3, #2
   202e8:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5

		/* things from central stored for session key calculation */
		memcpy(&conn->llcp.encryption.skd[0],
   202ec:	2208      	movs	r2, #8
		conn->llcp_type = LLCP_ENCRYPTION;
   202ee:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
		memcpy(&conn->llcp.encryption.skd[0],
   202f2:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
   202f6:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   202fa:	f00d fe96 	bl	2e02a <memcpy>
		       &pdu_rx->llctrl.enc_req.skdm[0], 8);
		memcpy(&conn->lll.ccm_rx.iv[0],
   202fe:	2204      	movs	r2, #4
   20300:	f105 0132 	add.w	r1, r5, #50	; 0x32
   20304:	f104 0094 	add.w	r0, r4, #148	; 0x94
   20308:	f00d fe8f 	bl	2e02a <memcpy>
		       &pdu_rx->llctrl.enc_req.ivm[0], 4);

		/* pause rx data packets */
		conn->llcp_enc.pause_rx = 1U;
   2030c:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166

		/* Start Procedure Timeout (TODO: this shall not replace
		 * terminate procedure).
		 */
		conn->procedure_expire = conn->procedure_reload;
   20310:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
   20314:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->llcp_enc.pause_rx = 1U;
   20318:	f043 0301 	orr.w	r3, r3, #1
   2031c:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	int nack = 0;
   20320:	2000      	movs	r0, #0

		break;
   20322:	e724      	b.n	2016e <ull_conn_rx+0x9e>
		 (conn->llcp_enc.refresh &&
   20324:	f1b8 0f02 	cmp.w	r8, #2
   20328:	d010      	beq.n	2034c <ull_conn_rx+0x27c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   2032a:	f1b8 0f0b 	cmp.w	r8, #11
   2032e:	f000 847b 	beq.w	20c28 <ull_conn_rx+0xb58>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   20332:	f1b8 0f04 	cmp.w	r8, #4
   20336:	f47f aefc 	bne.w	20132 <ull_conn_rx+0x62>
   2033a:	e748      	b.n	201ce <ull_conn_rx+0xfe>
		((!conn->llcp_enc.refresh &&
   2033c:	f1b8 0f07 	cmp.w	r8, #7
   20340:	f000 8310 	beq.w	20964 <ull_conn_rx+0x894>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   20344:	f1b8 0f02 	cmp.w	r8, #2
   20348:	f47f aef6 	bne.w	20138 <ull_conn_rx+0x68>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
   2034c:	7f6b      	ldrb	r3, [r5, #29]
   2034e:	2b02      	cmp	r3, #2
   20350:	f47f af3d 	bne.w	201ce <ull_conn_rx+0xfe>
	conn->llcp_terminate.reason_final =
   20354:	f895 2020 	ldrb.w	r2, [r5, #32]
   20358:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   2035c:	2301      	movs	r3, #1
	int nack = 0;
   2035e:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   20360:	712b      	strb	r3, [r5, #4]
}
   20362:	e704      	b.n	2016e <ull_conn_rx+0x9e>
		break;

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_RSP:
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if (PDU_DATA_LLCTRL_LEN(length_req) != pdu_rx->len) {
   20364:	7f6b      	ldrb	r3, [r5, #29]
   20366:	2b09      	cmp	r3, #9
   20368:	f47f af31 	bne.w	201ce <ull_conn_rx+0xfe>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   2036c:	f1b8 0f14 	cmp.w	r8, #20
   20370:	f000 84bc 	beq.w	20cec <ull_conn_rx+0xc1c>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   20374:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
   20378:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
   2037c:	4293      	cmp	r3, r2
   2037e:	f001 804e 	beq.w	2141e <ull_conn_rx+0x134e>
	eff_rx_octets = conn->lll.max_rx_octets;
   20382:	f8b4 b05a 	ldrh.w	fp, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   20386:	f8b4 a058 	ldrh.w	sl, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   2038a:	f8b4 905e 	ldrh.w	r9, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   2038e:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   20392:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
	struct node_tx *tx = NULL;
   20396:	2300      	movs	r3, #0
	       tx) ||
   20398:	f001 0107 	and.w	r1, r1, #7
   2039c:	2902      	cmp	r1, #2
   2039e:	f000 84c5 	beq.w	20d2c <ull_conn_rx+0xc5c>
   203a2:	f895 801f 	ldrb.w	r8, [r5, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   203a6:	f1b8 0f15 	cmp.w	r8, #21
   203aa:	f43f aedf 	beq.w	2016c <ull_conn_rx+0x9c>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   203ae:	4618      	mov	r0, r3
   203b0:	490a      	ldr	r1, [pc, #40]	; (203dc <ull_conn_rx+0x30c>)
   203b2:	f7f9 feeb 	bl	1a18c <mem_release>
			if (conn->llcp_length.state ==
   203b6:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->common.txn_lock = 0U;
   203ba:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
   203be:	f003 0307 	and.w	r3, r3, #7
			conn->common.txn_lock = 0U;
   203c2:	f36f 0241 	bfc	r2, #1, #1
			if (conn->llcp_length.state ==
   203c6:	2b04      	cmp	r3, #4
			conn->common.txn_lock = 0U;
   203c8:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
   203cc:	f47f aece 	bne.w	2016c <ull_conn_rx+0x9c>
				return -EBUSY;
   203d0:	f06f 000f 	mvn.w	r0, #15
   203d4:	e6cb      	b.n	2016e <ull_conn_rx+0x9e>
   203d6:	bf00      	nop
   203d8:	20001948 	.word	0x20001948
   203dc:	20002948 	.word	0x20002948
		if (!conn->lll.role ||
   203e0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   203e4:	2b00      	cmp	r3, #0
   203e6:	f6bf aef2 	bge.w	201ce <ull_conn_rx+0xfe>
   203ea:	7f6b      	ldrb	r3, [r5, #29]
   203ec:	2b0c      	cmp	r3, #12
   203ee:	f47f aeee 	bne.w	201ce <ull_conn_rx+0xfe>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   203f2:	f8b5 2029 	ldrh.w	r2, [r5, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   203f6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   203f8:	1ad3      	subs	r3, r2, r3
   203fa:	041b      	lsls	r3, r3, #16
   203fc:	f100 8748 	bmi.w	21290 <ull_conn_rx+0x11c0>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   20400:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   20404:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   20408:	1a5b      	subs	r3, r3, r1
   2040a:	f003 0303 	and.w	r3, r3, #3
   2040e:	2b02      	cmp	r3, #2
   20410:	f000 87c8 	beq.w	213a4 <ull_conn_rx+0x12d4>
	if (!conn_upd_curr) {
   20414:	4bba      	ldr	r3, [pc, #744]	; (20700 <ull_conn_rx+0x630>)
   20416:	6819      	ldr	r1, [r3, #0]
   20418:	2900      	cmp	r1, #0
   2041a:	f000 87ed 	beq.w	213f8 <ull_conn_rx+0x1328>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   2041e:	f895 3020 	ldrb.w	r3, [r5, #32]
   20422:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   20426:	f8b5 3021 	ldrh.w	r3, [r5, #33]	; 0x21
   2042a:	f240 41e2 	movw	r1, #1250	; 0x4e2
   2042e:	fb01 f303 	mul.w	r3, r1, r3
	conn->llcp_cu.win_offset_us =
   20432:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   20436:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
   2043a:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   2043e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.interval =
   20442:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   20446:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
   2044a:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   2044e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.latency =
   20452:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   20456:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   2045a:	f895 1027 	ldrb.w	r1, [r5, #39]	; 0x27
   2045e:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   20462:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   20466:	f023 030f 	bic.w	r3, r3, #15
   2046a:	f043 0308 	orr.w	r3, r3, #8
   2046e:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
	conn->llcp_cu.ack--;
   20472:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   20476:	ea41 2200 	orr.w	r2, r1, r0, lsl #8
	conn->llcp_cu.timeout =
   2047a:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
	conn->llcp_cu.ack--;
   2047e:	3b01      	subs	r3, #1
	link->mem = conn->llcp_rx;
   20480:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
	conn->llcp_cu.ack--;
   20484:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
	link->mem = conn->llcp_rx;
   20488:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
   2048a:	6832      	ldr	r2, [r6, #0]
   2048c:	6017      	str	r7, [r2, #0]
	conn->llcp_rx = *rx;
   2048e:	6832      	ldr	r2, [r6, #0]
   20490:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	*rx = NULL;
   20494:	2300      	movs	r3, #0
   20496:	6033      	str	r3, [r6, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   20498:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   2049c:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   204a0:	4293      	cmp	r3, r2
   204a2:	d007      	beq.n	204b4 <ull_conn_rx+0x3e4>
	    ((conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) ||
   204a4:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   204a8:	f003 030e 	and.w	r3, r3, #14
   204ac:	2b04      	cmp	r3, #4
   204ae:	d101      	bne.n	204b4 <ull_conn_rx+0x3e4>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   204b0:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
		conn->procedure_expire = 0U;
   204b4:	2300      	movs	r3, #0
   204b6:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   204ba:	4618      	mov	r0, r3
		break;
   204bc:	e657      	b.n	2016e <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(ping_rsp) != pdu_rx->len) {
   204be:	7f6a      	ldrb	r2, [r5, #29]
   204c0:	2a01      	cmp	r2, #1
   204c2:	f47f ae84 	bne.w	201ce <ull_conn_rx+0xfe>
		conn->procedure_expire = 0U;
   204c6:	2300      	movs	r3, #0
   204c8:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   204cc:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   204ce:	712a      	strb	r2, [r5, #4]
		break;
   204d0:	e64d      	b.n	2016e <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
   204d2:	7f6b      	ldrb	r3, [r5, #29]
   204d4:	2b18      	cmp	r3, #24
   204d6:	f47f ae7a 	bne.w	201ce <ull_conn_rx+0xfe>
	return conn_upd_curr && (conn_upd_curr != conn);
   204da:	4889      	ldr	r0, [pc, #548]	; (20700 <ull_conn_rx+0x630>)
   204dc:	6803      	ldr	r3, [r0, #0]
   204de:	2b00      	cmp	r3, #0
   204e0:	f000 83c6 	beq.w	20c70 <ull_conn_rx+0xba0>
   204e4:	429c      	cmp	r4, r3
   204e6:	f000 83c3 	beq.w	20c70 <ull_conn_rx+0xba0>
			nack = reject_ext_ind_send(conn, *rx,
   204ea:	2320      	movs	r3, #32
   204ec:	220f      	movs	r2, #15
   204ee:	4629      	mov	r1, r5
   204f0:	4620      	mov	r0, r4
}
   204f2:	b005      	add	sp, #20
   204f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			nack = reject_ext_ind_send(conn, *rx,
   204f8:	f7fe bf24 	b.w	1f344 <reject_ext_ind_send>
		if (PDU_DATA_LLCTRL_LEN(reject_ind) != pdu_rx->len) {
   204fc:	7f6b      	ldrb	r3, [r5, #29]
   204fe:	2b02      	cmp	r3, #2
   20500:	f47f ae65 	bne.w	201ce <ull_conn_rx+0xfe>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   20504:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   20508:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   2050c:	4293      	cmp	r3, r2
   2050e:	d004      	beq.n	2051a <ull_conn_rx+0x44a>
   20510:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   20514:	2b03      	cmp	r3, #3
   20516:	f000 86a5 	beq.w	21264 <ull_conn_rx+0x1194>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   2051a:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   2051e:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   20522:	4293      	cmp	r3, r2
   20524:	f000 84ef 	beq.w	20f06 <ull_conn_rx+0xe36>
		rej_ext_ind->error_code = rej_ind->error_code;
   20528:	f895 1020 	ldrb.w	r1, [r5, #32]
   2052c:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   20530:	2923      	cmp	r1, #35	; 0x23
   20532:	d012      	beq.n	2055a <ull_conn_rx+0x48a>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   20534:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   20538:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   2053c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   20540:	f36f 0200 	bfc	r2, #0, #1
   20544:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
   20548:	2200      	movs	r2, #0
   2054a:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   2054e:	f3c3 0202 	ubfx	r2, r3, #0, #3
   20552:	f362 1306 	bfi	r3, r2, #4, #3
   20556:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
   2055a:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   2055e:	075e      	lsls	r6, r3, #29
   20560:	f57f ae02 	bpl.w	20168 <ull_conn_rx+0x98>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   20564:	231d      	movs	r3, #29
   20566:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   20568:	7729      	strb	r1, [r5, #28]
	p->tx = conn->lll.phy_tx;
   2056a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   2056e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   20572:	776b      	strb	r3, [r5, #29]
	p->rx = conn->lll.phy_rx;
   20574:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   20578:	f3c3 0302 	ubfx	r3, r3, #0, #3
	int nack = 0;
   2057c:	2000      	movs	r0, #0
	p->rx = conn->lll.phy_rx;
   2057e:	77ab      	strb	r3, [r5, #30]
	if (err) {
   20580:	e5f5      	b.n	2016e <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
   20582:	7f6e      	ldrb	r6, [r5, #29]
   20584:	2e06      	cmp	r6, #6
   20586:	f47f ae22 	bne.w	201ce <ull_conn_rx+0xfe>
	if (!conn->llcp_version.tx) {
   2058a:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   2058e:	07df      	lsls	r7, r3, #31
   20590:	f140 85ae 	bpl.w	210f0 <ull_conn_rx+0x1020>
	} else if (!conn->llcp_version.rx) {
   20594:	f013 0302 	ands.w	r3, r3, #2
   20598:	f47f ade6 	bne.w	20168 <ull_conn_rx+0x98>
		conn->llcp_version.ack = conn->llcp_version.req;
   2059c:	f894 2138 	ldrb.w	r2, [r4, #312]	; 0x138
   205a0:	f884 2139 	strb.w	r2, [r4, #313]	; 0x139
		conn->procedure_expire = 0U;
   205a4:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_version.version_number = v->version_number;
   205a8:	f895 3020 	ldrb.w	r3, [r5, #32]
   205ac:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   205b0:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
   205b4:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   205b8:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   205bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   205c0:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
		sys_le16_to_cpu(v->sub_version_number);
   205c4:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
   205c8:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   205cc:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   205d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   205d4:	f8a4 213e 	strh.w	r2, [r4, #318]	; 0x13e
	conn->llcp_version.rx = 1U;
   205d8:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	return 0;
   205dc:	2000      	movs	r0, #0
   205de:	e5c6      	b.n	2016e <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
   205e0:	7f6f      	ldrb	r7, [r5, #29]
   205e2:	2f01      	cmp	r7, #1
   205e4:	f47f adf3 	bne.w	201ce <ull_conn_rx+0xfe>
	if (conn->common.txn_lock) {
   205e8:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   205ec:	f013 0602 	ands.w	r6, r3, #2
   205f0:	f040 85a9 	bne.w	21146 <ull_conn_rx+0x1076>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   205f4:	4843      	ldr	r0, [pc, #268]	; (20704 <ull_conn_rx+0x634>)
   205f6:	f7f9 fdaf 	bl	1a158 <mem_acquire>
	if (!tx) {
   205fa:	4601      	mov	r1, r0
   205fc:	2800      	cmp	r0, #0
   205fe:	f000 830f 	beq.w	20c20 <ull_conn_rx+0xb50>
	conn->common.txn_lock = 1U;
   20602:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   20606:	f043 0302 	orr.w	r3, r3, #2
   2060a:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   2060e:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   20610:	714f      	strb	r7, [r1, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   20612:	f043 0303 	orr.w	r3, r3, #3
   20616:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   20618:	2313      	movs	r3, #19
	ctrl_tx_sec_enqueue(conn, tx);
   2061a:	4620      	mov	r0, r4
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   2061c:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   2061e:	f7fe fce9 	bl	1eff4 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   20622:	712f      	strb	r7, [r5, #4]
	return 0;
   20624:	4630      	mov	r0, r6
   20626:	e5a2      	b.n	2016e <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
   20628:	7f6b      	ldrb	r3, [r5, #29]
   2062a:	2b03      	cmp	r3, #3
   2062c:	f47f adcf 	bne.w	201ce <ull_conn_rx+0xfe>
	switch (rej_ext_ind->reject_opcode) {
   20630:	f895 3020 	ldrb.w	r3, [r5, #32]
   20634:	3b03      	subs	r3, #3
   20636:	2b13      	cmp	r3, #19
   20638:	f63f ad96 	bhi.w	20168 <ull_conn_rx+0x98>
   2063c:	a201      	add	r2, pc, #4	; (adr r2, 20644 <ull_conn_rx+0x574>)
   2063e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   20642:	bf00      	nop
   20644:	00020b7f 	.word	0x00020b7f
   20648:	00020169 	.word	0x00020169
   2064c:	00020169 	.word	0x00020169
   20650:	00020169 	.word	0x00020169
   20654:	00020169 	.word	0x00020169
   20658:	00020169 	.word	0x00020169
   2065c:	00020169 	.word	0x00020169
   20660:	00020169 	.word	0x00020169
   20664:	00020169 	.word	0x00020169
   20668:	00020169 	.word	0x00020169
   2066c:	00020169 	.word	0x00020169
   20670:	00020169 	.word	0x00020169
   20674:	00020b05 	.word	0x00020b05
   20678:	00020169 	.word	0x00020169
   2067c:	00020169 	.word	0x00020169
   20680:	00020169 	.word	0x00020169
   20684:	00020169 	.word	0x00020169
   20688:	00020ac7 	.word	0x00020ac7
   2068c:	00020169 	.word	0x00020169
   20690:	00020bbf 	.word	0x00020bbf
		if (!conn->lll.role ||
   20694:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   20698:	2b00      	cmp	r3, #0
   2069a:	f6bf ad98 	bge.w	201ce <ull_conn_rx+0xfe>
   2069e:	7f6b      	ldrb	r3, [r5, #29]
   206a0:	2b08      	cmp	r3, #8
   206a2:	f47f ad94 	bne.w	201ce <ull_conn_rx+0xfe>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   206a6:	f8b5 6025 	ldrh.w	r6, [r5, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   206aa:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   206ac:	1af3      	subs	r3, r6, r3
   206ae:	041f      	lsls	r7, r3, #16
   206b0:	f100 85ee 	bmi.w	21290 <ull_conn_rx+0x11c0>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   206b4:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   206b8:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   206bc:	1a9b      	subs	r3, r3, r2
   206be:	f003 0303 	and.w	r3, r3, #3
   206c2:	2b02      	cmp	r3, #2
   206c4:	f000 866e 	beq.w	213a4 <ull_conn_rx+0x12d4>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   206c8:	2205      	movs	r2, #5
   206ca:	f105 0120 	add.w	r1, r5, #32
   206ce:	f104 00e9 	add.w	r0, r4, #233	; 0xe9
   206d2:	f00d fcaa 	bl	2e02a <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   206d6:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_ack -= 2U;
   206da:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
	conn->llcp.chan_map.instant = instant;
   206de:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
	conn->llcp.chan_map.initiate = 0U;
   206e2:	f36f 0200 	bfc	r2, #0, #1
   206e6:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_type = LLCP_CHAN_MAP;
   206ea:	2102      	movs	r1, #2
	conn->llcp_ack -= 2U;
   206ec:	3b02      	subs	r3, #2
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   206ee:	2201      	movs	r2, #1
	conn->llcp_type = LLCP_CHAN_MAP;
   206f0:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	conn->llcp_ack -= 2U;
   206f4:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	int nack = 0;
   206f8:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   206fa:	712a      	strb	r2, [r5, #4]
		if (err) {
   206fc:	e537      	b.n	2016e <ull_conn_rx+0x9e>
   206fe:	bf00      	nop
   20700:	200028b4 	.word	0x200028b4
   20704:	20002948 	.word	0x20002948
		if (!conn->lll.role ||
   20708:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   2070c:	2b00      	cmp	r3, #0
   2070e:	f6bf ad5e 	bge.w	201ce <ull_conn_rx+0xfe>
   20712:	7f6e      	ldrb	r6, [r5, #29]
   20714:	2e01      	cmp	r6, #1
   20716:	f47f ad5a 	bne.w	201ce <ull_conn_rx+0xfe>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   2071a:	48d9      	ldr	r0, [pc, #868]	; (20a80 <ull_conn_rx+0x9b0>)
   2071c:	f7f9 fd1c 	bl	1a158 <mem_acquire>
		if (!tx) {
   20720:	2800      	cmp	r0, #0
   20722:	f000 827d 	beq.w	20c20 <ull_conn_rx+0xb50>
	conn->llcp_enc.pause_rx = 1U;
   20726:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   2072a:	f023 0305 	bic.w	r3, r3, #5
   2072e:	f043 0305 	orr.w	r3, r3, #5
   20732:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   20736:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   2073a:	f36f 03c3 	bfc	r3, #3, #1
   2073e:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   20742:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   20744:	7146      	strb	r6, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   20746:	f043 0303 	orr.w	r3, r3, #3
   2074a:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
   2074c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   20750:	220b      	movs	r2, #11
   20752:	71c2      	strb	r2, [r0, #7]
	if (
   20754:	2b00      	cmp	r3, #0
   20756:	f000 82b4 	beq.w	20cc2 <ull_conn_rx+0xbf2>
	    !conn->llcp_enc.pause_tx &&
   2075a:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   2075e:	0791      	lsls	r1, r2, #30
   20760:	f100 82af 	bmi.w	20cc2 <ull_conn_rx+0xbf2>
	    !conn->llcp_phy.pause_tx &&
   20764:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   20768:	07d2      	lsls	r2, r2, #31
   2076a:	f100 82aa 	bmi.w	20cc2 <ull_conn_rx+0xbf2>
		if (conn->tx_head == conn->tx_data) {
   2076e:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   20772:	4293      	cmp	r3, r2
   20774:	f000 8756 	beq.w	21624 <ull_conn_rx+0x1554>
		} else if (!conn->tx_ctrl) {
   20778:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   2077c:	2a00      	cmp	r2, #0
   2077e:	f000 8769 	beq.w	21654 <ull_conn_rx+0x1584>
	tx->next = conn->tx_ctrl_last->next;
   20782:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   20786:	681a      	ldr	r2, [r3, #0]
   20788:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   2078a:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   2078c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   20790:	6803      	ldr	r3, [r0, #0]
   20792:	2b00      	cmp	r3, #0
   20794:	f47f ace8 	bne.w	20168 <ull_conn_rx+0x98>
   20798:	e552      	b.n	20240 <ull_conn_rx+0x170>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG) &&
   2079a:	7f6b      	ldrb	r3, [r5, #29]
   2079c:	2b09      	cmp	r3, #9
   2079e:	f47f ad16 	bne.w	201ce <ull_conn_rx+0xfe>
   207a2:	6a2a      	ldr	r2, [r5, #32]
	feat &= LL_FEAT_BIT_MASK;
   207a4:	49b7      	ldr	r1, [pc, #732]	; (20a84 <ull_conn_rx+0x9b4>)
   207a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   207a8:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   207aa:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
   207ae:	400a      	ands	r2, r1
   207b0:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
   207b4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   207b8:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
	feat &= LL_FEAT_BIT_MASK;
   207bc:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   207c0:	4013      	ands	r3, r2
   207c2:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
   207c6:	6a2e      	ldr	r6, [r5, #32]
   207c8:	6a6d      	ldr	r5, [r5, #36]	; 0x24
		feat_land_octet0(feat_get(&rsp->features[0]), ll_feat_get());
   207ca:	f7fc fc13 	bl	1cff4 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   207ce:	f005 03ff 	and.w	r3, r5, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   207d2:	f043 0310 	orr.w	r3, r3, #16
	feat &= LL_FEAT_BIT_MASK;
   207d6:	4aab      	ldr	r2, [pc, #684]	; (20a84 <ull_conn_rx+0x9b4>)
	conn->llcp_feature.features_peer =
   207d8:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
	conn->common.fex_valid = 1U;
   207dc:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	feat &= LL_FEAT_BIT_MASK;
   207e0:	4332      	orrs	r2, r6
	conn->common.fex_valid = 1U;
   207e2:	f043 0301 	orr.w	r3, r3, #1
	feat_result = feat_to_keep & feat_octet0;
   207e6:	4002      	ands	r2, r0
	conn->common.fex_valid = 1U;
   207e8:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	conn->llcp_feature.ack = conn->llcp_feature.req;
   207ec:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
   207f0:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
	feat_result &= 0xFF;
   207f4:	f002 02ff 	and.w	r2, r2, #255	; 0xff
   207f8:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
   207fc:	431a      	orrs	r2, r3
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   207fe:	f042 6207 	orr.w	r2, r2, #141557760	; 0x8700000
	feat_result &= 0xFF;
   20802:	2300      	movs	r3, #0
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   20804:	f442 2203 	orr.w	r2, r2, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   20808:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
	conn->procedure_expire = 0U;
   2080c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   20810:	4618      	mov	r0, r3
}
   20812:	e4ac      	b.n	2016e <ull_conn_rx+0x9e>
		if ((conn->llcp_req == conn->llcp_ack) ||
   20814:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   20818:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   2081c:	4299      	cmp	r1, r3
   2081e:	f43f acd6 	beq.w	201ce <ull_conn_rx+0xfe>
   20822:	f894 10e6 	ldrb.w	r1, [r4, #230]	; 0xe6
   20826:	2903      	cmp	r1, #3
   20828:	f47f acd1 	bne.w	201ce <ull_conn_rx+0xfe>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   2082c:	7f69      	ldrb	r1, [r5, #29]
   2082e:	2901      	cmp	r1, #1
   20830:	f47f accd 	bne.w	201ce <ull_conn_rx+0xfe>
		if (conn->lll.role) {
   20834:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   20838:	2900      	cmp	r1, #0
   2083a:	f2c0 84e3 	blt.w	21204 <ull_conn_rx+0x1134>
			conn->llcp_enc.pause_rx = 0U;
   2083e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
			conn->llcp_ack = conn->llcp_req;
   20842:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
			conn->procedure_expire = 0U;
   20846:	2100      	movs	r1, #0
			conn->llcp_enc.pause_rx = 0U;
   20848:	f022 0203 	bic.w	r2, r2, #3
   2084c:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
			conn->procedure_expire = 0U;
   20850:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
		if (conn->llcp_enc.refresh) {
   20854:	0750      	lsls	r0, r2, #29
   20856:	f57f ac89 	bpl.w	2016c <ull_conn_rx+0x9c>
			conn->llcp_enc.refresh = 0U;
   2085a:	f36f 0282 	bfc	r2, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   2085e:	231a      	movs	r3, #26
			conn->llcp_enc.refresh = 0U;
   20860:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	int nack = 0;
   20864:	2000      	movs	r0, #0
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   20866:	712b      	strb	r3, [r5, #4]
   20868:	e481      	b.n	2016e <ull_conn_rx+0x9e>
		if (!conn->lll.role ||
   2086a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   2086e:	2b00      	cmp	r3, #0
   20870:	f6bf acad 	bge.w	201ce <ull_conn_rx+0xfe>
   20874:	f895 901d 	ldrb.w	r9, [r5, #29]
   20878:	f1b9 0f09 	cmp.w	r9, #9
   2087c:	f47f aca7 	bne.w	201ce <ull_conn_rx+0xfe>
	if (conn->common.txn_lock) {
   20880:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   20884:	f010 0602 	ands.w	r6, r0, #2
   20888:	f47f ac6e 	bne.w	20168 <ull_conn_rx+0x98>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   2088c:	487c      	ldr	r0, [pc, #496]	; (20a80 <ull_conn_rx+0x9b0>)
   2088e:	f7f9 fc63 	bl	1a158 <mem_acquire>
	if (!tx) {
   20892:	4607      	mov	r7, r0
   20894:	2800      	cmp	r0, #0
   20896:	f000 81c3 	beq.w	20c20 <ull_conn_rx+0xb50>
	conn->common.txn_lock = 1U;
   2089a:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	feat &= LL_FEAT_BIT_MASK;
   2089e:	4979      	ldr	r1, [pc, #484]	; (20a84 <ull_conn_rx+0x9b4>)
	conn->common.txn_lock = 1U;
   208a0:	f043 0302 	orr.w	r3, r3, #2
   208a4:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
   208a8:	6a2a      	ldr	r2, [r5, #32]
   208aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	feat &= LL_FEAT_BIT_MASK;
   208ac:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   208ae:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
   208b2:	400a      	ands	r2, r1
   208b4:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
   208b8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   208bc:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
	feat &= LL_FEAT_BIT_MASK;
   208c0:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   208c4:	4013      	ands	r3, r2
   208c6:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
   208ca:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
   208ce:	f8d5 a020 	ldr.w	sl, [r5, #32]
		feat_land_octet0(feat_get(&req->features[0]), ll_feat_get());
   208d2:	f7fc fb8f 	bl	1cff4 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   208d6:	f008 03ff 	and.w	r3, r8, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   208da:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_peer =
   208de:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
	feat &= LL_FEAT_BIT_MASK;
   208e2:	4b68      	ldr	r3, [pc, #416]	; (20a84 <ull_conn_rx+0x9b4>)
   208e4:	ea4a 0303 	orr.w	r3, sl, r3
	feat_result = feat_to_keep & feat_octet0;
   208e8:	4003      	ands	r3, r0
	feat_result &= 0xFF;
   208ea:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   208ee:	f02a 0aff 	bic.w	sl, sl, #255	; 0xff
   208f2:	ea43 030a 	orr.w	r3, r3, sl
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   208f6:	f043 6307 	orr.w	r3, r3, #141557760	; 0x8700000
   208fa:	f443 2303 	orr.w	r3, r3, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   208fe:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
	conn->common.fex_valid = 1U;
   20902:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   20906:	f043 0301 	orr.w	r3, r3, #1
   2090a:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   2090e:	793b      	ldrb	r3, [r7, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   20910:	f887 9005 	strb.w	r9, [r7, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   20914:	f043 0303 	orr.w	r3, r3, #3
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   20918:	2208      	movs	r2, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   2091a:	713b      	strb	r3, [r7, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   2091c:	18b8      	adds	r0, r7, r2
   2091e:	4631      	mov	r1, r6
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   20920:	f887 9007 	strb.w	r9, [r7, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   20924:	f00d fb8c 	bl	2e040 <memset>
	feat = feat_land_octet0(ll_feat_get(),
   20928:	f7fc fb64 	bl	1cff4 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   2092c:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
	dst[0] = val;
   20930:	7339      	strb	r1, [r7, #12]
   20932:	4002      	ands	r2, r0
	feat_result &= 0xFF;
   20934:	f002 02ff 	and.w	r2, r2, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   20938:	f020 03ff 	bic.w	r3, r0, #255	; 0xff
   2093c:	4313      	orrs	r3, r2
	sys_put_le16(val >> 16, &dst[2]);
   2093e:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   20940:	723b      	strb	r3, [r7, #8]
   20942:	72ba      	strb	r2, [r7, #10]
	dst[1] = val >> 8;
   20944:	f3c3 2307 	ubfx	r3, r3, #8, #8
   20948:	0a12      	lsrs	r2, r2, #8
	ctrl_tx_sec_enqueue(conn, tx);
   2094a:	4620      	mov	r0, r4
   2094c:	727b      	strb	r3, [r7, #9]
   2094e:	737e      	strb	r6, [r7, #13]
	dst[0] = val;
   20950:	73be      	strb	r6, [r7, #14]
	dst[1] = val >> 8;
   20952:	73fe      	strb	r6, [r7, #15]
   20954:	72fa      	strb	r2, [r7, #11]
   20956:	4639      	mov	r1, r7
   20958:	f7fe fb4c 	bl	1eff4 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   2095c:	2301      	movs	r3, #1
   2095e:	712b      	strb	r3, [r5, #4]
	return 0;
   20960:	4630      	mov	r0, r6
   20962:	e404      	b.n	2016e <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
   20964:	7f6b      	ldrb	r3, [r5, #29]
   20966:	2b02      	cmp	r3, #2
   20968:	f47f ac31 	bne.w	201ce <ull_conn_rx+0xfe>
			    conn->llcp_conn_param.req) &&
   2096c:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
		} else if ((conn->llcp_conn_param.ack !=
   20970:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   20974:	f895 3020 	ldrb.w	r3, [r5, #32]
		} else if ((conn->llcp_conn_param.ack !=
   20978:	4291      	cmp	r1, r2
   2097a:	d002      	beq.n	20982 <ull_conn_rx+0x8b2>
			    conn->llcp_conn_param.req) &&
   2097c:	2b0f      	cmp	r3, #15
   2097e:	f000 836c 	beq.w	2105a <ull_conn_rx+0xf8a>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   20982:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   20986:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
   2098a:	4291      	cmp	r1, r2
   2098c:	d002      	beq.n	20994 <ull_conn_rx+0x8c4>
   2098e:	2b14      	cmp	r3, #20
   20990:	f000 83e0 	beq.w	21154 <ull_conn_rx+0x1084>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   20994:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   20998:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
   2099c:	4291      	cmp	r1, r2
   2099e:	d002      	beq.n	209a6 <ull_conn_rx+0x8d6>
   209a0:	2b16      	cmp	r3, #22
   209a2:	f000 843b 	beq.w	2121c <ull_conn_rx+0x114c>
			switch (llctrl->unknown_rsp.type) {
   209a6:	2b12      	cmp	r3, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   209a8:	bf04      	itt	eq
   209aa:	2301      	moveq	r3, #1
   209ac:	712b      	strbeq	r3, [r5, #4]
				break;
   209ae:	e581      	b.n	204b4 <ull_conn_rx+0x3e4>
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND:
	{
		uint8_t err;

		if (!conn->lll.role ||
   209b0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   209b4:	2b00      	cmp	r3, #0
   209b6:	f6bf ac0a 	bge.w	201ce <ull_conn_rx+0xfe>
   209ba:	7f6b      	ldrb	r3, [r5, #29]
   209bc:	2b05      	cmp	r3, #5
   209be:	f47f ac06 	bne.w	201ce <ull_conn_rx+0xfe>
	if (!((ind->c_to_p_phy | ind->p_to_c_phy) & 0x07)) {
   209c2:	f895 2020 	ldrb.w	r2, [r5, #32]
   209c6:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   209ca:	4313      	orrs	r3, r2
   209cc:	f013 0307 	ands.w	r3, r3, #7
   209d0:	f040 8470 	bne.w	212b4 <ull_conn_rx+0x11e4>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   209d4:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   209d8:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   209dc:	428a      	cmp	r2, r1
   209de:	f43f abc3 	beq.w	20168 <ull_conn_rx+0x98>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   209e2:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   209e6:	f002 0203 	and.w	r2, r2, #3
   209ea:	2a02      	cmp	r2, #2
   209ec:	f47f abbc 	bne.w	20168 <ull_conn_rx+0x98>
		conn->llcp_phy.pause_tx = 0U;
   209f0:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   209f4:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   209f8:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		conn->procedure_expire = 0U;
   209fc:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
		conn->llcp_phy.pause_tx = 0U;
   20a00:	f363 0200 	bfi	r2, r3, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   20a04:	4608      	mov	r0, r1
   20a06:	f361 1006 	bfi	r0, r1, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   20a0a:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
		if (!conn->llcp_phy.cmd) {
   20a0e:	f012 0204 	ands.w	r2, r2, #4
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   20a12:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
   20a16:	f3c1 0102 	ubfx	r1, r1, #0, #3
		if (!conn->llcp_phy.cmd) {
   20a1a:	f040 85e6 	bne.w	215ea <ull_conn_rx+0x151a>
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   20a1e:	6833      	ldr	r3, [r6, #0]
   20a20:	2101      	movs	r1, #1
   20a22:	7119      	strb	r1, [r3, #4]
	int nack = 0;
   20a24:	4610      	mov	r0, r2
   20a26:	f7ff bba2 	b.w	2016e <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(phy_req) != pdu_rx->len) {
   20a2a:	7f6b      	ldrb	r3, [r5, #29]
   20a2c:	2b03      	cmp	r3, #3
   20a2e:	f47f abce 	bne.w	201ce <ull_conn_rx+0xfe>
		if (!conn->lll.role) {
   20a32:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   20a36:	2b00      	cmp	r3, #0
   20a38:	f2c0 828c 	blt.w	20f54 <ull_conn_rx+0xe84>
			if ((conn->llcp_phy.ack !=
   20a3c:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
			     conn->llcp_phy.req) &&
   20a40:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
			if ((conn->llcp_phy.ack !=
   20a44:	4281      	cmp	r1, r0
   20a46:	d007      	beq.n	20a58 <ull_conn_rx+0x988>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   20a48:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
   20a4c:	f002 0203 	and.w	r2, r2, #3
			     conn->llcp_phy.req) &&
   20a50:	3a01      	subs	r2, #1
   20a52:	2a02      	cmp	r2, #2
   20a54:	f240 83de 	bls.w	21214 <ull_conn_rx+0x1144>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   20a58:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   20a5c:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   20a60:	1a9b      	subs	r3, r3, r2
   20a62:	f003 0303 	and.w	r3, r3, #3
   20a66:	2b02      	cmp	r3, #2
   20a68:	f000 8367 	beq.w	2113a <ull_conn_rx+0x106a>
				     LLCP_ENCRYPTION)) ||
   20a6c:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   20a70:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   20a74:	429a      	cmp	r2, r3
   20a76:	f000 8382 	beq.w	2117e <ull_conn_rx+0x10ae>
				nack = reject_ext_ind_send(conn, *rx,
   20a7a:	232a      	movs	r3, #42	; 0x2a
   20a7c:	2216      	movs	r2, #22
   20a7e:	e536      	b.n	204ee <ull_conn_rx+0x41e>
   20a80:	20002948 	.word	0x20002948
   20a84:	087830d0 	.word	0x087830d0
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   20a88:	7f6b      	ldrb	r3, [r5, #29]
   20a8a:	2b01      	cmp	r3, #1
   20a8c:	f47f ab9f 	bne.w	201ce <ull_conn_rx+0xfe>
	} else if (!conn->lll.role) {
   20a90:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   20a94:	2b00      	cmp	r3, #0
   20a96:	f2c0 80e3 	blt.w	20c60 <ull_conn_rx+0xb90>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   20a9a:	48d0      	ldr	r0, [pc, #832]	; (20ddc <ull_conn_rx+0xd0c>)
   20a9c:	f7f9 fb5c 	bl	1a158 <mem_acquire>
		if (!tx) {
   20aa0:	2800      	cmp	r0, #0
   20aa2:	f000 80bd 	beq.w	20c20 <ull_conn_rx+0xb50>
	conn->llcp_enc.pause_rx = 1U;
   20aa6:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   20aaa:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
	conn->llcp_enc.pause_rx = 1U;
   20aae:	f042 0201 	orr.w	r2, r2, #1
	conn->lll.enc_rx = 0;
   20ab2:	f023 0318 	bic.w	r3, r3, #24
	conn->llcp_enc.pause_rx = 1U;
   20ab6:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   20aba:	2201      	movs	r2, #1
	conn->lll.enc_rx = 0;
   20abc:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   20ac0:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   20ac2:	7142      	strb	r2, [r0, #5]
   20ac4:	e63f      	b.n	20746 <ull_conn_rx+0x676>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   20ac6:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   20aca:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
   20ace:	4293      	cmp	r3, r2
   20ad0:	f43f ab4a 	beq.w	20168 <ull_conn_rx+0x98>
	conn->procedure_expire = 0U;
   20ad4:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   20ad6:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   20ad8:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
	conn->procedure_expire = 0U;
   20adc:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   20ae0:	7769      	strb	r1, [r5, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   20ae2:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   20ae6:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   20aea:	842a      	strh	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   20aec:	2115      	movs	r1, #21
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   20aee:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   20af2:	77e9      	strb	r1, [r5, #31]
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   20af4:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
   20af8:	8469      	strh	r1, [r5, #34]	; 0x22
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   20afa:	84a8      	strh	r0, [r5, #36]	; 0x24
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   20afc:	84ea      	strh	r2, [r5, #38]	; 0x26
	int nack = 0;
   20afe:	4618      	mov	r0, r3
   20b00:	f7ff bb35 	b.w	2016e <ull_conn_rx+0x9e>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   20b04:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   20b08:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
   20b0c:	429a      	cmp	r2, r3
   20b0e:	f43f ab2b 	beq.w	20168 <ull_conn_rx+0x98>
	if (!lll->role && (rej_ext_ind->error_code ==
   20b12:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
	return ((uint16_t)src[1] << 8) | src[0];
   20b16:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   20b1a:	2900      	cmp	r1, #0
   20b1c:	f2c0 8591 	blt.w	21642 <ull_conn_rx+0x1572>
   20b20:	2a1a      	cmp	r2, #26
   20b22:	f000 8620 	beq.w	21766 <ull_conn_rx+0x1696>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   20b26:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   20b2a:	f002 010f 	and.w	r1, r2, #15
   20b2e:	2904      	cmp	r1, #4
   20b30:	d106      	bne.n	20b40 <ull_conn_rx+0xa70>
	conn_upd_curr = NULL;
   20b32:	49ab      	ldr	r1, [pc, #684]	; (20de0 <ull_conn_rx+0xd10>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   20b34:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   20b38:	2300      	movs	r3, #0
   20b3a:	600b      	str	r3, [r1, #0]
		conn->procedure_expire = 0U;
   20b3c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (!conn->llcp_conn_param.cmd) {
   20b40:	06d2      	lsls	r2, r2, #27
   20b42:	f57f ab11 	bpl.w	20168 <ull_conn_rx+0x98>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   20b46:	2319      	movs	r3, #25
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   20b48:	f01c 0f01 	tst.w	ip, #1
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   20b4c:	712b      	strb	r3, [r5, #4]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   20b4e:	f040 8472 	bne.w	21436 <ull_conn_rx+0x1366>
	cu->status = rej_ext_ind->error_code;
   20b52:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   20b56:	772b      	strb	r3, [r5, #28]
	cu->interval = lll->interval;
   20b58:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
	cu->timeout = conn->supervision_reload *
   20b5a:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
	cu->latency = lll->latency;
   20b5e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   20b60:	8429      	strh	r1, [r5, #32]
		      lll->interval * 125U / 1000;
   20b62:	207d      	movs	r0, #125	; 0x7d
	cu->timeout = conn->supervision_reload *
   20b64:	fb02 f303 	mul.w	r3, r2, r3
		      lll->interval * 125U / 1000;
   20b68:	fb00 f303 	mul.w	r3, r0, r3
	cu->interval = lll->interval;
   20b6c:	83ea      	strh	r2, [r5, #30]
		      lll->interval * 125U / 1000;
   20b6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   20b72:	fbb3 f3f0 	udiv	r3, r3, r0
	int nack = 0;
   20b76:	2000      	movs	r0, #0
	cu->timeout = conn->supervision_reload *
   20b78:	846b      	strh	r3, [r5, #34]	; 0x22
	if (err) {
   20b7a:	f7ff baf8 	b.w	2016e <ull_conn_rx+0x9e>
		if ((conn->llcp_ack != conn->llcp_req) &&
   20b7e:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
   20b82:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   20b86:	428b      	cmp	r3, r1
   20b88:	f43f aaee 	beq.w	20168 <ull_conn_rx+0x98>
   20b8c:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   20b90:	2b03      	cmp	r3, #3
   20b92:	f47f aae9 	bne.w	20168 <ull_conn_rx+0x98>
	conn->llcp_enc.pause_rx = 0U;
   20b96:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
   20b9a:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	conn->procedure_expire = 0U;
   20b9e:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   20ba0:	f022 0203 	bic.w	r2, r2, #3
   20ba4:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
   20ba8:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   20bac:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   20bb0:	f885 2020 	strb.w	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   20bb4:	210d      	movs	r1, #13
   20bb6:	77e9      	strb	r1, [r5, #31]
	int nack = 0;
   20bb8:	4618      	mov	r0, r3
   20bba:	f7ff bad8 	b.w	2016e <ull_conn_rx+0x9e>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   20bbe:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   20bc2:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   20bc6:	428b      	cmp	r3, r1
   20bc8:	f43f aace 	beq.w	20168 <ull_conn_rx+0x98>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   20bcc:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   20bd0:	2a23      	cmp	r2, #35	; 0x23
   20bd2:	d012      	beq.n	20bfa <ull_conn_rx+0xb2a>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   20bd4:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   20bd8:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   20bdc:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   20be0:	f36f 0100 	bfc	r1, #0, #1
   20be4:	f884 11bf 	strb.w	r1, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
   20be8:	2100      	movs	r1, #0
   20bea:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   20bee:	f3c3 0102 	ubfx	r1, r3, #0, #3
   20bf2:	f361 1306 	bfi	r3, r1, #4, #3
   20bf6:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
   20bfa:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   20bfe:	0759      	lsls	r1, r3, #29
   20c00:	f57f aab2 	bpl.w	20168 <ull_conn_rx+0x98>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   20c04:	231d      	movs	r3, #29
   20c06:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   20c08:	772a      	strb	r2, [r5, #28]
   20c0a:	e4ae      	b.n	2056a <ull_conn_rx+0x49a>
			tx->next = conn->tx_head;
   20c0c:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   20c0e:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   20c12:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   20c16:	2a00      	cmp	r2, #0
   20c18:	f47f aaa6 	bne.w	20168 <ull_conn_rx+0x98>
   20c1c:	f7ff bb10 	b.w	20240 <ull_conn_rx+0x170>
		*err = -ENOBUFS;
   20c20:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20c24:	f7ff baa3 	b.w	2016e <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   20c28:	7f6b      	ldrb	r3, [r5, #29]
   20c2a:	2b01      	cmp	r3, #1
   20c2c:	f47f aacf 	bne.w	201ce <ull_conn_rx+0xfe>
   20c30:	e733      	b.n	20a9a <ull_conn_rx+0x9ca>
			conn->tx_data = conn->tx_data->next;
   20c32:	6813      	ldr	r3, [r2, #0]
   20c34:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   20c38:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   20c3c:	2b00      	cmp	r3, #0
   20c3e:	f47f aaf5 	bne.w	2022c <ull_conn_rx+0x15c>
			tx->next = conn->tx_head->next;
   20c42:	6813      	ldr	r3, [r2, #0]
   20c44:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   20c46:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   20c48:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
   20c4a:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
   20c4e:	2a00      	cmp	r2, #0
   20c50:	f47f aa8a 	bne.w	20168 <ull_conn_rx+0x98>
   20c54:	f7ff baf4 	b.w	20240 <ull_conn_rx+0x170>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   20c58:	7f6b      	ldrb	r3, [r5, #29]
   20c5a:	2b01      	cmp	r3, #1
   20c5c:	f47f aab7 	bne.w	201ce <ull_conn_rx+0xfe>
		conn->lll.enc_tx = 0;
   20c60:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   20c64:	f36f 1304 	bfc	r3, #4, #1
   20c68:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		goto pause_enc_rsp_send_exit;
   20c6c:	f7ff ba7c 	b.w	20168 <ull_conn_rx+0x98>
		if (!conn->lll.role) {
   20c70:	f994 7039 	ldrsb.w	r7, [r4, #57]	; 0x39
			if ((conn->llcp_conn_param.req !=
   20c74:	f894 6184 	ldrb.w	r6, [r4, #388]	; 0x184
					conn->llcp_conn_param.ack) &&
   20c78:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
		if (!conn->lll.role) {
   20c7c:	2f00      	cmp	r7, #0
   20c7e:	f2c0 80b1 	blt.w	20de4 <ull_conn_rx+0xd14>
			if ((conn->llcp_conn_param.req !=
   20c82:	42b1      	cmp	r1, r6
   20c84:	d00a      	beq.n	20c9c <ull_conn_rx+0xbcc>
			    ((conn->llcp_conn_param.state ==
   20c86:	f894 6186 	ldrb.w	r6, [r4, #390]	; 0x186
					conn->llcp_conn_param.ack) &&
   20c8a:	f016 0f0b 	tst.w	r6, #11
   20c8e:	f000 825e 	beq.w	2114e <ull_conn_rx+0x107e>
			      LLCP_CPR_STATE_RSP_WAIT) ||
   20c92:	f006 060f 	and.w	r6, r6, #15
   20c96:	2e06      	cmp	r6, #6
   20c98:	f000 8259 	beq.w	2114e <ull_conn_rx+0x107e>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   20c9c:	f894 60e4 	ldrb.w	r6, [r4, #228]	; 0xe4
   20ca0:	f894 70e5 	ldrb.w	r7, [r4, #229]	; 0xe5
   20ca4:	1bf6      	subs	r6, r6, r7
   20ca6:	f006 0603 	and.w	r6, r6, #3
   20caa:	2e02      	cmp	r6, #2
   20cac:	f000 83d2 	beq.w	21454 <ull_conn_rx+0x1384>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   20cb0:	f894 71bc 	ldrb.w	r7, [r4, #444]	; 0x1bc
   20cb4:	f894 61bd 	ldrb.w	r6, [r4, #445]	; 0x1bd
   20cb8:	42b7      	cmp	r7, r6
   20cba:	f000 83e5 	beq.w	21488 <ull_conn_rx+0x13b8>
				nack = reject_ext_ind_send(conn, *rx,
   20cbe:	232a      	movs	r3, #42	; 0x2a
   20cc0:	e414      	b.n	204ec <ull_conn_rx+0x41c>
		if (!conn->tx_ctrl) {
   20cc2:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   20cc6:	2a00      	cmp	r2, #0
   20cc8:	f47f ad5b 	bne.w	20782 <ull_conn_rx+0x6b2>
			tx->next = conn->tx_head;
   20ccc:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   20cce:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   20cd2:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   20cd6:	e55b      	b.n	20790 <ull_conn_rx+0x6c0>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   20cd8:	7913      	ldrb	r3, [r2, #4]
   20cda:	f003 0303 	and.w	r3, r3, #3
   20cde:	2b03      	cmp	r3, #3
   20ce0:	f000 82ce 	beq.w	21280 <ull_conn_rx+0x11b0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   20ce4:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
   20ce8:	f7ff baa2 	b.w	20230 <ull_conn_rx+0x160>
	if (conn->common.txn_lock) {
   20cec:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   20cf0:	079b      	lsls	r3, r3, #30
   20cf2:	f53f aa39 	bmi.w	20168 <ull_conn_rx+0x98>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   20cf6:	4839      	ldr	r0, [pc, #228]	; (20ddc <ull_conn_rx+0xd0c>)
   20cf8:	f7f9 fa2e 	bl	1a158 <mem_acquire>
	if (!tx) {
   20cfc:	4603      	mov	r3, r0
   20cfe:	2800      	cmp	r0, #0
   20d00:	d08e      	beq.n	20c20 <ull_conn_rx+0xb50>
	conn->common.txn_lock = 1U;
   20d02:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   20d06:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
	eff_rx_octets = conn->lll.max_rx_octets;
   20d0a:	f8b4 b05a 	ldrh.w	fp, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   20d0e:	f8b4 a058 	ldrh.w	sl, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   20d12:	f8b4 905e 	ldrh.w	r9, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   20d16:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
	conn->common.txn_lock = 1U;
   20d1a:	f042 0202 	orr.w	r2, r2, #2
   20d1e:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   20d22:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
   20d26:	428a      	cmp	r2, r1
   20d28:	f040 855b 	bne.w	217e2 <ull_conn_rx+0x1712>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   20d2c:	8c29      	ldrh	r1, [r5, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   20d2e:	291a      	cmp	r1, #26
   20d30:	f240 8223 	bls.w	2117a <ull_conn_rx+0x10aa>
			eff_tx_octets = MIN(max_rx_octets,
   20d34:	f8b4 00d2 	ldrh.w	r0, [r4, #210]	; 0xd2
   20d38:	4281      	cmp	r1, r0
   20d3a:	bf28      	it	cs
   20d3c:	4601      	movcs	r1, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   20d3e:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   20d40:	f8b5 c026 	ldrh.w	ip, [r5, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
   20d44:	281b      	cmp	r0, #27
		if (lr_rx_time >= PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN,
   20d46:	8c68      	ldrh	r0, [r5, #34]	; 0x22
			eff_rx_octets = MIN(max_tx_octets,
   20d48:	bf34      	ite	cc
   20d4a:	46de      	movcc	lr, fp
   20d4c:	f04f 0e1b 	movcs.w	lr, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   20d50:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   20d54:	bf34      	ite	cc
   20d56:	4640      	movcc	r0, r8
   20d58:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   20d5c:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   20d60:	bf34      	ite	cc
   20d62:	46cc      	movcc	ip, r9
   20d64:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   20d68:	45de      	cmp	lr, fp
   20d6a:	f000 831f 	beq.w	213ac <ull_conn_rx+0x12dc>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   20d6e:	3a01      	subs	r2, #1
   20d70:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->llcp_length.rx_octets = eff_rx_octets;
   20d74:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
			conn->llcp_length.tx_octets = eff_tx_octets;
   20d78:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
			conn->llcp_length.rx_time = eff_rx_time;
   20d7c:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
			conn->llcp_length.tx_time = eff_tx_time;
   20d80:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
			if (tx) {
   20d84:	2b00      	cmp	r3, #0
   20d86:	f000 836b 	beq.w	21460 <ull_conn_rx+0x1390>
				conn->llcp_length.state =
   20d8a:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
   20d8e:	2505      	movs	r5, #5
   20d90:	f365 0202 	bfi	r2, r5, #0, #3
   20d94:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
			link->mem = conn->llcp_rx;
   20d98:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   20d9c:	607a      	str	r2, [r7, #4]
			(*rx)->hdr.link = link;
   20d9e:	6832      	ldr	r2, [r6, #0]
   20da0:	6017      	str	r7, [r2, #0]
			conn->llcp_rx = *rx;
   20da2:	6832      	ldr	r2, [r6, #0]
   20da4:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
			*rx = NULL;
   20da8:	2200      	movs	r2, #0
   20daa:	6032      	str	r2, [r6, #0]
	if (tx) {
   20dac:	2b00      	cmp	r3, #0
   20dae:	f43f a9dd 	beq.w	2016c <ull_conn_rx+0x9c>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   20db2:	791a      	ldrb	r2, [r3, #4]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   20db4:	81d8      	strh	r0, [r3, #14]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   20db6:	f042 0203 	orr.w	r2, r2, #3
	ctrl_tx_sec_enqueue(conn, tx);
   20dba:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   20dbc:	711a      	strb	r2, [r3, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   20dbe:	2409      	movs	r4, #9
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   20dc0:	2215      	movs	r2, #21
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   20dc2:	8199      	strh	r1, [r3, #12]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   20dc4:	f8a3 e008 	strh.w	lr, [r3, #8]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   20dc8:	f8a3 c00a 	strh.w	ip, [r3, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   20dcc:	4619      	mov	r1, r3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   20dce:	715c      	strb	r4, [r3, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   20dd0:	71da      	strb	r2, [r3, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   20dd2:	f7fe f90f 	bl	1eff4 <ctrl_tx_sec_enqueue>
	return 0;
   20dd6:	2000      	movs	r0, #0
}
   20dd8:	f7ff b9c9 	b.w	2016e <ull_conn_rx+0x9e>
   20ddc:	20002948 	.word	0x20002948
   20de0:	200028b4 	.word	0x200028b4
		} else if ((conn->llcp_conn_param.req ==
   20de4:	42b1      	cmp	r1, r6
   20de6:	d005      	beq.n	20df4 <ull_conn_rx+0xd24>
			    conn->llcp_conn_param.ack) ||
   20de8:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   20dec:	f012 0f0b 	tst.w	r2, #11
   20df0:	f47f a9ba 	bne.w	20168 <ull_conn_rx+0x98>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   20df4:	f8b5 a020 	ldrh.w	sl, [r5, #32]
   20df8:	fa1f f28a 	uxth.w	r2, sl
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   20dfc:	2a05      	cmp	r2, #5
   20dfe:	f240 80a6 	bls.w	20f4e <ull_conn_rx+0xe7e>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   20e02:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
   20e06:	fa1f f689 	uxth.w	r6, r9
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   20e0a:	f5b6 6f48 	cmp.w	r6, #3200	; 0xc80
   20e0e:	f200 809e 	bhi.w	20f4e <ull_conn_rx+0xe7e>
			    (interval_max > 3200) ||
   20e12:	42b2      	cmp	r2, r6
   20e14:	f200 809b 	bhi.w	20f4e <ull_conn_rx+0xe7e>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   20e18:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
   20e1c:	fa1f fc88 	uxth.w	ip, r8
			    (interval_min > interval_max) ||
   20e20:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   20e24:	f080 8093 	bcs.w	20f4e <ull_conn_rx+0xe7e>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   20e28:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
   20e2c:	fa1f f28e 	uxth.w	r2, lr
			    (latency > 499) ||
   20e30:	f1a2 070a 	sub.w	r7, r2, #10
   20e34:	f640 4b76 	movw	fp, #3190	; 0xc76
   20e38:	b2bf      	uxth	r7, r7
   20e3a:	455f      	cmp	r7, fp
   20e3c:	f200 8087 	bhi.w	20f4e <ull_conn_rx+0xe7e>
			     ((latency + 1) * interval_max)) ||
   20e40:	f10c 0701 	add.w	r7, ip, #1
   20e44:	b2bf      	uxth	r7, r7
   20e46:	fb06 f707 	mul.w	r7, r6, r7
			    (timeout < 10) || (timeout > 3200) ||
   20e4a:	ebb7 0f82 	cmp.w	r7, r2, lsl #2
   20e4e:	d27e      	bcs.n	20f4e <ull_conn_rx+0xe7e>
			     ((latency + 1) * interval_max)) ||
   20e50:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   20e54:	455e      	cmp	r6, fp
   20e56:	d37a      	bcc.n	20f4e <ull_conn_rx+0xe7e>
			conn->llcp_conn_param.interval_min = interval_min;
   20e58:	f8a4 a188 	strh.w	sl, [r4, #392]	; 0x188
			conn->llcp_conn_param.interval_max = interval_max;
   20e5c:	f8a4 918a 	strh.w	r9, [r4, #394]	; 0x18a
			conn->llcp_conn_param.latency =	latency;
   20e60:	f8a4 818c 	strh.w	r8, [r4, #396]	; 0x18c
			conn->llcp_conn_param.timeout =	timeout;
   20e64:	f8a4 e18e 	strh.w	lr, [r4, #398]	; 0x18e
			conn->llcp_conn_param.preferred_periodicity =
   20e68:	f884 b190 	strb.w	fp, [r4, #400]	; 0x190
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   20e6c:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
   20e70:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   20e74:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   20e78:	f8a4 7192 	strh.w	r7, [r4, #402]	; 0x192
				sys_le16_to_cpu(cpr->offset0);
   20e7c:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
   20e80:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   20e84:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   20e88:	f8a4 7194 	strh.w	r7, [r4, #404]	; 0x194
				sys_le16_to_cpu(cpr->offset1);
   20e8c:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   20e90:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   20e94:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   20e98:	f8a4 7196 	strh.w	r7, [r4, #406]	; 0x196
				sys_le16_to_cpu(cpr->offset2);
   20e9c:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   20ea0:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   20ea4:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   20ea8:	f8a4 7198 	strh.w	r7, [r4, #408]	; 0x198
				sys_le16_to_cpu(cpr->offset3);
   20eac:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   20eb0:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   20eb4:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   20eb8:	f8a4 719a 	strh.w	r7, [r4, #410]	; 0x19a
				sys_le16_to_cpu(cpr->offset4);
   20ebc:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   20ec0:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   20ec4:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   20ec8:	f8a4 719c 	strh.w	r7, [r4, #412]	; 0x19c
				sys_le16_to_cpu(cpr->offset5);
   20ecc:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   20ed0:	f895 e036 	ldrb.w	lr, [r5, #54]	; 0x36
   20ed4:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset5 =
   20ed8:	f8a4 719e 	strh.w	r7, [r4, #414]	; 0x19e
			     lll->interval) ||
   20edc:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
			if ((conn->llcp_conn_param.interval_max !=
   20ede:	42be      	cmp	r6, r7
   20ee0:	f000 840b 	beq.w	216fa <ull_conn_rx+0x162a>
				conn->llcp_conn_param.state =
   20ee4:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   20ee8:	2503      	movs	r5, #3
   20eea:	f365 0203 	bfi	r2, r5, #0, #4
   20eee:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			conn->llcp_conn_param.ack--;
   20ef2:	3901      	subs	r1, #1
   20ef4:	f884 1185 	strb.w	r1, [r4, #389]	; 0x185
	if (!conn_upd_curr) {
   20ef8:	2b00      	cmp	r3, #0
   20efa:	f47f a937 	bne.w	2016c <ull_conn_rx+0x9c>
		conn_upd_curr = conn;
   20efe:	6004      	str	r4, [r0, #0]
	int nack = 0;
   20f00:	4618      	mov	r0, r3
   20f02:	f7ff b934 	b.w	2016e <ull_conn_rx+0x9e>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   20f06:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   20f0a:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   20f0e:	4293      	cmp	r3, r2
   20f10:	f43f add9 	beq.w	20ac6 <ull_conn_rx+0x9f6>
		rej_ext_ind->error_code = rej_ind->error_code;
   20f14:	f895 3020 	ldrb.w	r3, [r5, #32]
   20f18:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   20f1c:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   20f20:	2900      	cmp	r1, #0
   20f22:	f2c0 82a9 	blt.w	21478 <ull_conn_rx+0x13a8>
   20f26:	2b1a      	cmp	r3, #26
   20f28:	f000 841d 	beq.w	21766 <ull_conn_rx+0x1696>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   20f2c:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   20f30:	f003 010f 	and.w	r1, r3, #15
   20f34:	2904      	cmp	r1, #4
   20f36:	d106      	bne.n	20f46 <ull_conn_rx+0xe76>
	conn_upd_curr = NULL;
   20f38:	49d9      	ldr	r1, [pc, #868]	; (212a0 <ull_conn_rx+0x11d0>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   20f3a:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   20f3e:	2200      	movs	r2, #0
   20f40:	600a      	str	r2, [r1, #0]
		conn->procedure_expire = 0U;
   20f42:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	if (!conn->llcp_conn_param.cmd) {
   20f46:	06d8      	lsls	r0, r3, #27
   20f48:	f57f a90e 	bpl.w	20168 <ull_conn_rx+0x98>
   20f4c:	e5fb      	b.n	20b46 <ull_conn_rx+0xa76>
				nack = reject_ext_ind_send(conn, *rx,
   20f4e:	231e      	movs	r3, #30
   20f50:	f7ff bacc 	b.w	204ec <ull_conn_rx+0x41c>
	if (conn->common.txn_lock) {
   20f54:	f894 70d8 	ldrb.w	r7, [r4, #216]	; 0xd8
   20f58:	f017 0702 	ands.w	r7, r7, #2
   20f5c:	f47f a904 	bne.w	20168 <ull_conn_rx+0x98>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   20f60:	48d0      	ldr	r0, [pc, #832]	; (212a4 <ull_conn_rx+0x11d4>)
   20f62:	f7f9 f8f9 	bl	1a158 <mem_acquire>
	if (!tx) {
   20f66:	4602      	mov	r2, r0
   20f68:	2800      	cmp	r0, #0
   20f6a:	f43f ae59 	beq.w	20c20 <ull_conn_rx+0xb50>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   20f6e:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	conn->common.txn_lock = 1U;
   20f72:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	if (conn->llcp_phy.ack ==
   20f76:	f894 e1bd 	ldrb.w	lr, [r4, #445]	; 0x1bd
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   20f7a:	2002      	movs	r0, #2
   20f7c:	f360 0101 	bfi	r1, r0, #0, #2
	conn->common.txn_lock = 1U;
   20f80:	f043 0302 	orr.w	r3, r3, #2
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   20f84:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
	if (conn->llcp_phy.ack ==
   20f88:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
	conn->common.txn_lock = 1U;
   20f8c:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
			conn->phy_pref_tx;
   20f90:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
	if (conn->llcp_phy.ack ==
   20f94:	4571      	cmp	r1, lr
			conn->phy_pref_tx;
   20f96:	f3c3 0602 	ubfx	r6, r3, #0, #3
   20f9a:	f003 0c07 	and.w	ip, r3, #7
			conn->phy_pref_rx;
   20f9e:	f3c3 00c2 	ubfx	r0, r3, #3, #3
	if (conn->llcp_phy.ack ==
   20fa2:	d114      	bne.n	20fce <ull_conn_rx+0xefe>
		conn->llcp_phy.ack--;
   20fa4:	3901      	subs	r1, #1
		conn->llcp_phy.cmd = 0U;
   20fa6:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack--;
   20faa:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->llcp_phy.tx =
   20fae:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
		conn->llcp_phy.cmd = 0U;
   20fb2:	f367 0382 	bfi	r3, r7, #2, #1
		conn->llcp_phy.tx =
   20fb6:	f36c 0184 	bfi	r1, ip, #2, #3
		conn->llcp_phy.rx =
   20fba:	f360 1147 	bfi	r1, r0, #5, #3
		conn->llcp_phy.cmd = 0U;
   20fbe:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		conn->procedure_expire =
   20fc2:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
		conn->llcp_phy.rx =
   20fc6:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
		conn->procedure_expire =
   20fca:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_phy.rx &= p->tx_phys;
   20fce:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	conn->llcp_phy.tx &= p->rx_phys;
   20fd2:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
   20fd6:	f895 7020 	ldrb.w	r7, [r5, #32]
	conn->llcp_phy.tx &= p->rx_phys;
   20fda:	f3c1 0c82 	ubfx	ip, r1, #2, #3
   20fde:	ea03 030c 	and.w	r3, r3, ip
	conn->llcp_phy.rx &= p->tx_phys;
   20fe2:	ea07 1751 	and.w	r7, r7, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   20fe6:	009b      	lsls	r3, r3, #2
   20fe8:	f001 0103 	and.w	r1, r1, #3
   20fec:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   20ff0:	430b      	orrs	r3, r1
   20ff2:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   20ff6:	2303      	movs	r3, #3
   20ff8:	7153      	strb	r3, [r2, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   20ffa:	7250      	strb	r0, [r2, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   20ffc:	7910      	ldrb	r0, [r2, #4]
	    conn->tx_head &&
   20ffe:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   21002:	7216      	strb	r6, [r2, #8]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   21004:	2117      	movs	r1, #23
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   21006:	f040 0003 	orr.w	r0, r0, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   2100a:	71d1      	strb	r1, [r2, #7]
		if (!conn->tx_ctrl) {
   2100c:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   21010:	7110      	strb	r0, [r2, #4]
	if (
   21012:	2b00      	cmp	r3, #0
   21014:	f000 80a8 	beq.w	21168 <ull_conn_rx+0x1098>
	    !conn->llcp_enc.pause_tx &&
   21018:	f894 0166 	ldrb.w	r0, [r4, #358]	; 0x166
	    conn->tx_head &&
   2101c:	0786      	lsls	r6, r0, #30
   2101e:	f100 80a3 	bmi.w	21168 <ull_conn_rx+0x1098>
	    !conn->llcp_phy.pause_tx &&
   21022:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
   21026:	07c0      	lsls	r0, r0, #31
   21028:	f100 809e 	bmi.w	21168 <ull_conn_rx+0x1098>
		if (conn->tx_head == conn->tx_data) {
   2102c:	f8d4 01d0 	ldr.w	r0, [r4, #464]	; 0x1d0
   21030:	4283      	cmp	r3, r0
   21032:	f000 8334 	beq.w	2169e <ull_conn_rx+0x15ce>
		} else if (!conn->tx_ctrl) {
   21036:	2900      	cmp	r1, #0
   21038:	f000 8375 	beq.w	21726 <ull_conn_rx+0x1656>
	tx->next = conn->tx_ctrl_last->next;
   2103c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   21040:	6819      	ldr	r1, [r3, #0]
   21042:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   21044:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   21046:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	if (!tx->next) {
   2104a:	6813      	ldr	r3, [r2, #0]
   2104c:	2b00      	cmp	r3, #0
   2104e:	f47f a88b 	bne.w	20168 <ull_conn_rx+0x98>
		conn->tx_data_last = tx;
   21052:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   21056:	f7ff b887 	b.w	20168 <ull_conn_rx+0x98>
			conn->llcp_conn_param.disabled = 1U;
   2105a:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   2105e:	f043 0320 	orr.w	r3, r3, #32
   21062:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
			if (!conn->lll.role) {
   21066:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   2106a:	2b00      	cmp	r3, #0
   2106c:	f2c0 81c7 	blt.w	213fe <ull_conn_rx+0x132e>
				LL_ASSERT(conn->llcp_cu.req ==
   21070:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   21074:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   21078:	429a      	cmp	r2, r3
   2107a:	d00e      	beq.n	2109a <ull_conn_rx+0xfca>
   2107c:	4a8a      	ldr	r2, [pc, #552]	; (212a8 <ull_conn_rx+0x11d8>)
   2107e:	498b      	ldr	r1, [pc, #556]	; (212ac <ull_conn_rx+0x11dc>)
   21080:	488b      	ldr	r0, [pc, #556]	; (212b0 <ull_conn_rx+0x11e0>)
   21082:	f641 4315 	movw	r3, #7189	; 0x1c15
   21086:	f00a ff9e 	bl	2bfc6 <assert_print>
   2108a:	4040      	eors	r0, r0
   2108c:	f380 8811 	msr	BASEPRI, r0
   21090:	f04f 0003 	mov.w	r0, #3
   21094:	df02      	svc	2
   21096:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_conn_param.state =
   2109a:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   2109e:	2106      	movs	r1, #6
   210a0:	f361 0203 	bfi	r2, r1, #0, #4
				conn->llcp_cu.ack--;
   210a4:	3b01      	subs	r3, #1
				conn->llcp_cu.win_size = 1U;
   210a6:	2101      	movs	r1, #1
				conn->llcp_cu.ack--;
   210a8:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_cu.win_size = 1U;
   210ac:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   210b0:	6835      	ldr	r5, [r6, #0]
				conn->llcp_conn_param.state =
   210b2:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   210b6:	f3c2 1300 	ubfx	r3, r2, #4, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   210ba:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
   210be:	00db      	lsls	r3, r3, #3
   210c0:	f022 020f 	bic.w	r2, r2, #15
   210c4:	430b      	orrs	r3, r1
   210c6:	4313      	orrs	r3, r2
   210c8:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
				conn->llcp_cu.latency =
   210cc:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
				conn->llcp_cu.interval =
   210d0:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
				conn->llcp_cu.latency =
   210d4:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
				conn->llcp_cu.win_offset_us = 0U;
   210d8:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
   210da:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
				conn->llcp_cu.interval =
   210de:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
				conn->llcp_cu.timeout =
   210e2:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
				conn->llcp_cu.win_offset_us = 0U;
   210e6:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   210ea:	7129      	strb	r1, [r5, #4]
				break;
   210ec:	f7ff b83f 	b.w	2016e <ull_conn_rx+0x9e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   210f0:	486c      	ldr	r0, [pc, #432]	; (212a4 <ull_conn_rx+0x11d4>)
   210f2:	f7f9 f831 	bl	1a158 <mem_acquire>
		if (!tx) {
   210f6:	4601      	mov	r1, r0
   210f8:	2800      	cmp	r0, #0
   210fa:	f43f ad91 	beq.w	20c20 <ull_conn_rx+0xb50>
		conn->llcp_version.tx = 1U;
   210fe:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   21102:	f043 0301 	orr.w	r3, r3, #1
   21106:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   2110a:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->len =
   2110c:	7146      	strb	r6, [r0, #5]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   2110e:	220c      	movs	r2, #12
   21110:	71c2      	strb	r2, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   21112:	7202      	strb	r2, [r0, #8]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   21114:	f043 0303 	orr.w	r3, r3, #3
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   21118:	f06f 020e 	mvn.w	r2, #14
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   2111c:	7103      	strb	r3, [r0, #4]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   2111e:	7242      	strb	r2, [r0, #9]
		v->sub_version_number =
   21120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   21124:	2205      	movs	r2, #5
		v->sub_version_number =
   21126:	72c3      	strb	r3, [r0, #11]
   21128:	7303      	strb	r3, [r0, #12]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   2112a:	7282      	strb	r2, [r0, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   2112c:	4620      	mov	r0, r4
   2112e:	f7fd ff61 	bl	1eff4 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   21132:	2301      	movs	r3, #1
   21134:	712b      	strb	r3, [r5, #4]
   21136:	f7ff ba37 	b.w	205a8 <ull_conn_rx+0x4d8>
				      0x03) == 0x02) &&
   2113a:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   2113e:	2b03      	cmp	r3, #3
   21140:	f47f ac9b 	bne.w	20a7a <ull_conn_rx+0x9aa>
   21144:	e492      	b.n	20a6c <ull_conn_rx+0x99c>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   21146:	712f      	strb	r7, [r5, #4]
		*err = 0U;
   21148:	2000      	movs	r0, #0
   2114a:	f7ff b810 	b.w	2016e <ull_conn_rx+0x9e>
				nack = reject_ext_ind_send(conn, *rx,
   2114e:	2323      	movs	r3, #35	; 0x23
   21150:	f7ff b9cc 	b.w	204ec <ull_conn_rx+0x41c>
			conn->llcp_length.disabled = 1U;
   21154:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
   21158:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->llcp_length.disabled = 1U;
   2115c:	f043 0308 	orr.w	r3, r3, #8
   21160:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
   21164:	f7ff b9a6 	b.w	204b4 <ull_conn_rx+0x3e4>
		if (!conn->tx_ctrl) {
   21168:	2900      	cmp	r1, #0
   2116a:	f47f af67 	bne.w	2103c <ull_conn_rx+0xf6c>
			tx->next = conn->tx_head;
   2116e:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   21170:	e9c4 2271 	strd	r2, r2, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   21174:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
   21178:	e767      	b.n	2104a <ull_conn_rx+0xf7a>
   2117a:	4651      	mov	r1, sl
   2117c:	e5df      	b.n	20d3e <ull_conn_rx+0xc6e>
				conn->llcp_phy.state =
   2117e:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
   21182:	4281      	cmp	r1, r0
				conn->llcp_phy.state =
   21184:	f043 0303 	orr.w	r3, r3, #3
   21188:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
   2118c:	d111      	bne.n	211b2 <ull_conn_rx+0x10e2>
					conn->llcp_phy.tx =
   2118e:	f8b4 21be 	ldrh.w	r2, [r4, #446]	; 0x1be
						conn->phy_pref_rx;
   21192:	f894 01c0 	ldrb.w	r0, [r4, #448]	; 0x1c0
					conn->llcp_phy.ack--;
   21196:	1e4b      	subs	r3, r1, #1
					conn->llcp_phy.tx =
   21198:	f422 629f 	bic.w	r2, r2, #1272	; 0x4f8
					conn->llcp_phy.ack--;
   2119c:	f884 31bd 	strb.w	r3, [r4, #445]	; 0x1bd
					conn->llcp_phy.tx =
   211a0:	f240 43fc 	movw	r3, #1276	; 0x4fc
   211a4:	f022 0204 	bic.w	r2, r2, #4
   211a8:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   211ac:	4313      	orrs	r3, r2
   211ae:	f8a4 31be 	strh.w	r3, [r4, #446]	; 0x1be
				conn->llcp_phy.rx &= p->tx_phys;
   211b2:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   211b6:	f895 1020 	ldrb.w	r1, [r5, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   211ba:	f3c3 0082 	ubfx	r0, r3, #2, #3
				conn->llcp_phy.rx &= p->tx_phys;
   211be:	ea01 1153 	and.w	r1, r1, r3, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   211c2:	f003 0203 	and.w	r2, r3, #3
   211c6:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   211ca:	4003      	ands	r3, r0
   211cc:	009b      	lsls	r3, r3, #2
   211ce:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   211d2:	4313      	orrs	r3, r2
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   211d4:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   211d8:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   211dc:	d002      	beq.n	211e4 <ull_conn_rx+0x1114>
   211de:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   211e2:	d105      	bne.n	211f0 <ull_conn_rx+0x1120>
					conn->llcp_phy.tx = 0;
   211e4:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   211e8:	f003 0303 	and.w	r3, r3, #3
   211ec:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				conn->llcp_phy.pause_tx = 1U;
   211f0:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   211f4:	2201      	movs	r2, #1
				conn->llcp_phy.pause_tx = 1U;
   211f6:	4313      	orrs	r3, r2
   211f8:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
	int nack = 0;
   211fc:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   211fe:	712a      	strb	r2, [r5, #4]
   21200:	f7fe bfb5 	b.w	2016e <ull_conn_rx+0x9e>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   21204:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   21208:	f36f 0301 	bfc	r3, #0, #2
   2120c:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   21210:	f7ff bb20 	b.w	20854 <ull_conn_rx+0x784>
				nack = reject_ext_ind_send(conn, *rx,
   21214:	2323      	movs	r3, #35	; 0x23
   21216:	2216      	movs	r2, #22
   21218:	f7ff b969 	b.w	204ee <ull_conn_rx+0x41e>
			lll->phy_tx_time = lll->phy_tx;
   2121c:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
			conn->llcp_phy.pause_tx = 0U;
   21220:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
			conn->llcp_phy.ack = conn->llcp_phy.req;
   21224:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
			conn->llcp_phy.pause_tx = 0U;
   21228:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   2122c:	460a      	mov	r2, r1
			conn->llcp_phy.pause_tx = 0U;
   2122e:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   21232:	f361 1206 	bfi	r2, r1, #4, #3
   21236:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			if (conn->llcp_phy.cmd) {
   2123a:	f013 0f04 	tst.w	r3, #4
			conn->llcp_phy.pause_tx = 0U;
   2123e:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
			lll->phy_tx_time = lll->phy_tx;
   21242:	f3c1 0102 	ubfx	r1, r1, #0, #3
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   21246:	6833      	ldr	r3, [r6, #0]
			if (conn->llcp_phy.cmd) {
   21248:	f000 80ec 	beq.w	21424 <ull_conn_rx+0x1354>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   2124c:	221d      	movs	r2, #29
   2124e:	711a      	strb	r2, [r3, #4]
				p->status = 0U;
   21250:	2300      	movs	r3, #0
   21252:	772b      	strb	r3, [r5, #28]
				p->tx = lll->phy_tx;
   21254:	7769      	strb	r1, [r5, #29]
				p->rx = lll->phy_rx;
   21256:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   2125a:	f3c3 0302 	ubfx	r3, r3, #0, #3
   2125e:	77ab      	strb	r3, [r5, #30]
   21260:	f7ff b928 	b.w	204b4 <ull_conn_rx+0x3e4>
	conn->llcp_enc.pause_rx = 0U;
   21264:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
   21268:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
	conn->procedure_expire = 0U;
   2126c:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   2126e:	f021 0103 	bic.w	r1, r1, #3
   21272:	f884 1166 	strb.w	r1, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
   21276:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   2127a:	4618      	mov	r0, r3
   2127c:	f7fe bf77 	b.w	2016e <ull_conn_rx+0x9e>
	    ((pdu_data_tx->llctrl.opcode !=
   21280:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   21282:	2b03      	cmp	r3, #3
   21284:	f43f acdd 	beq.w	20c42 <ull_conn_rx+0xb72>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   21288:	2b0a      	cmp	r3, #10
   2128a:	f47f ad2b 	bne.w	20ce4 <ull_conn_rx+0xc14>
   2128e:	e4d8      	b.n	20c42 <ull_conn_rx+0xb72>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   21290:	2301      	movs	r3, #1
   21292:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_INSTANT_PASSED;
   21294:	2328      	movs	r3, #40	; 0x28
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = phy_upd_ind_recv(conn, link, rx, pdu_rx);
		if (err) {
			conn->llcp_terminate.reason_final = err;
   21296:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
	int nack = 0;
   2129a:	2000      	movs	r0, #0
   2129c:	f7fe bf67 	b.w	2016e <ull_conn_rx+0x9e>
   212a0:	200028b4 	.word	0x200028b4
   212a4:	20002948 	.word	0x20002948
   212a8:	00033640 	.word	0x00033640
   212ac:	0003378c 	.word	0x0003378c
   212b0:	00032fc4 	.word	0x00032fc4
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   212b4:	2101      	movs	r1, #1
   212b6:	f10d 000f 	add.w	r0, sp, #15
	phy = ind->c_to_p_phy;
   212ba:	f88d 200f 	strb.w	r2, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   212be:	f7f9 f921 	bl	1a504 <util_ones_count_get>
   212c2:	2801      	cmp	r0, #1
   212c4:	f200 80b2 	bhi.w	2142c <ull_conn_rx+0x135c>
	phy = ind->p_to_c_phy;
   212c8:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   212cc:	f88d 300f 	strb.w	r3, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   212d0:	f10d 000f 	add.w	r0, sp, #15
   212d4:	2101      	movs	r1, #1
   212d6:	f7f9 f915 	bl	1a504 <util_ones_count_get>
   212da:	2801      	cmp	r0, #1
   212dc:	f200 80a6 	bhi.w	2142c <ull_conn_rx+0x135c>
	instant = sys_le16_to_cpu(ind->instant);
   212e0:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   212e2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   212e4:	1ad3      	subs	r3, r2, r3
   212e6:	041b      	lsls	r3, r3, #16
   212e8:	f100 8288 	bmi.w	217fc <ull_conn_rx+0x172c>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   212ec:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   212f0:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   212f4:	1a5b      	subs	r3, r3, r1
   212f6:	f003 0303 	and.w	r3, r3, #3
   212fa:	2b02      	cmp	r3, #2
   212fc:	f000 8279 	beq.w	217f2 <ull_conn_rx+0x1722>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   21300:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
   21304:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   21308:	4283      	cmp	r3, r0
   2130a:	d018      	beq.n	2133e <ull_conn_rx+0x126e>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   2130c:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   21310:	f003 0303 	and.w	r3, r3, #3
   21314:	2b02      	cmp	r3, #2
   21316:	d112      	bne.n	2133e <ull_conn_rx+0x126e>
		conn->llcp_phy.pause_tx = 0U;
   21318:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   2131c:	f884 01bd 	strb.w	r0, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   21320:	f36f 0300 	bfc	r3, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   21324:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
		conn->llcp_phy.pause_tx = 0U;
   21328:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   2132c:	f3c3 0380 	ubfx	r3, r3, #2, #1
   21330:	f363 0041 	bfi	r0, r3, #1, #1
		conn->procedure_expire = 0U;
   21334:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   21336:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
		conn->procedure_expire = 0U;
   2133a:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp.phy_upd_ind.tx = ind->p_to_c_phy;
   2133e:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	conn->llcp.phy_upd_ind.rx = ind->c_to_p_phy;
   21342:	f895 0020 	ldrb.w	r0, [r5, #32]
	conn->llcp.phy_upd_ind.instant = instant;
   21346:	f8a4 20ea 	strh.w	r2, [r4, #234]	; 0xea
	conn->llcp.phy_upd_ind.initiate = 0U;
   2134a:	009b      	lsls	r3, r3, #2
   2134c:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   21350:	f003 031c 	and.w	r3, r3, #28
   21354:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   21358:	f002 0202 	and.w	r2, r2, #2
   2135c:	4313      	orrs	r3, r2
   2135e:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	link->mem = conn->llcp_rx;
   21362:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   21366:	607b      	str	r3, [r7, #4]
	(*rx)->hdr.link = link;
   21368:	6833      	ldr	r3, [r6, #0]
   2136a:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   2136c:	6832      	ldr	r2, [r6, #0]
   2136e:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	*rx = NULL;
   21372:	2300      	movs	r3, #0
   21374:	6033      	str	r3, [r6, #0]
	if (conn->llcp.phy_upd_ind.tx) {
   21376:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_type = LLCP_PHY_UPD;
   2137a:	2006      	movs	r0, #6
	conn->llcp_ack -= 2U;
   2137c:	3902      	subs	r1, #2
	conn->llcp_type = LLCP_PHY_UPD;
   2137e:	f884 00e6 	strb.w	r0, [r4, #230]	; 0xe6
	if (conn->llcp.phy_upd_ind.tx) {
   21382:	f012 001c 	ands.w	r0, r2, #28
	conn->llcp_ack -= 2U;
   21386:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	if (conn->llcp.phy_upd_ind.tx) {
   2138a:	f43e aef0 	beq.w	2016e <ull_conn_rx+0x9e>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   2138e:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
   21392:	f3c2 0282 	ubfx	r2, r2, #2, #3
   21396:	f362 1106 	bfi	r1, r2, #4, #3
   2139a:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
	int nack = 0;
   2139e:	4618      	mov	r0, r3
   213a0:	f7fe bee5 	b.w	2016e <ull_conn_rx+0x9e>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   213a4:	2301      	movs	r3, #1
   213a6:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_DIFF_TRANS_COLLISION;
   213a8:	232a      	movs	r3, #42	; 0x2a
   213aa:	e774      	b.n	21296 <ull_conn_rx+0x11c6>
			conn->procedure_expire = 0U;
   213ac:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   213ae:	4551      	cmp	r1, sl
			conn->llcp_length.ack = conn->llcp_length.req;
   213b0:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->procedure_expire = 0U;
   213b4:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   213b8:	f000 8129 	beq.w	2160e <ull_conn_rx+0x153e>
			conn->lll.max_rx_time = eff_rx_time;
   213bc:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
			if (tx) {
   213c0:	2b00      	cmp	r3, #0
   213c2:	f000 811f 	beq.w	21604 <ull_conn_rx+0x1534>
					(conn->llcp_length.req - 1);
   213c6:	3a01      	subs	r2, #1
				conn->llcp_length.ack =
   213c8:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
				conn->llcp_length.state =
   213cc:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
				conn->llcp_length.rx_octets = eff_rx_octets;
   213d0:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
				conn->llcp_length.state =
   213d4:	2603      	movs	r6, #3
   213d6:	f366 0202 	bfi	r2, r6, #0, #3
				conn->llcp_length.tx_octets = eff_tx_octets;
   213da:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
				conn->llcp_length.rx_time = eff_rx_time;
   213de:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
				conn->llcp_length.tx_time = eff_tx_time;
   213e2:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
				conn->llcp_length.state =
   213e6:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   213ea:	f8a5 e020 	strh.w	lr, [r5, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   213ee:	84a9      	strh	r1, [r5, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   213f0:	f8a5 c022 	strh.w	ip, [r5, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   213f4:	84e8      	strh	r0, [r5, #38]	; 0x26
   213f6:	e4d9      	b.n	20dac <ull_conn_rx+0xcdc>
		conn_upd_curr = conn;
   213f8:	601c      	str	r4, [r3, #0]
   213fa:	f7ff b810 	b.w	2041e <ull_conn_rx+0x34e>
	conn_upd_curr = NULL;
   213fe:	4bce      	ldr	r3, [pc, #824]	; (21738 <ull_conn_rx+0x1668>)
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   21400:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   21404:	2200      	movs	r2, #0
   21406:	601a      	str	r2, [r3, #0]
			if (!conn->llcp_conn_param.cmd) {
   21408:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   2140c:	f013 0310 	ands.w	r3, r3, #16
   21410:	f040 80c5 	bne.w	2159e <ull_conn_rx+0x14ce>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   21414:	2201      	movs	r2, #1
   21416:	712a      	strb	r2, [r5, #4]
	int nack = 0;
   21418:	4618      	mov	r0, r3
				break;
   2141a:	f7fe bea8 	b.w	2016e <ull_conn_rx+0x9e>
	struct node_tx *tx = NULL;
   2141e:	2300      	movs	r3, #0
   21420:	f7fe bfc1 	b.w	203a6 <ull_conn_rx+0x2d6>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   21424:	2201      	movs	r2, #1
   21426:	711a      	strb	r2, [r3, #4]
   21428:	f7ff b844 	b.w	204b4 <ull_conn_rx+0x3e4>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   2142c:	6833      	ldr	r3, [r6, #0]
   2142e:	2201      	movs	r2, #1
   21430:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INVALID_LL_PARAM;
   21432:	231e      	movs	r3, #30
   21434:	e72f      	b.n	21296 <ull_conn_rx+0x11c6>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   21436:	4ac1      	ldr	r2, [pc, #772]	; (2173c <ull_conn_rx+0x166c>)
   21438:	49c1      	ldr	r1, [pc, #772]	; (21740 <ull_conn_rx+0x1670>)
   2143a:	48c2      	ldr	r0, [pc, #776]	; (21744 <ull_conn_rx+0x1674>)
   2143c:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
   21440:	f00a fdc1 	bl	2bfc6 <assert_print>
   21444:	4040      	eors	r0, r0
   21446:	f380 8811 	msr	BASEPRI, r0
   2144a:	f04f 0003 	mov.w	r0, #3
   2144e:	df02      	svc	2
   21450:	f7ff bb7f 	b.w	20b52 <ull_conn_rx+0xa82>
				      0x03) == 0x02) &&
   21454:	f894 60e6 	ldrb.w	r6, [r4, #230]	; 0xe6
   21458:	2e03      	cmp	r6, #3
   2145a:	f47f ac30 	bne.w	20cbe <ull_conn_rx+0xbee>
   2145e:	e427      	b.n	20cb0 <ull_conn_rx+0xbe0>
				conn->llcp_length.state =
   21460:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
				conn->lll.max_tx_octets = eff_tx_octets;
   21464:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->llcp_length.state =
   21468:	2504      	movs	r5, #4
   2146a:	f365 0202 	bfi	r2, r5, #0, #3
				conn->lll.max_tx_time = eff_tx_time;
   2146e:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
				conn->llcp_length.state =
   21472:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
   21476:	e48f      	b.n	20d98 <ull_conn_rx+0xcc8>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   21478:	2b23      	cmp	r3, #35	; 0x23
   2147a:	f43f ad57 	beq.w	20f2c <ull_conn_rx+0xe5c>
			conn->periph.ticks_to_offset =
   2147e:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
   21482:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
   21486:	e551      	b.n	20f2c <ull_conn_rx+0xe5c>
				uint16_t interval_min =
   21488:	f8b5 9020 	ldrh.w	r9, [r5, #32]
   2148c:	fa1f f689 	uxth.w	r6, r9
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   21490:	2e05      	cmp	r6, #5
   21492:	f67f ad5c 	bls.w	20f4e <ull_conn_rx+0xe7e>
				uint16_t interval_max =
   21496:	f8b5 8022 	ldrh.w	r8, [r5, #34]	; 0x22
   2149a:	fa1f fe88 	uxth.w	lr, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   2149e:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
   214a2:	f63f ad54 	bhi.w	20f4e <ull_conn_rx+0xe7e>
				    (interval_max > 3200) ||
   214a6:	4576      	cmp	r6, lr
   214a8:	f63f ad51 	bhi.w	20f4e <ull_conn_rx+0xe7e>
				uint16_t latency =
   214ac:	8cae      	ldrh	r6, [r5, #36]	; 0x24
   214ae:	f8ad 6006 	strh.w	r6, [sp, #6]
   214b2:	b2b6      	uxth	r6, r6
				    (interval_min > interval_max) ||
   214b4:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
   214b8:	f4bf ad49 	bcs.w	20f4e <ull_conn_rx+0xe7e>
				uint16_t timeout =
   214bc:	8cef      	ldrh	r7, [r5, #38]	; 0x26
   214be:	fa1f fc87 	uxth.w	ip, r7
				    (latency > 499) ||
   214c2:	f1ac 0a0a 	sub.w	sl, ip, #10
   214c6:	f640 4b76 	movw	fp, #3190	; 0xc76
   214ca:	fa1f fa8a 	uxth.w	sl, sl
   214ce:	45da      	cmp	sl, fp
   214d0:	f63f ad3d 	bhi.w	20f4e <ull_conn_rx+0xe7e>
				     ((latency + 1) * interval_max)) ||
   214d4:	f106 0a01 	add.w	sl, r6, #1
   214d8:	fa1f fa8a 	uxth.w	sl, sl
   214dc:	fb0e fa0a 	mul.w	sl, lr, sl
				    (timeout > 3200) ||
   214e0:	ebba 0f8c 	cmp.w	sl, ip, lsl #2
   214e4:	f4bf ad33 	bcs.w	20f4e <ull_conn_rx+0xe7e>
				     ((latency + 1) * interval_max)) ||
   214e8:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   214ec:	45de      	cmp	lr, fp
   214ee:	f4ff ad2e 	bcc.w	20f4e <ull_conn_rx+0xe7e>
				conn->llcp_conn_param.interval_max =
   214f2:	f8a4 818a 	strh.w	r8, [r4, #394]	; 0x18a
				conn->llcp_conn_param.latency =	latency;
   214f6:	f8bd 8006 	ldrh.w	r8, [sp, #6]
				conn->llcp_conn_param.interval_min =
   214fa:	f8a4 9188 	strh.w	r9, [r4, #392]	; 0x188
				conn->llcp_conn_param.latency =	latency;
   214fe:	f8a4 818c 	strh.w	r8, [r4, #396]	; 0x18c
				conn->llcp_conn_param.timeout =	timeout;
   21502:	f8a4 718e 	strh.w	r7, [r4, #398]	; 0x18e
				conn->llcp_conn_param.preferred_periodicity =
   21506:	f884 b190 	strb.w	fp, [r4, #400]	; 0x190
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   2150a:	f895 802a 	ldrb.w	r8, [r5, #42]	; 0x2a
   2150e:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   21512:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   21516:	f8a4 7192 	strh.w	r7, [r4, #402]	; 0x192
					sys_le16_to_cpu(cpr->offset0);
   2151a:	f895 802c 	ldrb.w	r8, [r5, #44]	; 0x2c
   2151e:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   21522:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset0 =
   21526:	f8a4 7194 	strh.w	r7, [r4, #404]	; 0x194
					sys_le16_to_cpu(cpr->offset1);
   2152a:	f895 802e 	ldrb.w	r8, [r5, #46]	; 0x2e
   2152e:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   21532:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset1 =
   21536:	f8a4 7196 	strh.w	r7, [r4, #406]	; 0x196
					sys_le16_to_cpu(cpr->offset2);
   2153a:	f895 8030 	ldrb.w	r8, [r5, #48]	; 0x30
   2153e:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   21542:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset2 =
   21546:	f8a4 7198 	strh.w	r7, [r4, #408]	; 0x198
					sys_le16_to_cpu(cpr->offset3);
   2154a:	f895 8032 	ldrb.w	r8, [r5, #50]	; 0x32
   2154e:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   21552:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset3 =
   21556:	f8a4 719a 	strh.w	r7, [r4, #410]	; 0x19a
					sys_le16_to_cpu(cpr->offset4);
   2155a:	f895 8034 	ldrb.w	r8, [r5, #52]	; 0x34
   2155e:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   21562:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset4 =
   21566:	f8a4 719c 	strh.w	r7, [r4, #412]	; 0x19c
					sys_le16_to_cpu(cpr->offset5);
   2156a:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   2156e:	f895 8036 	ldrb.w	r8, [r5, #54]	; 0x36
   21572:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset5 =
   21576:	f8a4 719e 	strh.w	r7, [r4, #414]	; 0x19e
				     lll->interval) ||
   2157a:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
				if ((conn->llcp_conn_param.interval_max !=
   2157c:	45be      	cmp	lr, r7
   2157e:	f000 809a 	beq.w	216b6 <ull_conn_rx+0x15e6>
					if (conn->llcp_enc.pause_tx) {
   21582:	f012 0f02 	tst.w	r2, #2
						conn->llcp_conn_param.state =
   21586:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
					if (conn->llcp_enc.pause_tx) {
   2158a:	f43f acad 	beq.w	20ee8 <ull_conn_rx+0xe18>
						conn->llcp_conn_param.state =
   2158e:	2602      	movs	r6, #2
   21590:	f366 0203 	bfi	r2, r6, #0, #4
   21594:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
						(*rx)->hdr.type =
   21598:	2201      	movs	r2, #1
   2159a:	712a      	strb	r2, [r5, #4]
   2159c:	e4a9      	b.n	20ef2 <ull_conn_rx+0xe22>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   2159e:	2319      	movs	r3, #25
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   215a0:	f01c 0f01 	tst.w	ip, #1
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   215a4:	712b      	strb	r3, [r5, #4]
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   215a6:	d15e      	bne.n	21666 <ull_conn_rx+0x1596>
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   215a8:	231a      	movs	r3, #26
   215aa:	772b      	strb	r3, [r5, #28]
			cu->interval = lll->interval;
   215ac:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			cu->timeout = conn->supervision_reload *
   215ae:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			cu->latency = lll->latency;
   215b2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			cu->interval = lll->interval;
   215b4:	83ea      	strh	r2, [r5, #30]
			cu->timeout = conn->supervision_reload *
   215b6:	fb02 f303 	mul.w	r3, r2, r3
				      lll->interval * 125U / 1000;
   215ba:	227d      	movs	r2, #125	; 0x7d
   215bc:	fb02 f303 	mul.w	r3, r2, r3
			cu->latency = lll->latency;
   215c0:	8429      	strh	r1, [r5, #32]
				      lll->interval * 125U / 1000;
   215c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   215c6:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   215ca:	846b      	strh	r3, [r5, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   215cc:	f7fe bf72 	b.w	204b4 <ull_conn_rx+0x3e4>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   215d0:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
			conn->llcp_ack += 2U;
   215d4:	3202      	adds	r2, #2
   215d6:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   215da:	2b00      	cmp	r3, #0
   215dc:	d151      	bne.n	21682 <ull_conn_rx+0x15b2>
			conn->periph.llcp_type = conn->llcp_type;
   215de:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   215e2:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
   215e6:	f7fe be63 	b.w	202b0 <ull_conn_rx+0x1e0>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   215ea:	6832      	ldr	r2, [r6, #0]
   215ec:	201d      	movs	r0, #29
   215ee:	7110      	strb	r0, [r2, #4]
		p->status = 0U;
   215f0:	772b      	strb	r3, [r5, #28]
		p->tx = conn->lll.phy_tx;
   215f2:	7769      	strb	r1, [r5, #29]
		p->rx = conn->lll.phy_rx;
   215f4:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
	int nack = 0;
   215f8:	4618      	mov	r0, r3
		p->rx = conn->lll.phy_rx;
   215fa:	f3c2 0302 	ubfx	r3, r2, #0, #3
   215fe:	77ab      	strb	r3, [r5, #30]
		if (err) {
   21600:	f7fe bdb5 	b.w	2016e <ull_conn_rx+0x9e>
				conn->lll.max_tx_octets = eff_tx_octets;
   21604:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->lll.max_tx_time = eff_tx_time;
   21608:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
   2160c:	e6ed      	b.n	213ea <ull_conn_rx+0x131a>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   2160e:	4540      	cmp	r0, r8
   21610:	f47f aed4 	bne.w	213bc <ull_conn_rx+0x12ec>
			    eff_rx_time == conn->lll.max_rx_time &&
   21614:	45cc      	cmp	ip, r9
   21616:	f47f aed1 	bne.w	213bc <ull_conn_rx+0x12ec>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   2161a:	6832      	ldr	r2, [r6, #0]
   2161c:	2501      	movs	r5, #1
   2161e:	7115      	strb	r5, [r2, #4]
				goto send_length_resp;
   21620:	f7ff bbc4 	b.w	20dac <ull_conn_rx+0xcdc>
			conn->tx_data = conn->tx_data->next;
   21624:	681a      	ldr	r2, [r3, #0]
   21626:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   2162a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   2162e:	2a00      	cmp	r2, #0
   21630:	f47f a8a7 	bne.w	20782 <ull_conn_rx+0x6b2>
			tx->next = conn->tx_head->next;
   21634:	681a      	ldr	r2, [r3, #0]
   21636:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   21638:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   2163a:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   2163e:	f7ff b8a7 	b.w	20790 <ull_conn_rx+0x6c0>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   21642:	2a23      	cmp	r2, #35	; 0x23
   21644:	f43f aa6f 	beq.w	20b26 <ull_conn_rx+0xa56>
			conn->periph.ticks_to_offset =
   21648:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
   2164c:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
   21650:	f7ff ba69 	b.w	20b26 <ull_conn_rx+0xa56>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   21654:	791a      	ldrb	r2, [r3, #4]
   21656:	f002 0203 	and.w	r2, r2, #3
   2165a:	2a03      	cmp	r2, #3
   2165c:	d076      	beq.n	2174c <ull_conn_rx+0x167c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   2165e:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   21662:	f7ff b88e 	b.w	20782 <ull_conn_rx+0x6b2>
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   21666:	4a35      	ldr	r2, [pc, #212]	; (2173c <ull_conn_rx+0x166c>)
   21668:	4935      	ldr	r1, [pc, #212]	; (21740 <ull_conn_rx+0x1670>)
   2166a:	4836      	ldr	r0, [pc, #216]	; (21744 <ull_conn_rx+0x1674>)
   2166c:	f641 4342 	movw	r3, #7234	; 0x1c42
   21670:	f00a fca9 	bl	2bfc6 <assert_print>
   21674:	4040      	eors	r0, r0
   21676:	f380 8811 	msr	BASEPRI, r0
   2167a:	f04f 0003 	mov.w	r0, #3
   2167e:	df02      	svc	2
   21680:	e792      	b.n	215a8 <ull_conn_rx+0x14d8>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   21682:	4a2e      	ldr	r2, [pc, #184]	; (2173c <ull_conn_rx+0x166c>)
   21684:	4930      	ldr	r1, [pc, #192]	; (21748 <ull_conn_rx+0x1678>)
   21686:	482f      	ldr	r0, [pc, #188]	; (21744 <ull_conn_rx+0x1674>)
   21688:	f641 13cd 	movw	r3, #6605	; 0x19cd
   2168c:	f00a fc9b 	bl	2bfc6 <assert_print>
   21690:	4040      	eors	r0, r0
   21692:	f380 8811 	msr	BASEPRI, r0
   21696:	f04f 0003 	mov.w	r0, #3
   2169a:	df02      	svc	2
   2169c:	e79f      	b.n	215de <ull_conn_rx+0x150e>
			conn->tx_data = conn->tx_data->next;
   2169e:	6818      	ldr	r0, [r3, #0]
   216a0:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   216a4:	2900      	cmp	r1, #0
   216a6:	f47f acc9 	bne.w	2103c <ull_conn_rx+0xf6c>
			tx->next = conn->tx_head->next;
   216aa:	6819      	ldr	r1, [r3, #0]
   216ac:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   216ae:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   216b0:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   216b4:	e4c9      	b.n	2104a <ull_conn_rx+0xf7a>
				     lll->interval) ||
   216b6:	f8b4 e02c 	ldrh.w	lr, [r4, #44]	; 0x2c
   216ba:	45b6      	cmp	lr, r6
   216bc:	f47f af61 	bne.w	21582 <ull_conn_rx+0x14b2>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   216c0:	f240 46e2 	movw	r6, #1250	; 0x4e2
   216c4:	fb06 f707 	mul.w	r7, r6, r7
   216c8:	f242 7610 	movw	r6, #10000	; 0x2710
   216cc:	fb06 760c 	mla	r6, r6, ip, r7
   216d0:	3e01      	subs	r6, #1
   216d2:	fbb6 f6f7 	udiv	r6, r6, r7
				     lll->latency) ||
   216d6:	f8b4 70c2 	ldrh.w	r7, [r4, #194]	; 0xc2
   216da:	b2b6      	uxth	r6, r6
   216dc:	42b7      	cmp	r7, r6
   216de:	f47f af50 	bne.w	21582 <ull_conn_rx+0x14b2>
				conn->llcp_conn_param.state =
   216e2:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   216e6:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   216ea:	f042 0201 	orr.w	r2, r2, #1
   216ee:	f8a4 2186 	strh.w	r2, [r4, #390]	; 0x186
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   216f2:	2201      	movs	r2, #1
   216f4:	712a      	strb	r2, [r5, #4]
   216f6:	f7ff bbfc 	b.w	20ef2 <ull_conn_rx+0xe22>
			     lll->interval) ||
   216fa:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
   216fc:	4567      	cmp	r7, ip
   216fe:	f47f abf1 	bne.w	20ee4 <ull_conn_rx+0xe14>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   21702:	f240 47e2 	movw	r7, #1250	; 0x4e2
   21706:	fb07 f606 	mul.w	r6, r7, r6
   2170a:	f242 7710 	movw	r7, #10000	; 0x2710
   2170e:	fb07 6202 	mla	r2, r7, r2, r6
   21712:	3a01      	subs	r2, #1
   21714:	fbb2 f2f6 	udiv	r2, r2, r6
			    (conn->llcp_conn_param.latency != lll->latency) ||
   21718:	f8b4 60c2 	ldrh.w	r6, [r4, #194]	; 0xc2
   2171c:	b292      	uxth	r2, r2
   2171e:	4296      	cmp	r6, r2
   21720:	f47f abe0 	bne.w	20ee4 <ull_conn_rx+0xe14>
   21724:	e7dd      	b.n	216e2 <ull_conn_rx+0x1612>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   21726:	7919      	ldrb	r1, [r3, #4]
   21728:	f001 0103 	and.w	r1, r1, #3
   2172c:	2903      	cmp	r1, #3
   2172e:	d014      	beq.n	2175a <ull_conn_rx+0x168a>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   21730:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   21734:	e482      	b.n	2103c <ull_conn_rx+0xf6c>
   21736:	bf00      	nop
   21738:	200028b4 	.word	0x200028b4
   2173c:	00033640 	.word	0x00033640
   21740:	00033208 	.word	0x00033208
   21744:	00032fc4 	.word	0x00032fc4
   21748:	00033768 	.word	0x00033768
	    ((pdu_data_tx->llctrl.opcode !=
   2174c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   2174e:	2a03      	cmp	r2, #3
   21750:	f43f af70 	beq.w	21634 <ull_conn_rx+0x1564>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   21754:	2a0a      	cmp	r2, #10
   21756:	d182      	bne.n	2165e <ull_conn_rx+0x158e>
   21758:	e76c      	b.n	21634 <ull_conn_rx+0x1564>
	    ((pdu_data_tx->llctrl.opcode !=
   2175a:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   2175c:	2903      	cmp	r1, #3
   2175e:	d0a4      	beq.n	216aa <ull_conn_rx+0x15da>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   21760:	290a      	cmp	r1, #10
   21762:	d1e5      	bne.n	21730 <ull_conn_rx+0x1660>
   21764:	e7a1      	b.n	216aa <ull_conn_rx+0x15da>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   21766:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   2176a:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   2176e:	429a      	cmp	r2, r3
   21770:	d00e      	beq.n	21790 <ull_conn_rx+0x16c0>
   21772:	4a25      	ldr	r2, [pc, #148]	; (21808 <ull_conn_rx+0x1738>)
   21774:	4925      	ldr	r1, [pc, #148]	; (2180c <ull_conn_rx+0x173c>)
   21776:	4826      	ldr	r0, [pc, #152]	; (21810 <ull_conn_rx+0x1740>)
   21778:	f241 43cf 	movw	r3, #5327	; 0x14cf
   2177c:	f00a fc23 	bl	2bfc6 <assert_print>
   21780:	4040      	eors	r0, r0
   21782:	f380 8811 	msr	BASEPRI, r0
   21786:	f04f 0003 	mov.w	r0, #3
   2178a:	df02      	svc	2
   2178c:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   21790:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   21794:	2106      	movs	r1, #6
   21796:	f361 0203 	bfi	r2, r1, #0, #4
		conn->llcp_cu.ack--;
   2179a:	3b01      	subs	r3, #1
   2179c:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   217a0:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   217a4:	f3c2 1300 	ubfx	r3, r2, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   217a8:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.win_size = 1U;
   217ac:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   217ae:	00db      	lsls	r3, r3, #3
   217b0:	430b      	orrs	r3, r1
   217b2:	f022 020f 	bic.w	r2, r2, #15
   217b6:	4313      	orrs	r3, r2
		conn->llcp_cu.win_size = 1U;
   217b8:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   217bc:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   217c0:	f8b4 118a 	ldrh.w	r1, [r4, #394]	; 0x18a
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   217c4:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
   217c8:	2000      	movs	r0, #0
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   217ca:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
		conn->llcp_cu.win_offset_us = 0U;
   217ce:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   217d2:	f8a4 1110 	strh.w	r1, [r4, #272]	; 0x110
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   217d6:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   217da:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
	if (err) {
   217de:	f7fe bcc3 	b.w	20168 <ull_conn_rx+0x98>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   217e2:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   217e6:	f011 0f06 	tst.w	r1, #6
   217ea:	f43f aa9f 	beq.w	20d2c <ull_conn_rx+0xc5c>
   217ee:	f7fe bdd3 	b.w	20398 <ull_conn_rx+0x2c8>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   217f2:	6833      	ldr	r3, [r6, #0]
   217f4:	2201      	movs	r2, #1
   217f6:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   217f8:	232a      	movs	r3, #42	; 0x2a
   217fa:	e54c      	b.n	21296 <ull_conn_rx+0x11c6>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   217fc:	6833      	ldr	r3, [r6, #0]
   217fe:	2201      	movs	r2, #1
   21800:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   21802:	2328      	movs	r3, #40	; 0x28
   21804:	e547      	b.n	21296 <ull_conn_rx+0x11c6>
   21806:	bf00      	nop
   21808:	00033640 	.word	0x00033640
   2180c:	0003378c 	.word	0x0003378c
   21810:	00032fc4 	.word	0x00032fc4

00021814 <ull_conn_llcp>:
{
   21814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21818:	4604      	mov	r4, r0
	if ((conn->llcp_ack == conn->llcp_req) &&
   2181a:	f890 00e5 	ldrb.w	r0, [r0, #229]	; 0xe5
   2181e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   21822:	4298      	cmp	r0, r3
{
   21824:	460d      	mov	r5, r1
   21826:	4616      	mov	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
   21828:	d030      	beq.n	2188c <ull_conn_llcp+0x78>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   2182a:	1a1b      	subs	r3, r3, r0
   2182c:	f003 0303 	and.w	r3, r3, #3
   21830:	2b02      	cmp	r3, #2
   21832:	d010      	beq.n	21856 <ull_conn_llcp+0x42>
   21834:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   21838:	4694      	mov	ip, r2
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   2183a:	f1bc 0f00 	cmp.w	ip, #0
   2183e:	db4e      	blt.n	218de <ull_conn_llcp+0xca>
	if (((conn->llcp_terminate.req - conn->llcp_terminate.ack) & 0xFF) ==
   21840:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
   21844:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   21848:	1a9b      	subs	r3, r3, r2
   2184a:	b2db      	uxtb	r3, r3
   2184c:	2b01      	cmp	r3, #1
   2184e:	d05f      	beq.n	21910 <ull_conn_llcp+0xfc>
	return 0;
   21850:	2000      	movs	r0, #0
}
   21852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   21856:	f894 21ad 	ldrb.w	r2, [r4, #429]	; 0x1ad
   2185a:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   2185e:	429a      	cmp	r2, r3
   21860:	d006      	beq.n	21870 <ull_conn_llcp+0x5c>
			     LLCP_LENGTH_STATE_RESIZE) ||
   21862:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			if ((conn->llcp_length.state ==
   21866:	f003 0306 	and.w	r3, r3, #6
   2186a:	2b04      	cmp	r3, #4
   2186c:	f000 81f4 	beq.w	21c58 <ull_conn_llcp+0x444>
		switch (conn->llcp_type) {
   21870:	f894 70e6 	ldrb.w	r7, [r4, #230]	; 0xe6
   21874:	1e7b      	subs	r3, r7, #1
   21876:	2b05      	cmp	r3, #5
   21878:	f200 81d8 	bhi.w	21c2c <ull_conn_llcp+0x418>
   2187c:	e8df f013 	tbh	[pc, r3, lsl #1]
   21880:	01720024 	.word	0x01720024
   21884:	01d600eb 	.word	0x01d600eb
   21888:	00a500b0 	.word	0x00a500b0
   2188c:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
	if ((conn->llcp_ack == conn->llcp_req) &&
   21890:	2a00      	cmp	r2, #0
   21892:	4694      	mov	ip, r2
   21894:	f2c0 81da 	blt.w	21c4c <ull_conn_llcp+0x438>
	    !conn->llcp_enc.pause_rx) {
   21898:	f894 7166 	ldrb.w	r7, [r4, #358]	; 0x166
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
   2189c:	f017 0801 	ands.w	r8, r7, #1
   218a0:	d1cb      	bne.n	2183a <ull_conn_llcp+0x26>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
   218a2:	f894 910d 	ldrb.w	r9, [r4, #269]	; 0x10d
   218a6:	f894 e10c 	ldrb.w	lr, [r4, #268]	; 0x10c
   218aa:	45ce      	cmp	lr, r9
   218ac:	f000 8304 	beq.w	21eb8 <ull_conn_llcp+0x6a4>
			conn->llcp_type = LLCP_CONN_UPD;
   218b0:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
   218b2:	1e83      	subs	r3, r0, #2
			conn->llcp_type = LLCP_CONN_UPD;
   218b4:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
   218b8:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   218bc:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   218c0:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
   218c4:	429a      	cmp	r2, r3
   218c6:	d1cc      	bne.n	21862 <ull_conn_llcp+0x4e>
			if (event_conn_upd_prep(conn, lazy,
   218c8:	462a      	mov	r2, r5
   218ca:	4631      	mov	r1, r6
   218cc:	4620      	mov	r0, r4
   218ce:	f7eb fc33 	bl	d138 <event_conn_upd_prep>
   218d2:	2800      	cmp	r0, #0
   218d4:	f040 81b7 	bne.w	21c46 <ull_conn_llcp+0x432>
				return -ECANCELED;
   218d8:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   218dc:	e7b9      	b.n	21852 <ull_conn_llcp+0x3e>
   218de:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   218e2:	2900      	cmp	r1, #0
   218e4:	d0ac      	beq.n	21840 <ull_conn_llcp+0x2c>
		switch (conn->periph.llcp_type) {
   218e6:	2902      	cmp	r1, #2
   218e8:	f000 816e 	beq.w	21bc8 <ull_conn_llcp+0x3b4>
   218ec:	2906      	cmp	r1, #6
   218ee:	d05a      	beq.n	219a6 <ull_conn_llcp+0x192>
   218f0:	2901      	cmp	r1, #1
   218f2:	d061      	beq.n	219b8 <ull_conn_llcp+0x1a4>
			LL_ASSERT(0);
   218f4:	4ac9      	ldr	r2, [pc, #804]	; (21c1c <ull_conn_llcp+0x408>)
   218f6:	49ca      	ldr	r1, [pc, #808]	; (21c20 <ull_conn_llcp+0x40c>)
   218f8:	48ca      	ldr	r0, [pc, #808]	; (21c24 <ull_conn_llcp+0x410>)
   218fa:	f240 5311 	movw	r3, #1297	; 0x511
   218fe:	f00a fb62 	bl	2bfc6 <assert_print>
   21902:	4040      	eors	r0, r0
   21904:	f380 8811 	msr	BASEPRI, r0
   21908:	f04f 0003 	mov.w	r0, #3
   2190c:	df02      	svc	2
			break;
   2190e:	e797      	b.n	21840 <ull_conn_llcp+0x2c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   21910:	48c5      	ldr	r0, [pc, #788]	; (21c28 <ull_conn_llcp+0x414>)
   21912:	f7f8 fc21 	bl	1a158 <mem_acquire>
		if (tx) {
   21916:	2800      	cmp	r0, #0
   21918:	d038      	beq.n	2198c <ull_conn_llcp+0x178>
			conn->llcp_terminate.ack--;
   2191a:	f894 3141 	ldrb.w	r3, [r4, #321]	; 0x141
   2191e:	3b01      	subs	r3, #1
   21920:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   21924:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
   21926:	2202      	movs	r2, #2
   21928:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   2192a:	f043 0303 	orr.w	r3, r3, #3
   2192e:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
   21930:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
   21932:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_tx->llctrl.terminate_ind.error_code =
   21936:	f894 2142 	ldrb.w	r2, [r4, #322]	; 0x142
		if (!conn->tx_ctrl) {
   2193a:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
			pdu_tx->llctrl.terminate_ind.error_code =
   2193e:	7202      	strb	r2, [r0, #8]
	if (
   21940:	b1b3      	cbz	r3, 21970 <ull_conn_llcp+0x15c>
	    !conn->llcp_enc.pause_tx &&
   21942:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   21946:	0795      	lsls	r5, r2, #30
   21948:	d412      	bmi.n	21970 <ull_conn_llcp+0x15c>
	    !conn->llcp_phy.pause_tx &&
   2194a:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   2194e:	07d2      	lsls	r2, r2, #31
   21950:	d40e      	bmi.n	21970 <ull_conn_llcp+0x15c>
		if (conn->tx_head == conn->tx_data) {
   21952:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   21956:	4293      	cmp	r3, r2
   21958:	f000 8568 	beq.w	2242c <ull_conn_llcp+0xc18>
		} else if (!conn->tx_ctrl) {
   2195c:	b959      	cbnz	r1, 21976 <ull_conn_llcp+0x162>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   2195e:	791a      	ldrb	r2, [r3, #4]
   21960:	f002 0203 	and.w	r2, r2, #3
   21964:	2a03      	cmp	r2, #3
   21966:	f000 8705 	beq.w	22774 <ull_conn_llcp+0xf60>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   2196a:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   2196e:	e004      	b.n	2197a <ull_conn_llcp+0x166>
		if (!conn->tx_ctrl) {
   21970:	2900      	cmp	r1, #0
   21972:	f000 82f5 	beq.w	21f60 <ull_conn_llcp+0x74c>
	tx->next = conn->tx_ctrl_last->next;
   21976:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   2197a:	681a      	ldr	r2, [r3, #0]
   2197c:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   2197e:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   21980:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   21982:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   21986:	2b00      	cmp	r3, #0
   21988:	f000 816a 	beq.w	21c60 <ull_conn_llcp+0x44c>
		if (!conn->procedure_expire) {
   2198c:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
   21990:	2800      	cmp	r0, #0
   21992:	f47f af5d 	bne.w	21850 <ull_conn_llcp+0x3c>
			conn->procedure_expire = conn->supervision_reload;
   21996:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			if (conn->procedure_expire <= 1U) {
   2199a:	2b01      	cmp	r3, #1
   2199c:	f240 82dc 	bls.w	21f58 <ull_conn_llcp+0x744>
			conn->procedure_expire = conn->supervision_reload;
   219a0:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   219a4:	e754      	b.n	21850 <ull_conn_llcp+0x3c>
			event_counter = lll->event_counter +
   219a6:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
   219a8:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   219aa:	440a      	add	r2, r1
   219ac:	4432      	add	r2, r6
			event_phy_upd_ind_prep(conn, event_counter);
   219ae:	4620      	mov	r0, r4
   219b0:	b291      	uxth	r1, r2
   219b2:	f7fd fe23 	bl	1f5fc <event_phy_upd_ind_prep>
		break;
   219b6:	e743      	b.n	21840 <ull_conn_llcp+0x2c>
			if (event_conn_upd_prep(conn, lazy,
   219b8:	462a      	mov	r2, r5
   219ba:	4631      	mov	r1, r6
   219bc:	4620      	mov	r0, r4
   219be:	f7eb fbbb 	bl	d138 <event_conn_upd_prep>
   219c2:	2800      	cmp	r0, #0
   219c4:	f47f af3c 	bne.w	21840 <ull_conn_llcp+0x2c>
   219c8:	e786      	b.n	218d8 <ull_conn_llcp+0xc4>
			event_counter = lll->event_counter +
   219ca:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   219cc:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   219ce:	4419      	add	r1, r3
   219d0:	4431      	add	r1, r6
			event_phy_upd_ind_prep(conn, event_counter);
   219d2:	b289      	uxth	r1, r1
   219d4:	4620      	mov	r0, r4
   219d6:	f7fd fe11 	bl	1f5fc <event_phy_upd_ind_prep>
		break;
   219da:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   219de:	e72c      	b.n	2183a <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   219e0:	4891      	ldr	r0, [pc, #580]	; (21c28 <ull_conn_llcp+0x414>)
   219e2:	f7f8 fbb9 	bl	1a158 <mem_acquire>
	if (tx) {
   219e6:	2800      	cmp	r0, #0
   219e8:	f000 812d 	beq.w	21c46 <ull_conn_llcp+0x432>
		conn->llcp_ack = conn->llcp_req;
   219ec:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   219f0:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   219f4:	7903      	ldrb	r3, [r0, #4]
   219f6:	f043 0303 	orr.w	r3, r3, #3
   219fa:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   219fc:	2301      	movs	r3, #1
   219fe:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   21a00:	2312      	movs	r3, #18
   21a02:	71c3      	strb	r3, [r0, #7]
		if (!conn->tx_ctrl) {
   21a04:	e9d4 3271 	ldrd	r3, r2, [r4, #452]	; 0x1c4
	if (
   21a08:	2b00      	cmp	r3, #0
   21a0a:	f000 82b2 	beq.w	21f72 <ull_conn_llcp+0x75e>
	    !conn->llcp_enc.pause_tx &&
   21a0e:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   21a12:	078f      	lsls	r7, r1, #30
   21a14:	f100 82ad 	bmi.w	21f72 <ull_conn_llcp+0x75e>
	    !conn->llcp_phy.pause_tx &&
   21a18:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   21a1c:	07c9      	lsls	r1, r1, #31
   21a1e:	f100 82a8 	bmi.w	21f72 <ull_conn_llcp+0x75e>
		if (conn->tx_head == conn->tx_data) {
   21a22:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   21a26:	428b      	cmp	r3, r1
   21a28:	f000 8681 	beq.w	2272e <ull_conn_llcp+0xf1a>
		} else if (!conn->tx_ctrl) {
   21a2c:	2a00      	cmp	r2, #0
   21a2e:	f000 86ac 	beq.w	2278a <ull_conn_llcp+0xf76>
	tx->next = conn->tx_ctrl_last->next;
   21a32:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   21a36:	681a      	ldr	r2, [r3, #0]
   21a38:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   21a3a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   21a3c:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   21a3e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   21a42:	2b00      	cmp	r3, #0
   21a44:	f000 83e2 	beq.w	2220c <ull_conn_llcp+0x9f8>
		conn->procedure_expire = conn->procedure_reload;
   21a48:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   21a4c:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   21a50:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   21a54:	e6f1      	b.n	2183a <ull_conn_llcp+0x26>
	if (conn->llcp.encryption.state) {
   21a56:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   21a5a:	f013 0803 	ands.w	r8, r3, #3
   21a5e:	f000 8151 	beq.w	21d04 <ull_conn_llcp+0x4f0>
		if (lll->role &&
   21a62:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   21a66:	2b00      	cmp	r3, #0
   21a68:	f6bf aeea 	bge.w	21840 <ull_conn_llcp+0x2c>
   21a6c:	f1b8 0f01 	cmp.w	r8, #1
   21a70:	f47f af35 	bne.w	218de <ull_conn_llcp+0xca>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   21a74:	486c      	ldr	r0, [pc, #432]	; (21c28 <ull_conn_llcp+0x414>)
   21a76:	f7f8 fb6f 	bl	1a158 <mem_acquire>
	if (!tx) {
   21a7a:	4607      	mov	r7, r0
   21a7c:	2800      	cmp	r0, #0
   21a7e:	f000 80e2 	beq.w	21c46 <ull_conn_llcp+0x432>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   21a82:	7903      	ldrb	r3, [r0, #4]
   21a84:	f043 0303 	orr.w	r3, r3, #3
   21a88:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   21a8a:	f04f 0904 	mov.w	r9, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   21a8e:	230d      	movs	r3, #13
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   21a90:	f100 0808 	add.w	r8, r0, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   21a94:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   21a96:	f880 9007 	strb.w	r9, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   21a9a:	210c      	movs	r1, #12
   21a9c:	4640      	mov	r0, r8
   21a9e:	f003 faad 	bl	24ffc <lll_csrand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
   21aa2:	4641      	mov	r1, r8
   21aa4:	2208      	movs	r2, #8
   21aa6:	f104 00fe 	add.w	r0, r4, #254	; 0xfe
   21aaa:	f00c fabe 	bl	2e02a <memcpy>
	memcpy(&conn->lll.ccm_rx.iv[4],
   21aae:	464a      	mov	r2, r9
   21ab0:	f107 0110 	add.w	r1, r7, #16
   21ab4:	f104 0098 	add.w	r0, r4, #152	; 0x98
   21ab8:	f00c fab7 	bl	2e02a <memcpy>
	    conn->tx_head &&
   21abc:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   21ac0:	2b00      	cmp	r3, #0
   21ac2:	f000 84a7 	beq.w	22414 <ull_conn_llcp+0xc00>
	    !conn->llcp_enc.pause_tx &&
   21ac6:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   21aca:	0791      	lsls	r1, r2, #30
   21acc:	f100 84a2 	bmi.w	22414 <ull_conn_llcp+0xc00>
	    !conn->llcp_phy.pause_tx &&
   21ad0:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   21ad4:	07d2      	lsls	r2, r2, #31
   21ad6:	f100 849d 	bmi.w	22414 <ull_conn_llcp+0xc00>
		if (conn->tx_head == conn->tx_data) {
   21ada:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   21ade:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   21ae2:	428b      	cmp	r3, r1
   21ae4:	f000 8682 	beq.w	227ec <ull_conn_llcp+0xfd8>
		} else if (!conn->tx_ctrl) {
   21ae8:	2a00      	cmp	r2, #0
   21aea:	f000 874a 	beq.w	22982 <ull_conn_llcp+0x116e>
	tx->next = conn->tx_ctrl_last->next;
   21aee:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   21af2:	681a      	ldr	r2, [r3, #0]
   21af4:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   21af6:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   21af8:	683b      	ldr	r3, [r7, #0]
	conn->tx_ctrl_last = tx;
   21afa:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
   21afe:	2b00      	cmp	r3, #0
   21b00:	f000 85a6 	beq.w	22650 <ull_conn_llcp+0xe3c>
			rx = ll_pdu_rx_alloc();
   21b04:	f7fb ff6c 	bl	1d9e0 <ll_pdu_rx_alloc>
			if (!rx) {
   21b08:	4607      	mov	r7, r0
   21b0a:	2800      	cmp	r0, #0
   21b0c:	f000 809b 	beq.w	21c46 <ull_conn_llcp+0x432>
			rx->hdr.handle = conn->lll.handle;
   21b10:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   21b12:	80fb      	strh	r3, [r7, #6]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   21b14:	2303      	movs	r3, #3
   21b16:	713b      	strb	r3, [r7, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   21b18:	77fb      	strb	r3, [r7, #31]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   21b1a:	7f3b      	ldrb	r3, [r7, #28]
   21b1c:	f043 0303 	orr.w	r3, r3, #3
   21b20:	773b      	strb	r3, [r7, #28]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   21b22:	2317      	movs	r3, #23
			memcpy(&pdu->llctrl.enc_req.rand[0],
   21b24:	2208      	movs	r2, #8
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   21b26:	777b      	strb	r3, [r7, #29]
			memcpy(&pdu->llctrl.enc_req.rand[0],
   21b28:	f204 1169 	addw	r1, r4, #361	; 0x169
   21b2c:	f107 0020 	add.w	r0, r7, #32
   21b30:	f00c fa7b 	bl	2e02a <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   21b34:	f894 3167 	ldrb.w	r3, [r4, #359]	; 0x167
   21b38:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   21b3c:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
   21b40:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
   21b44:	6838      	ldr	r0, [r7, #0]
   21b46:	4639      	mov	r1, r7
   21b48:	f7fb ff1a 	bl	1d980 <ll_rx_put>
			ll_rx_sched();
   21b4c:	f7fb ff22 	bl	1d994 <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
   21b50:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   21b54:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   21b58:	2202      	movs	r2, #2
   21b5a:	f362 0301 	bfi	r3, r2, #0, #2
   21b5e:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   21b62:	e66a      	b.n	2183a <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
   21b64:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   21b66:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   21b68:	4413      	add	r3, r2
	if (conn->llcp.chan_map.initiate) {
   21b6a:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
   21b6e:	4433      	add	r3, r6
	if (conn->llcp.chan_map.initiate) {
   21b70:	f012 0201 	ands.w	r2, r2, #1
			event_counter = lll->event_counter +
   21b74:	b29f      	uxth	r7, r3
	if (conn->llcp.chan_map.initiate) {
   21b76:	d176      	bne.n	21c66 <ull_conn_llcp+0x452>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   21b78:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   21b7c:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   21b80:	1afb      	subs	r3, r7, r3
   21b82:	0418      	lsls	r0, r3, #16
   21b84:	f53f ae59 	bmi.w	2183a <ull_conn_llcp+0x26>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   21b88:	f1bc 0f00 	cmp.w	ip, #0
   21b8c:	f2c0 8336 	blt.w	221fc <ull_conn_llcp+0x9e8>
			conn->llcp_ack = conn->llcp_req;
   21b90:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   21b94:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		memcpy(&lll->data_chan_map[0],
   21b98:	f104 0734 	add.w	r7, r4, #52	; 0x34
   21b9c:	2205      	movs	r2, #5
   21b9e:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   21ba2:	4638      	mov	r0, r7
   21ba4:	f00c fa41 	bl	2e02a <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   21ba8:	2105      	movs	r1, #5
   21baa:	4638      	mov	r0, r7
   21bac:	f7f8 fcaa 	bl	1a504 <util_ones_count_get>
		lll->data_chan_count =
   21bb0:	f894 c039 	ldrb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   21bb4:	2301      	movs	r3, #1
		lll->data_chan_count =
   21bb6:	f360 0c05 	bfi	ip, r0, #0, #6
   21bba:	f884 c039 	strb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   21bbe:	f884 31d8 	strb.w	r3, [r4, #472]	; 0x1d8
   21bc2:	fa4f fc8c 	sxtb.w	ip, ip
   21bc6:	e638      	b.n	2183a <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
   21bc8:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   21bca:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
   21bcc:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
   21bd0:	440a      	add	r2, r1
   21bd2:	4432      	add	r2, r6
	if (conn->llcp.chan_map.initiate) {
   21bd4:	f013 0301 	ands.w	r3, r3, #1
			event_counter = lll->event_counter +
   21bd8:	b296      	uxth	r6, r2
	if (conn->llcp.chan_map.initiate) {
   21bda:	f040 8122 	bne.w	21e22 <ull_conn_llcp+0x60e>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   21bde:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   21be2:	1ab6      	subs	r6, r6, r2
   21be4:	0436      	lsls	r6, r6, #16
   21be6:	f53f ae2b 	bmi.w	21840 <ull_conn_llcp+0x2c>
		memcpy(&lll->data_chan_map[0],
   21bea:	f104 0534 	add.w	r5, r4, #52	; 0x34
   21bee:	2205      	movs	r2, #5
			conn->periph.llcp_type = LLCP_NONE;
   21bf0:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
		memcpy(&lll->data_chan_map[0],
   21bf4:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   21bf8:	4628      	mov	r0, r5
   21bfa:	f00c fa16 	bl	2e02a <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   21bfe:	2105      	movs	r1, #5
   21c00:	4628      	mov	r0, r5
   21c02:	f7f8 fc7f 	bl	1a504 <util_ones_count_get>
		lll->data_chan_count =
   21c06:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   21c0a:	2201      	movs	r2, #1
		lll->data_chan_count =
   21c0c:	f360 0305 	bfi	r3, r0, #0, #6
   21c10:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   21c14:	f884 21d8 	strb.w	r2, [r4, #472]	; 0x1d8
   21c18:	e612      	b.n	21840 <ull_conn_llcp+0x2c>
   21c1a:	bf00      	nop
   21c1c:	00033640 	.word	0x00033640
   21c20:	0003305c 	.word	0x0003305c
   21c24:	00032fc4 	.word	0x00032fc4
   21c28:	20002948 	.word	0x20002948
			LL_ASSERT(0);
   21c2c:	4ad5      	ldr	r2, [pc, #852]	; (21f84 <ull_conn_llcp+0x770>)
   21c2e:	49d6      	ldr	r1, [pc, #856]	; (21f88 <ull_conn_llcp+0x774>)
   21c30:	48d6      	ldr	r0, [pc, #856]	; (21f8c <ull_conn_llcp+0x778>)
   21c32:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
   21c36:	f00a f9c6 	bl	2bfc6 <assert_print>
   21c3a:	4040      	eors	r0, r0
   21c3c:	f380 8811 	msr	BASEPRI, r0
   21c40:	f04f 0003 	mov.w	r0, #3
   21c44:	df02      	svc	2
			break;
   21c46:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   21c4a:	e5f6      	b.n	2183a <ull_conn_llcp+0x26>
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
   21c4c:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
   21c50:	2900      	cmp	r1, #0
   21c52:	f47f ae48 	bne.w	218e6 <ull_conn_llcp+0xd2>
   21c56:	e61f      	b.n	21898 <ull_conn_llcp+0x84>
				event_len_prep(conn);
   21c58:	4620      	mov	r0, r4
   21c5a:	f7fd fbd9 	bl	1f410 <event_len_prep>
   21c5e:	e607      	b.n	21870 <ull_conn_llcp+0x5c>
		conn->tx_data_last = tx;
   21c60:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   21c64:	e692      	b.n	2198c <ull_conn_llcp+0x178>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   21c66:	48ca      	ldr	r0, [pc, #808]	; (21f90 <ull_conn_llcp+0x77c>)
   21c68:	f7f8 fa76 	bl	1a158 <mem_acquire>
		if (tx) {
   21c6c:	4680      	mov	r8, r0
   21c6e:	2800      	cmp	r0, #0
   21c70:	d0e9      	beq.n	21c46 <ull_conn_llcp+0x432>
						      conn->lll.latency + 6;
   21c72:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   21c74:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
						      conn->lll.latency + 6;
   21c78:	3306      	adds	r3, #6
   21c7a:	443b      	add	r3, r7
			conn->llcp.chan_map.instant = event_counter +
   21c7c:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   21c80:	7903      	ldrb	r3, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
   21c82:	f36f 0200 	bfc	r2, #0, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   21c86:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.initiate = 0U;
   21c8a:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   21c8e:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   21c90:	2308      	movs	r3, #8
   21c92:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   21c94:	2301      	movs	r3, #1
   21c96:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   21c98:	2205      	movs	r2, #5
   21c9a:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   21c9e:	3008      	adds	r0, #8
   21ca0:	f00c f9c3 	bl	2e02a <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   21ca4:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   21ca8:	f8a8 300d 	strh.w	r3, [r8, #13]
	    conn->tx_head &&
   21cac:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   21cb0:	2b00      	cmp	r3, #0
   21cb2:	f000 82ae 	beq.w	22212 <ull_conn_llcp+0x9fe>
	    !conn->llcp_enc.pause_tx &&
   21cb6:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   21cba:	0792      	lsls	r2, r2, #30
   21cbc:	f100 82a9 	bmi.w	22212 <ull_conn_llcp+0x9fe>
	    !conn->llcp_phy.pause_tx &&
   21cc0:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   21cc4:	07d7      	lsls	r7, r2, #31
   21cc6:	f100 82a4 	bmi.w	22212 <ull_conn_llcp+0x9fe>
		if (conn->tx_head == conn->tx_data) {
   21cca:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   21cce:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   21cd2:	428b      	cmp	r3, r1
   21cd4:	f000 8563 	beq.w	2279e <ull_conn_llcp+0xf8a>
		} else if (!conn->tx_ctrl) {
   21cd8:	2a00      	cmp	r2, #0
   21cda:	f000 8607 	beq.w	228ec <ull_conn_llcp+0x10d8>
	tx->next = conn->tx_ctrl_last->next;
   21cde:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   21ce2:	681a      	ldr	r2, [r3, #0]
   21ce4:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   21ce8:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   21cec:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   21cf0:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
   21cf4:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   21cf8:	2b00      	cmp	r3, #0
   21cfa:	f47f ad9e 	bne.w	2183a <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
   21cfe:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
   21d02:	e59a      	b.n	2183a <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   21d04:	48a2      	ldr	r0, [pc, #648]	; (21f90 <ull_conn_llcp+0x77c>)
   21d06:	f7f8 fa27 	bl	1a158 <mem_acquire>
	if (!tx) {
   21d0a:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   21d0e:	4681      	mov	r9, r0
   21d10:	2800      	cmp	r0, #0
   21d12:	f43f ad92 	beq.w	2183a <ull_conn_llcp+0x26>
	if (!lll->role) {
   21d16:	f1bc 0f00 	cmp.w	ip, #0
   21d1a:	f280 82ff 	bge.w	2231c <ull_conn_llcp+0xb08>
	else if (!lll->enc_rx) {
   21d1e:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   21d22:	071a      	lsls	r2, r3, #28
   21d24:	f100 83fb 	bmi.w	2251e <ull_conn_llcp+0xd0a>
		if (conn->llcp.encryption.error_code) {
   21d28:	f894 80f5 	ldrb.w	r8, [r4, #245]	; 0xf5
   21d2c:	f1b8 0f00 	cmp.w	r8, #0
   21d30:	f040 8492 	bne.w	22658 <ull_conn_llcp+0xe44>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
   21d34:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   21d38:	463b      	mov	r3, r7
   21d3a:	4642      	mov	r2, r8
   21d3c:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
   21d40:	f204 1071 	addw	r0, r4, #369	; 0x171
   21d44:	f004 ff3a 	bl	26bbc <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
   21d48:	4639      	mov	r1, r7
   21d4a:	2210      	movs	r2, #16
   21d4c:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   21d50:	f00c f96b 	bl	2e02a <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   21d54:	2208      	movs	r2, #8
   21d56:	f104 0194 	add.w	r1, r4, #148	; 0x94
   21d5a:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
   21d5e:	f00c f964 	bl	2e02a <memcpy>
			lll->ccm_rx.direction = 1U;
   21d62:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
			lll->ccm_rx.counter = 0U;
   21d66:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
			lll->ccm_rx.direction = 1U;
   21d6a:	f043 0301 	orr.w	r3, r3, #1
   21d6e:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
			lll->ccm_tx.direction = 0U;
   21d72:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			lll->ccm_rx.counter = 0U;
   21d76:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
			lll->ccm_tx.direction = 0U;
   21d7a:	f368 0300 	bfi	r3, r8, #0, #1
   21d7e:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			lll->enc_rx = 1U;
   21d82:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
			lll->ccm_rx.counter = 0U;
   21d86:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
			lll->enc_rx = 1U;
   21d8a:	f043 0308 	orr.w	r3, r3, #8
   21d8e:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   21d92:	f899 3004 	ldrb.w	r3, [r9, #4]
			lll->ccm_rx.counter = 0U;
   21d96:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   21d9a:	f043 0303 	orr.w	r3, r3, #3
			lll->ccm_tx.counter = 0U;
   21d9e:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
			lll->ccm_rx.counter = 0U;
   21da2:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   21da6:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   21daa:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   21dae:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   21db2:	f889 3004 	strb.w	r3, [r9, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   21db6:	2301      	movs	r3, #1
   21db8:	f889 3005 	strb.w	r3, [r9, #5]
			pdu_ctrl_tx->llctrl.opcode =
   21dbc:	2305      	movs	r3, #5
   21dbe:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
   21dc2:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   21dc6:	2b00      	cmp	r3, #0
   21dc8:	f000 8357 	beq.w	2247a <ull_conn_llcp+0xc66>
	    !conn->llcp_enc.pause_tx &&
   21dcc:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   21dd0:	0797      	lsls	r7, r2, #30
   21dd2:	f100 8352 	bmi.w	2247a <ull_conn_llcp+0xc66>
	    !conn->llcp_phy.pause_tx &&
   21dd6:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   21dda:	07d0      	lsls	r0, r2, #31
   21ddc:	f100 834d 	bmi.w	2247a <ull_conn_llcp+0xc66>
		if (conn->tx_head == conn->tx_data) {
   21de0:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   21de4:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   21de8:	428b      	cmp	r3, r1
   21dea:	f000 85db 	beq.w	229a4 <ull_conn_llcp+0x1190>
		} else if (!conn->tx_ctrl) {
   21dee:	2a00      	cmp	r2, #0
   21df0:	f000 86d3 	beq.w	22b9a <ull_conn_llcp+0x1386>
	tx->next = conn->tx_ctrl_last->next;
   21df4:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   21df8:	681a      	ldr	r2, [r3, #0]
   21dfa:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   21dfe:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   21e02:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   21e06:	f8d9 3000 	ldr.w	r3, [r9]
   21e0a:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   21e0e:	2b00      	cmp	r3, #0
   21e10:	f000 82f3 	beq.w	223fa <ull_conn_llcp+0xbe6>
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   21e14:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   21e18:	f043 0303 	orr.w	r3, r3, #3
   21e1c:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   21e20:	e50b      	b.n	2183a <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   21e22:	485b      	ldr	r0, [pc, #364]	; (21f90 <ull_conn_llcp+0x77c>)
   21e24:	f7f8 f998 	bl	1a158 <mem_acquire>
		if (tx) {
   21e28:	4605      	mov	r5, r0
   21e2a:	2800      	cmp	r0, #0
   21e2c:	f43f ad08 	beq.w	21840 <ull_conn_llcp+0x2c>
						      conn->lll.latency + 6;
   21e30:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   21e32:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   21e36:	7903      	ldrb	r3, [r0, #4]
						      conn->lll.latency + 6;
   21e38:	3206      	adds	r2, #6
			conn->llcp.chan_map.initiate = 0U;
   21e3a:	f36f 0100 	bfc	r1, #0, #1
						      conn->lll.latency + 6;
   21e3e:	4432      	add	r2, r6
			conn->llcp.chan_map.initiate = 0U;
   21e40:	f884 10e8 	strb.w	r1, [r4, #232]	; 0xe8
			conn->llcp.chan_map.instant = event_counter +
   21e44:	f8a4 20ee 	strh.w	r2, [r4, #238]	; 0xee
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   21e48:	f043 0303 	orr.w	r3, r3, #3
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   21e4c:	2108      	movs	r1, #8
			pdu_ctrl_tx->llctrl.opcode =
   21e4e:	2201      	movs	r2, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   21e50:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   21e52:	7141      	strb	r1, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   21e54:	71c2      	strb	r2, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   21e56:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   21e5a:	2205      	movs	r2, #5
   21e5c:	3008      	adds	r0, #8
   21e5e:	f00c f8e4 	bl	2e02a <memcpy>
	    conn->tx_head &&
   21e62:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   21e66:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   21e6a:	f8a5 200d 	strh.w	r2, [r5, #13]
	if (
   21e6e:	2b00      	cmp	r3, #0
   21e70:	f000 81db 	beq.w	2222a <ull_conn_llcp+0xa16>
	    !conn->llcp_enc.pause_tx &&
   21e74:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   21e78:	0792      	lsls	r2, r2, #30
   21e7a:	f100 81d6 	bmi.w	2222a <ull_conn_llcp+0xa16>
	    !conn->llcp_phy.pause_tx &&
   21e7e:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   21e82:	07d7      	lsls	r7, r2, #31
   21e84:	f100 81d1 	bmi.w	2222a <ull_conn_llcp+0xa16>
		if (conn->tx_head == conn->tx_data) {
   21e88:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   21e8c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   21e90:	428b      	cmp	r3, r1
   21e92:	f000 8495 	beq.w	227c0 <ull_conn_llcp+0xfac>
		} else if (!conn->tx_ctrl) {
   21e96:	2a00      	cmp	r2, #0
   21e98:	f000 85a1 	beq.w	229de <ull_conn_llcp+0x11ca>
	tx->next = conn->tx_ctrl_last->next;
   21e9c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   21ea0:	681a      	ldr	r2, [r3, #0]
   21ea2:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   21ea4:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   21ea6:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   21ea8:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
   21eac:	2b00      	cmp	r3, #0
   21eae:	f47f acc7 	bne.w	21840 <ull_conn_llcp+0x2c>
		conn->tx_data_last = tx;
   21eb2:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
   21eb6:	e4c3      	b.n	21840 <ull_conn_llcp+0x2c>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
   21eb8:	f894 1121 	ldrb.w	r1, [r4, #289]	; 0x121
   21ebc:	f894 e120 	ldrb.w	lr, [r4, #288]	; 0x120
   21ec0:	4571      	cmp	r1, lr
   21ec2:	d067      	beq.n	21f94 <ull_conn_llcp+0x780>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
   21ec4:	eba1 010e 	sub.w	r1, r1, lr
   21ec8:	07c8      	lsls	r0, r1, #31
   21eca:	f57f acb6 	bpl.w	2183a <ull_conn_llcp+0x26>
	if (conn->common.fex_valid) {
   21ece:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   21ed2:	f013 0701 	ands.w	r7, r3, #1
   21ed6:	f000 81b3 	beq.w	22240 <ull_conn_llcp+0xa2c>
		rx = ll_pdu_rx_alloc();
   21eda:	f7fb fd81 	bl	1d9e0 <ll_pdu_rx_alloc>
		if (!rx) {
   21ede:	4607      	mov	r7, r0
   21ee0:	2800      	cmp	r0, #0
   21ee2:	f000 8185 	beq.w	221f0 <ull_conn_llcp+0x9dc>
		conn->llcp_feature.ack = conn->llcp_feature.req;
   21ee6:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
   21eea:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   21eee:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
   21ef0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   21ef2:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   21ef4:	f043 0303 	orr.w	r3, r3, #3
   21ef8:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   21efa:	2309      	movs	r3, #9
   21efc:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   21efe:	77c3      	strb	r3, [r0, #31]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   21f00:	2303      	movs	r3, #3
   21f02:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
   21f04:	4641      	mov	r1, r8
   21f06:	2208      	movs	r2, #8
   21f08:	3020      	adds	r0, #32
   21f0a:	f00c f899 	bl	2e040 <memset>
		sys_put_le64(conn->llcp_feature.features_peer,
   21f0e:	e9d4 234c 	ldrd	r2, r3, [r4, #304]	; 0x130
	sys_put_le16(val >> 16, &dst[2]);
   21f12:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   21f14:	f887 2020 	strb.w	r2, [r7, #32]
	dst[1] = val >> 8;
   21f18:	f3c2 2207 	ubfx	r2, r2, #8, #8
   21f1c:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
	sys_put_le16(val >> 16, &dst[2]);
   21f20:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   21f22:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
   21f26:	f887 1022 	strb.w	r1, [r7, #34]	; 0x22
	dst[1] = val >> 8;
   21f2a:	f3c3 2307 	ubfx	r3, r3, #8, #8
   21f2e:	0a09      	lsrs	r1, r1, #8
	dst[0] = val;
   21f30:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
	dst[1] = val >> 8;
   21f34:	0a12      	lsrs	r2, r2, #8
   21f36:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
   21f3a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
   21f3e:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
		ll_rx_put(rx->hdr.link, rx);
   21f42:	4639      	mov	r1, r7
	ll_rx_put(rx->hdr.link, rx);
   21f44:	6808      	ldr	r0, [r1, #0]
   21f46:	f7fb fd1b 	bl	1d980 <ll_rx_put>
	ll_rx_sched();
   21f4a:	f7fb fd23 	bl	1d994 <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   21f4e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   21f52:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   21f56:	e468      	b.n	2182a <ull_conn_llcp+0x16>
				conn->procedure_expire++;
   21f58:	3301      	adds	r3, #1
   21f5a:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   21f5e:	e478      	b.n	21852 <ull_conn_llcp+0x3e>
			tx->next = conn->tx_head;
   21f60:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   21f62:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   21f66:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   21f6a:	2b00      	cmp	r3, #0
   21f6c:	f47f ad0e 	bne.w	2198c <ull_conn_llcp+0x178>
   21f70:	e676      	b.n	21c60 <ull_conn_llcp+0x44c>
		if (!conn->tx_ctrl) {
   21f72:	2a00      	cmp	r2, #0
   21f74:	f47f ad5d 	bne.w	21a32 <ull_conn_llcp+0x21e>
			tx->next = conn->tx_head;
   21f78:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   21f7a:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   21f7e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   21f82:	e55e      	b.n	21a42 <ull_conn_llcp+0x22e>
   21f84:	00033640 	.word	0x00033640
   21f88:	0003305c 	.word	0x0003305c
   21f8c:	00032fc4 	.word	0x00032fc4
   21f90:	20002948 	.word	0x20002948
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
   21f94:	f894 1139 	ldrb.w	r1, [r4, #313]	; 0x139
   21f98:	f894 e138 	ldrb.w	lr, [r4, #312]	; 0x138
   21f9c:	4571      	cmp	r1, lr
   21f9e:	d02f      	beq.n	22000 <ull_conn_llcp+0x7ec>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
   21fa0:	eba1 010e 	sub.w	r1, r1, lr
   21fa4:	07cf      	lsls	r7, r1, #31
   21fa6:	f57f ac48 	bpl.w	2183a <ull_conn_llcp+0x26>
	if (conn->llcp_version.tx == 0U) {
   21faa:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   21fae:	07d8      	lsls	r0, r3, #31
   21fb0:	f140 82f9 	bpl.w	225a6 <ull_conn_llcp+0xd92>
	} else if (conn->llcp_version.rx) {
   21fb4:	079b      	lsls	r3, r3, #30
   21fb6:	f140 82e3 	bpl.w	22580 <ull_conn_llcp+0xd6c>
		rx = ll_pdu_rx_alloc();
   21fba:	f7fb fd11 	bl	1d9e0 <ll_pdu_rx_alloc>
		if (!rx) {
   21fbe:	4601      	mov	r1, r0
   21fc0:	2800      	cmp	r0, #0
   21fc2:	f000 8115 	beq.w	221f0 <ull_conn_llcp+0x9dc>
		conn->llcp_version.ack = conn->llcp_version.req;
   21fc6:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
   21fca:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
		rx->hdr.handle = conn->lll.handle;
   21fce:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   21fd0:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   21fd2:	2303      	movs	r3, #3
   21fd4:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   21fd6:	7f03      	ldrb	r3, [r0, #28]
   21fd8:	f043 0303 	orr.w	r3, r3, #3
   21fdc:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   21fde:	2306      	movs	r3, #6
   21fe0:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   21fe2:	230c      	movs	r3, #12
   21fe4:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
   21fe6:	f894 313b 	ldrb.w	r3, [r4, #315]	; 0x13b
   21fea:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
   21fee:	f8b4 313c 	ldrh.w	r3, [r4, #316]	; 0x13c
   21ff2:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
   21ff6:	f8b4 313e 	ldrh.w	r3, [r4, #318]	; 0x13e
   21ffa:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
		ll_rx_put(rx->hdr.link, rx);
   21ffe:	e7a1      	b.n	21f44 <ull_conn_llcp+0x730>
		} else if (conn->llcp_conn_param.ack !=
   22000:	f894 e185 	ldrb.w	lr, [r4, #389]	; 0x185
   22004:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   22008:	458e      	cmp	lr, r1
   2200a:	f000 81f9 	beq.w	22400 <ull_conn_llcp+0xbec>
	return conn_upd_curr && (conn_upd_curr != conn);
   2200e:	f8df 8304 	ldr.w	r8, [pc, #772]	; 22314 <ull_conn_llcp+0xb00>
   22012:	f8d8 1000 	ldr.w	r1, [r8]
   22016:	2900      	cmp	r1, #0
   22018:	f000 8365 	beq.w	226e6 <ull_conn_llcp+0xed2>
   2201c:	428c      	cmp	r4, r1
   2201e:	f47f ac0c 	bne.w	2183a <ull_conn_llcp+0x26>
	switch (conn->llcp_conn_param.state) {
   22022:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
   22026:	f001 010f 	and.w	r1, r1, #15
   2202a:	2906      	cmp	r1, #6
   2202c:	f200 8671 	bhi.w	22d12 <ull_conn_llcp+0x14fe>
   22030:	f20f 0e04 	addw	lr, pc, #4
   22034:	f85e f021 	ldr.w	pc, [lr, r1, lsl #2]
   22038:	0002212b 	.word	0x0002212b
   2203c:	000220a5 	.word	0x000220a5
   22040:	00022055 	.word	0x00022055
   22044:	0002182b 	.word	0x0002182b
   22048:	0002182b 	.word	0x0002182b
   2204c:	0002182b 	.word	0x0002182b
   22050:	0002182b 	.word	0x0002182b
	if (conn->llcp_enc.pause_tx) {
   22054:	07bb      	lsls	r3, r7, #30
   22056:	f53f abf0 	bmi.w	2183a <ull_conn_llcp+0x26>
	rx = ll_pdu_rx_alloc();
   2205a:	f7fb fcc1 	bl	1d9e0 <ll_pdu_rx_alloc>
	if (!rx) {
   2205e:	4601      	mov	r1, r0
   22060:	2800      	cmp	r0, #0
   22062:	f000 80c5 	beq.w	221f0 <ull_conn_llcp+0x9dc>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   22066:	f894 0186 	ldrb.w	r0, [r4, #390]	; 0x186
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   2206a:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   2206c:	2203      	movs	r2, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   2206e:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   22072:	f362 0003 	bfi	r0, r2, #0, #4
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   22076:	2718      	movs	r7, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   22078:	f884 0186 	strb.w	r0, [r4, #390]	; 0x186
	rx->hdr.handle = conn->lll.handle;
   2207c:	8d20      	ldrh	r0, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   2207e:	710a      	strb	r2, [r1, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   22080:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   22082:	774f      	strb	r7, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   22084:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
   22088:	840b      	strh	r3, [r1, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   2208a:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
   2208e:	844b      	strh	r3, [r1, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   22090:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
   22094:	848b      	strh	r3, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   22096:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
   2209a:	84cb      	strh	r3, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   2209c:	230f      	movs	r3, #15
	rx->hdr.handle = conn->lll.handle;
   2209e:	80c8      	strh	r0, [r1, #6]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   220a0:	77cb      	strb	r3, [r1, #31]
   220a2:	e74f      	b.n	21f44 <ull_conn_llcp+0x730>
	if (conn->llcp_conn_param.status) {
   220a4:	f894 3187 	ldrb.w	r3, [r4, #391]	; 0x187
   220a8:	2b00      	cmp	r3, #0
   220aa:	f040 83b8 	bne.w	2281e <ull_conn_llcp+0x100a>
	if (!conn->lll.role) {
   220ae:	2a00      	cmp	r2, #0
   220b0:	f2c0 84e2 	blt.w	22a78 <ull_conn_llcp+0x1264>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   220b4:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.win_offset_us = 0U;
   220b8:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   220bc:	2106      	movs	r1, #6
   220be:	f361 0203 	bfi	r2, r1, #0, #4
		preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
   220c2:	f894 1190 	ldrb.w	r1, [r4, #400]	; 0x190
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   220c6:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.win_size = 1U;
   220ca:	2001      	movs	r0, #1
		interval_max = conn->llcp_conn_param.interval_max;
   220cc:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
		conn->llcp_cu.win_size = 1U;
   220d0:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
		if (preferred_periodicity) {
   220d4:	2900      	cmp	r1, #0
   220d6:	f000 8571 	beq.w	22bbc <ull_conn_llcp+0x13a8>
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   220da:	fbb2 f3f1 	udiv	r3, r2, r1
   220de:	fb13 f301 	smulbb	r3, r3, r1
			if (conn->llcp_cu.interval < conn->llcp_conn_param.interval_min) {
   220e2:	f8b4 1188 	ldrh.w	r1, [r4, #392]	; 0x188
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   220e6:	b29b      	uxth	r3, r3
				conn->llcp_cu.interval = interval_max;
   220e8:	4299      	cmp	r1, r3
   220ea:	bf98      	it	ls
   220ec:	461a      	movls	r2, r3
   220ee:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   220f2:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   220f6:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   220fa:	f8b4 118c 	ldrh.w	r1, [r4, #396]	; 0x18c
   220fe:	f8a4 1112 	strh.w	r1, [r4, #274]	; 0x112
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   22102:	f3c3 1300 	ubfx	r3, r3, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   22106:	00db      	lsls	r3, r3, #3
   22108:	f022 020f 	bic.w	r2, r2, #15
   2210c:	f043 0302 	orr.w	r3, r3, #2
   22110:	4313      	orrs	r3, r2
		conn->llcp_cu.ack--;
   22112:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   22116:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
   2211a:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   2211e:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.ack--;
   22122:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   22126:	f7ff bb8b 	b.w	21840 <ull_conn_llcp+0x2c>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   2212a:	487b      	ldr	r0, [pc, #492]	; (22318 <ull_conn_llcp+0xb04>)
			event_counter = lll->event_counter +
   2212c:	8e67      	ldrh	r7, [r4, #50]	; 0x32
					lll->latency_prepare + lazy;
   2212e:	f8b4 902e 	ldrh.w	r9, [r4, #46]	; 0x2e
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   22132:	f7f8 f811 	bl	1a158 <mem_acquire>
	if (!tx) {
   22136:	4602      	mov	r2, r0
   22138:	2800      	cmp	r0, #0
   2213a:	d059      	beq.n	221f0 <ull_conn_llcp+0x9dc>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   2213c:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
   2213e:	f8c8 4000 	str.w	r4, [r8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   22142:	f043 0303 	orr.w	r3, r3, #3
   22146:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   22148:	2318      	movs	r3, #24
   2214a:	7143      	strb	r3, [r0, #5]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   2214c:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
   22150:	8110      	strh	r0, [r2, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   22152:	f8b4 018a 	ldrh.w	r0, [r4, #394]	; 0x18a
   22156:	8150      	strh	r0, [r2, #10]
	p->preferred_periodicity = 0U;
   22158:	2300      	movs	r3, #0
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   2215a:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
   2215e:	8190      	strh	r0, [r2, #12]
			event_counter = lll->event_counter +
   22160:	eb07 0109 	add.w	r1, r7, r9
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   22164:	f8b4 018e 	ldrh.w	r0, [r4, #398]	; 0x18e
	p->preferred_periodicity = 0U;
   22168:	7413      	strb	r3, [r2, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
   2216a:	74d3      	strb	r3, [r2, #19]
   2216c:	7513      	strb	r3, [r2, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
   2216e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   22172:	81d0      	strh	r0, [r2, #14]
	p->offset1 = sys_cpu_to_le16(0xffff);
   22174:	7553      	strb	r3, [r2, #21]
   22176:	7593      	strb	r3, [r2, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
   22178:	75d3      	strb	r3, [r2, #23]
   2217a:	7613      	strb	r3, [r2, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
   2217c:	7653      	strb	r3, [r2, #25]
   2217e:	7693      	strb	r3, [r2, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
   22180:	76d3      	strb	r3, [r2, #27]
   22182:	7713      	strb	r3, [r2, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
   22184:	7753      	strb	r3, [r2, #29]
   22186:	7793      	strb	r3, [r2, #30]
			event_counter = lll->event_counter +
   22188:	4431      	add	r1, r6
	conn->procedure_expire = conn->procedure_reload;
   2218a:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   2218e:	200f      	movs	r0, #15
   22190:	71d0      	strb	r0, [r2, #7]
	conn->procedure_expire = conn->procedure_reload;
   22192:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
   22196:	f8a2 1011 	strh.w	r1, [r2, #17]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   2219a:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   2219e:	2104      	movs	r1, #4
   221a0:	f361 0303 	bfi	r3, r1, #0, #4
   221a4:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
	    conn->tx_head &&
   221a8:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   221ac:	2b00      	cmp	r3, #0
   221ae:	f000 832b 	beq.w	22808 <ull_conn_llcp+0xff4>
	    !conn->llcp_enc.pause_tx &&
   221b2:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   221b6:	078f      	lsls	r7, r1, #30
   221b8:	f100 8326 	bmi.w	22808 <ull_conn_llcp+0xff4>
	    !conn->llcp_phy.pause_tx &&
   221bc:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   221c0:	07c8      	lsls	r0, r1, #31
   221c2:	f100 8321 	bmi.w	22808 <ull_conn_llcp+0xff4>
		if (conn->tx_head == conn->tx_data) {
   221c6:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   221ca:	428b      	cmp	r3, r1
		if (!conn->tx_ctrl) {
   221cc:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   221d0:	f000 8501 	beq.w	22bd6 <ull_conn_llcp+0x13c2>
		} else if (!conn->tx_ctrl) {
   221d4:	2900      	cmp	r1, #0
   221d6:	f000 857b 	beq.w	22cd0 <ull_conn_llcp+0x14bc>
	tx->next = conn->tx_ctrl_last->next;
   221da:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   221de:	6819      	ldr	r1, [r3, #0]
   221e0:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   221e2:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   221e4:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	if (!tx->next) {
   221e8:	6813      	ldr	r3, [r2, #0]
   221ea:	2b00      	cmp	r3, #0
   221ec:	f000 8376 	beq.w	228dc <ull_conn_llcp+0x10c8>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   221f0:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   221f4:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		return;
   221f8:	f7ff bb17 	b.w	2182a <ull_conn_llcp+0x16>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   221fc:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
   22200:	2b00      	cmp	r3, #0
   22202:	f43f acc5 	beq.w	21b90 <ull_conn_llcp+0x37c>
			conn->periph.llcp_type = LLCP_NONE;
   22206:	f884 20d9 	strb.w	r2, [r4, #217]	; 0xd9
   2220a:	e4c5      	b.n	21b98 <ull_conn_llcp+0x384>
		conn->tx_data_last = tx;
   2220c:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   22210:	e41a      	b.n	21a48 <ull_conn_llcp+0x234>
		if (!conn->tx_ctrl) {
   22212:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   22216:	2a00      	cmp	r2, #0
   22218:	f47f ad61 	bne.w	21cde <ull_conn_llcp+0x4ca>
			tx->next = conn->tx_head;
   2221c:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   22220:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   22224:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   22228:	e564      	b.n	21cf4 <ull_conn_llcp+0x4e0>
		if (!conn->tx_ctrl) {
   2222a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   2222e:	2a00      	cmp	r2, #0
   22230:	f47f ae34 	bne.w	21e9c <ull_conn_llcp+0x688>
			tx->next = conn->tx_head;
   22234:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
   22236:	e9c4 5571 	strd	r5, r5, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   2223a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   2223e:	e635      	b.n	21eac <ull_conn_llcp+0x698>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   22240:	4835      	ldr	r0, [pc, #212]	; (22318 <ull_conn_llcp+0xb04>)
   22242:	f7f7 ff89 	bl	1a158 <mem_acquire>
	if (tx) {
   22246:	4680      	mov	r8, r0
   22248:	2800      	cmp	r0, #0
   2224a:	d0d1      	beq.n	221f0 <ull_conn_llcp+0x9dc>
		conn->llcp_feature.ack--;
   2224c:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
   22250:	3b01      	subs	r3, #1
   22252:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   22256:	2309      	movs	r3, #9
   22258:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
   2225a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   2225e:	2b00      	cmp	r3, #0
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   22260:	7903      	ldrb	r3, [r0, #4]
   22262:	f043 0303 	orr.w	r3, r3, #3
   22266:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   22268:	f04f 0208 	mov.w	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
   2226c:	bfac      	ite	ge
   2226e:	2308      	movge	r3, #8
   22270:	230e      	movlt	r3, #14
   22272:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   22274:	4639      	mov	r1, r7
   22276:	4410      	add	r0, r2
   22278:	f00b fee2 	bl	2e040 <memset>
		sys_put_le64(conn->llcp_feature.features_conn,
   2227c:	e9d4 234a 	ldrd	r2, r3, [r4, #296]	; 0x128
	sys_put_le16(val >> 16, &dst[2]);
   22280:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   22282:	f888 2008 	strb.w	r2, [r8, #8]
	dst[1] = val >> 8;
   22286:	f3c2 2207 	ubfx	r2, r2, #8, #8
   2228a:	f888 2009 	strb.w	r2, [r8, #9]
	sys_put_le16(val >> 16, &dst[2]);
   2228e:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   22290:	f888 300c 	strb.w	r3, [r8, #12]
   22294:	f888 100a 	strb.w	r1, [r8, #10]
	dst[1] = val >> 8;
   22298:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   2229c:	f888 200e 	strb.w	r2, [r8, #14]
	dst[1] = val >> 8;
   222a0:	0a09      	lsrs	r1, r1, #8
   222a2:	0a12      	lsrs	r2, r2, #8
   222a4:	f888 100b 	strb.w	r1, [r8, #11]
   222a8:	f888 300d 	strb.w	r3, [r8, #13]
   222ac:	f888 200f 	strb.w	r2, [r8, #15]
	    conn->tx_head &&
   222b0:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   222b4:	2b00      	cmp	r3, #0
   222b6:	f000 80d4 	beq.w	22462 <ull_conn_llcp+0xc4e>
	    !conn->llcp_enc.pause_tx &&
   222ba:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   222be:	0791      	lsls	r1, r2, #30
   222c0:	f100 80cf 	bmi.w	22462 <ull_conn_llcp+0xc4e>
	    !conn->llcp_phy.pause_tx &&
   222c4:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   222c8:	07d2      	lsls	r2, r2, #31
   222ca:	f100 80ca 	bmi.w	22462 <ull_conn_llcp+0xc4e>
		if (conn->tx_head == conn->tx_data) {
   222ce:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   222d2:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   222d6:	428b      	cmp	r3, r1
   222d8:	f000 82f0 	beq.w	228bc <ull_conn_llcp+0x10a8>
		} else if (!conn->tx_ctrl) {
   222dc:	2a00      	cmp	r2, #0
   222de:	f000 83b4 	beq.w	22a4a <ull_conn_llcp+0x1236>
	tx->next = conn->tx_ctrl_last->next;
   222e2:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   222e6:	681a      	ldr	r2, [r3, #0]
   222e8:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   222ec:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   222f0:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   222f4:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
   222f8:	2b00      	cmp	r3, #0
   222fa:	f000 8226 	beq.w	2274a <ull_conn_llcp+0xf36>
		conn->procedure_expire = conn->procedure_reload;
   222fe:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   22302:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   22306:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		conn->procedure_expire = conn->procedure_reload;
   2230a:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	break;
   2230e:	f7ff ba8c 	b.w	2182a <ull_conn_llcp+0x16>
   22312:	bf00      	nop
   22314:	200028b4 	.word	0x200028b4
   22318:	20002948 	.word	0x20002948
		ecb_encrypt(&conn->llcp_enc.ltk[0],
   2231c:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   22320:	463b      	mov	r3, r7
   22322:	4642      	mov	r2, r8
   22324:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
   22328:	f204 1071 	addw	r0, r4, #369	; 0x171
   2232c:	f004 fc46 	bl	26bbc <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
   22330:	4639      	mov	r1, r7
   22332:	2210      	movs	r2, #16
   22334:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   22338:	f00b fe77 	bl	2e02a <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   2233c:	2208      	movs	r2, #8
   2233e:	f104 0194 	add.w	r1, r4, #148	; 0x94
   22342:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
   22346:	f00b fe70 	bl	2e02a <memcpy>
		lll->enc_rx = 1;
   2234a:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.counter = 0;
   2234e:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
		lll->enc_rx = 1;
   22352:	f023 0318 	bic.w	r3, r3, #24
   22356:	f043 0318 	orr.w	r3, r3, #24
   2235a:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.direction = 0;
   2235e:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
		lll->ccm_rx.counter = 0;
   22362:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
		lll->ccm_rx.direction = 0;
   22366:	f368 0300 	bfi	r3, r8, #0, #1
   2236a:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		lll->ccm_tx.direction = 1;
   2236e:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
		lll->ccm_rx.counter = 0;
   22372:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
		lll->ccm_tx.direction = 1;
   22376:	f043 0301 	orr.w	r3, r3, #1
   2237a:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   2237e:	2301      	movs	r3, #1
		lll->ccm_tx.counter = 0;
   22380:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
		lll->ccm_rx.counter = 0;
   22384:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
   22388:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   2238c:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   22390:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   22394:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   22398:	f899 2004 	ldrb.w	r2, [r9, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   2239c:	f889 3005 	strb.w	r3, [r9, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   223a0:	2306      	movs	r3, #6
   223a2:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
   223a6:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   223aa:	f042 0203 	orr.w	r2, r2, #3
   223ae:	f889 2004 	strb.w	r2, [r9, #4]
	if (
   223b2:	2b00      	cmp	r3, #0
   223b4:	d04a      	beq.n	2244c <ull_conn_llcp+0xc38>
	    !conn->llcp_enc.pause_tx &&
   223b6:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   223ba:	0790      	lsls	r0, r2, #30
   223bc:	d446      	bmi.n	2244c <ull_conn_llcp+0xc38>
	    !conn->llcp_phy.pause_tx &&
   223be:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   223c2:	07d1      	lsls	r1, r2, #31
   223c4:	d442      	bmi.n	2244c <ull_conn_llcp+0xc38>
		if (conn->tx_head == conn->tx_data) {
   223c6:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   223ca:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   223cc:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   223d0:	f000 8264 	beq.w	2289c <ull_conn_llcp+0x1088>
		} else if (!conn->tx_ctrl) {
   223d4:	2a00      	cmp	r2, #0
   223d6:	f000 83b9 	beq.w	22b4c <ull_conn_llcp+0x1338>
	tx->next = conn->tx_ctrl_last->next;
   223da:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   223de:	681a      	ldr	r2, [r3, #0]
   223e0:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   223e4:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   223e8:	f8d9 3000 	ldr.w	r3, [r9]
	conn->tx_ctrl_last = tx;
   223ec:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   223f0:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   223f4:	2b00      	cmp	r3, #0
   223f6:	f47f ad0d 	bne.w	21e14 <ull_conn_llcp+0x600>
		conn->tx_data_last = tx;
   223fa:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
   223fe:	e509      	b.n	21e14 <ull_conn_llcp+0x600>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   22400:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
   22404:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   22408:	4299      	cmp	r1, r3
   2240a:	d042      	beq.n	22492 <ull_conn_llcp+0xc7e>
			event_len_prep(conn);
   2240c:	4620      	mov	r0, r4
   2240e:	f7fc ffff 	bl	1f410 <event_len_prep>
   22412:	e6ed      	b.n	221f0 <ull_conn_llcp+0x9dc>
		if (!conn->tx_ctrl) {
   22414:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   22418:	2a00      	cmp	r2, #0
   2241a:	f47f ab68 	bne.w	21aee <ull_conn_llcp+0x2da>
			tx->next = conn->tx_head;
   2241e:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   22420:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   22424:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
   22428:	f7ff bb69 	b.w	21afe <ull_conn_llcp+0x2ea>
			conn->tx_data = conn->tx_data->next;
   2242c:	681a      	ldr	r2, [r3, #0]
   2242e:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   22432:	2900      	cmp	r1, #0
   22434:	f47f aa9f 	bne.w	21976 <ull_conn_llcp+0x162>
			tx->next = conn->tx_head->next;
   22438:	681a      	ldr	r2, [r3, #0]
   2243a:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   2243c:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   2243e:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   22440:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
   22444:	2b00      	cmp	r3, #0
   22446:	f47f aaa1 	bne.w	2198c <ull_conn_llcp+0x178>
   2244a:	e409      	b.n	21c60 <ull_conn_llcp+0x44c>
		if (!conn->tx_ctrl) {
   2244c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   22450:	2a00      	cmp	r2, #0
   22452:	d1c2      	bne.n	223da <ull_conn_llcp+0xbc6>
			tx->next = conn->tx_head;
   22454:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   22458:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   2245c:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   22460:	e7c6      	b.n	223f0 <ull_conn_llcp+0xbdc>
		if (!conn->tx_ctrl) {
   22462:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   22466:	2a00      	cmp	r2, #0
   22468:	f47f af3b 	bne.w	222e2 <ull_conn_llcp+0xace>
			tx->next = conn->tx_head;
   2246c:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   22470:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   22474:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   22478:	e73e      	b.n	222f8 <ull_conn_llcp+0xae4>
		if (!conn->tx_ctrl) {
   2247a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   2247e:	2a00      	cmp	r2, #0
   22480:	f47f acb8 	bne.w	21df4 <ull_conn_llcp+0x5e0>
			tx->next = conn->tx_head;
   22484:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   22488:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   2248c:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   22490:	e4b9      	b.n	21e06 <ull_conn_llcp+0x5f2>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   22492:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   22496:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   2249a:	428b      	cmp	r3, r1
   2249c:	f43f a9cd 	beq.w	2183a <ull_conn_llcp+0x26>
	switch (conn->llcp_phy.state) {
   224a0:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   224a4:	f003 0703 	and.w	r7, r3, #3
   224a8:	2f03      	cmp	r7, #3
   224aa:	f000 8229 	beq.w	22900 <ull_conn_llcp+0x10ec>
   224ae:	2f00      	cmp	r7, #0
   224b0:	f47f a9c2 	bne.w	21838 <ull_conn_llcp+0x24>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   224b4:	48c9      	ldr	r0, [pc, #804]	; (227dc <ull_conn_llcp+0xfc8>)
   224b6:	f7f7 fe4f 	bl	1a158 <mem_acquire>
		if (!tx) {
   224ba:	4601      	mov	r1, r0
   224bc:	2800      	cmp	r0, #0
   224be:	f43f ae97 	beq.w	221f0 <ull_conn_llcp+0x9dc>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   224c2:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		conn->lll.phy_flags = conn->llcp_phy.flags;
   224c6:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   224ca:	2201      	movs	r2, #1
   224cc:	f362 0301 	bfi	r3, r2, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
   224d0:	f894 21c0 	ldrb.w	r2, [r4, #448]	; 0x1c0
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   224d4:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		conn->phy_pref_tx = conn->llcp_phy.tx;
   224d8:	f3c3 0782 	ubfx	r7, r3, #2, #3
   224dc:	f367 0202 	bfi	r2, r7, #0, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
   224e0:	f894 7060 	ldrb.w	r7, [r4, #96]	; 0x60
   224e4:	f3c0 0040 	ubfx	r0, r0, #1, #1
   224e8:	f360 07c3 	bfi	r7, r0, #3, #1
   224ec:	f884 7060 	strb.w	r7, [r4, #96]	; 0x60
		conn->phy_pref_rx = conn->llcp_phy.rx;
   224f0:	f3c3 1742 	ubfx	r7, r3, #5, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   224f4:	7908      	ldrb	r0, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
   224f6:	f367 02c5 	bfi	r2, r7, #3, #3
   224fa:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
		conn->phy_pref_tx = conn->llcp_phy.tx;
   224fe:	f3c3 0282 	ubfx	r2, r3, #2, #3
		pdu_ctrl_tx->len =
   22502:	2303      	movs	r3, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   22504:	f040 0003 	orr.w	r0, r0, #3
		pdu_ctrl_tx->len =
   22508:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   2250a:	2316      	movs	r3, #22
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   2250c:	7108      	strb	r0, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
   2250e:	720a      	strb	r2, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
   22510:	724f      	strb	r7, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
   22512:	2200      	movs	r2, #0
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   22514:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_pause_enqueue(conn, tx, false);
   22516:	4620      	mov	r0, r4
   22518:	f7fc fc84 	bl	1ee24 <ctrl_tx_pause_enqueue>
   2251c:	e6ef      	b.n	222fe <ull_conn_llcp+0xaea>
	conn->lll.enc_tx = 1;
   2251e:	f043 0310 	orr.w	r3, r3, #16
   22522:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   22526:	2301      	movs	r3, #1
   22528:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   2252a:	7903      	ldrb	r3, [r0, #4]
   2252c:	f043 0303 	orr.w	r3, r3, #3
   22530:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
   22532:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   22536:	2206      	movs	r2, #6
   22538:	71c2      	strb	r2, [r0, #7]
	if (
   2253a:	2b00      	cmp	r3, #0
   2253c:	d07d      	beq.n	2263a <ull_conn_llcp+0xe26>
	    !conn->llcp_enc.pause_tx &&
   2253e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   22542:	0791      	lsls	r1, r2, #30
   22544:	d479      	bmi.n	2263a <ull_conn_llcp+0xe26>
	    !conn->llcp_phy.pause_tx &&
   22546:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   2254a:	07d2      	lsls	r2, r2, #31
   2254c:	d475      	bmi.n	2263a <ull_conn_llcp+0xe26>
		if (conn->tx_head == conn->tx_data) {
   2254e:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   22552:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   22554:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   22558:	f000 8233 	beq.w	229c2 <ull_conn_llcp+0x11ae>
		} else if (!conn->tx_ctrl) {
   2255c:	2a00      	cmp	r2, #0
   2255e:	f000 8325 	beq.w	22bac <ull_conn_llcp+0x1398>
	tx->next = conn->tx_ctrl_last->next;
   22562:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   22566:	681a      	ldr	r2, [r3, #0]
   22568:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   2256c:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   22570:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   22574:	f8d9 3000 	ldr.w	r3, [r9]
   22578:	2b00      	cmp	r3, #0
   2257a:	f47f ac4b 	bne.w	21e14 <ull_conn_llcp+0x600>
   2257e:	e73c      	b.n	223fa <ull_conn_llcp+0xbe6>
		LL_ASSERT(0);
   22580:	4a97      	ldr	r2, [pc, #604]	; (227e0 <ull_conn_llcp+0xfcc>)
   22582:	4998      	ldr	r1, [pc, #608]	; (227e4 <ull_conn_llcp+0xfd0>)
   22584:	f640 63c1 	movw	r3, #3777	; 0xec1
		LL_ASSERT(0);
   22588:	4897      	ldr	r0, [pc, #604]	; (227e8 <ull_conn_llcp+0xfd4>)
   2258a:	f009 fd1c 	bl	2bfc6 <assert_print>
   2258e:	4040      	eors	r0, r0
   22590:	f380 8811 	msr	BASEPRI, r0
   22594:	f04f 0003 	mov.w	r0, #3
   22598:	df02      	svc	2
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   2259a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   2259e:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		break;
   225a2:	f7ff b942 	b.w	2182a <ull_conn_llcp+0x16>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   225a6:	488d      	ldr	r0, [pc, #564]	; (227dc <ull_conn_llcp+0xfc8>)
   225a8:	f7f7 fdd6 	bl	1a158 <mem_acquire>
		if (tx) {
   225ac:	2800      	cmp	r0, #0
   225ae:	f43f ae1f 	beq.w	221f0 <ull_conn_llcp+0x9dc>
			conn->llcp_version.ack--;
   225b2:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
   225b6:	3b01      	subs	r3, #1
   225b8:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
			conn->llcp_version.tx = 1U;
   225bc:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   225c0:	f043 0301 	orr.w	r3, r3, #1
   225c4:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   225c8:	7903      	ldrb	r3, [r0, #4]
   225ca:	f043 0303 	orr.w	r3, r3, #3
   225ce:	7103      	strb	r3, [r0, #4]
			pdu->len =
   225d0:	2306      	movs	r3, #6
   225d2:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
   225d4:	230c      	movs	r3, #12
   225d6:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
   225d8:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
   225da:	f06f 030e 	mvn.w	r3, #14
   225de:	7243      	strb	r3, [r0, #9]
   225e0:	2305      	movs	r3, #5
   225e2:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
   225e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   225e8:	72c3      	strb	r3, [r0, #11]
   225ea:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
   225ec:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   225f0:	2b00      	cmp	r3, #0
   225f2:	f000 80b4 	beq.w	2275e <ull_conn_llcp+0xf4a>
	    !conn->llcp_enc.pause_tx &&
   225f6:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   225fa:	0791      	lsls	r1, r2, #30
   225fc:	f100 80af 	bmi.w	2275e <ull_conn_llcp+0xf4a>
	    !conn->llcp_phy.pause_tx &&
   22600:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   22604:	07d2      	lsls	r2, r2, #31
   22606:	f100 80aa 	bmi.w	2275e <ull_conn_llcp+0xf4a>
		if (conn->tx_head == conn->tx_data) {
   2260a:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   2260e:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   22610:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   22614:	f000 82b5 	beq.w	22b82 <ull_conn_llcp+0x136e>
		} else if (!conn->tx_ctrl) {
   22618:	2a00      	cmp	r2, #0
   2261a:	f000 82d3 	beq.w	22bc4 <ull_conn_llcp+0x13b0>
	tx->next = conn->tx_ctrl_last->next;
   2261e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   22622:	681a      	ldr	r2, [r3, #0]
   22624:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   22626:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   22628:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   2262c:	6803      	ldr	r3, [r0, #0]
   2262e:	2b00      	cmp	r3, #0
   22630:	f47f ae65 	bne.w	222fe <ull_conn_llcp+0xaea>
		conn->tx_data_last = tx;
   22634:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
			conn->procedure_expire = conn->procedure_reload;
   22638:	e661      	b.n	222fe <ull_conn_llcp+0xaea>
		if (!conn->tx_ctrl) {
   2263a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   2263e:	2a00      	cmp	r2, #0
   22640:	d18f      	bne.n	22562 <ull_conn_llcp+0xd4e>
			tx->next = conn->tx_head;
   22642:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   22646:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   2264a:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   2264e:	e791      	b.n	22574 <ull_conn_llcp+0xd60>
		conn->tx_data_last = tx;
   22650:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
   22654:	f7ff ba56 	b.w	21b04 <ull_conn_llcp+0x2f0>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   22658:	7903      	ldrb	r3, [r0, #4]
   2265a:	f043 0303 	orr.w	r3, r3, #3
   2265e:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   22660:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   22664:	07db      	lsls	r3, r3, #31
   22666:	d573      	bpl.n	22750 <ull_conn_llcp+0xf3c>
	    (conn->llcp_feature.features_conn &
   22668:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	if (conn->common.fex_valid &&
   2266c:	0758      	lsls	r0, r3, #29
   2266e:	d56f      	bpl.n	22750 <ull_conn_llcp+0xf3c>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   22670:	2311      	movs	r3, #17
   22672:	f889 3007 	strb.w	r3, [r9, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   22676:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
   22678:	f889 8009 	strb.w	r8, [r9, #9]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   2267c:	f889 3008 	strb.w	r3, [r9, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   22680:	f889 7005 	strb.w	r7, [r9, #5]
	conn->llcp.encryption.error_code = 0U;
   22684:	2300      	movs	r3, #0
   22686:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
	    conn->tx_head &&
   2268a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   2268e:	2b00      	cmp	r3, #0
   22690:	d042      	beq.n	22718 <ull_conn_llcp+0xf04>
	    !conn->llcp_enc.pause_tx &&
   22692:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   22696:	0791      	lsls	r1, r2, #30
   22698:	d43e      	bmi.n	22718 <ull_conn_llcp+0xf04>
	    !conn->llcp_phy.pause_tx &&
   2269a:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   2269e:	07d2      	lsls	r2, r2, #31
   226a0:	d43a      	bmi.n	22718 <ull_conn_llcp+0xf04>
		if (conn->tx_head == conn->tx_data) {
   226a2:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   226a6:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   226a8:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   226ac:	f000 81d6 	beq.w	22a5c <ull_conn_llcp+0x1248>
		} else if (!conn->tx_ctrl) {
   226b0:	2a00      	cmp	r2, #0
   226b2:	f000 82c3 	beq.w	22c3c <ull_conn_llcp+0x1428>
	tx->next = conn->tx_ctrl_last->next;
   226b6:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   226ba:	681a      	ldr	r2, [r3, #0]
   226bc:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   226c0:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   226c4:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   226c8:	f8d9 3000 	ldr.w	r3, [r9]
   226cc:	2b00      	cmp	r3, #0
   226ce:	d059      	beq.n	22784 <ull_conn_llcp+0xf70>
			conn->llcp_ack = conn->llcp_req;
   226d0:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
   226d4:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   226d8:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   226dc:	2900      	cmp	r1, #0
   226de:	f43f a8af 	beq.w	21840 <ull_conn_llcp+0x2c>
   226e2:	f7ff b900 	b.w	218e6 <ull_conn_llcp+0xd2>
	switch (conn->llcp_conn_param.state) {
   226e6:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   226ea:	f003 030f 	and.w	r3, r3, #15
   226ee:	2b06      	cmp	r3, #6
   226f0:	f200 830f 	bhi.w	22d12 <ull_conn_llcp+0x14fe>
   226f4:	a101      	add	r1, pc, #4	; (adr r1, 226fc <ull_conn_llcp+0xee8>)
   226f6:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   226fa:	bf00      	nop
   226fc:	0002212b 	.word	0x0002212b
   22700:	000220a5 	.word	0x000220a5
   22704:	00022055 	.word	0x00022055
   22708:	0002183b 	.word	0x0002183b
   2270c:	0002183b 	.word	0x0002183b
   22710:	0002183b 	.word	0x0002183b
   22714:	0002183b 	.word	0x0002183b
		if (!conn->tx_ctrl) {
   22718:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   2271c:	2a00      	cmp	r2, #0
   2271e:	d1ca      	bne.n	226b6 <ull_conn_llcp+0xea2>
			tx->next = conn->tx_head;
   22720:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   22724:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   22728:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   2272c:	e7cc      	b.n	226c8 <ull_conn_llcp+0xeb4>
			conn->tx_data = conn->tx_data->next;
   2272e:	6819      	ldr	r1, [r3, #0]
   22730:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   22734:	2a00      	cmp	r2, #0
   22736:	f47f a97c 	bne.w	21a32 <ull_conn_llcp+0x21e>
			tx->next = conn->tx_head->next;
   2273a:	681a      	ldr	r2, [r3, #0]
   2273c:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   2273e:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   22740:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   22742:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   22746:	f7ff b97c 	b.w	21a42 <ull_conn_llcp+0x22e>
		conn->tx_data_last = tx;
   2274a:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
		conn->procedure_expire = conn->procedure_reload;
   2274e:	e5d6      	b.n	222fe <ull_conn_llcp+0xaea>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   22750:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
   22752:	f889 8008 	strb.w	r8, [r9, #8]
   22756:	2702      	movs	r7, #2
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   22758:	f889 3007 	strb.w	r3, [r9, #7]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   2275c:	e790      	b.n	22680 <ull_conn_llcp+0xe6c>
		if (!conn->tx_ctrl) {
   2275e:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   22762:	2a00      	cmp	r2, #0
   22764:	f47f af5b 	bne.w	2261e <ull_conn_llcp+0xe0a>
			tx->next = conn->tx_head;
   22768:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   2276a:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   2276e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   22772:	e75b      	b.n	2262c <ull_conn_llcp+0xe18>
	    ((pdu_data_tx->llctrl.opcode !=
   22774:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   22776:	2a03      	cmp	r2, #3
   22778:	f43f ae5e 	beq.w	22438 <ull_conn_llcp+0xc24>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   2277c:	2a0a      	cmp	r2, #10
   2277e:	f47f a8f4 	bne.w	2196a <ull_conn_llcp+0x156>
   22782:	e659      	b.n	22438 <ull_conn_llcp+0xc24>
		conn->tx_data_last = tx;
   22784:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
   22788:	e7a2      	b.n	226d0 <ull_conn_llcp+0xebc>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   2278a:	791a      	ldrb	r2, [r3, #4]
   2278c:	f002 0203 	and.w	r2, r2, #3
   22790:	2a03      	cmp	r2, #3
   22792:	f000 80ff 	beq.w	22994 <ull_conn_llcp+0x1180>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   22796:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   2279a:	f7ff b94a 	b.w	21a32 <ull_conn_llcp+0x21e>
			conn->tx_data = conn->tx_data->next;
   2279e:	6819      	ldr	r1, [r3, #0]
   227a0:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   227a4:	2a00      	cmp	r2, #0
   227a6:	f47f aa9a 	bne.w	21cde <ull_conn_llcp+0x4ca>
			tx->next = conn->tx_head->next;
   227aa:	681a      	ldr	r2, [r3, #0]
   227ac:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   227b0:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   227b4:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   227b8:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
   227bc:	f7ff ba9a 	b.w	21cf4 <ull_conn_llcp+0x4e0>
			conn->tx_data = conn->tx_data->next;
   227c0:	6819      	ldr	r1, [r3, #0]
   227c2:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   227c6:	2a00      	cmp	r2, #0
   227c8:	f47f ab68 	bne.w	21e9c <ull_conn_llcp+0x688>
			tx->next = conn->tx_head->next;
   227cc:	681a      	ldr	r2, [r3, #0]
   227ce:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
   227d0:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   227d2:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   227d4:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
   227d8:	f7ff bb68 	b.w	21eac <ull_conn_llcp+0x698>
   227dc:	20002948 	.word	0x20002948
   227e0:	00033640 	.word	0x00033640
   227e4:	0003305c 	.word	0x0003305c
   227e8:	00032fc4 	.word	0x00032fc4
			conn->tx_data = conn->tx_data->next;
   227ec:	6819      	ldr	r1, [r3, #0]
   227ee:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   227f2:	2a00      	cmp	r2, #0
   227f4:	f47f a97b 	bne.w	21aee <ull_conn_llcp+0x2da>
			tx->next = conn->tx_head->next;
   227f8:	681a      	ldr	r2, [r3, #0]
   227fa:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
   227fc:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   227fe:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
   22800:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
   22804:	f7ff b97b 	b.w	21afe <ull_conn_llcp+0x2ea>
		if (!conn->tx_ctrl) {
   22808:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   2280c:	2900      	cmp	r1, #0
   2280e:	f47f ace4 	bne.w	221da <ull_conn_llcp+0x9c6>
			tx->next = conn->tx_head;
   22812:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   22814:	e9c4 2271 	strd	r2, r2, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   22818:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
   2281c:	e4e4      	b.n	221e8 <ull_conn_llcp+0x9d4>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   2281e:	48ca      	ldr	r0, [pc, #808]	; (22b48 <ull_conn_llcp+0x1334>)
   22820:	f7f7 fc9a 	bl	1a158 <mem_acquire>
		if (!tx) {
   22824:	2800      	cmp	r0, #0
   22826:	f43f ace3 	beq.w	221f0 <ull_conn_llcp+0x9dc>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   2282a:	7902      	ldrb	r2, [r0, #4]
   2282c:	f042 0203 	orr.w	r2, r2, #3
   22830:	7102      	strb	r2, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   22832:	2211      	movs	r2, #17
   22834:	71c2      	strb	r2, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   22836:	2203      	movs	r2, #3
   22838:	7142      	strb	r2, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   2283a:	220f      	movs	r2, #15
   2283c:	7202      	strb	r2, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
   2283e:	f894 2187 	ldrb.w	r2, [r4, #391]	; 0x187
   22842:	7242      	strb	r2, [r0, #9]
	    conn->tx_head &&
   22844:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	if (
   22848:	2a00      	cmp	r2, #0
   2284a:	f000 80df 	beq.w	22a0c <ull_conn_llcp+0x11f8>
	    !conn->llcp_enc.pause_tx &&
   2284e:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   22852:	0789      	lsls	r1, r1, #30
   22854:	f100 80da 	bmi.w	22a0c <ull_conn_llcp+0x11f8>
	    !conn->llcp_phy.pause_tx &&
   22858:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   2285c:	07cb      	lsls	r3, r1, #31
   2285e:	f100 80d5 	bmi.w	22a0c <ull_conn_llcp+0x11f8>
		if (conn->tx_head == conn->tx_data) {
   22862:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   22866:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
   22868:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   2286c:	f000 81cb 	beq.w	22c06 <ull_conn_llcp+0x13f2>
		} else if (!conn->tx_ctrl) {
   22870:	2900      	cmp	r1, #0
   22872:	f000 81c0 	beq.w	22bf6 <ull_conn_llcp+0x13e2>
	tx->next = conn->tx_ctrl_last->next;
   22876:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   2287a:	6811      	ldr	r1, [r2, #0]
   2287c:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   2287e:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   22880:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   22884:	6802      	ldr	r2, [r0, #0]
   22886:	2a00      	cmp	r2, #0
   22888:	f000 81b2 	beq.w	22bf0 <ull_conn_llcp+0x13dc>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   2288c:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   22890:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   22894:	2300      	movs	r3, #0
   22896:	f8c8 3000 	str.w	r3, [r8]
   2289a:	e4a9      	b.n	221f0 <ull_conn_llcp+0x9dc>
			conn->tx_data = conn->tx_data->next;
   2289c:	6819      	ldr	r1, [r3, #0]
   2289e:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   228a2:	2a00      	cmp	r2, #0
   228a4:	f47f ad99 	bne.w	223da <ull_conn_llcp+0xbc6>
			tx->next = conn->tx_head->next;
   228a8:	681a      	ldr	r2, [r3, #0]
   228aa:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   228ae:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   228b2:	f8d9 3000 	ldr.w	r3, [r9]
				conn->tx_ctrl_last = tx;
   228b6:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   228ba:	e599      	b.n	223f0 <ull_conn_llcp+0xbdc>
			conn->tx_data = conn->tx_data->next;
   228bc:	6819      	ldr	r1, [r3, #0]
   228be:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   228c2:	2a00      	cmp	r2, #0
   228c4:	f47f ad0d 	bne.w	222e2 <ull_conn_llcp+0xace>
			tx->next = conn->tx_head->next;
   228c8:	681a      	ldr	r2, [r3, #0]
   228ca:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   228ce:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   228d2:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   228d6:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
   228da:	e50d      	b.n	222f8 <ull_conn_llcp+0xae4>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   228dc:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   228e0:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		conn->tx_data_last = tx;
   228e4:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
   228e8:	f7fe bf9f 	b.w	2182a <ull_conn_llcp+0x16>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   228ec:	791a      	ldrb	r2, [r3, #4]
   228ee:	f002 0203 	and.w	r2, r2, #3
   228f2:	2a03      	cmp	r2, #3
   228f4:	f000 813d 	beq.w	22b72 <ull_conn_llcp+0x135e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   228f8:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   228fc:	f7ff b9ef 	b.w	21cde <ull_conn_llcp+0x4ca>
		if (conn->llcp_phy.tx & PHY_2M) {
   22900:	071f      	lsls	r7, r3, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
   22902:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		if (conn->llcp_phy.tx & PHY_2M) {
   22906:	f3c3 0282 	ubfx	r2, r3, #2, #3
   2290a:	f140 8093 	bpl.w	22a34 <ull_conn_llcp+0x1220>
			conn->llcp_phy.tx = PHY_2M;
   2290e:	2202      	movs	r2, #2
   22910:	f362 0384 	bfi	r3, r2, #2, #3
   22914:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		if (conn->llcp_phy.rx & PHY_2M) {
   22918:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   2291c:	065f      	lsls	r7, r3, #25
   2291e:	ea4f 1253 	mov.w	r2, r3, lsr #5
   22922:	d57e      	bpl.n	22a22 <ull_conn_llcp+0x120e>
			conn->llcp_phy.rx = PHY_2M;
   22924:	2202      	movs	r2, #2
   22926:	f362 1347 	bfi	r3, r2, #5, #3
   2292a:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		conn->llcp_ack -= 2U;
   2292e:	1e83      	subs	r3, r0, #2
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   22930:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
   22934:	f894 7060 	ldrb.w	r7, [r4, #96]	; 0x60
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   22938:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
		conn->llcp_ack -= 2U;
   2293c:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   22940:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   22944:	f3c2 0182 	ubfx	r1, r2, #2, #3
   22948:	f007 0707 	and.w	r7, r7, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   2294c:	f000 0007 	and.w	r0, r0, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   22950:	f3c3 0380 	ubfx	r3, r3, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
   22954:	428f      	cmp	r7, r1
   22956:	bf08      	it	eq
   22958:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   2295a:	005b      	lsls	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
   2295c:	ebb0 1f52 	cmp.w	r0, r2, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
   22960:	f043 0301 	orr.w	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   22964:	ea4f 1252 	mov.w	r2, r2, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
   22968:	bf08      	it	eq
   2296a:	2200      	moveq	r2, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   2296c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   22970:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
   22974:	2206      	movs	r2, #6
		conn->llcp.phy_upd_ind.initiate = 1U;
   22976:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		conn->llcp_type = LLCP_PHY_UPD;
   2297a:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   2297e:	f7fe bf77 	b.w	21870 <ull_conn_llcp+0x5c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   22982:	791a      	ldrb	r2, [r3, #4]
   22984:	f002 0203 	and.w	r2, r2, #3
   22988:	2a03      	cmp	r2, #3
   2298a:	d031      	beq.n	229f0 <ull_conn_llcp+0x11dc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   2298c:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   22990:	f7ff b8ad 	b.w	21aee <ull_conn_llcp+0x2da>
	    ((pdu_data_tx->llctrl.opcode !=
   22994:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   22996:	2a03      	cmp	r2, #3
   22998:	f43f aecf 	beq.w	2273a <ull_conn_llcp+0xf26>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   2299c:	2a0a      	cmp	r2, #10
   2299e:	f47f aefa 	bne.w	22796 <ull_conn_llcp+0xf82>
   229a2:	e6ca      	b.n	2273a <ull_conn_llcp+0xf26>
			conn->tx_data = conn->tx_data->next;
   229a4:	6819      	ldr	r1, [r3, #0]
   229a6:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   229aa:	2a00      	cmp	r2, #0
   229ac:	f47f aa22 	bne.w	21df4 <ull_conn_llcp+0x5e0>
			tx->next = conn->tx_head->next;
   229b0:	681a      	ldr	r2, [r3, #0]
   229b2:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   229b6:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   229ba:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   229be:	f7ff ba22 	b.w	21e06 <ull_conn_llcp+0x5f2>
			conn->tx_data = conn->tx_data->next;
   229c2:	6819      	ldr	r1, [r3, #0]
   229c4:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   229c8:	2a00      	cmp	r2, #0
   229ca:	f47f adca 	bne.w	22562 <ull_conn_llcp+0xd4e>
			tx->next = conn->tx_head->next;
   229ce:	681a      	ldr	r2, [r3, #0]
   229d0:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   229d4:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   229d8:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   229dc:	e5ca      	b.n	22574 <ull_conn_llcp+0xd60>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   229de:	791a      	ldrb	r2, [r3, #4]
   229e0:	f002 0203 	and.w	r2, r2, #3
   229e4:	2a03      	cmp	r2, #3
   229e6:	d00a      	beq.n	229fe <ull_conn_llcp+0x11ea>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   229e8:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   229ec:	f7ff ba56 	b.w	21e9c <ull_conn_llcp+0x688>
	    ((pdu_data_tx->llctrl.opcode !=
   229f0:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   229f2:	2a03      	cmp	r2, #3
   229f4:	f43f af00 	beq.w	227f8 <ull_conn_llcp+0xfe4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   229f8:	2a0a      	cmp	r2, #10
   229fa:	d1c7      	bne.n	2298c <ull_conn_llcp+0x1178>
   229fc:	e6fc      	b.n	227f8 <ull_conn_llcp+0xfe4>
	    ((pdu_data_tx->llctrl.opcode !=
   229fe:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   22a00:	2a03      	cmp	r2, #3
   22a02:	f43f aee3 	beq.w	227cc <ull_conn_llcp+0xfb8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   22a06:	2a0a      	cmp	r2, #10
   22a08:	d1ee      	bne.n	229e8 <ull_conn_llcp+0x11d4>
   22a0a:	e6df      	b.n	227cc <ull_conn_llcp+0xfb8>
		if (!conn->tx_ctrl) {
   22a0c:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   22a10:	2900      	cmp	r1, #0
   22a12:	f47f af30 	bne.w	22876 <ull_conn_llcp+0x1062>
			tx->next = conn->tx_head;
   22a16:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   22a18:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   22a1c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   22a20:	e730      	b.n	22884 <ull_conn_llcp+0x1070>
		} else if (conn->llcp_phy.rx & PHY_1M) {
   22a22:	07d1      	lsls	r1, r2, #31
   22a24:	f140 80fb 	bpl.w	22c1e <ull_conn_llcp+0x140a>
			conn->llcp_phy.rx = PHY_1M;
   22a28:	2201      	movs	r2, #1
   22a2a:	f362 1347 	bfi	r3, r2, #5, #3
   22a2e:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   22a32:	e77c      	b.n	2292e <ull_conn_llcp+0x111a>
		} else if (conn->llcp_phy.tx & PHY_1M) {
   22a34:	07d1      	lsls	r1, r2, #31
			conn->llcp_phy.tx = PHY_1M;
   22a36:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		} else if (conn->llcp_phy.tx & PHY_1M) {
   22a3a:	f140 8152 	bpl.w	22ce2 <ull_conn_llcp+0x14ce>
			conn->llcp_phy.tx = PHY_1M;
   22a3e:	2201      	movs	r2, #1
   22a40:	f362 0384 	bfi	r3, r2, #2, #3
   22a44:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   22a48:	e766      	b.n	22918 <ull_conn_llcp+0x1104>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   22a4a:	791a      	ldrb	r2, [r3, #4]
   22a4c:	f002 0203 	and.w	r2, r2, #3
   22a50:	2a03      	cmp	r2, #3
   22a52:	f000 80fb 	beq.w	22c4c <ull_conn_llcp+0x1438>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   22a56:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   22a5a:	e442      	b.n	222e2 <ull_conn_llcp+0xace>
			conn->tx_data = conn->tx_data->next;
   22a5c:	6819      	ldr	r1, [r3, #0]
   22a5e:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   22a62:	2a00      	cmp	r2, #0
   22a64:	f47f ae27 	bne.w	226b6 <ull_conn_llcp+0xea2>
			tx->next = conn->tx_head->next;
   22a68:	681a      	ldr	r2, [r3, #0]
   22a6a:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   22a6e:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   22a72:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   22a76:	e627      	b.n	226c8 <ull_conn_llcp+0xeb4>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   22a78:	4833      	ldr	r0, [pc, #204]	; (22b48 <ull_conn_llcp+0x1334>)
   22a7a:	f7f7 fb6d 	bl	1a158 <mem_acquire>
	if (!tx) {
   22a7e:	2800      	cmp	r0, #0
   22a80:	f43f abb6 	beq.w	221f0 <ull_conn_llcp+0x9dc>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   22a84:	7902      	ldrb	r2, [r0, #4]
   22a86:	f042 0203 	orr.w	r2, r2, #3
   22a8a:	7102      	strb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   22a8c:	2218      	movs	r2, #24
   22a8e:	7142      	strb	r2, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   22a90:	2210      	movs	r2, #16
   22a92:	71c2      	strb	r2, [r0, #7]
	rsp->interval_min =
   22a94:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
   22a98:	8102      	strh	r2, [r0, #8]
	rsp->interval_max =
   22a9a:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
   22a9e:	8142      	strh	r2, [r0, #10]
	rsp->latency =
   22aa0:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
   22aa4:	8182      	strh	r2, [r0, #12]
	rsp->timeout =
   22aa6:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
   22aaa:	81c2      	strh	r2, [r0, #14]
	rsp->preferred_periodicity =
   22aac:	f894 2190 	ldrb.w	r2, [r4, #400]	; 0x190
   22ab0:	7402      	strb	r2, [r0, #16]
	rsp->reference_conn_event_count =
   22ab2:	f8b4 2192 	ldrh.w	r2, [r4, #402]	; 0x192
   22ab6:	f8a0 2011 	strh.w	r2, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
   22aba:	f8b4 2194 	ldrh.w	r2, [r4, #404]	; 0x194
   22abe:	f8a0 2013 	strh.w	r2, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
   22ac2:	f8b4 2196 	ldrh.w	r2, [r4, #406]	; 0x196
   22ac6:	f8a0 2015 	strh.w	r2, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
   22aca:	f8b4 2198 	ldrh.w	r2, [r4, #408]	; 0x198
   22ace:	f8a0 2017 	strh.w	r2, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
   22ad2:	f8b4 219a 	ldrh.w	r2, [r4, #410]	; 0x19a
   22ad6:	f8a0 2019 	strh.w	r2, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
   22ada:	f8b4 219c 	ldrh.w	r2, [r4, #412]	; 0x19c
   22ade:	f8a0 201b 	strh.w	r2, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
   22ae2:	f8b4 219e 	ldrh.w	r2, [r4, #414]	; 0x19e
   22ae6:	f8a0 201d 	strh.w	r2, [r0, #29]
	    conn->tx_head &&
   22aea:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	if (
   22aee:	2a00      	cmp	r2, #0
   22af0:	d035      	beq.n	22b5e <ull_conn_llcp+0x134a>
	    !conn->llcp_enc.pause_tx &&
   22af2:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   22af6:	078f      	lsls	r7, r1, #30
   22af8:	d431      	bmi.n	22b5e <ull_conn_llcp+0x134a>
	    !conn->llcp_phy.pause_tx &&
   22afa:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   22afe:	07c9      	lsls	r1, r1, #31
   22b00:	d42d      	bmi.n	22b5e <ull_conn_llcp+0x134a>
		if (conn->tx_head == conn->tx_data) {
   22b02:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   22b06:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
   22b08:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   22b0c:	f000 80c6 	beq.w	22c9c <ull_conn_llcp+0x1488>
		} else if (!conn->tx_ctrl) {
   22b10:	2900      	cmp	r1, #0
   22b12:	f000 80bb 	beq.w	22c8c <ull_conn_llcp+0x1478>
	tx->next = conn->tx_ctrl_last->next;
   22b16:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   22b1a:	6811      	ldr	r1, [r2, #0]
   22b1c:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   22b1e:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   22b20:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   22b24:	6802      	ldr	r2, [r0, #0]
   22b26:	2a00      	cmp	r2, #0
   22b28:	f000 80ad 	beq.w	22c86 <ull_conn_llcp+0x1472>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
   22b2c:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   22b30:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
   22b34:	2305      	movs	r3, #5
   22b36:	f363 0203 	bfi	r2, r3, #0, #4
   22b3a:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   22b3e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   22b42:	f7fe be72 	b.w	2182a <ull_conn_llcp+0x16>
   22b46:	bf00      	nop
   22b48:	20002948 	.word	0x20002948
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   22b4c:	791a      	ldrb	r2, [r3, #4]
   22b4e:	f002 0203 	and.w	r2, r2, #3
   22b52:	2a03      	cmp	r2, #3
   22b54:	f000 80ae 	beq.w	22cb4 <ull_conn_llcp+0x14a0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   22b58:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   22b5c:	e43d      	b.n	223da <ull_conn_llcp+0xbc6>
		if (!conn->tx_ctrl) {
   22b5e:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   22b62:	2900      	cmp	r1, #0
   22b64:	d1d7      	bne.n	22b16 <ull_conn_llcp+0x1302>
			tx->next = conn->tx_head;
   22b66:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   22b68:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   22b6c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   22b70:	e7d8      	b.n	22b24 <ull_conn_llcp+0x1310>
	    ((pdu_data_tx->llctrl.opcode !=
   22b72:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   22b74:	2a03      	cmp	r2, #3
   22b76:	f43f ae18 	beq.w	227aa <ull_conn_llcp+0xf96>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   22b7a:	2a0a      	cmp	r2, #10
   22b7c:	f47f aebc 	bne.w	228f8 <ull_conn_llcp+0x10e4>
   22b80:	e613      	b.n	227aa <ull_conn_llcp+0xf96>
			conn->tx_data = conn->tx_data->next;
   22b82:	6819      	ldr	r1, [r3, #0]
   22b84:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   22b88:	2a00      	cmp	r2, #0
   22b8a:	f47f ad48 	bne.w	2261e <ull_conn_llcp+0xe0a>
			tx->next = conn->tx_head->next;
   22b8e:	681a      	ldr	r2, [r3, #0]
   22b90:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   22b92:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   22b94:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   22b98:	e548      	b.n	2262c <ull_conn_llcp+0xe18>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   22b9a:	791a      	ldrb	r2, [r3, #4]
   22b9c:	f002 0203 	and.w	r2, r2, #3
   22ba0:	2a03      	cmp	r2, #3
   22ba2:	d062      	beq.n	22c6a <ull_conn_llcp+0x1456>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   22ba4:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   22ba8:	f7ff b924 	b.w	21df4 <ull_conn_llcp+0x5e0>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   22bac:	791a      	ldrb	r2, [r3, #4]
   22bae:	f002 0203 	and.w	r2, r2, #3
   22bb2:	2a03      	cmp	r2, #3
   22bb4:	d060      	beq.n	22c78 <ull_conn_llcp+0x1464>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   22bb6:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   22bba:	e4d2      	b.n	22562 <ull_conn_llcp+0xd4e>
			conn->llcp_cu.interval = interval_max;
   22bbc:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
   22bc0:	f7ff ba97 	b.w	220f2 <ull_conn_llcp+0x8de>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   22bc4:	791a      	ldrb	r2, [r3, #4]
   22bc6:	f002 0203 	and.w	r2, r2, #3
   22bca:	2a03      	cmp	r2, #3
   22bcc:	f000 8099 	beq.w	22d02 <ull_conn_llcp+0x14ee>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   22bd0:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   22bd4:	e523      	b.n	2261e <ull_conn_llcp+0xe0a>
			conn->tx_data = conn->tx_data->next;
   22bd6:	6818      	ldr	r0, [r3, #0]
   22bd8:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   22bdc:	2900      	cmp	r1, #0
   22bde:	f47f aafc 	bne.w	221da <ull_conn_llcp+0x9c6>
			tx->next = conn->tx_head->next;
   22be2:	6819      	ldr	r1, [r3, #0]
   22be4:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   22be6:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   22be8:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   22bec:	f7ff bafc 	b.w	221e8 <ull_conn_llcp+0x9d4>
		conn->tx_data_last = tx;
   22bf0:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   22bf4:	e64a      	b.n	2288c <ull_conn_llcp+0x1078>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   22bf6:	7911      	ldrb	r1, [r2, #4]
   22bf8:	f001 0103 	and.w	r1, r1, #3
   22bfc:	2903      	cmp	r1, #3
   22bfe:	d017      	beq.n	22c30 <ull_conn_llcp+0x141c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   22c00:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   22c04:	e637      	b.n	22876 <ull_conn_llcp+0x1062>
			conn->tx_data = conn->tx_data->next;
   22c06:	6813      	ldr	r3, [r2, #0]
   22c08:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   22c0c:	2900      	cmp	r1, #0
   22c0e:	f47f ae32 	bne.w	22876 <ull_conn_llcp+0x1062>
			tx->next = conn->tx_head->next;
   22c12:	6811      	ldr	r1, [r2, #0]
   22c14:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   22c16:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   22c18:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   22c1c:	e632      	b.n	22884 <ull_conn_llcp+0x1070>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
   22c1e:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = PHY_CODED;
   22c22:	bf18      	it	ne
   22c24:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
   22c26:	f362 1347 	bfi	r3, r2, #5, #3
   22c2a:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   22c2e:	e67e      	b.n	2292e <ull_conn_llcp+0x111a>
	    ((pdu_data_tx->llctrl.opcode !=
   22c30:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   22c32:	2903      	cmp	r1, #3
   22c34:	d0ed      	beq.n	22c12 <ull_conn_llcp+0x13fe>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   22c36:	290a      	cmp	r1, #10
   22c38:	d1e2      	bne.n	22c00 <ull_conn_llcp+0x13ec>
   22c3a:	e7ea      	b.n	22c12 <ull_conn_llcp+0x13fe>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   22c3c:	791a      	ldrb	r2, [r3, #4]
   22c3e:	f002 0203 	and.w	r2, r2, #3
   22c42:	2a03      	cmp	r2, #3
   22c44:	d00a      	beq.n	22c5c <ull_conn_llcp+0x1448>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   22c46:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   22c4a:	e534      	b.n	226b6 <ull_conn_llcp+0xea2>
	    ((pdu_data_tx->llctrl.opcode !=
   22c4c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   22c4e:	2a03      	cmp	r2, #3
   22c50:	f43f ae3a 	beq.w	228c8 <ull_conn_llcp+0x10b4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   22c54:	2a0a      	cmp	r2, #10
   22c56:	f47f aefe 	bne.w	22a56 <ull_conn_llcp+0x1242>
   22c5a:	e635      	b.n	228c8 <ull_conn_llcp+0x10b4>
	    ((pdu_data_tx->llctrl.opcode !=
   22c5c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   22c5e:	2a03      	cmp	r2, #3
   22c60:	f43f af02 	beq.w	22a68 <ull_conn_llcp+0x1254>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   22c64:	2a0a      	cmp	r2, #10
   22c66:	d1ee      	bne.n	22c46 <ull_conn_llcp+0x1432>
   22c68:	e6fe      	b.n	22a68 <ull_conn_llcp+0x1254>
	    ((pdu_data_tx->llctrl.opcode !=
   22c6a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   22c6c:	2a03      	cmp	r2, #3
   22c6e:	f43f ae9f 	beq.w	229b0 <ull_conn_llcp+0x119c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   22c72:	2a0a      	cmp	r2, #10
   22c74:	d196      	bne.n	22ba4 <ull_conn_llcp+0x1390>
   22c76:	e69b      	b.n	229b0 <ull_conn_llcp+0x119c>
	    ((pdu_data_tx->llctrl.opcode !=
   22c78:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   22c7a:	2a03      	cmp	r2, #3
   22c7c:	f43f aea7 	beq.w	229ce <ull_conn_llcp+0x11ba>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   22c80:	2a0a      	cmp	r2, #10
   22c82:	d198      	bne.n	22bb6 <ull_conn_llcp+0x13a2>
   22c84:	e6a3      	b.n	229ce <ull_conn_llcp+0x11ba>
		conn->tx_data_last = tx;
   22c86:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   22c8a:	e74f      	b.n	22b2c <ull_conn_llcp+0x1318>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   22c8c:	7911      	ldrb	r1, [r2, #4]
   22c8e:	f001 0103 	and.w	r1, r1, #3
   22c92:	2903      	cmp	r1, #3
   22c94:	d016      	beq.n	22cc4 <ull_conn_llcp+0x14b0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   22c96:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   22c9a:	e73c      	b.n	22b16 <ull_conn_llcp+0x1302>
			conn->tx_data = conn->tx_data->next;
   22c9c:	6813      	ldr	r3, [r2, #0]
   22c9e:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   22ca2:	2900      	cmp	r1, #0
   22ca4:	f47f af37 	bne.w	22b16 <ull_conn_llcp+0x1302>
			tx->next = conn->tx_head->next;
   22ca8:	6811      	ldr	r1, [r2, #0]
   22caa:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   22cac:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   22cae:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   22cb2:	e737      	b.n	22b24 <ull_conn_llcp+0x1310>
	    ((pdu_data_tx->llctrl.opcode !=
   22cb4:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   22cb6:	2a03      	cmp	r2, #3
   22cb8:	f43f adf6 	beq.w	228a8 <ull_conn_llcp+0x1094>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   22cbc:	2a0a      	cmp	r2, #10
   22cbe:	f47f af4b 	bne.w	22b58 <ull_conn_llcp+0x1344>
   22cc2:	e5f1      	b.n	228a8 <ull_conn_llcp+0x1094>
	    ((pdu_data_tx->llctrl.opcode !=
   22cc4:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   22cc6:	2903      	cmp	r1, #3
   22cc8:	d0ee      	beq.n	22ca8 <ull_conn_llcp+0x1494>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   22cca:	290a      	cmp	r1, #10
   22ccc:	d1e3      	bne.n	22c96 <ull_conn_llcp+0x1482>
   22cce:	e7eb      	b.n	22ca8 <ull_conn_llcp+0x1494>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   22cd0:	7919      	ldrb	r1, [r3, #4]
   22cd2:	f001 0103 	and.w	r1, r1, #3
   22cd6:	2903      	cmp	r1, #3
   22cd8:	d00c      	beq.n	22cf4 <ull_conn_llcp+0x14e0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   22cda:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   22cde:	f7ff ba7c 	b.w	221da <ull_conn_llcp+0x9c6>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
   22ce2:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = PHY_CODED;
   22ce6:	bf18      	it	ne
   22ce8:	2204      	movne	r2, #4
			conn->llcp_phy.tx = 0U;
   22cea:	f362 0384 	bfi	r3, r2, #2, #3
   22cee:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   22cf2:	e611      	b.n	22918 <ull_conn_llcp+0x1104>
	    ((pdu_data_tx->llctrl.opcode !=
   22cf4:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   22cf6:	2903      	cmp	r1, #3
   22cf8:	f43f af73 	beq.w	22be2 <ull_conn_llcp+0x13ce>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   22cfc:	290a      	cmp	r1, #10
   22cfe:	d1ec      	bne.n	22cda <ull_conn_llcp+0x14c6>
   22d00:	e76f      	b.n	22be2 <ull_conn_llcp+0x13ce>
	    ((pdu_data_tx->llctrl.opcode !=
   22d02:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   22d04:	2a03      	cmp	r2, #3
   22d06:	f43f af42 	beq.w	22b8e <ull_conn_llcp+0x137a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   22d0a:	2a0a      	cmp	r2, #10
   22d0c:	f47f af60 	bne.w	22bd0 <ull_conn_llcp+0x13bc>
   22d10:	e73d      	b.n	22b8e <ull_conn_llcp+0x137a>
		LL_ASSERT(0);
   22d12:	4a02      	ldr	r2, [pc, #8]	; (22d1c <ull_conn_llcp+0x1508>)
   22d14:	4902      	ldr	r1, [pc, #8]	; (22d20 <ull_conn_llcp+0x150c>)
   22d16:	f241 0301 	movw	r3, #4097	; 0x1001
   22d1a:	e435      	b.n	22588 <ull_conn_llcp+0xd74>
   22d1c:	00033640 	.word	0x00033640
   22d20:	0003305c 	.word	0x0003305c

00022d24 <ull_conn_tx_demux>:
{
   22d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   22d28:	4c24      	ldr	r4, [pc, #144]	; (22dbc <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   22d2a:	4f25      	ldr	r7, [pc, #148]	; (22dc0 <ull_conn_tx_demux+0x9c>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   22d2c:	7962      	ldrb	r2, [r4, #5]
{
   22d2e:	4605      	mov	r5, r0
	return (void *)(fifo + first * size);
   22d30:	f104 0608 	add.w	r6, r4, #8
   22d34:	e021      	b.n	22d7a <ull_conn_tx_demux+0x56>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   22d36:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   22d3a:	4638      	mov	r0, r7
   22d3c:	f7f7 fa3e 	bl	1a1bc <mem_get>
	if (conn->lll.handle != handle) {
   22d40:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   22d42:	bb2a      	cbnz	r2, 22d90 <ull_conn_tx_demux+0x6c>
			struct node_tx *tx = lll_tx->node;
   22d44:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   22d48:	f8d0 11d0 	ldr.w	r1, [r0, #464]	; 0x1d0
			tx->next = NULL;
   22d4c:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   22d4e:	b351      	cbz	r1, 22da6 <ull_conn_tx_demux+0x82>
			if (conn->tx_data_last) {
   22d50:	f8d0 21d4 	ldr.w	r2, [r0, #468]	; 0x1d4
   22d54:	b102      	cbz	r2, 22d58 <ull_conn_tx_demux+0x34>
				conn->tx_data_last->next = tx;
   22d56:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   22d58:	f8c0 31d4 	str.w	r3, [r0, #468]	; 0x1d4
		MFIFO_DEQUEUE(conn_tx);
   22d5c:	7962      	ldrb	r2, [r4, #5]
	uint8_t _first = *first; /* Copy read-index */
   22d5e:	7923      	ldrb	r3, [r4, #4]
   22d60:	78a1      	ldrb	r1, [r4, #2]
	if (_first == last) {
   22d62:	429a      	cmp	r2, r3
   22d64:	d005      	beq.n	22d72 <ull_conn_tx_demux+0x4e>
	_first += 1U;
   22d66:	3301      	adds	r3, #1
   22d68:	b2db      	uxtb	r3, r3
		_first = 0U;
   22d6a:	4299      	cmp	r1, r3
   22d6c:	bf08      	it	eq
   22d6e:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   22d70:	7123      	strb	r3, [r4, #4]
	} while (--count);
   22d72:	3d01      	subs	r5, #1
   22d74:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   22d78:	d01e      	beq.n	22db8 <ull_conn_tx_demux+0x94>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   22d7a:	7923      	ldrb	r3, [r4, #4]
   22d7c:	7821      	ldrb	r1, [r4, #0]
	if (first == last) {
   22d7e:	4293      	cmp	r3, r2
   22d80:	d01a      	beq.n	22db8 <ull_conn_tx_demux+0x94>
	return (void *)(fifo + first * size);
   22d82:	fb13 f301 	smulbb	r3, r3, r1
   22d86:	eb06 0803 	add.w	r8, r6, r3
	if (handle >= CONFIG_BT_MAX_CONN) {
   22d8a:	5af2      	ldrh	r2, [r6, r3]
   22d8c:	2a00      	cmp	r2, #0
   22d8e:	d0d2      	beq.n	22d36 <ull_conn_tx_demux+0x12>
			struct node_tx *tx = lll_tx->node;
   22d90:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   22d94:	790b      	ldrb	r3, [r1, #4]
   22d96:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   22d9a:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
   22d9e:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   22da0:	f7fa fe34 	bl	1da0c <ll_tx_ack_put>
   22da4:	e7da      	b.n	22d5c <ull_conn_tx_demux+0x38>
				if (!conn->tx_head) {
   22da6:	f8d0 21c4 	ldr.w	r2, [r0, #452]	; 0x1c4
				conn->tx_data = tx;
   22daa:	f8c0 31d0 	str.w	r3, [r0, #464]	; 0x1d0
				if (!conn->tx_head) {
   22dae:	2a00      	cmp	r2, #0
   22db0:	d1ce      	bne.n	22d50 <ull_conn_tx_demux+0x2c>
					conn->tx_head = tx;
   22db2:	f8c0 31c4 	str.w	r3, [r0, #452]	; 0x1c4
			if (conn->tx_data_last) {
   22db6:	e7cf      	b.n	22d58 <ull_conn_tx_demux+0x34>
}
   22db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22dbc:	20000704 	.word	0x20000704
   22dc0:	20001948 	.word	0x20001948

00022dc4 <conn_cleanup_finalize>:
{
   22dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = conn->llcp_rx;
   22dc8:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
{
   22dcc:	b082      	sub	sp, #8
   22dce:	4606      	mov	r6, r0
	while (rx) {
   22dd0:	b144      	cbz	r4, 22de4 <conn_cleanup_finalize+0x20>
		hdr->type = NODE_RX_TYPE_RELEASE;
   22dd2:	2501      	movs	r5, #1
		rx = hdr->link->mem;
   22dd4:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   22dd6:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   22dd8:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   22dda:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   22ddc:	f7fa fdd0 	bl	1d980 <ll_rx_put>
	while (rx) {
   22de0:	2c00      	cmp	r4, #0
   22de2:	d1f7      	bne.n	22dd4 <conn_cleanup_finalize+0x10>
	while (conn->tx_head) {
   22de4:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   22de8:	b381      	cbz	r1, 22e4c <conn_cleanup_finalize+0x88>
		link = mem_acquire(&mem_link_tx.free);
   22dea:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 22e90 <conn_cleanup_finalize+0xcc>
		LL_ASSERT(link);
   22dee:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 22e94 <conn_cleanup_finalize+0xd0>
   22df2:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 22e98 <conn_cleanup_finalize+0xd4>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   22df6:	f106 0768 	add.w	r7, r6, #104	; 0x68
   22dfa:	e007      	b.n	22e0c <conn_cleanup_finalize+0x48>
   22dfc:	4629      	mov	r1, r5
   22dfe:	463a      	mov	r2, r7
   22e00:	4620      	mov	r0, r4
   22e02:	f7f7 fa0d 	bl	1a220 <memq_enqueue>
	while (conn->tx_head) {
   22e06:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   22e0a:	b1f9      	cbz	r1, 22e4c <conn_cleanup_finalize+0x88>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   22e0c:	4630      	mov	r0, r6
   22e0e:	f7fc fa5d 	bl	1f2cc <tx_ull_dequeue>
   22e12:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   22e14:	4640      	mov	r0, r8
   22e16:	f7f7 f99f 	bl	1a158 <mem_acquire>
		LL_ASSERT(link);
   22e1a:	4604      	mov	r4, r0
   22e1c:	2800      	cmp	r0, #0
   22e1e:	d1ed      	bne.n	22dfc <conn_cleanup_finalize+0x38>
   22e20:	481e      	ldr	r0, [pc, #120]	; (22e9c <conn_cleanup_finalize+0xd8>)
   22e22:	f640 137e 	movw	r3, #2430	; 0x97e
   22e26:	4652      	mov	r2, sl
   22e28:	4649      	mov	r1, r9
   22e2a:	f009 f8cc 	bl	2bfc6 <assert_print>
   22e2e:	4040      	eors	r0, r0
   22e30:	f380 8811 	msr	BASEPRI, r0
   22e34:	f04f 0003 	mov.w	r0, #3
   22e38:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   22e3a:	4629      	mov	r1, r5
   22e3c:	463a      	mov	r2, r7
   22e3e:	4620      	mov	r0, r4
   22e40:	f7f7 f9ee 	bl	1a220 <memq_enqueue>
	while (conn->tx_head) {
   22e44:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   22e48:	2900      	cmp	r1, #0
   22e4a:	d1df      	bne.n	22e0c <conn_cleanup_finalize+0x48>
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   22e4c:	8d32      	ldrh	r2, [r6, #40]	; 0x28
   22e4e:	4b14      	ldr	r3, [pc, #80]	; (22ea0 <conn_cleanup_finalize+0xdc>)
   22e50:	9600      	str	r6, [sp, #0]
   22e52:	3203      	adds	r2, #3
   22e54:	b2d2      	uxtb	r2, r2
   22e56:	2101      	movs	r1, #1
   22e58:	2000      	movs	r0, #0
   22e5a:	f7f8 fc2d 	bl	1b6b8 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   22e5e:	f030 0302 	bics.w	r3, r0, #2
   22e62:	d00c      	beq.n	22e7e <conn_cleanup_finalize+0xba>
   22e64:	4a0b      	ldr	r2, [pc, #44]	; (22e94 <conn_cleanup_finalize+0xd0>)
   22e66:	490f      	ldr	r1, [pc, #60]	; (22ea4 <conn_cleanup_finalize+0xe0>)
   22e68:	480c      	ldr	r0, [pc, #48]	; (22e9c <conn_cleanup_finalize+0xd8>)
   22e6a:	f640 1343 	movw	r3, #2371	; 0x943
   22e6e:	f009 f8aa 	bl	2bfc6 <assert_print>
   22e72:	4040      	eors	r0, r0
   22e74:	f380 8811 	msr	BASEPRI, r0
   22e78:	f04f 0003 	mov.w	r0, #3
   22e7c:	df02      	svc	2
	lll->handle = LLL_HANDLE_INVALID;
   22e7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   22e82:	20ff      	movs	r0, #255	; 0xff
	lll->handle = LLL_HANDLE_INVALID;
   22e84:	8533      	strh	r3, [r6, #40]	; 0x28
}
   22e86:	b002      	add	sp, #8
   22e88:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull_conn_tx_demux(UINT8_MAX);
   22e8c:	f7ff bf4a 	b.w	22d24 <ull_conn_tx_demux>
   22e90:	200029fc 	.word	0x200029fc
   22e94:	00033640 	.word	0x00033640
   22e98:	00033698 	.word	0x00033698
   22e9c:	00032fc4 	.word	0x00032fc4
   22ea0:	0001f079 	.word	0x0001f079
   22ea4:	00033720 	.word	0x00033720

00022ea8 <ull_conn_done>:
{
   22ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
   22eac:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   22eae:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   22eb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   22eb4:	429a      	cmp	r2, r3
{
   22eb6:	b08a      	sub	sp, #40	; 0x28
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   22eb8:	f000 808f 	beq.w	22fda <ull_conn_done+0x132>
	switch (done->extra.mic_state) {
   22ebc:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   22ec0:	2b01      	cmp	r3, #1
   22ec2:	4605      	mov	r5, r0
   22ec4:	f000 80e5 	beq.w	23092 <ull_conn_done+0x1ea>
   22ec8:	2b02      	cmp	r3, #2
   22eca:	f000 80cc 	beq.w	23066 <ull_conn_done+0x1be>
   22ece:	2b00      	cmp	r3, #0
   22ed0:	f000 80af 	beq.w	23032 <ull_conn_done+0x18a>
	reason_final = conn->llcp_terminate.reason_final;
   22ed4:	f894 6143 	ldrb.w	r6, [r4, #323]	; 0x143
	if (reason_final && (
   22ed8:	2e00      	cmp	r6, #0
   22eda:	f040 80c7 	bne.w	2306c <ull_conn_done+0x1c4>
	latency_event = lll->latency_event;
   22ede:	f8b4 8030 	ldrh.w	r8, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
   22ee2:	8cab      	ldrh	r3, [r5, #36]	; 0x24
	elapsed_event = latency_event + 1;
   22ee4:	f108 0701 	add.w	r7, r8, #1
	ticks_drift_minus = 0U;
   22ee8:	e9cd 6608 	strd	r6, r6, [sp, #32]
	elapsed_event = latency_event + 1;
   22eec:	b2bf      	uxth	r7, r7
	if (done->extra.trx_cnt) {
   22eee:	2b00      	cmp	r3, #0
   22ef0:	d076      	beq.n	22fe0 <ull_conn_done+0x138>
		} else if (lll->role) {
   22ef2:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   22ef6:	2b00      	cmp	r3, #0
   22ef8:	f2c0 8111 	blt.w	2311e <ull_conn_done+0x276>
	if (done->extra.crc_valid) {
   22efc:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
		conn->connect_expire = 0U;
   22f00:	2200      	movs	r2, #0
	if (done->extra.crc_valid) {
   22f02:	07db      	lsls	r3, r3, #31
		conn->connect_expire = 0U;
   22f04:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	if (done->extra.crc_valid) {
   22f08:	f140 80c9 	bpl.w	2309e <ull_conn_done+0x1f6>
		conn->supervision_expire = 0U;
   22f0c:	2300      	movs	r3, #0
   22f0e:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
	if (conn->procedure_expire != 0U) {
   22f12:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   22f16:	b12b      	cbz	r3, 22f24 <ull_conn_done+0x7c>
		if (conn->procedure_expire > elapsed_event) {
   22f18:	42bb      	cmp	r3, r7
   22f1a:	f240 8127 	bls.w	2316c <ull_conn_done+0x2c4>
			conn->procedure_expire -= elapsed_event;
   22f1e:	1bdb      	subs	r3, r3, r7
   22f20:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->apto_expire != 0U) {
   22f24:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   22f28:	b12b      	cbz	r3, 22f36 <ull_conn_done+0x8e>
		if (conn->apto_expire > elapsed_event) {
   22f2a:	42bb      	cmp	r3, r7
   22f2c:	f240 80e3 	bls.w	230f6 <ull_conn_done+0x24e>
			conn->apto_expire -= elapsed_event;
   22f30:	1bdb      	subs	r3, r3, r7
   22f32:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	if (conn->appto_expire != 0U) {
   22f36:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
			    (conn->llcp_req == conn->llcp_ack)) {
   22f3a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   22f3e:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
	if (conn->appto_expire != 0U) {
   22f42:	b15a      	cbz	r2, 22f5c <ull_conn_done+0xb4>
		if (conn->appto_expire > elapsed_event) {
   22f44:	42ba      	cmp	r2, r7
   22f46:	f200 80ba 	bhi.w	230be <ull_conn_done+0x216>
			if ((conn->procedure_expire == 0U) &&
   22f4a:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
			conn->appto_expire = 0U;
   22f4e:	2000      	movs	r0, #0
   22f50:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
			if ((conn->procedure_expire == 0U) &&
   22f54:	b912      	cbnz	r2, 22f5c <ull_conn_done+0xb4>
   22f56:	4299      	cmp	r1, r3
   22f58:	f000 8124 	beq.w	231a4 <ull_conn_done+0x2fc>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   22f5c:	1a5b      	subs	r3, r3, r1
   22f5e:	f003 0303 	and.w	r3, r3, #3
   22f62:	2b02      	cmp	r3, #2
   22f64:	f000 80b4 	beq.w	230d0 <ull_conn_done+0x228>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   22f68:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   22f6c:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   22f70:	429a      	cmp	r2, r3
   22f72:	f000 80d2 	beq.w	2311a <ull_conn_done+0x272>
		lll->latency_event = 0U;
   22f76:	2200      	movs	r2, #0
   22f78:	8622      	strh	r2, [r4, #48]	; 0x30
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   22f7a:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
	if ((force) || (latency_event != lll->latency_event)) {
   22f7e:	b916      	cbnz	r6, 22f86 <ull_conn_done+0xde>
   22f80:	4590      	cmp	r8, r2
   22f82:	f000 80b2 	beq.w	230ea <ull_conn_done+0x242>
		lazy = lll->latency_event + 1U;
   22f86:	3201      	adds	r2, #1
   22f88:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   22f8a:	b913      	cbnz	r3, 22f92 <ull_conn_done+0xea>
   22f8c:	2d00      	cmp	r5, #0
   22f8e:	f000 808f 	beq.w	230b0 <ull_conn_done+0x208>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   22f92:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		struct ll_conn *conn = lll->hdr.parent;
   22f94:	69e4      	ldr	r4, [r4, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   22f96:	9500      	str	r5, [sp, #0]
   22f98:	2000      	movs	r0, #0
   22f9a:	4d99      	ldr	r5, [pc, #612]	; (23200 <ull_conn_done+0x358>)
   22f9c:	9103      	str	r1, [sp, #12]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   22f9e:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   22fa0:	e9cd 0001 	strd	r0, r0, [sp, #4]
   22fa4:	9604      	str	r6, [sp, #16]
   22fa6:	9406      	str	r4, [sp, #24]
   22fa8:	b2d2      	uxtb	r2, r2
   22faa:	2101      	movs	r1, #1
   22fac:	9505      	str	r5, [sp, #20]
   22fae:	f7f8 fb6b 	bl	1b688 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   22fb2:	f030 0302 	bics.w	r3, r0, #2
   22fb6:	d010      	beq.n	22fda <ull_conn_done+0x132>
   22fb8:	f7fa fdc0 	bl	1db3c <ull_disable_mark_get>
   22fbc:	4284      	cmp	r4, r0
   22fbe:	d00c      	beq.n	22fda <ull_conn_done+0x132>
   22fc0:	4a90      	ldr	r2, [pc, #576]	; (23204 <ull_conn_done+0x35c>)
   22fc2:	4991      	ldr	r1, [pc, #580]	; (23208 <ull_conn_done+0x360>)
   22fc4:	4891      	ldr	r0, [pc, #580]	; (2320c <ull_conn_done+0x364>)
   22fc6:	f240 63cc 	movw	r3, #1740	; 0x6cc
   22fca:	f008 fffc 	bl	2bfc6 <assert_print>
   22fce:	4040      	eors	r0, r0
   22fd0:	f380 8811 	msr	BASEPRI, r0
   22fd4:	f04f 0003 	mov.w	r0, #3
   22fd8:	df02      	svc	2
}
   22fda:	b00a      	add	sp, #40	; 0x28
   22fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (done->extra.crc_valid) {
   22fe0:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   22fe4:	f013 0301 	ands.w	r3, r3, #1
   22fe8:	d190      	bne.n	22f0c <ull_conn_done+0x64>
	else if (conn->connect_expire) {
   22fea:	f8b4 10c0 	ldrh.w	r1, [r4, #192]	; 0xc0
   22fee:	2900      	cmp	r1, #0
   22ff0:	d055      	beq.n	2309e <ull_conn_done+0x1f6>
		if (conn->connect_expire > elapsed_event) {
   22ff2:	42b9      	cmp	r1, r7
   22ff4:	f240 80dd 	bls.w	231b2 <ull_conn_done+0x30a>
			conn->connect_expire -= elapsed_event;
   22ff8:	1bc9      	subs	r1, r1, r7
	if (conn->supervision_expire) {
   22ffa:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
			conn->connect_expire -= elapsed_event;
   22ffe:	f8a4 10c0 	strh.w	r1, [r4, #192]	; 0xc0
	if (conn->supervision_expire) {
   23002:	2b00      	cmp	r3, #0
   23004:	d085      	beq.n	22f12 <ull_conn_done+0x6a>
		if (conn->supervision_expire > elapsed_event) {
   23006:	429f      	cmp	r7, r3
   23008:	f080 809b 	bcs.w	23142 <ull_conn_done+0x29a>
			conn->supervision_expire -= elapsed_event;
   2300c:	1bdb      	subs	r3, r3, r7
   2300e:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   23010:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   23012:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   23014:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
			lll->latency_event = 0U;
   23018:	8622      	strh	r2, [r4, #48]	; 0x30
			if (conn->supervision_expire <= 6U) {
   2301a:	d908      	bls.n	2302e <ull_conn_done+0x186>
			else if (lll->role) {
   2301c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   23020:	4293      	cmp	r3, r2
   23022:	f6bf af76 	bge.w	22f12 <ull_conn_done+0x6a>
				if (latency_event) {
   23026:	f1b8 0f00 	cmp.w	r8, #0
   2302a:	f000 80ad 	beq.w	23188 <ull_conn_done+0x2e0>
				force = 1U;
   2302e:	2601      	movs	r6, #1
   23030:	e76f      	b.n	22f12 <ull_conn_done+0x6a>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   23032:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   23036:	0718      	lsls	r0, r3, #28
   23038:	d551      	bpl.n	230de <ull_conn_done+0x236>
					    (lll->latency + 6)) ?
   2303a:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
			appto_reload_new = (conn->apto_reload >
   2303c:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
					    (lll->latency + 6)) ?
   23040:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
   23042:	4299      	cmp	r1, r3
   23044:	bfc4      	itt	gt
   23046:	1f8b      	subgt	r3, r1, #6
   23048:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
   2304a:	f8b4 00ca 	ldrh.w	r0, [r4, #202]	; 0xca
			appto_reload_new = (conn->apto_reload >
   2304e:	bfcc      	ite	gt
   23050:	b29b      	uxthgt	r3, r3
   23052:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
   23054:	4298      	cmp	r0, r3
   23056:	d06e      	beq.n	23136 <ull_conn_done+0x28e>
				conn->appto_reload = appto_reload_new;
   23058:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
				conn->appto_expire = conn->appto_reload;
   2305c:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
				conn->apto_expire = conn->apto_reload;
   23060:	f8a4 10d0 	strh.w	r1, [r4, #208]	; 0xd0
   23064:	e736      	b.n	22ed4 <ull_conn_done+0x2c>
		conn->llcp_terminate.reason_final =
   23066:	263d      	movs	r6, #61	; 0x3d
   23068:	f884 6143 	strb.w	r6, [r4, #323]	; 0x143
	if (conn == conn_upd_curr) {
   2306c:	4b68      	ldr	r3, [pc, #416]	; (23210 <ull_conn_done+0x368>)
	rx->hdr.handle = conn->lll.handle;
   2306e:	f8a4 214a 	strh.w	r2, [r4, #330]	; 0x14a
	if (conn == conn_upd_curr) {
   23072:	6819      	ldr	r1, [r3, #0]
	*((uint8_t *)rx->pdu) = reason;
   23074:	f884 6160 	strb.w	r6, [r4, #352]	; 0x160
	if (conn == conn_upd_curr) {
   23078:	428c      	cmp	r4, r1
		conn_upd_curr = NULL;
   2307a:	bf04      	itt	eq
   2307c:	2100      	moveq	r1, #0
   2307e:	6019      	streq	r1, [r3, #0]
	conn_cleanup_finalize(conn);
   23080:	4620      	mov	r0, r4
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   23082:	2318      	movs	r3, #24
   23084:	f884 3148 	strb.w	r3, [r4, #328]	; 0x148
}
   23088:	b00a      	add	sp, #40	; 0x28
   2308a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	conn_cleanup_finalize(conn);
   2308e:	f7ff be99 	b.w	22dc4 <conn_cleanup_finalize>
		conn->appto_expire = conn->apto_expire = 0U;
   23092:	2300      	movs	r3, #0
   23094:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   23098:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		break;
   2309c:	e71a      	b.n	22ed4 <ull_conn_done+0x2c>
		if (!conn->supervision_expire) {
   2309e:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   230a2:	2b00      	cmp	r3, #0
   230a4:	d1af      	bne.n	23006 <ull_conn_done+0x15e>
			conn->supervision_expire = conn->supervision_reload;
   230a6:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
   230aa:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
   230ae:	e7a8      	b.n	23002 <ull_conn_done+0x15a>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   230b0:	2900      	cmp	r1, #0
   230b2:	f47f af6e 	bne.w	22f92 <ull_conn_done+0xea>
   230b6:	2e00      	cmp	r6, #0
   230b8:	f47f af6b 	bne.w	22f92 <ull_conn_done+0xea>
   230bc:	e78d      	b.n	22fda <ull_conn_done+0x132>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   230be:	1a5b      	subs	r3, r3, r1
   230c0:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
   230c4:	1bd2      	subs	r2, r2, r7
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   230c6:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
   230c8:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   230cc:	f47f af4c 	bne.w	22f68 <ull_conn_done+0xc0>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   230d0:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   230d4:	3b01      	subs	r3, #1
   230d6:	2b01      	cmp	r3, #1
   230d8:	f63f af46 	bhi.w	22f68 <ull_conn_done+0xc0>
   230dc:	e74b      	b.n	22f76 <ull_conn_done+0xce>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   230de:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   230e2:	07d9      	lsls	r1, r3, #31
   230e4:	f57f aef6 	bpl.w	22ed4 <ull_conn_done+0x2c>
   230e8:	e7a7      	b.n	2303a <ull_conn_done+0x192>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   230ea:	b913      	cbnz	r3, 230f2 <ull_conn_done+0x24a>
   230ec:	2d00      	cmp	r5, #0
   230ee:	f43f af74 	beq.w	22fda <ull_conn_done+0x132>
	lazy = 0U;
   230f2:	4631      	mov	r1, r6
   230f4:	e74d      	b.n	22f92 <ull_conn_done+0xea>
			rx = ll_pdu_rx_alloc();
   230f6:	f7fa fc73 	bl	1d9e0 <ll_pdu_rx_alloc>
			if (rx) {
   230fa:	4601      	mov	r1, r0
   230fc:	2800      	cmp	r0, #0
   230fe:	d03f      	beq.n	23180 <ull_conn_done+0x2d8>
				rx->handle = lll->handle;
   23100:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				conn->apto_expire = 0U;
   23102:	2200      	movs	r2, #0
   23104:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
				rx->handle = lll->handle;
   23108:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   2310a:	231b      	movs	r3, #27
   2310c:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   2310e:	6800      	ldr	r0, [r0, #0]
   23110:	f7fa fc36 	bl	1d980 <ll_rx_put>
				ll_rx_sched();
   23114:	f7fa fc3e 	bl	1d994 <ll_rx_sched>
   23118:	e70d      	b.n	22f36 <ull_conn_done+0x8e>
	if ((force) || (latency_event != lll->latency_event)) {
   2311a:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   2311c:	e72d      	b.n	22f7a <ull_conn_done+0xd2>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   2311e:	aa08      	add	r2, sp, #32
   23120:	a909      	add	r1, sp, #36	; 0x24
   23122:	4628      	mov	r0, r5
   23124:	f7e9 fd40 	bl	cba8 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   23128:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   2312c:	2b00      	cmp	r3, #0
   2312e:	d051      	beq.n	231d4 <ull_conn_done+0x32c>
				lll->latency_event = 0;
   23130:	2300      	movs	r3, #0
   23132:	8623      	strh	r3, [r4, #48]	; 0x30
   23134:	e6e2      	b.n	22efc <ull_conn_done+0x54>
			if (conn->apto_expire == 0U) {
   23136:	f8b4 00d0 	ldrh.w	r0, [r4, #208]	; 0xd0
   2313a:	2800      	cmp	r0, #0
   2313c:	f47f aeca 	bne.w	22ed4 <ull_conn_done+0x2c>
   23140:	e78c      	b.n	2305c <ull_conn_done+0x1b4>
	if (conn == conn_upd_curr) {
   23142:	4b33      	ldr	r3, [pc, #204]	; (23210 <ull_conn_done+0x368>)
	rx->hdr.handle = conn->lll.handle;
   23144:	8d21      	ldrh	r1, [r4, #40]	; 0x28
	if (conn == conn_upd_curr) {
   23146:	681a      	ldr	r2, [r3, #0]
   23148:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   2314a:	bf04      	itt	eq
   2314c:	2200      	moveq	r2, #0
   2314e:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   23150:	2218      	movs	r2, #24
	*((uint8_t *)rx->pdu) = reason;
   23152:	2308      	movs	r3, #8
	rx->hdr.handle = conn->lll.handle;
   23154:	f8a4 114a 	strh.w	r1, [r4, #330]	; 0x14a
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   23158:	f884 2148 	strb.w	r2, [r4, #328]	; 0x148
	*((uint8_t *)rx->pdu) = reason;
   2315c:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
	conn_cleanup_finalize(conn);
   23160:	4620      	mov	r0, r4
   23162:	f7ff fe2f 	bl	22dc4 <conn_cleanup_finalize>
}
   23166:	b00a      	add	sp, #40	; 0x28
   23168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn == conn_upd_curr) {
   2316c:	4b28      	ldr	r3, [pc, #160]	; (23210 <ull_conn_done+0x368>)
	rx->hdr.handle = conn->lll.handle;
   2316e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
	if (conn == conn_upd_curr) {
   23170:	681a      	ldr	r2, [r3, #0]
   23172:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   23174:	bf04      	itt	eq
   23176:	2200      	moveq	r2, #0
   23178:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   2317a:	2218      	movs	r2, #24
	*((uint8_t *)rx->pdu) = reason;
   2317c:	2322      	movs	r3, #34	; 0x22
   2317e:	e7e9      	b.n	23154 <ull_conn_done+0x2ac>
				conn->apto_expire = 1U;
   23180:	2301      	movs	r3, #1
   23182:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   23186:	e6d6      	b.n	22f36 <ull_conn_done+0x8e>
					force = conn->periph.force & 0x01;
   23188:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
					conn->periph.force >>= 1U;
   2318c:	085a      	lsrs	r2, r3, #1
					if (force) {
   2318e:	f013 0301 	ands.w	r3, r3, #1
						conn->periph.force |= BIT(31);
   23192:	bf17      	itett	ne
   23194:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->periph.force >>= 1U;
   23198:	f8c4 20dc 	streq.w	r2, [r4, #220]	; 0xdc
						conn->periph.force |= BIT(31);
   2319c:	f8c4 20dc 	strne.w	r2, [r4, #220]	; 0xdc
					force = conn->periph.force & 0x01;
   231a0:	461e      	movne	r6, r3
   231a2:	e6b6      	b.n	22f12 <ull_conn_done+0x6a>
				conn->llcp_type = LLCP_PING;
   231a4:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   231a6:	1e8b      	subs	r3, r1, #2
				conn->llcp_type = LLCP_PING;
   231a8:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
				conn->llcp_ack -= 2U;
   231ac:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   231b0:	e6da      	b.n	22f68 <ull_conn_done+0xc0>
	if (conn == conn_upd_curr) {
   231b2:	4917      	ldr	r1, [pc, #92]	; (23210 <ull_conn_done+0x368>)
	rx->hdr.handle = conn->lll.handle;
   231b4:	f8a4 214a 	strh.w	r2, [r4, #330]	; 0x14a
	if (conn == conn_upd_curr) {
   231b8:	6808      	ldr	r0, [r1, #0]
   231ba:	4284      	cmp	r4, r0
		conn_upd_curr = NULL;
   231bc:	bf08      	it	eq
   231be:	600b      	streq	r3, [r1, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   231c0:	2118      	movs	r1, #24
	*((uint8_t *)rx->pdu) = reason;
   231c2:	233e      	movs	r3, #62	; 0x3e
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   231c4:	f884 1148 	strb.w	r1, [r4, #328]	; 0x148
	*((uint8_t *)rx->pdu) = reason;
   231c8:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
	conn_cleanup_finalize(conn);
   231cc:	4620      	mov	r0, r4
   231ce:	f7ff fdf9 	bl	22dc4 <conn_cleanup_finalize>
}
   231d2:	e702      	b.n	22fda <ull_conn_done+0x132>
				ull_conn_tx_demux(UINT8_MAX);
   231d4:	20ff      	movs	r0, #255	; 0xff
   231d6:	f7ff fda5 	bl	22d24 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   231da:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   231de:	2b00      	cmp	r3, #0
   231e0:	d1a6      	bne.n	23130 <ull_conn_done+0x288>
   231e2:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
   231e6:	4632      	mov	r2, r6
   231e8:	f7f7 f824 	bl	1a234 <memq_peek>
   231ec:	2800      	cmp	r0, #0
   231ee:	d19f      	bne.n	23130 <ull_conn_done+0x288>
			} else if (lll->periph.latency_enabled) {
   231f0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   231f4:	075a      	lsls	r2, r3, #29
				lll->latency_event = lll->latency;
   231f6:	bf44      	itt	mi
   231f8:	8da3      	ldrhmi	r3, [r4, #44]	; 0x2c
   231fa:	8623      	strhmi	r3, [r4, #48]	; 0x30
   231fc:	e67e      	b.n	22efc <ull_conn_done+0x54>
   231fe:	bf00      	nop
   23200:	0001f28d 	.word	0x0001f28d
   23204:	00033640 	.word	0x00033640
   23208:	000337b4 	.word	0x000337b4
   2320c:	00032fc4 	.word	0x00032fc4
   23210:	200028b4 	.word	0x200028b4

00023214 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   23214:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   23218:	2b00      	cmp	r3, #0
   2321a:	f000 80be 	beq.w	2339a <ull_conn_tx_lll_enqueue+0x186>
   2321e:	3901      	subs	r1, #1
{
   23220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   23224:	f8df 8174 	ldr.w	r8, [pc, #372]	; 2339c <ull_conn_tx_lll_enqueue+0x188>
		LL_ASSERT(link);
   23228:	f8df a174 	ldr.w	sl, [pc, #372]	; 233a0 <ull_conn_tx_lll_enqueue+0x18c>
   2322c:	f8df 9174 	ldr.w	r9, [pc, #372]	; 233a4 <ull_conn_tx_lll_enqueue+0x190>
   23230:	4604      	mov	r4, r0
   23232:	b2cd      	uxtb	r5, r1
   23234:	e010      	b.n	23258 <ull_conn_tx_lll_enqueue+0x44>
		link = mem_acquire(&mem_link_tx.free);
   23236:	4640      	mov	r0, r8
   23238:	f7f6 ff8e 	bl	1a158 <mem_acquire>
		LL_ASSERT(link);
   2323c:	4607      	mov	r7, r0
   2323e:	b3b0      	cbz	r0, 232ae <ull_conn_tx_lll_enqueue+0x9a>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   23240:	f104 0268 	add.w	r2, r4, #104	; 0x68
   23244:	4631      	mov	r1, r6
   23246:	4638      	mov	r0, r7
   23248:	f7f6 ffea 	bl	1a220 <memq_enqueue>
	while (conn->tx_head &&
   2324c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   23250:	3d01      	subs	r5, #1
   23252:	b2ed      	uxtb	r5, r5
   23254:	2b00      	cmp	r3, #0
   23256:	d05c      	beq.n	23312 <ull_conn_tx_lll_enqueue+0xfe>
		 !conn->llcp_phy.pause_tx &&
   23258:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
	while (conn->tx_head &&
   2325c:	07d1      	lsls	r1, r2, #31
   2325e:	d403      	bmi.n	23268 <ull_conn_tx_lll_enqueue+0x54>
		 !conn->llcp_enc.pause_tx &&
   23260:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
		 !conn->llcp_phy.pause_tx &&
   23264:	0792      	lsls	r2, r2, #30
   23266:	d53a      	bpl.n	232de <ull_conn_tx_lll_enqueue+0xca>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   23268:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   2326c:	4293      	cmp	r3, r2
   2326e:	d150      	bne.n	23312 <ull_conn_tx_lll_enqueue+0xfe>
   23270:	2dff      	cmp	r5, #255	; 0xff
   23272:	d04e      	beq.n	23312 <ull_conn_tx_lll_enqueue+0xfe>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   23274:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
   23278:	4620      	mov	r0, r4
   2327a:	f7fc f827 	bl	1f2cc <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   2327e:	7903      	ldrb	r3, [r0, #4]
   23280:	f003 0303 	and.w	r3, r3, #3
   23284:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   23286:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   23288:	d1d5      	bne.n	23236 <ull_conn_tx_lll_enqueue+0x22>
			ctrl_tx_pre_ack(conn, pdu_tx);
   2328a:	79c3      	ldrb	r3, [r0, #7]
	switch (pdu_tx->llctrl.opcode) {
   2328c:	2b0b      	cmp	r3, #11
   2328e:	d042      	beq.n	23316 <ull_conn_tx_lll_enqueue+0x102>
   23290:	d81b      	bhi.n	232ca <ull_conn_tx_lll_enqueue+0xb6>
   23292:	2b04      	cmp	r3, #4
   23294:	d1cf      	bne.n	23236 <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   23296:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   2329a:	f043 0302 	orr.w	r3, r3, #2
   2329e:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
		link = mem_acquire(&mem_link_tx.free);
   232a2:	4640      	mov	r0, r8
   232a4:	f7f6 ff58 	bl	1a158 <mem_acquire>
		LL_ASSERT(link);
   232a8:	4607      	mov	r7, r0
   232aa:	2800      	cmp	r0, #0
   232ac:	d1c8      	bne.n	23240 <ull_conn_tx_lll_enqueue+0x2c>
   232ae:	483e      	ldr	r0, [pc, #248]	; (233a8 <ull_conn_tx_lll_enqueue+0x194>)
   232b0:	f240 7331 	movw	r3, #1841	; 0x731
   232b4:	4652      	mov	r2, sl
   232b6:	4649      	mov	r1, r9
   232b8:	f008 fe85 	bl	2bfc6 <assert_print>
   232bc:	4040      	eors	r0, r0
   232be:	f380 8811 	msr	BASEPRI, r0
   232c2:	f04f 0003 	mov.w	r0, #3
   232c6:	df02      	svc	2
   232c8:	e7ba      	b.n	23240 <ull_conn_tx_lll_enqueue+0x2c>
	switch (pdu_tx->llctrl.opcode) {
   232ca:	3b16      	subs	r3, #22
   232cc:	2b01      	cmp	r3, #1
   232ce:	d8b2      	bhi.n	23236 <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_phy.pause_tx = 1U;
   232d0:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   232d4:	f043 0301 	orr.w	r3, r3, #1
   232d8:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		break;
   232dc:	e7ab      	b.n	23236 <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   232de:	791a      	ldrb	r2, [r3, #4]
   232e0:	f002 0203 	and.w	r2, r2, #3
   232e4:	2a03      	cmp	r2, #3
   232e6:	d1c3      	bne.n	23270 <ull_conn_tx_lll_enqueue+0x5c>
	    ((pdu_data_tx->llctrl.opcode ==
   232e8:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   232ea:	2a03      	cmp	r2, #3
   232ec:	d001      	beq.n	232f2 <ull_conn_tx_lll_enqueue+0xde>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   232ee:	2a0a      	cmp	r2, #10
   232f0:	d1be      	bne.n	23270 <ull_conn_tx_lll_enqueue+0x5c>
		if (((conn->llcp_req != conn->llcp_ack) &&
   232f2:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   232f6:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   232fa:	428a      	cmp	r2, r1
   232fc:	d010      	beq.n	23320 <ull_conn_tx_lll_enqueue+0x10c>
   232fe:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   23302:	2a03      	cmp	r2, #3
   23304:	d0b4      	beq.n	23270 <ull_conn_tx_lll_enqueue+0x5c>
			if ((tx->next != NULL) &&
   23306:	681a      	ldr	r2, [r3, #0]
   23308:	b11a      	cbz	r2, 23312 <ull_conn_tx_lll_enqueue+0xfe>
   2330a:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   2330e:	428a      	cmp	r2, r1
   23310:	d032      	beq.n	23378 <ull_conn_tx_lll_enqueue+0x164>
}
   23312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!conn->lll.role) {
   23316:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   2331a:	2b00      	cmp	r3, #0
   2331c:	da8b      	bge.n	23236 <ull_conn_tx_lll_enqueue+0x22>
   2331e:	e7ba      	b.n	23296 <ull_conn_tx_lll_enqueue+0x82>
		    ((conn->llcp_req == conn->llcp_ack) &&
   23320:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
   23324:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
   23328:	4288      	cmp	r0, r1
   2332a:	d1ec      	bne.n	23306 <ull_conn_tx_lll_enqueue+0xf2>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   2332c:	f894 0139 	ldrb.w	r0, [r4, #313]	; 0x139
   23330:	f894 1138 	ldrb.w	r1, [r4, #312]	; 0x138
   23334:	4288      	cmp	r0, r1
   23336:	d1e6      	bne.n	23306 <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   23338:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
   2333c:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   23340:	4288      	cmp	r0, r1
   23342:	d1e0      	bne.n	23306 <ull_conn_tx_lll_enqueue+0xf2>
		       conn->llcp_conn_param.req) ||
   23344:	f894 01ad 	ldrb.w	r0, [r4, #429]	; 0x1ad
   23348:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
   2334c:	4288      	cmp	r0, r1
   2334e:	d1da      	bne.n	23306 <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   23350:	f894 01bd 	ldrb.w	r0, [r4, #445]	; 0x1bd
   23354:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   23358:	4288      	cmp	r0, r1
   2335a:	d1d4      	bne.n	23306 <ull_conn_tx_lll_enqueue+0xf2>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   2335c:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_ack -= 2U;
   23360:	3a02      	subs	r2, #2
   23362:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   23366:	2201      	movs	r2, #1
   23368:	f362 0301 	bfi	r3, r2, #0, #2
   2336c:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_type = LLCP_ENCRYPTION;
   23370:	2303      	movs	r3, #3
   23372:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
   23376:	e77b      	b.n	23270 <ull_conn_tx_lll_enqueue+0x5c>
				conn->tx_head = tx->next;
   23378:	f8c4 21c4 	str.w	r2, [r4, #452]	; 0x1c4
				tx->next = conn->tx_ctrl_last->next;
   2337c:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
				if (!conn->tx_data_last) {
   23380:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
				tx->next = conn->tx_ctrl_last->next;
   23384:	6810      	ldr	r0, [r2, #0]
   23386:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   23388:	6013      	str	r3, [r2, #0]
				conn->tx_data = tx;
   2338a:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
				if (!conn->tx_data_last) {
   2338e:	2900      	cmp	r1, #0
   23390:	f47f af6e 	bne.w	23270 <ull_conn_tx_lll_enqueue+0x5c>
					conn->tx_data_last = tx;
   23394:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
   23398:	e76a      	b.n	23270 <ull_conn_tx_lll_enqueue+0x5c>
   2339a:	4770      	bx	lr
   2339c:	200029fc 	.word	0x200029fc
   233a0:	00033640 	.word	0x00033640
   233a4:	00033698 	.word	0x00033698
   233a8:	00032fc4 	.word	0x00032fc4

000233ac <tx_demux>:
{
   233ac:	b510      	push	{r4, lr}
   233ae:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   233b0:	2001      	movs	r0, #1
   233b2:	f7ff fcb7 	bl	22d24 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   233b6:	4620      	mov	r0, r4
   233b8:	2101      	movs	r1, #1
}
   233ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   233be:	f7ff bf29 	b.w	23214 <ull_conn_tx_lll_enqueue>
   233c2:	bf00      	nop

000233c4 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   233c4:	4901      	ldr	r1, [pc, #4]	; (233cc <ull_conn_link_tx_release+0x8>)
   233c6:	f7f6 bee1 	b.w	1a18c <mem_release>
   233ca:	bf00      	nop
   233cc:	200029fc 	.word	0x200029fc

000233d0 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   233d0:	4b01      	ldr	r3, [pc, #4]	; (233d8 <ull_conn_ack_last_idx_get+0x8>)
}
   233d2:	7958      	ldrb	r0, [r3, #5]
   233d4:	4770      	bx	lr
   233d6:	bf00      	nop
   233d8:	200006bc 	.word	0x200006bc

000233dc <ull_conn_ack_peek>:
{
   233dc:	b510      	push	{r4, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   233de:	4b0c      	ldr	r3, [pc, #48]	; (23410 <ull_conn_ack_peek+0x34>)
   233e0:	f893 c004 	ldrb.w	ip, [r3, #4]
   233e4:	f893 e005 	ldrb.w	lr, [r3, #5]
   233e8:	781c      	ldrb	r4, [r3, #0]
	if (first == last) {
   233ea:	45f4      	cmp	ip, lr
   233ec:	d00d      	beq.n	2340a <ull_conn_ack_peek+0x2e>
	return (void *)(fifo + first * size);
   233ee:	fb1c fc04 	smulbb	ip, ip, r4
   233f2:	3308      	adds	r3, #8
   233f4:	eb03 040c 	add.w	r4, r3, ip
	*ack_last = mfifo_conn_ack.l;
   233f8:	f880 e000 	strb.w	lr, [r0]
	*handle = lll_tx->handle;
   233fc:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   23400:	6863      	ldr	r3, [r4, #4]
	*handle = lll_tx->handle;
   23402:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   23404:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   23406:	6818      	ldr	r0, [r3, #0]
}
   23408:	bd10      	pop	{r4, pc}
		return NULL;
   2340a:	2000      	movs	r0, #0
}
   2340c:	bd10      	pop	{r4, pc}
   2340e:	bf00      	nop
   23410:	200006bc 	.word	0x200006bc

00023414 <ull_conn_ack_by_last_peek>:
{
   23414:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   23416:	4b0b      	ldr	r3, [pc, #44]	; (23444 <ull_conn_ack_by_last_peek+0x30>)
   23418:	f893 c004 	ldrb.w	ip, [r3, #4]
   2341c:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
   23420:	4584      	cmp	ip, r0
   23422:	d00d      	beq.n	23440 <ull_conn_ack_by_last_peek+0x2c>
	return (void *)(fifo + first * size);
   23424:	3308      	adds	r3, #8
   23426:	fb1c fc0e 	smulbb	ip, ip, lr
   2342a:	eb03 0e0c 	add.w	lr, r3, ip
	*handle = lll_tx->handle;
   2342e:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   23432:	f8de 3004 	ldr.w	r3, [lr, #4]
	*handle = lll_tx->handle;
   23436:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   23438:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   2343a:	6818      	ldr	r0, [r3, #0]
}
   2343c:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   23440:	2000      	movs	r0, #0
   23442:	e7fb      	b.n	2343c <ull_conn_ack_by_last_peek+0x28>
   23444:	200006bc 	.word	0x200006bc

00023448 <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
   23448:	4b09      	ldr	r3, [pc, #36]	; (23470 <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   2344a:	7919      	ldrb	r1, [r3, #4]
	if (_first == last) {
   2344c:	795a      	ldrb	r2, [r3, #5]
   2344e:	7818      	ldrb	r0, [r3, #0]
   23450:	f893 c002 	ldrb.w	ip, [r3, #2]
   23454:	428a      	cmp	r2, r1
   23456:	d009      	beq.n	2346c <ull_conn_ack_dequeue+0x24>
	_first += 1U;
   23458:	1c4a      	adds	r2, r1, #1
   2345a:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   2345c:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   23460:	4594      	cmp	ip, r2
   23462:	bf08      	it	eq
   23464:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   23466:	6888      	ldr	r0, [r1, #8]
	*first = _first; /* Write back read-index */
   23468:	711a      	strb	r2, [r3, #4]
	return mem;
   2346a:	4770      	bx	lr
		return NULL;
   2346c:	2000      	movs	r0, #0
}
   2346e:	4770      	bx	lr
   23470:	200006bc 	.word	0x200006bc

00023474 <ull_conn_lll_ack_enqueue>:
{
   23474:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   23476:	4a15      	ldr	r2, [pc, #84]	; (234cc <ull_conn_lll_ack_enqueue+0x58>)
   23478:	f892 c005 	ldrb.w	ip, [r2, #5]
	if (last == count) {
   2347c:	7894      	ldrb	r4, [r2, #2]
   2347e:	f892 e004 	ldrb.w	lr, [r2, #4]
   23482:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
   23484:	f10c 0301 	add.w	r3, ip, #1
   23488:	b2db      	uxtb	r3, r3
		last = 0U;
   2348a:	429c      	cmp	r4, r3
   2348c:	bf08      	it	eq
   2348e:	2300      	moveq	r3, #0
	if (last == first) {
   23490:	459e      	cmp	lr, r3
   23492:	d00a      	beq.n	234aa <ull_conn_lll_ack_enqueue+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   23494:	fb1c fc05 	smulbb	ip, ip, r5
   23498:	f102 0e08 	add.w	lr, r2, #8
	lll_tx->handle = handle;
   2349c:	f82e 000c 	strh.w	r0, [lr, ip]
   234a0:	44f4      	add	ip, lr
	lll_tx->node = tx;
   234a2:	f8cc 1004 	str.w	r1, [ip, #4]
	*last = idx; /* Commit: Update write index */
   234a6:	7153      	strb	r3, [r2, #5]
}
   234a8:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(lll_tx);
   234aa:	4a09      	ldr	r2, [pc, #36]	; (234d0 <ull_conn_lll_ack_enqueue+0x5c>)
   234ac:	4909      	ldr	r1, [pc, #36]	; (234d4 <ull_conn_lll_ack_enqueue+0x60>)
   234ae:	480a      	ldr	r0, [pc, #40]	; (234d8 <ull_conn_lll_ack_enqueue+0x64>)
   234b0:	f240 7381 	movw	r3, #1921	; 0x781
   234b4:	f008 fd87 	bl	2bfc6 <assert_print>
   234b8:	4040      	eors	r0, r0
   234ba:	f380 8811 	msr	BASEPRI, r0
   234be:	f04f 0003 	mov.w	r0, #3
   234c2:	df02      	svc	2
	lll_tx->handle = handle;
   234c4:	2300      	movs	r3, #0
   234c6:	801b      	strh	r3, [r3, #0]
   234c8:	deff      	udf	#255	; 0xff
   234ca:	bf00      	nop
   234cc:	200006bc 	.word	0x200006bc
   234d0:	00033640 	.word	0x00033640
   234d4:	00033688 	.word	0x00033688
   234d8:	00032fc4 	.word	0x00032fc4

000234dc <ull_conn_tx_ack>:
{
   234dc:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(pdu_tx->len);
   234de:	7953      	ldrb	r3, [r2, #5]
{
   234e0:	b082      	sub	sp, #8
   234e2:	4614      	mov	r4, r2
   234e4:	4605      	mov	r5, r0
   234e6:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   234e8:	b37b      	cbz	r3, 2354a <ull_conn_tx_ack+0x6e>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   234ea:	7923      	ldrb	r3, [r4, #4]
   234ec:	f003 0203 	and.w	r2, r3, #3
   234f0:	2a03      	cmp	r2, #3
   234f2:	d00d      	beq.n	23510 <ull_conn_tx_ack+0x34>
	} else if (handle == LLL_HANDLE_INVALID) {
   234f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   234f8:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   234fa:	bf04      	itt	eq
   234fc:	f36f 0301 	bfceq	r3, #0, #2
   23500:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   23502:	4621      	mov	r1, r4
   23504:	4628      	mov	r0, r5
}
   23506:	b002      	add	sp, #8
   23508:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   2350c:	f7fa ba7e 	b.w	1da0c <ll_tx_ack_put>
		if (handle != LLL_HANDLE_INVALID) {
   23510:	f64f 73ff 	movw	r3, #65535	; 0xffff
   23514:	429d      	cmp	r5, r3
   23516:	d126      	bne.n	23566 <ull_conn_tx_ack+0x8a>
		if (link->next == (void *)tx) {
   23518:	6833      	ldr	r3, [r6, #0]
   2351a:	429c      	cmp	r4, r3
   2351c:	d03e      	beq.n	2359c <ull_conn_tx_ack+0xc0>
		LL_ASSERT(!link->next);
   2351e:	2b00      	cmp	r3, #0
   23520:	d0ef      	beq.n	23502 <ull_conn_tx_ack+0x26>
   23522:	4a85      	ldr	r2, [pc, #532]	; (23738 <ull_conn_tx_ack+0x25c>)
   23524:	4985      	ldr	r1, [pc, #532]	; (2373c <ull_conn_tx_ack+0x260>)
   23526:	4886      	ldr	r0, [pc, #536]	; (23740 <ull_conn_tx_ack+0x264>)
   23528:	f240 73ab 	movw	r3, #1963	; 0x7ab
   2352c:	f008 fd4b 	bl	2bfc6 <assert_print>
   23530:	4040      	eors	r0, r0
   23532:	f380 8811 	msr	BASEPRI, r0
   23536:	f04f 0003 	mov.w	r0, #3
   2353a:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   2353c:	4621      	mov	r1, r4
   2353e:	4628      	mov	r0, r5
}
   23540:	b002      	add	sp, #8
   23542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   23546:	f7fa ba61 	b.w	1da0c <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   2354a:	4a7b      	ldr	r2, [pc, #492]	; (23738 <ull_conn_tx_ack+0x25c>)
   2354c:	497d      	ldr	r1, [pc, #500]	; (23744 <ull_conn_tx_ack+0x268>)
   2354e:	487c      	ldr	r0, [pc, #496]	; (23740 <ull_conn_tx_ack+0x264>)
   23550:	f240 738e 	movw	r3, #1934	; 0x78e
   23554:	f008 fd37 	bl	2bfc6 <assert_print>
   23558:	4040      	eors	r0, r0
   2355a:	f380 8811 	msr	BASEPRI, r0
   2355e:	f04f 0003 	mov.w	r0, #3
   23562:	df02      	svc	2
   23564:	e7c1      	b.n	234ea <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   23566:	462a      	mov	r2, r5
   23568:	4877      	ldr	r0, [pc, #476]	; (23748 <ull_conn_tx_ack+0x26c>)
   2356a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   2356e:	f7f6 fe25 	bl	1a1bc <mem_get>
	switch (pdu_tx->llctrl.opcode) {
   23572:	79e2      	ldrb	r2, [r4, #7]
   23574:	3a02      	subs	r2, #2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   23576:	4603      	mov	r3, r0
	switch (pdu_tx->llctrl.opcode) {
   23578:	2a15      	cmp	r2, #21
   2357a:	d80c      	bhi.n	23596 <ull_conn_tx_ack+0xba>
   2357c:	e8df f002 	tbb	[pc, r2]
   23580:	261f0b4e 	.word	0x261f0b4e
   23584:	180b185a 	.word	0x180b185a
   23588:	2d0b1f0b 	.word	0x2d0b1f0b
   2358c:	150b0b0b 	.word	0x150b0b0b
   23590:	8e42180b 	.word	0x8e42180b
   23594:	376c      	.short	0x376c
		if (link->next == (void *)tx) {
   23596:	6833      	ldr	r3, [r6, #0]
   23598:	42a3      	cmp	r3, r4
   2359a:	d1c0      	bne.n	2351e <ull_conn_tx_ack+0x42>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   2359c:	496b      	ldr	r1, [pc, #428]	; (2374c <ull_conn_tx_ack+0x270>)
   2359e:	4620      	mov	r0, r4
}
   235a0:	b002      	add	sp, #8
   235a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   235a6:	f7f6 bdf1 	b.w	1a18c <mem_release>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   235aa:	7a22      	ldrb	r2, [r4, #8]
   235ac:	2a03      	cmp	r2, #3
   235ae:	d014      	beq.n	235da <ull_conn_tx_ack+0xfe>
			conn->common.txn_lock = 0U;
   235b0:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
   235b4:	f36f 0241 	bfc	r2, #1, #1
   235b8:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
			break;
   235bc:	e7ac      	b.n	23518 <ull_conn_tx_ack+0x3c>
			conn->llcp_enc.pause_tx = 1U;
   235be:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   235c2:	f042 0202 	orr.w	r2, r2, #2
   235c6:	f880 2166 	strb.w	r2, [r0, #358]	; 0x166
		break;
   235ca:	e7a5      	b.n	23518 <ull_conn_tx_ack+0x3c>
			conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   235cc:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
   235d0:	f042 0203 	orr.w	r2, r2, #3
   235d4:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
   235d8:	e79e      	b.n	23518 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
   235da:	f893 2166 	ldrb.w	r2, [r3, #358]	; 0x166
   235de:	f022 0203 	bic.w	r2, r2, #3
   235e2:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
		conn->procedure_expire = 0U;
   235e6:	2200      	movs	r2, #0
   235e8:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		break;
   235ec:	e794      	b.n	23518 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   235ee:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   235f2:	2a00      	cmp	r2, #0
   235f4:	db7f      	blt.n	236f6 <ull_conn_tx_ack+0x21a>
		conn->llcp_phy.pause_tx = 0U;
   235f6:	f893 21bf 	ldrb.w	r2, [r3, #447]	; 0x1bf
   235fa:	f36f 0200 	bfc	r2, #0, #1
   235fe:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
		break;
   23602:	e789      	b.n	23518 <ull_conn_tx_ack+0x3c>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_REQ_ACK_WAIT) {
   23604:	f890 21ae 	ldrb.w	r2, [r0, #430]	; 0x1ae
   23608:	f002 0107 	and.w	r1, r2, #7
   2360c:	2901      	cmp	r1, #1
   2360e:	d183      	bne.n	23518 <ull_conn_tx_ack+0x3c>
			conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   23610:	2102      	movs	r1, #2
   23612:	f361 0202 	bfi	r2, r1, #0, #3
   23616:	f880 21ae 	strb.w	r2, [r0, #430]	; 0x1ae
   2361a:	e77d      	b.n	23518 <ull_conn_tx_ack+0x3c>
		if (pdu_tx->llctrl.terminate_ind.error_code ==
   2361c:	7a22      	ldrb	r2, [r4, #8]
			conn->llcp_terminate.reason_final =
   2361e:	2a13      	cmp	r2, #19
   23620:	bf08      	it	eq
   23622:	2216      	moveq	r2, #22
   23624:	f880 2143 	strb.w	r2, [r0, #323]	; 0x143
		conn->llcp_terminate.ack--;
   23628:	f890 2141 	ldrb.w	r2, [r0, #321]	; 0x141
   2362c:	3a01      	subs	r2, #1
   2362e:	f880 2141 	strb.w	r2, [r0, #321]	; 0x141
	break;
   23632:	e771      	b.n	23518 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   23634:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   23638:	2a00      	cmp	r2, #0
   2363a:	dac7      	bge.n	235cc <ull_conn_tx_ack+0xf0>
			conn->llcp_enc.pause_rx = 0U;
   2363c:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   23640:	f022 0203 	bic.w	r2, r2, #3
   23644:	f880 2166 	strb.w	r2, [r0, #358]	; 0x166
			conn->procedure_expire = 0U;
   23648:	2200      	movs	r2, #0
   2364a:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
			conn->llcp_ack = conn->llcp_req;
   2364e:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   23652:	f880 20e5 	strb.w	r2, [r0, #229]	; 0xe5
   23656:	e75f      	b.n	23518 <ull_conn_tx_ack+0x3c>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   23658:	f890 21be 	ldrb.w	r2, [r0, #446]	; 0x1be
   2365c:	2102      	movs	r1, #2
   2365e:	f361 0201 	bfi	r2, r1, #0, #2
   23662:	f880 21be 	strb.w	r2, [r0, #446]	; 0x1be
		if (conn->lll.role) {
   23666:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   2366a:	2a00      	cmp	r2, #0
   2366c:	dac3      	bge.n	235f6 <ull_conn_tx_ack+0x11a>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   2366e:	4a38      	ldr	r2, [pc, #224]	; (23750 <ull_conn_tx_ack+0x274>)
   23670:	e892 0003 	ldmia.w	r2, {r0, r1}
   23674:	aa02      	add	r2, sp, #8
   23676:	e902 0003 	stmdb	r2, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   2367a:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
   2367e:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
   23682:	ea41 0292 	orr.w	r2, r1, r2, lsr #2
			lll->phy_tx_time = phy_tx_time[phys];
   23686:	f002 0207 	and.w	r2, r2, #7
   2368a:	a802      	add	r0, sp, #8
   2368c:	4402      	add	r2, r0
   2368e:	f812 2c08 	ldrb.w	r2, [r2, #-8]
   23692:	f362 1106 	bfi	r1, r2, #4, #3
   23696:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
   2369a:	e7ac      	b.n	235f6 <ull_conn_tx_ack+0x11a>
		conn->common.txn_lock = 0U;
   2369c:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
   236a0:	f36f 0241 	bfc	r2, #1, #1
   236a4:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   236a8:	f893 21ad 	ldrb.w	r2, [r3, #429]	; 0x1ad
   236ac:	f890 01ac 	ldrb.w	r0, [r0, #428]	; 0x1ac
   236b0:	4282      	cmp	r2, r0
   236b2:	f43f af31 	beq.w	23518 <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   236b6:	f893 11ae 	ldrb.w	r1, [r3, #430]	; 0x1ae
   236ba:	f001 0207 	and.w	r2, r1, #7
   236be:	2a03      	cmp	r2, #3
   236c0:	d005      	beq.n	236ce <ull_conn_tx_ack+0x1f2>
   236c2:	3203      	adds	r2, #3
   236c4:	f002 0207 	and.w	r2, r2, #7
   236c8:	2a01      	cmp	r2, #1
   236ca:	f63f af64 	bhi.w	23596 <ull_conn_tx_ack+0xba>
				conn->lll.max_tx_octets =
   236ce:	f8b3 21b2 	ldrh.w	r2, [r3, #434]	; 0x1b2
   236d2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
				conn->lll.max_tx_time =
   236d6:	f8b3 21b6 	ldrh.w	r2, [r3, #438]	; 0x1b6
   236da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
				if (conn->llcp_length.state ==
   236de:	f001 0207 	and.w	r2, r1, #7
   236e2:	2a05      	cmp	r2, #5
   236e4:	d022      	beq.n	2372c <ull_conn_tx_ack+0x250>
				if (!conn->llcp_length.cache.tx_octets) {
   236e6:	f8b3 21b8 	ldrh.w	r2, [r3, #440]	; 0x1b8
   236ea:	b98a      	cbnz	r2, 23710 <ull_conn_tx_ack+0x234>
					conn->llcp_length.ack =
   236ec:	f883 01ad 	strb.w	r0, [r3, #429]	; 0x1ad
					conn->procedure_expire = 0U;
   236f0:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
					break;
   236f4:	e710      	b.n	23518 <ull_conn_tx_ack+0x3c>
				conn->common.txn_lock = 0U;
   236f6:	f890 10d8 	ldrb.w	r1, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   236fa:	4a15      	ldr	r2, [pc, #84]	; (23750 <ull_conn_tx_ack+0x274>)
				conn->common.txn_lock = 0U;
   236fc:	f36f 0141 	bfc	r1, #1, #1
   23700:	f880 10d8 	strb.w	r1, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   23704:	e892 0003 	ldmia.w	r2, {r0, r1}
   23708:	aa02      	add	r2, sp, #8
   2370a:	e902 0003 	stmdb	r2, {r0, r1}
				conn->common.txn_lock = 0U;
   2370e:	e7b4      	b.n	2367a <ull_conn_tx_ack+0x19e>
				conn->llcp_length.tx_octets =
   23710:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
   23714:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   23716:	f362 0102 	bfi	r1, r2, #0, #3
				conn->llcp_length.cache.tx_octets = 0;
   2371a:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   2371e:	f8b3 21ba 	ldrh.w	r2, [r3, #442]	; 0x1ba
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   23722:	f883 11ae 	strb.w	r1, [r3, #430]	; 0x1ae
				conn->llcp_length.tx_time =
   23726:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6
				break;
   2372a:	e6f5      	b.n	23518 <ull_conn_tx_ack+0x3c>
					conn->llcp_length.state =
   2372c:	2204      	movs	r2, #4
   2372e:	f362 0102 	bfi	r1, r2, #0, #3
   23732:	f883 11ae 	strb.w	r1, [r3, #430]	; 0x1ae
					break;
   23736:	e6ef      	b.n	23518 <ull_conn_tx_ack+0x3c>
   23738:	00033640 	.word	0x00033640
   2373c:	0003381c 	.word	0x0003381c
   23740:	00032fc4 	.word	0x00032fc4
   23744:	00033810 	.word	0x00033810
   23748:	20001948 	.word	0x20001948
   2374c:	20002948 	.word	0x20002948
   23750:	00033828 	.word	0x00033828

00023754 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   23754:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   23758:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
	switch (lll->phy_tx_time) {
   2375c:	f3c2 1202 	ubfx	r2, r2, #4, #3
   23760:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   23762:	bf14      	ite	ne
   23764:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   23766:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
   23768:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	return max_tx_octets;
   2376c:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   2376e:	bf14      	ite	ne
   23770:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   23772:	3b0b      	subeq	r3, #11
   23774:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   23776:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   23778:	bf44      	itt	mi
   2377a:	3b04      	submi	r3, #4
   2377c:	b29b      	uxthmi	r3, r3
}
   2377e:	4298      	cmp	r0, r3
   23780:	bf28      	it	cs
   23782:	4618      	movcs	r0, r3
   23784:	4770      	bx	lr
   23786:	bf00      	nop

00023788 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param)
{
   23788:	b510      	push	{r4, lr}
   2378a:	460c      	mov	r4, r1
	struct ll_conn *conn = param;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   2378c:	b930      	cbnz	r0, 2379c <ticker_update_latency_cancel_op_cb+0x14>

	conn->periph.latency_cancel = 0U;
   2378e:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   23792:	f36f 0382 	bfc	r3, #2, #1
   23796:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   2379a:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   2379c:	4a09      	ldr	r2, [pc, #36]	; (237c4 <ticker_update_latency_cancel_op_cb+0x3c>)
   2379e:	490a      	ldr	r1, [pc, #40]	; (237c8 <ticker_update_latency_cancel_op_cb+0x40>)
   237a0:	480a      	ldr	r0, [pc, #40]	; (237cc <ticker_update_latency_cancel_op_cb+0x44>)
   237a2:	f240 23af 	movw	r3, #687	; 0x2af
   237a6:	f008 fc0e 	bl	2bfc6 <assert_print>
   237aa:	4040      	eors	r0, r0
   237ac:	f380 8811 	msr	BASEPRI, r0
   237b0:	f04f 0003 	mov.w	r0, #3
   237b4:	df02      	svc	2
	conn->periph.latency_cancel = 0U;
   237b6:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   237ba:	f36f 0382 	bfc	r3, #2, #1
   237be:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   237c2:	bd10      	pop	{r4, pc}
   237c4:	00033848 	.word	0x00033848
   237c8:	00033890 	.word	0x00033890
   237cc:	00032fc4 	.word	0x00032fc4

000237d0 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   237d0:	b900      	cbnz	r0, 237d4 <ticker_op_cb+0x4>
   237d2:	4770      	bx	lr
{
   237d4:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   237d6:	4a07      	ldr	r2, [pc, #28]	; (237f4 <ticker_op_cb+0x24>)
   237d8:	4907      	ldr	r1, [pc, #28]	; (237f8 <ticker_op_cb+0x28>)
   237da:	4808      	ldr	r0, [pc, #32]	; (237fc <ticker_op_cb+0x2c>)
   237dc:	f240 23a7 	movw	r3, #679	; 0x2a7
   237e0:	f008 fbf1 	bl	2bfc6 <assert_print>
   237e4:	4040      	eors	r0, r0
   237e6:	f380 8811 	msr	BASEPRI, r0
   237ea:	f04f 0003 	mov.w	r0, #3
   237ee:	df02      	svc	2
}
   237f0:	bd08      	pop	{r3, pc}
   237f2:	bf00      	nop
   237f4:	00033848 	.word	0x00033848
   237f8:	000336a0 	.word	0x000336a0
   237fc:	00032fc4 	.word	0x00032fc4

00023800 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   23800:	2801      	cmp	r0, #1
   23802:	d000      	beq.n	23806 <ticker_op_stop_adv_cb+0x6>
   23804:	4770      	bx	lr
{
   23806:	b510      	push	{r4, lr}
   23808:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   2380a:	f7fa f997 	bl	1db3c <ull_disable_mark_get>
   2380e:	4284      	cmp	r4, r0
   23810:	d00c      	beq.n	2382c <ticker_op_stop_adv_cb+0x2c>
   23812:	4a07      	ldr	r2, [pc, #28]	; (23830 <ticker_op_stop_adv_cb+0x30>)
   23814:	4907      	ldr	r1, [pc, #28]	; (23834 <ticker_op_stop_adv_cb+0x34>)
   23816:	4808      	ldr	r0, [pc, #32]	; (23838 <ticker_op_stop_adv_cb+0x38>)
   23818:	f240 239f 	movw	r3, #671	; 0x29f
   2381c:	f008 fbd3 	bl	2bfc6 <assert_print>
   23820:	4040      	eors	r0, r0
   23822:	f380 8811 	msr	BASEPRI, r0
   23826:	f04f 0003 	mov.w	r0, #3
   2382a:	df02      	svc	2
}
   2382c:	bd10      	pop	{r4, pc}
   2382e:	bf00      	nop
   23830:	00033848 	.word	0x00033848
   23834:	000338a4 	.word	0x000338a4
   23838:	00032fc4 	.word	0x00032fc4

0002383c <ull_periph_ticker_cb>:
{
   2383c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23840:	9c07      	ldr	r4, [sp, #28]
   23842:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   23846:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   23848:	461d      	mov	r5, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   2384a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2384e:	4299      	cmp	r1, r3
   23850:	d026      	beq.n	238a0 <ull_periph_ticker_cb+0x64>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   23852:	4606      	mov	r6, r0
   23854:	4617      	mov	r7, r2
   23856:	4601      	mov	r1, r0
   23858:	462a      	mov	r2, r5
   2385a:	4620      	mov	r0, r4
   2385c:	f7fd ffda 	bl	21814 <ull_conn_llcp>
		if (ret) {
   23860:	b9f0      	cbnz	r0, 238a0 <ull_periph_ticker_cb+0x64>
	return ++hdr->ref;
   23862:	7823      	ldrb	r3, [r4, #0]
   23864:	3301      	adds	r3, #1
   23866:	b2db      	uxtb	r3, r3
   23868:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
   2386a:	b34b      	cbz	r3, 238c0 <ull_periph_ticker_cb+0x84>
	p.ticks_at_expire = ticks_at_expire;
   2386c:	491b      	ldr	r1, [pc, #108]	; (238dc <ull_periph_ticker_cb+0xa0>)
	mfy.param = &p;
   2386e:	4b1c      	ldr	r3, [pc, #112]	; (238e0 <ull_periph_ticker_cb+0xa4>)
	p.lazy = lazy;
   23870:	810d      	strh	r5, [r1, #8]
	p.param = &conn->lll;
   23872:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   23876:	2200      	movs	r2, #0
	p.param = &conn->lll;
   23878:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
   2387a:	e9c1 6700 	strd	r6, r7, [r1]
	p.force = force;
   2387e:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
   23882:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   23884:	2001      	movs	r0, #1
   23886:	4611      	mov	r1, r2
   23888:	f7f6 fd3e 	bl	1a308 <mayfly_enqueue>
	LL_ASSERT(!err);
   2388c:	b950      	cbnz	r0, 238a4 <ull_periph_ticker_cb+0x68>
	ull_conn_tx_demux(UINT8_MAX);
   2388e:	20ff      	movs	r0, #255	; 0xff
   23890:	f7ff fa48 	bl	22d24 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   23894:	4620      	mov	r0, r4
   23896:	21ff      	movs	r1, #255	; 0xff
}
   23898:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   2389c:	f7ff bcba 	b.w	23214 <ull_conn_tx_lll_enqueue>
}
   238a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   238a4:	4a0f      	ldr	r2, [pc, #60]	; (238e4 <ull_periph_ticker_cb+0xa8>)
   238a6:	4910      	ldr	r1, [pc, #64]	; (238e8 <ull_periph_ticker_cb+0xac>)
   238a8:	4810      	ldr	r0, [pc, #64]	; (238ec <ull_periph_ticker_cb+0xb0>)
   238aa:	f240 232a 	movw	r3, #554	; 0x22a
   238ae:	f008 fb8a 	bl	2bfc6 <assert_print>
   238b2:	4040      	eors	r0, r0
   238b4:	f380 8811 	msr	BASEPRI, r0
   238b8:	f04f 0003 	mov.w	r0, #3
   238bc:	df02      	svc	2
   238be:	e7e6      	b.n	2388e <ull_periph_ticker_cb+0x52>
	LL_ASSERT(ref);
   238c0:	4a08      	ldr	r2, [pc, #32]	; (238e4 <ull_periph_ticker_cb+0xa8>)
   238c2:	490b      	ldr	r1, [pc, #44]	; (238f0 <ull_periph_ticker_cb+0xb4>)
   238c4:	4809      	ldr	r0, [pc, #36]	; (238ec <ull_periph_ticker_cb+0xb0>)
   238c6:	f240 231d 	movw	r3, #541	; 0x21d
   238ca:	f008 fb7c 	bl	2bfc6 <assert_print>
   238ce:	4040      	eors	r0, r0
   238d0:	f380 8811 	msr	BASEPRI, r0
   238d4:	f04f 0003 	mov.w	r0, #3
   238d8:	df02      	svc	2
   238da:	e7c7      	b.n	2386c <ull_periph_ticker_cb+0x30>
   238dc:	20002a40 	.word	0x20002a40
   238e0:	2000076c 	.word	0x2000076c
   238e4:	00033848 	.word	0x00033848
   238e8:	00033300 	.word	0x00033300
   238ec:	00032fc4 	.word	0x00032fc4
   238f0:	000335b4 	.word	0x000335b4

000238f4 <ull_periph_latency_cancel>:
	if (conn->lll.latency_event && !conn->periph.latency_cancel) {
   238f4:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   238f6:	b123      	cbz	r3, 23902 <ull_periph_latency_cancel+0xe>
   238f8:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
   238fc:	f012 0304 	ands.w	r3, r2, #4
   23900:	d000      	beq.n	23904 <ull_periph_latency_cancel+0x10>
   23902:	4770      	bx	lr
{
   23904:	b510      	push	{r4, lr}
		conn->periph.latency_cancel = 1U;
   23906:	f042 0204 	orr.w	r2, r2, #4
{
   2390a:	b088      	sub	sp, #32
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   2390c:	4c11      	ldr	r4, [pc, #68]	; (23954 <ull_periph_latency_cancel+0x60>)
		conn->periph.latency_cancel = 1U;
   2390e:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   23912:	3103      	adds	r1, #3
   23914:	2201      	movs	r2, #1
   23916:	e9cd 3202 	strd	r3, r2, [sp, #8]
   2391a:	e9cd 3404 	strd	r3, r4, [sp, #16]
   2391e:	e9cd 3300 	strd	r3, r3, [sp]
   23922:	9006      	str	r0, [sp, #24]
   23924:	b2ca      	uxtb	r2, r1
   23926:	4618      	mov	r0, r3
   23928:	2103      	movs	r1, #3
   2392a:	f7f7 fead 	bl	1b688 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   2392e:	f030 0302 	bics.w	r3, r0, #2
   23932:	d00c      	beq.n	2394e <ull_periph_latency_cancel+0x5a>
   23934:	4a08      	ldr	r2, [pc, #32]	; (23958 <ull_periph_latency_cancel+0x64>)
   23936:	4909      	ldr	r1, [pc, #36]	; (2395c <ull_periph_latency_cancel+0x68>)
   23938:	4809      	ldr	r0, [pc, #36]	; (23960 <ull_periph_latency_cancel+0x6c>)
   2393a:	f240 13e3 	movw	r3, #483	; 0x1e3
   2393e:	f008 fb42 	bl	2bfc6 <assert_print>
   23942:	4040      	eors	r0, r0
   23944:	f380 8811 	msr	BASEPRI, r0
   23948:	f04f 0003 	mov.w	r0, #3
   2394c:	df02      	svc	2
}
   2394e:	b008      	add	sp, #32
   23950:	bd10      	pop	{r4, pc}
   23952:	bf00      	nop
   23954:	00023789 	.word	0x00023789
   23958:	00033848 	.word	0x00033848
   2395c:	00033720 	.word	0x00033720
   23960:	00032fc4 	.word	0x00032fc4

00023964 <ll_start_enc_req_send>:
{
   23964:	b570      	push	{r4, r5, r6, lr}
   23966:	460e      	mov	r6, r1
   23968:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   2396a:	f7fc f847 	bl	1f9fc <ll_connected_get>
	if (!conn) {
   2396e:	2800      	cmp	r0, #0
   23970:	d040      	beq.n	239f4 <ll_start_enc_req_send+0x90>
	if (error_code) {
   23972:	4604      	mov	r4, r0
   23974:	b95e      	cbnz	r6, 2398e <ll_start_enc_req_send+0x2a>
		if ((conn->llcp_req == conn->llcp_ack) ||
   23976:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   2397a:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
   2397e:	429a      	cmp	r2, r3
   23980:	d003      	beq.n	2398a <ll_start_enc_req_send+0x26>
   23982:	f890 30e6 	ldrb.w	r3, [r0, #230]	; 0xe6
   23986:	2b03      	cmp	r3, #3
   23988:	d026      	beq.n	239d8 <ll_start_enc_req_send+0x74>
				return BT_HCI_ERR_CMD_DISALLOWED;
   2398a:	200c      	movs	r0, #12
}
   2398c:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->llcp_enc.refresh == 0U) {
   2398e:	f890 0166 	ldrb.w	r0, [r0, #358]	; 0x166
   23992:	f010 0004 	ands.w	r0, r0, #4
   23996:	d112      	bne.n	239be <ll_start_enc_req_send+0x5a>
			if ((conn->llcp_req == conn->llcp_ack) ||
   23998:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   2399c:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   239a0:	429a      	cmp	r2, r3
   239a2:	d0f2      	beq.n	2398a <ll_start_enc_req_send+0x26>
   239a4:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   239a8:	2b03      	cmp	r3, #3
   239aa:	d1ee      	bne.n	2398a <ll_start_enc_req_send+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   239ac:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->llcp.encryption.error_code = error_code;
   239b0:	f884 60f5 	strb.w	r6, [r4, #245]	; 0xf5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   239b4:	f360 0301 	bfi	r3, r0, #0, #2
   239b8:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
}
   239bc:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
   239be:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
			if (conn->llcp_terminate.ack !=
   239c2:	f894 3141 	ldrb.w	r3, [r4, #321]	; 0x141
   239c6:	4293      	cmp	r3, r2
   239c8:	d1df      	bne.n	2398a <ll_start_enc_req_send+0x26>
			conn->llcp_terminate.req++;
   239ca:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
   239cc:	f884 6142 	strb.w	r6, [r4, #322]	; 0x142
			conn->llcp_terminate.req++;
   239d0:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
	return 0;
   239d4:	2000      	movs	r0, #0
}
   239d6:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp_enc.ltk[0], ltk,
   239d8:	2210      	movs	r2, #16
   239da:	4629      	mov	r1, r5
   239dc:	f200 1071 	addw	r0, r0, #369	; 0x171
   239e0:	f00a fb23 	bl	2e02a <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   239e4:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
   239e8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   239ec:	f8a4 30f4 	strh.w	r3, [r4, #244]	; 0xf4
	return 0;
   239f0:	4630      	mov	r0, r6
}
   239f2:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   239f4:	2002      	movs	r0, #2
}
   239f6:	bd70      	pop	{r4, r5, r6, pc}

000239f8 <lll_chan_sel_1>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.2
 * Channel Selection algorithm #1
 */
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   239f8:	b530      	push	{r4, r5, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   239fa:	fb02 1c01 	mla	ip, r2, r1, r1
   239fe:	7802      	ldrb	r2, [r0, #0]
   23a00:	491c      	ldr	r1, [pc, #112]	; (23a74 <lll_chan_sel_1+0x7c>)
{
   23a02:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   23a06:	4494      	add	ip, r2
   23a08:	fb81 210c 	smull	r2, r1, r1, ip
   23a0c:	4461      	add	r1, ip
   23a0e:	1149      	asrs	r1, r1, #5
   23a10:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
   23a14:	eb01 018e 	add.w	r1, r1, lr, lsl #2
{
   23a18:	4604      	mov	r4, r0
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   23a1a:	ebac 0101 	sub.w	r1, ip, r1
   23a1e:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
   23a20:	7020      	strb	r0, [r4, #0]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   23a22:	08c4      	lsrs	r4, r0, #3
   23a24:	f001 0107 	and.w	r1, r1, #7
   23a28:	f813 c004 	ldrb.w	ip, [r3, r4]
   23a2c:	fa4c f101 	asr.w	r1, ip, r1
   23a30:	f011 0101 	ands.w	r1, r1, #1
   23a34:	d11d      	bne.n	23a72 <lll_chan_sel_1+0x7a>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   23a36:	fbb0 f2f5 	udiv	r2, r0, r5
   23a3a:	fb05 0212 	mls	r2, r5, r2, r0
   23a3e:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   23a40:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
   23a44:	1d1c      	adds	r4, r3, #4
	chan_next = 0U;
   23a46:	4608      	mov	r0, r1
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   23a48:	f100 0c08 	add.w	ip, r0, #8
   23a4c:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		bit_count = 8U;
		while (bit_count--) {
   23a50:	fa5f fc8c 	uxtb.w	ip, ip
			if (bite & 0x01) {
   23a54:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   23a58:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   23a5c:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   23a60:	d002      	beq.n	23a68 <lll_chan_sel_1+0x70>
				if (chan_index == 0U) {
   23a62:	b132      	cbz	r2, 23a72 <lll_chan_sel_1+0x7a>
				chan_index--;
   23a64:	3a01      	subs	r2, #1
   23a66:	b2d2      	uxtb	r2, r2
			chan_next++;
   23a68:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   23a6a:	4584      	cmp	ip, r0
   23a6c:	d1f2      	bne.n	23a54 <lll_chan_sel_1+0x5c>
	while (byte_count--) {
   23a6e:	45a6      	cmp	lr, r4
   23a70:	d1ea      	bne.n	23a48 <lll_chan_sel_1+0x50>
}
   23a72:	bd30      	pop	{r4, r5, pc}
   23a74:	dd67c8a7 	.word	0xdd67c8a7

00023a78 <lll_chan_id>:
	return aa_ms ^ aa_ls;
   23a78:	8842      	ldrh	r2, [r0, #2]
   23a7a:	8800      	ldrh	r0, [r0, #0]
}
   23a7c:	4050      	eors	r0, r2
   23a7e:	4770      	bx	lr

00023a80 <lll_chan_sel_2>:
{
   23a80:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.3.2
 * Inputs and basic components, for below operations
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   23a82:	4d2f      	ldr	r5, [pc, #188]	; (23b40 <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   23a84:	4c2f      	ldr	r4, [pc, #188]	; (23b44 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn_s(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_s;

	prn_s = counter ^ chan_id;
   23a86:	4048      	eors	r0, r1
   23a88:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   23a8c:	0a07      	lsrs	r7, r0, #8
   23a8e:	b2c0      	uxtb	r0, r0
   23a90:	eb07 2787 	add.w	r7, r7, r7, lsl #10
   23a94:	eb00 2e80 	add.w	lr, r0, r0, lsl #10
   23a98:	ea05 0647 	and.w	r6, r5, r7, lsl #1
   23a9c:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   23aa0:	ea04 1747 	and.w	r7, r4, r7, lsl #5
   23aa4:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   23aa8:	433e      	orrs	r6, r7
   23aaa:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   23aae:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   23ab2:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   23ab6:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   23aba:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   23abe:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   23ac0:	f3c0 4007 	ubfx	r0, r0, #16, #8
   23ac4:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   23ac8:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   23acc:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   23ad0:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   23ad2:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   23ad6:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   23ad8:	d1d8      	bne.n	23a8c <lll_chan_sel_2+0xc>
static uint16_t chan_prn_e(uint16_t counter, uint16_t chan_id)
{
	uint16_t prn_e;

	prn_e = chan_prn_s(counter, chan_id);
	prn_e ^= chan_id;
   23ada:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   23adc:	481a      	ldr	r0, [pc, #104]	; (23b48 <lll_chan_sel_2+0xc8>)
   23ade:	fba0 4001 	umull	r4, r0, r0, r1
   23ae2:	1a0c      	subs	r4, r1, r0
   23ae4:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   23ae8:	0940      	lsrs	r0, r0, #5
   23aea:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   23aee:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   23af2:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   23af4:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   23af8:	f000 0507 	and.w	r5, r0, #7
   23afc:	5d14      	ldrb	r4, [r2, r4]
   23afe:	412c      	asrs	r4, r5
   23b00:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   23b02:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   23b04:	d41a      	bmi.n	23b3c <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   23b06:	fb01 f303 	mul.w	r3, r1, r3
   23b0a:	1e56      	subs	r6, r2, #1
   23b0c:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   23b10:	3204      	adds	r2, #4
	chan_next = 0U;
   23b12:	4660      	mov	r0, ip
		bite = *chan_map;
   23b14:	f100 0508 	add.w	r5, r0, #8
   23b18:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   23b1c:	b2ed      	uxtb	r5, r5
			if (bite & 0x01) {
   23b1e:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   23b22:	f100 0401 	add.w	r4, r0, #1
			bite >>= 1;
   23b26:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   23b2a:	d002      	beq.n	23b32 <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   23b2c:	b133      	cbz	r3, 23b3c <lll_chan_sel_2+0xbc>
				chan_index--;
   23b2e:	3b01      	subs	r3, #1
   23b30:	b2db      	uxtb	r3, r3
			chan_next++;
   23b32:	b2e0      	uxtb	r0, r4
		while (bit_count--) {
   23b34:	42a8      	cmp	r0, r5
   23b36:	d1f2      	bne.n	23b1e <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   23b38:	42b2      	cmp	r2, r6
   23b3a:	d1eb      	bne.n	23b14 <lll_chan_sel_2+0x94>
}
   23b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23b3e:	bf00      	nop
   23b40:	00022110 	.word	0x00022110
   23b44:	00088440 	.word	0x00088440
   23b48:	bacf914d 	.word	0xbacf914d

00023b4c <rl_update>:
		}
	}
}

static void rl_update(void)
{
   23b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23b50:	4d18      	ldr	r5, [pc, #96]	; (23bb4 <rl_update+0x68>)
   23b52:	4e19      	ldr	r6, [pc, #100]	; (23bb8 <rl_update+0x6c>)
   23b54:	2400      	movs	r4, #0
   23b56:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
}

static void filter_insert(struct lll_filter *const filter, int index,
			  uint8_t addr_type, const uint8_t *const bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   23b5a:	1eaf      	subs	r7, r5, #2
   23b5c:	f04f 0801 	mov.w	r8, #1
   23b60:	e006      	b.n	23b70 <rl_update+0x24>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   23b62:	3401      	adds	r4, #1
   23b64:	2c08      	cmp	r4, #8
   23b66:	f105 0506 	add.w	r5, r5, #6
   23b6a:	f106 0628 	add.w	r6, r6, #40	; 0x28
   23b6e:	d01e      	beq.n	23bae <rl_update+0x62>
		if (rl[i].taken) {
   23b70:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   23b74:	f819 3033 	ldrb.w	r3, [r9, r3, lsl #3]
   23b78:	07da      	lsls	r2, r3, #31
   23b7a:	d5f2      	bpl.n	23b62 <rl_update+0x16>
	filter->enable_bitmask |= BIT(index);
   23b7c:	7839      	ldrb	r1, [r7, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   23b7e:	787a      	ldrb	r2, [r7, #1]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   23b80:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   23b84:	fa08 fc04 	lsl.w	ip, r8, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   23b88:	40a3      	lsls	r3, r4
	filter->enable_bitmask |= BIT(index);
   23b8a:	ea41 0c0c 	orr.w	ip, r1, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   23b8e:	4313      	orrs	r3, r2
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   23b90:	4631      	mov	r1, r6
   23b92:	4628      	mov	r0, r5
   23b94:	2206      	movs	r2, #6
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   23b96:	3401      	adds	r4, #1
	filter->enable_bitmask |= BIT(index);
   23b98:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   23b9c:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   23b9e:	f00a fa44 	bl	2e02a <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   23ba2:	2c08      	cmp	r4, #8
   23ba4:	f105 0506 	add.w	r5, r5, #6
   23ba8:	f106 0628 	add.w	r6, r6, #40	; 0x28
   23bac:	d1e0      	bne.n	23b70 <rl_update+0x24>
}
   23bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   23bb2:	bf00      	nop
   23bb4:	20002cbe 	.word	0x20002cbe
   23bb8:	20002b7d 	.word	0x20002b7d

00023bbc <fal_update>:
{
   23bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23bc0:	4e20      	ldr	r6, [pc, #128]	; (23c44 <fal_update+0x88>)
   23bc2:	4d21      	ldr	r5, [pc, #132]	; (23c48 <fal_update+0x8c>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   23bc4:	f8df 8084 	ldr.w	r8, [pc, #132]	; 23c4c <fal_update+0x90>
   23bc8:	f8df 9084 	ldr.w	r9, [pc, #132]	; 23c50 <fal_update+0x94>
{
   23bcc:	2400      	movs	r4, #0
   23bce:	f1a5 0a02 	sub.w	sl, r5, #2
	filter->enable_bitmask |= BIT(index);
   23bd2:	1eb7      	subs	r7, r6, #2
		if (!fal[i].taken) {
   23bd4:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   23bd8:	f04f 0c01 	mov.w	ip, #1
		if (!fal[i].taken) {
   23bdc:	f013 0f01 	tst.w	r3, #1
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   23be0:	4630      	mov	r0, r6
	filter->enable_bitmask |= BIT(index);
   23be2:	fa0c fc04 	lsl.w	ip, ip, r4
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   23be6:	4629      	mov	r1, r5
	for (i = 0U; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   23be8:	f106 0606 	add.w	r6, r6, #6
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   23bec:	f04f 0206 	mov.w	r2, #6
		if (!fal[i].taken) {
   23bf0:	d021      	beq.n	23c36 <fal_update+0x7a>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   23bf2:	f898 3000 	ldrb.w	r3, [r8]
   23bf6:	b163      	cbz	r3, 23c12 <fal_update+0x56>
		j = fal[i].rl_idx;
   23bf8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   23bfc:	2b07      	cmp	r3, #7
   23bfe:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   23c02:	d806      	bhi.n	23c12 <fal_update+0x56>
   23c04:	f819 303e 	ldrb.w	r3, [r9, lr, lsl #3]
   23c08:	f013 0f04 	tst.w	r3, #4
   23c0c:	d001      	beq.n	23c12 <fal_update+0x56>
   23c0e:	06db      	lsls	r3, r3, #27
   23c10:	d511      	bpl.n	23c36 <fal_update+0x7a>
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   23c12:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   23c16:	f897 e000 	ldrb.w	lr, [r7]
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   23c1a:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
   23c1e:	ea4e 0c0c 	orr.w	ip, lr, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   23c22:	f897 e001 	ldrb.w	lr, [r7, #1]
	filter->enable_bitmask |= BIT(index);
   23c26:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   23c2a:	40a3      	lsls	r3, r4
   23c2c:	ea4e 0303 	orr.w	r3, lr, r3
   23c30:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   23c32:	f00a f9fa 	bl	2e02a <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   23c36:	3401      	adds	r4, #1
   23c38:	2c08      	cmp	r4, #8
   23c3a:	f105 0508 	add.w	r5, r5, #8
   23c3e:	d1c9      	bne.n	23bd4 <fal_update+0x18>
}
   23c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23c44:	20002a92 	.word	0x20002a92
   23c48:	20002a52 	.word	0x20002a52
   23c4c:	20003421 	.word	0x20003421
   23c50:	20002b7c 	.word	0x20002b7c

00023c54 <ll_fal_size_get>:
}
   23c54:	2008      	movs	r0, #8
   23c56:	4770      	bx	lr

00023c58 <ll_fal_clear>:
{
   23c58:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   23c5a:	2000      	movs	r0, #0
   23c5c:	f7fa ffb4 	bl	1ebc8 <ull_adv_filter_pol_get>
   23c60:	b9c8      	cbnz	r0, 23c96 <ll_fal_clear+0x3e>
   23c62:	4a0e      	ldr	r2, [pc, #56]	; (23c9c <ll_fal_clear+0x44>)
			rl[j].fal = 0U;
   23c64:	4c0e      	ldr	r4, [pc, #56]	; (23ca0 <ll_fal_clear+0x48>)
		uint8_t j = fal[i].rl_idx;
   23c66:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   23c6a:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   23c6c:	2b07      	cmp	r3, #7
			rl[j].fal = 0U;
   23c6e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   23c72:	d805      	bhi.n	23c80 <ll_fal_clear+0x28>
			rl[j].fal = 0U;
   23c74:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   23c78:	f36f 1345 	bfc	r3, #5, #1
   23c7c:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		fal[i].taken = 0U;
   23c80:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   23c84:	f36f 0300 	bfc	r3, #0, #1
   23c88:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   23c8c:	3001      	adds	r0, #1
   23c8e:	2808      	cmp	r0, #8
   23c90:	d1e9      	bne.n	23c66 <ll_fal_clear+0xe>
	return 0;
   23c92:	2000      	movs	r0, #0
}
   23c94:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   23c96:	200c      	movs	r0, #12
}
   23c98:	bd10      	pop	{r4, pc}
   23c9a:	bf00      	nop
   23c9c:	20002a50 	.word	0x20002a50
   23ca0:	20002b7c 	.word	0x20002b7c

00023ca4 <ll_fal_add>:
{
   23ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23ca8:	4681      	mov	r9, r0
   23caa:	b083      	sub	sp, #12
	if (ull_adv_filter_pol_get(0)) {
   23cac:	2000      	movs	r0, #0
   23cae:	f7fa ff8b 	bl	1ebc8 <ull_adv_filter_pol_get>
   23cb2:	2800      	cmp	r0, #0
   23cb4:	d16d      	bne.n	23d92 <ll_fal_add+0xee>
	if (addr->type == ADDR_TYPE_ANON) {
   23cb6:	f899 a000 	ldrb.w	sl, [r9]
   23cba:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   23cbe:	4605      	mov	r5, r0
   23cc0:	d064      	beq.n	23d8c <ll_fal_add+0xe8>
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   23cc2:	4e42      	ldr	r6, [pc, #264]	; (23dcc <ll_fal_add+0x128>)
   23cc4:	f109 0b01 	add.w	fp, r9, #1
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   23cc8:	f00a 0a01 	and.w	sl, sl, #1
		*free_idx = FILTER_IDX_NONE;
   23ccc:	f04f 08ff 	mov.w	r8, #255	; 0xff
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   23cd0:	4604      	mov	r4, r0
   23cd2:	1eb7      	subs	r7, r6, #2
   23cd4:	e009      	b.n	23cea <ll_fal_add+0x46>
		} else if (free_idx && !fal[i].taken &&
   23cd6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   23cda:	d101      	bne.n	23ce0 <ll_fal_add+0x3c>
			*free_idx = i;
   23cdc:	fa5f f884 	uxtb.w	r8, r4
	for (i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   23ce0:	3401      	adds	r4, #1
   23ce2:	2c08      	cmp	r4, #8
   23ce4:	f106 0608 	add.w	r6, r6, #8
   23ce8:	d017      	beq.n	23d1a <ll_fal_add+0x76>
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   23cea:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   23cee:	07d8      	lsls	r0, r3, #31
   23cf0:	f3c3 0240 	ubfx	r2, r3, #1, #1
   23cf4:	d5ef      	bpl.n	23cd6 <ll_fal_add+0x32>
   23cf6:	4552      	cmp	r2, sl
   23cf8:	d1f2      	bne.n	23ce0 <ll_fal_add+0x3c>
   23cfa:	2206      	movs	r2, #6
   23cfc:	4630      	mov	r0, r6
   23cfe:	4659      	mov	r1, fp
   23d00:	f00a f982 	bl	2e008 <memcmp>
   23d04:	2800      	cmp	r0, #0
   23d06:	d041      	beq.n	23d8c <ll_fal_add+0xe8>
		} else if (free_idx && !fal[i].taken &&
   23d08:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   23d0c:	07d9      	lsls	r1, r3, #31
   23d0e:	d5e2      	bpl.n	23cd6 <ll_fal_add+0x32>
	for (i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   23d10:	3401      	adds	r4, #1
   23d12:	2c08      	cmp	r4, #8
   23d14:	f106 0608 	add.w	r6, r6, #8
   23d18:	d1e7      	bne.n	23cea <ll_fal_add+0x46>
	} else if (j >= ARRAY_SIZE(fal)) {
   23d1a:	f1b8 0f07 	cmp.w	r8, #7
   23d1e:	d850      	bhi.n	23dc2 <ll_fal_add+0x11e>
	fal[i].id_addr_type = id_addr->type & 0x1;
   23d20:	f899 2000 	ldrb.w	r2, [r9]
   23d24:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   23d28:	4e29      	ldr	r6, [pc, #164]	; (23dd0 <ll_fal_add+0x12c>)
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   23d2a:	2002      	movs	r0, #2
	fal[i].id_addr_type = id_addr->type & 0x1;
   23d2c:	f362 0341 	bfi	r3, r2, #1, #1
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   23d30:	fb14 0008 	smlabb	r0, r4, r8, r0
	fal[i].id_addr_type = id_addr->type & 0x1;
   23d34:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
	memcpy(dst, src, sizeof(*dst));
   23d38:	4438      	add	r0, r7
   23d3a:	2206      	movs	r2, #6
   23d3c:	4659      	mov	r1, fp
   23d3e:	f00a f974 	bl	2e02a <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   23d42:	f899 3000 	ldrb.w	r3, [r9]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   23d46:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   23d4a:	f003 0301 	and.w	r3, r3, #1
   23d4e:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   23d52:	fa5f fa85 	uxtb.w	sl, r5
   23d56:	f819 2034 	ldrb.w	r2, [r9, r4, lsl #3]
   23d5a:	f3c2 1180 	ubfx	r1, r2, #6, #1
   23d5e:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   23d60:	f105 0501 	add.w	r5, r5, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   23d64:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   23d68:	d501      	bpl.n	23d6e <ll_fal_add+0xca>
   23d6a:	4299      	cmp	r1, r3
   23d6c:	d015      	beq.n	23d9a <ll_fal_add+0xf6>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   23d6e:	2d08      	cmp	r5, #8
   23d70:	f106 0628 	add.w	r6, r6, #40	; 0x28
   23d74:	d1eb      	bne.n	23d4e <ll_fal_add+0xaa>
		fal[i].rl_idx = FILTER_IDX_NONE;
   23d76:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   23d7a:	22ff      	movs	r2, #255	; 0xff
   23d7c:	705a      	strb	r2, [r3, #1]
	fal[i].taken = 1U;
   23d7e:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   23d82:	f043 0301 	orr.w	r3, r3, #1
   23d86:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
	return 0;
   23d8a:	2000      	movs	r0, #0
}
   23d8c:	b003      	add	sp, #12
   23d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   23d92:	200c      	movs	r0, #12
}
   23d94:	b003      	add	sp, #12
   23d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   23d9a:	4630      	mov	r0, r6
   23d9c:	2206      	movs	r2, #6
   23d9e:	4659      	mov	r1, fp
   23da0:	9301      	str	r3, [sp, #4]
   23da2:	f00a f931 	bl	2e008 <memcmp>
   23da6:	9b01      	ldr	r3, [sp, #4]
   23da8:	2800      	cmp	r0, #0
   23daa:	d1e0      	bne.n	23d6e <ll_fal_add+0xca>
		rl[j].fal = 1U;
   23dac:	f819 3004 	ldrb.w	r3, [r9, r4]
   23db0:	f043 0320 	orr.w	r3, r3, #32
   23db4:	f809 3004 	strb.w	r3, [r9, r4]
		fal[i].rl_idx = j;
   23db8:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   23dbc:	f883 a001 	strb.w	sl, [r3, #1]
		rl[j].fal = 1U;
   23dc0:	e7dd      	b.n	23d7e <ll_fal_add+0xda>
   23dc2:	2007      	movs	r0, #7
}
   23dc4:	b003      	add	sp, #12
   23dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23dca:	bf00      	nop
   23dcc:	20002a52 	.word	0x20002a52
   23dd0:	20002b7d 	.word	0x20002b7d

00023dd4 <ll_fal_remove>:
{
   23dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23dd8:	4607      	mov	r7, r0
	if (ull_adv_filter_pol_get(0)) {
   23dda:	2000      	movs	r0, #0
   23ddc:	f7fa fef4 	bl	1ebc8 <ull_adv_filter_pol_get>
   23de0:	bbb8      	cbnz	r0, 23e52 <ll_fal_remove+0x7e>
	if (addr->type == ADDR_TYPE_ANON) {
   23de2:	783e      	ldrb	r6, [r7, #0]
   23de4:	2eff      	cmp	r6, #255	; 0xff
   23de6:	4604      	mov	r4, r0
   23de8:	d013      	beq.n	23e12 <ll_fal_remove+0x3e>
	uint8_t i = fal_find(id_addr->type, id_addr->a.val, NULL);
   23dea:	4d1b      	ldr	r5, [pc, #108]	; (23e58 <ll_fal_remove+0x84>)
   23dec:	3701      	adds	r7, #1
	for (i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   23dee:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   23df2:	f006 0601 	and.w	r6, r6, #1
   23df6:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   23dfa:	f3c3 0240 	ubfx	r2, r3, #1, #1
   23dfe:	07db      	lsls	r3, r3, #31
   23e00:	d501      	bpl.n	23e06 <ll_fal_remove+0x32>
   23e02:	42b2      	cmp	r2, r6
   23e04:	d007      	beq.n	23e16 <ll_fal_remove+0x42>
	for (i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   23e06:	3401      	adds	r4, #1
   23e08:	2c08      	cmp	r4, #8
   23e0a:	f105 0508 	add.w	r5, r5, #8
   23e0e:	d1f2      	bne.n	23df6 <ll_fal_remove+0x22>
   23e10:	2002      	movs	r0, #2
}
   23e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   23e16:	2206      	movs	r2, #6
   23e18:	4628      	mov	r0, r5
   23e1a:	4639      	mov	r1, r7
   23e1c:	f00a f8f4 	bl	2e008 <memcmp>
   23e20:	2800      	cmp	r0, #0
   23e22:	d1f0      	bne.n	23e06 <ll_fal_remove+0x32>
		uint8_t j = fal[i].rl_idx;
   23e24:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   23e28:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   23e2a:	2b07      	cmp	r3, #7
   23e2c:	d808      	bhi.n	23e40 <ll_fal_remove+0x6c>
			rl[j].fal = 0U;
   23e2e:	4a0b      	ldr	r2, [pc, #44]	; (23e5c <ll_fal_remove+0x88>)
   23e30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   23e34:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   23e38:	f360 1145 	bfi	r1, r0, #5, #1
   23e3c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		fal[i].taken = 0U;
   23e40:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   23e44:	f36f 0300 	bfc	r3, #0, #1
   23e48:	f808 3034 	strb.w	r3, [r8, r4, lsl #3]
		return 0;
   23e4c:	2000      	movs	r0, #0
}
   23e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   23e52:	200c      	movs	r0, #12
}
   23e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23e58:	20002a52 	.word	0x20002a52
   23e5c:	20002b7c 	.word	0x20002b7c

00023e60 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   23e60:	2807      	cmp	r0, #7
{
   23e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23e66:	4604      	mov	r4, r0
   23e68:	460e      	mov	r6, r1
   23e6a:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   23e6c:	d817      	bhi.n	23e9e <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   23e6e:	4d1a      	ldr	r5, [pc, #104]	; (23ed8 <ll_rl_id_addr_get+0x78>)
   23e70:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   23e74:	00a7      	lsls	r7, r4, #2
   23e76:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   23e7a:	07db      	lsls	r3, r3, #31
   23e7c:	d51d      	bpl.n	23eba <ll_rl_id_addr_get+0x5a>
	*id_addr_type = rl[rl_idx].id_addr_type;
   23e7e:	4427      	add	r7, r4
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   23e80:	2128      	movs	r1, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   23e82:	f815 3037 	ldrb.w	r3, [r5, r7, lsl #3]
   23e86:	f3c3 1380 	ubfx	r3, r3, #6, #1
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   23e8a:	fb01 5104 	mla	r1, r1, r4, r5
	*id_addr_type = rl[rl_idx].id_addr_type;
   23e8e:	7033      	strb	r3, [r6, #0]
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   23e90:	4640      	mov	r0, r8
   23e92:	2206      	movs	r2, #6
}
   23e94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   23e98:	3101      	adds	r1, #1
   23e9a:	f00a b8c6 	b.w	2e02a <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   23e9e:	4a0f      	ldr	r2, [pc, #60]	; (23edc <ll_rl_id_addr_get+0x7c>)
   23ea0:	490f      	ldr	r1, [pc, #60]	; (23ee0 <ll_rl_id_addr_get+0x80>)
   23ea2:	4810      	ldr	r0, [pc, #64]	; (23ee4 <ll_rl_id_addr_get+0x84>)
   23ea4:	f44f 7389 	mov.w	r3, #274	; 0x112
   23ea8:	f008 f88d 	bl	2bfc6 <assert_print>
   23eac:	4040      	eors	r0, r0
   23eae:	f380 8811 	msr	BASEPRI, r0
   23eb2:	f04f 0003 	mov.w	r0, #3
   23eb6:	df02      	svc	2
   23eb8:	e7d9      	b.n	23e6e <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   23eba:	4a08      	ldr	r2, [pc, #32]	; (23edc <ll_rl_id_addr_get+0x7c>)
   23ebc:	490a      	ldr	r1, [pc, #40]	; (23ee8 <ll_rl_id_addr_get+0x88>)
   23ebe:	4809      	ldr	r0, [pc, #36]	; (23ee4 <ll_rl_id_addr_get+0x84>)
   23ec0:	f240 1313 	movw	r3, #275	; 0x113
   23ec4:	f008 f87f 	bl	2bfc6 <assert_print>
   23ec8:	4040      	eors	r0, r0
   23eca:	f380 8811 	msr	BASEPRI, r0
   23ece:	f04f 0003 	mov.w	r0, #3
   23ed2:	df02      	svc	2
   23ed4:	e7d3      	b.n	23e7e <ll_rl_id_addr_get+0x1e>
   23ed6:	bf00      	nop
   23ed8:	20002b7c 	.word	0x20002b7c
   23edc:	000338fc 	.word	0x000338fc
   23ee0:	00033940 	.word	0x00033940
   23ee4:	00032fc4 	.word	0x00032fc4
   23ee8:	0003394c 	.word	0x0003394c

00023eec <ll_rl_size_get>:
   23eec:	2008      	movs	r0, #8
   23eee:	4770      	bx	lr

00023ef0 <ll_rl_clear>:
{
   23ef0:	b510      	push	{r4, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   23ef2:	2000      	movs	r0, #0
   23ef4:	f7fa fe5c 	bl	1ebb0 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   23ef8:	bb88      	cbnz	r0, 23f5e <ll_rl_clear+0x6e>
		rl[i].taken = 0U;
   23efa:	4b1a      	ldr	r3, [pc, #104]	; (23f64 <ll_rl_clear+0x74>)
	peer_irk_count = 0U;
   23efc:	4c1a      	ldr	r4, [pc, #104]	; (23f68 <ll_rl_clear+0x78>)
		rl[i].taken = 0U;
   23efe:	7819      	ldrb	r1, [r3, #0]
   23f00:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
	peer_irk_count = 0U;
   23f04:	7020      	strb	r0, [r4, #0]
		rl[i].taken = 0U;
   23f06:	f360 0100 	bfi	r1, r0, #0, #1
   23f0a:	f360 0200 	bfi	r2, r0, #0, #1
   23f0e:	7019      	strb	r1, [r3, #0]
   23f10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   23f14:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
   23f18:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   23f1c:	f360 0100 	bfi	r1, r0, #0, #1
   23f20:	f360 0200 	bfi	r2, r0, #0, #1
   23f24:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
   23f28:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   23f2c:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
   23f30:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   23f34:	f360 0100 	bfi	r1, r0, #0, #1
   23f38:	f360 0200 	bfi	r2, r0, #0, #1
   23f3c:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
   23f40:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   23f44:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   23f48:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   23f4c:	f360 0100 	bfi	r1, r0, #0, #1
   23f50:	f360 0200 	bfi	r2, r0, #0, #1
   23f54:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   23f58:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   23f5c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   23f5e:	200c      	movs	r0, #12
}
   23f60:	bd10      	pop	{r4, pc}
   23f62:	bf00      	nop
   23f64:	20002b7c 	.word	0x20002b7c
   23f68:	20003420 	.word	0x20003420

00023f6c <ll_rl_remove>:
{
   23f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23f70:	4681      	mov	r9, r0
   23f72:	b083      	sub	sp, #12
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   23f74:	2000      	movs	r0, #0
   23f76:	f7fa fe1b 	bl	1ebb0 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   23f7a:	2800      	cmp	r0, #0
   23f7c:	d149      	bne.n	24012 <ll_rl_remove+0xa6>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   23f7e:	46ca      	mov	sl, r9
   23f80:	4e4e      	ldr	r6, [pc, #312]	; (240bc <ll_rl_remove+0x150>)
   23f82:	f81a 8b01 	ldrb.w	r8, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   23f86:	4604      	mov	r4, r0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   23f88:	f008 0801 	and.w	r8, r8, #1
   23f8c:	1e75      	subs	r5, r6, #1
   23f8e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   23f92:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
   23f96:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   23f9a:	f3c2 1380 	ubfx	r3, r2, #6, #1
   23f9e:	07d2      	lsls	r2, r2, #31
   23fa0:	ea4f 0784 	mov.w	r7, r4, lsl #2
   23fa4:	d501      	bpl.n	23faa <ll_rl_remove+0x3e>
   23fa6:	4543      	cmp	r3, r8
   23fa8:	d008      	beq.n	23fbc <ll_rl_remove+0x50>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   23faa:	3401      	adds	r4, #1
   23fac:	2c08      	cmp	r4, #8
   23fae:	f106 0628 	add.w	r6, r6, #40	; 0x28
   23fb2:	d1ec      	bne.n	23f8e <ll_rl_remove+0x22>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   23fb4:	2002      	movs	r0, #2
}
   23fb6:	b003      	add	sp, #12
   23fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   23fbc:	4630      	mov	r0, r6
   23fbe:	2206      	movs	r2, #6
   23fc0:	4651      	mov	r1, sl
   23fc2:	f00a f821 	bl	2e008 <memcmp>
   23fc6:	4603      	mov	r3, r0
   23fc8:	2800      	cmp	r0, #0
   23fca:	d1ee      	bne.n	23faa <ll_rl_remove+0x3e>
		if (rl[i].pirk) {
   23fcc:	f89b 2000 	ldrb.w	r2, [fp]
   23fd0:	0752      	lsls	r2, r2, #29
   23fd2:	d430      	bmi.n	24036 <ll_rl_remove+0xca>
		j = fal_find(id_addr->type, id_addr->a.val, NULL);
   23fd4:	f899 9000 	ldrb.w	r9, [r9]
	for (i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   23fd8:	4e39      	ldr	r6, [pc, #228]	; (240c0 <ll_rl_remove+0x154>)
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   23fda:	f009 0901 	and.w	r9, r9, #1
   23fde:	f1a6 0802 	sub.w	r8, r6, #2
   23fe2:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   23fe6:	07d0      	lsls	r0, r2, #31
   23fe8:	f3c2 0140 	ubfx	r1, r2, #1, #1
   23fec:	d501      	bpl.n	23ff2 <ll_rl_remove+0x86>
   23fee:	4549      	cmp	r1, r9
   23ff0:	d013      	beq.n	2401a <ll_rl_remove+0xae>
	for (i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   23ff2:	3301      	adds	r3, #1
   23ff4:	2b08      	cmp	r3, #8
   23ff6:	f106 0608 	add.w	r6, r6, #8
   23ffa:	d1f2      	bne.n	23fe2 <ll_rl_remove+0x76>
		rl[i].taken = 0U;
   23ffc:	443c      	add	r4, r7
		return 0;
   23ffe:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   24000:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   24004:	f36f 0300 	bfc	r3, #0, #1
   24008:	f805 3034 	strb.w	r3, [r5, r4, lsl #3]
}
   2400c:	b003      	add	sp, #12
   2400e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   24012:	200c      	movs	r0, #12
}
   24014:	b003      	add	sp, #12
   24016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   2401a:	2206      	movs	r2, #6
   2401c:	4630      	mov	r0, r6
   2401e:	4651      	mov	r1, sl
   24020:	9301      	str	r3, [sp, #4]
   24022:	f009 fff1 	bl	2e008 <memcmp>
   24026:	9b01      	ldr	r3, [sp, #4]
   24028:	2800      	cmp	r0, #0
   2402a:	d1e2      	bne.n	23ff2 <ll_rl_remove+0x86>
			fal[j].rl_idx = FILTER_IDX_NONE;
   2402c:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   24030:	22ff      	movs	r2, #255	; 0xff
   24032:	705a      	strb	r2, [r3, #1]
   24034:	e7e2      	b.n	23ffc <ll_rl_remove+0x90>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   24036:	f8df 808c 	ldr.w	r8, [pc, #140]	; 240c4 <ll_rl_remove+0x158>
   2403a:	f898 6000 	ldrb.w	r6, [r8]
   2403e:	3e01      	subs	r6, #1
			if (pj && pi != pj) {
   24040:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   24044:	d003      	beq.n	2404e <ll_rl_remove+0xe2>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   24046:	f89b b017 	ldrb.w	fp, [fp, #23]
			if (pj && pi != pj) {
   2404a:	45b3      	cmp	fp, r6
   2404c:	d102      	bne.n	24054 <ll_rl_remove+0xe8>
			peer_irk_count--;
   2404e:	f888 6000 	strb.w	r6, [r8]
   24052:	e7bf      	b.n	23fd4 <ll_rl_remove+0x68>
				(void)memcpy(peer_irks[pi], peer_irks[pj],
   24054:	481c      	ldr	r0, [pc, #112]	; (240c8 <ll_rl_remove+0x15c>)
   24056:	9301      	str	r3, [sp, #4]
   24058:	2210      	movs	r2, #16
   2405a:	eb00 1106 	add.w	r1, r0, r6, lsl #4
   2405e:	eb00 100b 	add.w	r0, r0, fp, lsl #4
   24062:	f009 ffe2 	bl	2e02a <memcpy>
   24066:	9b01      	ldr	r3, [sp, #4]
   24068:	f8df c060 	ldr.w	ip, [pc, #96]	; 240cc <ll_rl_remove+0x160>
   2406c:	461a      	mov	r2, r3
					if (rl[k].taken && rl[k].pirk &&
   2406e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   24072:	fa5f fe82 	uxtb.w	lr, r2
   24076:	f815 0031 	ldrb.w	r0, [r5, r1, lsl #3]
   2407a:	f010 0f01 	tst.w	r0, #1
   2407e:	f102 0201 	add.w	r2, r2, #1
   24082:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
   24086:	d005      	beq.n	24094 <ll_rl_remove+0x128>
   24088:	0740      	lsls	r0, r0, #29
   2408a:	d503      	bpl.n	24094 <ll_rl_remove+0x128>
   2408c:	f89c 0017 	ldrb.w	r0, [ip, #23]
   24090:	42b0      	cmp	r0, r6
   24092:	d008      	beq.n	240a6 <ll_rl_remove+0x13a>
				for (k = 0U;
   24094:	2a08      	cmp	r2, #8
   24096:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
   2409a:	d1e8      	bne.n	2406e <ll_rl_remove+0x102>
			peer_irk_count--;
   2409c:	f898 6000 	ldrb.w	r6, [r8]
   240a0:	3e01      	subs	r6, #1
   240a2:	b2f6      	uxtb	r6, r6
   240a4:	e7d3      	b.n	2404e <ll_rl_remove+0xe2>
   240a6:	f898 6000 	ldrb.w	r6, [r8]
						peer_irk_rl_ids[pi] = k;
   240aa:	4a09      	ldr	r2, [pc, #36]	; (240d0 <ll_rl_remove+0x164>)
						rl[k].pirk_idx = pi;
   240ac:	f881 b017 	strb.w	fp, [r1, #23]
			peer_irk_count--;
   240b0:	3e01      	subs	r6, #1
						peer_irk_rl_ids[pi] = k;
   240b2:	f802 e00b 	strb.w	lr, [r2, fp]
			peer_irk_count--;
   240b6:	b2f6      	uxtb	r6, r6
						break;
   240b8:	e7c9      	b.n	2404e <ll_rl_remove+0xe2>
   240ba:	bf00      	nop
   240bc:	20002b7d 	.word	0x20002b7d
   240c0:	20002a52 	.word	0x20002a52
   240c4:	20003420 	.word	0x20003420
   240c8:	20002afc 	.word	0x20002afc
   240cc:	20002b7c 	.word	0x20002b7c
   240d0:	20002af4 	.word	0x20002af4

000240d4 <ll_rl_crpa_set>:
{
   240d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   240d8:	795c      	ldrb	r4, [r3, #5]
   240da:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   240de:	2c40      	cmp	r4, #64	; 0x40
   240e0:	d001      	beq.n	240e6 <ll_rl_crpa_set+0x12>
}
   240e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (id_addr) {
   240e6:	461e      	mov	r6, r3
   240e8:	460f      	mov	r7, r1
   240ea:	b301      	cbz	r1, 2412e <ll_rl_crpa_set+0x5a>
   240ec:	f8df 9068 	ldr.w	r9, [pc, #104]	; 24158 <ll_rl_crpa_set+0x84>
   240f0:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   240f2:	f000 0a01 	and.w	sl, r0, #1
   240f6:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   240fa:	e003      	b.n	24104 <ll_rl_crpa_set+0x30>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   240fc:	2c08      	cmp	r4, #8
   240fe:	f109 0928 	add.w	r9, r9, #40	; 0x28
   24102:	d0ee      	beq.n	240e2 <ll_rl_crpa_set+0xe>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   24104:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   24108:	4625      	mov	r5, r4
   2410a:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   2410e:	f3c2 1380 	ubfx	r3, r2, #6, #1
   24112:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   24114:	f104 0401 	add.w	r4, r4, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   24118:	d5f0      	bpl.n	240fc <ll_rl_crpa_set+0x28>
   2411a:	4553      	cmp	r3, sl
   2411c:	d1ee      	bne.n	240fc <ll_rl_crpa_set+0x28>
   2411e:	4648      	mov	r0, r9
   24120:	2206      	movs	r2, #6
   24122:	4639      	mov	r1, r7
   24124:	f009 ff70 	bl	2e008 <memcmp>
   24128:	2800      	cmp	r0, #0
   2412a:	d1e7      	bne.n	240fc <ll_rl_crpa_set+0x28>
   2412c:	e004      	b.n	24138 <ll_rl_crpa_set+0x64>
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   2412e:	2a07      	cmp	r2, #7
   24130:	d8d7      	bhi.n	240e2 <ll_rl_crpa_set+0xe>
   24132:	f8df 8028 	ldr.w	r8, [pc, #40]	; 2415c <ll_rl_crpa_set+0x88>
   24136:	4615      	mov	r5, r2
   24138:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   2413c:	00e8      	lsls	r0, r5, #3
   2413e:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   24142:	07db      	lsls	r3, r3, #31
   24144:	d5cd      	bpl.n	240e2 <ll_rl_crpa_set+0xe>
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   24146:	3018      	adds	r0, #24
   24148:	4631      	mov	r1, r6
   2414a:	4440      	add	r0, r8
   2414c:	2206      	movs	r2, #6
}
   2414e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   24152:	f009 bf6a 	b.w	2e02a <memcpy>
   24156:	bf00      	nop
   24158:	20002b7d 	.word	0x20002b7d
   2415c:	20002b7c 	.word	0x20002b7c

00024160 <ll_rl_crpa_get>:
{
   24160:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   24164:	4682      	mov	sl, r0
   24166:	4e1a      	ldr	r6, [pc, #104]	; (241d0 <ll_rl_crpa_get+0x70>)
   24168:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
   2416c:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   2416e:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   24170:	f008 0801 	and.w	r8, r8, #1
   24174:	1e77      	subs	r7, r6, #1
   24176:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   2417a:	00d5      	lsls	r5, r2, #3
   2417c:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   24180:	f3c3 1280 	ubfx	r2, r3, #6, #1
   24184:	07db      	lsls	r3, r3, #31
   24186:	f104 0401 	add.w	r4, r4, #1
   2418a:	d501      	bpl.n	24190 <ll_rl_crpa_get+0x30>
   2418c:	4542      	cmp	r2, r8
   2418e:	d006      	beq.n	2419e <ll_rl_crpa_get+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   24190:	2c08      	cmp	r4, #8
   24192:	f106 0628 	add.w	r6, r6, #40	; 0x28
   24196:	d1ee      	bne.n	24176 <ll_rl_crpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   24198:	2002      	movs	r0, #2
}
   2419a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   2419e:	4630      	mov	r0, r6
   241a0:	2206      	movs	r2, #6
   241a2:	4651      	mov	r1, sl
   241a4:	f009 ff30 	bl	2e008 <memcmp>
   241a8:	4683      	mov	fp, r0
   241aa:	2800      	cmp	r0, #0
   241ac:	d1f0      	bne.n	24190 <ll_rl_crpa_get+0x30>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   241ae:	f105 0218 	add.w	r2, r5, #24
   241b2:	4417      	add	r7, r2
   241b4:	2106      	movs	r1, #6
   241b6:	4638      	mov	r0, r7
   241b8:	f7f6 f818 	bl	1a1ec <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   241bc:	2800      	cmp	r0, #0
   241be:	d0eb      	beq.n	24198 <ll_rl_crpa_get+0x38>
   241c0:	2206      	movs	r2, #6
   241c2:	4639      	mov	r1, r7
   241c4:	4648      	mov	r0, r9
   241c6:	f009 ff30 	bl	2e02a <memcpy>
		return 0;
   241ca:	4658      	mov	r0, fp
}
   241cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   241d0:	20002b7d 	.word	0x20002b7d

000241d4 <ll_rl_lrpa_get>:
{
   241d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   241d8:	4681      	mov	r9, r0
   241da:	4e16      	ldr	r6, [pc, #88]	; (24234 <ll_rl_lrpa_get+0x60>)
   241dc:	f819 8b01 	ldrb.w	r8, [r9], #1
{
   241e0:	468a      	mov	sl, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   241e2:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   241e4:	f008 0801 	and.w	r8, r8, #1
   241e8:	1e77      	subs	r7, r6, #1
   241ea:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   241ee:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   241f2:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   241f6:	f3c3 1280 	ubfx	r2, r3, #6, #1
   241fa:	07db      	lsls	r3, r3, #31
   241fc:	f104 0401 	add.w	r4, r4, #1
   24200:	d501      	bpl.n	24206 <ll_rl_lrpa_get+0x32>
   24202:	4542      	cmp	r2, r8
   24204:	d006      	beq.n	24214 <ll_rl_lrpa_get+0x40>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   24206:	2c08      	cmp	r4, #8
   24208:	f106 0628 	add.w	r6, r6, #40	; 0x28
   2420c:	d1ed      	bne.n	241ea <ll_rl_lrpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   2420e:	2002      	movs	r0, #2
}
   24210:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   24214:	4630      	mov	r0, r6
   24216:	2206      	movs	r2, #6
   24218:	4649      	mov	r1, r9
   2421a:	f009 fef5 	bl	2e008 <memcmp>
   2421e:	4683      	mov	fp, r0
   24220:	2800      	cmp	r0, #0
   24222:	d1f0      	bne.n	24206 <ll_rl_lrpa_get+0x32>
   24224:	6a69      	ldr	r1, [r5, #36]	; 0x24
   24226:	2206      	movs	r2, #6
   24228:	4650      	mov	r0, sl
   2422a:	f009 fefe 	bl	2e02a <memcpy>
		return 0;
   2422e:	4658      	mov	r0, fp
}
   24230:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24234:	20002b7d 	.word	0x20002b7d

00024238 <ll_rl_enable>:
{
   24238:	b510      	push	{r4, lr}
   2423a:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   2423c:	2000      	movs	r0, #0
   2423e:	f7fa fcb7 	bl	1ebb0 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   24242:	b958      	cbnz	r0, 2425c <ll_rl_enable+0x24>
	switch (enable) {
   24244:	b134      	cbz	r4, 24254 <ll_rl_enable+0x1c>
   24246:	2c01      	cmp	r4, #1
   24248:	d001      	beq.n	2424e <ll_rl_enable+0x16>
   2424a:	2012      	movs	r0, #18
}
   2424c:	bd10      	pop	{r4, pc}
		rl_enable = 1U;
   2424e:	4b04      	ldr	r3, [pc, #16]	; (24260 <ll_rl_enable+0x28>)
   24250:	701c      	strb	r4, [r3, #0]
}
   24252:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   24254:	4b02      	ldr	r3, [pc, #8]	; (24260 <ll_rl_enable+0x28>)
   24256:	701c      	strb	r4, [r3, #0]
	return 0;
   24258:	4620      	mov	r0, r4
}
   2425a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   2425c:	200c      	movs	r0, #12
}
   2425e:	bd10      	pop	{r4, pc}
   24260:	20003421 	.word	0x20003421

00024264 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   24264:	4b03      	ldr	r3, [pc, #12]	; (24274 <ll_rl_timeout_set+0x10>)
   24266:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2426a:	fb02 f000 	mul.w	r0, r2, r0
   2426e:	6018      	str	r0, [r3, #0]
}
   24270:	4770      	bx	lr
   24272:	bf00      	nop
   24274:	20002cf0 	.word	0x20002cf0

00024278 <ll_priv_mode_set>:
{
   24278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2427c:	4682      	mov	sl, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   2427e:	2000      	movs	r0, #0
{
   24280:	4688      	mov	r8, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   24282:	f7fa fc95 	bl	1ebb0 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   24286:	bb68      	cbnz	r0, 242e4 <ll_priv_mode_set+0x6c>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   24288:	4e1d      	ldr	r6, [pc, #116]	; (24300 <ll_priv_mode_set+0x88>)
   2428a:	f81a 9b01 	ldrb.w	r9, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   2428e:	4604      	mov	r4, r0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   24290:	f009 0901 	and.w	r9, r9, #1
   24294:	1e77      	subs	r7, r6, #1
   24296:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   2429a:	00d5      	lsls	r5, r2, #3
   2429c:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   242a0:	f3c3 1280 	ubfx	r2, r3, #6, #1
   242a4:	07db      	lsls	r3, r3, #31
   242a6:	f104 0401 	add.w	r4, r4, #1
   242aa:	d501      	bpl.n	242b0 <ll_priv_mode_set+0x38>
   242ac:	454a      	cmp	r2, r9
   242ae:	d006      	beq.n	242be <ll_priv_mode_set+0x46>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   242b0:	2c08      	cmp	r4, #8
   242b2:	f106 0628 	add.w	r6, r6, #40	; 0x28
   242b6:	d1ee      	bne.n	24296 <ll_priv_mode_set+0x1e>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   242b8:	2002      	movs	r0, #2
}
   242ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   242be:	4630      	mov	r0, r6
   242c0:	2206      	movs	r2, #6
   242c2:	4651      	mov	r1, sl
   242c4:	f009 fea0 	bl	2e008 <memcmp>
   242c8:	2800      	cmp	r0, #0
   242ca:	d1f1      	bne.n	242b0 <ll_priv_mode_set+0x38>
		switch (mode) {
   242cc:	f1b8 0f00 	cmp.w	r8, #0
   242d0:	d00e      	beq.n	242f0 <ll_priv_mode_set+0x78>
   242d2:	f1b8 0f01 	cmp.w	r8, #1
   242d6:	d108      	bne.n	242ea <ll_priv_mode_set+0x72>
			rl[i].dev = 1U;
   242d8:	5d7b      	ldrb	r3, [r7, r5]
   242da:	f043 0310 	orr.w	r3, r3, #16
   242de:	557b      	strb	r3, [r7, r5]
}
   242e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   242e4:	200c      	movs	r0, #12
}
   242e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (mode) {
   242ea:	2012      	movs	r0, #18
}
   242ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rl[i].dev = 0U;
   242f0:	5d7b      	ldrb	r3, [r7, r5]
   242f2:	f368 1304 	bfi	r3, r8, #4, #1
   242f6:	557b      	strb	r3, [r7, r5]
	return 0;
   242f8:	4640      	mov	r0, r8
}
   242fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   242fe:	bf00      	nop
   24300:	20002b7d 	.word	0x20002b7d

00024304 <ull_filter_reset>:
{
   24304:	b4d0      	push	{r4, r6, r7}
   24306:	4930      	ldr	r1, [pc, #192]	; (243c8 <ull_filter_reset+0xc4>)
   24308:	4c30      	ldr	r4, [pc, #192]	; (243cc <ull_filter_reset+0xc8>)
	for (int i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   2430a:	2300      	movs	r3, #0
		uint8_t j = fal[i].rl_idx;
   2430c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   24310:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   24312:	2a07      	cmp	r2, #7
			rl[j].fal = 0U;
   24314:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   24318:	d805      	bhi.n	24326 <ull_filter_reset+0x22>
			rl[j].fal = 0U;
   2431a:	f811 203c 	ldrb.w	r2, [r1, ip, lsl #3]
   2431e:	f36f 1245 	bfc	r2, #5, #1
   24322:	f801 203c 	strb.w	r2, [r1, ip, lsl #3]
		fal[i].taken = 0U;
   24326:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   2432a:	f36f 0200 	bfc	r2, #0, #1
   2432e:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   24332:	3301      	adds	r3, #1
   24334:	2b08      	cmp	r3, #8
   24336:	d1e9      	bne.n	2430c <ull_filter_reset+0x8>
	rl_enable = 0U;
   24338:	4a25      	ldr	r2, [pc, #148]	; (243d0 <ull_filter_reset+0xcc>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   2433a:	4c26      	ldr	r4, [pc, #152]	; (243d4 <ull_filter_reset+0xd0>)
	rl_enable = 0U;
   2433c:	2300      	movs	r3, #0
   2433e:	7013      	strb	r3, [r2, #0]
		rl[i].taken = 0U;
   24340:	780a      	ldrb	r2, [r1, #0]
   24342:	f363 0200 	bfi	r2, r3, #0, #1
   24346:	700a      	strb	r2, [r1, #0]
   24348:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
   2434c:	f363 0200 	bfi	r2, r3, #0, #1
   24350:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
   24354:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
   24358:	f363 0200 	bfi	r2, r3, #0, #1
   2435c:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
   24360:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   24364:	f363 0200 	bfi	r2, r3, #0, #1
   24368:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   2436c:	f891 20a0 	ldrb.w	r2, [r1, #160]	; 0xa0
   24370:	f363 0200 	bfi	r2, r3, #0, #1
   24374:	f881 20a0 	strb.w	r2, [r1, #160]	; 0xa0
   24378:	f891 20c8 	ldrb.w	r2, [r1, #200]	; 0xc8
   2437c:	f363 0200 	bfi	r2, r3, #0, #1
   24380:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
   24384:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
   24388:	f363 0200 	bfi	r2, r3, #0, #1
   2438c:	f881 20f0 	strb.w	r2, [r1, #240]	; 0xf0
   24390:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
   24394:	f363 0200 	bfi	r2, r3, #0, #1
   24398:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   2439c:	4a0e      	ldr	r2, [pc, #56]	; (243d8 <ull_filter_reset+0xd4>)
   2439e:	7013      	strb	r3, [r2, #0]
	rpa_last_ms = -1;
   243a0:	4b0e      	ldr	r3, [pc, #56]	; (243dc <ull_filter_reset+0xd8>)
   243a2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   243a6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   243aa:	e9c3 6700 	strd	r6, r7, [r3]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   243ae:	4b0c      	ldr	r3, [pc, #48]	; (243e0 <ull_filter_reset+0xdc>)
   243b0:	6023      	str	r3, [r4, #0]
	if (init) {
   243b2:	b120      	cbz	r0, 243be <ull_filter_reset+0xba>
}
   243b4:	bcd0      	pop	{r4, r6, r7}
		k_work_init_delayable(&rpa_work, rpa_timeout);
   243b6:	490b      	ldr	r1, [pc, #44]	; (243e4 <ull_filter_reset+0xe0>)
   243b8:	480b      	ldr	r0, [pc, #44]	; (243e8 <ull_filter_reset+0xe4>)
   243ba:	f00d baa2 	b.w	31902 <k_work_init_delayable>
}
   243be:	bcd0      	pop	{r4, r6, r7}
		k_work_cancel_delayable(&rpa_work);
   243c0:	4809      	ldr	r0, [pc, #36]	; (243e8 <ull_filter_reset+0xe4>)
   243c2:	f00d baaa 	b.w	3191a <k_work_cancel_delayable>
   243c6:	bf00      	nop
   243c8:	20002b7c 	.word	0x20002b7c
   243cc:	20002a50 	.word	0x20002a50
   243d0:	20003421 	.word	0x20003421
   243d4:	20002cf0 	.word	0x20002cf0
   243d8:	20003420 	.word	0x20003420
   243dc:	20001b28 	.word	0x20001b28
   243e0:	000dbba0 	.word	0x000dbba0
   243e4:	00024661 	.word	0x00024661
   243e8:	20001b30 	.word	0x20001b30

000243ec <ull_filter_lll_get>:
		return &fal_filter;
   243ec:	4a03      	ldr	r2, [pc, #12]	; (243fc <ull_filter_lll_get+0x10>)
   243ee:	4b04      	ldr	r3, [pc, #16]	; (24400 <ull_filter_lll_get+0x14>)
}
   243f0:	2800      	cmp	r0, #0
   243f2:	bf0c      	ite	eq
   243f4:	4610      	moveq	r0, r2
   243f6:	4618      	movne	r0, r3
   243f8:	4770      	bx	lr
   243fa:	bf00      	nop
   243fc:	20002cbc 	.word	0x20002cbc
   24400:	20002a90 	.word	0x20002a90

00024404 <ull_filter_adv_scan_state_cb>:
	if (bm) {
   24404:	b1a8      	cbz	r0, 24432 <ull_filter_adv_scan_state_cb+0x2e>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   24406:	4a0c      	ldr	r2, [pc, #48]	; (24438 <ull_filter_adv_scan_state_cb+0x34>)
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   24408:	6812      	ldr	r2, [r2, #0]
{
   2440a:	b510      	push	{r4, lr}
   2440c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   24410:	f240 30e7 	movw	r0, #999	; 0x3e7
   24414:	2100      	movs	r1, #0
   24416:	fbe2 0103 	umlal	r0, r1, r2, r3
   2441a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2441e:	2300      	movs	r3, #0
   24420:	f7e7 ff6e 	bl	c300 <__aeabi_uldivmod>
}
   24424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24428:	4602      	mov	r2, r0
   2442a:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   2442c:	4803      	ldr	r0, [pc, #12]	; (2443c <ull_filter_adv_scan_state_cb+0x38>)
   2442e:	f006 bb01 	b.w	2aa34 <k_work_schedule>
	k_work_cancel_delayable(&rpa_work);
   24432:	4802      	ldr	r0, [pc, #8]	; (2443c <ull_filter_adv_scan_state_cb+0x38>)
   24434:	f00d ba71 	b.w	3191a <k_work_cancel_delayable>
   24438:	20002cf0 	.word	0x20002cf0
   2443c:	20001b30 	.word	0x20001b30

00024440 <ull_filter_adv_update>:
{
   24440:	b508      	push	{r3, lr}
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   24442:	4b09      	ldr	r3, [pc, #36]	; (24468 <ull_filter_adv_update+0x28>)
   24444:	2200      	movs	r2, #0
   24446:	801a      	strh	r2, [r3, #0]
	if (adv_fp &&
   24448:	b930      	cbnz	r0, 24458 <ull_filter_adv_update+0x18>
	if (rl_enable &&
   2444a:	4b08      	ldr	r3, [pc, #32]	; (2446c <ull_filter_adv_update+0x2c>)
	filter->enable_bitmask = 0;
   2444c:	4a08      	ldr	r2, [pc, #32]	; (24470 <ull_filter_adv_update+0x30>)
	if (rl_enable &&
   2444e:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   24450:	2100      	movs	r1, #0
   24452:	8011      	strh	r1, [r2, #0]
	if (rl_enable &&
   24454:	b91b      	cbnz	r3, 2445e <ull_filter_adv_update+0x1e>
}
   24456:	bd08      	pop	{r3, pc}
		fal_update();
   24458:	f7ff fbb0 	bl	23bbc <fal_update>
   2445c:	e7f5      	b.n	2444a <ull_filter_adv_update+0xa>
}
   2445e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   24462:	f7ff bb73 	b.w	23b4c <rl_update>
   24466:	bf00      	nop
   24468:	20002a90 	.word	0x20002a90
   2446c:	20003421 	.word	0x20003421
   24470:	20002cbc 	.word	0x20002cbc

00024474 <ull_filter_rpa_update>:
{
   24474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24478:	4683      	mov	fp, r0
   2447a:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   2447c:	f00d fbe2 	bl	31c44 <z_impl_k_uptime_ticks>
   24480:	014b      	lsls	r3, r1, #5
   24482:	0142      	lsls	r2, r0, #5
   24484:	1a12      	subs	r2, r2, r0
   24486:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   2448a:	eb63 0301 	sbc.w	r3, r3, r1
   2448e:	009b      	lsls	r3, r3, #2
   24490:	ea4f 0982 	mov.w	r9, r2, lsl #2
   24494:	eb19 0900 	adds.w	r9, r9, r0
   24498:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
   2449c:	eb41 0103 	adc.w	r1, r1, r3
   244a0:	00cb      	lsls	r3, r1, #3
   244a2:	ea43 7359 	orr.w	r3, r3, r9, lsr #29
   244a6:	0bd9      	lsrs	r1, r3, #15
   244a8:	f3c9 3910 	ubfx	r9, r9, #12, #17
   244ac:	ea49 4943 	orr.w	r9, r9, r3, lsl #17
   244b0:	9101      	str	r1, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   244b2:	f1bb 0f00 	cmp.w	fp, #0
   244b6:	d117      	bne.n	244e8 <ull_filter_rpa_update+0x74>
   244b8:	4a61      	ldr	r2, [pc, #388]	; (24640 <ull_filter_rpa_update+0x1cc>)
   244ba:	e9d2 3200 	ldrd	r3, r2, [r2]
   244be:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   244c2:	bf08      	it	eq
   244c4:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   244c8:	d00e      	beq.n	244e8 <ull_filter_rpa_update+0x74>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   244ca:	ebb9 0303 	subs.w	r3, r9, r3
   244ce:	eb61 0202 	sbc.w	r2, r1, r2
   244d2:	495c      	ldr	r1, [pc, #368]	; (24644 <ull_filter_rpa_update+0x1d0>)
   244d4:	6809      	ldr	r1, [r1, #0]
	bool all = timeout || (rpa_last_ms == -1) ||
   244d6:	428b      	cmp	r3, r1
   244d8:	f172 0300 	sbcs.w	r3, r2, #0
   244dc:	bfac      	ite	ge
   244de:	f04f 0a01 	movge.w	sl, #1
   244e2:	f04f 0a00 	movlt.w	sl, #0
   244e6:	e001      	b.n	244ec <ull_filter_rpa_update+0x78>
   244e8:	f04f 0a01 	mov.w	sl, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   244ec:	4e56      	ldr	r6, [pc, #344]	; (24648 <ull_filter_rpa_update+0x1d4>)
   244ee:	f8df 815c 	ldr.w	r8, [pc, #348]	; 2464c <ull_filter_rpa_update+0x1d8>
	bool all = timeout || (rpa_last_ms == -1) ||
   244f2:	2400      	movs	r4, #0
   244f4:	f1a6 071e 	sub.w	r7, r6, #30
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   244f8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   244fc:	00a5      	lsls	r5, r4, #2
   244fe:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   24502:	07da      	lsls	r2, r3, #31
   24504:	d515      	bpl.n	24532 <ull_filter_rpa_update+0xbe>
   24506:	f1ba 0f00 	cmp.w	sl, #0
   2450a:	d101      	bne.n	24510 <ull_filter_rpa_update+0x9c>
   2450c:	0798      	lsls	r0, r3, #30
   2450e:	d410      	bmi.n	24532 <ull_filter_rpa_update+0xbe>
			if (rl[i].pirk) {
   24510:	192b      	adds	r3, r5, r4
   24512:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   24516:	0759      	lsls	r1, r3, #29
   24518:	d460      	bmi.n	245dc <ull_filter_rpa_update+0x168>
			if (rl[i].lirk) {
   2451a:	192b      	adds	r3, r5, r4
   2451c:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   24520:	071a      	lsls	r2, r3, #28
   24522:	d44a      	bmi.n	245ba <ull_filter_rpa_update+0x146>
			rl[i].rpas_ready = 1U;
   24524:	4425      	add	r5, r4
   24526:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   2452a:	f043 0302 	orr.w	r3, r3, #2
   2452e:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   24532:	3401      	adds	r4, #1
   24534:	2c08      	cmp	r4, #8
   24536:	f108 0806 	add.w	r8, r8, #6
   2453a:	f106 0628 	add.w	r6, r6, #40	; 0x28
   2453e:	d1db      	bne.n	244f8 <ull_filter_rpa_update+0x84>
	if (all) {
   24540:	f1ba 0f00 	cmp.w	sl, #0
   24544:	d004      	beq.n	24550 <ull_filter_rpa_update+0xdc>
		rpa_last_ms = now;
   24546:	4b3e      	ldr	r3, [pc, #248]	; (24640 <ull_filter_rpa_update+0x1cc>)
   24548:	9a01      	ldr	r2, [sp, #4]
   2454a:	f8c3 9000 	str.w	r9, [r3]
   2454e:	605a      	str	r2, [r3, #4]
	if (timeout) {
   24550:	f1bb 0f00 	cmp.w	fp, #0
   24554:	d008      	beq.n	24568 <ull_filter_rpa_update+0xf4>
			adv = ull_adv_is_enabled_get(handle);
   24556:	2000      	movs	r0, #0
   24558:	f7fa fb1c 	bl	1eb94 <ull_adv_is_enabled_get>
			if (adv) {
   2455c:	4604      	mov	r4, r0
   2455e:	b118      	cbz	r0, 24568 <ull_filter_rpa_update+0xf4>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   24560:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   24564:	075b      	lsls	r3, r3, #29
   24566:	d402      	bmi.n	2456e <ull_filter_rpa_update+0xfa>
}
   24568:	b007      	add	sp, #28
   2456a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (lll->rl_idx >= ARRAY_SIZE(rl)) {
   2456e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   24572:	2b07      	cmp	r3, #7
   24574:	d8f8      	bhi.n	24568 <ull_filter_rpa_update+0xf4>
	pri_idx = UINT8_MAX;
   24576:	23ff      	movs	r3, #255	; 0xff
   24578:	f88d 3008 	strb.w	r3, [sp, #8]
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   2457c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   24580:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   24584:	a902      	add	r1, sp, #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   24586:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   24588:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2458c:	f001 fa06 	bl	2599c <lll_adv_pdu_alloc>
		(void)memcpy(pdu, prev, (PDU_AC_LL_HEADER_SIZE + prev->len));
   24590:	7872      	ldrb	r2, [r6, #1]
   24592:	4605      	mov	r5, r0
   24594:	3202      	adds	r2, #2
   24596:	4631      	mov	r1, r6
   24598:	f009 fd47 	bl	2e02a <memcpy>
	if (pdu) {
   2459c:	2d00      	cmp	r5, #0
   2459e:	d0e3      	beq.n	24568 <ull_filter_rpa_update+0xf4>
		ull_adv_pdu_update_addrs(adv, pdu);
   245a0:	4629      	mov	r1, r5
   245a2:	4620      	mov	r0, r4
   245a4:	f7fa fb20 	bl	1ebe8 <ull_adv_pdu_update_addrs>
		if (pri_idx != UINT8_MAX) {
   245a8:	f89d 3008 	ldrb.w	r3, [sp, #8]
   245ac:	2bff      	cmp	r3, #255	; 0xff
   245ae:	d0db      	beq.n	24568 <ull_filter_rpa_update+0xf4>
	pdu->last = idx;
   245b0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
   245b4:	b007      	add	sp, #28
   245b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   245ba:	a902      	add	r1, sp, #8
   245bc:	f1a6 0017 	sub.w	r0, r6, #23
   245c0:	f009 fd8c 	bl	2e0dc <bt_rpa_create>
				LL_ASSERT(!err);
   245c4:	bb70      	cbnz	r0, 24624 <ull_filter_rpa_update+0x1b0>
				rl[i].local_rpa = &rpa;
   245c6:	ab02      	add	r3, sp, #8
   245c8:	f8c6 3006 	str.w	r3, [r6, #6]
   245cc:	4619      	mov	r1, r3
   245ce:	2206      	movs	r2, #6
   245d0:	4640      	mov	r0, r8
   245d2:	f009 fd2a 	bl	2e02a <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   245d6:	f8c6 8006 	str.w	r8, [r6, #6]
   245da:	e7a3      	b.n	24524 <ull_filter_rpa_update+0xb0>
	psrc += length - 1;
   245dc:	f816 3c07 	ldrb.w	r3, [r6, #-7]
   245e0:	4a1b      	ldr	r2, [pc, #108]	; (24650 <ull_filter_rpa_update+0x1dc>)
   245e2:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   245e6:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   245e8:	f10d 0307 	add.w	r3, sp, #7
   245ec:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   245f0:	f812 1901 	ldrb.w	r1, [r2], #-1
   245f4:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   245f8:	4283      	cmp	r3, r0
   245fa:	d1f9      	bne.n	245f0 <ull_filter_rpa_update+0x17c>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   245fc:	4631      	mov	r1, r6
   245fe:	a802      	add	r0, sp, #8
   24600:	f009 fd6c 	bl	2e0dc <bt_rpa_create>
				LL_ASSERT(!err);
   24604:	2800      	cmp	r0, #0
   24606:	d088      	beq.n	2451a <ull_filter_rpa_update+0xa6>
   24608:	4a12      	ldr	r2, [pc, #72]	; (24654 <ull_filter_rpa_update+0x1e0>)
   2460a:	4913      	ldr	r1, [pc, #76]	; (24658 <ull_filter_rpa_update+0x1e4>)
   2460c:	4813      	ldr	r0, [pc, #76]	; (2465c <ull_filter_rpa_update+0x1e8>)
   2460e:	f240 23eb 	movw	r3, #747	; 0x2eb
   24612:	f007 fcd8 	bl	2bfc6 <assert_print>
   24616:	4040      	eors	r0, r0
   24618:	f380 8811 	msr	BASEPRI, r0
   2461c:	f04f 0003 	mov.w	r0, #3
   24620:	df02      	svc	2
   24622:	e77a      	b.n	2451a <ull_filter_rpa_update+0xa6>
				LL_ASSERT(!err);
   24624:	4a0b      	ldr	r2, [pc, #44]	; (24654 <ull_filter_rpa_update+0x1e0>)
   24626:	490c      	ldr	r1, [pc, #48]	; (24658 <ull_filter_rpa_update+0x1e4>)
   24628:	480c      	ldr	r0, [pc, #48]	; (2465c <ull_filter_rpa_update+0x1e8>)
   2462a:	f44f 733e 	mov.w	r3, #760	; 0x2f8
   2462e:	f007 fcca 	bl	2bfc6 <assert_print>
   24632:	4040      	eors	r0, r0
   24634:	f380 8811 	msr	BASEPRI, r0
   24638:	f04f 0003 	mov.w	r0, #3
   2463c:	df02      	svc	2
   2463e:	e7c2      	b.n	245c6 <ull_filter_rpa_update+0x152>
   24640:	20001b28 	.word	0x20001b28
   24644:	20002cf0 	.word	0x20002cf0
   24648:	20002b9a 	.word	0x20002b9a
   2464c:	20002ac4 	.word	0x20002ac4
   24650:	20002afc 	.word	0x20002afc
   24654:	000338fc 	.word	0x000338fc
   24658:	00033300 	.word	0x00033300
   2465c:	00032fc4 	.word	0x00032fc4

00024660 <rpa_timeout>:
{
   24660:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   24662:	2001      	movs	r0, #1
   24664:	f7ff ff06 	bl	24474 <ull_filter_rpa_update>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   24668:	4a0a      	ldr	r2, [pc, #40]	; (24694 <rpa_timeout+0x34>)
   2466a:	6812      	ldr	r2, [r2, #0]
   2466c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   24670:	f240 30e7 	movw	r0, #999	; 0x3e7
   24674:	2100      	movs	r1, #0
   24676:	fbe2 0103 	umlal	r0, r1, r2, r3
   2467a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2467e:	2300      	movs	r3, #0
   24680:	f7e7 fe3e 	bl	c300 <__aeabi_uldivmod>
}
   24684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24688:	4602      	mov	r2, r0
   2468a:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   2468c:	4802      	ldr	r0, [pc, #8]	; (24698 <rpa_timeout+0x38>)
   2468e:	f006 b9d1 	b.w	2aa34 <k_work_schedule>
   24692:	bf00      	nop
   24694:	20002cf0 	.word	0x20002cf0
   24698:	20001b30 	.word	0x20001b30

0002469c <ull_filter_adva_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   2469c:	2807      	cmp	r0, #7
   2469e:	d813      	bhi.n	246c8 <ull_filter_adva_get+0x2c>
{
   246a0:	b570      	push	{r4, r5, r6, lr}
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   246a2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   246a6:	4d10      	ldr	r5, [pc, #64]	; (246e8 <ull_filter_adva_get+0x4c>)
   246a8:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   246ac:	071a      	lsls	r2, r3, #28
   246ae:	4604      	mov	r4, r0
   246b0:	ea4f 0680 	mov.w	r6, r0, lsl #2
   246b4:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   246b8:	d505      	bpl.n	246c6 <ull_filter_adva_get+0x2a>
		LL_ASSERT(rl[rl_idx].rpas_ready);
   246ba:	079b      	lsls	r3, r3, #30
   246bc:	d506      	bpl.n	246cc <ull_filter_adva_get+0x30>
		return rl[rl_idx].local_rpa->val;
   246be:	4434      	add	r4, r6
   246c0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   246c4:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   246c6:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   246c8:	2000      	movs	r0, #0
}
   246ca:	4770      	bx	lr
		LL_ASSERT(rl[rl_idx].rpas_ready);
   246cc:	4a07      	ldr	r2, [pc, #28]	; (246ec <ull_filter_adva_get+0x50>)
   246ce:	4908      	ldr	r1, [pc, #32]	; (246f0 <ull_filter_adva_get+0x54>)
   246d0:	4808      	ldr	r0, [pc, #32]	; (246f4 <ull_filter_adva_get+0x58>)
   246d2:	f240 331f 	movw	r3, #799	; 0x31f
   246d6:	f007 fc76 	bl	2bfc6 <assert_print>
   246da:	4040      	eors	r0, r0
   246dc:	f380 8811 	msr	BASEPRI, r0
   246e0:	f04f 0003 	mov.w	r0, #3
   246e4:	df02      	svc	2
   246e6:	e7ea      	b.n	246be <ull_filter_adva_get+0x22>
   246e8:	20002b7c 	.word	0x20002b7c
   246ec:	000338fc 	.word	0x000338fc
   246f0:	00033960 	.word	0x00033960
   246f4:	00032fc4 	.word	0x00032fc4

000246f8 <ull_filter_tgta_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].pirk) {
   246f8:	2807      	cmp	r0, #7
   246fa:	d80b      	bhi.n	24714 <ull_filter_tgta_get+0x1c>
   246fc:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   24700:	4a05      	ldr	r2, [pc, #20]	; (24718 <ull_filter_tgta_get+0x20>)
   24702:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   24706:	074b      	lsls	r3, r1, #29
   24708:	d504      	bpl.n	24714 <ull_filter_tgta_get+0x1c>
		return rl[rl_idx].peer_rpa.val;
   2470a:	2328      	movs	r3, #40	; 0x28
   2470c:	fb03 2000 	mla	r0, r3, r0, r2
   24710:	301e      	adds	r0, #30
   24712:	4770      	bx	lr
	return NULL;
   24714:	2000      	movs	r0, #0
   24716:	4770      	bx	lr
   24718:	20002b7c 	.word	0x20002b7c

0002471c <ull_filter_rl_find>:
{
   2471c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24720:	468b      	mov	fp, r1
	if (free_idx) {
   24722:	4617      	mov	r7, r2
   24724:	b10a      	cbz	r2, 2472a <ull_filter_rl_find+0xe>
		*free_idx = FILTER_IDX_NONE;
   24726:	23ff      	movs	r3, #255	; 0xff
   24728:	7013      	strb	r3, [r2, #0]
   2472a:	4d1b      	ldr	r5, [pc, #108]	; (24798 <ull_filter_rl_find+0x7c>)
{
   2472c:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   2472e:	f000 0a01 	and.w	sl, r0, #1
   24732:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   24736:	e006      	b.n	24746 <ull_filter_rl_find+0x2a>
   24738:	4552      	cmp	r2, sl
   2473a:	d01f      	beq.n	2477c <ull_filter_rl_find+0x60>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   2473c:	3401      	adds	r4, #1
   2473e:	2c08      	cmp	r4, #8
   24740:	f105 0528 	add.w	r5, r5, #40	; 0x28
   24744:	d015      	beq.n	24772 <ull_filter_rl_find+0x56>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   24746:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   2474a:	fa5f f884 	uxtb.w	r8, r4
   2474e:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   24752:	07d9      	lsls	r1, r3, #31
   24754:	f3c3 1280 	ubfx	r2, r3, #6, #1
   24758:	d4ee      	bmi.n	24738 <ull_filter_rl_find+0x1c>
		} else if (free_idx && !rl[i].taken &&
   2475a:	2f00      	cmp	r7, #0
   2475c:	d0ee      	beq.n	2473c <ull_filter_rl_find+0x20>
   2475e:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   24760:	3401      	adds	r4, #1
		} else if (free_idx && !rl[i].taken &&
   24762:	2bff      	cmp	r3, #255	; 0xff
			*free_idx = i;
   24764:	bf08      	it	eq
   24766:	f887 8000 	strbeq.w	r8, [r7]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   2476a:	2c08      	cmp	r4, #8
   2476c:	f105 0528 	add.w	r5, r5, #40	; 0x28
   24770:	d1e9      	bne.n	24746 <ull_filter_rl_find+0x2a>
	return FILTER_IDX_NONE;
   24772:	f04f 08ff 	mov.w	r8, #255	; 0xff
}
   24776:	4640      	mov	r0, r8
   24778:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   2477c:	4628      	mov	r0, r5
   2477e:	2206      	movs	r2, #6
   24780:	4659      	mov	r1, fp
   24782:	f009 fc41 	bl	2e008 <memcmp>
   24786:	2800      	cmp	r0, #0
   24788:	d0f5      	beq.n	24776 <ull_filter_rl_find+0x5a>
		} else if (free_idx && !rl[i].taken &&
   2478a:	2f00      	cmp	r7, #0
   2478c:	d0d6      	beq.n	2473c <ull_filter_rl_find+0x20>
   2478e:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   24792:	07db      	lsls	r3, r3, #31
   24794:	d4d2      	bmi.n	2473c <ull_filter_rl_find+0x20>
   24796:	e7e2      	b.n	2475e <ull_filter_rl_find+0x42>
   24798:	20002b7d 	.word	0x20002b7d

0002479c <ll_rl_add>:
{
   2479c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   247a0:	4680      	mov	r8, r0
   247a2:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   247a4:	2000      	movs	r0, #0
{
   247a6:	460e      	mov	r6, r1
   247a8:	4691      	mov	r9, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   247aa:	f7fa fa01 	bl	1ebb0 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   247ae:	2800      	cmp	r0, #0
   247b0:	d17d      	bne.n	248ae <ll_rl_add+0x112>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   247b2:	46c2      	mov	sl, r8
   247b4:	4604      	mov	r4, r0
   247b6:	f81a 0b01 	ldrb.w	r0, [sl], #1
   247ba:	f10d 020f 	add.w	r2, sp, #15
   247be:	4651      	mov	r1, sl
   247c0:	f7ff ffac 	bl	2471c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   247c4:	2807      	cmp	r0, #7
   247c6:	f240 80b5 	bls.w	24934 <ll_rl_add+0x198>
	} else if (j >= ARRAY_SIZE(rl)) {
   247ca:	f89d 700f 	ldrb.w	r7, [sp, #15]
   247ce:	2f07      	cmp	r7, #7
   247d0:	f200 8084 	bhi.w	248dc <ll_rl_add+0x140>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   247d4:	eb07 0b87 	add.w	fp, r7, r7, lsl #2
   247d8:	4d58      	ldr	r5, [pc, #352]	; (2493c <ll_rl_add+0x1a0>)
   247da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   247de:	1c58      	adds	r0, r3, #1
   247e0:	2206      	movs	r2, #6
   247e2:	4651      	mov	r1, sl
   247e4:	4428      	add	r0, r5
   247e6:	9300      	str	r3, [sp, #0]
   247e8:	f009 fc1f 	bl	2e02a <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   247ec:	f898 3000 	ldrb.w	r3, [r8]
   247f0:	f815 103b 	ldrb.w	r1, [r5, fp, lsl #3]
   247f4:	465a      	mov	r2, fp
   247f6:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   247fa:	f363 1186 	bfi	r1, r3, #6, #1
   247fe:	f805 100b 	strb.w	r1, [r5, fp]
   24802:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   24806:	2110      	movs	r1, #16
   24808:	4630      	mov	r0, r6
	rl[i].id_addr_type = id_addr->type & 0x1;
   2480a:	9301      	str	r3, [sp, #4]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   2480c:	f7f5 fcee 	bl	1a1ec <mem_nz>
   24810:	f815 200b 	ldrb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   24814:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   24816:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   2481a:	4648      	mov	r0, r9
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   2481c:	f805 200b 	strb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   24820:	f7f5 fce4 	bl	1a1ec <mem_nz>
   24824:	f815 200b 	ldrb.w	r2, [r5, fp]
   24828:	f000 0001 	and.w	r0, r0, #1
   2482c:	f360 02c3 	bfi	r2, r0, #3, #1
   24830:	f805 200b 	strb.w	r2, [r5, fp]
	if (rl[i].pirk) {
   24834:	0752      	lsls	r2, r2, #29
	rl[i].id_addr_type = id_addr->type & 0x1;
   24836:	ea4f 0b87 	mov.w	fp, r7, lsl #2
	if (rl[i].pirk) {
   2483a:	d453      	bmi.n	248e4 <ll_rl_add+0x148>
	if (rl[i].lirk) {
   2483c:	2800      	cmp	r0, #0
   2483e:	d16b      	bne.n	24918 <ll_rl_add+0x17c>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   24840:	9800      	ldr	r0, [sp, #0]
   24842:	4e3f      	ldr	r6, [pc, #252]	; (24940 <ll_rl_add+0x1a4>)
   24844:	3018      	adds	r0, #24
   24846:	2206      	movs	r2, #6
   24848:	2100      	movs	r1, #0
   2484a:	4428      	add	r0, r5
   2484c:	f009 fbf8 	bl	2e040 <memset>
	rl[i].dev = 0U;
   24850:	eb0b 0207 	add.w	r2, fp, r7
	rl[i].rpas_ready = 0U;
   24854:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   24858:	f021 0112 	bic.w	r1, r1, #18
   2485c:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	j = fal_find(id_addr->type, id_addr->a.val, NULL);
   24860:	f898 9000 	ldrb.w	r9, [r8]
	for (i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   24864:	f1a6 0802 	sub.w	r8, r6, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   24868:	f009 0901 	and.w	r9, r9, #1
   2486c:	f818 2034 	ldrb.w	r2, [r8, r4, lsl #3]
   24870:	07d3      	lsls	r3, r2, #31
   24872:	f3c2 0140 	ubfx	r1, r2, #1, #1
   24876:	d501      	bpl.n	2487c <ll_rl_add+0xe0>
   24878:	4549      	cmp	r1, r9
   2487a:	d01c      	beq.n	248b6 <ll_rl_add+0x11a>
	for (i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   2487c:	3401      	adds	r4, #1
   2487e:	2c08      	cmp	r4, #8
   24880:	f106 0608 	add.w	r6, r6, #8
   24884:	d1f2      	bne.n	2486c <ll_rl_add+0xd0>
		rl[i].fal = 0U;
   24886:	eb0b 0207 	add.w	r2, fp, r7
   2488a:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   2488e:	f36f 1145 	bfc	r1, #5, #1
   24892:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	rl[i].taken = 1U;
   24896:	eb0b 0307 	add.w	r3, fp, r7
	return 0;
   2489a:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   2489c:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   248a0:	f042 0201 	orr.w	r2, r2, #1
   248a4:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]
}
   248a8:	b005      	add	sp, #20
   248aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   248ae:	200c      	movs	r0, #12
}
   248b0:	b005      	add	sp, #20
   248b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   248b6:	2206      	movs	r2, #6
   248b8:	4630      	mov	r0, r6
   248ba:	4651      	mov	r1, sl
   248bc:	f009 fba4 	bl	2e008 <memcmp>
   248c0:	2800      	cmp	r0, #0
   248c2:	d1db      	bne.n	2487c <ll_rl_add+0xe0>
		rl[i].fal = 1U;
   248c4:	eb0b 0207 	add.w	r2, fp, r7
		fal[j].rl_idx = i;
   248c8:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
		rl[i].fal = 1U;
   248cc:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
		fal[j].rl_idx = i;
   248d0:	7067      	strb	r7, [r4, #1]
		rl[i].fal = 1U;
   248d2:	f041 0120 	orr.w	r1, r1, #32
   248d6:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
   248da:	e7dc      	b.n	24896 <ll_rl_add+0xfa>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   248dc:	2007      	movs	r0, #7
}
   248de:	b005      	add	sp, #20
   248e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   248e4:	4b17      	ldr	r3, [pc, #92]	; (24944 <ll_rl_add+0x1a8>)
		peer_irk_rl_ids[peer_irk_count] = i;
   248e6:	4a18      	ldr	r2, [pc, #96]	; (24948 <ll_rl_add+0x1ac>)
		rl[i].pirk_idx = peer_irk_count;
   248e8:	7819      	ldrb	r1, [r3, #0]
   248ea:	f8dd c004 	ldr.w	ip, [sp, #4]
		peer_irk_rl_ids[peer_irk_count] = i;
   248ee:	5457      	strb	r7, [r2, r1]
   248f0:	4a16      	ldr	r2, [pc, #88]	; (2494c <ll_rl_add+0x1b0>)
		rl[i].pirk_idx = peer_irk_count;
   248f2:	f88c 1017 	strb.w	r1, [ip, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   248f6:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
   248fa:	3101      	adds	r1, #1
	psrc += length - 1;
   248fc:	f106 020f 	add.w	r2, r6, #15
   24900:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
   24902:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   24906:	3e01      	subs	r6, #1
		*pdst++ = *psrc--;
   24908:	f812 1901 	ldrb.w	r1, [r2], #-1
   2490c:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   24910:	42b2      	cmp	r2, r6
   24912:	d1f9      	bne.n	24908 <ll_rl_add+0x16c>
	if (rl[i].lirk) {
   24914:	2800      	cmp	r0, #0
   24916:	d093      	beq.n	24840 <ll_rl_add+0xa4>
		(void)memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   24918:	9b00      	ldr	r3, [sp, #0]
   2491a:	1dd8      	adds	r0, r3, #7
   2491c:	4649      	mov	r1, r9
   2491e:	2210      	movs	r2, #16
   24920:	4428      	add	r0, r5
   24922:	f009 fb82 	bl	2e02a <memcpy>
		rl[i].local_rpa = NULL;
   24926:	eb0b 0207 	add.w	r2, fp, r7
   2492a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
   2492e:	2100      	movs	r1, #0
   24930:	6251      	str	r1, [r2, #36]	; 0x24
   24932:	e785      	b.n	24840 <ll_rl_add+0xa4>
		return BT_HCI_ERR_INVALID_PARAM;
   24934:	2012      	movs	r0, #18
}
   24936:	b005      	add	sp, #20
   24938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2493c:	20002b7c 	.word	0x20002b7c
   24940:	20002a52 	.word	0x20002a52
   24944:	20003420 	.word	0x20003420
   24948:	20002af4 	.word	0x20002af4
   2494c:	20002afc 	.word	0x20002afc

00024950 <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   24950:	2807      	cmp	r0, #7
   24952:	d807      	bhi.n	24964 <ull_filter_lll_lrpa_used+0x14>
   24954:	4b04      	ldr	r3, [pc, #16]	; (24968 <ull_filter_lll_lrpa_used+0x18>)
   24956:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2495a:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   2495e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   24962:	4770      	bx	lr
   24964:	2000      	movs	r0, #0
}
   24966:	4770      	bx	lr
   24968:	20002b7c 	.word	0x20002b7c

0002496c <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   2496c:	4b02      	ldr	r3, [pc, #8]	; (24978 <ull_filter_lll_irks_get+0xc>)
   2496e:	781b      	ldrb	r3, [r3, #0]
   24970:	7003      	strb	r3, [r0, #0]
}
   24972:	4802      	ldr	r0, [pc, #8]	; (2497c <ull_filter_lll_irks_get+0x10>)
   24974:	4770      	bx	lr
   24976:	bf00      	nop
   24978:	20003420 	.word	0x20003420
   2497c:	20002afc 	.word	0x20002afc

00024980 <ull_filter_lll_rl_irk_idx>:
{
   24980:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   24982:	4b20      	ldr	r3, [pc, #128]	; (24a04 <ull_filter_lll_rl_irk_idx+0x84>)
   24984:	781b      	ldrb	r3, [r3, #0]
   24986:	4283      	cmp	r3, r0
{
   24988:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   2498a:	d90c      	bls.n	249a6 <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   2498c:	4b1e      	ldr	r3, [pc, #120]	; (24a08 <ull_filter_lll_rl_irk_idx+0x88>)
   2498e:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   24990:	2c07      	cmp	r4, #7
   24992:	d819      	bhi.n	249c8 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   24994:	4b1d      	ldr	r3, [pc, #116]	; (24a0c <ull_filter_lll_rl_irk_idx+0x8c>)
   24996:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   2499a:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   2499e:	07db      	lsls	r3, r3, #31
   249a0:	d520      	bpl.n	249e4 <ull_filter_lll_rl_irk_idx+0x64>
}
   249a2:	4620      	mov	r0, r4
   249a4:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   249a6:	4a1a      	ldr	r2, [pc, #104]	; (24a10 <ull_filter_lll_rl_irk_idx+0x90>)
   249a8:	491a      	ldr	r1, [pc, #104]	; (24a14 <ull_filter_lll_rl_irk_idx+0x94>)
   249aa:	481b      	ldr	r0, [pc, #108]	; (24a18 <ull_filter_lll_rl_irk_idx+0x98>)
   249ac:	f44f 735c 	mov.w	r3, #880	; 0x370
   249b0:	f007 fb09 	bl	2bfc6 <assert_print>
   249b4:	4040      	eors	r0, r0
   249b6:	f380 8811 	msr	BASEPRI, r0
   249ba:	f04f 0003 	mov.w	r0, #3
   249be:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   249c0:	4b11      	ldr	r3, [pc, #68]	; (24a08 <ull_filter_lll_rl_irk_idx+0x88>)
   249c2:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   249c4:	2c07      	cmp	r4, #7
   249c6:	d9e5      	bls.n	24994 <ull_filter_lll_rl_irk_idx+0x14>
   249c8:	4a11      	ldr	r2, [pc, #68]	; (24a10 <ull_filter_lll_rl_irk_idx+0x90>)
   249ca:	4914      	ldr	r1, [pc, #80]	; (24a1c <ull_filter_lll_rl_irk_idx+0x9c>)
   249cc:	4812      	ldr	r0, [pc, #72]	; (24a18 <ull_filter_lll_rl_irk_idx+0x98>)
   249ce:	f240 3372 	movw	r3, #882	; 0x372
   249d2:	f007 faf8 	bl	2bfc6 <assert_print>
   249d6:	4040      	eors	r0, r0
   249d8:	f380 8811 	msr	BASEPRI, r0
   249dc:	f04f 0003 	mov.w	r0, #3
   249e0:	df02      	svc	2
   249e2:	e7d7      	b.n	24994 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   249e4:	4a0a      	ldr	r2, [pc, #40]	; (24a10 <ull_filter_lll_rl_irk_idx+0x90>)
   249e6:	490e      	ldr	r1, [pc, #56]	; (24a20 <ull_filter_lll_rl_irk_idx+0xa0>)
   249e8:	480b      	ldr	r0, [pc, #44]	; (24a18 <ull_filter_lll_rl_irk_idx+0x98>)
   249ea:	f240 3373 	movw	r3, #883	; 0x373
   249ee:	f007 faea 	bl	2bfc6 <assert_print>
   249f2:	4040      	eors	r0, r0
   249f4:	f380 8811 	msr	BASEPRI, r0
   249f8:	f04f 0003 	mov.w	r0, #3
   249fc:	df02      	svc	2
}
   249fe:	4620      	mov	r0, r4
   24a00:	bd10      	pop	{r4, pc}
   24a02:	bf00      	nop
   24a04:	20003420 	.word	0x20003420
   24a08:	20002af4 	.word	0x20002af4
   24a0c:	20002b7c 	.word	0x20002b7c
   24a10:	000338fc 	.word	0x000338fc
   24a14:	00033af0 	.word	0x00033af0
   24a18:	00032fc4 	.word	0x00032fc4
   24a1c:	00033b10 	.word	0x00033b10
   24a20:	00033ae4 	.word	0x00033ae4

00024a24 <ull_filter_lll_irk_in_fal>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   24a24:	2807      	cmp	r0, #7
   24a26:	d823      	bhi.n	24a70 <ull_filter_lll_irk_in_fal+0x4c>
{
   24a28:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   24a2a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   24a2e:	4e11      	ldr	r6, [pc, #68]	; (24a74 <ull_filter_lll_irk_in_fal+0x50>)
   24a30:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   24a34:	07db      	lsls	r3, r3, #31
   24a36:	4604      	mov	r4, r0
   24a38:	ea4f 0580 	mov.w	r5, r0, lsl #2
   24a3c:	d505      	bpl.n	24a4a <ull_filter_lll_irk_in_fal+0x26>
	return rl[rl_idx].fal;
   24a3e:	442c      	add	r4, r5
   24a40:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   24a44:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   24a48:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   24a4a:	4a0b      	ldr	r2, [pc, #44]	; (24a78 <ull_filter_lll_irk_in_fal+0x54>)
   24a4c:	490b      	ldr	r1, [pc, #44]	; (24a7c <ull_filter_lll_irk_in_fal+0x58>)
   24a4e:	480c      	ldr	r0, [pc, #48]	; (24a80 <ull_filter_lll_irk_in_fal+0x5c>)
   24a50:	f240 337e 	movw	r3, #894	; 0x37e
   24a54:	f007 fab7 	bl	2bfc6 <assert_print>
   24a58:	4040      	eors	r0, r0
   24a5a:	f380 8811 	msr	BASEPRI, r0
   24a5e:	f04f 0003 	mov.w	r0, #3
   24a62:	df02      	svc	2
	return rl[rl_idx].fal;
   24a64:	442c      	add	r4, r5
   24a66:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   24a6a:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   24a6e:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   24a70:	2000      	movs	r0, #0
}
   24a72:	4770      	bx	lr
   24a74:	20002b7c 	.word	0x20002b7c
   24a78:	000338fc 	.word	0x000338fc
   24a7c:	0003394c 	.word	0x0003394c
   24a80:	00032fc4 	.word	0x00032fc4

00024a84 <ull_filter_lll_rl_addr_allowed>:
	if (*rl_idx != FILTER_IDX_NONE) {
   24a84:	7813      	ldrb	r3, [r2, #0]
   24a86:	2bff      	cmp	r3, #255	; 0xff
   24a88:	d11b      	bne.n	24ac2 <ull_filter_lll_rl_addr_allowed+0x3e>
{
   24a8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24a8e:	4d19      	ldr	r5, [pc, #100]	; (24af4 <ull_filter_lll_rl_addr_allowed+0x70>)
   24a90:	4604      	mov	r4, r0
   24a92:	46ae      	mov	lr, r5
	if (*rl_idx != FILTER_IDX_NONE) {
   24a94:	2300      	movs	r3, #0
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   24a96:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   24a9a:	b2df      	uxtb	r7, r3
   24a9c:	f815 c03c 	ldrb.w	ip, [r5, ip, lsl #3]
   24aa0:	f01c 0001 	ands.w	r0, ip, #1
   24aa4:	ea4f 0683 	mov.w	r6, r3, lsl #2
   24aa8:	d003      	beq.n	24ab2 <ull_filter_lll_rl_addr_allowed+0x2e>
   24aaa:	f3cc 1c80 	ubfx	ip, ip, #6, #1
   24aae:	45a4      	cmp	ip, r4
   24ab0:	d009      	beq.n	24ac6 <ull_filter_lll_rl_addr_allowed+0x42>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   24ab2:	3301      	adds	r3, #1
   24ab4:	2b08      	cmp	r3, #8
   24ab6:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
   24aba:	d1ec      	bne.n	24a96 <ull_filter_lll_rl_addr_allowed+0x12>
		return true;
   24abc:	2001      	movs	r0, #1
}
   24abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true;
   24ac2:	2001      	movs	r0, #1
}
   24ac4:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   24ac6:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   24aca:	46f4      	mov	ip, lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   24acc:	f10e 0b06 	add.w	fp, lr, #6
				if (addr[j] != id_addr[j]) {
   24ad0:	f81c af01 	ldrb.w	sl, [ip, #1]!
   24ad4:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   24ad8:	45ca      	cmp	sl, r9
   24ada:	d1ea      	bne.n	24ab2 <ull_filter_lll_rl_addr_allowed+0x2e>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   24adc:	45dc      	cmp	ip, fp
   24ade:	d1f7      	bne.n	24ad0 <ull_filter_lll_rl_addr_allowed+0x4c>
				return !rl[i].pirk || rl[i].dev;
   24ae0:	4433      	add	r3, r6
				*rl_idx = i;
   24ae2:	7017      	strb	r7, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   24ae4:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   24ae8:	075a      	lsls	r2, r3, #29
   24aea:	d5e8      	bpl.n	24abe <ull_filter_lll_rl_addr_allowed+0x3a>
   24aec:	f3c3 1000 	ubfx	r0, r3, #4, #1
   24af0:	e7e5      	b.n	24abe <ull_filter_lll_rl_addr_allowed+0x3a>
   24af2:	bf00      	nop
   24af4:	20002b7c 	.word	0x20002b7c

00024af8 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   24af8:	4b02      	ldr	r3, [pc, #8]	; (24b04 <ull_filter_lll_rl_enabled+0xc>)
   24afa:	7818      	ldrb	r0, [r3, #0]
}
   24afc:	3800      	subs	r0, #0
   24afe:	bf18      	it	ne
   24b00:	2001      	movne	r0, #1
   24b02:	4770      	bx	lr
   24b04:	20003421 	.word	0x20003421

00024b08 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   24b08:	4668      	mov	r0, sp
   24b0a:	f020 0107 	bic.w	r1, r0, #7
   24b0e:	468d      	mov	sp, r1
   24b10:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   24b12:	f002 f875 	bl	26c00 <isr_radio>

	ISR_DIRECT_PM();
   24b16:	f7eb fed7 	bl	108c8 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   24b1a:	f7eb ffbf 	bl	10a9c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   24b1e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   24b22:	4685      	mov	sp, r0
   24b24:	4770      	bx	lr
   24b26:	bf00      	nop

00024b28 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   24b28:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   24b2a:	4b09      	ldr	r3, [pc, #36]	; (24b50 <rtc0_nrf5_isr+0x28>)
   24b2c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   24b30:	b93a      	cbnz	r2, 24b42 <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   24b32:	2001      	movs	r0, #1
   24b34:	f7f5 fc40 	bl	1a3b8 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   24b38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   24b3c:	2002      	movs	r0, #2
   24b3e:	f7f5 bc3b 	b.w	1a3b8 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   24b42:	2000      	movs	r0, #0
   24b44:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   24b48:	f7f6 fcbe 	bl	1b4c8 <ticker_trigger>
   24b4c:	e7f1      	b.n	24b32 <rtc0_nrf5_isr+0xa>
   24b4e:	bf00      	nop
   24b50:	4000b000 	.word	0x4000b000

00024b54 <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   24b54:	2000      	movs	r0, #0
   24b56:	f7f5 bc2f 	b.w	1a3b8 <mayfly_run>
   24b5a:	bf00      	nop

00024b5c <ticker_stop_op_cb>:
static uint8_t preempt_stop_ack;
static uint8_t preempt_req;
static uint8_t volatile preempt_ack;

static void ticker_stop_op_cb(uint32_t status, void *param)
{
   24b5c:	b510      	push	{r4, lr}
	ARG_UNUSED(param);
	ARG_UNUSED(status);

	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   24b5e:	4b0e      	ldr	r3, [pc, #56]	; (24b98 <ticker_stop_op_cb+0x3c>)
   24b60:	4c0e      	ldr	r4, [pc, #56]	; (24b9c <ticker_stop_op_cb+0x40>)
   24b62:	781a      	ldrb	r2, [r3, #0]
   24b64:	7823      	ldrb	r3, [r4, #0]
   24b66:	429a      	cmp	r2, r3
   24b68:	d006      	beq.n	24b78 <ticker_stop_op_cb+0x1c>
	preempt_stop_ack++;

	preempt_req = preempt_ack;
   24b6a:	490d      	ldr	r1, [pc, #52]	; (24ba0 <ticker_stop_op_cb+0x44>)
   24b6c:	4a0d      	ldr	r2, [pc, #52]	; (24ba4 <ticker_stop_op_cb+0x48>)
   24b6e:	7809      	ldrb	r1, [r1, #0]
   24b70:	7011      	strb	r1, [r2, #0]
	preempt_stop_ack++;
   24b72:	3301      	adds	r3, #1
   24b74:	7023      	strb	r3, [r4, #0]
}
   24b76:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   24b78:	4a0b      	ldr	r2, [pc, #44]	; (24ba8 <ticker_stop_op_cb+0x4c>)
   24b7a:	490c      	ldr	r1, [pc, #48]	; (24bac <ticker_stop_op_cb+0x50>)
   24b7c:	480c      	ldr	r0, [pc, #48]	; (24bb0 <ticker_stop_op_cb+0x54>)
   24b7e:	f240 3301 	movw	r3, #769	; 0x301
   24b82:	f007 fa20 	bl	2bfc6 <assert_print>
   24b86:	4040      	eors	r0, r0
   24b88:	f380 8811 	msr	BASEPRI, r0
   24b8c:	f04f 0003 	mov.w	r0, #3
   24b90:	df02      	svc	2
	preempt_stop_ack++;
   24b92:	7823      	ldrb	r3, [r4, #0]
   24b94:	e7e9      	b.n	24b6a <ticker_stop_op_cb+0xe>
   24b96:	bf00      	nop
   24b98:	20003427 	.word	0x20003427
   24b9c:	20003426 	.word	0x20003426
   24ba0:	20003422 	.word	0x20003422
   24ba4:	20003423 	.word	0x20003423
   24ba8:	00033b2c 	.word	0x00033b2c
   24bac:	00033b74 	.word	0x00033b74
   24bb0:	00032fc4 	.word	0x00032fc4

00024bb4 <ticker_start_op_cb>:

static void ticker_start_op_cb(uint32_t status, void *param)
{
   24bb4:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   24bb6:	b9f8      	cbnz	r0, 24bf8 <ticker_start_op_cb+0x44>

	LL_ASSERT(preempt_start_req != preempt_start_ack);
   24bb8:	4b1e      	ldr	r3, [pc, #120]	; (24c34 <ticker_start_op_cb+0x80>)
   24bba:	4d1f      	ldr	r5, [pc, #124]	; (24c38 <ticker_start_op_cb+0x84>)
   24bbc:	781a      	ldrb	r2, [r3, #0]
   24bbe:	782b      	ldrb	r3, [r5, #0]
   24bc0:	429a      	cmp	r2, r3
   24bc2:	d027      	beq.n	24c14 <ticker_start_op_cb+0x60>
	preempt_start_ack++;

	LL_ASSERT(preempt_req == preempt_ack);
   24bc4:	4a1d      	ldr	r2, [pc, #116]	; (24c3c <ticker_start_op_cb+0x88>)
   24bc6:	4c1e      	ldr	r4, [pc, #120]	; (24c40 <ticker_start_op_cb+0x8c>)
   24bc8:	7812      	ldrb	r2, [r2, #0]
   24bca:	7821      	ldrb	r1, [r4, #0]
	preempt_start_ack++;
   24bcc:	3301      	adds	r3, #1
	LL_ASSERT(preempt_req == preempt_ack);
   24bce:	4291      	cmp	r1, r2
	preempt_start_ack++;
   24bd0:	702b      	strb	r3, [r5, #0]
	LL_ASSERT(preempt_req == preempt_ack);
   24bd2:	b2d3      	uxtb	r3, r2
   24bd4:	d00d      	beq.n	24bf2 <ticker_start_op_cb+0x3e>
   24bd6:	4a1b      	ldr	r2, [pc, #108]	; (24c44 <ticker_start_op_cb+0x90>)
   24bd8:	491b      	ldr	r1, [pc, #108]	; (24c48 <ticker_start_op_cb+0x94>)
   24bda:	481c      	ldr	r0, [pc, #112]	; (24c4c <ticker_start_op_cb+0x98>)
   24bdc:	f240 330f 	movw	r3, #783	; 0x30f
   24be0:	f007 f9f1 	bl	2bfc6 <assert_print>
   24be4:	4040      	eors	r0, r0
   24be6:	f380 8811 	msr	BASEPRI, r0
   24bea:	f04f 0003 	mov.w	r0, #3
   24bee:	df02      	svc	2
	preempt_req++;
   24bf0:	7823      	ldrb	r3, [r4, #0]
   24bf2:	3301      	adds	r3, #1
   24bf4:	7023      	strb	r3, [r4, #0]
}
   24bf6:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   24bf8:	4a12      	ldr	r2, [pc, #72]	; (24c44 <ticker_start_op_cb+0x90>)
   24bfa:	4915      	ldr	r1, [pc, #84]	; (24c50 <ticker_start_op_cb+0x9c>)
   24bfc:	4813      	ldr	r0, [pc, #76]	; (24c4c <ticker_start_op_cb+0x98>)
   24bfe:	f240 330a 	movw	r3, #778	; 0x30a
   24c02:	f007 f9e0 	bl	2bfc6 <assert_print>
   24c06:	4040      	eors	r0, r0
   24c08:	f380 8811 	msr	BASEPRI, r0
   24c0c:	f04f 0003 	mov.w	r0, #3
   24c10:	df02      	svc	2
   24c12:	e7d1      	b.n	24bb8 <ticker_start_op_cb+0x4>
	LL_ASSERT(preempt_start_req != preempt_start_ack);
   24c14:	4a0b      	ldr	r2, [pc, #44]	; (24c44 <ticker_start_op_cb+0x90>)
   24c16:	490f      	ldr	r1, [pc, #60]	; (24c54 <ticker_start_op_cb+0xa0>)
   24c18:	480c      	ldr	r0, [pc, #48]	; (24c4c <ticker_start_op_cb+0x98>)
   24c1a:	f44f 7343 	mov.w	r3, #780	; 0x30c
   24c1e:	f007 f9d2 	bl	2bfc6 <assert_print>
   24c22:	4040      	eors	r0, r0
   24c24:	f380 8811 	msr	BASEPRI, r0
   24c28:	f04f 0003 	mov.w	r0, #3
   24c2c:	df02      	svc	2
	preempt_start_ack++;
   24c2e:	782b      	ldrb	r3, [r5, #0]
   24c30:	e7c8      	b.n	24bc4 <ticker_start_op_cb+0x10>
   24c32:	bf00      	nop
   24c34:	20003425 	.word	0x20003425
   24c38:	20003424 	.word	0x20003424
   24c3c:	20003422 	.word	0x20003422
   24c40:	20003423 	.word	0x20003423
   24c44:	00033b2c 	.word	0x00033b2c
   24c48:	00033bc4 	.word	0x00033bc4
   24c4c:	00032fc4 	.word	0x00032fc4
   24c50:	000336a0 	.word	0x000336a0
   24c54:	00033b9c 	.word	0x00033b9c

00024c58 <isr_race>:
	radio_status_reset();
   24c58:	f002 b8e6 	b.w	26e28 <radio_status_reset>

00024c5c <preempt_ticker_cb>:
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
			      uint32_t remainder, uint16_t lazy, uint8_t force,
			      void *param)
{
   24c5c:	b510      	push	{r4, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	LL_ASSERT(preempt_ack != preempt_req);
   24c5e:	4a18      	ldr	r2, [pc, #96]	; (24cc0 <preempt_ticker_cb+0x64>)
   24c60:	4c18      	ldr	r4, [pc, #96]	; (24cc4 <preempt_ticker_cb+0x68>)
   24c62:	7812      	ldrb	r2, [r2, #0]
   24c64:	7823      	ldrb	r3, [r4, #0]
   24c66:	429a      	cmp	r2, r3
   24c68:	d01b      	beq.n	24ca2 <preempt_ticker_cb+0x46>
	preempt_ack++;
   24c6a:	7821      	ldrb	r1, [r4, #0]

	mfy.param = param;
   24c6c:	4b16      	ldr	r3, [pc, #88]	; (24cc8 <preempt_ticker_cb+0x6c>)
	preempt_ack++;
   24c6e:	3101      	adds	r1, #1
   24c70:	b2c9      	uxtb	r1, r1
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   24c72:	2200      	movs	r2, #0
	preempt_ack++;
   24c74:	7021      	strb	r1, [r4, #0]
	mfy.param = param;
   24c76:	9903      	ldr	r1, [sp, #12]
   24c78:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   24c7a:	2001      	movs	r0, #1
   24c7c:	4611      	mov	r1, r2
   24c7e:	f7f5 fb43 	bl	1a308 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   24c82:	b900      	cbnz	r0, 24c86 <preempt_ticker_cb+0x2a>
}
   24c84:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   24c86:	4a11      	ldr	r2, [pc, #68]	; (24ccc <preempt_ticker_cb+0x70>)
   24c88:	4911      	ldr	r1, [pc, #68]	; (24cd0 <preempt_ticker_cb+0x74>)
   24c8a:	4812      	ldr	r0, [pc, #72]	; (24cd4 <preempt_ticker_cb+0x78>)
   24c8c:	f240 3376 	movw	r3, #886	; 0x376
   24c90:	f007 f999 	bl	2bfc6 <assert_print>
   24c94:	4040      	eors	r0, r0
   24c96:	f380 8811 	msr	BASEPRI, r0
   24c9a:	f04f 0003 	mov.w	r0, #3
   24c9e:	df02      	svc	2
}
   24ca0:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_ack != preempt_req);
   24ca2:	4a0a      	ldr	r2, [pc, #40]	; (24ccc <preempt_ticker_cb+0x70>)
   24ca4:	490c      	ldr	r1, [pc, #48]	; (24cd8 <preempt_ticker_cb+0x7c>)
   24ca6:	480b      	ldr	r0, [pc, #44]	; (24cd4 <preempt_ticker_cb+0x78>)
   24ca8:	f44f 735c 	mov.w	r3, #880	; 0x370
   24cac:	f007 f98b 	bl	2bfc6 <assert_print>
   24cb0:	4040      	eors	r0, r0
   24cb2:	f380 8811 	msr	BASEPRI, r0
   24cb6:	f04f 0003 	mov.w	r0, #3
   24cba:	df02      	svc	2
   24cbc:	e7d5      	b.n	24c6a <preempt_ticker_cb+0xe>
   24cbe:	bf00      	nop
   24cc0:	20003423 	.word	0x20003423
   24cc4:	20003422 	.word	0x20003422
   24cc8:	2000077c 	.word	0x2000077c
   24ccc:	00033b2c 	.word	0x00033b2c
   24cd0:	000333fc 	.word	0x000333fc
   24cd4:	00032fc4 	.word	0x00032fc4
   24cd8:	00033be0 	.word	0x00033be0

00024cdc <preempt_ticker_stop>:
{
   24cdc:	b510      	push	{r4, lr}
	if ((preempt_stop_req != preempt_stop_ack) ||
   24cde:	4917      	ldr	r1, [pc, #92]	; (24d3c <preempt_ticker_stop+0x60>)
   24ce0:	4a17      	ldr	r2, [pc, #92]	; (24d40 <preempt_ticker_stop+0x64>)
   24ce2:	780b      	ldrb	r3, [r1, #0]
   24ce4:	7812      	ldrb	r2, [r2, #0]
   24ce6:	429a      	cmp	r2, r3
{
   24ce8:	b082      	sub	sp, #8
	if ((preempt_stop_req != preempt_stop_ack) ||
   24cea:	d122      	bne.n	24d32 <preempt_ticker_stop+0x56>
	    (preempt_req == preempt_ack)) {
   24cec:	4b15      	ldr	r3, [pc, #84]	; (24d44 <preempt_ticker_stop+0x68>)
   24cee:	4a16      	ldr	r2, [pc, #88]	; (24d48 <preempt_ticker_stop+0x6c>)
   24cf0:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_stop_req != preempt_stop_ack) ||
   24cf2:	7812      	ldrb	r2, [r2, #0]
   24cf4:	429a      	cmp	r2, r3
   24cf6:	d01c      	beq.n	24d32 <preempt_ticker_stop+0x56>
	preempt_stop_req++;
   24cf8:	7808      	ldrb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   24cfa:	4b14      	ldr	r3, [pc, #80]	; (24d4c <preempt_ticker_stop+0x70>)
	preempt_stop_req++;
   24cfc:	3001      	adds	r0, #1
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   24cfe:	2200      	movs	r2, #0
	preempt_stop_req++;
   24d00:	b2c0      	uxtb	r0, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   24d02:	9200      	str	r2, [sp, #0]
	preempt_stop_req++;
   24d04:	7008      	strb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   24d06:	4611      	mov	r1, r2
   24d08:	4610      	mov	r0, r2
   24d0a:	f7f6 fcd5 	bl	1b6b8 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   24d0e:	4604      	mov	r4, r0
   24d10:	b178      	cbz	r0, 24d32 <preempt_ticker_stop+0x56>
   24d12:	2802      	cmp	r0, #2
   24d14:	d00e      	beq.n	24d34 <preempt_ticker_stop+0x58>
   24d16:	4a0e      	ldr	r2, [pc, #56]	; (24d50 <preempt_ticker_stop+0x74>)
   24d18:	490e      	ldr	r1, [pc, #56]	; (24d54 <preempt_ticker_stop+0x78>)
   24d1a:	480f      	ldr	r0, [pc, #60]	; (24d58 <preempt_ticker_stop+0x7c>)
   24d1c:	f240 3362 	movw	r3, #866	; 0x362
   24d20:	f007 f951 	bl	2bfc6 <assert_print>
   24d24:	4040      	eors	r0, r0
   24d26:	f380 8811 	msr	BASEPRI, r0
   24d2a:	f04f 0003 	mov.w	r0, #3
   24d2e:	df02      	svc	2
   24d30:	e000      	b.n	24d34 <preempt_ticker_stop+0x58>
		return TICKER_STATUS_SUCCESS;
   24d32:	2400      	movs	r4, #0
}
   24d34:	4620      	mov	r0, r4
   24d36:	b002      	add	sp, #8
   24d38:	bd10      	pop	{r4, pc}
   24d3a:	bf00      	nop
   24d3c:	20003427 	.word	0x20003427
   24d40:	20003426 	.word	0x20003426
   24d44:	20003422 	.word	0x20003422
   24d48:	20003423 	.word	0x20003423
   24d4c:	00024b5d 	.word	0x00024b5d
   24d50:	00033b2c 	.word	0x00033b2c
   24d54:	000334f0 	.word	0x000334f0
   24d58:	00032fc4 	.word	0x00032fc4

00024d5c <preempt_ticker_start>:
{
   24d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull = HDR_LLL2ULL(p->param);
   24d60:	68cb      	ldr	r3, [r1, #12]
	preempt_anchor = p->ticks_at_expire;
   24d62:	f8d1 8000 	ldr.w	r8, [r1]
	ull = HDR_LLL2ULL(p->param);
   24d66:	681a      	ldr	r2, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   24d68:	4b2a      	ldr	r3, [pc, #168]	; (24e14 <preempt_ticker_start+0xb8>)
   24d6a:	4f2b      	ldr	r7, [pc, #172]	; (24e18 <preempt_ticker_start+0xbc>)
	preempt_to = MAX(ull->ticks_active_to_start,
   24d6c:	68d6      	ldr	r6, [r2, #12]
{
   24d6e:	460d      	mov	r5, r1
   24d70:	4604      	mov	r4, r0
	if ((preempt_start_req != preempt_start_ack) ||
   24d72:	7819      	ldrb	r1, [r3, #0]
	preempt_to = MAX(ull->ticks_active_to_start,
   24d74:	6890      	ldr	r0, [r2, #8]
   24d76:	6853      	ldr	r3, [r2, #4]
   24d78:	4298      	cmp	r0, r3
   24d7a:	bf2c      	ite	cs
   24d7c:	ebc6 0600 	rsbcs	r6, r6, r0
   24d80:	ebc6 0603 	rsbcc	r6, r6, r3
	if ((preempt_start_req != preempt_start_ack) ||
   24d84:	783b      	ldrb	r3, [r7, #0]
   24d86:	4299      	cmp	r1, r3
{
   24d88:	b08a      	sub	sp, #40	; 0x28
	ticks_at_preempt_new = preempt_anchor + preempt_to;
   24d8a:	eb08 0906 	add.w	r9, r8, r6
	if ((preempt_start_req != preempt_start_ack) ||
   24d8e:	d033      	beq.n	24df8 <preempt_ticker_start+0x9c>
		if (!prev || prev->is_aborted ||
   24d90:	2c00      	cmp	r4, #0
   24d92:	d03a      	beq.n	24e0a <preempt_ticker_start+0xae>
   24d94:	7f23      	ldrb	r3, [r4, #28]
   24d96:	079b      	lsls	r3, r3, #30
   24d98:	d437      	bmi.n	24e0a <preempt_ticker_start+0xae>
		diff = ticks_at_preempt_new - ticks_at_preempt;
   24d9a:	f8df a080 	ldr.w	sl, [pc, #128]	; 24e1c <preempt_ticker_start+0xc0>
   24d9e:	f8da 0000 	ldr.w	r0, [sl]
   24da2:	eba9 0000 	sub.w	r0, r9, r0
		if (!prev || prev->is_aborted ||
   24da6:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
   24daa:	d022      	beq.n	24df2 <preempt_ticker_start+0x96>
		preempt_ticker_stop();
   24dac:	f7ff ff96 	bl	24cdc <preempt_ticker_stop>
		prev->is_aborted = 1U;
   24db0:	7f23      	ldrb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   24db2:	68e1      	ldr	r1, [r4, #12]
		ticks_at_preempt = ticks_at_preempt_new;
   24db4:	f8ca 9000 	str.w	r9, [sl]
		prev->is_aborted = 1U;
   24db8:	f043 0302 	orr.w	r3, r3, #2
   24dbc:	7723      	strb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   24dbe:	4620      	mov	r0, r4
   24dc0:	69a3      	ldr	r3, [r4, #24]
   24dc2:	4798      	blx	r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   24dc4:	4b16      	ldr	r3, [pc, #88]	; (24e20 <preempt_ticker_start+0xc4>)
	preempt_start_req++;
   24dc6:	783c      	ldrb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   24dc8:	9600      	str	r6, [sp, #0]
   24dca:	e9cd 3507 	strd	r3, r5, [sp, #28]
   24dce:	4b15      	ldr	r3, [pc, #84]	; (24e24 <preempt_ticker_start+0xc8>)
	ticks_at_preempt = ticks_at_preempt_new;
   24dd0:	f8ca 9000 	str.w	r9, [sl]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   24dd4:	2200      	movs	r2, #0
	preempt_start_req++;
   24dd6:	3401      	adds	r4, #1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   24dd8:	e9cd 3505 	strd	r3, r5, [sp, #20]
	preempt_start_req++;
   24ddc:	b2e4      	uxtb	r4, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   24dde:	e9cd 2203 	strd	r2, r2, [sp, #12]
   24de2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   24de6:	4643      	mov	r3, r8
   24de8:	4611      	mov	r1, r2
   24dea:	4610      	mov	r0, r2
	preempt_start_req++;
   24dec:	703c      	strb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   24dee:	f7f6 fbd9 	bl	1b5a4 <ticker_start>
}
   24df2:	b00a      	add	sp, #40	; 0x28
   24df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    (preempt_req != preempt_ack)) {
   24df8:	4b0b      	ldr	r3, [pc, #44]	; (24e28 <preempt_ticker_start+0xcc>)
   24dfa:	4a0c      	ldr	r2, [pc, #48]	; (24e2c <preempt_ticker_start+0xd0>)
   24dfc:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   24dfe:	7812      	ldrb	r2, [r2, #0]
   24e00:	429a      	cmp	r2, r3
   24e02:	d1c5      	bne.n	24d90 <preempt_ticker_start+0x34>
   24e04:	f8df a014 	ldr.w	sl, [pc, #20]	; 24e1c <preempt_ticker_start+0xc0>
   24e08:	e7dc      	b.n	24dc4 <preempt_ticker_start+0x68>
			return TICKER_STATUS_SUCCESS;
   24e0a:	2000      	movs	r0, #0
}
   24e0c:	b00a      	add	sp, #40	; 0x28
   24e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24e12:	bf00      	nop
   24e14:	20003424 	.word	0x20003424
   24e18:	20003425 	.word	0x20003425
   24e1c:	20002d0c 	.word	0x20002d0c
   24e20:	00024bb5 	.word	0x00024bb5
   24e24:	00024c5d 	.word	0x00024c5d
   24e28:	20003422 	.word	0x20003422
   24e2c:	20003423 	.word	0x20003423

00024e30 <preempt>:

static void preempt(void *param)
{
   24e30:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   24e32:	4e4b      	ldr	r6, [pc, #300]	; (24f60 <preempt+0x130>)
   24e34:	68b3      	ldr	r3, [r6, #8]
{
   24e36:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   24e38:	b1b3      	cbz	r3, 24e68 <preempt+0x38>
   24e3a:	6833      	ldr	r3, [r6, #0]
   24e3c:	b1a3      	cbz	r3, 24e68 <preempt+0x38>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   24e3e:	23ff      	movs	r3, #255	; 0xff
   24e40:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_iter(&idx);
   24e42:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   24e46:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   24e4a:	f7f8 ffab 	bl	1dda4 <ull_prepare_dequeue_iter>
	if (!next) {
   24e4e:	4601      	mov	r1, r0
   24e50:	b150      	cbz	r0, 24e68 <preempt+0x38>
		return;
	}

	/* Find a prepare that is ready and not a resume */
	while (next && (next->is_aborted || next->is_resume)) {
   24e52:	7f0b      	ldrb	r3, [r1, #28]
   24e54:	f013 0403 	ands.w	r4, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   24e58:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   24e5c:	d006      	beq.n	24e6c <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   24e5e:	f7f8 ffa1 	bl	1dda4 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   24e62:	4601      	mov	r1, r0
   24e64:	2800      	cmp	r0, #0
   24e66:	d1f4      	bne.n	24e52 <preempt+0x22>
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
	}
}
   24e68:	b009      	add	sp, #36	; 0x24
   24e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (next != param) {
   24e6c:	428d      	cmp	r5, r1
   24e6e:	d126      	bne.n	24ebe <preempt+0x8e>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   24e70:	6873      	ldr	r3, [r6, #4]
   24e72:	6831      	ldr	r1, [r6, #0]
   24e74:	68e8      	ldr	r0, [r5, #12]
   24e76:	aa03      	add	r2, sp, #12
   24e78:	4798      	blx	r3
	if (!err) {
   24e7a:	4607      	mov	r7, r0
   24e7c:	b1b0      	cbz	r0, 24eac <preempt+0x7c>
	event.curr.abort_cb(NULL, event.curr.param);
   24e7e:	68b3      	ldr	r3, [r6, #8]
   24e80:	6831      	ldr	r1, [r6, #0]
   24e82:	4620      	mov	r0, r4
   24e84:	4798      	blx	r3
	if (err == -EAGAIN) {
   24e86:	f117 0f0b 	cmn.w	r7, #11
   24e8a:	d02c      	beq.n	24ee6 <preempt+0xb6>
		LL_ASSERT(err == -ECANCELED);
   24e8c:	378c      	adds	r7, #140	; 0x8c
   24e8e:	d0eb      	beq.n	24e68 <preempt+0x38>
   24e90:	4a34      	ldr	r2, [pc, #208]	; (24f64 <preempt+0x134>)
   24e92:	4935      	ldr	r1, [pc, #212]	; (24f68 <preempt+0x138>)
   24e94:	4835      	ldr	r0, [pc, #212]	; (24f6c <preempt+0x13c>)
   24e96:	f44f 7374 	mov.w	r3, #976	; 0x3d0
   24e9a:	f007 f894 	bl	2bfc6 <assert_print>
   24e9e:	4040      	eors	r0, r0
   24ea0:	f380 8811 	msr	BASEPRI, r0
   24ea4:	f04f 0003 	mov.w	r0, #3
   24ea8:	df02      	svc	2
   24eaa:	e7dd      	b.n	24e68 <preempt+0x38>
		next->is_aborted = 1;
   24eac:	7f2b      	ldrb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   24eae:	69aa      	ldr	r2, [r5, #24]
   24eb0:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   24eb2:	f043 0302 	orr.w	r3, r3, #2
   24eb6:	772b      	strb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   24eb8:	4628      	mov	r0, r5
   24eba:	4790      	blx	r2
		return;
   24ebc:	e7d4      	b.n	24e68 <preempt+0x38>
		ret = preempt_ticker_start(NULL, next);
   24ebe:	4620      	mov	r0, r4
   24ec0:	f7ff ff4c 	bl	24d5c <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   24ec4:	f030 0302 	bics.w	r3, r0, #2
   24ec8:	d0ce      	beq.n	24e68 <preempt+0x38>
   24eca:	4a26      	ldr	r2, [pc, #152]	; (24f64 <preempt+0x134>)
   24ecc:	4928      	ldr	r1, [pc, #160]	; (24f70 <preempt+0x140>)
   24ece:	4827      	ldr	r0, [pc, #156]	; (24f6c <preempt+0x13c>)
   24ed0:	f44f 7367 	mov.w	r3, #924	; 0x39c
   24ed4:	f007 f877 	bl	2bfc6 <assert_print>
   24ed8:	4040      	eors	r0, r0
   24eda:	f380 8811 	msr	BASEPRI, r0
   24ede:	f04f 0003 	mov.w	r0, #3
   24ee2:	df02      	svc	2
   24ee4:	e7c0      	b.n	24e68 <preempt+0x38>
		iter_idx = UINT8_MAX;
   24ee6:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   24ee8:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   24eec:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   24ef0:	f7f8 ff58 	bl	1dda4 <ull_prepare_dequeue_iter>
		while (iter) {
   24ef4:	b928      	cbnz	r0, 24f02 <preempt+0xd2>
   24ef6:	e013      	b.n	24f20 <preempt+0xf0>
			iter = ull_prepare_dequeue_iter(&iter_idx);
   24ef8:	f10d 000b 	add.w	r0, sp, #11
   24efc:	f7f8 ff52 	bl	1dda4 <ull_prepare_dequeue_iter>
		while (iter) {
   24f00:	b170      	cbz	r0, 24f20 <preempt+0xf0>
			if (!iter->is_aborted &&
   24f02:	7f03      	ldrb	r3, [r0, #28]
   24f04:	079a      	lsls	r2, r3, #30
   24f06:	d4f7      	bmi.n	24ef8 <preempt+0xc8>
			    event.curr.param == iter->prepare_param.param) {
   24f08:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   24f0a:	6831      	ldr	r1, [r6, #0]
   24f0c:	4291      	cmp	r1, r2
   24f0e:	d1f3      	bne.n	24ef8 <preempt+0xc8>
				iter->is_aborted = 1;
   24f10:	f043 0302 	orr.w	r3, r3, #2
   24f14:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   24f16:	6983      	ldr	r3, [r0, #24]
   24f18:	4798      	blx	r3
				iter_idx = UINT8_MAX;
   24f1a:	f88d 400b 	strb.w	r4, [sp, #11]
   24f1e:	e7eb      	b.n	24ef8 <preempt+0xc8>
	struct lll_prepare_param prepare_param = {0};
   24f20:	2100      	movs	r1, #0
	prepare_param.param = event.curr.param;
   24f22:	6830      	ldr	r0, [r6, #0]
	struct lll_prepare_param prepare_param = {0};
   24f24:	9106      	str	r1, [sp, #24]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   24f26:	2301      	movs	r3, #1
	struct lll_prepare_param prepare_param = {0};
   24f28:	e9cd 1104 	strd	r1, r1, [sp, #16]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   24f2c:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
   24f2e:	9007      	str	r0, [sp, #28]
	event.curr.param = NULL;
   24f30:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   24f32:	9b03      	ldr	r3, [sp, #12]
   24f34:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   24f38:	aa04      	add	r2, sp, #16
   24f3a:	f7f8 fef3 	bl	1dd24 <ull_prepare_enqueue>
		LL_ASSERT(iter);
   24f3e:	2800      	cmp	r0, #0
   24f40:	d192      	bne.n	24e68 <preempt+0x38>
   24f42:	4a08      	ldr	r2, [pc, #32]	; (24f64 <preempt+0x134>)
   24f44:	490b      	ldr	r1, [pc, #44]	; (24f74 <preempt+0x144>)
   24f46:	4809      	ldr	r0, [pc, #36]	; (24f6c <preempt+0x13c>)
   24f48:	f240 33ce 	movw	r3, #974	; 0x3ce
   24f4c:	f007 f83b 	bl	2bfc6 <assert_print>
   24f50:	4040      	eors	r0, r0
   24f52:	f380 8811 	msr	BASEPRI, r0
   24f56:	f04f 0003 	mov.w	r0, #3
   24f5a:	df02      	svc	2
   24f5c:	e784      	b.n	24e68 <preempt+0x38>
   24f5e:	bf00      	nop
   24f60:	20002cf8 	.word	0x20002cf8
   24f64:	00033b2c 	.word	0x00033b2c
   24f68:	00033c04 	.word	0x00033c04
   24f6c:	00032fc4 	.word	0x00032fc4
   24f70:	000334f0 	.word	0x000334f0
   24f74:	00033bfc 	.word	0x00033bfc

00024f78 <lll_init>:
{
   24f78:	b510      	push	{r4, lr}
   24f7a:	4816      	ldr	r0, [pc, #88]	; (24fd4 <lll_init+0x5c>)
   24f7c:	f004 ffd2 	bl	29f24 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   24f80:	4b15      	ldr	r3, [pc, #84]	; (24fd8 <lll_init+0x60>)
   24f82:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   24f84:	b310      	cbz	r0, 24fcc <lll_init+0x54>
	event.curr.abort_cb = NULL;
   24f86:	4b15      	ldr	r3, [pc, #84]	; (24fdc <lll_init+0x64>)
   24f88:	2400      	movs	r4, #0
   24f8a:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   24f8c:	f000 fafa 	bl	25584 <lll_clock_init>
	if (err < 0) {
   24f90:	2800      	cmp	r0, #0
   24f92:	db1a      	blt.n	24fca <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   24f94:	4621      	mov	r1, r4
   24f96:	2001      	movs	r0, #1
   24f98:	4622      	mov	r2, r4
   24f9a:	f7eb fc7d 	bl	10898 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   24f9e:	4622      	mov	r2, r4
   24fa0:	200b      	movs	r0, #11
   24fa2:	2101      	movs	r1, #1
   24fa4:	f7eb fc78 	bl	10898 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   24fa8:	4622      	mov	r2, r4
   24faa:	4621      	mov	r1, r4
   24fac:	2018      	movs	r0, #24
   24fae:	f7eb fc73 	bl	10898 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   24fb2:	2001      	movs	r0, #1
   24fb4:	f7eb fc3e 	bl	10834 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   24fb8:	200b      	movs	r0, #11
   24fba:	f7eb fc3b 	bl	10834 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   24fbe:	2018      	movs	r0, #24
   24fc0:	f7eb fc38 	bl	10834 <arch_irq_enable>
	radio_setup();
   24fc4:	f001 fe4c 	bl	26c60 <radio_setup>
	return 0;
   24fc8:	4620      	mov	r0, r4
}
   24fca:	bd10      	pop	{r4, pc}
		return -ENODEV;
   24fcc:	f06f 0012 	mvn.w	r0, #18
}
   24fd0:	bd10      	pop	{r4, pc}
   24fd2:	bf00      	nop
   24fd4:	00033c10 	.word	0x00033c10
   24fd8:	20002cf4 	.word	0x20002cf4
   24fdc:	20002cf8 	.word	0x20002cf8

00024fe0 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   24fe0:	4a05      	ldr	r2, [pc, #20]	; (24ff8 <lll_csrand_get+0x18>)
{
   24fe2:	b410      	push	{r4}
   24fe4:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   24fe6:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   24fe8:	6884      	ldr	r4, [r0, #8]
   24fea:	6824      	ldr	r4, [r4, #0]
   24fec:	b28a      	uxth	r2, r1
   24fee:	4619      	mov	r1, r3
   24ff0:	4623      	mov	r3, r4
}
   24ff2:	bc10      	pop	{r4}
   24ff4:	4718      	bx	r3
   24ff6:	bf00      	nop
   24ff8:	20002cf4 	.word	0x20002cf4

00024ffc <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   24ffc:	4b08      	ldr	r3, [pc, #32]	; (25020 <lll_csrand_isr_get+0x24>)
{
   24ffe:	b430      	push	{r4, r5}
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   25000:	681d      	ldr	r5, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   25002:	68ab      	ldr	r3, [r5, #8]
   25004:	685c      	ldr	r4, [r3, #4]
   25006:	b13c      	cbz	r4, 25018 <lll_csrand_isr_get+0x1c>
   25008:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   2500a:	46a4      	mov	ip, r4
   2500c:	4601      	mov	r1, r0
   2500e:	b292      	uxth	r2, r2
   25010:	4628      	mov	r0, r5
   25012:	2300      	movs	r3, #0
}
   25014:	bc30      	pop	{r4, r5}
   25016:	4760      	bx	ip
   25018:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2501c:	bc30      	pop	{r4, r5}
   2501e:	4770      	bx	lr
   25020:	20002cf4 	.word	0x20002cf4

00025024 <lll_rand_isr_get>:
   25024:	4b08      	ldr	r3, [pc, #32]	; (25048 <lll_rand_isr_get+0x24>)
   25026:	b430      	push	{r4, r5}
   25028:	681d      	ldr	r5, [r3, #0]
   2502a:	68ab      	ldr	r3, [r5, #8]
   2502c:	685c      	ldr	r4, [r3, #4]
   2502e:	b13c      	cbz	r4, 25040 <lll_rand_isr_get+0x1c>
   25030:	460a      	mov	r2, r1
   25032:	46a4      	mov	ip, r4
   25034:	4601      	mov	r1, r0
   25036:	b292      	uxth	r2, r2
   25038:	4628      	mov	r0, r5
   2503a:	2300      	movs	r3, #0
   2503c:	bc30      	pop	{r4, r5}
   2503e:	4760      	bx	ip
   25040:	f06f 0085 	mvn.w	r0, #133	; 0x85
   25044:	bc30      	pop	{r4, r5}
   25046:	4770      	bx	lr
   25048:	20002cf4 	.word	0x20002cf4

0002504c <lll_reset>:
}
   2504c:	2000      	movs	r0, #0
   2504e:	4770      	bx	lr

00025050 <lll_disable>:
{
   25050:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   25052:	4604      	mov	r4, r0
{
   25054:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   25056:	b378      	cbz	r0, 250b8 <lll_disable+0x68>
   25058:	4b23      	ldr	r3, [pc, #140]	; (250e8 <lll_disable+0x98>)
   2505a:	681a      	ldr	r2, [r3, #0]
   2505c:	4282      	cmp	r2, r0
   2505e:	d025      	beq.n	250ac <lll_disable+0x5c>
		idx = UINT8_MAX;
   25060:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   25062:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   25066:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   2506a:	f7f8 fe9b 	bl	1dda4 <ull_prepare_dequeue_iter>
		while (next) {
   2506e:	b938      	cbnz	r0, 25080 <lll_disable+0x30>
   25070:	e01a      	b.n	250a8 <lll_disable+0x58>
			    (!param || (param == next->prepare_param.param))) {
   25072:	428c      	cmp	r4, r1
   25074:	d00a      	beq.n	2508c <lll_disable+0x3c>
			next = ull_prepare_dequeue_iter(&idx);
   25076:	f10d 0007 	add.w	r0, sp, #7
   2507a:	f7f8 fe93 	bl	1dda4 <ull_prepare_dequeue_iter>
		while (next) {
   2507e:	b198      	cbz	r0, 250a8 <lll_disable+0x58>
			if (!next->is_aborted &&
   25080:	7f03      	ldrb	r3, [r0, #28]
   25082:	079b      	lsls	r3, r3, #30
   25084:	d4f7      	bmi.n	25076 <lll_disable+0x26>
			    (!param || (param == next->prepare_param.param))) {
   25086:	68c1      	ldr	r1, [r0, #12]
			if (!next->is_aborted &&
   25088:	2c00      	cmp	r4, #0
   2508a:	d1f2      	bne.n	25072 <lll_disable+0x22>
				next->is_aborted = 1;
   2508c:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   2508e:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   25090:	f043 0302 	orr.w	r3, r3, #2
   25094:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   25096:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   25098:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   2509c:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   250a0:	f7f8 fe80 	bl	1dda4 <ull_prepare_dequeue_iter>
		while (next) {
   250a4:	2800      	cmp	r0, #0
   250a6:	d1eb      	bne.n	25080 <lll_disable+0x30>
}
   250a8:	b003      	add	sp, #12
   250aa:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   250ac:	689b      	ldr	r3, [r3, #8]
   250ae:	b16b      	cbz	r3, 250cc <lll_disable+0x7c>
   250b0:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   250b2:	2000      	movs	r0, #0
   250b4:	4798      	blx	r3
   250b6:	e7d3      	b.n	25060 <lll_disable+0x10>
		if (event.curr.abort_cb && event.curr.param) {
   250b8:	4a0b      	ldr	r2, [pc, #44]	; (250e8 <lll_disable+0x98>)
   250ba:	6893      	ldr	r3, [r2, #8]
   250bc:	2b00      	cmp	r3, #0
   250be:	d0cf      	beq.n	25060 <lll_disable+0x10>
   250c0:	6811      	ldr	r1, [r2, #0]
   250c2:	2900      	cmp	r1, #0
   250c4:	d0cc      	beq.n	25060 <lll_disable+0x10>
			event.curr.abort_cb(NULL, event.curr.param);
   250c6:	2000      	movs	r0, #0
   250c8:	4798      	blx	r3
   250ca:	e7c9      	b.n	25060 <lll_disable+0x10>
			LL_ASSERT(!param);
   250cc:	4a07      	ldr	r2, [pc, #28]	; (250ec <lll_disable+0x9c>)
   250ce:	4908      	ldr	r1, [pc, #32]	; (250f0 <lll_disable+0xa0>)
   250d0:	4808      	ldr	r0, [pc, #32]	; (250f4 <lll_disable+0xa4>)
   250d2:	23fd      	movs	r3, #253	; 0xfd
   250d4:	f006 ff77 	bl	2bfc6 <assert_print>
   250d8:	4040      	eors	r0, r0
   250da:	f380 8811 	msr	BASEPRI, r0
   250de:	f04f 0003 	mov.w	r0, #3
   250e2:	df02      	svc	2
   250e4:	e7bc      	b.n	25060 <lll_disable+0x10>
   250e6:	bf00      	nop
   250e8:	20002cf8 	.word	0x20002cf8
   250ec:	00033b2c 	.word	0x00033b2c
   250f0:	00033c14 	.word	0x00033c14
   250f4:	00032fc4 	.word	0x00032fc4

000250f8 <lll_prepare_done>:
}
   250f8:	2000      	movs	r0, #0
   250fa:	4770      	bx	lr

000250fc <lll_done>:
{
   250fc:	b538      	push	{r3, r4, r5, lr}
   250fe:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   25100:	f7f8 fe42 	bl	1dd88 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   25104:	b154      	cbz	r4, 2511c <lll_done+0x20>
   25106:	b310      	cbz	r0, 2514e <lll_done+0x52>
			ull = HDR_LLL2ULL(param);
   25108:	6824      	ldr	r4, [r4, #0]
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   2510a:	2000      	movs	r0, #0
   2510c:	f7f8 fe6a 	bl	1dde4 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   25110:	4620      	mov	r0, r4
   25112:	f7f8 fecd 	bl	1deb0 <ull_event_done>
	LL_ASSERT(evdone);
   25116:	b158      	cbz	r0, 25130 <lll_done+0x34>
}
   25118:	2000      	movs	r0, #0
   2511a:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   2511c:	4d1a      	ldr	r5, [pc, #104]	; (25188 <lll_done+0x8c>)
   2511e:	68ab      	ldr	r3, [r5, #8]
   25120:	b31b      	cbz	r3, 2516a <lll_done+0x6e>
		param = event.curr.param;
   25122:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   25124:	2300      	movs	r3, #0
   25126:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   25128:	602b      	str	r3, [r5, #0]
		if (param) {
   2512a:	2c00      	cmp	r4, #0
   2512c:	d1ec      	bne.n	25108 <lll_done+0xc>
   2512e:	e7ec      	b.n	2510a <lll_done+0xe>
	LL_ASSERT(evdone);
   25130:	4a16      	ldr	r2, [pc, #88]	; (2518c <lll_done+0x90>)
   25132:	4917      	ldr	r1, [pc, #92]	; (25190 <lll_done+0x94>)
   25134:	4817      	ldr	r0, [pc, #92]	; (25194 <lll_done+0x98>)
   25136:	f240 136d 	movw	r3, #365	; 0x16d
   2513a:	f006 ff44 	bl	2bfc6 <assert_print>
   2513e:	4040      	eors	r0, r0
   25140:	f380 8811 	msr	BASEPRI, r0
   25144:	f04f 0003 	mov.w	r0, #3
   25148:	df02      	svc	2
}
   2514a:	2000      	movs	r0, #0
   2514c:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   2514e:	4a0f      	ldr	r2, [pc, #60]	; (2518c <lll_done+0x90>)
   25150:	4911      	ldr	r1, [pc, #68]	; (25198 <lll_done+0x9c>)
   25152:	4810      	ldr	r0, [pc, #64]	; (25194 <lll_done+0x98>)
   25154:	f240 1337 	movw	r3, #311	; 0x137
   25158:	f006 ff35 	bl	2bfc6 <assert_print>
   2515c:	4040      	eors	r0, r0
   2515e:	f380 8811 	msr	BASEPRI, r0
   25162:	f04f 0003 	mov.w	r0, #3
   25166:	df02      	svc	2
   25168:	e7ce      	b.n	25108 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   2516a:	4a08      	ldr	r2, [pc, #32]	; (2518c <lll_done+0x90>)
   2516c:	490b      	ldr	r1, [pc, #44]	; (2519c <lll_done+0xa0>)
   2516e:	4809      	ldr	r0, [pc, #36]	; (25194 <lll_done+0x98>)
   25170:	f240 133d 	movw	r3, #317	; 0x13d
   25174:	f006 ff27 	bl	2bfc6 <assert_print>
   25178:	4040      	eors	r0, r0
   2517a:	f380 8811 	msr	BASEPRI, r0
   2517e:	f04f 0003 	mov.w	r0, #3
   25182:	df02      	svc	2
   25184:	e7cd      	b.n	25122 <lll_done+0x26>
   25186:	bf00      	nop
   25188:	20002cf8 	.word	0x20002cf8
   2518c:	00033b2c 	.word	0x00033b2c
   25190:	00033c40 	.word	0x00033c40
   25194:	00032fc4 	.word	0x00032fc4
   25198:	00033c1c 	.word	0x00033c1c
   2519c:	00033c2c 	.word	0x00033c2c

000251a0 <lll_is_abort_cb>:
}
   251a0:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   251a4:	4770      	bx	lr
   251a6:	bf00      	nop

000251a8 <lll_event_offset_get>:
		return MAX(ull->ticks_active_to_start,
   251a8:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   251ac:	2a00      	cmp	r2, #0
   251ae:	db04      	blt.n	251ba <lll_event_offset_get+0x12>
		return MAX(ull->ticks_active_to_start,
   251b0:	429a      	cmp	r2, r3
   251b2:	bf38      	it	cc
   251b4:	461a      	movcc	r2, r3
   251b6:	4610      	mov	r0, r2
}
   251b8:	4770      	bx	lr
		return MAX(ull->ticks_active_to_start,
   251ba:	68c0      	ldr	r0, [r0, #12]
   251bc:	4298      	cmp	r0, r3
   251be:	bf38      	it	cc
   251c0:	4618      	movcc	r0, r3
   251c2:	4770      	bx	lr

000251c4 <lll_preempt_calc>:
{
   251c4:	b510      	push	{r4, lr}
   251c6:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   251c8:	f7f6 fab8 	bl	1b73c <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   251cc:	1b00      	subs	r0, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   251ce:	0203      	lsls	r3, r0, #8
   251d0:	d405      	bmi.n	251de <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   251d2:	3003      	adds	r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   251d4:	2809      	cmp	r0, #9
   251d6:	bf94      	ite	ls
   251d8:	2000      	movls	r0, #0
   251da:	2001      	movhi	r0, #1
}
   251dc:	bd10      	pop	{r4, pc}
		return 0;
   251de:	2000      	movs	r0, #0
}
   251e0:	bd10      	pop	{r4, pc}
   251e2:	bf00      	nop

000251e4 <lll_chan_set>:
	switch (chan) {
   251e4:	2826      	cmp	r0, #38	; 0x26
{
   251e6:	b510      	push	{r4, lr}
   251e8:	4604      	mov	r4, r0
	switch (chan) {
   251ea:	d01c      	beq.n	25226 <lll_chan_set+0x42>
   251ec:	2827      	cmp	r0, #39	; 0x27
   251ee:	d012      	beq.n	25216 <lll_chan_set+0x32>
   251f0:	2825      	cmp	r0, #37	; 0x25
   251f2:	d008      	beq.n	25206 <lll_chan_set+0x22>
		if (chan < 11) {
   251f4:	280a      	cmp	r0, #10
   251f6:	d91e      	bls.n	25236 <lll_chan_set+0x52>
		} else if (chan < 40) {
   251f8:	2827      	cmp	r0, #39	; 0x27
   251fa:	d821      	bhi.n	25240 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   251fc:	3003      	adds	r0, #3
   251fe:	0040      	lsls	r0, r0, #1
   25200:	f001 fd8a 	bl	26d18 <radio_freq_chan_set>
   25204:	e002      	b.n	2520c <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   25206:	2002      	movs	r0, #2
   25208:	f001 fd86 	bl	26d18 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   2520c:	4620      	mov	r0, r4
}
   2520e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   25212:	f001 bd87 	b.w	26d24 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   25216:	2050      	movs	r0, #80	; 0x50
   25218:	f001 fd7e 	bl	26d18 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   2521c:	4620      	mov	r0, r4
}
   2521e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   25222:	f001 bd7f 	b.w	26d24 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   25226:	201a      	movs	r0, #26
   25228:	f001 fd76 	bl	26d18 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   2522c:	4620      	mov	r0, r4
}
   2522e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   25232:	f001 bd77 	b.w	26d24 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   25236:	3002      	adds	r0, #2
   25238:	0040      	lsls	r0, r0, #1
   2523a:	f001 fd6d 	bl	26d18 <radio_freq_chan_set>
   2523e:	e7e5      	b.n	2520c <lll_chan_set+0x28>
			LL_ASSERT(0);
   25240:	4a06      	ldr	r2, [pc, #24]	; (2525c <lll_chan_set+0x78>)
   25242:	4907      	ldr	r1, [pc, #28]	; (25260 <lll_chan_set+0x7c>)
   25244:	4807      	ldr	r0, [pc, #28]	; (25264 <lll_chan_set+0x80>)
   25246:	f240 13df 	movw	r3, #479	; 0x1df
   2524a:	f006 febc 	bl	2bfc6 <assert_print>
   2524e:	4040      	eors	r0, r0
   25250:	f380 8811 	msr	BASEPRI, r0
   25254:	f04f 0003 	mov.w	r0, #3
   25258:	df02      	svc	2
   2525a:	e7d7      	b.n	2520c <lll_chan_set+0x28>
   2525c:	00033b2c 	.word	0x00033b2c
   25260:	0003305c 	.word	0x0003305c
   25264:	00032fc4 	.word	0x00032fc4

00025268 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   25268:	f001 bdbc 	b.w	26de4 <radio_rx_ready_delay_get>

0002526c <lll_isr_tx_status_reset>:
{
   2526c:	b508      	push	{r3, lr}
	radio_status_reset();
   2526e:	f001 fddb 	bl	26e28 <radio_status_reset>
}
   25272:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   25276:	f001 bf29 	b.w	270cc <radio_tmr_status_reset>
   2527a:	bf00      	nop

0002527c <lll_isr_rx_status_reset>:
{
   2527c:	b508      	push	{r3, lr}
	radio_status_reset();
   2527e:	f001 fdd3 	bl	26e28 <radio_status_reset>
	radio_tmr_status_reset();
   25282:	f001 ff23 	bl	270cc <radio_tmr_status_reset>
}
   25286:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   2528a:	f001 becb 	b.w	27024 <radio_rssi_status_reset>
   2528e:	bf00      	nop

00025290 <lll_isr_status_reset>:
{
   25290:	b508      	push	{r3, lr}
	radio_status_reset();
   25292:	f001 fdc9 	bl	26e28 <radio_status_reset>
	radio_tmr_status_reset();
   25296:	f001 ff19 	bl	270cc <radio_tmr_status_reset>
	radio_filter_status_reset();
   2529a:	f001 feff 	bl	2709c <radio_filter_status_reset>
	radio_ar_status_reset();
   2529e:	f002 f8df 	bl	27460 <radio_ar_status_reset>
}
   252a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   252a6:	f001 bebd 	b.w	27024 <radio_rssi_status_reset>
   252aa:	bf00      	nop

000252ac <lll_isr_cleanup>:
{
   252ac:	b508      	push	{r3, lr}
   252ae:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   252b0:	4815      	ldr	r0, [pc, #84]	; (25308 <lll_isr_cleanup+0x5c>)
   252b2:	f001 fcb5 	bl	26c20 <radio_isr_set>
	if (!radio_is_idle()) {
   252b6:	f001 fdd7 	bl	26e68 <radio_is_idle>
   252ba:	b150      	cbz	r0, 252d2 <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   252bc:	f001 ffaa 	bl	27214 <radio_tmr_stop>
	err = lll_hfclock_off();
   252c0:	f000 f9a4 	bl	2560c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   252c4:	2800      	cmp	r0, #0
   252c6:	db0c      	blt.n	252e2 <lll_isr_cleanup+0x36>
}
   252c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   252cc:	2000      	movs	r0, #0
   252ce:	f7ff bf15 	b.w	250fc <lll_done>
		radio_disable();
   252d2:	f001 fd95 	bl	26e00 <radio_disable>
	radio_tmr_stop();
   252d6:	f001 ff9d 	bl	27214 <radio_tmr_stop>
	err = lll_hfclock_off();
   252da:	f000 f997 	bl	2560c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   252de:	2800      	cmp	r0, #0
   252e0:	daf2      	bge.n	252c8 <lll_isr_cleanup+0x1c>
   252e2:	4a0a      	ldr	r2, [pc, #40]	; (2530c <lll_isr_cleanup+0x60>)
   252e4:	490a      	ldr	r1, [pc, #40]	; (25310 <lll_isr_cleanup+0x64>)
   252e6:	480b      	ldr	r0, [pc, #44]	; (25314 <lll_isr_cleanup+0x68>)
   252e8:	f240 2342 	movw	r3, #578	; 0x242
   252ec:	f006 fe6b 	bl	2bfc6 <assert_print>
   252f0:	4040      	eors	r0, r0
   252f2:	f380 8811 	msr	BASEPRI, r0
   252f6:	f04f 0003 	mov.w	r0, #3
   252fa:	df02      	svc	2
	lll_done(NULL);
   252fc:	2000      	movs	r0, #0
}
   252fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   25302:	f7ff befb 	b.w	250fc <lll_done>
   25306:	bf00      	nop
   25308:	00024c59 	.word	0x00024c59
   2530c:	00033b2c 	.word	0x00033b2c
   25310:	00033c48 	.word	0x00033c48
   25314:	00032fc4 	.word	0x00032fc4

00025318 <lll_isr_abort>:
{
   25318:	b510      	push	{r4, lr}
   2531a:	4604      	mov	r4, r0
	radio_status_reset();
   2531c:	f001 fd84 	bl	26e28 <radio_status_reset>
	radio_tmr_status_reset();
   25320:	f001 fed4 	bl	270cc <radio_tmr_status_reset>
	radio_filter_status_reset();
   25324:	f001 feba 	bl	2709c <radio_filter_status_reset>
	radio_ar_status_reset();
   25328:	f002 f89a 	bl	27460 <radio_ar_status_reset>
	radio_rssi_status_reset();
   2532c:	f001 fe7a 	bl	27024 <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   25330:	4620      	mov	r0, r4
}
   25332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   25336:	f7ff bfb9 	b.w	252ac <lll_isr_cleanup>
   2533a:	bf00      	nop

0002533c <lll_isr_early_abort>:
{
   2533c:	b508      	push	{r3, lr}
   2533e:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   25340:	4813      	ldr	r0, [pc, #76]	; (25390 <lll_isr_early_abort+0x54>)
   25342:	f001 fc6d 	bl	26c20 <radio_isr_set>
	if (!radio_is_idle()) {
   25346:	f001 fd8f 	bl	26e68 <radio_is_idle>
   2534a:	b140      	cbz	r0, 2535e <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   2534c:	f000 f95e 	bl	2560c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   25350:	2800      	cmp	r0, #0
   25352:	db0a      	blt.n	2536a <lll_isr_early_abort+0x2e>
}
   25354:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   25358:	2000      	movs	r0, #0
   2535a:	f7ff becf 	b.w	250fc <lll_done>
		radio_disable();
   2535e:	f001 fd4f 	bl	26e00 <radio_disable>
	err = lll_hfclock_off();
   25362:	f000 f953 	bl	2560c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   25366:	2800      	cmp	r0, #0
   25368:	daf4      	bge.n	25354 <lll_isr_early_abort+0x18>
   2536a:	4a0a      	ldr	r2, [pc, #40]	; (25394 <lll_isr_early_abort+0x58>)
   2536c:	490a      	ldr	r1, [pc, #40]	; (25398 <lll_isr_early_abort+0x5c>)
   2536e:	480b      	ldr	r0, [pc, #44]	; (2539c <lll_isr_early_abort+0x60>)
   25370:	f240 2351 	movw	r3, #593	; 0x251
   25374:	f006 fe27 	bl	2bfc6 <assert_print>
   25378:	4040      	eors	r0, r0
   2537a:	f380 8811 	msr	BASEPRI, r0
   2537e:	f04f 0003 	mov.w	r0, #3
   25382:	df02      	svc	2
	lll_done(NULL);
   25384:	2000      	movs	r0, #0
}
   25386:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   2538a:	f7ff beb7 	b.w	250fc <lll_done>
   2538e:	bf00      	nop
   25390:	00024c59 	.word	0x00024c59
   25394:	00033b2c 	.word	0x00033b2c
   25398:	00033c48 	.word	0x00033c48
   2539c:	00032fc4 	.word	0x00032fc4

000253a0 <lll_prepare_resolve>:
{
   253a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   253a4:	b084      	sub	sp, #16
   253a6:	4606      	mov	r6, r0
   253a8:	461d      	mov	r5, r3
	p = ull_prepare_dequeue_iter(&idx);
   253aa:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   253ae:	23ff      	movs	r3, #255	; 0xff
{
   253b0:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   253b4:	f88d 300f 	strb.w	r3, [sp, #15]
{
   253b8:	460f      	mov	r7, r1
   253ba:	4690      	mov	r8, r2
	p = ull_prepare_dequeue_iter(&idx);
   253bc:	f7f8 fcf2 	bl	1dda4 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   253c0:	4604      	mov	r4, r0
   253c2:	b920      	cbnz	r0, 253ce <lll_prepare_resolve+0x2e>
   253c4:	e032      	b.n	2542c <lll_prepare_resolve+0x8c>
		p = ull_prepare_dequeue_iter(&idx);
   253c6:	f7f8 fced 	bl	1dda4 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   253ca:	4604      	mov	r4, r0
   253cc:	b370      	cbz	r0, 2542c <lll_prepare_resolve+0x8c>
   253ce:	f894 c01c 	ldrb.w	ip, [r4, #28]
   253d2:	f01c 0f03 	tst.w	ip, #3
		p = ull_prepare_dequeue_iter(&idx);
   253d6:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   253da:	d1f4      	bne.n	253c6 <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   253dc:	f8df a130 	ldr.w	sl, [pc, #304]	; 25510 <lll_prepare_resolve+0x170>
	if ((!is_dequeue && !is_done_sync()) ||
   253e0:	f8da 3008 	ldr.w	r3, [sl, #8]
   253e4:	bb4b      	cbnz	r3, 2543a <lll_prepare_resolve+0x9a>
	    (p && is_resume)) {
   253e6:	f1b9 0f00 	cmp.w	r9, #0
   253ea:	d048      	beq.n	2547e <lll_prepare_resolve+0xde>
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   253ec:	f8cd 9000 	str.w	r9, [sp]
   253f0:	4643      	mov	r3, r8
   253f2:	462a      	mov	r2, r5
   253f4:	4639      	mov	r1, r7
   253f6:	4630      	mov	r0, r6
   253f8:	f7f8 fc94 	bl	1dd24 <ull_prepare_enqueue>
		LL_ASSERT(next);
   253fc:	b980      	cbnz	r0, 25420 <lll_prepare_resolve+0x80>
   253fe:	4a45      	ldr	r2, [pc, #276]	; (25514 <lll_prepare_resolve+0x174>)
   25400:	4945      	ldr	r1, [pc, #276]	; (25518 <lll_prepare_resolve+0x178>)
   25402:	4846      	ldr	r0, [pc, #280]	; (2551c <lll_prepare_resolve+0x17c>)
   25404:	f240 238d 	movw	r3, #653	; 0x28d
   25408:	f006 fddd 	bl	2bfc6 <assert_print>
   2540c:	4040      	eors	r0, r0
   2540e:	f380 8811 	msr	BASEPRI, r0
   25412:	f04f 0003 	mov.w	r0, #3
   25416:	df02      	svc	2
   25418:	2000      	movs	r0, #0
		if (is_resume) {
   2541a:	f1b9 0f00 	cmp.w	r9, #0
   2541e:	d019      	beq.n	25454 <lll_prepare_resolve+0xb4>
		return -EINPROGRESS;
   25420:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   25424:	4620      	mov	r0, r4
   25426:	b004      	add	sp, #16
   25428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    event.curr.abort_cb ||
   2542c:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 25510 <lll_prepare_resolve+0x170>
	if ((!is_dequeue && !is_done_sync()) ||
   25430:	f8da 3008 	ldr.w	r3, [sl, #8]
   25434:	2b00      	cmp	r3, #0
   25436:	d031      	beq.n	2549c <lll_prepare_resolve+0xfc>
   25438:	2400      	movs	r4, #0
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   2543a:	f8cd 9000 	str.w	r9, [sp]
   2543e:	4643      	mov	r3, r8
   25440:	462a      	mov	r2, r5
   25442:	4639      	mov	r1, r7
   25444:	4630      	mov	r0, r6
   25446:	f7f8 fc6d 	bl	1dd24 <ull_prepare_enqueue>
		LL_ASSERT(next);
   2544a:	2800      	cmp	r0, #0
   2544c:	d0d7      	beq.n	253fe <lll_prepare_resolve+0x5e>
		if (is_resume) {
   2544e:	f1b9 0f00 	cmp.w	r9, #0
   25452:	d1e5      	bne.n	25420 <lll_prepare_resolve+0x80>
		ret  = preempt_ticker_start(p, next);
   25454:	4601      	mov	r1, r0
   25456:	4620      	mov	r0, r4
   25458:	f7ff fc80 	bl	24d5c <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   2545c:	f030 0302 	bics.w	r3, r0, #2
   25460:	d0de      	beq.n	25420 <lll_prepare_resolve+0x80>
   25462:	4a2c      	ldr	r2, [pc, #176]	; (25514 <lll_prepare_resolve+0x174>)
   25464:	492e      	ldr	r1, [pc, #184]	; (25520 <lll_prepare_resolve+0x180>)
   25466:	482d      	ldr	r0, [pc, #180]	; (2551c <lll_prepare_resolve+0x17c>)
   25468:	f44f 7326 	mov.w	r3, #664	; 0x298
   2546c:	f006 fdab 	bl	2bfc6 <assert_print>
   25470:	4040      	eors	r0, r0
   25472:	f380 8811 	msr	BASEPRI, r0
   25476:	f04f 0003 	mov.w	r0, #3
   2547a:	df02      	svc	2
   2547c:	e7d0      	b.n	25420 <lll_prepare_resolve+0x80>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   2547e:	42ac      	cmp	r4, r5
   25480:	d00c      	beq.n	2549c <lll_prepare_resolve+0xfc>
   25482:	4a24      	ldr	r2, [pc, #144]	; (25514 <lll_prepare_resolve+0x174>)
   25484:	4927      	ldr	r1, [pc, #156]	; (25524 <lll_prepare_resolve+0x184>)
   25486:	4825      	ldr	r0, [pc, #148]	; (2551c <lll_prepare_resolve+0x17c>)
   25488:	f240 23be 	movw	r3, #702	; 0x2be
   2548c:	f006 fd9b 	bl	2bfc6 <assert_print>
   25490:	4040      	eors	r0, r0
   25492:	f380 8811 	msr	BASEPRI, r0
   25496:	f04f 0003 	mov.w	r0, #3
   2549a:	df02      	svc	2
	event.curr.param = prepare_param->param;
   2549c:	68eb      	ldr	r3, [r5, #12]
   2549e:	f8ca 3000 	str.w	r3, [sl]
	event.curr.abort_cb = abort_cb;
   254a2:	e9ca 6701 	strd	r6, r7, [sl, #4]
	err = prepare_cb(prepare_param);
   254a6:	4628      	mov	r0, r5
   254a8:	47c0      	blx	r8
   254aa:	4604      	mov	r4, r0
	ret = preempt_ticker_stop();
   254ac:	f7ff fc16 	bl	24cdc <preempt_ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   254b0:	f030 0302 	bics.w	r3, r0, #2
   254b4:	d11e      	bne.n	254f4 <lll_prepare_resolve+0x154>
		p = ull_prepare_dequeue_iter(&idx);
   254b6:	f10d 000f 	add.w	r0, sp, #15
   254ba:	f7f8 fc73 	bl	1dda4 <ull_prepare_dequeue_iter>
		if (!p) {
   254be:	2800      	cmp	r0, #0
   254c0:	d0b0      	beq.n	25424 <lll_prepare_resolve+0x84>
	} while (p->is_aborted || p->is_resume);
   254c2:	7f03      	ldrb	r3, [r0, #28]
   254c4:	f013 0303 	ands.w	r3, r3, #3
   254c8:	d1f5      	bne.n	254b6 <lll_prepare_resolve+0x116>
	ret = preempt_ticker_start(NULL, p);
   254ca:	4601      	mov	r1, r0
   254cc:	4618      	mov	r0, r3
   254ce:	f7ff fc45 	bl	24d5c <preempt_ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   254d2:	f030 0302 	bics.w	r3, r0, #2
   254d6:	d0a5      	beq.n	25424 <lll_prepare_resolve+0x84>
   254d8:	4a0e      	ldr	r2, [pc, #56]	; (25514 <lll_prepare_resolve+0x174>)
   254da:	4911      	ldr	r1, [pc, #68]	; (25520 <lll_prepare_resolve+0x180>)
   254dc:	480f      	ldr	r0, [pc, #60]	; (2551c <lll_prepare_resolve+0x17c>)
   254de:	f44f 7336 	mov.w	r3, #728	; 0x2d8
   254e2:	f006 fd70 	bl	2bfc6 <assert_print>
   254e6:	4040      	eors	r0, r0
   254e8:	f380 8811 	msr	BASEPRI, r0
   254ec:	f04f 0003 	mov.w	r0, #3
   254f0:	df02      	svc	2
   254f2:	e797      	b.n	25424 <lll_prepare_resolve+0x84>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   254f4:	4a07      	ldr	r2, [pc, #28]	; (25514 <lll_prepare_resolve+0x174>)
   254f6:	490a      	ldr	r1, [pc, #40]	; (25520 <lll_prepare_resolve+0x180>)
   254f8:	4808      	ldr	r0, [pc, #32]	; (2551c <lll_prepare_resolve+0x17c>)
   254fa:	f240 23cb 	movw	r3, #715	; 0x2cb
   254fe:	f006 fd62 	bl	2bfc6 <assert_print>
   25502:	4040      	eors	r0, r0
   25504:	f380 8811 	msr	BASEPRI, r0
   25508:	f04f 0003 	mov.w	r0, #3
   2550c:	df02      	svc	2
   2550e:	e7d2      	b.n	254b6 <lll_prepare_resolve+0x116>
   25510:	20002cf8 	.word	0x20002cf8
   25514:	00033b2c 	.word	0x00033b2c
   25518:	00033c54 	.word	0x00033c54
   2551c:	00032fc4 	.word	0x00032fc4
   25520:	000334f0 	.word	0x000334f0
   25524:	00033c5c 	.word	0x00033c5c

00025528 <clock_ready>:
	z_impl_k_sem_give(sem);
   25528:	f101 0010 	add.w	r0, r1, #16
   2552c:	f005 b8ae 	b.w	2a68c <z_impl_k_sem_give>

00025530 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   25530:	b570      	push	{r4, r5, r6, lr}
   25532:	4605      	mov	r5, r0
   25534:	b08a      	sub	sp, #40	; 0x28
   25536:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   25538:	2201      	movs	r2, #1
   2553a:	2100      	movs	r1, #0
   2553c:	a804      	add	r0, sp, #16
   2553e:	f00c f93a 	bl	317b6 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   25542:	4b0f      	ldr	r3, [pc, #60]	; (25580 <blocking_on+0x50>)
   25544:	9301      	str	r3, [sp, #4]
   25546:	2600      	movs	r6, #0
   25548:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   2554a:	4669      	mov	r1, sp
   2554c:	4628      	mov	r0, r5
   2554e:	9603      	str	r6, [sp, #12]
   25550:	9302      	str	r3, [sp, #8]
   25552:	f006 fa9e 	bl	2ba92 <onoff_request>
	if (err < 0) {
   25556:	2800      	cmp	r0, #0
   25558:	db10      	blt.n	2557c <blocking_on+0x4c>
   2555a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   2555e:	4631      	mov	r1, r6
   25560:	f240 30e7 	movw	r0, #999	; 0x3e7
   25564:	fbe4 0103 	umlal	r0, r1, r4, r3
   25568:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2556c:	2300      	movs	r3, #0
   2556e:	f7e6 fec7 	bl	c300 <__aeabi_uldivmod>
   25572:	4602      	mov	r2, r0
   25574:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   25576:	a804      	add	r0, sp, #16
   25578:	f005 f8ae 	bl	2a6d8 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   2557c:	b00a      	add	sp, #40	; 0x28
   2557e:	bd70      	pop	{r4, r5, r6, pc}
   25580:	00025529 	.word	0x00025529

00025584 <lll_clock_init>:

int lll_clock_init(void)
{
   25584:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   25586:	2001      	movs	r0, #1
   25588:	f002 fcb2 	bl	27ef0 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   2558c:	4904      	ldr	r1, [pc, #16]	; (255a0 <lll_clock_init+0x1c>)
   2558e:	2300      	movs	r3, #0
   25590:	2401      	movs	r4, #1
   25592:	608c      	str	r4, [r1, #8]
   25594:	604b      	str	r3, [r1, #4]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   25596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2559a:	60cb      	str	r3, [r1, #12]
	return onoff_request(mgr, &lf_cli);
   2559c:	f006 ba79 	b.w	2ba92 <onoff_request>
   255a0:	20002d14 	.word	0x20002d14

000255a4 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   255a4:	4b0c      	ldr	r3, [pc, #48]	; (255d8 <lll_clock_wait+0x34>)
   255a6:	781a      	ldrb	r2, [r3, #0]
   255a8:	b10a      	cbz	r2, 255ae <lll_clock_wait+0xa>
		return 0;
   255aa:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   255ac:	4770      	bx	lr
{
   255ae:	b510      	push	{r4, lr}
	done = true;
   255b0:	2001      	movs	r0, #1
   255b2:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   255b4:	f002 fc9c 	bl	27ef0 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   255b8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   255bc:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   255be:	f7ff ffb7 	bl	25530 <blocking_on>
	if (err) {
   255c2:	b938      	cbnz	r0, 255d4 <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   255c4:	4620      	mov	r0, r4
   255c6:	f006 faad 	bl	2bb24 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   255ca:	2802      	cmp	r0, #2
		return 0;
   255cc:	bf0c      	ite	eq
   255ce:	2000      	moveq	r0, #0
		return -EIO;
   255d0:	f06f 0004 	mvnne.w	r0, #4
}
   255d4:	bd10      	pop	{r4, pc}
   255d6:	bf00      	nop
   255d8:	20003428 	.word	0x20003428

000255dc <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   255dc:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   255de:	4b0a      	ldr	r3, [pc, #40]	; (25608 <lll_hfclock_on+0x2c>)
   255e0:	f3bf 8f5b 	dmb	ish
   255e4:	e853 2f00 	ldrex	r2, [r3]
   255e8:	1c51      	adds	r1, r2, #1
   255ea:	e843 1000 	strex	r0, r1, [r3]
   255ee:	2800      	cmp	r0, #0
   255f0:	d1f8      	bne.n	255e4 <lll_hfclock_on+0x8>
   255f2:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   255f6:	2a00      	cmp	r2, #0
   255f8:	dd01      	ble.n	255fe <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   255fa:	2000      	movs	r0, #0
   255fc:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   255fe:	f002 fc7f 	bl	27f00 <z_nrf_clock_bt_ctlr_hf_request>
}
   25602:	2000      	movs	r0, #0
   25604:	bd08      	pop	{r3, pc}
   25606:	bf00      	nop
   25608:	20002d10 	.word	0x20002d10

0002560c <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   2560c:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   2560e:	4b0d      	ldr	r3, [pc, #52]	; (25644 <lll_hfclock_off+0x38>)
   25610:	681a      	ldr	r2, [r3, #0]
   25612:	2a00      	cmp	r2, #0
   25614:	dd12      	ble.n	2563c <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   25616:	f3bf 8f5b 	dmb	ish
   2561a:	e853 2f00 	ldrex	r2, [r3]
   2561e:	1e51      	subs	r1, r2, #1
   25620:	e843 1000 	strex	r0, r1, [r3]
   25624:	2800      	cmp	r0, #0
   25626:	d1f8      	bne.n	2561a <lll_hfclock_off+0xe>
   25628:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   2562c:	2a01      	cmp	r2, #1
   2562e:	dd01      	ble.n	25634 <lll_hfclock_off+0x28>
		return 0;
   25630:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   25632:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   25634:	f002 fc7a 	bl	27f2c <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   25638:	2000      	movs	r0, #0
}
   2563a:	bd08      	pop	{r3, pc}
		return -EALREADY;
   2563c:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   25640:	bd08      	pop	{r3, pc}
   25642:	bf00      	nop
   25644:	20002d10 	.word	0x20002d10

00025648 <lll_clock_ppm_local_get>:
}

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   25648:	2032      	movs	r0, #50	; 0x32
   2564a:	4770      	bx	lr

0002564c <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   2564c:	4b01      	ldr	r3, [pc, #4]	; (25654 <lll_clock_ppm_get+0x8>)
}
   2564e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   25652:	4770      	bx	lr
   25654:	00033ca8 	.word	0x00033ca8

00025658 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   25658:	b510      	push	{r4, lr}
   2565a:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   2565c:	f7ff fe18 	bl	25290 <lll_isr_status_reset>

	radio_filter_disable();
   25660:	f001 fd12 	bl	27088 <radio_filter_disable>

	lll_isr_cleanup(param);
   25664:	4620      	mov	r0, r4
}
   25666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   2566a:	f7ff be1f 	b.w	252ac <lll_isr_cleanup>
   2566e:	bf00      	nop

00025670 <isr_tx>:
{
   25670:	b530      	push	{r4, r5, lr}
   25672:	b083      	sub	sp, #12
   25674:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   25676:	f7ff fdf9 	bl	2526c <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   2567a:	2096      	movs	r0, #150	; 0x96
   2567c:	f001 fd36 	bl	270ec <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, phy_flags);
   25680:	2300      	movs	r3, #0
   25682:	4618      	mov	r0, r3
   25684:	461a      	mov	r2, r3
   25686:	4619      	mov	r1, r3
   25688:	f001 fc5e 	bl	26f48 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   2568c:	2001      	movs	r0, #1
   2568e:	f7f8 fafb 	bl	1dc88 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   25692:	4604      	mov	r4, r0
   25694:	2800      	cmp	r0, #0
   25696:	d043      	beq.n	25720 <isr_tx+0xb0>
	radio_pkt_rx_set(node_rx->pdu);
   25698:	f104 001c 	add.w	r0, r4, #28
   2569c:	f001 fb94 	bl	26dc8 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   256a0:	f001 fbce 	bl	26e40 <radio_is_ready>
   256a4:	b9e0      	cbnz	r0, 256e0 <isr_tx+0x70>
	radio_isr_set(isr_rx, param);
   256a6:	4825      	ldr	r0, [pc, #148]	; (2573c <isr_tx+0xcc>)
   256a8:	4629      	mov	r1, r5
   256aa:	f001 fab9 	bl	26c20 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   256ae:	f7ff fa23 	bl	24af8 <ull_filter_lll_rl_enabled>
   256b2:	bb50      	cbnz	r0, 2570a <isr_tx+0x9a>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   256b4:	f001 fe02 	bl	272bc <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   256b8:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   256ba:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   256bc:	4608      	mov	r0, r1
   256be:	f001 fb93 	bl	26de8 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   256c2:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   256c4:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   256c6:	4608      	mov	r0, r1
   256c8:	f001 fb8a 	bl	26de0 <radio_tx_chain_delay_get>
   256cc:	442c      	add	r4, r5
   256ce:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   256d0:	1a20      	subs	r0, r4, r0
   256d2:	f001 fdab 	bl	2722c <radio_tmr_hcto_configure>
}
   256d6:	b003      	add	sp, #12
   256d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_tmr_end_capture();
   256dc:	f001 bde0 	b.w	272a0 <radio_tmr_end_capture>
	LL_ASSERT(!radio_is_ready());
   256e0:	4a17      	ldr	r2, [pc, #92]	; (25740 <isr_tx+0xd0>)
   256e2:	4918      	ldr	r1, [pc, #96]	; (25744 <isr_tx+0xd4>)
   256e4:	4818      	ldr	r0, [pc, #96]	; (25748 <isr_tx+0xd8>)
   256e6:	f240 437d 	movw	r3, #1149	; 0x47d
   256ea:	f006 fc6c 	bl	2bfc6 <assert_print>
   256ee:	4040      	eors	r0, r0
   256f0:	f380 8811 	msr	BASEPRI, r0
   256f4:	f04f 0003 	mov.w	r0, #3
   256f8:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   256fa:	4810      	ldr	r0, [pc, #64]	; (2573c <isr_tx+0xcc>)
   256fc:	4629      	mov	r1, r5
   256fe:	f001 fa8f 	bl	26c20 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   25702:	f7ff f9f9 	bl	24af8 <ull_filter_lll_rl_enabled>
   25706:	2800      	cmp	r0, #0
   25708:	d0d4      	beq.n	256b4 <isr_tx+0x44>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   2570a:	f10d 0007 	add.w	r0, sp, #7
   2570e:	f7ff f92d 	bl	2496c <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   25712:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   25714:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   25716:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2571a:	f001 fe67 	bl	273ec <radio_ar_configure>
   2571e:	e7c9      	b.n	256b4 <isr_tx+0x44>
	LL_ASSERT(node_rx);
   25720:	4a07      	ldr	r2, [pc, #28]	; (25740 <isr_tx+0xd0>)
   25722:	490a      	ldr	r1, [pc, #40]	; (2574c <isr_tx+0xdc>)
   25724:	4808      	ldr	r0, [pc, #32]	; (25748 <isr_tx+0xd8>)
   25726:	f240 4379 	movw	r3, #1145	; 0x479
   2572a:	f006 fc4c 	bl	2bfc6 <assert_print>
   2572e:	4040      	eors	r0, r0
   25730:	f380 8811 	msr	BASEPRI, r0
   25734:	f04f 0003 	mov.w	r0, #3
   25738:	df02      	svc	2
   2573a:	e7ad      	b.n	25698 <isr_tx+0x28>
   2573c:	00025ec1 	.word	0x00025ec1
   25740:	00033cb8 	.word	0x00033cb8
   25744:	00033d0c 	.word	0x00033d0c
   25748:	00032fc4 	.word	0x00032fc4
   2574c:	00033d04 	.word	0x00033d04

00025750 <is_abort_cb>:
	if (next != curr) {
   25750:	4281      	cmp	r1, r0
{
   25752:	b508      	push	{r3, lr}
	if (next != curr) {
   25754:	d00e      	beq.n	25774 <is_abort_cb+0x24>
		} else if (lll->is_hdcd) {
   25756:	7a0b      	ldrb	r3, [r1, #8]
   25758:	07db      	lsls	r3, r3, #31
   2575a:	d402      	bmi.n	25762 <is_abort_cb+0x12>
			return -ECANCELED;
   2575c:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   25760:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   25762:	4b13      	ldr	r3, [pc, #76]	; (257b0 <is_abort_cb+0x60>)
   25764:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   25766:	f7ff ff39 	bl	255dc <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   2576a:	2800      	cmp	r0, #0
   2576c:	db0f      	blt.n	2578e <is_abort_cb+0x3e>
   2576e:	f06f 000a 	mvn.w	r0, #10
}
   25772:	bd08      	pop	{r3, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   25774:	7b0b      	ldrb	r3, [r1, #12]
   25776:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   2577a:	690b      	ldr	r3, [r1, #16]
   2577c:	781b      	ldrb	r3, [r3, #0]
   2577e:	f003 030f 	and.w	r3, r3, #15
		return 0;
   25782:	2b01      	cmp	r3, #1
   25784:	bf14      	ite	ne
   25786:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   2578a:	2000      	moveq	r0, #0
}
   2578c:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   2578e:	4a09      	ldr	r2, [pc, #36]	; (257b4 <is_abort_cb+0x64>)
   25790:	4909      	ldr	r1, [pc, #36]	; (257b8 <is_abort_cb+0x68>)
   25792:	480a      	ldr	r0, [pc, #40]	; (257bc <is_abort_cb+0x6c>)
   25794:	f240 4332 	movw	r3, #1074	; 0x432
   25798:	f006 fc15 	bl	2bfc6 <assert_print>
   2579c:	4040      	eors	r0, r0
   2579e:	f380 8811 	msr	BASEPRI, r0
   257a2:	f04f 0003 	mov.w	r0, #3
   257a6:	df02      	svc	2
   257a8:	f06f 000a 	mvn.w	r0, #10
}
   257ac:	bd08      	pop	{r3, pc}
   257ae:	bf00      	nop
   257b0:	00025cdd 	.word	0x00025cdd
   257b4:	00033cb8 	.word	0x00033cb8
   257b8:	00033c48 	.word	0x00033c48
   257bc:	00032fc4 	.word	0x00032fc4

000257c0 <abort_cb>:
{
   257c0:	b510      	push	{r4, lr}
	if (!prepare_param) {
   257c2:	b1d8      	cbz	r0, 257fc <abort_cb+0x3c>
	err = lll_hfclock_off();
   257c4:	460c      	mov	r4, r1
   257c6:	f7ff ff21 	bl	2560c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   257ca:	2800      	cmp	r0, #0
   257cc:	db04      	blt.n	257d8 <abort_cb+0x18>
	lll_done(param);
   257ce:	4620      	mov	r0, r4
}
   257d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   257d4:	f7ff bc92 	b.w	250fc <lll_done>
	LL_ASSERT(err >= 0);
   257d8:	4a0c      	ldr	r2, [pc, #48]	; (2580c <abort_cb+0x4c>)
   257da:	490d      	ldr	r1, [pc, #52]	; (25810 <abort_cb+0x50>)
   257dc:	480d      	ldr	r0, [pc, #52]	; (25814 <abort_cb+0x54>)
   257de:	f44f 638b 	mov.w	r3, #1112	; 0x458
   257e2:	f006 fbf0 	bl	2bfc6 <assert_print>
   257e6:	4040      	eors	r0, r0
   257e8:	f380 8811 	msr	BASEPRI, r0
   257ec:	f04f 0003 	mov.w	r0, #3
   257f0:	df02      	svc	2
	lll_done(param);
   257f2:	4620      	mov	r0, r4
}
   257f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   257f8:	f7ff bc80 	b.w	250fc <lll_done>
		radio_isr_set(isr_abort, param);
   257fc:	4806      	ldr	r0, [pc, #24]	; (25818 <abort_cb+0x58>)
   257fe:	f001 fa0f 	bl	26c20 <radio_isr_set>
}
   25802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   25806:	f001 bafb 	b.w	26e00 <radio_disable>
   2580a:	bf00      	nop
   2580c:	00033cb8 	.word	0x00033cb8
   25810:	00033c48 	.word	0x00033c48
   25814:	00032fc4 	.word	0x00032fc4
   25818:	00025659 	.word	0x00025659

0002581c <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   2581c:	4b08      	ldr	r3, [pc, #32]	; (25840 <lll_adv_init+0x24>)
   2581e:	2204      	movs	r2, #4
{
   25820:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   25822:	1898      	adds	r0, r3, r2
   25824:	2128      	movs	r1, #40	; 0x28
   25826:	f7f4 fc67 	bl	1a0f8 <mem_init>
	MFIFO_INIT(pdu_free);
   2582a:	4b06      	ldr	r3, [pc, #24]	; (25844 <lll_adv_init+0x28>)
   2582c:	2400      	movs	r4, #0
   2582e:	809c      	strh	r4, [r3, #4]
	return z_impl_k_sem_init(sem, initial_count, limit);
   25830:	2202      	movs	r2, #2
   25832:	4621      	mov	r1, r4
   25834:	4804      	ldr	r0, [pc, #16]	; (25848 <lll_adv_init+0x2c>)
   25836:	f00b ffbe 	bl	317b6 <z_impl_k_sem_init>
}
   2583a:	4620      	mov	r0, r4
   2583c:	bd10      	pop	{r4, pc}
   2583e:	bf00      	nop
   25840:	20002d24 	.word	0x20002d24
   25844:	2000078c 	.word	0x2000078c
   25848:	20002dc8 	.word	0x20002dc8

0002584c <lll_adv_reset>:
   2584c:	4b08      	ldr	r3, [pc, #32]	; (25870 <lll_adv_reset+0x24>)
   2584e:	2204      	movs	r2, #4
   25850:	b510      	push	{r4, lr}
   25852:	1898      	adds	r0, r3, r2
   25854:	2128      	movs	r1, #40	; 0x28
   25856:	f7f4 fc4f 	bl	1a0f8 <mem_init>
   2585a:	4b06      	ldr	r3, [pc, #24]	; (25874 <lll_adv_reset+0x28>)
   2585c:	2400      	movs	r4, #0
   2585e:	809c      	strh	r4, [r3, #4]
   25860:	2202      	movs	r2, #2
   25862:	4621      	mov	r1, r4
   25864:	4804      	ldr	r0, [pc, #16]	; (25878 <lll_adv_reset+0x2c>)
   25866:	f00b ffa6 	bl	317b6 <z_impl_k_sem_init>
   2586a:	4620      	mov	r0, r4
   2586c:	bd10      	pop	{r4, pc}
   2586e:	bf00      	nop
   25870:	20002d24 	.word	0x20002d24
   25874:	2000078c 	.word	0x2000078c
   25878:	20002dc8 	.word	0x20002dc8

0002587c <lll_adv_data_init>:
{
   2587c:	b510      	push	{r4, lr}
   2587e:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   25880:	4805      	ldr	r0, [pc, #20]	; (25898 <lll_adv_data_init+0x1c>)
   25882:	f7f4 fc69 	bl	1a158 <mem_acquire>
	if (!p) {
   25886:	b120      	cbz	r0, 25892 <lll_adv_data_init+0x16>
   25888:	4603      	mov	r3, r0
	p->len = 0U;
   2588a:	2000      	movs	r0, #0
   2588c:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   2588e:	6063      	str	r3, [r4, #4]
}
   25890:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   25892:	f06f 000b 	mvn.w	r0, #11
}
   25896:	bd10      	pop	{r4, pc}
   25898:	20002d24 	.word	0x20002d24

0002589c <lll_adv_data_reset>:
{
   2589c:	4603      	mov	r3, r0
	pdu->first = 0U;
   2589e:	2000      	movs	r0, #0
   258a0:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   258a2:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   258a4:	6098      	str	r0, [r3, #8]
}
   258a6:	4770      	bx	lr

000258a8 <lll_adv_pdu_alloc_pdu_adv>:
{
   258a8:	b538      	push	{r3, r4, r5, lr}
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   258aa:	4c35      	ldr	r4, [pc, #212]	; (25980 <lll_adv_pdu_alloc_pdu_adv+0xd8>)
   258ac:	7922      	ldrb	r2, [r4, #4]
	if (first == last) {
   258ae:	7961      	ldrb	r1, [r4, #5]
   258b0:	7823      	ldrb	r3, [r4, #0]
   258b2:	4291      	cmp	r1, r2
   258b4:	d003      	beq.n	258be <lll_adv_pdu_alloc_pdu_adv+0x16>
	return *((void **)(fifo + first * size));
   258b6:	fb02 4303 	mla	r3, r2, r3, r4
   258ba:	689d      	ldr	r5, [r3, #8]
	if (p) {
   258bc:	b935      	cbnz	r5, 258cc <lll_adv_pdu_alloc_pdu_adv+0x24>
	p = mem_acquire(&mem_pdu.free);
   258be:	4831      	ldr	r0, [pc, #196]	; (25984 <lll_adv_pdu_alloc_pdu_adv+0xdc>)
   258c0:	f7f4 fc4a 	bl	1a158 <mem_acquire>
	if (p) {
   258c4:	4605      	mov	r5, r0
   258c6:	b1a0      	cbz	r0, 258f2 <lll_adv_pdu_alloc_pdu_adv+0x4a>
}
   258c8:	4628      	mov	r0, r5
   258ca:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_sem_take(sem, timeout);
   258cc:	482e      	ldr	r0, [pc, #184]	; (25988 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   258ce:	2200      	movs	r2, #0
   258d0:	2300      	movs	r3, #0
   258d2:	f004 ff01 	bl	2a6d8 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   258d6:	bb40      	cbnz	r0, 2592a <lll_adv_pdu_alloc_pdu_adv+0x82>
	uint8_t _first = *first; /* Copy read-index */
   258d8:	7923      	ldrb	r3, [r4, #4]
	if (_first == last) {
   258da:	7962      	ldrb	r2, [r4, #5]
		MFIFO_DEQUEUE(pdu_free);
   258dc:	78a1      	ldrb	r1, [r4, #2]
   258de:	429a      	cmp	r2, r3
   258e0:	d0f2      	beq.n	258c8 <lll_adv_pdu_alloc_pdu_adv+0x20>
	_first += 1U;
   258e2:	3301      	adds	r3, #1
   258e4:	b2db      	uxtb	r3, r3
		_first = 0U;
   258e6:	4299      	cmp	r1, r3
   258e8:	bf08      	it	eq
   258ea:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   258ec:	7123      	strb	r3, [r4, #4]
}
   258ee:	4628      	mov	r0, r5
   258f0:	bd38      	pop	{r3, r4, r5, pc}
   258f2:	4825      	ldr	r0, [pc, #148]	; (25988 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   258f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   258f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   258fc:	f004 feec 	bl	2a6d8 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   25900:	2800      	cmp	r0, #0
   25902:	d12e      	bne.n	25962 <lll_adv_pdu_alloc_pdu_adv+0xba>
	uint8_t _first = *first; /* Copy read-index */
   25904:	7923      	ldrb	r3, [r4, #4]
	if (_first == last) {
   25906:	7961      	ldrb	r1, [r4, #5]
	p = MFIFO_DEQUEUE(pdu_free);
   25908:	7822      	ldrb	r2, [r4, #0]
   2590a:	78a0      	ldrb	r0, [r4, #2]
   2590c:	4299      	cmp	r1, r3
   2590e:	d01a      	beq.n	25946 <lll_adv_pdu_alloc_pdu_adv+0x9e>
	mem = *((void **)(fifo + _first * size));
   25910:	fb03 4202 	mla	r2, r3, r2, r4
	_first += 1U;
   25914:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   25916:	6892      	ldr	r2, [r2, #8]
	_first += 1U;
   25918:	b2db      	uxtb	r3, r3
		_first = 0U;
   2591a:	4298      	cmp	r0, r3
   2591c:	bf08      	it	eq
   2591e:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   25920:	7123      	strb	r3, [r4, #4]
	LL_ASSERT(p);
   25922:	b182      	cbz	r2, 25946 <lll_adv_pdu_alloc_pdu_adv+0x9e>
   25924:	4615      	mov	r5, r2
}
   25926:	4628      	mov	r0, r5
   25928:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!err);
   2592a:	4a18      	ldr	r2, [pc, #96]	; (2598c <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   2592c:	4918      	ldr	r1, [pc, #96]	; (25990 <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   2592e:	4819      	ldr	r0, [pc, #100]	; (25994 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   25930:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   25934:	f006 fb47 	bl	2bfc6 <assert_print>
   25938:	4040      	eors	r0, r0
   2593a:	f380 8811 	msr	BASEPRI, r0
   2593e:	f04f 0003 	mov.w	r0, #3
   25942:	df02      	svc	2
   25944:	e7c8      	b.n	258d8 <lll_adv_pdu_alloc_pdu_adv+0x30>
	LL_ASSERT(p);
   25946:	4a11      	ldr	r2, [pc, #68]	; (2598c <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   25948:	4913      	ldr	r1, [pc, #76]	; (25998 <lll_adv_pdu_alloc_pdu_adv+0xf0>)
   2594a:	4812      	ldr	r0, [pc, #72]	; (25994 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   2594c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
   25950:	f006 fb39 	bl	2bfc6 <assert_print>
   25954:	4040      	eors	r0, r0
   25956:	f380 8811 	msr	BASEPRI, r0
   2595a:	f04f 0003 	mov.w	r0, #3
   2595e:	df02      	svc	2
   25960:	e7b2      	b.n	258c8 <lll_adv_pdu_alloc_pdu_adv+0x20>
	LL_ASSERT(!err);
   25962:	4a0a      	ldr	r2, [pc, #40]	; (2598c <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   25964:	490a      	ldr	r1, [pc, #40]	; (25990 <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   25966:	480b      	ldr	r0, [pc, #44]	; (25994 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   25968:	f240 13ad 	movw	r3, #429	; 0x1ad
   2596c:	f006 fb2b 	bl	2bfc6 <assert_print>
   25970:	4040      	eors	r0, r0
   25972:	f380 8811 	msr	BASEPRI, r0
   25976:	f04f 0003 	mov.w	r0, #3
   2597a:	df02      	svc	2
   2597c:	e7c2      	b.n	25904 <lll_adv_pdu_alloc_pdu_adv+0x5c>
   2597e:	bf00      	nop
   25980:	2000078c 	.word	0x2000078c
   25984:	20002d24 	.word	0x20002d24
   25988:	20002dc8 	.word	0x20002dc8
   2598c:	00033cb8 	.word	0x00033cb8
   25990:	00033300 	.word	0x00033300
   25994:	00032fc4 	.word	0x00032fc4
   25998:	00033d20 	.word	0x00033d20

0002599c <lll_adv_pdu_alloc>:
{
   2599c:	b510      	push	{r4, lr}
	first = pdu->first;
   2599e:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   259a0:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   259a2:	429a      	cmp	r2, r3
   259a4:	d014      	beq.n	259d0 <lll_adv_pdu_alloc+0x34>
		pdu->last = first;
   259a6:	b2d4      	uxtb	r4, r2
   259a8:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   259aa:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   259ac:	4294      	cmp	r4, r2
   259ae:	d004      	beq.n	259ba <lll_adv_pdu_alloc+0x1e>
			last++;
   259b0:	1c5a      	adds	r2, r3, #1
			pdu->last = last;
   259b2:	7043      	strb	r3, [r0, #1]
			last++;
   259b4:	b2d3      	uxtb	r3, r2
			if (last == DOUBLE_BUFFER_SIZE) {
   259b6:	2b02      	cmp	r3, #2
   259b8:	d00e      	beq.n	259d8 <lll_adv_pdu_alloc+0x3c>
	p = (void *)pdu->pdu[last];
   259ba:	461c      	mov	r4, r3
	*idx = last;
   259bc:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   259c0:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   259c2:	6860      	ldr	r0, [r4, #4]
	if (p) {
   259c4:	b100      	cbz	r0, 259c8 <lll_adv_pdu_alloc+0x2c>
}
   259c6:	bd10      	pop	{r4, pc}
	p = lll_adv_pdu_alloc_pdu_adv();
   259c8:	f7ff ff6e 	bl	258a8 <lll_adv_pdu_alloc_pdu_adv>
	pdu->pdu[last] = (void *)p;
   259cc:	6060      	str	r0, [r4, #4]
}
   259ce:	bd10      	pop	{r4, pc}
		last++;
   259d0:	3301      	adds	r3, #1
   259d2:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   259d4:	2b02      	cmp	r3, #2
   259d6:	d1f0      	bne.n	259ba <lll_adv_pdu_alloc+0x1e>
{
   259d8:	2400      	movs	r4, #0
			last = 0U;
   259da:	4623      	mov	r3, r4
   259dc:	e7ee      	b.n	259bc <lll_adv_pdu_alloc+0x20>
   259de:	bf00      	nop

000259e0 <lll_adv_pdu_latest_get>:
{
   259e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   259e2:	4604      	mov	r4, r0
	first = pdu->first;
   259e4:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   259e6:	7840      	ldrb	r0, [r0, #1]
   259e8:	4298      	cmp	r0, r3
   259ea:	d028      	beq.n	25a3e <lll_adv_pdu_latest_get+0x5e>
			if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   259ec:	4a16      	ldr	r2, [pc, #88]	; (25a48 <lll_adv_pdu_latest_get+0x68>)
   259ee:	460e      	mov	r6, r1
   259f0:	7951      	ldrb	r1, [r2, #5]
	if (last == count) {
   259f2:	f892 c002 	ldrb.w	ip, [r2, #2]
   259f6:	b2dd      	uxtb	r5, r3
	last = last + 1;
   259f8:	1c4b      	adds	r3, r1, #1
   259fa:	b2db      	uxtb	r3, r3
		last = 0U;
   259fc:	459c      	cmp	ip, r3
   259fe:	bf08      	it	eq
   25a00:	2300      	moveq	r3, #0
   25a02:	f892 c004 	ldrb.w	ip, [r2, #4]
   25a06:	eb04 0785 	add.w	r7, r4, r5, lsl #2
	if (last == first) {
   25a0a:	459c      	cmp	ip, r3
		p = pdu->pdu[pdu_idx];
   25a0c:	6878      	ldr	r0, [r7, #4]
   25a0e:	d009      	beq.n	25a24 <lll_adv_pdu_latest_get+0x44>
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   25a10:	f892 c000 	ldrb.w	ip, [r2]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   25a14:	fb0c 2101 	mla	r1, ip, r1, r2
   25a18:	6088      	str	r0, [r1, #8]
	*last = idx; /* Commit: Update write index */
   25a1a:	7153      	strb	r3, [r2, #5]
	z_impl_k_sem_give(sem);
   25a1c:	480b      	ldr	r0, [pc, #44]	; (25a4c <lll_adv_pdu_latest_get+0x6c>)
   25a1e:	f004 fe35 	bl	2a68c <z_impl_k_sem_give>
			p = next;
   25a22:	2000      	movs	r0, #0
		first += 1U;
   25a24:	1c6b      	adds	r3, r5, #1
   25a26:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   25a28:	2b02      	cmp	r3, #2
		pdu->pdu[pdu_idx] = p;
   25a2a:	6078      	str	r0, [r7, #4]
		if (first == DOUBLE_BUFFER_SIZE) {
   25a2c:	bf04      	itt	eq
   25a2e:	2000      	moveq	r0, #0
			first = 0U;
   25a30:	4603      	moveq	r3, r0
		*is_modified = 1U;
   25a32:	f04f 0201 	mov.w	r2, #1
		pdu->first = first;
   25a36:	7023      	strb	r3, [r4, #0]
	return (void *)pdu->pdu[first];
   25a38:	bf18      	it	ne
   25a3a:	4618      	movne	r0, r3
		*is_modified = 1U;
   25a3c:	7032      	strb	r2, [r6, #0]
	return (void *)pdu->pdu[first];
   25a3e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
}
   25a42:	6860      	ldr	r0, [r4, #4]
   25a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25a46:	bf00      	nop
   25a48:	2000078c 	.word	0x2000078c
   25a4c:	20002dc8 	.word	0x20002dc8

00025a50 <chan_prepare.isra.0>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   25a50:	7a03      	ldrb	r3, [r0, #8]
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   25a52:	b570      	push	{r4, r5, r6, lr}
	chan = find_lsb_set(lll->chan_map_curr);
   25a54:	f3c3 1302 	ubfx	r3, r3, #4, #3
   25a58:	2b00      	cmp	r3, #0
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   25a5a:	4604      	mov	r4, r0
   25a5c:	fa93 f0a3 	rbit	r0, r3
   25a60:	fab0 f080 	clz	r0, r0
   25a64:	bf08      	it	eq
   25a66:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   25a6a:	1c45      	adds	r5, r0, #1
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   25a6c:	b082      	sub	sp, #8
	LL_ASSERT(chan);
   25a6e:	d043      	beq.n	25af8 <chan_prepare.isra.0+0xa8>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   25a70:	7a21      	ldrb	r1, [r4, #8]
   25a72:	1e5a      	subs	r2, r3, #1
   25a74:	4013      	ands	r3, r2
   25a76:	f363 1106 	bfi	r1, r3, #4, #3

	lll_chan_set(36 + chan);
   25a7a:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   25a7e:	7221      	strb	r1, [r4, #8]
	lll_chan_set(36 + chan);
   25a80:	f7ff fbb0 	bl	251e4 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   25a84:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   25a86:	f10d 0107 	add.w	r1, sp, #7
   25a8a:	f104 000c 	add.w	r0, r4, #12
   25a8e:	f88d 3007 	strb.w	r3, [sp, #7]
   25a92:	f7ff ffa5 	bl	259e0 <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   25a96:	4605      	mov	r5, r0
   25a98:	2800      	cmp	r0, #0
   25a9a:	d03e      	beq.n	25b1a <chan_prepare.isra.0+0xca>

	radio_pkt_tx_set(pdu);
   25a9c:	4628      	mov	r0, r5
   25a9e:	f001 f999 	bl	26dd4 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   25aa2:	782b      	ldrb	r3, [r5, #0]
   25aa4:	f003 030f 	and.w	r3, r3, #15
   25aa8:	2b02      	cmp	r3, #2
   25aaa:	d01d      	beq.n	25ae8 <chan_prepare.isra.0+0x98>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   25aac:	f10d 0107 	add.w	r1, sp, #7
   25ab0:	f104 0018 	add.w	r0, r4, #24
   25ab4:	f7ff ff94 	bl	259e0 <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   25ab8:	4606      	mov	r6, r0
   25aba:	2800      	cmp	r0, #0
   25abc:	d03b      	beq.n	25b36 <chan_prepare.isra.0+0xe6>

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   25abe:	f89d 3007 	ldrb.w	r3, [sp, #7]
   25ac2:	b95b      	cbnz	r3, 25adc <chan_prepare.isra.0+0x8c>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   25ac4:	4621      	mov	r1, r4
   25ac6:	4823      	ldr	r0, [pc, #140]	; (25b54 <chan_prepare.isra.0+0x104>)
   25ac8:	f001 f8aa 	bl	26c20 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   25acc:	2096      	movs	r0, #150	; 0x96
   25ace:	f001 fb0d 	bl	270ec <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   25ad2:	2000      	movs	r0, #0
   25ad4:	f001 f9f0 	bl	26eb8 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   25ad8:	b002      	add	sp, #8
   25ada:	bd70      	pop	{r4, r5, r6, pc}
			memcpy(&scan_pdu->scan_rsp.addr[0],
   25adc:	2206      	movs	r2, #6
   25ade:	1ca9      	adds	r1, r5, #2
   25ae0:	1cb0      	adds	r0, r6, #2
   25ae2:	f008 faa2 	bl	2e02a <memcpy>
   25ae6:	e7ed      	b.n	25ac4 <chan_prepare.isra.0+0x74>
		radio_isr_set(isr_done, lll);
   25ae8:	481b      	ldr	r0, [pc, #108]	; (25b58 <chan_prepare.isra.0+0x108>)
   25aea:	4621      	mov	r1, r4
   25aec:	f001 f898 	bl	26c20 <radio_isr_set>
		radio_switch_complete_and_disable();
   25af0:	f001 fa8a 	bl	27008 <radio_switch_complete_and_disable>
}
   25af4:	b002      	add	sp, #8
   25af6:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(chan);
   25af8:	4a18      	ldr	r2, [pc, #96]	; (25b5c <chan_prepare.isra.0+0x10c>)
   25afa:	4919      	ldr	r1, [pc, #100]	; (25b60 <chan_prepare.isra.0+0x110>)
   25afc:	4819      	ldr	r0, [pc, #100]	; (25b64 <chan_prepare.isra.0+0x114>)
   25afe:	f240 536f 	movw	r3, #1391	; 0x56f
   25b02:	f006 fa60 	bl	2bfc6 <assert_print>
   25b06:	4040      	eors	r0, r0
   25b08:	f380 8811 	msr	BASEPRI, r0
   25b0c:	f04f 0003 	mov.w	r0, #3
   25b10:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   25b12:	7a23      	ldrb	r3, [r4, #8]
   25b14:	f3c3 1302 	ubfx	r3, r3, #4, #3
   25b18:	e7aa      	b.n	25a70 <chan_prepare.isra.0+0x20>
	LL_ASSERT(pdu);
   25b1a:	4a10      	ldr	r2, [pc, #64]	; (25b5c <chan_prepare.isra.0+0x10c>)
   25b1c:	4912      	ldr	r1, [pc, #72]	; (25b68 <chan_prepare.isra.0+0x118>)
   25b1e:	4811      	ldr	r0, [pc, #68]	; (25b64 <chan_prepare.isra.0+0x114>)
   25b20:	f44f 63af 	mov.w	r3, #1400	; 0x578
   25b24:	f006 fa4f 	bl	2bfc6 <assert_print>
   25b28:	4040      	eors	r0, r0
   25b2a:	f380 8811 	msr	BASEPRI, r0
   25b2e:	f04f 0003 	mov.w	r0, #3
   25b32:	df02      	svc	2
   25b34:	e7b2      	b.n	25a9c <chan_prepare.isra.0+0x4c>
		LL_ASSERT(scan_pdu);
   25b36:	4a09      	ldr	r2, [pc, #36]	; (25b5c <chan_prepare.isra.0+0x10c>)
   25b38:	490c      	ldr	r1, [pc, #48]	; (25b6c <chan_prepare.isra.0+0x11c>)
   25b3a:	480a      	ldr	r0, [pc, #40]	; (25b64 <chan_prepare.isra.0+0x114>)
   25b3c:	f240 5382 	movw	r3, #1410	; 0x582
   25b40:	f006 fa41 	bl	2bfc6 <assert_print>
   25b44:	4040      	eors	r0, r0
   25b46:	f380 8811 	msr	BASEPRI, r0
   25b4a:	f04f 0003 	mov.w	r0, #3
   25b4e:	df02      	svc	2
   25b50:	e7b5      	b.n	25abe <chan_prepare.isra.0+0x6e>
   25b52:	bf00      	nop
   25b54:	00025671 	.word	0x00025671
   25b58:	00025b71 	.word	0x00025b71
   25b5c:	00033cb8 	.word	0x00033cb8
   25b60:	000338f4 	.word	0x000338f4
   25b64:	00032fc4 	.word	0x00032fc4
   25b68:	00033d24 	.word	0x00033d24
   25b6c:	00033d28 	.word	0x00033d28

00025b70 <isr_done>:
{
   25b70:	b510      	push	{r4, lr}
   25b72:	4604      	mov	r4, r0
	lll_isr_status_reset();
   25b74:	f7ff fb8c 	bl	25290 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   25b78:	7a23      	ldrb	r3, [r4, #8]
   25b7a:	f003 0271 	and.w	r2, r3, #113	; 0x71
   25b7e:	2a01      	cmp	r2, #1
   25b80:	d105      	bne.n	25b8e <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   25b82:	f3c3 0242 	ubfx	r2, r3, #1, #3
   25b86:	f362 1306 	bfi	r3, r2, #4, #3
   25b8a:	7223      	strb	r3, [r4, #8]
	if (lll->chan_map_curr &&
   25b8c:	b2db      	uxtb	r3, r3
   25b8e:	f013 0f70 	tst.w	r3, #112	; 0x70
   25b92:	d005      	beq.n	25ba0 <isr_done+0x30>
	    (!lll->conn || !lll->conn->periph.cancelled) &&
   25b94:	6863      	ldr	r3, [r4, #4]
   25b96:	b153      	cbz	r3, 25bae <isr_done+0x3e>
   25b98:	f893 3020 	ldrb.w	r3, [r3, #32]
   25b9c:	079b      	lsls	r3, r3, #30
   25b9e:	d506      	bpl.n	25bae <isr_done+0x3e>
	radio_filter_disable();
   25ba0:	f001 fa72 	bl	27088 <radio_filter_disable>
	lll_isr_cleanup(param);
   25ba4:	4620      	mov	r0, r4
}
   25ba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   25baa:	f7ff bb7f 	b.w	252ac <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   25bae:	4620      	mov	r0, r4
   25bb0:	f7ff ff4e 	bl	25a50 <chan_prepare.isra.0>
		radio_tx_enable();
   25bb4:	f001 f91e 	bl	26df4 <radio_tx_enable>
}
   25bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   25bbc:	f001 bb70 	b.w	272a0 <radio_tmr_end_capture>

00025bc0 <prepare_cb>:
{
   25bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   25bc2:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn &&
   25bc4:	6863      	ldr	r3, [r4, #4]
{
   25bc6:	b083      	sub	sp, #12
   25bc8:	4605      	mov	r5, r0
	if (unlikely(lll->conn &&
   25bca:	2b00      	cmp	r3, #0
   25bcc:	d16d      	bne.n	25caa <prepare_cb+0xea>
	radio_reset();
   25bce:	f001 f869 	bl	26ca4 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   25bd2:	2000      	movs	r0, #0
   25bd4:	f001 f89a 	bl	26d0c <radio_tx_power_set>
	radio_phy_set(0, 0);
   25bd8:	2100      	movs	r1, #0
   25bda:	4608      	mov	r0, r1
   25bdc:	f001 f886 	bl	26cec <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   25be0:	2200      	movs	r2, #0
   25be2:	2125      	movs	r1, #37	; 0x25
   25be4:	2008      	movs	r0, #8
   25be6:	f001 f8c7 	bl	26d78 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   25bea:	4b35      	ldr	r3, [pc, #212]	; (25cc0 <prepare_cb+0x100>)
   25bec:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   25bee:	a801      	add	r0, sp, #4
   25bf0:	f001 f8aa 	bl	26d48 <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   25bf4:	4933      	ldr	r1, [pc, #204]	; (25cc4 <prepare_cb+0x104>)
   25bf6:	f240 605b 	movw	r0, #1627	; 0x65b
   25bfa:	f001 f93f 	bl	26e7c <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   25bfe:	7a23      	ldrb	r3, [r4, #8]
   25c00:	f3c3 0242 	ubfx	r2, r3, #1, #3
   25c04:	f362 1306 	bfi	r3, r2, #4, #3
	pdu = chan_prepare(lll);
   25c08:	4620      	mov	r0, r4
	lll->chan_map_curr = lll->chan_map;
   25c0a:	7223      	strb	r3, [r4, #8]
	pdu = chan_prepare(lll);
   25c0c:	f7ff ff20 	bl	25a50 <chan_prepare.isra.0>
	if (ull_filter_lll_rl_enabled()) {
   25c10:	f7fe ff72 	bl	24af8 <ull_filter_lll_rl_enabled>
   25c14:	bb98      	cbnz	r0, 25c7e <prepare_cb+0xbe>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   25c16:	7a63      	ldrb	r3, [r4, #9]
   25c18:	079b      	lsls	r3, r3, #30
   25c1a:	d127      	bne.n	25c6c <prepare_cb+0xac>
	ull = HDR_LLL2ULL(lll);
   25c1c:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   25c1e:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   25c20:	4638      	mov	r0, r7
   25c22:	f7ff fac1 	bl	251a8 <lll_event_offset_get>
   25c26:	4406      	add	r6, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   25c28:	686a      	ldr	r2, [r5, #4]
   25c2a:	f106 0109 	add.w	r1, r6, #9
   25c2e:	2001      	movs	r0, #1
   25c30:	f001 fa68 	bl	27104 <radio_tmr_start>
	radio_tmr_end_capture();
   25c34:	f001 fb34 	bl	272a0 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   25c38:	4620      	mov	r0, r4
   25c3a:	f7f8 ff9d 	bl	1eb78 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_ADV_BASE +
   25c3e:	1c81      	adds	r1, r0, #2
   25c40:	4632      	mov	r2, r6
   25c42:	b2c9      	uxtb	r1, r1
   25c44:	4638      	mov	r0, r7
   25c46:	f7ff fabd 	bl	251c4 <lll_preempt_calc>
   25c4a:	b930      	cbnz	r0, 25c5a <prepare_cb+0x9a>
		ret = lll_prepare_done(lll);
   25c4c:	4620      	mov	r0, r4
   25c4e:	f7ff fa53 	bl	250f8 <lll_prepare_done>
		LL_ASSERT(!ret);
   25c52:	b9d0      	cbnz	r0, 25c8a <prepare_cb+0xca>
}
   25c54:	2000      	movs	r0, #0
   25c56:	b003      	add	sp, #12
   25c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   25c5a:	481b      	ldr	r0, [pc, #108]	; (25cc8 <prepare_cb+0x108>)
   25c5c:	4621      	mov	r1, r4
   25c5e:	f000 ffdf 	bl	26c20 <radio_isr_set>
		radio_disable();
   25c62:	f001 f8cd 	bl	26e00 <radio_disable>
}
   25c66:	2000      	movs	r0, #0
   25c68:	b003      	add	sp, #12
   25c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct lll_filter *fal = ull_filter_lll_get(true);
   25c6c:	2001      	movs	r0, #1
   25c6e:	f7fe fbbd 	bl	243ec <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   25c72:	7841      	ldrb	r1, [r0, #1]
   25c74:	1c82      	adds	r2, r0, #2
   25c76:	7800      	ldrb	r0, [r0, #0]
   25c78:	f001 f9e6 	bl	27048 <radio_filter_configure>
   25c7c:	e7ce      	b.n	25c1c <prepare_cb+0x5c>
			ull_filter_lll_get(!!(lll->filter_policy));
   25c7e:	7a60      	ldrb	r0, [r4, #9]
   25c80:	f010 0003 	ands.w	r0, r0, #3
   25c84:	bf18      	it	ne
   25c86:	2001      	movne	r0, #1
   25c88:	e7f1      	b.n	25c6e <prepare_cb+0xae>
		LL_ASSERT(!ret);
   25c8a:	4a10      	ldr	r2, [pc, #64]	; (25ccc <prepare_cb+0x10c>)
   25c8c:	4910      	ldr	r1, [pc, #64]	; (25cd0 <prepare_cb+0x110>)
   25c8e:	4811      	ldr	r0, [pc, #68]	; (25cd4 <prepare_cb+0x114>)
   25c90:	f240 4309 	movw	r3, #1033	; 0x409
   25c94:	f006 f997 	bl	2bfc6 <assert_print>
   25c98:	4040      	eors	r0, r0
   25c9a:	f380 8811 	msr	BASEPRI, r0
   25c9e:	f04f 0003 	mov.w	r0, #3
   25ca2:	df02      	svc	2
}
   25ca4:	2000      	movs	r0, #0
   25ca6:	b003      	add	sp, #12
   25ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (unlikely(lll->conn &&
   25caa:	f893 3020 	ldrb.w	r3, [r3, #32]
   25cae:	079a      	lsls	r2, r3, #30
   25cb0:	d08d      	beq.n	25bce <prepare_cb+0xe>
		radio_isr_set(lll_isr_early_abort, lll);
   25cb2:	4809      	ldr	r0, [pc, #36]	; (25cd8 <prepare_cb+0x118>)
   25cb4:	4621      	mov	r1, r4
   25cb6:	f000 ffb3 	bl	26c20 <radio_isr_set>
		radio_disable();
   25cba:	f001 f8a1 	bl	26e00 <radio_disable>
		return 0;
   25cbe:	e7c9      	b.n	25c54 <prepare_cb+0x94>
   25cc0:	8e89bed6 	.word	0x8e89bed6
   25cc4:	00555555 	.word	0x00555555
   25cc8:	00025659 	.word	0x00025659
   25ccc:	00033cb8 	.word	0x00033cb8
   25cd0:	000333fc 	.word	0x000333fc
   25cd4:	00032fc4 	.word	0x00032fc4
   25cd8:	0002533d 	.word	0x0002533d

00025cdc <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   25cdc:	68c3      	ldr	r3, [r0, #12]
{
   25cde:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   25ce0:	681e      	ldr	r6, [r3, #0]
{
   25ce2:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   25ce4:	f7f5 fd2a 	bl	1b73c <ticker_ticks_now_get>
   25ce8:	4605      	mov	r5, r0
   25cea:	4630      	mov	r0, r6
   25cec:	f7ff fa5c 	bl	251a8 <lll_event_offset_get>
	p->remainder = 0;
   25cf0:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   25cf2:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   25cf4:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   25cf8:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   25cfa:	4620      	mov	r0, r4
}
   25cfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   25d00:	f7ff bf5e 	b.w	25bc0 <prepare_cb>

00025d04 <lll_adv_prepare>:
{
   25d04:	b510      	push	{r4, lr}
   25d06:	b082      	sub	sp, #8
   25d08:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   25d0a:	f7ff fc67 	bl	255dc <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   25d0e:	2800      	cmp	r0, #0
   25d10:	db1a      	blt.n	25d48 <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   25d12:	4a14      	ldr	r2, [pc, #80]	; (25d64 <lll_adv_prepare+0x60>)
   25d14:	4914      	ldr	r1, [pc, #80]	; (25d68 <lll_adv_prepare+0x64>)
   25d16:	4815      	ldr	r0, [pc, #84]	; (25d6c <lll_adv_prepare+0x68>)
   25d18:	9400      	str	r4, [sp, #0]
   25d1a:	2300      	movs	r3, #0
   25d1c:	f7f8 facc 	bl	1e2b8 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   25d20:	b108      	cbz	r0, 25d26 <lll_adv_prepare+0x22>
   25d22:	3077      	adds	r0, #119	; 0x77
   25d24:	d101      	bne.n	25d2a <lll_adv_prepare+0x26>
}
   25d26:	b002      	add	sp, #8
   25d28:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   25d2a:	4a11      	ldr	r2, [pc, #68]	; (25d70 <lll_adv_prepare+0x6c>)
   25d2c:	4911      	ldr	r1, [pc, #68]	; (25d74 <lll_adv_prepare+0x70>)
   25d2e:	4812      	ldr	r0, [pc, #72]	; (25d78 <lll_adv_prepare+0x74>)
   25d30:	f44f 7328 	mov.w	r3, #672	; 0x2a0
   25d34:	f006 f947 	bl	2bfc6 <assert_print>
   25d38:	4040      	eors	r0, r0
   25d3a:	f380 8811 	msr	BASEPRI, r0
   25d3e:	f04f 0003 	mov.w	r0, #3
   25d42:	df02      	svc	2
}
   25d44:	b002      	add	sp, #8
   25d46:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   25d48:	4a09      	ldr	r2, [pc, #36]	; (25d70 <lll_adv_prepare+0x6c>)
   25d4a:	490c      	ldr	r1, [pc, #48]	; (25d7c <lll_adv_prepare+0x78>)
   25d4c:	480a      	ldr	r0, [pc, #40]	; (25d78 <lll_adv_prepare+0x74>)
   25d4e:	f240 239d 	movw	r3, #669	; 0x29d
   25d52:	f006 f938 	bl	2bfc6 <assert_print>
   25d56:	4040      	eors	r0, r0
   25d58:	f380 8811 	msr	BASEPRI, r0
   25d5c:	f04f 0003 	mov.w	r0, #3
   25d60:	df02      	svc	2
   25d62:	e7d6      	b.n	25d12 <lll_adv_prepare+0xe>
   25d64:	00025bc1 	.word	0x00025bc1
   25d68:	000257c1 	.word	0x000257c1
   25d6c:	00025751 	.word	0x00025751
   25d70:	00033cb8 	.word	0x00033cb8
   25d74:	00033d34 	.word	0x00033d34
   25d78:	00032fc4 	.word	0x00032fc4
   25d7c:	00033c48 	.word	0x00033c48

00025d80 <lll_adv_scan_req_check>:
{
   25d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   25d84:	f890 c009 	ldrb.w	ip, [r0, #9]
{
   25d88:	f89d 8018 	ldrb.w	r8, [sp, #24]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   25d8c:	f01c 0f01 	tst.w	ip, #1
{
   25d90:	460f      	mov	r7, r1
   25d92:	4616      	mov	r6, r2
   25d94:	461d      	mov	r5, r3
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   25d96:	d009      	beq.n	25dac <lll_adv_scan_req_check+0x2c>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   25d98:	f1b8 0f00 	cmp.w	r8, #0
   25d9c:	d016      	beq.n	25dcc <lll_adv_scan_req_check+0x4c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   25d9e:	783b      	ldrb	r3, [r7, #0]
   25da0:	ebb6 1fd3 	cmp.w	r6, r3, lsr #7
   25da4:	d019      	beq.n	25dda <lll_adv_scan_req_check+0x5a>
{
   25da6:	2000      	movs	r0, #0
}
   25da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25dac:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   25dae:	f811 0b02 	ldrb.w	r0, [r1], #2
   25db2:	9a07      	ldr	r2, [sp, #28]
   25db4:	f3c0 1080 	ubfx	r0, r0, #6, #1
   25db8:	f7fe fe64 	bl	24a84 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   25dbc:	2800      	cmp	r0, #0
   25dbe:	d1ee      	bne.n	25d9e <lll_adv_scan_req_check+0x1e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   25dc0:	7a63      	ldrb	r3, [r4, #9]
						rl_idx)) ||
   25dc2:	07db      	lsls	r3, r3, #31
   25dc4:	d5ef      	bpl.n	25da6 <lll_adv_scan_req_check+0x26>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   25dc6:	f1b8 0f00 	cmp.w	r8, #0
   25dca:	d1e8      	bne.n	25d9e <lll_adv_scan_req_check+0x1e>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   25dcc:	9b07      	ldr	r3, [sp, #28]
   25dce:	7818      	ldrb	r0, [r3, #0]
   25dd0:	f7fe fe28 	bl	24a24 <ull_filter_lll_irk_in_fal>
   25dd4:	2800      	cmp	r0, #0
   25dd6:	d1e2      	bne.n	25d9e <lll_adv_scan_req_check+0x1e>
   25dd8:	e7e5      	b.n	25da6 <lll_adv_scan_req_check+0x26>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   25dda:	2206      	movs	r2, #6
   25ddc:	f107 0108 	add.w	r1, r7, #8
   25de0:	4628      	mov	r0, r5
   25de2:	f008 f911 	bl	2e008 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   25de6:	fab0 f080 	clz	r0, r0
   25dea:	0940      	lsrs	r0, r0, #5
}
   25dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025df0 <lll_adv_connect_ind_check>:
{
   25df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25df4:	461f      	mov	r7, r3
	if (tgt_addr) {
   25df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
   25df8:	f89d 9020 	ldrb.w	r9, [sp, #32]
   25dfc:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   25e00:	4605      	mov	r5, r0
   25e02:	460c      	mov	r4, r1
   25e04:	4690      	mov	r8, r2
	if (tgt_addr) {
   25e06:	b9fb      	cbnz	r3, 25e48 <lll_adv_connect_ind_check+0x58>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) &&
   25e08:	7a43      	ldrb	r3, [r0, #9]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   25e0a:	079a      	lsls	r2, r3, #30
   25e0c:	d507      	bpl.n	25e1e <lll_adv_connect_ind_check+0x2e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   25e0e:	b1a6      	cbz	r6, 25e3a <lll_adv_connect_ind_check+0x4a>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   25e10:	7823      	ldrb	r3, [r4, #0]
   25e12:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   25e16:	d03a      	beq.n	25e8e <lll_adv_connect_ind_check+0x9e>
   25e18:	2000      	movs	r0, #0
}
   25e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   25e1e:	f811 0b02 	ldrb.w	r0, [r1], #2
   25e22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   25e24:	f3c0 1080 	ubfx	r0, r0, #6, #1
   25e28:	f7fe fe2c 	bl	24a84 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) &&
   25e2c:	2800      	cmp	r0, #0
   25e2e:	d1ef      	bne.n	25e10 <lll_adv_connect_ind_check+0x20>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   25e30:	7a6b      	ldrb	r3, [r5, #9]
						rl_idx)) ||
   25e32:	079b      	lsls	r3, r3, #30
   25e34:	d5f0      	bpl.n	25e18 <lll_adv_connect_ind_check+0x28>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   25e36:	2e00      	cmp	r6, #0
   25e38:	d1ea      	bne.n	25e10 <lll_adv_connect_ind_check+0x20>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   25e3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   25e3c:	7818      	ldrb	r0, [r3, #0]
   25e3e:	f7fe fdf1 	bl	24a24 <ull_filter_lll_irk_in_fal>
   25e42:	2800      	cmp	r0, #0
   25e44:	d1e4      	bne.n	25e10 <lll_adv_connect_ind_check+0x20>
   25e46:	e7e7      	b.n	25e18 <lll_adv_connect_ind_check+0x28>
						      ci->connect_ind.init_addr,
   25e48:	468a      	mov	sl, r1
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   25e4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   25e4c:	f81a 0b02 	ldrb.w	r0, [sl], #2
   25e50:	f3c0 1080 	ubfx	r0, r0, #6, #1
   25e54:	4651      	mov	r1, sl
   25e56:	f7fe fe15 	bl	24a84 <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   25e5a:	2800      	cmp	r0, #0
   25e5c:	d0dc      	beq.n	25e18 <lll_adv_connect_ind_check+0x28>
	return (tx_addr == ci->rx_addr) &&
   25e5e:	7823      	ldrb	r3, [r4, #0]
   25e60:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   25e64:	d1d8      	bne.n	25e18 <lll_adv_connect_ind_check+0x28>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   25e66:	4638      	mov	r0, r7
   25e68:	2206      	movs	r2, #6
   25e6a:	f104 0108 	add.w	r1, r4, #8
   25e6e:	f008 f8cb 	bl	2e008 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   25e72:	2800      	cmp	r0, #0
   25e74:	d1d0      	bne.n	25e18 <lll_adv_connect_ind_check+0x28>
		       isr_rx_ci_tgta_check(lll, rx_addr, tgt_addr, ci,
   25e76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   25e78:	7818      	ldrb	r0, [r3, #0]
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   25e7a:	28ff      	cmp	r0, #255	; 0xff
   25e7c:	d011      	beq.n	25ea2 <lll_adv_connect_ind_check+0xb2>
   25e7e:	7aab      	ldrb	r3, [r5, #10]
   25e80:	2bff      	cmp	r3, #255	; 0xff
   25e82:	d00e      	beq.n	25ea2 <lll_adv_connect_ind_check+0xb2>
		return rl_idx == lll->rl_idx;
   25e84:	1ac0      	subs	r0, r0, r3
   25e86:	fab0 f080 	clz	r0, r0
   25e8a:	0940      	lsrs	r0, r0, #5
   25e8c:	e7c5      	b.n	25e1a <lll_adv_connect_ind_check+0x2a>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   25e8e:	2206      	movs	r2, #6
   25e90:	f104 0108 	add.w	r1, r4, #8
   25e94:	4638      	mov	r0, r7
   25e96:	f008 f8b7 	bl	2e008 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   25e9a:	fab0 f080 	clz	r0, r0
   25e9e:	0940      	lsrs	r0, r0, #5
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   25ea0:	e7bb      	b.n	25e1a <lll_adv_connect_ind_check+0x2a>
	return (rx_addr == ci->tx_addr) &&
   25ea2:	7823      	ldrb	r3, [r4, #0]
   25ea4:	f3c3 1380 	ubfx	r3, r3, #6, #1
   25ea8:	454b      	cmp	r3, r9
   25eaa:	d1b5      	bne.n	25e18 <lll_adv_connect_ind_check+0x28>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   25eac:	9809      	ldr	r0, [sp, #36]	; 0x24
   25eae:	2206      	movs	r2, #6
   25eb0:	4651      	mov	r1, sl
   25eb2:	f008 f8a9 	bl	2e008 <memcmp>
	return (rx_addr == ci->tx_addr) &&
   25eb6:	fab0 f080 	clz	r0, r0
   25eba:	0940      	lsrs	r0, r0, #5
   25ebc:	e7ad      	b.n	25e1a <lll_adv_connect_ind_check+0x2a>
   25ebe:	bf00      	nop

00025ec0 <isr_rx>:
{
   25ec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25ec4:	b08b      	sub	sp, #44	; 0x2c
   25ec6:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   25ec8:	f000 ffc4 	bl	26e54 <radio_is_done>
	if (trx_done) {
   25ecc:	b2c0      	uxtb	r0, r0
   25ece:	b950      	cbnz	r0, 25ee6 <isr_rx+0x26>
	lll_isr_status_reset();
   25ed0:	f7ff f9de 	bl	25290 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   25ed4:	487c      	ldr	r0, [pc, #496]	; (260c8 <isr_rx+0x208>)
   25ed6:	4621      	mov	r1, r4
   25ed8:	f000 fea2 	bl	26c20 <radio_isr_set>
}
   25edc:	b00b      	add	sp, #44	; 0x2c
   25ede:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	radio_disable();
   25ee2:	f000 bf8d 	b.w	26e00 <radio_disable>
		crc_ok = radio_crc_is_valid();
   25ee6:	f000 ffd5 	bl	26e94 <radio_crc_is_valid>
   25eea:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   25eec:	f001 f8de 	bl	270ac <radio_filter_has_match>
   25ef0:	4681      	mov	r9, r0
		devmatch_id = radio_filter_match_get();
   25ef2:	f001 f8e5 	bl	270c0 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   25ef6:	f001 fac9 	bl	2748c <radio_ar_has_match>
   25efa:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   25efc:	f001 faaa 	bl	27454 <radio_ar_match_get>
	if (crc_ok) {
   25f00:	b2ed      	uxtb	r5, r5
		irkmatch_id = radio_ar_match_get();
   25f02:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   25f04:	f001 f896 	bl	27034 <radio_rssi_is_ready>
	lll_isr_status_reset();
   25f08:	f7ff f9c2 	bl	25290 <lll_isr_status_reset>
	if (crc_ok) {
   25f0c:	2d00      	cmp	r5, #0
   25f0e:	d0e1      	beq.n	25ed4 <isr_rx+0x14>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   25f10:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   25f14:	d17a      	bne.n	2600c <isr_rx+0x14c>
   25f16:	23ff      	movs	r3, #255	; 0xff
	node_rx = ull_pdu_rx_alloc_peek(1);
   25f18:	2001      	movs	r0, #1
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   25f1a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	node_rx = ull_pdu_rx_alloc_peek(1);
   25f1e:	f7f7 feb3 	bl	1dc88 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   25f22:	4605      	mov	r5, r0
   25f24:	2800      	cmp	r0, #0
   25f26:	f000 80a2 	beq.w	2606e <isr_rx+0x1ae>
   25f2a:	7b23      	ldrb	r3, [r4, #12]
   25f2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	pdu_rx = (void *)node_rx->pdu;
   25f30:	f105 011c 	add.w	r1, r5, #28
   25f34:	691f      	ldr	r7, [r3, #16]
	addr = pdu_adv->adv_ind.addr;
   25f36:	463b      	mov	r3, r7
		devmatch_ok = radio_filter_has_match();
   25f38:	fa5f f989 	uxtb.w	r9, r9
	tx_addr = pdu_adv->tx_addr;
   25f3c:	f813 0b02 	ldrb.w	r0, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   25f40:	f000 0c0f 	and.w	ip, r0, #15
   25f44:	f1bc 0f01 	cmp.w	ip, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   25f48:	bf08      	it	eq
   25f4a:	f107 0808 	addeq.w	r8, r7, #8
	tx_addr = pdu_adv->tx_addr;
   25f4e:	f3c0 1280 	ubfx	r2, r0, #6, #1
	rx_addr = pdu_adv->rx_addr;
   25f52:	ea4f 17d0 	mov.w	r7, r0, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   25f56:	7f28      	ldrb	r0, [r5, #28]
   25f58:	f000 000f 	and.w	r0, r0, #15
		tgt_addr = NULL;
   25f5c:	bf18      	it	ne
   25f5e:	f04f 0800 	movne.w	r8, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   25f62:	2803      	cmp	r0, #3
   25f64:	d05a      	beq.n	2601c <isr_rx+0x15c>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   25f66:	2805      	cmp	r0, #5
   25f68:	d1b4      	bne.n	25ed4 <isr_rx+0x14>
   25f6a:	7f68      	ldrb	r0, [r5, #29]
   25f6c:	2822      	cmp	r0, #34	; 0x22
   25f6e:	d1b1      	bne.n	25ed4 <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   25f70:	6860      	ldr	r0, [r4, #4]
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   25f72:	2800      	cmp	r0, #0
   25f74:	d0ae      	beq.n	25ed4 <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   25f76:	f890 0020 	ldrb.w	r0, [r0, #32]
   25f7a:	0780      	lsls	r0, r0, #30
   25f7c:	d4aa      	bmi.n	25ed4 <isr_rx+0x14>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   25f7e:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   25f82:	9003      	str	r0, [sp, #12]
   25f84:	e9cd 8901 	strd	r8, r9, [sp, #4]
   25f88:	9700      	str	r7, [sp, #0]
   25f8a:	4620      	mov	r0, r4
   25f8c:	f7ff ff30 	bl	25df0 <lll_adv_connect_ind_check>
		   lll->conn && !lll->conn->periph.cancelled &&
   25f90:	2800      	cmp	r0, #0
   25f92:	d09f      	beq.n	25ed4 <isr_rx+0x14>
			rx = ull_pdu_rx_alloc_peek(4);
   25f94:	2004      	movs	r0, #4
   25f96:	f7f7 fe77 	bl	1dc88 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   25f9a:	2800      	cmp	r0, #0
   25f9c:	d09a      	beq.n	25ed4 <isr_rx+0x14>
		radio_isr_set(isr_abort, lll);
   25f9e:	484b      	ldr	r0, [pc, #300]	; (260cc <isr_rx+0x20c>)
   25fa0:	4621      	mov	r1, r4
   25fa2:	f000 fe3d 	bl	26c20 <radio_isr_set>
		radio_disable();
   25fa6:	f000 ff2b 	bl	26e00 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   25faa:	f000 ff49 	bl	26e40 <radio_is_ready>
   25fae:	2800      	cmp	r0, #0
   25fb0:	d14f      	bne.n	26052 <isr_rx+0x192>
		lll->conn->periph.initiated = 1;
   25fb2:	6862      	ldr	r2, [r4, #4]
   25fb4:	f892 3020 	ldrb.w	r3, [r2, #32]
   25fb8:	f043 0301 	orr.w	r3, r3, #1
   25fbc:	f882 3020 	strb.w	r3, [r2, #32]
		rx = ull_pdu_rx_alloc();
   25fc0:	f7f7 fe82 	bl	1dcc8 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   25fc4:	2217      	movs	r2, #23
		rx->hdr.handle = 0xffff;
   25fc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   25fca:	7102      	strb	r2, [r0, #4]
		rx->hdr.handle = 0xffff;
   25fcc:	80c3      	strh	r3, [r0, #6]
		ftr->param = lll;
   25fce:	6084      	str	r4, [r0, #8]
		rx = ull_pdu_rx_alloc();
   25fd0:	4605      	mov	r5, r0
		ftr->ticks_anchor = radio_tmr_start_get();
   25fd2:	f001 f919 	bl	27208 <radio_tmr_start_get>
   25fd6:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   25fd8:	f001 f96a 	bl	272b0 <radio_tmr_end_get>
				    radio_rx_chain_delay_get(0, 0);
   25fdc:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   25fde:	4604      	mov	r4, r0
				    radio_rx_chain_delay_get(0, 0);
   25fe0:	4608      	mov	r0, r1
   25fe2:	f000 ff01 	bl	26de8 <radio_rx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   25fe6:	1a24      	subs	r4, r4, r0
   25fe8:	616c      	str	r4, [r5, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   25fea:	b1ae      	cbz	r6, 26018 <isr_rx+0x158>
   25fec:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   25ff0:	766b      	strb	r3, [r5, #25]
			ftr->extra = ull_pdu_rx_alloc();
   25ff2:	f7f7 fe69 	bl	1dcc8 <ull_pdu_rx_alloc>
   25ff6:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
   25ff8:	4629      	mov	r1, r5
   25ffa:	6828      	ldr	r0, [r5, #0]
			ftr->extra = ull_pdu_rx_alloc();
   25ffc:	60eb      	str	r3, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
   25ffe:	f7f7 fe79 	bl	1dcf4 <ull_rx_put>
		ull_rx_sched();
   26002:	f7f7 fe87 	bl	1dd14 <ull_rx_sched>
}
   26006:	b00b      	add	sp, #44	; 0x2c
   26008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   2600c:	fa5f f088 	uxtb.w	r0, r8
   26010:	f7fe fcb6 	bl	24980 <ull_filter_lll_rl_irk_idx>
   26014:	4603      	mov	r3, r0
   26016:	e77f      	b.n	25f18 <isr_rx+0x58>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   26018:	23ff      	movs	r3, #255	; 0xff
   2601a:	e7e9      	b.n	25ff0 <isr_rx+0x130>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   2601c:	7f68      	ldrb	r0, [r5, #29]
   2601e:	280c      	cmp	r0, #12
   26020:	f47f af58 	bne.w	25ed4 <isr_rx+0x14>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   26024:	f1b8 0f00 	cmp.w	r8, #0
   26028:	f47f af54 	bne.w	25ed4 <isr_rx+0x14>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   2602c:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   26030:	9001      	str	r0, [sp, #4]
   26032:	f8cd 9000 	str.w	r9, [sp]
   26036:	4620      	mov	r0, r4
   26038:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2603c:	9105      	str	r1, [sp, #20]
   2603e:	f7ff fe9f 	bl	25d80 <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   26042:	bb10      	cbnz	r0, 2608a <isr_rx+0x1ca>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   26044:	7f28      	ldrb	r0, [r5, #28]
   26046:	9b07      	ldr	r3, [sp, #28]
   26048:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
   2604c:	f000 000f 	and.w	r0, r0, #15
   26050:	e789      	b.n	25f66 <isr_rx+0xa6>
		LL_ASSERT(!radio_is_ready());
   26052:	4a1f      	ldr	r2, [pc, #124]	; (260d0 <isr_rx+0x210>)
   26054:	491f      	ldr	r1, [pc, #124]	; (260d4 <isr_rx+0x214>)
   26056:	4820      	ldr	r0, [pc, #128]	; (260d8 <isr_rx+0x218>)
   26058:	f240 6312 	movw	r3, #1554	; 0x612
   2605c:	f005 ffb3 	bl	2bfc6 <assert_print>
   26060:	4040      	eors	r0, r0
   26062:	f380 8811 	msr	BASEPRI, r0
   26066:	f04f 0003 	mov.w	r0, #3
   2606a:	df02      	svc	2
   2606c:	e7a1      	b.n	25fb2 <isr_rx+0xf2>
	LL_ASSERT(node_rx);
   2606e:	4a18      	ldr	r2, [pc, #96]	; (260d0 <isr_rx+0x210>)
   26070:	491a      	ldr	r1, [pc, #104]	; (260dc <isr_rx+0x21c>)
   26072:	4819      	ldr	r0, [pc, #100]	; (260d8 <isr_rx+0x218>)
   26074:	f240 53b2 	movw	r3, #1458	; 0x5b2
   26078:	f005 ffa5 	bl	2bfc6 <assert_print>
   2607c:	4040      	eors	r0, r0
   2607e:	f380 8811 	msr	BASEPRI, r0
   26082:	f04f 0003 	mov.w	r0, #3
   26086:	df02      	svc	2
   26088:	e74f      	b.n	25f2a <isr_rx+0x6a>
		radio_isr_set(isr_done, lll);
   2608a:	4621      	mov	r1, r4
   2608c:	480e      	ldr	r0, [pc, #56]	; (260c8 <isr_rx+0x208>)
   2608e:	f000 fdc7 	bl	26c20 <radio_isr_set>
		radio_switch_complete_and_disable();
   26092:	f000 ffb9 	bl	27008 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   26096:	7e23      	ldrb	r3, [r4, #24]
   26098:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   2609c:	69e0      	ldr	r0, [r4, #28]
   2609e:	f000 fe99 	bl	26dd4 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   260a2:	f000 fecd 	bl	26e40 <radio_is_ready>
   260a6:	2800      	cmp	r0, #0
   260a8:	d0ad      	beq.n	26006 <isr_rx+0x146>
   260aa:	4a09      	ldr	r2, [pc, #36]	; (260d0 <isr_rx+0x210>)
   260ac:	4909      	ldr	r1, [pc, #36]	; (260d4 <isr_rx+0x214>)
   260ae:	480a      	ldr	r0, [pc, #40]	; (260d8 <isr_rx+0x218>)
   260b0:	f240 53cb 	movw	r3, #1483	; 0x5cb
   260b4:	f005 ff87 	bl	2bfc6 <assert_print>
   260b8:	4040      	eors	r0, r0
   260ba:	f380 8811 	msr	BASEPRI, r0
   260be:	f04f 0003 	mov.w	r0, #3
   260c2:	df02      	svc	2
		if (!err) {
   260c4:	e79f      	b.n	26006 <isr_rx+0x146>
   260c6:	bf00      	nop
   260c8:	00025b71 	.word	0x00025b71
   260cc:	00025659 	.word	0x00025659
   260d0:	00033cb8 	.word	0x00033cb8
   260d4:	00033d0c 	.word	0x00033d0c
   260d8:	00032fc4 	.word	0x00032fc4
   260dc:	00033d04 	.word	0x00033d04

000260e0 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   260e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   260e2:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   260e4:	f7ff f8d4 	bl	25290 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   260e8:	f7f7 fed2 	bl	1de90 <ull_event_done_extra_get>
	LL_ASSERT(e);
   260ec:	4604      	mov	r4, r0
   260ee:	2800      	cmp	r0, #0
   260f0:	d036      	beq.n	26160 <isr_done+0x80>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
	e->crc_valid = crc_valid;
   260f2:	4922      	ldr	r1, [pc, #136]	; (2617c <isr_done+0x9c>)
   260f4:	79a2      	ldrb	r2, [r4, #6]
   260f6:	7808      	ldrb	r0, [r1, #0]
	e->trx_cnt = trx_cnt;
   260f8:	4b21      	ldr	r3, [pc, #132]	; (26180 <isr_done+0xa0>)
	e->crc_valid = crc_valid;
   260fa:	f360 0200 	bfi	r2, r0, #0, #1
   260fe:	71a2      	strb	r2, [r4, #6]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   26100:	4a20      	ldr	r2, [pc, #128]	; (26184 <isr_done+0xa4>)
	e->trx_cnt = trx_cnt;
   26102:	881b      	ldrh	r3, [r3, #0]
	e->mic_state = mic_state;
   26104:	7812      	ldrb	r2, [r2, #0]
	e->trx_cnt = trx_cnt;
   26106:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   26108:	2101      	movs	r1, #1
   2610a:	7021      	strb	r1, [r4, #0]
	e->mic_state = mic_state;
   2610c:	71e2      	strb	r2, [r4, #7]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   2610e:	b11b      	cbz	r3, 26118 <isr_done+0x38>
		struct lll_conn *lll = param;

		if (lll->role) {
   26110:	f995 301d 	ldrsb.w	r3, [r5, #29]
   26114:	2b00      	cmp	r3, #0
   26116:	db04      	blt.n	26122 <isr_done+0x42>
			lll->periph.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   26118:	4628      	mov	r0, r5
}
   2611a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   2611e:	f7ff b8c5 	b.w	252ac <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   26122:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
   26126:	f003 0307 	and.w	r3, r3, #7
 */
#define HCTO_START_DELAY_US 1U

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   2612a:	2b02      	cmp	r3, #2
   2612c:	d016      	beq.n	2615c <isr_done+0x7c>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   2612e:	2b04      	cmp	r3, #4
   26130:	bf14      	ite	ne
   26132:	2728      	movne	r7, #40	; 0x28
   26134:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   26138:	f001 f8a6 	bl	27288 <radio_tmr_aa_restore>
   2613c:	4606      	mov	r6, r0
   2613e:	f001 f8a9 	bl	27294 <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   26142:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   26144:	6127      	str	r7, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   26146:	1a36      	subs	r6, r6, r0
			e->drift.window_widening_event_us =
   26148:	e9c4 6302 	strd	r6, r3, [r4, #8]
			lll->periph.window_widening_event_us = 0;
   2614c:	2300      	movs	r3, #0
   2614e:	632b      	str	r3, [r5, #48]	; 0x30
			lll->periph.window_size_event_us = 0;
   26150:	63ab      	str	r3, [r5, #56]	; 0x38
	lll_isr_cleanup(param);
   26152:	4628      	mov	r0, r5
}
   26154:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   26158:	f7ff b8a8 	b.w	252ac <lll_isr_cleanup>
	switch (phy) {
   2615c:	2718      	movs	r7, #24
   2615e:	e7eb      	b.n	26138 <isr_done+0x58>
	LL_ASSERT(e);
   26160:	4a09      	ldr	r2, [pc, #36]	; (26188 <isr_done+0xa8>)
   26162:	490a      	ldr	r1, [pc, #40]	; (2618c <isr_done+0xac>)
   26164:	480a      	ldr	r0, [pc, #40]	; (26190 <isr_done+0xb0>)
   26166:	f44f 7347 	mov.w	r3, #796	; 0x31c
   2616a:	f005 ff2c 	bl	2bfc6 <assert_print>
   2616e:	4040      	eors	r0, r0
   26170:	f380 8811 	msr	BASEPRI, r0
   26174:	f04f 0003 	mov.w	r0, #3
   26178:	df02      	svc	2
   2617a:	e7ba      	b.n	260f2 <isr_done+0x12>
   2617c:	2000342a 	.word	0x2000342a
   26180:	200032b2 	.word	0x200032b2
   26184:	2000342b 	.word	0x2000342b
   26188:	00033d58 	.word	0x00033d58
   2618c:	0003351c 	.word	0x0003351c
   26190:	00032fc4 	.word	0x00032fc4

00026194 <lll_conn_init>:
{
   26194:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   26196:	f000 fe87 	bl	26ea8 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   2619a:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   2619c:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   2619e:	2101      	movs	r1, #1
   261a0:	f361 0201 	bfi	r2, r1, #0, #2
}
   261a4:	2000      	movs	r0, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   261a6:	701a      	strb	r2, [r3, #0]
}
   261a8:	bd08      	pop	{r3, pc}
   261aa:	bf00      	nop

000261ac <lll_conn_reset>:
}
   261ac:	2000      	movs	r0, #0
   261ae:	4770      	bx	lr

000261b0 <lll_conn_flush>:
}
   261b0:	4770      	bx	lr
   261b2:	bf00      	nop

000261b4 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   261b4:	4805      	ldr	r0, [pc, #20]	; (261cc <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   261b6:	4906      	ldr	r1, [pc, #24]	; (261d0 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   261b8:	4a06      	ldr	r2, [pc, #24]	; (261d4 <lll_conn_prepare_reset+0x20>)
{
   261ba:	b410      	push	{r4}
	trx_cnt = 0U;
   261bc:	2300      	movs	r3, #0
   261be:	4c06      	ldr	r4, [pc, #24]	; (261d8 <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   261c0:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   261c2:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   261c4:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   261c6:	8023      	strh	r3, [r4, #0]
}
   261c8:	bc10      	pop	{r4}
   261ca:	4770      	bx	lr
   261cc:	2000342a 	.word	0x2000342a
   261d0:	20003429 	.word	0x20003429
   261d4:	2000342b 	.word	0x2000342b
   261d8:	200032b2 	.word	0x200032b2

000261dc <lll_conn_abort_cb>:
{
   261dc:	b538      	push	{r3, r4, r5, lr}
	if (!prepare_param) {
   261de:	b1e8      	cbz	r0, 2621c <lll_conn_abort_cb+0x40>
	err = lll_hfclock_off();
   261e0:	460d      	mov	r5, r1
   261e2:	4604      	mov	r4, r0
   261e4:	f7ff fa12 	bl	2560c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   261e8:	2800      	cmp	r0, #0
   261ea:	db0a      	blt.n	26202 <lll_conn_abort_cb+0x26>
	lll = prepare_param->param;
   261ec:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   261ee:	8923      	ldrh	r3, [r4, #8]
   261f0:	8a51      	ldrh	r1, [r2, #18]
   261f2:	3301      	adds	r3, #1
   261f4:	440b      	add	r3, r1
   261f6:	8253      	strh	r3, [r2, #18]
	lll_done(param);
   261f8:	4628      	mov	r0, r5
}
   261fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   261fe:	f7fe bf7d 	b.w	250fc <lll_done>
	LL_ASSERT(err >= 0);
   26202:	4a0a      	ldr	r2, [pc, #40]	; (2622c <lll_conn_abort_cb+0x50>)
   26204:	490a      	ldr	r1, [pc, #40]	; (26230 <lll_conn_abort_cb+0x54>)
   26206:	480b      	ldr	r0, [pc, #44]	; (26234 <lll_conn_abort_cb+0x58>)
   26208:	23aa      	movs	r3, #170	; 0xaa
   2620a:	f005 fedc 	bl	2bfc6 <assert_print>
   2620e:	4040      	eors	r0, r0
   26210:	f380 8811 	msr	BASEPRI, r0
   26214:	f04f 0003 	mov.w	r0, #3
   26218:	df02      	svc	2
   2621a:	e7e7      	b.n	261ec <lll_conn_abort_cb+0x10>
		radio_isr_set(isr_done, param);
   2621c:	4806      	ldr	r0, [pc, #24]	; (26238 <lll_conn_abort_cb+0x5c>)
   2621e:	f000 fcff 	bl	26c20 <radio_isr_set>
}
   26222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   26226:	f000 bdeb 	b.w	26e00 <radio_disable>
   2622a:	bf00      	nop
   2622c:	00033d58 	.word	0x00033d58
   26230:	00033c48 	.word	0x00033c48
   26234:	00032fc4 	.word	0x00032fc4
   26238:	000260e1 	.word	0x000260e1

0002623c <lll_conn_rx_pkt_set>:
{
   2623c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2623e:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   26240:	2001      	movs	r0, #1
   26242:	f7f7 fd21 	bl	1dc88 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   26246:	4604      	mov	r4, r0
   26248:	b348      	cbz	r0, 2629e <lll_conn_rx_pkt_set+0x62>
	phy = lll->phy_rx;
   2624a:	f895 6045 	ldrb.w	r6, [r5, #69]	; 0x45
	max_rx_octets = lll->max_rx_octets;
   2624e:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
	phy = lll->phy_rx;
   26250:	f006 0607 	and.w	r6, r6, #7
	radio_phy_set(phy, 0);
   26254:	2100      	movs	r1, #0
   26256:	4630      	mov	r0, r6
   26258:	f000 fd48 	bl	26cec <radio_phy_set>
	} else if (lll->enc_rx) {
   2625c:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
				    RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   26260:	0072      	lsls	r2, r6, #1
	} else if (lll->enc_rx) {
   26262:	071b      	lsls	r3, r3, #28
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   26264:	b2f9      	uxtb	r1, r7
   26266:	f042 0201 	orr.w	r2, r2, #1
						      node_rx->pdu));
   2626a:	f104 041c 	add.w	r4, r4, #28
	} else if (lll->enc_rx) {
   2626e:	d50e      	bpl.n	2628e <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   26270:	3104      	adds	r1, #4
   26272:	b2c9      	uxtb	r1, r1
   26274:	2008      	movs	r0, #8
   26276:	f000 fd7f 	bl	26d78 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   2627a:	4622      	mov	r2, r4
   2627c:	4631      	mov	r1, r6
   2627e:	f105 005f 	add.w	r0, r5, #95	; 0x5f
   26282:	f001 f821 	bl	272c8 <radio_ccm_rx_pkt_set>
}
   26286:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   2628a:	f000 bd9d 	b.w	26dc8 <radio_pkt_rx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_rx_octets,
   2628e:	2008      	movs	r0, #8
   26290:	f000 fd72 	bl	26d78 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   26294:	4620      	mov	r0, r4
}
   26296:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   2629a:	f000 bd95 	b.w	26dc8 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   2629e:	4a07      	ldr	r2, [pc, #28]	; (262bc <lll_conn_rx_pkt_set+0x80>)
   262a0:	4907      	ldr	r1, [pc, #28]	; (262c0 <lll_conn_rx_pkt_set+0x84>)
   262a2:	4808      	ldr	r0, [pc, #32]	; (262c4 <lll_conn_rx_pkt_set+0x88>)
   262a4:	f240 235f 	movw	r3, #607	; 0x25f
   262a8:	f005 fe8d 	bl	2bfc6 <assert_print>
   262ac:	4040      	eors	r0, r0
   262ae:	f380 8811 	msr	BASEPRI, r0
   262b2:	f04f 0003 	mov.w	r0, #3
   262b6:	df02      	svc	2
   262b8:	e7c7      	b.n	2624a <lll_conn_rx_pkt_set+0xe>
   262ba:	bf00      	nop
   262bc:	00033d58 	.word	0x00033d58
   262c0:	00033d04 	.word	0x00033d04
   262c4:	00032fc4 	.word	0x00032fc4

000262c8 <lll_conn_isr_tx>:
{
   262c8:	b538      	push	{r3, r4, r5, lr}
   262ca:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   262cc:	f7fe ffce 	bl	2526c <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   262d0:	2096      	movs	r0, #150	; 0x96
   262d2:	f000 ff0b 	bl	270ec <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   262d6:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   262da:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   262de:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   262e2:	f000 0007 	and.w	r0, r0, #7
   262e6:	f002 0207 	and.w	r2, r2, #7
   262ea:	2100      	movs	r1, #0
   262ec:	f000 fe2c 	bl	26f48 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   262f0:	4620      	mov	r0, r4
   262f2:	f7ff ffa3 	bl	2623c <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   262f6:	f000 fda3 	bl	26e40 <radio_is_ready>
   262fa:	bb58      	cbnz	r0, 26354 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + (EVENT_CLOCK_JITTER_US << 1) +
   262fc:	f000 ffde 	bl	272bc <radio_tmr_tifs_base_get>
   26300:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   26302:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   26306:	2101      	movs	r1, #1
   26308:	f000 0007 	and.w	r0, r0, #7
   2630c:	f000 fd6c 	bl	26de8 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   26310:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   26314:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   26318:	4405      	add	r5, r0
   2631a:	2b02      	cmp	r3, #2
   2631c:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   26320:	d016      	beq.n	26350 <lll_conn_isr_tx+0x88>
		return 376;
   26322:	2b04      	cmp	r3, #4
   26324:	bf14      	ite	ne
   26326:	2328      	movne	r3, #40	; 0x28
   26328:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   2632c:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
   26330:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   26334:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   26338:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   2633a:	f000 fd51 	bl	26de0 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   2633e:	1a28      	subs	r0, r5, r0
   26340:	f000 ff74 	bl	2722c <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   26344:	4621      	mov	r1, r4
   26346:	480a      	ldr	r0, [pc, #40]	; (26370 <lll_conn_isr_tx+0xa8>)
}
   26348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   2634c:	f000 bc68 	b.w	26c20 <radio_isr_set>
	switch (phy) {
   26350:	2318      	movs	r3, #24
   26352:	e7eb      	b.n	2632c <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   26354:	4a07      	ldr	r2, [pc, #28]	; (26374 <lll_conn_isr_tx+0xac>)
   26356:	4908      	ldr	r1, [pc, #32]	; (26378 <lll_conn_isr_tx+0xb0>)
   26358:	4808      	ldr	r0, [pc, #32]	; (2637c <lll_conn_isr_tx+0xb4>)
   2635a:	f44f 7305 	mov.w	r3, #532	; 0x214
   2635e:	f005 fe32 	bl	2bfc6 <assert_print>
   26362:	4040      	eors	r0, r0
   26364:	f380 8811 	msr	BASEPRI, r0
   26368:	f04f 0003 	mov.w	r0, #3
   2636c:	df02      	svc	2
   2636e:	e7c5      	b.n	262fc <lll_conn_isr_tx+0x34>
   26370:	000264b9 	.word	0x000264b9
   26374:	00033d58 	.word	0x00033d58
   26378:	00033d0c 	.word	0x00033d0c
   2637c:	00032fc4 	.word	0x00032fc4

00026380 <lll_conn_tx_pkt_set>:
{
   26380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26382:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   26384:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
	max_tx_octets = lll->max_tx_octets;
   26388:	8f86      	ldrh	r6, [r0, #60]	; 0x3c
	phy = lll->phy_tx;
   2638a:	f001 0407 	and.w	r4, r1, #7
{
   2638e:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   26390:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   26394:	4620      	mov	r0, r4
   26396:	f000 fca9 	bl	26cec <radio_phy_set>
	} else if (lll->enc_tx) {
   2639a:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   2639e:	0062      	lsls	r2, r4, #1
	} else if (lll->enc_tx) {
   263a0:	06db      	lsls	r3, r3, #27
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   263a2:	f042 0201 	orr.w	r2, r2, #1
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   263a6:	b2f1      	uxtb	r1, r6
	} else if (lll->enc_tx) {
   263a8:	d50d      	bpl.n	263c6 <lll_conn_tx_pkt_set+0x46>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   263aa:	3104      	adds	r1, #4
   263ac:	b2c9      	uxtb	r1, r1
   263ae:	2008      	movs	r0, #8
   263b0:	f000 fce2 	bl	26d78 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   263b4:	4639      	mov	r1, r7
   263b6:	f105 0080 	add.w	r0, r5, #128	; 0x80
   263ba:	f000 ffc3 	bl	27344 <radio_ccm_tx_pkt_set>
}
   263be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   263c2:	f000 bd07 	b.w	26dd4 <radio_pkt_tx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_tx_octets, pkt_flags);
   263c6:	2008      	movs	r0, #8
   263c8:	f000 fcd6 	bl	26d78 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   263cc:	4638      	mov	r0, r7
}
   263ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   263d2:	f000 bcff 	b.w	26dd4 <radio_pkt_tx_set>
   263d6:	bf00      	nop

000263d8 <lll_conn_pdu_tx_prep>:
{
   263d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   263dc:	4604      	mov	r4, r0
   263de:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   263e0:	aa01      	add	r2, sp, #4
   263e2:	6c80      	ldr	r0, [r0, #72]	; 0x48
{
   263e4:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   263e6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   263e8:	f7f3 ff24 	bl	1a234 <memq_peek>
	if (lll->empty || !link) {
   263ec:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   263f0:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   263f2:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   263f4:	d432      	bmi.n	2645c <lll_conn_pdu_tx_prep+0x84>
   263f6:	2800      	cmp	r0, #0
   263f8:	d04e      	beq.n	26498 <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   263fa:	9b01      	ldr	r3, [sp, #4]
   263fc:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
   26400:	f103 0804 	add.w	r8, r3, #4
		if (!lll->packet_tx_head_len) {
   26404:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   26408:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   2640c:	b913      	cbnz	r3, 26414 <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   2640e:	786b      	ldrb	r3, [r5, #1]
   26410:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		if (lll->packet_tx_head_offset) {
   26414:	b137      	cbz	r7, 26424 <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   26416:	f818 2007 	ldrb.w	r2, [r8, r7]
   2641a:	2101      	movs	r1, #1
   2641c:	f361 0201 	bfi	r2, r1, #0, #2
   26420:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   26424:	1bdb      	subs	r3, r3, r7
   26426:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   26428:	4620      	mov	r0, r4
   2642a:	f7fd f993 	bl	23754 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   2642e:	786b      	ldrb	r3, [r5, #1]
   26430:	4283      	cmp	r3, r0
   26432:	d924      	bls.n	2647e <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   26434:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   26436:	f818 3007 	ldrb.w	r3, [r8, r7]
   2643a:	f043 0310 	orr.w	r3, r3, #16
   2643e:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   26442:	f818 3007 	ldrb.w	r3, [r8, r7]
   26446:	f36f 1347 	bfc	r3, #5, #3
   2644a:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   2644e:	2300      	movs	r3, #0
   26450:	70ab      	strb	r3, [r5, #2]
	*pdu_data_tx = p;
   26452:	f8c9 5000 	str.w	r5, [r9]
}
   26456:	b003      	add	sp, #12
   26458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   2645c:	f043 0304 	orr.w	r3, r3, #4
   26460:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   26464:	f000 fd20 	bl	26ea8 <radio_pkt_empty_get>
   26468:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   2646a:	b1e6      	cbz	r6, 264a6 <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   2646c:	7803      	ldrb	r3, [r0, #0]
   2646e:	f043 0310 	orr.w	r3, r3, #16
   26472:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   26474:	f8c9 5000 	str.w	r5, [r9]
}
   26478:	b003      	add	sp, #12
   2647a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   2647e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   26480:	6832      	ldr	r2, [r6, #0]
   26482:	429a      	cmp	r2, r3
			p->md = 1U;
   26484:	f818 3007 	ldrb.w	r3, [r8, r7]
   26488:	bf14      	ite	ne
   2648a:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   2648e:	f36f 1304 	bfceq	r3, #4, #1
   26492:	f808 3007 	strb.w	r3, [r8, r7]
   26496:	e7d4      	b.n	26442 <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   26498:	f043 0304 	orr.w	r3, r3, #4
   2649c:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   264a0:	f000 fd02 	bl	26ea8 <radio_pkt_empty_get>
   264a4:	4605      	mov	r5, r0
			p->md = 0U;
   264a6:	782b      	ldrb	r3, [r5, #0]
   264a8:	f36f 1304 	bfc	r3, #4, #1
   264ac:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   264ae:	f8c9 5000 	str.w	r5, [r9]
}
   264b2:	b003      	add	sp, #12
   264b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000264b8 <lll_conn_isr_rx>:
{
   264b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   264ba:	b083      	sub	sp, #12
   264bc:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   264be:	f000 fcc9 	bl	26e54 <radio_is_done>
	if (trx_done) {
   264c2:	b2c0      	uxtb	r0, r0
   264c4:	b950      	cbnz	r0, 264dc <lll_conn_isr_rx+0x24>
	lll_isr_rx_status_reset();
   264c6:	f7fe fed9 	bl	2527c <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   264ca:	48ae      	ldr	r0, [pc, #696]	; (26784 <lll_conn_isr_rx+0x2cc>)
   264cc:	4621      	mov	r1, r4
   264ce:	f000 fba7 	bl	26c20 <radio_isr_set>
}
   264d2:	b003      	add	sp, #12
   264d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		radio_disable();
   264d8:	f000 bc92 	b.w	26e00 <radio_disable>
		crc_ok = radio_crc_is_valid();
   264dc:	f000 fcda 	bl	26e94 <radio_crc_is_valid>
   264e0:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   264e2:	f000 fda7 	bl	27034 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   264e6:	f7fe fec9 	bl	2527c <lll_isr_rx_status_reset>
	trx_cnt++;
   264ea:	4aa7      	ldr	r2, [pc, #668]	; (26788 <lll_conn_isr_rx+0x2d0>)
   264ec:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   264ee:	2001      	movs	r0, #1
	trx_cnt++;
   264f0:	4403      	add	r3, r0
   264f2:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   264f4:	f7f7 fbc8 	bl	1dc88 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   264f8:	4606      	mov	r6, r0
   264fa:	2800      	cmp	r0, #0
   264fc:	f000 80bf 	beq.w	2667e <lll_conn_isr_rx+0x1c6>
	if (crc_ok) {
   26500:	2d00      	cmp	r5, #0
   26502:	d155      	bne.n	265b0 <lll_conn_isr_rx+0xf8>
		if (crc_expire == 0U) {
   26504:	4ba1      	ldr	r3, [pc, #644]	; (2678c <lll_conn_isr_rx+0x2d4>)
   26506:	781f      	ldrb	r7, [r3, #0]
   26508:	2f00      	cmp	r7, #0
   2650a:	f040 80a7 	bne.w	2665c <lll_conn_isr_rx+0x1a4>
		crc_expire--;
   2650e:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   26510:	a901      	add	r1, sp, #4
   26512:	4620      	mov	r0, r4
		crc_expire--;
   26514:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   26516:	f7ff ff5f 	bl	263d8 <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   2651a:	2096      	movs	r0, #150	; 0x96
   2651c:	f000 fde6 	bl	270ec <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   26520:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   26524:	f000 0007 	and.w	r0, r0, #7
   26528:	f000 fcc6 	bl	26eb8 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   2652c:	4898      	ldr	r0, [pc, #608]	; (26790 <lll_conn_isr_rx+0x2d8>)
   2652e:	4621      	mov	r1, r4
   26530:	f000 fb76 	bl	26c20 <radio_isr_set>
		radio_tmr_end_capture();
   26534:	f000 feb4 	bl	272a0 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   26538:	9901      	ldr	r1, [sp, #4]
   2653a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
	pdu_data_tx->nesn = lll->nesn;
   2653e:	780b      	ldrb	r3, [r1, #0]
   26540:	f023 000c 	bic.w	r0, r3, #12
   26544:	f3c2 0340 	ubfx	r3, r2, #1, #1
   26548:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   2654a:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   2654e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   26552:	4303      	orrs	r3, r0
   26554:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   26556:	4620      	mov	r0, r4
   26558:	f7ff ff12 	bl	26380 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   2655c:	f000 fc70 	bl	26e40 <radio_is_ready>
   26560:	2800      	cmp	r0, #0
   26562:	f040 80bb 	bne.w	266dc <lll_conn_isr_rx+0x224>
	if (!radio_tmr_aa_restore()) {
   26566:	f000 fe8f 	bl	27288 <radio_tmr_aa_restore>
   2656a:	b170      	cbz	r0, 2658a <lll_conn_isr_rx+0xd2>
	if (tx_release) {
   2656c:	b19d      	cbz	r5, 26596 <lll_conn_isr_rx+0xde>
		LL_ASSERT(lll->handle != 0xFFFF);
   2656e:	89a0      	ldrh	r0, [r4, #12]
   26570:	f64f 73ff 	movw	r3, #65535	; 0xffff
   26574:	4298      	cmp	r0, r3
   26576:	f000 80bf 	beq.w	266f8 <lll_conn_isr_rx+0x240>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   2657a:	4629      	mov	r1, r5
   2657c:	f7fc ff7a 	bl	23474 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   26580:	b95f      	cbnz	r7, 2659a <lll_conn_isr_rx+0xe2>
		ull_rx_sched();
   26582:	f7f7 fbc7 	bl	1dd14 <ull_rx_sched>
}
   26586:	b003      	add	sp, #12
   26588:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   2658a:	f000 fe71 	bl	27270 <radio_tmr_aa_get>
   2658e:	f000 fe75 	bl	2727c <radio_tmr_aa_save>
	if (tx_release) {
   26592:	2d00      	cmp	r5, #0
   26594:	d1eb      	bne.n	2656e <lll_conn_isr_rx+0xb6>
	if (is_rx_enqueue) {
   26596:	2f00      	cmp	r7, #0
   26598:	d0f5      	beq.n	26586 <lll_conn_isr_rx+0xce>
		ull_pdu_rx_alloc();
   2659a:	f7f7 fb95 	bl	1dcc8 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   2659e:	2303      	movs	r3, #3
   265a0:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   265a2:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   265a4:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   265a6:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   265a8:	4631      	mov	r1, r6
   265aa:	f7f7 fba3 	bl	1dcf4 <ull_rx_put>
	if (is_ull_rx || is_iq_report) {
   265ae:	e7e8      	b.n	26582 <lll_conn_isr_rx+0xca>
	if (pdu_data_rx->nesn != lll->sn) {
   265b0:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   265b4:	7f32      	ldrb	r2, [r6, #28]
   265b6:	f003 0101 	and.w	r1, r3, #1
   265ba:	f3c2 0080 	ubfx	r0, r2, #2, #1
   265be:	4288      	cmp	r0, r1
   265c0:	d06d      	beq.n	2669e <lll_conn_isr_rx+0x1e6>
		if (lll->role) {
   265c2:	f994 201d 	ldrsb.w	r2, [r4, #29]
		lll->sn++;
   265c6:	f081 0101 	eor.w	r1, r1, #1
   265ca:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   265ce:	2a00      	cmp	r2, #0
		lll->sn++;
   265d0:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (lll->role) {
   265d4:	da05      	bge.n	265e2 <lll_conn_isr_rx+0x12a>
			lll->periph.latency_enabled = 1;
   265d6:	f894 3020 	ldrb.w	r3, [r4, #32]
   265da:	f043 0304 	orr.w	r3, r3, #4
   265de:	f884 3020 	strb.w	r3, [r4, #32]
		if (!lll->empty) {
   265e2:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   265e6:	075a      	lsls	r2, r3, #29
   265e8:	f100 8095 	bmi.w	26716 <lll_conn_isr_rx+0x25e>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   265ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   265f0:	aa01      	add	r2, sp, #4
   265f2:	f7f3 fe1f 	bl	1a234 <memq_peek>
		if (link) {
   265f6:	4605      	mov	r5, r0
   265f8:	2800      	cmp	r0, #0
   265fa:	f000 80bf 	beq.w	2677c <lll_conn_isr_rx+0x2c4>
					       lll->packet_tx_head_offset);
   265fe:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
			pdu_data_tx_len = pdu_data_tx->len;
   26602:	9b01      	ldr	r3, [sp, #4]
   26604:	4413      	add	r3, r2
   26606:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   26608:	b171      	cbz	r1, 26628 <lll_conn_isr_rx+0x170>
				if (lll->enc_tx) {
   2660a:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   2660e:	06df      	lsls	r7, r3, #27
   26610:	d50a      	bpl.n	26628 <lll_conn_isr_rx+0x170>
					lll->ccm_tx.counter++;
   26612:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   26616:	3301      	adds	r3, #1
   26618:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   2661c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   26620:	f143 0300 	adc.w	r3, r3, #0
   26624:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
			if (offset < lll->packet_tx_head_len) {
   26628:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   2662c:	440a      	add	r2, r1
   2662e:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   26630:	429a      	cmp	r2, r3
   26632:	d37b      	bcc.n	2672c <lll_conn_isr_rx+0x274>
			} else if (offset == lll->packet_tx_head_len) {
   26634:	f000 8095 	beq.w	26762 <lll_conn_isr_rx+0x2aa>
				LL_ASSERT(0);
   26638:	4a56      	ldr	r2, [pc, #344]	; (26794 <lll_conn_isr_rx+0x2dc>)
   2663a:	4957      	ldr	r1, [pc, #348]	; (26798 <lll_conn_isr_rx+0x2e0>)
   2663c:	4857      	ldr	r0, [pc, #348]	; (2679c <lll_conn_isr_rx+0x2e4>)
   2663e:	f44f 736a 	mov.w	r3, #936	; 0x3a8
   26642:	f005 fcc0 	bl	2bfc6 <assert_print>
   26646:	4040      	eors	r0, r0
   26648:	f380 8811 	msr	BASEPRI, r0
   2664c:	f04f 0003 	mov.w	r0, #3
   26650:	df02      	svc	2
	tx_release = NULL;
   26652:	2500      	movs	r5, #0
   26654:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   26658:	7f32      	ldrb	r2, [r6, #28]
   2665a:	e021      	b.n	266a0 <lll_conn_isr_rx+0x1e8>
		crc_expire--;
   2665c:	3f01      	subs	r7, #1
   2665e:	b2ff      	uxtb	r7, r7
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   26660:	a901      	add	r1, sp, #4
   26662:	4620      	mov	r0, r4
		crc_expire--;
   26664:	701f      	strb	r7, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   26666:	f7ff feb7 	bl	263d8 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   2666a:	2f00      	cmp	r7, #0
   2666c:	f040 80eb 	bne.w	26846 <lll_conn_isr_rx+0x38e>
		radio_isr_set(isr_done, param);
   26670:	4844      	ldr	r0, [pc, #272]	; (26784 <lll_conn_isr_rx+0x2cc>)
   26672:	4621      	mov	r1, r4
   26674:	f000 fad4 	bl	26c20 <radio_isr_set>
			radio_switch_complete_and_disable();
   26678:	f000 fcc6 	bl	27008 <radio_switch_complete_and_disable>
   2667c:	e75c      	b.n	26538 <lll_conn_isr_rx+0x80>
	LL_ASSERT(node_rx);
   2667e:	4a45      	ldr	r2, [pc, #276]	; (26794 <lll_conn_isr_rx+0x2dc>)
   26680:	4947      	ldr	r1, [pc, #284]	; (267a0 <lll_conn_isr_rx+0x2e8>)
   26682:	4846      	ldr	r0, [pc, #280]	; (2679c <lll_conn_isr_rx+0x2e4>)
   26684:	23f2      	movs	r3, #242	; 0xf2
   26686:	f005 fc9e 	bl	2bfc6 <assert_print>
   2668a:	4040      	eors	r0, r0
   2668c:	f380 8811 	msr	BASEPRI, r0
   26690:	f04f 0003 	mov.w	r0, #3
   26694:	df02      	svc	2
	if (crc_ok) {
   26696:	2d00      	cmp	r5, #0
   26698:	f43f af34 	beq.w	26504 <lll_conn_isr_rx+0x4c>
   2669c:	e788      	b.n	265b0 <lll_conn_isr_rx+0xf8>
	tx_release = NULL;
   2669e:	2500      	movs	r5, #0
	if ((pdu_data_rx->sn == lll->nesn) &&
   266a0:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   266a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
   266a8:	429a      	cmp	r2, r3
   266aa:	d046      	beq.n	2673a <lll_conn_isr_rx+0x282>
	is_rx_enqueue = 0U;
   266ac:	2700      	movs	r7, #0
		crc_expire = 0U;
   266ae:	4a37      	ldr	r2, [pc, #220]	; (2678c <lll_conn_isr_rx+0x2d4>)
		crc_valid = 1U;
   266b0:	4b3c      	ldr	r3, [pc, #240]	; (267a4 <lll_conn_isr_rx+0x2ec>)
		crc_expire = 0U;
   266b2:	2100      	movs	r1, #0
   266b4:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   266b6:	4620      	mov	r0, r4
		crc_valid = 1U;
   266b8:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   266ba:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   266bc:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   266be:	f7ff fe8b 	bl	263d8 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   266c2:	7f33      	ldrb	r3, [r6, #28]
   266c4:	06d9      	lsls	r1, r3, #27
   266c6:	f53f af28 	bmi.w	2651a <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   266ca:	9b01      	ldr	r3, [sp, #4]
   266cc:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   266ce:	06d2      	lsls	r2, r2, #27
   266d0:	f53f af23 	bmi.w	2651a <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   266d4:	785b      	ldrb	r3, [r3, #1]
   266d6:	2b00      	cmp	r3, #0
   266d8:	d0ca      	beq.n	26670 <lll_conn_isr_rx+0x1b8>
   266da:	e71e      	b.n	2651a <lll_conn_isr_rx+0x62>
	LL_ASSERT(!radio_is_ready());
   266dc:	4a2d      	ldr	r2, [pc, #180]	; (26794 <lll_conn_isr_rx+0x2dc>)
   266de:	4932      	ldr	r1, [pc, #200]	; (267a8 <lll_conn_isr_rx+0x2f0>)
   266e0:	482e      	ldr	r0, [pc, #184]	; (2679c <lll_conn_isr_rx+0x2e4>)
   266e2:	f240 1369 	movw	r3, #361	; 0x169
   266e6:	f005 fc6e 	bl	2bfc6 <assert_print>
   266ea:	4040      	eors	r0, r0
   266ec:	f380 8811 	msr	BASEPRI, r0
   266f0:	f04f 0003 	mov.w	r0, #3
   266f4:	df02      	svc	2
   266f6:	e736      	b.n	26566 <lll_conn_isr_rx+0xae>
		LL_ASSERT(lll->handle != 0xFFFF);
   266f8:	4a26      	ldr	r2, [pc, #152]	; (26794 <lll_conn_isr_rx+0x2dc>)
   266fa:	492c      	ldr	r1, [pc, #176]	; (267ac <lll_conn_isr_rx+0x2f4>)
   266fc:	4827      	ldr	r0, [pc, #156]	; (2679c <lll_conn_isr_rx+0x2e4>)
   266fe:	f44f 73bc 	mov.w	r3, #376	; 0x178
   26702:	f005 fc60 	bl	2bfc6 <assert_print>
   26706:	4040      	eors	r0, r0
   26708:	f380 8811 	msr	BASEPRI, r0
   2670c:	f04f 0003 	mov.w	r0, #3
   26710:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   26712:	89a0      	ldrh	r0, [r4, #12]
   26714:	e731      	b.n	2657a <lll_conn_isr_rx+0xc2>
			lll->empty = 0;
   26716:	f36f 0382 	bfc	r3, #2, #1
   2671a:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			pdu_data_tx = (void *)radio_pkt_empty_get();
   2671e:	f000 fbc3 	bl	26ea8 <radio_pkt_empty_get>
	tx_release = NULL;
   26722:	2500      	movs	r5, #0
   26724:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   26728:	7f32      	ldrb	r2, [r6, #28]
   2672a:	e7b9      	b.n	266a0 <lll_conn_isr_rx+0x1e8>
				lll->packet_tx_head_offset = offset;
   2672c:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
   26730:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   26734:	7f32      	ldrb	r2, [r6, #28]
	tx_release = NULL;
   26736:	2500      	movs	r5, #0
   26738:	e7b2      	b.n	266a0 <lll_conn_isr_rx+0x1e8>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   2673a:	2003      	movs	r0, #3
   2673c:	f7f7 faa4 	bl	1dc88 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   26740:	2800      	cmp	r0, #0
   26742:	d0b3      	beq.n	266ac <lll_conn_isr_rx+0x1f4>
		lll->nesn++;
   26744:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   26748:	f083 0302 	eor.w	r3, r3, #2
   2674c:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (pdu_data_rx->len != 0) {
   26750:	7f73      	ldrb	r3, [r6, #29]
   26752:	2b00      	cmp	r3, #0
   26754:	d0aa      	beq.n	266ac <lll_conn_isr_rx+0x1f4>
			if (lll->enc_rx) {
   26756:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   2675a:	0718      	lsls	r0, r3, #28
   2675c:	d428      	bmi.n	267b0 <lll_conn_isr_rx+0x2f8>
			*is_rx_enqueue = 1U;
   2675e:	2701      	movs	r7, #1
   26760:	e7a5      	b.n	266ae <lll_conn_isr_rx+0x1f6>
				lll->packet_tx_head_len = 0;
   26762:	2200      	movs	r2, #0
   26764:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				memq_dequeue(lll->memq_tx.tail,
   26768:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   2676a:	f104 0148 	add.w	r1, r4, #72	; 0x48
   2676e:	f7f3 fd69 	bl	1a244 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   26772:	9b01      	ldr	r3, [sp, #4]
   26774:	681a      	ldr	r2, [r3, #0]
   26776:	602a      	str	r2, [r5, #0]
				tx->next = link;
   26778:	601d      	str	r5, [r3, #0]
				*tx_release = tx;
   2677a:	9d01      	ldr	r5, [sp, #4]
				FORCE_MD_CNT_SET();
   2677c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   26780:	7f32      	ldrb	r2, [r6, #28]
   26782:	e78d      	b.n	266a0 <lll_conn_isr_rx+0x1e8>
   26784:	000260e1 	.word	0x000260e1
   26788:	200032b2 	.word	0x200032b2
   2678c:	20003429 	.word	0x20003429
   26790:	000262c9 	.word	0x000262c9
   26794:	00033d58 	.word	0x00033d58
   26798:	0003305c 	.word	0x0003305c
   2679c:	00032fc4 	.word	0x00032fc4
   267a0:	00033d04 	.word	0x00033d04
   267a4:	2000342a 	.word	0x2000342a
   267a8:	00033d0c 	.word	0x00033d0c
   267ac:	00033dac 	.word	0x00033dac
				done = radio_ccm_is_done();
   267b0:	f000 fdf0 	bl	27394 <radio_ccm_is_done>
				LL_ASSERT(done);
   267b4:	b3c8      	cbz	r0, 2682a <lll_conn_isr_rx+0x372>
				bool mic_failure = !radio_ccm_mic_is_valid();
   267b6:	f000 fe0f 	bl	273d8 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   267ba:	bb30      	cbnz	r0, 2680a <lll_conn_isr_rx+0x352>
				    lll->ccm_rx.counter == 0 &&
   267bc:	f8d4 206f 	ldr.w	r2, [r4, #111]	; 0x6f
   267c0:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
				if (mic_failure &&
   267c4:	4313      	orrs	r3, r2
   267c6:	d104      	bne.n	267d2 <lll_conn_isr_rx+0x31a>
				    (pdu_data_rx->ll_id ==
   267c8:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   267ca:	f003 0303 	and.w	r3, r3, #3
   267ce:	2b03      	cmp	r3, #3
   267d0:	d004      	beq.n	267dc <lll_conn_isr_rx+0x324>
					mic_state = LLL_CONN_MIC_FAIL;
   267d2:	4b1e      	ldr	r3, [pc, #120]	; (2684c <lll_conn_isr_rx+0x394>)
   267d4:	2202      	movs	r2, #2
   267d6:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   267d8:	2700      	movs	r7, #0
   267da:	e6c4      	b.n	26566 <lll_conn_isr_rx+0xae>
						radio_pkt_scratch_get();
   267dc:	f000 fb68 	bl	26eb0 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   267e0:	7843      	ldrb	r3, [r0, #1]
   267e2:	2b27      	cmp	r3, #39	; 0x27
						radio_pkt_scratch_get();
   267e4:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   267e6:	d8f4      	bhi.n	267d2 <lll_conn_isr_rx+0x31a>
						memcpy(pdu_data_rx,
   267e8:	3303      	adds	r3, #3
   267ea:	b2da      	uxtb	r2, r3
   267ec:	f106 001c 	add.w	r0, r6, #28
   267f0:	f007 fc1b 	bl	2e02a <memcpy>
						lll->ccm_rx.counter--;
   267f4:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   267f8:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   267fc:	3b01      	subs	r3, #1
   267fe:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   26802:	f142 33ff 	adc.w	r3, r2, #4294967295	; 0xffffffff
   26806:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
				lll->ccm_rx.counter++;
   2680a:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
				mic_state = LLL_CONN_MIC_PASS;
   2680e:	4a0f      	ldr	r2, [pc, #60]	; (2684c <lll_conn_isr_rx+0x394>)
				lll->ccm_rx.counter++;
   26810:	3301      	adds	r3, #1
   26812:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   26816:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
						lll->ccm_rx.counter--;
   2681a:	f104 016f 	add.w	r1, r4, #111	; 0x6f
				lll->ccm_rx.counter++;
   2681e:	f143 0300 	adc.w	r3, r3, #0
				mic_state = LLL_CONN_MIC_PASS;
   26822:	2701      	movs	r7, #1
				lll->ccm_rx.counter++;
   26824:	604b      	str	r3, [r1, #4]
				mic_state = LLL_CONN_MIC_PASS;
   26826:	7017      	strb	r7, [r2, #0]
		if (err) {
   26828:	e741      	b.n	266ae <lll_conn_isr_rx+0x1f6>
				LL_ASSERT(done);
   2682a:	4a09      	ldr	r2, [pc, #36]	; (26850 <lll_conn_isr_rx+0x398>)
   2682c:	4909      	ldr	r1, [pc, #36]	; (26854 <lll_conn_isr_rx+0x39c>)
   2682e:	480a      	ldr	r0, [pc, #40]	; (26858 <lll_conn_isr_rx+0x3a0>)
   26830:	f240 33c3 	movw	r3, #963	; 0x3c3
   26834:	f005 fbc7 	bl	2bfc6 <assert_print>
   26838:	4040      	eors	r0, r0
   2683a:	f380 8811 	msr	BASEPRI, r0
   2683e:	f04f 0003 	mov.w	r0, #3
   26842:	df02      	svc	2
   26844:	e7b7      	b.n	267b6 <lll_conn_isr_rx+0x2fe>
	is_rx_enqueue = 0U;
   26846:	462f      	mov	r7, r5
   26848:	e667      	b.n	2651a <lll_conn_isr_rx+0x62>
   2684a:	bf00      	nop
   2684c:	2000342b 	.word	0x2000342b
   26850:	00033d58 	.word	0x00033d58
   26854:	00033da4 	.word	0x00033da4
   26858:	00032fc4 	.word	0x00032fc4

0002685c <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   2685c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   2685e:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   26860:	89a2      	ldrh	r2, [r4, #12]
   26862:	f64f 73ff 	movw	r3, #65535	; 0xffff
   26866:	429a      	cmp	r2, r3
{
   26868:	b083      	sub	sp, #12
	if (unlikely(lll->handle == 0xFFFF)) {
   2686a:	f000 80d0 	beq.w	26a0e <prepare_cb+0x1b2>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   2686e:	4605      	mov	r5, r0
   26870:	f7ff fca0 	bl	261b4 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   26874:	892b      	ldrh	r3, [r5, #8]
   26876:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   26878:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   2687a:	441a      	add	r2, r3
   2687c:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   2687e:	4410      	add	r0, r2
	lll->event_counter = (event_counter + 1);

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   26880:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   26882:	82a2      	strh	r2, [r4, #20]
	event_counter = lll->event_counter + lll->latency_event;
   26884:	b280      	uxth	r0, r0
	lll->event_counter = (event_counter + 1);
   26886:	1c41      	adds	r1, r0, #1
   26888:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   2688a:	065e      	lsls	r6, r3, #25
	lll->latency_prepare = 0;
   2688c:	f04f 0100 	mov.w	r1, #0
   26890:	8261      	strh	r1, [r4, #18]
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   26892:	f104 0118 	add.w	r1, r4, #24
	if (lll->data_chan_sel) {
   26896:	f100 808d 	bmi.w	269b4 <prepare_cb+0x158>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   2689a:	f003 003f 	and.w	r0, r3, #63	; 0x3f
   2689e:	460b      	mov	r3, r1
   268a0:	7fa1      	ldrb	r1, [r4, #30]
   268a2:	9000      	str	r0, [sp, #0]
   268a4:	f104 001f 	add.w	r0, r4, #31
   268a8:	f7fd f8a6 	bl	239f8 <lll_chan_sel_1>
   268ac:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->periph.window_widening_event_us +=
   268ae:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
   268b2:	4419      	add	r1, r3
		lll->periph.window_widening_event_us =
			lll->periph.window_widening_max_us;
	}

	/* current window size */
	lll->periph.window_size_event_us +=
   268b4:	e9d4 030d 	ldrd	r0, r3, [r4, #52]	; 0x34
   268b8:	4403      	add	r3, r0
	lll->periph.window_widening_prepare_us = 0;
   268ba:	2200      	movs	r2, #0
	lll->periph.window_size_event_us +=
   268bc:	63a3      	str	r3, [r4, #56]	; 0x38
	    lll->periph.window_widening_max_us) {
   268be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	lll->periph.window_widening_prepare_us = 0;
   268c0:	62e2      	str	r2, [r4, #44]	; 0x2c
		lll->periph.window_size_prepare_us;
	lll->periph.window_size_prepare_us = 0;
   268c2:	6362      	str	r2, [r4, #52]	; 0x34
	/* Ensure that empty flag reflects the state of the Tx queue, as a
	 * peripheral if this is the first connection event and as no prior PDU
	 * is transmitted, an incorrect acknowledgment by peer should not
	 * dequeue a PDU that has not been transmitted on air.
	 */
	if (!lll->empty) {
   268c4:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
		lll->periph.window_widening_event_us =
   268c8:	428b      	cmp	r3, r1
   268ca:	bf28      	it	cs
   268cc:	460b      	movcs	r3, r1
	if (!lll->empty) {
   268ce:	f012 0204 	ands.w	r2, r2, #4
		lll->periph.window_widening_event_us =
   268d2:	6323      	str	r3, [r4, #48]	; 0x30
	if (!lll->empty) {
   268d4:	f000 808d 	beq.w	269f2 <prepare_cb+0x196>
			lll->empty = 1U;
		}
	}

	/* Start setting up Radio h/w */
	radio_reset();
   268d8:	f000 f9e4 	bl	26ca4 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   268dc:	2000      	movs	r0, #0
   268de:	f000 fa15 	bl	26d0c <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   268e2:	4620      	mov	r0, r4
   268e4:	f7ff fcaa 	bl	2623c <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   268e8:	1d20      	adds	r0, r4, #4
   268ea:	f000 fa2d 	bl	26d48 <radio_aa_set>
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
   268ee:	8923      	ldrh	r3, [r4, #8]
   268f0:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   268f2:	f240 605b 	movw	r0, #1627	; 0x65b
   268f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   268fa:	f000 fabf 	bl	26e7c <radio_crc_configure>
				sys_get_le24(lll->crc_init));

	lll_chan_set(data_chan_use);
   268fe:	4630      	mov	r0, r6
   26900:	f7fe fc70 	bl	251e4 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   26904:	4621      	mov	r1, r4
   26906:	4846      	ldr	r0, [pc, #280]	; (26a20 <prepare_cb+0x1c4>)
   26908:	f000 f98a 	bl	26c20 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   2690c:	2096      	movs	r0, #150	; 0x96
   2690e:	f000 fbed 	bl	270ec <radio_tmr_tifs_set>
	 * - CTE RX is not enabled,
	 * - SOC does not require compensation for PHYEND event delay.
	 */
	if (!IS_ENABLED(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)) {
#if defined(CONFIG_BT_CTLR_PHY)
		radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   26912:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   26916:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   2691a:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   2691e:	2100      	movs	r1, #0
   26920:	f002 0207 	and.w	r2, r2, #7
   26924:	f000 0007 	and.w	r0, r0, #7
   26928:	f000 fb0e 	bl	26f48 <radio_switch_complete_and_tx>
		radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */
	}

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   2692c:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   2692e:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   26930:	4638      	mov	r0, r7
   26932:	f7fe fc39 	bl	251a8 <lll_event_offset_get>
   26936:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   26938:	686a      	ldr	r2, [r5, #4]
   2693a:	f106 0109 	add.w	r1, r6, #9
   2693e:	2000      	movs	r0, #0
   26940:	f000 fbe0 	bl	27104 <radio_tmr_start>
   26944:	4605      	mov	r5, r0

	radio_tmr_aa_capture();
   26946:	f000 fc7f 	bl	27248 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   2694a:	2000      	movs	r0, #0
   2694c:	f000 fc96 	bl	2727c <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   26950:	6b23      	ldr	r3, [r4, #48]	; 0x30
   26952:	f103 0030 	add.w	r0, r3, #48	; 0x30
	hcto = remainder_us +
   26956:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   26958:	eb03 0340 	add.w	r3, r3, r0, lsl #1
		 lll->periph.window_widening_event_us) << 1) +
	       lll->periph.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   2695c:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   26960:	2101      	movs	r1, #1
   26962:	f000 0007 	and.w	r0, r0, #7
	hcto = remainder_us +
   26966:	441d      	add	r5, r3
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   26968:	f000 fa3c 	bl	26de4 <radio_rx_ready_delay_get>
   2696c:	4405      	add	r5, r0
	hcto += addr_us_get(lll->phy_rx);
   2696e:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   26972:	f000 0007 	and.w	r0, r0, #7
   26976:	2802      	cmp	r0, #2
   26978:	d039      	beq.n	269ee <prepare_cb+0x192>
		return 40;
   2697a:	2804      	cmp	r0, #4
   2697c:	bf0c      	ite	eq
   2697e:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   26982:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   26984:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   26986:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   26988:	f000 fa2e 	bl	26de8 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   2698c:	4428      	add	r0, r5
   2698e:	f000 fc4d 	bl	2722c <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   26992:	89a1      	ldrh	r1, [r4, #12]
   26994:	3103      	adds	r1, #3
   26996:	4632      	mov	r2, r6
   26998:	b2c9      	uxtb	r1, r1
   2699a:	4638      	mov	r0, r7
   2699c:	f7fe fc12 	bl	251c4 <lll_preempt_calc>
   269a0:	b180      	cbz	r0, 269c4 <prepare_cb+0x168>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   269a2:	4820      	ldr	r0, [pc, #128]	; (26a24 <prepare_cb+0x1c8>)
   269a4:	4621      	mov	r1, r4
   269a6:	f000 f93b 	bl	26c20 <radio_isr_set>
		radio_disable();
   269aa:	f000 fa29 	bl	26e00 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   269ae:	2000      	movs	r0, #0
   269b0:	b003      	add	sp, #12
   269b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   269b4:	460a      	mov	r2, r1
   269b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   269ba:	8be1      	ldrh	r1, [r4, #30]
   269bc:	f7fd f860 	bl	23a80 <lll_chan_sel_2>
   269c0:	4606      	mov	r6, r0
   269c2:	e774      	b.n	268ae <prepare_cb+0x52>
		ret = lll_prepare_done(lll);
   269c4:	4620      	mov	r0, r4
   269c6:	f7fe fb97 	bl	250f8 <lll_prepare_done>
		LL_ASSERT(!ret);
   269ca:	2800      	cmp	r0, #0
   269cc:	d0ef      	beq.n	269ae <prepare_cb+0x152>
   269ce:	4a16      	ldr	r2, [pc, #88]	; (26a28 <prepare_cb+0x1cc>)
   269d0:	4916      	ldr	r1, [pc, #88]	; (26a2c <prepare_cb+0x1d0>)
   269d2:	4817      	ldr	r0, [pc, #92]	; (26a30 <prepare_cb+0x1d4>)
   269d4:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   269d8:	f005 faf5 	bl	2bfc6 <assert_print>
   269dc:	4040      	eors	r0, r0
   269de:	f380 8811 	msr	BASEPRI, r0
   269e2:	f04f 0003 	mov.w	r0, #3
   269e6:	df02      	svc	2
}
   269e8:	2000      	movs	r0, #0
   269ea:	b003      	add	sp, #12
   269ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (phy) {
   269ee:	2318      	movs	r3, #24
   269f0:	e7c8      	b.n	26984 <prepare_cb+0x128>
		link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL);
   269f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   269f6:	f7f3 fc1d 	bl	1a234 <memq_peek>
		if (!link) {
   269fa:	2800      	cmp	r0, #0
   269fc:	f47f af6c 	bne.w	268d8 <prepare_cb+0x7c>
			lll->empty = 1U;
   26a00:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   26a04:	f043 0304 	orr.w	r3, r3, #4
   26a08:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
   26a0c:	e764      	b.n	268d8 <prepare_cb+0x7c>
		radio_isr_set(lll_isr_early_abort, lll);
   26a0e:	4809      	ldr	r0, [pc, #36]	; (26a34 <prepare_cb+0x1d8>)
   26a10:	4621      	mov	r1, r4
   26a12:	f000 f905 	bl	26c20 <radio_isr_set>
		radio_disable();
   26a16:	f000 f9f3 	bl	26e00 <radio_disable>
}
   26a1a:	2000      	movs	r0, #0
   26a1c:	b003      	add	sp, #12
   26a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26a20:	000264b9 	.word	0x000264b9
   26a24:	00025319 	.word	0x00025319
   26a28:	00033dd8 	.word	0x00033dd8
   26a2c:	000333fc 	.word	0x000333fc
   26a30:	00032fc4 	.word	0x00032fc4
   26a34:	0002533d 	.word	0x0002533d

00026a38 <lll_periph_prepare>:
{
   26a38:	b510      	push	{r4, lr}
   26a3a:	b082      	sub	sp, #8
   26a3c:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   26a3e:	f7fe fdcd 	bl	255dc <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   26a42:	2800      	cmp	r0, #0
   26a44:	db25      	blt.n	26a92 <lll_periph_prepare+0x5a>
	lll = p->param;
   26a46:	68e1      	ldr	r1, [r4, #12]
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   26a48:	8920      	ldrh	r0, [r4, #8]
   26a4a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	lll->periph.window_widening_prepare_us +=
   26a4c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   26a4e:	fb00 3303 	mla	r3, r0, r3, r3
	    lll->periph.window_widening_max_us) {
   26a52:	6a88      	ldr	r0, [r1, #40]	; 0x28
	lll->periph.window_widening_prepare_us +=
   26a54:	4413      	add	r3, r2
		lll->periph.window_widening_prepare_us =
   26a56:	4283      	cmp	r3, r0
   26a58:	bf28      	it	cs
   26a5a:	4603      	movcs	r3, r0
   26a5c:	62cb      	str	r3, [r1, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   26a5e:	4a13      	ldr	r2, [pc, #76]	; (26aac <lll_periph_prepare+0x74>)
   26a60:	4913      	ldr	r1, [pc, #76]	; (26ab0 <lll_periph_prepare+0x78>)
   26a62:	4814      	ldr	r0, [pc, #80]	; (26ab4 <lll_periph_prepare+0x7c>)
   26a64:	9400      	str	r4, [sp, #0]
   26a66:	2300      	movs	r3, #0
   26a68:	f7f7 fc26 	bl	1e2b8 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   26a6c:	b108      	cbz	r0, 26a72 <lll_periph_prepare+0x3a>
   26a6e:	3077      	adds	r0, #119	; 0x77
   26a70:	d101      	bne.n	26a76 <lll_periph_prepare+0x3e>
}
   26a72:	b002      	add	sp, #8
   26a74:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   26a76:	4a10      	ldr	r2, [pc, #64]	; (26ab8 <lll_periph_prepare+0x80>)
   26a78:	4910      	ldr	r1, [pc, #64]	; (26abc <lll_periph_prepare+0x84>)
   26a7a:	4811      	ldr	r0, [pc, #68]	; (26ac0 <lll_periph_prepare+0x88>)
   26a7c:	235e      	movs	r3, #94	; 0x5e
   26a7e:	f005 faa2 	bl	2bfc6 <assert_print>
   26a82:	4040      	eors	r0, r0
   26a84:	f380 8811 	msr	BASEPRI, r0
   26a88:	f04f 0003 	mov.w	r0, #3
   26a8c:	df02      	svc	2
}
   26a8e:	b002      	add	sp, #8
   26a90:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   26a92:	4a09      	ldr	r2, [pc, #36]	; (26ab8 <lll_periph_prepare+0x80>)
   26a94:	490b      	ldr	r1, [pc, #44]	; (26ac4 <lll_periph_prepare+0x8c>)
   26a96:	480a      	ldr	r0, [pc, #40]	; (26ac0 <lll_periph_prepare+0x88>)
   26a98:	234d      	movs	r3, #77	; 0x4d
   26a9a:	f005 fa94 	bl	2bfc6 <assert_print>
   26a9e:	4040      	eors	r0, r0
   26aa0:	f380 8811 	msr	BASEPRI, r0
   26aa4:	f04f 0003 	mov.w	r0, #3
   26aa8:	df02      	svc	2
   26aaa:	e7cc      	b.n	26a46 <lll_periph_prepare+0xe>
   26aac:	0002685d 	.word	0x0002685d
   26ab0:	000261dd 	.word	0x000261dd
   26ab4:	000251a1 	.word	0x000251a1
   26ab8:	00033dd8 	.word	0x00033dd8
   26abc:	00033d34 	.word	0x00033d34
   26ac0:	00032fc4 	.word	0x00032fc4
   26ac4:	00033c48 	.word	0x00033c48

00026ac8 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   26ac8:	4b05      	ldr	r3, [pc, #20]	; (26ae0 <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   26aca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   26ace:	2100      	movs	r1, #0
   26ad0:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   26ad4:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   26ad8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   26adc:	4770      	bx	lr
   26ade:	bf00      	nop
   26ae0:	4000b000 	.word	0x4000b000

00026ae4 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   26ae4:	4b05      	ldr	r3, [pc, #20]	; (26afc <cntr_start+0x18>)
   26ae6:	7818      	ldrb	r0, [r3, #0]
   26ae8:	1c42      	adds	r2, r0, #1
   26aea:	701a      	strb	r2, [r3, #0]
   26aec:	b918      	cbnz	r0, 26af6 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   26aee:	4b04      	ldr	r3, [pc, #16]	; (26b00 <cntr_start+0x1c>)
   26af0:	2201      	movs	r2, #1
   26af2:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   26af4:	4770      	bx	lr
		return 1;
   26af6:	2001      	movs	r0, #1
}
   26af8:	4770      	bx	lr
   26afa:	bf00      	nop
   26afc:	2000342c 	.word	0x2000342c
   26b00:	4000b000 	.word	0x4000b000

00026b04 <cntr_stop>:

uint32_t cntr_stop(void)
{
   26b04:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   26b06:	4c0d      	ldr	r4, [pc, #52]	; (26b3c <cntr_stop+0x38>)
   26b08:	7820      	ldrb	r0, [r4, #0]
   26b0a:	b148      	cbz	r0, 26b20 <cntr_stop+0x1c>

	if (--_refcount) {
   26b0c:	3801      	subs	r0, #1
   26b0e:	b2c0      	uxtb	r0, r0
   26b10:	7020      	strb	r0, [r4, #0]
   26b12:	b918      	cbnz	r0, 26b1c <cntr_stop+0x18>
   26b14:	4b0a      	ldr	r3, [pc, #40]	; (26b40 <cntr_stop+0x3c>)
   26b16:	2201      	movs	r2, #1
   26b18:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   26b1a:	bd10      	pop	{r4, pc}
		return 1;
   26b1c:	2001      	movs	r0, #1
}
   26b1e:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   26b20:	4a08      	ldr	r2, [pc, #32]	; (26b44 <cntr_stop+0x40>)
   26b22:	4909      	ldr	r1, [pc, #36]	; (26b48 <cntr_stop+0x44>)
   26b24:	4809      	ldr	r0, [pc, #36]	; (26b4c <cntr_stop+0x48>)
   26b26:	232d      	movs	r3, #45	; 0x2d
   26b28:	f005 fa4d 	bl	2bfc6 <assert_print>
   26b2c:	4040      	eors	r0, r0
   26b2e:	f380 8811 	msr	BASEPRI, r0
   26b32:	f04f 0003 	mov.w	r0, #3
   26b36:	df02      	svc	2
	if (--_refcount) {
   26b38:	7820      	ldrb	r0, [r4, #0]
   26b3a:	e7e7      	b.n	26b0c <cntr_stop+0x8>
   26b3c:	2000342c 	.word	0x2000342c
   26b40:	4000b000 	.word	0x4000b000
   26b44:	00033e40 	.word	0x00033e40
   26b48:	00033e8c 	.word	0x00033e8c
   26b4c:	00032fc4 	.word	0x00032fc4

00026b50 <cntr_cnt_get>:
     return p_reg->COUNTER;
   26b50:	4b01      	ldr	r3, [pc, #4]	; (26b58 <cntr_cnt_get+0x8>)
   26b52:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   26b56:	4770      	bx	lr
   26b58:	4000b000 	.word	0x4000b000

00026b5c <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   26b5c:	4b02      	ldr	r3, [pc, #8]	; (26b68 <cntr_cmp_set+0xc>)
   26b5e:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   26b62:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   26b66:	4770      	bx	lr
   26b68:	4000b000 	.word	0x4000b000

00026b6c <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26b6c:	4b12      	ldr	r3, [pc, #72]	; (26bb8 <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   26b6e:	b430      	push	{r4, r5}
   26b70:	2101      	movs	r1, #1
   26b72:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   26b74:	2000      	movs	r0, #0
   26b76:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   26b78:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   26b7c:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   26b80:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   26b84:	6019      	str	r1, [r3, #0]
}
   26b86:	e005      	b.n	26b94 <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   26b88:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   26b8c:	b932      	cbnz	r2, 26b9c <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   26b8e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   26b92:	b11a      	cbz	r2, 26b9c <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   26b94:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   26b98:	2a00      	cmp	r2, #0
   26b9a:	d0f5      	beq.n	26b88 <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26b9c:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   26b9e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   26ba2:	2a00      	cmp	r2, #0
   26ba4:	d1e7      	bne.n	26b76 <do_ecb+0xa>
   26ba6:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   26baa:	2d00      	cmp	r5, #0
   26bac:	d0e3      	beq.n	26b76 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
}
   26bae:	bc30      	pop	{r4, r5}
	NRF_ECB->ECBDATAPTR = 0;
   26bb0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   26bb4:	4770      	bx	lr
   26bb6:	bf00      	nop
   26bb8:	4000e000 	.word	0x4000e000

00026bbc <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   26bbc:	b570      	push	{r4, r5, r6, lr}
   26bbe:	b08c      	sub	sp, #48	; 0x30
   26bc0:	460e      	mov	r6, r1
   26bc2:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   26bc4:	4601      	mov	r1, r0
   26bc6:	2210      	movs	r2, #16
   26bc8:	4668      	mov	r0, sp
{
   26bca:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   26bcc:	f7f3 fb00 	bl	1a1d0 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   26bd0:	2210      	movs	r2, #16
   26bd2:	eb0d 0002 	add.w	r0, sp, r2
   26bd6:	4631      	mov	r1, r6
   26bd8:	f7f3 fafa 	bl	1a1d0 <mem_rcopy>

	do_ecb(&ecb);
   26bdc:	4668      	mov	r0, sp
   26bde:	f7ff ffc5 	bl	26b6c <do_ecb>

	if (cipher_text_le) {
   26be2:	b125      	cbz	r5, 26bee <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   26be4:	2210      	movs	r2, #16
   26be6:	a908      	add	r1, sp, #32
   26be8:	4628      	mov	r0, r5
   26bea:	f7f3 faf1 	bl	1a1d0 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   26bee:	b124      	cbz	r4, 26bfa <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   26bf0:	2210      	movs	r2, #16
   26bf2:	a908      	add	r1, sp, #32
   26bf4:	4620      	mov	r0, r4
   26bf6:	f007 fa18 	bl	2e02a <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   26bfa:	b00c      	add	sp, #48	; 0x30
   26bfc:	bd70      	pop	{r4, r5, r6, pc}
   26bfe:	bf00      	nop

00026c00 <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   26c00:	4b04      	ldr	r3, [pc, #16]	; (26c14 <isr_radio+0x14>)
   26c02:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   26c06:	b123      	cbz	r3, 26c12 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   26c08:	4a03      	ldr	r2, [pc, #12]	; (26c18 <isr_radio+0x18>)
   26c0a:	4b04      	ldr	r3, [pc, #16]	; (26c1c <isr_radio+0x1c>)
   26c0c:	6810      	ldr	r0, [r2, #0]
   26c0e:	681b      	ldr	r3, [r3, #0]
   26c10:	4718      	bx	r3
}
   26c12:	4770      	bx	lr
   26c14:	40001000 	.word	0x40001000
   26c18:	20002ffc 	.word	0x20002ffc
   26c1c:	20002ff8 	.word	0x20002ff8

00026c20 <radio_isr_set>:
{
   26c20:	b538      	push	{r3, r4, r5, lr}
   26c22:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   26c24:	2001      	movs	r0, #1
{
   26c26:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   26c28:	f7e9 fe14 	bl	10854 <arch_irq_disable>
	isr_cb = cb;
   26c2c:	4b08      	ldr	r3, [pc, #32]	; (26c50 <radio_isr_set+0x30>)
	isr_cb_param = param;
   26c2e:	4a09      	ldr	r2, [pc, #36]	; (26c54 <radio_isr_set+0x34>)
	isr_cb = cb;
   26c30:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   26c32:	4909      	ldr	r1, [pc, #36]	; (26c58 <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   26c34:	4b09      	ldr	r3, [pc, #36]	; (26c5c <radio_isr_set+0x3c>)
	isr_cb_param = param;
   26c36:	6015      	str	r5, [r2, #0]
   26c38:	2010      	movs	r0, #16
   26c3a:	2202      	movs	r2, #2
   26c3c:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   26c40:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   26c44:	2001      	movs	r0, #1
}
   26c46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   26c4a:	f7e9 bdf3 	b.w	10834 <arch_irq_enable>
   26c4e:	bf00      	nop
   26c50:	20002ff8 	.word	0x20002ff8
   26c54:	20002ffc 	.word	0x20002ffc
   26c58:	40001000 	.word	0x40001000
   26c5c:	e000e100 	.word	0xe000e100

00026c60 <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   26c60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   26c64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   26c68:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   26c6a:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   26c6e:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   26c72:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   26c76:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   26c7a:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   26c7e:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   26c82:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   26c86:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   26c8a:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   26c8e:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   26c92:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   26c96:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   26c9a:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   26c9e:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   26ca2:	4770      	bx	lr

00026ca4 <radio_reset>:
{
   26ca4:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   26ca6:	2001      	movs	r0, #1
   26ca8:	f7e9 fdd4 	bl	10854 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
   26cac:	4a0d      	ldr	r2, [pc, #52]	; (26ce4 <radio_reset+0x40>)
   26cae:	2100      	movs	r1, #0
   26cb0:	2301      	movs	r3, #1
   26cb2:	f8c2 1ffc 	str.w	r1, [r2, #4092]	; 0xffc
   26cb6:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   26cba:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   26cbe:	490a      	ldr	r1, [pc, #40]	; (26ce8 <radio_reset+0x44>)
					 0xfffffffe) | 0x01000000;
   26cc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   26cc4:	f023 0301 	bic.w	r3, r3, #1
   26cc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   26ccc:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PHYEND_DELAY_COMPENSATION_PPI(0)) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   26cd0:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   26cd4:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   26cd8:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   26cdc:	f8c1 0804 	str.w	r0, [r1, #2052]	; 0x804
}
   26ce0:	bd10      	pop	{r4, pc}
   26ce2:	bf00      	nop
   26ce4:	40001000 	.word	0x40001000
   26ce8:	4001f000 	.word	0x4001f000

00026cec <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   26cec:	4b06      	ldr	r3, [pc, #24]	; (26d08 <radio_phy_set+0x1c>)
#endif /* CONFIG_BT_CTLR_PHY_CODED */

		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   26cee:	2802      	cmp	r0, #2
   26cf0:	bf14      	ite	ne
   26cf2:	2203      	movne	r2, #3
   26cf4:	2204      	moveq	r2, #4
   26cf6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   26cfa:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   26cfe:	f042 0201 	orr.w	r2, r2, #1
   26d02:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   26d06:	4770      	bx	lr
   26d08:	40001000 	.word	0x40001000

00026d0c <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   26d0c:	4b01      	ldr	r3, [pc, #4]	; (26d14 <radio_tx_power_set+0x8>)
   26d0e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   26d12:	4770      	bx	lr
   26d14:	40001000 	.word	0x40001000

00026d18 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   26d18:	4b01      	ldr	r3, [pc, #4]	; (26d20 <radio_freq_chan_set+0x8>)
   26d1a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   26d1e:	4770      	bx	lr
   26d20:	40001000 	.word	0x40001000

00026d24 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   26d24:	4b07      	ldr	r3, [pc, #28]	; (26d44 <radio_whiten_iv_set+0x20>)
   26d26:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   26d2a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   26d2e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   26d32:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   26d36:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   26d3a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   26d3e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   26d42:	4770      	bx	lr
   26d44:	40001000 	.word	0x40001000

00026d48 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   26d48:	4a0a      	ldr	r2, [pc, #40]	; (26d74 <radio_aa_set+0x2c>)
   26d4a:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   26d4c:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   26d4e:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   26d52:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   26d56:	78c3      	ldrb	r3, [r0, #3]
   26d58:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   26d5c:	7843      	ldrb	r3, [r0, #1]
   26d5e:	f890 c002 	ldrb.w	ip, [r0, #2]
   26d62:	7801      	ldrb	r1, [r0, #0]
   26d64:	041b      	lsls	r3, r3, #16
   26d66:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   26d6a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   26d6e:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   26d72:	4770      	bx	lr
   26d74:	40001000 	.word	0x40001000

00026d78 <radio_pkt_configure>:
	switch (phy) {
   26d78:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   26d7c:	2b02      	cmp	r3, #2
   26d7e:	bf14      	ite	ne
   26d80:	f04f 0c00 	movne.w	ip, #0
   26d84:	f04f 7c80 	moveq.w	ip, #16777216	; 0x1000000
	if (pdu_type == RADIO_PKT_CONF_PDU_TYPE_DC) {
   26d88:	07d3      	lsls	r3, r2, #31
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   26d8a:	bf48      	it	mi
   26d8c:	f44c 1c80 	orrmi.w	ip, ip, #1048576	; 0x100000
		((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) & RADIO_PCNF0_LFLEN_Msk) |
   26d90:	f000 000f 	and.w	r0, r0, #15
	NRF_RADIO->PCNF0 =
   26d94:	4b0a      	ldr	r3, [pc, #40]	; (26dc0 <radio_pkt_configure+0x48>)
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   26d96:	4a0b      	ldr	r2, [pc, #44]	; (26dc4 <radio_pkt_configure+0x4c>)
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
   26d98:	ea40 000c 	orr.w	r0, r0, ip
   26d9c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
	NRF_RADIO->PCNF0 =
   26da0:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   26da4:	f8d3 0518 	ldr.w	r0, [r3, #1304]	; 0x518
   26da8:	4002      	ands	r2, r0
   26daa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |=
   26dae:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   26db2:	4311      	orrs	r1, r2
   26db4:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   26db8:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
}
   26dbc:	4770      	bx	lr
   26dbe:	bf00      	nop
   26dc0:	40001000 	.word	0x40001000
   26dc4:	fef80000 	.word	0xfef80000

00026dc8 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   26dc8:	4b01      	ldr	r3, [pc, #4]	; (26dd0 <radio_pkt_rx_set+0x8>)
   26dca:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   26dce:	4770      	bx	lr
   26dd0:	40001000 	.word	0x40001000

00026dd4 <radio_pkt_tx_set>:
   26dd4:	4b01      	ldr	r3, [pc, #4]	; (26ddc <radio_pkt_tx_set+0x8>)
   26dd6:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   26dda:	4770      	bx	lr
   26ddc:	40001000 	.word	0x40001000

00026de0 <radio_tx_chain_delay_get>:
}
   26de0:	2001      	movs	r0, #1
   26de2:	4770      	bx	lr

00026de4 <radio_rx_ready_delay_get>:
}
   26de4:	2029      	movs	r0, #41	; 0x29
   26de6:	4770      	bx	lr

00026de8 <radio_rx_chain_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_US;
   26de8:	2802      	cmp	r0, #2
}
   26dea:	bf14      	ite	ne
   26dec:	200a      	movne	r0, #10
   26dee:	2005      	moveq	r0, #5
   26df0:	4770      	bx	lr
   26df2:	bf00      	nop

00026df4 <radio_tx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26df4:	4b01      	ldr	r3, [pc, #4]	; (26dfc <radio_tx_enable+0x8>)
   26df6:	2201      	movs	r2, #1
   26df8:	601a      	str	r2, [r3, #0]
}
   26dfa:	4770      	bx	lr
   26dfc:	40001000 	.word	0x40001000

00026e00 <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   26e00:	4a07      	ldr	r2, [pc, #28]	; (26e20 <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   26e02:	4908      	ldr	r1, [pc, #32]	; (26e24 <radio_disable+0x24>)
{
   26e04:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   26e06:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   26e08:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   26e0c:	2000      	movs	r0, #0
   26e0e:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   26e12:	6053      	str	r3, [r2, #4]
}
   26e14:	bc10      	pop	{r4}
   26e16:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   26e18:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   26e1c:	610b      	str	r3, [r1, #16]
}
   26e1e:	4770      	bx	lr
   26e20:	4001f000 	.word	0x4001f000
   26e24:	40001000 	.word	0x40001000

00026e28 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   26e28:	4b04      	ldr	r3, [pc, #16]	; (26e3c <radio_status_reset+0x14>)
   26e2a:	2200      	movs	r2, #0
   26e2c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   26e30:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   26e34:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   26e38:	4770      	bx	lr
   26e3a:	bf00      	nop
   26e3c:	40001000 	.word	0x40001000

00026e40 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   26e40:	4b03      	ldr	r3, [pc, #12]	; (26e50 <radio_is_ready+0x10>)
   26e42:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   26e46:	3800      	subs	r0, #0
   26e48:	bf18      	it	ne
   26e4a:	2001      	movne	r0, #1
   26e4c:	4770      	bx	lr
   26e4e:	bf00      	nop
   26e50:	40001000 	.word	0x40001000

00026e54 <radio_is_done>:
	return (NRF_RADIO->NRF_RADIO_TXRX_END_EVENT != 0);
   26e54:	4b03      	ldr	r3, [pc, #12]	; (26e64 <radio_is_done+0x10>)
   26e56:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   26e5a:	3800      	subs	r0, #0
   26e5c:	bf18      	it	ne
   26e5e:	2001      	movne	r0, #1
   26e60:	4770      	bx	lr
   26e62:	bf00      	nop
   26e64:	40001000 	.word	0x40001000

00026e68 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   26e68:	4b03      	ldr	r3, [pc, #12]	; (26e78 <radio_is_idle+0x10>)
   26e6a:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   26e6e:	fab0 f080 	clz	r0, r0
   26e72:	0940      	lsrs	r0, r0, #5
   26e74:	4770      	bx	lr
   26e76:	bf00      	nop
   26e78:	40001000 	.word	0x40001000

00026e7c <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   26e7c:	4b04      	ldr	r3, [pc, #16]	; (26e90 <radio_crc_configure+0x14>)
   26e7e:	f240 1203 	movw	r2, #259	; 0x103
   26e82:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   26e86:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   26e8a:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   26e8e:	4770      	bx	lr
   26e90:	40001000 	.word	0x40001000

00026e94 <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   26e94:	4b03      	ldr	r3, [pc, #12]	; (26ea4 <radio_crc_is_valid+0x10>)
   26e96:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   26e9a:	3800      	subs	r0, #0
   26e9c:	bf18      	it	ne
   26e9e:	2001      	movne	r0, #1
   26ea0:	4770      	bx	lr
   26ea2:	bf00      	nop
   26ea4:	40001000 	.word	0x40001000

00026ea8 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   26ea8:	4800      	ldr	r0, [pc, #0]	; (26eac <radio_pkt_empty_get+0x4>)
   26eaa:	4770      	bx	lr
   26eac:	20002ef0 	.word	0x20002ef0

00026eb0 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   26eb0:	4800      	ldr	r0, [pc, #0]	; (26eb4 <radio_pkt_scratch_get+0x4>)
   26eb2:	4770      	bx	lr
   26eb4:	20002ef4 	.word	0x20002ef4

00026eb8 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   26eb8:	4b1d      	ldr	r3, [pc, #116]	; (26f30 <radio_switch_complete_and_rx+0x78>)
{
   26eba:	b4f0      	push	{r4, r5, r6, r7}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   26ebc:	2203      	movs	r2, #3
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   26ebe:	4d1d      	ldr	r5, [pc, #116]	; (26f34 <radio_switch_complete_and_rx+0x7c>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   26ec0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   26ec4:	782a      	ldrb	r2, [r5, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   26ec6:	4e1c      	ldr	r6, [pc, #112]	; (26f38 <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   26ec8:	4c1c      	ldr	r4, [pc, #112]	; (26f3c <radio_switch_complete_and_rx+0x84>)
   26eca:	4f1d      	ldr	r7, [pc, #116]	; (26f40 <radio_switch_complete_and_rx+0x88>)
   26ecc:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   26ed0:	f102 030c 	add.w	r3, r2, #12
   26ed4:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   26ed6:	00d0      	lsls	r0, r2, #3
   26ed8:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   26eda:	0091      	lsls	r1, r2, #2
   26edc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   26ee0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   26ee4:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   26ee8:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   26eec:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   26ef0:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   26ef4:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   26ef8:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   26efc:	4811      	ldr	r0, [pc, #68]	; (26f44 <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   26efe:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   26f02:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   26f06:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
   26f0a:	2b2d      	cmp	r3, #45	; 0x2d
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   26f0c:	bf8a      	itet	hi
   26f0e:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   26f12:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   26f14:	3b2d      	subhi	r3, #45	; 0x2d
   26f16:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   26f1a:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   26f1c:	4b06      	ldr	r3, [pc, #24]	; (26f38 <radio_switch_complete_and_rx+0x80>)
   26f1e:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   26f22:	f002 0201 	and.w	r2, r2, #1
   26f26:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   26f2a:	702a      	strb	r2, [r5, #0]
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_TX, SW_SWITCH_RX, SW_SWITCH_PHY_1M, SW_SWITCH_FLAGS_DONTCARE, phy_rx,
		  SW_SWITCH_FLAGS_DONTCARE, END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   26f2c:	bcf0      	pop	{r4, r5, r6, r7}
   26f2e:	4770      	bx	lr
   26f30:	40001000 	.word	0x40001000
   26f34:	2000342d 	.word	0x2000342d
   26f38:	4001f000 	.word	0x4001f000
   26f3c:	40009140 	.word	0x40009140
   26f40:	4000110c 	.word	0x4000110c
   26f44:	40001004 	.word	0x40001004

00026f48 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   26f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   26f4c:	4e28      	ldr	r6, [pc, #160]	; (26ff0 <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   26f4e:	4c29      	ldr	r4, [pc, #164]	; (26ff4 <radio_switch_complete_and_tx+0xac>)
   26f50:	4f29      	ldr	r7, [pc, #164]	; (26ff8 <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   26f52:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 26ffc <radio_switch_complete_and_tx+0xb4>
   26f56:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 27000 <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   26f5a:	2303      	movs	r3, #3
   26f5c:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   26f60:	7821      	ldrb	r1, [r4, #0]
   26f62:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   26f66:	f101 030c 	add.w	r3, r1, #12
   26f6a:	b2db      	uxtb	r3, r3
   26f6c:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   26f6e:	00cd      	lsls	r5, r1, #3
   26f70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   26f74:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   26f78:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   26f7c:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   26f80:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   26f84:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   26f88:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    p_reg->CH[(uint32_t) channel].EEP = eep;
   26f8c:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   26f90:	f649 6534 	movw	r5, #40500	; 0x9e34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   26f94:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   26f98:	f24a 13b8 	movw	r3, #41400	; 0xa1b8
   26f9c:	2a02      	cmp	r2, #2
   26f9e:	bf18      	it	ne
   26fa0:	461d      	movne	r5, r3
	}
}

static inline uint32_t hal_radio_rx_chain_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   26fa2:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   26fa6:	f241 3288 	movw	r2, #5000	; 0x1388
   26faa:	f242 43b8 	movw	r3, #9400	; 0x24b8
   26fae:	2802      	cmp	r0, #2
   26fb0:	bf08      	it	eq
   26fb2:	4613      	moveq	r3, r2
   26fb4:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
			delay = HAL_RADIO_NS2US_ROUND(
   26fb8:	4a12      	ldr	r2, [pc, #72]	; (27004 <radio_switch_complete_and_tx+0xbc>)
   26fba:	442b      	add	r3, r5
   26fbc:	fba2 2303 	umull	r2, r3, r2, r3
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   26fc0:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
   26fc4:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   26fc8:	bf85      	ittet	hi
   26fca:	0998      	lsrhi	r0, r3, #6
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   26fcc:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   26fd0:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   26fd2:	1a1b      	subhi	r3, r3, r0
   26fd4:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   26fd8:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   26fda:	4b08      	ldr	r3, [pc, #32]	; (26ffc <radio_switch_complete_and_tx+0xb4>)
   26fdc:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   26fe0:	f001 0101 	and.w	r1, r1, #1
   26fe4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   26fe8:	7021      	strb	r1, [r4, #0]

	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx,
		  END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   26fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26fee:	bf00      	nop
   26ff0:	40001000 	.word	0x40001000
   26ff4:	2000342d 	.word	0x2000342d
   26ff8:	40009140 	.word	0x40009140
   26ffc:	4001f000 	.word	0x4001f000
   27000:	4000110c 	.word	0x4000110c
   27004:	10624dd3 	.word	0x10624dd3

00027008 <radio_switch_complete_and_disable>:
void radio_switch_complete_and_disable(void)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);
#else /* CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE);
   27008:	4904      	ldr	r1, [pc, #16]	; (2701c <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   2700a:	4b05      	ldr	r3, [pc, #20]	; (27020 <radio_switch_complete_and_disable+0x18>)
   2700c:	2003      	movs	r0, #3
   2700e:	f44f 6210 	mov.w	r2, #2304	; 0x900
   27012:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   27016:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   2701a:	4770      	bx	lr
   2701c:	40001000 	.word	0x40001000
   27020:	4001f000 	.word	0x4001f000

00027024 <radio_rssi_status_reset>:
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   27024:	4b02      	ldr	r3, [pc, #8]	; (27030 <radio_rssi_status_reset+0xc>)
   27026:	2200      	movs	r2, #0
   27028:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   2702c:	4770      	bx	lr
   2702e:	bf00      	nop
   27030:	40001000 	.word	0x40001000

00027034 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   27034:	4b03      	ldr	r3, [pc, #12]	; (27044 <radio_rssi_is_ready+0x10>)
   27036:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   2703a:	3800      	subs	r0, #0
   2703c:	bf18      	it	ne
   2703e:	2001      	movne	r0, #1
   27040:	4770      	bx	lr
   27042:	bf00      	nop
   27044:	40001000 	.word	0x40001000

00027048 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   27048:	b410      	push	{r4}
   2704a:	f04f 0c00 	mov.w	ip, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   2704e:	ea4f 038c 	mov.w	r3, ip, lsl #2
   27052:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   27056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   2705a:	6814      	ldr	r4, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   2705c:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
	for (index = 0U; index < 8; index++) {
   27060:	f10c 0c01 	add.w	ip, ip, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   27064:	8894      	ldrh	r4, [r2, #4]
   27066:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   2706a:	f1bc 0f08 	cmp.w	ip, #8
		bdaddr += 6;
   2706e:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   27072:	d1ec      	bne.n	2704e <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   27074:	4b03      	ldr	r3, [pc, #12]	; (27084 <radio_filter_configure+0x3c>)
}
   27076:	bc10      	pop	{r4}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   27078:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   2707c:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   27080:	4770      	bx	lr
   27082:	bf00      	nop
   27084:	40001000 	.word	0x40001000

00027088 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   27088:	4a03      	ldr	r2, [pc, #12]	; (27098 <radio_filter_disable+0x10>)
   2708a:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   2708e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   27092:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   27096:	4770      	bx	lr
   27098:	40001000 	.word	0x40001000

0002709c <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   2709c:	4b02      	ldr	r3, [pc, #8]	; (270a8 <radio_filter_status_reset+0xc>)
   2709e:	2200      	movs	r2, #0
   270a0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   270a4:	4770      	bx	lr
   270a6:	bf00      	nop
   270a8:	40001000 	.word	0x40001000

000270ac <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   270ac:	4b03      	ldr	r3, [pc, #12]	; (270bc <radio_filter_has_match+0x10>)
   270ae:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   270b2:	3800      	subs	r0, #0
   270b4:	bf18      	it	ne
   270b6:	2001      	movne	r0, #1
   270b8:	4770      	bx	lr
   270ba:	bf00      	nop
   270bc:	40001000 	.word	0x40001000

000270c0 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   270c0:	4b01      	ldr	r3, [pc, #4]	; (270c8 <radio_filter_match_get+0x8>)
   270c2:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   270c6:	4770      	bx	lr
   270c8:	40001000 	.word	0x40001000

000270cc <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   270cc:	4904      	ldr	r1, [pc, #16]	; (270e0 <radio_tmr_status_reset+0x14>)
   270ce:	4b05      	ldr	r3, [pc, #20]	; (270e4 <radio_tmr_status_reset+0x18>)
   270d0:	4a05      	ldr	r2, [pc, #20]	; (270e8 <radio_tmr_status_reset+0x1c>)
   270d2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   270d6:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   270da:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
			BIT(HAL_SW_SWITCH_TIMER_PHYEND_DELAY_COMPENSATION_DISABLE_PPI) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   270de:	4770      	bx	lr
   270e0:	4000b000 	.word	0x4000b000
   270e4:	4001f000 	.word	0x4001f000
   270e8:	0e7000c0 	.word	0x0e7000c0

000270ec <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   270ec:	4b03      	ldr	r3, [pc, #12]	; (270fc <radio_tmr_tifs_set+0x10>)
   270ee:	4a04      	ldr	r2, [pc, #16]	; (27100 <radio_tmr_tifs_set+0x14>)
   270f0:	781b      	ldrb	r3, [r3, #0]
   270f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   270f6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   270fa:	4770      	bx	lr
   270fc:	2000342d 	.word	0x2000342d
   27100:	40009000 	.word	0x40009000

00027104 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   27104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   27108:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   2710c:	4d31      	ldr	r5, [pc, #196]	; (271d4 <radio_tmr_start+0xd0>)
   2710e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   27112:	42ab      	cmp	r3, r5
{
   27114:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   27116:	d906      	bls.n	27126 <radio_tmr_start+0x22>
		ticks_start--;
		remainder += 30517578UL;
   27118:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   2711c:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   27120:	3901      	subs	r1, #1
		remainder += 30517578UL;
   27122:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27126:	4b2c      	ldr	r3, [pc, #176]	; (271d8 <radio_tmr_start+0xd4>)
	}
	remainder /= 1000000UL;
   27128:	482c      	ldr	r0, [pc, #176]	; (271dc <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   2712a:	4d2d      	ldr	r5, [pc, #180]	; (271e0 <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2712c:	4e2d      	ldr	r6, [pc, #180]	; (271e4 <radio_tmr_start+0xe0>)
   2712e:	2701      	movs	r7, #1
   27130:	60df      	str	r7, [r3, #12]

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   27132:	2700      	movs	r7, #0
   27134:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	remainder /= 1000000UL;
   27138:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   2713c:	2704      	movs	r7, #4
   2713e:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   27142:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   27144:	2702      	movs	r7, #2
   27146:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   2714a:	4a27      	ldr	r2, [pc, #156]	; (271e8 <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   2714c:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   27150:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   27154:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   27158:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   2715c:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2715e:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   27162:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   27166:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   2716a:	bb64      	cbnz	r4, 271c6 <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   2716c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   27170:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   27174:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   27178:	4b1b      	ldr	r3, [pc, #108]	; (271e8 <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2717a:	4a1c      	ldr	r2, [pc, #112]	; (271ec <radio_tmr_start+0xe8>)
   2717c:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   27180:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   27182:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   27184:	f8df 8068 	ldr.w	r8, [pc, #104]	; 271f0 <radio_tmr_start+0xec>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   27188:	f8df e068 	ldr.w	lr, [pc, #104]	; 271f4 <radio_tmr_start+0xf0>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2718c:	f8df c068 	ldr.w	ip, [pc, #104]	; 271f8 <radio_tmr_start+0xf4>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   27190:	4f1a      	ldr	r7, [pc, #104]	; (271fc <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   27192:	4e1b      	ldr	r6, [pc, #108]	; (27200 <radio_tmr_start+0xfc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   27194:	4d1b      	ldr	r5, [pc, #108]	; (27204 <radio_tmr_start+0x100>)
   27196:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   27198:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   2719c:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   271a0:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   271a4:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   271a8:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   271aa:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   271ae:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   271b2:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   271b6:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   271ba:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   271be:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   271c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   271c6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   271ca:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   271ce:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
   271d2:	e7d1      	b.n	27178 <radio_tmr_start+0x74>
   271d4:	7ff0bdbf 	.word	0x7ff0bdbf
   271d8:	40008000 	.word	0x40008000
   271dc:	431bde83 	.word	0x431bde83
   271e0:	4000b000 	.word	0x4000b000
   271e4:	4000b148 	.word	0x4000b148
   271e8:	4001f000 	.word	0x4001f000
   271ec:	40009000 	.word	0x40009000
   271f0:	4000110c 	.word	0x4000110c
   271f4:	4000900c 	.word	0x4000900c
   271f8:	40009140 	.word	0x40009140
   271fc:	4001f004 	.word	0x4001f004
   27200:	40009144 	.word	0x40009144
   27204:	4001f00c 	.word	0x4001f00c

00027208 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   27208:	4b01      	ldr	r3, [pc, #4]	; (27210 <radio_tmr_start_get+0x8>)
   2720a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   2720e:	4770      	bx	lr
   27210:	4000b000 	.word	0x4000b000

00027214 <radio_tmr_stop>:
   27214:	4903      	ldr	r1, [pc, #12]	; (27224 <radio_tmr_stop+0x10>)
   27216:	4a04      	ldr	r2, [pc, #16]	; (27228 <radio_tmr_stop+0x14>)
   27218:	2301      	movs	r3, #1
   2721a:	604b      	str	r3, [r1, #4]
   2721c:	610b      	str	r3, [r1, #16]
   2721e:	6053      	str	r3, [r2, #4]
   27220:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   27222:	4770      	bx	lr
   27224:	40008000 	.word	0x40008000
   27228:	40009000 	.word	0x40009000

0002722c <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   2722c:	4904      	ldr	r1, [pc, #16]	; (27240 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   2722e:	4b05      	ldr	r3, [pc, #20]	; (27244 <radio_tmr_hcto_configure+0x18>)
   27230:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   27234:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   27238:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   2723c:	4770      	bx	lr
   2723e:	bf00      	nop
   27240:	40008000 	.word	0x40008000
   27244:	4001f000 	.word	0x4001f000

00027248 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   27248:	4b05      	ldr	r3, [pc, #20]	; (27260 <radio_tmr_aa_capture+0x18>)
   2724a:	4806      	ldr	r0, [pc, #24]	; (27264 <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2724c:	4906      	ldr	r1, [pc, #24]	; (27268 <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   2724e:	4a07      	ldr	r2, [pc, #28]	; (2726c <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   27250:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   27254:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   27258:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   2725c:	4770      	bx	lr
   2725e:	bf00      	nop
   27260:	4001f000 	.word	0x4001f000
   27264:	40001100 	.word	0x40001100
   27268:	40008040 	.word	0x40008040
   2726c:	04000080 	.word	0x04000080

00027270 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   27270:	4b01      	ldr	r3, [pc, #4]	; (27278 <radio_tmr_aa_get+0x8>)
   27272:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   27276:	4770      	bx	lr
   27278:	40008000 	.word	0x40008000

0002727c <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   2727c:	4b01      	ldr	r3, [pc, #4]	; (27284 <radio_tmr_aa_save+0x8>)
   2727e:	6018      	str	r0, [r3, #0]
}
   27280:	4770      	bx	lr
   27282:	bf00      	nop
   27284:	20003000 	.word	0x20003000

00027288 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   27288:	4b01      	ldr	r3, [pc, #4]	; (27290 <radio_tmr_aa_restore+0x8>)
}
   2728a:	6818      	ldr	r0, [r3, #0]
   2728c:	4770      	bx	lr
   2728e:	bf00      	nop
   27290:	20003000 	.word	0x20003000

00027294 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   27294:	4b01      	ldr	r3, [pc, #4]	; (2729c <radio_tmr_ready_get+0x8>)
   27296:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   2729a:	4770      	bx	lr
   2729c:	40008000 	.word	0x40008000

000272a0 <radio_tmr_end_capture>:
   272a0:	4b02      	ldr	r3, [pc, #8]	; (272ac <radio_tmr_end_capture+0xc>)
   272a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   272a6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X ||
	* (CONFIG_SOC_SERIES_NRF53X && !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	*/
}
   272aa:	4770      	bx	lr
   272ac:	4001f000 	.word	0x4001f000

000272b0 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   272b0:	4b01      	ldr	r3, [pc, #4]	; (272b8 <radio_tmr_end_get+0x8>)
   272b2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   272b6:	4770      	bx	lr
   272b8:	40008000 	.word	0x40008000

000272bc <radio_tmr_tifs_base_get>:
   272bc:	4b01      	ldr	r3, [pc, #4]	; (272c4 <radio_tmr_tifs_base_get+0x8>)
   272be:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   272c2:	4770      	bx	lr
   272c4:	40008000 	.word	0x40008000

000272c8 <radio_ccm_rx_pkt_set>:

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   272c8:	4b17      	ldr	r3, [pc, #92]	; (27328 <radio_ccm_rx_pkt_set+0x60>)
{
   272ca:	b470      	push	{r4, r5, r6}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   272cc:	2400      	movs	r4, #0
{
   272ce:	4605      	mov	r5, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   272d0:	2602      	movs	r6, #2
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   272d2:	4816      	ldr	r0, [pc, #88]	; (2732c <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   272d4:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   272d8:	f8c3 6500 	str.w	r6, [r3, #1280]	; 0x500
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   272dc:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   272e0:	4e13      	ldr	r6, [pc, #76]	; (27330 <radio_ccm_rx_pkt_set+0x68>)
   272e2:	b2c0      	uxtb	r0, r0
			RADIO_PCNF1_MAXLEN_Pos;

	NRF_CCM->MAXPACKETSIZE = max_len;
   272e4:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   272e8:	4812      	ldr	r0, [pc, #72]	; (27334 <radio_ccm_rx_pkt_set+0x6c>)
   272ea:	2902      	cmp	r1, #2
   272ec:	bf08      	it	eq
   272ee:	4630      	moveq	r0, r6
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
   272f0:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   272f4:	4810      	ldr	r0, [pc, #64]	; (27338 <radio_ccm_rx_pkt_set+0x70>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   272f6:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   272fa:	4910      	ldr	r1, [pc, #64]	; (2733c <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   272fc:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   27300:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   27304:	4a0e      	ldr	r2, [pc, #56]	; (27340 <radio_ccm_rx_pkt_set+0x78>)
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   27306:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
   2730a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->SHORTS = 0;
   2730e:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   27312:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   27316:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   2731a:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2731e:	2201      	movs	r2, #1
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   27320:	bc70      	pop	{r4, r5, r6}
   27322:	601a      	str	r2, [r3, #0]
   27324:	4770      	bx	lr
   27326:	bf00      	nop
   27328:	4000f000 	.word	0x4000f000
   2732c:	40001000 	.word	0x40001000
   27330:	01010001 	.word	0x01010001
   27334:	01000001 	.word	0x01000001
   27338:	20002ef4 	.word	0x20002ef4
   2733c:	20002de4 	.word	0x20002de4
   27340:	4001f000 	.word	0x4001f000

00027344 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   27344:	4b0f      	ldr	r3, [pc, #60]	; (27384 <radio_ccm_tx_pkt_set+0x40>)
{
   27346:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   27348:	2200      	movs	r2, #0
{
   2734a:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   2734c:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   2734e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   27352:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   27356:	480c      	ldr	r0, [pc, #48]	; (27388 <radio_ccm_tx_pkt_set+0x44>)
   27358:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   2735c:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   27360:	480a      	ldr	r0, [pc, #40]	; (2738c <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   27362:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   27366:	4c0a      	ldr	r4, [pc, #40]	; (27390 <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   27368:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   2736c:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   2736e:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   27372:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   27376:	bc10      	pop	{r4}
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   27378:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   2737c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   27380:	6019      	str	r1, [r3, #0]
}
   27382:	4770      	bx	lr
   27384:	4000f000 	.word	0x4000f000
   27388:	01010000 	.word	0x01010000
   2738c:	20002ef4 	.word	0x20002ef4
   27390:	20002de4 	.word	0x20002de4

00027394 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   27394:	4a0e      	ldr	r2, [pc, #56]	; (273d0 <radio_ccm_is_done+0x3c>)
   27396:	2302      	movs	r3, #2
   27398:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   2739c:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   273a0:	b933      	cbnz	r3, 273b0 <radio_ccm_is_done+0x1c>
		__WFE();
   273a2:	bf20      	wfe
		__SEV();
   273a4:	bf40      	sev
		__WFE();
   273a6:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   273a8:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   273ac:	2b00      	cmp	r3, #0
   273ae:	d0f8      	beq.n	273a2 <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   273b0:	4b07      	ldr	r3, [pc, #28]	; (273d0 <radio_ccm_is_done+0x3c>)
   273b2:	4a08      	ldr	r2, [pc, #32]	; (273d4 <radio_ccm_is_done+0x40>)
   273b4:	2002      	movs	r0, #2
   273b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   273ba:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   273be:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   273c2:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   273c6:	fab0 f080 	clz	r0, r0
   273ca:	0940      	lsrs	r0, r0, #5
   273cc:	4770      	bx	lr
   273ce:	bf00      	nop
   273d0:	4000f000 	.word	0x4000f000
   273d4:	e000e100 	.word	0xe000e100

000273d8 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   273d8:	4b03      	ldr	r3, [pc, #12]	; (273e8 <radio_ccm_mic_is_valid+0x10>)
   273da:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   273de:	3800      	subs	r0, #0
   273e0:	bf18      	it	ne
   273e2:	2001      	movne	r0, #1
   273e4:	4770      	bx	lr
   273e6:	bf00      	nop
   273e8:	4000f000 	.word	0x4000f000

000273ec <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   273ec:	4a15      	ldr	r2, [pc, #84]	; (27444 <radio_ar_configure+0x58>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   273ee:	4b16      	ldr	r3, [pc, #88]	; (27448 <radio_ar_configure+0x5c>)
{
   273f0:	b4f0      	push	{r4, r5, r6, r7}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   273f2:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   273f6:	4e15      	ldr	r6, [pc, #84]	; (2744c <radio_ar_configure+0x60>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   273f8:	2703      	movs	r7, #3
   273fa:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500

	NRF_AAR->EVENTS_END = 0;
   273fe:	2400      	movs	r4, #0
	NRF_AAR->NIRK = nirk;
   27400:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		addrptr = NRF_RADIO->PACKETPTR - 1;
   27404:	3d01      	subs	r5, #1
	NRF_AAR->IRKPTR = (uint32_t)irk;
   27406:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->BCC = radio_bcc;
   2740a:	2140      	movs	r1, #64	; 0x40
	NRF_AAR->ADDRPTR = addrptr;
   2740c:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   27410:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   27414:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   27418:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   2741c:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   27420:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   27424:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   27428:	4909      	ldr	r1, [pc, #36]	; (27450 <radio_ar_configure+0x64>)
   2742a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2742e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   27432:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   27436:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   2743a:	bcf0      	pop	{r4, r5, r6, r7}
   2743c:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   27440:	4770      	bx	lr
   27442:	bf00      	nop
   27444:	40001000 	.word	0x40001000
   27448:	4000f000 	.word	0x4000f000
   2744c:	20002de0 	.word	0x20002de0
   27450:	4001f000 	.word	0x4001f000

00027454 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   27454:	4b01      	ldr	r3, [pc, #4]	; (2745c <radio_ar_match_get+0x8>)
   27456:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   2745a:	4770      	bx	lr
   2745c:	4000f000 	.word	0x4000f000

00027460 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   27460:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   27462:	4807      	ldr	r0, [pc, #28]	; (27480 <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   27464:	4c07      	ldr	r4, [pc, #28]	; (27484 <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   27466:	4a08      	ldr	r2, [pc, #32]	; (27488 <radio_ar_status_reset+0x28>)
   27468:	2300      	movs	r3, #0
   2746a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   2746e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   27472:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   27476:	bc10      	pop	{r4}
   27478:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   2747c:	4770      	bx	lr
   2747e:	bf00      	nop
   27480:	4000f000 	.word	0x4000f000
   27484:	40001000 	.word	0x40001000
   27488:	4001f000 	.word	0x4001f000

0002748c <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   2748c:	4b12      	ldr	r3, [pc, #72]	; (274d8 <radio_ar_has_match+0x4c>)
   2748e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	if (!radio_bc_has_match()) {
   27492:	b1fb      	cbz	r3, 274d4 <radio_ar_has_match+0x48>
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)aar_event);
}

NRF_STATIC_INLINE void nrf_aar_int_enable(NRF_AAR_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   27494:	4a11      	ldr	r2, [pc, #68]	; (274dc <radio_ar_has_match+0x50>)
   27496:	2301      	movs	r3, #1
   27498:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
		return 0U;
	}

	nrf_aar_int_enable(NRF_AAR, AAR_INTENSET_END_Msk);

	while (NRF_AAR->EVENTS_END == 0U) {
   2749c:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   274a0:	b933      	cbnz	r3, 274b0 <radio_ar_has_match+0x24>
		__WFE();
   274a2:	bf20      	wfe
		__SEV();
   274a4:	bf40      	sev
		__WFE();
   274a6:	bf20      	wfe
	while (NRF_AAR->EVENTS_END == 0U) {
   274a8:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   274ac:	2b00      	cmp	r3, #0
   274ae:	d0f8      	beq.n	274a2 <radio_ar_has_match+0x16>
    return p_reg->INTENSET & mask;
}

NRF_STATIC_INLINE void nrf_aar_int_disable(NRF_AAR_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   274b0:	4b0a      	ldr	r3, [pc, #40]	; (274dc <radio_ar_has_match+0x50>)
   274b2:	4a0b      	ldr	r2, [pc, #44]	; (274e0 <radio_ar_has_match+0x54>)
   274b4:	2001      	movs	r0, #1
   274b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   274ba:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   274be:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180

	nrf_aar_int_disable(NRF_AAR, AAR_INTENCLR_END_Msk);

	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_AAR));

	if (NRF_AAR->EVENTS_RESOLVED && !NRF_AAR->EVENTS_NOTRESOLVED) {
   274c2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   274c6:	b12a      	cbz	r2, 274d4 <radio_ar_has_match+0x48>
   274c8:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
   274cc:	fab0 f080 	clz	r0, r0
   274d0:	0940      	lsrs	r0, r0, #5
		return 1U;
	}

	return 0U;
}
   274d2:	4770      	bx	lr
		return 0U;
   274d4:	2000      	movs	r0, #0
   274d6:	4770      	bx	lr
   274d8:	40001000 	.word	0x40001000
   274dc:	4000f000 	.word	0x4000f000
   274e0:	e000e100 	.word	0xe000e100

000274e4 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   274e4:	2902      	cmp	r1, #2
{
   274e6:	b510      	push	{r4, lr}
   274e8:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   274ea:	d00b      	beq.n	27504 <mayfly_enable_cb+0x20>
   274ec:	4a0a      	ldr	r2, [pc, #40]	; (27518 <mayfly_enable_cb+0x34>)
   274ee:	490b      	ldr	r1, [pc, #44]	; (2751c <mayfly_enable_cb+0x38>)
   274f0:	480b      	ldr	r0, [pc, #44]	; (27520 <mayfly_enable_cb+0x3c>)
   274f2:	231e      	movs	r3, #30
   274f4:	f004 fd67 	bl	2bfc6 <assert_print>
   274f8:	4040      	eors	r0, r0
   274fa:	f380 8811 	msr	BASEPRI, r0
   274fe:	f04f 0003 	mov.w	r0, #3
   27502:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   27504:	200b      	movs	r0, #11
	if (enable) {
   27506:	b11c      	cbz	r4, 27510 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   27508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   2750c:	f7e9 b992 	b.w	10834 <arch_irq_enable>
}
   27510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   27514:	f7e9 b99e 	b.w	10854 <arch_irq_disable>
   27518:	00033ebc 	.word	0x00033ebc
   2751c:	00033f0c 	.word	0x00033f0c
   27520:	00032fc4 	.word	0x00032fc4

00027524 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   27524:	b129      	cbz	r1, 27532 <mayfly_is_enabled+0xe>
   27526:	3901      	subs	r1, #1
   27528:	2901      	cmp	r1, #1
   2752a:	d805      	bhi.n	27538 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   2752c:	200b      	movs	r0, #11
   2752e:	f7e9 b9a5 	b.w	1087c <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   27532:	2018      	movs	r0, #24
   27534:	f7e9 b9a2 	b.w	1087c <arch_irq_is_enabled>
{
   27538:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   2753a:	4a07      	ldr	r2, [pc, #28]	; (27558 <mayfly_is_enabled+0x34>)
   2753c:	4907      	ldr	r1, [pc, #28]	; (2755c <mayfly_is_enabled+0x38>)
   2753e:	4808      	ldr	r0, [pc, #32]	; (27560 <mayfly_is_enabled+0x3c>)
   27540:	2336      	movs	r3, #54	; 0x36
   27542:	f004 fd40 	bl	2bfc6 <assert_print>
   27546:	4040      	eors	r0, r0
   27548:	f380 8811 	msr	BASEPRI, r0
   2754c:	f04f 0003 	mov.w	r0, #3
   27550:	df02      	svc	2
		break;
	}

	return 0;
}
   27552:	2000      	movs	r0, #0
   27554:	bd08      	pop	{r3, pc}
   27556:	bf00      	nop
   27558:	00033ebc 	.word	0x00033ebc
   2755c:	0003305c 	.word	0x0003305c
   27560:	00032fc4 	.word	0x00032fc4

00027564 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   27564:	4288      	cmp	r0, r1
   27566:	d00b      	beq.n	27580 <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   27568:	2801      	cmp	r0, #1
   2756a:	d003      	beq.n	27574 <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   2756c:	2802      	cmp	r0, #2
   2756e:	d009      	beq.n	27584 <mayfly_prio_is_equal+0x20>
   27570:	2000      	movs	r0, #0
#endif
	       0;
}
   27572:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   27574:	f1a1 0002 	sub.w	r0, r1, #2
   27578:	fab0 f080 	clz	r0, r0
   2757c:	0940      	lsrs	r0, r0, #5
   2757e:	4770      	bx	lr
   27580:	2001      	movs	r0, #1
   27582:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   27584:	f1a1 0001 	sub.w	r0, r1, #1
   27588:	fab0 f080 	clz	r0, r0
   2758c:	0940      	lsrs	r0, r0, #5
   2758e:	4770      	bx	lr

00027590 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   27590:	2901      	cmp	r1, #1
{
   27592:	b508      	push	{r3, lr}
	switch (callee_id) {
   27594:	d00f      	beq.n	275b6 <mayfly_pend+0x26>
   27596:	2902      	cmp	r1, #2
   27598:	d00d      	beq.n	275b6 <mayfly_pend+0x26>
   2759a:	b191      	cbz	r1, 275c2 <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   2759c:	4a0c      	ldr	r2, [pc, #48]	; (275d0 <mayfly_pend+0x40>)
   2759e:	490d      	ldr	r1, [pc, #52]	; (275d4 <mayfly_pend+0x44>)
   275a0:	480d      	ldr	r0, [pc, #52]	; (275d8 <mayfly_pend+0x48>)
   275a2:	2367      	movs	r3, #103	; 0x67
   275a4:	f004 fd0f 	bl	2bfc6 <assert_print>
   275a8:	4040      	eors	r0, r0
   275aa:	f380 8811 	msr	BASEPRI, r0
   275ae:	f04f 0003 	mov.w	r0, #3
   275b2:	df02      	svc	2
		break;
	}
}
   275b4:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   275b6:	4b09      	ldr	r3, [pc, #36]	; (275dc <mayfly_pend+0x4c>)
   275b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   275bc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   275c0:	bd08      	pop	{r3, pc}
   275c2:	4b06      	ldr	r3, [pc, #24]	; (275dc <mayfly_pend+0x4c>)
   275c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   275c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   275cc:	bd08      	pop	{r3, pc}
   275ce:	bf00      	nop
   275d0:	00033ebc 	.word	0x00033ebc
   275d4:	0003305c 	.word	0x0003305c
   275d8:	00032fc4 	.word	0x00032fc4
   275dc:	e000e100 	.word	0xe000e100

000275e0 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   275e0:	2803      	cmp	r0, #3
{
   275e2:	b510      	push	{r4, lr}
   275e4:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   275e6:	d804      	bhi.n	275f2 <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   275e8:	4b11      	ldr	r3, [pc, #68]	; (27630 <hal_ticker_instance0_caller_id_get+0x50>)
   275ea:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   275ec:	b18c      	cbz	r4, 27612 <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   275ee:	4620      	mov	r0, r4
   275f0:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   275f2:	4a10      	ldr	r2, [pc, #64]	; (27634 <hal_ticker_instance0_caller_id_get+0x54>)
   275f4:	4910      	ldr	r1, [pc, #64]	; (27638 <hal_ticker_instance0_caller_id_get+0x58>)
   275f6:	4811      	ldr	r0, [pc, #68]	; (2763c <hal_ticker_instance0_caller_id_get+0x5c>)
   275f8:	232b      	movs	r3, #43	; 0x2b
   275fa:	f004 fce4 	bl	2bfc6 <assert_print>
   275fe:	4040      	eors	r0, r0
   27600:	f380 8811 	msr	BASEPRI, r0
   27604:	f04f 0003 	mov.w	r0, #3
   27608:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   2760a:	4b09      	ldr	r3, [pc, #36]	; (27630 <hal_ticker_instance0_caller_id_get+0x50>)
   2760c:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   2760e:	2c00      	cmp	r4, #0
   27610:	d1ed      	bne.n	275ee <hal_ticker_instance0_caller_id_get+0xe>
   27612:	4a08      	ldr	r2, [pc, #32]	; (27634 <hal_ticker_instance0_caller_id_get+0x54>)
   27614:	490a      	ldr	r1, [pc, #40]	; (27640 <hal_ticker_instance0_caller_id_get+0x60>)
   27616:	4809      	ldr	r0, [pc, #36]	; (2763c <hal_ticker_instance0_caller_id_get+0x5c>)
   27618:	232e      	movs	r3, #46	; 0x2e
   2761a:	f004 fcd4 	bl	2bfc6 <assert_print>
   2761e:	4040      	eors	r0, r0
   27620:	f380 8811 	msr	BASEPRI, r0
   27624:	f04f 0003 	mov.w	r0, #3
   27628:	df02      	svc	2
}
   2762a:	4620      	mov	r0, r4
   2762c:	bd10      	pop	{r4, pc}
   2762e:	bf00      	nop
   27630:	00033fc4 	.word	0x00033fc4
   27634:	00033f30 	.word	0x00033f30
   27638:	00033f80 	.word	0x00033f80
   2763c:	00032fc4 	.word	0x00032fc4
   27640:	00033fa0 	.word	0x00033fa0

00027644 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   27644:	3801      	subs	r0, #1
{
   27646:	b510      	push	{r4, lr}
   27648:	461c      	mov	r4, r3
	switch (caller_id) {
   2764a:	2804      	cmp	r0, #4
   2764c:	f200 8082 	bhi.w	27754 <hal_ticker_instance0_sched+0x110>
   27650:	e8df f000 	tbb	[pc, r0]
   27654:	3f302112 	.word	0x3f302112
   27658:	03          	.byte	0x03
   27659:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   2765a:	2904      	cmp	r1, #4
   2765c:	d04a      	beq.n	276f4 <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   2765e:	4a44      	ldr	r2, [pc, #272]	; (27770 <hal_ticker_instance0_sched+0x12c>)
   27660:	4944      	ldr	r1, [pc, #272]	; (27774 <hal_ticker_instance0_sched+0x130>)
   27662:	4845      	ldr	r0, [pc, #276]	; (27778 <hal_ticker_instance0_sched+0x134>)
   27664:	23ba      	movs	r3, #186	; 0xba
   27666:	f004 fcae 	bl	2bfc6 <assert_print>
   2766a:	4040      	eors	r0, r0
   2766c:	f380 8811 	msr	BASEPRI, r0
   27670:	f04f 0003 	mov.w	r0, #3
   27674:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   27676:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   27678:	2904      	cmp	r1, #4
   2767a:	d043      	beq.n	27704 <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   2767c:	4a3c      	ldr	r2, [pc, #240]	; (27770 <hal_ticker_instance0_sched+0x12c>)
   2767e:	493d      	ldr	r1, [pc, #244]	; (27774 <hal_ticker_instance0_sched+0x130>)
   27680:	483d      	ldr	r0, [pc, #244]	; (27778 <hal_ticker_instance0_sched+0x134>)
   27682:	234e      	movs	r3, #78	; 0x4e
   27684:	f004 fc9f 	bl	2bfc6 <assert_print>
   27688:	4040      	eors	r0, r0
   2768a:	f380 8811 	msr	BASEPRI, r0
   2768e:	f04f 0003 	mov.w	r0, #3
   27692:	df02      	svc	2
}
   27694:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   27696:	2903      	cmp	r1, #3
   27698:	d03c      	beq.n	27714 <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   2769a:	4a35      	ldr	r2, [pc, #212]	; (27770 <hal_ticker_instance0_sched+0x12c>)
   2769c:	4935      	ldr	r1, [pc, #212]	; (27774 <hal_ticker_instance0_sched+0x130>)
   2769e:	4836      	ldr	r0, [pc, #216]	; (27778 <hal_ticker_instance0_sched+0x134>)
   276a0:	2365      	movs	r3, #101	; 0x65
   276a2:	f004 fc90 	bl	2bfc6 <assert_print>
   276a6:	4040      	eors	r0, r0
   276a8:	f380 8811 	msr	BASEPRI, r0
   276ac:	f04f 0003 	mov.w	r0, #3
   276b0:	df02      	svc	2
}
   276b2:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   276b4:	2904      	cmp	r1, #4
   276b6:	d035      	beq.n	27724 <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   276b8:	4a2d      	ldr	r2, [pc, #180]	; (27770 <hal_ticker_instance0_sched+0x12c>)
   276ba:	492e      	ldr	r1, [pc, #184]	; (27774 <hal_ticker_instance0_sched+0x130>)
   276bc:	482e      	ldr	r0, [pc, #184]	; (27778 <hal_ticker_instance0_sched+0x134>)
   276be:	237c      	movs	r3, #124	; 0x7c
   276c0:	f004 fc81 	bl	2bfc6 <assert_print>
   276c4:	4040      	eors	r0, r0
   276c6:	f380 8811 	msr	BASEPRI, r0
   276ca:	f04f 0003 	mov.w	r0, #3
   276ce:	df02      	svc	2
}
   276d0:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   276d2:	2903      	cmp	r1, #3
   276d4:	d036      	beq.n	27744 <hal_ticker_instance0_sched+0x100>
   276d6:	2904      	cmp	r1, #4
   276d8:	d02c      	beq.n	27734 <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   276da:	4a25      	ldr	r2, [pc, #148]	; (27770 <hal_ticker_instance0_sched+0x12c>)
   276dc:	4925      	ldr	r1, [pc, #148]	; (27774 <hal_ticker_instance0_sched+0x130>)
   276de:	4826      	ldr	r0, [pc, #152]	; (27778 <hal_ticker_instance0_sched+0x134>)
   276e0:	23a2      	movs	r3, #162	; 0xa2
   276e2:	f004 fc70 	bl	2bfc6 <assert_print>
   276e6:	4040      	eors	r0, r0
   276e8:	f380 8811 	msr	BASEPRI, r0
   276ec:	f04f 0003 	mov.w	r0, #3
   276f0:	df02      	svc	2
}
   276f2:	bd10      	pop	{r4, pc}
			m.param = instance;
   276f4:	4b21      	ldr	r3, [pc, #132]	; (2777c <hal_ticker_instance0_sched+0x138>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   276f6:	2102      	movs	r1, #2
			m.param = instance;
   276f8:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   276fa:	2003      	movs	r0, #3
}
   276fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   27700:	f7f2 be02 	b.w	1a308 <mayfly_enqueue>
			m.param = instance;
   27704:	4b1e      	ldr	r3, [pc, #120]	; (27780 <hal_ticker_instance0_sched+0x13c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   27706:	2102      	movs	r1, #2
			m.param = instance;
   27708:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   2770a:	2000      	movs	r0, #0
}
   2770c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   27710:	f7f2 bdfa 	b.w	1a308 <mayfly_enqueue>
			m.param = instance;
   27714:	4b1b      	ldr	r3, [pc, #108]	; (27784 <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   27716:	2101      	movs	r1, #1
			m.param = instance;
   27718:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   2771a:	4608      	mov	r0, r1
}
   2771c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   27720:	f7f2 bdf2 	b.w	1a308 <mayfly_enqueue>
			m.param = instance;
   27724:	4b18      	ldr	r3, [pc, #96]	; (27788 <hal_ticker_instance0_sched+0x144>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   27726:	2102      	movs	r1, #2
			m.param = instance;
   27728:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   2772a:	2001      	movs	r0, #1
}
   2772c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   27730:	f7f2 bdea 	b.w	1a308 <mayfly_enqueue>
			m.param = instance;
   27734:	4b15      	ldr	r3, [pc, #84]	; (2778c <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   27736:	2102      	movs	r1, #2
			m.param = instance;
   27738:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   2773a:	4608      	mov	r0, r1
}
   2773c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   27740:	f7f2 bde2 	b.w	1a308 <mayfly_enqueue>
			m.param = instance;
   27744:	4b12      	ldr	r3, [pc, #72]	; (27790 <hal_ticker_instance0_sched+0x14c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   27746:	2101      	movs	r1, #1
			m.param = instance;
   27748:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   2774a:	2002      	movs	r0, #2
}
   2774c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   27750:	f7f2 bdda 	b.w	1a308 <mayfly_enqueue>
		LL_ASSERT(0);
   27754:	4a06      	ldr	r2, [pc, #24]	; (27770 <hal_ticker_instance0_sched+0x12c>)
   27756:	4907      	ldr	r1, [pc, #28]	; (27774 <hal_ticker_instance0_sched+0x130>)
   27758:	4807      	ldr	r0, [pc, #28]	; (27778 <hal_ticker_instance0_sched+0x134>)
   2775a:	23c0      	movs	r3, #192	; 0xc0
   2775c:	f004 fc33 	bl	2bfc6 <assert_print>
   27760:	4040      	eors	r0, r0
   27762:	f380 8811 	msr	BASEPRI, r0
   27766:	f04f 0003 	mov.w	r0, #3
   2776a:	df02      	svc	2
}
   2776c:	bd10      	pop	{r4, pc}
   2776e:	bf00      	nop
   27770:	00033f30 	.word	0x00033f30
   27774:	0003305c 	.word	0x0003305c
   27778:	00032fc4 	.word	0x00032fc4
   2777c:	200007c0 	.word	0x200007c0
   27780:	200007b0 	.word	0x200007b0
   27784:	200007a0 	.word	0x200007a0
   27788:	200007f0 	.word	0x200007f0
   2778c:	200007d0 	.word	0x200007d0
   27790:	200007e0 	.word	0x200007e0

00027794 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   27794:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   27796:	2000      	movs	r0, #0
   27798:	f7ff b9e0 	b.w	26b5c <cntr_cmp_set>

0002779c <hci_vendor_read_static_addr>:

#include <soc.h>

uint8_t hci_vendor_read_static_addr(struct bt_hci_vs_static_addr addrs[],
				 uint8_t size)
{
   2779c:	b508      	push	{r3, lr}
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   2779e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   277a2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   277a6:	3201      	adds	r2, #1
   277a8:	d008      	beq.n	277bc <hci_vendor_read_static_addr+0x20>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   277aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   277ae:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   277b2:	f013 0301 	ands.w	r3, r3, #1
   277b6:	d10a      	bne.n	277ce <hci_vendor_read_static_addr+0x32>
		}

		return 1;
	}

	return 0;
   277b8:	4618      	mov	r0, r3
}
   277ba:	bd08      	pop	{r3, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   277bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   277c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   277c4:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   277c6:	4293      	cmp	r3, r2
   277c8:	d1ef      	bne.n	277aa <hci_vendor_read_static_addr+0xe>
	return 0;
   277ca:	2000      	movs	r0, #0
}
   277cc:	bd08      	pop	{r3, pc}
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   277ce:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   277d2:	7003      	strb	r3, [r0, #0]
	sys_put_le16(val >> 16, &dst[2]);
   277d4:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   277d6:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   277da:	f3c3 2307 	ubfx	r3, r3, #8, #8
   277de:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   277e0:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   277e2:	f880 c003 	strb.w	ip, [r0, #3]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   277e6:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   277ea:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   277ec:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   277f0:	f063 033f 	orn	r3, r3, #63	; 0x3f
   277f4:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   277f6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   277fa:	3301      	adds	r3, #1
   277fc:	d03b      	beq.n	27876 <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   277fe:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   27802:	3301      	adds	r3, #1
   27804:	d037      	beq.n	27876 <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   27806:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   2780a:	3301      	adds	r3, #1
   2780c:	d033      	beq.n	27876 <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   2780e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   27812:	3301      	adds	r3, #1
   27814:	d02f      	beq.n	27876 <hci_vendor_read_static_addr+0xda>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   27816:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   2781a:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   2781c:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   2781e:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   27822:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   27826:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   27828:	f880 c009 	strb.w	ip, [r0, #9]
   2782c:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   2782e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   27832:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   27834:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   27836:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   2783a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   2783e:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   27840:	f880 c00d 	strb.w	ip, [r0, #13]
   27844:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   27846:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   2784a:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   2784c:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   2784e:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   27852:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   27856:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   27858:	73c3      	strb	r3, [r0, #15]
   2785a:	f880 c011 	strb.w	ip, [r0, #17]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   2785e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   27862:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   27864:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   27866:	0a11      	lsrs	r1, r2, #8
   27868:	f3c3 2307 	ubfx	r3, r3, #8, #8
   2786c:	74c3      	strb	r3, [r0, #19]
	dst[0] = val;
   2786e:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   27870:	7541      	strb	r1, [r0, #21]
		return 1;
   27872:	2001      	movs	r0, #1
}
   27874:	bd08      	pop	{r3, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   27876:	2210      	movs	r2, #16
   27878:	2100      	movs	r1, #0
   2787a:	3006      	adds	r0, #6
   2787c:	f006 fbe0 	bl	2e040 <memset>
		return 1;
   27880:	2001      	movs	r0, #1
}
   27882:	bd08      	pop	{r3, pc}

00027884 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   27884:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   27886:	2210      	movs	r2, #16
{
   27888:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   2788a:	2100      	movs	r1, #0
   2788c:	f006 fbd8 	bl	2e040 <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   27890:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   27894:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   27898:	3201      	adds	r2, #1
   2789a:	d034      	beq.n	27906 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   2789c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   278a0:	3201      	adds	r2, #1
   278a2:	d030      	beq.n	27906 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   278a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   278a8:	3201      	adds	r2, #1
   278aa:	d02c      	beq.n	27906 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   278ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   278b0:	3201      	adds	r2, #1
   278b2:	d028      	beq.n	27906 <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   278b4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   278b8:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   278ba:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   278bc:	0a08      	lsrs	r0, r1, #8
   278be:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   278c2:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   278c4:	70e0      	strb	r0, [r4, #3]
   278c6:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   278c8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   278cc:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   278ce:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   278d0:	0a08      	lsrs	r0, r1, #8
   278d2:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   278d6:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   278d8:	71e0      	strb	r0, [r4, #7]
   278da:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   278dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   278e0:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   278e2:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   278e4:	0a08      	lsrs	r0, r1, #8
   278e6:	f3c2 2207 	ubfx	r2, r2, #8, #8
   278ea:	7262      	strb	r2, [r4, #9]
	dst[0] = val;
   278ec:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   278ee:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   278f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   278f4:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   278f6:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   278f8:	0a11      	lsrs	r1, r2, #8
   278fa:	f3c3 2307 	ubfx	r3, r3, #8, #8
   278fe:	7363      	strb	r3, [r4, #13]
	dst[0] = val;
   27900:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   27902:	73e1      	strb	r1, [r4, #15]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   27904:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   27906:	4620      	mov	r0, r4
   27908:	2210      	movs	r2, #16
}
   2790a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   2790e:	2100      	movs	r1, #0
   27910:	f006 bb96 	b.w	2e040 <memset>

00027914 <mcumgr_buf_alloc>:
	return net_buf_alloc_fixed(pool, timeout);
   27914:	4802      	ldr	r0, [pc, #8]	; (27920 <mcumgr_buf_alloc+0xc>)
   27916:	2200      	movs	r2, #0
   27918:	2300      	movs	r3, #0
   2791a:	f009 b801 	b.w	30920 <net_buf_alloc_fixed>
   2791e:	bf00      	nop
   27920:	20000d74 	.word	0x20000d74

00027924 <cbor_nb_reader_init>:

void
cbor_nb_reader_init(struct cbor_nb_reader *cnr,
		    struct net_buf *nb)
{
	cnr->r.get8 = &cbor_nb_reader_get8;
   27924:	4b07      	ldr	r3, [pc, #28]	; (27944 <cbor_nb_reader_init+0x20>)
   27926:	6003      	str	r3, [r0, #0]
	cnr->r.get16 = &cbor_nb_reader_get16;
   27928:	4b07      	ldr	r3, [pc, #28]	; (27948 <cbor_nb_reader_init+0x24>)
   2792a:	6043      	str	r3, [r0, #4]
	cnr->r.get32 = &cbor_nb_reader_get32;
   2792c:	4b07      	ldr	r3, [pc, #28]	; (2794c <cbor_nb_reader_init+0x28>)
   2792e:	6083      	str	r3, [r0, #8]
	cnr->r.get64 = &cbor_nb_reader_get64;
   27930:	4b07      	ldr	r3, [pc, #28]	; (27950 <cbor_nb_reader_init+0x2c>)
   27932:	60c3      	str	r3, [r0, #12]
	cnr->r.cmp = &cbor_nb_reader_cmp;
   27934:	4b07      	ldr	r3, [pc, #28]	; (27954 <cbor_nb_reader_init+0x30>)
   27936:	6103      	str	r3, [r0, #16]
	cnr->r.cpy = &cbor_nb_reader_cpy;
   27938:	4b07      	ldr	r3, [pc, #28]	; (27958 <cbor_nb_reader_init+0x34>)
   2793a:	6143      	str	r3, [r0, #20]

	cnr->nb = nb;
	cnr->r.message_size = nb->len;
   2793c:	898b      	ldrh	r3, [r1, #12]
	cnr->nb = nb;
   2793e:	61c1      	str	r1, [r0, #28]
	cnr->r.message_size = nb->len;
   27940:	6183      	str	r3, [r0, #24]
}
   27942:	4770      	bx	lr
   27944:	000303b1 	.word	0x000303b1
   27948:	000303c7 	.word	0x000303c7
   2794c:	000303e5 	.word	0x000303e5
   27950:	00030401 	.word	0x00030401
   27954:	00030457 	.word	0x00030457
   27958:	0003042d 	.word	0x0003042d

0002795c <cbor_nb_writer_init>:
	return CborNoError;
}

void
cbor_nb_writer_init(struct cbor_nb_writer *cnw, struct net_buf *nb)
{
   2795c:	b538      	push	{r3, r4, r5, lr}
   2795e:	4604      	mov	r4, r0
   27960:	460d      	mov	r5, r1
	net_buf_reset(nb);
   27962:	4608      	mov	r0, r1
   27964:	f008 ffd7 	bl	30916 <net_buf_reset>
	cnw->nb = nb;
	/* Reserve header space */
	cnw->nb->len = sizeof(struct mgmt_hdr);
   27968:	2308      	movs	r3, #8
	cnw->nb = nb;
   2796a:	60a5      	str	r5, [r4, #8]
	cnw->nb->len = sizeof(struct mgmt_hdr);
   2796c:	81ab      	strh	r3, [r5, #12]
	cnw->enc.bytes_written = sizeof(struct mgmt_hdr);
   2796e:	6063      	str	r3, [r4, #4]
	cnw->enc.write = &cbor_nb_write;
   27970:	4b01      	ldr	r3, [pc, #4]	; (27978 <cbor_nb_writer_init+0x1c>)
   27972:	6023      	str	r3, [r4, #0]
}
   27974:	bd38      	pop	{r3, r4, r5, pc}
   27976:	bf00      	nop
   27978:	0003047d 	.word	0x0003047d

0002797c <zephyr_smp_handle_reqs>:
/**
 * Processes all received SNP request packets.
 */
static void
zephyr_smp_handle_reqs(struct k_work *work)
{
   2797c:	b5f0      	push	{r4, r5, r6, r7, lr}
	streamer = (struct smp_streamer) {
   2797e:	4e0d      	ldr	r6, [pc, #52]	; (279b4 <zephyr_smp_handle_reqs+0x38>)
   27980:	4f0d      	ldr	r7, [pc, #52]	; (279b8 <zephyr_smp_handle_reqs+0x3c>)
{
   27982:	b091      	sub	sp, #68	; 0x44
   27984:	4604      	mov	r4, r0
	struct zephyr_smp_transport *zst;
	struct net_buf *nb;

	zst = (void *)work;

	while ((nb = net_buf_get(&zst->zst_fifo, K_NO_WAIT)) != NULL) {
   27986:	f100 0510 	add.w	r5, r0, #16
   2798a:	2200      	movs	r2, #0
   2798c:	2300      	movs	r3, #0
   2798e:	4628      	mov	r0, r5
   27990:	f008 ffcb 	bl	3092a <net_buf_get>
   27994:	4601      	mov	r1, r0
   27996:	b908      	cbnz	r0, 2799c <zephyr_smp_handle_reqs+0x20>
		zephyr_smp_process_packet(zst, nb);
	}
}
   27998:	b011      	add	sp, #68	; 0x44
   2799a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	streamer = (struct smp_streamer) {
   2799c:	ab08      	add	r3, sp, #32
	rc = smp_process_request_packet(&streamer, nb);
   2799e:	a803      	add	r0, sp, #12
	streamer = (struct smp_streamer) {
   279a0:	e9cd 6403 	strd	r6, r4, [sp, #12]
   279a4:	9305      	str	r3, [sp, #20]
   279a6:	f8cd d018 	str.w	sp, [sp, #24]
   279aa:	9707      	str	r7, [sp, #28]
	rc = smp_process_request_packet(&streamer, nb);
   279ac:	f008 fe89 	bl	306c2 <smp_process_request_packet>
	return rc;
   279b0:	e7eb      	b.n	2798a <zephyr_smp_handle_reqs+0xe>
   279b2:	bf00      	nop
   279b4:	00033fd8 	.word	0x00033fd8
   279b8:	00030531 	.word	0x00030531

000279bc <zephyr_smp_transport_init>:
zephyr_smp_transport_init(struct zephyr_smp_transport *zst,
			  zephyr_smp_transport_out_fn *output_func,
			  zephyr_smp_transport_get_mtu_fn *get_mtu_func,
			  zephyr_smp_transport_ud_copy_fn *ud_copy_func,
			  zephyr_smp_transport_ud_free_fn *ud_free_func)
{
   279bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   279c0:	f8dd 8018 	ldr.w	r8, [sp, #24]
   279c4:	4604      	mov	r4, r0
   279c6:	461d      	mov	r5, r3
   279c8:	460f      	mov	r7, r1
   279ca:	4616      	mov	r6, r2
	*zst = (struct zephyr_smp_transport) {
   279cc:	2100      	movs	r1, #0
   279ce:	2238      	movs	r2, #56	; 0x38
   279d0:	f006 fb36 	bl	2e040 <memset>
   279d4:	e9c4 760a 	strd	r7, r6, [r4, #40]	; 0x28
   279d8:	e9c4 580c 	strd	r5, r8, [r4, #48]	; 0x30

#ifdef CONFIG_MCUMGR_SMP_REASSEMBLY
	zephyr_smp_reassembly_init(zst);
#endif

	k_work_init(&zst->zst_work, zephyr_smp_handle_reqs);
   279dc:	4904      	ldr	r1, [pc, #16]	; (279f0 <zephyr_smp_transport_init+0x34>)
   279de:	4620      	mov	r0, r4
   279e0:	f009 ff69 	bl	318b6 <k_work_init>
	z_impl_k_queue_init(queue);
   279e4:	f104 0010 	add.w	r0, r4, #16
	k_fifo_init(&zst->zst_fifo);
}
   279e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   279ec:	f009 be86 	b.w	316fc <z_impl_k_queue_init>
   279f0:	0002797d 	.word	0x0002797d

000279f4 <smp_bt_init>:
		k_work_init_delayable(&conn_data[i].ework, conn_param_on_error_retry);
	}
}

static int smp_bt_init(const struct device *dev)
{
   279f4:	b507      	push	{r0, r1, r2, lr}

	if (IS_ENABLED(CONFIG_MCUMGR_SMP_BT_CONN_PARAM_CONTROL)) {
		conn_param_control_init();
	}

	zephyr_smp_transport_init(&smp_bt_transport, smp_bt_tx_pkt,
   279f6:	4b06      	ldr	r3, [pc, #24]	; (27a10 <smp_bt_init+0x1c>)
   279f8:	9300      	str	r3, [sp, #0]
   279fa:	4a06      	ldr	r2, [pc, #24]	; (27a14 <smp_bt_init+0x20>)
   279fc:	4b06      	ldr	r3, [pc, #24]	; (27a18 <smp_bt_init+0x24>)
   279fe:	4907      	ldr	r1, [pc, #28]	; (27a1c <smp_bt_init+0x28>)
   27a00:	4807      	ldr	r0, [pc, #28]	; (27a20 <smp_bt_init+0x2c>)
   27a02:	f7ff ffdb 	bl	279bc <zephyr_smp_transport_init>
				  smp_bt_get_mtu, smp_bt_ud_copy,
				  smp_bt_ud_free);
	return 0;
}
   27a06:	2000      	movs	r0, #0
   27a08:	b003      	add	sp, #12
   27a0a:	f85d fb04 	ldr.w	pc, [sp], #4
   27a0e:	bf00      	nop
   27a10:	000305b9 	.word	0x000305b9
   27a14:	000305cb 	.word	0x000305cb
   27a18:	000305a7 	.word	0x000305a7
   27a1c:	000305f1 	.word	0x000305f1
   27a20:	20003034 	.word	0x20003034

00027a24 <smp_bt_chr_write>:
{
   27a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27a28:	4606      	mov	r6, r0
   27a2a:	4617      	mov	r7, r2
   27a2c:	461c      	mov	r4, r3
	nb = mcumgr_buf_alloc();
   27a2e:	f7ff ff71 	bl	27914 <mcumgr_buf_alloc>
	if (!nb) {
   27a32:	4605      	mov	r5, r0
   27a34:	b148      	cbz	r0, 27a4a <smp_bt_chr_write+0x26>
	return net_buf_simple_tailroom(&buf->b);
   27a36:	f100 0808 	add.w	r8, r0, #8
   27a3a:	4640      	mov	r0, r8
   27a3c:	f009 f855 	bl	30aea <net_buf_simple_tailroom>
	if (net_buf_tailroom(nb) < len) {
   27a40:	4284      	cmp	r4, r0
   27a42:	d905      	bls.n	27a50 <smp_bt_chr_write+0x2c>
		mcumgr_buf_free(nb);
   27a44:	4628      	mov	r0, r5
   27a46:	f008 fd31 	bl	304ac <mcumgr_buf_free>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   27a4a:	f06f 0010 	mvn.w	r0, #16
   27a4e:	e00d      	b.n	27a6c <smp_bt_chr_write+0x48>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   27a50:	4622      	mov	r2, r4
   27a52:	4639      	mov	r1, r7
   27a54:	4640      	mov	r0, r8
   27a56:	f009 f813 	bl	30a80 <net_buf_simple_add_mem>
	ud->conn = bt_conn_ref(conn);
   27a5a:	4630      	mov	r0, r6
   27a5c:	f006 ff6a 	bl	2e934 <bt_conn_ref>
	zephyr_smp_rx_req(&smp_bt_transport, nb);
   27a60:	4629      	mov	r1, r5
	ud->conn = bt_conn_ref(conn);
   27a62:	6168      	str	r0, [r5, #20]
	zephyr_smp_rx_req(&smp_bt_transport, nb);
   27a64:	4802      	ldr	r0, [pc, #8]	; (27a70 <smp_bt_chr_write+0x4c>)
   27a66:	f008 fd93 	bl	30590 <zephyr_smp_rx_req>
	return len;
   27a6a:	4620      	mov	r0, r4
}
   27a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27a70:	20003034 	.word	0x20003034

00027a74 <smp_bt_notify>:
{
   27a74:	b570      	push	{r4, r5, r6, lr}
   27a76:	b086      	sub	sp, #24
   27a78:	4604      	mov	r4, r0
   27a7a:	460e      	mov	r6, r1
   27a7c:	4615      	mov	r5, r2
	memset(&params, 0, sizeof(params));
   27a7e:	2100      	movs	r1, #0
   27a80:	2218      	movs	r2, #24
   27a82:	4668      	mov	r0, sp
   27a84:	f006 fadc 	bl	2e040 <memset>
	params.attr = attr;
   27a88:	4b05      	ldr	r3, [pc, #20]	; (27aa0 <smp_bt_notify+0x2c>)
	params.len = len;
   27a8a:	f8ad 500c 	strh.w	r5, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
   27a8e:	4669      	mov	r1, sp
   27a90:	4620      	mov	r0, r4
	params.data = data;
   27a92:	e9cd 3601 	strd	r3, r6, [sp, #4]
	return bt_gatt_notify_cb(conn, &params);
   27a96:	f7ef ffa3 	bl	179e0 <bt_gatt_notify_cb>
}
   27a9a:	b006      	add	sp, #24
   27a9c:	bd70      	pop	{r4, r5, r6, pc}
   27a9e:	bf00      	nop
   27aa0:	20000848 	.word	0x20000848

00027aa4 <mgmt_find_handler>:
	 * Find the group with the specified group id, if one exists
	 * check the handler for the command id and make sure
	 * that is not NULL. If that is not set, look for the group
	 * with a command id that is set
	 */
	for (group = mgmt_group_list; group != NULL; group = group->mg_next) {
   27aa4:	4b0b      	ldr	r3, [pc, #44]	; (27ad4 <mgmt_find_handler+0x30>)
   27aa6:	681b      	ldr	r3, [r3, #0]
	mgmt_group_list_end = group;
}

const struct mgmt_handler *
mgmt_find_handler(uint16_t group_id, uint16_t command_id)
{
   27aa8:	b530      	push	{r4, r5, lr}
   27aaa:	4602      	mov	r2, r0
			if (!group->mg_handlers[command_id].mh_read &&
   27aac:	00cc      	lsls	r4, r1, #3
	for (group = mgmt_group_list; group != NULL; group = group->mg_next) {
   27aae:	b90b      	cbnz	r3, 27ab4 <mgmt_find_handler+0x10>
	const struct mgmt_group *group;

	group = mgmt_find_group(group_id, command_id);
	if (!group) {
		return NULL;
   27ab0:	2000      	movs	r0, #0
	}

	return &group->mg_handlers[command_id];
}
   27ab2:	bd30      	pop	{r4, r5, pc}
		if (group->mg_group_id == group_id) {
   27ab4:	8958      	ldrh	r0, [r3, #10]
   27ab6:	4290      	cmp	r0, r2
   27ab8:	d10a      	bne.n	27ad0 <mgmt_find_handler+0x2c>
			if (command_id >= group->mg_handlers_count) {
   27aba:	8918      	ldrh	r0, [r3, #8]
   27abc:	4288      	cmp	r0, r1
   27abe:	d9f7      	bls.n	27ab0 <mgmt_find_handler+0xc>
			if (!group->mg_handlers[command_id].mh_read &&
   27ac0:	685d      	ldr	r5, [r3, #4]
   27ac2:	1928      	adds	r0, r5, r4
   27ac4:	592d      	ldr	r5, [r5, r4]
   27ac6:	2d00      	cmp	r5, #0
   27ac8:	d1f3      	bne.n	27ab2 <mgmt_find_handler+0xe>
   27aca:	6845      	ldr	r5, [r0, #4]
   27acc:	2d00      	cmp	r5, #0
   27ace:	d1f0      	bne.n	27ab2 <mgmt_find_handler+0xe>
	for (group = mgmt_group_list; group != NULL; group = group->mg_next) {
   27ad0:	681b      	ldr	r3, [r3, #0]
   27ad2:	e7ec      	b.n	27aae <mgmt_find_handler+0xa>
   27ad4:	20003070 	.word	0x20003070

00027ad8 <mgmt_write_rsp_status>:

int
mgmt_write_rsp_status(struct mgmt_ctxt *ctxt, int errcode)
{
   27ad8:	b570      	push	{r4, r5, r6, lr}
   27ada:	4604      	mov	r4, r0
CBOR_API CborError cbor_encode_negative_int(CborEncoder *encoder, uint64_t absolute_value);
CBOR_API CborError cbor_encode_simple_value(CborEncoder *encoder, uint8_t value);
CBOR_API CborError cbor_encode_tag(CborEncoder *encoder, CborTag tag);
CBOR_API CborError cbor_encode_text_string(CborEncoder *encoder, const char *string, size_t length);
CBOR_INLINE_API CborError cbor_encode_text_stringz(CborEncoder *encoder, const char *string)
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   27adc:	4808      	ldr	r0, [pc, #32]	; (27b00 <mgmt_write_rsp_status+0x28>)
   27ade:	460d      	mov	r5, r1
   27ae0:	f006 fa65 	bl	2dfae <strlen>
   27ae4:	4906      	ldr	r1, [pc, #24]	; (27b00 <mgmt_write_rsp_status+0x28>)
   27ae6:	4602      	mov	r2, r0
   27ae8:	4620      	mov	r0, r4
   27aea:	f009 fc02 	bl	312f2 <cbor_encode_text_string>
	int rc;

	rc = cbor_encode_text_stringz(&ctxt->encoder, "rc");
	if (rc != 0) {
   27aee:	b930      	cbnz	r0, 27afe <mgmt_write_rsp_status+0x26>
		return rc;
	}

	rc = cbor_encode_int(&ctxt->encoder, errcode);
   27af0:	462a      	mov	r2, r5
   27af2:	17eb      	asrs	r3, r5, #31
   27af4:	4620      	mov	r0, r4
		}
	}
#endif

	return 0;
}
   27af6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	rc = cbor_encode_int(&ctxt->encoder, errcode);
   27afa:	f009 bbec 	b.w	312d6 <cbor_encode_int>
}
   27afe:	bd70      	pop	{r4, r5, r6, pc}
   27b00:	00036644 	.word	0x00036644

00027b04 <mgmt_evt>:
	evt_cb = cb;
}

void
mgmt_evt(uint8_t opcode, uint16_t group, uint8_t id, void *arg)
{
   27b04:	b410      	push	{r4}
	if (evt_cb) {
   27b06:	4c04      	ldr	r4, [pc, #16]	; (27b18 <mgmt_evt+0x14>)
   27b08:	6824      	ldr	r4, [r4, #0]
   27b0a:	b114      	cbz	r4, 27b12 <mgmt_evt+0xe>
		evt_cb(opcode, group, id, arg);
   27b0c:	46a4      	mov	ip, r4
	}
}
   27b0e:	bc10      	pop	{r4}
		evt_cb(opcode, group, id, arg);
   27b10:	4760      	bx	ip
}
   27b12:	bc10      	pop	{r4}
   27b14:	4770      	bx	lr
   27b16:	bf00      	nop
   27b18:	2000306c 	.word	0x2000306c

00027b1c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   27b1c:	4b02      	ldr	r3, [pc, #8]	; (27b28 <net_buf_pool_get+0xc>)
   27b1e:	222c      	movs	r2, #44	; 0x2c
   27b20:	fb02 3000 	mla	r0, r2, r0, r3
   27b24:	4770      	bx	lr
   27b26:	bf00      	nop
   27b28:	20000c6c 	.word	0x20000c6c

00027b2c <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   27b2c:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   27b2e:	4b06      	ldr	r3, [pc, #24]	; (27b48 <net_buf_id+0x1c>)
   27b30:	212c      	movs	r1, #44	; 0x2c
   27b32:	fb01 3302 	mla	r3, r1, r2, r3
   27b36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   27b38:	7f1b      	ldrb	r3, [r3, #28]
   27b3a:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   27b3c:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   27b3e:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   27b42:	fbb0 f0f3 	udiv	r0, r0, r3
   27b46:	4770      	bx	lr
   27b48:	20000c6c 	.word	0x20000c6c

00027b4c <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   27b4c:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   27b4e:	4b0a      	ldr	r3, [pc, #40]	; (27b78 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   27b50:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   27b52:	242c      	movs	r4, #44	; 0x2c
   27b54:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   27b58:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   27b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   27b5c:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   27b5e:	6823      	ldr	r3, [r4, #0]
   27b60:	429a      	cmp	r2, r3
   27b62:	bf94      	ite	ls
   27b64:	600a      	strls	r2, [r1, #0]
   27b66:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   27b68:	f7ff ffe0 	bl	27b2c <net_buf_id>
   27b6c:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   27b70:	fb02 3000 	mla	r0, r2, r0, r3
   27b74:	bd10      	pop	{r4, pc}
   27b76:	bf00      	nop
   27b78:	20000c6c 	.word	0x20000c6c

00027b7c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   27b7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27b80:	4605      	mov	r5, r0
   27b82:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   27b84:	4610      	mov	r0, r2
   27b86:	4619      	mov	r1, r3
{
   27b88:	4691      	mov	r9, r2
   27b8a:	4698      	mov	r8, r3
   27b8c:	4617      	mov	r7, r2
   27b8e:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   27b90:	f00a f85e 	bl	31c50 <sys_clock_timeout_end_calc>
   27b94:	4682      	mov	sl, r0
   27b96:	468b      	mov	fp, r1
	__asm__ volatile(
   27b98:	f04f 0320 	mov.w	r3, #32
   27b9c:	f3ef 8111 	mrs	r1, BASEPRI
   27ba0:	f383 8812 	msr	BASEPRI_MAX, r3
   27ba4:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   27ba8:	8b6b      	ldrh	r3, [r5, #26]
   27baa:	2b00      	cmp	r3, #0
   27bac:	d05a      	beq.n	27c64 <net_buf_alloc_len+0xe8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   27bae:	8b2a      	ldrh	r2, [r5, #24]
   27bb0:	429a      	cmp	r2, r3
   27bb2:	d93e      	bls.n	27c32 <net_buf_alloc_len+0xb6>
   27bb4:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   27bb6:	2200      	movs	r2, #0
   27bb8:	2300      	movs	r3, #0
   27bba:	4628      	mov	r0, r5
   27bbc:	f002 fd32 	bl	2a624 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   27bc0:	9900      	ldr	r1, [sp, #0]
   27bc2:	4604      	mov	r4, r0
   27bc4:	2800      	cmp	r0, #0
   27bc6:	d034      	beq.n	27c32 <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   27bc8:	f381 8811 	msr	BASEPRI, r1
   27bcc:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   27bd0:	9b01      	ldr	r3, [sp, #4]
   27bd2:	2b00      	cmp	r3, #0
   27bd4:	d056      	beq.n	27c84 <net_buf_alloc_len+0x108>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   27bd6:	ea58 0309 	orrs.w	r3, r8, r9
   27bda:	d00f      	beq.n	27bfc <net_buf_alloc_len+0x80>
   27bdc:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   27be0:	bf08      	it	eq
   27be2:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   27be6:	d009      	beq.n	27bfc <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   27be8:	f003 fc04 	bl	2b3f4 <sys_clock_tick_get>
   27bec:	ebba 0700 	subs.w	r7, sl, r0
   27bf0:	eb6b 0601 	sbc.w	r6, fp, r1
   27bf4:	2e00      	cmp	r6, #0
   27bf6:	bfbc      	itt	lt
   27bf8:	2700      	movlt	r7, #0
   27bfa:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   27bfc:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   27bfe:	f8df 809c 	ldr.w	r8, [pc, #156]	; 27c9c <net_buf_alloc_len+0x120>
   27c02:	f04f 092c 	mov.w	r9, #44	; 0x2c
   27c06:	fb09 8303 	mla	r3, r9, r3, r8
   27c0a:	463a      	mov	r2, r7
   27c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   27c0e:	681b      	ldr	r3, [r3, #0]
   27c10:	a901      	add	r1, sp, #4
   27c12:	681d      	ldr	r5, [r3, #0]
   27c14:	4620      	mov	r0, r4
   27c16:	4633      	mov	r3, r6
   27c18:	47a8      	blx	r5
   27c1a:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   27c1c:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   27c1e:	2800      	cmp	r0, #0
   27c20:	d131      	bne.n	27c86 <net_buf_alloc_len+0x10a>
	k_lifo_put(&pool->free, buf);
   27c22:	79a0      	ldrb	r0, [r4, #6]
   27c24:	4621      	mov	r1, r4
   27c26:	fb00 8009 	mla	r0, r0, r9, r8
   27c2a:	f009 fd7e 	bl	3172a <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   27c2e:	462c      	mov	r4, r5
}
   27c30:	e024      	b.n	27c7c <net_buf_alloc_len+0x100>
		uninit_count = pool->uninit_count--;
   27c32:	8b68      	ldrh	r0, [r5, #26]
   27c34:	1e43      	subs	r3, r0, #1
   27c36:	836b      	strh	r3, [r5, #26]
   27c38:	f381 8811 	msr	BASEPRI, r1
   27c3c:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   27c40:	7f2a      	ldrb	r2, [r5, #28]
   27c42:	f102 0417 	add.w	r4, r2, #23
   27c46:	f024 0303 	bic.w	r3, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   27c4a:	8b2c      	ldrh	r4, [r5, #24]
   27c4c:	1a20      	subs	r0, r4, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   27c4e:	6aac      	ldr	r4, [r5, #40]	; 0x28
   27c50:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   27c54:	4811      	ldr	r0, [pc, #68]	; (27c9c <net_buf_alloc_len+0x120>)
   27c56:	4b12      	ldr	r3, [pc, #72]	; (27ca0 <net_buf_alloc_len+0x124>)
	buf->user_data_size = pool->user_data_size;
   27c58:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   27c5a:	1a2d      	subs	r5, r5, r0
   27c5c:	10ad      	asrs	r5, r5, #2
   27c5e:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   27c60:	71a5      	strb	r5, [r4, #6]
		goto success;
   27c62:	e7b5      	b.n	27bd0 <net_buf_alloc_len+0x54>
   27c64:	f381 8811 	msr	BASEPRI, r1
   27c68:	f3bf 8f6f 	isb	sy
   27c6c:	464a      	mov	r2, r9
   27c6e:	4643      	mov	r3, r8
   27c70:	4628      	mov	r0, r5
   27c72:	f002 fcd7 	bl	2a624 <z_impl_k_queue_get>
	if (!buf) {
   27c76:	4604      	mov	r4, r0
   27c78:	2800      	cmp	r0, #0
   27c7a:	d1a9      	bne.n	27bd0 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   27c7c:	4620      	mov	r0, r4
   27c7e:	b003      	add	sp, #12
   27c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   27c84:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   27c86:	2300      	movs	r3, #0
	buf->ref   = 1U;
   27c88:	2201      	movs	r2, #1
	buf->frags = NULL;
   27c8a:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   27c8c:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   27c8e:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   27c90:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   27c92:	6923      	ldr	r3, [r4, #16]
   27c94:	81e2      	strh	r2, [r4, #14]
   27c96:	60a3      	str	r3, [r4, #8]
	return buf;
   27c98:	e7f0      	b.n	27c7c <net_buf_alloc_len+0x100>
   27c9a:	bf00      	nop
   27c9c:	20000c6c 	.word	0x20000c6c
   27ca0:	ba2e8ba3 	.word	0xba2e8ba3

00027ca4 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   27ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27ca8:	4d16      	ldr	r5, [pc, #88]	; (27d04 <net_buf_unref+0x60>)
   27caa:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   27cac:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   27cae:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   27cb0:	b90c      	cbnz	r4, 27cb6 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   27cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   27cb6:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   27cb8:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   27cbc:	3b01      	subs	r3, #1
   27cbe:	b2db      	uxtb	r3, r3
   27cc0:	7123      	strb	r3, [r4, #4]
   27cc2:	2b00      	cmp	r3, #0
   27cc4:	d1f5      	bne.n	27cb2 <net_buf_unref+0xe>
		if (buf->__buf) {
   27cc6:	6921      	ldr	r1, [r4, #16]
   27cc8:	b159      	cbz	r1, 27ce2 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   27cca:	7963      	ldrb	r3, [r4, #5]
   27ccc:	079b      	lsls	r3, r3, #30
   27cce:	d407      	bmi.n	27ce0 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   27cd0:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   27cd2:	fb07 5303 	mla	r3, r7, r3, r5
   27cd6:	4620      	mov	r0, r4
   27cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   27cda:	681b      	ldr	r3, [r3, #0]
   27cdc:	689b      	ldr	r3, [r3, #8]
   27cde:	4798      	blx	r3
			buf->__buf = NULL;
   27ce0:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   27ce2:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   27ce4:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   27ce6:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   27cea:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   27cec:	6a1b      	ldr	r3, [r3, #32]
   27cee:	b11b      	cbz	r3, 27cf8 <net_buf_unref+0x54>
			pool->destroy(buf);
   27cf0:	4620      	mov	r0, r4
   27cf2:	4798      	blx	r3
{
   27cf4:	4644      	mov	r4, r8
   27cf6:	e7db      	b.n	27cb0 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   27cf8:	4621      	mov	r1, r4
   27cfa:	fb00 5007 	mla	r0, r0, r7, r5
   27cfe:	f009 fd14 	bl	3172a <k_queue_prepend>
}
   27d02:	e7f7      	b.n	27cf4 <net_buf_unref+0x50>
   27d04:	20000c6c 	.word	0x20000c6c

00027d08 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   27d08:	4b08      	ldr	r3, [pc, #32]	; (27d2c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   27d0a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   27d0c:	1ac3      	subs	r3, r0, r3
{
   27d0e:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   27d10:	4907      	ldr	r1, [pc, #28]	; (27d30 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   27d12:	109b      	asrs	r3, r3, #2
{
   27d14:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   27d16:	4359      	muls	r1, r3
   27d18:	4806      	ldr	r0, [pc, #24]	; (27d34 <onoff_stop+0x2c>)
   27d1a:	2240      	movs	r2, #64	; 0x40
   27d1c:	f008 ff09 	bl	30b32 <stop>
	notify(mgr, res);
   27d20:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   27d22:	4601      	mov	r1, r0
	notify(mgr, res);
   27d24:	4620      	mov	r0, r4
}
   27d26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   27d2a:	4718      	bx	r3
   27d2c:	20003084 	.word	0x20003084
   27d30:	b6db6db7 	.word	0xb6db6db7
   27d34:	00032044 	.word	0x00032044

00027d38 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   27d38:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   27d3a:	4c0c      	ldr	r4, [pc, #48]	; (27d6c <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   27d3c:	4a0c      	ldr	r2, [pc, #48]	; (27d70 <onoff_start+0x38>)
   27d3e:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   27d40:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   27d42:	9300      	str	r3, [sp, #0]
{
   27d44:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   27d46:	460b      	mov	r3, r1
   27d48:	490a      	ldr	r1, [pc, #40]	; (27d74 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   27d4a:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   27d4c:	4361      	muls	r1, r4
{
   27d4e:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   27d50:	4809      	ldr	r0, [pc, #36]	; (27d78 <onoff_start+0x40>)
   27d52:	f008 ff1b 	bl	30b8c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   27d56:	1e01      	subs	r1, r0, #0
   27d58:	da05      	bge.n	27d66 <onoff_start+0x2e>
		notify(mgr, err);
   27d5a:	4630      	mov	r0, r6
   27d5c:	462b      	mov	r3, r5
	}
}
   27d5e:	b002      	add	sp, #8
   27d60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   27d64:	4718      	bx	r3
}
   27d66:	b002      	add	sp, #8
   27d68:	bd70      	pop	{r4, r5, r6, pc}
   27d6a:	bf00      	nop
   27d6c:	20003084 	.word	0x20003084
   27d70:	00030bfb 	.word	0x00030bfb
   27d74:	b6db6db7 	.word	0xb6db6db7
   27d78:	00032044 	.word	0x00032044

00027d7c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   27d7c:	2200      	movs	r2, #0
{
   27d7e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   27d80:	2101      	movs	r1, #1
{
   27d82:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   27d84:	4610      	mov	r0, r2
   27d86:	f7e8 fd87 	bl	10898 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   27d8a:	480f      	ldr	r0, [pc, #60]	; (27dc8 <clk_init+0x4c>)
   27d8c:	f001 fc04 	bl	29598 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   27d90:	4b0e      	ldr	r3, [pc, #56]	; (27dcc <clk_init+0x50>)
   27d92:	4298      	cmp	r0, r3
   27d94:	d115      	bne.n	27dc2 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   27d96:	f009 f98b 	bl	310b0 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   27d9a:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   27d9c:	490c      	ldr	r1, [pc, #48]	; (27dd0 <clk_init+0x54>)
   27d9e:	4630      	mov	r0, r6
   27da0:	f003 fe64 	bl	2ba6c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   27da4:	2800      	cmp	r0, #0
   27da6:	db0b      	blt.n	27dc0 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
   27da8:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   27daa:	4909      	ldr	r1, [pc, #36]	; (27dd0 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   27dac:	2501      	movs	r5, #1
   27dae:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   27db0:	f104 001c 	add.w	r0, r4, #28
   27db4:	f003 fe5a 	bl	2ba6c <onoff_manager_init>
		if (err < 0) {
   27db8:	2800      	cmp	r0, #0
   27dba:	db01      	blt.n	27dc0 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   27dbc:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   27dbe:	2000      	movs	r0, #0
}
   27dc0:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   27dc2:	f06f 0004 	mvn.w	r0, #4
   27dc6:	e7fb      	b.n	27dc0 <clk_init+0x44>
   27dc8:	00027e09 	.word	0x00027e09
   27dcc:	0bad0000 	.word	0x0bad0000
   27dd0:	00034030 	.word	0x00034030

00027dd4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   27dd4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   27dd6:	230c      	movs	r3, #12
   27dd8:	4809      	ldr	r0, [pc, #36]	; (27e00 <clkstarted_handle.constprop.0+0x2c>)
   27dda:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   27ddc:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   27dde:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   27de0:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   27de4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   27de6:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   27de8:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   27dea:	4418      	add	r0, r3
   27dec:	f008 fe8e 	bl	30b0c <set_on_state>
	if (callback) {
   27df0:	b12d      	cbz	r5, 27dfe <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   27df2:	4632      	mov	r2, r6
   27df4:	462b      	mov	r3, r5
   27df6:	4803      	ldr	r0, [pc, #12]	; (27e04 <clkstarted_handle.constprop.0+0x30>)
}
   27df8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   27dfc:	4718      	bx	r3
}
   27dfe:	bd70      	pop	{r4, r5, r6, pc}
   27e00:	20003084 	.word	0x20003084
   27e04:	00032044 	.word	0x00032044

00027e08 <clock_event_handler>:
	switch (event) {
   27e08:	b110      	cbz	r0, 27e10 <clock_event_handler+0x8>
   27e0a:	2801      	cmp	r0, #1
   27e0c:	d004      	beq.n	27e18 <clock_event_handler+0x10>
   27e0e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   27e10:	4b03      	ldr	r3, [pc, #12]	; (27e20 <clock_event_handler+0x18>)
   27e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   27e14:	075b      	lsls	r3, r3, #29
   27e16:	d101      	bne.n	27e1c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   27e18:	f7ff bfdc 	b.w	27dd4 <clkstarted_handle.constprop.0>
}
   27e1c:	4770      	bx	lr
   27e1e:	bf00      	nop
   27e20:	20003084 	.word	0x20003084

00027e24 <generic_hfclk_start>:
{
   27e24:	b508      	push	{r3, lr}
	__asm__ volatile(
   27e26:	f04f 0320 	mov.w	r3, #32
   27e2a:	f3ef 8111 	mrs	r1, BASEPRI
   27e2e:	f383 8812 	msr	BASEPRI_MAX, r3
   27e32:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   27e36:	4a12      	ldr	r2, [pc, #72]	; (27e80 <generic_hfclk_start+0x5c>)
   27e38:	6813      	ldr	r3, [r2, #0]
   27e3a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   27e3e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   27e42:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   27e44:	d00c      	beq.n	27e60 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   27e46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   27e4a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   27e4e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   27e52:	f013 0301 	ands.w	r3, r3, #1
   27e56:	d003      	beq.n	27e60 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   27e58:	480a      	ldr	r0, [pc, #40]	; (27e84 <generic_hfclk_start+0x60>)
   27e5a:	f008 fe57 	bl	30b0c <set_on_state>
			already_started = true;
   27e5e:	2301      	movs	r3, #1
	__asm__ volatile(
   27e60:	f381 8811 	msr	BASEPRI, r1
   27e64:	f3bf 8f6f 	isb	sy
	if (already_started) {
   27e68:	b123      	cbz	r3, 27e74 <generic_hfclk_start+0x50>
}
   27e6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   27e6e:	2000      	movs	r0, #0
   27e70:	f7ff bfb0 	b.w	27dd4 <clkstarted_handle.constprop.0>
}
   27e74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   27e78:	2001      	movs	r0, #1
   27e7a:	f009 b923 	b.w	310c4 <nrfx_clock_start>
   27e7e:	bf00      	nop
   27e80:	200030d4 	.word	0x200030d4
   27e84:	200030c4 	.word	0x200030c4

00027e88 <api_blocking_start>:
{
   27e88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   27e8a:	2200      	movs	r2, #0
   27e8c:	2301      	movs	r3, #1
   27e8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   27e92:	ab04      	add	r3, sp, #16
   27e94:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   27e98:	4a09      	ldr	r2, [pc, #36]	; (27ec0 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   27e9a:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   27e9e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   27ea0:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   27ea4:	f008 fea2 	bl	30bec <api_start>
	if (err < 0) {
   27ea8:	2800      	cmp	r0, #0
   27eaa:	db05      	blt.n	27eb8 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   27eac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   27eb0:	2300      	movs	r3, #0
   27eb2:	4668      	mov	r0, sp
   27eb4:	f002 fc10 	bl	2a6d8 <z_impl_k_sem_take>
}
   27eb8:	b007      	add	sp, #28
   27eba:	f85d fb04 	ldr.w	pc, [sp], #4
   27ebe:	bf00      	nop
   27ec0:	00030c19 	.word	0x00030c19

00027ec4 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27ec4:	4b09      	ldr	r3, [pc, #36]	; (27eec <generic_hfclk_stop+0x28>)
   27ec6:	f3bf 8f5b 	dmb	ish
   27eca:	e853 2f00 	ldrex	r2, [r3]
   27ece:	f022 0102 	bic.w	r1, r2, #2
   27ed2:	e843 1000 	strex	r0, r1, [r3]
   27ed6:	2800      	cmp	r0, #0
   27ed8:	d1f7      	bne.n	27eca <generic_hfclk_stop+0x6>
   27eda:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   27ede:	07d3      	lsls	r3, r2, #31
   27ee0:	d402      	bmi.n	27ee8 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   27ee2:	2001      	movs	r0, #1
   27ee4:	f001 bb68 	b.w	295b8 <nrfx_clock_stop>
}
   27ee8:	4770      	bx	lr
   27eea:	bf00      	nop
   27eec:	200030d4 	.word	0x200030d4

00027ef0 <z_nrf_clock_control_get_onoff>:
}
   27ef0:	4a02      	ldr	r2, [pc, #8]	; (27efc <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   27ef2:	b2c3      	uxtb	r3, r0
}
   27ef4:	201c      	movs	r0, #28
   27ef6:	fb03 2000 	mla	r0, r3, r0, r2
   27efa:	4770      	bx	lr
   27efc:	20003084 	.word	0x20003084

00027f00 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27f00:	4b09      	ldr	r3, [pc, #36]	; (27f28 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
   27f02:	f3bf 8f5b 	dmb	ish
   27f06:	e853 2f00 	ldrex	r2, [r3]
   27f0a:	f042 0101 	orr.w	r1, r2, #1
   27f0e:	e843 1000 	strex	r0, r1, [r3]
   27f12:	2800      	cmp	r0, #0
   27f14:	d1f7      	bne.n	27f06 <z_nrf_clock_bt_ctlr_hf_request+0x6>
   27f16:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   27f1a:	0793      	lsls	r3, r2, #30
   27f1c:	d402      	bmi.n	27f24 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   27f1e:	2001      	movs	r0, #1
   27f20:	f009 b8d0 	b.w	310c4 <nrfx_clock_start>
}
   27f24:	4770      	bx	lr
   27f26:	bf00      	nop
   27f28:	200030d4 	.word	0x200030d4

00027f2c <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27f2c:	4b09      	ldr	r3, [pc, #36]	; (27f54 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
   27f2e:	f3bf 8f5b 	dmb	ish
   27f32:	e853 2f00 	ldrex	r2, [r3]
   27f36:	f022 0101 	bic.w	r1, r2, #1
   27f3a:	e843 1000 	strex	r0, r1, [r3]
   27f3e:	2800      	cmp	r0, #0
   27f40:	d1f7      	bne.n	27f32 <z_nrf_clock_bt_ctlr_hf_release+0x6>
   27f42:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
   27f46:	0793      	lsls	r3, r2, #30
   27f48:	d402      	bmi.n	27f50 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   27f4a:	2001      	movs	r0, #1
   27f4c:	f001 bb34 	b.w	295b8 <nrfx_clock_stop>
}
   27f50:	4770      	bx	lr
   27f52:	bf00      	nop
   27f54:	200030d4 	.word	0x200030d4

00027f58 <z_nrf_clock_control_lf_on>:
{
   27f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   27f5c:	4939      	ldr	r1, [pc, #228]	; (28044 <z_nrf_clock_control_lf_on+0xec>)
   27f5e:	f3bf 8f5b 	dmb	ish
   27f62:	4607      	mov	r7, r0
   27f64:	2201      	movs	r2, #1
   27f66:	e851 3f00 	ldrex	r3, [r1]
   27f6a:	e841 2000 	strex	r0, r2, [r1]
   27f6e:	2800      	cmp	r0, #0
   27f70:	d1f9      	bne.n	27f66 <z_nrf_clock_control_lf_on+0xe>
   27f72:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   27f76:	b933      	cbnz	r3, 27f86 <z_nrf_clock_control_lf_on+0x2e>
   27f78:	4933      	ldr	r1, [pc, #204]	; (28048 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
   27f7a:	4834      	ldr	r0, [pc, #208]	; (2804c <z_nrf_clock_control_lf_on+0xf4>)
   27f7c:	604b      	str	r3, [r1, #4]
   27f7e:	60cb      	str	r3, [r1, #12]
   27f80:	608a      	str	r2, [r1, #8]
   27f82:	f003 fd86 	bl	2ba92 <onoff_request>
	switch (start_mode) {
   27f86:	1e7b      	subs	r3, r7, #1
   27f88:	2b01      	cmp	r3, #1
   27f8a:	d82f      	bhi.n	27fec <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   27f8c:	2f01      	cmp	r7, #1
   27f8e:	d107      	bne.n	27fa0 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   27f90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   27f94:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   27f98:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   27f9c:	2b01      	cmp	r3, #1
   27f9e:	d025      	beq.n	27fec <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   27fa0:	f009 fb19 	bl	315d6 <k_is_in_isr>
   27fa4:	4604      	mov	r4, r0
   27fa6:	b918      	cbnz	r0, 27fb0 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   27fa8:	4b29      	ldr	r3, [pc, #164]	; (28050 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
   27faa:	781b      	ldrb	r3, [r3, #0]
   27fac:	2b00      	cmp	r3, #0
   27fae:	d141      	bne.n	28034 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
   27fb0:	f04f 0320 	mov.w	r3, #32
   27fb4:	f3ef 8611 	mrs	r6, BASEPRI
   27fb8:	f383 8812 	msr	BASEPRI_MAX, r3
   27fbc:	f3bf 8f6f 	isb	sy
   27fc0:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   27fc2:	f8df 8090 	ldr.w	r8, [pc, #144]	; 28054 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   27fc6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   27fca:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   27fce:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   27fd2:	03d2      	lsls	r2, r2, #15
   27fd4:	d50c      	bpl.n	27ff0 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   27fd6:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   27fda:	2b01      	cmp	r3, #1
   27fdc:	d001      	beq.n	27fe2 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   27fde:	2f01      	cmp	r7, #1
   27fe0:	d106      	bne.n	27ff0 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
   27fe2:	b30c      	cbz	r4, 28028 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   27fe4:	f386 8811 	msr	BASEPRI, r6
   27fe8:	f3bf 8f6f 	isb	sy
}
   27fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   27ff0:	b1ac      	cbz	r4, 2801e <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   27ff2:	4630      	mov	r0, r6
   27ff4:	f7e8 fbb4 	bl	10760 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   27ff8:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   27ffc:	2b00      	cmp	r3, #0
   27ffe:	d1e4      	bne.n	27fca <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   28000:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   28004:	2a00      	cmp	r2, #0
   28006:	d0e0      	beq.n	27fca <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   28008:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   2800c:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   28010:	2301      	movs	r3, #1
   28012:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
   28016:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2801a:	60ab      	str	r3, [r5, #8]
}
   2801c:	e7d5      	b.n	27fca <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
   2801e:	2100      	movs	r1, #0
   28020:	2021      	movs	r0, #33	; 0x21
   28022:	f003 f819 	bl	2b058 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   28026:	e7e7      	b.n	27ff8 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
   28028:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2802c:	2202      	movs	r2, #2
   2802e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   28032:	e7db      	b.n	27fec <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
   28034:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   28038:	2202      	movs	r2, #2
   2803a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   2803e:	4606      	mov	r6, r0
}
   28040:	e7bf      	b.n	27fc2 <z_nrf_clock_control_lf_on+0x6a>
   28042:	bf00      	nop
   28044:	200030d8 	.word	0x200030d8
   28048:	20003074 	.word	0x20003074
   2804c:	200030a0 	.word	0x200030a0
   28050:	2000383f 	.word	0x2000383f
   28054:	e000e100 	.word	0xe000e100

00028058 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   28058:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   2805a:	4b08      	ldr	r3, [pc, #32]	; (2807c <uart_console_init+0x24>)
   2805c:	4808      	ldr	r0, [pc, #32]	; (28080 <uart_console_init+0x28>)
   2805e:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   28060:	f009 fa13 	bl	3148a <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   28064:	b138      	cbz	r0, 28076 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   28066:	4807      	ldr	r0, [pc, #28]	; (28084 <uart_console_init+0x2c>)
   28068:	f7e9 f958 	bl	1131c <__stdout_hook_install>
	__printk_hook_install(console_out);
   2806c:	4805      	ldr	r0, [pc, #20]	; (28084 <uart_console_init+0x2c>)
   2806e:	f7e6 f8f7 	bl	e260 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   28072:	2000      	movs	r0, #0
}
   28074:	bd08      	pop	{r3, pc}
		return -ENODEV;
   28076:	f06f 0012 	mvn.w	r0, #18
   2807a:	e7fb      	b.n	28074 <uart_console_init+0x1c>
   2807c:	200030dc 	.word	0x200030dc
   28080:	000320bc 	.word	0x000320bc
   28084:	00028089 	.word	0x00028089

00028088 <console_out>:
	if ('\n' == c) {
   28088:	280a      	cmp	r0, #10
{
   2808a:	b538      	push	{r3, r4, r5, lr}
   2808c:	4d07      	ldr	r5, [pc, #28]	; (280ac <console_out+0x24>)
   2808e:	4604      	mov	r4, r0
	if ('\n' == c) {
   28090:	d104      	bne.n	2809c <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
   28092:	6828      	ldr	r0, [r5, #0]
   28094:	6883      	ldr	r3, [r0, #8]
   28096:	210d      	movs	r1, #13
   28098:	685b      	ldr	r3, [r3, #4]
   2809a:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   2809c:	6828      	ldr	r0, [r5, #0]
   2809e:	6883      	ldr	r3, [r0, #8]
   280a0:	b2e1      	uxtb	r1, r4
   280a2:	685b      	ldr	r3, [r3, #4]
   280a4:	4798      	blx	r3
}
   280a6:	4620      	mov	r0, r4
   280a8:	bd38      	pop	{r3, r4, r5, pc}
   280aa:	bf00      	nop
   280ac:	200030dc 	.word	0x200030dc

000280b0 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   280b0:	b530      	push	{r4, r5, lr}
	return port->config;
   280b2:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   280b4:	7b04      	ldrb	r4, [r0, #12]
   280b6:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
   280ba:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   280be:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   280c2:	b085      	sub	sp, #20
   280c4:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   280c8:	d104      	bne.n	280d4 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   280ca:	4628      	mov	r0, r5
   280cc:	f001 fd22 	bl	29b14 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   280d0:	2000      	movs	r0, #0
   280d2:	e032      	b.n	2813a <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
   280d4:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   280d8:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   280dc:	d12f      	bne.n	2813e <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   280de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   280e2:	bf0c      	ite	eq
   280e4:	2304      	moveq	r3, #4
   280e6:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   280e8:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   280ec:	6883      	ldr	r3, [r0, #8]
   280ee:	fa23 f101 	lsr.w	r1, r3, r1
   280f2:	07c9      	lsls	r1, r1, #31
   280f4:	d42f      	bmi.n	28156 <gpio_nrfx_pin_interrupt_configure+0xa6>
   280f6:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   280fa:	d12c      	bne.n	28156 <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   280fc:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
   280fe:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   28100:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
   28104:	4a1c      	ldr	r2, [pc, #112]	; (28178 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   28106:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   2810a:	bf18      	it	ne
   2810c:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   28110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   28114:	07db      	lsls	r3, r3, #31
   28116:	d41e      	bmi.n	28156 <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   28118:	f10d 0407 	add.w	r4, sp, #7
   2811c:	4621      	mov	r1, r4
   2811e:	4628      	mov	r0, r5
   28120:	f001 fc5c 	bl	299dc <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   28124:	4b15      	ldr	r3, [pc, #84]	; (2817c <gpio_nrfx_pin_interrupt_configure+0xcc>)
   28126:	4298      	cmp	r0, r3
   28128:	d114      	bne.n	28154 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
   2812a:	4620      	mov	r0, r4
   2812c:	f001 fca4 	bl	29a78 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   28130:	4b13      	ldr	r3, [pc, #76]	; (28180 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   28132:	4298      	cmp	r0, r3
   28134:	d00e      	beq.n	28154 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
   28136:	f06f 000b 	mvn.w	r0, #11
}
   2813a:	b005      	add	sp, #20
   2813c:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   2813e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   28142:	d005      	beq.n	28150 <gpio_nrfx_pin_interrupt_configure+0xa0>
   28144:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   28148:	bf0c      	ite	eq
   2814a:	2302      	moveq	r3, #2
   2814c:	2301      	movne	r3, #1
   2814e:	e7cb      	b.n	280e8 <gpio_nrfx_pin_interrupt_configure+0x38>
   28150:	2303      	movs	r3, #3
   28152:	e7c9      	b.n	280e8 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   28154:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   28156:	2300      	movs	r3, #0
   28158:	4619      	mov	r1, r3
   2815a:	aa02      	add	r2, sp, #8
   2815c:	4628      	mov	r0, r5
   2815e:	f001 fb17 	bl	29790 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   28162:	4b07      	ldr	r3, [pc, #28]	; (28180 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   28164:	4298      	cmp	r0, r3
   28166:	d104      	bne.n	28172 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   28168:	2101      	movs	r1, #1
   2816a:	4628      	mov	r0, r5
   2816c:	f001 fc8a 	bl	29a84 <nrfx_gpiote_trigger_enable>
   28170:	e7ae      	b.n	280d0 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   28172:	f06f 0004 	mvn.w	r0, #4
   28176:	e7e0      	b.n	2813a <gpio_nrfx_pin_interrupt_configure+0x8a>
   28178:	50000300 	.word	0x50000300
   2817c:	0bad0004 	.word	0x0bad0004
   28180:	0bad0000 	.word	0x0bad0000

00028184 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   28184:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   28186:	f001 fc67 	bl	29a58 <nrfx_gpiote_is_init>
   2818a:	4604      	mov	r4, r0
   2818c:	b968      	cbnz	r0, 281aa <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   2818e:	f001 fc3b 	bl	29a08 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   28192:	4b08      	ldr	r3, [pc, #32]	; (281b4 <gpio_nrfx_init+0x30>)
   28194:	4298      	cmp	r0, r3
   28196:	d10a      	bne.n	281ae <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   28198:	4807      	ldr	r0, [pc, #28]	; (281b8 <gpio_nrfx_init+0x34>)
   2819a:	4621      	mov	r1, r4
   2819c:	f001 fc18 	bl	299d0 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   281a0:	4622      	mov	r2, r4
   281a2:	2105      	movs	r1, #5
   281a4:	2006      	movs	r0, #6
   281a6:	f7e8 fb77 	bl	10898 <z_arm_irq_priority_set>
		return 0;
   281aa:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   281ac:	bd10      	pop	{r4, pc}
		return -EIO;
   281ae:	f06f 0004 	mvn.w	r0, #4
   281b2:	e7fb      	b.n	281ac <gpio_nrfx_init+0x28>
   281b4:	0bad0000 	.word	0x0bad0000
   281b8:	000281bd 	.word	0x000281bd

000281bc <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   281bc:	0942      	lsrs	r2, r0, #5
{
   281be:	b570      	push	{r4, r5, r6, lr}
   281c0:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   281c2:	d002      	beq.n	281ca <nrfx_gpio_handler+0xe>
   281c4:	2a01      	cmp	r2, #1
   281c6:	d015      	beq.n	281f4 <nrfx_gpio_handler+0x38>
}
   281c8:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   281ca:	4e0b      	ldr	r6, [pc, #44]	; (281f8 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
   281cc:	6932      	ldr	r2, [r6, #16]
   281ce:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   281d0:	2900      	cmp	r1, #0
   281d2:	d0f9      	beq.n	281c8 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   281d4:	f003 031f 	and.w	r3, r3, #31
   281d8:	2501      	movs	r5, #1
   281da:	680c      	ldr	r4, [r1, #0]
   281dc:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
   281de:	688a      	ldr	r2, [r1, #8]
   281e0:	402a      	ands	r2, r5
   281e2:	d002      	beq.n	281ea <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   281e4:	684b      	ldr	r3, [r1, #4]
   281e6:	4630      	mov	r0, r6
   281e8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   281ea:	2c00      	cmp	r4, #0
   281ec:	d0ec      	beq.n	281c8 <nrfx_gpio_handler+0xc>
   281ee:	4621      	mov	r1, r4
   281f0:	6824      	ldr	r4, [r4, #0]
   281f2:	e7f4      	b.n	281de <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   281f4:	4e01      	ldr	r6, [pc, #4]	; (281fc <nrfx_gpio_handler+0x40>)
   281f6:	e7e9      	b.n	281cc <nrfx_gpio_handler+0x10>
   281f8:	0003205c 	.word	0x0003205c
   281fc:	00032074 	.word	0x00032074

00028200 <gpio_nrfx_pin_configure>:
{
   28200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   28204:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   28206:	7b3b      	ldrb	r3, [r7, #12]
   28208:	f001 051f 	and.w	r5, r1, #31
{
   2820c:	b085      	sub	sp, #20
   2820e:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   28210:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   28214:	4614      	mov	r4, r2
   28216:	b9ca      	cbnz	r2, 2824c <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   28218:	a902      	add	r1, sp, #8
   2821a:	4628      	mov	r0, r5
   2821c:	f001 fbde 	bl	299dc <nrfx_gpiote_channel_get>
   28220:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   28222:	4628      	mov	r0, r5
   28224:	f001 fc9e 	bl	29b64 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   28228:	4b4a      	ldr	r3, [pc, #296]	; (28354 <gpio_nrfx_pin_configure+0x154>)
   2822a:	4298      	cmp	r0, r3
   2822c:	d004      	beq.n	28238 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   2822e:	f06f 0004 	mvn.w	r0, #4
}
   28232:	b005      	add	sp, #20
   28234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   28238:	4284      	cmp	r4, r0
   2823a:	d105      	bne.n	28248 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   2823c:	f89d 0008 	ldrb.w	r0, [sp, #8]
   28240:	f001 fc14 	bl	29a6c <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   28244:	42a0      	cmp	r0, r4
   28246:	d1f2      	bne.n	2822e <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   28248:	2000      	movs	r0, #0
   2824a:	e7f2      	b.n	28232 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   2824c:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   28250:	f10d 0103 	add.w	r1, sp, #3
   28254:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   28256:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   2825a:	f001 fbbf 	bl	299dc <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   2825e:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   28260:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   28262:	aa02      	add	r2, sp, #8
   28264:	4649      	mov	r1, r9
   28266:	4628      	mov	r0, r5
   28268:	f001 fa92 	bl	29790 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   2826c:	4b39      	ldr	r3, [pc, #228]	; (28354 <gpio_nrfx_pin_configure+0x154>)
   2826e:	4298      	cmp	r0, r3
   28270:	d002      	beq.n	28278 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   28272:	f06f 0015 	mvn.w	r0, #21
   28276:	e7dc      	b.n	28232 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   28278:	4580      	cmp	r8, r0
   2827a:	d103      	bne.n	28284 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   2827c:	f89d 0003 	ldrb.w	r0, [sp, #3]
   28280:	f001 fbf4 	bl	29a6c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   28284:	03a3      	lsls	r3, r4, #14
   28286:	d551      	bpl.n	2832c <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   28288:	f240 6306 	movw	r3, #1542	; 0x606
   2828c:	4023      	ands	r3, r4
   2828e:	f240 2206 	movw	r2, #518	; 0x206
   28292:	4293      	cmp	r3, r2
   28294:	d03b      	beq.n	2830e <gpio_nrfx_pin_configure+0x10e>
   28296:	d80c      	bhi.n	282b2 <gpio_nrfx_pin_configure+0xb2>
   28298:	2b06      	cmp	r3, #6
   2829a:	d015      	beq.n	282c8 <gpio_nrfx_pin_configure+0xc8>
   2829c:	d804      	bhi.n	282a8 <gpio_nrfx_pin_configure+0xa8>
   2829e:	b19b      	cbz	r3, 282c8 <gpio_nrfx_pin_configure+0xc8>
   282a0:	2b02      	cmp	r3, #2
   282a2:	d1e6      	bne.n	28272 <gpio_nrfx_pin_configure+0x72>
   282a4:	2304      	movs	r3, #4
   282a6:	e00f      	b.n	282c8 <gpio_nrfx_pin_configure+0xc8>
   282a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   282ac:	d1e1      	bne.n	28272 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   282ae:	2301      	movs	r3, #1
   282b0:	e00a      	b.n	282c8 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   282b2:	f240 4202 	movw	r2, #1026	; 0x402
   282b6:	4293      	cmp	r3, r2
   282b8:	d02b      	beq.n	28312 <gpio_nrfx_pin_configure+0x112>
   282ba:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
   282be:	d02a      	beq.n	28316 <gpio_nrfx_pin_configure+0x116>
   282c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   282c4:	d1d5      	bne.n	28272 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   282c6:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   282c8:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   282cc:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   282d0:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   282d4:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   282d6:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   282da:	bf54      	ite	pl
   282dc:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   282e0:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   282e2:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   282e4:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   282e8:	d517      	bpl.n	2831a <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   282ea:	687b      	ldr	r3, [r7, #4]
   282ec:	2101      	movs	r1, #1
   282ee:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   282f2:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   282f6:	2200      	movs	r2, #0
   282f8:	a901      	add	r1, sp, #4
   282fa:	4628      	mov	r0, r5
   282fc:	f001 faf6 	bl	298ec <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   28300:	4b14      	ldr	r3, [pc, #80]	; (28354 <gpio_nrfx_pin_configure+0x154>)
   28302:	4298      	cmp	r0, r3
   28304:	bf14      	ite	ne
   28306:	f06f 0015 	mvnne.w	r0, #21
   2830a:	2000      	moveq	r0, #0
   2830c:	e791      	b.n	28232 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   2830e:	2307      	movs	r3, #7
   28310:	e7da      	b.n	282c8 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
   28312:	2305      	movs	r3, #5
   28314:	e7d8      	b.n	282c8 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
   28316:	2303      	movs	r3, #3
   28318:	e7d6      	b.n	282c8 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   2831a:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   2831c:	bf41      	itttt	mi
   2831e:	687b      	ldrmi	r3, [r7, #4]
   28320:	2101      	movmi	r1, #1
   28322:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   28326:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   2832a:	e7e4      	b.n	282f6 <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
   2832c:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   2832e:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   28332:	bf54      	ite	pl
   28334:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   28338:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   2833a:	461a      	mov	r2, r3
   2833c:	a901      	add	r1, sp, #4
   2833e:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   28340:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   28344:	f001 fa24 	bl	29790 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   28348:	4b02      	ldr	r3, [pc, #8]	; (28354 <gpio_nrfx_pin_configure+0x154>)
   2834a:	4298      	cmp	r0, r3
   2834c:	f43f af7c 	beq.w	28248 <gpio_nrfx_pin_configure+0x48>
   28350:	e78f      	b.n	28272 <gpio_nrfx_pin_configure+0x72>
   28352:	bf00      	nop
   28354:	0bad0000 	.word	0x0bad0000

00028358 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   28358:	4b02      	ldr	r3, [pc, #8]	; (28364 <flash_nrf_pages_layout+0xc>)
   2835a:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   2835c:	2301      	movs	r3, #1
   2835e:	6013      	str	r3, [r2, #0]
}
   28360:	4770      	bx	lr
   28362:	bf00      	nop
   28364:	200030f8 	.word	0x200030f8

00028368 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   28368:	4800      	ldr	r0, [pc, #0]	; (2836c <flash_nrf_get_parameters+0x4>)
   2836a:	4770      	bx	lr
   2836c:	00034094 	.word	0x00034094

00028370 <flash_nrf_read.part.0>:
static int flash_nrf_read(const struct device *dev, off_t addr,
   28370:	b580      	push	{r7, lr}
		LOG_ERR("invalid address: 0x%08lx:%zu",
   28372:	4b0a      	ldr	r3, [pc, #40]	; (2839c <flash_nrf_read.part.0+0x2c>)
static int flash_nrf_read(const struct device *dev, off_t addr,
   28374:	af00      	add	r7, sp, #0
		LOG_ERR("invalid address: 0x%08lx:%zu",
   28376:	b088      	sub	sp, #32
   28378:	466a      	mov	r2, sp
   2837a:	e9c2 3004 	strd	r3, r0, [r2, #16]
   2837e:	2304      	movs	r3, #4
   28380:	6191      	str	r1, [r2, #24]
   28382:	f842 3f0c 	str.w	r3, [r2, #12]!
	z_impl_z_log_msg2_static_create(source, desc, package, data);
   28386:	4806      	ldr	r0, [pc, #24]	; (283a0 <flash_nrf_read.part.0+0x30>)
   28388:	2300      	movs	r3, #0
   2838a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   2838e:	f004 f89a 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
}
   28392:	f06f 0015 	mvn.w	r0, #21
   28396:	46bd      	mov	sp, r7
   28398:	bd80      	pop	{r7, pc}
   2839a:	bf00      	nop
   2839c:	0003667d 	.word	0x0003667d
   283a0:	00032494 	.word	0x00032494

000283a4 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   283a4:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   283a6:	2201      	movs	r2, #1
   283a8:	4611      	mov	r1, r2
   283aa:	4807      	ldr	r0, [pc, #28]	; (283c8 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   283ac:	4c07      	ldr	r4, [pc, #28]	; (283cc <nrf_flash_init+0x28>)
   283ae:	f009 fa02 	bl	317b6 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   283b2:	f000 fa11 	bl	287d8 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   283b6:	f008 ff11 	bl	311dc <nrfx_nvmc_flash_page_count_get>
   283ba:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   283bc:	f008 ff0a 	bl	311d4 <nrfx_nvmc_flash_page_size_get>
   283c0:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   283c2:	2000      	movs	r0, #0
   283c4:	bd10      	pop	{r4, pc}
   283c6:	bf00      	nop
   283c8:	20003100 	.word	0x20003100
   283cc:	200030f8 	.word	0x200030f8

000283d0 <restore_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
   283d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   283d4:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
   283d8:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   283dc:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   283e0:	f023 031f 	bic.w	r3, r3, #31
   283e4:	430b      	orrs	r3, r1
    pofcon |=
   283e6:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   283ea:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
   283ee:	4b02      	ldr	r3, [pc, #8]	; (283f8 <restore_pofwarn.part.0+0x28>)
   283f0:	2200      	movs	r2, #0
   283f2:	701a      	strb	r2, [r3, #0]
	}
}
   283f4:	4770      	bx	lr
   283f6:	bf00      	nop
   283f8:	2000342e 	.word	0x2000342e

000283fc <suspend_pofwarn>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   283fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   28400:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   28404:	2b08      	cmp	r3, #8
   28406:	d122      	bne.n	2844e <suspend_pofwarn+0x52>
    uint32_t pofcon = p_reg->POFCON;
   28408:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2840c:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
	if (enabled) {
   28410:	f011 0001 	ands.w	r0, r1, #1
   28414:	d01c      	beq.n	28450 <suspend_pofwarn+0x54>
    uint32_t pofcon = p_reg->POFCON;
   28416:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   2841a:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   2841e:	f020 001f 	bic.w	r0, r0, #31
    pofcon |=
   28422:	4308      	orrs	r0, r1
    p_reg->POFCON = pofcon;
   28424:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   28428:	f8d2 0108 	ldr.w	r0, [r2, #264]	; 0x108
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   2842c:	b158      	cbz	r0, 28446 <suspend_pofwarn+0x4a>
    uint32_t pofcon = p_reg->POFCON;
   2842e:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   28432:	f023 031f 	bic.w	r3, r3, #31
   28436:	430b      	orrs	r3, r1
    pofcon |=
   28438:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   2843c:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			return -ECANCELED;
   28440:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   28444:	4770      	bx	lr
		pofcon_enabled = enabled;
   28446:	4b03      	ldr	r3, [pc, #12]	; (28454 <suspend_pofwarn+0x58>)
   28448:	2201      	movs	r2, #1
   2844a:	701a      	strb	r2, [r3, #0]
   2844c:	4770      	bx	lr
		return 0;
   2844e:	2000      	movs	r0, #0
}
   28450:	4770      	bx	lr
   28452:	bf00      	nop
   28454:	2000342e 	.word	0x2000342e

00028458 <erase_op>:
{
   28458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2845a:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2845c:	f008 feba 	bl	311d4 <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   28460:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   28462:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   28464:	b10b      	cbz	r3, 2846a <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   28466:	f000 f9c9 	bl	287fc <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   2846a:	4f13      	ldr	r7, [pc, #76]	; (284b8 <erase_op+0x60>)
{
   2846c:	2600      	movs	r6, #0
		if (SUSPEND_POFWARN()) {
   2846e:	f7ff ffc5 	bl	283fc <suspend_pofwarn>
   28472:	b9e8      	cbnz	r0, 284b0 <erase_op+0x58>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   28474:	6860      	ldr	r0, [r4, #4]
   28476:	f001 fc7b 	bl	29d70 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   2847a:	68a3      	ldr	r3, [r4, #8]
   2847c:	1b5b      	subs	r3, r3, r5
   2847e:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   28480:	6863      	ldr	r3, [r4, #4]
   28482:	442b      	add	r3, r5
   28484:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   28486:	783b      	ldrb	r3, [r7, #0]
   28488:	b10b      	cbz	r3, 2848e <erase_op+0x36>
   2848a:	f7ff ffa1 	bl	283d0 <restore_pofwarn.part.0>
		if (e_ctx->enable_time_limit) {
   2848e:	7b23      	ldrb	r3, [r4, #12]
		i++;
   28490:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   28492:	b93b      	cbnz	r3, 284a4 <erase_op+0x4c>
	} while (e_ctx->len > 0);
   28494:	68a3      	ldr	r3, [r4, #8]
   28496:	2b00      	cmp	r3, #0
   28498:	d1e9      	bne.n	2846e <erase_op+0x16>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   2849a:	68a0      	ldr	r0, [r4, #8]
   2849c:	3800      	subs	r0, #0
   2849e:	bf18      	it	ne
   284a0:	2001      	movne	r0, #1
}
   284a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   284a4:	4630      	mov	r0, r6
   284a6:	f7e5 fbbb 	bl	dc20 <nrf_flash_sync_check_time_limit>
   284aa:	2800      	cmp	r0, #0
   284ac:	d0f2      	beq.n	28494 <erase_op+0x3c>
   284ae:	e7f4      	b.n	2849a <erase_op+0x42>
			return -ECANCELED;
   284b0:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   284b4:	e7f5      	b.n	284a2 <erase_op+0x4a>
   284b6:	bf00      	nop
   284b8:	2000342e 	.word	0x2000342e

000284bc <write_op>:
{
   284bc:	b570      	push	{r4, r5, r6, lr}
	if (w_ctx->enable_time_limit) {
   284be:	7b03      	ldrb	r3, [r0, #12]
{
   284c0:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   284c2:	b10b      	cbz	r3, 284c8 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   284c4:	f000 f99a 	bl	287fc <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   284c8:	4e19      	ldr	r6, [pc, #100]	; (28530 <write_op+0x74>)
{
   284ca:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   284cc:	68a3      	ldr	r3, [r4, #8]
   284ce:	2b03      	cmp	r3, #3
   284d0:	d806      	bhi.n	284e0 <write_op+0x24>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   284d2:	4a18      	ldr	r2, [pc, #96]	; (28534 <write_op+0x78>)
   284d4:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   284d8:	07db      	lsls	r3, r3, #31
   284da:	d5fb      	bpl.n	284d4 <write_op+0x18>
	return FLASH_OP_DONE;
   284dc:	2000      	movs	r0, #0
}
   284de:	bd70      	pop	{r4, r5, r6, pc}
		if (SUSPEND_POFWARN()) {
   284e0:	f7ff ff8c 	bl	283fc <suspend_pofwarn>
   284e4:	bb08      	cbnz	r0, 2852a <write_op+0x6e>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   284e6:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   284e8:	6860      	ldr	r0, [r4, #4]
   284ea:	6819      	ldr	r1, [r3, #0]
   284ec:	f001 fc60 	bl	29db0 <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   284f0:	7833      	ldrb	r3, [r6, #0]
   284f2:	b10b      	cbz	r3, 284f8 <write_op+0x3c>
   284f4:	f7ff ff6c 	bl	283d0 <restore_pofwarn.part.0>
	w_ctx->flash_addr += shift;
   284f8:	6863      	ldr	r3, [r4, #4]
   284fa:	3304      	adds	r3, #4
   284fc:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   284fe:	6823      	ldr	r3, [r4, #0]
   28500:	3304      	adds	r3, #4
   28502:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   28504:	68a3      	ldr	r3, [r4, #8]
   28506:	3b04      	subs	r3, #4
   28508:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   2850a:	7b23      	ldrb	r3, [r4, #12]
		i++;
   2850c:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   2850e:	2b00      	cmp	r3, #0
   28510:	d0dc      	beq.n	284cc <write_op+0x10>
			if (nrf_flash_sync_check_time_limit(i)) {
   28512:	4628      	mov	r0, r5
   28514:	f7e5 fb84 	bl	dc20 <nrf_flash_sync_check_time_limit>
   28518:	2800      	cmp	r0, #0
   2851a:	d0d7      	beq.n	284cc <write_op+0x10>
   2851c:	4a05      	ldr	r2, [pc, #20]	; (28534 <write_op+0x78>)
   2851e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   28522:	07d9      	lsls	r1, r3, #31
   28524:	d5fb      	bpl.n	2851e <write_op+0x62>
				return FLASH_OP_ONGOING;
   28526:	2001      	movs	r0, #1
   28528:	e7d9      	b.n	284de <write_op+0x22>
			return -ECANCELED;
   2852a:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   2852e:	e7d6      	b.n	284de <write_op+0x22>
   28530:	2000342e 	.word	0x2000342e
   28534:	4001e000 	.word	0x4001e000

00028538 <flash_nrf_erase>:
{
   28538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2853c:	b086      	sub	sp, #24
   2853e:	af00      	add	r7, sp, #0
   28540:	460e      	mov	r6, r1
   28542:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   28544:	f008 fe46 	bl	311d4 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   28548:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2854a:	4680      	mov	r8, r0
	if (is_regular_addr_valid(addr, size)) {
   2854c:	4630      	mov	r0, r6
   2854e:	f008 fbb7 	bl	30cc0 <is_regular_addr_valid>
   28552:	4603      	mov	r3, r0
   28554:	b3c8      	cbz	r0, 285ca <flash_nrf_erase+0x92>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   28556:	fbb6 f3f8 	udiv	r3, r6, r8
   2855a:	fb08 6313 	mls	r3, r8, r3, r6
   2855e:	b923      	cbnz	r3, 2856a <flash_nrf_erase+0x32>
   28560:	fbb5 f4f8 	udiv	r4, r5, r8
   28564:	fb08 5414 	mls	r4, r8, r4, r5
   28568:	b1bc      	cbz	r4, 2859a <flash_nrf_erase+0x62>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   2856a:	4b29      	ldr	r3, [pc, #164]	; (28610 <flash_nrf_erase+0xd8>)
   2856c:	466c      	mov	r4, sp
   2856e:	b088      	sub	sp, #32
   28570:	466a      	mov	r2, sp
   28572:	e9c2 3604 	strd	r3, r6, [r2, #16]
   28576:	2304      	movs	r3, #4
   28578:	6195      	str	r5, [r2, #24]
   2857a:	f842 3f0c 	str.w	r3, [r2, #12]!
   2857e:	2300      	movs	r3, #0
   28580:	4824      	ldr	r0, [pc, #144]	; (28614 <flash_nrf_erase+0xdc>)
   28582:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   28586:	f003 ff9e 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
   2858a:	46a5      	mov	sp, r4
		return -EINVAL;
   2858c:	f06f 0415 	mvn.w	r4, #21
}
   28590:	4620      	mov	r0, r4
   28592:	3718      	adds	r7, #24
   28594:	46bd      	mov	sp, r7
   28596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!n_pages) {
   2859a:	4545      	cmp	r5, r8
   2859c:	d3f8      	bcc.n	28590 <flash_nrf_erase+0x58>
	return z_impl_k_sem_take(sem, timeout);
   2859e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   285a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   285a6:	481c      	ldr	r0, [pc, #112]	; (28618 <flash_nrf_erase+0xe0>)
   285a8:	f002 f896 	bl	2a6d8 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   285ac:	f008 fbb0 	bl	30d10 <nrf_flash_sync_is_required>
   285b0:	f107 0308 	add.w	r3, r7, #8
   285b4:	4601      	mov	r1, r0
   285b6:	b998      	cbnz	r0, 285e0 <flash_nrf_erase+0xa8>
	struct flash_context context = {
   285b8:	2210      	movs	r2, #16
   285ba:	4618      	mov	r0, r3
   285bc:	f005 fd40 	bl	2e040 <memset>
   285c0:	e9c7 6503 	strd	r6, r5, [r7, #12]
	return	erase_op(&context);
   285c4:	f7ff ff48 	bl	28458 <erase_op>
   285c8:	e01c      	b.n	28604 <flash_nrf_erase+0xcc>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   285ca:	4914      	ldr	r1, [pc, #80]	; (2861c <flash_nrf_erase+0xe4>)
   285cc:	466c      	mov	r4, sp
   285ce:	b088      	sub	sp, #32
   285d0:	466a      	mov	r2, sp
   285d2:	e9c2 1604 	strd	r1, r6, [r2, #16]
   285d6:	2104      	movs	r1, #4
   285d8:	6195      	str	r5, [r2, #24]
   285da:	f842 1f0c 	str.w	r1, [r2, #12]!
	compiler_barrier();
   285de:	e7cf      	b.n	28580 <flash_nrf_erase+0x48>
	struct flash_context context = {
   285e0:	2210      	movs	r2, #16
   285e2:	4621      	mov	r1, r4
   285e4:	4618      	mov	r0, r3
   285e6:	f005 fd2b 	bl	2e040 <memset>
   285ea:	2201      	movs	r2, #1
   285ec:	753a      	strb	r2, [r7, #20]
	struct flash_op_desc flash_op_desc = {
   285ee:	4a0c      	ldr	r2, [pc, #48]	; (28620 <flash_nrf_erase+0xe8>)
   285f0:	e9c7 2000 	strd	r2, r0, [r7]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   285f4:	480b      	ldr	r0, [pc, #44]	; (28624 <flash_nrf_erase+0xec>)
	struct flash_context context = {
   285f6:	e9c7 6503 	strd	r6, r5, [r7, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   285fa:	f000 f8f7 	bl	287ec <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   285fe:	4638      	mov	r0, r7
   28600:	f7e5 fa92 	bl	db28 <nrf_flash_sync_exe>
	return	erase_op(&context);
   28604:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   28606:	4804      	ldr	r0, [pc, #16]	; (28618 <flash_nrf_erase+0xe0>)
   28608:	f002 f840 	bl	2a68c <z_impl_k_sem_give>
}
   2860c:	e7c0      	b.n	28590 <flash_nrf_erase+0x58>
   2860e:	bf00      	nop
   28610:	0003669a 	.word	0x0003669a
   28614:	00032494 	.word	0x00032494
   28618:	20003100 	.word	0x20003100
   2861c:	0003667d 	.word	0x0003667d
   28620:	00028459 	.word	0x00028459
   28624:	00015e64 	.word	0x00015e64

00028628 <flash_nrf_write>:
{
   28628:	b5f0      	push	{r4, r5, r6, r7, lr}
   2862a:	460d      	mov	r5, r1
   2862c:	b087      	sub	sp, #28
	if (is_regular_addr_valid(addr, len)) {
   2862e:	4619      	mov	r1, r3
{
   28630:	af00      	add	r7, sp, #0
	if (is_regular_addr_valid(addr, len)) {
   28632:	4628      	mov	r0, r5
{
   28634:	461c      	mov	r4, r3
   28636:	4616      	mov	r6, r2
	if (is_regular_addr_valid(addr, len)) {
   28638:	f008 fb42 	bl	30cc0 <is_regular_addr_valid>
   2863c:	4603      	mov	r3, r0
   2863e:	b9a8      	cbnz	r0, 2866c <flash_nrf_write+0x44>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   28640:	4926      	ldr	r1, [pc, #152]	; (286dc <flash_nrf_write+0xb4>)
   28642:	466e      	mov	r6, sp
   28644:	b088      	sub	sp, #32
   28646:	466a      	mov	r2, sp
   28648:	e9c2 1504 	strd	r1, r5, [r2, #16]
   2864c:	2104      	movs	r1, #4
   2864e:	6194      	str	r4, [r2, #24]
   28650:	f842 1f0c 	str.w	r1, [r2, #12]!
	z_impl_z_log_msg2_static_create(source, desc, package, data);
   28654:	4822      	ldr	r0, [pc, #136]	; (286e0 <flash_nrf_write+0xb8>)
   28656:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   2865a:	f003 ff34 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
   2865e:	f06f 0415 	mvn.w	r4, #21
   28662:	46b5      	mov	sp, r6
}
   28664:	4620      	mov	r0, r4
   28666:	371c      	adds	r7, #28
   28668:	46bd      	mov	sp, r7
   2866a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   2866c:	ea44 0305 	orr.w	r3, r4, r5
   28670:	079b      	lsls	r3, r3, #30
   28672:	d00b      	beq.n	2868c <flash_nrf_write+0x64>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   28674:	4b1b      	ldr	r3, [pc, #108]	; (286e4 <flash_nrf_write+0xbc>)
   28676:	466e      	mov	r6, sp
   28678:	b088      	sub	sp, #32
   2867a:	466a      	mov	r2, sp
   2867c:	e9c2 3504 	strd	r3, r5, [r2, #16]
   28680:	2304      	movs	r3, #4
   28682:	6194      	str	r4, [r2, #24]
   28684:	f842 3f0c 	str.w	r3, [r2, #12]!
   28688:	2300      	movs	r3, #0
   2868a:	e7e3      	b.n	28654 <flash_nrf_write+0x2c>
	if (!len) {
   2868c:	2c00      	cmp	r4, #0
   2868e:	d0e9      	beq.n	28664 <flash_nrf_write+0x3c>
	return z_impl_k_sem_take(sem, timeout);
   28690:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28694:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28698:	4813      	ldr	r0, [pc, #76]	; (286e8 <flash_nrf_write+0xc0>)
   2869a:	f002 f81d 	bl	2a6d8 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   2869e:	f008 fb37 	bl	30d10 <nrf_flash_sync_is_required>
   286a2:	4603      	mov	r3, r0
	struct flash_context context = {
   286a4:	e9c7 6502 	strd	r6, r5, [r7, #8]
   286a8:	f107 0008 	add.w	r0, r7, #8
   286ac:	613c      	str	r4, [r7, #16]
	if (nrf_flash_sync_is_required()) {
   286ae:	b183      	cbz	r3, 286d2 <flash_nrf_write+0xaa>
	struct flash_context context = {
   286b0:	2301      	movs	r3, #1
   286b2:	753b      	strb	r3, [r7, #20]
	struct flash_op_desc flash_op_desc = {
   286b4:	4b0d      	ldr	r3, [pc, #52]	; (286ec <flash_nrf_write+0xc4>)
   286b6:	e9c7 3000 	strd	r3, r0, [r7]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   286ba:	f641 504c 	movw	r0, #7500	; 0x1d4c
   286be:	f000 f895 	bl	287ec <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   286c2:	4638      	mov	r0, r7
   286c4:	f7e5 fa30 	bl	db28 <nrf_flash_sync_exe>
	return write_op(&context);
   286c8:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   286ca:	4807      	ldr	r0, [pc, #28]	; (286e8 <flash_nrf_write+0xc0>)
   286cc:	f001 ffde 	bl	2a68c <z_impl_k_sem_give>
}
   286d0:	e7c8      	b.n	28664 <flash_nrf_write+0x3c>
	struct flash_context context = {
   286d2:	753b      	strb	r3, [r7, #20]
	return write_op(&context);
   286d4:	f7ff fef2 	bl	284bc <write_op>
   286d8:	e7f6      	b.n	286c8 <flash_nrf_write+0xa0>
   286da:	bf00      	nop
   286dc:	0003667d 	.word	0x0003667d
   286e0:	00032494 	.word	0x00032494
   286e4:	000366b9 	.word	0x000366b9
   286e8:	20003100 	.word	0x20003100
   286ec:	000284bd 	.word	0x000284bd

000286f0 <time_slot_callback_work>:
{
   286f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   286f2:	9b07      	ldr	r3, [sp, #28]
	rc = op_desc->handler(op_desc->context);
   286f4:	e9d3 2000 	ldrd	r2, r0, [r3]
   286f8:	4790      	blx	r2
	if (rc != FLASH_OP_ONGOING) {
   286fa:	2801      	cmp	r0, #1
	rc = op_desc->handler(op_desc->context);
   286fc:	4604      	mov	r4, r0
	if (rc != FLASH_OP_ONGOING) {
   286fe:	d013      	beq.n	28728 <time_slot_callback_work+0x38>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   28700:	f10d 010f 	add.w	r1, sp, #15
   28704:	f10d 000e 	add.w	r0, sp, #14
   28708:	f7f5 f9b4 	bl	1da74 <ll_timeslice_ticker_id_get>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   2870c:	2300      	movs	r3, #0
   2870e:	9300      	str	r3, [sp, #0]
   28710:	4619      	mov	r1, r3
   28712:	f89d 200f 	ldrb.w	r2, [sp, #15]
   28716:	f89d 000e 	ldrb.w	r0, [sp, #14]
   2871a:	f7f2 ffcd 	bl	1b6b8 <ticker_stop>
		_ticker_sync_context.result = (rc == FLASH_OP_DONE) ? 0 : rc;
   2871e:	4b03      	ldr	r3, [pc, #12]	; (2872c <time_slot_callback_work+0x3c>)
   28720:	60dc      	str	r4, [r3, #12]
	z_impl_k_sem_give(sem);
   28722:	4803      	ldr	r0, [pc, #12]	; (28730 <time_slot_callback_work+0x40>)
   28724:	f001 ffb2 	bl	2a68c <z_impl_k_sem_give>
}
   28728:	b004      	add	sp, #16
   2872a:	bd10      	pop	{r4, pc}
   2872c:	20003118 	.word	0x20003118
   28730:	20003128 	.word	0x20003128

00028734 <time_slot_delay>:
{
   28734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28738:	b08d      	sub	sp, #52	; 0x34
   2873a:	4606      	mov	r6, r0
   2873c:	460f      	mov	r7, r1
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   2873e:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   28742:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
{
   28746:	4690      	mov	r8, r2
   28748:	4699      	mov	r9, r3
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   2874a:	f7f5 f993 	bl	1da74 <ll_timeslice_ticker_id_get>
	err = ticker_start(instance_index, /* Radio instance ticker */
   2874e:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   28752:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   28756:	9700      	str	r7, [sp, #0]
   28758:	2400      	movs	r4, #0
   2875a:	3501      	adds	r5, #1
   2875c:	4633      	mov	r3, r6
   2875e:	e9cd 4407 	strd	r4, r4, [sp, #28]
   28762:	e9cd 8905 	strd	r8, r9, [sp, #20]
   28766:	e9cd 4403 	strd	r4, r4, [sp, #12]
   2876a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2876e:	b2ea      	uxtb	r2, r5
   28770:	2101      	movs	r1, #1
   28772:	f7f2 ff17 	bl	1b5a4 <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   28776:	f030 0302 	bics.w	r3, r0, #2
   2877a:	d00d      	beq.n	28798 <time_slot_delay+0x64>
		_ticker_sync_context.result = 0;
   2877c:	4b08      	ldr	r3, [pc, #32]	; (287a0 <time_slot_delay+0x6c>)
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   2877e:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
		_ticker_sync_context.result = 0;
   28782:	60dc      	str	r4, [r3, #12]
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   28784:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   28788:	9400      	str	r4, [sp, #0]
   2878a:	4623      	mov	r3, r4
   2878c:	4621      	mov	r1, r4
   2878e:	f7f2 ff93 	bl	1b6b8 <ticker_stop>
   28792:	4804      	ldr	r0, [pc, #16]	; (287a4 <time_slot_delay+0x70>)
   28794:	f001 ff7a 	bl	2a68c <z_impl_k_sem_give>
}
   28798:	b00d      	add	sp, #52	; 0x34
   2879a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2879e:	bf00      	nop
   287a0:	20003118 	.word	0x20003118
   287a4:	20003128 	.word	0x20003128

000287a8 <time_slot_callback_prepare>:
	time_slot_delay(ticks_at_expire,
   287a8:	9b01      	ldr	r3, [sp, #4]
   287aa:	4a02      	ldr	r2, [pc, #8]	; (287b4 <time_slot_callback_prepare+0xc>)
   287ac:	2131      	movs	r1, #49	; 0x31
   287ae:	f7ff bfc1 	b.w	28734 <time_slot_delay>
   287b2:	bf00      	nop
   287b4:	000287b9 	.word	0x000287b9

000287b8 <time_slot_callback_abort>:
{
   287b8:	b570      	push	{r4, r5, r6, lr}
   287ba:	9d05      	ldr	r5, [sp, #20]
   287bc:	4604      	mov	r4, r0
	ll_radio_state_abort();
   287be:	f7f5 f95f 	bl	1da80 <ll_radio_state_abort>
	time_slot_delay(ticks_at_expire,
   287c2:	462b      	mov	r3, r5
   287c4:	4620      	mov	r0, r4
   287c6:	4a03      	ldr	r2, [pc, #12]	; (287d4 <time_slot_callback_abort+0x1c>)
}
   287c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	time_slot_delay(ticks_at_expire,
   287cc:	2106      	movs	r1, #6
   287ce:	f7ff bfb1 	b.w	28734 <time_slot_delay>
   287d2:	bf00      	nop
   287d4:	000286f1 	.word	0x000286f1

000287d8 <nrf_flash_sync_init>:
{
   287d8:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   287da:	2201      	movs	r2, #1
   287dc:	2100      	movs	r1, #0
   287de:	4802      	ldr	r0, [pc, #8]	; (287e8 <nrf_flash_sync_init+0x10>)
   287e0:	f008 ffe9 	bl	317b6 <z_impl_k_sem_init>
}
   287e4:	2000      	movs	r0, #0
   287e6:	bd08      	pop	{r3, pc}
   287e8:	20003128 	.word	0x20003128

000287ec <nrf_flash_sync_set_context>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
   287ec:	4b02      	ldr	r3, [pc, #8]	; (287f8 <nrf_flash_sync_set_context+0xc>)
   287ee:	f2a0 62a4 	subw	r2, r0, #1700	; 0x6a4
	_ticker_sync_context.slot = duration;
   287f2:	e9c3 2000 	strd	r2, r0, [r3]
}
   287f6:	4770      	bx	lr
   287f8:	20003118 	.word	0x20003118

000287fc <nrf_flash_sync_get_timestamp_begin>:
{
   287fc:	b508      	push	{r3, lr}
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
   287fe:	f7f2 ff9d 	bl	1b73c <ticker_ticks_now_get>
   28802:	4b01      	ldr	r3, [pc, #4]	; (28808 <nrf_flash_sync_get_timestamp_begin+0xc>)
   28804:	6098      	str	r0, [r3, #8]
}
   28806:	bd08      	pop	{r3, pc}
   28808:	20003118 	.word	0x20003118

0002880c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   2880c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   2880e:	794b      	ldrb	r3, [r1, #5]
   28810:	2b01      	cmp	r3, #1
   28812:	d026      	beq.n	28862 <uarte_nrfx_configure+0x56>
   28814:	2b03      	cmp	r3, #3
   28816:	d121      	bne.n	2885c <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   28818:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   2881a:	798b      	ldrb	r3, [r1, #6]
   2881c:	2b03      	cmp	r3, #3
   2881e:	d11d      	bne.n	2885c <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   28820:	79cc      	ldrb	r4, [r1, #7]
   28822:	b10c      	cbz	r4, 28828 <uarte_nrfx_configure+0x1c>
   28824:	2c01      	cmp	r4, #1
   28826:	d119      	bne.n	2885c <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   28828:	790a      	ldrb	r2, [r1, #4]
   2882a:	b112      	cbz	r2, 28832 <uarte_nrfx_configure+0x26>
   2882c:	2a02      	cmp	r2, #2
   2882e:	d115      	bne.n	2885c <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   28830:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   28832:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   28834:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   28836:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   2883a:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   2883c:	d065      	beq.n	2890a <uarte_nrfx_configure+0xfe>
   2883e:	d82d      	bhi.n	2889c <uarte_nrfx_configure+0x90>
   28840:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   28844:	d064      	beq.n	28910 <uarte_nrfx_configure+0x104>
   28846:	d816      	bhi.n	28876 <uarte_nrfx_configure+0x6a>
   28848:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   2884c:	d062      	beq.n	28914 <uarte_nrfx_configure+0x108>
   2884e:	d80a      	bhi.n	28866 <uarte_nrfx_configure+0x5a>
   28850:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   28854:	d061      	beq.n	2891a <uarte_nrfx_configure+0x10e>
   28856:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   2885a:	d061      	beq.n	28920 <uarte_nrfx_configure+0x114>
   2885c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28860:	e052      	b.n	28908 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
   28862:	2600      	movs	r6, #0
   28864:	e7d9      	b.n	2881a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   28866:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   2886a:	d05c      	beq.n	28926 <uarte_nrfx_configure+0x11a>
   2886c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   28870:	d1f4      	bne.n	2885c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   28872:	4b37      	ldr	r3, [pc, #220]	; (28950 <uarte_nrfx_configure+0x144>)
   28874:	e03c      	b.n	288f0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   28876:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   2887a:	d057      	beq.n	2892c <uarte_nrfx_configure+0x120>
   2887c:	d807      	bhi.n	2888e <uarte_nrfx_configure+0x82>
   2887e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   28882:	d055      	beq.n	28930 <uarte_nrfx_configure+0x124>
   28884:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   28888:	d1e8      	bne.n	2885c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   2888a:	4b32      	ldr	r3, [pc, #200]	; (28954 <uarte_nrfx_configure+0x148>)
   2888c:	e030      	b.n	288f0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2888e:	f647 2712 	movw	r7, #31250	; 0x7a12
   28892:	42bb      	cmp	r3, r7
   28894:	d1e2      	bne.n	2885c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   28896:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   2889a:	e029      	b.n	288f0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2889c:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   288a0:	d048      	beq.n	28934 <uarte_nrfx_configure+0x128>
   288a2:	d813      	bhi.n	288cc <uarte_nrfx_configure+0xc0>
   288a4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   288a8:	d047      	beq.n	2893a <uarte_nrfx_configure+0x12e>
   288aa:	d809      	bhi.n	288c0 <uarte_nrfx_configure+0xb4>
   288ac:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   288b0:	42bb      	cmp	r3, r7
   288b2:	d044      	beq.n	2893e <uarte_nrfx_configure+0x132>
   288b4:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   288b8:	d1d0      	bne.n	2885c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   288ba:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   288be:	e017      	b.n	288f0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   288c0:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   288c4:	d1ca      	bne.n	2885c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   288c6:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   288ca:	e011      	b.n	288f0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   288cc:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   288d0:	d038      	beq.n	28944 <uarte_nrfx_configure+0x138>
   288d2:	d808      	bhi.n	288e6 <uarte_nrfx_configure+0xda>
   288d4:	4f20      	ldr	r7, [pc, #128]	; (28958 <uarte_nrfx_configure+0x14c>)
   288d6:	42bb      	cmp	r3, r7
   288d8:	d037      	beq.n	2894a <uarte_nrfx_configure+0x13e>
   288da:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   288de:	d1bd      	bne.n	2885c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   288e0:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   288e4:	e004      	b.n	288f0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   288e6:	4f1d      	ldr	r7, [pc, #116]	; (2895c <uarte_nrfx_configure+0x150>)
   288e8:	42bb      	cmp	r3, r7
   288ea:	d1b7      	bne.n	2885c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   288ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   288f0:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   288f2:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   288f6:	1d03      	adds	r3, r0, #4
   288f8:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   288fa:	4334      	orrs	r4, r6
   288fc:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   288fe:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   28902:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   28906:	2000      	movs	r0, #0
}
   28908:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   2890a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   2890e:	e7ef      	b.n	288f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   28910:	4b13      	ldr	r3, [pc, #76]	; (28960 <uarte_nrfx_configure+0x154>)
   28912:	e7ed      	b.n	288f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   28914:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   28918:	e7ea      	b.n	288f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   2891a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   2891e:	e7e7      	b.n	288f0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   28920:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   28924:	e7e4      	b.n	288f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   28926:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   2892a:	e7e1      	b.n	288f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   2892c:	4b0d      	ldr	r3, [pc, #52]	; (28964 <uarte_nrfx_configure+0x158>)
   2892e:	e7df      	b.n	288f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   28930:	4b0d      	ldr	r3, [pc, #52]	; (28968 <uarte_nrfx_configure+0x15c>)
   28932:	e7dd      	b.n	288f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   28934:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   28938:	e7da      	b.n	288f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   2893a:	4b0c      	ldr	r3, [pc, #48]	; (2896c <uarte_nrfx_configure+0x160>)
   2893c:	e7d8      	b.n	288f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   2893e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   28942:	e7d5      	b.n	288f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   28944:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   28948:	e7d2      	b.n	288f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   2894a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   2894e:	e7cf      	b.n	288f0 <uarte_nrfx_configure+0xe4>
   28950:	0013b000 	.word	0x0013b000
   28954:	004ea000 	.word	0x004ea000
   28958:	0003d090 	.word	0x0003d090
   2895c:	000f4240 	.word	0x000f4240
   28960:	00275000 	.word	0x00275000
   28964:	0075c000 	.word	0x0075c000
   28968:	003af000 	.word	0x003af000
   2896c:	013a9000 	.word	0x013a9000

00028970 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   28970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
   28974:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   28978:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   2897a:	f8d8 4000 	ldr.w	r4, [r8]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   2897e:	f8d8 900c 	ldr.w	r9, [r8, #12]
static int uarte_instance_init(const struct device *dev,
   28982:	b087      	sub	sp, #28
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   28984:	2100      	movs	r1, #0
   28986:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
   2898a:	4607      	mov	r7, r0
	data->dev = dev;
   2898c:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   2898e:	466a      	mov	r2, sp
   28990:	4648      	mov	r0, r9
   28992:	f008 fab6 	bl	30f02 <pinctrl_lookup_state>
	if (ret < 0) {
   28996:	1e05      	subs	r5, r0, #0
   28998:	db26      	blt.n	289e8 <uarte_instance_init.constprop.0+0x78>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   2899a:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   2899c:	f8d9 2000 	ldr.w	r2, [r9]
   289a0:	7919      	ldrb	r1, [r3, #4]
   289a2:	6818      	ldr	r0, [r3, #0]
   289a4:	f008 faca 	bl	30f3c <pinctrl_configure_pins>
	if (err < 0) {
   289a8:	1e05      	subs	r5, r0, #0
   289aa:	db1d      	blt.n	289e8 <uarte_instance_init.constprop.0+0x78>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   289ac:	1d31      	adds	r1, r6, #4
   289ae:	4638      	mov	r0, r7
   289b0:	f7ff ff2c 	bl	2880c <uarte_nrfx_configure>
	if (err) {
   289b4:	4605      	mov	r5, r0
   289b6:	b9b8      	cbnz	r0, 289e8 <uarte_instance_init.constprop.0+0x78>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   289b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   289bc:	0799      	lsls	r1, r3, #30
   289be:	d52a      	bpl.n	28a16 <uarte_instance_init.constprop.0+0xa6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   289c0:	f106 0012 	add.w	r0, r6, #18
   289c4:	f001 fa02 	bl	29dcc <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   289c8:	4b28      	ldr	r3, [pc, #160]	; (28a6c <uarte_instance_init.constprop.0+0xfc>)
   289ca:	4298      	cmp	r0, r3
   289cc:	d010      	beq.n	289f0 <uarte_instance_init.constprop.0+0x80>
		LOG_ERR("Failed to allocate PPI Channel");
   289ce:	4b28      	ldr	r3, [pc, #160]	; (28a70 <uarte_instance_init.constprop.0+0x100>)
   289d0:	9304      	str	r3, [sp, #16]
   289d2:	2302      	movs	r3, #2
   289d4:	9303      	str	r3, [sp, #12]
   289d6:	4827      	ldr	r0, [pc, #156]	; (28a74 <uarte_instance_init.constprop.0+0x104>)
   289d8:	462b      	mov	r3, r5
   289da:	aa03      	add	r2, sp, #12
   289dc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
   289e0:	f06f 0504 	mvn.w	r5, #4
   289e4:	f003 fd6f 	bl	2c4c6 <z_impl_z_log_msg2_static_create>

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   289e8:	4628      	mov	r0, r5
   289ea:	b007      	add	sp, #28
   289ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   289f0:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   289f2:	00c3      	lsls	r3, r0, #3
   289f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   289f8:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   289fc:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   28a00:	f504 7190 	add.w	r1, r4, #288	; 0x120
    p_reg->CH[(uint32_t) channel].EEP = eep;
   28a04:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   28a08:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   28a0c:	4a1a      	ldr	r2, [pc, #104]	; (28a78 <uarte_instance_init.constprop.0+0x108>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   28a0e:	2301      	movs	r3, #1
   28a10:	4083      	lsls	r3, r0
   28a12:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   28a16:	2308      	movs	r3, #8
   28a18:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   28a1c:	f898 3008 	ldrb.w	r3, [r8, #8]
   28a20:	b95b      	cbnz	r3, 28a3a <uarte_instance_init.constprop.0+0xca>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   28a22:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   28a26:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   28a2a:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   28a2e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   28a32:	2301      	movs	r3, #1
   28a34:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   28a38:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   28a3a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   28a3e:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   28a40:	bf5c      	itt	pl
   28a42:	f44f 7280 	movpl.w	r2, #256	; 0x100
   28a46:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   28a4a:	06db      	lsls	r3, r3, #27
   28a4c:	bf44      	itt	mi
   28a4e:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   28a52:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   28a56:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
   28a58:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   28a5a:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   28a5e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   28a62:	2301      	movs	r3, #1
   28a64:	60a3      	str	r3, [r4, #8]
   28a66:	60e3      	str	r3, [r4, #12]
	return 0;
   28a68:	e7be      	b.n	289e8 <uarte_instance_init.constprop.0+0x78>
   28a6a:	bf00      	nop
   28a6c:	0bad0000 	.word	0x0bad0000
   28a70:	000366e1 	.word	0x000366e1
   28a74:	00032504 	.word	0x00032504
   28a78:	4001f000 	.word	0x4001f000

00028a7c <uarte_nrfx_poll_out>:
{
   28a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   28a7e:	6906      	ldr	r6, [r0, #16]
{
   28a80:	4605      	mov	r5, r0
   28a82:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   28a84:	f008 fda7 	bl	315d6 <k_is_in_isr>
   28a88:	b910      	cbnz	r0, 28a90 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   28a8a:	4b2c      	ldr	r3, [pc, #176]	; (28b3c <uarte_nrfx_poll_out+0xc0>)
	if (isr_mode) {
   28a8c:	781b      	ldrb	r3, [r3, #0]
   28a8e:	b983      	cbnz	r3, 28ab2 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   28a90:	f04f 0320 	mov.w	r3, #32
   28a94:	f3ef 8411 	mrs	r4, BASEPRI
   28a98:	f383 8812 	msr	BASEPRI_MAX, r3
   28a9c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   28aa0:	6868      	ldr	r0, [r5, #4]
   28aa2:	f008 f9c2 	bl	30e2a <is_tx_ready.isra.0>
   28aa6:	bb28      	cbnz	r0, 28af4 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   28aa8:	f384 8811 	msr	BASEPRI, r4
   28aac:	f3bf 8f6f 	isb	sy
}
   28ab0:	e7ee      	b.n	28a90 <uarte_nrfx_poll_out+0x14>
{
   28ab2:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   28ab4:	6868      	ldr	r0, [r5, #4]
   28ab6:	f008 f9b8 	bl	30e2a <is_tx_ready.isra.0>
   28aba:	b970      	cbnz	r0, 28ada <uarte_nrfx_poll_out+0x5e>
   28abc:	2001      	movs	r0, #1
   28abe:	f008 faf5 	bl	310ac <nrfx_busy_wait>
   28ac2:	3c01      	subs	r4, #1
   28ac4:	d1f6      	bne.n	28ab4 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
   28ac6:	2100      	movs	r1, #0
   28ac8:	2021      	movs	r0, #33	; 0x21
   28aca:	f002 fac5 	bl	2b058 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   28ace:	e7f0      	b.n	28ab2 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   28ad0:	f384 8811 	msr	BASEPRI, r4
   28ad4:	f3bf 8f6f 	isb	sy
}
   28ad8:	e7f5      	b.n	28ac6 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   28ada:	f04f 0320 	mov.w	r3, #32
   28ade:	f3ef 8411 	mrs	r4, BASEPRI
   28ae2:	f383 8812 	msr	BASEPRI_MAX, r3
   28ae6:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   28aea:	6868      	ldr	r0, [r5, #4]
   28aec:	f008 f99d 	bl	30e2a <is_tx_ready.isra.0>
   28af0:	2800      	cmp	r0, #0
   28af2:	d0ed      	beq.n	28ad0 <uarte_nrfx_poll_out+0x54>
	data->char_out = c;
   28af4:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
   28af8:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
   28afa:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.MAXCNT = length;
   28afc:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   28afe:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   28b02:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   28b06:	2200      	movs	r2, #0
   28b08:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   28b0c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   28b10:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   28b14:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   28b18:	684a      	ldr	r2, [r1, #4]
   28b1a:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   28b1c:	bf41      	itttt	mi
   28b1e:	2208      	movmi	r2, #8
   28b20:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   28b24:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   28b28:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   28b2c:	2201      	movs	r2, #1
   28b2e:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   28b30:	f384 8811 	msr	BASEPRI, r4
   28b34:	f3bf 8f6f 	isb	sy
}
   28b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28b3a:	bf00      	nop
   28b3c:	2000383f 	.word	0x2000383f

00028b40 <random_byte_get>:
	__asm__ volatile(
   28b40:	f04f 0320 	mov.w	r3, #32
   28b44:	f3ef 8211 	mrs	r2, BASEPRI
   28b48:	f383 8812 	msr	BASEPRI_MAX, r3
   28b4c:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   28b50:	4b09      	ldr	r3, [pc, #36]	; (28b78 <random_byte_get+0x38>)
   28b52:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   28b56:	b161      	cbz	r1, 28b72 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   28b58:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   28b5a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   28b5e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   28b62:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   28b66:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   28b68:	f382 8811 	msr	BASEPRI, r2
   28b6c:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   28b70:	4770      	bx	lr
	int retval = -EAGAIN;
   28b72:	f06f 000a 	mvn.w	r0, #10
   28b76:	e7f7      	b.n	28b68 <random_byte_get+0x28>
   28b78:	4000d000 	.word	0x4000d000

00028b7c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   28b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   28b7e:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   28b80:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   28b82:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   28b84:	f04f 0020 	mov.w	r0, #32
   28b88:	f3ef 8e11 	mrs	lr, BASEPRI
   28b8c:	f380 8812 	msr	BASEPRI_MAX, r0
   28b90:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   28b94:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   28b96:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   28b9a:	1ba4      	subs	r4, r4, r6
   28b9c:	403c      	ands	r4, r7
	if (available < len) {
   28b9e:	42a2      	cmp	r2, r4
		len = available;
   28ba0:	bf88      	it	hi
   28ba2:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   28ba4:	18b0      	adds	r0, r6, r2
   28ba6:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   28ba8:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   28baa:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   28bac:	f38e 8811 	msr	BASEPRI, lr
   28bb0:	f3bf 8f6f 	isb	sy
   28bb4:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   28bb6:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   28bb8:	4290      	cmp	r0, r2
   28bba:	d119      	bne.n	28bf0 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   28bbc:	4566      	cmp	r6, ip
   28bbe:	d10d      	bne.n	28bdc <rng_pool_get+0x60>
	__asm__ volatile(
   28bc0:	f04f 0520 	mov.w	r5, #32
   28bc4:	f3ef 8011 	mrs	r0, BASEPRI
   28bc8:	f385 8812 	msr	BASEPRI_MAX, r5
   28bcc:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   28bd0:	781d      	ldrb	r5, [r3, #0]
   28bd2:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   28bd4:	f380 8811 	msr	BASEPRI, r0
   28bd8:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   28bdc:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   28bde:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   28be0:	b290      	uxth	r0, r2
	available = available - len;
   28be2:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   28be4:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   28be6:	bf22      	ittt	cs
   28be8:	4b06      	ldrcs	r3, [pc, #24]	; (28c04 <rng_pool_get+0x88>)
   28bea:	2201      	movcs	r2, #1
   28bec:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   28bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   28bf0:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   28bf4:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   28bf6:	f89e e005 	ldrb.w	lr, [lr, #5]
   28bfa:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   28bfe:	403d      	ands	r5, r7
   28c00:	e7da      	b.n	28bb8 <rng_pool_get+0x3c>
   28c02:	bf00      	nop
   28c04:	4000d000 	.word	0x4000d000

00028c08 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   28c08:	43db      	mvns	r3, r3
{
   28c0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   28c0e:	f013 0501 	ands.w	r5, r3, #1
{
   28c12:	460e      	mov	r6, r1
   28c14:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   28c16:	d004      	beq.n	28c22 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   28c18:	4821      	ldr	r0, [pc, #132]	; (28ca0 <entropy_nrf5_get_entropy_isr+0x98>)
   28c1a:	f7ff ffaf 	bl	28b7c <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   28c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   28c22:	b3a2      	cbz	r2, 28c8e <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   28c24:	f04f 0320 	mov.w	r3, #32
   28c28:	f3ef 8811 	mrs	r8, BASEPRI
   28c2c:	f383 8812 	msr	BASEPRI_MAX, r3
   28c30:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   28c34:	200d      	movs	r0, #13
   28c36:	f7e7 fe21 	bl	1087c <arch_irq_is_enabled>
   28c3a:	4607      	mov	r7, r0
		irq_disable(IRQN);
   28c3c:	200d      	movs	r0, #13
   28c3e:	f7e7 fe09 	bl	10854 <arch_irq_disable>
	__asm__ volatile(
   28c42:	f388 8811 	msr	BASEPRI, r8
   28c46:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   28c4a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 28ca4 <entropy_nrf5_get_entropy_isr+0x9c>
   28c4e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 28ca8 <entropy_nrf5_get_entropy_isr+0xa0>
   28c52:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   28c56:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   28c5a:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   28c5e:	2301      	movs	r3, #1
   28c60:	f8c8 3000 	str.w	r3, [r8]
   28c64:	4625      	mov	r5, r4
   28c66:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   28c6a:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   28c6e:	b183      	cbz	r3, 28c92 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   28c70:	f7ff ff66 	bl	28b40 <random_byte_get>
			if (byte < 0) {
   28c74:	1e03      	subs	r3, r0, #0
   28c76:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   28c7a:	dbf6      	blt.n	28c6a <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   28c7c:	3d01      	subs	r5, #1
   28c7e:	b2ad      	uxth	r5, r5
   28c80:	5573      	strb	r3, [r6, r5]
		} while (len);
   28c82:	2d00      	cmp	r5, #0
   28c84:	d1f1      	bne.n	28c6a <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   28c86:	b117      	cbz	r7, 28c8e <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   28c88:	200d      	movs	r0, #13
   28c8a:	f7e7 fdd3 	bl	10834 <arch_irq_enable>
	return cnt;
   28c8e:	4620      	mov	r0, r4
   28c90:	e7c5      	b.n	28c1e <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
   28c92:	f3bf 8f4f 	dsb	sy
				__WFE();
   28c96:	bf20      	wfe
				__SEV();
   28c98:	bf40      	sev
				__WFE();
   28c9a:	bf20      	wfe
   28c9c:	e7e5      	b.n	28c6a <entropy_nrf5_get_entropy_isr+0x62>
   28c9e:	bf00      	nop
   28ca0:	20003170 	.word	0x20003170
   28ca4:	4000d000 	.word	0x4000d000
   28ca8:	e000e100 	.word	0xe000e100

00028cac <entropy_nrf5_get_entropy>:
{
   28cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   28cb0:	4f13      	ldr	r7, [pc, #76]	; (28d00 <entropy_nrf5_get_entropy+0x54>)
   28cb2:	460d      	mov	r5, r1
   28cb4:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   28cb6:	f107 0845 	add.w	r8, r7, #69	; 0x45
   28cba:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   28cbe:	b914      	cbnz	r4, 28cc6 <entropy_nrf5_get_entropy+0x1a>
}
   28cc0:	4620      	mov	r0, r4
   28cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   28cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28cca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28cce:	4638      	mov	r0, r7
   28cd0:	f001 fd02 	bl	2a6d8 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   28cd4:	4622      	mov	r2, r4
   28cd6:	4629      	mov	r1, r5
   28cd8:	4640      	mov	r0, r8
   28cda:	f7ff ff4f 	bl	28b7c <rng_pool_get>
   28cde:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   28ce0:	4638      	mov	r0, r7
   28ce2:	f001 fcd3 	bl	2a68c <z_impl_k_sem_give>
		if (bytes == 0U) {
   28ce6:	b93e      	cbnz	r6, 28cf8 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   28ce8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28cec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28cf0:	4648      	mov	r0, r9
   28cf2:	f001 fcf1 	bl	2a6d8 <z_impl_k_sem_take>
			continue;
   28cf6:	e7e2      	b.n	28cbe <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   28cf8:	1ba4      	subs	r4, r4, r6
   28cfa:	b2a4      	uxth	r4, r4
		buf += bytes;
   28cfc:	4435      	add	r5, r6
   28cfe:	e7de      	b.n	28cbe <entropy_nrf5_get_entropy+0x12>
   28d00:	20003140 	.word	0x20003140

00028d04 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   28d04:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   28d06:	4c19      	ldr	r4, [pc, #100]	; (28d6c <entropy_nrf5_init+0x68>)
   28d08:	2201      	movs	r2, #1
   28d0a:	4611      	mov	r1, r2
   28d0c:	4620      	mov	r0, r4
   28d0e:	f008 fd52 	bl	317b6 <z_impl_k_sem_init>
   28d12:	2201      	movs	r2, #1
   28d14:	2100      	movs	r1, #0
   28d16:	f104 0018 	add.w	r0, r4, #24
   28d1a:	f008 fd4c 	bl	317b6 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   28d1e:	f240 4307 	movw	r3, #1031	; 0x407
   28d22:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   28d26:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   28d2a:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   28d2c:	230c      	movs	r3, #12
   28d2e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   28d32:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   28d34:	4b0e      	ldr	r3, [pc, #56]	; (28d70 <entropy_nrf5_init+0x6c>)
   28d36:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   28d3a:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   28d3e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   28d42:	f042 0201 	orr.w	r2, r2, #1
   28d46:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   28d4a:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   28d4c:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   28d50:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   28d54:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   28d58:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   28d5a:	6019      	str	r1, [r3, #0]
   28d5c:	200d      	movs	r0, #13
   28d5e:	f7e7 fd9b 	bl	10898 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   28d62:	200d      	movs	r0, #13
   28d64:	f7e7 fd66 	bl	10834 <arch_irq_enable>

	return 0;
}
   28d68:	4628      	mov	r0, r5
   28d6a:	bd38      	pop	{r3, r4, r5, pc}
   28d6c:	20003140 	.word	0x20003140
   28d70:	4000d000 	.word	0x4000d000

00028d74 <isr>:
{
   28d74:	b510      	push	{r4, lr}
	byte = random_byte_get();
   28d76:	f7ff fee3 	bl	28b40 <random_byte_get>
	if (byte < 0) {
   28d7a:	2800      	cmp	r0, #0
   28d7c:	db20      	blt.n	28dc0 <isr+0x4c>
	uint8_t last  = rngp->last;
   28d7e:	4b17      	ldr	r3, [pc, #92]	; (28ddc <isr+0x68>)
   28d80:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   28d84:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   28d88:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   28d8c:	1a51      	subs	r1, r2, r1
   28d8e:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   28d92:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   28d94:	d10d      	bne.n	28db2 <isr+0x3e>
	uint8_t last  = rngp->last;
   28d96:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   28d9a:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   28d9e:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   28da2:	1a51      	subs	r1, r2, r1
   28da4:	ea34 0101 	bics.w	r1, r4, r1
   28da8:	d10b      	bne.n	28dc2 <isr+0x4e>
   28daa:	4b0d      	ldr	r3, [pc, #52]	; (28de0 <isr+0x6c>)
   28dac:	2201      	movs	r2, #1
   28dae:	605a      	str	r2, [r3, #4]
}
   28db0:	e00e      	b.n	28dd0 <isr+0x5c>
	rngp->buffer[last] = byte;
   28db2:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   28db4:	3201      	adds	r2, #1
   28db6:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   28db8:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   28dbc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   28dc0:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   28dc2:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   28dc4:	3201      	adds	r2, #1
   28dc6:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   28dc8:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   28dcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   28dd0:	4804      	ldr	r0, [pc, #16]	; (28de4 <isr+0x70>)
}
   28dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28dd6:	f001 bc59 	b.w	2a68c <z_impl_k_sem_give>
   28dda:	bf00      	nop
   28ddc:	20003140 	.word	0x20003140
   28de0:	4000d000 	.word	0x4000d000
   28de4:	20003158 	.word	0x20003158

00028de8 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   28de8:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   28dea:	2301      	movs	r3, #1
   28dec:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28dee:	4a11      	ldr	r2, [pc, #68]	; (28e34 <compare_int_lock+0x4c>)
   28df0:	f3bf 8f5b 	dmb	ish
   28df4:	43dc      	mvns	r4, r3
   28df6:	e852 1f00 	ldrex	r1, [r2]
   28dfa:	ea01 0c04 	and.w	ip, r1, r4
   28dfe:	e842 ce00 	strex	lr, ip, [r2]
   28e02:	f1be 0f00 	cmp.w	lr, #0
   28e06:	d1f6      	bne.n	28df6 <compare_int_lock+0xe>
   28e08:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   28e0c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   28e10:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   28e14:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   28e18:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   28e1c:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   28e20:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   28e24:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   28e28:	420b      	tst	r3, r1
}
   28e2a:	bf14      	ite	ne
   28e2c:	2001      	movne	r0, #1
   28e2e:	2000      	moveq	r0, #0
   28e30:	bd10      	pop	{r4, pc}
   28e32:	bf00      	nop
   28e34:	20003198 	.word	0x20003198

00028e38 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   28e38:	4919      	ldr	r1, [pc, #100]	; (28ea0 <sys_clock_timeout_handler+0x68>)
{
   28e3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28e3c:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   28e3e:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   28e42:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   28e44:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   28e48:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   28e4c:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   28e4e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   28e52:	d222      	bcs.n	28e9a <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   28e54:	4b13      	ldr	r3, [pc, #76]	; (28ea4 <sys_clock_timeout_handler+0x6c>)
   28e56:	681b      	ldr	r3, [r3, #0]
   28e58:	0a1a      	lsrs	r2, r3, #8
   28e5a:	061b      	lsls	r3, r3, #24
   28e5c:	195e      	adds	r6, r3, r5
   28e5e:	4b12      	ldr	r3, [pc, #72]	; (28ea8 <sys_clock_timeout_handler+0x70>)
   28e60:	f142 0700 	adc.w	r7, r2, #0
   28e64:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   28e68:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   28e6a:	f002 fa67 	bl	2b33c <sys_clock_announce>
    return p_reg->CC[ch];
   28e6e:	00a3      	lsls	r3, r4, #2
   28e70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   28e74:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   28e78:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   28e7c:	42aa      	cmp	r2, r5
   28e7e:	d10b      	bne.n	28e98 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   28e80:	b91e      	cbnz	r6, 28e8a <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   28e82:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   28e86:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   28e8a:	4b08      	ldr	r3, [pc, #32]	; (28eac <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   28e8c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   28e90:	fa00 f404 	lsl.w	r4, r0, r4
   28e94:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   28e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   28e9a:	2600      	movs	r6, #0
   28e9c:	e7e5      	b.n	28e6a <sys_clock_timeout_handler+0x32>
   28e9e:	bf00      	nop
   28ea0:	20001b78 	.word	0x20001b78
   28ea4:	2000319c 	.word	0x2000319c
   28ea8:	20001b60 	.word	0x20001b60
   28eac:	40011000 	.word	0x40011000

00028eb0 <compare_int_unlock>:
	if (key) {
   28eb0:	b319      	cbz	r1, 28efa <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28eb2:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   28eb6:	2301      	movs	r3, #1
   28eb8:	4a10      	ldr	r2, [pc, #64]	; (28efc <compare_int_unlock+0x4c>)
   28eba:	4083      	lsls	r3, r0
   28ebc:	e852 1f00 	ldrex	r1, [r2]
   28ec0:	4319      	orrs	r1, r3
   28ec2:	e842 1c00 	strex	ip, r1, [r2]
   28ec6:	f1bc 0f00 	cmp.w	ip, #0
   28eca:	d1f7      	bne.n	28ebc <compare_int_unlock+0xc>
   28ecc:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   28ed0:	4a0b      	ldr	r2, [pc, #44]	; (28f00 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   28ed2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   28ed6:	4083      	lsls	r3, r0
   28ed8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28edc:	4b09      	ldr	r3, [pc, #36]	; (28f04 <compare_int_unlock+0x54>)
   28ede:	f3bf 8f5b 	dmb	ish
   28ee2:	681b      	ldr	r3, [r3, #0]
   28ee4:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   28ee8:	fa23 f000 	lsr.w	r0, r3, r0
   28eec:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   28eee:	bf42      	ittt	mi
   28ef0:	4b05      	ldrmi	r3, [pc, #20]	; (28f08 <compare_int_unlock+0x58>)
   28ef2:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   28ef6:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   28efa:	4770      	bx	lr
   28efc:	20003198 	.word	0x20003198
   28f00:	40011000 	.word	0x40011000
   28f04:	20003194 	.word	0x20003194
   28f08:	e000e100 	.word	0xe000e100

00028f0c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   28f0c:	4b0d      	ldr	r3, [pc, #52]	; (28f44 <z_nrf_rtc_timer_read+0x38>)
   28f0e:	6818      	ldr	r0, [r3, #0]
   28f10:	0a01      	lsrs	r1, r0, #8
   28f12:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   28f14:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   28f18:	4b0b      	ldr	r3, [pc, #44]	; (28f48 <z_nrf_rtc_timer_read+0x3c>)
   28f1a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   28f1e:	1818      	adds	r0, r3, r0
   28f20:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   28f24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   28f28:	d20a      	bcs.n	28f40 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   28f2a:	4b08      	ldr	r3, [pc, #32]	; (28f4c <z_nrf_rtc_timer_read+0x40>)
   28f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   28f30:	4290      	cmp	r0, r2
   28f32:	eb71 0303 	sbcs.w	r3, r1, r3
   28f36:	d203      	bcs.n	28f40 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   28f38:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   28f3c:	f141 0100 	adc.w	r1, r1, #0
}
   28f40:	4770      	bx	lr
   28f42:	bf00      	nop
   28f44:	2000319c 	.word	0x2000319c
   28f48:	40011000 	.word	0x40011000
   28f4c:	20001b60 	.word	0x20001b60

00028f50 <compare_set>:
{
   28f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28f54:	b085      	sub	sp, #20
   28f56:	4616      	mov	r6, r2
   28f58:	4698      	mov	r8, r3
   28f5a:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   28f5c:	f7ff ff44 	bl	28de8 <compare_int_lock>
   28f60:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   28f62:	f7ff ffd3 	bl	28f0c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   28f66:	42b0      	cmp	r0, r6
   28f68:	eb71 0308 	sbcs.w	r3, r1, r8
   28f6c:	d278      	bcs.n	29060 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   28f6e:	4b46      	ldr	r3, [pc, #280]	; (29088 <compare_set+0x138>)
   28f70:	1a30      	subs	r0, r6, r0
   28f72:	eb68 0101 	sbc.w	r1, r8, r1
   28f76:	4298      	cmp	r0, r3
   28f78:	f171 0300 	sbcs.w	r3, r1, #0
   28f7c:	f080 8081 	bcs.w	29082 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   28f80:	4b42      	ldr	r3, [pc, #264]	; (2908c <compare_set+0x13c>)
   28f82:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   28f86:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   28f8a:	45d8      	cmp	r8, fp
   28f8c:	bf08      	it	eq
   28f8e:	4556      	cmpeq	r6, sl
   28f90:	d051      	beq.n	29036 <compare_set+0xe6>
   28f92:	ea4f 0985 	mov.w	r9, r5, lsl #2
   28f96:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   28f9a:	f105 0750 	add.w	r7, r5, #80	; 0x50
   28f9e:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   28fa2:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   28fa4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   28fa8:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   28fac:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   28fae:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   28fb2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   28fb6:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   28fb8:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   28fbc:	4b34      	ldr	r3, [pc, #208]	; (29090 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   28fbe:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   28fc2:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   28fc4:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   28fc8:	1a40      	subs	r0, r0, r1
   28fca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   28fce:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   28fd2:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   28fd4:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   28fd8:	d107      	bne.n	28fea <compare_set+0x9a>
   28fda:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   28fde:	2013      	movs	r0, #19
   28fe0:	f008 fe32 	bl	31c48 <z_impl_k_busy_wait>
   28fe4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   28fe8:	4b29      	ldr	r3, [pc, #164]	; (29090 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   28fea:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   28fee:	eba4 000c 	sub.w	r0, r4, ip
   28ff2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   28ff6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   28ffa:	bf88      	it	hi
   28ffc:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   28ffe:	2000      	movs	r0, #0
   29000:	6038      	str	r0, [r7, #0]
   29002:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   29004:	9801      	ldr	r0, [sp, #4]
   29006:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   2900a:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   2900e:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   29012:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   29016:	4281      	cmp	r1, r0
   29018:	d006      	beq.n	29028 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
   2901a:	1a20      	subs	r0, r4, r0
   2901c:	3802      	subs	r0, #2
   2901e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   29022:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   29026:	d819      	bhi.n	2905c <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   29028:	1aa4      	subs	r4, r4, r2
   2902a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   2902e:	eb14 0a06 	adds.w	sl, r4, r6
   29032:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   29036:	4915      	ldr	r1, [pc, #84]	; (2908c <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   29038:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   2903a:	012b      	lsls	r3, r5, #4
   2903c:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   29040:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   29044:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   29046:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   29048:	6053      	str	r3, [r2, #4]
	return ret;
   2904a:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   2904c:	4628      	mov	r0, r5
   2904e:	9900      	ldr	r1, [sp, #0]
   29050:	f7ff ff2e 	bl	28eb0 <compare_int_unlock>
}
   29054:	4620      	mov	r0, r4
   29056:	b005      	add	sp, #20
   29058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2905c:	4620      	mov	r0, r4
   2905e:	e7b1      	b.n	28fc4 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   29060:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29062:	4a0c      	ldr	r2, [pc, #48]	; (29094 <compare_set+0x144>)
   29064:	f3bf 8f5b 	dmb	ish
   29068:	40ab      	lsls	r3, r5
   2906a:	e852 1f00 	ldrex	r1, [r2]
   2906e:	4319      	orrs	r1, r3
   29070:	e842 1000 	strex	r0, r1, [r2]
   29074:	2800      	cmp	r0, #0
   29076:	d1f8      	bne.n	2906a <compare_set+0x11a>
   29078:	f3bf 8f5b 	dmb	ish
   2907c:	46b2      	mov	sl, r6
   2907e:	46c3      	mov	fp, r8
   29080:	e7d9      	b.n	29036 <compare_set+0xe6>
			return -EINVAL;
   29082:	f06f 0415 	mvn.w	r4, #21
   29086:	e7e1      	b.n	2904c <compare_set+0xfc>
   29088:	01000001 	.word	0x01000001
   2908c:	20001b68 	.word	0x20001b68
   29090:	40011000 	.word	0x40011000
   29094:	20003194 	.word	0x20003194

00029098 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   29098:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   2909a:	4b19      	ldr	r3, [pc, #100]	; (29100 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   2909c:	4d19      	ldr	r5, [pc, #100]	; (29104 <sys_clock_driver_init+0x6c>)
   2909e:	2400      	movs	r4, #0
   290a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   290a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   290a8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   290ac:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   290b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   290b4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   290b8:	4b13      	ldr	r3, [pc, #76]	; (29108 <sys_clock_driver_init+0x70>)
   290ba:	2602      	movs	r6, #2
   290bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   290c0:	2101      	movs	r1, #1
   290c2:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   290c6:	2011      	movs	r0, #17
   290c8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   290cc:	4622      	mov	r2, r4
   290ce:	f7e7 fbe3 	bl	10898 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   290d2:	2011      	movs	r0, #17
   290d4:	f7e7 fbae 	bl	10834 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   290d8:	4a0c      	ldr	r2, [pc, #48]	; (2910c <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   290da:	2301      	movs	r3, #1
   290dc:	60ab      	str	r3, [r5, #8]
   290de:	602b      	str	r3, [r5, #0]
   290e0:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   290e2:	4b0b      	ldr	r3, [pc, #44]	; (29110 <sys_clock_driver_init+0x78>)
   290e4:	4a0b      	ldr	r2, [pc, #44]	; (29114 <sys_clock_driver_init+0x7c>)
   290e6:	9300      	str	r3, [sp, #0]
   290e8:	9401      	str	r4, [sp, #4]
   290ea:	2300      	movs	r3, #0
   290ec:	4620      	mov	r0, r4
   290ee:	f7ff ff2f 	bl	28f50 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   290f2:	4630      	mov	r0, r6
   290f4:	f7fe ff30 	bl	27f58 <z_nrf_clock_control_lf_on>

	return 0;
}
   290f8:	4620      	mov	r0, r4
   290fa:	b002      	add	sp, #8
   290fc:	bd70      	pop	{r4, r5, r6, pc}
   290fe:	bf00      	nop
   29100:	20001b68 	.word	0x20001b68
   29104:	40011000 	.word	0x40011000
   29108:	e000e100 	.word	0xe000e100
   2910c:	20003198 	.word	0x20003198
   29110:	00028e39 	.word	0x00028e39
   29114:	007fffff 	.word	0x007fffff

00029118 <rtc_nrf_isr>:
{
   29118:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   2911c:	4c35      	ldr	r4, [pc, #212]	; (291f4 <rtc_nrf_isr+0xdc>)
   2911e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   29122:	079a      	lsls	r2, r3, #30
   29124:	d50b      	bpl.n	2913e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   29126:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   2912a:	b143      	cbz	r3, 2913e <rtc_nrf_isr+0x26>
		overflow_cnt++;
   2912c:	4a32      	ldr	r2, [pc, #200]	; (291f8 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2912e:	2300      	movs	r3, #0
   29130:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   29134:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   29138:	6813      	ldr	r3, [r2, #0]
   2913a:	3301      	adds	r3, #1
   2913c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   2913e:	f04f 0320 	mov.w	r3, #32
   29142:	f3ef 8211 	mrs	r2, BASEPRI
   29146:	f383 8812 	msr	BASEPRI_MAX, r3
   2914a:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   2914e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   29152:	03db      	lsls	r3, r3, #15
   29154:	d512      	bpl.n	2917c <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29156:	f3bf 8f5b 	dmb	ish
   2915a:	4b28      	ldr	r3, [pc, #160]	; (291fc <rtc_nrf_isr+0xe4>)
   2915c:	e853 1f00 	ldrex	r1, [r3]
   29160:	f021 0001 	bic.w	r0, r1, #1
   29164:	e843 0600 	strex	r6, r0, [r3]
   29168:	2e00      	cmp	r6, #0
   2916a:	d1f7      	bne.n	2915c <rtc_nrf_isr+0x44>
   2916c:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   29170:	2900      	cmp	r1, #0
   29172:	d136      	bne.n	291e2 <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   29174:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
   29178:	2b00      	cmp	r3, #0
   2917a:	d132      	bne.n	291e2 <rtc_nrf_isr+0xca>
{
   2917c:	2300      	movs	r3, #0
	__asm__ volatile(
   2917e:	f382 8811 	msr	BASEPRI, r2
   29182:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   29186:	b34b      	cbz	r3, 291dc <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
   29188:	f7ff fec0 	bl	28f0c <z_nrf_rtc_timer_read>
	__asm__ volatile(
   2918c:	f04f 0320 	mov.w	r3, #32
   29190:	f3ef 8c11 	mrs	ip, BASEPRI
   29194:	f383 8812 	msr	BASEPRI_MAX, r3
   29198:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   2919c:	4b18      	ldr	r3, [pc, #96]	; (29200 <rtc_nrf_isr+0xe8>)
   2919e:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   291a2:	42b0      	cmp	r0, r6
   291a4:	eb71 0207 	sbcs.w	r2, r1, r7
   291a8:	f04f 0200 	mov.w	r2, #0
   291ac:	d320      	bcc.n	291f0 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   291ae:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   291b2:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   291b6:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   291ba:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
   291be:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
   291c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   291c4:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
   291c8:	f38c 8811 	msr	BASEPRI, ip
   291cc:	f3bf 8f6f 	isb	sy
		if (handler) {
   291d0:	b121      	cbz	r1, 291dc <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
   291d2:	9500      	str	r5, [sp, #0]
   291d4:	4632      	mov	r2, r6
   291d6:	463b      	mov	r3, r7
   291d8:	2000      	movs	r0, #0
   291da:	4788      	blx	r1
}
   291dc:	b003      	add	sp, #12
   291de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   291e2:	2300      	movs	r3, #0
   291e4:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
   291e8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   291ec:	2301      	movs	r3, #1
}
   291ee:	e7c6      	b.n	2917e <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   291f0:	4611      	mov	r1, r2
   291f2:	e7e9      	b.n	291c8 <rtc_nrf_isr+0xb0>
   291f4:	40011000 	.word	0x40011000
   291f8:	2000319c 	.word	0x2000319c
   291fc:	20003194 	.word	0x20003194
   29200:	20001b68 	.word	0x20001b68

00029204 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   29204:	1c43      	adds	r3, r0, #1
{
   29206:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   29208:	d021      	beq.n	2924e <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   2920a:	2801      	cmp	r0, #1
   2920c:	dd21      	ble.n	29252 <sys_clock_set_timeout+0x4e>
   2920e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   29212:	da20      	bge.n	29256 <sys_clock_set_timeout+0x52>
   29214:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   29216:	f7ff fe79 	bl	28f0c <z_nrf_rtc_timer_read>
   2921a:	4b10      	ldr	r3, [pc, #64]	; (2925c <sys_clock_set_timeout+0x58>)
   2921c:	e9d3 1300 	ldrd	r1, r3, [r3]
   29220:	1a40      	subs	r0, r0, r1
		ticks = 0;
   29222:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   29226:	bf28      	it	cs
   29228:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   2922a:	3001      	adds	r0, #1
   2922c:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   2922e:	480c      	ldr	r0, [pc, #48]	; (29260 <sys_clock_set_timeout+0x5c>)
   29230:	4282      	cmp	r2, r0
   29232:	bf28      	it	cs
   29234:	4602      	movcs	r2, r0
   29236:	1852      	adds	r2, r2, r1
   29238:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   2923c:	4909      	ldr	r1, [pc, #36]	; (29264 <sys_clock_set_timeout+0x60>)
   2923e:	9001      	str	r0, [sp, #4]
   29240:	9100      	str	r1, [sp, #0]
   29242:	f143 0300 	adc.w	r3, r3, #0
   29246:	f7ff fe83 	bl	28f50 <compare_set>
}
   2924a:	b002      	add	sp, #8
   2924c:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   2924e:	4804      	ldr	r0, [pc, #16]	; (29260 <sys_clock_set_timeout+0x5c>)
   29250:	e7e0      	b.n	29214 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   29252:	2400      	movs	r4, #0
   29254:	e7df      	b.n	29216 <sys_clock_set_timeout+0x12>
   29256:	4c02      	ldr	r4, [pc, #8]	; (29260 <sys_clock_set_timeout+0x5c>)
   29258:	e7dd      	b.n	29216 <sys_clock_set_timeout+0x12>
   2925a:	bf00      	nop
   2925c:	20001b78 	.word	0x20001b78
   29260:	007fffff 	.word	0x007fffff
   29264:	00028e39 	.word	0x00028e39

00029268 <sys_clock_elapsed>:
{
   29268:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   2926a:	f7ff fe4f 	bl	28f0c <z_nrf_rtc_timer_read>
   2926e:	4b02      	ldr	r3, [pc, #8]	; (29278 <sys_clock_elapsed+0x10>)
   29270:	681b      	ldr	r3, [r3, #0]
}
   29272:	1ac0      	subs	r0, r0, r3
   29274:	bd08      	pop	{r3, pc}
   29276:	bf00      	nop
   29278:	20001b78 	.word	0x20001b78

0002927c <nrf_gpio_pin_clear>:
    *p_pin = pin_number & 0x1F;
   2927c:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   29280:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   29282:	2801      	cmp	r0, #1
   29284:	4b04      	ldr	r3, [pc, #16]	; (29298 <nrf_gpio_pin_clear+0x1c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   29286:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
   2928a:	bf18      	it	ne
   2928c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   29290:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
   29292:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
   29296:	4770      	bx	lr
   29298:	50000300 	.word	0x50000300

0002929c <nrf_pin_configure>:
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
   2929c:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   292a0:	2b00      	cmp	r3, #0
{
   292a2:	b530      	push	{r4, r5, lr}
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   292a4:	bf07      	ittee	eq
   292a6:	4614      	moveq	r4, r2
   292a8:	460d      	moveq	r5, r1
   292aa:	2401      	movne	r4, #1
   292ac:	2500      	movne	r5, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
   292ae:	f3c0 1281 	ubfx	r2, r0, #6, #2
    *p_pin = pin_number & 0x1F;
   292b2:	f000 011f 	and.w	r1, r0, #31
        case 1: return NRF_P1;
   292b6:	f010 0f20 	tst.w	r0, #32
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   292ba:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   292be:	ea40 0282 	orr.w	r2, r0, r2, lsl #2
        case 1: return NRF_P1;
   292c2:	4b06      	ldr	r3, [pc, #24]	; (292dc <nrf_pin_configure+0x40>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   292c4:	ea42 0205 	orr.w	r2, r2, r5
        case 1: return NRF_P1;
   292c8:	bf08      	it	eq
   292ca:	f04f 43a0 	moveq.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   292ce:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   292d2:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   292d6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
   292da:	bd30      	pop	{r4, r5, pc}
   292dc:	50000300 	.word	0x50000300

000292e0 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
   292e0:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   292e4:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   292e6:	2801      	cmp	r0, #1
   292e8:	4b04      	ldr	r3, [pc, #16]	; (292fc <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   292ea:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
   292ee:	bf18      	it	ne
   292f0:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   292f4:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   292f6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
   292fa:	4770      	bx	lr
   292fc:	50000300 	.word	0x50000300

00029300 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   29300:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   29304:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   29308:	2a08      	cmp	r2, #8
   2930a:	d106      	bne.n	2931a <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2930c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   29310:	2b05      	cmp	r3, #5
   29312:	d802      	bhi.n	2931a <nrf52_errata_103+0x1a>
   29314:	4a02      	ldr	r2, [pc, #8]	; (29320 <nrf52_errata_103+0x20>)
   29316:	5cd0      	ldrb	r0, [r2, r3]
   29318:	4770      	bx	lr
        return false;
   2931a:	2000      	movs	r0, #0
}
   2931c:	4770      	bx	lr
   2931e:	bf00      	nop
   29320:	00036728 	.word	0x00036728

00029324 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   29324:	4a02      	ldr	r2, [pc, #8]	; (29330 <nvmc_wait+0xc>)
   29326:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   2932a:	2b00      	cmp	r3, #0
   2932c:	d0fb      	beq.n	29326 <nvmc_wait+0x2>
}
   2932e:	4770      	bx	lr
   29330:	4001e000 	.word	0x4001e000

00029334 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   29334:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   29336:	f007 feaf 	bl	31098 <nrf52_errata_136>
   2933a:	b140      	cbz	r0, 2934e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   2933c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   29340:	2200      	movs	r2, #0
   29342:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   29346:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   2934a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   2934e:	f007 fea3 	bl	31098 <nrf52_errata_136>
   29352:	2800      	cmp	r0, #0
   29354:	d046      	beq.n	293e4 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   29356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2935a:	4b60      	ldr	r3, [pc, #384]	; (294dc <SystemInit+0x1a8>)
   2935c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   29360:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   29364:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   29368:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   2936c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   29370:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   29374:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   29378:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   2937c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   29380:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   29384:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   29388:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   2938c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   29390:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   29394:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   29398:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   2939c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   293a0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   293a4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   293a8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   293ac:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   293b0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   293b4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   293b8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   293bc:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   293c0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   293c4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   293c8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   293cc:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   293d0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   293d4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   293d8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   293dc:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   293e0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   293e4:	f7ff ff8c 	bl	29300 <nrf52_errata_103>
   293e8:	b118      	cbz	r0, 293f2 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   293ea:	4b3d      	ldr	r3, [pc, #244]	; (294e0 <SystemInit+0x1ac>)
   293ec:	4a3d      	ldr	r2, [pc, #244]	; (294e4 <SystemInit+0x1b0>)
   293ee:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   293f2:	f7ff ff85 	bl	29300 <nrf52_errata_103>
   293f6:	b118      	cbz	r0, 29400 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   293f8:	4b3b      	ldr	r3, [pc, #236]	; (294e8 <SystemInit+0x1b4>)
   293fa:	22fb      	movs	r2, #251	; 0xfb
   293fc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   29400:	f7ff ff7e 	bl	29300 <nrf52_errata_103>
   29404:	b170      	cbz	r0, 29424 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   29406:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   2940a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2940e:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   29412:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   29416:	f022 020f 	bic.w	r2, r2, #15
   2941a:	f003 030f 	and.w	r3, r3, #15
   2941e:	4313      	orrs	r3, r2
   29420:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   29424:	f7ff ff6c 	bl	29300 <nrf52_errata_103>
   29428:	b120      	cbz	r0, 29434 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   2942a:	4b30      	ldr	r3, [pc, #192]	; (294ec <SystemInit+0x1b8>)
   2942c:	f44f 7200 	mov.w	r2, #512	; 0x200
   29430:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   29434:	f007 fe30 	bl	31098 <nrf52_errata_136>
   29438:	b148      	cbz	r0, 2944e <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   2943a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2943e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   29442:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   29444:	bf44      	itt	mi
   29446:	f06f 0201 	mvnmi.w	r2, #1
   2944a:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2944e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   29452:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   29456:	2a08      	cmp	r2, #8
   29458:	d10e      	bne.n	29478 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2945a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   2945e:	2b05      	cmp	r3, #5
   29460:	d802      	bhi.n	29468 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   29462:	4a23      	ldr	r2, [pc, #140]	; (294f0 <SystemInit+0x1bc>)
   29464:	5cd3      	ldrb	r3, [r2, r3]
   29466:	b13b      	cbz	r3, 29478 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   29468:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2946c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   29470:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   29474:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   29478:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2947c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   29480:	2a00      	cmp	r2, #0
   29482:	db03      	blt.n	2948c <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   29484:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   29488:	2b00      	cmp	r3, #0
   2948a:	da22      	bge.n	294d2 <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2948c:	4919      	ldr	r1, [pc, #100]	; (294f4 <SystemInit+0x1c0>)
   2948e:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   29490:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   29494:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   29498:	2412      	movs	r4, #18
    nvmc_wait();
   2949a:	f7ff ff43 	bl	29324 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2949e:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   294a2:	f7ff ff3f 	bl	29324 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   294a6:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   294aa:	f7ff ff3b 	bl	29324 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   294ae:	2300      	movs	r3, #0
   294b0:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   294b4:	f7ff ff36 	bl	29324 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   294b8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   294bc:	490e      	ldr	r1, [pc, #56]	; (294f8 <SystemInit+0x1c4>)
   294be:	4b0f      	ldr	r3, [pc, #60]	; (294fc <SystemInit+0x1c8>)
   294c0:	68ca      	ldr	r2, [r1, #12]
   294c2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   294c6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   294c8:	60cb      	str	r3, [r1, #12]
   294ca:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   294ce:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   294d0:	e7fd      	b.n	294ce <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   294d2:	4b0b      	ldr	r3, [pc, #44]	; (29500 <SystemInit+0x1cc>)
   294d4:	4a0b      	ldr	r2, [pc, #44]	; (29504 <SystemInit+0x1d0>)
   294d6:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   294d8:	bd10      	pop	{r4, pc}
   294da:	bf00      	nop
   294dc:	4000c000 	.word	0x4000c000
   294e0:	40005000 	.word	0x40005000
   294e4:	00038148 	.word	0x00038148
   294e8:	4000f000 	.word	0x4000f000
   294ec:	40029000 	.word	0x40029000
   294f0:	00036722 	.word	0x00036722
   294f4:	4001e000 	.word	0x4001e000
   294f8:	e000ed00 	.word	0xe000ed00
   294fc:	05fa0004 	.word	0x05fa0004
   29500:	20000898 	.word	0x20000898
   29504:	03d09000 	.word	0x03d09000

00029508 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   29508:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   2950a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   2950c:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   2950e:	fab2 f382 	clz	r3, r2
   29512:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   29516:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   29518:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   2951a:	d014      	beq.n	29546 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2951c:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   29520:	fa05 f303 	lsl.w	r3, r5, r3
   29524:	ea22 0303 	bic.w	r3, r2, r3
   29528:	e850 6f00 	ldrex	r6, [r0]
   2952c:	4296      	cmp	r6, r2
   2952e:	d104      	bne.n	2953a <nrfx_flag32_alloc+0x32>
   29530:	e840 3c00 	strex	ip, r3, [r0]
   29534:	f1bc 0f00 	cmp.w	ip, #0
   29538:	d1f6      	bne.n	29528 <nrfx_flag32_alloc+0x20>
   2953a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   2953e:	d1e5      	bne.n	2950c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   29540:	4802      	ldr	r0, [pc, #8]	; (2954c <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   29542:	700c      	strb	r4, [r1, #0]
}
   29544:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   29546:	4802      	ldr	r0, [pc, #8]	; (29550 <nrfx_flag32_alloc+0x48>)
   29548:	e7fc      	b.n	29544 <nrfx_flag32_alloc+0x3c>
   2954a:	bf00      	nop
   2954c:	0bad0000 	.word	0x0bad0000
   29550:	0bad0002 	.word	0x0bad0002

00029554 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   29554:	6803      	ldr	r3, [r0, #0]
   29556:	40cb      	lsrs	r3, r1
   29558:	07db      	lsls	r3, r3, #31
{
   2955a:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   2955c:	d415      	bmi.n	2958a <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   2955e:	2301      	movs	r3, #1
   29560:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   29564:	6803      	ldr	r3, [r0, #0]
   29566:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   2956a:	ea41 0203 	orr.w	r2, r1, r3
   2956e:	e850 4f00 	ldrex	r4, [r0]
   29572:	429c      	cmp	r4, r3
   29574:	d104      	bne.n	29580 <nrfx_flag32_free+0x2c>
   29576:	e840 2c00 	strex	ip, r2, [r0]
   2957a:	f1bc 0f00 	cmp.w	ip, #0
   2957e:	d1f6      	bne.n	2956e <nrfx_flag32_free+0x1a>
   29580:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   29584:	d1ee      	bne.n	29564 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   29586:	4802      	ldr	r0, [pc, #8]	; (29590 <nrfx_flag32_free+0x3c>)
}
   29588:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   2958a:	4802      	ldr	r0, [pc, #8]	; (29594 <nrfx_flag32_free+0x40>)
   2958c:	e7fc      	b.n	29588 <nrfx_flag32_free+0x34>
   2958e:	bf00      	nop
   29590:	0bad0000 	.word	0x0bad0000
   29594:	0bad0004 	.word	0x0bad0004

00029598 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   29598:	4b04      	ldr	r3, [pc, #16]	; (295ac <nrfx_clock_init+0x14>)
   2959a:	791a      	ldrb	r2, [r3, #4]
   2959c:	b922      	cbnz	r2, 295a8 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   2959e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   295a0:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   295a2:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   295a4:	4802      	ldr	r0, [pc, #8]	; (295b0 <nrfx_clock_init+0x18>)
   295a6:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   295a8:	4802      	ldr	r0, [pc, #8]	; (295b4 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   295aa:	4770      	bx	lr
   295ac:	200031a0 	.word	0x200031a0
   295b0:	0bad0000 	.word	0x0bad0000
   295b4:	0bad000c 	.word	0x0bad000c

000295b8 <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   295b8:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   295ba:	b110      	cbz	r0, 295c2 <nrfx_clock_stop+0xa>
   295bc:	2801      	cmp	r0, #1
   295be:	d017      	beq.n	295f0 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   295c0:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   295c2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   295c6:	2302      	movs	r3, #2
   295c8:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   295cc:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   295d0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   295d4:	2301      	movs	r3, #1
   295d6:	60e3      	str	r3, [r4, #12]
   295d8:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   295dc:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   295e0:	03db      	lsls	r3, r3, #15
   295e2:	d5ed      	bpl.n	295c0 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   295e4:	2001      	movs	r0, #1
   295e6:	f007 fd61 	bl	310ac <nrfx_busy_wait>
   295ea:	3d01      	subs	r5, #1
   295ec:	d1f6      	bne.n	295dc <nrfx_clock_stop+0x24>
   295ee:	e7e7      	b.n	295c0 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   295f0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   295f4:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   295f6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   295fa:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   295fe:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29602:	6060      	str	r0, [r4, #4]
   29604:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   29608:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   2960c:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   29610:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   29612:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   29616:	d505      	bpl.n	29624 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   29618:	b123      	cbz	r3, 29624 <nrfx_clock_stop+0x6c>
   2961a:	2001      	movs	r0, #1
   2961c:	f007 fd46 	bl	310ac <nrfx_busy_wait>
   29620:	3d01      	subs	r5, #1
   29622:	d1f1      	bne.n	29608 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   29624:	4b01      	ldr	r3, [pc, #4]	; (2962c <nrfx_clock_stop+0x74>)
   29626:	2200      	movs	r2, #0
   29628:	715a      	strb	r2, [r3, #5]
   2962a:	e7c9      	b.n	295c0 <nrfx_clock_stop+0x8>
   2962c:	200031a0 	.word	0x200031a0

00029630 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   29630:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   29634:	b510      	push	{r4, lr}
   29636:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   2963a:	b16a      	cbz	r2, 29658 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2963c:	2200      	movs	r2, #0
   2963e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   29642:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   29646:	2201      	movs	r2, #1
   29648:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   2964c:	4b11      	ldr	r3, [pc, #68]	; (29694 <nrfx_power_clock_irq_handler+0x64>)
   2964e:	7958      	ldrb	r0, [r3, #5]
   29650:	b910      	cbnz	r0, 29658 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   29652:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   29654:	681b      	ldr	r3, [r3, #0]
   29656:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   29658:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2965c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   29660:	b172      	cbz	r2, 29680 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   29662:	2200      	movs	r2, #0
   29664:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   29668:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2966c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   29670:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   29674:	0792      	lsls	r2, r2, #30
   29676:	d104      	bne.n	29682 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   29678:	2201      	movs	r2, #1
   2967a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2967e:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   29680:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   29682:	2202      	movs	r2, #2
   29684:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   29688:	4b02      	ldr	r3, [pc, #8]	; (29694 <nrfx_power_clock_irq_handler+0x64>)
}
   2968a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2968e:	681b      	ldr	r3, [r3, #0]
   29690:	2001      	movs	r0, #1
   29692:	4718      	bx	r3
   29694:	200031a0 	.word	0x200031a0

00029698 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   29698:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   2969a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   2969e:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   296a0:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   296a2:	6002      	str	r2, [r0, #0]
}
   296a4:	4802      	ldr	r0, [pc, #8]	; (296b0 <nrf_gpio_pin_port_decode+0x18>)
   296a6:	bf18      	it	ne
   296a8:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   296ac:	4770      	bx	lr
   296ae:	bf00      	nop
   296b0:	50000300 	.word	0x50000300

000296b4 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   296b4:	4b03      	ldr	r3, [pc, #12]	; (296c4 <pin_in_use_by_te+0x10>)
   296b6:	3008      	adds	r0, #8
   296b8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   296bc:	f3c0 1040 	ubfx	r0, r0, #5, #1
   296c0:	4770      	bx	lr
   296c2:	bf00      	nop
   296c4:	2000089c 	.word	0x2000089c

000296c8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   296c8:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   296ca:	f100 0308 	add.w	r3, r0, #8
   296ce:	4c0c      	ldr	r4, [pc, #48]	; (29700 <call_handler+0x38>)
   296d0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   296d4:	05da      	lsls	r2, r3, #23
{
   296d6:	4605      	mov	r5, r0
   296d8:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   296da:	d507      	bpl.n	296ec <call_handler+0x24>
   296dc:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   296e0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   296e4:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   296e8:	6852      	ldr	r2, [r2, #4]
   296ea:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   296ec:	68a3      	ldr	r3, [r4, #8]
   296ee:	b12b      	cbz	r3, 296fc <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   296f0:	68e2      	ldr	r2, [r4, #12]
   296f2:	4631      	mov	r1, r6
   296f4:	4628      	mov	r0, r5
    }
}
   296f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   296fa:	4718      	bx	r3
}
   296fc:	bd70      	pop	{r4, r5, r6, pc}
   296fe:	bf00      	nop
   29700:	2000089c 	.word	0x2000089c

00029704 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   29704:	4a12      	ldr	r2, [pc, #72]	; (29750 <release_handler+0x4c>)
   29706:	3008      	adds	r0, #8
{
   29708:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2970a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   2970e:	05d9      	lsls	r1, r3, #23
   29710:	d51b      	bpl.n	2974a <release_handler+0x46>
   29712:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   29716:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   2971a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   2971e:	f102 0410 	add.w	r4, r2, #16
   29722:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   29724:	f834 3b02 	ldrh.w	r3, [r4], #2
   29728:	f413 7f80 	tst.w	r3, #256	; 0x100
   2972c:	d003      	beq.n	29736 <release_handler+0x32>
   2972e:	f3c3 2343 	ubfx	r3, r3, #9, #4
   29732:	4299      	cmp	r1, r3
   29734:	d009      	beq.n	2974a <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   29736:	3001      	adds	r0, #1
   29738:	2830      	cmp	r0, #48	; 0x30
   2973a:	d1f3      	bne.n	29724 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   2973c:	2300      	movs	r3, #0
   2973e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   29742:	4804      	ldr	r0, [pc, #16]	; (29754 <release_handler+0x50>)
}
   29744:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   29746:	f7ff bf05 	b.w	29554 <nrfx_flag32_free>
}
   2974a:	bc10      	pop	{r4}
   2974c:	4770      	bx	lr
   2974e:	bf00      	nop
   29750:	2000089c 	.word	0x2000089c
   29754:	20000910 	.word	0x20000910

00029758 <pin_handler_trigger_uninit>:
{
   29758:	b538      	push	{r3, r4, r5, lr}
   2975a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   2975c:	f7ff ffaa 	bl	296b4 <pin_in_use_by_te>
   29760:	4c09      	ldr	r4, [pc, #36]	; (29788 <pin_handler_trigger_uninit+0x30>)
   29762:	f102 0508 	add.w	r5, r2, #8
   29766:	b140      	cbz	r0, 2977a <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   29768:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   2976c:	4907      	ldr	r1, [pc, #28]	; (2978c <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   2976e:	0b5b      	lsrs	r3, r3, #13
   29770:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   29774:	2000      	movs	r0, #0
   29776:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   2977a:	4610      	mov	r0, r2
   2977c:	f7ff ffc2 	bl	29704 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   29780:	2300      	movs	r3, #0
   29782:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   29786:	bd38      	pop	{r3, r4, r5, pc}
   29788:	2000089c 	.word	0x2000089c
   2978c:	40006000 	.word	0x40006000

00029790 <nrfx_gpiote_input_configure>:
{
   29790:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   29794:	4604      	mov	r4, r0
   29796:	4617      	mov	r7, r2
   29798:	461d      	mov	r5, r3
    if (p_input_config)
   2979a:	b321      	cbz	r1, 297e6 <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2979c:	4e4e      	ldr	r6, [pc, #312]	; (298d8 <nrfx_gpiote_input_configure+0x148>)
   2979e:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   297a2:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   297a6:	079b      	lsls	r3, r3, #30
   297a8:	d506      	bpl.n	297b8 <nrfx_gpiote_input_configure+0x28>
   297aa:	f7ff ff83 	bl	296b4 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
   297ae:	b118      	cbz	r0, 297b8 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
   297b0:	484a      	ldr	r0, [pc, #296]	; (298dc <nrfx_gpiote_input_configure+0x14c>)
}
   297b2:	b004      	add	sp, #16
   297b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   297b8:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   297ba:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   297be:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   297c2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   297c6:	f10d 020f 	add.w	r2, sp, #15
   297ca:	460b      	mov	r3, r1
   297cc:	4620      	mov	r0, r4
   297ce:	f10d 010e 	add.w	r1, sp, #14
   297d2:	f007 fca3 	bl	3111c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   297d6:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   297da:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   297de:	f043 0301 	orr.w	r3, r3, #1
   297e2:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
   297e6:	b197      	cbz	r7, 2980e <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   297e8:	4b3b      	ldr	r3, [pc, #236]	; (298d8 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   297ea:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   297ec:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   297ee:	f104 0008 	add.w	r0, r4, #8
   297f2:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   297f6:	078f      	lsls	r7, r1, #30
   297f8:	d50c      	bpl.n	29814 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
   297fa:	2a00      	cmp	r2, #0
   297fc:	d1d8      	bne.n	297b0 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   297fe:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   29802:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   29806:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   2980a:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   2980e:	bbcd      	cbnz	r5, 29884 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
   29810:	4833      	ldr	r0, [pc, #204]	; (298e0 <nrfx_gpiote_input_configure+0x150>)
   29812:	e7ce      	b.n	297b2 <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   29814:	f021 0120 	bic.w	r1, r1, #32
   29818:	04c9      	lsls	r1, r1, #19
   2981a:	0cc9      	lsrs	r1, r1, #19
   2981c:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   29820:	2a00      	cmp	r2, #0
   29822:	d0ec      	beq.n	297fe <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
   29824:	2e03      	cmp	r6, #3
   29826:	d8c3      	bhi.n	297b0 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
   29828:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   2982a:	b92e      	cbnz	r6, 29838 <nrfx_gpiote_input_configure+0xa8>
   2982c:	4a2d      	ldr	r2, [pc, #180]	; (298e4 <nrfx_gpiote_input_configure+0x154>)
   2982e:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   29832:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   29836:	e7e2      	b.n	297fe <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   29838:	00ba      	lsls	r2, r7, #2
   2983a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2983e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   29842:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   29846:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   2984a:	f02c 0c03 	bic.w	ip, ip, #3
   2984e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   29852:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   29856:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   2985a:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   2985e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   29862:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   29866:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   2986a:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
   2986e:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   29872:	ea4c 0c0e 	orr.w	ip, ip, lr
   29876:	f041 0120 	orr.w	r1, r1, #32
   2987a:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   2987e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   29882:	e7bc      	b.n	297fe <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   29884:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   29888:	4620      	mov	r0, r4
   2988a:	f7ff ff3b 	bl	29704 <release_handler>
    if (!handler)
   2988e:	2e00      	cmp	r6, #0
   29890:	d0be      	beq.n	29810 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   29892:	4d11      	ldr	r5, [pc, #68]	; (298d8 <nrfx_gpiote_input_configure+0x148>)
   29894:	682b      	ldr	r3, [r5, #0]
   29896:	429e      	cmp	r6, r3
   29898:	d104      	bne.n	298a4 <nrfx_gpiote_input_configure+0x114>
   2989a:	686b      	ldr	r3, [r5, #4]
   2989c:	429f      	cmp	r7, r3
   2989e:	d101      	bne.n	298a4 <nrfx_gpiote_input_configure+0x114>
   298a0:	2200      	movs	r2, #0
   298a2:	e00a      	b.n	298ba <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   298a4:	4810      	ldr	r0, [pc, #64]	; (298e8 <nrfx_gpiote_input_configure+0x158>)
   298a6:	f10d 010f 	add.w	r1, sp, #15
   298aa:	f7ff fe2d 	bl	29508 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   298ae:	4b0c      	ldr	r3, [pc, #48]	; (298e0 <nrfx_gpiote_input_configure+0x150>)
   298b0:	4298      	cmp	r0, r3
   298b2:	f47f af7e 	bne.w	297b2 <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
   298b6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   298ba:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   298be:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   298c2:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   298c4:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   298c6:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   298ca:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   298ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   298d2:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   298d6:	e79b      	b.n	29810 <nrfx_gpiote_input_configure+0x80>
   298d8:	2000089c 	.word	0x2000089c
   298dc:	0bad0004 	.word	0x0bad0004
   298e0:	0bad0000 	.word	0x0bad0000
   298e4:	40006000 	.word	0x40006000
   298e8:	20000910 	.word	0x20000910

000298ec <nrfx_gpiote_output_configure>:
{
   298ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   298ee:	4604      	mov	r4, r0
   298f0:	b085      	sub	sp, #20
   298f2:	4615      	mov	r5, r2
    if (p_config)
   298f4:	b319      	cbz	r1, 2993e <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   298f6:	4e33      	ldr	r6, [pc, #204]	; (299c4 <nrfx_gpiote_output_configure+0xd8>)
   298f8:	f100 0708 	add.w	r7, r0, #8
   298fc:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   29900:	0793      	lsls	r3, r2, #30
   29902:	d403      	bmi.n	2990c <nrfx_gpiote_output_configure+0x20>
   29904:	f7ff fed6 	bl	296b4 <pin_in_use_by_te>
   29908:	2800      	cmp	r0, #0
   2990a:	d158      	bne.n	299be <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   2990c:	f012 0f1c 	tst.w	r2, #28
   29910:	d002      	beq.n	29918 <nrfx_gpiote_output_configure+0x2c>
   29912:	784b      	ldrb	r3, [r1, #1]
   29914:	2b01      	cmp	r3, #1
   29916:	d052      	beq.n	299be <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   29918:	2301      	movs	r3, #1
   2991a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   2991e:	2300      	movs	r3, #0
   29920:	e9cd 1300 	strd	r1, r3, [sp]
   29924:	1c4a      	adds	r2, r1, #1
   29926:	1c8b      	adds	r3, r1, #2
   29928:	4620      	mov	r0, r4
   2992a:	f10d 010f 	add.w	r1, sp, #15
   2992e:	f007 fbf5 	bl	3111c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   29932:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   29936:	f043 0303 	orr.w	r3, r3, #3
   2993a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   2993e:	b915      	cbnz	r5, 29946 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   29940:	4821      	ldr	r0, [pc, #132]	; (299c8 <nrfx_gpiote_output_configure+0xdc>)
}
   29942:	b005      	add	sp, #20
   29944:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   29946:	4e1f      	ldr	r6, [pc, #124]	; (299c4 <nrfx_gpiote_output_configure+0xd8>)
   29948:	f104 0708 	add.w	r7, r4, #8
   2994c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   29950:	0783      	lsls	r3, r0, #30
   29952:	d534      	bpl.n	299be <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   29954:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   29958:	4661      	mov	r1, ip
   2995a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   2995c:	f020 0020 	bic.w	r0, r0, #32
   29960:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   29964:	04c0      	lsls	r0, r0, #19
   29966:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   2996a:	0cc0      	lsrs	r0, r0, #19
   2996c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   29970:	2300      	movs	r3, #0
   29972:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   29976:	786a      	ldrb	r2, [r5, #1]
   29978:	2a00      	cmp	r2, #0
   2997a:	d0e1      	beq.n	29940 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   2997c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   29980:	78ad      	ldrb	r5, [r5, #2]
   29982:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   29986:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   2998a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2998e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   29992:	0223      	lsls	r3, r4, #8
   29994:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   29998:	0412      	lsls	r2, r2, #16
   2999a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2999e:	ea43 030e 	orr.w	r3, r3, lr
   299a2:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   299a4:	052a      	lsls	r2, r5, #20
   299a6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   299aa:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   299ae:	4313      	orrs	r3, r2
   299b0:	f040 0020 	orr.w	r0, r0, #32
   299b4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   299b8:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   299bc:	e7c0      	b.n	29940 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
   299be:	4803      	ldr	r0, [pc, #12]	; (299cc <nrfx_gpiote_output_configure+0xe0>)
   299c0:	e7bf      	b.n	29942 <nrfx_gpiote_output_configure+0x56>
   299c2:	bf00      	nop
   299c4:	2000089c 	.word	0x2000089c
   299c8:	0bad0000 	.word	0x0bad0000
   299cc:	0bad0004 	.word	0x0bad0004

000299d0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   299d0:	4b01      	ldr	r3, [pc, #4]	; (299d8 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   299d2:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   299d6:	4770      	bx	lr
   299d8:	2000089c 	.word	0x2000089c

000299dc <nrfx_gpiote_channel_get>:
{
   299dc:	b508      	push	{r3, lr}
   299de:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   299e0:	f7ff fe68 	bl	296b4 <pin_in_use_by_te>
   299e4:	b138      	cbz	r0, 299f6 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   299e6:	4b05      	ldr	r3, [pc, #20]	; (299fc <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   299e8:	4805      	ldr	r0, [pc, #20]	; (29a00 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   299ea:	3208      	adds	r2, #8
   299ec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   299f0:	0b5b      	lsrs	r3, r3, #13
   299f2:	700b      	strb	r3, [r1, #0]
}
   299f4:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   299f6:	4803      	ldr	r0, [pc, #12]	; (29a04 <nrfx_gpiote_channel_get+0x28>)
   299f8:	e7fc      	b.n	299f4 <nrfx_gpiote_channel_get+0x18>
   299fa:	bf00      	nop
   299fc:	2000089c 	.word	0x2000089c
   29a00:	0bad0000 	.word	0x0bad0000
   29a04:	0bad0004 	.word	0x0bad0004

00029a08 <nrfx_gpiote_init>:
{
   29a08:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   29a0a:	4c0f      	ldr	r4, [pc, #60]	; (29a48 <nrfx_gpiote_init+0x40>)
   29a0c:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   29a10:	b9bd      	cbnz	r5, 29a42 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   29a12:	2260      	movs	r2, #96	; 0x60
   29a14:	4629      	mov	r1, r5
   29a16:	f104 0010 	add.w	r0, r4, #16
   29a1a:	f004 fb11 	bl	2e040 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   29a1e:	2006      	movs	r0, #6
   29a20:	f7e6 ff08 	bl	10834 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   29a24:	4b09      	ldr	r3, [pc, #36]	; (29a4c <nrfx_gpiote_init+0x44>)
    return err_code;
   29a26:	480a      	ldr	r0, [pc, #40]	; (29a50 <nrfx_gpiote_init+0x48>)
   29a28:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   29a2c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   29a30:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   29a34:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   29a38:	2301      	movs	r3, #1
   29a3a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   29a3e:	6763      	str	r3, [r4, #116]	; 0x74
}
   29a40:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   29a42:	4804      	ldr	r0, [pc, #16]	; (29a54 <nrfx_gpiote_init+0x4c>)
   29a44:	e7fc      	b.n	29a40 <nrfx_gpiote_init+0x38>
   29a46:	bf00      	nop
   29a48:	2000089c 	.word	0x2000089c
   29a4c:	40006000 	.word	0x40006000
   29a50:	0bad0000 	.word	0x0bad0000
   29a54:	0bad0005 	.word	0x0bad0005

00029a58 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   29a58:	4b03      	ldr	r3, [pc, #12]	; (29a68 <nrfx_gpiote_is_init+0x10>)
   29a5a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   29a5e:	3800      	subs	r0, #0
   29a60:	bf18      	it	ne
   29a62:	2001      	movne	r0, #1
   29a64:	4770      	bx	lr
   29a66:	bf00      	nop
   29a68:	2000089c 	.word	0x2000089c

00029a6c <nrfx_gpiote_channel_free>:
{
   29a6c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   29a6e:	4801      	ldr	r0, [pc, #4]	; (29a74 <nrfx_gpiote_channel_free+0x8>)
   29a70:	f7ff bd70 	b.w	29554 <nrfx_flag32_free>
   29a74:	2000090c 	.word	0x2000090c

00029a78 <nrfx_gpiote_channel_alloc>:
{
   29a78:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   29a7a:	4801      	ldr	r0, [pc, #4]	; (29a80 <nrfx_gpiote_channel_alloc+0x8>)
   29a7c:	f7ff bd44 	b.w	29508 <nrfx_flag32_alloc>
   29a80:	2000090c 	.word	0x2000090c

00029a84 <nrfx_gpiote_trigger_enable>:
{
   29a84:	b537      	push	{r0, r1, r2, r4, r5, lr}
   29a86:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   29a88:	f7ff fe14 	bl	296b4 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   29a8c:	f104 0208 	add.w	r2, r4, #8
   29a90:	4b1e      	ldr	r3, [pc, #120]	; (29b0c <nrfx_gpiote_trigger_enable+0x88>)
   29a92:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   29a96:	b1e8      	cbz	r0, 29ad4 <nrfx_gpiote_trigger_enable+0x50>
   29a98:	f013 0502 	ands.w	r5, r3, #2
   29a9c:	d11a      	bne.n	29ad4 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   29a9e:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   29aa0:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   29aa2:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   29aa6:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   29aaa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   29aae:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   29ab2:	6005      	str	r5, [r0, #0]
   29ab4:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   29ab6:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   29aba:	f040 0001 	orr.w	r0, r0, #1
   29abe:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   29ac2:	b129      	cbz	r1, 29ad0 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   29ac4:	2201      	movs	r2, #1
   29ac6:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   29aca:	4a11      	ldr	r2, [pc, #68]	; (29b10 <nrfx_gpiote_trigger_enable+0x8c>)
   29acc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   29ad0:	b003      	add	sp, #12
   29ad2:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   29ad4:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   29ad8:	2b04      	cmp	r3, #4
   29ada:	d012      	beq.n	29b02 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   29adc:	2b05      	cmp	r3, #5
   29ade:	d012      	beq.n	29b06 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29ae0:	a801      	add	r0, sp, #4
   29ae2:	9401      	str	r4, [sp, #4]
   29ae4:	f7ff fdd8 	bl	29698 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   29ae8:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   29aea:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   29aee:	40d9      	lsrs	r1, r3
   29af0:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   29af4:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   29af6:	4620      	mov	r0, r4
}
   29af8:	b003      	add	sp, #12
   29afa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   29afe:	f007 bb54 	b.w	311aa <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   29b02:	2103      	movs	r1, #3
   29b04:	e7f7      	b.n	29af6 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   29b06:	2102      	movs	r1, #2
   29b08:	e7f5      	b.n	29af6 <nrfx_gpiote_trigger_enable+0x72>
   29b0a:	bf00      	nop
   29b0c:	2000089c 	.word	0x2000089c
   29b10:	40006000 	.word	0x40006000

00029b14 <nrfx_gpiote_trigger_disable>:
{
   29b14:	b508      	push	{r3, lr}
   29b16:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   29b18:	f7ff fdcc 	bl	296b4 <pin_in_use_by_te>
   29b1c:	b1c0      	cbz	r0, 29b50 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   29b1e:	f102 0108 	add.w	r1, r2, #8
   29b22:	4b0e      	ldr	r3, [pc, #56]	; (29b5c <nrfx_gpiote_trigger_disable+0x48>)
   29b24:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   29b28:	0799      	lsls	r1, r3, #30
   29b2a:	d411      	bmi.n	29b50 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   29b2c:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   29b2e:	2201      	movs	r2, #1
   29b30:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   29b32:	009b      	lsls	r3, r3, #2
   29b34:	490a      	ldr	r1, [pc, #40]	; (29b60 <nrfx_gpiote_trigger_disable+0x4c>)
   29b36:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   29b3a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   29b3e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   29b42:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   29b46:	f022 0203 	bic.w	r2, r2, #3
   29b4a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   29b4e:	bd08      	pop	{r3, pc}
   29b50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   29b54:	2100      	movs	r1, #0
   29b56:	4610      	mov	r0, r2
   29b58:	f007 bb27 	b.w	311aa <nrf_gpio_cfg_sense_set>
   29b5c:	2000089c 	.word	0x2000089c
   29b60:	40006000 	.word	0x40006000

00029b64 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   29b64:	4b0e      	ldr	r3, [pc, #56]	; (29ba0 <nrfx_gpiote_pin_uninit+0x3c>)
   29b66:	f100 0208 	add.w	r2, r0, #8
{
   29b6a:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   29b6c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   29b70:	07db      	lsls	r3, r3, #31
{
   29b72:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   29b74:	d511      	bpl.n	29b9a <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   29b76:	f7ff ffcd 	bl	29b14 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   29b7a:	4620      	mov	r0, r4
   29b7c:	f7ff fdec 	bl	29758 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29b80:	a801      	add	r0, sp, #4
   29b82:	9401      	str	r4, [sp, #4]
   29b84:	f7ff fd88 	bl	29698 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   29b88:	9b01      	ldr	r3, [sp, #4]
   29b8a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   29b8e:	2202      	movs	r2, #2
   29b90:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   29b94:	4803      	ldr	r0, [pc, #12]	; (29ba4 <nrfx_gpiote_pin_uninit+0x40>)
}
   29b96:	b002      	add	sp, #8
   29b98:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   29b9a:	4803      	ldr	r0, [pc, #12]	; (29ba8 <nrfx_gpiote_pin_uninit+0x44>)
   29b9c:	e7fb      	b.n	29b96 <nrfx_gpiote_pin_uninit+0x32>
   29b9e:	bf00      	nop
   29ba0:	2000089c 	.word	0x2000089c
   29ba4:	0bad0000 	.word	0x0bad0000
   29ba8:	0bad0004 	.word	0x0bad0004

00029bac <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   29bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29bb0:	4b64      	ldr	r3, [pc, #400]	; (29d44 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   29bb2:	4865      	ldr	r0, [pc, #404]	; (29d48 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   29bb4:	4965      	ldr	r1, [pc, #404]	; (29d4c <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
   29bb6:	2600      	movs	r6, #0
{
   29bb8:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   29bba:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   29bbc:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   29bbe:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   29bc0:	b135      	cbz	r5, 29bd0 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   29bc2:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   29bc6:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   29bc8:	bf1e      	ittt	ne
   29bca:	601c      	strne	r4, [r3, #0]
   29bcc:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   29bce:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   29bd0:	3304      	adds	r3, #4
   29bd2:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   29bd4:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   29bd8:	d1f1      	bne.n	29bbe <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   29bda:	f8df 816c 	ldr.w	r8, [pc, #364]	; 29d48 <nrfx_gpiote_irq_handler+0x19c>
   29bde:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   29be2:	2b00      	cmp	r3, #0
   29be4:	f000 8091 	beq.w	29d0a <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   29be8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   29bec:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   29bf0:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   29bf2:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   29bf6:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   29bfa:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   29bfc:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   29c00:	2700      	movs	r7, #0
            while (latch[i])
   29c02:	f10d 0910 	add.w	r9, sp, #16
   29c06:	017b      	lsls	r3, r7, #5
   29c08:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   29c0a:	f04f 0a01 	mov.w	sl, #1
   29c0e:	e049      	b.n	29ca4 <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
   29c10:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   29c12:	4a4f      	ldr	r2, [pc, #316]	; (29d50 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   29c14:	fa94 f4a4 	rbit	r4, r4
   29c18:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   29c1c:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   29c1e:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   29c22:	08e0      	lsrs	r0, r4, #3
   29c24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   29c28:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
   29c2a:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   29c2e:	fa0a fc02 	lsl.w	ip, sl, r2
   29c32:	f819 2000 	ldrb.w	r2, [r9, r0]
   29c36:	ea22 020c 	bic.w	r2, r2, ip
   29c3a:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29c3e:	a803      	add	r0, sp, #12
   29c40:	f3c3 0582 	ubfx	r5, r3, #2, #3
   29c44:	0899      	lsrs	r1, r3, #2
   29c46:	f7ff fd27 	bl	29698 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   29c4a:	9a03      	ldr	r2, [sp, #12]
   29c4c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
   29c50:	074b      	lsls	r3, r1, #29
   29c52:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   29c56:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   29c58:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   29c5c:	d529      	bpl.n	29cb2 <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
   29c5e:	4620      	mov	r0, r4
   29c60:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   29c62:	b2d5      	uxtb	r5, r2
   29c64:	f7ff fd30 	bl	296c8 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29c68:	a803      	add	r0, sp, #12
   29c6a:	9403      	str	r4, [sp, #12]
   29c6c:	f7ff fd14 	bl	29698 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   29c70:	9b03      	ldr	r3, [sp, #12]
   29c72:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   29c76:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   29c7a:	f3c3 4301 	ubfx	r3, r3, #16, #2
   29c7e:	429d      	cmp	r5, r3
   29c80:	d107      	bne.n	29c92 <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   29c82:	2100      	movs	r1, #0
   29c84:	4620      	mov	r0, r4
   29c86:	f007 fa90 	bl	311aa <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   29c8a:	4629      	mov	r1, r5
   29c8c:	4620      	mov	r0, r4
   29c8e:	f007 fa8c 	bl	311aa <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29c92:	a803      	add	r0, sp, #12
   29c94:	9403      	str	r4, [sp, #12]
   29c96:	f7ff fcff 	bl	29698 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   29c9a:	9b03      	ldr	r3, [sp, #12]
   29c9c:	fa0a f303 	lsl.w	r3, sl, r3
   29ca0:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   29ca4:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
   29ca8:	2c00      	cmp	r4, #0
   29caa:	d1b1      	bne.n	29c10 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   29cac:	b9cf      	cbnz	r7, 29ce2 <nrfx_gpiote_irq_handler+0x136>
   29cae:	2701      	movs	r7, #1
   29cb0:	e7a9      	b.n	29c06 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   29cb2:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   29cb4:	bf0c      	ite	eq
   29cb6:	2103      	moveq	r1, #3
   29cb8:	2102      	movne	r1, #2
   29cba:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   29cbc:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
   29cbe:	f007 fa74 	bl	311aa <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   29cc2:	2d03      	cmp	r5, #3
   29cc4:	d004      	beq.n	29cd0 <nrfx_gpiote_irq_handler+0x124>
   29cc6:	9a01      	ldr	r2, [sp, #4]
   29cc8:	2a02      	cmp	r2, #2
   29cca:	d106      	bne.n	29cda <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   29ccc:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   29cce:	d1e0      	bne.n	29c92 <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   29cd0:	4659      	mov	r1, fp
   29cd2:	4620      	mov	r0, r4
   29cd4:	f7ff fcf8 	bl	296c8 <call_handler>
   29cd8:	e7db      	b.n	29c92 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   29cda:	2a03      	cmp	r2, #3
   29cdc:	d1d9      	bne.n	29c92 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   29cde:	2d02      	cmp	r5, #2
   29ce0:	e7f5      	b.n	29cce <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   29ce2:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   29ce6:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   29cea:	491a      	ldr	r1, [pc, #104]	; (29d54 <nrfx_gpiote_irq_handler+0x1a8>)
   29cec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   29cf0:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   29cf4:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   29cf6:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   29cfa:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
   29cfe:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   29d00:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   29d04:	4313      	orrs	r3, r2
   29d06:	f47f af7b 	bne.w	29c00 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   29d0a:	2401      	movs	r4, #1
    while (mask)
   29d0c:	b916      	cbnz	r6, 29d14 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   29d0e:	b007      	add	sp, #28
   29d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   29d14:	fa96 f3a6 	rbit	r3, r6
   29d18:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   29d1c:	fa04 f203 	lsl.w	r2, r4, r3
   29d20:	009b      	lsls	r3, r3, #2
   29d22:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   29d26:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   29d2a:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   29d2e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   29d32:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   29d36:	f3c0 2005 	ubfx	r0, r0, #8, #6
   29d3a:	f3c1 4101 	ubfx	r1, r1, #16, #2
   29d3e:	f7ff fcc3 	bl	296c8 <call_handler>
   29d42:	e7e3      	b.n	29d0c <nrfx_gpiote_irq_handler+0x160>
   29d44:	40006100 	.word	0x40006100
   29d48:	40006000 	.word	0x40006000
   29d4c:	40006120 	.word	0x40006120
   29d50:	2000089c 	.word	0x2000089c
   29d54:	50000300 	.word	0x50000300

00029d58 <nvmc_word_write>:
   29d58:	4a04      	ldr	r2, [pc, #16]	; (29d6c <nvmc_word_write+0x14>)
   29d5a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   29d5e:	07db      	lsls	r3, r3, #31
   29d60:	d5fb      	bpl.n	29d5a <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   29d62:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   29d64:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   29d68:	4770      	bx	lr
   29d6a:	bf00      	nop
   29d6c:	4001e000 	.word	0x4001e000

00029d70 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   29d70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29d74:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   29d76:	fbb0 f3f2 	udiv	r3, r0, r2
   29d7a:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   29d7e:	b973      	cbnz	r3, 29d9e <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   29d80:	4b08      	ldr	r3, [pc, #32]	; (29da4 <nrfx_nvmc_page_erase+0x34>)
   29d82:	2202      	movs	r2, #2
   29d84:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   29d88:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   29d8c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   29d90:	07d2      	lsls	r2, r2, #31
   29d92:	d5fb      	bpl.n	29d8c <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   29d94:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   29d96:	4804      	ldr	r0, [pc, #16]	; (29da8 <nrfx_nvmc_page_erase+0x38>)
   29d98:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   29d9c:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   29d9e:	4803      	ldr	r0, [pc, #12]	; (29dac <nrfx_nvmc_page_erase+0x3c>)
}
   29da0:	4770      	bx	lr
   29da2:	bf00      	nop
   29da4:	4001e000 	.word	0x4001e000
   29da8:	0bad0000 	.word	0x0bad0000
   29dac:	0bad000a 	.word	0x0bad000a

00029db0 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   29db0:	b510      	push	{r4, lr}
   29db2:	4c05      	ldr	r4, [pc, #20]	; (29dc8 <nrfx_nvmc_word_write+0x18>)
   29db4:	2301      	movs	r3, #1
   29db6:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   29dba:	f7ff ffcd 	bl	29d58 <nvmc_word_write>
   29dbe:	2300      	movs	r3, #0
   29dc0:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   29dc4:	bd10      	pop	{r4, pc}
   29dc6:	bf00      	nop
   29dc8:	4001e000 	.word	0x4001e000

00029dcc <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   29dcc:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   29dce:	4801      	ldr	r0, [pc, #4]	; (29dd4 <nrfx_ppi_channel_alloc+0x8>)
   29dd0:	f7ff bb9a 	b.w	29508 <nrfx_flag32_alloc>
   29dd4:	20000918 	.word	0x20000918

00029dd8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   29dd8:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   29dda:	4c11      	ldr	r4, [pc, #68]	; (29e20 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   29ddc:	4a11      	ldr	r2, [pc, #68]	; (29e24 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   29dde:	4912      	ldr	r1, [pc, #72]	; (29e28 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   29de0:	2303      	movs	r3, #3
   29de2:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   29de4:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   29de6:	4b11      	ldr	r3, [pc, #68]	; (29e2c <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   29de8:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   29dea:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   29dec:	f44f 6380 	mov.w	r3, #1024	; 0x400
   29df0:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   29df2:	2300      	movs	r3, #0
   29df4:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   29df6:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   29df8:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   29dfa:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   29dfc:	4a0c      	ldr	r2, [pc, #48]	; (29e30 <_DoInit+0x58>)
   29dfe:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   29e00:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   29e02:	2210      	movs	r2, #16
   29e04:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   29e06:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   29e08:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   29e0a:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   29e0c:	f004 f8b3 	bl	2df76 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   29e10:	4908      	ldr	r1, [pc, #32]	; (29e34 <_DoInit+0x5c>)
   29e12:	4620      	mov	r0, r4
   29e14:	f004 f8af 	bl	2df76 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   29e18:	2320      	movs	r3, #32
   29e1a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   29e1c:	bd10      	pop	{r4, pc}
   29e1e:	bf00      	nop
   29e20:	200031a8 	.word	0x200031a8
   29e24:	0003673b 	.word	0x0003673b
   29e28:	00036744 	.word	0x00036744
   29e2c:	2000343f 	.word	0x2000343f
   29e30:	2000342f 	.word	0x2000342f
   29e34:	00036748 	.word	0x00036748

00029e38 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   29e38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   29e3c:	4f23      	ldr	r7, [pc, #140]	; (29ecc <SEGGER_RTT_WriteSkipNoLock+0x94>)
   29e3e:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   29e42:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   29e44:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   29e48:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   29e4a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   29e4c:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   29e4e:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   29e50:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   29e52:	d834      	bhi.n	29ebe <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   29e54:	f8d2 a020 	ldr.w	sl, [r2, #32]
   29e58:	ebaa 0905 	sub.w	r9, sl, r5
   29e5c:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
   29e60:	4294      	cmp	r4, r2
   29e62:	d811      	bhi.n	29e88 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   29e64:	f04f 0918 	mov.w	r9, #24
   29e68:	fb06 9309 	mla	r3, r6, r9, r9
   29e6c:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   29e6e:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   29e70:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   29e72:	4641      	mov	r1, r8
   29e74:	4428      	add	r0, r5
   29e76:	f004 f8d8 	bl	2e02a <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   29e7a:	fb09 7606 	mla	r6, r9, r6, r7
   29e7e:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   29e80:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
   29e82:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   29e84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   29e88:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   29e8a:	429c      	cmp	r4, r3
   29e8c:	d81b      	bhi.n	29ec6 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   29e8e:	fb00 bb0b 	mla	fp, r0, fp, fp
   29e92:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   29e94:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   29e96:	f8db 0004 	ldr.w	r0, [fp, #4]
   29e9a:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   29e9c:	4428      	add	r0, r5
   29e9e:	f004 f8c4 	bl	2e02a <memcpy>
      if (NumBytes) {
   29ea2:	ebb4 040a 	subs.w	r4, r4, sl
   29ea6:	d006      	beq.n	29eb6 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   29ea8:	f8db 0004 	ldr.w	r0, [fp, #4]
   29eac:	4622      	mov	r2, r4
   29eae:	eb08 0109 	add.w	r1, r8, r9
   29eb2:	f004 f8ba 	bl	2e02a <memcpy>
      pRing->WrOff = NumBytes;
   29eb6:	2018      	movs	r0, #24
   29eb8:	fb00 7606 	mla	r6, r0, r6, r7
   29ebc:	e7e0      	b.n	29e80 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   29ebe:	3b01      	subs	r3, #1
   29ec0:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   29ec2:	42a3      	cmp	r3, r4
   29ec4:	d2ce      	bcs.n	29e64 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   29ec6:	2000      	movs	r0, #0
   29ec8:	e7dc      	b.n	29e84 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   29eca:	bf00      	nop
   29ecc:	200031a8 	.word	0x200031a8

00029ed0 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   29ed0:	4b03      	ldr	r3, [pc, #12]	; (29ee0 <SEGGER_RTT_HasDataUp+0x10>)
   29ed2:	2218      	movs	r2, #24
   29ed4:	fb02 3300 	mla	r3, r2, r0, r3
   29ed8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   29eda:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   29edc:	1a80      	subs	r0, r0, r2
   29ede:	4770      	bx	lr
   29ee0:	200031a8 	.word	0x200031a8

00029ee4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   29ee4:	4b0e      	ldr	r3, [pc, #56]	; (29f20 <z_sys_init_run_level+0x3c>)
{
   29ee6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   29ee8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   29eec:	3001      	adds	r0, #1
   29eee:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   29ef2:	42a6      	cmp	r6, r4
   29ef4:	d800      	bhi.n	29ef8 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   29ef6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   29ef8:	e9d4 3500 	ldrd	r3, r5, [r4]
   29efc:	4628      	mov	r0, r5
   29efe:	4798      	blx	r3
		if (dev != NULL) {
   29f00:	b165      	cbz	r5, 29f1c <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   29f02:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   29f04:	b130      	cbz	r0, 29f14 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   29f06:	2800      	cmp	r0, #0
   29f08:	bfb8      	it	lt
   29f0a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   29f0c:	28ff      	cmp	r0, #255	; 0xff
   29f0e:	bfa8      	it	ge
   29f10:	20ff      	movge	r0, #255	; 0xff
   29f12:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   29f14:	785a      	ldrb	r2, [r3, #1]
   29f16:	f042 0201 	orr.w	r2, r2, #1
   29f1a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   29f1c:	3408      	adds	r4, #8
   29f1e:	e7e8      	b.n	29ef2 <z_sys_init_run_level+0xe>
   29f20:	00034118 	.word	0x00034118

00029f24 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   29f24:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   29f26:	4605      	mov	r5, r0
   29f28:	b910      	cbnz	r0, 29f30 <z_impl_device_get_binding+0xc>
		return NULL;
   29f2a:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   29f2c:	4620      	mov	r0, r4
   29f2e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   29f30:	7803      	ldrb	r3, [r0, #0]
   29f32:	2b00      	cmp	r3, #0
   29f34:	d0f9      	beq.n	29f2a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   29f36:	4c0e      	ldr	r4, [pc, #56]	; (29f70 <z_impl_device_get_binding+0x4c>)
   29f38:	4e0e      	ldr	r6, [pc, #56]	; (29f74 <z_impl_device_get_binding+0x50>)
   29f3a:	42b4      	cmp	r4, r6
   29f3c:	d108      	bne.n	29f50 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   29f3e:	4c0c      	ldr	r4, [pc, #48]	; (29f70 <z_impl_device_get_binding+0x4c>)
   29f40:	42b4      	cmp	r4, r6
   29f42:	d0f2      	beq.n	29f2a <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   29f44:	4620      	mov	r0, r4
   29f46:	f007 faa0 	bl	3148a <z_device_is_ready>
   29f4a:	b950      	cbnz	r0, 29f62 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   29f4c:	3418      	adds	r4, #24
   29f4e:	e7f7      	b.n	29f40 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   29f50:	4620      	mov	r0, r4
   29f52:	f007 fa9a 	bl	3148a <z_device_is_ready>
   29f56:	b110      	cbz	r0, 29f5e <z_impl_device_get_binding+0x3a>
   29f58:	6823      	ldr	r3, [r4, #0]
   29f5a:	42ab      	cmp	r3, r5
   29f5c:	d0e6      	beq.n	29f2c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   29f5e:	3418      	adds	r4, #24
   29f60:	e7eb      	b.n	29f3a <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   29f62:	6821      	ldr	r1, [r4, #0]
   29f64:	4628      	mov	r0, r5
   29f66:	f004 f832 	bl	2dfce <strcmp>
   29f6a:	2800      	cmp	r0, #0
   29f6c:	d1ee      	bne.n	29f4c <z_impl_device_get_binding+0x28>
   29f6e:	e7dd      	b.n	29f2c <z_impl_device_get_binding+0x8>
   29f70:	00032044 	.word	0x00032044
   29f74:	000320ec 	.word	0x000320ec

00029f78 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   29f78:	4b01      	ldr	r3, [pc, #4]	; (29f80 <z_impl_z_errno+0x8>)
   29f7a:	6898      	ldr	r0, [r3, #8]
}
   29f7c:	3064      	adds	r0, #100	; 0x64
   29f7e:	4770      	bx	lr
   29f80:	20003250 	.word	0x20003250

00029f84 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   29f84:	b510      	push	{r4, lr}
   29f86:	4604      	mov	r4, r0
   29f88:	b086      	sub	sp, #24
	z_impl_log_panic();
   29f8a:	f7e4 ffef 	bl	ef6c <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   29f8e:	4b07      	ldr	r3, [pc, #28]	; (29fac <k_sys_fatal_error_handler+0x28>)
   29f90:	9304      	str	r3, [sp, #16]
   29f92:	2302      	movs	r3, #2
   29f94:	9303      	str	r3, [sp, #12]
   29f96:	4806      	ldr	r0, [pc, #24]	; (29fb0 <k_sys_fatal_error_handler+0x2c>)
   29f98:	2300      	movs	r3, #0
   29f9a:	aa03      	add	r2, sp, #12
   29f9c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   29fa0:	f002 fa91 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
	arch_system_halt(reason);
   29fa4:	4620      	mov	r0, r4
   29fa6:	f007 fa7a 	bl	3149e <arch_system_halt>
   29faa:	bf00      	nop
   29fac:	0003674f 	.word	0x0003674f
   29fb0:	000324e4 	.word	0x000324e4

00029fb4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   29fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29fb8:	b086      	sub	sp, #24
   29fba:	4605      	mov	r5, r0
   29fbc:	af00      	add	r7, sp, #0
   29fbe:	460e      	mov	r6, r1
	__asm__ volatile(
   29fc0:	f04f 0320 	mov.w	r3, #32
   29fc4:	f3ef 8811 	mrs	r8, BASEPRI
   29fc8:	f383 8812 	msr	BASEPRI_MAX, r3
   29fcc:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   29fd0:	f001 f85c 	bl	2b08c <z_impl_z_current_get>
   29fd4:	2d04      	cmp	r5, #4
   29fd6:	bf96      	itet	ls
   29fd8:	4b2b      	ldrls	r3, [pc, #172]	; (2a088 <z_fatal_error+0xd4>)
   29fda:	4b2c      	ldrhi	r3, [pc, #176]	; (2a08c <z_fatal_error+0xd8>)
   29fdc:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   29fe0:	492b      	ldr	r1, [pc, #172]	; (2a090 <z_fatal_error+0xdc>)
   29fe2:	46e9      	mov	r9, sp
   29fe4:	b08a      	sub	sp, #40	; 0x28
   29fe6:	466a      	mov	r2, sp
   29fe8:	f04f 0a00 	mov.w	sl, #0
   29fec:	6193      	str	r3, [r2, #24]
   29fee:	2303      	movs	r3, #3
   29ff0:	f882 3020 	strb.w	r3, [r2, #32]
   29ff4:	4b27      	ldr	r3, [pc, #156]	; (2a094 <z_fatal_error+0xe0>)
   29ff6:	f8c2 a01c 	str.w	sl, [r2, #28]
   29ffa:	e9c2 1504 	strd	r1, r5, [r2, #16]
   29ffe:	4604      	mov	r4, r0
   2a000:	f842 3f0c 	str.w	r3, [r2, #12]!
   2a004:	4824      	ldr	r0, [pc, #144]	; (2a098 <z_fatal_error+0xe4>)
   2a006:	4653      	mov	r3, sl
   2a008:	f44f 5129 	mov.w	r1, #10816	; 0x2a40
   2a00c:	f002 fa5b 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
   2a010:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   2a012:	b17e      	cbz	r6, 2a034 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   2a014:	69f3      	ldr	r3, [r6, #28]
   2a016:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2a01a:	b15b      	cbz	r3, 2a034 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
   2a01c:	4b1f      	ldr	r3, [pc, #124]	; (2a09c <z_fatal_error+0xe8>)
   2a01e:	613b      	str	r3, [r7, #16]
   2a020:	2302      	movs	r3, #2
   2a022:	60fb      	str	r3, [r7, #12]
   2a024:	481c      	ldr	r0, [pc, #112]	; (2a098 <z_fatal_error+0xe4>)
   2a026:	4653      	mov	r3, sl
   2a028:	f107 020c 	add.w	r2, r7, #12
   2a02c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2a030:	f002 fa49 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   2a034:	b12c      	cbz	r4, 2a042 <z_fatal_error+0x8e>
   2a036:	4620      	mov	r0, r4
   2a038:	f007 fad6 	bl	315e8 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   2a03c:	b108      	cbz	r0, 2a042 <z_fatal_error+0x8e>
   2a03e:	7803      	ldrb	r3, [r0, #0]
   2a040:	b903      	cbnz	r3, 2a044 <z_fatal_error+0x90>
		thread_name = "unknown";
   2a042:	4817      	ldr	r0, [pc, #92]	; (2a0a0 <z_fatal_error+0xec>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   2a044:	4b17      	ldr	r3, [pc, #92]	; (2a0a4 <z_fatal_error+0xf0>)
   2a046:	46e9      	mov	r9, sp
   2a048:	b088      	sub	sp, #32
   2a04a:	466a      	mov	r2, sp
   2a04c:	e9c2 3404 	strd	r3, r4, [r2, #16]
   2a050:	2303      	movs	r3, #3
   2a052:	7713      	strb	r3, [r2, #28]
   2a054:	4b14      	ldr	r3, [pc, #80]	; (2a0a8 <z_fatal_error+0xf4>)
   2a056:	6190      	str	r0, [r2, #24]
   2a058:	f842 3f0c 	str.w	r3, [r2, #12]!
   2a05c:	2300      	movs	r3, #0
   2a05e:	480e      	ldr	r0, [pc, #56]	; (2a098 <z_fatal_error+0xe4>)
   2a060:	f44f 5109 	mov.w	r1, #8768	; 0x2240
   2a064:	f002 fa2f 	bl	2c4c6 <z_impl_z_log_msg2_static_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   2a068:	4631      	mov	r1, r6
   2a06a:	46cd      	mov	sp, r9
   2a06c:	4628      	mov	r0, r5
   2a06e:	f7ff ff89 	bl	29f84 <k_sys_fatal_error_handler>
	__asm__ volatile(
   2a072:	f388 8811 	msr	BASEPRI, r8
   2a076:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   2a07a:	4620      	mov	r0, r4
   2a07c:	f7e7 f85a 	bl	11134 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   2a080:	3718      	adds	r7, #24
   2a082:	46bd      	mov	sp, r7
   2a084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a088:	00034130 	.word	0x00034130
   2a08c:	0003675e 	.word	0x0003675e
   2a090:	0003676c 	.word	0x0003676c
   2a094:	01000005 	.word	0x01000005
   2a098:	000324e4 	.word	0x000324e4
   2a09c:	00036794 	.word	0x00036794
   2a0a0:	00034e83 	.word	0x00034e83
   2a0a4:	000367b5 	.word	0x000367b5
   2a0a8:	01000004 	.word	0x01000004

0002a0ac <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   2a0ac:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   2a0ae:	4b0a      	ldr	r3, [pc, #40]	; (2a0d8 <bg_thread_main+0x2c>)
   2a0b0:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2a0b2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   2a0b4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2a0b6:	f7ff ff15 	bl	29ee4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   2a0ba:	f001 faef 	bl	2b69c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   2a0be:	2003      	movs	r0, #3
   2a0c0:	f7ff ff10 	bl	29ee4 <z_sys_init_run_level>

	z_init_static_threads();
   2a0c4:	f000 f97c 	bl	2a3c0 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   2a0c8:	f7e3 fe66 	bl	dd98 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   2a0cc:	4a03      	ldr	r2, [pc, #12]	; (2a0dc <bg_thread_main+0x30>)
   2a0ce:	7b13      	ldrb	r3, [r2, #12]
   2a0d0:	f023 0301 	bic.w	r3, r3, #1
   2a0d4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   2a0d6:	bd08      	pop	{r3, pc}
   2a0d8:	2000383f 	.word	0x2000383f
   2a0dc:	20001c00 	.word	0x20001c00

0002a0e0 <z_bss_zero>:
{
   2a0e0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   2a0e2:	4803      	ldr	r0, [pc, #12]	; (2a0f0 <z_bss_zero+0x10>)
   2a0e4:	4a03      	ldr	r2, [pc, #12]	; (2a0f4 <z_bss_zero+0x14>)
   2a0e6:	2100      	movs	r1, #0
   2a0e8:	1a12      	subs	r2, r2, r0
   2a0ea:	f007 f9e1 	bl	314b0 <z_early_memset>
}
   2a0ee:	bd08      	pop	{r3, pc}
   2a0f0:	20000dd0 	.word	0x20000dd0
   2a0f4:	20003840 	.word	0x20003840

0002a0f8 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   2a0f8:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   2a0fa:	2300      	movs	r3, #0
{
   2a0fc:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   2a0fe:	2201      	movs	r2, #1
   2a100:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   2a104:	4e13      	ldr	r6, [pc, #76]	; (2a154 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2a106:	4d14      	ldr	r5, [pc, #80]	; (2a158 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   2a108:	9301      	str	r3, [sp, #4]
   2a10a:	220f      	movs	r2, #15
   2a10c:	e9cd 3202 	strd	r3, r2, [sp, #8]
   2a110:	4912      	ldr	r1, [pc, #72]	; (2a15c <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2a112:	2318      	movs	r3, #24
   2a114:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   2a118:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   2a11c:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   2a11e:	f44f 70b0 	mov.w	r0, #352	; 0x160
   2a122:	fb00 1104 	mla	r1, r0, r4, r1
   2a126:	4b0e      	ldr	r3, [pc, #56]	; (2a160 <z_init_cpu+0x68>)
   2a128:	9500      	str	r5, [sp, #0]
   2a12a:	f44f 72a0 	mov.w	r2, #320	; 0x140
   2a12e:	4630      	mov	r0, r6
   2a130:	f000 f8e8 	bl	2a304 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2a134:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   2a136:	480b      	ldr	r0, [pc, #44]	; (2a164 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
   2a138:	752c      	strb	r4, [r5, #20]
   2a13a:	f023 0304 	bic.w	r3, r3, #4
   2a13e:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   2a140:	f44f 6302 	mov.w	r3, #2080	; 0x820
   2a144:	fb03 0404 	mla	r4, r3, r4, r0
   2a148:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   2a14a:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   2a14c:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   2a14e:	b006      	add	sp, #24
   2a150:	bd70      	pop	{r4, r5, r6, pc}
   2a152:	bf00      	nop
   2a154:	20001b80 	.word	0x20001b80
   2a158:	20003250 	.word	0x20003250
   2a15c:	20005160 	.word	0x20005160
   2a160:	0002a479 	.word	0x0002a479
   2a164:	200052c0 	.word	0x200052c0

0002a168 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   2a168:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   2a16a:	4b2e      	ldr	r3, [pc, #184]	; (2a224 <z_cstart+0xbc>)
   2a16c:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   2a16e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   2a172:	4d2d      	ldr	r5, [pc, #180]	; (2a228 <z_cstart+0xc0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   2a174:	4e2d      	ldr	r6, [pc, #180]	; (2a22c <z_cstart+0xc4>)
   2a176:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2a178:	4f2d      	ldr	r7, [pc, #180]	; (2a230 <z_cstart+0xc8>)
   2a17a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a17e:	2400      	movs	r4, #0
   2a180:	616b      	str	r3, [r5, #20]
   2a182:	23e0      	movs	r3, #224	; 0xe0
   2a184:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   2a188:	77ec      	strb	r4, [r5, #31]
   2a18a:	762c      	strb	r4, [r5, #24]
   2a18c:	766c      	strb	r4, [r5, #25]
   2a18e:	76ac      	strb	r4, [r5, #26]
   2a190:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   2a194:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2a196:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   2a19a:	626b      	str	r3, [r5, #36]	; 0x24
   2a19c:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   2a1a0:	f7e6 ff3c 	bl	1101c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   2a1a4:	f7e6 fac8 	bl	10738 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   2a1a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a1ac:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   2a1ae:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   2a1b0:	f7e7 f884 	bl	112bc <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   2a1b4:	f7e6 ffd4 	bl	11160 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   2a1b8:	f7e4 fde2 	bl	ed80 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   2a1bc:	f240 1301 	movw	r3, #257	; 0x101
   2a1c0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   2a1c4:	ab06      	add	r3, sp, #24
   2a1c6:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   2a1c8:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   2a1cc:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   2a1ce:	f007 f95b 	bl	31488 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   2a1d2:	4620      	mov	r0, r4
   2a1d4:	f7ff fe86 	bl	29ee4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   2a1d8:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   2a1da:	4d16      	ldr	r5, [pc, #88]	; (2a234 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   2a1dc:	f7ff fe82 	bl	29ee4 <z_sys_init_run_level>
	z_sched_init();
   2a1e0:	f000 fea6 	bl	2af30 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2a1e4:	4b14      	ldr	r3, [pc, #80]	; (2a238 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
   2a1e6:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2a1e8:	9305      	str	r3, [sp, #20]
   2a1ea:	2301      	movs	r3, #1
   2a1ec:	4913      	ldr	r1, [pc, #76]	; (2a23c <z_cstart+0xd4>)
   2a1ee:	9400      	str	r4, [sp, #0]
   2a1f0:	e9cd 4303 	strd	r4, r3, [sp, #12]
   2a1f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2a1f8:	463b      	mov	r3, r7
   2a1fa:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2a1fe:	4628      	mov	r0, r5
   2a200:	f000 f880 	bl	2a304 <z_setup_new_thread>
   2a204:	7b6a      	ldrb	r2, [r5, #13]
   2a206:	4606      	mov	r6, r0
   2a208:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   2a20c:	4628      	mov	r0, r5
   2a20e:	736a      	strb	r2, [r5, #13]
   2a210:	f007 fc1e 	bl	31a50 <z_ready_thread>
	z_init_cpu(0);
   2a214:	4620      	mov	r0, r4
   2a216:	f7ff ff6f 	bl	2a0f8 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   2a21a:	463a      	mov	r2, r7
   2a21c:	4631      	mov	r1, r6
   2a21e:	4628      	mov	r0, r5
   2a220:	f7e6 fc06 	bl	10a30 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   2a224:	20005ae0 	.word	0x20005ae0
   2a228:	e000ed00 	.word	0xe000ed00
   2a22c:	20003250 	.word	0x20003250
   2a230:	0002a0ad 	.word	0x0002a0ad
   2a234:	20001c00 	.word	0x20001c00
   2a238:	00036817 	.word	0x00036817
   2a23c:	20004d40 	.word	0x20004d40

0002a240 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   2a240:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   2a242:	4c06      	ldr	r4, [pc, #24]	; (2a25c <statics_init+0x1c>)
   2a244:	4d06      	ldr	r5, [pc, #24]	; (2a260 <statics_init+0x20>)
   2a246:	42ac      	cmp	r4, r5
   2a248:	d301      	bcc.n	2a24e <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   2a24a:	2000      	movs	r0, #0
   2a24c:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   2a24e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   2a252:	4620      	mov	r0, r4
   2a254:	f007 f930 	bl	314b8 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   2a258:	3414      	adds	r4, #20
   2a25a:	e7f4      	b.n	2a246 <statics_init+0x6>
   2a25c:	20000bb4 	.word	0x20000bb4
   2a260:	20000bb4 	.word	0x20000bb4

0002a264 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   2a264:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2a266:	4b0e      	ldr	r3, [pc, #56]	; (2a2a0 <init_mem_slab_module+0x3c>)
   2a268:	4c0e      	ldr	r4, [pc, #56]	; (2a2a4 <init_mem_slab_module+0x40>)
   2a26a:	42a3      	cmp	r3, r4
   2a26c:	d301      	bcc.n	2a272 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   2a26e:	2000      	movs	r0, #0
	return rc;
}
   2a270:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2a272:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   2a276:	ea41 0200 	orr.w	r2, r1, r0
   2a27a:	f012 0203 	ands.w	r2, r2, #3
   2a27e:	d10b      	bne.n	2a298 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   2a280:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   2a282:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2a284:	42aa      	cmp	r2, r5
   2a286:	d101      	bne.n	2a28c <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2a288:	331c      	adds	r3, #28
   2a28a:	e7ee      	b.n	2a26a <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   2a28c:	695e      	ldr	r6, [r3, #20]
   2a28e:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   2a290:	3201      	adds	r2, #1
		slab->free_list = p;
   2a292:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   2a294:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   2a296:	e7f5      	b.n	2a284 <init_mem_slab_module+0x20>
	return rc;
   2a298:	f06f 0015 	mvn.w	r0, #21
   2a29c:	e7e8      	b.n	2a270 <init_mem_slab_module+0xc>
   2a29e:	bf00      	nop
   2a2a0:	20000b60 	.word	0x20000b60
   2a2a4:	20000bb4 	.word	0x20000bb4

0002a2a8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   2a2a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2a2aa:	460c      	mov	r4, r1
	__asm__ volatile(
   2a2ac:	f04f 0520 	mov.w	r5, #32
   2a2b0:	f3ef 8111 	mrs	r1, BASEPRI
   2a2b4:	f385 8812 	msr	BASEPRI_MAX, r5
   2a2b8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   2a2bc:	6945      	ldr	r5, [r0, #20]
   2a2be:	b15d      	cbz	r5, 2a2d8 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   2a2c0:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   2a2c2:	682b      	ldr	r3, [r5, #0]
   2a2c4:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   2a2c6:	6983      	ldr	r3, [r0, #24]
   2a2c8:	3301      	adds	r3, #1
   2a2ca:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   2a2cc:	2000      	movs	r0, #0
	__asm__ volatile(
   2a2ce:	f381 8811 	msr	BASEPRI, r1
   2a2d2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   2a2d6:	e011      	b.n	2a2fc <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   2a2d8:	ea52 0c03 	orrs.w	ip, r2, r3
   2a2dc:	d103      	bne.n	2a2e6 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   2a2de:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   2a2e0:	f06f 000b 	mvn.w	r0, #11
   2a2e4:	e7f3      	b.n	2a2ce <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   2a2e6:	e9cd 2300 	strd	r2, r3, [sp]
   2a2ea:	4602      	mov	r2, r0
   2a2ec:	3008      	adds	r0, #8
   2a2ee:	f000 fd75 	bl	2addc <z_pend_curr>
		if (result == 0) {
   2a2f2:	b918      	cbnz	r0, 2a2fc <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   2a2f4:	4b02      	ldr	r3, [pc, #8]	; (2a300 <k_mem_slab_alloc+0x58>)
   2a2f6:	689b      	ldr	r3, [r3, #8]
   2a2f8:	695b      	ldr	r3, [r3, #20]
   2a2fa:	6023      	str	r3, [r4, #0]
}
   2a2fc:	b003      	add	sp, #12
   2a2fe:	bd30      	pop	{r4, r5, pc}
   2a300:	20003250 	.word	0x20003250

0002a304 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   2a304:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   2a308:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   2a30a:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   2a30c:	2604      	movs	r6, #4
   2a30e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   2a310:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   2a312:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   2a314:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   2a318:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2a31a:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   2a31c:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2a320:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   2a322:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2a324:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   2a328:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   2a32a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   2a32e:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   2a332:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   2a334:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   2a336:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2a338:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2a33c:	9202      	str	r2, [sp, #8]
   2a33e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2a340:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   2a342:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2a344:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2a346:	9200      	str	r2, [sp, #0]
   2a348:	4642      	mov	r2, r8
{
   2a34a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2a34c:	f7e6 fb3e 	bl	109cc <arch_new_thread>
	if (!_current) {
   2a350:	4b04      	ldr	r3, [pc, #16]	; (2a364 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   2a352:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   2a354:	689b      	ldr	r3, [r3, #8]
   2a356:	b103      	cbz	r3, 2a35a <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   2a358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   2a35a:	6763      	str	r3, [r4, #116]	; 0x74
}
   2a35c:	4640      	mov	r0, r8
   2a35e:	b004      	add	sp, #16
   2a360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a364:	20003250 	.word	0x20003250

0002a368 <z_impl_k_thread_create>:
{
   2a368:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a36a:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2a36c:	2700      	movs	r7, #0
   2a36e:	9705      	str	r7, [sp, #20]
   2a370:	9f10      	ldr	r7, [sp, #64]	; 0x40
   2a372:	9704      	str	r7, [sp, #16]
   2a374:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   2a376:	9703      	str	r7, [sp, #12]
   2a378:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   2a37a:	9702      	str	r7, [sp, #8]
{
   2a37c:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2a380:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   2a382:	9701      	str	r7, [sp, #4]
   2a384:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2a386:	9700      	str	r7, [sp, #0]
{
   2a388:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2a38a:	f7ff ffbb 	bl	2a304 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   2a38e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   2a392:	bf08      	it	eq
   2a394:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   2a398:	d005      	beq.n	2a3a6 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2a39a:	ea55 0306 	orrs.w	r3, r5, r6
   2a39e:	d105      	bne.n	2a3ac <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   2a3a0:	4620      	mov	r0, r4
   2a3a2:	f000 fcbf 	bl	2ad24 <z_sched_start>
}
   2a3a6:	4620      	mov	r0, r4
   2a3a8:	b007      	add	sp, #28
   2a3aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2a3ac:	4903      	ldr	r1, [pc, #12]	; (2a3bc <z_impl_k_thread_create+0x54>)
   2a3ae:	4632      	mov	r2, r6
   2a3b0:	462b      	mov	r3, r5
   2a3b2:	f104 0018 	add.w	r0, r4, #24
   2a3b6:	f000 ff47 	bl	2b248 <z_add_timeout>
   2a3ba:	e7f4      	b.n	2a3a6 <z_impl_k_thread_create+0x3e>
   2a3bc:	00031a71 	.word	0x00031a71

0002a3c0 <z_init_static_threads>:
{
   2a3c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a3c4:	4c29      	ldr	r4, [pc, #164]	; (2a46c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   2a3c6:	4d2a      	ldr	r5, [pc, #168]	; (2a470 <z_init_static_threads+0xb0>)
{
   2a3c8:	b087      	sub	sp, #28
   2a3ca:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   2a3cc:	42ae      	cmp	r6, r5
   2a3ce:	f104 0430 	add.w	r4, r4, #48	; 0x30
   2a3d2:	d30f      	bcc.n	2a3f4 <z_init_static_threads+0x34>
	k_sched_lock();
   2a3d4:	f000 fbc0 	bl	2ab58 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   2a3d8:	4c24      	ldr	r4, [pc, #144]	; (2a46c <z_init_static_threads+0xac>)
   2a3da:	f8df 9098 	ldr.w	r9, [pc, #152]	; 2a474 <z_init_static_threads+0xb4>
   2a3de:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2a3e2:	f240 37e7 	movw	r7, #999	; 0x3e7
   2a3e6:	42ac      	cmp	r4, r5
   2a3e8:	d320      	bcc.n	2a42c <z_init_static_threads+0x6c>
}
   2a3ea:	b007      	add	sp, #28
   2a3ec:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   2a3f0:	f000 bd82 	b.w	2aef8 <k_sched_unlock>
		z_setup_new_thread(
   2a3f4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2a3f8:	9305      	str	r3, [sp, #20]
   2a3fa:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2a3fe:	9304      	str	r3, [sp, #16]
   2a400:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2a404:	9303      	str	r3, [sp, #12]
   2a406:	f854 3c18 	ldr.w	r3, [r4, #-24]
   2a40a:	9302      	str	r3, [sp, #8]
   2a40c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2a410:	9301      	str	r3, [sp, #4]
   2a412:	f854 3c20 	ldr.w	r3, [r4, #-32]
   2a416:	9300      	str	r3, [sp, #0]
   2a418:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   2a41c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   2a420:	f7ff ff70 	bl	2a304 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   2a424:	f854 3c30 	ldr.w	r3, [r4, #-48]
   2a428:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   2a42a:	e7ce      	b.n	2a3ca <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   2a42c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a42e:	1c5a      	adds	r2, r3, #1
   2a430:	d00d      	beq.n	2a44e <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   2a432:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2a436:	2100      	movs	r1, #0
   2a438:	4638      	mov	r0, r7
   2a43a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2a43e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   2a442:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2a446:	d104      	bne.n	2a452 <z_init_static_threads+0x92>
	z_sched_start(thread);
   2a448:	4640      	mov	r0, r8
   2a44a:	f000 fc6b 	bl	2ad24 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   2a44e:	3430      	adds	r4, #48	; 0x30
   2a450:	e7c9      	b.n	2a3e6 <z_init_static_threads+0x26>
   2a452:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2a456:	2300      	movs	r3, #0
   2a458:	f7e1 ff52 	bl	c300 <__aeabi_uldivmod>
   2a45c:	4602      	mov	r2, r0
   2a45e:	460b      	mov	r3, r1
   2a460:	f108 0018 	add.w	r0, r8, #24
   2a464:	4649      	mov	r1, r9
   2a466:	f000 feef 	bl	2b248 <z_add_timeout>
   2a46a:	e7f0      	b.n	2a44e <z_init_static_threads+0x8e>
   2a46c:	20000b60 	.word	0x20000b60
   2a470:	20000b60 	.word	0x20000b60
   2a474:	00031a71 	.word	0x00031a71

0002a478 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   2a478:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   2a47a:	4c0b      	ldr	r4, [pc, #44]	; (2a4a8 <idle+0x30>)
	return !z_sys_post_kernel;
   2a47c:	4d0b      	ldr	r5, [pc, #44]	; (2a4ac <idle+0x34>)
	__asm__ volatile(
   2a47e:	f04f 0220 	mov.w	r2, #32
   2a482:	f3ef 8311 	mrs	r3, BASEPRI
   2a486:	f382 8812 	msr	BASEPRI_MAX, r2
   2a48a:	f3bf 8f6f 	isb	sy
   2a48e:	f007 fbab 	bl	31be8 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   2a492:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   2a494:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   2a496:	b913      	cbnz	r3, 2a49e <idle+0x26>
	arch_cpu_idle();
   2a498:	f7e6 f954 	bl	10744 <arch_cpu_idle>
}
   2a49c:	e7ef      	b.n	2a47e <idle+0x6>
   2a49e:	f7e5 ff49 	bl	10334 <pm_system_suspend>
   2a4a2:	2800      	cmp	r0, #0
   2a4a4:	d1eb      	bne.n	2a47e <idle+0x6>
   2a4a6:	e7f7      	b.n	2a498 <idle+0x20>
   2a4a8:	20003250 	.word	0x20003250
   2a4ac:	2000383f 	.word	0x2000383f

0002a4b0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   2a4b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2a4b4:	4604      	mov	r4, r0
   2a4b6:	4617      	mov	r7, r2
   2a4b8:	461e      	mov	r6, r3
   2a4ba:	f04f 0320 	mov.w	r3, #32
   2a4be:	f3ef 8811 	mrs	r8, BASEPRI
   2a4c2:	f383 8812 	msr	BASEPRI_MAX, r3
   2a4c6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   2a4ca:	68c3      	ldr	r3, [r0, #12]
   2a4cc:	4a32      	ldr	r2, [pc, #200]	; (2a598 <z_impl_k_mutex_lock+0xe8>)
   2a4ce:	b16b      	cbz	r3, 2a4ec <z_impl_k_mutex_lock+0x3c>
   2a4d0:	6880      	ldr	r0, [r0, #8]
   2a4d2:	6891      	ldr	r1, [r2, #8]
   2a4d4:	4288      	cmp	r0, r1
   2a4d6:	d019      	beq.n	2a50c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   2a4d8:	ea57 0306 	orrs.w	r3, r7, r6
   2a4dc:	d118      	bne.n	2a510 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   2a4de:	f388 8811 	msr	BASEPRI, r8
   2a4e2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   2a4e6:	f06f 000f 	mvn.w	r0, #15
   2a4ea:	e00c      	b.n	2a506 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   2a4ec:	6891      	ldr	r1, [r2, #8]
   2a4ee:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   2a4f2:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   2a4f4:	3301      	adds	r3, #1
   2a4f6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   2a4f8:	6893      	ldr	r3, [r2, #8]
   2a4fa:	60a3      	str	r3, [r4, #8]
   2a4fc:	f388 8811 	msr	BASEPRI, r8
   2a500:	f3bf 8f6f 	isb	sy
		return 0;
   2a504:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   2a506:	b002      	add	sp, #8
   2a508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   2a50c:	6921      	ldr	r1, [r4, #16]
   2a50e:	e7f0      	b.n	2a4f2 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   2a510:	f991 100e 	ldrsb.w	r1, [r1, #14]
   2a514:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   2a518:	4299      	cmp	r1, r3
   2a51a:	bfa8      	it	ge
   2a51c:	4619      	movge	r1, r3
   2a51e:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   2a522:	4291      	cmp	r1, r2
   2a524:	bfb8      	it	lt
   2a526:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   2a528:	428b      	cmp	r3, r1
   2a52a:	dd2e      	ble.n	2a58a <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   2a52c:	f007 f867 	bl	315fe <adjust_owner_prio.isra.0>
   2a530:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   2a532:	e9cd 7600 	strd	r7, r6, [sp]
   2a536:	4819      	ldr	r0, [pc, #100]	; (2a59c <z_impl_k_mutex_lock+0xec>)
   2a538:	4622      	mov	r2, r4
   2a53a:	4641      	mov	r1, r8
   2a53c:	f000 fc4e 	bl	2addc <z_pend_curr>
	if (got_mutex == 0) {
   2a540:	2800      	cmp	r0, #0
   2a542:	d0e0      	beq.n	2a506 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   2a544:	f04f 0320 	mov.w	r3, #32
   2a548:	f3ef 8611 	mrs	r6, BASEPRI
   2a54c:	f383 8812 	msr	BASEPRI_MAX, r3
   2a550:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   2a554:	6823      	ldr	r3, [r4, #0]
   2a556:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a558:	429c      	cmp	r4, r3
   2a55a:	d00a      	beq.n	2a572 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   2a55c:	b14b      	cbz	r3, 2a572 <z_impl_k_mutex_lock+0xc2>
   2a55e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2a562:	4299      	cmp	r1, r3
   2a564:	bfa8      	it	ge
   2a566:	4619      	movge	r1, r3
   2a568:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   2a56c:	4299      	cmp	r1, r3
   2a56e:	bfb8      	it	lt
   2a570:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   2a572:	68a0      	ldr	r0, [r4, #8]
   2a574:	f007 f843 	bl	315fe <adjust_owner_prio.isra.0>
   2a578:	b900      	cbnz	r0, 2a57c <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   2a57a:	b145      	cbz	r5, 2a58e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   2a57c:	4807      	ldr	r0, [pc, #28]	; (2a59c <z_impl_k_mutex_lock+0xec>)
   2a57e:	4631      	mov	r1, r6
   2a580:	f000 fad8 	bl	2ab34 <z_reschedule>
	return -EAGAIN;
   2a584:	f06f 000a 	mvn.w	r0, #10
   2a588:	e7bd      	b.n	2a506 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   2a58a:	2500      	movs	r5, #0
   2a58c:	e7d1      	b.n	2a532 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   2a58e:	f386 8811 	msr	BASEPRI, r6
   2a592:	f3bf 8f6f 	isb	sy
   2a596:	e7f5      	b.n	2a584 <z_impl_k_mutex_lock+0xd4>
   2a598:	20003250 	.word	0x20003250
   2a59c:	20003840 	.word	0x20003840

0002a5a0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   2a5a0:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   2a5a2:	6883      	ldr	r3, [r0, #8]
{
   2a5a4:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   2a5a6:	2b00      	cmp	r3, #0
   2a5a8:	d032      	beq.n	2a610 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   2a5aa:	4a1c      	ldr	r2, [pc, #112]	; (2a61c <z_impl_k_mutex_unlock+0x7c>)
   2a5ac:	6892      	ldr	r2, [r2, #8]
   2a5ae:	4293      	cmp	r3, r2
   2a5b0:	d131      	bne.n	2a616 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   2a5b2:	7bda      	ldrb	r2, [r3, #15]
   2a5b4:	3a01      	subs	r2, #1
   2a5b6:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   2a5b8:	68c3      	ldr	r3, [r0, #12]
   2a5ba:	2b01      	cmp	r3, #1
   2a5bc:	d905      	bls.n	2a5ca <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   2a5be:	3b01      	subs	r3, #1
   2a5c0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   2a5c2:	f000 fc99 	bl	2aef8 <k_sched_unlock>

	return 0;
   2a5c6:	2000      	movs	r0, #0
}
   2a5c8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   2a5ca:	f04f 0320 	mov.w	r3, #32
   2a5ce:	f3ef 8511 	mrs	r5, BASEPRI
   2a5d2:	f383 8812 	msr	BASEPRI_MAX, r3
   2a5d6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   2a5da:	6901      	ldr	r1, [r0, #16]
   2a5dc:	6880      	ldr	r0, [r0, #8]
   2a5de:	f007 f80e 	bl	315fe <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   2a5e2:	4620      	mov	r0, r4
   2a5e4:	f007 faa5 	bl	31b32 <z_unpend_first_thread>
	mutex->owner = new_owner;
   2a5e8:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   2a5ea:	b158      	cbz	r0, 2a604 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   2a5ec:	f990 200e 	ldrsb.w	r2, [r0, #14]
   2a5f0:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   2a5f2:	2200      	movs	r2, #0
   2a5f4:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   2a5f6:	f007 fa2b 	bl	31a50 <z_ready_thread>
		z_reschedule(&lock, key);
   2a5fa:	4809      	ldr	r0, [pc, #36]	; (2a620 <z_impl_k_mutex_unlock+0x80>)
   2a5fc:	4629      	mov	r1, r5
   2a5fe:	f000 fa99 	bl	2ab34 <z_reschedule>
   2a602:	e7de      	b.n	2a5c2 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   2a604:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   2a606:	f385 8811 	msr	BASEPRI, r5
   2a60a:	f3bf 8f6f 	isb	sy
   2a60e:	e7d8      	b.n	2a5c2 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   2a610:	f06f 0015 	mvn.w	r0, #21
   2a614:	e7d8      	b.n	2a5c8 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   2a616:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a61a:	e7d5      	b.n	2a5c8 <z_impl_k_mutex_unlock+0x28>
   2a61c:	20003250 	.word	0x20003250
   2a620:	20003840 	.word	0x20003840

0002a624 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   2a624:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2a626:	4611      	mov	r1, r2
	__asm__ volatile(
   2a628:	f04f 0220 	mov.w	r2, #32
   2a62c:	f3ef 8511 	mrs	r5, BASEPRI
   2a630:	f382 8812 	msr	BASEPRI_MAX, r2
   2a634:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   2a638:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   2a63a:	b19c      	cbz	r4, 2a664 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2a63c:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2a63e:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2a640:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2a644:	4294      	cmp	r4, r2
	list->head = node;
   2a646:	6003      	str	r3, [r0, #0]
	list->tail = node;
   2a648:	bf08      	it	eq
   2a64a:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   2a64c:	2101      	movs	r1, #1
   2a64e:	4620      	mov	r0, r4
   2a650:	f007 f848 	bl	316e4 <z_queue_node_peek>
   2a654:	4604      	mov	r4, r0
	__asm__ volatile(
   2a656:	f385 8811 	msr	BASEPRI, r5
   2a65a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   2a65e:	4620      	mov	r0, r4
   2a660:	b003      	add	sp, #12
   2a662:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2a664:	ea51 0203 	orrs.w	r2, r1, r3
   2a668:	d0f5      	beq.n	2a656 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2a66a:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   2a66e:	e9cd 1300 	strd	r1, r3, [sp]
   2a672:	4610      	mov	r0, r2
   2a674:	4629      	mov	r1, r5
   2a676:	f000 fbb1 	bl	2addc <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   2a67a:	2800      	cmp	r0, #0
   2a67c:	d1ef      	bne.n	2a65e <z_impl_k_queue_get+0x3a>
   2a67e:	4b02      	ldr	r3, [pc, #8]	; (2a688 <z_impl_k_queue_get+0x64>)
   2a680:	689b      	ldr	r3, [r3, #8]
   2a682:	695c      	ldr	r4, [r3, #20]
   2a684:	e7eb      	b.n	2a65e <z_impl_k_queue_get+0x3a>
   2a686:	bf00      	nop
   2a688:	20003250 	.word	0x20003250

0002a68c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   2a68c:	b538      	push	{r3, r4, r5, lr}
   2a68e:	4604      	mov	r4, r0
	__asm__ volatile(
   2a690:	f04f 0320 	mov.w	r3, #32
   2a694:	f3ef 8511 	mrs	r5, BASEPRI
   2a698:	f383 8812 	msr	BASEPRI_MAX, r3
   2a69c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   2a6a0:	f007 fa47 	bl	31b32 <z_unpend_first_thread>

	if (thread != NULL) {
   2a6a4:	b148      	cbz	r0, 2a6ba <z_impl_k_sem_give+0x2e>
   2a6a6:	2200      	movs	r2, #0
   2a6a8:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   2a6aa:	f007 f9d1 	bl	31a50 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   2a6ae:	4629      	mov	r1, r5
   2a6b0:	4808      	ldr	r0, [pc, #32]	; (2a6d4 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   2a6b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   2a6b6:	f000 ba3d 	b.w	2ab34 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2a6ba:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   2a6be:	429a      	cmp	r2, r3
   2a6c0:	bf18      	it	ne
   2a6c2:	3301      	addne	r3, #1
   2a6c4:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2a6c6:	2102      	movs	r1, #2
   2a6c8:	f104 0010 	add.w	r0, r4, #16
   2a6cc:	f007 fc52 	bl	31f74 <z_handle_obj_poll_events>
}
   2a6d0:	e7ed      	b.n	2a6ae <z_impl_k_sem_give+0x22>
   2a6d2:	bf00      	nop
   2a6d4:	20003840 	.word	0x20003840

0002a6d8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   2a6d8:	b513      	push	{r0, r1, r4, lr}
   2a6da:	f04f 0420 	mov.w	r4, #32
   2a6de:	f3ef 8111 	mrs	r1, BASEPRI
   2a6e2:	f384 8812 	msr	BASEPRI_MAX, r4
   2a6e6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   2a6ea:	6884      	ldr	r4, [r0, #8]
   2a6ec:	b144      	cbz	r4, 2a700 <z_impl_k_sem_take+0x28>
		sem->count--;
   2a6ee:	3c01      	subs	r4, #1
   2a6f0:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   2a6f2:	f381 8811 	msr	BASEPRI, r1
   2a6f6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   2a6fa:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   2a6fc:	b002      	add	sp, #8
   2a6fe:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2a700:	ea52 0403 	orrs.w	r4, r2, r3
   2a704:	d106      	bne.n	2a714 <z_impl_k_sem_take+0x3c>
   2a706:	f381 8811 	msr	BASEPRI, r1
   2a70a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   2a70e:	f06f 000f 	mvn.w	r0, #15
   2a712:	e7f3      	b.n	2a6fc <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   2a714:	e9cd 2300 	strd	r2, r3, [sp]
   2a718:	4602      	mov	r2, r0
   2a71a:	4802      	ldr	r0, [pc, #8]	; (2a724 <z_impl_k_sem_take+0x4c>)
   2a71c:	f000 fb5e 	bl	2addc <z_pend_curr>
	return ret;
   2a720:	e7ec      	b.n	2a6fc <z_impl_k_sem_take+0x24>
   2a722:	bf00      	nop
   2a724:	20003840 	.word	0x20003840

0002a728 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   2a728:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   2a72a:	4b09      	ldr	r3, [pc, #36]	; (2a750 <k_sys_work_q_init+0x28>)
   2a72c:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   2a72e:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   2a730:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   2a732:	9300      	str	r3, [sp, #0]
   2a734:	4907      	ldr	r1, [pc, #28]	; (2a754 <k_sys_work_q_init+0x2c>)
   2a736:	4808      	ldr	r0, [pc, #32]	; (2a758 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   2a738:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   2a73c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a740:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2a744:	f000 f914 	bl	2a970 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   2a748:	4620      	mov	r0, r4
   2a74a:	b004      	add	sp, #16
   2a74c:	bd10      	pop	{r4, pc}
   2a74e:	bf00      	nop
   2a750:	0003681f 	.word	0x0003681f
   2a754:	20005ae0 	.word	0x20005ae0
   2a758:	20001c80 	.word	0x20001c80

0002a75c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   2a75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   2a760:	4e47      	ldr	r6, [pc, #284]	; (2a880 <work_queue_main+0x124>)
   2a762:	b085      	sub	sp, #20
   2a764:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   2a766:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   2a76a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   2a76e:	f04f 0320 	mov.w	r3, #32
   2a772:	f3ef 8711 	mrs	r7, BASEPRI
   2a776:	f383 8812 	msr	BASEPRI_MAX, r3
   2a77a:	f3bf 8f6f 	isb	sy
   2a77e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   2a782:	b98d      	cbnz	r5, 2a7a8 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   2a784:	2102      	movs	r1, #2
   2a786:	f104 0098 	add.w	r0, r4, #152	; 0x98
   2a78a:	f007 f824 	bl	317d6 <flag_test_and_clear>
   2a78e:	2800      	cmp	r0, #0
   2a790:	d135      	bne.n	2a7fe <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   2a792:	2300      	movs	r3, #0
   2a794:	e9cd 8900 	strd	r8, r9, [sp]
   2a798:	9302      	str	r3, [sp, #8]
   2a79a:	f104 0288 	add.w	r2, r4, #136	; 0x88
   2a79e:	4639      	mov	r1, r7
   2a7a0:	4838      	ldr	r0, [pc, #224]	; (2a884 <work_queue_main+0x128>)
   2a7a2:	f000 fcdb 	bl	2b15c <z_sched_wait>
			continue;
   2a7a6:	e7e2      	b.n	2a76e <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2a7a8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   2a7ac:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   2a7ae:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2a7b2:	4295      	cmp	r5, r2
   2a7b4:	d101      	bne.n	2a7ba <work_queue_main+0x5e>
	list->tail = node;
   2a7b6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   2a7ba:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2a7be:	f043 0302 	orr.w	r3, r3, #2
   2a7c2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   2a7c6:	68eb      	ldr	r3, [r5, #12]
   2a7c8:	f023 0304 	bic.w	r3, r3, #4
   2a7cc:	f043 0301 	orr.w	r3, r3, #1
   2a7d0:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   2a7d2:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   2a7d4:	f387 8811 	msr	BASEPRI, r7
   2a7d8:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   2a7dc:	4628      	mov	r0, r5
   2a7de:	4798      	blx	r3
	__asm__ volatile(
   2a7e0:	f04f 0320 	mov.w	r3, #32
   2a7e4:	f3ef 8b11 	mrs	fp, BASEPRI
   2a7e8:	f383 8812 	msr	BASEPRI_MAX, r3
   2a7ec:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   2a7f0:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2a7f2:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   2a7f4:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2a7f8:	d40b      	bmi.n	2a812 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   2a7fa:	60ea      	str	r2, [r5, #12]
   2a7fc:	e00e      	b.n	2a81c <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   2a7fe:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   2a802:	2200      	movs	r2, #0
   2a804:	2101      	movs	r1, #1
   2a806:	4628      	mov	r0, r5
   2a808:	f007 f9bb 	bl	31b82 <z_sched_wake>
   2a80c:	2800      	cmp	r0, #0
   2a80e:	d1f8      	bne.n	2a802 <work_queue_main+0xa6>
   2a810:	e7bf      	b.n	2a792 <work_queue_main+0x36>
	return list->head;
   2a812:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   2a814:	f023 0303 	bic.w	r3, r3, #3
   2a818:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2a81a:	b970      	cbnz	r0, 2a83a <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   2a81c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2a820:	f023 0302 	bic.w	r3, r3, #2
   2a824:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   2a828:	f38b 8811 	msr	BASEPRI, fp
   2a82c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   2a830:	05d8      	lsls	r0, r3, #23
   2a832:	d49c      	bmi.n	2a76e <work_queue_main+0x12>
	z_impl_k_yield();
   2a834:	f000 fb88 	bl	2af48 <z_impl_k_yield>
}
   2a838:	e799      	b.n	2a76e <work_queue_main+0x12>
	return node->next;
   2a83a:	2700      	movs	r7, #0
   2a83c:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   2a840:	463b      	mov	r3, r7
		if (wc->work == work) {
   2a842:	6842      	ldr	r2, [r0, #4]
   2a844:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   2a846:	4601      	mov	r1, r0
		if (wc->work == work) {
   2a848:	d10c      	bne.n	2a864 <work_queue_main+0x108>
	return node->next;
   2a84a:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2a84c:	b997      	cbnz	r7, 2a874 <work_queue_main+0x118>
   2a84e:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   2a850:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   2a852:	4282      	cmp	r2, r0
   2a854:	d100      	bne.n	2a858 <work_queue_main+0xfc>
	list->tail = node;
   2a856:	6071      	str	r1, [r6, #4]
	parent->next = child;
   2a858:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   2a85c:	f7ff ff16 	bl	2a68c <z_impl_k_sem_give>
}
   2a860:	4639      	mov	r1, r7
   2a862:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2a864:	f1ba 0f00 	cmp.w	sl, #0
   2a868:	d0d8      	beq.n	2a81c <work_queue_main+0xc0>
	return node->next;
   2a86a:	4650      	mov	r0, sl
   2a86c:	460f      	mov	r7, r1
   2a86e:	f8da a000 	ldr.w	sl, [sl]
   2a872:	e7e6      	b.n	2a842 <work_queue_main+0xe6>
	return list->tail;
   2a874:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   2a876:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   2a878:	4290      	cmp	r0, r2
	list->tail = node;
   2a87a:	bf08      	it	eq
   2a87c:	6077      	streq	r7, [r6, #4]
}
   2a87e:	e7eb      	b.n	2a858 <work_queue_main+0xfc>
   2a880:	20003278 	.word	0x20003278
   2a884:	20003840 	.word	0x20003840

0002a888 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   2a888:	68c3      	ldr	r3, [r0, #12]
{
   2a88a:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   2a88c:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   2a890:	079b      	lsls	r3, r3, #30
{
   2a892:	4605      	mov	r5, r0
   2a894:	460c      	mov	r4, r1
	if (ret) {
   2a896:	d50d      	bpl.n	2a8b4 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   2a898:	2201      	movs	r2, #1
   2a89a:	2100      	movs	r1, #0
   2a89c:	f104 0008 	add.w	r0, r4, #8
   2a8a0:	f006 ff89 	bl	317b6 <z_impl_k_sem_init>
	parent->next = child;
   2a8a4:	2300      	movs	r3, #0
   2a8a6:	6023      	str	r3, [r4, #0]
	return list->tail;
   2a8a8:	4b05      	ldr	r3, [pc, #20]	; (2a8c0 <cancel_sync_locked+0x38>)
	canceler->work = work;
   2a8aa:	6065      	str	r5, [r4, #4]
   2a8ac:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   2a8ae:	b91a      	cbnz	r2, 2a8b8 <cancel_sync_locked+0x30>
	list->head = node;
   2a8b0:	e9c3 4400 	strd	r4, r4, [r3]
}
   2a8b4:	4630      	mov	r0, r6
   2a8b6:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   2a8b8:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2a8ba:	605c      	str	r4, [r3, #4]
}
   2a8bc:	e7fa      	b.n	2a8b4 <cancel_sync_locked+0x2c>
   2a8be:	bf00      	nop
   2a8c0:	20003278 	.word	0x20003278

0002a8c4 <submit_to_queue_locked>:
{
   2a8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   2a8c6:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2a8c8:	079a      	lsls	r2, r3, #30
{
   2a8ca:	4604      	mov	r4, r0
   2a8cc:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2a8ce:	f3c3 0540 	ubfx	r5, r3, #1, #1
   2a8d2:	d41f      	bmi.n	2a914 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   2a8d4:	075f      	lsls	r7, r3, #29
   2a8d6:	d41f      	bmi.n	2a918 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   2a8d8:	680a      	ldr	r2, [r1, #0]
   2a8da:	b90a      	cbnz	r2, 2a8e0 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   2a8dc:	6882      	ldr	r2, [r0, #8]
   2a8de:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   2a8e0:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   2a8e2:	bf44      	itt	mi
   2a8e4:	68a3      	ldrmi	r3, [r4, #8]
   2a8e6:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   2a8e8:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   2a8ea:	bf4c      	ite	mi
   2a8ec:	2502      	movmi	r5, #2
		ret = 1;
   2a8ee:	2501      	movpl	r5, #1
	if (queue == NULL) {
   2a8f0:	b37f      	cbz	r7, 2a952 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2a8f2:	4b1b      	ldr	r3, [pc, #108]	; (2a960 <submit_to_queue_locked+0x9c>)
   2a8f4:	689b      	ldr	r3, [r3, #8]
   2a8f6:	42bb      	cmp	r3, r7
   2a8f8:	d111      	bne.n	2a91e <submit_to_queue_locked+0x5a>
   2a8fa:	f006 fe6c 	bl	315d6 <k_is_in_isr>
   2a8fe:	f080 0001 	eor.w	r0, r0, #1
   2a902:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   2a904:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2a908:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   2a90a:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2a90e:	d523      	bpl.n	2a958 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   2a910:	b13a      	cbz	r2, 2a922 <submit_to_queue_locked+0x5e>
   2a912:	b940      	cbnz	r0, 2a926 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   2a914:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   2a918:	2300      	movs	r3, #0
   2a91a:	6033      	str	r3, [r6, #0]
	return ret;
   2a91c:	e013      	b.n	2a946 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2a91e:	2000      	movs	r0, #0
   2a920:	e7f0      	b.n	2a904 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   2a922:	071b      	lsls	r3, r3, #28
   2a924:	d4f6      	bmi.n	2a914 <submit_to_queue_locked+0x50>
	parent->next = child;
   2a926:	2300      	movs	r3, #0
   2a928:	6023      	str	r3, [r4, #0]
	return list->tail;
   2a92a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   2a92e:	b963      	cbnz	r3, 2a94a <submit_to_queue_locked+0x86>
	list->head = node;
   2a930:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   2a934:	4638      	mov	r0, r7
   2a936:	f006 ff67 	bl	31808 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   2a93a:	68e3      	ldr	r3, [r4, #12]
   2a93c:	f043 0304 	orr.w	r3, r3, #4
   2a940:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   2a942:	6833      	ldr	r3, [r6, #0]
   2a944:	60a3      	str	r3, [r4, #8]
}
   2a946:	4628      	mov	r0, r5
   2a948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   2a94a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2a94c:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   2a950:	e7f0      	b.n	2a934 <submit_to_queue_locked+0x70>
		return -EINVAL;
   2a952:	f06f 0515 	mvn.w	r5, #21
   2a956:	e7df      	b.n	2a918 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   2a958:	f06f 0512 	mvn.w	r5, #18
   2a95c:	e7dc      	b.n	2a918 <submit_to_queue_locked+0x54>
   2a95e:	bf00      	nop
   2a960:	20003250 	.word	0x20003250

0002a964 <k_work_submit>:
{
   2a964:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   2a966:	4801      	ldr	r0, [pc, #4]	; (2a96c <k_work_submit+0x8>)
   2a968:	f006 bfae 	b.w	318c8 <k_work_submit_to_queue>
   2a96c:	20001c80 	.word	0x20001c80

0002a970 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   2a970:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a972:	b089      	sub	sp, #36	; 0x24
   2a974:	4604      	mov	r4, r0
	list->head = NULL;
   2a976:	2000      	movs	r0, #0
	list->tail = NULL;
   2a978:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   2a97c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2a97e:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   2a982:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   2a986:	f104 0090 	add.w	r0, r4, #144	; 0x90
   2a98a:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   2a98e:	b31d      	cbz	r5, 2a9d8 <k_work_queue_start+0x68>
   2a990:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   2a992:	2800      	cmp	r0, #0
   2a994:	f240 1001 	movw	r0, #257	; 0x101
   2a998:	bf08      	it	eq
   2a99a:	2001      	moveq	r0, #1
	*flagp = flags;
   2a99c:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2a9a0:	2000      	movs	r0, #0
   2a9a2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2a9a6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2a9aa:	e9cd 3003 	strd	r3, r0, [sp, #12]
   2a9ae:	e9cd 0001 	strd	r0, r0, [sp, #4]
   2a9b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
   2a9b6:	4b09      	ldr	r3, [pc, #36]	; (2a9dc <k_work_queue_start+0x6c>)
   2a9b8:	9400      	str	r4, [sp, #0]
   2a9ba:	4620      	mov	r0, r4
   2a9bc:	f7ff fcd4 	bl	2a368 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   2a9c0:	b125      	cbz	r5, 2a9cc <k_work_queue_start+0x5c>
   2a9c2:	6829      	ldr	r1, [r5, #0]
   2a9c4:	b111      	cbz	r1, 2a9cc <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   2a9c6:	4620      	mov	r0, r4
   2a9c8:	f006 fe0b 	bl	315e2 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   2a9cc:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   2a9ce:	b009      	add	sp, #36	; 0x24
   2a9d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2a9d4:	f006 be0a 	b.w	315ec <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   2a9d8:	2001      	movs	r0, #1
   2a9da:	e7df      	b.n	2a99c <k_work_queue_start+0x2c>
   2a9dc:	0002a75d 	.word	0x0002a75d

0002a9e0 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   2a9e0:	b513      	push	{r0, r1, r4, lr}
   2a9e2:	9001      	str	r0, [sp, #4]
   2a9e4:	4608      	mov	r0, r1
	__asm__ volatile(
   2a9e6:	f04f 0120 	mov.w	r1, #32
   2a9ea:	f3ef 8411 	mrs	r4, BASEPRI
   2a9ee:	f381 8812 	msr	BASEPRI_MAX, r1
   2a9f2:	f3bf 8f6f 	isb	sy
	return *flagp;
   2a9f6:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   2a9f8:	f011 0f0e 	tst.w	r1, #14
   2a9fc:	d116      	bne.n	2aa2c <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2a9fe:	ea53 0c02 	orrs.w	ip, r3, r2
   2aa02:	d108      	bne.n	2aa16 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   2aa04:	a901      	add	r1, sp, #4
   2aa06:	f7ff ff5d 	bl	2a8c4 <submit_to_queue_locked>
	__asm__ volatile(
   2aa0a:	f384 8811 	msr	BASEPRI, r4
   2aa0e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2aa12:	b002      	add	sp, #8
   2aa14:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   2aa16:	f041 0108 	orr.w	r1, r1, #8
   2aa1a:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   2aa1c:	9901      	ldr	r1, [sp, #4]
   2aa1e:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2aa20:	3010      	adds	r0, #16
   2aa22:	4903      	ldr	r1, [pc, #12]	; (2aa30 <k_work_schedule_for_queue+0x50>)
   2aa24:	f000 fc10 	bl	2b248 <z_add_timeout>
	return ret;
   2aa28:	2001      	movs	r0, #1
   2aa2a:	e7ee      	b.n	2aa0a <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   2aa2c:	2000      	movs	r0, #0
   2aa2e:	e7ec      	b.n	2aa0a <k_work_schedule_for_queue+0x2a>
   2aa30:	00031879 	.word	0x00031879

0002aa34 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   2aa34:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   2aa36:	4801      	ldr	r0, [pc, #4]	; (2aa3c <k_work_schedule+0x8>)
   2aa38:	f7ff bfd2 	b.w	2a9e0 <k_work_schedule_for_queue>
   2aa3c:	20001c80 	.word	0x20001c80

0002aa40 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   2aa40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2aa42:	460c      	mov	r4, r1
   2aa44:	9001      	str	r0, [sp, #4]
   2aa46:	4616      	mov	r6, r2
   2aa48:	461d      	mov	r5, r3
	__asm__ volatile(
   2aa4a:	f04f 0320 	mov.w	r3, #32
   2aa4e:	f3ef 8711 	mrs	r7, BASEPRI
   2aa52:	f383 8812 	msr	BASEPRI_MAX, r3
   2aa56:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   2aa5a:	4608      	mov	r0, r1
   2aa5c:	f006 fec6 	bl	317ec <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2aa60:	ea55 0306 	orrs.w	r3, r5, r6
   2aa64:	d109      	bne.n	2aa7a <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   2aa66:	a901      	add	r1, sp, #4
   2aa68:	4620      	mov	r0, r4
   2aa6a:	f7ff ff2b 	bl	2a8c4 <submit_to_queue_locked>
	__asm__ volatile(
   2aa6e:	f387 8811 	msr	BASEPRI, r7
   2aa72:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2aa76:	b003      	add	sp, #12
   2aa78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   2aa7a:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2aa7c:	4906      	ldr	r1, [pc, #24]	; (2aa98 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   2aa7e:	f043 0308 	orr.w	r3, r3, #8
   2aa82:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   2aa84:	9b01      	ldr	r3, [sp, #4]
   2aa86:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2aa88:	f104 0010 	add.w	r0, r4, #16
   2aa8c:	4632      	mov	r2, r6
   2aa8e:	462b      	mov	r3, r5
   2aa90:	f000 fbda 	bl	2b248 <z_add_timeout>
	return ret;
   2aa94:	2001      	movs	r0, #1
   2aa96:	e7ea      	b.n	2aa6e <k_work_reschedule_for_queue+0x2e>
   2aa98:	00031879 	.word	0x00031879

0002aa9c <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   2aa9c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   2aa9e:	4801      	ldr	r0, [pc, #4]	; (2aaa4 <k_work_reschedule+0x8>)
   2aaa0:	f7ff bfce 	b.w	2aa40 <k_work_reschedule_for_queue>
   2aaa4:	20001c80 	.word	0x20001c80

0002aaa8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   2aaa8:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   2aaaa:	4d07      	ldr	r5, [pc, #28]	; (2aac8 <z_reset_time_slice+0x20>)
   2aaac:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   2aaae:	b154      	cbz	r4, 2aac6 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   2aab0:	f7fe fbda 	bl	29268 <sys_clock_elapsed>
   2aab4:	4b05      	ldr	r3, [pc, #20]	; (2aacc <z_reset_time_slice+0x24>)
   2aab6:	4404      	add	r4, r0
   2aab8:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   2aaba:	6828      	ldr	r0, [r5, #0]
   2aabc:	2100      	movs	r1, #0
	}
}
   2aabe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   2aac2:	f007 b8a1 	b.w	31c08 <z_set_timeout_expiry>
}
   2aac6:	bd38      	pop	{r3, r4, r5, pc}
   2aac8:	20003288 	.word	0x20003288
   2aacc:	20003250 	.word	0x20003250

0002aad0 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   2aad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2aad2:	4604      	mov	r4, r0
   2aad4:	460d      	mov	r5, r1
	__asm__ volatile(
   2aad6:	f04f 0320 	mov.w	r3, #32
   2aada:	f3ef 8711 	mrs	r7, BASEPRI
   2aade:	f383 8812 	msr	BASEPRI_MAX, r3
   2aae2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   2aae6:	4e10      	ldr	r6, [pc, #64]	; (2ab28 <k_sched_time_slice_set+0x58>)
   2aae8:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   2aaea:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   2aaee:	f240 30e7 	movw	r0, #999	; 0x3e7
   2aaf2:	6131      	str	r1, [r6, #16]
   2aaf4:	2300      	movs	r3, #0
   2aaf6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2aafa:	fbe4 010c 	umlal	r0, r1, r4, ip
   2aafe:	f7e1 fbff 	bl	c300 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   2ab02:	2c00      	cmp	r4, #0
   2ab04:	4b09      	ldr	r3, [pc, #36]	; (2ab2c <k_sched_time_slice_set+0x5c>)
   2ab06:	dc0a      	bgt.n	2ab1e <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
   2ab08:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   2ab0a:	4b09      	ldr	r3, [pc, #36]	; (2ab30 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   2ab0c:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
   2ab0e:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   2ab10:	f7ff ffca 	bl	2aaa8 <z_reset_time_slice>
	__asm__ volatile(
   2ab14:	f387 8811 	msr	BASEPRI, r7
   2ab18:	f3bf 8f6f 	isb	sy
	}
}
   2ab1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
   2ab1e:	2802      	cmp	r0, #2
   2ab20:	bfb8      	it	lt
   2ab22:	2002      	movlt	r0, #2
   2ab24:	e7f0      	b.n	2ab08 <k_sched_time_slice_set+0x38>
   2ab26:	bf00      	nop
   2ab28:	20003250 	.word	0x20003250
   2ab2c:	20003288 	.word	0x20003288
   2ab30:	20003284 	.word	0x20003284

0002ab34 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2ab34:	b949      	cbnz	r1, 2ab4a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2ab36:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   2ab3a:	b930      	cbnz	r0, 2ab4a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   2ab3c:	4b05      	ldr	r3, [pc, #20]	; (2ab54 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   2ab3e:	69da      	ldr	r2, [r3, #28]
   2ab40:	689b      	ldr	r3, [r3, #8]
   2ab42:	429a      	cmp	r2, r3
   2ab44:	d001      	beq.n	2ab4a <z_reschedule+0x16>
	ret = arch_swap(key);
   2ab46:	f7e5 beed 	b.w	10924 <arch_swap>
   2ab4a:	f381 8811 	msr	BASEPRI, r1
   2ab4e:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   2ab52:	4770      	bx	lr
   2ab54:	20003250 	.word	0x20003250

0002ab58 <k_sched_lock>:
	__asm__ volatile(
   2ab58:	f04f 0320 	mov.w	r3, #32
   2ab5c:	f3ef 8111 	mrs	r1, BASEPRI
   2ab60:	f383 8812 	msr	BASEPRI_MAX, r3
   2ab64:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   2ab68:	4b04      	ldr	r3, [pc, #16]	; (2ab7c <k_sched_lock+0x24>)
   2ab6a:	689a      	ldr	r2, [r3, #8]
   2ab6c:	7bd3      	ldrb	r3, [r2, #15]
   2ab6e:	3b01      	subs	r3, #1
   2ab70:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   2ab72:	f381 8811 	msr	BASEPRI, r1
   2ab76:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   2ab7a:	4770      	bx	lr
   2ab7c:	20003250 	.word	0x20003250

0002ab80 <update_cache>:
{
   2ab80:	b538      	push	{r3, r4, r5, lr}
   2ab82:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   2ab84:	480c      	ldr	r0, [pc, #48]	; (2abb8 <update_cache+0x38>)
   2ab86:	4d0d      	ldr	r5, [pc, #52]	; (2abbc <update_cache+0x3c>)
   2ab88:	f006 ff5c 	bl	31a44 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   2ab8c:	4604      	mov	r4, r0
   2ab8e:	b900      	cbnz	r0, 2ab92 <update_cache+0x12>
   2ab90:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   2ab92:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   2ab94:	b94a      	cbnz	r2, 2abaa <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   2ab96:	7b5a      	ldrb	r2, [r3, #13]
   2ab98:	06d2      	lsls	r2, r2, #27
   2ab9a:	d106      	bne.n	2abaa <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   2ab9c:	69a2      	ldr	r2, [r4, #24]
   2ab9e:	b922      	cbnz	r2, 2abaa <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   2aba0:	89da      	ldrh	r2, [r3, #14]
   2aba2:	2a7f      	cmp	r2, #127	; 0x7f
   2aba4:	d901      	bls.n	2abaa <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   2aba6:	61eb      	str	r3, [r5, #28]
}
   2aba8:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   2abaa:	429c      	cmp	r4, r3
   2abac:	d002      	beq.n	2abb4 <update_cache+0x34>
			z_reset_time_slice(thread);
   2abae:	4620      	mov	r0, r4
   2abb0:	f7ff ff7a 	bl	2aaa8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   2abb4:	61ec      	str	r4, [r5, #28]
}
   2abb6:	e7f7      	b.n	2aba8 <update_cache+0x28>
   2abb8:	20003270 	.word	0x20003270
   2abbc:	20003250 	.word	0x20003250

0002abc0 <move_thread_to_end_of_prio_q>:
{
   2abc0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   2abc2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   2abc6:	7b43      	ldrb	r3, [r0, #13]
   2abc8:	2a00      	cmp	r2, #0
{
   2abca:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   2abcc:	da04      	bge.n	2abd8 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2abce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2abd2:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   2abd4:	f006 fee1 	bl	3199a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2abd8:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   2abda:	4a15      	ldr	r2, [pc, #84]	; (2ac30 <move_thread_to_end_of_prio_q+0x70>)
   2abdc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2abe0:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   2abe2:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2abe6:	f102 0520 	add.w	r5, r2, #32
   2abea:	42ab      	cmp	r3, r5
   2abec:	d01b      	beq.n	2ac26 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2abee:	b1d3      	cbz	r3, 2ac26 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   2abf0:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   2abf4:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   2abf8:	4286      	cmp	r6, r0
   2abfa:	d00f      	beq.n	2ac1c <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   2abfc:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   2abfe:	2800      	cmp	r0, #0
   2ac00:	dd0c      	ble.n	2ac1c <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   2ac02:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   2ac04:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   2ac08:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   2ac0a:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   2ac0c:	6890      	ldr	r0, [r2, #8]
   2ac0e:	1a43      	subs	r3, r0, r1
   2ac10:	4258      	negs	r0, r3
}
   2ac12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   2ac16:	4158      	adcs	r0, r3
   2ac18:	f7ff bfb2 	b.w	2ab80 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2ac1c:	42a3      	cmp	r3, r4
   2ac1e:	d002      	beq.n	2ac26 <move_thread_to_end_of_prio_q+0x66>
   2ac20:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2ac22:	2b00      	cmp	r3, #0
   2ac24:	d1e6      	bne.n	2abf4 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   2ac26:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   2ac2a:	6021      	str	r1, [r4, #0]
	list->tail = node;
   2ac2c:	6251      	str	r1, [r2, #36]	; 0x24
}
   2ac2e:	e7ed      	b.n	2ac0c <move_thread_to_end_of_prio_q+0x4c>
   2ac30:	20003250 	.word	0x20003250

0002ac34 <z_time_slice>:
{
   2ac34:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2ac36:	f04f 0320 	mov.w	r3, #32
   2ac3a:	f3ef 8511 	mrs	r5, BASEPRI
   2ac3e:	f383 8812 	msr	BASEPRI_MAX, r3
   2ac42:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   2ac46:	4b17      	ldr	r3, [pc, #92]	; (2aca4 <z_time_slice+0x70>)
   2ac48:	4a17      	ldr	r2, [pc, #92]	; (2aca8 <z_time_slice+0x74>)
   2ac4a:	689c      	ldr	r4, [r3, #8]
   2ac4c:	6811      	ldr	r1, [r2, #0]
   2ac4e:	428c      	cmp	r4, r1
   2ac50:	d107      	bne.n	2ac62 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   2ac52:	4620      	mov	r0, r4
   2ac54:	f7ff ff28 	bl	2aaa8 <z_reset_time_slice>
	__asm__ volatile(
   2ac58:	f385 8811 	msr	BASEPRI, r5
   2ac5c:	f3bf 8f6f 	isb	sy
}
   2ac60:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   2ac62:	2100      	movs	r1, #0
   2ac64:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   2ac66:	4a11      	ldr	r2, [pc, #68]	; (2acac <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   2ac68:	6812      	ldr	r2, [r2, #0]
   2ac6a:	b1c2      	cbz	r2, 2ac9e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   2ac6c:	89e2      	ldrh	r2, [r4, #14]
   2ac6e:	2a7f      	cmp	r2, #127	; 0x7f
   2ac70:	d815      	bhi.n	2ac9e <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   2ac72:	7b62      	ldrb	r2, [r4, #13]
   2ac74:	06d2      	lsls	r2, r2, #27
   2ac76:	d112      	bne.n	2ac9e <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   2ac78:	4a0d      	ldr	r2, [pc, #52]	; (2acb0 <z_time_slice+0x7c>)
   2ac7a:	f994 100e 	ldrsb.w	r1, [r4, #14]
   2ac7e:	6812      	ldr	r2, [r2, #0]
   2ac80:	4291      	cmp	r1, r2
   2ac82:	db0c      	blt.n	2ac9e <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
   2ac84:	4a0b      	ldr	r2, [pc, #44]	; (2acb4 <z_time_slice+0x80>)
   2ac86:	4294      	cmp	r4, r2
   2ac88:	d009      	beq.n	2ac9e <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   2ac8a:	691a      	ldr	r2, [r3, #16]
   2ac8c:	4282      	cmp	r2, r0
   2ac8e:	dc03      	bgt.n	2ac98 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   2ac90:	4620      	mov	r0, r4
   2ac92:	f7ff ff95 	bl	2abc0 <move_thread_to_end_of_prio_q>
   2ac96:	e7dc      	b.n	2ac52 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   2ac98:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   2ac9a:	611a      	str	r2, [r3, #16]
   2ac9c:	e7dc      	b.n	2ac58 <z_time_slice+0x24>
   2ac9e:	2200      	movs	r2, #0
   2aca0:	e7fb      	b.n	2ac9a <z_time_slice+0x66>
   2aca2:	bf00      	nop
   2aca4:	20003250 	.word	0x20003250
   2aca8:	20003280 	.word	0x20003280
   2acac:	20003288 	.word	0x20003288
   2acb0:	20003284 	.word	0x20003284
   2acb4:	20001b80 	.word	0x20001b80

0002acb8 <ready_thread>:
{
   2acb8:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   2acba:	f990 200d 	ldrsb.w	r2, [r0, #13]
   2acbe:	7b43      	ldrb	r3, [r0, #13]
   2acc0:	2a00      	cmp	r2, #0
   2acc2:	db2a      	blt.n	2ad1a <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2acc4:	06da      	lsls	r2, r3, #27
   2acc6:	d128      	bne.n	2ad1a <ready_thread+0x62>
   2acc8:	6982      	ldr	r2, [r0, #24]
   2acca:	bb32      	cbnz	r2, 2ad1a <ready_thread+0x62>
	return list->head == list;
   2accc:	4a14      	ldr	r2, [pc, #80]	; (2ad20 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   2acce:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2acd2:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   2acd4:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2acd8:	f102 0520 	add.w	r5, r2, #32
   2acdc:	42ab      	cmp	r3, r5
   2acde:	d017      	beq.n	2ad10 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2ace0:	b1b3      	cbz	r3, 2ad10 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   2ace2:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2ace6:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   2acea:	428e      	cmp	r6, r1
   2acec:	d00b      	beq.n	2ad06 <ready_thread+0x4e>
		return b2 - b1;
   2acee:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   2acf0:	2900      	cmp	r1, #0
   2acf2:	dd08      	ble.n	2ad06 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   2acf4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2acf6:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   2acfa:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   2acfc:	6058      	str	r0, [r3, #4]
}
   2acfe:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   2ad00:	2000      	movs	r0, #0
   2ad02:	f7ff bf3d 	b.w	2ab80 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2ad06:	42a3      	cmp	r3, r4
   2ad08:	d002      	beq.n	2ad10 <ready_thread+0x58>
   2ad0a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2ad0c:	2b00      	cmp	r3, #0
   2ad0e:	d1ea      	bne.n	2ace6 <ready_thread+0x2e>
	node->prev = tail;
   2ad10:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   2ad14:	6020      	str	r0, [r4, #0]
	list->tail = node;
   2ad16:	6250      	str	r0, [r2, #36]	; 0x24
}
   2ad18:	e7f1      	b.n	2acfe <ready_thread+0x46>
}
   2ad1a:	bc70      	pop	{r4, r5, r6}
   2ad1c:	4770      	bx	lr
   2ad1e:	bf00      	nop
   2ad20:	20003250 	.word	0x20003250

0002ad24 <z_sched_start>:
{
   2ad24:	b510      	push	{r4, lr}
	__asm__ volatile(
   2ad26:	f04f 0220 	mov.w	r2, #32
   2ad2a:	f3ef 8411 	mrs	r4, BASEPRI
   2ad2e:	f382 8812 	msr	BASEPRI_MAX, r2
   2ad32:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   2ad36:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   2ad38:	0751      	lsls	r1, r2, #29
   2ad3a:	d404      	bmi.n	2ad46 <z_sched_start+0x22>
	__asm__ volatile(
   2ad3c:	f384 8811 	msr	BASEPRI, r4
   2ad40:	f3bf 8f6f 	isb	sy
}
   2ad44:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2ad46:	f022 0204 	bic.w	r2, r2, #4
   2ad4a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   2ad4c:	f7ff ffb4 	bl	2acb8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   2ad50:	4621      	mov	r1, r4
   2ad52:	4802      	ldr	r0, [pc, #8]	; (2ad5c <z_sched_start+0x38>)
}
   2ad54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   2ad58:	f7ff beec 	b.w	2ab34 <z_reschedule>
   2ad5c:	20003840 	.word	0x20003840

0002ad60 <unready_thread>:
{
   2ad60:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   2ad62:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   2ad66:	7b43      	ldrb	r3, [r0, #13]
   2ad68:	2a00      	cmp	r2, #0
{
   2ad6a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   2ad6c:	da04      	bge.n	2ad78 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2ad6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2ad72:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2ad74:	f006 fe11 	bl	3199a <sys_dlist_remove>
	update_cache(thread == _current);
   2ad78:	4b04      	ldr	r3, [pc, #16]	; (2ad8c <unready_thread+0x2c>)
   2ad7a:	6898      	ldr	r0, [r3, #8]
   2ad7c:	1a43      	subs	r3, r0, r1
   2ad7e:	4258      	negs	r0, r3
   2ad80:	4158      	adcs	r0, r3
}
   2ad82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   2ad86:	f7ff befb 	b.w	2ab80 <update_cache>
   2ad8a:	bf00      	nop
   2ad8c:	20003250 	.word	0x20003250

0002ad90 <pend>:
{
   2ad90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ad94:	4606      	mov	r6, r0
   2ad96:	4615      	mov	r5, r2
   2ad98:	461c      	mov	r4, r3
	__asm__ volatile(
   2ad9a:	f04f 0320 	mov.w	r3, #32
   2ad9e:	f3ef 8711 	mrs	r7, BASEPRI
   2ada2:	f383 8812 	msr	BASEPRI_MAX, r3
   2ada6:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   2adaa:	f006 fe83 	bl	31ab4 <add_to_waitq_locked>
	__asm__ volatile(
   2adae:	f387 8811 	msr	BASEPRI, r7
   2adb2:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2adb6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   2adba:	bf08      	it	eq
   2adbc:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   2adc0:	d008      	beq.n	2add4 <pend+0x44>
   2adc2:	462a      	mov	r2, r5
   2adc4:	4623      	mov	r3, r4
   2adc6:	f106 0018 	add.w	r0, r6, #24
   2adca:	4903      	ldr	r1, [pc, #12]	; (2add8 <pend+0x48>)
}
   2adcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2add0:	f000 ba3a 	b.w	2b248 <z_add_timeout>
   2add4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2add8:	00031a71 	.word	0x00031a71

0002addc <z_pend_curr>:
{
   2addc:	b510      	push	{r4, lr}
	pending_current = _current;
   2adde:	4b07      	ldr	r3, [pc, #28]	; (2adfc <z_pend_curr+0x20>)
   2ade0:	6898      	ldr	r0, [r3, #8]
   2ade2:	4b07      	ldr	r3, [pc, #28]	; (2ae00 <z_pend_curr+0x24>)
{
   2ade4:	460c      	mov	r4, r1
	pending_current = _current;
   2ade6:	6018      	str	r0, [r3, #0]
{
   2ade8:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   2adea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2adee:	f7ff ffcf 	bl	2ad90 <pend>
   2adf2:	4620      	mov	r0, r4
}
   2adf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2adf8:	f7e5 bd94 	b.w	10924 <arch_swap>
   2adfc:	20003250 	.word	0x20003250
   2ae00:	20003280 	.word	0x20003280

0002ae04 <z_set_prio>:
{
   2ae04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ae06:	4604      	mov	r4, r0
	__asm__ volatile(
   2ae08:	f04f 0320 	mov.w	r3, #32
   2ae0c:	f3ef 8611 	mrs	r6, BASEPRI
   2ae10:	f383 8812 	msr	BASEPRI_MAX, r3
   2ae14:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   2ae18:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2ae1a:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   2ae1c:	b249      	sxtb	r1, r1
   2ae1e:	d133      	bne.n	2ae88 <z_set_prio+0x84>
		if (need_sched) {
   2ae20:	6982      	ldr	r2, [r0, #24]
   2ae22:	bb8a      	cbnz	r2, 2ae88 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2ae24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2ae28:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2ae2a:	f006 fdb6 	bl	3199a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2ae2e:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   2ae30:	4a17      	ldr	r2, [pc, #92]	; (2ae90 <z_set_prio+0x8c>)
				thread->base.prio = prio;
   2ae32:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   2ae34:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2ae38:	7343      	strb	r3, [r0, #13]
   2ae3a:	4610      	mov	r0, r2
   2ae3c:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ae40:	4283      	cmp	r3, r0
   2ae42:	d01b      	beq.n	2ae7c <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2ae44:	b1d3      	cbz	r3, 2ae7c <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
   2ae46:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
   2ae48:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   2ae4c:	42a9      	cmp	r1, r5
   2ae4e:	d010      	beq.n	2ae72 <z_set_prio+0x6e>
		return b2 - b1;
   2ae50:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   2ae52:	2d00      	cmp	r5, #0
   2ae54:	dd0d      	ble.n	2ae72 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   2ae56:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2ae58:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2ae5c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2ae5e:	605c      	str	r4, [r3, #4]
			update_cache(1);
   2ae60:	2001      	movs	r0, #1
   2ae62:	f7ff fe8d 	bl	2ab80 <update_cache>
   2ae66:	2001      	movs	r0, #1
	__asm__ volatile(
   2ae68:	f386 8811 	msr	BASEPRI, r6
   2ae6c:	f3bf 8f6f 	isb	sy
}
   2ae70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2ae72:	42bb      	cmp	r3, r7
   2ae74:	d002      	beq.n	2ae7c <z_set_prio+0x78>
   2ae76:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2ae78:	2b00      	cmp	r3, #0
   2ae7a:	d1e5      	bne.n	2ae48 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   2ae7c:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
   2ae7e:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   2ae82:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2ae84:	6254      	str	r4, [r2, #36]	; 0x24
}
   2ae86:	e7eb      	b.n	2ae60 <z_set_prio+0x5c>
			thread->base.prio = prio;
   2ae88:	73a1      	strb	r1, [r4, #14]
   2ae8a:	2000      	movs	r0, #0
   2ae8c:	e7ec      	b.n	2ae68 <z_set_prio+0x64>
   2ae8e:	bf00      	nop
   2ae90:	20003250 	.word	0x20003250

0002ae94 <z_impl_k_thread_suspend>:
{
   2ae94:	b570      	push	{r4, r5, r6, lr}
   2ae96:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   2ae98:	3018      	adds	r0, #24
   2ae9a:	f006 fe8f 	bl	31bbc <z_abort_timeout>
	__asm__ volatile(
   2ae9e:	f04f 0320 	mov.w	r3, #32
   2aea2:	f3ef 8611 	mrs	r6, BASEPRI
   2aea6:	f383 8812 	msr	BASEPRI_MAX, r3
   2aeaa:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   2aeae:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   2aeb2:	7b63      	ldrb	r3, [r4, #13]
   2aeb4:	2a00      	cmp	r2, #0
   2aeb6:	da05      	bge.n	2aec4 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2aeb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2aebc:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2aebe:	4620      	mov	r0, r4
   2aec0:	f006 fd6b 	bl	3199a <sys_dlist_remove>
		update_cache(thread == _current);
   2aec4:	4d0b      	ldr	r5, [pc, #44]	; (2aef4 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2aec6:	7b63      	ldrb	r3, [r4, #13]
   2aec8:	68a8      	ldr	r0, [r5, #8]
   2aeca:	f043 0310 	orr.w	r3, r3, #16
   2aece:	7363      	strb	r3, [r4, #13]
   2aed0:	1b03      	subs	r3, r0, r4
   2aed2:	4258      	negs	r0, r3
   2aed4:	4158      	adcs	r0, r3
   2aed6:	f7ff fe53 	bl	2ab80 <update_cache>
	__asm__ volatile(
   2aeda:	f386 8811 	msr	BASEPRI, r6
   2aede:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   2aee2:	68ab      	ldr	r3, [r5, #8]
   2aee4:	42a3      	cmp	r3, r4
   2aee6:	d103      	bne.n	2aef0 <z_impl_k_thread_suspend+0x5c>
}
   2aee8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   2aeec:	f006 bda0 	b.w	31a30 <z_reschedule_unlocked>
}
   2aef0:	bd70      	pop	{r4, r5, r6, pc}
   2aef2:	bf00      	nop
   2aef4:	20003250 	.word	0x20003250

0002aef8 <k_sched_unlock>:
{
   2aef8:	b510      	push	{r4, lr}
	__asm__ volatile(
   2aefa:	f04f 0320 	mov.w	r3, #32
   2aefe:	f3ef 8411 	mrs	r4, BASEPRI
   2af02:	f383 8812 	msr	BASEPRI_MAX, r3
   2af06:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   2af0a:	4b08      	ldr	r3, [pc, #32]	; (2af2c <k_sched_unlock+0x34>)
   2af0c:	689a      	ldr	r2, [r3, #8]
   2af0e:	7bd3      	ldrb	r3, [r2, #15]
   2af10:	3301      	adds	r3, #1
   2af12:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   2af14:	2000      	movs	r0, #0
   2af16:	f7ff fe33 	bl	2ab80 <update_cache>
	__asm__ volatile(
   2af1a:	f384 8811 	msr	BASEPRI, r4
   2af1e:	f3bf 8f6f 	isb	sy
}
   2af22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   2af26:	f006 bd83 	b.w	31a30 <z_reschedule_unlocked>
   2af2a:	bf00      	nop
   2af2c:	20003250 	.word	0x20003250

0002af30 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   2af30:	4b04      	ldr	r3, [pc, #16]	; (2af44 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   2af32:	2100      	movs	r1, #0
   2af34:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   2af38:	e9c3 2208 	strd	r2, r2, [r3, #32]
   2af3c:	4608      	mov	r0, r1
   2af3e:	f7ff bdc7 	b.w	2aad0 <k_sched_time_slice_set>
   2af42:	bf00      	nop
   2af44:	20003250 	.word	0x20003250

0002af48 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   2af48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   2af4a:	f04f 0320 	mov.w	r3, #32
   2af4e:	f3ef 8511 	mrs	r5, BASEPRI
   2af52:	f383 8812 	msr	BASEPRI_MAX, r3
   2af56:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   2af5a:	491a      	ldr	r1, [pc, #104]	; (2afc4 <z_impl_k_yield+0x7c>)
   2af5c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2af5e:	7b43      	ldrb	r3, [r0, #13]
   2af60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2af64:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2af66:	f006 fd18 	bl	3199a <sys_dlist_remove>
	}
	queue_thread(_current);
   2af6a:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   2af6c:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   2af6e:	4608      	mov	r0, r1
   2af70:	f062 027f 	orn	r2, r2, #127	; 0x7f
   2af74:	735a      	strb	r2, [r3, #13]
   2af76:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2af7a:	4282      	cmp	r2, r0
   2af7c:	d01c      	beq.n	2afb8 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2af7e:	b1da      	cbz	r2, 2afb8 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   2af80:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   2af82:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   2af86:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   2af8a:	42a6      	cmp	r6, r4
   2af8c:	d00f      	beq.n	2afae <z_impl_k_yield+0x66>
		return b2 - b1;
   2af8e:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   2af90:	2c00      	cmp	r4, #0
   2af92:	dd0c      	ble.n	2afae <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   2af94:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   2af96:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   2af9a:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   2af9c:	6053      	str	r3, [r2, #4]
	update_cache(1);
   2af9e:	2001      	movs	r0, #1
   2afa0:	f7ff fdee 	bl	2ab80 <update_cache>
   2afa4:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   2afa6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2afaa:	f7e5 bcbb 	b.w	10924 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   2afae:	42ba      	cmp	r2, r7
   2afb0:	d002      	beq.n	2afb8 <z_impl_k_yield+0x70>
   2afb2:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2afb4:	2a00      	cmp	r2, #0
   2afb6:	d1e6      	bne.n	2af86 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   2afb8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   2afba:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   2afbe:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2afc0:	624b      	str	r3, [r1, #36]	; 0x24
}
   2afc2:	e7ec      	b.n	2af9e <z_impl_k_yield+0x56>
   2afc4:	20003250 	.word	0x20003250

0002afc8 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   2afc8:	ea50 0301 	orrs.w	r3, r0, r1
{
   2afcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2afd0:	4605      	mov	r5, r0
   2afd2:	460e      	mov	r6, r1
	if (ticks == 0) {
   2afd4:	d103      	bne.n	2afde <z_tick_sleep+0x16>
	z_impl_k_yield();
   2afd6:	f7ff ffb7 	bl	2af48 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   2afda:	2000      	movs	r0, #0
   2afdc:	e033      	b.n	2b046 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   2afde:	f06f 0401 	mvn.w	r4, #1
   2afe2:	1a24      	subs	r4, r4, r0
   2afe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2afe8:	eb63 0301 	sbc.w	r3, r3, r1
   2afec:	2c01      	cmp	r4, #1
   2afee:	f173 0300 	sbcs.w	r3, r3, #0
   2aff2:	da02      	bge.n	2affa <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   2aff4:	f006 fe22 	bl	31c3c <sys_clock_tick_get_32>
   2aff8:	1944      	adds	r4, r0, r5
   2affa:	f04f 0320 	mov.w	r3, #32
   2affe:	f3ef 8811 	mrs	r8, BASEPRI
   2b002:	f383 8812 	msr	BASEPRI_MAX, r3
   2b006:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   2b00a:	4f10      	ldr	r7, [pc, #64]	; (2b04c <z_tick_sleep+0x84>)
   2b00c:	4b10      	ldr	r3, [pc, #64]	; (2b050 <z_tick_sleep+0x88>)
   2b00e:	68b8      	ldr	r0, [r7, #8]
   2b010:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   2b012:	f7ff fea5 	bl	2ad60 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   2b016:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2b018:	490e      	ldr	r1, [pc, #56]	; (2b054 <z_tick_sleep+0x8c>)
   2b01a:	462a      	mov	r2, r5
   2b01c:	4633      	mov	r3, r6
   2b01e:	3018      	adds	r0, #24
   2b020:	f000 f912 	bl	2b248 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   2b024:	68ba      	ldr	r2, [r7, #8]
   2b026:	7b53      	ldrb	r3, [r2, #13]
   2b028:	f043 0310 	orr.w	r3, r3, #16
   2b02c:	7353      	strb	r3, [r2, #13]
   2b02e:	4640      	mov	r0, r8
   2b030:	f7e5 fc78 	bl	10924 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   2b034:	f006 fe02 	bl	31c3c <sys_clock_tick_get_32>
   2b038:	1a20      	subs	r0, r4, r0
   2b03a:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   2b03e:	2801      	cmp	r0, #1
   2b040:	f173 0300 	sbcs.w	r3, r3, #0
   2b044:	dbc9      	blt.n	2afda <z_tick_sleep+0x12>
}
   2b046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b04a:	bf00      	nop
   2b04c:	20003250 	.word	0x20003250
   2b050:	20003280 	.word	0x20003280
   2b054:	00031a71 	.word	0x00031a71

0002b058 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2b058:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2b05c:	bf08      	it	eq
   2b05e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2b062:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2b064:	d106      	bne.n	2b074 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   2b066:	4b08      	ldr	r3, [pc, #32]	; (2b088 <z_impl_k_sleep+0x30>)
   2b068:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   2b06a:	f7ff ff13 	bl	2ae94 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   2b06e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   2b072:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   2b074:	f7ff ffa8 	bl	2afc8 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   2b078:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2b07c:	fb80 0303 	smull	r0, r3, r0, r3
   2b080:	0bc0      	lsrs	r0, r0, #15
   2b082:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   2b086:	e7f4      	b.n	2b072 <z_impl_k_sleep+0x1a>
   2b088:	20003250 	.word	0x20003250

0002b08c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   2b08c:	4b01      	ldr	r3, [pc, #4]	; (2b094 <z_impl_z_current_get+0x8>)
   2b08e:	6898      	ldr	r0, [r3, #8]
   2b090:	4770      	bx	lr
   2b092:	bf00      	nop
   2b094:	20003250 	.word	0x20003250

0002b098 <z_impl_k_is_preempt_thread>:
   2b098:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   2b09c:	b93b      	cbnz	r3, 2b0ae <z_impl_k_is_preempt_thread+0x16>
   2b09e:	4b05      	ldr	r3, [pc, #20]	; (2b0b4 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   2b0a0:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
   2b0a2:	89d8      	ldrh	r0, [r3, #14]
   2b0a4:	287f      	cmp	r0, #127	; 0x7f
   2b0a6:	bf8c      	ite	hi
   2b0a8:	2000      	movhi	r0, #0
   2b0aa:	2001      	movls	r0, #1
   2b0ac:	4770      	bx	lr
   2b0ae:	2000      	movs	r0, #0
}
   2b0b0:	4770      	bx	lr
   2b0b2:	bf00      	nop
   2b0b4:	20003250 	.word	0x20003250

0002b0b8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   2b0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b0bc:	4604      	mov	r4, r0
   2b0be:	f04f 0320 	mov.w	r3, #32
   2b0c2:	f3ef 8611 	mrs	r6, BASEPRI
   2b0c6:	f383 8812 	msr	BASEPRI_MAX, r3
   2b0ca:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   2b0ce:	7b43      	ldrb	r3, [r0, #13]
   2b0d0:	071a      	lsls	r2, r3, #28
   2b0d2:	d505      	bpl.n	2b0e0 <z_thread_abort+0x28>
	__asm__ volatile(
   2b0d4:	f386 8811 	msr	BASEPRI, r6
   2b0d8:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   2b0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2b0e0:	f023 0220 	bic.w	r2, r3, #32
   2b0e4:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   2b0e8:	09d2      	lsrs	r2, r2, #7
   2b0ea:	d120      	bne.n	2b12e <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2b0ec:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   2b0ee:	68a3      	ldr	r3, [r4, #8]
   2b0f0:	b113      	cbz	r3, 2b0f8 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   2b0f2:	4620      	mov	r0, r4
   2b0f4:	f006 fc59 	bl	319aa <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   2b0f8:	f104 0018 	add.w	r0, r4, #24
   2b0fc:	f006 fd5e 	bl	31bbc <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   2b100:	f104 0758 	add.w	r7, r4, #88	; 0x58
   2b104:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   2b108:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b10a:	42bd      	cmp	r5, r7
   2b10c:	d000      	beq.n	2b110 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2b10e:	b9b5      	cbnz	r5, 2b13e <z_thread_abort+0x86>
		update_cache(1);
   2b110:	2001      	movs	r0, #1
   2b112:	f7ff fd35 	bl	2ab80 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   2b116:	4b10      	ldr	r3, [pc, #64]	; (2b158 <z_thread_abort+0xa0>)
   2b118:	689b      	ldr	r3, [r3, #8]
   2b11a:	42a3      	cmp	r3, r4
   2b11c:	d1da      	bne.n	2b0d4 <z_thread_abort+0x1c>
   2b11e:	f3ef 8305 	mrs	r3, IPSR
   2b122:	2b00      	cmp	r3, #0
   2b124:	d1d6      	bne.n	2b0d4 <z_thread_abort+0x1c>
   2b126:	4630      	mov	r0, r6
   2b128:	f7e5 fbfc 	bl	10924 <arch_swap>
	return ret;
   2b12c:	e7d2      	b.n	2b0d4 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2b12e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   2b132:	f043 0308 	orr.w	r3, r3, #8
   2b136:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2b138:	f006 fc2f 	bl	3199a <sys_dlist_remove>
}
   2b13c:	e7d7      	b.n	2b0ee <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   2b13e:	4628      	mov	r0, r5
   2b140:	f006 fc33 	bl	319aa <unpend_thread_no_timeout>
   2b144:	f105 0018 	add.w	r0, r5, #24
   2b148:	f006 fd38 	bl	31bbc <z_abort_timeout>
   2b14c:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   2b150:	4628      	mov	r0, r5
   2b152:	f7ff fdb1 	bl	2acb8 <ready_thread>
   2b156:	e7d7      	b.n	2b108 <z_thread_abort+0x50>
   2b158:	20003250 	.word	0x20003250

0002b15c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   2b15c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2b15e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   2b162:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2b164:	e9cd 6700 	strd	r6, r7, [sp]
   2b168:	f7ff fe38 	bl	2addc <z_pend_curr>

	if (data != NULL) {
   2b16c:	b11c      	cbz	r4, 2b176 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   2b16e:	4b03      	ldr	r3, [pc, #12]	; (2b17c <z_sched_wait+0x20>)
   2b170:	689b      	ldr	r3, [r3, #8]
   2b172:	695b      	ldr	r3, [r3, #20]
   2b174:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   2b176:	b002      	add	sp, #8
   2b178:	bdd0      	pop	{r4, r6, r7, pc}
   2b17a:	bf00      	nop
   2b17c:	20003250 	.word	0x20003250

0002b180 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   2b180:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   2b182:	4806      	ldr	r0, [pc, #24]	; (2b19c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   2b184:	4a06      	ldr	r2, [pc, #24]	; (2b1a0 <z_data_copy+0x20>)
   2b186:	4907      	ldr	r1, [pc, #28]	; (2b1a4 <z_data_copy+0x24>)
   2b188:	1a12      	subs	r2, r2, r0
   2b18a:	f006 f993 	bl	314b4 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   2b18e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   2b192:	4a05      	ldr	r2, [pc, #20]	; (2b1a8 <z_data_copy+0x28>)
   2b194:	4905      	ldr	r1, [pc, #20]	; (2b1ac <z_data_copy+0x2c>)
   2b196:	4806      	ldr	r0, [pc, #24]	; (2b1b0 <z_data_copy+0x30>)
   2b198:	f006 b98c 	b.w	314b4 <z_early_memcpy>
   2b19c:	20000000 	.word	0x20000000
   2b1a0:	20000dcc 	.word	0x20000dcc
   2b1a4:	00036870 	.word	0x00036870
   2b1a8:	00000000 	.word	0x00000000
   2b1ac:	00036870 	.word	0x00036870
   2b1b0:	20000000 	.word	0x20000000

0002b1b4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   2b1b4:	4b03      	ldr	r3, [pc, #12]	; (2b1c4 <elapsed+0x10>)
   2b1b6:	681b      	ldr	r3, [r3, #0]
   2b1b8:	b90b      	cbnz	r3, 2b1be <elapsed+0xa>
   2b1ba:	f7fe b855 	b.w	29268 <sys_clock_elapsed>
}
   2b1be:	2000      	movs	r0, #0
   2b1c0:	4770      	bx	lr
   2b1c2:	bf00      	nop
   2b1c4:	2000328c 	.word	0x2000328c

0002b1c8 <next_timeout>:
	return list->head == list;
   2b1c8:	4b10      	ldr	r3, [pc, #64]	; (2b20c <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   2b1ca:	b510      	push	{r4, lr}
   2b1cc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b1ce:	429c      	cmp	r4, r3
   2b1d0:	bf08      	it	eq
   2b1d2:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   2b1d4:	f7ff ffee 	bl	2b1b4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   2b1d8:	b1a4      	cbz	r4, 2b204 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   2b1da:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   2b1de:	1a1b      	subs	r3, r3, r0
   2b1e0:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   2b1e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   2b1e8:	f170 0200 	sbcs.w	r2, r0, #0
   2b1ec:	da0a      	bge.n	2b204 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   2b1ee:	2800      	cmp	r0, #0
   2b1f0:	bfac      	ite	ge
   2b1f2:	4618      	movge	r0, r3
   2b1f4:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   2b1f6:	4b06      	ldr	r3, [pc, #24]	; (2b210 <next_timeout+0x48>)
   2b1f8:	691b      	ldr	r3, [r3, #16]
   2b1fa:	b113      	cbz	r3, 2b202 <next_timeout+0x3a>
   2b1fc:	4298      	cmp	r0, r3
   2b1fe:	bfa8      	it	ge
   2b200:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   2b202:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   2b204:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2b208:	e7f5      	b.n	2b1f6 <next_timeout+0x2e>
   2b20a:	bf00      	nop
   2b20c:	2000091c 	.word	0x2000091c
   2b210:	20003250 	.word	0x20003250

0002b214 <remove_timeout>:
{
   2b214:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   2b216:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2b218:	b168      	cbz	r0, 2b236 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   2b21a:	4a0a      	ldr	r2, [pc, #40]	; (2b244 <remove_timeout+0x30>)
   2b21c:	6852      	ldr	r2, [r2, #4]
   2b21e:	4290      	cmp	r0, r2
   2b220:	d009      	beq.n	2b236 <remove_timeout+0x22>
	if (next(t) != NULL) {
   2b222:	b143      	cbz	r3, 2b236 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   2b224:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   2b228:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   2b22c:	1912      	adds	r2, r2, r4
   2b22e:	eb41 0105 	adc.w	r1, r1, r5
   2b232:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   2b236:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   2b238:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2b23a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2b23c:	2300      	movs	r3, #0
	node->prev = NULL;
   2b23e:	e9c0 3300 	strd	r3, r3, [r0]
}
   2b242:	bd30      	pop	{r4, r5, pc}
   2b244:	2000091c 	.word	0x2000091c

0002b248 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2b248:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2b24c:	bf08      	it	eq
   2b24e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   2b252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b254:	4604      	mov	r4, r0
   2b256:	461f      	mov	r7, r3
   2b258:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2b25a:	d067      	beq.n	2b32c <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   2b25c:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   2b25e:	f04f 0320 	mov.w	r3, #32
   2b262:	f3ef 8611 	mrs	r6, BASEPRI
   2b266:	f383 8812 	msr	BASEPRI_MAX, r3
   2b26a:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   2b26e:	f06f 0201 	mvn.w	r2, #1
   2b272:	1b53      	subs	r3, r2, r5
   2b274:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   2b278:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   2b27c:	2b00      	cmp	r3, #0
   2b27e:	db1b      	blt.n	2b2b8 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   2b280:	4b2b      	ldr	r3, [pc, #172]	; (2b330 <z_add_timeout+0xe8>)
   2b282:	e9d3 1300 	ldrd	r1, r3, [r3]
   2b286:	1a52      	subs	r2, r2, r1
   2b288:	eb6c 0303 	sbc.w	r3, ip, r3
   2b28c:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   2b28e:	eb63 0307 	sbc.w	r3, r3, r7
   2b292:	2d01      	cmp	r5, #1
   2b294:	f173 0200 	sbcs.w	r2, r3, #0
   2b298:	bfbc      	itt	lt
   2b29a:	2501      	movlt	r5, #1
   2b29c:	2300      	movlt	r3, #0
   2b29e:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   2b2a2:	4824      	ldr	r0, [pc, #144]	; (2b334 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   2b2a4:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b2a8:	4283      	cmp	r3, r0
   2b2aa:	d118      	bne.n	2b2de <z_add_timeout+0x96>
	node->prev = tail;
   2b2ac:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   2b2b0:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   2b2b4:	6044      	str	r4, [r0, #4]
}
   2b2b6:	e026      	b.n	2b306 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   2b2b8:	f7ff ff7c 	bl	2b1b4 <elapsed>
   2b2bc:	3501      	adds	r5, #1
   2b2be:	f147 0700 	adc.w	r7, r7, #0
   2b2c2:	182d      	adds	r5, r5, r0
   2b2c4:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   2b2c8:	e9c4 5704 	strd	r5, r7, [r4, #16]
   2b2cc:	e7e9      	b.n	2b2a2 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   2b2ce:	1a52      	subs	r2, r2, r1
   2b2d0:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   2b2d4:	459c      	cmp	ip, r3
   2b2d6:	e9c4 2504 	strd	r2, r5, [r4, #16]
   2b2da:	d0e7      	beq.n	2b2ac <z_add_timeout+0x64>
   2b2dc:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   2b2de:	2b00      	cmp	r3, #0
   2b2e0:	d0e4      	beq.n	2b2ac <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   2b2e2:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   2b2e6:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   2b2ea:	428a      	cmp	r2, r1
   2b2ec:	eb75 0e07 	sbcs.w	lr, r5, r7
   2b2f0:	daed      	bge.n	2b2ce <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   2b2f2:	1a8a      	subs	r2, r1, r2
   2b2f4:	eb67 0505 	sbc.w	r5, r7, r5
   2b2f8:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   2b2fc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2b2fe:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2b302:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2b304:	605c      	str	r4, [r3, #4]
	return list->head == list;
   2b306:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b308:	4283      	cmp	r3, r0
   2b30a:	d00b      	beq.n	2b324 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   2b30c:	429c      	cmp	r4, r3
   2b30e:	d109      	bne.n	2b324 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   2b310:	f7ff ff5a 	bl	2b1c8 <next_timeout>

			if (next_time == 0 ||
   2b314:	b118      	cbz	r0, 2b31e <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   2b316:	4b08      	ldr	r3, [pc, #32]	; (2b338 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   2b318:	691b      	ldr	r3, [r3, #16]
   2b31a:	4283      	cmp	r3, r0
   2b31c:	d002      	beq.n	2b324 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   2b31e:	2100      	movs	r1, #0
   2b320:	f7fd ff70 	bl	29204 <sys_clock_set_timeout>
	__asm__ volatile(
   2b324:	f386 8811 	msr	BASEPRI, r6
   2b328:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   2b32c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b32e:	bf00      	nop
   2b330:	20001d20 	.word	0x20001d20
   2b334:	2000091c 	.word	0x2000091c
   2b338:	20003250 	.word	0x20003250

0002b33c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   2b33c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b340:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   2b342:	f7ff fc77 	bl	2ac34 <z_time_slice>
	__asm__ volatile(
   2b346:	f04f 0320 	mov.w	r3, #32
   2b34a:	f3ef 8411 	mrs	r4, BASEPRI
   2b34e:	f383 8812 	msr	BASEPRI_MAX, r3
   2b352:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   2b356:	4e24      	ldr	r6, [pc, #144]	; (2b3e8 <sys_clock_announce+0xac>)
	return list->head == list;
   2b358:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2b3ec <sys_clock_announce+0xb0>
   2b35c:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   2b35e:	4d24      	ldr	r5, [pc, #144]	; (2b3f0 <sys_clock_announce+0xb4>)
   2b360:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   2b364:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b366:	4540      	cmp	r0, r8
		curr_tick += dt;
   2b368:	e9d5 1e00 	ldrd	r1, lr, [r5]
   2b36c:	ea4f 77e2 	mov.w	r7, r2, asr #31
   2b370:	d00b      	beq.n	2b38a <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   2b372:	b150      	cbz	r0, 2b38a <sys_clock_announce+0x4e>
   2b374:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   2b378:	429a      	cmp	r2, r3
   2b37a:	eb77 090c 	sbcs.w	r9, r7, ip
   2b37e:	da16      	bge.n	2b3ae <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   2b380:	1a9b      	subs	r3, r3, r2
   2b382:	eb6c 0c07 	sbc.w	ip, ip, r7
   2b386:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   2b38a:	1852      	adds	r2, r2, r1
   2b38c:	eb4e 0707 	adc.w	r7, lr, r7
   2b390:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   2b394:	2500      	movs	r5, #0
   2b396:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   2b398:	f7ff ff16 	bl	2b1c8 <next_timeout>
   2b39c:	4629      	mov	r1, r5
   2b39e:	f7fd ff31 	bl	29204 <sys_clock_set_timeout>
	__asm__ volatile(
   2b3a2:	f384 8811 	msr	BASEPRI, r4
   2b3a6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   2b3aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   2b3ae:	1859      	adds	r1, r3, r1
   2b3b0:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   2b3b4:	1ad3      	subs	r3, r2, r3
   2b3b6:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   2b3b8:	2200      	movs	r2, #0
   2b3ba:	2300      	movs	r3, #0
   2b3bc:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   2b3c0:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   2b3c4:	f7ff ff26 	bl	2b214 <remove_timeout>
   2b3c8:	f384 8811 	msr	BASEPRI, r4
   2b3cc:	f3bf 8f6f 	isb	sy
		t->fn(t);
   2b3d0:	6883      	ldr	r3, [r0, #8]
   2b3d2:	4798      	blx	r3
	__asm__ volatile(
   2b3d4:	f04f 0320 	mov.w	r3, #32
   2b3d8:	f3ef 8411 	mrs	r4, BASEPRI
   2b3dc:	f383 8812 	msr	BASEPRI_MAX, r3
   2b3e0:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   2b3e4:	e7bc      	b.n	2b360 <sys_clock_announce+0x24>
   2b3e6:	bf00      	nop
   2b3e8:	2000328c 	.word	0x2000328c
   2b3ec:	2000091c 	.word	0x2000091c
   2b3f0:	20001d20 	.word	0x20001d20

0002b3f4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   2b3f4:	b510      	push	{r4, lr}
   2b3f6:	f04f 0320 	mov.w	r3, #32
   2b3fa:	f3ef 8411 	mrs	r4, BASEPRI
   2b3fe:	f383 8812 	msr	BASEPRI_MAX, r3
   2b402:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   2b406:	f7fd ff2f 	bl	29268 <sys_clock_elapsed>
   2b40a:	4a05      	ldr	r2, [pc, #20]	; (2b420 <sys_clock_tick_get+0x2c>)
   2b40c:	e9d2 3100 	ldrd	r3, r1, [r2]
   2b410:	18c0      	adds	r0, r0, r3
   2b412:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   2b416:	f384 8811 	msr	BASEPRI, r4
   2b41a:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   2b41e:	bd10      	pop	{r4, pc}
   2b420:	20001d20 	.word	0x20001d20

0002b424 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   2b424:	b570      	push	{r4, r5, r6, lr}
   2b426:	4604      	mov	r4, r0
	__asm__ volatile(
   2b428:	f04f 0320 	mov.w	r3, #32
   2b42c:	f3ef 8511 	mrs	r5, BASEPRI
   2b430:	f383 8812 	msr	BASEPRI_MAX, r3
   2b434:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2b438:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   2b43c:	3301      	adds	r3, #1
   2b43e:	f142 0200 	adc.w	r2, r2, #0
   2b442:	2b02      	cmp	r3, #2
   2b444:	f172 0300 	sbcs.w	r3, r2, #0
   2b448:	d304      	bcc.n	2b454 <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2b44a:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   2b44e:	4917      	ldr	r1, [pc, #92]	; (2b4ac <z_timer_expiration_handler+0x88>)
   2b450:	f7ff fefa 	bl	2b248 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   2b454:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2b456:	3301      	adds	r3, #1
   2b458:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   2b45a:	6a23      	ldr	r3, [r4, #32]
   2b45c:	b173      	cbz	r3, 2b47c <z_timer_expiration_handler+0x58>
	__asm__ volatile(
   2b45e:	f385 8811 	msr	BASEPRI, r5
   2b462:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   2b466:	6a23      	ldr	r3, [r4, #32]
   2b468:	4620      	mov	r0, r4
   2b46a:	4798      	blx	r3
	__asm__ volatile(
   2b46c:	f04f 0320 	mov.w	r3, #32
   2b470:	f3ef 8511 	mrs	r5, BASEPRI
   2b474:	f383 8812 	msr	BASEPRI_MAX, r3
   2b478:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2b47c:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b480:	42a6      	cmp	r6, r4
   2b482:	d000      	beq.n	2b486 <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   2b484:	b926      	cbnz	r6, 2b490 <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
   2b486:	f385 8811 	msr	BASEPRI, r5
   2b48a:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   2b48e:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   2b490:	4630      	mov	r0, r6
   2b492:	f006 fa9d 	bl	319d0 <z_unpend_thread_no_timeout>
   2b496:	2300      	movs	r3, #0
   2b498:	67f3      	str	r3, [r6, #124]	; 0x7c
   2b49a:	f385 8811 	msr	BASEPRI, r5
   2b49e:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   2b4a2:	4630      	mov	r0, r6
}
   2b4a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   2b4a8:	f006 bad2 	b.w	31a50 <z_ready_thread>
   2b4ac:	0002b425 	.word	0x0002b425

0002b4b0 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   2b4b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b4b4:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2b4b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2b4ba:	bf08      	it	eq
   2b4bc:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
   2b4c0:	4606      	mov	r6, r0
   2b4c2:	461c      	mov	r4, r3
   2b4c4:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
   2b4c8:	4689      	mov	r9, r1
   2b4ca:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2b4cc:	d03e      	beq.n	2b54c <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   2b4ce:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2b4d2:	bf08      	it	eq
   2b4d4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   2b4d8:	4615      	mov	r5, r2
   2b4da:	4607      	mov	r7, r0
   2b4dc:	d014      	beq.n	2b508 <z_impl_k_timer_start+0x58>
   2b4de:	ea50 0302 	orrs.w	r3, r0, r2
   2b4e2:	d011      	beq.n	2b508 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
   2b4e4:	f06f 0301 	mvn.w	r3, #1
   2b4e8:	1a9b      	subs	r3, r3, r2
   2b4ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b4ee:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   2b4f2:	2b00      	cmp	r3, #0
   2b4f4:	da08      	bge.n	2b508 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
   2b4f6:	2a02      	cmp	r2, #2
   2b4f8:	f170 0300 	sbcs.w	r3, r0, #0
   2b4fc:	bfbc      	itt	lt
   2b4fe:	2502      	movlt	r5, #2
   2b500:	2700      	movlt	r7, #0
   2b502:	3d01      	subs	r5, #1
   2b504:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   2b508:	f06f 0301 	mvn.w	r3, #1
   2b50c:	1a5b      	subs	r3, r3, r1
   2b50e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b512:	eb63 0304 	sbc.w	r3, r3, r4
   2b516:	2b00      	cmp	r3, #0
   2b518:	da09      	bge.n	2b52e <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
   2b51a:	2901      	cmp	r1, #1
   2b51c:	f174 0300 	sbcs.w	r3, r4, #0
   2b520:	bfbc      	itt	lt
   2b522:	2101      	movlt	r1, #1
   2b524:	2400      	movlt	r4, #0
   2b526:	f111 39ff 	adds.w	r9, r1, #4294967295	; 0xffffffff
   2b52a:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   2b52e:	4630      	mov	r0, r6
   2b530:	f006 fb44 	bl	31bbc <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   2b534:	2300      	movs	r3, #0
   2b536:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
   2b538:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2b53c:	464a      	mov	r2, r9
   2b53e:	4643      	mov	r3, r8
   2b540:	4630      	mov	r0, r6
   2b542:	4903      	ldr	r1, [pc, #12]	; (2b550 <z_impl_k_timer_start+0xa0>)
		     duration);
}
   2b544:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2b548:	f7ff be7e 	b.w	2b248 <z_add_timeout>
}
   2b54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b550:	0002b425 	.word	0x0002b425

0002b554 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   2b554:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2b558:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   2b55a:	4b29      	ldr	r3, [pc, #164]	; (2b600 <z_impl_k_poll+0xac>)
   2b55c:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   2b55e:	2301      	movs	r3, #1
   2b560:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   2b564:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   2b568:	ea52 0305 	orrs.w	r3, r2, r5
{
   2b56c:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   2b56e:	bf0c      	ite	eq
   2b570:	2301      	moveq	r3, #1
   2b572:	2300      	movne	r3, #0
   2b574:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   2b578:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   2b57a:	f006 fbec 	bl	31d56 <register_events>
   2b57e:	4681      	mov	r9, r0
	__asm__ volatile(
   2b580:	f04f 0320 	mov.w	r3, #32
   2b584:	f3ef 8a11 	mrs	sl, BASEPRI
   2b588:	f383 8812 	msr	BASEPRI_MAX, r3
   2b58c:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   2b590:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   2b594:	b964      	cbnz	r4, 2b5b0 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   2b596:	4601      	mov	r1, r0
   2b598:	4652      	mov	r2, sl
   2b59a:	4640      	mov	r0, r8
   2b59c:	f006 fcac 	bl	31ef8 <clear_event_registrations>
	__asm__ volatile(
   2b5a0:	f38a 8811 	msr	BASEPRI, sl
   2b5a4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   2b5a8:	4620      	mov	r0, r4
   2b5aa:	b002      	add	sp, #8
   2b5ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   2b5b0:	2300      	movs	r3, #0
   2b5b2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2b5b6:	ea56 0305 	orrs.w	r3, r6, r5
   2b5ba:	d106      	bne.n	2b5ca <z_impl_k_poll+0x76>
   2b5bc:	f38a 8811 	msr	BASEPRI, sl
   2b5c0:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   2b5c4:	f06f 040a 	mvn.w	r4, #10
   2b5c8:	e7ee      	b.n	2b5a8 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2b5ca:	e9cd 6500 	strd	r6, r5, [sp]
   2b5ce:	4a0d      	ldr	r2, [pc, #52]	; (2b604 <z_impl_k_poll+0xb0>)
   2b5d0:	480d      	ldr	r0, [pc, #52]	; (2b608 <z_impl_k_poll+0xb4>)
   2b5d2:	4651      	mov	r1, sl
   2b5d4:	f7ff fc02 	bl	2addc <z_pend_curr>
   2b5d8:	4604      	mov	r4, r0
	__asm__ volatile(
   2b5da:	f04f 0320 	mov.w	r3, #32
   2b5de:	f3ef 8511 	mrs	r5, BASEPRI
   2b5e2:	f383 8812 	msr	BASEPRI_MAX, r3
   2b5e6:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   2b5ea:	462a      	mov	r2, r5
   2b5ec:	4649      	mov	r1, r9
   2b5ee:	4640      	mov	r0, r8
   2b5f0:	f006 fc82 	bl	31ef8 <clear_event_registrations>
	__asm__ volatile(
   2b5f4:	f385 8811 	msr	BASEPRI, r5
   2b5f8:	f3bf 8f6f 	isb	sy
	return swap_rc;
   2b5fc:	e7d4      	b.n	2b5a8 <z_impl_k_poll+0x54>
   2b5fe:	bf00      	nop
   2b600:	20003250 	.word	0x20003250
   2b604:	20000924 	.word	0x20000924
   2b608:	20003840 	.word	0x20003840

0002b60c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   2b60c:	b538      	push	{r3, r4, r5, lr}
   2b60e:	4603      	mov	r3, r0
	__asm__ volatile(
   2b610:	f04f 0220 	mov.w	r2, #32
   2b614:	f3ef 8511 	mrs	r5, BASEPRI
   2b618:	f382 8812 	msr	BASEPRI_MAX, r2
   2b61c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   2b620:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   2b622:	2101      	movs	r1, #1
   2b624:	6081      	str	r1, [r0, #8]
	return list->head == list;
   2b626:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   2b628:	4283      	cmp	r3, r0
   2b62a:	d106      	bne.n	2b63a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   2b62c:	f385 8811 	msr	BASEPRI, r5
   2b630:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   2b634:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   2b636:	4620      	mov	r0, r4
   2b638:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   2b63a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2b63e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2b640:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2b642:	2300      	movs	r3, #0
	node->prev = NULL;
   2b644:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2b648:	f006 fbfc 	bl	31e44 <signal_poll_event>
	z_reschedule(&lock, key);
   2b64c:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2b64e:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   2b650:	4801      	ldr	r0, [pc, #4]	; (2b658 <_flash_used+0x1c>)
   2b652:	f7ff fa6f 	bl	2ab34 <z_reschedule>
	return rc;
   2b656:	e7ee      	b.n	2b636 <z_impl_k_poll_signal_raise+0x2a>
   2b658:	20003840 	.word	0x20003840

0002b65c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   2b65c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2b65e:	4606      	mov	r6, r0
   2b660:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   2b662:	f005 ffb8 	bl	315d6 <k_is_in_isr>
   2b666:	b978      	cbnz	r0, 2b688 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   2b668:	4b0b      	ldr	r3, [pc, #44]	; (2b698 <z_thread_aligned_alloc+0x3c>)
   2b66a:	689b      	ldr	r3, [r3, #8]
   2b66c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   2b66e:	b17c      	cbz	r4, 2b690 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   2b670:	1d2a      	adds	r2, r5, #4
   2b672:	d209      	bcs.n	2b688 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   2b674:	2000      	movs	r0, #0
   2b676:	2100      	movs	r1, #0
   2b678:	e9cd 0100 	strd	r0, r1, [sp]
   2b67c:	f046 0104 	orr.w	r1, r6, #4
   2b680:	4620      	mov	r0, r4
   2b682:	f005 ff21 	bl	314c8 <k_heap_aligned_alloc>
	if (mem == NULL) {
   2b686:	b908      	cbnz	r0, 2b68c <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   2b688:	2400      	movs	r4, #0
	}

	return ret;
   2b68a:	e001      	b.n	2b690 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   2b68c:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   2b68e:	1d04      	adds	r4, r0, #4
}
   2b690:	4620      	mov	r0, r4
   2b692:	b002      	add	sp, #8
   2b694:	bd70      	pop	{r4, r5, r6, pc}
   2b696:	bf00      	nop
   2b698:	20003250 	.word	0x20003250

0002b69c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   2b69c:	4a02      	ldr	r2, [pc, #8]	; (2b6a8 <boot_banner+0xc>)
   2b69e:	4903      	ldr	r1, [pc, #12]	; (2b6ac <boot_banner+0x10>)
   2b6a0:	4803      	ldr	r0, [pc, #12]	; (2b6b0 <boot_banner+0x14>)
   2b6a2:	f000 b97a 	b.w	2b99a <printk>
   2b6a6:	bf00      	nop
   2b6a8:	00034348 	.word	0x00034348
   2b6ac:	00036828 	.word	0x00036828
   2b6b0:	00036849 	.word	0x00036849

0002b6b4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2b6b4:	4770      	bx	lr

0002b6b6 <write_without_rsp_vnd>:
{
   2b6b6:	b570      	push	{r4, r5, r6, lr}
   2b6b8:	461c      	mov	r4, r3
	if (!(flags & BT_GATT_WRITE_FLAG_CMD)) {
   2b6ba:	f89d 3014 	ldrb.w	r3, [sp, #20]
{
   2b6be:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   2b6c2:	460d      	mov	r5, r1
	if (!(flags & BT_GATT_WRITE_FLAG_CMD)) {
   2b6c4:	079b      	lsls	r3, r3, #30
	uint8_t *value = attr->user_data;
   2b6c6:	68ee      	ldr	r6, [r5, #12]
{
   2b6c8:	4611      	mov	r1, r2
	if (!(flags & BT_GATT_WRITE_FLAG_CMD)) {
   2b6ca:	d50a      	bpl.n	2b6e2 <write_without_rsp_vnd+0x2c>
	if (offset + len > VND_MAX_LEN) {
   2b6cc:	1905      	adds	r5, r0, r4
   2b6ce:	2d14      	cmp	r5, #20
   2b6d0:	dc0a      	bgt.n	2b6e8 <write_without_rsp_vnd+0x32>
	memcpy(value + offset, buf, len);
   2b6d2:	4622      	mov	r2, r4
   2b6d4:	4430      	add	r0, r6
   2b6d6:	f002 fca8 	bl	2e02a <memcpy>
	value[offset + len] = 0;
   2b6da:	2300      	movs	r3, #0
   2b6dc:	5573      	strb	r3, [r6, r5]
}
   2b6de:	4620      	mov	r0, r4
   2b6e0:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_WRITE_REQ_REJECTED);
   2b6e2:	f06f 04fb 	mvn.w	r4, #251	; 0xfb
   2b6e6:	e7fa      	b.n	2b6de <write_without_rsp_vnd+0x28>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2b6e8:	f06f 0406 	mvn.w	r4, #6
   2b6ec:	e7f7      	b.n	2b6de <write_without_rsp_vnd+0x28>

0002b6ee <write_signed>:
{
   2b6ee:	b538      	push	{r3, r4, r5, lr}
   2b6f0:	460c      	mov	r4, r1
   2b6f2:	f8bd 0010 	ldrh.w	r0, [sp, #16]
	uint8_t *value = attr->user_data;
   2b6f6:	68e5      	ldr	r5, [r4, #12]
	if (offset + len > sizeof(signed_value)) {
   2b6f8:	461c      	mov	r4, r3
   2b6fa:	18c3      	adds	r3, r0, r3
   2b6fc:	2b04      	cmp	r3, #4
{
   2b6fe:	4611      	mov	r1, r2
	if (offset + len > sizeof(signed_value)) {
   2b700:	dc05      	bgt.n	2b70e <write_signed+0x20>
	memcpy(value + offset, buf, len);
   2b702:	4622      	mov	r2, r4
   2b704:	4428      	add	r0, r5
   2b706:	f002 fc90 	bl	2e02a <memcpy>
}
   2b70a:	4620      	mov	r0, r4
   2b70c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2b70e:	f06f 0406 	mvn.w	r4, #6
   2b712:	e7fa      	b.n	2b70a <write_signed+0x1c>

0002b714 <write_long_vnd>:
{
   2b714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b716:	461c      	mov	r4, r3
   2b718:	f89d 301c 	ldrb.w	r3, [sp, #28]
   2b71c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
   2b720:	f013 0501 	ands.w	r5, r3, #1
{
   2b724:	460e      	mov	r6, r1
   2b726:	4611      	mov	r1, r2
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
   2b728:	d10a      	bne.n	2b740 <write_long_vnd+0x2c>
	if (offset + len > VND_LONG_MAX_LEN) {
   2b72a:	1907      	adds	r7, r0, r4
   2b72c:	2f4a      	cmp	r7, #74	; 0x4a
   2b72e:	dc09      	bgt.n	2b744 <write_long_vnd+0x30>
	uint8_t *value = attr->user_data;
   2b730:	68f6      	ldr	r6, [r6, #12]
	memcpy(value + offset, buf, len);
   2b732:	4622      	mov	r2, r4
   2b734:	4430      	add	r0, r6
   2b736:	f002 fc78 	bl	2e02a <memcpy>
	value[offset + len] = 0;
   2b73a:	55f5      	strb	r5, [r6, r7]
}
   2b73c:	4620      	mov	r0, r4
   2b73e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   2b740:	2400      	movs	r4, #0
   2b742:	e7fb      	b.n	2b73c <write_long_vnd+0x28>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2b744:	f06f 0406 	mvn.w	r4, #6
   2b748:	e7f8      	b.n	2b73c <write_long_vnd+0x28>

0002b74a <write_vnd>:
{
   2b74a:	b570      	push	{r4, r5, r6, lr}
   2b74c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   2b750:	460c      	mov	r4, r1
	if (offset + len > VND_MAX_LEN) {
   2b752:	18c5      	adds	r5, r0, r3
   2b754:	2d14      	cmp	r5, #20
	uint8_t *value = attr->user_data;
   2b756:	68e6      	ldr	r6, [r4, #12]
{
   2b758:	4611      	mov	r1, r2
	if (offset + len > VND_MAX_LEN) {
   2b75a:	461c      	mov	r4, r3
   2b75c:	dc07      	bgt.n	2b76e <write_vnd+0x24>
	memcpy(value + offset, buf, len);
   2b75e:	461a      	mov	r2, r3
   2b760:	4430      	add	r0, r6
   2b762:	f002 fc62 	bl	2e02a <memcpy>
	value[offset + len] = 0;
   2b766:	2300      	movs	r3, #0
   2b768:	5573      	strb	r3, [r6, r5]
}
   2b76a:	4620      	mov	r0, r4
   2b76c:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2b76e:	f06f 0406 	mvn.w	r4, #6
   2b772:	e7fa      	b.n	2b76a <write_vnd+0x20>

0002b774 <read_signed>:
{
   2b774:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   2b776:	2404      	movs	r4, #4
   2b778:	9402      	str	r4, [sp, #8]
   2b77a:	68cc      	ldr	r4, [r1, #12]
   2b77c:	9401      	str	r4, [sp, #4]
   2b77e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   2b782:	9400      	str	r4, [sp, #0]
   2b784:	f004 f906 	bl	2f994 <bt_gatt_attr_read>
}
   2b788:	b004      	add	sp, #16
   2b78a:	bd10      	pop	{r4, pc}

0002b78c <read_vnd>:
{
   2b78c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	const char *value = attr->user_data;
   2b790:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   2b794:	4605      	mov	r5, r0
				 strlen(value));
   2b796:	4640      	mov	r0, r8
{
   2b798:	461f      	mov	r7, r3
   2b79a:	460c      	mov	r4, r1
   2b79c:	4616      	mov	r6, r2
				 strlen(value));
   2b79e:	f002 fc06 	bl	2dfae <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   2b7a2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2b7a6:	9300      	str	r3, [sp, #0]
   2b7a8:	b280      	uxth	r0, r0
   2b7aa:	e9cd 8001 	strd	r8, r0, [sp, #4]
   2b7ae:	463b      	mov	r3, r7
   2b7b0:	4632      	mov	r2, r6
   2b7b2:	4621      	mov	r1, r4
   2b7b4:	4628      	mov	r0, r5
   2b7b6:	f004 f8ed 	bl	2f994 <bt_gatt_attr_read>
}
   2b7ba:	b004      	add	sp, #16
   2b7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002b7c0 <ct_ccc_cfg_changed>:
}
   2b7c0:	4770      	bx	lr

0002b7c2 <read_ct>:
{
   2b7c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   2b7c4:	240a      	movs	r4, #10
   2b7c6:	9402      	str	r4, [sp, #8]
   2b7c8:	68cc      	ldr	r4, [r1, #12]
   2b7ca:	9401      	str	r4, [sp, #4]
   2b7cc:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   2b7d0:	9400      	str	r4, [sp, #0]
   2b7d2:	f004 f8df 	bl	2f994 <bt_gatt_attr_read>
}
   2b7d6:	b004      	add	sp, #16
   2b7d8:	bd10      	pop	{r4, pc}

0002b7da <cbpprintf_external>:
{
   2b7da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b7de:	4607      	mov	r7, r0
   2b7e0:	460e      	mov	r6, r1
   2b7e2:	4690      	mov	r8, r2
	if (buf == NULL) {
   2b7e4:	461d      	mov	r5, r3
   2b7e6:	b30b      	cbz	r3, 2b82c <cbpprintf_external+0x52>
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
   2b7e8:	7818      	ldrb	r0, [r3, #0]
	ros_nbr   = buf[2];
   2b7ea:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = buf[1];
   2b7ec:	f893 a001 	ldrb.w	sl, [r3, #1]
	rws_nbr   = buf[3];
   2b7f0:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
   2b7f2:	441c      	add	r4, r3
   2b7f4:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   2b7f8:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
   2b7fa:	f04f 0900 	mov.w	r9, #0
   2b7fe:	45d1      	cmp	r9, sl
   2b800:	d308      	bcc.n	2b814 <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
   2b802:	686a      	ldr	r2, [r5, #4]
   2b804:	f105 0308 	add.w	r3, r5, #8
   2b808:	4641      	mov	r1, r8
   2b80a:	4638      	mov	r0, r7
   2b80c:	46b4      	mov	ip, r6
}
   2b80e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   2b812:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   2b814:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   2b818:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
   2b81c:	4620      	mov	r0, r4
   2b81e:	f002 fbc6 	bl	2dfae <strlen>
   2b822:	3001      	adds	r0, #1
   2b824:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   2b826:	f109 0901 	add.w	r9, r9, #1
   2b82a:	e7e8      	b.n	2b7fe <cbpprintf_external+0x24>
}
   2b82c:	f06f 0015 	mvn.w	r0, #21
   2b830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002b834 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   2b834:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   2b836:	2364      	movs	r3, #100	; 0x64
{
   2b838:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   2b83a:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   2b83c:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   2b83e:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   2b842:	b111      	cbz	r1, 2b84a <u8_to_dec+0x16>
   2b844:	3d01      	subs	r5, #1
   2b846:	d101      	bne.n	2b84c <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   2b848:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   2b84a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   2b84c:	429a      	cmp	r2, r3
		digit = value / divisor;
   2b84e:	fbb2 f7f3 	udiv	r7, r2, r3
   2b852:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   2b854:	d202      	bcs.n	2b85c <u8_to_dec+0x28>
   2b856:	2b01      	cmp	r3, #1
   2b858:	d000      	beq.n	2b85c <u8_to_dec+0x28>
   2b85a:	b130      	cbz	r0, 2b86a <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   2b85c:	3630      	adds	r6, #48	; 0x30
			buflen--;
   2b85e:	3901      	subs	r1, #1
			num_digits++;
   2b860:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   2b862:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   2b866:	b2c9      	uxtb	r1, r1
			num_digits++;
   2b868:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   2b86a:	fb03 2217 	mls	r2, r3, r7, r2
   2b86e:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   2b870:	fbb3 f3fc 	udiv	r3, r3, ip
   2b874:	e7e5      	b.n	2b842 <u8_to_dec+0xe>

0002b876 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   2b876:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   2b87a:	b2db      	uxtb	r3, r3
   2b87c:	2b09      	cmp	r3, #9
   2b87e:	d802      	bhi.n	2b886 <char2hex+0x10>
		*x = c - '0';
   2b880:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   2b882:	2000      	movs	r0, #0
   2b884:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   2b886:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   2b88a:	2b05      	cmp	r3, #5
   2b88c:	d802      	bhi.n	2b894 <char2hex+0x1e>
		*x = c - 'a' + 10;
   2b88e:	3857      	subs	r0, #87	; 0x57
   2b890:	7008      	strb	r0, [r1, #0]
   2b892:	e7f6      	b.n	2b882 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   2b894:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   2b898:	2b05      	cmp	r3, #5
   2b89a:	d801      	bhi.n	2b8a0 <char2hex+0x2a>
		*x = c - 'A' + 10;
   2b89c:	3837      	subs	r0, #55	; 0x37
   2b89e:	e7f7      	b.n	2b890 <char2hex+0x1a>
		return -EINVAL;
   2b8a0:	f06f 0015 	mvn.w	r0, #21
}
   2b8a4:	4770      	bx	lr

0002b8a6 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   2b8a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2b8a8:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   2b8aa:	f001 0001 	and.w	r0, r1, #1
   2b8ae:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   2b8b2:	429d      	cmp	r5, r3
   2b8b4:	ea4f 0651 	mov.w	r6, r1, lsr #1
   2b8b8:	d903      	bls.n	2b8c2 <hex2bin+0x1c>
		return 0;
   2b8ba:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   2b8bc:	4628      	mov	r0, r5
   2b8be:	b003      	add	sp, #12
   2b8c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   2b8c2:	b158      	cbz	r0, 2b8dc <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   2b8c4:	7820      	ldrb	r0, [r4, #0]
   2b8c6:	f10d 0107 	add.w	r1, sp, #7
   2b8ca:	f7ff ffd4 	bl	2b876 <char2hex>
   2b8ce:	2800      	cmp	r0, #0
   2b8d0:	dbf3      	blt.n	2b8ba <hex2bin+0x14>
		buf[0] = dec;
   2b8d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2b8d6:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   2b8da:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2b8dc:	3401      	adds	r4, #1
   2b8de:	4416      	add	r6, r2
   2b8e0:	42b2      	cmp	r2, r6
   2b8e2:	d0eb      	beq.n	2b8bc <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   2b8e4:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   2b8e8:	f10d 0107 	add.w	r1, sp, #7
   2b8ec:	f7ff ffc3 	bl	2b876 <char2hex>
   2b8f0:	2800      	cmp	r0, #0
   2b8f2:	dbe2      	blt.n	2b8ba <hex2bin+0x14>
		buf[i] = dec << 4;
   2b8f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2b8f8:	011b      	lsls	r3, r3, #4
   2b8fa:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   2b8fc:	f814 0b02 	ldrb.w	r0, [r4], #2
   2b900:	f7ff ffb9 	bl	2b876 <char2hex>
   2b904:	2800      	cmp	r0, #0
   2b906:	dbd8      	blt.n	2b8ba <hex2bin+0x14>
		buf[i] += dec;
   2b908:	7813      	ldrb	r3, [r2, #0]
   2b90a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   2b90e:	440b      	add	r3, r1
   2b910:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2b914:	e7e4      	b.n	2b8e0 <hex2bin+0x3a>

0002b916 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   2b916:	4603      	mov	r3, r0
   2b918:	b140      	cbz	r0, 2b92c <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2b91a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2b91c:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   2b920:	2a02      	cmp	r2, #2
   2b922:	d006      	beq.n	2b932 <sys_notify_validate+0x1c>
   2b924:	2a03      	cmp	r2, #3
   2b926:	d004      	beq.n	2b932 <sys_notify_validate+0x1c>
   2b928:	2a01      	cmp	r2, #1
   2b92a:	d005      	beq.n	2b938 <sys_notify_validate+0x22>
		return -EINVAL;
   2b92c:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   2b930:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2b932:	681a      	ldr	r2, [r3, #0]
   2b934:	2a00      	cmp	r2, #0
   2b936:	d0f9      	beq.n	2b92c <sys_notify_validate+0x16>
		notify->result = 0;
   2b938:	2000      	movs	r0, #0
   2b93a:	6098      	str	r0, [r3, #8]
   2b93c:	4770      	bx	lr

0002b93e <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2b93e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2b940:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   2b944:	2a02      	cmp	r2, #2
{
   2b946:	b510      	push	{r4, lr}
   2b948:	4603      	mov	r3, r0
	notify->result = res;
   2b94a:	6081      	str	r1, [r0, #8]
	switch (method) {
   2b94c:	d00a      	beq.n	2b964 <sys_notify_finalize+0x26>
   2b94e:	2a03      	cmp	r2, #3
   2b950:	d10b      	bne.n	2b96a <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   2b952:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   2b954:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   2b956:	2200      	movs	r2, #0
   2b958:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   2b95a:	b108      	cbz	r0, 2b960 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   2b95c:	f7ff fe56 	bl	2b60c <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   2b960:	4620      	mov	r0, r4
   2b962:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   2b964:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   2b966:	2400      	movs	r4, #0
		break;
   2b968:	e7f5      	b.n	2b956 <sys_notify_finalize+0x18>
	switch (method) {
   2b96a:	2400      	movs	r4, #0
   2b96c:	4620      	mov	r0, r4
   2b96e:	e7f2      	b.n	2b956 <sys_notify_finalize+0x18>

0002b970 <arch_printk_char_out>:
}
   2b970:	2000      	movs	r0, #0
   2b972:	4770      	bx	lr

0002b974 <str_out>:
{
   2b974:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2b976:	688a      	ldr	r2, [r1, #8]
   2b978:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   2b97a:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2b97c:	b114      	cbz	r4, 2b984 <str_out+0x10>
   2b97e:	684b      	ldr	r3, [r1, #4]
   2b980:	4293      	cmp	r3, r2
   2b982:	dc01      	bgt.n	2b988 <str_out+0x14>
		ctx->count++;
   2b984:	608d      	str	r5, [r1, #8]
}
   2b986:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2b988:	3b01      	subs	r3, #1
   2b98a:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2b98c:	bf08      	it	eq
   2b98e:	2200      	moveq	r2, #0
   2b990:	608d      	str	r5, [r1, #8]
   2b992:	bf0c      	ite	eq
   2b994:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2b996:	54a0      	strbne	r0, [r4, r2]
   2b998:	e7f5      	b.n	2b986 <str_out+0x12>

0002b99a <printk>:
{
   2b99a:	b40f      	push	{r0, r1, r2, r3}
   2b99c:	b507      	push	{r0, r1, r2, lr}
   2b99e:	a904      	add	r1, sp, #16
   2b9a0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2b9a4:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   2b9a6:	f7e2 fc61 	bl	e26c <vprintk>
}
   2b9aa:	b003      	add	sp, #12
   2b9ac:	f85d eb04 	ldr.w	lr, [sp], #4
   2b9b0:	b004      	add	sp, #16
   2b9b2:	4770      	bx	lr

0002b9b4 <snprintk>:
{
   2b9b4:	b40c      	push	{r2, r3}
   2b9b6:	b507      	push	{r0, r1, r2, lr}
   2b9b8:	ab04      	add	r3, sp, #16
   2b9ba:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2b9be:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2b9c0:	f7e2 fc62 	bl	e288 <vsnprintk>
}
   2b9c4:	b003      	add	sp, #12
   2b9c6:	f85d eb04 	ldr.w	lr, [sp], #4
   2b9ca:	b002      	add	sp, #8
   2b9cc:	4770      	bx	lr

0002b9ce <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2b9ce:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   2b9d0:	f013 0307 	ands.w	r3, r3, #7
   2b9d4:	d105      	bne.n	2b9e2 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   2b9d6:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   2b9d8:	2b00      	cmp	r3, #0
   2b9da:	bf0c      	ite	eq
   2b9dc:	2000      	moveq	r0, #0
   2b9de:	2003      	movne	r0, #3
   2b9e0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2b9e2:	2b02      	cmp	r3, #2
   2b9e4:	d105      	bne.n	2b9f2 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   2b9e6:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   2b9e8:	2b00      	cmp	r3, #0
   2b9ea:	bf14      	ite	ne
   2b9ec:	2000      	movne	r0, #0
   2b9ee:	2004      	moveq	r0, #4
   2b9f0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2b9f2:	2b01      	cmp	r3, #1
   2b9f4:	d105      	bne.n	2ba02 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2b9f6:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   2b9f8:	2b00      	cmp	r3, #0
   2b9fa:	bf0c      	ite	eq
   2b9fc:	2000      	moveq	r0, #0
   2b9fe:	2005      	movne	r0, #5
   2ba00:	4770      	bx	lr
	int evt = EVT_NOP;
   2ba02:	2000      	movs	r0, #0
}
   2ba04:	4770      	bx	lr

0002ba06 <notify_one>:
{
   2ba06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ba0a:	460d      	mov	r5, r1
   2ba0c:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2ba0e:	4619      	mov	r1, r3
   2ba10:	1d28      	adds	r0, r5, #4
{
   2ba12:	4690      	mov	r8, r2
   2ba14:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2ba16:	f7ff ff92 	bl	2b93e <sys_notify_finalize>
	if (cb) {
   2ba1a:	4604      	mov	r4, r0
   2ba1c:	b138      	cbz	r0, 2ba2e <notify_one+0x28>
		cb(mgr, cli, state, res);
   2ba1e:	4633      	mov	r3, r6
   2ba20:	4642      	mov	r2, r8
   2ba22:	4629      	mov	r1, r5
   2ba24:	4638      	mov	r0, r7
   2ba26:	46a4      	mov	ip, r4
}
   2ba28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   2ba2c:	4760      	bx	ip
}
   2ba2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002ba32 <transition_complete>:
{
   2ba32:	b410      	push	{r4}
	__asm__ volatile(
   2ba34:	f04f 0420 	mov.w	r4, #32
   2ba38:	f3ef 8211 	mrs	r2, BASEPRI
   2ba3c:	f384 8812 	msr	BASEPRI_MAX, r4
   2ba40:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   2ba44:	6141      	str	r1, [r0, #20]
}
   2ba46:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   2ba48:	2101      	movs	r1, #1
   2ba4a:	f7e2 bc31 	b.w	e2b0 <process_event>

0002ba4e <validate_args>:
{
   2ba4e:	b510      	push	{r4, lr}
   2ba50:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2ba52:	b140      	cbz	r0, 2ba66 <validate_args+0x18>
   2ba54:	b139      	cbz	r1, 2ba66 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   2ba56:	1d08      	adds	r0, r1, #4
   2ba58:	f7ff ff5d 	bl	2b916 <sys_notify_validate>
	if ((rv == 0)
   2ba5c:	b928      	cbnz	r0, 2ba6a <validate_args+0x1c>
	    && ((cli->notify.flags
   2ba5e:	68a3      	ldr	r3, [r4, #8]
   2ba60:	f033 0303 	bics.w	r3, r3, #3
   2ba64:	d001      	beq.n	2ba6a <validate_args+0x1c>
		rv = -EINVAL;
   2ba66:	f06f 0015 	mvn.w	r0, #21
}
   2ba6a:	bd10      	pop	{r4, pc}

0002ba6c <onoff_manager_init>:
{
   2ba6c:	b538      	push	{r3, r4, r5, lr}
   2ba6e:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2ba70:	4605      	mov	r5, r0
   2ba72:	b158      	cbz	r0, 2ba8c <onoff_manager_init+0x20>
	    || (transitions == NULL)
   2ba74:	b151      	cbz	r1, 2ba8c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   2ba76:	680b      	ldr	r3, [r1, #0]
   2ba78:	b143      	cbz	r3, 2ba8c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   2ba7a:	684b      	ldr	r3, [r1, #4]
   2ba7c:	b133      	cbz	r3, 2ba8c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2ba7e:	221c      	movs	r2, #28
   2ba80:	2100      	movs	r1, #0
   2ba82:	f002 fadd 	bl	2e040 <memset>
   2ba86:	612c      	str	r4, [r5, #16]
	return 0;
   2ba88:	2000      	movs	r0, #0
}
   2ba8a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2ba8c:	f06f 0015 	mvn.w	r0, #21
   2ba90:	e7fb      	b.n	2ba8a <onoff_manager_init+0x1e>

0002ba92 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   2ba92:	b570      	push	{r4, r5, r6, lr}
   2ba94:	4604      	mov	r4, r0
   2ba96:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   2ba98:	f7ff ffd9 	bl	2ba4e <validate_args>

	if (rv < 0) {
   2ba9c:	1e05      	subs	r5, r0, #0
   2ba9e:	db31      	blt.n	2bb04 <onoff_request+0x72>
   2baa0:	f04f 0320 	mov.w	r3, #32
   2baa4:	f3ef 8111 	mrs	r1, BASEPRI
   2baa8:	f383 8812 	msr	BASEPRI_MAX, r3
   2baac:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   2bab0:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2bab2:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   2bab4:	f64f 75ff 	movw	r5, #65535	; 0xffff
   2bab8:	42ab      	cmp	r3, r5
   2baba:	f000 0207 	and.w	r2, r0, #7
   2babe:	d02e      	beq.n	2bb1e <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   2bac0:	2a02      	cmp	r2, #2
   2bac2:	d10e      	bne.n	2bae2 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   2bac4:	3301      	adds	r3, #1
   2bac6:	8363      	strh	r3, [r4, #26]
	rv = state;
   2bac8:	4615      	mov	r5, r2
		notify = true;
   2baca:	2301      	movs	r3, #1
	__asm__ volatile(
   2bacc:	f381 8811 	msr	BASEPRI, r1
   2bad0:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   2bad4:	b1b3      	cbz	r3, 2bb04 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   2bad6:	2300      	movs	r3, #0
   2bad8:	4631      	mov	r1, r6
   2bada:	4620      	mov	r0, r4
   2badc:	f7ff ff93 	bl	2ba06 <notify_one>
   2bae0:	e010      	b.n	2bb04 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   2bae2:	0783      	lsls	r3, r0, #30
   2bae4:	d001      	beq.n	2baea <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   2bae6:	2a06      	cmp	r2, #6
   2bae8:	d10e      	bne.n	2bb08 <onoff_request+0x76>
	parent->next = child;
   2baea:	2300      	movs	r3, #0
   2baec:	6033      	str	r3, [r6, #0]
	return list->tail;
   2baee:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   2baf0:	b993      	cbnz	r3, 2bb18 <onoff_request+0x86>
	list->head = node;
   2baf2:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   2baf6:	4615      	mov	r5, r2
   2baf8:	b962      	cbnz	r2, 2bb14 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   2bafa:	460a      	mov	r2, r1
   2bafc:	4620      	mov	r0, r4
   2bafe:	2102      	movs	r1, #2
   2bb00:	f7e2 fbd6 	bl	e2b0 <process_event>
		}
	}

	return rv;
}
   2bb04:	4628      	mov	r0, r5
   2bb06:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   2bb08:	2a05      	cmp	r2, #5
   2bb0a:	bf0c      	ite	eq
   2bb0c:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   2bb10:	f06f 0504 	mvnne.w	r5, #4
   2bb14:	2300      	movs	r3, #0
   2bb16:	e7d9      	b.n	2bacc <onoff_request+0x3a>
	parent->next = child;
   2bb18:	601e      	str	r6, [r3, #0]
	list->tail = node;
   2bb1a:	6066      	str	r6, [r4, #4]
}
   2bb1c:	e7eb      	b.n	2baf6 <onoff_request+0x64>
		rv = -EAGAIN;
   2bb1e:	f06f 050a 	mvn.w	r5, #10
   2bb22:	e7f7      	b.n	2bb14 <onoff_request+0x82>

0002bb24 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   2bb24:	b510      	push	{r4, lr}
	__asm__ volatile(
   2bb26:	f04f 0320 	mov.w	r3, #32
   2bb2a:	f3ef 8211 	mrs	r2, BASEPRI
   2bb2e:	f383 8812 	msr	BASEPRI_MAX, r3
   2bb32:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2bb36:	8b04      	ldrh	r4, [r0, #24]
   2bb38:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   2bb3c:	2c02      	cmp	r4, #2
   2bb3e:	d00a      	beq.n	2bb56 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   2bb40:	2c01      	cmp	r4, #1
   2bb42:	bf0c      	ite	eq
   2bb44:	f06f 0004 	mvneq.w	r0, #4
   2bb48:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   2bb4c:	f382 8811 	msr	BASEPRI, r2
   2bb50:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   2bb54:	e008      	b.n	2bb68 <onoff_release+0x44>
	mgr->refs -= 1U;
   2bb56:	8b43      	ldrh	r3, [r0, #26]
   2bb58:	3b01      	subs	r3, #1
   2bb5a:	b29b      	uxth	r3, r3
   2bb5c:	8343      	strh	r3, [r0, #26]
	if (stop) {
   2bb5e:	b923      	cbnz	r3, 2bb6a <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   2bb60:	4621      	mov	r1, r4
   2bb62:	f7e2 fba5 	bl	e2b0 <process_event>
	int rv = state;
   2bb66:	4620      	mov	r0, r4
}
   2bb68:	bd10      	pop	{r4, pc}
	int rv = state;
   2bb6a:	4620      	mov	r0, r4
   2bb6c:	e7ee      	b.n	2bb4c <onoff_release+0x28>

0002bb6e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2bb6e:	4604      	mov	r4, r0
   2bb70:	b508      	push	{r3, lr}
   2bb72:	4608      	mov	r0, r1
   2bb74:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   2bb76:	461a      	mov	r2, r3
   2bb78:	47a0      	blx	r4
	return z_impl_z_current_get();
   2bb7a:	f7ff fa87 	bl	2b08c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   2bb7e:	f7e5 fad9 	bl	11134 <z_impl_k_thread_abort>

0002bb82 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   2bb82:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   2bb86:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   2bb88:	0840      	lsrs	r0, r0, #1
   2bb8a:	4770      	bx	lr

0002bb8c <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   2bb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bb8e:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   2bb90:	f7ff fff7 	bl	2bb82 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   2bb94:	fab0 f080 	clz	r0, r0
   2bb98:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   2bb9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   2bba0:	00ca      	lsls	r2, r1, #3
   2bba2:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   2bba6:	1d17      	adds	r7, r2, #4
{
   2bba8:	460c      	mov	r4, r1
   2bbaa:	3206      	adds	r2, #6
   2bbac:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   2bbae:	b956      	cbnz	r6, 2bbc6 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   2bbb0:	2101      	movs	r1, #1
   2bbb2:	fa01 f000 	lsl.w	r0, r1, r0
   2bbb6:	68d9      	ldr	r1, [r3, #12]
   2bbb8:	4301      	orrs	r1, r0
   2bbba:	60d9      	str	r1, [r3, #12]
		b->next = c;
   2bbbc:	f8cc 4010 	str.w	r4, [ip, #16]
   2bbc0:	53dd      	strh	r5, [r3, r7]
   2bbc2:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   2bbc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   2bbc6:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   2bbc8:	3104      	adds	r1, #4
   2bbca:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   2bbcc:	53d8      	strh	r0, [r3, r7]
   2bbce:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2bbd2:	529e      	strh	r6, [r3, r2]
   2bbd4:	80c5      	strh	r5, [r0, #6]
   2bbd6:	525d      	strh	r5, [r3, r1]
   2bbd8:	e7f4      	b.n	2bbc4 <free_list_add+0x38>

0002bbda <free_list_remove_bidx>:
{
   2bbda:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   2bbdc:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   2bbe0:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   2bbe2:	4299      	cmp	r1, r3
   2bbe4:	f102 0104 	add.w	r1, r2, #4
   2bbe8:	d10a      	bne.n	2bc00 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   2bbea:	2301      	movs	r3, #1
   2bbec:	fa03 f202 	lsl.w	r2, r3, r2
   2bbf0:	68c3      	ldr	r3, [r0, #12]
   2bbf2:	ea23 0302 	bic.w	r3, r3, r2
   2bbf6:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2bbf8:	2300      	movs	r3, #0
   2bbfa:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   2bbfe:	bd10      	pop	{r4, pc}
   2bc00:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   2bc02:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2bc06:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   2bc0a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2bc0e:	80cb      	strh	r3, [r1, #6]
   2bc10:	8082      	strh	r2, [r0, #4]
}
   2bc12:	e7f4      	b.n	2bbfe <free_list_remove_bidx+0x24>

0002bc14 <free_list_remove>:
{
   2bc14:	b508      	push	{r3, lr}
   2bc16:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2bc18:	f7ff ffb3 	bl	2bb82 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2bc1c:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   2bc20:	f1c2 021f 	rsb	r2, r2, #31
   2bc24:	4618      	mov	r0, r3
}
   2bc26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   2bc2a:	f7ff bfd6 	b.w	2bbda <free_list_remove_bidx>

0002bc2e <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   2bc2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2bc32:	fab1 f581 	clz	r5, r1
   2bc36:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   2bc3a:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   2bc3e:	4603      	mov	r3, r0
	if (b->next) {
   2bc40:	693a      	ldr	r2, [r7, #16]
{
   2bc42:	460e      	mov	r6, r1
	if (b->next) {
   2bc44:	b1c2      	cbz	r2, 2bc78 <alloc_chunk+0x4a>
   2bc46:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   2bc4a:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   2bc4c:	4618      	mov	r0, r3
   2bc4e:	4621      	mov	r1, r4
   2bc50:	f7ff ff97 	bl	2bb82 <chunk_size>
   2bc54:	42b0      	cmp	r0, r6
   2bc56:	d306      	bcc.n	2bc66 <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   2bc58:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   2bc5a:	4618      	mov	r0, r3
   2bc5c:	f7ff ffbd 	bl	2bbda <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   2bc60:	4620      	mov	r0, r4
   2bc62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   2bc66:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   2bc6a:	f1b8 0801 	subs.w	r8, r8, #1
   2bc6e:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   2bc70:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   2bc72:	d001      	beq.n	2bc78 <alloc_chunk+0x4a>
   2bc74:	4282      	cmp	r2, r0
   2bc76:	d1e8      	bne.n	2bc4a <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   2bc78:	f1c5 0220 	rsb	r2, r5, #32
   2bc7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2bc80:	4094      	lsls	r4, r2
   2bc82:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   2bc84:	4014      	ands	r4, r2
   2bc86:	d0eb      	beq.n	2bc60 <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   2bc88:	fa94 f2a4 	rbit	r2, r4
   2bc8c:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2bc90:	1d11      	adds	r1, r2, #4
   2bc92:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   2bc96:	4621      	mov	r1, r4
   2bc98:	e7df      	b.n	2bc5a <alloc_chunk+0x2c>

0002bc9a <merge_chunks>:
{
   2bc9a:	b538      	push	{r3, r4, r5, lr}
   2bc9c:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2bc9e:	f7ff ff70 	bl	2bb82 <chunk_size>
{
   2bca2:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2bca4:	4604      	mov	r4, r0
   2bca6:	4611      	mov	r1, r2
   2bca8:	4618      	mov	r0, r3
   2bcaa:	f7ff ff6a 	bl	2bb82 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   2bcae:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   2bcb2:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2bcb4:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   2bcb6:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   2bcb8:	4618      	mov	r0, r3
   2bcba:	f7ff ff62 	bl	2bb82 <chunk_size>
	void *cmem = &buf[c];
   2bcbe:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2bcc0:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   2bcc4:	bd38      	pop	{r3, r4, r5, pc}

0002bcc6 <split_chunks>:
{
   2bcc6:	b538      	push	{r3, r4, r5, lr}
   2bcc8:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   2bcca:	f7ff ff5a 	bl	2bb82 <chunk_size>
{
   2bcce:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   2bcd0:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   2bcd2:	1a51      	subs	r1, r2, r1
   2bcd4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   2bcd8:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2bcda:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   2bcdc:	8060      	strh	r0, [r4, #2]
   2bcde:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2bce2:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2bce4:	8044      	strh	r4, [r0, #2]
   2bce6:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   2bcea:	4618      	mov	r0, r3
   2bcec:	4611      	mov	r1, r2
   2bcee:	f7ff ff48 	bl	2bb82 <chunk_size>
	void *cmem = &buf[c];
   2bcf2:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2bcf4:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   2bcf8:	bd38      	pop	{r3, r4, r5, pc}

0002bcfa <free_chunk>:
{
   2bcfa:	b538      	push	{r3, r4, r5, lr}
   2bcfc:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   2bcfe:	f7ff ff40 	bl	2bb82 <chunk_size>
   2bd02:	460c      	mov	r4, r1
   2bd04:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   2bd06:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2bd0a:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   2bd0c:	07da      	lsls	r2, r3, #31
   2bd0e:	d40a      	bmi.n	2bd26 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   2bd10:	4628      	mov	r0, r5
   2bd12:	f7ff ff7f 	bl	2bc14 <free_list_remove>
	return c + chunk_size(h, c);
   2bd16:	4621      	mov	r1, r4
   2bd18:	4628      	mov	r0, r5
   2bd1a:	f7ff ff32 	bl	2bb82 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   2bd1e:	1822      	adds	r2, r4, r0
   2bd20:	4628      	mov	r0, r5
   2bd22:	f7ff ffba 	bl	2bc9a <merge_chunks>
		return ((uint16_t *)cmem)[f];
   2bd26:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2bd2a:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   2bd2c:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2bd30:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   2bd32:	07db      	lsls	r3, r3, #31
   2bd34:	d40c      	bmi.n	2bd50 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   2bd36:	4628      	mov	r0, r5
   2bd38:	f7ff ff6c 	bl	2bc14 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   2bd3c:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   2bd40:	4622      	mov	r2, r4
   2bd42:	1a61      	subs	r1, r4, r1
   2bd44:	4628      	mov	r0, r5
   2bd46:	f7ff ffa8 	bl	2bc9a <merge_chunks>
   2bd4a:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2bd4e:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   2bd50:	4621      	mov	r1, r4
   2bd52:	4628      	mov	r0, r5
}
   2bd54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   2bd58:	f7ff bf18 	b.w	2bb8c <free_list_add>

0002bd5c <sys_heap_free>:
	if (mem == NULL) {
   2bd5c:	b161      	cbz	r1, 2bd78 <sys_heap_free+0x1c>
   2bd5e:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2bd60:	3904      	subs	r1, #4
   2bd62:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   2bd64:	f021 0307 	bic.w	r3, r1, #7
   2bd68:	4403      	add	r3, r0
	free_chunk(h, c);
   2bd6a:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2bd6c:	885a      	ldrh	r2, [r3, #2]
   2bd6e:	f022 0201 	bic.w	r2, r2, #1
   2bd72:	805a      	strh	r2, [r3, #2]
   2bd74:	f7ff bfc1 	b.w	2bcfa <free_chunk>
}
   2bd78:	4770      	bx	lr

0002bd7a <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   2bd7a:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   2bd7c:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   2bd7e:	b909      	cbnz	r1, 2bd84 <sys_heap_alloc+0xa>
		return NULL;
   2bd80:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   2bd82:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   2bd84:	68ab      	ldr	r3, [r5, #8]
   2bd86:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   2bd8a:	d9f9      	bls.n	2bd80 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2bd8c:	310b      	adds	r1, #11
   2bd8e:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2bd90:	4621      	mov	r1, r4
   2bd92:	4628      	mov	r0, r5
   2bd94:	f7ff ff4b 	bl	2bc2e <alloc_chunk>
	if (c == 0U) {
   2bd98:	4606      	mov	r6, r0
   2bd9a:	2800      	cmp	r0, #0
   2bd9c:	d0f0      	beq.n	2bd80 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2bd9e:	4601      	mov	r1, r0
   2bda0:	4628      	mov	r0, r5
   2bda2:	f7ff feee 	bl	2bb82 <chunk_size>
   2bda6:	42a0      	cmp	r0, r4
   2bda8:	d907      	bls.n	2bdba <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   2bdaa:	1932      	adds	r2, r6, r4
   2bdac:	4628      	mov	r0, r5
   2bdae:	f7ff ff8a 	bl	2bcc6 <split_chunks>
		free_list_add(h, c + chunk_sz);
   2bdb2:	4611      	mov	r1, r2
   2bdb4:	4628      	mov	r0, r5
   2bdb6:	f7ff fee9 	bl	2bb8c <free_list_add>
	void *cmem = &buf[c];
   2bdba:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2bdbe:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2bdc0:	8853      	ldrh	r3, [r2, #2]
   2bdc2:	f043 0301 	orr.w	r3, r3, #1
   2bdc6:	8053      	strh	r3, [r2, #2]
   2bdc8:	3004      	adds	r0, #4
	return mem;
   2bdca:	e7da      	b.n	2bd82 <sys_heap_alloc+0x8>

0002bdcc <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   2bdcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2bdd0:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   2bdd2:	424a      	negs	r2, r1
   2bdd4:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   2bdd8:	ea31 0202 	bics.w	r2, r1, r2
{
   2bddc:	4603      	mov	r3, r0
	if (align != rew) {
   2bdde:	d00a      	beq.n	2bdf6 <sys_heap_aligned_alloc+0x2a>
		return false;
   2bde0:	2f04      	cmp	r7, #4
   2bde2:	463a      	mov	r2, r7
   2bde4:	46b9      	mov	r9, r7
   2bde6:	bf28      	it	cs
   2bde8:	2204      	movcs	r2, #4
		align -= rew;
   2bdea:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   2bdec:	b974      	cbnz	r4, 2be0c <sys_heap_aligned_alloc+0x40>
		return NULL;
   2bdee:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   2bdf0:	4628      	mov	r0, r5
   2bdf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   2bdf6:	2904      	cmp	r1, #4
   2bdf8:	d804      	bhi.n	2be04 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   2bdfa:	4621      	mov	r1, r4
}
   2bdfc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   2be00:	f7ff bfbb 	b.w	2bd7a <sys_heap_alloc>
		rew = 0;
   2be04:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   2be08:	2204      	movs	r2, #4
   2be0a:	e7ef      	b.n	2bdec <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   2be0c:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   2be0e:	68b3      	ldr	r3, [r6, #8]
   2be10:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   2be14:	d9eb      	bls.n	2bdee <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2be16:	f104 010b 	add.w	r1, r4, #11
   2be1a:	4439      	add	r1, r7
   2be1c:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   2be1e:	08c9      	lsrs	r1, r1, #3
   2be20:	4630      	mov	r0, r6
   2be22:	f7ff ff04 	bl	2bc2e <alloc_chunk>
	if (c0 == 0) {
   2be26:	4680      	mov	r8, r0
   2be28:	2800      	cmp	r0, #0
   2be2a:	d0e0      	beq.n	2bdee <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   2be2c:	f109 0504 	add.w	r5, r9, #4
   2be30:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   2be34:	1e7b      	subs	r3, r7, #1
   2be36:	4435      	add	r5, r6
   2be38:	441d      	add	r5, r3
   2be3a:	427f      	negs	r7, r7
   2be3c:	403d      	ands	r5, r7
   2be3e:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2be42:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2be44:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2be46:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2be48:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2be4a:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   2be4e:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   2be50:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2be54:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   2be58:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   2be5c:	d208      	bcs.n	2be70 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   2be5e:	4601      	mov	r1, r0
   2be60:	463a      	mov	r2, r7
   2be62:	4630      	mov	r0, r6
   2be64:	f7ff ff2f 	bl	2bcc6 <split_chunks>
		free_list_add(h, c0);
   2be68:	4641      	mov	r1, r8
   2be6a:	4630      	mov	r0, r6
   2be6c:	f7ff fe8e 	bl	2bb8c <free_list_add>
	return c + chunk_size(h, c);
   2be70:	4639      	mov	r1, r7
   2be72:	4630      	mov	r0, r6
   2be74:	f7ff fe85 	bl	2bb82 <chunk_size>
   2be78:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   2be7a:	4284      	cmp	r4, r0
   2be7c:	d207      	bcs.n	2be8e <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   2be7e:	4630      	mov	r0, r6
   2be80:	4622      	mov	r2, r4
   2be82:	f7ff ff20 	bl	2bcc6 <split_chunks>
		free_list_add(h, c_end);
   2be86:	4621      	mov	r1, r4
   2be88:	4630      	mov	r0, r6
   2be8a:	f7ff fe7f 	bl	2bb8c <free_list_add>
	void *cmem = &buf[c];
   2be8e:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2be92:	8873      	ldrh	r3, [r6, #2]
   2be94:	f043 0301 	orr.w	r3, r3, #1
   2be98:	8073      	strh	r3, [r6, #2]
   2be9a:	e7a9      	b.n	2bdf0 <sys_heap_aligned_alloc+0x24>

0002be9c <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   2be9c:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2be9e:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2bea0:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2bea2:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2bea6:	f021 0107 	bic.w	r1, r1, #7
{
   2beaa:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   2beac:	1acd      	subs	r5, r1, r3
   2beae:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   2beb0:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   2beb2:	fab2 f082 	clz	r0, r2
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   2beb6:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
   2beba:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2bebc:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   2bebe:	2600      	movs	r6, #0
   2bec0:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   2bec2:	f1c0 0020 	rsb	r0, r0, #32
   2bec6:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
   2beca:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
   2becc:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   2bece:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   2bed2:	4284      	cmp	r4, r0
   2bed4:	d118      	bne.n	2bf08 <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2bed6:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2bed8:	f040 0001 	orr.w	r0, r0, #1
   2bedc:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   2bede:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   2bee2:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2bee4:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   2bee6:	801e      	strh	r6, [r3, #0]
   2bee8:	8067      	strh	r7, [r4, #2]
   2beea:	195c      	adds	r4, r3, r5
   2beec:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   2bef0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
   2bef4:	8066      	strh	r6, [r4, #2]
   2bef6:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2bef8:	8850      	ldrh	r0, [r2, #2]
   2befa:	f040 0001 	orr.w	r0, r0, #1
   2befe:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   2bf00:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   2bf02:	4618      	mov	r0, r3
   2bf04:	f7ff be42 	b.w	2bb8c <free_list_add>
		h->buckets[i].next = 0;
   2bf08:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
   2bf0c:	e7e1      	b.n	2bed2 <sys_heap_init+0x36>

0002bf0e <encode_uint>:
{
   2bf0e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bf12:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   2bf14:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   2bf16:	2b6f      	cmp	r3, #111	; 0x6f
{
   2bf18:	4680      	mov	r8, r0
   2bf1a:	460f      	mov	r7, r1
   2bf1c:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2bf1e:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   2bf22:	d029      	beq.n	2bf78 <encode_uint+0x6a>
   2bf24:	d824      	bhi.n	2bf70 <encode_uint+0x62>
		return 16;
   2bf26:	2b58      	cmp	r3, #88	; 0x58
   2bf28:	bf14      	ite	ne
   2bf2a:	260a      	movne	r6, #10
   2bf2c:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   2bf2e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   2bf32:	4632      	mov	r2, r6
   2bf34:	2300      	movs	r3, #0
   2bf36:	4640      	mov	r0, r8
   2bf38:	4639      	mov	r1, r7
   2bf3a:	f7e0 f9e1 	bl	c300 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2bf3e:	2a09      	cmp	r2, #9
   2bf40:	b2d4      	uxtb	r4, r2
   2bf42:	d81e      	bhi.n	2bf82 <encode_uint+0x74>
   2bf44:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   2bf46:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2bf48:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   2bf4a:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2bf4e:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   2bf52:	d301      	bcc.n	2bf58 <encode_uint+0x4a>
   2bf54:	45d1      	cmp	r9, sl
   2bf56:	d811      	bhi.n	2bf7c <encode_uint+0x6e>
	if (conv->flag_hash) {
   2bf58:	782b      	ldrb	r3, [r5, #0]
   2bf5a:	069b      	lsls	r3, r3, #26
   2bf5c:	d505      	bpl.n	2bf6a <encode_uint+0x5c>
		if (radix == 8) {
   2bf5e:	2e08      	cmp	r6, #8
   2bf60:	d115      	bne.n	2bf8e <encode_uint+0x80>
			conv->altform_0 = true;
   2bf62:	78ab      	ldrb	r3, [r5, #2]
   2bf64:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   2bf68:	70ab      	strb	r3, [r5, #2]
}
   2bf6a:	4648      	mov	r0, r9
   2bf6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   2bf70:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   2bf74:	2b70      	cmp	r3, #112	; 0x70
   2bf76:	e7d7      	b.n	2bf28 <encode_uint+0x1a>
	switch (specifier) {
   2bf78:	2608      	movs	r6, #8
   2bf7a:	e7d8      	b.n	2bf2e <encode_uint+0x20>
		value /= radix;
   2bf7c:	4680      	mov	r8, r0
   2bf7e:	460f      	mov	r7, r1
   2bf80:	e7d7      	b.n	2bf32 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2bf82:	f1bb 0f19 	cmp.w	fp, #25
   2bf86:	bf94      	ite	ls
   2bf88:	3437      	addls	r4, #55	; 0x37
   2bf8a:	3457      	addhi	r4, #87	; 0x57
   2bf8c:	e7db      	b.n	2bf46 <encode_uint+0x38>
		} else if (radix == 16) {
   2bf8e:	2e10      	cmp	r6, #16
   2bf90:	d1eb      	bne.n	2bf6a <encode_uint+0x5c>
			conv->altform_0c = true;
   2bf92:	78ab      	ldrb	r3, [r5, #2]
   2bf94:	f043 0310 	orr.w	r3, r3, #16
   2bf98:	e7e6      	b.n	2bf68 <encode_uint+0x5a>

0002bf9a <outs>:
{
   2bf9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bf9e:	4607      	mov	r7, r0
   2bfa0:	4688      	mov	r8, r1
   2bfa2:	4615      	mov	r5, r2
   2bfa4:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2bfa6:	4614      	mov	r4, r2
   2bfa8:	42b4      	cmp	r4, r6
   2bfaa:	eba4 0005 	sub.w	r0, r4, r5
   2bfae:	d302      	bcc.n	2bfb6 <outs+0x1c>
   2bfb0:	b93e      	cbnz	r6, 2bfc2 <outs+0x28>
   2bfb2:	7823      	ldrb	r3, [r4, #0]
   2bfb4:	b12b      	cbz	r3, 2bfc2 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   2bfb6:	f814 0b01 	ldrb.w	r0, [r4], #1
   2bfba:	4641      	mov	r1, r8
   2bfbc:	47b8      	blx	r7
		if (rc < 0) {
   2bfbe:	2800      	cmp	r0, #0
   2bfc0:	daf2      	bge.n	2bfa8 <outs+0xe>
}
   2bfc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002bfc6 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   2bfc6:	b40f      	push	{r0, r1, r2, r3}
   2bfc8:	b507      	push	{r0, r1, r2, lr}
   2bfca:	a904      	add	r1, sp, #16
   2bfcc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   2bfd0:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   2bfd2:	f7e2 f94b 	bl	e26c <vprintk>

	va_end(ap);
}
   2bfd6:	b003      	add	sp, #12
   2bfd8:	f85d eb04 	ldr.w	lr, [sp], #4
   2bfdc:	b004      	add	sp, #16
   2bfde:	4770      	bx	lr

0002bfe0 <free_space>:
	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
   2bfe0:	4602      	mov	r2, r0
   2bfe2:	b510      	push	{r4, lr}
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   2bfe4:	68c0      	ldr	r0, [r0, #12]
   2bfe6:	6814      	ldr	r4, [r2, #0]
   2bfe8:	42a0      	cmp	r0, r4
   2bfea:	d904      	bls.n	2bff6 <free_space+0x16>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   2bfec:	3801      	subs	r0, #1
   2bfee:	1b00      	subs	r0, r0, r4
   2bff0:	6008      	str	r0, [r1, #0]

		return false;
   2bff2:	2000      	movs	r0, #0
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
   2bff4:	bd10      	pop	{r4, pc}
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   2bff6:	6a13      	ldr	r3, [r2, #32]
	} else if (!buffer->rd_idx) {
   2bff8:	b918      	cbnz	r0, 2c002 <free_space+0x22>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   2bffa:	3b01      	subs	r3, #1
   2bffc:	1b1b      	subs	r3, r3, r4
   2bffe:	600b      	str	r3, [r1, #0]
		return false;
   2c000:	e7f8      	b.n	2bff4 <free_space+0x14>
	*res = buffer->size - buffer->tmp_wr_idx;
   2c002:	1b1b      	subs	r3, r3, r4
   2c004:	600b      	str	r3, [r1, #0]
	return true;
   2c006:	2001      	movs	r0, #1
   2c008:	e7f4      	b.n	2bff4 <free_space+0x14>

0002c00a <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   2c00a:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
   2c00c:	a901      	add	r1, sp, #4
{
   2c00e:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   2c010:	f7ff ffe6 	bl	2bfe0 <free_space>
   2c014:	b120      	cbz	r0, 2c020 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   2c016:	9b01      	ldr	r3, [sp, #4]
   2c018:	68e2      	ldr	r2, [r4, #12]
   2c01a:	3b01      	subs	r3, #1
   2c01c:	4413      	add	r3, r2
   2c01e:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   2c020:	9801      	ldr	r0, [sp, #4]
   2c022:	6a23      	ldr	r3, [r4, #32]
   2c024:	43c0      	mvns	r0, r0
}
   2c026:	4418      	add	r0, r3
   2c028:	b002      	add	sp, #8
   2c02a:	bd10      	pop	{r4, pc}

0002c02c <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
   2c02c:	b510      	push	{r4, lr}
   2c02e:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   2c030:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2c032:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   2c034:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2c036:	07d2      	lsls	r2, r2, #31
   2c038:	d502      	bpl.n	2c040 <idx_inc+0x14>
		return i & (buffer->size - 1);
   2c03a:	3b01      	subs	r3, #1
   2c03c:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   2c03e:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   2c040:	4298      	cmp	r0, r3
   2c042:	bf28      	it	cs
   2c044:	1ac0      	subcs	r0, r0, r3
   2c046:	e7fa      	b.n	2c03e <idx_inc+0x12>

0002c048 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   2c048:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2c04a:	69c2      	ldr	r2, [r0, #28]
{
   2c04c:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
   2c04e:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2c050:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   2c052:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2c056:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2c05a:	462a      	mov	r2, r5
   2c05c:	6801      	ldr	r1, [r0, #0]
{
   2c05e:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2c060:	f7ff ffe4 	bl	2c02c <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2c064:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2c066:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2c068:	462a      	mov	r2, r5
   2c06a:	4620      	mov	r0, r4
   2c06c:	f7ff ffde 	bl	2c02c <idx_inc>
   2c070:	6060      	str	r0, [r4, #4]
}
   2c072:	bd38      	pop	{r3, r4, r5, pc}

0002c074 <max_utilization_update>:
{
   2c074:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   2c076:	6903      	ldr	r3, [r0, #16]
   2c078:	075b      	lsls	r3, r3, #29
{
   2c07a:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   2c07c:	d506      	bpl.n	2c08c <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   2c07e:	6a45      	ldr	r5, [r0, #36]	; 0x24
   2c080:	f7ff ffc3 	bl	2c00a <get_usage>
   2c084:	4285      	cmp	r5, r0
   2c086:	d902      	bls.n	2c08e <max_utilization_update+0x1a>
   2c088:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2c08a:	6260      	str	r0, [r4, #36]	; 0x24
}
   2c08c:	bd38      	pop	{r3, r4, r5, pc}
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   2c08e:	4620      	mov	r0, r4
   2c090:	f7ff ffbb 	bl	2c00a <get_usage>
   2c094:	e7f9      	b.n	2c08a <max_utilization_update+0x16>

0002c096 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
   2c096:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   2c09a:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   2c09e:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
   2c0a2:	461f      	mov	r7, r3
	*user_packet = false;
   2c0a4:	2300      	movs	r3, #0
   2c0a6:	703b      	strb	r3, [r7, #0]
	if (item->hdr.busy && !item->hdr.valid) {
   2c0a8:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   2c0ac:	f003 0303 	and.w	r3, r3, #3
   2c0b0:	2b02      	cmp	r3, #2
{
   2c0b2:	4604      	mov	r4, r0
   2c0b4:	468b      	mov	fp, r1
   2c0b6:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   2c0b8:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   2c0bc:	d103      	bne.n	2c0c6 <drop_item_locked+0x30>
		return item->skip.len;
   2c0be:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   2c0c2:	08ad      	lsrs	r5, r5, #2
   2c0c4:	d12e      	bne.n	2c124 <drop_item_locked+0x8e>
   2c0c6:	69a3      	ldr	r3, [r4, #24]
   2c0c8:	4630      	mov	r0, r6
   2c0ca:	4798      	blx	r3
   2c0cc:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
   2c0ce:	f1b8 0f00 	cmp.w	r8, #0
   2c0d2:	d036      	beq.n	2c142 <drop_item_locked+0xac>
		if (item->hdr.busy) {
   2c0d4:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   2c0d8:	079b      	lsls	r3, r3, #30
   2c0da:	d52f      	bpl.n	2c13c <drop_item_locked+0xa6>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
   2c0dc:	f10b 0101 	add.w	r1, fp, #1
   2c0e0:	4620      	mov	r0, r4
   2c0e2:	f7ff ffb1 	bl	2c048 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   2c0e6:	6861      	ldr	r1, [r4, #4]
   2c0e8:	462a      	mov	r2, r5
   2c0ea:	4620      	mov	r0, r4
   2c0ec:	f7ff ff9e 	bl	2c02c <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   2c0f0:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   2c0f2:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   2c0f4:	462a      	mov	r2, r5
   2c0f6:	4620      	mov	r0, r4
   2c0f8:	f7ff ff98 	bl	2c02c <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   2c0fc:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   2c0fe:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   2c100:	68e1      	ldr	r1, [r4, #12]
   2c102:	4620      	mov	r0, r4
   2c104:	f7ff ff92 	bl	2c02c <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   2c108:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
   2c10a:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
   2c10e:	f002 0203 	and.w	r2, r2, #3
   2c112:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   2c114:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   2c118:	d10c      	bne.n	2c134 <drop_item_locked+0x9e>
		return item->skip.len;
   2c11a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
   2c11e:	089b      	lsrs	r3, r3, #2
   2c120:	d008      	beq.n	2c134 <drop_item_locked+0x9e>
				rd_wlen += skip_wlen;
   2c122:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   2c124:	68e1      	ldr	r1, [r4, #12]
   2c126:	462a      	mov	r2, r5
   2c128:	4620      	mov	r0, r4
   2c12a:	f7ff ff7f 	bl	2c02c <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   2c12e:	e9c4 0002 	strd	r0, r0, [r4, #8]
   2c132:	e007      	b.n	2c144 <drop_item_locked+0xae>
				rd_wlen += buffer->get_wlen(item);
   2c134:	69a3      	ldr	r3, [r4, #24]
   2c136:	4630      	mov	r0, r6
   2c138:	4798      	blx	r3
   2c13a:	4405      	add	r5, r0
			*user_packet = true;
   2c13c:	2301      	movs	r3, #1
   2c13e:	703b      	strb	r3, [r7, #0]
   2c140:	e7f0      	b.n	2c124 <drop_item_locked+0x8e>
		item = NULL;
   2c142:	4646      	mov	r6, r8
	}

	return item;
}
   2c144:	4630      	mov	r0, r6
   2c146:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002c14a <mpsc_pbuf_init>:
{
   2c14a:	b538      	push	{r3, r4, r5, lr}
   2c14c:	460d      	mov	r5, r1
   2c14e:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   2c150:	221c      	movs	r2, #28
   2c152:	2100      	movs	r1, #0
   2c154:	f001 ff74 	bl	2e040 <memset>
	buffer->get_wlen = cfg->get_wlen;
   2c158:	68eb      	ldr	r3, [r5, #12]
   2c15a:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   2c15c:	68ab      	ldr	r3, [r5, #8]
	buffer->size = cfg->size;
   2c15e:	686a      	ldr	r2, [r5, #4]
	buffer->notify_drop = cfg->notify_drop;
   2c160:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   2c162:	682b      	ldr	r3, [r5, #0]
   2c164:	61e3      	str	r3, [r4, #28]
	buffer->max_usage = 0;
   2c166:	2300      	movs	r3, #0
   2c168:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->size = cfg->size;
   2c16a:	6222      	str	r2, [r4, #32]
	buffer->flags = cfg->flags;
   2c16c:	692b      	ldr	r3, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   2c16e:	b122      	cbz	r2, 2c17a <mpsc_pbuf_init+0x30>
   2c170:	1e51      	subs	r1, r2, #1
   2c172:	4211      	tst	r1, r2
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   2c174:	bf08      	it	eq
   2c176:	f043 0301 	orreq.w	r3, r3, #1
	buffer->flags = cfg->flags;
   2c17a:	6123      	str	r3, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   2c17c:	2201      	movs	r2, #1
   2c17e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2c182:	2100      	movs	r1, #0
}
   2c184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2c188:	f005 bb15 	b.w	317b6 <z_impl_k_sem_init>

0002c18c <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   2c18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c190:	4699      	mov	r9, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   2c192:	6a03      	ldr	r3, [r0, #32]
   2c194:	3b01      	subs	r3, #1
   2c196:	428b      	cmp	r3, r1
{
   2c198:	b085      	sub	sp, #20
   2c19a:	4604      	mov	r4, r0
   2c19c:	460f      	mov	r7, r1
   2c19e:	4690      	mov	r8, r2
	if (wlen > (buffer->size - 1)) {
   2c1a0:	d364      	bcc.n	2c26c <mpsc_pbuf_alloc+0xe0>
	union mpsc_pbuf_generic *dropped_item = NULL;
   2c1a2:	2500      	movs	r5, #0
	union mpsc_pbuf_generic *item = NULL;
   2c1a4:	46aa      	mov	sl, r5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
			   !k_is_in_isr()) {
			int err;

			k_spin_unlock(&buffer->lock, key);
			err = k_sem_take(&buffer->sem, timeout);
   2c1a6:	f100 0b28 	add.w	fp, r0, #40	; 0x28
	__asm__ volatile(
   2c1aa:	f04f 0320 	mov.w	r3, #32
   2c1ae:	f3ef 8611 	mrs	r6, BASEPRI
   2c1b2:	f383 8812 	msr	BASEPRI_MAX, r3
   2c1b6:	f3bf 8f6f 	isb	sy
		wrap = free_space(buffer, &free_wlen);
   2c1ba:	a903      	add	r1, sp, #12
   2c1bc:	4620      	mov	r0, r4
   2c1be:	f7ff ff0f 	bl	2bfe0 <free_space>
		if (free_wlen >= wlen) {
   2c1c2:	9903      	ldr	r1, [sp, #12]
   2c1c4:	42b9      	cmp	r1, r7
   2c1c6:	d321      	bcc.n	2c20c <mpsc_pbuf_alloc+0x80>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   2c1c8:	6821      	ldr	r1, [r4, #0]
			item =
   2c1ca:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
   2c1cc:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
   2c1d0:	f022 0203 	bic.w	r2, r2, #3
   2c1d4:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
   2c1d8:	4620      	mov	r0, r4
   2c1da:	463a      	mov	r2, r7
			item =
   2c1dc:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
			buffer->tmp_wr_idx = idx_inc(buffer,
   2c1e0:	f7ff ff24 	bl	2c02c <idx_inc>
		cont = false;
   2c1e4:	2300      	movs	r3, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
   2c1e6:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
   2c1e8:	f386 8811 	msr	BASEPRI, r6
   2c1ec:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
   2c1f0:	2b00      	cmp	r3, #0
   2c1f2:	d03d      	beq.n	2c270 <mpsc_pbuf_alloc+0xe4>
   2c1f4:	2d00      	cmp	r5, #0
   2c1f6:	d0d8      	beq.n	2c1aa <mpsc_pbuf_alloc+0x1e>
   2c1f8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2c1fc:	2b00      	cmp	r3, #0
   2c1fe:	d0d4      	beq.n	2c1aa <mpsc_pbuf_alloc+0x1e>
			/* Notify about item being dropped. */
			buffer->notify_drop(buffer, dropped_item);
   2c200:	4629      	mov	r1, r5
   2c202:	6963      	ldr	r3, [r4, #20]
   2c204:	4620      	mov	r0, r4
   2c206:	4798      	blx	r3
			dropped_item = NULL;
   2c208:	2500      	movs	r5, #0
   2c20a:	e7ce      	b.n	2c1aa <mpsc_pbuf_alloc+0x1e>
		} else if (wrap) {
   2c20c:	b128      	cbz	r0, 2c21a <mpsc_pbuf_alloc+0x8e>
   2c20e:	9001      	str	r0, [sp, #4]
			add_skip_item(buffer, free_wlen);
   2c210:	4620      	mov	r0, r4
   2c212:	f7ff ff19 	bl	2c048 <add_skip_item>
			cont = true;
   2c216:	9b01      	ldr	r3, [sp, #4]
   2c218:	e7e6      	b.n	2c1e8 <mpsc_pbuf_alloc+0x5c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   2c21a:	ea58 0309 	orrs.w	r3, r8, r9
   2c21e:	d017      	beq.n	2c250 <mpsc_pbuf_alloc+0xc4>
			   !k_is_in_isr()) {
   2c220:	f005 f9d9 	bl	315d6 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   2c224:	b9a0      	cbnz	r0, 2c250 <mpsc_pbuf_alloc+0xc4>
   2c226:	f386 8811 	msr	BASEPRI, r6
   2c22a:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   2c22e:	4642      	mov	r2, r8
   2c230:	464b      	mov	r3, r9
   2c232:	4658      	mov	r0, fp
   2c234:	f7fe fa50 	bl	2a6d8 <z_impl_k_sem_take>
	__asm__ volatile(
   2c238:	f04f 0320 	mov.w	r3, #32
   2c23c:	f3ef 8611 	mrs	r6, BASEPRI
   2c240:	f383 8812 	msr	BASEPRI_MAX, r3
   2c244:	f3bf 8f6f 	isb	sy
			if (err == 0) {
   2c248:	fab0 f380 	clz	r3, r0
   2c24c:	095b      	lsrs	r3, r3, #5
   2c24e:	e7cb      	b.n	2c1e8 <mpsc_pbuf_alloc+0x5c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   2c250:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   2c252:	9903      	ldr	r1, [sp, #12]
   2c254:	f10d 030b 	add.w	r3, sp, #11
   2c258:	f3c2 0240 	ubfx	r2, r2, #1, #1
   2c25c:	4620      	mov	r0, r4
   2c25e:	f7ff ff1a 	bl	2c096 <drop_item_locked>
			cont = dropped_item != NULL;
   2c262:	1e03      	subs	r3, r0, #0
   2c264:	4605      	mov	r5, r0
   2c266:	bf18      	it	ne
   2c268:	2301      	movne	r3, #1
   2c26a:	e7bd      	b.n	2c1e8 <mpsc_pbuf_alloc+0x5c>
		return NULL;
   2c26c:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   2c270:	4650      	mov	r0, sl
   2c272:	b005      	add	sp, #20
   2c274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002c278 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   2c278:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
   2c27a:	6983      	ldr	r3, [r0, #24]
{
   2c27c:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   2c27e:	4608      	mov	r0, r1
{
   2c280:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   2c282:	4798      	blx	r3
   2c284:	4602      	mov	r2, r0
   2c286:	f04f 0320 	mov.w	r3, #32
   2c28a:	f3ef 8611 	mrs	r6, BASEPRI
   2c28e:	f383 8812 	msr	BASEPRI_MAX, r3
   2c292:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   2c296:	782b      	ldrb	r3, [r5, #0]
   2c298:	f043 0301 	orr.w	r3, r3, #1
   2c29c:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2c29e:	6861      	ldr	r1, [r4, #4]
   2c2a0:	4620      	mov	r0, r4
   2c2a2:	f7ff fec3 	bl	2c02c <idx_inc>
   2c2a6:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   2c2a8:	4620      	mov	r0, r4
   2c2aa:	f7ff fee3 	bl	2c074 <max_utilization_update>
	__asm__ volatile(
   2c2ae:	f386 8811 	msr	BASEPRI, r6
   2c2b2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   2c2b6:	bd70      	pop	{r4, r5, r6, pc}

0002c2b8 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   2c2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c2bc:	4604      	mov	r4, r0
	__asm__ volatile(
   2c2be:	f04f 0320 	mov.w	r3, #32
   2c2c2:	f3ef 8611 	mrs	r6, BASEPRI
   2c2c6:	f383 8812 	msr	BASEPRI_MAX, r3
   2c2ca:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   2c2ce:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
   2c2d2:	429f      	cmp	r7, r3
	*res = buffer->size - buffer->tmp_rd_idx;
   2c2d4:	bf88      	it	hi
   2c2d6:	6a23      	ldrhi	r3, [r4, #32]
   2c2d8:	1bdb      	subs	r3, r3, r7
		key = k_spin_lock(&buffer->lock);
		wrap = available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
   2c2da:	b1f3      	cbz	r3, 2c31a <mpsc_pbuf_claim+0x62>
		item = (union mpsc_pbuf_generic *)
   2c2dc:	69e1      	ldr	r1, [r4, #28]
	return !item->hdr.valid && !item->hdr.busy;
   2c2de:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
		if (!a || is_invalid(item)) {
   2c2e2:	f012 0303 	ands.w	r3, r2, #3
		item = (union mpsc_pbuf_generic *)
   2c2e6:	eb01 0887 	add.w	r8, r1, r7, lsl #2
		if (!a || is_invalid(item)) {
   2c2ea:	d016      	beq.n	2c31a <mpsc_pbuf_claim+0x62>
	if (item->hdr.busy && !item->hdr.valid) {
   2c2ec:	2b02      	cmp	r3, #2
   2c2ee:	d103      	bne.n	2c2f8 <mpsc_pbuf_claim+0x40>
		return item->skip.len;
   2c2f0:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
   2c2f4:	08ad      	lsrs	r5, r5, #2
   2c2f6:	d115      	bne.n	2c324 <mpsc_pbuf_claim+0x6c>
   2c2f8:	07d0      	lsls	r0, r2, #31
				cont = true;
			} else {
				item->hdr.busy = 1;
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
   2c2fa:	69a3      	ldr	r3, [r4, #24]
			if (skip || !is_valid(item)) {
   2c2fc:	d50f      	bpl.n	2c31e <mpsc_pbuf_claim+0x66>
				item->hdr.busy = 1;
   2c2fe:	f042 0202 	orr.w	r2, r2, #2
   2c302:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
   2c306:	4640      	mov	r0, r8
   2c308:	4798      	blx	r3
   2c30a:	4639      	mov	r1, r7
   2c30c:	4602      	mov	r2, r0
   2c30e:	4620      	mov	r0, r4
   2c310:	f7ff fe8c 	bl	2c02c <idx_inc>
		cont = false;
   2c314:	2300      	movs	r3, #0
				buffer->tmp_rd_idx =
   2c316:	60a0      	str	r0, [r4, #8]
   2c318:	e011      	b.n	2c33e <mpsc_pbuf_claim+0x86>
			item = NULL;
   2c31a:	4698      	mov	r8, r3
   2c31c:	e00f      	b.n	2c33e <mpsc_pbuf_claim+0x86>
					skip ? skip : buffer->get_wlen(item);
   2c31e:	4640      	mov	r0, r8
   2c320:	4798      	blx	r3
   2c322:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   2c324:	68a1      	ldr	r1, [r4, #8]
   2c326:	462a      	mov	r2, r5
   2c328:	4620      	mov	r0, r4
   2c32a:	f7ff fe7f 	bl	2c02c <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
   2c32e:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
   2c330:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
   2c332:	462a      	mov	r2, r5
   2c334:	4620      	mov	r0, r4
   2c336:	f7ff fe79 	bl	2c02c <idx_inc>
				cont = true;
   2c33a:	2301      	movs	r3, #1
				buffer->rd_idx =
   2c33c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   2c33e:	f386 8811 	msr	BASEPRI, r6
   2c342:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
   2c346:	2b00      	cmp	r3, #0
   2c348:	d1b9      	bne.n	2c2be <mpsc_pbuf_claim+0x6>

	return item;
}
   2c34a:	4640      	mov	r0, r8
   2c34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c350 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   2c350:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
   2c352:	6983      	ldr	r3, [r0, #24]
{
   2c354:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   2c356:	4608      	mov	r0, r1
{
   2c358:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   2c35a:	4798      	blx	r3
   2c35c:	4602      	mov	r2, r0
	__asm__ volatile(
   2c35e:	f04f 0320 	mov.w	r3, #32
   2c362:	f3ef 8611 	mrs	r6, BASEPRI
   2c366:	f383 8812 	msr	BASEPRI_MAX, r3
   2c36a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   2c36e:	782b      	ldrb	r3, [r5, #0]
   2c370:	f36f 0300 	bfc	r3, #0, #1
   2c374:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   2c376:	6923      	ldr	r3, [r4, #16]
   2c378:	079b      	lsls	r3, r3, #30
   2c37a:	d505      	bpl.n	2c388 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   2c37c:	68e1      	ldr	r1, [r4, #12]
   2c37e:	69e3      	ldr	r3, [r4, #28]
   2c380:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   2c384:	429d      	cmp	r5, r3
   2c386:	d112      	bne.n	2c3ae <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
   2c388:	782b      	ldrb	r3, [r5, #0]
   2c38a:	f36f 0341 	bfc	r3, #1, #1
   2c38e:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   2c390:	68e1      	ldr	r1, [r4, #12]
   2c392:	4620      	mov	r0, r4
   2c394:	f7ff fe4a 	bl	2c02c <idx_inc>
   2c398:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   2c39a:	f386 8811 	msr	BASEPRI, r6
   2c39e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   2c3a2:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   2c3a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2c3aa:	f7fe b96f 	b.w	2a68c <z_impl_k_sem_give>
		witem->skip.len = wlen;
   2c3ae:	682b      	ldr	r3, [r5, #0]
   2c3b0:	f360 039f 	bfi	r3, r0, #2, #30
   2c3b4:	602b      	str	r3, [r5, #0]
   2c3b6:	e7f0      	b.n	2c39a <mpsc_pbuf_free+0x4a>

0002c3b8 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   2c3b8:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   2c3bc:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   2c3be:	bf8a      	itet	hi
   2c3c0:	6a00      	ldrhi	r0, [r0, #32]
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   2c3c2:	1ad3      	subls	r3, r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
   2c3c4:	1ac3      	subhi	r3, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   2c3c6:	1e18      	subs	r0, r3, #0
   2c3c8:	bf18      	it	ne
   2c3ca:	2001      	movne	r0, #1
   2c3cc:	4770      	bx	lr

0002c3ce <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BOOTLOADER_MCUBOOT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_SIGNATURE_KEY_FILE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_EXTRA_IMGTOOL_ARGS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   2c3ce:	4770      	bx	lr

0002c3d0 <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   2c3d0:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   2c3d2:	075b      	lsls	r3, r3, #29
   2c3d4:	d40b      	bmi.n	2c3ee <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   2c3d6:	6803      	ldr	r3, [r0, #0]
   2c3d8:	8840      	ldrh	r0, [r0, #2]
   2c3da:	f3c3 2349 	ubfx	r3, r3, #9, #10
   2c3de:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   2c3e2:	4418      	add	r0, r3
   2c3e4:	3013      	adds	r0, #19
   2c3e6:	f020 0007 	bic.w	r0, r0, #7
   2c3ea:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
   2c3ec:	4770      	bx	lr
	return 0;
   2c3ee:	2000      	movs	r0, #0
}
   2c3f0:	4770      	bx	lr

0002c3f2 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   2c3f2:	f004 bd82 	b.w	30efa <sys_clock_cycle_get_32>

0002c3f6 <dummy_timestamp>:
   2c3f6:	2000      	movs	r0, #0
   2c3f8:	4770      	bx	lr

0002c3fa <notify_drop>:
	z_log_dropped(true);
   2c3fa:	2001      	movs	r0, #1
   2c3fc:	f7e2 bc6e 	b.w	ecdc <z_log_dropped>

0002c400 <get_msg>:
{
   2c400:	b508      	push	{r3, lr}
		msg.msg2 = z_log_msg2_claim();
   2c402:	f7e2 fcdf 	bl	edc4 <z_log_msg2_claim>
}
   2c406:	bd08      	pop	{r3, pc}

0002c408 <z_log_get_tag>:
}
   2c408:	2000      	movs	r0, #0
   2c40a:	4770      	bx	lr

0002c40c <buffer_write>:
{
   2c40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c40e:	4606      	mov	r6, r0
   2c410:	460d      	mov	r5, r1
   2c412:	4614      	mov	r4, r2
   2c414:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   2c416:	4621      	mov	r1, r4
   2c418:	4628      	mov	r0, r5
   2c41a:	463a      	mov	r2, r7
   2c41c:	47b0      	blx	r6
	} while (len != 0);
   2c41e:	1a24      	subs	r4, r4, r0
		buf += processed;
   2c420:	4405      	add	r5, r0
	} while (len != 0);
   2c422:	d1f8      	bne.n	2c416 <buffer_write+0xa>
}
   2c424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002c426 <log_output_flush>:
		     output->control_block->offset,
   2c426:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   2c428:	6881      	ldr	r1, [r0, #8]
{
   2c42a:	b510      	push	{r4, lr}
   2c42c:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   2c42e:	e9d2 2300 	ldrd	r2, r3, [r2]
   2c432:	6800      	ldr	r0, [r0, #0]
   2c434:	f7ff ffea 	bl	2c40c <buffer_write>
	output->control_block->offset = 0;
   2c438:	6863      	ldr	r3, [r4, #4]
   2c43a:	2200      	movs	r2, #0
   2c43c:	601a      	str	r2, [r3, #0]
}
   2c43e:	bd10      	pop	{r4, pc}

0002c440 <out_func>:
{
   2c440:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   2c442:	684b      	ldr	r3, [r1, #4]
   2c444:	681a      	ldr	r2, [r3, #0]
   2c446:	68cb      	ldr	r3, [r1, #12]
   2c448:	429a      	cmp	r2, r3
{
   2c44a:	4605      	mov	r5, r0
   2c44c:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   2c44e:	d102      	bne.n	2c456 <out_func+0x16>
		log_output_flush(out_ctx);
   2c450:	4608      	mov	r0, r1
   2c452:	f7ff ffe8 	bl	2c426 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2c456:	6863      	ldr	r3, [r4, #4]
   2c458:	f3bf 8f5b 	dmb	ish
   2c45c:	e853 2f00 	ldrex	r2, [r3]
   2c460:	1c51      	adds	r1, r2, #1
   2c462:	e843 1000 	strex	r0, r1, [r3]
   2c466:	2800      	cmp	r0, #0
   2c468:	d1f8      	bne.n	2c45c <out_func+0x1c>
   2c46a:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   2c46e:	68a3      	ldr	r3, [r4, #8]
   2c470:	549d      	strb	r5, [r3, r2]
}
   2c472:	2000      	movs	r0, #0
   2c474:	bd38      	pop	{r3, r4, r5, pc}

0002c476 <cr_out_func>:
{
   2c476:	b538      	push	{r3, r4, r5, lr}
   2c478:	4605      	mov	r5, r0
   2c47a:	460c      	mov	r4, r1
	out_func(c, ctx);
   2c47c:	f7ff ffe0 	bl	2c440 <out_func>
	if (c == '\n') {
   2c480:	2d0a      	cmp	r5, #10
   2c482:	d103      	bne.n	2c48c <cr_out_func+0x16>
		out_func((int)'\r', ctx);
   2c484:	4621      	mov	r1, r4
   2c486:	200d      	movs	r0, #13
   2c488:	f7ff ffda 	bl	2c440 <out_func>
}
   2c48c:	2000      	movs	r0, #0
   2c48e:	bd38      	pop	{r3, r4, r5, pc}

0002c490 <z_log_msg2_finalize>:
	!(IS_ENABLED(CONFIG_LOG_FRONTEND) && \
	 (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY) || log_backend_count_get() == 0))

void z_log_msg2_finalize(struct log_msg2 *msg, const void *source,
			 const struct log_msg2_desc desc, const void *data)
{
   2c490:	b570      	push	{r4, r5, r6, lr}
   2c492:	460e      	mov	r6, r1
   2c494:	4615      	mov	r5, r2
   2c496:	4619      	mov	r1, r3
	if (!msg) {
   2c498:	4604      	mov	r4, r0
   2c49a:	b918      	cbnz	r0, 2c4a4 <z_log_msg2_finalize+0x14>
	}

	msg->hdr.desc = desc;
	msg->hdr.source = source;
	z_log_msg2_commit(msg);
}
   2c49c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   2c4a0:	f7e2 bc1c 	b.w	ecdc <z_log_dropped>
	if (data) {
   2c4a4:	b143      	cbz	r3, 2c4b8 <z_log_msg2_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
   2c4a6:	f100 030c 	add.w	r3, r0, #12
   2c4aa:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
   2c4ae:	4418      	add	r0, r3
   2c4b0:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   2c4b4:	f001 fdb9 	bl	2e02a <memcpy>
	msg->hdr.source = source;
   2c4b8:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
   2c4bc:	4620      	mov	r0, r4
}
   2c4be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
   2c4c2:	f7e2 bd41 	b.w	ef48 <z_log_msg2_commit>

0002c4c6 <z_impl_z_log_msg2_static_create>:

void z_impl_z_log_msg2_static_create(const void *source,
			      const struct log_msg2_desc desc,
			      uint8_t *package, const void *data)
{
   2c4c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   2c4ca:	f3c1 44cb 	ubfx	r4, r1, #19, #12
   2c4ce:	f3c1 2649 	ubfx	r6, r1, #9, #10
   2c4d2:	b089      	sub	sp, #36	; 0x24
   2c4d4:	4681      	mov	r9, r0
   2c4d6:	460d      	mov	r5, r1
   2c4d8:	4690      	mov	r8, r2
   2c4da:	469a      	mov	sl, r3
   2c4dc:	3413      	adds	r4, #19

	struct log_msg2_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg2 *msg;

	if (inlen > 0) {
   2c4de:	b386      	cbz	r6, 2c542 <z_impl_z_log_msg2_static_create+0x7c>
		uint32_t flags = CBPRINTF_PACKAGE_COPY_RW_STR;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
   2c4e0:	2302      	movs	r3, #2
   2c4e2:	9300      	str	r3, [sp, #0]
   2c4e4:	f04f 0b04 	mov.w	fp, #4
   2c4e8:	2300      	movs	r3, #0
   2c4ea:	af06      	add	r7, sp, #24
   2c4ec:	4631      	mov	r1, r6
   2c4ee:	461a      	mov	r2, r3
   2c4f0:	f8cd b008 	str.w	fp, [sp, #8]
   2c4f4:	9701      	str	r7, [sp, #4]
   2c4f6:	4640      	mov	r0, r8
   2c4f8:	9605      	str	r6, [sp, #20]
   2c4fa:	f7e1 fd41 	bl	df80 <cbprintf_package_copy>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
   2c4fe:	f3c0 0309 	ubfx	r3, r0, #0, #10
   2c502:	1918      	adds	r0, r3, r4
   2c504:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
   2c508:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
   2c50a:	461e      	mov	r6, r3
   2c50c:	9304      	str	r3, [sp, #16]
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
   2c50e:	f7e2 fc51 	bl	edb4 <z_log_msg2_alloc>
		if (msg) {
   2c512:	4604      	mov	r4, r0
   2c514:	b150      	cbz	r0, 2c52c <z_impl_z_log_msg2_static_create+0x66>
			len = cbprintf_package_copy(package, inlen,
   2c516:	2302      	movs	r3, #2
   2c518:	9300      	str	r3, [sp, #0]
   2c51a:	f100 020c 	add.w	r2, r0, #12
   2c51e:	e9cd 7b01 	strd	r7, fp, [sp, #4]
   2c522:	9b04      	ldr	r3, [sp, #16]
   2c524:	9905      	ldr	r1, [sp, #20]
   2c526:	4640      	mov	r0, r8
   2c528:	f7e1 fd2a 	bl	df80 <cbprintf_package_copy>
		}
	} else {
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
	}

	z_log_msg2_finalize(msg, source, out_desc, data);
   2c52c:	f366 2552 	bfi	r5, r6, #9, #10
   2c530:	4653      	mov	r3, sl
   2c532:	462a      	mov	r2, r5
   2c534:	4649      	mov	r1, r9
   2c536:	4620      	mov	r0, r4
}
   2c538:	b009      	add	sp, #36	; 0x24
   2c53a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg2_finalize(msg, source, out_desc, data);
   2c53e:	f7ff bfa7 	b.w	2c490 <z_log_msg2_finalize>
   2c542:	f024 0007 	bic.w	r0, r4, #7
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
   2c546:	0880      	lsrs	r0, r0, #2
   2c548:	f7e2 fc34 	bl	edb4 <z_log_msg2_alloc>
   2c54c:	4604      	mov	r4, r0
   2c54e:	e7ed      	b.n	2c52c <z_impl_z_log_msg2_static_create+0x66>

0002c550 <read_str>:
{
   2c550:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   2c554:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   2c558:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   2c55a:	4640      	mov	r0, r8
{
   2c55c:	461f      	mov	r7, r3
   2c55e:	460c      	mov	r4, r1
   2c560:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   2c562:	f001 fd24 	bl	2dfae <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   2c566:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2c56a:	9300      	str	r3, [sp, #0]
   2c56c:	b280      	uxth	r0, r0
   2c56e:	e9cd 8001 	strd	r8, r0, [sp, #4]
   2c572:	463b      	mov	r3, r7
   2c574:	4632      	mov	r2, r6
   2c576:	4621      	mov	r1, r4
   2c578:	4628      	mov	r0, r5
   2c57a:	f003 fa0b 	bl	2f994 <bt_gatt_attr_read>
}
   2c57e:	b004      	add	sp, #16
   2c580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c584 <bas_init>:
}
   2c584:	2000      	movs	r0, #0
   2c586:	4770      	bx	lr

0002c588 <nvs_flash_rd>:
{
   2c588:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   2c58a:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2c58c:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   2c58e:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2c590:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   2c592:	fa16 f181 	uxtah	r1, r6, r1
   2c596:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   2c59a:	6884      	ldr	r4, [r0, #8]
   2c59c:	6824      	ldr	r4, [r4, #0]
   2c59e:	46a4      	mov	ip, r4
}
   2c5a0:	bc70      	pop	{r4, r5, r6}
   2c5a2:	4760      	bx	ip

0002c5a4 <nvs_flash_block_cmp>:
{
   2c5a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c5a8:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2c5aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2c5ac:	681d      	ldr	r5, [r3, #0]
   2c5ae:	426d      	negs	r5, r5
{
   2c5b0:	b089      	sub	sp, #36	; 0x24
   2c5b2:	4681      	mov	r9, r0
   2c5b4:	460e      	mov	r6, r1
   2c5b6:	4617      	mov	r7, r2
	block_size =
   2c5b8:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   2c5bc:	b91c      	cbnz	r4, 2c5c6 <nvs_flash_block_cmp+0x22>
	return 0;
   2c5be:	4620      	mov	r0, r4
}
   2c5c0:	b009      	add	sp, #36	; 0x24
   2c5c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   2c5c6:	42ac      	cmp	r4, r5
   2c5c8:	46a0      	mov	r8, r4
   2c5ca:	bf28      	it	cs
   2c5cc:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   2c5ce:	4643      	mov	r3, r8
   2c5d0:	466a      	mov	r2, sp
   2c5d2:	4631      	mov	r1, r6
   2c5d4:	4648      	mov	r0, r9
   2c5d6:	f7ff ffd7 	bl	2c588 <nvs_flash_rd>
		if (rc) {
   2c5da:	2800      	cmp	r0, #0
   2c5dc:	d1f0      	bne.n	2c5c0 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   2c5de:	4642      	mov	r2, r8
   2c5e0:	4669      	mov	r1, sp
   2c5e2:	4638      	mov	r0, r7
   2c5e4:	f001 fd10 	bl	2e008 <memcmp>
		if (rc) {
   2c5e8:	b920      	cbnz	r0, 2c5f4 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   2c5ea:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2c5ee:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   2c5f0:	4447      	add	r7, r8
   2c5f2:	e7e3      	b.n	2c5bc <nvs_flash_block_cmp+0x18>
			return 1;
   2c5f4:	2001      	movs	r0, #1
   2c5f6:	e7e3      	b.n	2c5c0 <nvs_flash_block_cmp+0x1c>

0002c5f8 <nvs_flash_cmp_const>:
{
   2c5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c5fc:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2c5fe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2c600:	681d      	ldr	r5, [r3, #0]
   2c602:	426d      	negs	r5, r5
{
   2c604:	b088      	sub	sp, #32
	block_size =
   2c606:	f005 0520 	and.w	r5, r5, #32
{
   2c60a:	4607      	mov	r7, r0
   2c60c:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   2c60e:	4668      	mov	r0, sp
{
   2c610:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   2c612:	462a      	mov	r2, r5
   2c614:	f001 fd14 	bl	2e040 <memset>
	while (len) {
   2c618:	b91c      	cbnz	r4, 2c622 <nvs_flash_cmp_const+0x2a>
	return 0;
   2c61a:	4620      	mov	r0, r4
}
   2c61c:	b008      	add	sp, #32
   2c61e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   2c622:	42ac      	cmp	r4, r5
   2c624:	46a0      	mov	r8, r4
   2c626:	bf28      	it	cs
   2c628:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   2c62a:	4643      	mov	r3, r8
   2c62c:	466a      	mov	r2, sp
   2c62e:	4631      	mov	r1, r6
   2c630:	4638      	mov	r0, r7
   2c632:	f7ff ffb7 	bl	2c5a4 <nvs_flash_block_cmp>
		if (rc) {
   2c636:	2800      	cmp	r0, #0
   2c638:	d1f0      	bne.n	2c61c <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   2c63a:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2c63e:	4446      	add	r6, r8
   2c640:	e7ea      	b.n	2c618 <nvs_flash_cmp_const+0x20>

0002c642 <nvs_flash_erase_sector>:
{
   2c642:	b538      	push	{r3, r4, r5, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2c644:	8982      	ldrh	r2, [r0, #12]
   2c646:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
   2c648:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2c64a:	0c09      	lsrs	r1, r1, #16
{
   2c64c:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   2c64e:	042d      	lsls	r5, r5, #16
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   2c650:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2c652:	fb02 3101 	mla	r1, r2, r1, r3
	rc = api->erase(dev, offset, size);
   2c656:	6883      	ldr	r3, [r0, #8]
   2c658:	689b      	ldr	r3, [r3, #8]
   2c65a:	4798      	blx	r3
	if (rc) {
   2c65c:	b950      	cbnz	r0, 2c674 <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   2c65e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   2c660:	89a3      	ldrh	r3, [r4, #12]
   2c662:	7912      	ldrb	r2, [r2, #4]
   2c664:	4629      	mov	r1, r5
   2c666:	4620      	mov	r0, r4
   2c668:	f7ff ffc6 	bl	2c5f8 <nvs_flash_cmp_const>
		rc = -ENXIO;
   2c66c:	2800      	cmp	r0, #0
   2c66e:	bf18      	it	ne
   2c670:	f06f 0005 	mvnne.w	r0, #5
}
   2c674:	bd38      	pop	{r3, r4, r5, pc}

0002c676 <nvs_ate_crc8_update>:
{
   2c676:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2c678:	4601      	mov	r1, r0
{
   2c67a:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2c67c:	2207      	movs	r2, #7
   2c67e:	20ff      	movs	r0, #255	; 0xff
   2c680:	f7e1 fdce 	bl	e220 <crc8_ccitt>
	entry->crc8 = crc8;
   2c684:	71e0      	strb	r0, [r4, #7]
}
   2c686:	bd10      	pop	{r4, pc}

0002c688 <z_log_msg2_static_create.constprop.0>:
   2c688:	2300      	movs	r3, #0
   2c68a:	f7ff bf1c 	b.w	2c4c6 <z_impl_z_log_msg2_static_create>

0002c68e <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   2c68e:	680b      	ldr	r3, [r1, #0]
   2c690:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   2c694:	0c1a      	lsrs	r2, r3, #16
   2c696:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   2c69a:	bf08      	it	eq
   2c69c:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   2c6a0:	600b      	str	r3, [r1, #0]
}
   2c6a2:	4770      	bx	lr

0002c6a4 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   2c6a4:	7803      	ldrb	r3, [r0, #0]
   2c6a6:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   2c6a8:	bf81      	itttt	hi
   2c6aa:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   2c6ae:	18c9      	addhi	r1, r1, r3
   2c6b0:	425b      	neghi	r3, r3
   2c6b2:	4019      	andhi	r1, r3
}
   2c6b4:	4608      	mov	r0, r1
   2c6b6:	4770      	bx	lr

0002c6b8 <nvs_ate_valid>:
{
   2c6b8:	b570      	push	{r4, r5, r6, lr}
   2c6ba:	460c      	mov	r4, r1
   2c6bc:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2c6be:	2108      	movs	r1, #8
   2c6c0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2c6c2:	f7ff ffef 	bl	2c6a4 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2c6c6:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2c6c8:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2c6ca:	4621      	mov	r1, r4
   2c6cc:	20ff      	movs	r0, #255	; 0xff
   2c6ce:	f7e1 fda7 	bl	e220 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   2c6d2:	79e3      	ldrb	r3, [r4, #7]
   2c6d4:	4283      	cmp	r3, r0
   2c6d6:	d107      	bne.n	2c6e8 <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   2c6d8:	89a8      	ldrh	r0, [r5, #12]
   2c6da:	8863      	ldrh	r3, [r4, #2]
   2c6dc:	1b80      	subs	r0, r0, r6
	if ((nvs_ate_crc8_check(entry)) ||
   2c6de:	4283      	cmp	r3, r0
   2c6e0:	bf2c      	ite	cs
   2c6e2:	2000      	movcs	r0, #0
   2c6e4:	2001      	movcc	r0, #1
}
   2c6e6:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   2c6e8:	2000      	movs	r0, #0
   2c6ea:	e7fc      	b.n	2c6e6 <nvs_ate_valid+0x2e>

0002c6ec <nvs_close_ate_valid>:
{
   2c6ec:	b538      	push	{r3, r4, r5, lr}
   2c6ee:	4605      	mov	r5, r0
   2c6f0:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   2c6f2:	f7ff ffe1 	bl	2c6b8 <nvs_ate_valid>
   2c6f6:	b1a0      	cbz	r0, 2c722 <nvs_close_ate_valid+0x36>
   2c6f8:	88a0      	ldrh	r0, [r4, #4]
   2c6fa:	b998      	cbnz	r0, 2c724 <nvs_close_ate_valid+0x38>
   2c6fc:	8822      	ldrh	r2, [r4, #0]
   2c6fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2c702:	429a      	cmp	r2, r3
   2c704:	d10d      	bne.n	2c722 <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2c706:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   2c708:	2108      	movs	r1, #8
   2c70a:	f7ff ffcb 	bl	2c6a4 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   2c70e:	8862      	ldrh	r2, [r4, #2]
   2c710:	89ab      	ldrh	r3, [r5, #12]
   2c712:	1a9b      	subs	r3, r3, r2
   2c714:	fbb3 f2f0 	udiv	r2, r3, r0
   2c718:	fb02 3010 	mls	r0, r2, r0, r3
   2c71c:	fab0 f080 	clz	r0, r0
   2c720:	0940      	lsrs	r0, r0, #5
}
   2c722:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   2c724:	2000      	movs	r0, #0
   2c726:	e7fc      	b.n	2c722 <nvs_close_ate_valid+0x36>

0002c728 <nvs_prev_ate>:
{
   2c728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2c72a:	4605      	mov	r5, r0
   2c72c:	460e      	mov	r6, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2c72e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2c730:	2108      	movs	r1, #8
   2c732:	f7ff ffb7 	bl	2c6a4 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2c736:	6831      	ldr	r1, [r6, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2c738:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2c73a:	2308      	movs	r3, #8
   2c73c:	4628      	mov	r0, r5
   2c73e:	f7ff ff23 	bl	2c588 <nvs_flash_rd>
	if (rc) {
   2c742:	4604      	mov	r4, r0
   2c744:	2800      	cmp	r0, #0
   2c746:	d138      	bne.n	2c7ba <nvs_prev_ate+0x92>
	*addr += ate_size;
   2c748:	6833      	ldr	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   2c74a:	89a8      	ldrh	r0, [r5, #12]
	*addr += ate_size;
   2c74c:	443b      	add	r3, r7
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   2c74e:	b29a      	uxth	r2, r3
   2c750:	1bc7      	subs	r7, r0, r7
   2c752:	42ba      	cmp	r2, r7
	*addr += ate_size;
   2c754:	6033      	str	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   2c756:	d130      	bne.n	2c7ba <nvs_prev_ate+0x92>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   2c758:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   2c75a:	bf03      	ittte	eq
   2c75c:	89e9      	ldrheq	r1, [r5, #14]
   2c75e:	f101 31ff 	addeq.w	r1, r1, #4294967295	; 0xffffffff
   2c762:	eb03 4101 	addeq.w	r1, r3, r1, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   2c766:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   2c76a:	6031      	str	r1, [r6, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2c76c:	2308      	movs	r3, #8
   2c76e:	466a      	mov	r2, sp
   2c770:	4628      	mov	r0, r5
   2c772:	f7ff ff09 	bl	2c588 <nvs_flash_rd>
	if (rc) {
   2c776:	4604      	mov	r4, r0
   2c778:	b9f8      	cbnz	r0, 2c7ba <nvs_prev_ate+0x92>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   2c77a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   2c77c:	466a      	mov	r2, sp
   2c77e:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2c780:	4603      	mov	r3, r0
		if (data8[i] != value) {
   2c782:	f812 0b01 	ldrb.w	r0, [r2], #1
   2c786:	4281      	cmp	r1, r0
   2c788:	d10c      	bne.n	2c7a4 <nvs_prev_ate+0x7c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2c78a:	3301      	adds	r3, #1
   2c78c:	2b08      	cmp	r3, #8
   2c78e:	d1f8      	bne.n	2c782 <nvs_prev_ate+0x5a>
		*addr = fs->ate_wra;
   2c790:	686b      	ldr	r3, [r5, #4]
   2c792:	e005      	b.n	2c7a0 <nvs_prev_ate+0x78>
		(*addr) &= ADDR_SECT_MASK;
   2c794:	6833      	ldr	r3, [r6, #0]
		(*addr) += close_ate.offset;
   2c796:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   2c79a:	0c1b      	lsrs	r3, r3, #16
   2c79c:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   2c79e:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   2c7a0:	6033      	str	r3, [r6, #0]
		return 0;
   2c7a2:	e00a      	b.n	2c7ba <nvs_prev_ate+0x92>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2c7a4:	4669      	mov	r1, sp
   2c7a6:	4628      	mov	r0, r5
   2c7a8:	f7ff ffa0 	bl	2c6ec <nvs_close_ate_valid>
   2c7ac:	2800      	cmp	r0, #0
   2c7ae:	d1f1      	bne.n	2c794 <nvs_prev_ate+0x6c>
	return nvs_recover_last_ate(fs, addr);
   2c7b0:	4631      	mov	r1, r6
   2c7b2:	4628      	mov	r0, r5
   2c7b4:	f7e2 ff90 	bl	f6d8 <nvs_recover_last_ate>
   2c7b8:	4604      	mov	r4, r0
}
   2c7ba:	4620      	mov	r0, r4
   2c7bc:	b003      	add	sp, #12
   2c7be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002c7c0 <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   2c7c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2c7c4:	8985      	ldrh	r5, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   2c7c6:	4607      	mov	r7, r0
	offset += addr & ADDR_OFFS_MASK;
   2c7c8:	6800      	ldr	r0, [r0, #0]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   2c7ca:	461c      	mov	r4, r3
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2c7cc:	0c0b      	lsrs	r3, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   2c7ce:	fa10 f181 	uxtah	r1, r0, r1
   2c7d2:	fb03 1505 	mla	r5, r3, r5, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   2c7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2c7d8:	681e      	ldr	r6, [r3, #0]
   2c7da:	4276      	negs	r6, r6
	if (blen > 0) {
   2c7dc:	4026      	ands	r6, r4
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   2c7de:	b089      	sub	sp, #36	; 0x24
   2c7e0:	4690      	mov	r8, r2
	if (blen > 0) {
   2c7e2:	d00a      	beq.n	2c7fa <nvs_flash_al_wrt.part.0+0x3a>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   2c7e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   2c7e6:	6883      	ldr	r3, [r0, #8]
   2c7e8:	4629      	mov	r1, r5
   2c7ea:	f8d3 9004 	ldr.w	r9, [r3, #4]
   2c7ee:	4633      	mov	r3, r6
   2c7f0:	47c8      	blx	r9
		if (rc) {
   2c7f2:	b9c0      	cbnz	r0, 2c826 <nvs_flash_al_wrt.part.0+0x66>
		len -= blen;
   2c7f4:	1ba4      	subs	r4, r4, r6
		offset += blen;
   2c7f6:	4435      	add	r5, r6
		data8 += blen;
   2c7f8:	44b0      	add	r8, r6
	if (len) {
   2c7fa:	b1bc      	cbz	r4, 2c82c <nvs_flash_al_wrt.part.0+0x6c>
		memcpy(buf, data8, len);
   2c7fc:	4622      	mov	r2, r4
   2c7fe:	4641      	mov	r1, r8
   2c800:	4668      	mov	r0, sp
   2c802:	f001 fc12 	bl	2e02a <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   2c806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2c808:	681a      	ldr	r2, [r3, #0]
   2c80a:	7919      	ldrb	r1, [r3, #4]
   2c80c:	1b12      	subs	r2, r2, r4
   2c80e:	eb0d 0004 	add.w	r0, sp, r4
   2c812:	f001 fc15 	bl	2e040 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   2c816:	e9d7 030a 	ldrd	r0, r3, [r7, #40]	; 0x28
   2c81a:	681b      	ldr	r3, [r3, #0]
   2c81c:	6882      	ldr	r2, [r0, #8]
   2c81e:	4629      	mov	r1, r5
   2c820:	6854      	ldr	r4, [r2, #4]
   2c822:	466a      	mov	r2, sp
   2c824:	47a0      	blx	r4
}
   2c826:	b009      	add	sp, #36	; 0x24
   2c828:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
end:
   2c82c:	4620      	mov	r0, r4
   2c82e:	e7fa      	b.n	2c826 <nvs_flash_al_wrt.part.0+0x66>

0002c830 <nvs_flash_data_wrt>:
{
   2c830:	b538      	push	{r3, r4, r5, lr}
   2c832:	4604      	mov	r4, r0
	if (!len) {
   2c834:	4615      	mov	r5, r2
   2c836:	b12a      	cbz	r2, 2c844 <nvs_flash_data_wrt+0x14>
   2c838:	4613      	mov	r3, r2
   2c83a:	460a      	mov	r2, r1
   2c83c:	6881      	ldr	r1, [r0, #8]
   2c83e:	f7ff ffbf 	bl	2c7c0 <nvs_flash_al_wrt.part.0>
   2c842:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   2c844:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2c846:	4629      	mov	r1, r5
   2c848:	f7ff ff2c 	bl	2c6a4 <nvs_al_size.isra.0>
   2c84c:	68a3      	ldr	r3, [r4, #8]
   2c84e:	4403      	add	r3, r0
   2c850:	60a3      	str	r3, [r4, #8]
}
   2c852:	4610      	mov	r0, r2
   2c854:	bd38      	pop	{r3, r4, r5, pc}

0002c856 <nvs_flash_ate_wrt>:
{
   2c856:	b510      	push	{r4, lr}
   2c858:	460a      	mov	r2, r1
	if (!len) {
   2c85a:	2308      	movs	r3, #8
   2c85c:	6841      	ldr	r1, [r0, #4]
{
   2c85e:	4604      	mov	r4, r0
   2c860:	f7ff ffae 	bl	2c7c0 <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2c864:	2108      	movs	r1, #8
   2c866:	4602      	mov	r2, r0
   2c868:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2c86a:	f7ff ff1b 	bl	2c6a4 <nvs_al_size.isra.0>
   2c86e:	6863      	ldr	r3, [r4, #4]
   2c870:	1a1b      	subs	r3, r3, r0
   2c872:	6063      	str	r3, [r4, #4]
}
   2c874:	4610      	mov	r0, r2
   2c876:	bd10      	pop	{r4, pc}

0002c878 <nvs_add_gc_done_ate>:
{
   2c878:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   2c87a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2c87e:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   2c882:	2300      	movs	r3, #0
{
   2c884:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   2c886:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2c88a:	6883      	ldr	r3, [r0, #8]
   2c88c:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   2c890:	4668      	mov	r0, sp
   2c892:	f7ff fef0 	bl	2c676 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   2c896:	4669      	mov	r1, sp
   2c898:	4620      	mov	r0, r4
   2c89a:	f7ff ffdc 	bl	2c856 <nvs_flash_ate_wrt>
}
   2c89e:	b002      	add	sp, #8
   2c8a0:	bd10      	pop	{r4, pc}

0002c8a2 <nvs_gc>:
{
   2c8a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c8a6:	4604      	mov	r4, r0
   2c8a8:	b093      	sub	sp, #76	; 0x4c
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2c8aa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2c8ac:	2108      	movs	r1, #8
   2c8ae:	f7ff fef9 	bl	2c6a4 <nvs_al_size.isra.0>
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   2c8b2:	6863      	ldr	r3, [r4, #4]
   2c8b4:	0c1b      	lsrs	r3, r3, #16
   2c8b6:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2c8b8:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
   2c8ba:	a901      	add	r1, sp, #4
   2c8bc:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   2c8be:	9301      	str	r3, [sp, #4]
	nvs_sector_advance(fs, &sec_addr);
   2c8c0:	f7ff fee5 	bl	2c68e <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   2c8c4:	9b01      	ldr	r3, [sp, #4]
   2c8c6:	89a1      	ldrh	r1, [r4, #12]
   2c8c8:	4419      	add	r1, r3
   2c8ca:	1b49      	subs	r1, r1, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2c8cc:	2308      	movs	r3, #8
   2c8ce:	aa04      	add	r2, sp, #16
   2c8d0:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   2c8d2:	9102      	str	r1, [sp, #8]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2c8d4:	f7ff fe58 	bl	2c588 <nvs_flash_rd>
	if (rc < 0) {
   2c8d8:	2800      	cmp	r0, #0
   2c8da:	f2c0 8094 	blt.w	2ca06 <nvs_gc+0x164>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   2c8de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2c8e0:	aa04      	add	r2, sp, #16
   2c8e2:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2c8e4:	2300      	movs	r3, #0
		if (data8[i] != value) {
   2c8e6:	f812 0b01 	ldrb.w	r0, [r2], #1
   2c8ea:	4281      	cmp	r1, r0
   2c8ec:	d17c      	bne.n	2c9e8 <nvs_gc+0x146>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2c8ee:	3301      	adds	r3, #1
   2c8f0:	2b08      	cmp	r3, #8
   2c8f2:	d1f8      	bne.n	2c8e6 <nvs_gc+0x44>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   2c8f4:	68a0      	ldr	r0, [r4, #8]
   2c8f6:	6863      	ldr	r3, [r4, #4]
   2c8f8:	4428      	add	r0, r5
   2c8fa:	4283      	cmp	r3, r0
   2c8fc:	d26e      	bcs.n	2c9dc <nvs_gc+0x13a>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   2c8fe:	9901      	ldr	r1, [sp, #4]
   2c900:	4620      	mov	r0, r4
   2c902:	f7ff fe9e 	bl	2c642 <nvs_flash_erase_sector>
	if (rc) {
   2c906:	e07e      	b.n	2ca06 <nvs_gc+0x164>
		gc_addr &= ADDR_SECT_MASK;
   2c908:	9b02      	ldr	r3, [sp, #8]
		gc_addr += close_ate.offset;
   2c90a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
		gc_addr &= ADDR_SECT_MASK;
   2c90e:	0c1b      	lsrs	r3, r3, #16
   2c910:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
   2c912:	4413      	add	r3, r2
   2c914:	9302      	str	r3, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   2c916:	aa06      	add	r2, sp, #24
   2c918:	a902      	add	r1, sp, #8
   2c91a:	4620      	mov	r0, r4
		gc_prev_addr = gc_addr;
   2c91c:	f8dd a008 	ldr.w	sl, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   2c920:	f7ff ff02 	bl	2c728 <nvs_prev_ate>
		if (rc) {
   2c924:	2800      	cmp	r0, #0
   2c926:	d16e      	bne.n	2ca06 <nvs_gc+0x164>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   2c928:	a906      	add	r1, sp, #24
   2c92a:	4620      	mov	r0, r4
   2c92c:	f7ff fec4 	bl	2c6b8 <nvs_ate_valid>
   2c930:	2800      	cmp	r0, #0
   2c932:	d034      	beq.n	2c99e <nvs_gc+0xfc>
		wlk_addr = fs->ate_wra;
   2c934:	6863      	ldr	r3, [r4, #4]
   2c936:	9303      	str	r3, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2c938:	aa08      	add	r2, sp, #32
   2c93a:	a903      	add	r1, sp, #12
   2c93c:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   2c93e:	9e03      	ldr	r6, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2c940:	f7ff fef2 	bl	2c728 <nvs_prev_ate>
			if (rc) {
   2c944:	2800      	cmp	r0, #0
   2c946:	d15e      	bne.n	2ca06 <nvs_gc+0x164>
			if ((wlk_ate.id == gc_ate.id) &&
   2c948:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2c94c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   2c950:	429a      	cmp	r2, r3
   2c952:	d027      	beq.n	2c9a4 <nvs_gc+0x102>
		} while (wlk_addr != fs->ate_wra);
   2c954:	6862      	ldr	r2, [r4, #4]
   2c956:	9b03      	ldr	r3, [sp, #12]
   2c958:	429a      	cmp	r2, r3
   2c95a:	d1ed      	bne.n	2c938 <nvs_gc+0x96>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   2c95c:	4556      	cmp	r6, sl
   2c95e:	d11e      	bne.n	2c99e <nvs_gc+0xfc>
   2c960:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   2c964:	b1db      	cbz	r3, 2c99e <nvs_gc+0xfc>
			data_addr += gc_ate.offset;
   2c966:	f8bd 301a 	ldrh.w	r3, [sp, #26]
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   2c96a:	ea4f 471a 	mov.w	r7, sl, lsr #16
   2c96e:	043f      	lsls	r7, r7, #16
			data_addr += gc_ate.offset;
   2c970:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   2c972:	a806      	add	r0, sp, #24
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2c974:	68a3      	ldr	r3, [r4, #8]
   2c976:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
   2c97a:	f7ff fe7c 	bl	2c676 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2c97e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   2c980:	f8bd 801c 	ldrh.w	r8, [sp, #28]
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2c984:	681e      	ldr	r6, [r3, #0]
   2c986:	4276      	negs	r6, r6
	block_size =
   2c988:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   2c98c:	f1b8 0f00 	cmp.w	r8, #0
   2c990:	d10f      	bne.n	2c9b2 <nvs_gc+0x110>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   2c992:	a906      	add	r1, sp, #24
   2c994:	4620      	mov	r0, r4
   2c996:	f7ff ff5e 	bl	2c856 <nvs_flash_ate_wrt>
			if (rc) {
   2c99a:	2800      	cmp	r0, #0
   2c99c:	d133      	bne.n	2ca06 <nvs_gc+0x164>
	} while (gc_prev_addr != stop_addr);
   2c99e:	45ca      	cmp	sl, r9
   2c9a0:	d1b9      	bne.n	2c916 <nvs_gc+0x74>
gc_done:
   2c9a2:	e7a7      	b.n	2c8f4 <nvs_gc+0x52>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   2c9a4:	a908      	add	r1, sp, #32
   2c9a6:	4620      	mov	r0, r4
   2c9a8:	f7ff fe86 	bl	2c6b8 <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   2c9ac:	2800      	cmp	r0, #0
   2c9ae:	d0d1      	beq.n	2c954 <nvs_gc+0xb2>
   2c9b0:	e7d4      	b.n	2c95c <nvs_gc+0xba>
		bytes_to_copy = MIN(block_size, len);
   2c9b2:	4546      	cmp	r6, r8
   2c9b4:	46b3      	mov	fp, r6
   2c9b6:	bf28      	it	cs
   2c9b8:	46c3      	movcs	fp, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   2c9ba:	465b      	mov	r3, fp
   2c9bc:	aa0a      	add	r2, sp, #40	; 0x28
   2c9be:	4639      	mov	r1, r7
   2c9c0:	4620      	mov	r0, r4
   2c9c2:	f7ff fde1 	bl	2c588 <nvs_flash_rd>
		if (rc) {
   2c9c6:	b9f0      	cbnz	r0, 2ca06 <nvs_gc+0x164>
		rc = nvs_flash_data_wrt(fs, buf, bytes_to_copy);
   2c9c8:	465a      	mov	r2, fp
   2c9ca:	a90a      	add	r1, sp, #40	; 0x28
   2c9cc:	4620      	mov	r0, r4
   2c9ce:	f7ff ff2f 	bl	2c830 <nvs_flash_data_wrt>
		if (rc) {
   2c9d2:	b9c0      	cbnz	r0, 2ca06 <nvs_gc+0x164>
		len -= bytes_to_copy;
   2c9d4:	eba8 080b 	sub.w	r8, r8, fp
		addr += bytes_to_copy;
   2c9d8:	445f      	add	r7, fp
   2c9da:	e7d7      	b.n	2c98c <nvs_gc+0xea>
		rc = nvs_add_gc_done_ate(fs);
   2c9dc:	4620      	mov	r0, r4
   2c9de:	f7ff ff4b 	bl	2c878 <nvs_add_gc_done_ate>
		if (rc) {
   2c9e2:	2800      	cmp	r0, #0
   2c9e4:	d08b      	beq.n	2c8fe <nvs_gc+0x5c>
   2c9e6:	e00e      	b.n	2ca06 <nvs_gc+0x164>
	stop_addr = gc_addr - ate_size;
   2c9e8:	9b02      	ldr	r3, [sp, #8]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2c9ea:	a904      	add	r1, sp, #16
   2c9ec:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   2c9ee:	eba3 0905 	sub.w	r9, r3, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2c9f2:	f7ff fe7b 	bl	2c6ec <nvs_close_ate_valid>
   2c9f6:	2800      	cmp	r0, #0
   2c9f8:	d186      	bne.n	2c908 <nvs_gc+0x66>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   2c9fa:	a902      	add	r1, sp, #8
   2c9fc:	4620      	mov	r0, r4
   2c9fe:	f7e2 fe6b 	bl	f6d8 <nvs_recover_last_ate>
		if (rc) {
   2ca02:	2800      	cmp	r0, #0
   2ca04:	d087      	beq.n	2c916 <nvs_gc+0x74>
}
   2ca06:	b013      	add	sp, #76	; 0x4c
   2ca08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002ca0c <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   2ca0c:	2300      	movs	r3, #0
   2ca0e:	461a      	mov	r2, r3
   2ca10:	f7e3 b868 	b.w	fae4 <nvs_write>

0002ca14 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   2ca14:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   2ca16:	2400      	movs	r4, #0
   2ca18:	9400      	str	r4, [sp, #0]
   2ca1a:	f7e3 f935 	bl	fc88 <nvs_read_hist>
	return rc;
}
   2ca1e:	b002      	add	sp, #8
   2ca20:	bd10      	pop	{r4, pc}

0002ca22 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   2ca22:	4770      	bx	lr

0002ca24 <get_sectors_cb>:
{
   2ca24:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   2ca26:	6802      	ldr	r2, [r0, #0]
   2ca28:	684c      	ldr	r4, [r1, #4]
   2ca2a:	42a2      	cmp	r2, r4
   2ca2c:	d316      	bcc.n	2ca5c <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   2ca2e:	688b      	ldr	r3, [r1, #8]
   2ca30:	4423      	add	r3, r4
   2ca32:	429a      	cmp	r2, r3
   2ca34:	d206      	bcs.n	2ca44 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   2ca36:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   2ca3a:	42ab      	cmp	r3, r5
   2ca3c:	d304      	bcc.n	2ca48 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   2ca3e:	f06f 030b 	mvn.w	r3, #11
   2ca42:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   2ca44:	2000      	movs	r0, #0
   2ca46:	e00a      	b.n	2ca5e <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   2ca48:	68cd      	ldr	r5, [r1, #12]
   2ca4a:	1b12      	subs	r2, r2, r4
   2ca4c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   2ca50:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   2ca54:	6842      	ldr	r2, [r0, #4]
   2ca56:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   2ca58:	3301      	adds	r3, #1
   2ca5a:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   2ca5c:	2001      	movs	r0, #1
}
   2ca5e:	bd70      	pop	{r4, r5, r6, pc}

0002ca60 <settings_load>:
	return settings_load_subtree(NULL);
   2ca60:	2000      	movs	r0, #0
   2ca62:	f7e3 ba05 	b.w	fe70 <settings_load_subtree>

0002ca66 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   2ca66:	2200      	movs	r2, #0
   2ca68:	4611      	mov	r1, r2
   2ca6a:	f7e3 b9c7 	b.w	fdfc <settings_save_one>

0002ca6e <settings_name_steq>:
{
   2ca6e:	4603      	mov	r3, r0
   2ca70:	b530      	push	{r4, r5, lr}
   2ca72:	4608      	mov	r0, r1
	if (next) {
   2ca74:	b10a      	cbz	r2, 2ca7a <settings_name_steq+0xc>
		*next = NULL;
   2ca76:	2100      	movs	r1, #0
   2ca78:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   2ca7a:	b163      	cbz	r3, 2ca96 <settings_name_steq+0x28>
   2ca7c:	b190      	cbz	r0, 2caa4 <settings_name_steq+0x36>
   2ca7e:	1e41      	subs	r1, r0, #1
   2ca80:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   2ca82:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   2ca86:	4604      	mov	r4, r0
   2ca88:	f810 3b01 	ldrb.w	r3, [r0], #1
   2ca8c:	b15d      	cbz	r5, 2caa6 <settings_name_steq+0x38>
   2ca8e:	429d      	cmp	r5, r3
   2ca90:	d101      	bne.n	2ca96 <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   2ca92:	2d3d      	cmp	r5, #61	; 0x3d
   2ca94:	d1f5      	bne.n	2ca82 <settings_name_steq+0x14>
	return 0;
   2ca96:	2000      	movs	r0, #0
   2ca98:	e004      	b.n	2caa4 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   2ca9a:	2b3d      	cmp	r3, #61	; 0x3d
   2ca9c:	d008      	beq.n	2cab0 <settings_name_steq+0x42>
   2ca9e:	fab3 f083 	clz	r0, r3
   2caa2:	0940      	lsrs	r0, r0, #5
}
   2caa4:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   2caa6:	2b2f      	cmp	r3, #47	; 0x2f
   2caa8:	d1f7      	bne.n	2ca9a <settings_name_steq+0x2c>
		if (next) {
   2caaa:	b10a      	cbz	r2, 2cab0 <settings_name_steq+0x42>
			*next = name + 1;
   2caac:	3401      	adds	r4, #1
   2caae:	6014      	str	r4, [r2, #0]
		return 1;
   2cab0:	2001      	movs	r0, #1
   2cab2:	e7f7      	b.n	2caa4 <settings_name_steq+0x36>

0002cab4 <settings_name_next>:
{
   2cab4:	b530      	push	{r4, r5, lr}
   2cab6:	4603      	mov	r3, r0
	if (next) {
   2cab8:	b109      	cbz	r1, 2cabe <settings_name_next+0xa>
		*next = NULL;
   2caba:	2200      	movs	r2, #0
   2cabc:	600a      	str	r2, [r1, #0]
	if (!name) {
   2cabe:	b16b      	cbz	r3, 2cadc <settings_name_next+0x28>
   2cac0:	461a      	mov	r2, r3
   2cac2:	4614      	mov	r4, r2
   2cac4:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   2cac6:	f812 5b01 	ldrb.w	r5, [r2], #1
   2caca:	b135      	cbz	r5, 2cada <settings_name_next+0x26>
   2cacc:	2d3d      	cmp	r5, #61	; 0x3d
   2cace:	d004      	beq.n	2cada <settings_name_next+0x26>
   2cad0:	2d2f      	cmp	r5, #47	; 0x2f
   2cad2:	d1f6      	bne.n	2cac2 <settings_name_next+0xe>
		if (next) {
   2cad4:	b109      	cbz	r1, 2cada <settings_name_next+0x26>
			*next = name + 1;
   2cad6:	3401      	adds	r4, #1
   2cad8:	600c      	str	r4, [r1, #0]
}
   2cada:	bd30      	pop	{r4, r5, pc}
		return 0;
   2cadc:	4618      	mov	r0, r3
   2cade:	e7fc      	b.n	2cada <settings_name_next+0x26>

0002cae0 <settings_nvs_read_fn>:
{
   2cae0:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   2cae2:	4613      	mov	r3, r2
{
   2cae4:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   2cae6:	460a      	mov	r2, r1
   2cae8:	8881      	ldrh	r1, [r0, #4]
   2caea:	6800      	ldr	r0, [r0, #0]
   2caec:	f7ff ff92 	bl	2ca14 <nvs_read>
}
   2caf0:	42a0      	cmp	r0, r4
   2caf2:	bfa8      	it	ge
   2caf4:	4620      	movge	r0, r4
   2caf6:	bd10      	pop	{r4, pc}

0002caf8 <settings_nvs_save>:
{
   2caf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cafc:	b097      	sub	sp, #92	; 0x5c
   2cafe:	4604      	mov	r4, r0
   2cb00:	9201      	str	r2, [sp, #4]
   2cb02:	469b      	mov	fp, r3
	if (!name) {
   2cb04:	4689      	mov	r9, r1
   2cb06:	2900      	cmp	r1, #0
   2cb08:	d069      	beq.n	2cbde <settings_nvs_save+0xe6>
	delete = ((value == NULL) || (val_len == 0));
   2cb0a:	b1da      	cbz	r2, 2cb44 <settings_nvs_save+0x4c>
   2cb0c:	fabb f78b 	clz	r7, fp
   2cb10:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   2cb12:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   2cb14:	3501      	adds	r5, #1
   2cb16:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   2cb18:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   2cb1a:	f104 0a08 	add.w	sl, r4, #8
		name_id--;
   2cb1e:	1e6e      	subs	r6, r5, #1
   2cb20:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   2cb22:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   2cb26:	d02e      	beq.n	2cb86 <settings_nvs_save+0x8e>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   2cb28:	234a      	movs	r3, #74	; 0x4a
   2cb2a:	aa03      	add	r2, sp, #12
   2cb2c:	4631      	mov	r1, r6
   2cb2e:	4650      	mov	r0, sl
   2cb30:	f7ff ff70 	bl	2ca14 <nvs_read>
		if (rc < 0) {
   2cb34:	2800      	cmp	r0, #0
   2cb36:	da07      	bge.n	2cb48 <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   2cb38:	f110 0f02 	cmn.w	r0, #2
   2cb3c:	bf08      	it	eq
   2cb3e:	46b0      	moveq	r8, r6
   2cb40:	4635      	mov	r5, r6
   2cb42:	e7ec      	b.n	2cb1e <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   2cb44:	2701      	movs	r7, #1
   2cb46:	e7e4      	b.n	2cb12 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   2cb48:	ab16      	add	r3, sp, #88	; 0x58
   2cb4a:	4418      	add	r0, r3
   2cb4c:	2300      	movs	r3, #0
   2cb4e:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   2cb52:	a903      	add	r1, sp, #12
   2cb54:	4648      	mov	r0, r9
   2cb56:	f001 fa3a 	bl	2dfce <strcmp>
   2cb5a:	2800      	cmp	r0, #0
   2cb5c:	d1f0      	bne.n	2cb40 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   2cb5e:	2f00      	cmp	r7, #0
   2cb60:	d03b      	beq.n	2cbda <settings_nvs_save+0xe2>
   2cb62:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   2cb64:	42b3      	cmp	r3, r6
   2cb66:	d142      	bne.n	2cbee <settings_nvs_save+0xf6>
			cf->last_name_id--;
   2cb68:	4622      	mov	r2, r4
   2cb6a:	1e73      	subs	r3, r6, #1
   2cb6c:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   2cb70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2cb74:	2302      	movs	r3, #2
   2cb76:	4650      	mov	r0, sl
   2cb78:	f7e2 ffb4 	bl	fae4 <nvs_write>
			if (rc < 0) {
   2cb7c:	2800      	cmp	r0, #0
   2cb7e:	da36      	bge.n	2cbee <settings_nvs_save+0xf6>
}
   2cb80:	b017      	add	sp, #92	; 0x5c
   2cb82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   2cb86:	bb6f      	cbnz	r7, 2cbe4 <settings_nvs_save+0xec>
	write_name = true;
   2cb88:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   2cb8a:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   2cb8e:	d02b      	beq.n	2cbe8 <settings_nvs_save+0xf0>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   2cb90:	f104 0508 	add.w	r5, r4, #8
   2cb94:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   2cb98:	9a01      	ldr	r2, [sp, #4]
   2cb9a:	465b      	mov	r3, fp
   2cb9c:	b289      	uxth	r1, r1
   2cb9e:	4628      	mov	r0, r5
   2cba0:	f7e2 ffa0 	bl	fae4 <nvs_write>
	if (rc < 0) {
   2cba4:	2800      	cmp	r0, #0
   2cba6:	dbeb      	blt.n	2cb80 <settings_nvs_save+0x88>
	if (write_name) {
   2cba8:	b157      	cbz	r7, 2cbc0 <settings_nvs_save+0xc8>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   2cbaa:	4648      	mov	r0, r9
   2cbac:	f001 f9ff 	bl	2dfae <strlen>
   2cbb0:	464a      	mov	r2, r9
   2cbb2:	4603      	mov	r3, r0
   2cbb4:	4641      	mov	r1, r8
   2cbb6:	4628      	mov	r0, r5
   2cbb8:	f7e2 ff94 	bl	fae4 <nvs_write>
		if (rc < 0) {
   2cbbc:	2800      	cmp	r0, #0
   2cbbe:	dbdf      	blt.n	2cb80 <settings_nvs_save+0x88>
	if (write_name_id > cf->last_name_id) {
   2cbc0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   2cbc2:	4543      	cmp	r3, r8
   2cbc4:	d220      	bcs.n	2cc08 <settings_nvs_save+0x110>
		cf->last_name_id = write_name_id;
   2cbc6:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   2cbc8:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   2cbca:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   2cbce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2cbd2:	4628      	mov	r0, r5
   2cbd4:	f7e2 ff86 	bl	fae4 <nvs_write>
   2cbd8:	e016      	b.n	2cc08 <settings_nvs_save+0x110>
   2cbda:	46b0      	mov	r8, r6
   2cbdc:	e7d5      	b.n	2cb8a <settings_nvs_save+0x92>
		return -EINVAL;
   2cbde:	f06f 0015 	mvn.w	r0, #21
   2cbe2:	e7cd      	b.n	2cb80 <settings_nvs_save+0x88>
		return 0;
   2cbe4:	2000      	movs	r0, #0
   2cbe6:	e7cb      	b.n	2cb80 <settings_nvs_save+0x88>
		return -ENOMEM;
   2cbe8:	f06f 000b 	mvn.w	r0, #11
   2cbec:	e7c8      	b.n	2cb80 <settings_nvs_save+0x88>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   2cbee:	4631      	mov	r1, r6
   2cbf0:	4650      	mov	r0, sl
   2cbf2:	f7ff ff0b 	bl	2ca0c <nvs_delete>
			if (rc >= 0) {
   2cbf6:	2800      	cmp	r0, #0
   2cbf8:	dbc2      	blt.n	2cb80 <settings_nvs_save+0x88>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   2cbfa:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   2cbfe:	313f      	adds	r1, #63	; 0x3f
   2cc00:	b289      	uxth	r1, r1
   2cc02:	4650      	mov	r0, sl
   2cc04:	f7ff ff02 	bl	2ca0c <nvs_delete>
	if (rc < 0) {
   2cc08:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2cc0c:	e7b8      	b.n	2cb80 <settings_nvs_save+0x88>

0002cc0e <settings_nvs_backend_init>:
{
   2cc0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2cc10:	4604      	mov	r4, r0
	cf->cf_nvs.flash_device = device_get_binding(cf->flash_dev_name);
   2cc12:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   2cc14:	f7fd f986 	bl	29f24 <z_impl_device_get_binding>
   2cc18:	6320      	str	r0, [r4, #48]	; 0x30
	if (cf->cf_nvs.flash_device == NULL) {
   2cc1a:	b1c0      	cbz	r0, 2cc4e <settings_nvs_backend_init+0x40>
	rc = nvs_mount(&cf->cf_nvs);
   2cc1c:	f104 0608 	add.w	r6, r4, #8
   2cc20:	4630      	mov	r0, r6
   2cc22:	f7e2 fd8b 	bl	f73c <nvs_mount>
	if (rc) {
   2cc26:	4605      	mov	r5, r0
   2cc28:	b970      	cbnz	r0, 2cc48 <settings_nvs_backend_init+0x3a>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   2cc2a:	2302      	movs	r3, #2
   2cc2c:	f10d 0206 	add.w	r2, sp, #6
   2cc30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2cc34:	4630      	mov	r0, r6
   2cc36:	f7ff feed 	bl	2ca14 <nvs_read>
	if (rc < 0) {
   2cc3a:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   2cc3c:	bfac      	ite	ge
   2cc3e:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
		cf->last_name_id = NVS_NAMECNT_ID;
   2cc42:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   2cc46:	8723      	strh	r3, [r4, #56]	; 0x38
}
   2cc48:	4628      	mov	r0, r5
   2cc4a:	b002      	add	sp, #8
   2cc4c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   2cc4e:	f06f 0512 	mvn.w	r5, #18
   2cc52:	e7f9      	b.n	2cc48 <settings_nvs_backend_init+0x3a>

0002cc54 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   2cc54:	b538      	push	{r3, r4, r5, lr}
   2cc56:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   2cc58:	42ab      	cmp	r3, r5
{
   2cc5a:	4611      	mov	r1, r2
   2cc5c:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2cc5e:	d804      	bhi.n	2cc6a <_copy+0x16>
		(void)memcpy(to, from, from_len);
   2cc60:	461a      	mov	r2, r3
   2cc62:	f001 f9e2 	bl	2e02a <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2cc66:	4620      	mov	r0, r4
   2cc68:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2cc6a:	2400      	movs	r4, #0
   2cc6c:	e7fb      	b.n	2cc66 <_copy+0x12>

0002cc6e <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   2cc6e:	f001 b9e7 	b.w	2e040 <memset>

0002cc72 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2cc72:	09c3      	lsrs	r3, r0, #7
   2cc74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2cc78:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2cc7c:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2cc80:	b2c0      	uxtb	r0, r0
   2cc82:	4770      	bx	lr

0002cc84 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   2cc84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2cc88:	4606      	mov	r6, r0
   2cc8a:	b0a9      	sub	sp, #164	; 0xa4
   2cc8c:	4688      	mov	r8, r1
   2cc8e:	4614      	mov	r4, r2
   2cc90:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   2cc92:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   2cc96:	f7e3 fc27 	bl	104e8 <uECC_get_rng>
		if (!rng_function ||
   2cc9a:	4603      	mov	r3, r0
   2cc9c:	2800      	cmp	r0, #0
   2cc9e:	d03e      	beq.n	2cd1e <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   2cca0:	2140      	movs	r1, #64	; 0x40
   2cca2:	a808      	add	r0, sp, #32
   2cca4:	4798      	blx	r3
		if (!rng_function ||
   2cca6:	b3d0      	cbz	r0, 2cd1e <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   2cca8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   2ccac:	f112 031f 	adds.w	r3, r2, #31
   2ccb0:	bf48      	it	mi
   2ccb2:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   2ccb6:	466d      	mov	r5, sp
   2ccb8:	464a      	mov	r2, r9
   2ccba:	a908      	add	r1, sp, #32
   2ccbc:	4628      	mov	r0, r5
   2ccbe:	f343 1347 	sbfx	r3, r3, #5, #8
   2ccc2:	f000 f9ee 	bl	2d0a2 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   2ccc6:	4622      	mov	r2, r4
   2ccc8:	4629      	mov	r1, r5
   2ccca:	a818      	add	r0, sp, #96	; 0x60
   2cccc:	f000 fe03 	bl	2d8d6 <EccPoint_compute_public_key>
   2ccd0:	b318      	cbz	r0, 2cd1a <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   2ccd2:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   2ccd6:	1dd9      	adds	r1, r3, #7
   2ccd8:	bf48      	it	mi
   2ccda:	f103 010e 	addmi.w	r1, r3, #14
   2ccde:	462a      	mov	r2, r5
   2cce0:	4640      	mov	r0, r8
   2cce2:	10c9      	asrs	r1, r1, #3
   2cce4:	f000 fe1f 	bl	2d926 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   2cce8:	f994 1001 	ldrsb.w	r1, [r4, #1]
   2ccec:	aa18      	add	r2, sp, #96	; 0x60
   2ccee:	4630      	mov	r0, r6
   2ccf0:	f000 fe19 	bl	2d926 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   2ccf4:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   2ccf8:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   2ccfc:	ab18      	add	r3, sp, #96	; 0x60
   2ccfe:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   2cd02:	1870      	adds	r0, r6, r1
   2cd04:	f000 fe0f 	bl	2d926 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   2cd08:	2220      	movs	r2, #32
   2cd0a:	2100      	movs	r1, #0
   2cd0c:	4628      	mov	r0, r5
   2cd0e:	f001 f997 	bl	2e040 <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   2cd12:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   2cd14:	b029      	add	sp, #164	; 0xa4
   2cd16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   2cd1a:	3f01      	subs	r7, #1
   2cd1c:	d1bb      	bne.n	2cc96 <uECC_make_key+0x12>
        		return 0;
   2cd1e:	2000      	movs	r0, #0
   2cd20:	e7f8      	b.n	2cd14 <uECC_make_key+0x90>

0002cd22 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   2cd22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2cd26:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   2cd28:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   2cd2c:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   2cd30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   2cd34:	b0a4      	sub	sp, #144	; 0x90
   2cd36:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   2cd38:	1dda      	adds	r2, r3, #7
   2cd3a:	bf48      	it	mi
   2cd3c:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   2cd40:	ad04      	add	r5, sp, #16
{
   2cd42:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   2cd44:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   2cd46:	4628      	mov	r0, r5
   2cd48:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   2cd4a:	9502      	str	r5, [sp, #8]
   2cd4c:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   2cd4e:	f000 fdfe 	bl	2d94e <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   2cd52:	463a      	mov	r2, r7
   2cd54:	4649      	mov	r1, r9
   2cd56:	a814      	add	r0, sp, #80	; 0x50
   2cd58:	f000 fdf9 	bl	2d94e <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   2cd5c:	ab14      	add	r3, sp, #80	; 0x50
   2cd5e:	eb09 0107 	add.w	r1, r9, r7
   2cd62:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   2cd66:	463a      	mov	r2, r7
   2cd68:	f000 fdf1 	bl	2d94e <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   2cd6c:	4623      	mov	r3, r4
   2cd6e:	4632      	mov	r2, r6
   2cd70:	4629      	mov	r1, r5
   2cd72:	4628      	mov	r0, r5
   2cd74:	f000 fd83 	bl	2d87e <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   2cd78:	fab0 f380 	clz	r3, r0
   2cd7c:	9401      	str	r4, [sp, #4]
   2cd7e:	aa24      	add	r2, sp, #144	; 0x90
   2cd80:	095b      	lsrs	r3, r3, #5
   2cd82:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   2cd86:	8863      	ldrh	r3, [r4, #2]
   2cd88:	3301      	adds	r3, #1
   2cd8a:	b21b      	sxth	r3, r3
   2cd8c:	9300      	str	r3, [sp, #0]
   2cd8e:	f851 2c88 	ldr.w	r2, [r1, #-136]
   2cd92:	a914      	add	r1, sp, #80	; 0x50
   2cd94:	2300      	movs	r3, #0
   2cd96:	4608      	mov	r0, r1
   2cd98:	f000 fca4 	bl	2d6e4 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   2cd9c:	aa14      	add	r2, sp, #80	; 0x50
   2cd9e:	4639      	mov	r1, r7
   2cda0:	4640      	mov	r0, r8
   2cda2:	f000 fdc0 	bl	2d926 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   2cda6:	4621      	mov	r1, r4
   2cda8:	a814      	add	r0, sp, #80	; 0x50
   2cdaa:	f000 fc10 	bl	2d5ce <EccPoint_isZero>
   2cdae:	af02      	add	r7, sp, #8
   2cdb0:	4604      	mov	r4, r0
   2cdb2:	2208      	movs	r2, #8
   2cdb4:	2100      	movs	r1, #0
   2cdb6:	4638      	mov	r0, r7
   2cdb8:	f001 f942 	bl	2e040 <memset>
   2cdbc:	2220      	movs	r2, #32
   2cdbe:	2100      	movs	r1, #0
   2cdc0:	4630      	mov	r0, r6
   2cdc2:	f001 f93d 	bl	2e040 <memset>
   2cdc6:	2220      	movs	r2, #32
   2cdc8:	2100      	movs	r1, #0
   2cdca:	4628      	mov	r0, r5
   2cdcc:	f001 f938 	bl	2e040 <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   2cdd0:	fab4 f084 	clz	r0, r4
   2cdd4:	0940      	lsrs	r0, r0, #5
   2cdd6:	b024      	add	sp, #144	; 0x90
   2cdd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002cddc <uECC_vli_add>:
{
   2cddc:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   2cdde:	2400      	movs	r4, #0
{
   2cde0:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   2cde2:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   2cde4:	b265      	sxtb	r5, r4
   2cde6:	42ab      	cmp	r3, r5
   2cde8:	dc00      	bgt.n	2cdec <uECC_vli_add+0x10>
}
   2cdea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   2cdec:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   2cdf0:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   2cdf4:	443d      	add	r5, r7
   2cdf6:	4405      	add	r5, r0
	return (p_true*(cond)) | (p_false*(!cond));
   2cdf8:	42af      	cmp	r7, r5
   2cdfa:	f000 0001 	and.w	r0, r0, #1
   2cdfe:	bf18      	it	ne
   2ce00:	2000      	movne	r0, #0
		result[i] = sum;
   2ce02:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   2ce06:	bf88      	it	hi
   2ce08:	f040 0001 	orrhi.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   2ce0c:	3401      	adds	r4, #1
   2ce0e:	e7e9      	b.n	2cde4 <uECC_vli_add+0x8>

0002ce10 <uECC_vli_rshift1>:
	vli += num_words;
   2ce10:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   2ce14:	2300      	movs	r3, #0
	while (vli-- > end) {
   2ce16:	4288      	cmp	r0, r1
   2ce18:	d300      	bcc.n	2ce1c <uECC_vli_rshift1+0xc>
}
   2ce1a:	4770      	bx	lr
		uECC_word_t temp = *vli;
   2ce1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   2ce20:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   2ce24:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   2ce26:	07d3      	lsls	r3, r2, #31
   2ce28:	e7f5      	b.n	2ce16 <uECC_vli_rshift1+0x6>

0002ce2a <vli_modInv_update>:
	if (!EVEN(uv)) {
   2ce2a:	6803      	ldr	r3, [r0, #0]
{
   2ce2c:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   2ce2e:	f013 0601 	ands.w	r6, r3, #1
{
   2ce32:	4605      	mov	r5, r0
   2ce34:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   2ce36:	d005      	beq.n	2ce44 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   2ce38:	4613      	mov	r3, r2
   2ce3a:	460a      	mov	r2, r1
   2ce3c:	4601      	mov	r1, r0
   2ce3e:	f7ff ffcd 	bl	2cddc <uECC_vli_add>
   2ce42:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   2ce44:	4621      	mov	r1, r4
   2ce46:	4628      	mov	r0, r5
   2ce48:	f7ff ffe2 	bl	2ce10 <uECC_vli_rshift1>
	if (carry) {
   2ce4c:	b146      	cbz	r6, 2ce60 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   2ce4e:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   2ce52:	3a01      	subs	r2, #1
   2ce54:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   2ce58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2ce5c:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   2ce60:	bd70      	pop	{r4, r5, r6, pc}

0002ce62 <uECC_vli_mult>:
	for (k = 0; k < num_words; ++k) {
   2ce62:	f04f 0c00 	mov.w	ip, #0
{
   2ce66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uECC_word_t r1 = 0;
   2ce6a:	4665      	mov	r5, ip
	uECC_word_t r0 = 0;
   2ce6c:	4664      	mov	r4, ip
	for (k = 0; k < num_words; ++k) {
   2ce6e:	fa4f f98c 	sxtb.w	r9, ip
   2ce72:	454b      	cmp	r3, r9
   2ce74:	dc16      	bgt.n	2cea4 <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   2ce76:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2ce7a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
   2ce7e:	9601      	str	r6, [sp, #4]
   2ce80:	f04f 0800 	mov.w	r8, #0
   2ce84:	9f01      	ldr	r7, [sp, #4]
   2ce86:	fa53 fe88 	uxtab	lr, r3, r8
   2ce8a:	fa4f fe8e 	sxtb.w	lr, lr
   2ce8e:	45be      	cmp	lr, r7
   2ce90:	fa5f f688 	uxtb.w	r6, r8
   2ce94:	db26      	blt.n	2cee4 <uECC_vli_mult+0x82>
	result[num_words * 2 - 1] = r0;
   2ce96:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2ce9a:	f840 4c04 	str.w	r4, [r0, #-4]
}
   2ce9e:	b003      	add	sp, #12
   2cea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   2cea4:	f04f 0e00 	mov.w	lr, #0
   2cea8:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
   2ceac:	46f0      	mov	r8, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
   2ceae:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   2ceb2:	f85a 6904 	ldr.w	r6, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   2ceb6:	fba6 6707 	umull	r6, r7, r6, r7
   2ceba:	1934      	adds	r4, r6, r4
		for (i = 0; i <= k; ++i) {
   2cebc:	f10e 0e01 	add.w	lr, lr, #1
   2cec0:	417d      	adcs	r5, r7
   2cec2:	fa4f f68e 	sxtb.w	r6, lr
   2cec6:	f04f 0b00 	mov.w	fp, #0
   2ceca:	bf28      	it	cs
   2cecc:	f04f 0b01 	movcs.w	fp, #1
   2ced0:	454e      	cmp	r6, r9
	*r2 += (r01 < p);
   2ced2:	44d8      	add	r8, fp
		for (i = 0; i <= k; ++i) {
   2ced4:	ddeb      	ble.n	2ceae <uECC_vli_mult+0x4c>
		result[k] = r0;
   2ced6:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   2ceda:	462c      	mov	r4, r5
   2cedc:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   2cee0:	4645      	mov	r5, r8
   2cee2:	e7c4      	b.n	2ce6e <uECC_vli_mult+0xc>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   2cee4:	3601      	adds	r6, #1
   2cee6:	46a9      	mov	r9, r5
   2cee8:	b276      	sxtb	r6, r6
   2ceea:	eb02 0a8e 	add.w	sl, r2, lr, lsl #2
   2ceee:	2500      	movs	r5, #0
   2cef0:	b277      	sxtb	r7, r6
   2cef2:	42bb      	cmp	r3, r7
   2cef4:	dc05      	bgt.n	2cf02 <uECC_vli_mult+0xa0>
		result[k] = r0;
   2cef6:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   2cefa:	f108 0801 	add.w	r8, r8, #1
		result[k] = r0;
   2cefe:	464c      	mov	r4, r9
   2cf00:	e7c0      	b.n	2ce84 <uECC_vli_mult+0x22>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   2cf02:	f06f 0703 	mvn.w	r7, #3
   2cf06:	4377      	muls	r7, r6
	uECC_dword_t p = (uECC_dword_t)a * b;
   2cf08:	f851 c026 	ldr.w	ip, [r1, r6, lsl #2]
   2cf0c:	f85a 7007 	ldr.w	r7, [sl, r7]
   2cf10:	fba7 7c0c 	umull	r7, ip, r7, ip
   2cf14:	193c      	adds	r4, r7, r4
   2cf16:	eb5c 0909 	adcs.w	r9, ip, r9
   2cf1a:	f04f 0b00 	mov.w	fp, #0
   2cf1e:	bf28      	it	cs
   2cf20:	f04f 0b01 	movcs.w	fp, #1
	*r2 += (r01 < p);
   2cf24:	445d      	add	r5, fp
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   2cf26:	3601      	adds	r6, #1
   2cf28:	e7e2      	b.n	2cef0 <uECC_vli_mult+0x8e>

0002cf2a <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   2cf2a:	2300      	movs	r3, #0
{
   2cf2c:	b510      	push	{r4, lr}
		 vli[i] = 0;
   2cf2e:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   2cf30:	b25a      	sxtb	r2, r3
   2cf32:	4291      	cmp	r1, r2
   2cf34:	dc00      	bgt.n	2cf38 <uECC_vli_clear+0xe>
}
   2cf36:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   2cf38:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   2cf3c:	3301      	adds	r3, #1
   2cf3e:	e7f7      	b.n	2cf30 <uECC_vli_clear+0x6>

0002cf40 <uECC_vli_isZero>:
{
   2cf40:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   2cf42:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   2cf44:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   2cf46:	b25c      	sxtb	r4, r3
   2cf48:	42a1      	cmp	r1, r4
   2cf4a:	dc03      	bgt.n	2cf54 <uECC_vli_isZero+0x14>
}
   2cf4c:	fab2 f082 	clz	r0, r2
   2cf50:	0940      	lsrs	r0, r0, #5
   2cf52:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   2cf54:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   2cf58:	3301      	adds	r3, #1
   2cf5a:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   2cf5c:	e7f3      	b.n	2cf46 <uECC_vli_isZero+0x6>

0002cf5e <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2cf5e:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   2cf60:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2cf62:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   2cf66:	f001 011f 	and.w	r1, r1, #31
   2cf6a:	fa03 f101 	lsl.w	r1, r3, r1
}
   2cf6e:	4008      	ands	r0, r1
   2cf70:	4770      	bx	lr

0002cf72 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   2cf72:	3901      	subs	r1, #1
{
   2cf74:	b510      	push	{r4, lr}
   2cf76:	4602      	mov	r2, r0
   2cf78:	b249      	sxtb	r1, r1
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   2cf7a:	1d04      	adds	r4, r0, #4
   2cf7c:	0608      	lsls	r0, r1, #24
   2cf7e:	b2cb      	uxtb	r3, r1
   2cf80:	d404      	bmi.n	2cf8c <uECC_vli_numBits+0x1a>
   2cf82:	3901      	subs	r1, #1
   2cf84:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
   2cf88:	2800      	cmp	r0, #0
   2cf8a:	d0f7      	beq.n	2cf7c <uECC_vli_numBits+0xa>
	return (i + 1);
   2cf8c:	3301      	adds	r3, #1
   2cf8e:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   2cf90:	b150      	cbz	r0, 2cfa8 <uECC_vli_numBits+0x36>
	digit = vli[num_digits - 1];
   2cf92:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   2cf96:	3b01      	subs	r3, #1
   2cf98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   2cf9c:	2300      	movs	r3, #0
   2cf9e:	b922      	cbnz	r2, 2cfaa <uECC_vli_numBits+0x38>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   2cfa0:	3801      	subs	r0, #1
   2cfa2:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   2cfa6:	b200      	sxth	r0, r0
}
   2cfa8:	bd10      	pop	{r4, pc}
		digit >>= 1;
   2cfaa:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   2cfac:	3301      	adds	r3, #1
   2cfae:	e7f6      	b.n	2cf9e <uECC_vli_numBits+0x2c>

0002cfb0 <uECC_vli_set>:
{
   2cfb0:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   2cfb2:	2300      	movs	r3, #0
   2cfb4:	b25c      	sxtb	r4, r3
   2cfb6:	42a2      	cmp	r2, r4
   2cfb8:	dc00      	bgt.n	2cfbc <uECC_vli_set+0xc>
}
   2cfba:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   2cfbc:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   2cfc0:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   2cfc4:	3301      	adds	r3, #1
   2cfc6:	e7f5      	b.n	2cfb4 <uECC_vli_set+0x4>

0002cfc8 <uECC_vli_cmp_unsafe>:
{
   2cfc8:	b510      	push	{r4, lr}
	for (i = num_words - 1; i >= 0; --i) {
   2cfca:	3a01      	subs	r2, #1
   2cfcc:	b252      	sxtb	r2, r2
   2cfce:	0613      	lsls	r3, r2, #24
   2cfd0:	d501      	bpl.n	2cfd6 <uECC_vli_cmp_unsafe+0xe>
	return 0;
   2cfd2:	2000      	movs	r0, #0
}
   2cfd4:	bd10      	pop	{r4, pc}
		if (left[i] > right[i]) {
   2cfd6:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   2cfda:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   2cfde:	429c      	cmp	r4, r3
   2cfe0:	d805      	bhi.n	2cfee <uECC_vli_cmp_unsafe+0x26>
		} else if (left[i] < right[i]) {
   2cfe2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
   2cfe6:	d2f2      	bcs.n	2cfce <uECC_vli_cmp_unsafe+0x6>
			return -1;
   2cfe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2cfec:	e7f2      	b.n	2cfd4 <uECC_vli_cmp_unsafe+0xc>
			return 1;
   2cfee:	2001      	movs	r0, #1
   2cff0:	e7f0      	b.n	2cfd4 <uECC_vli_cmp_unsafe+0xc>

0002cff2 <uECC_vli_equal>:
{
   2cff2:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   2cff4:	3a01      	subs	r2, #1
   2cff6:	b252      	sxtb	r2, r2
	uECC_word_t diff = 0;
   2cff8:	2300      	movs	r3, #0
	for (i = num_words - 1; i >= 0; --i) {
   2cffa:	0614      	lsls	r4, r2, #24
   2cffc:	d503      	bpl.n	2d006 <uECC_vli_equal+0x14>
}
   2cffe:	1e18      	subs	r0, r3, #0
   2d000:	bf18      	it	ne
   2d002:	2001      	movne	r0, #1
   2d004:	bd30      	pop	{r4, r5, pc}
		diff |= (left[i] ^ right[i]);
   2d006:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   2d00a:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   2d00e:	406c      	eors	r4, r5
   2d010:	4323      	orrs	r3, r4
	for (i = num_words - 1; i >= 0; --i) {
   2d012:	3a01      	subs	r2, #1
   2d014:	e7f1      	b.n	2cffa <uECC_vli_equal+0x8>

0002d016 <uECC_vli_sub>:
{
   2d016:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   2d018:	2400      	movs	r4, #0
{
   2d01a:	4606      	mov	r6, r0
   2d01c:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   2d01e:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   2d020:	b265      	sxtb	r5, r4
   2d022:	4565      	cmp	r5, ip
   2d024:	db00      	blt.n	2d028 <uECC_vli_sub+0x12>
}
   2d026:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   2d028:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   2d02c:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   2d030:	1a3d      	subs	r5, r7, r0
   2d032:	1aed      	subs	r5, r5, r3
	return (p_true*(cond)) | (p_false*(!cond));
   2d034:	42af      	cmp	r7, r5
   2d036:	f000 0001 	and.w	r0, r0, #1
   2d03a:	bf18      	it	ne
   2d03c:	2000      	movne	r0, #0
		result[i] = diff;
   2d03e:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   2d042:	bf38      	it	cc
   2d044:	f040 0001 	orrcc.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   2d048:	3401      	adds	r4, #1
   2d04a:	e7e9      	b.n	2d020 <uECC_vli_sub+0xa>

0002d04c <uECC_vli_modAdd>:
{
   2d04c:	b570      	push	{r4, r5, r6, lr}
   2d04e:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   2d052:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   2d054:	4633      	mov	r3, r6
{
   2d056:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   2d058:	f7ff fec0 	bl	2cddc <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   2d05c:	b930      	cbnz	r0, 2d06c <uECC_vli_modAdd+0x20>
   2d05e:	4632      	mov	r2, r6
   2d060:	4621      	mov	r1, r4
   2d062:	4628      	mov	r0, r5
   2d064:	f7ff ffb0 	bl	2cfc8 <uECC_vli_cmp_unsafe>
   2d068:	2801      	cmp	r0, #1
   2d06a:	d007      	beq.n	2d07c <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   2d06c:	4633      	mov	r3, r6
   2d06e:	462a      	mov	r2, r5
   2d070:	4621      	mov	r1, r4
   2d072:	4620      	mov	r0, r4
}
   2d074:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   2d078:	f7ff bfcd 	b.w	2d016 <uECC_vli_sub>
}
   2d07c:	bd70      	pop	{r4, r5, r6, pc}

0002d07e <uECC_vli_modSub>:
{
   2d07e:	b570      	push	{r4, r5, r6, lr}
   2d080:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   2d084:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   2d086:	4633      	mov	r3, r6
{
   2d088:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   2d08a:	f7ff ffc4 	bl	2d016 <uECC_vli_sub>
	if (l_borrow) {
   2d08e:	b138      	cbz	r0, 2d0a0 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   2d090:	4633      	mov	r3, r6
   2d092:	462a      	mov	r2, r5
   2d094:	4621      	mov	r1, r4
   2d096:	4620      	mov	r0, r4
}
   2d098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   2d09c:	f7ff be9e 	b.w	2cddc <uECC_vli_add>
}
   2d0a0:	bd70      	pop	{r4, r5, r6, pc}

0002d0a2 <uECC_vli_mmod>:
{
   2d0a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d0a6:	b0a5      	sub	sp, #148	; 0x94
   2d0a8:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   2d0aa:	ab14      	add	r3, sp, #80	; 0x50
   2d0ac:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   2d0b0:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   2d0b2:	4629      	mov	r1, r5
   2d0b4:	4610      	mov	r0, r2
{
   2d0b6:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   2d0b8:	f7ff ff5b 	bl	2cf72 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   2d0bc:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   2d0c0:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   2d0c2:	2c00      	cmp	r4, #0
   2d0c4:	4621      	mov	r1, r4
   2d0c6:	bfb8      	it	lt
   2d0c8:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   2d0cc:	4263      	negs	r3, r4
   2d0ce:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   2d0d2:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   2d0d6:	f004 061f 	and.w	r6, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   2d0da:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   2d0dc:	bf58      	it	pl
   2d0de:	425e      	negpl	r6, r3
	uECC_vli_clear(mod_multiple, word_shift);
   2d0e0:	f7ff ff23 	bl	2cf2a <uECC_vli_clear>
	if (bit_shift > 0) {
   2d0e4:	2e00      	cmp	r6, #0
   2d0e6:	b208      	sxth	r0, r1
   2d0e8:	dd2b      	ble.n	2d142 <uECC_vli_mmod+0xa0>
   2d0ea:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   2d0ec:	2200      	movs	r2, #0
   2d0ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   2d0f2:	f1c6 0e20 	rsb	lr, r6, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   2d0f6:	4613      	mov	r3, r2
   2d0f8:	429d      	cmp	r5, r3
   2d0fa:	d817      	bhi.n	2d12c <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   2d0fc:	006b      	lsls	r3, r5, #1
   2d0fe:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   2d100:	ab04      	add	r3, sp, #16
   2d102:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2d106:	1e6f      	subs	r7, r5, #1
   2d108:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   2d10a:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2d10c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   2d110:	2c00      	cmp	r4, #0
   2d112:	da54      	bge.n	2d1be <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   2d114:	ab24      	add	r3, sp, #144	; 0x90
   2d116:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   2d11a:	462a      	mov	r2, r5
   2d11c:	f856 1c88 	ldr.w	r1, [r6, #-136]
   2d120:	4640      	mov	r0, r8
   2d122:	f7ff ff45 	bl	2cfb0 <uECC_vli_set>
}
   2d126:	b025      	add	sp, #148	; 0x94
   2d128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   2d12c:	f857 c023 	ldr.w	ip, [r7, r3, lsl #2]
   2d130:	fa0c f106 	lsl.w	r1, ip, r6
   2d134:	430a      	orrs	r2, r1
   2d136:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   2d13a:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   2d13c:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   2d140:	e7da      	b.n	2d0f8 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   2d142:	ab04      	add	r3, sp, #16
   2d144:	462a      	mov	r2, r5
   2d146:	4639      	mov	r1, r7
   2d148:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2d14c:	f7ff ff30 	bl	2cfb0 <uECC_vli_set>
   2d150:	e7d4      	b.n	2d0fc <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   2d152:	fa0f fe82 	sxth.w	lr, r2
   2d156:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   2d15a:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   2d15e:	ab24      	add	r3, sp, #144	; 0x90
   2d160:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   2d164:	3001      	adds	r0, #1
   2d166:	f852 3c80 	ldr.w	r3, [r2, #-128]
   2d16a:	440b      	add	r3, r1
   2d16c:	ebbb 0303 	subs.w	r3, fp, r3
   2d170:	bf34      	ite	cc
   2d172:	2201      	movcc	r2, #1
   2d174:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   2d176:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   2d178:	bf18      	it	ne
   2d17a:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   2d17c:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   2d180:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   2d184:	9b01      	ldr	r3, [sp, #4]
   2d186:	b242      	sxtb	r2, r0
   2d188:	429a      	cmp	r2, r3
   2d18a:	dbe2      	blt.n	2d152 <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   2d18c:	1a73      	subs	r3, r6, r1
   2d18e:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   2d190:	4629      	mov	r1, r5
   2d192:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   2d194:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   2d196:	f7ff fe3b 	bl	2ce10 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2d19a:	ab24      	add	r3, sp, #144	; 0x90
   2d19c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   2d1a0:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2d1a2:	f853 2c80 	ldr.w	r2, [r3, #-128]
   2d1a6:	f857 3c80 	ldr.w	r3, [r7, #-128]
   2d1aa:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   2d1ae:	f847 3c80 	str.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   2d1b2:	4648      	mov	r0, r9
   2d1b4:	3c01      	subs	r4, #1
   2d1b6:	f7ff fe2b 	bl	2ce10 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   2d1ba:	b224      	sxth	r4, r4
   2d1bc:	e7a8      	b.n	2d110 <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   2d1be:	ab24      	add	r3, sp, #144	; 0x90
   2d1c0:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   2d1c2:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   2d1c6:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   2d1c8:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   2d1cc:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   2d1d0:	e7d8      	b.n	2d184 <uECC_vli_mmod+0xe2>

0002d1d2 <uECC_vli_modMult_fast>:
{
   2d1d2:	b530      	push	{r4, r5, lr}
   2d1d4:	461c      	mov	r4, r3
   2d1d6:	b091      	sub	sp, #68	; 0x44
   2d1d8:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   2d1da:	f993 3000 	ldrsb.w	r3, [r3]
   2d1de:	4668      	mov	r0, sp
   2d1e0:	f7ff fe3f 	bl	2ce62 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   2d1e4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   2d1e8:	4669      	mov	r1, sp
   2d1ea:	4628      	mov	r0, r5
   2d1ec:	4798      	blx	r3
}
   2d1ee:	b011      	add	sp, #68	; 0x44
   2d1f0:	bd30      	pop	{r4, r5, pc}

0002d1f2 <uECC_vli_modSquare_fast>:
{
   2d1f2:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   2d1f4:	460a      	mov	r2, r1
   2d1f6:	f7ff bfec 	b.w	2d1d2 <uECC_vli_modMult_fast>

0002d1fa <double_jacobian_default>:
{
   2d1fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   2d1fe:	f993 6000 	ldrsb.w	r6, [r3]
{
   2d202:	b092      	sub	sp, #72	; 0x48
   2d204:	4604      	mov	r4, r0
   2d206:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   2d208:	4610      	mov	r0, r2
   2d20a:	4631      	mov	r1, r6
{
   2d20c:	4615      	mov	r5, r2
   2d20e:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   2d210:	f7ff fe96 	bl	2cf40 <uECC_vli_isZero>
   2d214:	2800      	cmp	r0, #0
   2d216:	f040 8091 	bne.w	2d33c <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   2d21a:	463a      	mov	r2, r7
   2d21c:	4649      	mov	r1, r9
   2d21e:	a802      	add	r0, sp, #8
   2d220:	f7ff ffe7 	bl	2d1f2 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   2d224:	463b      	mov	r3, r7
   2d226:	aa02      	add	r2, sp, #8
   2d228:	4621      	mov	r1, r4
   2d22a:	a80a      	add	r0, sp, #40	; 0x28
   2d22c:	f7ff ffd1 	bl	2d1d2 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   2d230:	a902      	add	r1, sp, #8
   2d232:	4608      	mov	r0, r1
   2d234:	463a      	mov	r2, r7
   2d236:	f7ff ffdc 	bl	2d1f2 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   2d23a:	463b      	mov	r3, r7
   2d23c:	462a      	mov	r2, r5
   2d23e:	4649      	mov	r1, r9
   2d240:	4648      	mov	r0, r9
   2d242:	f7ff ffc6 	bl	2d1d2 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   2d246:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   2d24a:	463a      	mov	r2, r7
   2d24c:	4629      	mov	r1, r5
   2d24e:	4628      	mov	r0, r5
   2d250:	f7ff ffcf 	bl	2d1f2 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   2d254:	4643      	mov	r3, r8
   2d256:	462a      	mov	r2, r5
   2d258:	4621      	mov	r1, r4
   2d25a:	4620      	mov	r0, r4
   2d25c:	9600      	str	r6, [sp, #0]
   2d25e:	f7ff fef5 	bl	2d04c <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   2d262:	4643      	mov	r3, r8
   2d264:	462a      	mov	r2, r5
   2d266:	4629      	mov	r1, r5
   2d268:	4628      	mov	r0, r5
   2d26a:	9600      	str	r6, [sp, #0]
   2d26c:	f7ff feee 	bl	2d04c <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   2d270:	4643      	mov	r3, r8
   2d272:	462a      	mov	r2, r5
   2d274:	4621      	mov	r1, r4
   2d276:	4628      	mov	r0, r5
   2d278:	9600      	str	r6, [sp, #0]
   2d27a:	f7ff ff00 	bl	2d07e <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   2d27e:	463b      	mov	r3, r7
   2d280:	462a      	mov	r2, r5
   2d282:	4621      	mov	r1, r4
   2d284:	4620      	mov	r0, r4
   2d286:	f7ff ffa4 	bl	2d1d2 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   2d28a:	4643      	mov	r3, r8
   2d28c:	4622      	mov	r2, r4
   2d28e:	4621      	mov	r1, r4
   2d290:	4628      	mov	r0, r5
   2d292:	9600      	str	r6, [sp, #0]
   2d294:	f7ff feda 	bl	2d04c <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   2d298:	4643      	mov	r3, r8
   2d29a:	9600      	str	r6, [sp, #0]
   2d29c:	462a      	mov	r2, r5
   2d29e:	4621      	mov	r1, r4
   2d2a0:	4620      	mov	r0, r4
   2d2a2:	f7ff fed3 	bl	2d04c <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2d2a6:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   2d2a8:	07db      	lsls	r3, r3, #31
   2d2aa:	d54a      	bpl.n	2d342 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   2d2ac:	4633      	mov	r3, r6
   2d2ae:	4642      	mov	r2, r8
   2d2b0:	4621      	mov	r1, r4
   2d2b2:	4620      	mov	r0, r4
   2d2b4:	f7ff fd92 	bl	2cddc <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   2d2b8:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   2d2ba:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   2d2bc:	4620      	mov	r0, r4
   2d2be:	f7ff fda7 	bl	2ce10 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   2d2c2:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   2d2c6:	3b01      	subs	r3, #1
   2d2c8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   2d2cc:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   2d2d0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   2d2d4:	463a      	mov	r2, r7
   2d2d6:	4621      	mov	r1, r4
   2d2d8:	4628      	mov	r0, r5
   2d2da:	f7ff ff8a 	bl	2d1f2 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   2d2de:	4643      	mov	r3, r8
   2d2e0:	aa0a      	add	r2, sp, #40	; 0x28
   2d2e2:	4629      	mov	r1, r5
   2d2e4:	4628      	mov	r0, r5
   2d2e6:	9600      	str	r6, [sp, #0]
   2d2e8:	f7ff fec9 	bl	2d07e <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   2d2ec:	4643      	mov	r3, r8
   2d2ee:	aa0a      	add	r2, sp, #40	; 0x28
   2d2f0:	4629      	mov	r1, r5
   2d2f2:	4628      	mov	r0, r5
   2d2f4:	9600      	str	r6, [sp, #0]
   2d2f6:	f7ff fec2 	bl	2d07e <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   2d2fa:	a90a      	add	r1, sp, #40	; 0x28
   2d2fc:	4608      	mov	r0, r1
   2d2fe:	4643      	mov	r3, r8
   2d300:	462a      	mov	r2, r5
   2d302:	9600      	str	r6, [sp, #0]
   2d304:	f7ff febb 	bl	2d07e <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   2d308:	463b      	mov	r3, r7
   2d30a:	aa0a      	add	r2, sp, #40	; 0x28
   2d30c:	4621      	mov	r1, r4
   2d30e:	4620      	mov	r0, r4
   2d310:	f7ff ff5f 	bl	2d1d2 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   2d314:	aa02      	add	r2, sp, #8
   2d316:	4643      	mov	r3, r8
   2d318:	4610      	mov	r0, r2
   2d31a:	4621      	mov	r1, r4
   2d31c:	9600      	str	r6, [sp, #0]
   2d31e:	f7ff feae 	bl	2d07e <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   2d322:	4632      	mov	r2, r6
   2d324:	4629      	mov	r1, r5
   2d326:	4620      	mov	r0, r4
   2d328:	f7ff fe42 	bl	2cfb0 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   2d32c:	4649      	mov	r1, r9
   2d32e:	4628      	mov	r0, r5
   2d330:	f7ff fe3e 	bl	2cfb0 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   2d334:	a902      	add	r1, sp, #8
   2d336:	4648      	mov	r0, r9
   2d338:	f7ff fe3a 	bl	2cfb0 <uECC_vli_set>
}
   2d33c:	b012      	add	sp, #72	; 0x48
   2d33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   2d342:	4631      	mov	r1, r6
   2d344:	4620      	mov	r0, r4
   2d346:	f7ff fd63 	bl	2ce10 <uECC_vli_rshift1>
   2d34a:	e7c3      	b.n	2d2d4 <double_jacobian_default+0xda>

0002d34c <x_side_default>:
{
   2d34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d350:	4615      	mov	r5, r2
   2d352:	b08a      	sub	sp, #40	; 0x28
   2d354:	4604      	mov	r4, r0
   2d356:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   2d358:	221c      	movs	r2, #28
   2d35a:	2100      	movs	r1, #0
   2d35c:	a803      	add	r0, sp, #12
   2d35e:	f000 fe6f 	bl	2e040 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   2d362:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   2d364:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   2d368:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   2d36a:	462a      	mov	r2, r5
   2d36c:	4631      	mov	r1, r6
   2d36e:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   2d370:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   2d372:	f7ff ff3e 	bl	2d1f2 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   2d376:	463b      	mov	r3, r7
   2d378:	aa02      	add	r2, sp, #8
   2d37a:	4621      	mov	r1, r4
   2d37c:	4620      	mov	r0, r4
   2d37e:	f8cd 8000 	str.w	r8, [sp]
   2d382:	f7ff fe7c 	bl	2d07e <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   2d386:	462b      	mov	r3, r5
   2d388:	4632      	mov	r2, r6
   2d38a:	4621      	mov	r1, r4
   2d38c:	4620      	mov	r0, r4
   2d38e:	f7ff ff20 	bl	2d1d2 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   2d392:	f8cd 8000 	str.w	r8, [sp]
   2d396:	463b      	mov	r3, r7
   2d398:	f105 0284 	add.w	r2, r5, #132	; 0x84
   2d39c:	4621      	mov	r1, r4
   2d39e:	4620      	mov	r0, r4
   2d3a0:	f7ff fe54 	bl	2d04c <uECC_vli_modAdd>
}
   2d3a4:	b00a      	add	sp, #40	; 0x28
   2d3a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002d3aa <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   2d3aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d3ae:	b09a      	sub	sp, #104	; 0x68
   2d3b0:	4616      	mov	r6, r2
   2d3b2:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   2d3b6:	4644      	mov	r4, r8
{
   2d3b8:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   2d3ba:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2d3be:	9500      	str	r5, [sp, #0]
{
   2d3c0:	4607      	mov	r7, r0
   2d3c2:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2d3c4:	4623      	mov	r3, r4
   2d3c6:	4602      	mov	r2, r0
   2d3c8:	4631      	mov	r1, r6
   2d3ca:	a802      	add	r0, sp, #8
   2d3cc:	f7ff fe57 	bl	2d07e <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   2d3d0:	a902      	add	r1, sp, #8
   2d3d2:	4642      	mov	r2, r8
   2d3d4:	4608      	mov	r0, r1
   2d3d6:	f7ff ff0c 	bl	2d1f2 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   2d3da:	4643      	mov	r3, r8
   2d3dc:	aa02      	add	r2, sp, #8
   2d3de:	4639      	mov	r1, r7
   2d3e0:	4638      	mov	r0, r7
   2d3e2:	f7ff fef6 	bl	2d1d2 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   2d3e6:	4643      	mov	r3, r8
   2d3e8:	aa02      	add	r2, sp, #8
   2d3ea:	4631      	mov	r1, r6
   2d3ec:	4630      	mov	r0, r6
   2d3ee:	f7ff fef0 	bl	2d1d2 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   2d3f2:	4623      	mov	r3, r4
   2d3f4:	4652      	mov	r2, sl
   2d3f6:	4649      	mov	r1, r9
   2d3f8:	a802      	add	r0, sp, #8
   2d3fa:	9500      	str	r5, [sp, #0]
   2d3fc:	f7ff fe26 	bl	2d04c <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   2d400:	4623      	mov	r3, r4
   2d402:	4652      	mov	r2, sl
   2d404:	4649      	mov	r1, r9
   2d406:	4648      	mov	r0, r9
   2d408:	9500      	str	r5, [sp, #0]
   2d40a:	f7ff fe38 	bl	2d07e <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   2d40e:	4623      	mov	r3, r4
   2d410:	463a      	mov	r2, r7
   2d412:	4631      	mov	r1, r6
   2d414:	a80a      	add	r0, sp, #40	; 0x28
   2d416:	9500      	str	r5, [sp, #0]
   2d418:	f7ff fe31 	bl	2d07e <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   2d41c:	4643      	mov	r3, r8
   2d41e:	aa0a      	add	r2, sp, #40	; 0x28
   2d420:	4651      	mov	r1, sl
   2d422:	4650      	mov	r0, sl
   2d424:	f7ff fed5 	bl	2d1d2 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   2d428:	4623      	mov	r3, r4
   2d42a:	4632      	mov	r2, r6
   2d42c:	4639      	mov	r1, r7
   2d42e:	a80a      	add	r0, sp, #40	; 0x28
   2d430:	9500      	str	r5, [sp, #0]
   2d432:	f7ff fe0b 	bl	2d04c <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   2d436:	4642      	mov	r2, r8
   2d438:	4649      	mov	r1, r9
   2d43a:	4630      	mov	r0, r6
   2d43c:	f7ff fed9 	bl	2d1f2 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   2d440:	4623      	mov	r3, r4
   2d442:	aa0a      	add	r2, sp, #40	; 0x28
   2d444:	4631      	mov	r1, r6
   2d446:	4630      	mov	r0, r6
   2d448:	9500      	str	r5, [sp, #0]
   2d44a:	f7ff fe18 	bl	2d07e <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   2d44e:	4623      	mov	r3, r4
   2d450:	4632      	mov	r2, r6
   2d452:	4639      	mov	r1, r7
   2d454:	a812      	add	r0, sp, #72	; 0x48
   2d456:	9500      	str	r5, [sp, #0]
   2d458:	f7ff fe11 	bl	2d07e <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   2d45c:	4643      	mov	r3, r8
   2d45e:	aa12      	add	r2, sp, #72	; 0x48
   2d460:	4649      	mov	r1, r9
   2d462:	4648      	mov	r0, r9
   2d464:	f7ff feb5 	bl	2d1d2 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   2d468:	4623      	mov	r3, r4
   2d46a:	4652      	mov	r2, sl
   2d46c:	4649      	mov	r1, r9
   2d46e:	4648      	mov	r0, r9
   2d470:	9500      	str	r5, [sp, #0]
   2d472:	f7ff fe04 	bl	2d07e <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   2d476:	4642      	mov	r2, r8
   2d478:	a902      	add	r1, sp, #8
   2d47a:	a812      	add	r0, sp, #72	; 0x48
   2d47c:	f7ff feb9 	bl	2d1f2 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   2d480:	a912      	add	r1, sp, #72	; 0x48
   2d482:	4623      	mov	r3, r4
   2d484:	aa0a      	add	r2, sp, #40	; 0x28
   2d486:	4608      	mov	r0, r1
   2d488:	9500      	str	r5, [sp, #0]
   2d48a:	f7ff fdf8 	bl	2d07e <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   2d48e:	4623      	mov	r3, r4
   2d490:	463a      	mov	r2, r7
   2d492:	a912      	add	r1, sp, #72	; 0x48
   2d494:	a80a      	add	r0, sp, #40	; 0x28
   2d496:	9500      	str	r5, [sp, #0]
   2d498:	f7ff fdf1 	bl	2d07e <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   2d49c:	a90a      	add	r1, sp, #40	; 0x28
   2d49e:	4643      	mov	r3, r8
   2d4a0:	aa02      	add	r2, sp, #8
   2d4a2:	4608      	mov	r0, r1
   2d4a4:	f7ff fe95 	bl	2d1d2 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   2d4a8:	4623      	mov	r3, r4
   2d4aa:	4652      	mov	r2, sl
   2d4ac:	a90a      	add	r1, sp, #40	; 0x28
   2d4ae:	4650      	mov	r0, sl
   2d4b0:	9500      	str	r5, [sp, #0]
   2d4b2:	f7ff fde4 	bl	2d07e <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   2d4b6:	462a      	mov	r2, r5
   2d4b8:	a912      	add	r1, sp, #72	; 0x48
   2d4ba:	4638      	mov	r0, r7
   2d4bc:	f7ff fd78 	bl	2cfb0 <uECC_vli_set>
}
   2d4c0:	b01a      	add	sp, #104	; 0x68
   2d4c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002d4c6 <uECC_vli_modInv>:
{
   2d4c6:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d4c8:	460f      	mov	r7, r1
   2d4ca:	b0a1      	sub	sp, #132	; 0x84
   2d4cc:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   2d4ce:	4619      	mov	r1, r3
   2d4d0:	4638      	mov	r0, r7
{
   2d4d2:	4615      	mov	r5, r2
   2d4d4:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   2d4d6:	f7ff fd33 	bl	2cf40 <uECC_vli_isZero>
   2d4da:	b128      	cbz	r0, 2d4e8 <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
   2d4dc:	4630      	mov	r0, r6
}
   2d4de:	b021      	add	sp, #132	; 0x84
   2d4e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		uECC_vli_clear(result, num_words);
   2d4e4:	f7ff bd21 	b.w	2cf2a <uECC_vli_clear>
	uECC_vli_set(a, input, num_words);
   2d4e8:	4622      	mov	r2, r4
   2d4ea:	4639      	mov	r1, r7
   2d4ec:	4668      	mov	r0, sp
   2d4ee:	f7ff fd5f 	bl	2cfb0 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   2d4f2:	4629      	mov	r1, r5
   2d4f4:	a808      	add	r0, sp, #32
   2d4f6:	f7ff fd5b 	bl	2cfb0 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   2d4fa:	a810      	add	r0, sp, #64	; 0x40
   2d4fc:	4621      	mov	r1, r4
   2d4fe:	f7ff fd14 	bl	2cf2a <uECC_vli_clear>
	u[0] = 1;
   2d502:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   2d504:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   2d506:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   2d508:	f7ff fd0f 	bl	2cf2a <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   2d50c:	4622      	mov	r2, r4
   2d50e:	a908      	add	r1, sp, #32
   2d510:	4668      	mov	r0, sp
   2d512:	f7ff fd59 	bl	2cfc8 <uECC_vli_cmp_unsafe>
   2d516:	b930      	cbnz	r0, 2d526 <uECC_vli_modInv+0x60>
  	uECC_vli_set(result, u, num_words);
   2d518:	4622      	mov	r2, r4
   2d51a:	a910      	add	r1, sp, #64	; 0x40
   2d51c:	4630      	mov	r0, r6
   2d51e:	f7ff fd47 	bl	2cfb0 <uECC_vli_set>
}
   2d522:	b021      	add	sp, #132	; 0x84
   2d524:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (EVEN(a)) {
   2d526:	9b00      	ldr	r3, [sp, #0]
   2d528:	07da      	lsls	r2, r3, #31
   2d52a:	d409      	bmi.n	2d540 <uECC_vli_modInv+0x7a>
			uECC_vli_rshift1(a, num_words);
   2d52c:	4621      	mov	r1, r4
   2d52e:	4668      	mov	r0, sp
   2d530:	f7ff fc6e 	bl	2ce10 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   2d534:	4622      	mov	r2, r4
   2d536:	4629      	mov	r1, r5
   2d538:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   2d53a:	f7ff fc76 	bl	2ce2a <vli_modInv_update>
   2d53e:	e7e5      	b.n	2d50c <uECC_vli_modInv+0x46>
    		} else if (EVEN(b)) {
   2d540:	9b08      	ldr	r3, [sp, #32]
   2d542:	07db      	lsls	r3, r3, #31
   2d544:	d407      	bmi.n	2d556 <uECC_vli_modInv+0x90>
			uECC_vli_rshift1(b, num_words);
   2d546:	4621      	mov	r1, r4
   2d548:	a808      	add	r0, sp, #32
   2d54a:	f7ff fc61 	bl	2ce10 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   2d54e:	4622      	mov	r2, r4
   2d550:	4629      	mov	r1, r5
   2d552:	a818      	add	r0, sp, #96	; 0x60
   2d554:	e7f1      	b.n	2d53a <uECC_vli_modInv+0x74>
		} else if (cmpResult > 0) {
   2d556:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   2d558:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   2d55a:	dd1c      	ble.n	2d596 <uECC_vli_modInv+0xd0>
			uECC_vli_sub(a, a, b, num_words);
   2d55c:	aa08      	add	r2, sp, #32
   2d55e:	4669      	mov	r1, sp
   2d560:	4668      	mov	r0, sp
   2d562:	f7ff fd58 	bl	2d016 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   2d566:	4621      	mov	r1, r4
   2d568:	4668      	mov	r0, sp
   2d56a:	f7ff fc51 	bl	2ce10 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   2d56e:	4622      	mov	r2, r4
   2d570:	a918      	add	r1, sp, #96	; 0x60
   2d572:	a810      	add	r0, sp, #64	; 0x40
   2d574:	f7ff fd28 	bl	2cfc8 <uECC_vli_cmp_unsafe>
   2d578:	2800      	cmp	r0, #0
   2d57a:	da05      	bge.n	2d588 <uECC_vli_modInv+0xc2>
        			uECC_vli_add(u, u, mod, num_words);
   2d57c:	a910      	add	r1, sp, #64	; 0x40
   2d57e:	4623      	mov	r3, r4
   2d580:	462a      	mov	r2, r5
   2d582:	4608      	mov	r0, r1
   2d584:	f7ff fc2a 	bl	2cddc <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   2d588:	a910      	add	r1, sp, #64	; 0x40
   2d58a:	4623      	mov	r3, r4
   2d58c:	aa18      	add	r2, sp, #96	; 0x60
   2d58e:	4608      	mov	r0, r1
   2d590:	f7ff fd41 	bl	2d016 <uECC_vli_sub>
   2d594:	e7ce      	b.n	2d534 <uECC_vli_modInv+0x6e>
      			uECC_vli_sub(b, b, a, num_words);
   2d596:	466a      	mov	r2, sp
   2d598:	a808      	add	r0, sp, #32
   2d59a:	f7ff fd3c 	bl	2d016 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   2d59e:	4621      	mov	r1, r4
   2d5a0:	a808      	add	r0, sp, #32
   2d5a2:	f7ff fc35 	bl	2ce10 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   2d5a6:	4622      	mov	r2, r4
   2d5a8:	a910      	add	r1, sp, #64	; 0x40
   2d5aa:	a818      	add	r0, sp, #96	; 0x60
   2d5ac:	f7ff fd0c 	bl	2cfc8 <uECC_vli_cmp_unsafe>
   2d5b0:	2800      	cmp	r0, #0
   2d5b2:	da05      	bge.n	2d5c0 <uECC_vli_modInv+0xfa>
        			uECC_vli_add(v, v, mod, num_words);
   2d5b4:	a918      	add	r1, sp, #96	; 0x60
   2d5b6:	4623      	mov	r3, r4
   2d5b8:	462a      	mov	r2, r5
   2d5ba:	4608      	mov	r0, r1
   2d5bc:	f7ff fc0e 	bl	2cddc <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   2d5c0:	a918      	add	r1, sp, #96	; 0x60
   2d5c2:	4623      	mov	r3, r4
   2d5c4:	aa10      	add	r2, sp, #64	; 0x40
   2d5c6:	4608      	mov	r0, r1
   2d5c8:	f7ff fd25 	bl	2d016 <uECC_vli_sub>
   2d5cc:	e7bf      	b.n	2d54e <uECC_vli_modInv+0x88>

0002d5ce <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   2d5ce:	7809      	ldrb	r1, [r1, #0]
   2d5d0:	0049      	lsls	r1, r1, #1
   2d5d2:	b249      	sxtb	r1, r1
   2d5d4:	f7ff bcb4 	b.w	2cf40 <uECC_vli_isZero>

0002d5d8 <apply_z>:
{
   2d5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d5da:	4615      	mov	r5, r2
   2d5dc:	b089      	sub	sp, #36	; 0x24
   2d5de:	461c      	mov	r4, r3
   2d5e0:	4607      	mov	r7, r0
   2d5e2:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   2d5e4:	461a      	mov	r2, r3
   2d5e6:	4629      	mov	r1, r5
   2d5e8:	4668      	mov	r0, sp
   2d5ea:	f7ff fe02 	bl	2d1f2 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   2d5ee:	4623      	mov	r3, r4
   2d5f0:	466a      	mov	r2, sp
   2d5f2:	4639      	mov	r1, r7
   2d5f4:	4638      	mov	r0, r7
   2d5f6:	f7ff fdec 	bl	2d1d2 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   2d5fa:	4623      	mov	r3, r4
   2d5fc:	462a      	mov	r2, r5
   2d5fe:	4669      	mov	r1, sp
   2d600:	4668      	mov	r0, sp
   2d602:	f7ff fde6 	bl	2d1d2 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   2d606:	4623      	mov	r3, r4
   2d608:	466a      	mov	r2, sp
   2d60a:	4631      	mov	r1, r6
   2d60c:	4630      	mov	r0, r6
   2d60e:	f7ff fde0 	bl	2d1d2 <uECC_vli_modMult_fast>
}
   2d612:	b009      	add	sp, #36	; 0x24
   2d614:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002d616 <XYcZ_add>:
{
   2d616:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d61a:	b08a      	sub	sp, #40	; 0x28
   2d61c:	4614      	mov	r4, r2
   2d61e:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   2d622:	4655      	mov	r5, sl
{
   2d624:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   2d626:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2d62a:	9600      	str	r6, [sp, #0]
{
   2d62c:	4680      	mov	r8, r0
   2d62e:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2d630:	462b      	mov	r3, r5
   2d632:	4602      	mov	r2, r0
   2d634:	4621      	mov	r1, r4
   2d636:	a802      	add	r0, sp, #8
   2d638:	f7ff fd21 	bl	2d07e <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   2d63c:	a902      	add	r1, sp, #8
   2d63e:	4652      	mov	r2, sl
   2d640:	4608      	mov	r0, r1
   2d642:	f7ff fdd6 	bl	2d1f2 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   2d646:	4653      	mov	r3, sl
   2d648:	aa02      	add	r2, sp, #8
   2d64a:	4641      	mov	r1, r8
   2d64c:	4640      	mov	r0, r8
   2d64e:	f7ff fdc0 	bl	2d1d2 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   2d652:	4653      	mov	r3, sl
   2d654:	aa02      	add	r2, sp, #8
   2d656:	4621      	mov	r1, r4
   2d658:	4620      	mov	r0, r4
   2d65a:	f7ff fdba 	bl	2d1d2 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   2d65e:	462b      	mov	r3, r5
   2d660:	464a      	mov	r2, r9
   2d662:	4639      	mov	r1, r7
   2d664:	4638      	mov	r0, r7
   2d666:	9600      	str	r6, [sp, #0]
   2d668:	f7ff fd09 	bl	2d07e <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   2d66c:	4652      	mov	r2, sl
   2d66e:	4639      	mov	r1, r7
   2d670:	a802      	add	r0, sp, #8
   2d672:	f7ff fdbe 	bl	2d1f2 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   2d676:	a902      	add	r1, sp, #8
   2d678:	462b      	mov	r3, r5
   2d67a:	4642      	mov	r2, r8
   2d67c:	4608      	mov	r0, r1
   2d67e:	9600      	str	r6, [sp, #0]
   2d680:	f7ff fcfd 	bl	2d07e <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   2d684:	a902      	add	r1, sp, #8
   2d686:	462b      	mov	r3, r5
   2d688:	4622      	mov	r2, r4
   2d68a:	4608      	mov	r0, r1
   2d68c:	9600      	str	r6, [sp, #0]
   2d68e:	f7ff fcf6 	bl	2d07e <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   2d692:	462b      	mov	r3, r5
   2d694:	4642      	mov	r2, r8
   2d696:	4621      	mov	r1, r4
   2d698:	4620      	mov	r0, r4
   2d69a:	9600      	str	r6, [sp, #0]
   2d69c:	f7ff fcef 	bl	2d07e <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   2d6a0:	4653      	mov	r3, sl
   2d6a2:	4622      	mov	r2, r4
   2d6a4:	4649      	mov	r1, r9
   2d6a6:	4648      	mov	r0, r9
   2d6a8:	f7ff fd93 	bl	2d1d2 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   2d6ac:	462b      	mov	r3, r5
   2d6ae:	aa02      	add	r2, sp, #8
   2d6b0:	4641      	mov	r1, r8
   2d6b2:	4620      	mov	r0, r4
   2d6b4:	9600      	str	r6, [sp, #0]
   2d6b6:	f7ff fce2 	bl	2d07e <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   2d6ba:	4653      	mov	r3, sl
   2d6bc:	4622      	mov	r2, r4
   2d6be:	4639      	mov	r1, r7
   2d6c0:	4638      	mov	r0, r7
   2d6c2:	f7ff fd86 	bl	2d1d2 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   2d6c6:	462b      	mov	r3, r5
   2d6c8:	464a      	mov	r2, r9
   2d6ca:	4639      	mov	r1, r7
   2d6cc:	4638      	mov	r0, r7
   2d6ce:	9600      	str	r6, [sp, #0]
   2d6d0:	f7ff fcd5 	bl	2d07e <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   2d6d4:	4632      	mov	r2, r6
   2d6d6:	a902      	add	r1, sp, #8
   2d6d8:	4620      	mov	r0, r4
   2d6da:	f7ff fc69 	bl	2cfb0 <uECC_vli_set>
}
   2d6de:	b00a      	add	sp, #40	; 0x28
   2d6e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002d6e4 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   2d6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d6e8:	b0b1      	sub	sp, #196	; 0xc4
   2d6ea:	e9cd 0103 	strd	r0, r1, [sp, #12]
   2d6ee:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   2d6f0:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   2d6f4:	a818      	add	r0, sp, #96	; 0x60
{
   2d6f6:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   2d6f8:	463a      	mov	r2, r7
{
   2d6fa:	461d      	mov	r5, r3
	uECC_vli_set(Rx[1], point, num_words);
   2d6fc:	f7ff fc58 	bl	2cfb0 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   2d700:	00bb      	lsls	r3, r7, #2
   2d702:	9305      	str	r3, [sp, #20]
   2d704:	9b04      	ldr	r3, [sp, #16]
   2d706:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   2d70a:	4619      	mov	r1, r3
   2d70c:	a828      	add	r0, sp, #160	; 0xa0
   2d70e:	9302      	str	r3, [sp, #8]
   2d710:	f7ff fc4e 	bl	2cfb0 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   2d714:	f994 6000 	ldrsb.w	r6, [r4]
	if (initial_Z) {
   2d718:	2d00      	cmp	r5, #0
   2d71a:	f000 8086 	beq.w	2d82a <EccPoint_mult+0x146>
		uECC_vli_set(z, initial_Z, num_words);
   2d71e:	4632      	mov	r2, r6
   2d720:	4629      	mov	r1, r5
   2d722:	a808      	add	r0, sp, #32
   2d724:	f7ff fc44 	bl	2cfb0 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   2d728:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   2d72c:	4632      	mov	r2, r6
   2d72e:	a918      	add	r1, sp, #96	; 0x60
   2d730:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   2d732:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   2d736:	f7ff fc3b 	bl	2cfb0 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   2d73a:	a928      	add	r1, sp, #160	; 0xa0
   2d73c:	4648      	mov	r0, r9
   2d73e:	f7ff fc37 	bl	2cfb0 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   2d742:	4623      	mov	r3, r4
   2d744:	aa08      	add	r2, sp, #32
   2d746:	a818      	add	r0, sp, #96	; 0x60
   2d748:	f7ff ff46 	bl	2d5d8 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   2d74c:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   2d750:	4623      	mov	r3, r4
   2d752:	aa08      	add	r2, sp, #32
   2d754:	a928      	add	r1, sp, #160	; 0xa0
   2d756:	a818      	add	r0, sp, #96	; 0x60
   2d758:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   2d75a:	4623      	mov	r3, r4
   2d75c:	aa08      	add	r2, sp, #32
   2d75e:	4649      	mov	r1, r9
   2d760:	4640      	mov	r0, r8
   2d762:	f7ff ff39 	bl	2d5d8 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   2d766:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   2d76a:	3d02      	subs	r5, #2
   2d76c:	b22d      	sxth	r5, r5
   2d76e:	2d00      	cmp	r5, #0
   2d770:	dc62      	bgt.n	2d838 <EccPoint_mult+0x154>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2d772:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2d776:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2d778:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2d77c:	ab10      	add	r3, sp, #64	; 0x40
   2d77e:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   2d782:	43ed      	mvns	r5, r5
   2d784:	ab20      	add	r3, sp, #128	; 0x80
   2d786:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   2d78a:	f005 0501 	and.w	r5, r5, #1
   2d78e:	ab10      	add	r3, sp, #64	; 0x40
   2d790:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   2d794:	ab20      	add	r3, sp, #128	; 0x80
   2d796:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   2d79a:	462b      	mov	r3, r5
   2d79c:	464a      	mov	r2, r9
   2d79e:	4631      	mov	r1, r6
   2d7a0:	4640      	mov	r0, r8

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   2d7a2:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2d7a6:	f7ff fe00 	bl	2d3aa <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   2d7aa:	4653      	mov	r3, sl
   2d7ac:	aa10      	add	r2, sp, #64	; 0x40
   2d7ae:	a918      	add	r1, sp, #96	; 0x60
   2d7b0:	a808      	add	r0, sp, #32
   2d7b2:	9700      	str	r7, [sp, #0]
   2d7b4:	f7ff fc63 	bl	2d07e <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   2d7b8:	a908      	add	r1, sp, #32
   2d7ba:	4623      	mov	r3, r4
   2d7bc:	4632      	mov	r2, r6
   2d7be:	4608      	mov	r0, r1
   2d7c0:	f7ff fd07 	bl	2d1d2 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   2d7c4:	a908      	add	r1, sp, #32
   2d7c6:	9a04      	ldr	r2, [sp, #16]
   2d7c8:	4623      	mov	r3, r4
   2d7ca:	4608      	mov	r0, r1
   2d7cc:	f7ff fd01 	bl	2d1d2 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   2d7d0:	a908      	add	r1, sp, #32
   2d7d2:	463b      	mov	r3, r7
   2d7d4:	4652      	mov	r2, sl
   2d7d6:	4608      	mov	r0, r1
   2d7d8:	f7ff fe75 	bl	2d4c6 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   2d7dc:	a908      	add	r1, sp, #32
   2d7de:	9a02      	ldr	r2, [sp, #8]
   2d7e0:	4623      	mov	r3, r4
   2d7e2:	4608      	mov	r0, r1
   2d7e4:	f7ff fcf5 	bl	2d1d2 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   2d7e8:	a908      	add	r1, sp, #32
   2d7ea:	4623      	mov	r3, r4
   2d7ec:	4642      	mov	r2, r8
   2d7ee:	4608      	mov	r0, r1
   2d7f0:	f7ff fcef 	bl	2d1d2 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   2d7f4:	4633      	mov	r3, r6
   2d7f6:	4642      	mov	r2, r8
   2d7f8:	4629      	mov	r1, r5
   2d7fa:	4648      	mov	r0, r9
   2d7fc:	9400      	str	r4, [sp, #0]
   2d7fe:	f7ff ff0a 	bl	2d616 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   2d802:	4623      	mov	r3, r4
   2d804:	aa08      	add	r2, sp, #32
   2d806:	a920      	add	r1, sp, #128	; 0x80
   2d808:	a810      	add	r0, sp, #64	; 0x40
   2d80a:	f7ff fee5 	bl	2d5d8 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   2d80e:	9803      	ldr	r0, [sp, #12]
   2d810:	463a      	mov	r2, r7
   2d812:	a910      	add	r1, sp, #64	; 0x40
   2d814:	f7ff fbcc 	bl	2cfb0 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   2d818:	9803      	ldr	r0, [sp, #12]
   2d81a:	9b05      	ldr	r3, [sp, #20]
   2d81c:	a920      	add	r1, sp, #128	; 0x80
   2d81e:	4418      	add	r0, r3
   2d820:	f7ff fbc6 	bl	2cfb0 <uECC_vli_set>
}
   2d824:	b031      	add	sp, #196	; 0xc4
   2d826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   2d82a:	4631      	mov	r1, r6
   2d82c:	a808      	add	r0, sp, #32
   2d82e:	f7ff fb7c 	bl	2cf2a <uECC_vli_clear>
		z[0] = 1;
   2d832:	2301      	movs	r3, #1
   2d834:	9308      	str	r3, [sp, #32]
   2d836:	e777      	b.n	2d728 <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   2d838:	4629      	mov	r1, r5
   2d83a:	4650      	mov	r0, sl
   2d83c:	f7ff fb8f 	bl	2cf5e <uECC_vli_testBit>
   2d840:	fab0 f680 	clz	r6, r0
   2d844:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2d846:	f1c6 0101 	rsb	r1, r6, #1
   2d84a:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   2d84e:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   2d852:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   2d856:	4633      	mov	r3, r6
   2d858:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   2d85c:	465a      	mov	r2, fp
   2d85e:	9400      	str	r4, [sp, #0]
   2d860:	e9cd 0106 	strd	r0, r1, [sp, #24]
   2d864:	f7ff fda1 	bl	2d3aa <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   2d868:	9907      	ldr	r1, [sp, #28]
   2d86a:	9806      	ldr	r0, [sp, #24]
   2d86c:	9400      	str	r4, [sp, #0]
   2d86e:	460b      	mov	r3, r1
   2d870:	4602      	mov	r2, r0
   2d872:	4631      	mov	r1, r6
   2d874:	4658      	mov	r0, fp
   2d876:	f7ff fece 	bl	2d616 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   2d87a:	3d01      	subs	r5, #1
   2d87c:	e776      	b.n	2d76c <EccPoint_mult+0x88>

0002d87e <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   2d87e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2d882:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   2d886:	f119 081f 	adds.w	r8, r9, #31
{
   2d88a:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2d88c:	bf48      	it	mi
   2d88e:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   2d892:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2d894:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2d898:	3524      	adds	r5, #36	; 0x24
   2d89a:	4601      	mov	r1, r0
{
   2d89c:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2d89e:	4643      	mov	r3, r8
   2d8a0:	462a      	mov	r2, r5
   2d8a2:	4630      	mov	r0, r6
   2d8a4:	f7ff fa9a 	bl	2cddc <uECC_vli_add>
   2d8a8:	4604      	mov	r4, r0
   2d8aa:	b990      	cbnz	r0, 2d8d2 <regularize_k+0x54>
   2d8ac:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   2d8b0:	da06      	bge.n	2d8c0 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   2d8b2:	4649      	mov	r1, r9
   2d8b4:	4630      	mov	r0, r6
   2d8b6:	f7ff fb52 	bl	2cf5e <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   2d8ba:	1e04      	subs	r4, r0, #0
   2d8bc:	bf18      	it	ne
   2d8be:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   2d8c0:	4643      	mov	r3, r8
   2d8c2:	462a      	mov	r2, r5
   2d8c4:	4631      	mov	r1, r6
   2d8c6:	4638      	mov	r0, r7
   2d8c8:	f7ff fa88 	bl	2cddc <uECC_vli_add>

	return carry;
}
   2d8cc:	4620      	mov	r0, r4
   2d8ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2d8d2:	2401      	movs	r4, #1
   2d8d4:	e7f4      	b.n	2d8c0 <regularize_k+0x42>

0002d8d6 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   2d8d6:	b530      	push	{r4, r5, lr}
   2d8d8:	4614      	mov	r4, r2
   2d8da:	b095      	sub	sp, #84	; 0x54
   2d8dc:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   2d8de:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   2d8e0:	4623      	mov	r3, r4
{
   2d8e2:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   2d8e4:	a904      	add	r1, sp, #16
   2d8e6:	9102      	str	r1, [sp, #8]
   2d8e8:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   2d8ea:	f7ff ffc8 	bl	2d87e <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   2d8ee:	fab0 f380 	clz	r3, r0
   2d8f2:	095b      	lsrs	r3, r3, #5
   2d8f4:	aa14      	add	r2, sp, #80	; 0x50
   2d8f6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   2d8fa:	8863      	ldrh	r3, [r4, #2]
   2d8fc:	9401      	str	r4, [sp, #4]
   2d8fe:	3301      	adds	r3, #1
   2d900:	b21b      	sxth	r3, r3
   2d902:	9300      	str	r3, [sp, #0]
   2d904:	f852 2c48 	ldr.w	r2, [r2, #-72]
   2d908:	2300      	movs	r3, #0
   2d90a:	f104 0144 	add.w	r1, r4, #68	; 0x44
   2d90e:	4628      	mov	r0, r5
   2d910:	f7ff fee8 	bl	2d6e4 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   2d914:	4621      	mov	r1, r4
   2d916:	4628      	mov	r0, r5
   2d918:	f7ff fe59 	bl	2d5ce <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   2d91c:	fab0 f080 	clz	r0, r0
   2d920:	0940      	lsrs	r0, r0, #5
   2d922:	b015      	add	sp, #84	; 0x54
   2d924:	bd30      	pop	{r4, r5, pc}

0002d926 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   2d926:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   2d928:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   2d92a:	1e4f      	subs	r7, r1, #1
   2d92c:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   2d92e:	428c      	cmp	r4, r1
   2d930:	f105 0501 	add.w	r5, r5, #1
   2d934:	db00      	blt.n	2d938 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   2d936:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   2d938:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   2d93a:	f023 0603 	bic.w	r6, r3, #3
   2d93e:	f003 0303 	and.w	r3, r3, #3
   2d942:	5996      	ldr	r6, [r2, r6]
   2d944:	00db      	lsls	r3, r3, #3
   2d946:	fa26 f303 	lsr.w	r3, r6, r3
   2d94a:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   2d94c:	e7ee      	b.n	2d92c <uECC_vli_nativeToBytes+0x6>

0002d94e <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   2d94e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d950:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   2d952:	1cd1      	adds	r1, r2, #3
   2d954:	bf48      	it	mi
   2d956:	1d91      	addmi	r1, r2, #6
   2d958:	f341 0187 	sbfx	r1, r1, #2, #8
{
   2d95c:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   2d95e:	f7ff fae4 	bl	2cf2a <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   2d962:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   2d964:	1e67      	subs	r7, r4, #1
   2d966:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   2d968:	42a2      	cmp	r2, r4
   2d96a:	f105 0501 	add.w	r5, r5, #1
   2d96e:	db00      	blt.n	2d972 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   2d970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   2d972:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   2d974:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   2d978:	5cb2      	ldrb	r2, [r6, r2]
   2d97a:	f003 0303 	and.w	r3, r3, #3
   2d97e:	00db      	lsls	r3, r3, #3
   2d980:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   2d984:	5842      	ldr	r2, [r0, r1]
   2d986:	431a      	orrs	r2, r3
   2d988:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   2d98a:	e7ec      	b.n	2d966 <uECC_vli_bytesToNative+0x18>

0002d98c <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   2d98c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d98e:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   2d990:	f991 6000 	ldrsb.w	r6, [r1]
{
   2d994:	4605      	mov	r5, r0
   2d996:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   2d998:	f7ff fe19 	bl	2d5ce <EccPoint_isZero>
   2d99c:	bb28      	cbnz	r0, 2d9ea <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   2d99e:	1d27      	adds	r7, r4, #4
   2d9a0:	4632      	mov	r2, r6
   2d9a2:	4629      	mov	r1, r5
   2d9a4:	4638      	mov	r0, r7
   2d9a6:	f7ff fb0f 	bl	2cfc8 <uECC_vli_cmp_unsafe>
   2d9aa:	2801      	cmp	r0, #1
   2d9ac:	d120      	bne.n	2d9f0 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   2d9ae:	4632      	mov	r2, r6
   2d9b0:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   2d9b4:	4638      	mov	r0, r7
   2d9b6:	f7ff fb07 	bl	2cfc8 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   2d9ba:	2801      	cmp	r0, #1
   2d9bc:	d118      	bne.n	2d9f0 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   2d9be:	4622      	mov	r2, r4
   2d9c0:	4668      	mov	r0, sp
   2d9c2:	f7ff fc16 	bl	2d1f2 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   2d9c6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   2d9ca:	4622      	mov	r2, r4
   2d9cc:	4629      	mov	r1, r5
   2d9ce:	a808      	add	r0, sp, #32
   2d9d0:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   2d9d2:	4632      	mov	r2, r6
   2d9d4:	a908      	add	r1, sp, #32
   2d9d6:	4668      	mov	r0, sp
   2d9d8:	f7ff fb0b 	bl	2cff2 <uECC_vli_equal>
		return -3;
   2d9dc:	2800      	cmp	r0, #0
   2d9de:	bf0c      	ite	eq
   2d9e0:	2000      	moveq	r0, #0
   2d9e2:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   2d9e6:	b011      	add	sp, #68	; 0x44
   2d9e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   2d9ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d9ee:	e7fa      	b.n	2d9e6 <uECC_valid_point+0x5a>
		return -2;
   2d9f0:	f06f 0001 	mvn.w	r0, #1
   2d9f4:	e7f7      	b.n	2d9e6 <uECC_valid_point+0x5a>

0002d9f6 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   2d9f6:	b570      	push	{r4, r5, r6, lr}
   2d9f8:	460c      	mov	r4, r1
   2d9fa:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   2d9fc:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   2d9fe:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   2da02:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   2da04:	4601      	mov	r1, r0
   2da06:	4668      	mov	r0, sp
   2da08:	f7ff ffa1 	bl	2d94e <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   2da0c:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   2da10:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   2da14:	18a9      	adds	r1, r5, r2
   2da16:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   2da1a:	f7ff ff98 	bl	2d94e <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   2da1e:	2210      	movs	r2, #16
   2da20:	4631      	mov	r1, r6
   2da22:	4668      	mov	r0, sp
   2da24:	f7ff fad0 	bl	2cfc8 <uECC_vli_cmp_unsafe>
   2da28:	b128      	cbz	r0, 2da36 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   2da2a:	4621      	mov	r1, r4
   2da2c:	4668      	mov	r0, sp
   2da2e:	f7ff ffad 	bl	2d98c <uECC_valid_point>
}
   2da32:	b010      	add	sp, #64	; 0x40
   2da34:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   2da36:	f06f 0003 	mvn.w	r0, #3
   2da3a:	e7fa      	b.n	2da32 <uECC_valid_public_key+0x3c>

0002da3c <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2da3c:	78cb      	ldrb	r3, [r1, #3]
   2da3e:	7802      	ldrb	r2, [r0, #0]
   2da40:	4053      	eors	r3, r2
   2da42:	7003      	strb	r3, [r0, #0]
   2da44:	884b      	ldrh	r3, [r1, #2]
   2da46:	7842      	ldrb	r2, [r0, #1]
   2da48:	4053      	eors	r3, r2
   2da4a:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2da4c:	680a      	ldr	r2, [r1, #0]
   2da4e:	7883      	ldrb	r3, [r0, #2]
   2da50:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2da54:	7083      	strb	r3, [r0, #2]
   2da56:	680a      	ldr	r2, [r1, #0]
   2da58:	78c3      	ldrb	r3, [r0, #3]
   2da5a:	4053      	eors	r3, r2
   2da5c:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2da5e:	79cb      	ldrb	r3, [r1, #7]
   2da60:	7902      	ldrb	r2, [r0, #4]
   2da62:	4053      	eors	r3, r2
   2da64:	7103      	strb	r3, [r0, #4]
   2da66:	88cb      	ldrh	r3, [r1, #6]
   2da68:	7942      	ldrb	r2, [r0, #5]
   2da6a:	4053      	eors	r3, r2
   2da6c:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2da6e:	684a      	ldr	r2, [r1, #4]
   2da70:	7983      	ldrb	r3, [r0, #6]
   2da72:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2da76:	7183      	strb	r3, [r0, #6]
   2da78:	684a      	ldr	r2, [r1, #4]
   2da7a:	79c3      	ldrb	r3, [r0, #7]
   2da7c:	4053      	eors	r3, r2
   2da7e:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2da80:	7acb      	ldrb	r3, [r1, #11]
   2da82:	7a02      	ldrb	r2, [r0, #8]
   2da84:	4053      	eors	r3, r2
   2da86:	7203      	strb	r3, [r0, #8]
   2da88:	7a42      	ldrb	r2, [r0, #9]
   2da8a:	894b      	ldrh	r3, [r1, #10]
   2da8c:	4053      	eors	r3, r2
   2da8e:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2da90:	688a      	ldr	r2, [r1, #8]
   2da92:	7a83      	ldrb	r3, [r0, #10]
   2da94:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2da98:	7283      	strb	r3, [r0, #10]
   2da9a:	688a      	ldr	r2, [r1, #8]
   2da9c:	7ac3      	ldrb	r3, [r0, #11]
   2da9e:	4053      	eors	r3, r2
   2daa0:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2daa2:	7bcb      	ldrb	r3, [r1, #15]
   2daa4:	7b02      	ldrb	r2, [r0, #12]
   2daa6:	4053      	eors	r3, r2
   2daa8:	7303      	strb	r3, [r0, #12]
   2daaa:	89cb      	ldrh	r3, [r1, #14]
   2daac:	7b42      	ldrb	r2, [r0, #13]
   2daae:	4053      	eors	r3, r2
   2dab0:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2dab2:	68ca      	ldr	r2, [r1, #12]
   2dab4:	7b83      	ldrb	r3, [r0, #14]
   2dab6:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2daba:	7383      	strb	r3, [r0, #14]
   2dabc:	68ca      	ldr	r2, [r1, #12]
   2dabe:	7bc3      	ldrb	r3, [r0, #15]
   2dac0:	4053      	eors	r3, r2
   2dac2:	73c3      	strb	r3, [r0, #15]
}
   2dac4:	4770      	bx	lr

0002dac6 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   2dac6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2dac8:	7802      	ldrb	r2, [r0, #0]
   2daca:	f88d 2000 	strb.w	r2, [sp]
   2dace:	7942      	ldrb	r2, [r0, #5]
   2dad0:	f88d 2001 	strb.w	r2, [sp, #1]
   2dad4:	7a82      	ldrb	r2, [r0, #10]
   2dad6:	f88d 2002 	strb.w	r2, [sp, #2]
   2dada:	7bc2      	ldrb	r2, [r0, #15]
   2dadc:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2dae0:	7902      	ldrb	r2, [r0, #4]
   2dae2:	f88d 2004 	strb.w	r2, [sp, #4]
   2dae6:	7a42      	ldrb	r2, [r0, #9]
   2dae8:	f88d 2005 	strb.w	r2, [sp, #5]
   2daec:	7b82      	ldrb	r2, [r0, #14]
   2daee:	f88d 2006 	strb.w	r2, [sp, #6]
   2daf2:	78c2      	ldrb	r2, [r0, #3]
   2daf4:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2daf8:	7a02      	ldrb	r2, [r0, #8]
   2dafa:	f88d 2008 	strb.w	r2, [sp, #8]
   2dafe:	7b42      	ldrb	r2, [r0, #13]
   2db00:	f88d 2009 	strb.w	r2, [sp, #9]
   2db04:	7882      	ldrb	r2, [r0, #2]
   2db06:	f88d 200a 	strb.w	r2, [sp, #10]
   2db0a:	79c2      	ldrb	r2, [r0, #7]
   2db0c:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2db10:	7b02      	ldrb	r2, [r0, #12]
   2db12:	f88d 200c 	strb.w	r2, [sp, #12]
   2db16:	7842      	ldrb	r2, [r0, #1]
   2db18:	7ac3      	ldrb	r3, [r0, #11]
   2db1a:	f88d 200d 	strb.w	r2, [sp, #13]
   2db1e:	7982      	ldrb	r2, [r0, #6]
   2db20:	f88d 200e 	strb.w	r2, [sp, #14]
   2db24:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2db28:	2310      	movs	r3, #16
   2db2a:	466a      	mov	r2, sp
   2db2c:	4619      	mov	r1, r3
   2db2e:	f7ff f891 	bl	2cc54 <_copy>
}
   2db32:	b005      	add	sp, #20
   2db34:	f85d fb04 	ldr.w	pc, [sp], #4

0002db38 <mult_row_column>:
{
   2db38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2db3a:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2db3c:	7808      	ldrb	r0, [r1, #0]
{
   2db3e:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2db40:	f7ff f897 	bl	2cc72 <_double_byte>
   2db44:	4605      	mov	r5, r0
   2db46:	7860      	ldrb	r0, [r4, #1]
   2db48:	f7ff f893 	bl	2cc72 <_double_byte>
   2db4c:	78a2      	ldrb	r2, [r4, #2]
   2db4e:	7863      	ldrb	r3, [r4, #1]
   2db50:	4053      	eors	r3, r2
   2db52:	78e2      	ldrb	r2, [r4, #3]
   2db54:	4053      	eors	r3, r2
   2db56:	405d      	eors	r5, r3
   2db58:	4045      	eors	r5, r0
   2db5a:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2db5c:	7860      	ldrb	r0, [r4, #1]
   2db5e:	7827      	ldrb	r7, [r4, #0]
   2db60:	f7ff f887 	bl	2cc72 <_double_byte>
   2db64:	4605      	mov	r5, r0
   2db66:	78a0      	ldrb	r0, [r4, #2]
   2db68:	f7ff f883 	bl	2cc72 <_double_byte>
   2db6c:	78a3      	ldrb	r3, [r4, #2]
   2db6e:	405f      	eors	r7, r3
   2db70:	78e3      	ldrb	r3, [r4, #3]
   2db72:	405f      	eors	r7, r3
   2db74:	407d      	eors	r5, r7
   2db76:	4045      	eors	r5, r0
   2db78:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2db7a:	78a0      	ldrb	r0, [r4, #2]
   2db7c:	7865      	ldrb	r5, [r4, #1]
   2db7e:	7827      	ldrb	r7, [r4, #0]
   2db80:	f7ff f877 	bl	2cc72 <_double_byte>
   2db84:	406f      	eors	r7, r5
   2db86:	4605      	mov	r5, r0
   2db88:	78e0      	ldrb	r0, [r4, #3]
   2db8a:	f7ff f872 	bl	2cc72 <_double_byte>
   2db8e:	78e3      	ldrb	r3, [r4, #3]
   2db90:	405f      	eors	r7, r3
   2db92:	407d      	eors	r5, r7
   2db94:	4045      	eors	r5, r0
   2db96:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2db98:	7820      	ldrb	r0, [r4, #0]
   2db9a:	f7ff f86a 	bl	2cc72 <_double_byte>
   2db9e:	7863      	ldrb	r3, [r4, #1]
   2dba0:	7825      	ldrb	r5, [r4, #0]
   2dba2:	405d      	eors	r5, r3
   2dba4:	78a3      	ldrb	r3, [r4, #2]
   2dba6:	405d      	eors	r5, r3
   2dba8:	4045      	eors	r5, r0
   2dbaa:	78e0      	ldrb	r0, [r4, #3]
   2dbac:	f7ff f861 	bl	2cc72 <_double_byte>
   2dbb0:	b2ed      	uxtb	r5, r5
   2dbb2:	4045      	eors	r5, r0
   2dbb4:	70f5      	strb	r5, [r6, #3]
}
   2dbb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002dbb8 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   2dbb8:	b570      	push	{r4, r5, r6, lr}
   2dbba:	4614      	mov	r4, r2
   2dbbc:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   2dbbe:	4605      	mov	r5, r0
   2dbc0:	2800      	cmp	r0, #0
   2dbc2:	d049      	beq.n	2dc58 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   2dbc4:	2900      	cmp	r1, #0
   2dbc6:	d049      	beq.n	2dc5c <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   2dbc8:	2a00      	cmp	r2, #0
   2dbca:	d049      	beq.n	2dc60 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   2dbcc:	2310      	movs	r3, #16
   2dbce:	460a      	mov	r2, r1
   2dbd0:	4668      	mov	r0, sp
   2dbd2:	4619      	mov	r1, r3
   2dbd4:	f7ff f83e 	bl	2cc54 <_copy>
	add_round_key(state, s->words);
   2dbd8:	4621      	mov	r1, r4
   2dbda:	4668      	mov	r0, sp
   2dbdc:	f7ff ff2e 	bl	2da3c <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   2dbe0:	3410      	adds	r4, #16
   2dbe2:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   2dbe6:	4668      	mov	r0, sp
   2dbe8:	f7e2 fd48 	bl	1067c <sub_bytes>
		shift_rows(state);
   2dbec:	4668      	mov	r0, sp
   2dbee:	f7ff ff6a 	bl	2dac6 <shift_rows>
	mult_row_column(t, s);
   2dbf2:	4669      	mov	r1, sp
   2dbf4:	a804      	add	r0, sp, #16
   2dbf6:	f7ff ff9f 	bl	2db38 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   2dbfa:	a901      	add	r1, sp, #4
   2dbfc:	a805      	add	r0, sp, #20
   2dbfe:	f7ff ff9b 	bl	2db38 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   2dc02:	a902      	add	r1, sp, #8
   2dc04:	a806      	add	r0, sp, #24
   2dc06:	f7ff ff97 	bl	2db38 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   2dc0a:	a903      	add	r1, sp, #12
   2dc0c:	a807      	add	r0, sp, #28
   2dc0e:	f7ff ff93 	bl	2db38 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2dc12:	2310      	movs	r3, #16
   2dc14:	4619      	mov	r1, r3
   2dc16:	eb0d 0203 	add.w	r2, sp, r3
   2dc1a:	4668      	mov	r0, sp
   2dc1c:	f7ff f81a 	bl	2cc54 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   2dc20:	4621      	mov	r1, r4
   2dc22:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   2dc24:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   2dc26:	f7ff ff09 	bl	2da3c <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   2dc2a:	42a6      	cmp	r6, r4
   2dc2c:	d1db      	bne.n	2dbe6 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   2dc2e:	f7e2 fd25 	bl	1067c <sub_bytes>
	shift_rows(state);
   2dc32:	4668      	mov	r0, sp
   2dc34:	f7ff ff47 	bl	2dac6 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   2dc38:	4631      	mov	r1, r6
   2dc3a:	4668      	mov	r0, sp
   2dc3c:	f7ff fefe 	bl	2da3c <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   2dc40:	2310      	movs	r3, #16
   2dc42:	4619      	mov	r1, r3
   2dc44:	466a      	mov	r2, sp
   2dc46:	4628      	mov	r0, r5
   2dc48:	f7ff f804 	bl	2cc54 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   2dc4c:	4668      	mov	r0, sp
   2dc4e:	2210      	movs	r2, #16
   2dc50:	2100      	movs	r1, #0
   2dc52:	f7ff f80c 	bl	2cc6e <_set>

	return TC_CRYPTO_SUCCESS;
   2dc56:	2001      	movs	r0, #1
}
   2dc58:	b008      	add	sp, #32
   2dc5a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2dc5c:	4608      	mov	r0, r1
   2dc5e:	e7fb      	b.n	2dc58 <tc_aes_encrypt+0xa0>
   2dc60:	4610      	mov	r0, r2
   2dc62:	e7f9      	b.n	2dc58 <tc_aes_encrypt+0xa0>

0002dc64 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   2dc64:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2dc66:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   2dc68:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2dc6a:	f912 3b10 	ldrsb.w	r3, [r2], #16
   2dc6e:	2b00      	cmp	r3, #0
   2dc70:	bfb4      	ite	lt
   2dc72:	2387      	movlt	r3, #135	; 0x87
   2dc74:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2dc76:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2dc7a:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2dc7e:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   2dc80:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2dc84:	d002      	beq.n	2dc8c <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2dc86:	7813      	ldrb	r3, [r2, #0]
   2dc88:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   2dc8a:	e7f4      	b.n	2dc76 <gf_double+0x12>
	}
}
   2dc8c:	bd10      	pop	{r4, pc}

0002dc8e <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   2dc8e:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   2dc90:	b120      	cbz	r0, 2dc9c <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2dc92:	2258      	movs	r2, #88	; 0x58
   2dc94:	2100      	movs	r1, #0
   2dc96:	f7fe ffea 	bl	2cc6e <_set>
   2dc9a:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2dc9c:	bd08      	pop	{r3, pc}

0002dc9e <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   2dc9e:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2dca0:	4604      	mov	r4, r0
   2dca2:	b188      	cbz	r0, 2dcc8 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2dca4:	2210      	movs	r2, #16
   2dca6:	2100      	movs	r1, #0
   2dca8:	f7fe ffe1 	bl	2cc6e <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2dcac:	2210      	movs	r2, #16
   2dcae:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2dcb2:	2100      	movs	r1, #0
   2dcb4:	f7fe ffdb 	bl	2cc6e <_set>
	s->leftover_offset = 0;
   2dcb8:	2300      	movs	r3, #0
   2dcba:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2dcbc:	2200      	movs	r2, #0
   2dcbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2dcc2:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   2dcc6:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2dcc8:	bd10      	pop	{r4, pc}

0002dcca <tc_cmac_setup>:
{
   2dcca:	b570      	push	{r4, r5, r6, lr}
   2dccc:	460d      	mov	r5, r1
   2dcce:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   2dcd0:	4604      	mov	r4, r0
   2dcd2:	b310      	cbz	r0, 2dd1a <tc_cmac_setup+0x50>
   2dcd4:	b311      	cbz	r1, 2dd1c <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   2dcd6:	2258      	movs	r2, #88	; 0x58
   2dcd8:	2100      	movs	r1, #0
   2dcda:	f7fe ffc8 	bl	2cc6e <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   2dcde:	4629      	mov	r1, r5
	s->sched = sched;
   2dce0:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2dce2:	4630      	mov	r0, r6
   2dce4:	f7e2 fcd6 	bl	10694 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2dce8:	2210      	movs	r2, #16
   2dcea:	2100      	movs	r1, #0
   2dcec:	4620      	mov	r0, r4
   2dcee:	f7fe ffbe 	bl	2cc6e <_set>
	gf_double (s->K1, s->iv);
   2dcf2:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2dcf6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2dcf8:	4621      	mov	r1, r4
   2dcfa:	4620      	mov	r0, r4
   2dcfc:	f7ff ff5c 	bl	2dbb8 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2dd00:	4621      	mov	r1, r4
   2dd02:	4628      	mov	r0, r5
   2dd04:	f7ff ffae 	bl	2dc64 <gf_double>
	gf_double (s->K2, s->K1);
   2dd08:	4629      	mov	r1, r5
   2dd0a:	f104 0020 	add.w	r0, r4, #32
   2dd0e:	f7ff ffa9 	bl	2dc64 <gf_double>
	tc_cmac_init(s);
   2dd12:	4620      	mov	r0, r4
   2dd14:	f7ff ffc3 	bl	2dc9e <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2dd18:	2001      	movs	r0, #1
}
   2dd1a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2dd1c:	4608      	mov	r0, r1
   2dd1e:	e7fc      	b.n	2dd1a <tc_cmac_setup+0x50>

0002dd20 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   2dd20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2dd24:	460d      	mov	r5, r1
   2dd26:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2dd28:	4604      	mov	r4, r0
   2dd2a:	2800      	cmp	r0, #0
   2dd2c:	d061      	beq.n	2ddf2 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2dd2e:	b912      	cbnz	r2, 2dd36 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   2dd30:	2001      	movs	r0, #1
}
   2dd32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   2dd36:	2900      	cmp	r1, #0
   2dd38:	d05b      	beq.n	2ddf2 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   2dd3a:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   2dd3e:	ea53 0102 	orrs.w	r1, r3, r2
   2dd42:	d056      	beq.n	2ddf2 <tc_cmac_update+0xd2>
	s->countdown--;
   2dd44:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   2dd46:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   2dd4a:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   2dd4e:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2dd52:	f1b8 0f00 	cmp.w	r8, #0
   2dd56:	d02a      	beq.n	2ddae <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2dd58:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2dd5c:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   2dd60:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2dd62:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   2dd64:	d208      	bcs.n	2dd78 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2dd66:	462a      	mov	r2, r5
   2dd68:	4633      	mov	r3, r6
   2dd6a:	4631      	mov	r1, r6
   2dd6c:	f7fe ff72 	bl	2cc54 <_copy>
			s->leftover_offset += data_length;
   2dd70:	6c62      	ldr	r2, [r4, #68]	; 0x44
   2dd72:	4432      	add	r2, r6
   2dd74:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   2dd76:	e7db      	b.n	2dd30 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   2dd78:	463b      	mov	r3, r7
   2dd7a:	462a      	mov	r2, r5
   2dd7c:	4639      	mov	r1, r7
   2dd7e:	f7fe ff69 	bl	2cc54 <_copy>
		data_length -= remaining_space;
   2dd82:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   2dd84:	2300      	movs	r3, #0
   2dd86:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   2dd88:	4446      	add	r6, r8
		data += remaining_space;
   2dd8a:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2dd8c:	1e63      	subs	r3, r4, #1
   2dd8e:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   2dd92:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2dd96:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2dd9a:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   2dd9c:	ea82 0200 	eor.w	r2, r2, r0
   2dda0:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2dda2:	d1f6      	bne.n	2dd92 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2dda4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2dda6:	4621      	mov	r1, r4
   2dda8:	4620      	mov	r0, r4
   2ddaa:	f7ff ff05 	bl	2dbb8 <tc_aes_encrypt>
   2ddae:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   2ddb2:	2e10      	cmp	r6, #16
   2ddb4:	d80a      	bhi.n	2ddcc <tc_cmac_update+0xac>
	if (data_length > 0) {
   2ddb6:	2e00      	cmp	r6, #0
   2ddb8:	d0ba      	beq.n	2dd30 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   2ddba:	4633      	mov	r3, r6
   2ddbc:	462a      	mov	r2, r5
   2ddbe:	4631      	mov	r1, r6
   2ddc0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2ddc4:	f7fe ff46 	bl	2cc54 <_copy>
		s->leftover_offset = data_length;
   2ddc8:	6466      	str	r6, [r4, #68]	; 0x44
   2ddca:	e7b1      	b.n	2dd30 <tc_cmac_update+0x10>
   2ddcc:	1e63      	subs	r3, r4, #1
   2ddce:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   2ddd0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2ddd4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2ddd8:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   2ddda:	ea82 0200 	eor.w	r2, r2, r0
   2ddde:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2dde0:	d1f6      	bne.n	2ddd0 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2dde2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2dde4:	4621      	mov	r1, r4
   2dde6:	4620      	mov	r0, r4
   2dde8:	f7ff fee6 	bl	2dbb8 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2ddec:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2ddee:	3e10      	subs	r6, #16
   2ddf0:	e7df      	b.n	2ddb2 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   2ddf2:	2000      	movs	r0, #0
   2ddf4:	e79d      	b.n	2dd32 <tc_cmac_update+0x12>

0002ddf6 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   2ddf6:	b570      	push	{r4, r5, r6, lr}
   2ddf8:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2ddfa:	4605      	mov	r5, r0
   2ddfc:	b1e8      	cbz	r0, 2de3a <tc_cmac_final+0x44>
   2ddfe:	b369      	cbz	r1, 2de5c <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2de00:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2de02:	2a10      	cmp	r2, #16
   2de04:	d11a      	bne.n	2de3c <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2de06:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2de08:	1e63      	subs	r3, r4, #1
   2de0a:	3901      	subs	r1, #1
   2de0c:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2de10:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2de14:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   2de18:	4072      	eors	r2, r6
   2de1a:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2de1e:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2de20:	ea82 0206 	eor.w	r2, r2, r6
   2de24:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2de26:	d1f3      	bne.n	2de10 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2de28:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2de2a:	4621      	mov	r1, r4
   2de2c:	4628      	mov	r0, r5
   2de2e:	f7ff fec3 	bl	2dbb8 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2de32:	4620      	mov	r0, r4
   2de34:	f7ff ff2b 	bl	2dc8e <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2de38:	2001      	movs	r0, #1
}
   2de3a:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2de3c:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2de40:	2100      	movs	r1, #0
   2de42:	f1c2 0210 	rsb	r2, r2, #16
   2de46:	4420      	add	r0, r4
   2de48:	f7fe ff11 	bl	2cc6e <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2de4c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2de4e:	4423      	add	r3, r4
   2de50:	2280      	movs	r2, #128	; 0x80
   2de52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2de56:	f104 0120 	add.w	r1, r4, #32
   2de5a:	e7d5      	b.n	2de08 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   2de5c:	4608      	mov	r0, r1
   2de5e:	e7ec      	b.n	2de3a <tc_cmac_final+0x44>

0002de60 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   2de60:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2de62:	6800      	ldr	r0, [r0, #0]
   2de64:	f7e2 bc86 	b.w	10774 <z_arm_fatal_error>

0002de68 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2de68:	2100      	movs	r1, #0
   2de6a:	2001      	movs	r0, #1
   2de6c:	f7e2 bc82 	b.w	10774 <z_arm_fatal_error>

0002de70 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   2de70:	b508      	push	{r3, lr}
	handler();
   2de72:	f7e2 fd37 	bl	108e4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2de76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2de7a:	f7e2 be0f 	b.w	10a9c <z_arm_exc_exit>

0002de7e <z_log_msg2_static_create.constprop.0>:
   2de7e:	2300      	movs	r3, #0
   2de80:	f7fe bb21 	b.w	2c4c6 <z_impl_z_log_msg2_static_create>

0002de84 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   2de84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2de88:	4607      	mov	r7, r0
   2de8a:	4688      	mov	r8, r1
	register const char *s = nptr;
   2de8c:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   2de8e:	4621      	mov	r1, r4
   2de90:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   2de94:	2b20      	cmp	r3, #32
   2de96:	d0fa      	beq.n	2de8e <strtoul+0xa>
   2de98:	f1a3 0009 	sub.w	r0, r3, #9
   2de9c:	2804      	cmp	r0, #4
   2de9e:	d9f6      	bls.n	2de8e <strtoul+0xa>
	} while (isspace(c));
	if (c == '-') {
   2dea0:	2b2d      	cmp	r3, #45	; 0x2d
   2dea2:	d12f      	bne.n	2df04 <strtoul+0x80>
		neg = 1;
		c = *s++;
   2dea4:	784b      	ldrb	r3, [r1, #1]
   2dea6:	1c8c      	adds	r4, r1, #2
		neg = 1;
   2dea8:	f04f 0c01 	mov.w	ip, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   2deac:	2a00      	cmp	r2, #0
   2deae:	d05e      	beq.n	2df6e <strtoul+0xea>
   2deb0:	2a10      	cmp	r2, #16
   2deb2:	d109      	bne.n	2dec8 <strtoul+0x44>
   2deb4:	2b30      	cmp	r3, #48	; 0x30
   2deb6:	d107      	bne.n	2dec8 <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   2deb8:	7823      	ldrb	r3, [r4, #0]
   2deba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2debe:	2b58      	cmp	r3, #88	; 0x58
   2dec0:	d150      	bne.n	2df64 <strtoul+0xe0>
		c = s[1];
   2dec2:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   2dec4:	2210      	movs	r2, #16
		s += 2;
   2dec6:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   2dec8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   2decc:	2600      	movs	r6, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   2dece:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   2ded2:	fb02 fe01 	mul.w	lr, r2, r1
   2ded6:	ea6f 0e0e 	mvn.w	lr, lr
	for (acc = 0, any = 0;; c = *s++) {
   2deda:	4630      	mov	r0, r6
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   2dedc:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   2dee0:	2d09      	cmp	r5, #9
   2dee2:	d816      	bhi.n	2df12 <strtoul+0x8e>
			c -= '0';
   2dee4:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   2dee6:	429a      	cmp	r2, r3
   2dee8:	dd23      	ble.n	2df32 <strtoul+0xae>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   2deea:	2e00      	cmp	r6, #0
   2deec:	db1e      	blt.n	2df2c <strtoul+0xa8>
   2deee:	4288      	cmp	r0, r1
   2def0:	d81c      	bhi.n	2df2c <strtoul+0xa8>
   2def2:	d101      	bne.n	2def8 <strtoul+0x74>
   2def4:	4573      	cmp	r3, lr
   2def6:	dc19      	bgt.n	2df2c <strtoul+0xa8>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   2def8:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   2defc:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   2defe:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   2df02:	e7eb      	b.n	2dedc <strtoul+0x58>
	} else if (c == '+') {
   2df04:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   2df06:	bf04      	itt	eq
   2df08:	784b      	ldrbeq	r3, [r1, #1]
   2df0a:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   2df0c:	f04f 0c00 	mov.w	ip, #0
   2df10:	e7cc      	b.n	2deac <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   2df12:	f043 0520 	orr.w	r5, r3, #32
   2df16:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   2df18:	2d19      	cmp	r5, #25
   2df1a:	d80a      	bhi.n	2df32 <strtoul+0xae>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2df1c:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   2df20:	2d1a      	cmp	r5, #26
   2df22:	bf34      	ite	cc
   2df24:	2537      	movcc	r5, #55	; 0x37
   2df26:	2557      	movcs	r5, #87	; 0x57
   2df28:	1b5b      	subs	r3, r3, r5
   2df2a:	e7dc      	b.n	2dee6 <strtoul+0x62>
			any = -1;
   2df2c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2df30:	e7e5      	b.n	2defe <strtoul+0x7a>
		}
	}
	if (any < 0) {
   2df32:	2e00      	cmp	r6, #0
   2df34:	da0a      	bge.n	2df4c <strtoul+0xc8>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2df36:	f7fc f81f 	bl	29f78 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   2df3a:	2322      	movs	r3, #34	; 0x22
   2df3c:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   2df3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   2df42:	f1b8 0f00 	cmp.w	r8, #0
   2df46:	d109      	bne.n	2df5c <strtoul+0xd8>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   2df48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   2df4c:	f1bc 0f00 	cmp.w	ip, #0
   2df50:	d000      	beq.n	2df54 <strtoul+0xd0>
		acc = -acc;
   2df52:	4240      	negs	r0, r0
	if (endptr != NULL) {
   2df54:	f1b8 0f00 	cmp.w	r8, #0
   2df58:	d0f6      	beq.n	2df48 <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   2df5a:	b106      	cbz	r6, 2df5e <strtoul+0xda>
   2df5c:	1e67      	subs	r7, r4, #1
   2df5e:	f8c8 7000 	str.w	r7, [r8]
	return acc;
   2df62:	e7f1      	b.n	2df48 <strtoul+0xc4>
	if (base == 0) {
   2df64:	2330      	movs	r3, #48	; 0x30
   2df66:	2a00      	cmp	r2, #0
   2df68:	d1ae      	bne.n	2dec8 <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   2df6a:	2208      	movs	r2, #8
   2df6c:	e7ac      	b.n	2dec8 <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   2df6e:	2b30      	cmp	r3, #48	; 0x30
   2df70:	d0a2      	beq.n	2deb8 <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   2df72:	220a      	movs	r2, #10
   2df74:	e7a8      	b.n	2dec8 <strtoul+0x44>

0002df76 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   2df76:	3901      	subs	r1, #1
   2df78:	4603      	mov	r3, r0
   2df7a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2df7e:	b90a      	cbnz	r2, 2df84 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   2df80:	701a      	strb	r2, [r3, #0]

	return dest;
}
   2df82:	4770      	bx	lr
		*d = *s;
   2df84:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   2df88:	e7f7      	b.n	2df7a <strcpy+0x4>

0002df8a <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
   2df8a:	b570      	push	{r4, r5, r6, lr}
   2df8c:	4605      	mov	r5, r0
   2df8e:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   2df90:	b142      	cbz	r2, 2dfa4 <strncpy+0x1a>
   2df92:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   2df96:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   2df98:	b92c      	cbnz	r4, 2dfa6 <strncpy+0x1c>
   2df9a:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   2df9c:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   2dfa0:	429a      	cmp	r2, r3
   2dfa2:	d1fb      	bne.n	2df9c <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   2dfa4:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   2dfa6:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   2dfaa:	4632      	mov	r2, r6
   2dfac:	e7ef      	b.n	2df8e <strncpy+0x4>

0002dfae <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   2dfae:	4603      	mov	r3, r0
	size_t n = 0;
   2dfb0:	2000      	movs	r0, #0

	while (*s != '\0') {
   2dfb2:	5c1a      	ldrb	r2, [r3, r0]
   2dfb4:	b902      	cbnz	r2, 2dfb8 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   2dfb6:	4770      	bx	lr
		n++;
   2dfb8:	3001      	adds	r0, #1
   2dfba:	e7fa      	b.n	2dfb2 <strlen+0x4>

0002dfbc <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   2dfbc:	4603      	mov	r3, r0
	size_t n = 0;
   2dfbe:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   2dfc0:	5c1a      	ldrb	r2, [r3, r0]
   2dfc2:	b10a      	cbz	r2, 2dfc8 <strnlen+0xc>
   2dfc4:	4288      	cmp	r0, r1
   2dfc6:	d100      	bne.n	2dfca <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   2dfc8:	4770      	bx	lr
		n++;
   2dfca:	3001      	adds	r0, #1
   2dfcc:	e7f8      	b.n	2dfc0 <strnlen+0x4>

0002dfce <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   2dfce:	1e43      	subs	r3, r0, #1
   2dfd0:	3901      	subs	r1, #1
   2dfd2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2dfd6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   2dfda:	4282      	cmp	r2, r0
   2dfdc:	d101      	bne.n	2dfe2 <strcmp+0x14>
   2dfde:	2a00      	cmp	r2, #0
   2dfe0:	d1f7      	bne.n	2dfd2 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   2dfe2:	1a10      	subs	r0, r2, r0
   2dfe4:	4770      	bx	lr

0002dfe6 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   2dfe6:	b510      	push	{r4, lr}
   2dfe8:	3901      	subs	r1, #1
   2dfea:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   2dfec:	4282      	cmp	r2, r0
   2dfee:	d009      	beq.n	2e004 <strncmp+0x1e>
   2dff0:	7803      	ldrb	r3, [r0, #0]
   2dff2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2dff6:	42a3      	cmp	r3, r4
   2dff8:	d100      	bne.n	2dffc <strncmp+0x16>
   2dffa:	b90b      	cbnz	r3, 2e000 <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   2dffc:	1b18      	subs	r0, r3, r4
   2dffe:	e002      	b.n	2e006 <strncmp+0x20>
		s1++;
   2e000:	3001      	adds	r0, #1
		n--;
   2e002:	e7f3      	b.n	2dfec <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   2e004:	2000      	movs	r0, #0
}
   2e006:	bd10      	pop	{r4, pc}

0002e008 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   2e008:	b510      	push	{r4, lr}
   2e00a:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   2e00c:	b15a      	cbz	r2, 2e026 <memcmp+0x1e>
   2e00e:	3901      	subs	r1, #1
   2e010:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   2e012:	f813 0b01 	ldrb.w	r0, [r3], #1
   2e016:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2e01a:	42a3      	cmp	r3, r4
   2e01c:	d001      	beq.n	2e022 <memcmp+0x1a>
   2e01e:	4290      	cmp	r0, r2
   2e020:	d0f7      	beq.n	2e012 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   2e022:	1a80      	subs	r0, r0, r2
}
   2e024:	bd10      	pop	{r4, pc}
		return 0;
   2e026:	4610      	mov	r0, r2
   2e028:	e7fc      	b.n	2e024 <memcmp+0x1c>

0002e02a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   2e02a:	b510      	push	{r4, lr}
   2e02c:	1e43      	subs	r3, r0, #1
   2e02e:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   2e030:	4291      	cmp	r1, r2
   2e032:	d100      	bne.n	2e036 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   2e034:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   2e036:	f811 4b01 	ldrb.w	r4, [r1], #1
   2e03a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   2e03e:	e7f7      	b.n	2e030 <memcpy+0x6>

0002e040 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   2e040:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   2e042:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   2e044:	4603      	mov	r3, r0
	while (n > 0) {
   2e046:	4293      	cmp	r3, r2
   2e048:	d100      	bne.n	2e04c <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   2e04a:	4770      	bx	lr
		*(d_byte++) = c_byte;
   2e04c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   2e050:	e7f9      	b.n	2e046 <memset+0x6>

0002e052 <_stdout_hook_default>:
}
   2e052:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e056:	4770      	bx	lr

0002e058 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   2e058:	2806      	cmp	r0, #6
   2e05a:	d108      	bne.n	2e06e <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   2e05c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2e060:	2201      	movs	r2, #1
   2e062:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2e066:	f3bf 8f4f 	dsb	sy
        __WFE();
   2e06a:	bf20      	wfe
    while (true)
   2e06c:	e7fd      	b.n	2e06a <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   2e06e:	4770      	bx	lr

0002e070 <pm_state_exit_post_ops>:
   2e070:	2300      	movs	r3, #0
   2e072:	f383 8811 	msr	BASEPRI, r3
   2e076:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2e07a:	4770      	bx	lr

0002e07c <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   2e07c:	b530      	push	{r4, r5, lr}
   2e07e:	b085      	sub	sp, #20
   2e080:	4604      	mov	r4, r0
   2e082:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   2e084:	4668      	mov	r0, sp
   2e086:	2203      	movs	r2, #3
   2e088:	f7ff ffcf 	bl	2e02a <memcpy>
	(void)memset(res + 3, 0, 13);
   2e08c:	220d      	movs	r2, #13
   2e08e:	2100      	movs	r1, #0
   2e090:	f10d 0003 	add.w	r0, sp, #3
   2e094:	f7ff ffd4 	bl	2e040 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   2e098:	4620      	mov	r0, r4
   2e09a:	466a      	mov	r2, sp
   2e09c:	4669      	mov	r1, sp
   2e09e:	f7ee ffa3 	bl	1cfe8 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   2e0a2:	4604      	mov	r4, r0
   2e0a4:	b920      	cbnz	r0, 2e0b0 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   2e0a6:	2203      	movs	r2, #3
   2e0a8:	4669      	mov	r1, sp
   2e0aa:	4628      	mov	r0, r5
   2e0ac:	f7ff ffbd 	bl	2e02a <memcpy>

	return 0;
}
   2e0b0:	4620      	mov	r0, r4
   2e0b2:	b005      	add	sp, #20
   2e0b4:	bd30      	pop	{r4, r5, pc}

0002e0b6 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   2e0b6:	b513      	push	{r0, r1, r4, lr}
   2e0b8:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   2e0ba:	aa01      	add	r2, sp, #4
   2e0bc:	3103      	adds	r1, #3
   2e0be:	f7ff ffdd 	bl	2e07c <ah>
	if (err) {
   2e0c2:	b948      	cbnz	r0, 2e0d8 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   2e0c4:	2203      	movs	r2, #3
   2e0c6:	a901      	add	r1, sp, #4
   2e0c8:	4620      	mov	r0, r4
   2e0ca:	f7ff ff9d 	bl	2e008 <memcmp>
   2e0ce:	fab0 f080 	clz	r0, r0
   2e0d2:	0940      	lsrs	r0, r0, #5
}
   2e0d4:	b002      	add	sp, #8
   2e0d6:	bd10      	pop	{r4, pc}
		return false;
   2e0d8:	2000      	movs	r0, #0
   2e0da:	e7fb      	b.n	2e0d4 <bt_rpa_irk_matches+0x1e>

0002e0dc <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   2e0dc:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   2e0de:	1cce      	adds	r6, r1, #3
{
   2e0e0:	4605      	mov	r5, r0
   2e0e2:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   2e0e4:	4630      	mov	r0, r6
   2e0e6:	2103      	movs	r1, #3
   2e0e8:	f7ee ff7c 	bl	1cfe4 <bt_rand>
	if (err) {
   2e0ec:	b960      	cbnz	r0, 2e108 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   2e0ee:	7963      	ldrb	r3, [r4, #5]
   2e0f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2e0f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e0f8:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   2e0fa:	4622      	mov	r2, r4
   2e0fc:	4631      	mov	r1, r6
   2e0fe:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   2e100:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   2e104:	f7ff bfba 	b.w	2e07c <ah>
}
   2e108:	bd70      	pop	{r4, r5, r6, pc}

0002e10a <send_cmd_status>:
{
   2e10a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   2e10e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   2e112:	4606      	mov	r6, r0
   2e114:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   2e116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2e11a:	2100      	movs	r1, #0
   2e11c:	200f      	movs	r0, #15
   2e11e:	f7e3 fdcb 	bl	11cb8 <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2e122:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   2e124:	f100 0808 	add.w	r8, r0, #8
   2e128:	4604      	mov	r4, r0
   2e12a:	7507      	strb	r7, [r0, #20]
   2e12c:	2102      	movs	r1, #2
   2e12e:	4640      	mov	r0, r8
   2e130:	f002 fca0 	bl	30a74 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   2e134:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   2e136:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   2e138:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   2e13a:	7041      	strb	r1, [r0, #1]
   2e13c:	4640      	mov	r0, r8
   2e13e:	f002 fc99 	bl	30a74 <net_buf_simple_add>
	evt->ncmd = 1U;
   2e142:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   2e144:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   2e146:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   2e148:	4620      	mov	r0, r4
}
   2e14a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   2e14e:	f7e4 bfdd 	b.w	1310c <bt_recv_prio>

0002e152 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   2e152:	f101 0320 	add.w	r3, r1, #32
   2e156:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   2e158:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   2e15c:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   2e160:	428b      	cmp	r3, r1
   2e162:	d1f9      	bne.n	2e158 <sys_memcpy_swap.constprop.0+0x6>
}
   2e164:	4770      	bx	lr

0002e166 <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(2);
   2e166:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   2e16a:	f043 0306 	orr.w	r3, r3, #6
   2e16e:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   2e172:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   2e176:	f043 0304 	orr.w	r3, r3, #4
   2e17a:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   2e17e:	4770      	bx	lr

0002e180 <default_CSPRNG>:
{
   2e180:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   2e182:	f7ee ff2f 	bl	1cfe4 <bt_rand>
}
   2e186:	fab0 f080 	clz	r0, r0
   2e18a:	0940      	lsrs	r0, r0, #5
   2e18c:	bd08      	pop	{r3, pc}

0002e18e <z_log_msg2_static_create.constprop.0>:
   2e18e:	2300      	movs	r3, #0
   2e190:	f7fe b999 	b.w	2c4c6 <z_impl_z_log_msg2_static_create>

0002e194 <bt_settings_decode_key>:
{
   2e194:	b570      	push	{r4, r5, r6, lr}
   2e196:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   2e198:	2100      	movs	r1, #0
{
   2e19a:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   2e19c:	f7fe fc8a 	bl	2cab4 <settings_name_next>
   2e1a0:	280d      	cmp	r0, #13
   2e1a2:	d118      	bne.n	2e1d6 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   2e1a4:	7b23      	ldrb	r3, [r4, #12]
   2e1a6:	2b30      	cmp	r3, #48	; 0x30
   2e1a8:	d111      	bne.n	2e1ce <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   2e1aa:	2300      	movs	r3, #0
   2e1ac:	702b      	strb	r3, [r5, #0]
   2e1ae:	f104 060c 	add.w	r6, r4, #12
   2e1b2:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   2e1b4:	462a      	mov	r2, r5
   2e1b6:	4620      	mov	r0, r4
   2e1b8:	2301      	movs	r3, #1
   2e1ba:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   2e1bc:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   2e1be:	f7fd fb72 	bl	2b8a6 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   2e1c2:	42b4      	cmp	r4, r6
   2e1c4:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   2e1c8:	d1f4      	bne.n	2e1b4 <bt_settings_decode_key+0x20>
	return 0;
   2e1ca:	2000      	movs	r0, #0
}
   2e1cc:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   2e1ce:	2b31      	cmp	r3, #49	; 0x31
   2e1d0:	d101      	bne.n	2e1d6 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   2e1d2:	2301      	movs	r3, #1
   2e1d4:	e7ea      	b.n	2e1ac <bt_settings_decode_key+0x18>
		return -EINVAL;
   2e1d6:	f06f 0015 	mvn.w	r0, #21
   2e1da:	e7f7      	b.n	2e1cc <bt_settings_decode_key+0x38>

0002e1dc <bt_uuid_cmp>:
{
   2e1dc:	b510      	push	{r4, lr}
   2e1de:	460c      	mov	r4, r1
	if (u1->type != u2->type) {
   2e1e0:	7801      	ldrb	r1, [r0, #0]
   2e1e2:	7822      	ldrb	r2, [r4, #0]
   2e1e4:	428a      	cmp	r2, r1
{
   2e1e6:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   2e1e8:	d00f      	beq.n	2e20a <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   2e1ea:	4669      	mov	r1, sp
   2e1ec:	f7e3 fca6 	bl	11b3c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2e1f0:	a905      	add	r1, sp, #20
   2e1f2:	4620      	mov	r0, r4
   2e1f4:	f7e3 fca2 	bl	11b3c <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   2e1f8:	2210      	movs	r2, #16
   2e1fa:	f10d 0115 	add.w	r1, sp, #21
   2e1fe:	f10d 0001 	add.w	r0, sp, #1
   2e202:	f7ff ff01 	bl	2e008 <memcmp>
}
   2e206:	b00a      	add	sp, #40	; 0x28
   2e208:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   2e20a:	2a01      	cmp	r2, #1
   2e20c:	d006      	beq.n	2e21c <bt_uuid_cmp+0x40>
   2e20e:	2a02      	cmp	r2, #2
   2e210:	d007      	beq.n	2e222 <bt_uuid_cmp+0x46>
   2e212:	b972      	cbnz	r2, 2e232 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2e214:	8840      	ldrh	r0, [r0, #2]
   2e216:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2e218:	1ac0      	subs	r0, r0, r3
   2e21a:	e7f4      	b.n	2e206 <bt_uuid_cmp+0x2a>
   2e21c:	6840      	ldr	r0, [r0, #4]
   2e21e:	6863      	ldr	r3, [r4, #4]
   2e220:	e7fa      	b.n	2e218 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2e222:	2210      	movs	r2, #16
   2e224:	1c61      	adds	r1, r4, #1
   2e226:	3001      	adds	r0, #1
}
   2e228:	b00a      	add	sp, #40	; 0x28
   2e22a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2e22e:	f7ff beeb 	b.w	2e008 <memcmp>
	switch (u1->type) {
   2e232:	f06f 0015 	mvn.w	r0, #21
   2e236:	e7e6      	b.n	2e206 <bt_uuid_cmp+0x2a>

0002e238 <bt_uuid_create>:
	switch (data_len) {
   2e238:	2a04      	cmp	r2, #4
{
   2e23a:	b510      	push	{r4, lr}
	switch (data_len) {
   2e23c:	d00a      	beq.n	2e254 <bt_uuid_create+0x1c>
   2e23e:	2a10      	cmp	r2, #16
   2e240:	d00d      	beq.n	2e25e <bt_uuid_create+0x26>
   2e242:	2a02      	cmp	r2, #2
   2e244:	f04f 0300 	mov.w	r3, #0
   2e248:	d10f      	bne.n	2e26a <bt_uuid_create+0x32>
		uuid->type = BT_UUID_TYPE_16;
   2e24a:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   2e24c:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2e24e:	8043      	strh	r3, [r0, #2]
	return true;
   2e250:	2001      	movs	r0, #1
}
   2e252:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   2e254:	2301      	movs	r3, #1
   2e256:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2e258:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2e25a:	6042      	str	r2, [r0, #4]
		break;
   2e25c:	e7f8      	b.n	2e250 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   2e25e:	2302      	movs	r3, #2
   2e260:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   2e264:	f7ff fee1 	bl	2e02a <memcpy>
		break;
   2e268:	e7f2      	b.n	2e250 <bt_uuid_create+0x18>
	switch (data_len) {
   2e26a:	4618      	mov	r0, r3
   2e26c:	e7f1      	b.n	2e252 <bt_uuid_create+0x1a>

0002e26e <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   2e26e:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2e270:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2e272:	2106      	movs	r1, #6
{
   2e274:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2e276:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2e27a:	f7ee feb3 	bl	1cfe4 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2e27e:	b918      	cbnz	r0, 2e288 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2e280:	79a3      	ldrb	r3, [r4, #6]
   2e282:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2e286:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2e288:	bd10      	pop	{r4, pc}

0002e28a <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2e28a:	280f      	cmp	r0, #15
   2e28c:	d806      	bhi.n	2e29c <bt_hci_evt_get_flags+0x12>
   2e28e:	280d      	cmp	r0, #13
   2e290:	d80b      	bhi.n	2e2aa <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   2e292:	2805      	cmp	r0, #5
   2e294:	bf14      	ite	ne
   2e296:	2002      	movne	r0, #2
   2e298:	2003      	moveq	r0, #3
   2e29a:	4770      	bx	lr
	switch (evt) {
   2e29c:	2813      	cmp	r0, #19
   2e29e:	d004      	beq.n	2e2aa <bt_hci_evt_get_flags+0x20>
   2e2a0:	281a      	cmp	r0, #26
   2e2a2:	bf14      	ite	ne
   2e2a4:	2002      	movne	r0, #2
   2e2a6:	2001      	moveq	r0, #1
   2e2a8:	4770      	bx	lr
   2e2aa:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   2e2ac:	4770      	bx	lr

0002e2ae <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   2e2ae:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   2e2b2:	b193      	cbz	r3, 2e2da <update_sec_level+0x2c>
   2e2b4:	7b5a      	ldrb	r2, [r3, #13]
   2e2b6:	07d1      	lsls	r1, r2, #31
   2e2b8:	d50f      	bpl.n	2e2da <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   2e2ba:	06d2      	lsls	r2, r2, #27
   2e2bc:	d50b      	bpl.n	2e2d6 <update_sec_level+0x28>
   2e2be:	7b1b      	ldrb	r3, [r3, #12]
   2e2c0:	2b10      	cmp	r3, #16
   2e2c2:	d108      	bne.n	2e2d6 <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   2e2c4:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   2e2c6:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   2e2c8:	7a82      	ldrb	r2, [r0, #10]
   2e2ca:	7a40      	ldrb	r0, [r0, #9]
}
   2e2cc:	4282      	cmp	r2, r0
   2e2ce:	bf8c      	ite	hi
   2e2d0:	2000      	movhi	r0, #0
   2e2d2:	2001      	movls	r0, #1
   2e2d4:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   2e2d6:	2303      	movs	r3, #3
   2e2d8:	e7f5      	b.n	2e2c6 <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   2e2da:	2302      	movs	r3, #2
   2e2dc:	e7f3      	b.n	2e2c6 <update_sec_level+0x18>

0002e2de <atomic_or>:
{
   2e2de:	4603      	mov	r3, r0
}
   2e2e0:	f3bf 8f5b 	dmb	ish
   2e2e4:	e853 0f00 	ldrex	r0, [r3]
   2e2e8:	ea40 0201 	orr.w	r2, r0, r1
   2e2ec:	e843 2c00 	strex	ip, r2, [r3]
   2e2f0:	f1bc 0f00 	cmp.w	ip, #0
   2e2f4:	d1f6      	bne.n	2e2e4 <atomic_or+0x6>
   2e2f6:	f3bf 8f5b 	dmb	ish
   2e2fa:	4770      	bx	lr

0002e2fc <unpair_remote>:
{
   2e2fc:	460b      	mov	r3, r1
	unpair(*id, &info->addr);
   2e2fe:	4601      	mov	r1, r0
   2e300:	7818      	ldrb	r0, [r3, #0]
   2e302:	f7e3 bd1f 	b.w	11d44 <unpair>

0002e306 <z_log_msg2_static_create.constprop.0>:
   2e306:	2300      	movs	r3, #0
   2e308:	f7fe b8dd 	b.w	2c4c6 <z_impl_z_log_msg2_static_create>

0002e30c <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2e30c:	f3bf 8f5b 	dmb	ish
   2e310:	e850 3f00 	ldrex	r3, [r0]
   2e314:	400b      	ands	r3, r1
   2e316:	e840 3200 	strex	r2, r3, [r0]
   2e31a:	2a00      	cmp	r2, #0
   2e31c:	d1f8      	bne.n	2e310 <atomic_and.isra.0+0x4>
   2e31e:	f3bf 8f5b 	dmb	ish
}
   2e322:	4770      	bx	lr

0002e324 <sys_put_le64>:
	dst[1] = val >> 8;
   2e324:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   2e328:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   2e32a:	0e00      	lsrs	r0, r0, #24
   2e32c:	7053      	strb	r3, [r2, #1]
   2e32e:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   2e330:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   2e332:	f3c1 2007 	ubfx	r0, r1, #8, #8
   2e336:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   2e338:	7093      	strb	r3, [r2, #2]
   2e33a:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   2e33c:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   2e33e:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   2e340:	71d1      	strb	r1, [r2, #7]
}
   2e342:	4770      	bx	lr

0002e344 <le_conn_param_neg_reply>:
{
   2e344:	b570      	push	{r4, r5, r6, lr}
   2e346:	4606      	mov	r6, r0
   2e348:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   2e34a:	f242 0021 	movw	r0, #8225	; 0x2021
   2e34e:	2103      	movs	r1, #3
   2e350:	f7e4 f954 	bl	125fc <bt_hci_cmd_create>
	if (!buf) {
   2e354:	4604      	mov	r4, r0
   2e356:	b918      	cbnz	r0, 2e360 <le_conn_param_neg_reply+0x1c>
}
   2e358:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2e35c:	f7e3 bd9a 	b.w	11e94 <le_conn_param_neg_reply.part.0>
   2e360:	2103      	movs	r1, #3
   2e362:	3008      	adds	r0, #8
   2e364:	f002 fb86 	bl	30a74 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   2e368:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   2e36a:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   2e36c:	4621      	mov	r1, r4
   2e36e:	f242 0021 	movw	r0, #8225	; 0x2021
}
   2e372:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   2e376:	f7e4 b97b 	b.w	12670 <bt_hci_cmd_send>

0002e37a <bt_hci_disconnect>:
{
   2e37a:	b570      	push	{r4, r5, r6, lr}
   2e37c:	4606      	mov	r6, r0
   2e37e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2e380:	f240 4006 	movw	r0, #1030	; 0x406
   2e384:	2103      	movs	r1, #3
   2e386:	f7e4 f939 	bl	125fc <bt_hci_cmd_create>
	if (!buf) {
   2e38a:	4604      	mov	r4, r0
   2e38c:	b168      	cbz	r0, 2e3aa <bt_hci_disconnect+0x30>
   2e38e:	2103      	movs	r1, #3
   2e390:	3008      	adds	r0, #8
   2e392:	f002 fb6f 	bl	30a74 <net_buf_simple_add>
	disconn->reason = reason;
   2e396:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   2e398:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2e39a:	4621      	mov	r1, r4
   2e39c:	2200      	movs	r2, #0
}
   2e39e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2e3a2:	f240 4006 	movw	r0, #1030	; 0x406
   2e3a6:	f7e4 ba5b 	b.w	12860 <bt_hci_cmd_send_sync>
}
   2e3aa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2e3ae:	bd70      	pop	{r4, r5, r6, pc}

0002e3b0 <bt_le_set_data_len>:
{
   2e3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e3b2:	4607      	mov	r7, r0
   2e3b4:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2e3b6:	f242 0022 	movw	r0, #8226	; 0x2022
   2e3ba:	2106      	movs	r1, #6
{
   2e3bc:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2e3be:	f7e4 f91d 	bl	125fc <bt_hci_cmd_create>
	if (!buf) {
   2e3c2:	4604      	mov	r4, r0
   2e3c4:	b178      	cbz	r0, 2e3e6 <bt_le_set_data_len+0x36>
   2e3c6:	2106      	movs	r1, #6
   2e3c8:	3008      	adds	r0, #8
   2e3ca:	f002 fb53 	bl	30a74 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2e3ce:	883b      	ldrh	r3, [r7, #0]
   2e3d0:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   2e3d2:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2e3d4:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2e3d6:	4621      	mov	r1, r4
   2e3d8:	2200      	movs	r2, #0
}
   2e3da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2e3de:	f242 0022 	movw	r0, #8226	; 0x2022
   2e3e2:	f7e4 ba3d 	b.w	12860 <bt_hci_cmd_send_sync>
}
   2e3e6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2e3ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002e3ec <bt_le_set_phy>:
{
   2e3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2e3f0:	4680      	mov	r8, r0
   2e3f2:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2e3f4:	f242 0032 	movw	r0, #8242	; 0x2032
   2e3f8:	2107      	movs	r1, #7
{
   2e3fa:	f89d 9020 	ldrb.w	r9, [sp, #32]
   2e3fe:	4616      	mov	r6, r2
   2e400:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2e402:	f7e4 f8fb 	bl	125fc <bt_hci_cmd_create>
	if (!buf) {
   2e406:	4604      	mov	r4, r0
   2e408:	b198      	cbz	r0, 2e432 <bt_le_set_phy+0x46>
   2e40a:	2107      	movs	r1, #7
   2e40c:	3008      	adds	r0, #8
   2e40e:	f002 fb31 	bl	30a74 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2e412:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   2e416:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   2e418:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2e41a:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   2e41c:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   2e41e:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2e422:	4621      	mov	r1, r4
   2e424:	2200      	movs	r2, #0
}
   2e426:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2e42a:	f242 0032 	movw	r0, #8242	; 0x2032
   2e42e:	f7e4 ba17 	b.w	12860 <bt_hci_cmd_send_sync>
}
   2e432:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2e436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002e43a <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2e43a:	6880      	ldr	r0, [r0, #8]
   2e43c:	f7e4 bab4 	b.w	129a8 <bt_hci_le_enh_conn_complete>

0002e440 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   2e440:	8803      	ldrh	r3, [r0, #0]
   2e442:	8842      	ldrh	r2, [r0, #2]
   2e444:	4293      	cmp	r3, r2
{
   2e446:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   2e448:	d819      	bhi.n	2e47e <bt_le_conn_params_valid+0x3e>
   2e44a:	2b05      	cmp	r3, #5
   2e44c:	d917      	bls.n	2e47e <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2e44e:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   2e452:	d814      	bhi.n	2e47e <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   2e454:	8883      	ldrh	r3, [r0, #4]
   2e456:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   2e45a:	d210      	bcs.n	2e47e <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2e45c:	88c0      	ldrh	r0, [r0, #6]
   2e45e:	f1a0 010a 	sub.w	r1, r0, #10
   2e462:	b289      	uxth	r1, r1
   2e464:	f640 4476 	movw	r4, #3190	; 0xc76
   2e468:	42a1      	cmp	r1, r4
   2e46a:	d808      	bhi.n	2e47e <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   2e46c:	3301      	adds	r3, #1
   2e46e:	b29b      	uxth	r3, r3
   2e470:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   2e472:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   2e476:	bf34      	ite	cc
   2e478:	2001      	movcc	r0, #1
   2e47a:	2000      	movcs	r0, #0
}
   2e47c:	bd10      	pop	{r4, pc}
		return false;
   2e47e:	2000      	movs	r0, #0
   2e480:	e7fc      	b.n	2e47c <bt_le_conn_params_valid+0x3c>

0002e482 <bt_send>:
		return bt_hci_ecc_send(buf);
   2e482:	f7e3 b925 	b.w	116d0 <bt_hci_ecc_send>

0002e486 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   2e486:	f240 3041 	movw	r0, #833	; 0x341
   2e48a:	4770      	bx	lr

0002e48c <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   2e48c:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   2e48e:	f7eb fcc3 	bl	19e18 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   2e492:	b118      	cbz	r0, 2e49c <bt_addr_le_is_bonded+0x10>
   2e494:	89c0      	ldrh	r0, [r0, #14]
   2e496:	3800      	subs	r0, #0
   2e498:	bf18      	it	ne
   2e49a:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   2e49c:	bd08      	pop	{r3, pc}

0002e49e <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   2e49e:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   2e4a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   2e4a4:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   2e4a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2e4aa:	2100      	movs	r1, #0
{
   2e4ac:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   2e4ae:	f7e3 fc03 	bl	11cb8 <bt_buf_get_evt>
   2e4b2:	2102      	movs	r1, #2
   2e4b4:	4604      	mov	r4, r0
   2e4b6:	3008      	adds	r0, #8
   2e4b8:	f002 fadc 	bl	30a74 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   2e4bc:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   2e4be:	7045      	strb	r5, [r0, #1]

	return buf;
}
   2e4c0:	4620      	mov	r0, r4
   2e4c2:	bd70      	pop	{r4, r5, r6, pc}

0002e4c4 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   2e4c4:	3103      	adds	r1, #3
{
   2e4c6:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   2e4c8:	b2c9      	uxtb	r1, r1
{
   2e4ca:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   2e4cc:	200e      	movs	r0, #14
   2e4ce:	f7ff ffe6 	bl	2e49e <bt_hci_evt_create>
   2e4d2:	2103      	movs	r1, #3
   2e4d4:	4604      	mov	r4, r0
   2e4d6:	3008      	adds	r0, #8
   2e4d8:	f002 facc 	bl	30a74 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   2e4dc:	2301      	movs	r3, #1
   2e4de:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   2e4e0:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   2e4e4:	4620      	mov	r0, r4
   2e4e6:	bd38      	pop	{r3, r4, r5, pc}

0002e4e8 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   2e4e8:	b570      	push	{r4, r5, r6, lr}
   2e4ea:	4605      	mov	r5, r0
   2e4ec:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   2e4ee:	200f      	movs	r0, #15
   2e4f0:	2104      	movs	r1, #4
   2e4f2:	f7ff ffd4 	bl	2e49e <bt_hci_evt_create>
   2e4f6:	2104      	movs	r1, #4
   2e4f8:	4604      	mov	r4, r0
   2e4fa:	3008      	adds	r0, #8
   2e4fc:	f002 faba 	bl	30a74 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   2e500:	2201      	movs	r2, #1
	cs->status = status;
   2e502:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   2e504:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   2e506:	8045      	strh	r5, [r0, #2]

	return buf;
}
   2e508:	4620      	mov	r0, r4
   2e50a:	bd70      	pop	{r4, r5, r6, pc}

0002e50c <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2e50c:	2207      	movs	r2, #7
   2e50e:	f7ff bd8c 	b.w	2e02a <memcpy>

0002e512 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2e512:	f3bf 8f5b 	dmb	ish
   2e516:	6800      	ldr	r0, [r0, #0]
   2e518:	f3bf 8f5b 	dmb	ish
}
   2e51c:	4770      	bx	lr

0002e51e <atomic_test_bit>:
{
   2e51e:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2e520:	f7ff fff7 	bl	2e512 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2e524:	4108      	asrs	r0, r1
}
   2e526:	f000 0001 	and.w	r0, r0, #1
   2e52a:	bd08      	pop	{r3, pc}

0002e52c <adv_is_private_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   2e52c:	f100 0210 	add.w	r2, r0, #16
{
   2e530:	b510      	push	{r4, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   2e532:	4610      	mov	r0, r2
{
   2e534:	460c      	mov	r4, r1
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   2e536:	2106      	movs	r1, #6
   2e538:	f7ff fff1 	bl	2e51e <atomic_test_bit>
   2e53c:	b130      	cbz	r0, 2e54c <adv_is_private_enabled+0x20>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   2e53e:	210c      	movs	r1, #12
   2e540:	4610      	mov	r0, r2
   2e542:	f7ff ffec 	bl	2e51e <atomic_test_bit>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   2e546:	b908      	cbnz	r0, 2e54c <adv_is_private_enabled+0x20>
		*adv_enabled = true;
   2e548:	2301      	movs	r3, #1
   2e54a:	7023      	strb	r3, [r4, #0]
}
   2e54c:	bd10      	pop	{r4, pc}

0002e54e <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   2e54e:	7a03      	ldrb	r3, [r0, #8]
   2e550:	075b      	lsls	r3, r3, #29
{
   2e552:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   2e554:	d505      	bpl.n	2e562 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2e556:	4601      	mov	r1, r0
   2e558:	322a      	adds	r2, #42	; 0x2a
   2e55a:	f811 0b01 	ldrb.w	r0, [r1], #1
   2e55e:	f7e4 bf8d 	b.w	1347c <hci_id_add>
}
   2e562:	4770      	bx	lr

0002e564 <z_log_msg2_static_create.constprop.0>:
   2e564:	2300      	movs	r3, #0
   2e566:	f7fd bfae 	b.w	2c4c6 <z_impl_z_log_msg2_static_create>

0002e56a <addr_res_enable>:
{
   2e56a:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2e56c:	2101      	movs	r1, #1
{
   2e56e:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2e570:	f242 002d 	movw	r0, #8237	; 0x202d
   2e574:	f7e4 f842 	bl	125fc <bt_hci_cmd_create>
	if (!buf) {
   2e578:	4604      	mov	r4, r0
   2e57a:	b158      	cbz	r0, 2e594 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   2e57c:	4629      	mov	r1, r5
   2e57e:	3008      	adds	r0, #8
   2e580:	f002 fa87 	bl	30a92 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2e584:	4621      	mov	r1, r4
   2e586:	2200      	movs	r2, #0
}
   2e588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2e58c:	f242 002d 	movw	r0, #8237	; 0x202d
   2e590:	f7e4 b966 	b.w	12860 <bt_hci_cmd_send_sync>
}
   2e594:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2e598:	bd38      	pop	{r3, r4, r5, pc}

0002e59a <atomic_or.isra.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2e59a:	f3bf 8f5b 	dmb	ish
   2e59e:	e850 3f00 	ldrex	r3, [r0]
   2e5a2:	430b      	orrs	r3, r1
   2e5a4:	e840 3200 	strex	r2, r3, [r0]
   2e5a8:	2a00      	cmp	r2, #0
   2e5aa:	d1f8      	bne.n	2e59e <atomic_or.isra.0+0x4>
   2e5ac:	f3bf 8f5b 	dmb	ish
}
   2e5b0:	4770      	bx	lr

0002e5b2 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2e5b2:	f100 0210 	add.w	r2, r0, #16
{
   2e5b6:	b510      	push	{r4, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2e5b8:	2106      	movs	r1, #6
{
   2e5ba:	4604      	mov	r4, r0
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2e5bc:	4610      	mov	r0, r2
   2e5be:	f7ff ffae 	bl	2e51e <atomic_test_bit>
   2e5c2:	b150      	cbz	r0, 2e5da <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2e5c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   2e5c8:	4610      	mov	r0, r2
   2e5ca:	f7ff ffe6 	bl	2e59a <atomic_or.isra.0>
		bt_le_adv_set_enable(adv, false);
   2e5ce:	4620      	mov	r0, r4
   2e5d0:	2100      	movs	r1, #0
}
   2e5d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_set_enable(adv, false);
   2e5d6:	f000 b92f 	b.w	2e838 <bt_le_adv_set_enable>
}
   2e5da:	bd10      	pop	{r4, pc}

0002e5dc <adv_unpause_enabled>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2e5dc:	f100 0310 	add.w	r3, r0, #16
   2e5e0:	f3bf 8f5b 	dmb	ish
   2e5e4:	e853 2f00 	ldrex	r2, [r3]
   2e5e8:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
   2e5ec:	e843 1c00 	strex	ip, r1, [r3]
   2e5f0:	f1bc 0f00 	cmp.w	ip, #0
   2e5f4:	d1f6      	bne.n	2e5e4 <adv_unpause_enabled+0x8>
   2e5f6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   2e5fa:	0453      	lsls	r3, r2, #17
   2e5fc:	d502      	bpl.n	2e604 <adv_unpause_enabled+0x28>
		bt_le_adv_set_enable(adv, true);
   2e5fe:	2101      	movs	r1, #1
   2e600:	f000 b91a 	b.w	2e838 <bt_le_adv_set_enable>
}
   2e604:	4770      	bx	lr

0002e606 <adv_rpa_invalidate>:
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED)) {
   2e606:	f100 0210 	add.w	r2, r0, #16
{
   2e60a:	b508      	push	{r3, lr}
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED)) {
   2e60c:	2105      	movs	r1, #5
   2e60e:	4610      	mov	r0, r2
   2e610:	f7ff ff85 	bl	2e51e <atomic_test_bit>
   2e614:	b958      	cbnz	r0, 2e62e <adv_rpa_invalidate+0x28>
   2e616:	f3bf 8f5b 	dmb	ish
   2e61a:	e852 3f00 	ldrex	r3, [r2]
   2e61e:	f023 0310 	bic.w	r3, r3, #16
   2e622:	e842 3100 	strex	r1, r3, [r2]
   2e626:	2900      	cmp	r1, #0
   2e628:	d1f7      	bne.n	2e61a <adv_rpa_invalidate+0x14>
   2e62a:	f3bf 8f5b 	dmb	ish
}
   2e62e:	bd08      	pop	{r3, pc}

0002e630 <bt_lookup_id_addr>:
{
   2e630:	b510      	push	{r4, lr}
   2e632:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   2e634:	f7eb fbb8 	bl	19da8 <bt_keys_find_irk>
		if (keys) {
   2e638:	b100      	cbz	r0, 2e63c <bt_lookup_id_addr+0xc>
			return &keys->addr;
   2e63a:	1c44      	adds	r4, r0, #1
}
   2e63c:	4620      	mov	r0, r4
   2e63e:	bd10      	pop	{r4, pc}

0002e640 <bt_id_set_adv_private_addr>:
		return bt_id_set_private_addr(adv->id);
   2e640:	7800      	ldrb	r0, [r0, #0]
   2e642:	f7e5 b91b 	b.w	1387c <bt_id_set_private_addr>

0002e646 <bt_id_adv_random_addr_check>:
}
   2e646:	2001      	movs	r0, #1
   2e648:	4770      	bx	lr

0002e64a <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   2e64a:	7a03      	ldrb	r3, [r0, #8]
   2e64c:	07d9      	lsls	r1, r3, #31
   2e64e:	d504      	bpl.n	2e65a <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   2e650:	f023 0301 	bic.w	r3, r3, #1
   2e654:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   2e656:	f7e5 b9bd 	b.w	139d4 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   2e65a:	0799      	lsls	r1, r3, #30
   2e65c:	d504      	bpl.n	2e668 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   2e65e:	f023 0302 	bic.w	r3, r3, #2
   2e662:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   2e664:	f7e5 b9ce 	b.w	13a04 <bt_id_del>
}
   2e668:	4770      	bx	lr

0002e66a <get_adv_channel_map>:
{
   2e66a:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   2e66c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   2e670:	bf0c      	ite	eq
   2e672:	2007      	moveq	r0, #7
   2e674:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2e676:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   2e678:	bf48      	it	mi
   2e67a:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   2e67e:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   2e680:	bf48      	it	mi
   2e682:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   2e686:	4770      	bx	lr

0002e688 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2e688:	f3bf 8f5b 	dmb	ish
   2e68c:	6800      	ldr	r0, [r0, #0]
   2e68e:	f3bf 8f5b 	dmb	ish
}
   2e692:	4770      	bx	lr

0002e694 <atomic_and>:
{
   2e694:	4603      	mov	r3, r0
}
   2e696:	f3bf 8f5b 	dmb	ish
   2e69a:	e853 0f00 	ldrex	r0, [r3]
   2e69e:	ea00 0201 	and.w	r2, r0, r1
   2e6a2:	e843 2c00 	strex	ip, r2, [r3]
   2e6a6:	f1bc 0f00 	cmp.w	ip, #0
   2e6aa:	d1f6      	bne.n	2e69a <atomic_and+0x6>
   2e6ac:	f3bf 8f5b 	dmb	ish
   2e6b0:	4770      	bx	lr

0002e6b2 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2e6b2:	2301      	movs	r3, #1
{
   2e6b4:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2e6b6:	fa03 f101 	lsl.w	r1, r3, r1
{
   2e6ba:	4604      	mov	r4, r0
	if (val) {
   2e6bc:	b162      	cbz	r2, 2e6d8 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2e6be:	f3bf 8f5b 	dmb	ish
   2e6c2:	e854 3f00 	ldrex	r3, [r4]
   2e6c6:	430b      	orrs	r3, r1
   2e6c8:	e844 3200 	strex	r2, r3, [r4]
   2e6cc:	2a00      	cmp	r2, #0
   2e6ce:	d1f8      	bne.n	2e6c2 <atomic_set_bit_to+0x10>
   2e6d0:	f3bf 8f5b 	dmb	ish
	}
}
   2e6d4:	bc10      	pop	{r4}
   2e6d6:	4770      	bx	lr
   2e6d8:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2e6da:	43c9      	mvns	r1, r1
   2e6dc:	f7ff bfda 	b.w	2e694 <atomic_and>

0002e6e0 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   2e6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e6e4:	b087      	sub	sp, #28
   2e6e6:	4605      	mov	r5, r0
   2e6e8:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   2e6ec:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   2e6f0:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   2e6f4:	460c      	mov	r4, r1
   2e6f6:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   2e6f8:	2100      	movs	r1, #0
   2e6fa:	2210      	movs	r2, #16
   2e6fc:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   2e6fe:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   2e700:	f7ff fc9e 	bl	2e040 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   2e704:	b186      	cbz	r6, 2e728 <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   2e706:	f7e4 fe85 	bl	13414 <bt_get_name>
   2e70a:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2e70c:	2c00      	cmp	r4, #0
   2e70e:	d139      	bne.n	2e784 <le_adv_update.constprop.0+0xa4>
   2e710:	2f00      	cmp	r7, #0
   2e712:	d142      	bne.n	2e79a <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   2e714:	4658      	mov	r0, fp
   2e716:	f7ff fc4a 	bl	2dfae <strlen>
   2e71a:	2309      	movs	r3, #9
   2e71c:	f88d 3000 	strb.w	r3, [sp]
   2e720:	f88d 0001 	strb.w	r0, [sp, #1]
   2e724:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
   2e728:	2e01      	cmp	r6, #1
			d_len = 2;
   2e72a:	bf0c      	ite	eq
   2e72c:	2202      	moveq	r2, #2
		d_len = 1;
   2e72e:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   2e730:	a902      	add	r1, sp, #8
   2e732:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
   2e736:	e9cd 4802 	strd	r4, r8, [sp, #8]
			d[1].data = &data;
   2e73a:	bf04      	itt	eq
   2e73c:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   2e740:	9605      	streq	r6, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   2e742:	f7e5 fbc7 	bl	13ed4 <hci_set_ad>
		if (err) {
   2e746:	4604      	mov	r4, r0
   2e748:	b978      	cbnz	r0, 2e76a <le_adv_update.constprop.0+0x8a>
	if (scannable) {
   2e74a:	f1ba 0f00 	cmp.w	sl, #0
   2e74e:	d126      	bne.n	2e79e <le_adv_update.constprop.0+0xbe>
   2e750:	3510      	adds	r5, #16
   2e752:	f3bf 8f5b 	dmb	ish
   2e756:	e855 3f00 	ldrex	r3, [r5]
   2e75a:	f043 0304 	orr.w	r3, r3, #4
   2e75e:	e845 3200 	strex	r2, r3, [r5]
   2e762:	2a00      	cmp	r2, #0
   2e764:	d1f7      	bne.n	2e756 <le_adv_update.constprop.0+0x76>
   2e766:	f3bf 8f5b 	dmb	ish
}
   2e76a:	4620      	mov	r0, r4
   2e76c:	b007      	add	sp, #28
   2e76e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2e772:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   2e776:	3a08      	subs	r2, #8
   2e778:	2a01      	cmp	r2, #1
   2e77a:	d925      	bls.n	2e7c8 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   2e77c:	3301      	adds	r3, #1
   2e77e:	4598      	cmp	r8, r3
   2e780:	d1f7      	bne.n	2e772 <le_adv_update.constprop.0+0x92>
   2e782:	e7c5      	b.n	2e710 <le_adv_update.constprop.0+0x30>
   2e784:	2300      	movs	r3, #0
   2e786:	e7fa      	b.n	2e77e <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2e788:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   2e78c:	3a08      	subs	r2, #8
   2e78e:	2a01      	cmp	r2, #1
   2e790:	d91a      	bls.n	2e7c8 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   2e792:	3301      	adds	r3, #1
   2e794:	4599      	cmp	r9, r3
   2e796:	d1f7      	bne.n	2e788 <le_adv_update.constprop.0+0xa8>
   2e798:	e7bc      	b.n	2e714 <le_adv_update.constprop.0+0x34>
   2e79a:	2300      	movs	r3, #0
   2e79c:	e7fa      	b.n	2e794 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   2e79e:	2e02      	cmp	r6, #2
   2e7a0:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   2e7a4:	bf08      	it	eq
   2e7a6:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2e7a8:	a902      	add	r1, sp, #8
			d_len = 2;
   2e7aa:	bf08      	it	eq
   2e7ac:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2e7ae:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   2e7b2:	bf08      	it	eq
   2e7b4:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   2e7b8:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2e7bc:	f7e5 fb8a 	bl	13ed4 <hci_set_ad>
		if (err) {
   2e7c0:	2800      	cmp	r0, #0
   2e7c2:	d0c5      	beq.n	2e750 <le_adv_update.constprop.0+0x70>
   2e7c4:	4604      	mov	r4, r0
   2e7c6:	e7d0      	b.n	2e76a <le_adv_update.constprop.0+0x8a>
			return -EINVAL;
   2e7c8:	f06f 0415 	mvn.w	r4, #21
   2e7cc:	e7cd      	b.n	2e76a <le_adv_update.constprop.0+0x8a>

0002e7ce <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   2e7ce:	6843      	ldr	r3, [r0, #4]
   2e7d0:	f013 0008 	ands.w	r0, r3, #8
   2e7d4:	d00a      	beq.n	2e7ec <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   2e7d6:	035a      	lsls	r2, r3, #13
   2e7d8:	d407      	bmi.n	2e7ea <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   2e7da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		return ADV_NAME_TYPE_SD;
   2e7de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2e7e2:	bf0c      	ite	eq
   2e7e4:	2001      	moveq	r0, #1
   2e7e6:	2002      	movne	r0, #2
   2e7e8:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   2e7ea:	2001      	movs	r0, #1
}
   2e7ec:	4770      	bx	lr

0002e7ee <bt_le_adv_set_enable_legacy>:
{
   2e7ee:	b570      	push	{r4, r5, r6, lr}
   2e7f0:	4606      	mov	r6, r0
   2e7f2:	b086      	sub	sp, #24
   2e7f4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2e7f6:	f242 000a 	movw	r0, #8202	; 0x200a
   2e7fa:	2101      	movs	r1, #1
   2e7fc:	f7e3 fefe 	bl	125fc <bt_hci_cmd_create>
	if (!buf) {
   2e800:	4604      	mov	r4, r0
   2e802:	b1b0      	cbz	r0, 2e832 <bt_le_adv_set_enable_legacy+0x44>
   2e804:	3008      	adds	r0, #8
	if (enable) {
   2e806:	b195      	cbz	r5, 2e82e <bt_le_adv_set_enable_legacy+0x40>
   2e808:	2101      	movs	r1, #1
   2e80a:	f002 f942 	bl	30a92 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   2e80e:	f106 0210 	add.w	r2, r6, #16
   2e812:	a903      	add	r1, sp, #12
   2e814:	4620      	mov	r0, r4
   2e816:	9500      	str	r5, [sp, #0]
   2e818:	2306      	movs	r3, #6
   2e81a:	f7e3 fedd 	bl	125d8 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   2e81e:	2200      	movs	r2, #0
   2e820:	4621      	mov	r1, r4
   2e822:	f242 000a 	movw	r0, #8202	; 0x200a
   2e826:	f7e4 f81b 	bl	12860 <bt_hci_cmd_send_sync>
}
   2e82a:	b006      	add	sp, #24
   2e82c:	bd70      	pop	{r4, r5, r6, pc}
   2e82e:	4629      	mov	r1, r5
   2e830:	e7eb      	b.n	2e80a <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   2e832:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2e836:	e7f8      	b.n	2e82a <bt_le_adv_set_enable_legacy+0x3c>

0002e838 <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   2e838:	f7ff bfd9 	b.w	2e7ee <bt_le_adv_set_enable_legacy>

0002e83c <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   2e83c:	3018      	adds	r0, #24
   2e83e:	f003 b86c 	b.w	3191a <k_work_cancel_delayable>

0002e842 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2e842:	b510      	push	{r4, lr}
   2e844:	4603      	mov	r3, r0
	return list->head;
   2e846:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2e848:	2200      	movs	r2, #0
   2e84a:	b158      	cbz	r0, 2e864 <sys_slist_find_and_remove+0x22>
   2e84c:	4288      	cmp	r0, r1
   2e84e:	d10f      	bne.n	2e870 <sys_slist_find_and_remove+0x2e>
	return node->next;
   2e850:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   2e852:	685c      	ldr	r4, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2e854:	b93a      	cbnz	r2, 2e866 <sys_slist_find_and_remove+0x24>
   2e856:	42a1      	cmp	r1, r4
	list->head = node;
   2e858:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   2e85a:	d100      	bne.n	2e85e <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   2e85c:	6058      	str	r0, [r3, #4]
	parent->next = child;
   2e85e:	2300      	movs	r3, #0
   2e860:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2e862:	2001      	movs	r0, #1
   2e864:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   2e866:	42a1      	cmp	r1, r4
	parent->next = child;
   2e868:	6010      	str	r0, [r2, #0]
	list->tail = node;
   2e86a:	bf08      	it	eq
   2e86c:	605a      	streq	r2, [r3, #4]
}
   2e86e:	e7f6      	b.n	2e85e <sys_slist_find_and_remove+0x1c>
	return node->next;
   2e870:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2e872:	6800      	ldr	r0, [r0, #0]
   2e874:	e7e9      	b.n	2e84a <sys_slist_find_and_remove+0x8>

0002e876 <atomic_and>:
{
   2e876:	4603      	mov	r3, r0
}
   2e878:	f3bf 8f5b 	dmb	ish
   2e87c:	e853 0f00 	ldrex	r0, [r3]
   2e880:	ea00 0201 	and.w	r2, r0, r1
   2e884:	e843 2c00 	strex	ip, r2, [r3]
   2e888:	f1bc 0f00 	cmp.w	ip, #0
   2e88c:	d1f6      	bne.n	2e87c <atomic_and+0x6>
   2e88e:	f3bf 8f5b 	dmb	ish
   2e892:	4770      	bx	lr

0002e894 <z_log_msg2_static_create.constprop.0>:
   2e894:	2300      	movs	r3, #0
   2e896:	f7fd be16 	b.w	2c4c6 <z_impl_z_log_msg2_static_create>

0002e89a <tx_notify>:
{
   2e89a:	b570      	push	{r4, r5, r6, lr}
   2e89c:	4604      	mov	r4, r0
	__asm__ volatile(
   2e89e:	f04f 0220 	mov.w	r2, #32
   2e8a2:	f3ef 8311 	mrs	r3, BASEPRI
   2e8a6:	f382 8812 	msr	BASEPRI_MAX, r2
   2e8aa:	f3bf 8f6f 	isb	sy
	return list->head;
   2e8ae:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   2e8b0:	b920      	cbnz	r0, 2e8bc <tx_notify+0x22>
	__asm__ volatile(
   2e8b2:	f383 8811 	msr	BASEPRI, r3
   2e8b6:	f3bf 8f6f 	isb	sy
}
   2e8ba:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2e8bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   2e8be:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2e8c0:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2e8c2:	4288      	cmp	r0, r1
	list->tail = node;
   2e8c4:	bf08      	it	eq
   2e8c6:	6262      	streq	r2, [r4, #36]	; 0x24
   2e8c8:	f383 8811 	msr	BASEPRI, r3
   2e8cc:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   2e8d0:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   2e8d4:	f7e5 ff4e 	bl	14774 <tx_free>
		cb(conn, user_data);
   2e8d8:	4631      	mov	r1, r6
   2e8da:	4620      	mov	r0, r4
   2e8dc:	47a8      	blx	r5
	while (1) {
   2e8de:	e7de      	b.n	2e89e <tx_notify+0x4>

0002e8e0 <tx_complete_work>:
	tx_notify(conn);
   2e8e0:	3828      	subs	r0, #40	; 0x28
   2e8e2:	f7ff bfda 	b.w	2e89a <tx_notify>

0002e8e6 <bt_conn_reset_rx_state>:
{
   2e8e6:	b510      	push	{r4, lr}
   2e8e8:	4604      	mov	r4, r0
	if (!conn->rx) {
   2e8ea:	6900      	ldr	r0, [r0, #16]
   2e8ec:	b118      	cbz	r0, 2e8f6 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2e8ee:	f7f9 f9d9 	bl	27ca4 <net_buf_unref>
	conn->rx = NULL;
   2e8f2:	2300      	movs	r3, #0
   2e8f4:	6123      	str	r3, [r4, #16]
}
   2e8f6:	bd10      	pop	{r4, pc}

0002e8f8 <conn_cleanup>:
{
   2e8f8:	b570      	push	{r4, r5, r6, lr}
   2e8fa:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   2e8fc:	f100 0638 	add.w	r6, r0, #56	; 0x38
   2e900:	2200      	movs	r2, #0
   2e902:	2300      	movs	r3, #0
   2e904:	4630      	mov	r0, r6
   2e906:	f002 f810 	bl	3092a <net_buf_get>
   2e90a:	4605      	mov	r5, r0
   2e90c:	b950      	cbnz	r0, 2e924 <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   2e90e:	4620      	mov	r0, r4
   2e910:	f7ff ffe9 	bl	2e8e6 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2e914:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2e918:	2200      	movs	r2, #0
}
   2e91a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2e91e:	2300      	movs	r3, #0
   2e920:	f7fc b8bc 	b.w	2aa9c <k_work_reschedule>
		if (tx_data(buf)->tx) {
   2e924:	6968      	ldr	r0, [r5, #20]
   2e926:	b108      	cbz	r0, 2e92c <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   2e928:	f7e5 ff24 	bl	14774 <tx_free>
		net_buf_unref(buf);
   2e92c:	4628      	mov	r0, r5
   2e92e:	f7f9 f9b9 	bl	27ca4 <net_buf_unref>
   2e932:	e7e5      	b.n	2e900 <conn_cleanup+0x8>

0002e934 <bt_conn_ref>:
{
   2e934:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   2e936:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2e93a:	f3bf 8f5b 	dmb	ish
   2e93e:	6813      	ldr	r3, [r2, #0]
   2e940:	f3bf 8f5b 	dmb	ish
		if (!old) {
   2e944:	b17b      	cbz	r3, 2e966 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2e946:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   2e94a:	1c59      	adds	r1, r3, #1
   2e94c:	e852 4f00 	ldrex	r4, [r2]
   2e950:	429c      	cmp	r4, r3
   2e952:	d104      	bne.n	2e95e <bt_conn_ref+0x2a>
   2e954:	e842 1c00 	strex	ip, r1, [r2]
   2e958:	f1bc 0f00 	cmp.w	ip, #0
   2e95c:	d1f6      	bne.n	2e94c <bt_conn_ref+0x18>
   2e95e:	f3bf 8f5b 	dmb	ish
   2e962:	d1ea      	bne.n	2e93a <bt_conn_ref+0x6>
}
   2e964:	bd10      	pop	{r4, pc}
			return NULL;
   2e966:	4618      	mov	r0, r3
   2e968:	e7fc      	b.n	2e964 <bt_conn_ref+0x30>

0002e96a <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   2e96a:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2e96e:	f3bf 8f5b 	dmb	ish
   2e972:	e853 2f00 	ldrex	r2, [r3]
   2e976:	3a01      	subs	r2, #1
   2e978:	e843 2100 	strex	r1, r2, [r3]
   2e97c:	2900      	cmp	r1, #0
   2e97e:	d1f8      	bne.n	2e972 <bt_conn_unref+0x8>
   2e980:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   2e984:	7883      	ldrb	r3, [r0, #2]
   2e986:	2b01      	cmp	r3, #1
   2e988:	d108      	bne.n	2e99c <bt_conn_unref+0x32>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2e98a:	f3bf 8f5b 	dmb	ish
   2e98e:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   2e992:	f3bf 8f5b 	dmb	ish
   2e996:	b90b      	cbnz	r3, 2e99c <bt_conn_unref+0x32>
		bt_le_adv_resume();
   2e998:	f7e5 bd30 	b.w	143fc <bt_le_adv_resume>
}
   2e99c:	4770      	bx	lr

0002e99e <conn_lookup_handle>:
{
   2e99e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2e9a2:	4607      	mov	r7, r0
   2e9a4:	460e      	mov	r6, r1
   2e9a6:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   2e9a8:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2e9aa:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   2e9ae:	42b4      	cmp	r4, r6
   2e9b0:	d103      	bne.n	2e9ba <conn_lookup_handle+0x1c>
	return NULL;
   2e9b2:	2300      	movs	r3, #0
}
   2e9b4:	4618      	mov	r0, r3
   2e9b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2e9ba:	fb09 7004 	mla	r0, r9, r4, r7
   2e9be:	f7ff ffb9 	bl	2e934 <bt_conn_ref>
   2e9c2:	4603      	mov	r3, r0
		if (!conn) {
   2e9c4:	b158      	cbz	r0, 2e9de <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   2e9c6:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2e9c8:	2d01      	cmp	r5, #1
   2e9ca:	d002      	beq.n	2e9d2 <conn_lookup_handle+0x34>
   2e9cc:	3d07      	subs	r5, #7
   2e9ce:	2d01      	cmp	r5, #1
   2e9d0:	d803      	bhi.n	2e9da <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   2e9d2:	881a      	ldrh	r2, [r3, #0]
   2e9d4:	4542      	cmp	r2, r8
   2e9d6:	d0ed      	beq.n	2e9b4 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   2e9d8:	4618      	mov	r0, r3
   2e9da:	f7ff ffc6 	bl	2e96a <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2e9de:	3401      	adds	r4, #1
   2e9e0:	e7e5      	b.n	2e9ae <conn_lookup_handle+0x10>

0002e9e2 <bt_conn_connected>:
{
   2e9e2:	b510      	push	{r4, lr}
   2e9e4:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2e9e6:	f7e6 fd23 	bl	15430 <bt_l2cap_connected>
	notify_connected(conn);
   2e9ea:	4620      	mov	r0, r4
}
   2e9ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   2e9f0:	f7e5 bea2 	b.w	14738 <notify_connected>

0002e9f4 <bt_conn_disconnect>:
{
   2e9f4:	b538      	push	{r3, r4, r5, lr}
	switch (conn->state) {
   2e9f6:	7b43      	ldrb	r3, [r0, #13]
   2e9f8:	3b02      	subs	r3, #2
{
   2e9fa:	4604      	mov	r4, r0
	switch (conn->state) {
   2e9fc:	2b06      	cmp	r3, #6
   2e9fe:	d805      	bhi.n	2ea0c <bt_conn_disconnect+0x18>
   2ea00:	e8df f003 	tbb	[pc, r3]
   2ea04:	04040408 	.word	0x04040408
   2ea08:	0e0c      	.short	0x0e0c
   2ea0a:	0c          	.byte	0x0c
   2ea0b:	00          	.byte	0x00
   2ea0c:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   2ea10:	4628      	mov	r0, r5
   2ea12:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   2ea14:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2ea16:	2100      	movs	r1, #0
   2ea18:	f7e6 f8c0 	bl	14b9c <bt_conn_set_state>
		return 0;
   2ea1c:	2500      	movs	r5, #0
   2ea1e:	e7f7      	b.n	2ea10 <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   2ea20:	8800      	ldrh	r0, [r0, #0]
   2ea22:	f7ff fcaa 	bl	2e37a <bt_hci_disconnect>
	if (err) {
   2ea26:	4605      	mov	r5, r0
   2ea28:	2800      	cmp	r0, #0
   2ea2a:	d1f1      	bne.n	2ea10 <bt_conn_disconnect+0x1c>
	if (conn->state == BT_CONN_CONNECTED) {
   2ea2c:	7b63      	ldrb	r3, [r4, #13]
   2ea2e:	2b07      	cmp	r3, #7
   2ea30:	d1ee      	bne.n	2ea10 <bt_conn_disconnect+0x1c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   2ea32:	2108      	movs	r1, #8
   2ea34:	4620      	mov	r0, r4
   2ea36:	f7e6 f8b1 	bl	14b9c <bt_conn_set_state>
   2ea3a:	e7e9      	b.n	2ea10 <bt_conn_disconnect+0x1c>

0002ea3c <bt_conn_set_security>:
{
   2ea3c:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2ea3e:	7b43      	ldrb	r3, [r0, #13]
   2ea40:	2b07      	cmp	r3, #7
{
   2ea42:	4604      	mov	r4, r0
   2ea44:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   2ea46:	d124      	bne.n	2ea92 <bt_conn_set_security+0x56>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   2ea48:	7a43      	ldrb	r3, [r0, #9]
   2ea4a:	428b      	cmp	r3, r1
   2ea4c:	d224      	bcs.n	2ea98 <bt_conn_set_security+0x5c>
   2ea4e:	7a83      	ldrb	r3, [r0, #10]
   2ea50:	428b      	cmp	r3, r1
   2ea52:	d221      	bcs.n	2ea98 <bt_conn_set_security+0x5c>
	if (val) {
   2ea54:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   2ea56:	f100 0004 	add.w	r0, r0, #4
   2ea5a:	d515      	bpl.n	2ea88 <bt_conn_set_security+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2ea5c:	f3bf 8f5b 	dmb	ish
   2ea60:	e850 3f00 	ldrex	r3, [r0]
   2ea64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   2ea68:	e840 3200 	strex	r2, r3, [r0]
   2ea6c:	2a00      	cmp	r2, #0
   2ea6e:	d1f7      	bne.n	2ea60 <bt_conn_set_security+0x24>
   2ea70:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2ea74:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   2ea78:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   2ea7a:	4620      	mov	r0, r4
   2ea7c:	f7ea fb1a 	bl	190b4 <bt_smp_start_security>
	if (err) {
   2ea80:	b108      	cbz	r0, 2ea86 <bt_conn_set_security+0x4a>
		conn->required_sec_level = conn->sec_level;
   2ea82:	7a63      	ldrb	r3, [r4, #9]
   2ea84:	72a3      	strb	r3, [r4, #10]
}
   2ea86:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2ea88:	f46f 6180 	mvn.w	r1, #1024	; 0x400
   2ea8c:	f7ff fef3 	bl	2e876 <atomic_and>
   2ea90:	e7f0      	b.n	2ea74 <bt_conn_set_security+0x38>
		return -ENOTCONN;
   2ea92:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2ea96:	e7f6      	b.n	2ea86 <bt_conn_set_security+0x4a>
		return 0;
   2ea98:	2000      	movs	r0, #0
   2ea9a:	e7f4      	b.n	2ea86 <bt_conn_set_security+0x4a>

0002ea9c <bt_conn_get_security>:
}
   2ea9c:	7a40      	ldrb	r0, [r0, #9]
   2ea9e:	4770      	bx	lr

0002eaa0 <bt_conn_is_peer_addr_le>:
{
   2eaa0:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2eaa2:	7a03      	ldrb	r3, [r0, #8]
   2eaa4:	428b      	cmp	r3, r1
{
   2eaa6:	4604      	mov	r4, r0
   2eaa8:	4615      	mov	r5, r2
	if (id != conn->id) {
   2eaaa:	d115      	bne.n	2ead8 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2eaac:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2eab0:	2207      	movs	r2, #7
   2eab2:	4628      	mov	r0, r5
   2eab4:	f7ff faa8 	bl	2e008 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   2eab8:	b180      	cbz	r0, 2eadc <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2eaba:	78e3      	ldrb	r3, [r4, #3]
   2eabc:	2207      	movs	r2, #7
   2eabe:	b943      	cbnz	r3, 2ead2 <bt_conn_is_peer_addr_le+0x32>
   2eac0:	f104 0196 	add.w	r1, r4, #150	; 0x96
   2eac4:	4628      	mov	r0, r5
   2eac6:	f7ff fa9f 	bl	2e008 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   2eaca:	fab0 f080 	clz	r0, r0
   2eace:	0940      	lsrs	r0, r0, #5
}
   2ead0:	bd38      	pop	{r3, r4, r5, pc}
   2ead2:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   2ead6:	e7f5      	b.n	2eac4 <bt_conn_is_peer_addr_le+0x24>
		return false;
   2ead8:	2000      	movs	r0, #0
   2eada:	e7f9      	b.n	2ead0 <bt_conn_is_peer_addr_le+0x30>
		return true;
   2eadc:	2001      	movs	r0, #1
   2eade:	e7f7      	b.n	2ead0 <bt_conn_is_peer_addr_le+0x30>

0002eae0 <bt_conn_get_dst>:
}
   2eae0:	3088      	adds	r0, #136	; 0x88
   2eae2:	4770      	bx	lr

0002eae4 <bt_conn_le_conn_update>:
{
   2eae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2eae6:	4607      	mov	r7, r0
   2eae8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2eaea:	f242 0013 	movw	r0, #8211	; 0x2013
   2eaee:	210e      	movs	r1, #14
   2eaf0:	f7e3 fd84 	bl	125fc <bt_hci_cmd_create>
	if (!buf) {
   2eaf4:	4606      	mov	r6, r0
   2eaf6:	b1d0      	cbz	r0, 2eb2e <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   2eaf8:	210e      	movs	r1, #14
   2eafa:	3008      	adds	r0, #8
   2eafc:	f001 ffba 	bl	30a74 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   2eb00:	220e      	movs	r2, #14
   2eb02:	4604      	mov	r4, r0
   2eb04:	2100      	movs	r1, #0
   2eb06:	f7ff fa9b 	bl	2e040 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2eb0a:	883b      	ldrh	r3, [r7, #0]
   2eb0c:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2eb0e:	882b      	ldrh	r3, [r5, #0]
   2eb10:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2eb12:	886b      	ldrh	r3, [r5, #2]
   2eb14:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2eb16:	88ab      	ldrh	r3, [r5, #4]
   2eb18:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2eb1a:	88eb      	ldrh	r3, [r5, #6]
   2eb1c:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2eb1e:	4631      	mov	r1, r6
   2eb20:	2200      	movs	r2, #0
}
   2eb22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2eb26:	f242 0013 	movw	r0, #8211	; 0x2013
   2eb2a:	f7e3 be99 	b.w	12860 <bt_hci_cmd_send_sync>
}
   2eb2e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2eb32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002eb34 <l2cap_connected>:
}
   2eb34:	4770      	bx	lr

0002eb36 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   2eb36:	3010      	adds	r0, #16
   2eb38:	f002 beef 	b.w	3191a <k_work_cancel_delayable>

0002eb3c <z_log_msg2_static_create.constprop.0>:
   2eb3c:	2300      	movs	r3, #0
   2eb3e:	f7fd bcc2 	b.w	2c4c6 <z_impl_z_log_msg2_static_create>

0002eb42 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   2eb42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2eb44:	4605      	mov	r5, r0
   2eb46:	460f      	mov	r7, r1
   2eb48:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   2eb4a:	2300      	movs	r3, #0
   2eb4c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2eb50:	2104      	movs	r1, #4
   2eb52:	2000      	movs	r0, #0
   2eb54:	f7e6 f924 	bl	14da0 <bt_conn_create_pdu_timeout>
	if (!buf) {
   2eb58:	4604      	mov	r4, r0
   2eb5a:	b920      	cbnz	r0, 2eb66 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   2eb5c:	4628      	mov	r0, r5
}
   2eb5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2eb62:	f7e6 bc0f 	b.w	15384 <l2cap_create_le_sig_pdu.part.0>
   2eb66:	2104      	movs	r1, #4
   2eb68:	3008      	adds	r0, #8
   2eb6a:	f001 ff83 	bl	30a74 <net_buf_simple_add>
	hdr->code = code;
   2eb6e:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   2eb70:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   2eb72:	8046      	strh	r6, [r0, #2]
}
   2eb74:	4620      	mov	r0, r4
   2eb76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002eb78 <bt_l2cap_chan_remove>:
	return list->head;
   2eb78:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   2eb7a:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2eb7c:	b173      	cbz	r3, 2eb9c <bt_l2cap_chan_remove+0x24>
   2eb7e:	3b08      	subs	r3, #8
   2eb80:	2500      	movs	r5, #0
	return node->next;
   2eb82:	461a      	mov	r2, r3
		if (chan == ch) {
   2eb84:	4299      	cmp	r1, r3
   2eb86:	f852 4f08 	ldr.w	r4, [r2, #8]!
   2eb8a:	d10d      	bne.n	2eba8 <bt_l2cap_chan_remove+0x30>
	return list->tail;
   2eb8c:	6d41      	ldr	r1, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   2eb8e:	b935      	cbnz	r5, 2eb9e <bt_l2cap_chan_remove+0x26>
   2eb90:	4291      	cmp	r1, r2
	list->head = node;
   2eb92:	6504      	str	r4, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   2eb94:	d100      	bne.n	2eb98 <bt_l2cap_chan_remove+0x20>
	list->tail = node;
   2eb96:	6544      	str	r4, [r0, #84]	; 0x54
	parent->next = child;
   2eb98:	2200      	movs	r2, #0
   2eb9a:	609a      	str	r2, [r3, #8]
}
   2eb9c:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   2eb9e:	4291      	cmp	r1, r2
	parent->next = child;
   2eba0:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2eba2:	bf08      	it	eq
   2eba4:	6545      	streq	r5, [r0, #84]	; 0x54
}
   2eba6:	e7f7      	b.n	2eb98 <bt_l2cap_chan_remove+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2eba8:	2c00      	cmp	r4, #0
   2ebaa:	d0f7      	beq.n	2eb9c <bt_l2cap_chan_remove+0x24>
   2ebac:	f1a4 0308 	sub.w	r3, r4, #8
			sys_slist_remove(&conn->channels, prev, &chan->node);
   2ebb0:	4615      	mov	r5, r2
   2ebb2:	e7e6      	b.n	2eb82 <bt_l2cap_chan_remove+0xa>

0002ebb4 <bt_l2cap_chan_del>:
{
   2ebb4:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   2ebb6:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   2ebba:	4604      	mov	r4, r0
	if (!chan->conn) {
   2ebbc:	b123      	cbz	r3, 2ebc8 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2ebbe:	686b      	ldr	r3, [r5, #4]
   2ebc0:	b103      	cbz	r3, 2ebc4 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2ebc2:	4798      	blx	r3
	chan->conn = NULL;
   2ebc4:	2300      	movs	r3, #0
   2ebc6:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2ebc8:	68e3      	ldr	r3, [r4, #12]
   2ebca:	b10b      	cbz	r3, 2ebd0 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2ebcc:	4620      	mov	r0, r4
   2ebce:	4798      	blx	r3
	if (ops->released) {
   2ebd0:	69eb      	ldr	r3, [r5, #28]
   2ebd2:	b11b      	cbz	r3, 2ebdc <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   2ebd4:	4620      	mov	r0, r4
}
   2ebd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2ebda:	4718      	bx	r3
}
   2ebdc:	bd70      	pop	{r4, r5, r6, pc}

0002ebde <bt_l2cap_disconnected>:
	return list->head;
   2ebde:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   2ebe0:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2ebe2:	b160      	cbz	r0, 2ebfe <bt_l2cap_disconnected+0x20>
	return node->next;
   2ebe4:	f850 4908 	ldr.w	r4, [r0], #-8
   2ebe8:	b104      	cbz	r4, 2ebec <bt_l2cap_disconnected+0xe>
   2ebea:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   2ebec:	f7ff ffe2 	bl	2ebb4 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2ebf0:	b12c      	cbz	r4, 2ebfe <bt_l2cap_disconnected+0x20>
   2ebf2:	68a3      	ldr	r3, [r4, #8]
   2ebf4:	b103      	cbz	r3, 2ebf8 <bt_l2cap_disconnected+0x1a>
   2ebf6:	3b08      	subs	r3, #8
{
   2ebf8:	4620      	mov	r0, r4
   2ebfa:	461c      	mov	r4, r3
   2ebfc:	e7f6      	b.n	2ebec <bt_l2cap_disconnected+0xe>
}
   2ebfe:	bd10      	pop	{r4, pc}

0002ec00 <bt_l2cap_security_changed>:
	return list->head;
   2ec00:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   2ec02:	b538      	push	{r3, r4, r5, lr}
   2ec04:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2ec06:	b178      	cbz	r0, 2ec28 <bt_l2cap_security_changed+0x28>
	return node->next;
   2ec08:	f850 4908 	ldr.w	r4, [r0], #-8
   2ec0c:	b104      	cbz	r4, 2ec10 <bt_l2cap_security_changed+0x10>
   2ec0e:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   2ec10:	6843      	ldr	r3, [r0, #4]
   2ec12:	689b      	ldr	r3, [r3, #8]
   2ec14:	b10b      	cbz	r3, 2ec1a <bt_l2cap_security_changed+0x1a>
			chan->ops->encrypt_change(chan, hci_status);
   2ec16:	4629      	mov	r1, r5
   2ec18:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2ec1a:	b12c      	cbz	r4, 2ec28 <bt_l2cap_security_changed+0x28>
   2ec1c:	68a3      	ldr	r3, [r4, #8]
   2ec1e:	b103      	cbz	r3, 2ec22 <bt_l2cap_security_changed+0x22>
   2ec20:	3b08      	subs	r3, #8
{
   2ec22:	4620      	mov	r0, r4
   2ec24:	461c      	mov	r4, r3
   2ec26:	e7f3      	b.n	2ec10 <bt_l2cap_security_changed+0x10>
}
   2ec28:	bd38      	pop	{r3, r4, r5, pc}

0002ec2a <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   2ec2a:	3104      	adds	r1, #4
   2ec2c:	f7e6 b8b8 	b.w	14da0 <bt_conn_create_pdu_timeout>

0002ec30 <bt_l2cap_send_cb>:
{
   2ec30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ec34:	4614      	mov	r4, r2
   2ec36:	4605      	mov	r5, r0
   2ec38:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   2ec3a:	f102 0008 	add.w	r0, r2, #8
   2ec3e:	2104      	movs	r1, #4
   2ec40:	461e      	mov	r6, r3
   2ec42:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2ec46:	f001 ff2c 	bl	30aa2 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2ec4a:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   2ec4c:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2ec4e:	3a04      	subs	r2, #4
   2ec50:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2ec52:	4643      	mov	r3, r8
   2ec54:	4632      	mov	r2, r6
   2ec56:	4621      	mov	r1, r4
   2ec58:	4628      	mov	r0, r5
}
   2ec5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2ec5e:	f7e5 befb 	b.w	14a58 <bt_conn_send_cb>

0002ec62 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   2ec62:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2ec64:	b138      	cbz	r0, 2ec76 <bt_l2cap_le_lookup_tx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2ec66:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
   2ec6a:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2ec6c:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2ec70:	d001      	beq.n	2ec76 <bt_l2cap_le_lookup_tx_cid+0x14>
	return node->next;
   2ec72:	6880      	ldr	r0, [r0, #8]
   2ec74:	e7f6      	b.n	2ec64 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   2ec76:	4770      	bx	lr

0002ec78 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2ec78:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2ec7a:	b138      	cbz	r0, 2ec8c <bt_l2cap_le_lookup_rx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2ec7c:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
   2ec80:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2ec82:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2ec86:	d001      	beq.n	2ec8c <bt_l2cap_le_lookup_rx_cid+0x14>
	return node->next;
   2ec88:	6880      	ldr	r0, [r0, #8]
   2ec8a:	e7f6      	b.n	2ec7a <bt_l2cap_le_lookup_rx_cid+0x2>
}
   2ec8c:	4770      	bx	lr

0002ec8e <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   2ec8e:	4770      	bx	lr

0002ec90 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2ec90:	4603      	mov	r3, r0
	return list->head;
   2ec92:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2ec94:	b128      	cbz	r0, 2eca2 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2ec96:	6859      	ldr	r1, [r3, #4]
	return node->next;
   2ec98:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2ec9a:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2ec9c:	4288      	cmp	r0, r1
	list->tail = node;
   2ec9e:	bf08      	it	eq
   2eca0:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2eca2:	4770      	bx	lr

0002eca4 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   2eca4:	4603      	mov	r3, r0
	size_t bytes = 0;
   2eca6:	2000      	movs	r0, #0

	while (buf) {
   2eca8:	b903      	cbnz	r3, 2ecac <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   2ecaa:	4770      	bx	lr
		bytes += buf->len;
   2ecac:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   2ecae:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   2ecb0:	4410      	add	r0, r2
		buf = buf->frags;
   2ecb2:	e7f9      	b.n	2eca8 <net_buf_frags_len+0x4>

0002ecb4 <att_sent>:
	if (chan->ops->sent) {
   2ecb4:	684b      	ldr	r3, [r1, #4]
   2ecb6:	695b      	ldr	r3, [r3, #20]
{
   2ecb8:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   2ecba:	b103      	cbz	r3, 2ecbe <att_sent+0xa>
		chan->ops->sent(chan);
   2ecbc:	4718      	bx	r3
}
   2ecbe:	4770      	bx	lr

0002ecc0 <attr_read_type_cb>:
{
   2ecc0:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2ecc2:	68d4      	ldr	r4, [r2, #12]
   2ecc4:	7823      	ldrb	r3, [r4, #0]
   2ecc6:	3102      	adds	r1, #2
   2ecc8:	b913      	cbnz	r3, 2ecd0 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2ecca:	7021      	strb	r1, [r4, #0]
	return true;
   2eccc:	2001      	movs	r0, #1
   2ecce:	e006      	b.n	2ecde <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2ecd0:	428b      	cmp	r3, r1
   2ecd2:	d0fb      	beq.n	2eccc <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   2ecd4:	8983      	ldrh	r3, [r0, #12]
   2ecd6:	3b02      	subs	r3, #2
   2ecd8:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   2ecda:	2000      	movs	r0, #0
   2ecdc:	6110      	str	r0, [r2, #16]
}
   2ecde:	bd10      	pop	{r4, pc}

0002ece0 <att_op_get_type>:
	switch (op) {
   2ece0:	2852      	cmp	r0, #82	; 0x52
   2ece2:	d830      	bhi.n	2ed46 <att_op_get_type+0x66>
   2ece4:	b388      	cbz	r0, 2ed4a <att_op_get_type+0x6a>
   2ece6:	1e43      	subs	r3, r0, #1
   2ece8:	2b51      	cmp	r3, #81	; 0x51
   2ecea:	d82e      	bhi.n	2ed4a <att_op_get_type+0x6a>
   2ecec:	e8df f003 	tbb	[pc, r3]
   2ecf0:	39333933 	.word	0x39333933
   2ecf4:	39333933 	.word	0x39333933
   2ecf8:	39333933 	.word	0x39333933
   2ecfc:	39333933 	.word	0x39333933
   2ed00:	2d333933 	.word	0x2d333933
   2ed04:	3933392d 	.word	0x3933392d
   2ed08:	2d352d33 	.word	0x2d352d33
   2ed0c:	392d2937 	.word	0x392d2937
   2ed10:	2d352d33 	.word	0x2d352d33
   2ed14:	2d2d2d2d 	.word	0x2d2d2d2d
   2ed18:	2d2d2d2d 	.word	0x2d2d2d2d
   2ed1c:	2d2d2d2d 	.word	0x2d2d2d2d
   2ed20:	2d2d2d2d 	.word	0x2d2d2d2d
   2ed24:	2d2d2d2d 	.word	0x2d2d2d2d
   2ed28:	2d2d2d2d 	.word	0x2d2d2d2d
   2ed2c:	2d2d2d2d 	.word	0x2d2d2d2d
   2ed30:	2d2d2d2d 	.word	0x2d2d2d2d
   2ed34:	2d2d2d2d 	.word	0x2d2d2d2d
   2ed38:	2d2d2d2d 	.word	0x2d2d2d2d
   2ed3c:	2d2d2d2d 	.word	0x2d2d2d2d
   2ed40:	3b2d      	.short	0x3b2d
   2ed42:	2004      	movs	r0, #4
   2ed44:	4770      	bx	lr
   2ed46:	28d2      	cmp	r0, #210	; 0xd2
   2ed48:	d00d      	beq.n	2ed66 <att_op_get_type+0x86>
		return ATT_COMMAND;
   2ed4a:	f010 0f40 	tst.w	r0, #64	; 0x40
   2ed4e:	bf0c      	ite	eq
   2ed50:	2006      	moveq	r0, #6
   2ed52:	2000      	movne	r0, #0
   2ed54:	4770      	bx	lr
		return ATT_RESPONSE;
   2ed56:	2002      	movs	r0, #2
   2ed58:	4770      	bx	lr
		return ATT_NOTIFICATION;
   2ed5a:	2003      	movs	r0, #3
   2ed5c:	4770      	bx	lr
		return ATT_INDICATION;
   2ed5e:	2005      	movs	r0, #5
   2ed60:	4770      	bx	lr
		return ATT_REQUEST;
   2ed62:	2001      	movs	r0, #1
   2ed64:	4770      	bx	lr
		return ATT_COMMAND;
   2ed66:	2000      	movs	r0, #0
}
   2ed68:	4770      	bx	lr

0002ed6a <bt_gatt_foreach_attr>:
{
   2ed6a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2ed6c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2ed70:	2300      	movs	r3, #0
   2ed72:	9300      	str	r3, [sp, #0]
   2ed74:	461a      	mov	r2, r3
   2ed76:	f7e8 fb1b 	bl	173b0 <bt_gatt_foreach_attr_type>
}
   2ed7a:	b005      	add	sp, #20
   2ed7c:	f85d fb04 	ldr.w	pc, [sp], #4

0002ed80 <find_info_cb>:
{
   2ed80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2ed82:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   2ed84:	6817      	ldr	r7, [r2, #0]
{
   2ed86:	4605      	mov	r5, r0
   2ed88:	460e      	mov	r6, r1
   2ed8a:	4614      	mov	r4, r2
	if (!data->rsp) {
   2ed8c:	b963      	cbnz	r3, 2eda8 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   2ed8e:	6850      	ldr	r0, [r2, #4]
   2ed90:	2101      	movs	r1, #1
   2ed92:	3008      	adds	r0, #8
   2ed94:	f001 fe6e 	bl	30a74 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2ed98:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2ed9a:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2ed9c:	781b      	ldrb	r3, [r3, #0]
   2ed9e:	2b00      	cmp	r3, #0
   2eda0:	bf0c      	ite	eq
   2eda2:	2301      	moveq	r3, #1
   2eda4:	2302      	movne	r3, #2
   2eda6:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   2eda8:	68a3      	ldr	r3, [r4, #8]
   2edaa:	781b      	ldrb	r3, [r3, #0]
   2edac:	2b01      	cmp	r3, #1
   2edae:	d003      	beq.n	2edb8 <find_info_cb+0x38>
   2edb0:	2b02      	cmp	r3, #2
   2edb2:	d019      	beq.n	2ede8 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   2edb4:	2000      	movs	r0, #0
   2edb6:	e016      	b.n	2ede6 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2edb8:	682b      	ldr	r3, [r5, #0]
   2edba:	781b      	ldrb	r3, [r3, #0]
   2edbc:	2b00      	cmp	r3, #0
   2edbe:	d1f9      	bne.n	2edb4 <find_info_cb+0x34>
   2edc0:	6860      	ldr	r0, [r4, #4]
   2edc2:	2104      	movs	r1, #4
   2edc4:	3008      	adds	r0, #8
   2edc6:	f001 fe55 	bl	30a74 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2edca:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2edcc:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2edce:	885b      	ldrh	r3, [r3, #2]
   2edd0:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2edd2:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   2edd4:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   2edd6:	899b      	ldrh	r3, [r3, #12]
   2edd8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   2eddc:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2edde:	2804      	cmp	r0, #4
   2ede0:	bf94      	ite	ls
   2ede2:	2000      	movls	r0, #0
   2ede4:	2001      	movhi	r0, #1
}
   2ede6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2ede8:	682b      	ldr	r3, [r5, #0]
   2edea:	781b      	ldrb	r3, [r3, #0]
   2edec:	2b02      	cmp	r3, #2
   2edee:	d1e1      	bne.n	2edb4 <find_info_cb+0x34>
   2edf0:	6860      	ldr	r0, [r4, #4]
   2edf2:	2112      	movs	r1, #18
   2edf4:	3008      	adds	r0, #8
   2edf6:	f001 fe3d 	bl	30a74 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2edfa:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2edfc:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2edfe:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   2ee00:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2ee04:	3101      	adds	r1, #1
   2ee06:	f7ff f910 	bl	2e02a <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   2ee0a:	6863      	ldr	r3, [r4, #4]
   2ee0c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   2ee10:	899b      	ldrh	r3, [r3, #12]
   2ee12:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2ee14:	2812      	cmp	r0, #18
   2ee16:	e7e3      	b.n	2ede0 <find_info_cb+0x60>

0002ee18 <att_chan_mtu_updated>:
{
   2ee18:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   2ee1a:	6806      	ldr	r6, [r0, #0]
	return list->head;
   2ee1c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2ee1e:	b1e3      	cbz	r3, 2ee5a <att_chan_mtu_updated+0x42>
	return node->next;
   2ee20:	681a      	ldr	r2, [r3, #0]
   2ee22:	f5a3 75a2 	sub.w	r5, r3, #324	; 0x144
   2ee26:	b10a      	cbz	r2, 2ee2c <att_chan_mtu_updated+0x14>
   2ee28:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   2ee2c:	2300      	movs	r3, #0
   2ee2e:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   2ee30:	42a8      	cmp	r0, r5
   2ee32:	d009      	beq.n	2ee48 <att_chan_mtu_updated+0x30>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2ee34:	f8b5 408a 	ldrh.w	r4, [r5, #138]	; 0x8a
   2ee38:	42a1      	cmp	r1, r4
   2ee3a:	bf38      	it	cc
   2ee3c:	4621      	movcc	r1, r4
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2ee3e:	f8b5 407a 	ldrh.w	r4, [r5, #122]	; 0x7a
   2ee42:	42a3      	cmp	r3, r4
   2ee44:	bf38      	it	cc
   2ee46:	4623      	movcc	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2ee48:	b142      	cbz	r2, 2ee5c <att_chan_mtu_updated+0x44>
   2ee4a:	f8d2 4144 	ldr.w	r4, [r2, #324]	; 0x144
   2ee4e:	b10c      	cbz	r4, 2ee54 <att_chan_mtu_updated+0x3c>
   2ee50:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   2ee54:	4615      	mov	r5, r2
   2ee56:	4622      	mov	r2, r4
   2ee58:	e7ea      	b.n	2ee30 <att_chan_mtu_updated+0x18>
   2ee5a:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2ee5c:	f8b0 408a 	ldrh.w	r4, [r0, #138]	; 0x8a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   2ee60:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2ee64:	428c      	cmp	r4, r1
   2ee66:	d801      	bhi.n	2ee6c <att_chan_mtu_updated+0x54>
   2ee68:	429a      	cmp	r2, r3
   2ee6a:	d909      	bls.n	2ee80 <att_chan_mtu_updated+0x68>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2ee6c:	429a      	cmp	r2, r3
   2ee6e:	bf38      	it	cc
   2ee70:	461a      	movcc	r2, r3
   2ee72:	42a1      	cmp	r1, r4
   2ee74:	6830      	ldr	r0, [r6, #0]
   2ee76:	bf38      	it	cc
   2ee78:	4621      	movcc	r1, r4
}
   2ee7a:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2ee7c:	f7e8 bf82 	b.w	17d84 <bt_gatt_att_max_mtu_changed>
}
   2ee80:	bc70      	pop	{r4, r5, r6}
   2ee82:	4770      	bx	lr

0002ee84 <attr_read_group_cb>:
	if (!data->rsp->len) {
   2ee84:	68d0      	ldr	r0, [r2, #12]
   2ee86:	7803      	ldrb	r3, [r0, #0]
   2ee88:	3104      	adds	r1, #4
   2ee8a:	b913      	cbnz	r3, 2ee92 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2ee8c:	7001      	strb	r1, [r0, #0]
	return true;
   2ee8e:	2001      	movs	r0, #1
}
   2ee90:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2ee92:	428b      	cmp	r3, r1
   2ee94:	d0fb      	beq.n	2ee8e <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   2ee96:	6891      	ldr	r1, [r2, #8]
   2ee98:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   2ee9a:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   2ee9c:	3b04      	subs	r3, #4
   2ee9e:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   2eea0:	6110      	str	r0, [r2, #16]
		return false;
   2eea2:	4770      	bx	lr

0002eea4 <chan_req_sent>:
	if (chan->req) {
   2eea4:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   2eea8:	b133      	cbz	r3, 2eeb8 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2eeaa:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2eeae:	2300      	movs	r3, #0
   2eeb0:	f500 7088 	add.w	r0, r0, #272	; 0x110
   2eeb4:	f7fb bdf2 	b.w	2aa9c <k_work_reschedule>
}
   2eeb8:	4770      	bx	lr

0002eeba <write_cb>:
{
   2eeba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2eebc:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2eebe:	4601      	mov	r1, r0
{
   2eec0:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2eec2:	222a      	movs	r2, #42	; 0x2a
   2eec4:	6820      	ldr	r0, [r4, #0]
   2eec6:	f000 fdf2 	bl	2faae <bt_gatt_check_perm>
   2eeca:	4605      	mov	r5, r0
   2eecc:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2eece:	bb20      	cbnz	r0, 2ef1a <write_cb+0x60>
	if (!data->req) {
   2eed0:	7a23      	ldrb	r3, [r4, #8]
   2eed2:	b1ab      	cbz	r3, 2ef00 <write_cb+0x46>
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   2eed4:	2b18      	cmp	r3, #24
   2eed6:	bf14      	ite	ne
   2eed8:	2300      	movne	r3, #0
   2eeda:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   2eedc:	9301      	str	r3, [sp, #4]
   2eede:	8a63      	ldrh	r3, [r4, #18]
   2eee0:	9300      	str	r3, [sp, #0]
   2eee2:	68b7      	ldr	r7, [r6, #8]
   2eee4:	8a23      	ldrh	r3, [r4, #16]
   2eee6:	68e2      	ldr	r2, [r4, #12]
   2eee8:	6820      	ldr	r0, [r4, #0]
   2eeea:	4631      	mov	r1, r6
   2eeec:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   2eeee:	1e03      	subs	r3, r0, #0
   2eef0:	db08      	blt.n	2ef04 <write_cb+0x4a>
   2eef2:	8a22      	ldrh	r2, [r4, #16]
   2eef4:	4293      	cmp	r3, r2
   2eef6:	d10e      	bne.n	2ef16 <write_cb+0x5c>
	data->err = 0U;
   2eef8:	2300      	movs	r3, #0
   2eefa:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2eefc:	2501      	movs	r5, #1
   2eefe:	e007      	b.n	2ef10 <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2ef00:	2302      	movs	r3, #2
   2ef02:	e7eb      	b.n	2eedc <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   2ef04:	f113 0fff 	cmn.w	r3, #255	; 0xff
   2ef08:	d305      	bcc.n	2ef16 <write_cb+0x5c>
		return -err;
   2ef0a:	425b      	negs	r3, r3
   2ef0c:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   2ef0e:	7523      	strb	r3, [r4, #20]
}
   2ef10:	4628      	mov	r0, r5
   2ef12:	b003      	add	sp, #12
   2ef14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   2ef16:	230e      	movs	r3, #14
   2ef18:	e7f9      	b.n	2ef0e <write_cb+0x54>
		return BT_GATT_ITER_STOP;
   2ef1a:	2500      	movs	r5, #0
   2ef1c:	e7f8      	b.n	2ef10 <write_cb+0x56>

0002ef1e <z_log_msg2_static_create.constprop.0>:
   2ef1e:	2300      	movs	r3, #0
   2ef20:	f7fd bad1 	b.w	2c4c6 <z_impl_z_log_msg2_static_create>

0002ef24 <chan_req_send>:
{
   2ef24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2ef26:	688f      	ldr	r7, [r1, #8]
{
   2ef28:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2ef2a:	4638      	mov	r0, r7
   2ef2c:	f7ff feba 	bl	2eca4 <net_buf_frags_len>
   2ef30:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
   2ef34:	4283      	cmp	r3, r0
{
   2ef36:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2ef38:	d30d      	bcc.n	2ef56 <chan_req_send+0x32>
	req->buf = NULL;
   2ef3a:	2600      	movs	r6, #0
	chan->req = req;
   2ef3c:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   2ef40:	4632      	mov	r2, r6
	req->buf = NULL;
   2ef42:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   2ef44:	4620      	mov	r0, r4
   2ef46:	4639      	mov	r1, r7
   2ef48:	f7e6 fca6 	bl	15898 <chan_send>
	if (err) {
   2ef4c:	b110      	cbz	r0, 2ef54 <chan_req_send+0x30>
		req->buf = buf;
   2ef4e:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   2ef50:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
}
   2ef54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2ef56:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2ef5a:	e7fb      	b.n	2ef54 <chan_req_send+0x30>

0002ef5c <process_queue>:
{
   2ef5c:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   2ef5e:	2200      	movs	r2, #0
{
   2ef60:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   2ef62:	2300      	movs	r3, #0
   2ef64:	4608      	mov	r0, r1
{
   2ef66:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   2ef68:	f001 fcdf 	bl	3092a <net_buf_get>
	if (buf) {
   2ef6c:	4605      	mov	r5, r0
   2ef6e:	b160      	cbz	r0, 2ef8a <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   2ef70:	4601      	mov	r1, r0
   2ef72:	2200      	movs	r2, #0
   2ef74:	4620      	mov	r0, r4
   2ef76:	f7e6 fc8f 	bl	15898 <chan_send>
		if (err) {
   2ef7a:	4604      	mov	r4, r0
   2ef7c:	b118      	cbz	r0, 2ef86 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   2ef7e:	4629      	mov	r1, r5
   2ef80:	4630      	mov	r0, r6
   2ef82:	f002 fbd2 	bl	3172a <k_queue_prepend>
}
   2ef86:	4620      	mov	r0, r4
   2ef88:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2ef8a:	f06f 0401 	mvn.w	r4, #1
   2ef8e:	e7fa      	b.n	2ef86 <process_queue+0x2a>

0002ef90 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2ef90:	b510      	push	{r4, lr}
	return list->head;
   2ef92:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2ef94:	2200      	movs	r2, #0
   2ef96:	b153      	cbz	r3, 2efae <sys_slist_find_and_remove.isra.0+0x1e>
   2ef98:	428b      	cmp	r3, r1
   2ef9a:	d10e      	bne.n	2efba <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   2ef9c:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   2ef9e:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2efa0:	b932      	cbnz	r2, 2efb0 <sys_slist_find_and_remove.isra.0+0x20>
   2efa2:	42a1      	cmp	r1, r4
	list->head = node;
   2efa4:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2efa6:	d100      	bne.n	2efaa <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   2efa8:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2efaa:	2300      	movs	r3, #0
   2efac:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2efae:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   2efb0:	42a1      	cmp	r1, r4
	parent->next = child;
   2efb2:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2efb4:	bf08      	it	eq
   2efb6:	6042      	streq	r2, [r0, #4]
}
   2efb8:	e7f7      	b.n	2efaa <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   2efba:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2efbc:	681b      	ldr	r3, [r3, #0]
   2efbe:	e7ea      	b.n	2ef96 <sys_slist_find_and_remove.isra.0+0x6>

0002efc0 <att_chan_read>:
{
   2efc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2efc4:	4680      	mov	r8, r0
   2efc6:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2efc8:	4610      	mov	r0, r2
{
   2efca:	4699      	mov	r9, r3
   2efcc:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2efce:	f7ff fe69 	bl	2eca4 <net_buf_frags_len>
   2efd2:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   2efd6:	4283      	cmp	r3, r0
{
   2efd8:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2efda:	d97a      	bls.n	2f0d2 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2efdc:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2efe0:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   2efe2:	4630      	mov	r0, r6
   2efe4:	f001 fd18 	bl	30a18 <net_buf_frag_last>
	size_t len, total = 0;
   2efe8:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   2efec:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2efee:	4630      	mov	r0, r6
   2eff0:	f7ff fe58 	bl	2eca4 <net_buf_frags_len>
   2eff4:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   2eff8:	f105 0708 	add.w	r7, r5, #8
   2effc:	1a24      	subs	r4, r4, r0
   2effe:	4638      	mov	r0, r7
   2f000:	f001 fd73 	bl	30aea <net_buf_simple_tailroom>
   2f004:	4284      	cmp	r4, r0
   2f006:	d211      	bcs.n	2f02c <att_chan_read+0x6c>
   2f008:	4630      	mov	r0, r6
   2f00a:	f7ff fe4b 	bl	2eca4 <net_buf_frags_len>
   2f00e:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   2f012:	1a24      	subs	r4, r4, r0
		if (!len) {
   2f014:	bb34      	cbnz	r4, 2f064 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2f016:	79b0      	ldrb	r0, [r6, #6]
   2f018:	f7f8 fd80 	bl	27b1c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2f01c:	2200      	movs	r2, #0
   2f01e:	2300      	movs	r3, #0
   2f020:	f001 fc7e 	bl	30920 <net_buf_alloc_fixed>
			if (!frag) {
   2f024:	4605      	mov	r5, r0
   2f026:	b930      	cbnz	r0, 2f036 <att_chan_read+0x76>
	return total;
   2f028:	4657      	mov	r7, sl
   2f02a:	e02c      	b.n	2f086 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2f02c:	4638      	mov	r0, r7
   2f02e:	f001 fd5c 	bl	30aea <net_buf_simple_tailroom>
   2f032:	4604      	mov	r4, r0
   2f034:	e7ee      	b.n	2f014 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2f036:	4601      	mov	r1, r0
   2f038:	4630      	mov	r0, r6
   2f03a:	f001 fcfe 	bl	30a3a <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2f03e:	4630      	mov	r0, r6
   2f040:	f7ff fe30 	bl	2eca4 <net_buf_frags_len>
   2f044:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   2f048:	f105 0708 	add.w	r7, r5, #8
   2f04c:	1a24      	subs	r4, r4, r0
   2f04e:	4638      	mov	r0, r7
   2f050:	f001 fd4b 	bl	30aea <net_buf_simple_tailroom>
   2f054:	4284      	cmp	r4, r0
   2f056:	d21a      	bcs.n	2f08e <att_chan_read+0xce>
   2f058:	4630      	mov	r0, r6
   2f05a:	f7ff fe23 	bl	2eca4 <net_buf_frags_len>
   2f05e:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   2f062:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2f064:	68a9      	ldr	r1, [r5, #8]
   2f066:	89aa      	ldrh	r2, [r5, #12]
   2f068:	f8db 7004 	ldr.w	r7, [fp, #4]
   2f06c:	9803      	ldr	r0, [sp, #12]
   2f06e:	f8cd 9000 	str.w	r9, [sp]
   2f072:	440a      	add	r2, r1
   2f074:	b2a3      	uxth	r3, r4
   2f076:	4659      	mov	r1, fp
   2f078:	47b8      	blx	r7
		if (read < 0) {
   2f07a:	1e07      	subs	r7, r0, #0
   2f07c:	da0c      	bge.n	2f098 <att_chan_read+0xd8>
				return total;
   2f07e:	f1ba 0f00 	cmp.w	sl, #0
   2f082:	bf18      	it	ne
   2f084:	4657      	movne	r7, sl
}
   2f086:	4638      	mov	r0, r7
   2f088:	b005      	add	sp, #20
   2f08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f08e:	4638      	mov	r0, r7
   2f090:	f001 fd2b 	bl	30aea <net_buf_simple_tailroom>
   2f094:	4604      	mov	r4, r0
   2f096:	e7e5      	b.n	2f064 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2f098:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2f09a:	b993      	cbnz	r3, 2f0c2 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2f09c:	4639      	mov	r1, r7
   2f09e:	f105 0008 	add.w	r0, r5, #8
   2f0a2:	f001 fce7 	bl	30a74 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2f0a6:	4630      	mov	r0, r6
   2f0a8:	f7ff fdfc 	bl	2eca4 <net_buf_frags_len>
   2f0ac:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   2f0b0:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2f0b2:	4283      	cmp	r3, r0
		total += read;
   2f0b4:	44ba      	add	sl, r7
		offset += read;
   2f0b6:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2f0ba:	d9b5      	bls.n	2f028 <att_chan_read+0x68>
   2f0bc:	42a7      	cmp	r7, r4
   2f0be:	d096      	beq.n	2efee <att_chan_read+0x2e>
   2f0c0:	e7b2      	b.n	2f028 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2f0c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2f0c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2f0c6:	4639      	mov	r1, r7
   2f0c8:	4628      	mov	r0, r5
   2f0ca:	4798      	blx	r3
   2f0cc:	2800      	cmp	r0, #0
   2f0ce:	d1e5      	bne.n	2f09c <att_chan_read+0xdc>
   2f0d0:	e7aa      	b.n	2f028 <att_chan_read+0x68>
		return 0;
   2f0d2:	2700      	movs	r7, #0
   2f0d4:	e7d7      	b.n	2f086 <att_chan_read+0xc6>

0002f0d6 <chan_cfm_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2f0d6:	30f0      	adds	r0, #240	; 0xf0
   2f0d8:	f3bf 8f5b 	dmb	ish
   2f0dc:	e850 3f00 	ldrex	r3, [r0]
   2f0e0:	f023 0302 	bic.w	r3, r3, #2
   2f0e4:	e840 3200 	strex	r2, r3, [r0]
   2f0e8:	2a00      	cmp	r2, #0
   2f0ea:	d1f7      	bne.n	2f0dc <chan_cfm_sent+0x6>
   2f0ec:	f3bf 8f5b 	dmb	ish
}
   2f0f0:	4770      	bx	lr

0002f0f2 <chan_rsp_sent>:
   2f0f2:	30f0      	adds	r0, #240	; 0xf0
   2f0f4:	f3bf 8f5b 	dmb	ish
   2f0f8:	e850 3f00 	ldrex	r3, [r0]
   2f0fc:	f023 0301 	bic.w	r3, r3, #1
   2f100:	e840 3200 	strex	r2, r3, [r0]
   2f104:	2a00      	cmp	r2, #0
   2f106:	d1f7      	bne.n	2f0f8 <chan_rsp_sent+0x6>
   2f108:	f3bf 8f5b 	dmb	ish
}
   2f10c:	4770      	bx	lr

0002f10e <read_cb>:
{
   2f10e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   2f112:	f8d2 8000 	ldr.w	r8, [r2]
{
   2f116:	4606      	mov	r6, r0
	data->err = 0x00;
   2f118:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2f11a:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   2f11e:	7317      	strb	r7, [r2, #12]
{
   2f120:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2f122:	4631      	mov	r1, r6
   2f124:	2215      	movs	r2, #21
   2f126:	f000 fcc2 	bl	2faae <bt_gatt_check_perm>
   2f12a:	4604      	mov	r4, r0
   2f12c:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   2f12e:	b9a0      	cbnz	r0, 2f15a <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2f130:	e9cd 0000 	strd	r0, r0, [sp]
   2f134:	88ab      	ldrh	r3, [r5, #4]
   2f136:	68aa      	ldr	r2, [r5, #8]
   2f138:	4631      	mov	r1, r6
   2f13a:	4640      	mov	r0, r8
   2f13c:	f7ff ff40 	bl	2efc0 <att_chan_read>
	if (ret < 0) {
   2f140:	1e03      	subs	r3, r0, #0
   2f142:	da0c      	bge.n	2f15e <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   2f144:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   2f148:	bf26      	itte	cs
   2f14a:	425b      	negcs	r3, r3
   2f14c:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   2f14e:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   2f150:	732b      	strb	r3, [r5, #12]
}
   2f152:	4620      	mov	r0, r4
   2f154:	b002      	add	sp, #8
   2f156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   2f15a:	463c      	mov	r4, r7
   2f15c:	e7f9      	b.n	2f152 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   2f15e:	2401      	movs	r4, #1
   2f160:	e7f7      	b.n	2f152 <read_cb+0x44>

0002f162 <bt_att_sent>:
{
   2f162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   2f164:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   2f168:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   2f16c:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2f16e:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   2f172:	b10b      	cbz	r3, 2f178 <bt_att_sent+0x16>
		chan->sent(chan);
   2f174:	4638      	mov	r0, r7
   2f176:	4798      	blx	r3
   2f178:	f3bf 8f5b 	dmb	ish
   2f17c:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   2f180:	e853 2f00 	ldrex	r2, [r3]
   2f184:	f022 0210 	bic.w	r2, r2, #16
   2f188:	e843 2100 	strex	r1, r2, [r3]
   2f18c:	2900      	cmp	r1, #0
   2f18e:	d1f7      	bne.n	2f180 <bt_att_sent+0x1e>
   2f190:	f3bf 8f5b 	dmb	ish
	if (!att) {
   2f194:	b30c      	cbz	r4, 2f1da <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2f196:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   2f19a:	b98b      	cbnz	r3, 2f1c0 <bt_att_sent+0x5e>
   2f19c:	6863      	ldr	r3, [r4, #4]
   2f19e:	b17b      	cbz	r3, 2f1c0 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2f1a0:	1d20      	adds	r0, r4, #4
   2f1a2:	f7ff fd75 	bl	2ec90 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2f1a6:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2f1a8:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2f1aa:	4638      	mov	r0, r7
   2f1ac:	f7ff feba 	bl	2ef24 <chan_req_send>
   2f1b0:	2800      	cmp	r0, #0
   2f1b2:	da12      	bge.n	2f1da <bt_att_sent+0x78>
	parent->next = child;
   2f1b4:	6863      	ldr	r3, [r4, #4]
   2f1b6:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2f1b8:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2f1ba:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2f1bc:	b903      	cbnz	r3, 2f1c0 <bt_att_sent+0x5e>
	list->tail = node;
   2f1be:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   2f1c0:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   2f1c4:	4638      	mov	r0, r7
   2f1c6:	f7ff fec9 	bl	2ef5c <process_queue>
	if (!err) {
   2f1ca:	b130      	cbz	r0, 2f1da <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   2f1cc:	f104 010c 	add.w	r1, r4, #12
   2f1d0:	4638      	mov	r0, r7
}
   2f1d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   2f1d6:	f7ff bec1 	b.w	2ef5c <process_queue>
}
   2f1da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002f1dc <att_req_send_process>:
{
   2f1dc:	b570      	push	{r4, r5, r6, lr}
   2f1de:	4604      	mov	r4, r0
	node = sys_slist_get(&att->reqs);
   2f1e0:	3004      	adds	r0, #4
   2f1e2:	f7ff fd55 	bl	2ec90 <sys_slist_get>
	if (!node) {
   2f1e6:	4605      	mov	r5, r0
   2f1e8:	b1b8      	cbz	r0, 2f21a <att_req_send_process+0x3e>
	return list->head;
   2f1ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2f1ec:	b14b      	cbz	r3, 2f202 <att_req_send_process+0x26>
	return node->next;
   2f1ee:	681e      	ldr	r6, [r3, #0]
   2f1f0:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   2f1f4:	b10e      	cbz	r6, 2f1fa <att_req_send_process+0x1e>
   2f1f6:	f5a6 76a2 	sub.w	r6, r6, #324	; 0x144
		if (!chan->req) {
   2f1fa:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   2f1fe:	b13b      	cbz	r3, 2f210 <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2f200:	b966      	cbnz	r6, 2f21c <att_req_send_process+0x40>
	parent->next = child;
   2f202:	6863      	ldr	r3, [r4, #4]
   2f204:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   2f206:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2f208:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2f20a:	b933      	cbnz	r3, 2f21a <att_req_send_process+0x3e>
	list->tail = node;
   2f20c:	60a5      	str	r5, [r4, #8]
}
   2f20e:	e004      	b.n	2f21a <att_req_send_process+0x3e>
	return chan_req_send(chan, req);
   2f210:	4629      	mov	r1, r5
   2f212:	f7ff fe87 	bl	2ef24 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2f216:	2800      	cmp	r0, #0
   2f218:	dbf2      	blt.n	2f200 <att_req_send_process+0x24>
}
   2f21a:	bd70      	pop	{r4, r5, r6, pc}
	return node->next;
   2f21c:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2f220:	b10b      	cbz	r3, 2f226 <att_req_send_process+0x4a>
   2f222:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   2f226:	4630      	mov	r0, r6
   2f228:	461e      	mov	r6, r3
   2f22a:	e7e6      	b.n	2f1fa <att_req_send_process+0x1e>

0002f22c <bt_att_status>:
{
   2f22c:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2f22e:	f3bf 8f5b 	dmb	ish
   2f232:	680b      	ldr	r3, [r1, #0]
   2f234:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2f238:	07db      	lsls	r3, r3, #31
{
   2f23a:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2f23c:	d519      	bpl.n	2f272 <bt_att_status+0x46>
	if (!chan->att) {
   2f23e:	f850 0c08 	ldr.w	r0, [r0, #-8]
   2f242:	b1b0      	cbz	r0, 2f272 <bt_att_status+0x46>
	if (chan->req) {
   2f244:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   2f248:	b99b      	cbnz	r3, 2f272 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   2f24a:	3004      	adds	r0, #4
   2f24c:	f7ff fd20 	bl	2ec90 <sys_slist_get>
	if (!node) {
   2f250:	4604      	mov	r4, r0
   2f252:	b170      	cbz	r0, 2f272 <bt_att_status+0x46>
	return chan_req_send(chan, req);
   2f254:	4601      	mov	r1, r0
   2f256:	f1a5 0008 	sub.w	r0, r5, #8
   2f25a:	f7ff fe63 	bl	2ef24 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2f25e:	2800      	cmp	r0, #0
   2f260:	da07      	bge.n	2f272 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   2f262:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   2f266:	685a      	ldr	r2, [r3, #4]
   2f268:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2f26a:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2f26c:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2f26e:	b902      	cbnz	r2, 2f272 <bt_att_status+0x46>
	list->tail = node;
   2f270:	609c      	str	r4, [r3, #8]
}
   2f272:	bd38      	pop	{r3, r4, r5, pc}

0002f274 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2f274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f278:	4688      	mov	r8, r1
   2f27a:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2f27c:	2101      	movs	r1, #1
   2f27e:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2f280:	4605      	mov	r5, r0
   2f282:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2f284:	f7e6 fd22 	bl	15ccc <bt_att_chan_create_pdu>
	if (!buf) {
   2f288:	4604      	mov	r4, r0
   2f28a:	b170      	cbz	r0, 2f2aa <send_err_rsp.part.0+0x36>
   2f28c:	2104      	movs	r1, #4
   2f28e:	3008      	adds	r0, #8
   2f290:	f001 fbf0 	bl	30a74 <net_buf_simple_add>
	rsp->request = req;
   2f294:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   2f298:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   2f29a:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   2f29e:	4621      	mov	r1, r4
   2f2a0:	4628      	mov	r0, r5
}
   2f2a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   2f2a6:	f7e6 bb6f 	b.w	15988 <bt_att_chan_send_rsp.constprop.0>
}
   2f2aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002f2ae <att_write_cmd>:
{
   2f2ae:	b530      	push	{r4, r5, lr}
   2f2b0:	460c      	mov	r4, r1
   2f2b2:	b085      	sub	sp, #20
   2f2b4:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2f2b6:	f101 0008 	add.w	r0, r1, #8
   2f2ba:	f001 fc0a 	bl	30ad2 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2f2be:	89a2      	ldrh	r2, [r4, #12]
   2f2c0:	9202      	str	r2, [sp, #8]
   2f2c2:	68a2      	ldr	r2, [r4, #8]
   2f2c4:	9201      	str	r2, [sp, #4]
   2f2c6:	2200      	movs	r2, #0
   2f2c8:	4603      	mov	r3, r0
   2f2ca:	9200      	str	r2, [sp, #0]
   2f2cc:	4611      	mov	r1, r2
   2f2ce:	4628      	mov	r0, r5
   2f2d0:	f7e6 fe04 	bl	15edc <att_write_rsp>
}
   2f2d4:	b005      	add	sp, #20
   2f2d6:	bd30      	pop	{r4, r5, pc}

0002f2d8 <att_write_req>:
{
   2f2d8:	b530      	push	{r4, r5, lr}
   2f2da:	460c      	mov	r4, r1
   2f2dc:	b085      	sub	sp, #20
   2f2de:	4605      	mov	r5, r0
   2f2e0:	f101 0008 	add.w	r0, r1, #8
   2f2e4:	f001 fbf5 	bl	30ad2 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2f2e8:	89a2      	ldrh	r2, [r4, #12]
   2f2ea:	9202      	str	r2, [sp, #8]
   2f2ec:	68a2      	ldr	r2, [r4, #8]
   2f2ee:	9201      	str	r2, [sp, #4]
   2f2f0:	2200      	movs	r2, #0
   2f2f2:	4603      	mov	r3, r0
   2f2f4:	9200      	str	r2, [sp, #0]
   2f2f6:	2112      	movs	r1, #18
   2f2f8:	2213      	movs	r2, #19
   2f2fa:	4628      	mov	r0, r5
   2f2fc:	f7e6 fdee 	bl	15edc <att_write_rsp>
}
   2f300:	b005      	add	sp, #20
   2f302:	bd30      	pop	{r4, r5, pc}

0002f304 <att_read_blob_req>:
{
   2f304:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   2f306:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2f308:	8813      	ldrh	r3, [r2, #0]
   2f30a:	8852      	ldrh	r2, [r2, #2]
   2f30c:	9200      	str	r2, [sp, #0]
   2f30e:	210c      	movs	r1, #12
   2f310:	220d      	movs	r2, #13
   2f312:	f7e7 f899 	bl	16448 <att_read_rsp>
}
   2f316:	b003      	add	sp, #12
   2f318:	f85d fb04 	ldr.w	pc, [sp], #4

0002f31c <att_read_req>:
{
   2f31c:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   2f31e:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2f320:	2200      	movs	r2, #0
   2f322:	881b      	ldrh	r3, [r3, #0]
   2f324:	9200      	str	r2, [sp, #0]
   2f326:	210a      	movs	r1, #10
   2f328:	220b      	movs	r2, #11
   2f32a:	f7e7 f88d 	bl	16448 <att_read_rsp>
}
   2f32e:	b003      	add	sp, #12
   2f330:	f85d fb04 	ldr.w	pc, [sp], #4

0002f334 <att_mtu_req>:
{
   2f334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   2f336:	6803      	ldr	r3, [r0, #0]
{
   2f338:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   2f33a:	6818      	ldr	r0, [r3, #0]
   2f33c:	f3bf 8f5b 	dmb	ish
   2f340:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   2f344:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2f348:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   2f34c:	071b      	lsls	r3, r3, #28
   2f34e:	d421      	bmi.n	2f394 <att_mtu_req+0x60>
	mtu_client = sys_le16_to_cpu(req->mtu);
   2f350:	688b      	ldr	r3, [r1, #8]
   2f352:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2f354:	2e16      	cmp	r6, #22
   2f356:	d91f      	bls.n	2f398 <att_mtu_req+0x64>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2f358:	2202      	movs	r2, #2
   2f35a:	2103      	movs	r1, #3
   2f35c:	f7e6 fe68 	bl	16030 <bt_att_create_pdu>
	if (!pdu) {
   2f360:	4607      	mov	r7, r0
   2f362:	b1d8      	cbz	r0, 2f39c <att_mtu_req+0x68>
	return net_buf_simple_add(&buf->b, len);
   2f364:	2102      	movs	r1, #2
   2f366:	3008      	adds	r0, #8
   2f368:	f001 fb84 	bl	30a74 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2f36c:	f06f 0303 	mvn.w	r3, #3
   2f370:	7003      	strb	r3, [r0, #0]
   2f372:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   2f374:	4639      	mov	r1, r7
   2f376:	4620      	mov	r0, r4
   2f378:	f7e6 fb06 	bl	15988 <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2f37c:	2efc      	cmp	r6, #252	; 0xfc
   2f37e:	bf28      	it	cs
   2f380:	26fc      	movcs	r6, #252	; 0xfc
	att_chan_mtu_updated(chan);
   2f382:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2f384:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2f388:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   2f38c:	f7ff fd44 	bl	2ee18 <att_chan_mtu_updated>
	return 0;
   2f390:	4628      	mov	r0, r5
}
   2f392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2f394:	2006      	movs	r0, #6
   2f396:	e7fc      	b.n	2f392 <att_mtu_req+0x5e>
		return BT_ATT_ERR_INVALID_PDU;
   2f398:	2004      	movs	r0, #4
   2f39a:	e7fa      	b.n	2f392 <att_mtu_req+0x5e>
		return BT_ATT_ERR_UNLIKELY;
   2f39c:	200e      	movs	r0, #14
   2f39e:	e7f8      	b.n	2f392 <att_mtu_req+0x5e>

0002f3a0 <bt_att_init>:
	bt_gatt_init();
   2f3a0:	f7e7 bf76 	b.w	17290 <bt_gatt_init>

0002f3a4 <bt_att_get_mtu>:
{
   2f3a4:	b508      	push	{r3, lr}
	att = att_get(conn);
   2f3a6:	f7e6 fa4b 	bl	15840 <att_get>
	if (!att) {
   2f3aa:	b1b0      	cbz	r0, 2f3da <bt_att_get_mtu+0x36>
	return list->head;
   2f3ac:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2f3ae:	b1a0      	cbz	r0, 2f3da <bt_att_get_mtu+0x36>
	return node->next;
   2f3b0:	6803      	ldr	r3, [r0, #0]
   2f3b2:	f5a0 71a2 	sub.w	r1, r0, #324	; 0x144
   2f3b6:	b10b      	cbz	r3, 2f3bc <bt_att_get_mtu+0x18>
   2f3b8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   2f3bc:	2000      	movs	r0, #0
		if (chan->chan.tx.mtu > mtu) {
   2f3be:	f8b1 208a 	ldrh.w	r2, [r1, #138]	; 0x8a
   2f3c2:	4290      	cmp	r0, r2
   2f3c4:	bf38      	it	cc
   2f3c6:	4610      	movcc	r0, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2f3c8:	b13b      	cbz	r3, 2f3da <bt_att_get_mtu+0x36>
   2f3ca:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
   2f3ce:	b10a      	cbz	r2, 2f3d4 <bt_att_get_mtu+0x30>
   2f3d0:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   2f3d4:	4619      	mov	r1, r3
   2f3d6:	4613      	mov	r3, r2
   2f3d8:	e7f1      	b.n	2f3be <bt_att_get_mtu+0x1a>
}
   2f3da:	bd08      	pop	{r3, pc}

0002f3dc <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2f3dc:	898a      	ldrh	r2, [r1, #12]
   2f3de:	6889      	ldr	r1, [r1, #8]
   2f3e0:	2300      	movs	r3, #0
   2f3e2:	f7e7 b9af 	b.w	16744 <att_handle_rsp>

0002f3e6 <bt_att_encrypt_change>:
	if (!att_chan->att) {
   2f3e6:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   2f3ea:	b570      	push	{r4, r5, r6, lr}
   2f3ec:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   2f3ee:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   2f3f2:	2b00      	cmp	r3, #0
   2f3f4:	d037      	beq.n	2f466 <bt_att_encrypt_change+0x80>
	if (hci_status) {
   2f3f6:	b171      	cbz	r1, 2f416 <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   2f3f8:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   2f3fc:	2b00      	cmp	r3, #0
   2f3fe:	d032      	beq.n	2f466 <bt_att_encrypt_change+0x80>
   2f400:	7c1b      	ldrb	r3, [r3, #16]
   2f402:	07da      	lsls	r2, r3, #31
   2f404:	d52f      	bpl.n	2f466 <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   2f406:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   2f408:	2200      	movs	r2, #0
   2f40a:	4630      	mov	r0, r6
   2f40c:	4611      	mov	r1, r2
}
   2f40e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   2f412:	f7e7 b997 	b.w	16744 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   2f416:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   2f418:	4628      	mov	r0, r5
   2f41a:	f7e8 fcc7 	bl	17dac <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   2f41e:	7a6b      	ldrb	r3, [r5, #9]
   2f420:	2b01      	cmp	r3, #1
   2f422:	d020      	beq.n	2f466 <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   2f424:	f8d4 40ec 	ldr.w	r4, [r4, #236]	; 0xec
   2f428:	b1ec      	cbz	r4, 2f466 <bt_att_encrypt_change+0x80>
   2f42a:	7c23      	ldrb	r3, [r4, #16]
   2f42c:	07db      	lsls	r3, r3, #31
   2f42e:	d51a      	bpl.n	2f466 <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   2f430:	68e3      	ldr	r3, [r4, #12]
   2f432:	2b00      	cmp	r3, #0
   2f434:	d0e7      	beq.n	2f406 <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   2f436:	6962      	ldr	r2, [r4, #20]
   2f438:	7c61      	ldrb	r1, [r4, #17]
   2f43a:	4630      	mov	r0, r6
   2f43c:	f7e6 fc46 	bl	15ccc <bt_att_chan_create_pdu>
	if (!buf) {
   2f440:	4605      	mov	r5, r0
   2f442:	b140      	cbz	r0, 2f456 <bt_att_encrypt_change+0x70>
	if (req->encode(buf, req->len, req->user_data)) {
   2f444:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   2f448:	68e3      	ldr	r3, [r4, #12]
   2f44a:	4798      	blx	r3
   2f44c:	4602      	mov	r2, r0
   2f44e:	b120      	cbz	r0, 2f45a <bt_att_encrypt_change+0x74>
		net_buf_unref(buf);
   2f450:	4628      	mov	r0, r5
   2f452:	f7f8 fc27 	bl	27ca4 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   2f456:	230e      	movs	r3, #14
   2f458:	e7d6      	b.n	2f408 <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
   2f45a:	4629      	mov	r1, r5
   2f45c:	4630      	mov	r0, r6
   2f45e:	f7e6 fa1b 	bl	15898 <chan_send>
   2f462:	2800      	cmp	r0, #0
   2f464:	d1f4      	bne.n	2f450 <bt_att_encrypt_change+0x6a>
}
   2f466:	bd70      	pop	{r4, r5, r6, pc}

0002f468 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   2f468:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2f46c:	4607      	mov	r7, r0
   2f46e:	460d      	mov	r5, r1
   2f470:	4616      	mov	r6, r2
   2f472:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   2f474:	f7e6 f9e4 	bl	15840 <att_get>
	if (!att) {
   2f478:	4604      	mov	r4, r0
   2f47a:	b938      	cbnz	r0, 2f48c <bt_att_send+0x24>
		net_buf_unref(buf);
   2f47c:	4628      	mov	r0, r5
   2f47e:	f7f8 fc11 	bl	27ca4 <net_buf_unref>
		return -ENOTCONN;
   2f482:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   2f486:	b002      	add	sp, #8
   2f488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   2f48c:	b146      	cbz	r6, 2f4a0 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   2f48e:	f8cd 8000 	str.w	r8, [sp]
   2f492:	4633      	mov	r3, r6
   2f494:	462a      	mov	r2, r5
   2f496:	2104      	movs	r1, #4
   2f498:	4638      	mov	r0, r7
   2f49a:	f7ff fbc9 	bl	2ec30 <bt_l2cap_send_cb>
   2f49e:	e7f2      	b.n	2f486 <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   2f4a0:	f100 060c 	add.w	r6, r0, #12
   2f4a4:	4629      	mov	r1, r5
   2f4a6:	4630      	mov	r0, r6
   2f4a8:	f001 faa5 	bl	309f6 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   2f4ac:	2200      	movs	r2, #0
   2f4ae:	2300      	movs	r3, #0
   2f4b0:	4630      	mov	r0, r6
   2f4b2:	f001 fa3a 	bl	3092a <net_buf_get>
	if (!buf) {
   2f4b6:	4605      	mov	r5, r0
   2f4b8:	b908      	cbnz	r0, 2f4be <bt_att_send+0x56>
	return 0;
   2f4ba:	2000      	movs	r0, #0
   2f4bc:	e7e3      	b.n	2f486 <bt_att_send+0x1e>
	return list->head;
   2f4be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2f4c0:	b1a3      	cbz	r3, 2f4ec <bt_att_send+0x84>
	return node->next;
   2f4c2:	681c      	ldr	r4, [r3, #0]
   2f4c4:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   2f4c8:	b10c      	cbz	r4, 2f4ce <bt_att_send+0x66>
   2f4ca:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   2f4ce:	2200      	movs	r2, #0
   2f4d0:	4629      	mov	r1, r5
   2f4d2:	f7e6 f9e1 	bl	15898 <chan_send>
		if (err >= 0) {
   2f4d6:	2800      	cmp	r0, #0
   2f4d8:	daef      	bge.n	2f4ba <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2f4da:	b13c      	cbz	r4, 2f4ec <bt_att_send+0x84>
   2f4dc:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   2f4e0:	b10b      	cbz	r3, 2f4e6 <bt_att_send+0x7e>
   2f4e2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   2f4e6:	4620      	mov	r0, r4
   2f4e8:	461c      	mov	r4, r3
   2f4ea:	e7f0      	b.n	2f4ce <bt_att_send+0x66>
		k_queue_prepend(&att->tx_queue._queue, buf);
   2f4ec:	4629      	mov	r1, r5
   2f4ee:	4630      	mov	r0, r6
   2f4f0:	f002 f91b 	bl	3172a <k_queue_prepend>
   2f4f4:	e7e1      	b.n	2f4ba <bt_att_send+0x52>

0002f4f6 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   2f4f6:	b510      	push	{r4, lr}
   2f4f8:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   2f4fa:	f7e6 f9a1 	bl	15840 <att_get>
	if (!att) {
   2f4fe:	b160      	cbz	r0, 2f51a <bt_att_req_send+0x24>
	parent->next = child;
   2f500:	2300      	movs	r3, #0
   2f502:	6023      	str	r3, [r4, #0]
	return list->tail;
   2f504:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   2f506:	b92b      	cbnz	r3, 2f514 <bt_att_req_send+0x1e>
	list->head = node;
   2f508:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   2f50c:	f7ff fe66 	bl	2f1dc <att_req_send_process>

	return 0;
   2f510:	2000      	movs	r0, #0
}
   2f512:	bd10      	pop	{r4, pc}
	parent->next = child;
   2f514:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2f516:	6084      	str	r4, [r0, #8]
}
   2f518:	e7f8      	b.n	2f50c <bt_att_req_send+0x16>
		return -ENOTCONN;
   2f51a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2f51e:	e7f8      	b.n	2f512 <bt_att_req_send+0x1c>

0002f520 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   2f520:	6010      	str	r0, [r2, #0]
}
   2f522:	2000      	movs	r0, #0
   2f524:	4770      	bx	lr

0002f526 <gatt_ccc_changed>:
{
   2f526:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   2f528:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   2f52a:	895a      	ldrh	r2, [r3, #10]
   2f52c:	428a      	cmp	r2, r1
   2f52e:	d003      	beq.n	2f538 <gatt_ccc_changed+0x12>
		ccc->value = value;
   2f530:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   2f532:	68db      	ldr	r3, [r3, #12]
   2f534:	b103      	cbz	r3, 2f538 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   2f536:	4718      	bx	r3
}
   2f538:	4770      	bx	lr

0002f53a <gatt_indicate_rsp>:
{
   2f53a:	b510      	push	{r4, lr}
   2f53c:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2f53e:	68a3      	ldr	r3, [r4, #8]
{
   2f540:	460a      	mov	r2, r1
	if (params->func) {
   2f542:	b10b      	cbz	r3, 2f548 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   2f544:	4621      	mov	r1, r4
   2f546:	4798      	blx	r3
	params->_ref--;
   2f548:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2f54a:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   2f54c:	3b01      	subs	r3, #1
   2f54e:	b2db      	uxtb	r3, r3
   2f550:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2f552:	b122      	cbz	r2, 2f55e <gatt_indicate_rsp+0x24>
   2f554:	b91b      	cbnz	r3, 2f55e <gatt_indicate_rsp+0x24>
		params->destroy(params);
   2f556:	4620      	mov	r0, r4
}
   2f558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   2f55c:	4710      	bx	r2
}
   2f55e:	bd10      	pop	{r4, pc}

0002f560 <match_uuid>:
	data->attr = attr;
   2f560:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2f562:	8091      	strh	r1, [r2, #4]
}
   2f564:	2000      	movs	r0, #0
   2f566:	4770      	bx	lr

0002f568 <ccc_set_cb>:
}
   2f568:	2000      	movs	r0, #0
   2f56a:	4770      	bx	lr

0002f56c <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2f56c:	2207      	movs	r2, #7
   2f56e:	f7fe bd5c 	b.w	2e02a <memcpy>

0002f572 <clear_ccc_cfg>:
{
   2f572:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2f574:	2500      	movs	r5, #0
{
   2f576:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2f578:	4669      	mov	r1, sp
   2f57a:	3001      	adds	r0, #1
   2f57c:	9500      	str	r5, [sp, #0]
   2f57e:	f8cd 5003 	str.w	r5, [sp, #3]
   2f582:	f7ff fff3 	bl	2f56c <bt_addr_le_copy>
	cfg->id = 0U;
   2f586:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   2f588:	8125      	strh	r5, [r4, #8]
}
   2f58a:	b003      	add	sp, #12
   2f58c:	bd30      	pop	{r4, r5, pc}

0002f58e <write_name>:
{
   2f58e:	b570      	push	{r4, r5, r6, lr}
   2f590:	b092      	sub	sp, #72	; 0x48
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   2f592:	2100      	movs	r1, #0
{
   2f594:	f8bd 5058 	ldrh.w	r5, [sp, #88]	; 0x58
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   2f598:	9101      	str	r1, [sp, #4]
{
   2f59a:	4616      	mov	r6, r2
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   2f59c:	a802      	add	r0, sp, #8
   2f59e:	223d      	movs	r2, #61	; 0x3d
{
   2f5a0:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   2f5a2:	f7fe fd4d 	bl	2e040 <memset>
	if (offset >= sizeof(value)) {
   2f5a6:	2d40      	cmp	r5, #64	; 0x40
   2f5a8:	d80d      	bhi.n	2f5c6 <write_name+0x38>
	if (offset + len >= sizeof(value)) {
   2f5aa:	4425      	add	r5, r4
   2f5ac:	2d40      	cmp	r5, #64	; 0x40
   2f5ae:	dc0d      	bgt.n	2f5cc <write_name+0x3e>
	memcpy(value, buf, len);
   2f5b0:	4622      	mov	r2, r4
   2f5b2:	4631      	mov	r1, r6
   2f5b4:	a801      	add	r0, sp, #4
   2f5b6:	f7fe fd38 	bl	2e02a <memcpy>
	bt_set_name(value);
   2f5ba:	a801      	add	r0, sp, #4
   2f5bc:	f7e3 fef0 	bl	133a0 <bt_set_name>
}
   2f5c0:	4620      	mov	r0, r4
   2f5c2:	b012      	add	sp, #72	; 0x48
   2f5c4:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2f5c6:	f06f 0406 	mvn.w	r4, #6
   2f5ca:	e7f9      	b.n	2f5c0 <write_name+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   2f5cc:	f06f 040c 	mvn.w	r4, #12
   2f5d0:	e7f6      	b.n	2f5c0 <write_name+0x32>

0002f5d2 <atomic_get>:
   2f5d2:	f3bf 8f5b 	dmb	ish
   2f5d6:	6800      	ldr	r0, [r0, #0]
   2f5d8:	f3bf 8f5b 	dmb	ish
}
   2f5dc:	4770      	bx	lr

0002f5de <gen_hash_m>:
{
   2f5de:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2f5e0:	6807      	ldr	r7, [r0, #0]
   2f5e2:	783d      	ldrb	r5, [r7, #0]
{
   2f5e4:	b089      	sub	sp, #36	; 0x24
   2f5e6:	4606      	mov	r6, r0
   2f5e8:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2f5ea:	b10d      	cbz	r5, 2f5f0 <gen_hash_m+0x12>
	switch (u16->val) {
   2f5ec:	2501      	movs	r5, #1
   2f5ee:	e014      	b.n	2f61a <gen_hash_m+0x3c>
   2f5f0:	887b      	ldrh	r3, [r7, #2]
   2f5f2:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2f5f6:	d004      	beq.n	2f602 <gen_hash_m+0x24>
   2f5f8:	d812      	bhi.n	2f620 <gen_hash_m+0x42>
   2f5fa:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2f5fe:	2b03      	cmp	r3, #3
   2f600:	d8f4      	bhi.n	2f5ec <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2f602:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2f606:	2202      	movs	r2, #2
   2f608:	f10d 010a 	add.w	r1, sp, #10
   2f60c:	4620      	mov	r0, r4
   2f60e:	f7fe fb87 	bl	2dd20 <tc_cmac_update>
   2f612:	b9e0      	cbnz	r0, 2f64e <gen_hash_m+0x70>
			state->err = -EINVAL;
   2f614:	f06f 0315 	mvn.w	r3, #21
   2f618:	65a3      	str	r3, [r4, #88]	; 0x58
}
   2f61a:	4628      	mov	r0, r5
   2f61c:	b009      	add	sp, #36	; 0x24
   2f61e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   2f620:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2f624:	33ff      	adds	r3, #255	; 0xff
   2f626:	b29b      	uxth	r3, r3
   2f628:	2b04      	cmp	r3, #4
   2f62a:	d8df      	bhi.n	2f5ec <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2f62c:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2f630:	2202      	movs	r2, #2
   2f632:	f10d 010a 	add.w	r1, sp, #10
   2f636:	4620      	mov	r0, r4
   2f638:	f7fe fb72 	bl	2dd20 <tc_cmac_update>
   2f63c:	2800      	cmp	r0, #0
   2f63e:	d0e9      	beq.n	2f614 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   2f640:	887b      	ldrh	r3, [r7, #2]
   2f642:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2f646:	2202      	movs	r2, #2
   2f648:	f10d 010a 	add.w	r1, sp, #10
   2f64c:	e016      	b.n	2f67c <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
   2f64e:	887b      	ldrh	r3, [r7, #2]
   2f650:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2f654:	2202      	movs	r2, #2
   2f656:	f10d 010a 	add.w	r1, sp, #10
   2f65a:	4620      	mov	r0, r4
   2f65c:	f7fe fb60 	bl	2dd20 <tc_cmac_update>
   2f660:	2800      	cmp	r0, #0
   2f662:	d0d7      	beq.n	2f614 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2f664:	2000      	movs	r0, #0
   2f666:	aa03      	add	r2, sp, #12
   2f668:	6877      	ldr	r7, [r6, #4]
   2f66a:	9000      	str	r0, [sp, #0]
   2f66c:	2313      	movs	r3, #19
   2f66e:	4631      	mov	r1, r6
   2f670:	47b8      	blx	r7
		if (len < 0) {
   2f672:	1e02      	subs	r2, r0, #0
   2f674:	da01      	bge.n	2f67a <gen_hash_m+0x9c>
			state->err = len;
   2f676:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2f678:	e7cf      	b.n	2f61a <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   2f67a:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2f67c:	4620      	mov	r0, r4
   2f67e:	f7fe fb4f 	bl	2dd20 <tc_cmac_update>
   2f682:	2800      	cmp	r0, #0
   2f684:	d1b2      	bne.n	2f5ec <gen_hash_m+0xe>
   2f686:	e7c5      	b.n	2f614 <gen_hash_m+0x36>

0002f688 <atomic_or>:
{
   2f688:	4603      	mov	r3, r0
}
   2f68a:	f3bf 8f5b 	dmb	ish
   2f68e:	e853 0f00 	ldrex	r0, [r3]
   2f692:	ea40 0201 	orr.w	r2, r0, r1
   2f696:	e843 2c00 	strex	ip, r2, [r3]
   2f69a:	f1bc 0f00 	cmp.w	ip, #0
   2f69e:	d1f6      	bne.n	2f68e <atomic_or+0x6>
   2f6a0:	f3bf 8f5b 	dmb	ish
   2f6a4:	4770      	bx	lr

0002f6a6 <atomic_and>:
{
   2f6a6:	4603      	mov	r3, r0
}
   2f6a8:	f3bf 8f5b 	dmb	ish
   2f6ac:	e853 0f00 	ldrex	r0, [r3]
   2f6b0:	ea00 0201 	and.w	r2, r0, r1
   2f6b4:	e843 2c00 	strex	ip, r2, [r3]
   2f6b8:	f1bc 0f00 	cmp.w	ip, #0
   2f6bc:	d1f6      	bne.n	2f6ac <atomic_and+0x6>
   2f6be:	f3bf 8f5b 	dmb	ish
   2f6c2:	4770      	bx	lr

0002f6c4 <gatt_foreach_iter>:
{
   2f6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle > end_handle) {
   2f6c6:	4299      	cmp	r1, r3
{
   2f6c8:	4604      	mov	r4, r0
   2f6ca:	9e08      	ldr	r6, [sp, #32]
   2f6cc:	e9dd 0706 	ldrd	r0, r7, [sp, #24]
   2f6d0:	460d      	mov	r5, r1
	if (handle > end_handle) {
   2f6d2:	d810      	bhi.n	2f6f6 <gatt_foreach_iter+0x32>
	if (handle < start_handle) {
   2f6d4:	4291      	cmp	r1, r2
   2f6d6:	d201      	bcs.n	2f6dc <gatt_foreach_iter+0x18>
		return BT_GATT_ITER_CONTINUE;
   2f6d8:	2001      	movs	r0, #1
}
   2f6da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   2f6dc:	b968      	cbnz	r0, 2f6fa <gatt_foreach_iter+0x36>
	if (attr_data && attr_data != attr->user_data) {
   2f6de:	b997      	cbnz	r7, 2f706 <gatt_foreach_iter+0x42>
	*num_matches -= 1;
   2f6e0:	8833      	ldrh	r3, [r6, #0]
	result = func(attr, handle, user_data);
   2f6e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	*num_matches -= 1;
   2f6e4:	3b01      	subs	r3, #1
   2f6e6:	8033      	strh	r3, [r6, #0]
	result = func(attr, handle, user_data);
   2f6e8:	4629      	mov	r1, r5
   2f6ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2f6ec:	4620      	mov	r0, r4
   2f6ee:	4798      	blx	r3
	if (!*num_matches) {
   2f6f0:	8833      	ldrh	r3, [r6, #0]
   2f6f2:	2b00      	cmp	r3, #0
   2f6f4:	d1f1      	bne.n	2f6da <gatt_foreach_iter+0x16>
		return BT_GATT_ITER_STOP;
   2f6f6:	2000      	movs	r0, #0
   2f6f8:	e7ef      	b.n	2f6da <gatt_foreach_iter+0x16>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   2f6fa:	6821      	ldr	r1, [r4, #0]
   2f6fc:	f7fe fd6e 	bl	2e1dc <bt_uuid_cmp>
   2f700:	2800      	cmp	r0, #0
   2f702:	d0ec      	beq.n	2f6de <gatt_foreach_iter+0x1a>
   2f704:	e7e8      	b.n	2f6d8 <gatt_foreach_iter+0x14>
	if (attr_data && attr_data != attr->user_data) {
   2f706:	68e3      	ldr	r3, [r4, #12]
   2f708:	429f      	cmp	r7, r3
   2f70a:	d1e5      	bne.n	2f6d8 <gatt_foreach_iter+0x14>
   2f70c:	e7e8      	b.n	2f6e0 <gatt_foreach_iter+0x1c>

0002f70e <z_log_msg2_static_create.constprop.0>:
   2f70e:	2300      	movs	r3, #0
   2f710:	f7fc bed9 	b.w	2c4c6 <z_impl_z_log_msg2_static_create>

0002f714 <clear_cf_cfg>:
{
   2f714:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2f716:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2f718:	2500      	movs	r5, #0
   2f71a:	4669      	mov	r1, sp
   2f71c:	3001      	adds	r0, #1
   2f71e:	9500      	str	r5, [sp, #0]
   2f720:	f8cd 5003 	str.w	r5, [sp, #3]
   2f724:	f7ff ff22 	bl	2f56c <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   2f728:	f104 0008 	add.w	r0, r4, #8
   2f72c:	2201      	movs	r2, #1
   2f72e:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2f730:	340c      	adds	r4, #12
   2f732:	f7fe fc85 	bl	2e040 <memset>
   2f736:	f3bf 8f5b 	dmb	ish
   2f73a:	e854 3f00 	ldrex	r3, [r4]
   2f73e:	e844 5200 	strex	r2, r5, [r4]
   2f742:	2a00      	cmp	r2, #0
   2f744:	d1f9      	bne.n	2f73a <clear_cf_cfg+0x26>
   2f746:	f3bf 8f5b 	dmb	ish
}
   2f74a:	b003      	add	sp, #12
   2f74c:	bd30      	pop	{r4, r5, pc}

0002f74e <read_ppcp>:
{
   2f74e:	b513      	push	{r0, r1, r4, lr}
   2f750:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   2f752:	2218      	movs	r2, #24
{
   2f754:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   2f758:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   2f75c:	2228      	movs	r2, #40	; 0x28
   2f75e:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   2f762:	2200      	movs	r2, #0
   2f764:	f8ad 2004 	strh.w	r2, [sp, #4]
	if (offset > value_len) {
   2f768:	2908      	cmp	r1, #8
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   2f76a:	f04f 022a 	mov.w	r2, #42	; 0x2a
   2f76e:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   2f772:	d80b      	bhi.n	2f78c <read_ppcp+0x3e>
	len = MIN(buf_len, value_len - offset);
   2f774:	f1c1 0408 	rsb	r4, r1, #8
   2f778:	429c      	cmp	r4, r3
   2f77a:	bfa8      	it	ge
   2f77c:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2f77e:	4622      	mov	r2, r4
   2f780:	4469      	add	r1, sp
   2f782:	f7fe fc52 	bl	2e02a <memcpy>
}
   2f786:	4620      	mov	r0, r4
   2f788:	b002      	add	sp, #8
   2f78a:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2f78c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   2f790:	e7f9      	b.n	2f786 <read_ppcp+0x38>

0002f792 <read_appearance>:
{
   2f792:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2f794:	4615      	mov	r5, r2
   2f796:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   2f79a:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2f79c:	f7fe fe73 	bl	2e486 <bt_get_appearance>
	if (offset > value_len) {
   2f7a0:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2f7a2:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   2f7a6:	d80e      	bhi.n	2f7c6 <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   2f7a8:	f1c6 0402 	rsb	r4, r6, #2
   2f7ac:	42bc      	cmp	r4, r7
   2f7ae:	bfa8      	it	ge
   2f7b0:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2f7b2:	f10d 0306 	add.w	r3, sp, #6
   2f7b6:	4622      	mov	r2, r4
   2f7b8:	1999      	adds	r1, r3, r6
   2f7ba:	4628      	mov	r0, r5
   2f7bc:	f7fe fc35 	bl	2e02a <memcpy>
}
   2f7c0:	4620      	mov	r0, r4
   2f7c2:	b003      	add	sp, #12
   2f7c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2f7c6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2f7ca:	e7f9      	b.n	2f7c0 <read_appearance+0x2e>

0002f7cc <read_name>:
{
   2f7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f7d0:	4698      	mov	r8, r3
   2f7d2:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   2f7d6:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   2f7d8:	f7e3 fe1c 	bl	13414 <bt_get_name>
   2f7dc:	4607      	mov	r7, r0
				 strlen(name));
   2f7de:	f7fe fbe6 	bl	2dfae <strlen>
	if (offset > value_len) {
   2f7e2:	b283      	uxth	r3, r0
   2f7e4:	42b3      	cmp	r3, r6
   2f7e6:	d30c      	bcc.n	2f802 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   2f7e8:	1b9c      	subs	r4, r3, r6
   2f7ea:	4544      	cmp	r4, r8
   2f7ec:	bfa8      	it	ge
   2f7ee:	4644      	movge	r4, r8
   2f7f0:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2f7f2:	4622      	mov	r2, r4
   2f7f4:	19b9      	adds	r1, r7, r6
   2f7f6:	4628      	mov	r0, r5
   2f7f8:	f7fe fc17 	bl	2e02a <memcpy>
}
   2f7fc:	4620      	mov	r0, r4
   2f7fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2f802:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2f806:	e7f9      	b.n	2f7fc <read_name+0x30>

0002f808 <cf_read>:
{
   2f808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2f80a:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   2f80c:	2300      	movs	r3, #0
{
   2f80e:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   2f812:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2f816:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   2f818:	f7e7 f850 	bl	168bc <find_cf_cfg>
	if (cfg) {
   2f81c:	b128      	cbz	r0, 2f82a <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   2f81e:	f100 0108 	add.w	r1, r0, #8
   2f822:	2201      	movs	r2, #1
   2f824:	a801      	add	r0, sp, #4
   2f826:	f7fe fc00 	bl	2e02a <memcpy>
	if (offset > value_len) {
   2f82a:	2e01      	cmp	r6, #1
   2f82c:	d80d      	bhi.n	2f84a <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   2f82e:	f1c6 0401 	rsb	r4, r6, #1
   2f832:	42bc      	cmp	r4, r7
   2f834:	bfa8      	it	ge
   2f836:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2f838:	ab01      	add	r3, sp, #4
   2f83a:	4622      	mov	r2, r4
   2f83c:	1999      	adds	r1, r3, r6
   2f83e:	4628      	mov	r0, r5
   2f840:	f7fe fbf3 	bl	2e02a <memcpy>
}
   2f844:	4620      	mov	r0, r4
   2f846:	b003      	add	sp, #12
   2f848:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2f84a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2f84e:	e7f9      	b.n	2f844 <cf_read+0x3c>

0002f850 <bt_gatt_attr_read_service>:
{
   2f850:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   2f852:	68c9      	ldr	r1, [r1, #12]
{
   2f854:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   2f858:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   2f85a:	780b      	ldrb	r3, [r1, #0]
{
   2f85c:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   2f85e:	b993      	cbnz	r3, 2f886 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2f860:	884b      	ldrh	r3, [r1, #2]
   2f862:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   2f866:	2d02      	cmp	r5, #2
   2f868:	d819      	bhi.n	2f89e <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   2f86a:	f1c5 0202 	rsb	r2, r5, #2
   2f86e:	4294      	cmp	r4, r2
   2f870:	bfa8      	it	ge
   2f872:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2f874:	f10d 0306 	add.w	r3, sp, #6
   2f878:	4622      	mov	r2, r4
   2f87a:	1959      	adds	r1, r3, r5
   2f87c:	f7fe fbd5 	bl	2e02a <memcpy>
}
   2f880:	4620      	mov	r0, r4
   2f882:	b003      	add	sp, #12
   2f884:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   2f886:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   2f888:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   2f88c:	d807      	bhi.n	2f89e <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   2f88e:	f1c5 0210 	rsb	r2, r5, #16
   2f892:	4294      	cmp	r4, r2
   2f894:	bfa8      	it	ge
   2f896:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2f898:	4622      	mov	r2, r4
   2f89a:	4429      	add	r1, r5
   2f89c:	e7ee      	b.n	2f87c <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2f89e:	f06f 0406 	mvn.w	r4, #6
   2f8a2:	e7ed      	b.n	2f880 <bt_gatt_attr_read_service+0x30>

0002f8a4 <ccc_find_cfg>:
{
   2f8a4:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   2f8a6:	7803      	ldrb	r3, [r0, #0]
   2f8a8:	4293      	cmp	r3, r2
{
   2f8aa:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   2f8ac:	d001      	beq.n	2f8b2 <ccc_find_cfg+0xe>
	return NULL;
   2f8ae:	2000      	movs	r0, #0
}
   2f8b0:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   2f8b2:	2207      	movs	r2, #7
   2f8b4:	3001      	adds	r0, #1
   2f8b6:	f7fe fba7 	bl	2e008 <memcmp>
		if (id == ccc->cfg[i].id &&
   2f8ba:	2800      	cmp	r0, #0
   2f8bc:	d1f7      	bne.n	2f8ae <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   2f8be:	4620      	mov	r0, r4
   2f8c0:	e7f6      	b.n	2f8b0 <ccc_find_cfg+0xc>

0002f8c2 <find_ccc_cfg>:
{
   2f8c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2f8c4:	460c      	mov	r4, r1
						    &cfg->peer)) {
   2f8c6:	1c4d      	adds	r5, r1, #1
		if (conn) {
   2f8c8:	b148      	cbz	r0, 2f8de <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   2f8ca:	7809      	ldrb	r1, [r1, #0]
   2f8cc:	462a      	mov	r2, r5
   2f8ce:	f7ff f8e7 	bl	2eaa0 <bt_conn_is_peer_addr_le>
	return NULL;
   2f8d2:	2800      	cmp	r0, #0
   2f8d4:	bf08      	it	eq
   2f8d6:	2400      	moveq	r4, #0
}
   2f8d8:	4620      	mov	r0, r4
   2f8da:	b003      	add	sp, #12
   2f8dc:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2f8de:	9000      	str	r0, [sp, #0]
   2f8e0:	2207      	movs	r2, #7
   2f8e2:	f8cd 0003 	str.w	r0, [sp, #3]
   2f8e6:	4669      	mov	r1, sp
   2f8e8:	4628      	mov	r0, r5
   2f8ea:	f7fe fb8d 	bl	2e008 <memcmp>
	return NULL;
   2f8ee:	2800      	cmp	r0, #0
   2f8f0:	bf18      	it	ne
   2f8f2:	2400      	movne	r4, #0
   2f8f4:	e7f0      	b.n	2f8d8 <find_ccc_cfg+0x16>

0002f8f6 <bt_gatt_attr_read_ccc>:
{
   2f8f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   2f8f8:	68c9      	ldr	r1, [r1, #12]
{
   2f8fa:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   2f8fe:	4615      	mov	r5, r2
   2f900:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   2f902:	f7ff ffde 	bl	2f8c2 <find_ccc_cfg>
	if (cfg) {
   2f906:	b100      	cbz	r0, 2f90a <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   2f908:	8900      	ldrh	r0, [r0, #8]
   2f90a:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   2f90e:	2e02      	cmp	r6, #2
   2f910:	d80e      	bhi.n	2f930 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   2f912:	f1c6 0402 	rsb	r4, r6, #2
   2f916:	42bc      	cmp	r4, r7
   2f918:	bfa8      	it	ge
   2f91a:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2f91c:	f10d 0306 	add.w	r3, sp, #6
   2f920:	4622      	mov	r2, r4
   2f922:	1999      	adds	r1, r3, r6
   2f924:	4628      	mov	r0, r5
   2f926:	f7fe fb80 	bl	2e02a <memcpy>
}
   2f92a:	4620      	mov	r0, r4
   2f92c:	b003      	add	sp, #12
   2f92e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2f930:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2f934:	e7f9      	b.n	2f92a <bt_gatt_attr_read_ccc+0x34>

0002f936 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2f936:	2a02      	cmp	r2, #2
{
   2f938:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2f93a:	d108      	bne.n	2f94e <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2f93c:	2300      	movs	r3, #0
   2f93e:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2f942:	461a      	mov	r2, r3
   2f944:	7a00      	ldrb	r0, [r0, #8]
   2f946:	f7e7 faf7 	bl	16f38 <sc_save>
}
   2f94a:	2002      	movs	r0, #2
   2f94c:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2f94e:	f7e7 fb6f 	bl	17030 <sc_clear>
   2f952:	e7fa      	b.n	2f94a <sc_ccc_cfg_write+0x14>

0002f954 <sc_restore_rsp>:
{
   2f954:	b538      	push	{r3, r4, r5, lr}
   2f956:	4604      	mov	r4, r0
   2f958:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   2f95a:	f7e6 ffaf 	bl	168bc <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   2f95e:	b130      	cbz	r0, 2f96e <sc_restore_rsp+0x1a>
   2f960:	7a03      	ldrb	r3, [r0, #8]
   2f962:	07db      	lsls	r3, r3, #31
   2f964:	d503      	bpl.n	2f96e <sc_restore_rsp+0x1a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2f966:	2101      	movs	r1, #1
   2f968:	300c      	adds	r0, #12
   2f96a:	f7ff fe8d 	bl	2f688 <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2f96e:	b985      	cbnz	r5, 2f992 <sc_restore_rsp+0x3e>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2f970:	7a20      	ldrb	r0, [r4, #8]
   2f972:	f104 0188 	add.w	r1, r4, #136	; 0x88
   2f976:	f7e7 fabd 	bl	16ef4 <find_sc_cfg>
		if (sc_cfg) {
   2f97a:	4604      	mov	r4, r0
   2f97c:	b148      	cbz	r0, 2f992 <sc_restore_rsp+0x3e>
	memset(&cfg->data, 0, sizeof(cfg->data));
   2f97e:	4629      	mov	r1, r5
   2f980:	2204      	movs	r2, #4
   2f982:	3008      	adds	r0, #8
   2f984:	f7fe fb5c 	bl	2e040 <memset>
		sc_store(cfg);
   2f988:	4620      	mov	r0, r4
}
   2f98a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   2f98e:	f7e7 b817 	b.w	169c0 <sc_store>
}
   2f992:	bd38      	pop	{r3, r4, r5, pc}

0002f994 <bt_gatt_attr_read>:
{
   2f994:	b538      	push	{r3, r4, r5, lr}
   2f996:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2f99a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   2f99e:	42a9      	cmp	r1, r5
{
   2f9a0:	4610      	mov	r0, r2
	if (offset > value_len) {
   2f9a2:	d80b      	bhi.n	2f9bc <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   2f9a4:	1a6d      	subs	r5, r5, r1
   2f9a6:	429d      	cmp	r5, r3
   2f9a8:	bfa8      	it	ge
   2f9aa:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2f9ac:	9b05      	ldr	r3, [sp, #20]
   2f9ae:	b2ad      	uxth	r5, r5
   2f9b0:	462a      	mov	r2, r5
   2f9b2:	4419      	add	r1, r3
   2f9b4:	f7fe fb39 	bl	2e02a <memcpy>
}
   2f9b8:	4628      	mov	r0, r5
   2f9ba:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2f9bc:	f06f 0506 	mvn.w	r5, #6
   2f9c0:	e7fa      	b.n	2f9b8 <bt_gatt_attr_read+0x24>

0002f9c2 <bt_gatt_attr_value_handle>:
{
   2f9c2:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2f9c4:	4604      	mov	r4, r0
   2f9c6:	b910      	cbnz	r0, 2f9ce <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2f9c8:	2000      	movs	r0, #0
}
   2f9ca:	b002      	add	sp, #8
   2f9cc:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2f9ce:	2300      	movs	r3, #0
   2f9d0:	f88d 3004 	strb.w	r3, [sp, #4]
   2f9d4:	6800      	ldr	r0, [r0, #0]
   2f9d6:	f642 0303 	movw	r3, #10243	; 0x2803
   2f9da:	a901      	add	r1, sp, #4
   2f9dc:	f8ad 3006 	strh.w	r3, [sp, #6]
   2f9e0:	f7fe fbfc 	bl	2e1dc <bt_uuid_cmp>
   2f9e4:	2800      	cmp	r0, #0
   2f9e6:	d1ef      	bne.n	2f9c8 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2f9e8:	68e3      	ldr	r3, [r4, #12]
   2f9ea:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2f9ec:	2800      	cmp	r0, #0
   2f9ee:	d1ec      	bne.n	2f9ca <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2f9f0:	4620      	mov	r0, r4
   2f9f2:	f7e7 fcad 	bl	17350 <bt_gatt_attr_get_handle>
   2f9f6:	3001      	adds	r0, #1
   2f9f8:	b280      	uxth	r0, r0
	return handle;
   2f9fa:	e7e6      	b.n	2f9ca <bt_gatt_attr_value_handle+0x8>

0002f9fc <bt_gatt_attr_read_chrc>:
{
   2f9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2f9fe:	68cf      	ldr	r7, [r1, #12]
{
   2fa00:	b087      	sub	sp, #28
   2fa02:	4608      	mov	r0, r1
   2fa04:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   2fa06:	79bb      	ldrb	r3, [r7, #6]
   2fa08:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2fa0c:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   2fa10:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2fa12:	f7ff ffd6 	bl	2f9c2 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2fa16:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2fa18:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2fa1c:	780b      	ldrb	r3, [r1, #0]
   2fa1e:	b99b      	cbnz	r3, 2fa48 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2fa20:	884b      	ldrh	r3, [r1, #2]
   2fa22:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   2fa26:	2105      	movs	r1, #5
	if (offset > value_len) {
   2fa28:	42b1      	cmp	r1, r6
   2fa2a:	d315      	bcc.n	2fa58 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   2fa2c:	1b89      	subs	r1, r1, r6
   2fa2e:	42a1      	cmp	r1, r4
   2fa30:	bfa8      	it	ge
   2fa32:	4621      	movge	r1, r4
   2fa34:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   2fa36:	ab01      	add	r3, sp, #4
   2fa38:	4622      	mov	r2, r4
   2fa3a:	1999      	adds	r1, r3, r6
   2fa3c:	4628      	mov	r0, r5
   2fa3e:	f7fe faf4 	bl	2e02a <memcpy>
}
   2fa42:	4620      	mov	r0, r4
   2fa44:	b007      	add	sp, #28
   2fa46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2fa48:	3101      	adds	r1, #1
   2fa4a:	2210      	movs	r2, #16
   2fa4c:	f10d 0007 	add.w	r0, sp, #7
   2fa50:	f7fe faeb 	bl	2e02a <memcpy>
		value_len += 16U;
   2fa54:	2113      	movs	r1, #19
   2fa56:	e7e7      	b.n	2fa28 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2fa58:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2fa5c:	e7f1      	b.n	2fa42 <bt_gatt_attr_read_chrc+0x46>

0002fa5e <bt_gatt_foreach_attr>:
{
   2fa5e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2fa60:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2fa64:	2300      	movs	r3, #0
   2fa66:	9300      	str	r3, [sp, #0]
   2fa68:	461a      	mov	r2, r3
   2fa6a:	f7e7 fca1 	bl	173b0 <bt_gatt_foreach_attr_type>
}
   2fa6e:	b005      	add	sp, #20
   2fa70:	f85d fb04 	ldr.w	pc, [sp], #4

0002fa74 <bt_gatt_attr_read_cep>:
{
   2fa74:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2fa76:	4610      	mov	r0, r2
   2fa78:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	uint16_t props = sys_cpu_to_le16(value->properties);
   2fa7c:	68ca      	ldr	r2, [r1, #12]
	if (offset > value_len) {
   2fa7e:	2d02      	cmp	r5, #2
	uint16_t props = sys_cpu_to_le16(value->properties);
   2fa80:	8812      	ldrh	r2, [r2, #0]
   2fa82:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   2fa86:	d80d      	bhi.n	2faa4 <bt_gatt_attr_read_cep+0x30>
	len = MIN(buf_len, value_len - offset);
   2fa88:	f1c5 0402 	rsb	r4, r5, #2
   2fa8c:	429c      	cmp	r4, r3
   2fa8e:	bfa8      	it	ge
   2fa90:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2fa92:	f10d 0306 	add.w	r3, sp, #6
   2fa96:	4622      	mov	r2, r4
   2fa98:	1959      	adds	r1, r3, r5
   2fa9a:	f7fe fac6 	bl	2e02a <memcpy>
}
   2fa9e:	4620      	mov	r0, r4
   2faa0:	b003      	add	sp, #12
   2faa2:	bd30      	pop	{r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2faa4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &props,
   2faa8:	e7f9      	b.n	2fa9e <bt_gatt_attr_read_cep+0x2a>

0002faaa <bt_gatt_get_mtu>:
	return bt_att_get_mtu(conn);
   2faaa:	f7ff bc7b 	b.w	2f3a4 <bt_att_get_mtu>

0002faae <bt_gatt_check_perm>:
{
   2faae:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   2fab0:	07d4      	lsls	r4, r2, #31
{
   2fab2:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2fab4:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2fab6:	d504      	bpl.n	2fac2 <bt_gatt_check_perm+0x14>
   2fab8:	f010 0f15 	tst.w	r0, #21
   2fabc:	d01e      	beq.n	2fafc <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2fabe:	684b      	ldr	r3, [r1, #4]
   2fac0:	b1e3      	cbz	r3, 2fafc <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2fac2:	0793      	lsls	r3, r2, #30
   2fac4:	d504      	bpl.n	2fad0 <bt_gatt_check_perm+0x22>
   2fac6:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   2faca:	d019      	beq.n	2fb00 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2facc:	688b      	ldr	r3, [r1, #8]
   2face:	b1bb      	cbz	r3, 2fb00 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   2fad0:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2fad4:	f014 0f30 	tst.w	r4, #48	; 0x30
   2fad8:	d103      	bne.n	2fae2 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   2fada:	f014 000c 	ands.w	r0, r4, #12
   2fade:	d107      	bne.n	2faf0 <bt_gatt_check_perm+0x42>
}
   2fae0:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2fae2:	4628      	mov	r0, r5
   2fae4:	f7fe ffda 	bl	2ea9c <bt_conn_get_security>
   2fae8:	2802      	cmp	r0, #2
   2faea:	d8f6      	bhi.n	2fada <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   2faec:	2005      	movs	r0, #5
   2faee:	e7f7      	b.n	2fae0 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   2faf0:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2faf2:	2b00      	cmp	r3, #0
   2faf4:	bf14      	ite	ne
   2faf6:	2000      	movne	r0, #0
   2faf8:	200f      	moveq	r0, #15
   2fafa:	e7f1      	b.n	2fae0 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2fafc:	2002      	movs	r0, #2
   2fafe:	e7ef      	b.n	2fae0 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2fb00:	2003      	movs	r0, #3
   2fb02:	e7ed      	b.n	2fae0 <bt_gatt_check_perm+0x32>

0002fb04 <bt_gatt_change_aware>:
{
   2fb04:	b538      	push	{r3, r4, r5, lr}
   2fb06:	460d      	mov	r5, r1
	cfg = find_cf_cfg(conn);
   2fb08:	f7e6 fed8 	bl	168bc <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2fb0c:	b910      	cbnz	r0, 2fb14 <bt_gatt_change_aware+0x10>
		return true;
   2fb0e:	2501      	movs	r5, #1
}
   2fb10:	4628      	mov	r0, r5
   2fb12:	bd38      	pop	{r3, r4, r5, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2fb14:	7a03      	ldrb	r3, [r0, #8]
   2fb16:	07d9      	lsls	r1, r3, #31
   2fb18:	d5f9      	bpl.n	2fb0e <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2fb1a:	f100 040c 	add.w	r4, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2fb1e:	4620      	mov	r0, r4
   2fb20:	f7ff fd57 	bl	2f5d2 <atomic_get>
   2fb24:	07c2      	lsls	r2, r0, #31
   2fb26:	d4f2      	bmi.n	2fb0e <bt_gatt_change_aware+0xa>
	if (!req) {
   2fb28:	2d00      	cmp	r5, #0
   2fb2a:	d0f1      	beq.n	2fb10 <bt_gatt_change_aware+0xc>
   2fb2c:	4620      	mov	r0, r4
   2fb2e:	f7ff fd50 	bl	2f5d2 <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   2fb32:	0783      	lsls	r3, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2fb34:	f3c0 0540 	ubfx	r5, r0, #1, #1
   2fb38:	d509      	bpl.n	2fb4e <bt_gatt_change_aware+0x4a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2fb3a:	f06f 0102 	mvn.w	r1, #2
   2fb3e:	4620      	mov	r0, r4
   2fb40:	f7ff fdb1 	bl	2f6a6 <atomic_and>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2fb44:	2101      	movs	r1, #1
   2fb46:	4620      	mov	r0, r4
   2fb48:	f7ff fd9e 	bl	2f688 <atomic_or>
}
   2fb4c:	e7e0      	b.n	2fb10 <bt_gatt_change_aware+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2fb4e:	2102      	movs	r1, #2
   2fb50:	e7f9      	b.n	2fb46 <bt_gatt_change_aware+0x42>

0002fb52 <ccc_delayed_store>:
{
   2fb52:	b570      	push	{r4, r5, r6, lr}
		struct bt_conn *conn = ccc_store->conn_list[i];
   2fb54:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   2fb58:	4605      	mov	r5, r0
		if (!conn) {
   2fb5a:	b194      	cbz	r4, 2fb82 <ccc_delayed_store+0x30>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2fb5c:	f104 0688 	add.w	r6, r4, #136	; 0x88
   2fb60:	7a20      	ldrb	r0, [r4, #8]
   2fb62:	4631      	mov	r1, r6
   2fb64:	f7fe fc92 	bl	2e48c <bt_addr_le_is_bonded>
   2fb68:	b158      	cbz	r0, 2fb82 <ccc_delayed_store+0x30>
			ccc_store->conn_list[i] = NULL;
   2fb6a:	2300      	movs	r3, #0
   2fb6c:	f845 3c08 	str.w	r3, [r5, #-8]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   2fb70:	7a20      	ldrb	r0, [r4, #8]
   2fb72:	4631      	mov	r1, r6
   2fb74:	f7e8 f95a 	bl	17e2c <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   2fb78:	4620      	mov	r0, r4
}
   2fb7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   2fb7e:	f7fe bef4 	b.w	2e96a <bt_conn_unref>
}
   2fb82:	bd70      	pop	{r4, r5, r6, pc}

0002fb84 <sys_memcpy_swap>:
	psrc += length - 1;
   2fb84:	1e53      	subs	r3, r2, #1
   2fb86:	4419      	add	r1, r3
	for (; length > 0; length--) {
   2fb88:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   2fb8a:	f811 3901 	ldrb.w	r3, [r1], #-1
   2fb8e:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   2fb92:	4290      	cmp	r0, r2
   2fb94:	d1f9      	bne.n	2fb8a <sys_memcpy_swap+0x6>
}
   2fb96:	4770      	bx	lr

0002fb98 <sys_mem_swap>:
{
   2fb98:	b510      	push	{r4, lr}
   2fb9a:	1843      	adds	r3, r0, r1
   2fb9c:	eb00 0151 	add.w	r1, r0, r1, lsr #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2fba0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
		uint8_t tmp = ((uint8_t *)buf)[i];
   2fba4:	7802      	ldrb	r2, [r0, #0]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2fba6:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < (length/2); i++) {
   2fbaa:	4288      	cmp	r0, r1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2fbac:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   2fbae:	d1f7      	bne.n	2fba0 <sys_mem_swap+0x8>
	}
}
   2fbb0:	bd10      	pop	{r4, pc}

0002fbb2 <smp_pairing_rsp>:
}
   2fbb2:	2007      	movs	r0, #7
   2fbb4:	4770      	bx	lr

0002fbb6 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2fbb6:	f3bf 8f5b 	dmb	ish
   2fbba:	6800      	ldr	r0, [r0, #0]
   2fbbc:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2fbc0:	4108      	asrs	r0, r1
}
   2fbc2:	f000 0001 	and.w	r0, r0, #1
   2fbc6:	4770      	bx	lr

0002fbc8 <update_keys_check>:
{
   2fbc8:	b510      	push	{r4, lr}
   2fbca:	4603      	mov	r3, r0
	if (!keys ||
   2fbcc:	b1d9      	cbz	r1, 2fc06 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2fbce:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   2fbd0:	f010 0f24 	tst.w	r0, #36	; 0x24
   2fbd4:	d017      	beq.n	2fc06 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   2fbd6:	7d1a      	ldrb	r2, [r3, #20]
   2fbd8:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   2fbda:	7b09      	ldrb	r1, [r1, #12]
   2fbdc:	42a2      	cmp	r2, r4
   2fbde:	bf28      	it	cs
   2fbe0:	4622      	movcs	r2, r4
   2fbe2:	4291      	cmp	r1, r2
   2fbe4:	d901      	bls.n	2fbea <update_keys_check+0x22>
		return false;
   2fbe6:	2000      	movs	r0, #0
}
   2fbe8:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2fbea:	0682      	lsls	r2, r0, #26
   2fbec:	d404      	bmi.n	2fbf8 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2fbee:	7a18      	ldrb	r0, [r3, #8]
   2fbf0:	3800      	subs	r0, #0
   2fbf2:	bf18      	it	ne
   2fbf4:	2001      	movne	r0, #1
   2fbf6:	e7f7      	b.n	2fbe8 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2fbf8:	2105      	movs	r1, #5
   2fbfa:	1d18      	adds	r0, r3, #4
   2fbfc:	f7ff ffdb 	bl	2fbb6 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2fc00:	2800      	cmp	r0, #0
   2fc02:	d1f4      	bne.n	2fbee <update_keys_check+0x26>
   2fc04:	e7ef      	b.n	2fbe6 <update_keys_check+0x1e>
		return true;
   2fc06:	2001      	movs	r0, #1
   2fc08:	e7ee      	b.n	2fbe8 <update_keys_check+0x20>

0002fc0a <bt_smp_aes_cmac>:
{
   2fc0a:	b570      	push	{r4, r5, r6, lr}
   2fc0c:	b0c2      	sub	sp, #264	; 0x108
   2fc0e:	460d      	mov	r5, r1
   2fc10:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2fc12:	4601      	mov	r1, r0
   2fc14:	aa16      	add	r2, sp, #88	; 0x58
   2fc16:	4668      	mov	r0, sp
{
   2fc18:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2fc1a:	f7fe f856 	bl	2dcca <tc_cmac_setup>
   2fc1e:	b150      	cbz	r0, 2fc36 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   2fc20:	4632      	mov	r2, r6
   2fc22:	4629      	mov	r1, r5
   2fc24:	4668      	mov	r0, sp
   2fc26:	f7fe f87b 	bl	2dd20 <tc_cmac_update>
   2fc2a:	b120      	cbz	r0, 2fc36 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   2fc2c:	4669      	mov	r1, sp
   2fc2e:	4620      	mov	r0, r4
   2fc30:	f7fe f8e1 	bl	2ddf6 <tc_cmac_final>
   2fc34:	b918      	cbnz	r0, 2fc3e <bt_smp_aes_cmac+0x34>
		return -EIO;
   2fc36:	f06f 0004 	mvn.w	r0, #4
}
   2fc3a:	b042      	add	sp, #264	; 0x108
   2fc3c:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   2fc3e:	2000      	movs	r0, #0
   2fc40:	e7fb      	b.n	2fc3a <bt_smp_aes_cmac+0x30>

0002fc42 <smp_f4>:
{
   2fc42:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fc44:	b097      	sub	sp, #92	; 0x5c
   2fc46:	4614      	mov	r4, r2
   2fc48:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   2fc4a:	2220      	movs	r2, #32
   2fc4c:	4601      	mov	r1, r0
   2fc4e:	a805      	add	r0, sp, #20
{
   2fc50:	461d      	mov	r5, r3
   2fc52:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2fc54:	f7ff ff96 	bl	2fb84 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2fc58:	2220      	movs	r2, #32
   2fc5a:	4631      	mov	r1, r6
   2fc5c:	a80d      	add	r0, sp, #52	; 0x34
   2fc5e:	f7ff ff91 	bl	2fb84 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   2fc62:	4621      	mov	r1, r4
   2fc64:	2210      	movs	r2, #16
   2fc66:	a801      	add	r0, sp, #4
	m[64] = z;
   2fc68:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   2fc6c:	f7ff ff8a 	bl	2fb84 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   2fc70:	463b      	mov	r3, r7
   2fc72:	2241      	movs	r2, #65	; 0x41
   2fc74:	a905      	add	r1, sp, #20
   2fc76:	a801      	add	r0, sp, #4
   2fc78:	f7ff ffc7 	bl	2fc0a <bt_smp_aes_cmac>
	if (err) {
   2fc7c:	4604      	mov	r4, r0
   2fc7e:	b918      	cbnz	r0, 2fc88 <smp_f4+0x46>
	sys_mem_swap(res, 16);
   2fc80:	2110      	movs	r1, #16
   2fc82:	4638      	mov	r0, r7
   2fc84:	f7ff ff88 	bl	2fb98 <sys_mem_swap>
}
   2fc88:	4620      	mov	r0, r4
   2fc8a:	b017      	add	sp, #92	; 0x5c
   2fc8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002fc8e <smp_f6>:
{
   2fc8e:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fc90:	b097      	sub	sp, #92	; 0x5c
   2fc92:	4605      	mov	r5, r0
   2fc94:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   2fc96:	a805      	add	r0, sp, #20
   2fc98:	2210      	movs	r2, #16
{
   2fc9a:	461c      	mov	r4, r3
   2fc9c:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   2fc9e:	f7ff ff71 	bl	2fb84 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   2fca2:	2210      	movs	r2, #16
   2fca4:	4631      	mov	r1, r6
   2fca6:	a809      	add	r0, sp, #36	; 0x24
   2fca8:	f7ff ff6c 	bl	2fb84 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   2fcac:	4621      	mov	r1, r4
   2fcae:	2210      	movs	r2, #16
   2fcb0:	a80d      	add	r0, sp, #52	; 0x34
   2fcb2:	f7ff ff67 	bl	2fb84 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   2fcb6:	991c      	ldr	r1, [sp, #112]	; 0x70
   2fcb8:	2203      	movs	r2, #3
   2fcba:	a811      	add	r0, sp, #68	; 0x44
   2fcbc:	f7ff ff62 	bl	2fb84 <sys_memcpy_swap>
	m[51] = a1->type;
   2fcc0:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   2fcc2:	f814 3b01 	ldrb.w	r3, [r4], #1
   2fcc6:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   2fcca:	4621      	mov	r1, r4
   2fccc:	2206      	movs	r2, #6
   2fcce:	a812      	add	r0, sp, #72	; 0x48
   2fcd0:	f7fe f9ab 	bl	2e02a <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2fcd4:	4621      	mov	r1, r4
   2fcd6:	2206      	movs	r2, #6
   2fcd8:	a812      	add	r0, sp, #72	; 0x48
   2fcda:	f7ff ff53 	bl	2fb84 <sys_memcpy_swap>
	m[58] = a2->type;
   2fcde:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   2fce0:	f814 3b01 	ldrb.w	r3, [r4], #1
   2fce4:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   2fce8:	4621      	mov	r1, r4
   2fcea:	2206      	movs	r2, #6
   2fcec:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2fcf0:	f7fe f99b 	bl	2e02a <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2fcf4:	4621      	mov	r1, r4
   2fcf6:	2206      	movs	r2, #6
   2fcf8:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2fcfc:	f7ff ff42 	bl	2fb84 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   2fd00:	2210      	movs	r2, #16
   2fd02:	4629      	mov	r1, r5
   2fd04:	a801      	add	r0, sp, #4
   2fd06:	f7ff ff3d 	bl	2fb84 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   2fd0a:	463b      	mov	r3, r7
   2fd0c:	2241      	movs	r2, #65	; 0x41
   2fd0e:	a905      	add	r1, sp, #20
   2fd10:	a801      	add	r0, sp, #4
   2fd12:	f7ff ff7a 	bl	2fc0a <bt_smp_aes_cmac>
	if (err) {
   2fd16:	4604      	mov	r4, r0
   2fd18:	b918      	cbnz	r0, 2fd22 <smp_f6+0x94>
	sys_mem_swap(check, 16);
   2fd1a:	2110      	movs	r1, #16
   2fd1c:	4638      	mov	r0, r7
   2fd1e:	f7ff ff3b 	bl	2fb98 <sys_mem_swap>
}
   2fd22:	4620      	mov	r0, r4
   2fd24:	b017      	add	sp, #92	; 0x5c
   2fd26:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002fd28 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2fd28:	2301      	movs	r3, #1
   2fd2a:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2fd2c:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2fd2e:	f3bf 8f5b 	dmb	ish
   2fd32:	e850 2f00 	ldrex	r2, [r0]
   2fd36:	401a      	ands	r2, r3
   2fd38:	e840 2100 	strex	r1, r2, [r0]
   2fd3c:	2900      	cmp	r1, #0
   2fd3e:	d1f8      	bne.n	2fd32 <atomic_clear_bit+0xa>
   2fd40:	f3bf 8f5b 	dmb	ish
}
   2fd44:	4770      	bx	lr

0002fd46 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2fd46:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2fd48:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2fd4a:	2200      	movs	r2, #0
   2fd4c:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2fd4e:	4604      	mov	r4, r0
   2fd50:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2fd52:	460a      	mov	r2, r1
   2fd54:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
   2fd58:	2106      	movs	r1, #6
   2fd5a:	f7fe ff69 	bl	2ec30 <bt_l2cap_send_cb>
   2fd5e:	b128      	cbz	r0, 2fd6c <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   2fd60:	4628      	mov	r0, r5
}
   2fd62:	b003      	add	sp, #12
   2fd64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   2fd68:	f7f7 bf9c 	b.w	27ca4 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2fd6c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2fd70:	2300      	movs	r3, #0
   2fd72:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
}
   2fd76:	b003      	add	sp, #12
   2fd78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2fd7c:	f7fa be8e 	b.w	2aa9c <k_work_reschedule>

0002fd80 <z_log_msg2_static_create.constprop.0>:
   2fd80:	2300      	movs	r3, #0
   2fd82:	f7fc bba0 	b.w	2c4c6 <z_impl_z_log_msg2_static_create>

0002fd86 <smp_chan_get>:
{
   2fd86:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   2fd88:	2106      	movs	r1, #6
   2fd8a:	f7fe ff75 	bl	2ec78 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   2fd8e:	b918      	cbnz	r0, 2fd98 <smp_chan_get+0x12>
}
   2fd90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2fd94:	f7e8 ba40 	b.w	18218 <smp_chan_get.part.0>
   2fd98:	38f0      	subs	r0, #240	; 0xf0
   2fd9a:	bd08      	pop	{r3, pc}

0002fd9c <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2fd9c:	2301      	movs	r3, #1
   2fd9e:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2fda0:	f3bf 8f5b 	dmb	ish
   2fda4:	e850 2f00 	ldrex	r2, [r0]
   2fda8:	431a      	orrs	r2, r3
   2fdaa:	e840 2100 	strex	r1, r2, [r0]
   2fdae:	2900      	cmp	r1, #0
   2fdb0:	d1f8      	bne.n	2fda4 <atomic_set_bit+0x8>
   2fdb2:	f3bf 8f5b 	dmb	ish
}
   2fdb6:	4770      	bx	lr

0002fdb8 <smp_keypress_notif>:
{
   2fdb8:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2fdba:	210e      	movs	r1, #14
   2fdbc:	f7ff ffee 	bl	2fd9c <atomic_set_bit>
}
   2fdc0:	2000      	movs	r0, #0
   2fdc2:	bd08      	pop	{r3, pc}

0002fdc4 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2fdc4:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2fdc6:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2fdc8:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2fdca:	4628      	mov	r0, r5
   2fdcc:	2104      	movs	r1, #4
   2fdce:	f7ff fef2 	bl	2fbb6 <atomic_test_bit>
   2fdd2:	b970      	cbnz	r0, 2fdf2 <smp_create_pdu.constprop.0+0x2e>
		timeout = SMP_TIMEOUT;
   2fdd4:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2fdd8:	2100      	movs	r1, #0
		timeout = K_NO_WAIT;
   2fdda:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2fddc:	4608      	mov	r0, r1
   2fdde:	f7fe ff24 	bl	2ec2a <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   2fde2:	4604      	mov	r4, r0
   2fde4:	b938      	cbnz	r0, 2fdf6 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2fde6:	2104      	movs	r1, #4
   2fde8:	4628      	mov	r0, r5
   2fdea:	f7ff ffd7 	bl	2fd9c <atomic_set_bit>
}
   2fdee:	4620      	mov	r0, r4
   2fdf0:	bd70      	pop	{r4, r5, r6, pc}
		timeout = K_NO_WAIT;
   2fdf2:	2200      	movs	r2, #0
   2fdf4:	e7f0      	b.n	2fdd8 <smp_create_pdu.constprop.0+0x14>
   2fdf6:	2101      	movs	r1, #1
   2fdf8:	3008      	adds	r0, #8
   2fdfa:	f000 fe3b 	bl	30a74 <net_buf_simple_add>
	hdr->code = op;
   2fdfe:	7006      	strb	r6, [r0, #0]
	return buf;
   2fe00:	e7f5      	b.n	2fdee <smp_create_pdu.constprop.0+0x2a>

0002fe02 <send_pairing_rsp>:
{
   2fe02:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2fe04:	2102      	movs	r1, #2
{
   2fe06:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2fe08:	f7ff ffdc 	bl	2fdc4 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2fe0c:	4604      	mov	r4, r0
   2fe0e:	b178      	cbz	r0, 2fe30 <send_pairing_rsp+0x2e>
   2fe10:	2106      	movs	r1, #6
   2fe12:	3008      	adds	r0, #8
   2fe14:	f000 fe2e 	bl	30a74 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   2fe18:	2206      	movs	r2, #6
   2fe1a:	f105 0111 	add.w	r1, r5, #17
   2fe1e:	f7fe f904 	bl	2e02a <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2fe22:	4628      	mov	r0, r5
   2fe24:	2200      	movs	r2, #0
   2fe26:	4621      	mov	r1, r4
   2fe28:	f7ff ff8d 	bl	2fd46 <smp_send.constprop.0>
	return 0;
   2fe2c:	2000      	movs	r0, #0
}
   2fe2e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2fe30:	2008      	movs	r0, #8
   2fe32:	e7fc      	b.n	2fe2e <send_pairing_rsp+0x2c>

0002fe34 <smp_send_pairing_random>:
{
   2fe34:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2fe36:	2104      	movs	r1, #4
{
   2fe38:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2fe3a:	f7ff ffc3 	bl	2fdc4 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2fe3e:	4604      	mov	r4, r0
   2fe40:	b178      	cbz	r0, 2fe62 <smp_send_pairing_random+0x2e>
   2fe42:	2110      	movs	r1, #16
   2fe44:	3008      	adds	r0, #8
   2fe46:	f000 fe15 	bl	30a74 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   2fe4a:	2210      	movs	r2, #16
   2fe4c:	f105 0127 	add.w	r1, r5, #39	; 0x27
   2fe50:	f7fe f8eb 	bl	2e02a <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2fe54:	4628      	mov	r0, r5
   2fe56:	2200      	movs	r2, #0
   2fe58:	4621      	mov	r1, r4
   2fe5a:	f7ff ff74 	bl	2fd46 <smp_send.constprop.0>
	return 0;
   2fe5e:	2000      	movs	r0, #0
}
   2fe60:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2fe62:	2008      	movs	r0, #8
   2fe64:	e7fc      	b.n	2fe60 <smp_send_pairing_random+0x2c>

0002fe66 <smp_dhkey_check>:
{
   2fe66:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2fe68:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   2fe6c:	78db      	ldrb	r3, [r3, #3]
   2fe6e:	2b01      	cmp	r3, #1
{
   2fe70:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2fe72:	d114      	bne.n	2fe9e <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   2fe74:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2fe76:	1d05      	adds	r5, r0, #4
   2fe78:	2110      	movs	r1, #16
   2fe7a:	4628      	mov	r0, r5
   2fe7c:	f7ff ff54 	bl	2fd28 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   2fe80:	4631      	mov	r1, r6
   2fe82:	2210      	movs	r2, #16
   2fe84:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   2fe88:	f7fe f8cf 	bl	2e02a <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   2fe8c:	2107      	movs	r1, #7
   2fe8e:	4628      	mov	r0, r5
   2fe90:	f7ff fe91 	bl	2fbb6 <atomic_test_bit>
   2fe94:	b128      	cbz	r0, 2fea2 <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2fe96:	2109      	movs	r1, #9
   2fe98:	4628      	mov	r0, r5
   2fe9a:	f7ff ff7f 	bl	2fd9c <atomic_set_bit>
}
   2fe9e:	2000      	movs	r0, #0
   2fea0:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2fea2:	210a      	movs	r1, #10
   2fea4:	4628      	mov	r0, r5
   2fea6:	f7ff fe86 	bl	2fbb6 <atomic_test_bit>
   2feaa:	2800      	cmp	r0, #0
   2feac:	d1f3      	bne.n	2fe96 <smp_dhkey_check+0x30>
		return compute_and_check_and_send_periph_dhcheck(smp);
   2feae:	4620      	mov	r0, r4
}
   2feb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   2feb4:	f7e8 bc2e 	b.w	18714 <compute_and_check_and_send_periph_dhcheck>

0002feb8 <smp_security_request>:
   2feb8:	2007      	movs	r0, #7
   2feba:	4770      	bx	lr

0002febc <atomic_test_and_clear_bit>:
{
   2febc:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2febe:	2301      	movs	r3, #1
   2fec0:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2fec4:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2fec6:	f3bf 8f5b 	dmb	ish
   2feca:	e850 3f00 	ldrex	r3, [r0]
   2fece:	ea03 0c02 	and.w	ip, r3, r2
   2fed2:	e840 ce00 	strex	lr, ip, [r0]
   2fed6:	f1be 0f00 	cmp.w	lr, #0
   2feda:	d1f6      	bne.n	2feca <atomic_test_and_clear_bit+0xe>
   2fedc:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2fee0:	420b      	tst	r3, r1
}
   2fee2:	bf14      	ite	ne
   2fee4:	2001      	movne	r0, #1
   2fee6:	2000      	moveq	r0, #0
   2fee8:	f85d fb04 	ldr.w	pc, [sp], #4

0002feec <smp_reset>:
{
   2feec:	b538      	push	{r3, r4, r5, lr}
   2feee:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2fef0:	1d03      	adds	r3, r0, #4
   2fef2:	2500      	movs	r5, #0
   2fef4:	f3bf 8f5b 	dmb	ish
   2fef8:	e853 2f00 	ldrex	r2, [r3]
   2fefc:	e843 5100 	strex	r1, r5, [r3]
   2ff00:	2900      	cmp	r1, #0
   2ff02:	d1f9      	bne.n	2fef8 <smp_reset+0xc>
   2ff04:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   2ff08:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
   2ff0c:	f001 fd05 	bl	3191a <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   2ff10:	7225      	strb	r5, [r4, #8]
   2ff12:	f3bf 8f5b 	dmb	ish
   2ff16:	e854 3f00 	ldrex	r3, [r4]
   2ff1a:	e844 5200 	strex	r2, r5, [r4]
   2ff1e:	2a00      	cmp	r2, #0
   2ff20:	d1f9      	bne.n	2ff16 <smp_reset+0x2a>
   2ff22:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2ff26:	4620      	mov	r0, r4
   2ff28:	2101      	movs	r1, #1
}
   2ff2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2ff2e:	f7ff bf35 	b.w	2fd9c <atomic_set_bit>

0002ff32 <smp_c1>:
{
   2ff32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ff36:	b089      	sub	sp, #36	; 0x24
   2ff38:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   2ff3c:	4699      	mov	r9, r3
	p1[0] = ia->type;
   2ff3e:	783b      	ldrb	r3, [r7, #0]
{
   2ff40:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   2ff42:	f88d 3000 	strb.w	r3, [sp]
{
   2ff46:	460c      	mov	r4, r1
	p1[1] = ra->type;
   2ff48:	f898 3000 	ldrb.w	r3, [r8]
   2ff4c:	f88d 3001 	strb.w	r3, [sp, #1]
{
   2ff50:	4611      	mov	r1, r2
   2ff52:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   2ff54:	2207      	movs	r2, #7
   2ff56:	f10d 0002 	add.w	r0, sp, #2
   2ff5a:	f7fe f866 	bl	2e02a <memcpy>
	memcpy(p1 + 9, pres, 7);
   2ff5e:	2207      	movs	r2, #7
   2ff60:	4649      	mov	r1, r9
   2ff62:	f10d 0009 	add.w	r0, sp, #9
   2ff66:	f7fe f860 	bl	2e02a <memcpy>
	while (len--) {
   2ff6a:	f104 0010 	add.w	r0, r4, #16
   2ff6e:	4629      	mov	r1, r5
   2ff70:	466a      	mov	r2, sp
   2ff72:	42a0      	cmp	r0, r4
   2ff74:	d127      	bne.n	2ffc6 <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2ff76:	462a      	mov	r2, r5
   2ff78:	4629      	mov	r1, r5
   2ff7a:	4630      	mov	r0, r6
   2ff7c:	f7ed f834 	bl	1cfe8 <bt_encrypt_le>
	if (err) {
   2ff80:	4604      	mov	r4, r0
   2ff82:	b9e0      	cbnz	r0, 2ffbe <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   2ff84:	2206      	movs	r2, #6
   2ff86:	f108 0101 	add.w	r1, r8, #1
   2ff8a:	a804      	add	r0, sp, #16
   2ff8c:	f7fe f84d 	bl	2e02a <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   2ff90:	2206      	movs	r2, #6
   2ff92:	1c79      	adds	r1, r7, #1
   2ff94:	f10d 0016 	add.w	r0, sp, #22
   2ff98:	f7fe f847 	bl	2e02a <memcpy>
	(void)memset(p2 + 12, 0, 4);
   2ff9c:	2204      	movs	r2, #4
   2ff9e:	4621      	mov	r1, r4
   2ffa0:	a807      	add	r0, sp, #28
   2ffa2:	f7fe f84d 	bl	2e040 <memset>
	while (len--) {
   2ffa6:	f105 0010 	add.w	r0, r5, #16
   2ffaa:	462a      	mov	r2, r5
   2ffac:	ab04      	add	r3, sp, #16
   2ffae:	4282      	cmp	r2, r0
   2ffb0:	d112      	bne.n	2ffd8 <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   2ffb2:	462a      	mov	r2, r5
   2ffb4:	4629      	mov	r1, r5
   2ffb6:	4630      	mov	r0, r6
   2ffb8:	f7ed f816 	bl	1cfe8 <bt_encrypt_le>
   2ffbc:	4604      	mov	r4, r0
}
   2ffbe:	4620      	mov	r0, r4
   2ffc0:	b009      	add	sp, #36	; 0x24
   2ffc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   2ffc6:	f814 3b01 	ldrb.w	r3, [r4], #1
   2ffca:	f812 cb01 	ldrb.w	ip, [r2], #1
   2ffce:	ea83 030c 	eor.w	r3, r3, ip
   2ffd2:	f801 3b01 	strb.w	r3, [r1], #1
   2ffd6:	e7cc      	b.n	2ff72 <smp_c1+0x40>
   2ffd8:	f812 1b01 	ldrb.w	r1, [r2], #1
   2ffdc:	f813 4b01 	ldrb.w	r4, [r3], #1
   2ffe0:	4061      	eors	r1, r4
   2ffe2:	f802 1c01 	strb.w	r1, [r2, #-1]
   2ffe6:	e7e2      	b.n	2ffae <smp_c1+0x7c>

0002ffe8 <legacy_pairing_confirm>:
{
   2ffe8:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2ffea:	1d07      	adds	r7, r0, #4
{
   2ffec:	b085      	sub	sp, #20
   2ffee:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2fff0:	210a      	movs	r1, #10
   2fff2:	4638      	mov	r0, r7
   2fff4:	f7ff fddf 	bl	2fbb6 <atomic_test_bit>
   2fff8:	bb88      	cbnz	r0, 3005e <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   2fffa:	2104      	movs	r1, #4
   2fffc:	4628      	mov	r0, r5
   2fffe:	f7ff fecd 	bl	2fd9c <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   30002:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   30004:	f8d5 40f0 	ldr.w	r4, [r5, #240]	; 0xf0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   30008:	f7ff fedc 	bl	2fdc4 <smp_create_pdu.constprop.0>
	if (!buf) {
   3000c:	4606      	mov	r6, r0
   3000e:	b1c0      	cbz	r0, 30042 <legacy_pairing_confirm+0x5a>
   30010:	2110      	movs	r1, #16
   30012:	3008      	adds	r0, #8
   30014:	f000 fd2e 	bl	30a74 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   30018:	f104 0396 	add.w	r3, r4, #150	; 0x96
   3001c:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   3001e:	9002      	str	r0, [sp, #8]
   30020:	9301      	str	r3, [sp, #4]
   30022:	9400      	str	r4, [sp, #0]
   30024:	f105 0310 	add.w	r3, r5, #16
   30028:	f105 0209 	add.w	r2, r5, #9
   3002c:	f105 0127 	add.w	r1, r5, #39	; 0x27
   30030:	f105 0047 	add.w	r0, r5, #71	; 0x47
   30034:	f7ff ff7d 	bl	2ff32 <smp_c1>
   30038:	4604      	mov	r4, r0
   3003a:	b120      	cbz	r0, 30046 <legacy_pairing_confirm+0x5e>
		net_buf_unref(buf);
   3003c:	4630      	mov	r0, r6
   3003e:	f7f7 fe31 	bl	27ca4 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   30042:	2008      	movs	r0, #8
   30044:	e009      	b.n	3005a <legacy_pairing_confirm+0x72>
	smp_send(smp, buf, NULL, NULL);
   30046:	4602      	mov	r2, r0
   30048:	4631      	mov	r1, r6
   3004a:	4628      	mov	r0, r5
   3004c:	f7ff fe7b 	bl	2fd46 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   30050:	4621      	mov	r1, r4
   30052:	4638      	mov	r0, r7
   30054:	f7ff fe68 	bl	2fd28 <atomic_clear_bit>
	return 0;
   30058:	2000      	movs	r0, #0
}
   3005a:	b005      	add	sp, #20
   3005c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   3005e:	2100      	movs	r1, #0
   30060:	4638      	mov	r0, r7
   30062:	f7ff fe9b 	bl	2fd9c <atomic_set_bit>
   30066:	e7f7      	b.n	30058 <legacy_pairing_confirm+0x70>

00030068 <bt_smp_request_ltk>:
{
   30068:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3006c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   30070:	e9cd 2300 	strd	r2, r3, [sp]
   30074:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   30076:	f7ff fe86 	bl	2fd86 <smp_chan_get>
	if (!smp) {
   3007a:	4605      	mov	r5, r0
   3007c:	2800      	cmp	r0, #0
   3007e:	f000 8090 	beq.w	301a2 <bt_smp_request_ltk+0x13a>
	if (ediv == 0U && rand == 0U &&
   30082:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   30086:	1d07      	adds	r7, r0, #4
	if (ediv == 0U && rand == 0U &&
   30088:	f1b9 0f00 	cmp.w	r9, #0
   3008c:	d12a      	bne.n	300e4 <bt_smp_request_ltk+0x7c>
   3008e:	e9dd 2300 	ldrd	r2, r3, [sp]
   30092:	4313      	orrs	r3, r2
   30094:	d126      	bne.n	300e4 <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   30096:	2103      	movs	r1, #3
   30098:	4638      	mov	r0, r7
   3009a:	f7ff fd8c 	bl	2fbb6 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   3009e:	b308      	cbz	r0, 300e4 <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   300a0:	2101      	movs	r1, #1
   300a2:	4638      	mov	r0, r7
   300a4:	f7ff fd87 	bl	2fbb6 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   300a8:	4606      	mov	r6, r0
   300aa:	b1d8      	cbz	r0, 300e4 <bt_smp_request_ltk+0x7c>
	return MIN(req->max_key_size, rsp->max_key_size);
   300ac:	7d2c      	ldrb	r4, [r5, #20]
   300ae:	7b6b      	ldrb	r3, [r5, #13]
   300b0:	429c      	cmp	r4, r3
   300b2:	bf28      	it	cs
   300b4:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   300b6:	4622      	mov	r2, r4
   300b8:	f105 0147 	add.w	r1, r5, #71	; 0x47
   300bc:	4640      	mov	r0, r8
   300be:	f7fd ffb4 	bl	2e02a <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   300c2:	2c0f      	cmp	r4, #15
   300c4:	d806      	bhi.n	300d4 <bt_smp_request_ltk+0x6c>
			(void)memset(ltk + enc_size, 0,
   300c6:	f1c4 0210 	rsb	r2, r4, #16
   300ca:	4649      	mov	r1, r9
   300cc:	eb08 0004 	add.w	r0, r8, r4
   300d0:	f7fd ffb6 	bl	2e040 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   300d4:	2101      	movs	r1, #1
   300d6:	4638      	mov	r0, r7
   300d8:	f7ff fe60 	bl	2fd9c <atomic_set_bit>
}
   300dc:	4630      	mov	r0, r6
   300de:	b003      	add	sp, #12
   300e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   300e4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   300e8:	b983      	cbnz	r3, 3010c <bt_smp_request_ltk+0xa4>
					     &conn->le.dst);
   300ea:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   300ee:	7a21      	ldrb	r1, [r4, #8]
   300f0:	4632      	mov	r2, r6
   300f2:	2020      	movs	r0, #32
   300f4:	f7e9 fe42 	bl	19d7c <bt_keys_find>
   300f8:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   300fc:	b930      	cbnz	r0, 3010c <bt_smp_request_ltk+0xa4>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   300fe:	7a21      	ldrb	r1, [r4, #8]
   30100:	4632      	mov	r2, r6
   30102:	2001      	movs	r0, #1
   30104:	f7e9 fe3a 	bl	19d7c <bt_keys_find>
   30108:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   3010c:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   30110:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   30114:	b9ee      	cbnz	r6, 30152 <bt_smp_request_ltk+0xea>
   30116:	e9dd 2300 	ldrd	r2, r3, [sp]
   3011a:	4313      	orrs	r3, r2
   3011c:	d119      	bne.n	30152 <bt_smp_request_ltk+0xea>
   3011e:	b388      	cbz	r0, 30184 <bt_smp_request_ltk+0x11c>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   30120:	89c3      	ldrh	r3, [r0, #14]
   30122:	069a      	lsls	r2, r3, #26
   30124:	d516      	bpl.n	30154 <bt_smp_request_ltk+0xec>
		enc_size = conn->le.keys->enc_size;
   30126:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   30128:	f100 011a 	add.w	r1, r0, #26
   3012c:	4622      	mov	r2, r4
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   3012e:	4640      	mov	r0, r8
   30130:	f7fd ff7b 	bl	2e02a <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   30134:	2c0f      	cmp	r4, #15
   30136:	d806      	bhi.n	30146 <bt_smp_request_ltk+0xde>
			(void)memset(ltk + enc_size, 0,
   30138:	f1c4 0210 	rsb	r2, r4, #16
   3013c:	4631      	mov	r1, r6
   3013e:	eb08 0004 	add.w	r0, r8, r4
   30142:	f7fd ff7d 	bl	2e040 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   30146:	2101      	movs	r1, #1
   30148:	4638      	mov	r0, r7
   3014a:	f7ff fe27 	bl	2fd9c <atomic_set_bit>
		return true;
   3014e:	2601      	movs	r6, #1
   30150:	e7c4      	b.n	300dc <bt_smp_request_ltk+0x74>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   30152:	b1b8      	cbz	r0, 30184 <bt_smp_request_ltk+0x11c>
   30154:	89c3      	ldrh	r3, [r0, #14]
   30156:	07db      	lsls	r3, r3, #31
   30158:	d514      	bpl.n	30184 <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   3015a:	2208      	movs	r2, #8
   3015c:	4669      	mov	r1, sp
   3015e:	3068      	adds	r0, #104	; 0x68
   30160:	f7fd ff52 	bl	2e008 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   30164:	b970      	cbnz	r0, 30184 <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   30166:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   3016a:	2202      	movs	r2, #2
   3016c:	a90a      	add	r1, sp, #40	; 0x28
   3016e:	3070      	adds	r0, #112	; 0x70
   30170:	f7fd ff4a 	bl	2e008 <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   30174:	4606      	mov	r6, r0
   30176:	b928      	cbnz	r0, 30184 <bt_smp_request_ltk+0x11c>
		enc_size = conn->le.keys->enc_size;
   30178:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   3017c:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   3017e:	3172      	adds	r1, #114	; 0x72
   30180:	4622      	mov	r2, r4
   30182:	e7d4      	b.n	3012e <bt_smp_request_ltk+0xc6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   30184:	210f      	movs	r1, #15
   30186:	4638      	mov	r0, r7
   30188:	f7ff fd15 	bl	2fbb6 <atomic_test_bit>
   3018c:	b120      	cbz	r0, 30198 <bt_smp_request_ltk+0x130>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   3018e:	2202      	movs	r2, #2
   30190:	2106      	movs	r1, #6
   30192:	4620      	mov	r0, r4
   30194:	f7e4 fec6 	bl	14f24 <bt_conn_security_changed>
	smp_reset(smp);
   30198:	4628      	mov	r0, r5
   3019a:	f7ff fea7 	bl	2feec <smp_reset>
	return false;
   3019e:	2600      	movs	r6, #0
   301a0:	e79c      	b.n	300dc <bt_smp_request_ltk+0x74>
		return false;
   301a2:	4606      	mov	r6, r0
   301a4:	e79a      	b.n	300dc <bt_smp_request_ltk+0x74>

000301a6 <bt_smp_irk_get>:
{
   301a6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t invalid_ir[16] = { 0 };
   301a8:	2500      	movs	r5, #0
{
   301aa:	460c      	mov	r4, r1
	if (!memcmp(ir, invalid_ir, 16)) {
   301ac:	2210      	movs	r2, #16
   301ae:	4669      	mov	r1, sp
	uint8_t invalid_ir[16] = { 0 };
   301b0:	e9cd 5500 	strd	r5, r5, [sp]
   301b4:	e9cd 5502 	strd	r5, r5, [sp, #8]
{
   301b8:	4606      	mov	r6, r0
	if (!memcmp(ir, invalid_ir, 16)) {
   301ba:	f7fd ff25 	bl	2e008 <memcmp>
   301be:	b180      	cbz	r0, 301e2 <bt_smp_irk_get+0x3c>
	dst[0] = val;
   301c0:	2301      	movs	r3, #1
	memset(&res[4], 0, 16 - 4);
   301c2:	220c      	movs	r2, #12
   301c4:	4629      	mov	r1, r5
   301c6:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   301c8:	7065      	strb	r5, [r4, #1]
	dst[0] = val;
   301ca:	70a5      	strb	r5, [r4, #2]
	dst[1] = val >> 8;
   301cc:	70e5      	strb	r5, [r4, #3]
   301ce:	1d20      	adds	r0, r4, #4
   301d0:	f7fd ff36 	bl	2e040 <memset>
	err = bt_encrypt_le(key, res, res);
   301d4:	4622      	mov	r2, r4
   301d6:	4621      	mov	r1, r4
   301d8:	4630      	mov	r0, r6
   301da:	f7ec ff05 	bl	1cfe8 <bt_encrypt_le>
}
   301de:	b004      	add	sp, #16
   301e0:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   301e2:	f06f 0015 	mvn.w	r0, #21
   301e6:	e7fa      	b.n	301de <bt_smp_irk_get+0x38>

000301e8 <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   301e8:	1d03      	adds	r3, r0, #4
{
   301ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
   301ec:	4605      	mov	r5, r0
   301ee:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   301f0:	4618      	mov	r0, r3
   301f2:	2103      	movs	r1, #3
   301f4:	f7ff fcdf 	bl	2fbb6 <atomic_test_bit>
   301f8:	b1f0      	cbz	r0, 30238 <smp_error+0x50>
		smp_pairing_complete(smp, reason);
   301fa:	4631      	mov	r1, r6
   301fc:	4628      	mov	r0, r5
   301fe:	f7e9 f819 	bl	19234 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   30202:	2105      	movs	r1, #5
   30204:	4628      	mov	r0, r5
   30206:	f7ff fddd 	bl	2fdc4 <smp_create_pdu.constprop.0>
	if (!buf) {
   3020a:	4604      	mov	r4, r0
   3020c:	b308      	cbz	r0, 30252 <smp_error+0x6a>
   3020e:	2101      	movs	r1, #1
   30210:	3008      	adds	r0, #8
   30212:	f000 fc2f 	bl	30a74 <net_buf_simple_add>
	rsp->reason = reason;
   30216:	7006      	strb	r6, [r0, #0]
   30218:	2600      	movs	r6, #0
   3021a:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
   3021e:	9600      	str	r6, [sp, #0]
   30220:	4633      	mov	r3, r6
   30222:	4622      	mov	r2, r4
   30224:	2106      	movs	r1, #6
   30226:	f7fe fd03 	bl	2ec30 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   3022a:	b118      	cbz	r0, 30234 <smp_error+0x4c>
		net_buf_unref(buf);
   3022c:	4620      	mov	r0, r4
   3022e:	f7f7 fd39 	bl	27ca4 <net_buf_unref>
	return 0;
   30232:	4630      	mov	r0, r6
}
   30234:	b002      	add	sp, #8
   30236:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   30238:	2101      	movs	r1, #1
   3023a:	4618      	mov	r0, r3
   3023c:	f7ff fcbb 	bl	2fbb6 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   30240:	2800      	cmp	r0, #0
   30242:	d1da      	bne.n	301fa <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   30244:	210f      	movs	r1, #15
   30246:	4618      	mov	r0, r3
   30248:	f7ff fcb5 	bl	2fbb6 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   3024c:	2800      	cmp	r0, #0
   3024e:	d1d4      	bne.n	301fa <smp_error+0x12>
   30250:	e7d7      	b.n	30202 <smp_error+0x1a>
		return -ENOBUFS;
   30252:	f06f 0068 	mvn.w	r0, #104	; 0x68
   30256:	e7ed      	b.n	30234 <smp_error+0x4c>

00030258 <bt_smp_dhkey_ready>:
{
   30258:	b570      	push	{r4, r5, r6, lr}
   3025a:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   3025c:	2008      	movs	r0, #8
   3025e:	f7e7 ff37 	bl	180d0 <smp_find>
	if (smp) {
   30262:	4604      	mov	r4, r0
   30264:	b1b8      	cbz	r0, 30296 <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   30266:	1d05      	adds	r5, r0, #4
   30268:	2108      	movs	r1, #8
   3026a:	4628      	mov	r0, r5
   3026c:	f7ff fd5c 	bl	2fd28 <atomic_clear_bit>
	if (!dhkey) {
   30270:	b38e      	cbz	r6, 302d6 <bt_smp_dhkey_ready+0x7e>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   30272:	2107      	movs	r1, #7
   30274:	f7ff fd58 	bl	2fd28 <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   30278:	4631      	mov	r1, r6
   3027a:	2220      	movs	r2, #32
   3027c:	f104 0097 	add.w	r0, r4, #151	; 0x97
   30280:	f7fd fed3 	bl	2e02a <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   30284:	210a      	movs	r1, #10
   30286:	4628      	mov	r0, r5
   30288:	f7ff fc95 	bl	2fbb6 <atomic_test_bit>
   3028c:	b168      	cbz	r0, 302aa <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   3028e:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   30290:	4628      	mov	r0, r5
   30292:	f7ff fd83 	bl	2fd9c <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   30296:	2007      	movs	r0, #7
   30298:	f7e7 ff1a 	bl	180d0 <smp_find>
		if (smp) {
   3029c:	4604      	mov	r4, r0
   3029e:	b118      	cbz	r0, 302a8 <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   302a0:	f7e7 ffea 	bl	18278 <smp_dhkey_generate>
			if (err) {
   302a4:	4601      	mov	r1, r0
   302a6:	b990      	cbnz	r0, 302ce <bt_smp_dhkey_ready+0x76>
}
   302a8:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   302aa:	2110      	movs	r1, #16
   302ac:	4628      	mov	r0, r5
   302ae:	f7ff fc82 	bl	2fbb6 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   302b2:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   302b4:	2800      	cmp	r0, #0
   302b6:	d1eb      	bne.n	30290 <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   302b8:	4628      	mov	r0, r5
   302ba:	f7ff fc7c 	bl	2fbb6 <atomic_test_bit>
   302be:	2800      	cmp	r0, #0
   302c0:	d0e9      	beq.n	30296 <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   302c2:	4620      	mov	r0, r4
   302c4:	f7e8 fa26 	bl	18714 <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   302c8:	4601      	mov	r1, r0
   302ca:	2800      	cmp	r0, #0
   302cc:	d0e3      	beq.n	30296 <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   302ce:	4620      	mov	r0, r4
   302d0:	f7ff ff8a 	bl	301e8 <smp_error>
   302d4:	e7df      	b.n	30296 <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   302d6:	210b      	movs	r1, #11
   302d8:	e7f9      	b.n	302ce <bt_smp_dhkey_ready+0x76>

000302da <smp_check_complete>:
{
   302da:	b510      	push	{r4, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   302dc:	7883      	ldrb	r3, [r0, #2]
   302de:	2b01      	cmp	r3, #1
{
   302e0:	460c      	mov	r4, r1
	if (conn->type == BT_CONN_TYPE_LE) {
   302e2:	d110      	bne.n	30306 <smp_check_complete+0x2c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   302e4:	2106      	movs	r1, #6
   302e6:	f7fe fcbc 	bl	2ec62 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   302ea:	f810 3c08 	ldrb.w	r3, [r0, #-8]
   302ee:	ea23 0104 	bic.w	r1, r3, r4
   302f2:	f800 1c08 	strb.w	r1, [r0, #-8]
		if (!smp->local_dist && !smp->remote_dist) {
   302f6:	f830 1c08 	ldrh.w	r1, [r0, #-8]
   302fa:	b921      	cbnz	r1, 30306 <smp_check_complete+0x2c>
}
   302fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   30300:	38f0      	subs	r0, #240	; 0xf0
   30302:	f7e8 bf97 	b.w	19234 <smp_pairing_complete>
}
   30306:	bd10      	pop	{r4, pc}

00030308 <smp_sign_info_sent>:
	smp_check_complete(conn, BT_SMP_DIST_SIGN);
   30308:	2104      	movs	r1, #4
   3030a:	f7ff bfe6 	b.w	302da <smp_check_complete>

0003030e <smp_id_sent>:
	smp_check_complete(conn, BT_SMP_DIST_ID_KEY);
   3030e:	2102      	movs	r1, #2
   30310:	f7ff bfe3 	b.w	302da <smp_check_complete>

00030314 <smp_ident_sent>:
	smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
   30314:	2101      	movs	r1, #1
   30316:	f7ff bfe0 	b.w	302da <smp_check_complete>

0003031a <bt_smp_disconnected>:
{
   3031a:	b570      	push	{r4, r5, r6, lr}
   3031c:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   3031e:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_keys *keys = chan->conn->le.keys;
   30322:	f850 3be8 	ldr.w	r3, [r0], #232
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   30326:	3cec      	subs	r4, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   30328:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   3032c:	f001 faf5 	bl	3191a <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   30330:	2103      	movs	r1, #3
   30332:	4620      	mov	r0, r4
   30334:	f7ff fc3f 	bl	2fbb6 <atomic_test_bit>
   30338:	b1a0      	cbz	r0, 30364 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   3033a:	2108      	movs	r1, #8
   3033c:	4630      	mov	r0, r6
   3033e:	f7e8 ff79 	bl	19234 <smp_pairing_complete>
	if (keys) {
   30342:	b13d      	cbz	r5, 30354 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   30344:	89eb      	ldrh	r3, [r5, #14]
   30346:	b113      	cbz	r3, 3034e <bt_smp_disconnected+0x34>
   30348:	7b6b      	ldrb	r3, [r5, #13]
   3034a:	079b      	lsls	r3, r3, #30
   3034c:	d502      	bpl.n	30354 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   3034e:	4628      	mov	r0, r5
   30350:	f7e9 fd72 	bl	19e38 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   30354:	4630      	mov	r0, r6
   30356:	f44f 7202 	mov.w	r2, #520	; 0x208
}
   3035a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   3035e:	2100      	movs	r1, #0
   30360:	f7fd be6e 	b.w	2e040 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   30364:	2101      	movs	r1, #1
   30366:	4620      	mov	r0, r4
   30368:	f7ff fc25 	bl	2fbb6 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   3036c:	2800      	cmp	r0, #0
   3036e:	d1e4      	bne.n	3033a <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   30370:	210f      	movs	r1, #15
   30372:	4620      	mov	r0, r4
   30374:	f7ff fc1f 	bl	2fbb6 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   30378:	2800      	cmp	r0, #0
   3037a:	d1de      	bne.n	3033a <bt_smp_disconnected+0x20>
   3037c:	e7e1      	b.n	30342 <bt_smp_disconnected+0x28>

0003037e <id_add>:
	bt_id_add(keys);
   3037e:	f7e3 bb29 	b.w	139d4 <bt_id_add>

00030382 <bt_keys_get_type>:
{
   30382:	b570      	push	{r4, r5, r6, lr}
   30384:	4604      	mov	r4, r0
   30386:	460d      	mov	r5, r1
   30388:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   3038a:	f7e9 fcf7 	bl	19d7c <bt_keys_find>
	if (keys) {
   3038e:	b938      	cbnz	r0, 303a0 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   30390:	4631      	mov	r1, r6
   30392:	4628      	mov	r0, r5
   30394:	f7e9 fc7c 	bl	19c90 <bt_keys_get_addr>
	if (!keys) {
   30398:	b110      	cbz	r0, 303a0 <bt_keys_get_type+0x1e>
	keys->keys |= type;
   3039a:	89c3      	ldrh	r3, [r0, #14]
   3039c:	431c      	orrs	r4, r3
   3039e:	81c4      	strh	r4, [r0, #14]
}
   303a0:	bd70      	pop	{r4, r5, r6, pc}

000303a2 <bt_keys_add_type>:
	keys->keys |= type;
   303a2:	89c3      	ldrh	r3, [r0, #14]
   303a4:	4319      	orrs	r1, r3
   303a6:	81c1      	strh	r1, [r0, #14]
}
   303a8:	4770      	bx	lr

000303aa <sys_get_be32>:
	return ((uint16_t)src[0] << 8) | src[1];
   303aa:	6800      	ldr	r0, [r0, #0]
}
   303ac:	ba00      	rev	r0, r0
   303ae:	4770      	bx	lr

000303b0 <cbor_nb_reader_get8>:
	if (offset < 0 || offset >= cnr->nb->len) {
   303b0:	2900      	cmp	r1, #0
   303b2:	db06      	blt.n	303c2 <cbor_nb_reader_get8+0x12>
   303b4:	69c3      	ldr	r3, [r0, #28]
   303b6:	899a      	ldrh	r2, [r3, #12]
   303b8:	428a      	cmp	r2, r1
   303ba:	dd02      	ble.n	303c2 <cbor_nb_reader_get8+0x12>
	return cnr->nb->data[offset];
   303bc:	689b      	ldr	r3, [r3, #8]
   303be:	5c58      	ldrb	r0, [r3, r1]
   303c0:	4770      	bx	lr
		return UINT8_MAX;
   303c2:	20ff      	movs	r0, #255	; 0xff
}
   303c4:	4770      	bx	lr

000303c6 <cbor_nb_reader_get16>:
	if (offset < 0 || offset > cnr->nb->len - (int)sizeof(uint16_t)) {
   303c6:	2900      	cmp	r1, #0
   303c8:	db09      	blt.n	303de <cbor_nb_reader_get16+0x18>
   303ca:	69c2      	ldr	r2, [r0, #28]
   303cc:	8993      	ldrh	r3, [r2, #12]
   303ce:	3b01      	subs	r3, #1
   303d0:	428b      	cmp	r3, r1
   303d2:	dd04      	ble.n	303de <cbor_nb_reader_get16+0x18>
	return ((uint16_t)src[0] << 8) | src[1];
   303d4:	6893      	ldr	r3, [r2, #8]
   303d6:	5a58      	ldrh	r0, [r3, r1]
   303d8:	ba40      	rev16	r0, r0
   303da:	b280      	uxth	r0, r0
	return sys_get_be16(cnr->nb->data + offset);
   303dc:	4770      	bx	lr
		return UINT16_MAX;
   303de:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   303e2:	4770      	bx	lr

000303e4 <cbor_nb_reader_get32>:
	if (offset < 0 || offset > cnr->nb->len - (int)sizeof(uint32_t)) {
   303e4:	2900      	cmp	r1, #0
   303e6:	db08      	blt.n	303fa <cbor_nb_reader_get32+0x16>
   303e8:	69c2      	ldr	r2, [r0, #28]
   303ea:	8993      	ldrh	r3, [r2, #12]
   303ec:	3b03      	subs	r3, #3
   303ee:	428b      	cmp	r3, r1
   303f0:	dd03      	ble.n	303fa <cbor_nb_reader_get32+0x16>
	return sys_get_be32(cnr->nb->data + offset);
   303f2:	6890      	ldr	r0, [r2, #8]
   303f4:	4408      	add	r0, r1
   303f6:	f7ff bfd8 	b.w	303aa <sys_get_be32>
}
   303fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   303fe:	4770      	bx	lr

00030400 <cbor_nb_reader_get64>:
	if (offset < 0 || offset > cnr->nb->len - (int)sizeof(uint64_t)) {
   30400:	2900      	cmp	r1, #0
{
   30402:	b508      	push	{r3, lr}
	if (offset < 0 || offset > cnr->nb->len - (int)sizeof(uint64_t)) {
   30404:	db0e      	blt.n	30424 <cbor_nb_reader_get64+0x24>
   30406:	69c2      	ldr	r2, [r0, #28]
   30408:	8993      	ldrh	r3, [r2, #12]
   3040a:	3b07      	subs	r3, #7
   3040c:	428b      	cmp	r3, r1
   3040e:	dd09      	ble.n	30424 <cbor_nb_reader_get64+0x24>
	return sys_get_be64(cnr->nb->data + offset);
   30410:	6893      	ldr	r3, [r2, #8]
   30412:	440b      	add	r3, r1
	return ((uint64_t)sys_get_be32(&src[0]) << 32) | sys_get_be32(&src[4]);
   30414:	4618      	mov	r0, r3
   30416:	f7ff ffc8 	bl	303aa <sys_get_be32>
   3041a:	4601      	mov	r1, r0
   3041c:	1d18      	adds	r0, r3, #4
   3041e:	f7ff ffc4 	bl	303aa <sys_get_be32>
}
   30422:	bd08      	pop	{r3, pc}
		return UINT64_MAX;
   30424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30428:	4601      	mov	r1, r0
   3042a:	e7fa      	b.n	30422 <cbor_nb_reader_get64+0x22>

0003042c <cbor_nb_reader_cpy>:
{
   3042c:	b430      	push	{r4, r5}
   3042e:	4614      	mov	r4, r2
	if (offset < 0 || offset > cnr->nb->len - (int)len) {
   30430:	2c00      	cmp	r4, #0
{
   30432:	4605      	mov	r5, r0
   30434:	461a      	mov	r2, r3
   30436:	4608      	mov	r0, r1
	if (offset < 0 || offset > cnr->nb->len - (int)len) {
   30438:	db09      	blt.n	3044e <cbor_nb_reader_cpy+0x22>
   3043a:	69e9      	ldr	r1, [r5, #28]
   3043c:	898b      	ldrh	r3, [r1, #12]
   3043e:	1a9b      	subs	r3, r3, r2
   30440:	42a3      	cmp	r3, r4
   30442:	db04      	blt.n	3044e <cbor_nb_reader_cpy+0x22>
	return (uintptr_t)memcpy(dst, cnr->nb->data + offset, len);
   30444:	6889      	ldr	r1, [r1, #8]
   30446:	4421      	add	r1, r4
}
   30448:	bc30      	pop	{r4, r5}
	return (uintptr_t)memcpy(dst, cnr->nb->data + offset, len);
   3044a:	f7fd bdee 	b.w	2e02a <memcpy>
}
   3044e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30452:	bc30      	pop	{r4, r5}
   30454:	4770      	bx	lr

00030456 <cbor_nb_reader_cmp>:
{
   30456:	b410      	push	{r4}
   30458:	4614      	mov	r4, r2
	if (offset < 0 || offset > cnr->nb->len - (int)len) {
   3045a:	2c00      	cmp	r4, #0
{
   3045c:	461a      	mov	r2, r3
	if (offset < 0 || offset > cnr->nb->len - (int)len) {
   3045e:	db09      	blt.n	30474 <cbor_nb_reader_cmp+0x1e>
   30460:	69c0      	ldr	r0, [r0, #28]
   30462:	8983      	ldrh	r3, [r0, #12]
   30464:	1a9b      	subs	r3, r3, r2
   30466:	42a3      	cmp	r3, r4
   30468:	db04      	blt.n	30474 <cbor_nb_reader_cmp+0x1e>
	return memcmp(cnr->nb->data + offset, buf, len);
   3046a:	6880      	ldr	r0, [r0, #8]
   3046c:	4420      	add	r0, r4
}
   3046e:	bc10      	pop	{r4}
	return memcmp(cnr->nb->data + offset, buf, len);
   30470:	f7fd bdca 	b.w	2e008 <memcmp>
}
   30474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30478:	bc10      	pop	{r4}
   3047a:	4770      	bx	lr

0003047c <cbor_nb_write>:
{
   3047c:	b570      	push	{r4, r5, r6, lr}
   3047e:	4604      	mov	r4, r0
	return net_buf_simple_tailroom(&buf->b);
   30480:	6880      	ldr	r0, [r0, #8]
   30482:	3008      	adds	r0, #8
   30484:	4615      	mov	r5, r2
   30486:	460e      	mov	r6, r1
   30488:	f000 fb2f 	bl	30aea <net_buf_simple_tailroom>
	if (len > net_buf_tailroom(cnw->nb)) {
   3048c:	4285      	cmp	r5, r0
   3048e:	d80a      	bhi.n	304a6 <cbor_nb_write+0x2a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   30490:	68a0      	ldr	r0, [r4, #8]
   30492:	462a      	mov	r2, r5
   30494:	4631      	mov	r1, r6
   30496:	3008      	adds	r0, #8
   30498:	f000 faf2 	bl	30a80 <net_buf_simple_add_mem>
	cnw->enc.bytes_written += len;
   3049c:	6862      	ldr	r2, [r4, #4]
   3049e:	442a      	add	r2, r5
   304a0:	6062      	str	r2, [r4, #4]
	return CborNoError;
   304a2:	2000      	movs	r0, #0
}
   304a4:	bd70      	pop	{r4, r5, r6, pc}
		return CborErrorOutOfMemory;
   304a6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   304aa:	e7fb      	b.n	304a4 <cbor_nb_write+0x28>

000304ac <mcumgr_buf_free>:
	net_buf_unref(nb);
   304ac:	f7f7 bbfa 	b.w	27ca4 <net_buf_unref>

000304b0 <zephyr_smp_alloc_rsp>:
{
   304b0:	b570      	push	{r4, r5, r6, lr}
   304b2:	4604      	mov	r4, r0
   304b4:	460e      	mov	r6, r1
	rsp_nb = mcumgr_buf_alloc();
   304b6:	f7f7 fa2d 	bl	27914 <mcumgr_buf_alloc>
	if (rsp_nb == NULL) {
   304ba:	4605      	mov	r5, r0
   304bc:	b118      	cbz	r0, 304c6 <zephyr_smp_alloc_rsp+0x16>
	if (zst->zst_ud_copy) {
   304be:	6b33      	ldr	r3, [r6, #48]	; 0x30
   304c0:	b11b      	cbz	r3, 304ca <zephyr_smp_alloc_rsp+0x1a>
		zst->zst_ud_copy(rsp_nb, req_nb);
   304c2:	4621      	mov	r1, r4
   304c4:	4798      	blx	r3
}
   304c6:	4628      	mov	r0, r5
   304c8:	bd70      	pop	{r4, r5, r6, pc}
		pool = net_buf_pool_get(req_nb->pool_id);
   304ca:	79a0      	ldrb	r0, [r4, #6]
   304cc:	f7f7 fb26 	bl	27b1c <net_buf_pool_get>
		memcpy(net_buf_user_data(rsp_nb),
   304d0:	79e2      	ldrb	r2, [r4, #7]
   304d2:	f104 0114 	add.w	r1, r4, #20
   304d6:	f105 0014 	add.w	r0, r5, #20
   304da:	f7fd fda6 	bl	2e02a <memcpy>
   304de:	e7f2      	b.n	304c6 <zephyr_smp_alloc_rsp+0x16>

000304e0 <zephyr_smp_write_hdr>:
{
   304e0:	b508      	push	{r3, lr}
	memcpy(nb->data, hdr, sizeof(*hdr));
   304e2:	6883      	ldr	r3, [r0, #8]
   304e4:	2208      	movs	r2, #8
   304e6:	6898      	ldr	r0, [r3, #8]
   304e8:	f7fd fd9f 	bl	2e02a <memcpy>
}
   304ec:	2000      	movs	r0, #0
   304ee:	bd08      	pop	{r3, pc}

000304f0 <zephyr_smp_free_buf>:
{
   304f0:	b510      	push	{r4, lr}
	if (!buf) {
   304f2:	4604      	mov	r4, r0
   304f4:	b140      	cbz	r0, 30508 <zephyr_smp_free_buf+0x18>
	if (zst->zst_ud_free) {
   304f6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   304f8:	b10b      	cbz	r3, 304fe <zephyr_smp_free_buf+0xe>
		zst->zst_ud_free(net_buf_user_data((struct net_buf *)buf));
   304fa:	3014      	adds	r0, #20
   304fc:	4798      	blx	r3
	mcumgr_buf_free(buf);
   304fe:	4620      	mov	r0, r4
}
   30500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mcumgr_buf_free(buf);
   30504:	f7ff bfd2 	b.w	304ac <mcumgr_buf_free>
}
   30508:	bd10      	pop	{r4, pc}

0003050a <zephyr_smp_init_writer>:
{
   3050a:	b508      	push	{r3, lr}
	cbor_nb_writer_init(czw, buf);
   3050c:	f7f7 fa26 	bl	2795c <cbor_nb_writer_init>
}
   30510:	2000      	movs	r0, #0
   30512:	bd08      	pop	{r3, pc}

00030514 <zephyr_smp_init_reader>:
{
   30514:	b508      	push	{r3, lr}
	cbor_nb_reader_init(czr, buf);
   30516:	f7f7 fa05 	bl	27924 <cbor_nb_reader_init>
}
   3051a:	2000      	movs	r0, #0
   3051c:	bd08      	pop	{r3, pc}

0003051e <zephyr_smp_reset_buf>:
	net_buf_reset(buf);
   3051e:	f000 b9fa 	b.w	30916 <net_buf_reset>

00030522 <zephyr_smp_trim_front>:
	if (len > nb->len) {
   30522:	8983      	ldrh	r3, [r0, #12]
	return net_buf_simple_pull(&buf->b, len);
   30524:	4299      	cmp	r1, r3
   30526:	bf28      	it	cs
   30528:	4619      	movcs	r1, r3
   3052a:	3008      	adds	r0, #8
   3052c:	f000 bac1 	b.w	30ab2 <net_buf_simple_pull>

00030530 <zephyr_smp_tx_rsp>:
{
   30530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	mtu = zst->zst_get_mtu(rsp);
   30532:	4608      	mov	r0, r1
   30534:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
{
   30536:	460c      	mov	r4, r1
   30538:	4615      	mov	r5, r2
	mtu = zst->zst_get_mtu(rsp);
   3053a:	4798      	blx	r3
	if (mtu == 0U) {
   3053c:	4607      	mov	r7, r0
   3053e:	bb00      	cbnz	r0, 30582 <zephyr_smp_tx_rsp+0x52>
		return MGMT_ERR_EUNKNOWN;
   30540:	2001      	movs	r0, #1
}
   30542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (src->len <= mtu) {
   30544:	89a3      	ldrh	r3, [r4, #12]
   30546:	42bb      	cmp	r3, r7
   30548:	d91f      	bls.n	3058a <zephyr_smp_tx_rsp+0x5a>
		frag = zephyr_smp_alloc_rsp(src, arg);
   3054a:	4629      	mov	r1, r5
   3054c:	4620      	mov	r0, r4
   3054e:	f7ff ffaf 	bl	304b0 <zephyr_smp_alloc_rsp>
		if (!frag) {
   30552:	4606      	mov	r6, r0
   30554:	b928      	cbnz	r0, 30562 <zephyr_smp_tx_rsp+0x32>
			zephyr_smp_free_buf(nb, zst);
   30556:	4620      	mov	r0, r4
   30558:	4629      	mov	r1, r5
   3055a:	f7ff ffc9 	bl	304f0 <zephyr_smp_free_buf>
			return MGMT_ERR_ENOMEM;
   3055e:	2002      	movs	r0, #2
   30560:	e7ef      	b.n	30542 <zephyr_smp_tx_rsp+0x12>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   30562:	68a1      	ldr	r1, [r4, #8]
   30564:	463a      	mov	r2, r7
   30566:	3008      	adds	r0, #8
   30568:	f000 fa8a 	bl	30a80 <net_buf_simple_add_mem>
		zephyr_smp_trim_front(src, mtu, NULL);
   3056c:	2200      	movs	r2, #0
   3056e:	4639      	mov	r1, r7
   30570:	4620      	mov	r0, r4
   30572:	f7ff ffd6 	bl	30522 <zephyr_smp_trim_front>
		rc = zst->zst_output(zst, frag);
   30576:	6aab      	ldr	r3, [r5, #40]	; 0x28
   30578:	4631      	mov	r1, r6
   3057a:	4628      	mov	r0, r5
   3057c:	4798      	blx	r3
		if (rc != 0) {
   3057e:	2800      	cmp	r0, #0
   30580:	d1de      	bne.n	30540 <zephyr_smp_tx_rsp+0x10>
	while (nb != NULL) {
   30582:	2c00      	cmp	r4, #0
   30584:	d1de      	bne.n	30544 <zephyr_smp_tx_rsp+0x14>
	return 0;
   30586:	4620      	mov	r0, r4
   30588:	e7db      	b.n	30542 <zephyr_smp_tx_rsp+0x12>
   3058a:	4626      	mov	r6, r4
		*nb = NULL;
   3058c:	2400      	movs	r4, #0
   3058e:	e7f2      	b.n	30576 <zephyr_smp_tx_rsp+0x46>

00030590 <zephyr_smp_rx_req>:

WEAK void
zephyr_smp_rx_req(struct zephyr_smp_transport *zst, struct net_buf *nb)
{
   30590:	b510      	push	{r4, lr}
   30592:	4604      	mov	r4, r0
	net_buf_put(&zst->zst_fifo, nb);
   30594:	3010      	adds	r0, #16
   30596:	f000 fa2e 	bl	309f6 <net_buf_put>
	k_work_submit(&zst->zst_work);
   3059a:	4620      	mov	r0, r4
}
   3059c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit(&zst->zst_work);
   305a0:	f7fa b9e0 	b.w	2a964 <k_work_submit>

000305a4 <smp_bt_ccc_changed>:
}
   305a4:	4770      	bx	lr

000305a6 <smp_bt_ud_copy>:
{
   305a6:	b510      	push	{r4, lr}
   305a8:	4604      	mov	r4, r0
	if (src_ud->conn) {
   305aa:	6948      	ldr	r0, [r1, #20]
   305ac:	b110      	cbz	r0, 305b4 <smp_bt_ud_copy+0xe>
		dst_ud->conn = bt_conn_ref(src_ud->conn);
   305ae:	f7fe f9c1 	bl	2e934 <bt_conn_ref>
   305b2:	6160      	str	r0, [r4, #20]
}
   305b4:	2000      	movs	r0, #0
   305b6:	bd10      	pop	{r4, pc}

000305b8 <smp_bt_ud_free>:
{
   305b8:	b510      	push	{r4, lr}
   305ba:	4604      	mov	r4, r0
	if (user_data->conn) {
   305bc:	6800      	ldr	r0, [r0, #0]
   305be:	b118      	cbz	r0, 305c8 <smp_bt_ud_free+0x10>
		bt_conn_unref(user_data->conn);
   305c0:	f7fe f9d3 	bl	2e96a <bt_conn_unref>
		user_data->conn = NULL;
   305c4:	2300      	movs	r3, #0
   305c6:	6023      	str	r3, [r4, #0]
}
   305c8:	bd10      	pop	{r4, pc}

000305ca <smp_bt_get_mtu>:
	if (!ud->conn) {
   305ca:	6940      	ldr	r0, [r0, #20]
{
   305cc:	b538      	push	{r3, r4, r5, lr}
	if (!ud->conn) {
   305ce:	b908      	cbnz	r0, 305d4 <smp_bt_get_mtu+0xa>
		return 0;
   305d0:	2000      	movs	r0, #0
}
   305d2:	bd38      	pop	{r3, r4, r5, pc}
	return bt_conn_ref(ud->conn);
   305d4:	f7fe f9ae 	bl	2e934 <bt_conn_ref>
	if (conn == NULL) {
   305d8:	4605      	mov	r5, r0
   305da:	2800      	cmp	r0, #0
   305dc:	d0f8      	beq.n	305d0 <smp_bt_get_mtu+0x6>
	mtu = bt_gatt_get_mtu(conn);
   305de:	f7ff fa64 	bl	2faaa <bt_gatt_get_mtu>
   305e2:	4604      	mov	r4, r0
	bt_conn_unref(conn);
   305e4:	4628      	mov	r0, r5
   305e6:	f7fe f9c0 	bl	2e96a <bt_conn_unref>
	return mtu - 3;
   305ea:	1ee0      	subs	r0, r4, #3
   305ec:	b280      	uxth	r0, r0
   305ee:	e7f0      	b.n	305d2 <smp_bt_get_mtu+0x8>

000305f0 <smp_bt_tx_pkt>:
	if (!ud->conn) {
   305f0:	6948      	ldr	r0, [r1, #20]
{
   305f2:	b570      	push	{r4, r5, r6, lr}
   305f4:	460c      	mov	r4, r1
	if (!ud->conn) {
   305f6:	b950      	cbnz	r0, 3060e <smp_bt_tx_pkt+0x1e>
		rc = -1;
   305f8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	smp_bt_ud_free(net_buf_user_data(nb));
   305fc:	f104 0014 	add.w	r0, r4, #20
   30600:	f7ff ffda 	bl	305b8 <smp_bt_ud_free>
	mcumgr_buf_free(nb);
   30604:	4620      	mov	r0, r4
   30606:	f7ff ff51 	bl	304ac <mcumgr_buf_free>
}
   3060a:	4628      	mov	r0, r5
   3060c:	bd70      	pop	{r4, r5, r6, pc}
	return bt_conn_ref(ud->conn);
   3060e:	f7fe f991 	bl	2e934 <bt_conn_ref>
	if (conn == NULL) {
   30612:	4606      	mov	r6, r0
   30614:	2800      	cmp	r0, #0
   30616:	d0ef      	beq.n	305f8 <smp_bt_tx_pkt+0x8>
		rc = smp_bt_notify(conn, nb->data, nb->len);
   30618:	89a2      	ldrh	r2, [r4, #12]
   3061a:	68a1      	ldr	r1, [r4, #8]
   3061c:	f7f7 fa2a 	bl	27a74 <smp_bt_notify>
   30620:	4605      	mov	r5, r0
		bt_conn_unref(conn);
   30622:	4630      	mov	r0, r6
   30624:	f7fe f9a1 	bl	2e96a <bt_conn_unref>
   30628:	e7e8      	b.n	305fc <smp_bt_tx_pkt+0xc>

0003062a <mgmt_streamer_alloc_rsp>:
{
   3062a:	4603      	mov	r3, r0
   3062c:	4608      	mov	r0, r1
	return streamer->cfg->alloc_rsp(req, streamer->cb_arg);
   3062e:	681a      	ldr	r2, [r3, #0]
   30630:	6859      	ldr	r1, [r3, #4]
   30632:	6812      	ldr	r2, [r2, #0]
   30634:	4710      	bx	r2

00030636 <mgmt_streamer_trim_front>:
{
   30636:	4603      	mov	r3, r0
   30638:	4608      	mov	r0, r1
   3063a:	4611      	mov	r1, r2
	streamer->cfg->trim_front(buf, len, streamer->cb_arg);
   3063c:	681a      	ldr	r2, [r3, #0]
{
   3063e:	b410      	push	{r4}
	streamer->cfg->trim_front(buf, len, streamer->cb_arg);
   30640:	6854      	ldr	r4, [r2, #4]
   30642:	685a      	ldr	r2, [r3, #4]
   30644:	4623      	mov	r3, r4
}
   30646:	bc10      	pop	{r4}
	streamer->cfg->trim_front(buf, len, streamer->cb_arg);
   30648:	4718      	bx	r3

0003064a <mgmt_streamer_write_hdr>:
	return streamer->cfg->write_hdr(streamer->writer, hdr);
   3064a:	6803      	ldr	r3, [r0, #0]
   3064c:	68c0      	ldr	r0, [r0, #12]
   3064e:	68db      	ldr	r3, [r3, #12]
   30650:	4718      	bx	r3

00030652 <mgmt_streamer_init_reader>:
	return streamer->cfg->init_reader(streamer->reader, buf);
   30652:	6803      	ldr	r3, [r0, #0]
   30654:	6880      	ldr	r0, [r0, #8]
   30656:	691b      	ldr	r3, [r3, #16]
   30658:	4718      	bx	r3

0003065a <mgmt_streamer_init_writer>:
	return streamer->cfg->init_writer(streamer->writer, buf);
   3065a:	6803      	ldr	r3, [r0, #0]
   3065c:	68c0      	ldr	r0, [r0, #12]
   3065e:	695b      	ldr	r3, [r3, #20]
   30660:	4718      	bx	r3

00030662 <mgmt_streamer_free_buf>:
{
   30662:	4603      	mov	r3, r0
   30664:	4608      	mov	r0, r1
	streamer->cfg->free_buf(buf, streamer->cb_arg);
   30666:	681a      	ldr	r2, [r3, #0]
   30668:	6859      	ldr	r1, [r3, #4]
   3066a:	6992      	ldr	r2, [r2, #24]
   3066c:	4710      	bx	r2

0003066e <mgmt_err_from_cbor>:
	switch (cbor_status) {
   3066e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   30672:	d003      	beq.n	3067c <mgmt_err_from_cbor+0xe>
   30674:	3800      	subs	r0, #0
   30676:	bf18      	it	ne
   30678:	2001      	movne	r0, #1
   3067a:	4770      	bx	lr
   3067c:	2002      	movs	r0, #2
}
   3067e:	4770      	bx	lr

00030680 <mgmt_ctxt_init>:
{
   30680:	b570      	push	{r4, r5, r6, lr}
   30682:	460e      	mov	r6, r1
	rc = cbor_parser_init(streamer->reader, 0, &ctxt->parser, &ctxt->it);
   30684:	f100 031c 	add.w	r3, r0, #28
   30688:	f100 0210 	add.w	r2, r0, #16
{
   3068c:	4605      	mov	r5, r0
	rc = cbor_parser_init(streamer->reader, 0, &ctxt->parser, &ctxt->it);
   3068e:	2100      	movs	r1, #0
   30690:	68b0      	ldr	r0, [r6, #8]
   30692:	f000 fee1 	bl	31458 <cbor_parser_init>
   30696:	4604      	mov	r4, r0
	if (rc != CborNoError) {
   30698:	b118      	cbz	r0, 306a2 <mgmt_ctxt_init+0x22>
}
   3069a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return mgmt_err_from_cbor(rc);
   3069e:	f7ff bfe6 	b.w	3066e <mgmt_err_from_cbor>
	cbor_encoder_init(&ctxt->encoder, streamer->writer, 0);
   306a2:	4602      	mov	r2, r0
   306a4:	68f1      	ldr	r1, [r6, #12]
   306a6:	4628      	mov	r0, r5
   306a8:	f000 fe10 	bl	312cc <cbor_encoder_init>
}
   306ac:	4620      	mov	r0, r4
   306ae:	bd70      	pop	{r4, r5, r6, pc}

000306b0 <mgmt_ntoh_hdr>:
	hdr->nh_len = ntohs(hdr->nh_len);
   306b0:	8843      	ldrh	r3, [r0, #2]
   306b2:	ba5b      	rev16	r3, r3
   306b4:	8043      	strh	r3, [r0, #2]
	hdr->nh_group = ntohs(hdr->nh_group);
   306b6:	8883      	ldrh	r3, [r0, #4]
   306b8:	ba5b      	rev16	r3, r3
   306ba:	8083      	strh	r3, [r0, #4]
}
   306bc:	4770      	bx	lr

000306be <mgmt_hton_hdr>:
   306be:	f7ff bff7 	b.w	306b0 <mgmt_ntoh_hdr>

000306c2 <smp_process_request_packet>:
 *                       or there is not enough bytes to process header,
 *                       or other MGMT_ERR_[...] code on failure.
 */
int
smp_process_request_packet(struct smp_streamer *streamer, void *req)
{
   306c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   306c6:	b095      	sub	sp, #84	; 0x54
   306c8:	4605      	mov	r5, r0
   306ca:	460e      	mov	r6, r1
	int rc = 0;
	const char *rsn = NULL;

	rsp = NULL;

	mgmt_streamer_init_reader(&streamer->mgmt_stmr, req);
   306cc:	f7ff ffc1 	bl	30652 <mgmt_streamer_init_reader>
	reader->cpy(reader, (char *)dst_hdr, 0, sizeof(*dst_hdr));
   306d0:	f04f 0900 	mov.w	r9, #0

	while (streamer->mgmt_stmr.reader->message_size > 0) {
   306d4:	68a8      	ldr	r0, [r5, #8]
   306d6:	6984      	ldr	r4, [r0, #24]
   306d8:	b944      	cbnz	r4, 306ec <smp_process_request_packet+0x2a>
		}

		return rc;
	}

	mgmt_streamer_free_buf(&streamer->mgmt_stmr, req);
   306da:	4631      	mov	r1, r6
   306dc:	4628      	mov	r0, r5
   306de:	f7ff ffc0 	bl	30662 <mgmt_streamer_free_buf>
	mgmt_streamer_free_buf(&streamer->mgmt_stmr, rsp);
   306e2:	2100      	movs	r1, #0
   306e4:	4628      	mov	r0, r5
   306e6:	f7ff ffbc 	bl	30662 <mgmt_streamer_free_buf>
	return rc;
   306ea:	e093      	b.n	30814 <smp_process_request_packet+0x152>
	if (reader->message_size < sizeof(*dst_hdr)) {
   306ec:	2c07      	cmp	r4, #7
   306ee:	f240 8103 	bls.w	308f8 <smp_process_request_packet+0x236>
	reader->cpy(reader, (char *)dst_hdr, 0, sizeof(*dst_hdr));
   306f2:	2308      	movs	r3, #8
   306f4:	2200      	movs	r2, #0
   306f6:	a901      	add	r1, sp, #4
   306f8:	6944      	ldr	r4, [r0, #20]
   306fa:	47a0      	blx	r4
		mgmt_ntoh_hdr(&req_hdr);
   306fc:	a801      	add	r0, sp, #4
   306fe:	f7ff ffd7 	bl	306b0 <mgmt_ntoh_hdr>
		if (streamer->mgmt_stmr.reader->message_size < (req_hdr.nh_len + MGMT_HDR_SIZE)) {
   30702:	68aa      	ldr	r2, [r5, #8]
   30704:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   30708:	6992      	ldr	r2, [r2, #24]
   3070a:	3308      	adds	r3, #8
   3070c:	429a      	cmp	r2, r3
   3070e:	f0c0 80f9 	bcc.w	30904 <smp_process_request_packet+0x242>
		mgmt_streamer_trim_front(&streamer->mgmt_stmr, req, MGMT_HDR_SIZE);
   30712:	2208      	movs	r2, #8
   30714:	4631      	mov	r1, r6
   30716:	4628      	mov	r0, r5
   30718:	f7ff ff8d 	bl	30636 <mgmt_streamer_trim_front>
		streamer->mgmt_stmr.reader->message_size -= MGMT_HDR_SIZE;
   3071c:	68aa      	ldr	r2, [r5, #8]
   3071e:	6993      	ldr	r3, [r2, #24]
   30720:	3b08      	subs	r3, #8
   30722:	6193      	str	r3, [r2, #24]
		rsp = mgmt_streamer_alloc_rsp(&streamer->mgmt_stmr, req);
   30724:	4631      	mov	r1, r6
   30726:	4628      	mov	r0, r5
   30728:	f7ff ff7f 	bl	3062a <mgmt_streamer_alloc_rsp>
		if (rsp == NULL) {
   3072c:	4680      	mov	r8, r0
   3072e:	2800      	cmp	r0, #0
   30730:	f000 80ed 	beq.w	3090e <smp_process_request_packet+0x24c>
		mgmt_streamer_init_writer(&streamer->mgmt_stmr, rsp);
   30734:	4601      	mov	r1, r0
   30736:	4628      	mov	r0, r5
   30738:	f7ff ff8f 	bl	3065a <mgmt_streamer_init_writer>
	rc = mgmt_ctxt_init(&cbuf, &streamer->mgmt_stmr);
   3073c:	4629      	mov	r1, r5
   3073e:	a809      	add	r0, sp, #36	; 0x24
   30740:	f7ff ff9e 	bl	30680 <mgmt_ctxt_init>
	if (rc != 0) {
   30744:	4604      	mov	r4, r0
   30746:	2800      	cmp	r0, #0
   30748:	f040 80d8 	bne.w	308fc <smp_process_request_packet+0x23a>
	handler = mgmt_find_handler(req_hdr->nh_group, req_hdr->nh_id);
   3074c:	f89d 100b 	ldrb.w	r1, [sp, #11]
   30750:	f8bd 0008 	ldrh.w	r0, [sp, #8]
   30754:	f7f7 f9a6 	bl	27aa4 <mgmt_find_handler>
	if (handler == NULL) {
   30758:	2800      	cmp	r0, #0
   3075a:	d15f      	bne.n	3081c <smp_process_request_packet+0x15a>
		handler_found = false;
   3075c:	2700      	movs	r7, #0
		return MGMT_ERR_ENOTSUP;
   3075e:	2408      	movs	r4, #8
	if (rsp == NULL) {
   30760:	46b1      	mov	r9, r6
   30762:	4646      	mov	r6, r8
	mgmt_streamer_init_writer(&streamer->mgmt_stmr, rsp);
   30764:	4631      	mov	r1, r6
   30766:	4628      	mov	r0, r5
   30768:	f7ff ff77 	bl	3065a <mgmt_streamer_init_writer>
	rc = mgmt_ctxt_init(&cbuf, &streamer->mgmt_stmr);
   3076c:	4629      	mov	r1, r5
   3076e:	a809      	add	r0, sp, #36	; 0x24
   30770:	f7ff ff86 	bl	30680 <mgmt_ctxt_init>
	if (rc != 0) {
   30774:	2800      	cmp	r0, #0
   30776:	d13b      	bne.n	307f0 <smp_process_request_packet+0x12e>
	rc = cbor_encoder_create_map(&cbuf.encoder, &map, CborIndefiniteLength);
   30778:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3077c:	a905      	add	r1, sp, #20
   3077e:	a809      	add	r0, sp, #36	; 0x24
   30780:	f000 fdc8 	bl	31314 <cbor_encoder_create_map>
	if (rc != 0) {
   30784:	bba0      	cbnz	r0, 307f0 <smp_process_request_packet+0x12e>
	rc = mgmt_write_rsp_status(&cbuf, status);
   30786:	4621      	mov	r1, r4
   30788:	a809      	add	r0, sp, #36	; 0x24
   3078a:	f7f7 f9a5 	bl	27ad8 <mgmt_write_rsp_status>
	if (rc != 0) {
   3078e:	bb78      	cbnz	r0, 307f0 <smp_process_request_packet+0x12e>
	rc = cbor_encoder_close_container(&cbuf.encoder, &map);
   30790:	a905      	add	r1, sp, #20
   30792:	a809      	add	r0, sp, #36	; 0x24
   30794:	f000 fdcd 	bl	31332 <cbor_encoder_close_container>
	if (rc != 0) {
   30798:	4680      	mov	r8, r0
   3079a:	bb48      	cbnz	r0, 307f0 <smp_process_request_packet+0x12e>
		.nh_op = smp_rsp_op(req_hdr->nh_op),
   3079c:	f89d 2004 	ldrb.w	r2, [sp, #4]
CBOR_API CborError cbor_encode_byte_iovec(CborEncoder *encoder,
                                          const struct cbor_iovec iov[],
                                          int iov_len);
CBOR_API CborError cbor_encode_floating_point(CborEncoder *encoder, CborType fpType, const void *value);
CBOR_INLINE_API int cbor_encode_bytes_written(CborEncoder *encoder)
{   return encoder->writer->bytes_written; }
   307a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
		.nh_group = req_hdr->nh_group,
   307a2:	f8bd 0008 	ldrh.w	r0, [sp, #8]
			 cbor_encode_bytes_written(&cbuf.encoder) - MGMT_HDR_SIZE);
   307a6:	685b      	ldr	r3, [r3, #4]
		.nh_seq = req_hdr->nh_seq,
   307a8:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	*rsp_hdr = (struct mgmt_hdr) {
   307ac:	f8ad 0010 	strh.w	r0, [sp, #16]
		return MGMT_OP_WRITE_RSP;
   307b0:	f012 0f07 	tst.w	r2, #7
   307b4:	bf0c      	ite	eq
   307b6:	f04f 0c01 	moveq.w	ip, #1
   307ba:	f04f 0c03 	movne.w	ip, #3
	*rsp_hdr = (struct mgmt_hdr) {
   307be:	4642      	mov	r2, r8
   307c0:	f36c 0202 	bfi	r2, ip, #0, #3
			 cbor_encode_bytes_written(&cbuf.encoder) - MGMT_HDR_SIZE);
   307c4:	3b08      	subs	r3, #8
	mgmt_hton_hdr(rsp_hdr);
   307c6:	a803      	add	r0, sp, #12
	*rsp_hdr = (struct mgmt_hdr) {
   307c8:	f8ad 300e 	strh.w	r3, [sp, #14]
   307cc:	f8ad 800c 	strh.w	r8, [sp, #12]
   307d0:	f8ad 1012 	strh.w	r1, [sp, #18]
   307d4:	f88d 200c 	strb.w	r2, [sp, #12]
	mgmt_hton_hdr(rsp_hdr);
   307d8:	f7ff ff71 	bl	306be <mgmt_hton_hdr>
	return mgmt_streamer_write_hdr(&streamer->mgmt_stmr, src_hdr);
   307dc:	a903      	add	r1, sp, #12
   307de:	4628      	mov	r0, r5
   307e0:	f7ff ff33 	bl	3064a <mgmt_streamer_write_hdr>
		streamer->tx_rsp_cb(streamer, rsp, streamer->mgmt_stmr.cb_arg);
   307e4:	4631      	mov	r1, r6
   307e6:	692b      	ldr	r3, [r5, #16]
   307e8:	686a      	ldr	r2, [r5, #4]
   307ea:	4628      	mov	r0, r5
   307ec:	4798      	blx	r3
		rsp = NULL;
   307ee:	4646      	mov	r6, r8
	mgmt_streamer_free_buf(&streamer->mgmt_stmr, req);
   307f0:	4649      	mov	r1, r9
   307f2:	4628      	mov	r0, r5
   307f4:	f7ff ff35 	bl	30662 <mgmt_streamer_free_buf>
	mgmt_streamer_free_buf(&streamer->mgmt_stmr, rsp);
   307f8:	4631      	mov	r1, r6
   307fa:	4628      	mov	r0, r5
   307fc:	f7ff ff31 	bl	30662 <mgmt_streamer_free_buf>
		if (handler_found) {
   30800:	b147      	cbz	r7, 30814 <smp_process_request_packet+0x152>
			mgmt_evt(MGMT_EVT_OP_CMD_DONE, req_hdr.nh_group, req_hdr.nh_id,
   30802:	f89d 200b 	ldrb.w	r2, [sp, #11]
   30806:	f8bd 1008 	ldrh.w	r1, [sp, #8]
			cmd_done_arg.err = rc;
   3080a:	9400      	str	r4, [sp, #0]
			mgmt_evt(MGMT_EVT_OP_CMD_DONE, req_hdr.nh_group, req_hdr.nh_id,
   3080c:	466b      	mov	r3, sp
   3080e:	2003      	movs	r0, #3
   30810:	f7f7 f978 	bl	27b04 <mgmt_evt>
}
   30814:	4620      	mov	r0, r4
   30816:	b015      	add	sp, #84	; 0x54
   30818:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req_hdr->nh_op) {
   3081c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   30820:	f013 0307 	ands.w	r3, r3, #7
   30824:	d004      	beq.n	30830 <smp_process_request_packet+0x16e>
   30826:	2b02      	cmp	r3, #2
   30828:	d050      	beq.n	308cc <smp_process_request_packet+0x20a>
		handler_found = false;
   3082a:	4627      	mov	r7, r4
		return MGMT_ERR_EINVAL;
   3082c:	2403      	movs	r4, #3
   3082e:	e797      	b.n	30760 <smp_process_request_packet+0x9e>
		handler_fn = handler->mh_read;
   30830:	6804      	ldr	r4, [r0, #0]
	if (handler_fn) {
   30832:	2c00      	cmp	r4, #0
   30834:	d092      	beq.n	3075c <smp_process_request_packet+0x9a>
		rc = cbor_encoder_create_map(&cbuf->encoder, &payload_encoder,
   30836:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3083a:	a905      	add	r1, sp, #20
   3083c:	a809      	add	r0, sp, #36	; 0x24
   3083e:	f000 fd69 	bl	31314 <cbor_encoder_create_map>
   30842:	4603      	mov	r3, r0
		if (rc != 0) {
   30844:	2800      	cmp	r0, #0
   30846:	d043      	beq.n	308d0 <smp_process_request_packet+0x20e>
			return mgmt_err_from_cbor(rc);
   30848:	f7ff ff11 	bl	3066e <mgmt_err_from_cbor>
		handler_found = false;
   3084c:	2700      	movs	r7, #0
			return mgmt_err_from_cbor(rc);
   3084e:	4604      	mov	r4, r0
	if (rc != 0) {
   30850:	2c00      	cmp	r4, #0
   30852:	d185      	bne.n	30760 <smp_process_request_packet+0x9e>
		.nh_op = smp_rsp_op(req_hdr->nh_op),
   30854:	f89d 2004 	ldrb.w	r2, [sp, #4]
   30858:	9b09      	ldr	r3, [sp, #36]	; 0x24
		.nh_group = req_hdr->nh_group,
   3085a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
			 cbor_encode_bytes_written(&cbuf.encoder) - MGMT_HDR_SIZE);
   3085e:	685b      	ldr	r3, [r3, #4]
	*rsp_hdr = (struct mgmt_hdr) {
   30860:	f8ad 9014 	strh.w	r9, [sp, #20]
		return MGMT_OP_WRITE_RSP;
   30864:	f012 0f07 	tst.w	r2, #7
   30868:	bf0c      	ite	eq
   3086a:	2001      	moveq	r0, #1
   3086c:	2003      	movne	r0, #3
		.nh_seq = req_hdr->nh_seq,
   3086e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
	*rsp_hdr = (struct mgmt_hdr) {
   30872:	f88d 0014 	strb.w	r0, [sp, #20]
			 cbor_encode_bytes_written(&cbuf.encoder) - MGMT_HDR_SIZE);
   30876:	3b08      	subs	r3, #8
	mgmt_hton_hdr(rsp_hdr);
   30878:	a805      	add	r0, sp, #20
	*rsp_hdr = (struct mgmt_hdr) {
   3087a:	f8ad 3016 	strh.w	r3, [sp, #22]
   3087e:	f8ad 201a 	strh.w	r2, [sp, #26]
   30882:	f8ad 1018 	strh.w	r1, [sp, #24]
	mgmt_hton_hdr(rsp_hdr);
   30886:	f7ff ff1a 	bl	306be <mgmt_hton_hdr>
	return mgmt_streamer_write_hdr(&streamer->mgmt_stmr, src_hdr);
   3088a:	a905      	add	r1, sp, #20
   3088c:	4628      	mov	r0, r5
   3088e:	f7ff fedc 	bl	3064a <mgmt_streamer_write_hdr>
		rc = streamer->tx_rsp_cb(streamer, rsp, streamer->mgmt_stmr.cb_arg);
   30892:	692b      	ldr	r3, [r5, #16]
   30894:	686a      	ldr	r2, [r5, #4]
   30896:	4641      	mov	r1, r8
   30898:	4628      	mov	r0, r5
   3089a:	4798      	blx	r3
		if (rc != 0) {
   3089c:	4604      	mov	r4, r0
   3089e:	bb98      	cbnz	r0, 30908 <smp_process_request_packet+0x246>
		mgmt_streamer_trim_front(&streamer->mgmt_stmr, req, req_hdr.nh_len);
   308a0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   308a4:	4631      	mov	r1, r6
   308a6:	4628      	mov	r0, r5
   308a8:	f7ff fec5 	bl	30636 <mgmt_streamer_trim_front>
		streamer->mgmt_stmr.reader->message_size -= req_hdr.nh_len;
   308ac:	68aa      	ldr	r2, [r5, #8]
   308ae:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   308b2:	6993      	ldr	r3, [r2, #24]
		cmd_done_arg.err = MGMT_ERR_EOK;
   308b4:	9400      	str	r4, [sp, #0]
		streamer->mgmt_stmr.reader->message_size -= req_hdr.nh_len;
   308b6:	1a5b      	subs	r3, r3, r1
   308b8:	6193      	str	r3, [r2, #24]
		mgmt_evt(MGMT_EVT_OP_CMD_DONE, req_hdr.nh_group, req_hdr.nh_id,
   308ba:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   308be:	f89d 200b 	ldrb.w	r2, [sp, #11]
   308c2:	466b      	mov	r3, sp
   308c4:	2003      	movs	r0, #3
   308c6:	f7f7 f91d 	bl	27b04 <mgmt_evt>
   308ca:	e703      	b.n	306d4 <smp_process_request_packet+0x12>
		handler_fn = handler->mh_write;
   308cc:	6844      	ldr	r4, [r0, #4]
		break;
   308ce:	e7b0      	b.n	30832 <smp_process_request_packet+0x170>
		mgmt_evt(MGMT_EVT_OP_CMD_RECV, req_hdr->nh_group, req_hdr->nh_id, NULL);
   308d0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   308d4:	f89d 200b 	ldrb.w	r2, [sp, #11]
   308d8:	2001      	movs	r0, #1
   308da:	f7f7 f913 	bl	27b04 <mgmt_evt>
		rc = handler_fn(cbuf);
   308de:	a809      	add	r0, sp, #36	; 0x24
   308e0:	47a0      	blx	r4
		rcc = cbor_encoder_close_container(&cbuf->encoder, &payload_encoder);
   308e2:	a905      	add	r1, sp, #20
		rc = handler_fn(cbuf);
   308e4:	4604      	mov	r4, r0
		rcc = cbor_encoder_close_container(&cbuf->encoder, &payload_encoder);
   308e6:	a809      	add	r0, sp, #36	; 0x24
   308e8:	f000 fd23 	bl	31332 <cbor_encoder_close_container>
		if (rc == 0) {
   308ec:	b944      	cbnz	r4, 30900 <smp_process_request_packet+0x23e>
			rc = mgmt_err_from_cbor(rcc);
   308ee:	f7ff febe 	bl	3066e <mgmt_err_from_cbor>
		*handler_found = true;
   308f2:	2701      	movs	r7, #1
			rc = mgmt_err_from_cbor(rcc);
   308f4:	4604      	mov	r4, r0
   308f6:	e7ab      	b.n	30850 <smp_process_request_packet+0x18e>
			rc = MGMT_ERR_ECORRUPT;
   308f8:	2409      	movs	r4, #9
   308fa:	e6ee      	b.n	306da <smp_process_request_packet+0x18>
		handler_found = false;
   308fc:	2700      	movs	r7, #0
   308fe:	e72f      	b.n	30760 <smp_process_request_packet+0x9e>
		*handler_found = true;
   30900:	2701      	movs	r7, #1
   30902:	e72d      	b.n	30760 <smp_process_request_packet+0x9e>
		handler_found = false;
   30904:	2700      	movs	r7, #0
			rc = MGMT_ERR_ECORRUPT;
   30906:	2409      	movs	r4, #9
		req = NULL;
   30908:	f04f 0900 	mov.w	r9, #0
   3090c:	e72a      	b.n	30764 <smp_process_request_packet+0xa2>
		handler_found = false;
   3090e:	4607      	mov	r7, r0
			rc = MGMT_ERR_ENOMEM;
   30910:	2402      	movs	r4, #2
   30912:	e7f9      	b.n	30908 <smp_process_request_packet+0x246>

00030914 <fixed_data_unref>:
}
   30914:	4770      	bx	lr

00030916 <net_buf_reset>:
	buf->len  = 0U;
   30916:	2300      	movs	r3, #0
   30918:	8183      	strh	r3, [r0, #12]
	buf->data = buf->__buf;
   3091a:	6903      	ldr	r3, [r0, #16]
   3091c:	6083      	str	r3, [r0, #8]
}
   3091e:	4770      	bx	lr

00030920 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   30920:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   30922:	6849      	ldr	r1, [r1, #4]
   30924:	6809      	ldr	r1, [r1, #0]
   30926:	f7f7 b929 	b.w	27b7c <net_buf_alloc_len>

0003092a <net_buf_get>:
{
   3092a:	b570      	push	{r4, r5, r6, lr}
   3092c:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   3092e:	f7f9 fe79 	bl	2a624 <z_impl_k_queue_get>
	if (!buf) {
   30932:	4605      	mov	r5, r0
   30934:	b128      	cbz	r0, 30942 <net_buf_get+0x18>
   30936:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   30938:	7963      	ldrb	r3, [r4, #5]
   3093a:	f013 0301 	ands.w	r3, r3, #1
   3093e:	d102      	bne.n	30946 <net_buf_get+0x1c>
	frag->frags = NULL;
   30940:	6023      	str	r3, [r4, #0]
}
   30942:	4628      	mov	r0, r5
   30944:	bd70      	pop	{r4, r5, r6, pc}
   30946:	2300      	movs	r3, #0
   30948:	2200      	movs	r2, #0
   3094a:	4630      	mov	r0, r6
   3094c:	f7f9 fe6a 	bl	2a624 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   30950:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   30952:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   30954:	f023 0301 	bic.w	r3, r3, #1
   30958:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   3095a:	4604      	mov	r4, r0
   3095c:	e7ec      	b.n	30938 <net_buf_get+0xe>

0003095e <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   3095e:	6883      	ldr	r3, [r0, #8]
   30960:	440b      	add	r3, r1
   30962:	6003      	str	r3, [r0, #0]
}
   30964:	4770      	bx	lr

00030966 <net_buf_slist_put>:
{
   30966:	b510      	push	{r4, lr}
	for (tail = buf; tail->frags; tail = tail->frags) {
   30968:	460b      	mov	r3, r1
   3096a:	681c      	ldr	r4, [r3, #0]
   3096c:	b984      	cbnz	r4, 30990 <net_buf_slist_put+0x2a>
	__asm__ volatile(
   3096e:	f04f 0220 	mov.w	r2, #32
   30972:	f3ef 8411 	mrs	r4, BASEPRI
   30976:	f382 8812 	msr	BASEPRI_MAX, r2
   3097a:	f3bf 8f6f 	isb	sy
	return list->tail;
   3097e:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   30980:	b962      	cbnz	r2, 3099c <net_buf_slist_put+0x36>
	list->head = node;
   30982:	6001      	str	r1, [r0, #0]
	list->tail = node;
   30984:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   30986:	f384 8811 	msr	BASEPRI, r4
   3098a:	f3bf 8f6f 	isb	sy
}
   3098e:	bd10      	pop	{r4, pc}
		tail->flags |= NET_BUF_FRAGS;
   30990:	795a      	ldrb	r2, [r3, #5]
   30992:	f042 0201 	orr.w	r2, r2, #1
   30996:	715a      	strb	r2, [r3, #5]
   30998:	4623      	mov	r3, r4
   3099a:	e7e6      	b.n	3096a <net_buf_slist_put+0x4>
	parent->next = child;
   3099c:	6011      	str	r1, [r2, #0]
}
   3099e:	e7f1      	b.n	30984 <net_buf_slist_put+0x1e>

000309a0 <net_buf_slist_get>:
{
   309a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   309a2:	4603      	mov	r3, r0
	__asm__ volatile(
   309a4:	f04f 0220 	mov.w	r2, #32
   309a8:	f3ef 8611 	mrs	r6, BASEPRI
   309ac:	f382 8812 	msr	BASEPRI_MAX, r2
   309b0:	f3bf 8f6f 	isb	sy
	return list->head;
   309b4:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   309b6:	b158      	cbz	r0, 309d0 <net_buf_slist_get+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   309b8:	6859      	ldr	r1, [r3, #4]
	return node->next;
   309ba:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   309bc:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   309be:	4288      	cmp	r0, r1
	list->tail = node;
   309c0:	bf08      	it	eq
   309c2:	605a      	streq	r2, [r3, #4]
   309c4:	4602      	mov	r2, r0
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   309c6:	7951      	ldrb	r1, [r2, #5]
   309c8:	f011 0401 	ands.w	r4, r1, #1
   309cc:	d105      	bne.n	309da <net_buf_slist_get+0x3a>
		frag->frags = NULL;
   309ce:	6014      	str	r4, [r2, #0]
	__asm__ volatile(
   309d0:	f386 8811 	msr	BASEPRI, r6
   309d4:	f3bf 8f6f 	isb	sy
}
   309d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return list->head;
   309da:	681c      	ldr	r4, [r3, #0]
Z_GENLIST_GET(slist, snode)
   309dc:	b12c      	cbz	r4, 309ea <net_buf_slist_get+0x4a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   309de:	685f      	ldr	r7, [r3, #4]
	return node->next;
   309e0:	6825      	ldr	r5, [r4, #0]
	list->head = node;
   309e2:	601d      	str	r5, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   309e4:	42bc      	cmp	r4, r7
	list->tail = node;
   309e6:	bf08      	it	eq
   309e8:	605d      	streq	r5, [r3, #4]
			frag->flags &= ~NET_BUF_FRAGS;
   309ea:	f021 0101 	bic.w	r1, r1, #1
			frag->frags = (void *)sys_slist_get(list);
   309ee:	6014      	str	r4, [r2, #0]
			frag->flags &= ~NET_BUF_FRAGS;
   309f0:	7151      	strb	r1, [r2, #5]
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   309f2:	4622      	mov	r2, r4
   309f4:	e7e7      	b.n	309c6 <net_buf_slist_get+0x26>

000309f6 <net_buf_put>:
{
   309f6:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   309f8:	460a      	mov	r2, r1
   309fa:	6814      	ldr	r4, [r2, #0]
   309fc:	b914      	cbnz	r4, 30a04 <net_buf_put+0xe>
}
   309fe:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   30a00:	f000 be9d 	b.w	3173e <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   30a04:	7953      	ldrb	r3, [r2, #5]
   30a06:	f043 0301 	orr.w	r3, r3, #1
   30a0a:	7153      	strb	r3, [r2, #5]
   30a0c:	4622      	mov	r2, r4
   30a0e:	e7f4      	b.n	309fa <net_buf_put+0x4>

00030a10 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   30a10:	7902      	ldrb	r2, [r0, #4]
   30a12:	3201      	adds	r2, #1
   30a14:	7102      	strb	r2, [r0, #4]
	return buf;
}
   30a16:	4770      	bx	lr

00030a18 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   30a18:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   30a1a:	4618      	mov	r0, r3
   30a1c:	681b      	ldr	r3, [r3, #0]
   30a1e:	2b00      	cmp	r3, #0
   30a20:	d1fb      	bne.n	30a1a <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   30a22:	4770      	bx	lr

00030a24 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   30a24:	6802      	ldr	r2, [r0, #0]
{
   30a26:	b510      	push	{r4, lr}
	if (parent->frags) {
   30a28:	b12a      	cbz	r2, 30a36 <net_buf_frag_insert+0x12>
   30a2a:	460b      	mov	r3, r1
	while (buf->frags) {
   30a2c:	461c      	mov	r4, r3
   30a2e:	681b      	ldr	r3, [r3, #0]
   30a30:	2b00      	cmp	r3, #0
   30a32:	d1fb      	bne.n	30a2c <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   30a34:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   30a36:	6001      	str	r1, [r0, #0]
}
   30a38:	bd10      	pop	{r4, pc}

00030a3a <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   30a3a:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   30a3c:	4604      	mov	r4, r0
   30a3e:	b920      	cbnz	r0, 30a4a <net_buf_frag_add+0x10>
	buf->ref++;
   30a40:	790b      	ldrb	r3, [r1, #4]
   30a42:	3301      	adds	r3, #1
   30a44:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   30a46:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   30a48:	bd10      	pop	{r4, pc}
   30a4a:	4603      	mov	r3, r0
	while (buf->frags) {
   30a4c:	4618      	mov	r0, r3
   30a4e:	681b      	ldr	r3, [r3, #0]
   30a50:	2b00      	cmp	r3, #0
   30a52:	d1fb      	bne.n	30a4c <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   30a54:	f7ff ffe6 	bl	30a24 <net_buf_frag_insert>
   30a58:	4620      	mov	r0, r4
   30a5a:	e7f5      	b.n	30a48 <net_buf_frag_add+0xe>

00030a5c <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   30a5c:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);

	if (parent) {
   30a5e:	b108      	cbz	r0, 30a64 <net_buf_frag_del+0x8>
		__ASSERT_NO_MSG(parent->frags);
		__ASSERT_NO_MSG(parent->frags == frag);
		parent->frags = frag->frags;
   30a60:	680b      	ldr	r3, [r1, #0]
   30a62:	6003      	str	r3, [r0, #0]
	}

	next_frag = frag->frags;
   30a64:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   30a66:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   30a68:	4608      	mov	r0, r1
	frag->frags = NULL;
   30a6a:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   30a6c:	f7f7 f91a 	bl	27ca4 <net_buf_unref>
#endif

	return next_frag;
}
   30a70:	4620      	mov	r0, r4
   30a72:	bd10      	pop	{r4, pc}

00030a74 <net_buf_simple_add>:
	return buf->data + buf->len;
   30a74:	8883      	ldrh	r3, [r0, #4]
   30a76:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   30a78:	4419      	add	r1, r3
   30a7a:	8081      	strh	r1, [r0, #4]
	return tail;
}
   30a7c:	18d0      	adds	r0, r2, r3
   30a7e:	4770      	bx	lr

00030a80 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   30a80:	b430      	push	{r4, r5}
   30a82:	8884      	ldrh	r4, [r0, #4]
   30a84:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   30a86:	18a3      	adds	r3, r4, r2
   30a88:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   30a8a:	1928      	adds	r0, r5, r4
}
   30a8c:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   30a8e:	f7fd bacc 	b.w	2e02a <memcpy>

00030a92 <net_buf_simple_add_u8>:
   30a92:	8883      	ldrh	r3, [r0, #4]
   30a94:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   30a96:	b510      	push	{r4, lr}
	buf->len += len;
   30a98:	1c5c      	adds	r4, r3, #1
   30a9a:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   30a9c:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   30a9e:	18d0      	adds	r0, r2, r3
   30aa0:	bd10      	pop	{r4, pc}

00030aa2 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   30aa2:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   30aa4:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   30aa6:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   30aa8:	1a40      	subs	r0, r0, r1
	buf->len += len;
   30aaa:	4411      	add	r1, r2
	buf->data -= len;
   30aac:	6018      	str	r0, [r3, #0]
	buf->len += len;
   30aae:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   30ab0:	4770      	bx	lr

00030ab2 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   30ab2:	8882      	ldrh	r2, [r0, #4]
   30ab4:	1a52      	subs	r2, r2, r1
{
   30ab6:	4603      	mov	r3, r0
	buf->len -= len;
   30ab8:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   30aba:	6800      	ldr	r0, [r0, #0]
   30abc:	4408      	add	r0, r1
   30abe:	6018      	str	r0, [r3, #0]
}
   30ac0:	4770      	bx	lr

00030ac2 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   30ac2:	4603      	mov	r3, r0
	void *data = buf->data;
   30ac4:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   30ac6:	889a      	ldrh	r2, [r3, #4]
   30ac8:	1a52      	subs	r2, r2, r1
	buf->data += len;
   30aca:	4401      	add	r1, r0
	buf->len -= len;
   30acc:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   30ace:	6019      	str	r1, [r3, #0]

	return data;
}
   30ad0:	4770      	bx	lr

00030ad2 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   30ad2:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   30ad4:	6803      	ldr	r3, [r0, #0]
   30ad6:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   30ad8:	2102      	movs	r1, #2
   30ada:	f7ff ffea 	bl	30ab2 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   30ade:	4620      	mov	r0, r4
   30ae0:	bd10      	pop	{r4, pc}

00030ae2 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   30ae2:	6802      	ldr	r2, [r0, #0]
   30ae4:	6880      	ldr	r0, [r0, #8]
}
   30ae6:	1a10      	subs	r0, r2, r0
   30ae8:	4770      	bx	lr

00030aea <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   30aea:	8883      	ldrh	r3, [r0, #4]
   30aec:	88c2      	ldrh	r2, [r0, #6]
   30aee:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   30af0:	6803      	ldr	r3, [r0, #0]
   30af2:	6880      	ldr	r0, [r0, #8]
   30af4:	1a18      	subs	r0, r3, r0
}
   30af6:	1a10      	subs	r0, r2, r0
   30af8:	4770      	bx	lr

00030afa <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   30afa:	6903      	ldr	r3, [r0, #16]
   30afc:	b2c9      	uxtb	r1, r1
   30afe:	220c      	movs	r2, #12
   30b00:	fb01 3302 	mla	r3, r1, r2, r3
   30b04:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   30b06:	f000 0007 	and.w	r0, r0, #7
   30b0a:	4770      	bx	lr

00030b0c <set_on_state>:
	__asm__ volatile(
   30b0c:	f04f 0320 	mov.w	r3, #32
   30b10:	f3ef 8211 	mrs	r2, BASEPRI
   30b14:	f383 8812 	msr	BASEPRI_MAX, r3
   30b18:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   30b1c:	6803      	ldr	r3, [r0, #0]
   30b1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   30b22:	f043 0302 	orr.w	r3, r3, #2
   30b26:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   30b28:	f382 8811 	msr	BASEPRI, r2
   30b2c:	f3bf 8f6f 	isb	sy
}
   30b30:	4770      	bx	lr

00030b32 <stop>:
{
   30b32:	4603      	mov	r3, r0
   30b34:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   30b36:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   30b38:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   30b3a:	f04f 0420 	mov.w	r4, #32
   30b3e:	f3ef 8611 	mrs	r6, BASEPRI
   30b42:	f384 8812 	msr	BASEPRI_MAX, r4
   30b46:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   30b4a:	250c      	movs	r5, #12
   30b4c:	fb05 0401 	mla	r4, r5, r1, r0
   30b50:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   30b52:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   30b56:	d001      	beq.n	30b5c <stop+0x2a>
   30b58:	42a2      	cmp	r2, r4
   30b5a:	d111      	bne.n	30b80 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   30b5c:	fb05 0001 	mla	r0, r5, r1, r0
   30b60:	2201      	movs	r2, #1
   30b62:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   30b64:	2000      	movs	r0, #0
	__asm__ volatile(
   30b66:	f386 8811 	msr	BASEPRI, r6
   30b6a:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   30b6e:	b930      	cbnz	r0, 30b7e <stop+0x4c>
	get_sub_config(dev, type)->stop();
   30b70:	685b      	ldr	r3, [r3, #4]
   30b72:	220c      	movs	r2, #12
   30b74:	fb02 3101 	mla	r1, r2, r1, r3
   30b78:	684b      	ldr	r3, [r1, #4]
   30b7a:	4798      	blx	r3
	return 0;
   30b7c:	2000      	movs	r0, #0
}
   30b7e:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   30b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30b84:	e7ef      	b.n	30b66 <stop+0x34>

00030b86 <api_stop>:
	return stop(dev, subsys, CTX_API);
   30b86:	2280      	movs	r2, #128	; 0x80
   30b88:	f7ff bfd3 	b.w	30b32 <stop>

00030b8c <async_start>:
{
   30b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30b8e:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   30b90:	6904      	ldr	r4, [r0, #16]
{
   30b92:	4605      	mov	r5, r0
   30b94:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   30b96:	f04f 0020 	mov.w	r0, #32
   30b9a:	f3ef 8c11 	mrs	ip, BASEPRI
   30b9e:	f380 8812 	msr	BASEPRI_MAX, r0
   30ba2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   30ba6:	260c      	movs	r6, #12
   30ba8:	fb06 4601 	mla	r6, r6, r1, r4
   30bac:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   30bae:	f000 0e07 	and.w	lr, r0, #7
   30bb2:	f1be 0f01 	cmp.w	lr, #1
   30bb6:	d110      	bne.n	30bda <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   30bb8:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   30bba:	2600      	movs	r6, #0
	__asm__ volatile(
   30bbc:	f38c 8811 	msr	BASEPRI, ip
   30bc0:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   30bc4:	b93e      	cbnz	r6, 30bd6 <async_start+0x4a>
	subdata->cb = cb;
   30bc6:	200c      	movs	r0, #12
   30bc8:	4341      	muls	r1, r0
   30bca:	440c      	add	r4, r1
	subdata->user_data = user_data;
   30bcc:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   30bd0:	686b      	ldr	r3, [r5, #4]
   30bd2:	585b      	ldr	r3, [r3, r1]
   30bd4:	4798      	blx	r3
}
   30bd6:	4630      	mov	r0, r6
   30bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   30bda:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   30bde:	4287      	cmp	r7, r0
   30be0:	bf14      	ite	ne
   30be2:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
   30be6:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   30bea:	e7e7      	b.n	30bbc <async_start+0x30>

00030bec <api_start>:
{
   30bec:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   30bee:	2480      	movs	r4, #128	; 0x80
   30bf0:	9400      	str	r4, [sp, #0]
   30bf2:	f7ff ffcb 	bl	30b8c <async_start>
}
   30bf6:	b002      	add	sp, #8
   30bf8:	bd10      	pop	{r4, pc}

00030bfa <onoff_started_callback>:
	return &data->mgr[type];
   30bfa:	6900      	ldr	r0, [r0, #16]
{
   30bfc:	b410      	push	{r4}
	return &data->mgr[type];
   30bfe:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   30c00:	241c      	movs	r4, #28
   30c02:	fb03 0004 	mla	r0, r3, r4, r0
   30c06:	2100      	movs	r1, #0
}
   30c08:	bc10      	pop	{r4}
	notify(mgr, 0);
   30c0a:	4710      	bx	r2

00030c0c <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   30c0c:	2000      	movs	r0, #0
   30c0e:	f000 ba59 	b.w	310c4 <nrfx_clock_start>

00030c12 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   30c12:	2000      	movs	r0, #0
   30c14:	f7f8 bcd0 	b.w	295b8 <nrfx_clock_stop>

00030c18 <blocking_start_callback>:
{
   30c18:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   30c1a:	f7f9 bd37 	b.w	2a68c <z_impl_k_sem_give>

00030c1e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   30c1e:	6843      	ldr	r3, [r0, #4]
   30c20:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   30c22:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   30c26:	600b      	str	r3, [r1, #0]
}
   30c28:	2000      	movs	r0, #0
   30c2a:	4770      	bx	lr

00030c2c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   30c2c:	6843      	ldr	r3, [r0, #4]
   30c2e:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   30c30:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   30c34:	4042      	eors	r2, r0
   30c36:	400a      	ands	r2, r1
   30c38:	4042      	eors	r2, r0
    p_reg->OUT = value;
   30c3a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   30c3e:	2000      	movs	r0, #0
   30c40:	4770      	bx	lr

00030c42 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   30c42:	6843      	ldr	r3, [r0, #4]
   30c44:	685b      	ldr	r3, [r3, #4]
}
   30c46:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   30c48:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   30c4c:	4770      	bx	lr

00030c4e <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   30c4e:	6843      	ldr	r3, [r0, #4]
   30c50:	685b      	ldr	r3, [r3, #4]
}
   30c52:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   30c54:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   30c58:	4770      	bx	lr

00030c5a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   30c5a:	6843      	ldr	r3, [r0, #4]
   30c5c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   30c5e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   30c62:	404b      	eors	r3, r1
    p_reg->OUT = value;
   30c64:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   30c68:	2000      	movs	r0, #0
   30c6a:	4770      	bx	lr

00030c6c <gpio_nrfx_manage_callback>:
	return port->data;
   30c6c:	6903      	ldr	r3, [r0, #16]
	return list->head;
   30c6e:	6858      	ldr	r0, [r3, #4]
{
   30c70:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   30c72:	b158      	cbz	r0, 30c8c <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   30c74:	2400      	movs	r4, #0
   30c76:	4281      	cmp	r1, r0
   30c78:	d112      	bne.n	30ca0 <gpio_nrfx_manage_callback+0x34>
	return node->next;
   30c7a:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   30c7c:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   30c7e:	b954      	cbnz	r4, 30c96 <gpio_nrfx_manage_callback+0x2a>
   30c80:	428d      	cmp	r5, r1
	list->head = node;
   30c82:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   30c84:	d100      	bne.n	30c88 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   30c86:	6098      	str	r0, [r3, #8]
	parent->next = child;
   30c88:	2000      	movs	r0, #0
   30c8a:	6008      	str	r0, [r1, #0]
	if (set) {
   30c8c:	b96a      	cbnz	r2, 30caa <gpio_nrfx_manage_callback+0x3e>
	return 0;
   30c8e:	2000      	movs	r0, #0
}
   30c90:	bd30      	pop	{r4, r5, pc}
   30c92:	4628      	mov	r0, r5
   30c94:	e7ef      	b.n	30c76 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   30c96:	428d      	cmp	r5, r1
	parent->next = child;
   30c98:	6020      	str	r0, [r4, #0]
	list->tail = node;
   30c9a:	bf08      	it	eq
   30c9c:	609c      	streq	r4, [r3, #8]
}
   30c9e:	e7f3      	b.n	30c88 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   30ca0:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   30ca2:	4604      	mov	r4, r0
   30ca4:	2d00      	cmp	r5, #0
   30ca6:	d1f4      	bne.n	30c92 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   30ca8:	b13a      	cbz	r2, 30cba <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   30caa:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   30cac:	685a      	ldr	r2, [r3, #4]
   30cae:	600a      	str	r2, [r1, #0]
	list->head = node;
   30cb0:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   30cb2:	2800      	cmp	r0, #0
   30cb4:	d1eb      	bne.n	30c8e <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   30cb6:	6099      	str	r1, [r3, #8]
}
   30cb8:	e7ea      	b.n	30c90 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   30cba:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   30cbe:	e7e7      	b.n	30c90 <gpio_nrfx_manage_callback+0x24>

00030cc0 <is_regular_addr_valid>:
{
   30cc0:	b538      	push	{r3, r4, r5, lr}
   30cc2:	4605      	mov	r5, r0
   30cc4:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   30cc6:	f000 fa7f 	bl	311c8 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   30cca:	2d00      	cmp	r5, #0
   30ccc:	db07      	blt.n	30cde <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   30cce:	42a8      	cmp	r0, r5
   30cd0:	d905      	bls.n	30cde <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   30cd2:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   30cd4:	4284      	cmp	r4, r0
   30cd6:	bf8c      	ite	hi
   30cd8:	2000      	movhi	r0, #0
   30cda:	2001      	movls	r0, #1
}
   30cdc:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   30cde:	2000      	movs	r0, #0
   30ce0:	e7fc      	b.n	30cdc <is_regular_addr_valid+0x1c>

00030ce2 <flash_nrf_read>:
{
   30ce2:	b570      	push	{r4, r5, r6, lr}
   30ce4:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   30ce6:	4628      	mov	r0, r5
   30ce8:	4619      	mov	r1, r3
{
   30cea:	4616      	mov	r6, r2
   30cec:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   30cee:	f7ff ffe7 	bl	30cc0 <is_regular_addr_valid>
   30cf2:	b928      	cbnz	r0, 30d00 <flash_nrf_read+0x1e>
   30cf4:	4621      	mov	r1, r4
   30cf6:	4628      	mov	r0, r5
}
   30cf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   30cfc:	f7f7 bb38 	b.w	28370 <flash_nrf_read.part.0>
	if (!len) {
   30d00:	b124      	cbz	r4, 30d0c <flash_nrf_read+0x2a>
	memcpy(data, (void *)addr, len);
   30d02:	4622      	mov	r2, r4
   30d04:	4629      	mov	r1, r5
   30d06:	4630      	mov	r0, r6
   30d08:	f7fd f98f 	bl	2e02a <memcpy>
}
   30d0c:	2000      	movs	r0, #0
   30d0e:	bd70      	pop	{r4, r5, r6, pc}

00030d10 <nrf_flash_sync_is_required>:
	return ticker_is_initialized(0);
   30d10:	2000      	movs	r0, #0
   30d12:	f7ea bbcd 	b.w	1b4b0 <ticker_is_initialized>

00030d16 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   30d16:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   30d1a:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   30d1c:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   30d1e:	f04f 0800 	mov.w	r8, #0
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
   30d22:	691b      	ldr	r3, [r3, #16]
	info->start_offset = 0;
   30d24:	f8c4 8000 	str.w	r8, [r4]
{
   30d28:	460d      	mov	r5, r1
   30d2a:	4616      	mov	r6, r2
	info->index = 0U;
   30d2c:	f8c4 8008 	str.w	r8, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
   30d30:	aa01      	add	r2, sp, #4
   30d32:	4669      	mov	r1, sp
   30d34:	4798      	blx	r3

	while (layout_size--) {
   30d36:	e9dd 7c00 	ldrd	r7, ip, [sp]
   30d3a:	4640      	mov	r0, r8
		info->size = layout->pages_size;
   30d3c:	f107 0e04 	add.w	lr, r7, #4
	while (layout_size--) {
   30d40:	4560      	cmp	r0, ip
   30d42:	d104      	bne.n	30d4e <flash_get_page_info+0x38>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   30d44:	f06f 0015 	mvn.w	r0, #21
}
   30d48:	b003      	add	sp, #12
   30d4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
   30d4e:	f85e 9030 	ldr.w	r9, [lr, r0, lsl #3]
			index_jmp = index - info->index;
   30d52:	68a1      	ldr	r1, [r4, #8]
			index_jmp = (offs - info->start_offset) / info->size;
   30d54:	6822      	ldr	r2, [r4, #0]
		info->size = layout->pages_size;
   30d56:	f8c4 9004 	str.w	r9, [r4, #4]
		if (offs == 0) {
   30d5a:	b985      	cbnz	r5, 30d7e <flash_get_page_info+0x68>
			index_jmp = index - info->index;
   30d5c:	1a73      	subs	r3, r6, r1
		index_jmp = MIN(index_jmp, layout->pages_count);
   30d5e:	f857 8030 	ldr.w	r8, [r7, r0, lsl #3]
   30d62:	4543      	cmp	r3, r8
   30d64:	bf28      	it	cs
   30d66:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
   30d68:	fb03 2209 	mla	r2, r3, r9, r2
		info->index += index_jmp;
   30d6c:	4419      	add	r1, r3
		if (index_jmp < layout->pages_count) {
   30d6e:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
   30d70:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
   30d72:	60a1      	str	r1, [r4, #8]
		if (index_jmp < layout->pages_count) {
   30d74:	f100 0001 	add.w	r0, r0, #1
   30d78:	d9e2      	bls.n	30d40 <flash_get_page_info+0x2a>
			return 0;
   30d7a:	2000      	movs	r0, #0
   30d7c:	e7e4      	b.n	30d48 <flash_get_page_info+0x32>
			index_jmp = (offs - info->start_offset) / info->size;
   30d7e:	1aab      	subs	r3, r5, r2
   30d80:	fbb3 f3f9 	udiv	r3, r3, r9
   30d84:	e7eb      	b.n	30d5e <flash_get_page_info+0x48>

00030d86 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   30d86:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   30d88:	2200      	movs	r2, #0
   30d8a:	f7ff bfc4 	b.w	30d16 <flash_get_page_info>

00030d8e <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   30d8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   30d92:	6883      	ldr	r3, [r0, #8]
{
   30d94:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   30d96:	691b      	ldr	r3, [r3, #16]
{
   30d98:	4688      	mov	r8, r1
   30d9a:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   30d9c:	a901      	add	r1, sp, #4
   30d9e:	aa02      	add	r2, sp, #8
   30da0:	4798      	blx	r3
	off_t off = 0;
   30da2:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   30da4:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   30da6:	4625      	mov	r5, r4
   30da8:	9b02      	ldr	r3, [sp, #8]
   30daa:	42ab      	cmp	r3, r5
   30dac:	d802      	bhi.n	30db4 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   30dae:	b006      	add	sp, #24
   30db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   30db4:	9f01      	ldr	r7, [sp, #4]
   30db6:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   30dba:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   30dbc:	687b      	ldr	r3, [r7, #4]
   30dbe:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   30dc0:	683a      	ldr	r2, [r7, #0]
   30dc2:	42b2      	cmp	r2, r6
   30dc4:	eb0a 0306 	add.w	r3, sl, r6
   30dc8:	d802      	bhi.n	30dd0 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   30dca:	3501      	adds	r5, #1
   30dcc:	469a      	mov	sl, r3
   30dce:	e7eb      	b.n	30da8 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   30dd0:	4649      	mov	r1, r9
   30dd2:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   30dd4:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   30dd6:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   30dd8:	47c0      	blx	r8
   30dda:	2800      	cmp	r0, #0
   30ddc:	d0e7      	beq.n	30dae <flash_page_foreach+0x20>
			off += page_info.size;
   30dde:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   30de0:	3601      	adds	r6, #1
			off += page_info.size;
   30de2:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   30de4:	e7ec      	b.n	30dc0 <flash_page_foreach+0x32>

00030de6 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
   30de6:	6902      	ldr	r2, [r0, #16]
{
   30de8:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   30dea:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   30dee:	e883 0003 	stmia.w	r3, {r0, r1}
}
   30df2:	2000      	movs	r0, #0
   30df4:	4770      	bx	lr

00030df6 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   30df6:	6843      	ldr	r3, [r0, #4]
   30df8:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   30dfa:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   30dfe:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   30e02:	4770      	bx	lr

00030e04 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   30e04:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   30e06:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   30e08:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   30e0a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   30e0e:	b148      	cbz	r0, 30e24 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   30e10:	7c52      	ldrb	r2, [r2, #17]
   30e12:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   30e14:	2000      	movs	r0, #0
   30e16:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   30e1a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   30e1e:	2201      	movs	r2, #1
   30e20:	601a      	str	r2, [r3, #0]
	return 0;
   30e22:	4770      	bx	lr
		return -1;
   30e24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   30e28:	4770      	bx	lr

00030e2a <is_tx_ready.isra.0>:
	return config->uarte_regs;
   30e2a:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   30e2c:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   30e2e:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   30e32:	b940      	cbnz	r0, 30e46 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   30e34:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   30e36:	079b      	lsls	r3, r3, #30
   30e38:	d406      	bmi.n	30e48 <is_tx_ready.isra.0+0x1e>
   30e3a:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   30e3e:	3800      	subs	r0, #0
   30e40:	bf18      	it	ne
   30e42:	2001      	movne	r0, #1
   30e44:	4770      	bx	lr
   30e46:	2001      	movs	r0, #1
}
   30e48:	4770      	bx	lr

00030e4a <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   30e4a:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   30e4c:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   30e4e:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   30e52:	05c9      	lsls	r1, r1, #23
   30e54:	d518      	bpl.n	30e88 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   30e56:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   30e5a:	b1a9      	cbz	r1, 30e88 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   30e5c:	f04f 0020 	mov.w	r0, #32
   30e60:	f3ef 8111 	mrs	r1, BASEPRI
   30e64:	f380 8812 	msr	BASEPRI_MAX, r0
   30e68:	f3bf 8f6f 	isb	sy
   30e6c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   30e70:	b130      	cbz	r0, 30e80 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   30e72:	2000      	movs	r0, #0
   30e74:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   30e78:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   30e7c:	2001      	movs	r0, #1
   30e7e:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   30e80:	f381 8811 	msr	BASEPRI, r1
   30e84:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   30e88:	6852      	ldr	r2, [r2, #4]
   30e8a:	06d2      	lsls	r2, r2, #27
   30e8c:	d515      	bpl.n	30eba <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   30e8e:	f04f 0120 	mov.w	r1, #32
   30e92:	f3ef 8211 	mrs	r2, BASEPRI
   30e96:	f381 8812 	msr	BASEPRI_MAX, r1
   30e9a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   30e9e:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   30ea2:	b111      	cbz	r1, 30eaa <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   30ea4:	2100      	movs	r1, #0
   30ea6:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   30eaa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   30eae:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   30eb2:	f382 8811 	msr	BASEPRI, r2
   30eb6:	f3bf 8f6f 	isb	sy
}
   30eba:	4770      	bx	lr

00030ebc <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   30ebc:	b510      	push	{r4, lr}
   30ebe:	2200      	movs	r2, #0
   30ec0:	4604      	mov	r4, r0
   30ec2:	2101      	movs	r1, #1
   30ec4:	2028      	movs	r0, #40	; 0x28
   30ec6:	f7df fce7 	bl	10898 <z_arm_irq_priority_set>
   30eca:	2028      	movs	r0, #40	; 0x28
   30ecc:	f7df fcb2 	bl	10834 <arch_irq_enable>
   30ed0:	4620      	mov	r0, r4
   30ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   30ed6:	f7f7 bd4b 	b.w	28970 <uarte_instance_init.constprop.0>

00030eda <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   30eda:	b510      	push	{r4, lr}
   30edc:	2200      	movs	r2, #0
   30ede:	4604      	mov	r4, r0
   30ee0:	2101      	movs	r1, #1
   30ee2:	2002      	movs	r0, #2
   30ee4:	f7df fcd8 	bl	10898 <z_arm_irq_priority_set>
   30ee8:	2002      	movs	r0, #2
   30eea:	f7df fca3 	bl	10834 <arch_irq_enable>
   30eee:	4620      	mov	r0, r4
   30ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   30ef4:	f7f7 bd3c 	b.w	28970 <uarte_instance_init.constprop.0>

00030ef8 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   30ef8:	4770      	bx	lr

00030efa <sys_clock_cycle_get_32>:
{
   30efa:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   30efc:	f7f8 f806 	bl	28f0c <z_nrf_rtc_timer_read>
}
   30f00:	bd08      	pop	{r3, pc}

00030f02 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   30f02:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   30f04:	6843      	ldr	r3, [r0, #4]
   30f06:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   30f08:	7a03      	ldrb	r3, [r0, #8]
   30f0a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   30f0e:	3b01      	subs	r3, #1
   30f10:	00db      	lsls	r3, r3, #3
   30f12:	6845      	ldr	r5, [r0, #4]
   30f14:	6814      	ldr	r4, [r2, #0]
   30f16:	441d      	add	r5, r3
   30f18:	42ac      	cmp	r4, r5
   30f1a:	d902      	bls.n	30f22 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
   30f1c:	f06f 0001 	mvn.w	r0, #1
}
   30f20:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   30f22:	7965      	ldrb	r5, [r4, #5]
   30f24:	428d      	cmp	r5, r1
   30f26:	d002      	beq.n	30f2e <pinctrl_lookup_state+0x2c>
		(*state)++;
   30f28:	3408      	adds	r4, #8
   30f2a:	6014      	str	r4, [r2, #0]
   30f2c:	e7f1      	b.n	30f12 <pinctrl_lookup_state+0x10>
			return 0;
   30f2e:	2000      	movs	r0, #0
   30f30:	e7f6      	b.n	30f20 <pinctrl_lookup_state+0x1e>

00030f32 <nrf_gpio_pin_write>:
    if (value == 0)
   30f32:	b909      	cbnz	r1, 30f38 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
   30f34:	f7f8 b9a2 	b.w	2927c <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   30f38:	f7f8 b9d2 	b.w	292e0 <nrf_gpio_pin_set>

00030f3c <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   30f3c:	b570      	push	{r4, r5, r6, lr}
   30f3e:	4615      	mov	r5, r2
   30f40:	4604      	mov	r4, r0
   30f42:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   30f46:	42b4      	cmp	r4, r6
   30f48:	d101      	bne.n	30f4e <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
   30f4a:	2000      	movs	r0, #0
}
   30f4c:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
   30f4e:	6823      	ldr	r3, [r4, #0]
   30f50:	0c1a      	lsrs	r2, r3, #16
   30f52:	2a22      	cmp	r2, #34	; 0x22
   30f54:	f200 809d 	bhi.w	31092 <pinctrl_configure_pins+0x156>
   30f58:	e8df f002 	tbb	[pc, r2]
   30f5c:	43241d12 	.word	0x43241d12
   30f60:	9b433929 	.word	0x9b433929
   30f64:	489b9b9b 	.word	0x489b9b9b
   30f68:	9b9b9b4d 	.word	0x9b9b9b4d
   30f6c:	9b9b9b9b 	.word	0x9b9b9b9b
   30f70:	5e529b9b 	.word	0x5e529b9b
   30f74:	9b9b6863 	.word	0x9b9b6863
   30f78:	78736d9b 	.word	0x78736d9b
   30f7c:	8b81      	.short	0x8b81
   30f7e:	95          	.byte	0x95
   30f7f:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
   30f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   30f84:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   30f88:	6820      	ldr	r0, [r4, #0]
   30f8a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   30f8e:	f7f8 f9a7 	bl	292e0 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   30f92:	2201      	movs	r2, #1
   30f94:	e015      	b.n	30fc2 <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
   30f96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   30f9a:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   30f9e:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   30fa0:	2100      	movs	r1, #0
   30fa2:	e00f      	b.n	30fc4 <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
   30fa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   30fa8:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
   30fac:	e7ec      	b.n	30f88 <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
   30fae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   30fb2:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   30fb6:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
   30fb8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   30fbc:	f7f8 f95e 	bl	2927c <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   30fc0:	2200      	movs	r2, #0
   30fc2:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   30fc4:	6820      	ldr	r0, [r4, #0]
   30fc6:	f7f8 f969 	bl	2929c <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   30fca:	3404      	adds	r4, #4
   30fcc:	e7bb      	b.n	30f46 <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
   30fce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   30fd2:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   30fd6:	6820      	ldr	r0, [r4, #0]
   30fd8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   30fdc:	f7f8 f94e 	bl	2927c <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   30fe0:	e7d7      	b.n	30f92 <pinctrl_configure_pins+0x56>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
   30fe2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   30fe6:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   30fea:	e7d8      	b.n	30f9e <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
   30fec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   30ff0:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   30ff4:	e7d3      	b.n	30f9e <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
   30ff6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   30ffa:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
   30ffe:	e7ce      	b.n	30f9e <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
   31000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   31004:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   31008:	6820      	ldr	r0, [r4, #0]
   3100a:	f3c0 3140 	ubfx	r1, r0, #13, #1
   3100e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   31012:	f7ff ff8e 	bl	30f32 <nrf_gpio_pin_write>
   31016:	e7bc      	b.n	30f92 <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
   31018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3101c:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   31020:	e7f2      	b.n	31008 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
   31022:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   31026:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   3102a:	e7ed      	b.n	31008 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
   3102c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   31030:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
   31034:	e7e8      	b.n	31008 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
   31036:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3103a:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   3103e:	2201      	movs	r2, #1
   31040:	e7ae      	b.n	30fa0 <pinctrl_configure_pins+0x64>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
   31042:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   31046:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   3104a:	e7f8      	b.n	3103e <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
   3104c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   31050:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   31054:	6820      	ldr	r0, [r4, #0]
   31056:	2201      	movs	r2, #1
   31058:	2100      	movs	r1, #0
   3105a:	f7f8 f91f 	bl	2929c <nrf_pin_configure>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
   3105e:	6823      	ldr	r3, [r4, #0]
   31060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   31064:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   31068:	6820      	ldr	r0, [r4, #0]
   3106a:	2201      	movs	r2, #1
   3106c:	2100      	movs	r1, #0
   3106e:	f7f8 f915 	bl	2929c <nrf_pin_configure>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
   31072:	6823      	ldr	r3, [r4, #0]
   31074:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   31078:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   3107c:	6820      	ldr	r0, [r4, #0]
   3107e:	2201      	movs	r2, #1
   31080:	2100      	movs	r1, #0
   31082:	f7f8 f90b 	bl	2929c <nrf_pin_configure>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
   31086:	6823      	ldr	r3, [r4, #0]
   31088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3108c:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
   31090:	e7d5      	b.n	3103e <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
   31092:	f06f 0085 	mvn.w	r0, #133	; 0x85
   31096:	e759      	b.n	30f4c <pinctrl_configure_pins+0x10>

00031098 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   31098:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   3109c:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   310a0:	f1a0 0308 	sub.w	r3, r0, #8
   310a4:	4258      	negs	r0, r3
   310a6:	4158      	adcs	r0, r3
   310a8:	4770      	bx	lr

000310aa <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   310aa:	4700      	bx	r0

000310ac <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   310ac:	f000 bdcc 	b.w	31c48 <z_impl_k_busy_wait>

000310b0 <nrfx_clock_enable>:
{
   310b0:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   310b2:	2000      	movs	r0, #0
   310b4:	f7df fbe2 	bl	1087c <arch_irq_is_enabled>
   310b8:	b918      	cbnz	r0, 310c2 <nrfx_clock_enable+0x12>
}
   310ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   310be:	f7df bbb9 	b.w	10834 <arch_irq_enable>
   310c2:	bd08      	pop	{r3, pc}

000310c4 <nrfx_clock_start>:
    switch (domain)
   310c4:	b110      	cbz	r0, 310cc <nrfx_clock_start+0x8>
   310c6:	2801      	cmp	r0, #1
   310c8:	d01d      	beq.n	31106 <nrfx_clock_start+0x42>
   310ca:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   310cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   310d0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   310d4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   310d8:	03c9      	lsls	r1, r1, #15
   310da:	d512      	bpl.n	31102 <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   310dc:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   310e0:	2a01      	cmp	r2, #1
   310e2:	d10e      	bne.n	31102 <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   310e4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   310e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   310ec:	2200      	movs	r2, #0
   310ee:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   310f2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   310f6:	2202      	movs	r2, #2
   310f8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   310fc:	2201      	movs	r2, #1
   310fe:	609a      	str	r2, [r3, #8]
}
   31100:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   31102:	2200      	movs	r2, #0
   31104:	e7ee      	b.n	310e4 <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   31106:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3110a:	2200      	movs	r2, #0
   3110c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   31110:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   31114:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   31118:	6018      	str	r0, [r3, #0]
}
   3111a:	4770      	bx	lr

0003111c <nrf_gpio_reconfigure>:
{
   3111c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3111e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   31120:	a801      	add	r0, sp, #4
{
   31122:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
   31126:	4617      	mov	r7, r2
   31128:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3112a:	f7f8 fab5 	bl	29698 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   3112e:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   31130:	2f00      	cmp	r7, #0
   31132:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   31136:	bf14      	ite	ne
   31138:	2302      	movne	r3, #2
   3113a:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   3113c:	2900      	cmp	r1, #0
   3113e:	bf18      	it	ne
   31140:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   31144:	2d00      	cmp	r5, #0
   31146:	bf14      	ite	ne
   31148:	f04f 0c0c 	movne.w	ip, #12
   3114c:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   31150:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   31152:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   31156:	bf14      	ite	ne
   31158:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   3115c:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   31160:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   31162:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   31166:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   3116a:	bf14      	ite	ne
   3116c:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   31170:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   31174:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   31178:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   3117c:	b101      	cbz	r1, 31180 <nrf_gpio_reconfigure+0x64>
   3117e:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   31180:	b10f      	cbz	r7, 31186 <nrf_gpio_reconfigure+0x6a>
   31182:	783f      	ldrb	r7, [r7, #0]
   31184:	007f      	lsls	r7, r7, #1
   31186:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   31188:	b10d      	cbz	r5, 3118e <nrf_gpio_reconfigure+0x72>
   3118a:	782d      	ldrb	r5, [r5, #0]
   3118c:	00ad      	lsls	r5, r5, #2
   3118e:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   31190:	b10c      	cbz	r4, 31196 <nrf_gpio_reconfigure+0x7a>
   31192:	7822      	ldrb	r2, [r4, #0]
   31194:	0214      	lsls	r4, r2, #8
   31196:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   31198:	b10e      	cbz	r6, 3119e <nrf_gpio_reconfigure+0x82>
   3119a:	7836      	ldrb	r6, [r6, #0]
   3119c:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   3119e:	432c      	orrs	r4, r5
   311a0:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   311a2:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   311a6:	b003      	add	sp, #12
   311a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000311aa <nrf_gpio_cfg_sense_set>:
{
   311aa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   311ac:	f10d 030f 	add.w	r3, sp, #15
   311b0:	9301      	str	r3, [sp, #4]
   311b2:	2300      	movs	r3, #0
{
   311b4:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   311b8:	9300      	str	r3, [sp, #0]
   311ba:	461a      	mov	r2, r3
   311bc:	4619      	mov	r1, r3
   311be:	f7ff ffad 	bl	3111c <nrf_gpio_reconfigure>
}
   311c2:	b005      	add	sp, #20
   311c4:	f85d fb04 	ldr.w	pc, [sp], #4

000311c8 <nrfx_nvmc_flash_size_get>:
   311c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   311cc:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   311ce:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   311d0:	4350      	muls	r0, r2
   311d2:	4770      	bx	lr

000311d4 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   311d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   311d8:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   311da:	4770      	bx	lr

000311dc <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   311dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   311e0:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   311e2:	4770      	bx	lr

000311e4 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   311e4:	f7f8 bdf8 	b.w	29dd8 <_DoInit>

000311e8 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   311e8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   311ea:	f7ff fffb 	bl	311e4 <SEGGER_RTT_Init>

	return 0;
}
   311ee:	2000      	movs	r0, #0
   311f0:	bd08      	pop	{r3, pc}

000311f2 <append_to_buffer.isra.0>:
    memcpy(where, &v, sizeof(v));
}

static inline CborError append_to_buffer(CborEncoder *encoder, const void *data, size_t len)
{
    return encoder->writer->write(encoder->writer, data, len);
   311f2:	6803      	ldr	r3, [r0, #0]
   311f4:	4718      	bx	r3

000311f6 <encode_number_no_update>:
{
    return append_to_buffer(encoder, &byte, 1);
}

static inline CborError encode_number_no_update(CborEncoder *encoder, uint64_t ui, uint8_t shiftedMajorType)
{
   311f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   311fa:	461d      	mov	r5, r3
   311fc:	b086      	sub	sp, #24
    v = cbor_htonll(v);
   311fe:	ba13      	rev	r3, r2
{
   31200:	4617      	mov	r7, r2
    v = cbor_htonll(v);
   31202:	ba2a      	rev	r2, r5
   31204:	e9cd 2300 	strd	r2, r3, [sp]
    memcpy(where, &v, sizeof(v));
   31208:	4669      	mov	r1, sp
{
   3120a:	4606      	mov	r6, r0
    memcpy(where, &v, sizeof(v));
   3120c:	2208      	movs	r2, #8
   3120e:	a804      	add	r0, sp, #16
{
   31210:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
    memcpy(where, &v, sizeof(v));
   31214:	f7fc ff09 	bl	2e02a <memcpy>
    uint64_t buf[2];
    uint8_t *const bufend = (uint8_t *)buf + sizeof(buf);
    uint8_t *bufstart = bufend - 1;
    put64(buf + 1, ui);     /* we probably have a bunch of zeros in the beginning */

    if (ui < Value8Bit) {
   31218:	2f18      	cmp	r7, #24
   3121a:	f175 0300 	sbcs.w	r3, r5, #0
   3121e:	f10d 0117 	add.w	r1, sp, #23
   31222:	d20c      	bcs.n	3123e <encode_number_no_update+0x48>
        *bufstart += shiftedMajorType;
   31224:	f89d 4017 	ldrb.w	r4, [sp, #23]
   31228:	44a0      	add	r8, r4
   3122a:	f88d 8017 	strb.w	r8, [sp, #23]
            ++more;
        bufstart -= (size_t)1 << more;
        *bufstart = shiftedMajorType + Value8Bit + more;
    }

    return append_to_buffer(encoder, bufstart, bufend - bufstart);
   3122e:	ab06      	add	r3, sp, #24
   31230:	6830      	ldr	r0, [r6, #0]
   31232:	1a5a      	subs	r2, r3, r1
   31234:	f7ff ffdd 	bl	311f2 <append_to_buffer.isra.0>
}
   31238:	b006      	add	sp, #24
   3123a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (ui > 0xffU)
   3123e:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   31242:	f175 0300 	sbcs.w	r3, r5, #0
            ++more;
   31246:	bf2c      	ite	cs
   31248:	2401      	movcs	r4, #1
   3124a:	2400      	movcc	r4, #0
        if (ui > 0xffffU)
   3124c:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   31250:	f175 0300 	sbcs.w	r3, r5, #0
            ++more;
   31254:	bf28      	it	cs
   31256:	3401      	addcs	r4, #1
        if (ui > 0xffffffffU)
   31258:	b10d      	cbz	r5, 3125e <encode_number_no_update+0x68>
            ++more;
   3125a:	3401      	adds	r4, #1
   3125c:	b2e4      	uxtb	r4, r4
        bufstart -= (size_t)1 << more;
   3125e:	2301      	movs	r3, #1
   31260:	40a3      	lsls	r3, r4
   31262:	1ac9      	subs	r1, r1, r3
        *bufstart = shiftedMajorType + Value8Bit + more;
   31264:	f108 0818 	add.w	r8, r8, #24
   31268:	4444      	add	r4, r8
   3126a:	700c      	strb	r4, [r1, #0]
   3126c:	e7df      	b.n	3122e <encode_number_no_update+0x38>

0003126e <encode_number>:

static inline CborError encode_number(CborEncoder *encoder, uint64_t ui, uint8_t shiftedMajorType)
{
   3126e:	b430      	push	{r4, r5}
    ++encoder->added;
   31270:	6884      	ldr	r4, [r0, #8]
{
   31272:	f89d 5008 	ldrb.w	r5, [sp, #8]
    ++encoder->added;
   31276:	3401      	adds	r4, #1
   31278:	6084      	str	r4, [r0, #8]
    return encode_number_no_update(encoder, ui, shiftedMajorType);
   3127a:	9502      	str	r5, [sp, #8]
}
   3127c:	bc30      	pop	{r4, r5}
    return encode_number_no_update(encoder, ui, shiftedMajorType);
   3127e:	f7ff bfba 	b.w	311f6 <encode_number_no_update>

00031282 <create_container>:

#ifdef __GNUC__
__attribute__((noinline))
#endif
static CborError create_container(CborEncoder *encoder, CborEncoder *container, size_t length, uint8_t shiftedMajorType)
{
   31282:	b530      	push	{r4, r5, lr}
   31284:	4605      	mov	r5, r0
   31286:	461c      	mov	r4, r3
    CborError err;
    container->writer = encoder->writer;
    ++encoder->added;
   31288:	68ab      	ldr	r3, [r5, #8]
    container->writer = encoder->writer;
   3128a:	6800      	ldr	r0, [r0, #0]
   3128c:	6008      	str	r0, [r1, #0]
    ++encoder->added;
   3128e:	3301      	adds	r3, #1
   31290:	60ab      	str	r3, [r5, #8]

    cbor_static_assert(((MapType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == CborIteratorFlag_ContainerIsMap);
    cbor_static_assert(((ArrayType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == 0);
    container->flags = shiftedMajorType & CborIteratorFlag_ContainerIsMap;

    if (length == CborIndefiniteLength) {
   31292:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    container->added = 0;
   31296:	f04f 0300 	mov.w	r3, #0
   3129a:	f004 0520 	and.w	r5, r4, #32
{
   3129e:	b085      	sub	sp, #20
    container->added = 0;
   312a0:	608b      	str	r3, [r1, #8]
    container->flags = shiftedMajorType & CborIteratorFlag_ContainerIsMap;
   312a2:	60cd      	str	r5, [r1, #12]
    if (length == CborIndefiniteLength) {
   312a4:	d10d      	bne.n	312c2 <create_container+0x40>
        container->flags |= CborIteratorFlag_UnknownLength;
   312a6:	f045 0504 	orr.w	r5, r5, #4
   312aa:	60cd      	str	r5, [r1, #12]
        err = append_byte_to_buffer(container, shiftedMajorType + IndefiniteLength);
   312ac:	341f      	adds	r4, #31
   312ae:	2201      	movs	r2, #1
   312b0:	f10d 010f 	add.w	r1, sp, #15
   312b4:	f88d 400f 	strb.w	r4, [sp, #15]
    return append_to_buffer(encoder, &byte, 1);
   312b8:	f7ff ff9b 	bl	311f2 <append_to_buffer.isra.0>
    }
    if (err && !isOomError(err))
        return err;

    return CborNoError;
}
   312bc:	2000      	movs	r0, #0
   312be:	b005      	add	sp, #20
   312c0:	bd30      	pop	{r4, r5, pc}
        err = encode_number_no_update(container, length, shiftedMajorType);
   312c2:	9400      	str	r4, [sp, #0]
   312c4:	4608      	mov	r0, r1
   312c6:	f7ff ff96 	bl	311f6 <encode_number_no_update>
   312ca:	e7f7      	b.n	312bc <create_container+0x3a>

000312cc <cbor_encoder_init>:
    encoder->added = 0;
   312cc:	2300      	movs	r3, #0
    encoder->flags = flags;
   312ce:	e9c0 3202 	strd	r3, r2, [r0, #8]
    encoder->writer = writer;
   312d2:	6001      	str	r1, [r0, #0]
}
   312d4:	4770      	bx	lr

000312d6 <cbor_encode_int>:
{
   312d6:	b507      	push	{r0, r1, r2, lr}
    uint64_t ui = value >> 63;              /* extend sign to whole length */
   312d8:	17d9      	asrs	r1, r3, #31
    return encode_number(encoder, ui, majorType);
   312da:	f001 0120 	and.w	r1, r1, #32
   312de:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
   312e2:	9100      	str	r1, [sp, #0]
   312e4:	ea83 73e3 	eor.w	r3, r3, r3, asr #31
   312e8:	f7ff ffc1 	bl	3126e <encode_number>
}
   312ec:	b003      	add	sp, #12
   312ee:	f85d fb04 	ldr.w	pc, [sp], #4

000312f2 <cbor_encode_text_string>:
{
   312f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    CborError err = encode_number(encoder, length, shiftedMajorType);
   312f4:	2360      	movs	r3, #96	; 0x60
{
   312f6:	4604      	mov	r4, r0
    CborError err = encode_number(encoder, length, shiftedMajorType);
   312f8:	9300      	str	r3, [sp, #0]
   312fa:	2300      	movs	r3, #0
{
   312fc:	460d      	mov	r5, r1
   312fe:	4616      	mov	r6, r2
    CborError err = encode_number(encoder, length, shiftedMajorType);
   31300:	f7ff ffb5 	bl	3126e <encode_number>
    return append_to_buffer(encoder, string, length);
   31304:	6820      	ldr	r0, [r4, #0]
   31306:	4632      	mov	r2, r6
   31308:	4629      	mov	r1, r5
}
   3130a:	b002      	add	sp, #8
   3130c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return append_to_buffer(encoder, string, length);
   31310:	f7ff bf6f 	b.w	311f2 <append_to_buffer.isra.0>

00031314 <cbor_encoder_create_map>:
 * value, this function returns error CborErrorDataTooLarge.
 *
 * \sa cbor_encoder_create_array
 */
CborError cbor_encoder_create_map(CborEncoder *encoder, CborEncoder *mapEncoder, size_t length)
{
   31314:	b410      	push	{r4}
    if (length != CborIndefiniteLength && length > SIZE_MAX / 2)
   31316:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   3131a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   3131e:	42a3      	cmp	r3, r4
   31320:	d303      	bcc.n	3132a <cbor_encoder_create_map+0x16>
        return CborErrorDataTooLarge;
    return create_container(encoder, mapEncoder, length, MapType << MajorTypeShift);
}
   31322:	bc10      	pop	{r4}
    return create_container(encoder, mapEncoder, length, MapType << MajorTypeShift);
   31324:	23a0      	movs	r3, #160	; 0xa0
   31326:	f7ff bfac 	b.w	31282 <create_container>
}
   3132a:	f44f 6080 	mov.w	r0, #1024	; 0x400
   3132e:	bc10      	pop	{r4}
   31330:	4770      	bx	lr

00031332 <cbor_encoder_close_container>:
 * cbor_encoder_close_container_checked() instead.
 *
 * \sa cbor_encoder_create_array(), cbor_encoder_create_map()
 */
CborError cbor_encoder_close_container(CborEncoder *encoder, const CborEncoder *containerEncoder)
{
   31332:	4603      	mov	r3, r0
   31334:	b507      	push	{r0, r1, r2, lr}
    encoder->writer = containerEncoder->writer;
   31336:	6808      	ldr	r0, [r1, #0]
   31338:	6018      	str	r0, [r3, #0]

    if (containerEncoder->flags & CborIteratorFlag_UnknownLength)
   3133a:	68cb      	ldr	r3, [r1, #12]
   3133c:	f013 0304 	ands.w	r3, r3, #4
   31340:	d00a      	beq.n	31358 <cbor_encoder_close_container+0x26>
        return append_byte_to_buffer(encoder, BreakByte);
   31342:	23ff      	movs	r3, #255	; 0xff
   31344:	2201      	movs	r2, #1
   31346:	f10d 0107 	add.w	r1, sp, #7
   3134a:	f88d 3007 	strb.w	r3, [sp, #7]
    return append_to_buffer(encoder, &byte, 1);
   3134e:	f7ff ff50 	bl	311f2 <append_to_buffer.isra.0>
    return CborNoError;
}
   31352:	b003      	add	sp, #12
   31354:	f85d fb04 	ldr.w	pc, [sp], #4
    return CborNoError;
   31358:	4618      	mov	r0, r3
   3135a:	e7fa      	b.n	31352 <cbor_encoder_close_container+0x20>

0003135c <preparse_value>:
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
           type != CborMapType;
}

static CborError preparse_value(CborValue *it)
{
   3135c:	b570      	push	{r4, r5, r6, lr}
    const CborParser *parser = it->parser;
    it->type = CborInvalidType;
   3135e:	23ff      	movs	r3, #255	; 0xff
    const CborParser *parser = it->parser;
   31360:	6805      	ldr	r5, [r0, #0]
    it->type = CborInvalidType;
   31362:	7383      	strb	r3, [r0, #14]

    /* are we at the end? */
    if (it->offset == parser->end)
   31364:	6841      	ldr	r1, [r0, #4]
   31366:	686b      	ldr	r3, [r5, #4]
   31368:	4299      	cmp	r1, r3
{
   3136a:	4604      	mov	r4, r0
    if (it->offset == parser->end)
   3136c:	d102      	bne.n	31374 <preparse_value+0x18>
        return CborErrorUnexpectedEOF;
   3136e:	f240 1001 	movw	r0, #257	; 0x101
    else if (descriptor == Value16Bit)
        it->extra = parser->d->get16(parser->d, it->offset + 1);
    else
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
    return CborNoError;
}
   31372:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t descriptor = parser->d->get8(parser->d, it->offset);
   31374:	6828      	ldr	r0, [r5, #0]
   31376:	6803      	ldr	r3, [r0, #0]
   31378:	4798      	blx	r3
    it->extra = (descriptor &= SmallValueMask);
   3137a:	f000 031f 	and.w	r3, r0, #31
    uint8_t type = descriptor & MajorTypeMask;
   3137e:	f000 06e0 	and.w	r6, r0, #224	; 0xe0
    it->flags = 0;
   31382:	2200      	movs	r2, #0
    if (descriptor > Value64Bit) {
   31384:	2b1b      	cmp	r3, #27
    it->type = type;
   31386:	73a6      	strb	r6, [r4, #14]
    it->flags = 0;
   31388:	73e2      	strb	r2, [r4, #15]
    it->extra = (descriptor &= SmallValueMask);
   3138a:	81a3      	strh	r3, [r4, #12]
    if (descriptor > Value64Bit) {
   3138c:	d919      	bls.n	313c2 <preparse_value+0x66>
        if (unlikely(descriptor != IndefiniteLength))
   3138e:	2b1f      	cmp	r3, #31
   31390:	d007      	beq.n	313a2 <preparse_value+0x46>
            return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
   31392:	f240 1005 	movw	r0, #261	; 0x105
   31396:	f240 1303 	movw	r3, #259	; 0x103
   3139a:	2ee0      	cmp	r6, #224	; 0xe0
   3139c:	bf08      	it	eq
   3139e:	4618      	moveq	r0, r3
   313a0:	e7e7      	b.n	31372 <preparse_value+0x16>
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   313a2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   313a6:	2840      	cmp	r0, #64	; 0x40
   313a8:	d001      	beq.n	313ae <preparse_value+0x52>
   313aa:	2880      	cmp	r0, #128	; 0x80
   313ac:	d102      	bne.n	313b4 <preparse_value+0x58>
            it->flags |= CborIteratorFlag_UnknownLength;
   313ae:	2304      	movs	r3, #4
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
   313b0:	73e3      	strb	r3, [r4, #15]
   313b2:	e039      	b.n	31428 <preparse_value+0xcc>
        return type == CborSimpleType ? CborErrorUnexpectedBreak : CborErrorIllegalNumber;
   313b4:	2ee0      	cmp	r6, #224	; 0xe0
   313b6:	f240 1005 	movw	r0, #261	; 0x105
   313ba:	bf08      	it	eq
   313bc:	f44f 7081 	moveq.w	r0, #258	; 0x102
   313c0:	e7d7      	b.n	31372 <preparse_value+0x16>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   313c2:	2b17      	cmp	r3, #23
   313c4:	bf82      	ittt	hi
   313c6:	f1a3 0118 	subhi.w	r1, r3, #24
   313ca:	2201      	movhi	r2, #1
   313cc:	408a      	lslhi	r2, r1
    if (bytesNeeded + 1 > (size_t)(parser->end - it->offset))
   313ce:	6868      	ldr	r0, [r5, #4]
   313d0:	6861      	ldr	r1, [r4, #4]
   313d2:	3201      	adds	r2, #1
   313d4:	1a40      	subs	r0, r0, r1
   313d6:	4282      	cmp	r2, r0
   313d8:	d8c9      	bhi.n	3136e <preparse_value+0x12>
    if (majortype == NegativeIntegerType) {
   313da:	2e20      	cmp	r6, #32
    uint8_t majortype = type >> MajorTypeShift;
   313dc:	ea4f 1256 	mov.w	r2, r6, lsr #5
    if (majortype == NegativeIntegerType) {
   313e0:	d10c      	bne.n	313fc <preparse_value+0xa0>
        it->type = CborIntegerType;
   313e2:	f44f 7200 	mov.w	r2, #512	; 0x200
   313e6:	81e2      	strh	r2, [r4, #14]
    if (descriptor < Value8Bit)
   313e8:	2b17      	cmp	r3, #23
   313ea:	d91d      	bls.n	31428 <preparse_value+0xcc>
    if (descriptor == Value8Bit)
   313ec:	2b18      	cmp	r3, #24
   313ee:	d12a      	bne.n	31446 <preparse_value+0xea>
        it->extra = parser->d->get8(parser->d, it->offset + 1);
   313f0:	6828      	ldr	r0, [r5, #0]
   313f2:	6803      	ldr	r3, [r0, #0]
        it->extra = parser->d->get16(parser->d, it->offset + 1);
   313f4:	3101      	adds	r1, #1
   313f6:	4798      	blx	r3
   313f8:	81a0      	strh	r0, [r4, #12]
   313fa:	e015      	b.n	31428 <preparse_value+0xcc>
    } else if (majortype == SimpleTypesType) {
   313fc:	2a07      	cmp	r2, #7
   313fe:	d1f3      	bne.n	313e8 <preparse_value+0x8c>
        switch (descriptor) {
   31400:	3b14      	subs	r3, #20
   31402:	2b07      	cmp	r3, #7
   31404:	d810      	bhi.n	31428 <preparse_value+0xcc>
   31406:	e8df f003 	tbb	[pc, r3]
   3140a:	0b04      	.short	0x0b04
   3140c:	0b110b0b 	.word	0x0b110b0b
   31410:	0909      	.short	0x0909
            it->extra = false;
   31412:	2000      	movs	r0, #0
            it->type = CborBooleanType;
   31414:	23f5      	movs	r3, #245	; 0xf5
            it->extra = false;
   31416:	81a0      	strh	r0, [r4, #12]
            it->type = CborBooleanType;
   31418:	73a3      	strb	r3, [r4, #14]
            break;
   3141a:	e7aa      	b.n	31372 <preparse_value+0x16>
            it->flags |= CborIteratorFlag_IntegerValueTooLarge;
   3141c:	2301      	movs	r3, #1
   3141e:	73e3      	strb	r3, [r4, #15]
            it->type = parser->d->get8(parser->d, it->offset);
   31420:	6828      	ldr	r0, [r5, #0]
   31422:	6803      	ldr	r3, [r0, #0]
   31424:	4798      	blx	r3
   31426:	73a0      	strb	r0, [r4, #14]
        switch (descriptor) {
   31428:	2000      	movs	r0, #0
   3142a:	e7a2      	b.n	31372 <preparse_value+0x16>
            it->extra = parser->d->get8(parser->d, it->offset + 1);
   3142c:	6828      	ldr	r0, [r5, #0]
   3142e:	3101      	adds	r1, #1
   31430:	6803      	ldr	r3, [r0, #0]
   31432:	4798      	blx	r3
   31434:	b280      	uxth	r0, r0
            if (unlikely(it->extra < 32)) {
   31436:	281f      	cmp	r0, #31
            it->extra = parser->d->get8(parser->d, it->offset + 1);
   31438:	81a0      	strh	r0, [r4, #12]
            if (unlikely(it->extra < 32)) {
   3143a:	d8f5      	bhi.n	31428 <preparse_value+0xcc>
                it->type = CborInvalidType;
   3143c:	23ff      	movs	r3, #255	; 0xff
   3143e:	73a3      	strb	r3, [r4, #14]
                return CborErrorIllegalSimpleType;
   31440:	f44f 7083 	mov.w	r0, #262	; 0x106
   31444:	e795      	b.n	31372 <preparse_value+0x16>
    else if (descriptor == Value16Bit)
   31446:	2b19      	cmp	r3, #25
   31448:	d102      	bne.n	31450 <preparse_value+0xf4>
        it->extra = parser->d->get16(parser->d, it->offset + 1);
   3144a:	6828      	ldr	r0, [r5, #0]
   3144c:	6843      	ldr	r3, [r0, #4]
   3144e:	e7d1      	b.n	313f4 <preparse_value+0x98>
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
   31450:	7be3      	ldrb	r3, [r4, #15]
   31452:	f043 0301 	orr.w	r3, r3, #1
   31456:	e7ab      	b.n	313b0 <preparse_value+0x54>

00031458 <cbor_parser_init>:
 * threads iterating at the same time, but the object can be copied so multiple
 * threads can iterate.
 */
CborError cbor_parser_init(struct cbor_decoder_reader *d, int flags,
                                CborParser *parser, CborValue *it)
{
   31458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3145a:	4614      	mov	r4, r2
   3145c:	4606      	mov	r6, r0
   3145e:	460f      	mov	r7, r1
    memset(parser, 0, sizeof(*parser));
   31460:	220c      	movs	r2, #12
   31462:	4620      	mov	r0, r4
   31464:	2100      	movs	r1, #0
{
   31466:	461d      	mov	r5, r3
    memset(parser, 0, sizeof(*parser));
   31468:	f7fc fdea 	bl	2e040 <memset>
    parser->d = d;
    parser->end = d->message_size;
   3146c:	69b3      	ldr	r3, [r6, #24]
    parser->d = d;
   3146e:	6026      	str	r6, [r4, #0]
    parser->flags = flags;
   31470:	e9c4 3701 	strd	r3, r7, [r4, #4]
    it->parser = parser;
    it->offset = 0;
    it->remaining = 1;/* there's one type altogether, usually an array or map */
   31474:	2200      	movs	r2, #0
   31476:	2301      	movs	r3, #1
   31478:	e9c5 2301 	strd	r2, r3, [r5, #4]
    it->parser = parser;
   3147c:	602c      	str	r4, [r5, #0]
    return preparse_value(it);
   3147e:	4628      	mov	r0, r5
}
   31480:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return preparse_value(it);
   31484:	f7ff bf6a 	b.w	3135c <preparse_value>

00031488 <z_device_state_init>:
}
   31488:	4770      	bx	lr

0003148a <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   3148a:	b138      	cbz	r0, 3149c <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   3148c:	68c3      	ldr	r3, [r0, #12]
   3148e:	8818      	ldrh	r0, [r3, #0]
   31490:	f3c0 0008 	ubfx	r0, r0, #0, #9
   31494:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   31498:	4258      	negs	r0, r3
   3149a:	4158      	adcs	r0, r3
}
   3149c:	4770      	bx	lr

0003149e <arch_system_halt>:
	__asm__ volatile(
   3149e:	f04f 0220 	mov.w	r2, #32
   314a2:	f3ef 8311 	mrs	r3, BASEPRI
   314a6:	f382 8812 	msr	BASEPRI_MAX, r2
   314aa:	f3bf 8f6f 	isb	sy
	for (;;) {
   314ae:	e7fe      	b.n	314ae <arch_system_halt+0x10>

000314b0 <z_early_memset>:
	(void) memset(dst, c, n);
   314b0:	f7fc bdc6 	b.w	2e040 <memset>

000314b4 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   314b4:	f7fc bdb9 	b.w	2e02a <memcpy>

000314b8 <k_heap_init>:
{
   314b8:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   314ba:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   314be:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   314c2:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   314c4:	f7fa bcea 	b.w	2be9c <sys_heap_init>

000314c8 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   314c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   314cc:	b085      	sub	sp, #20
   314ce:	4606      	mov	r6, r0
   314d0:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   314d2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   314d6:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   314d8:	f000 fbba 	bl	31c50 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   314dc:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   314e0:	4605      	mov	r5, r0
   314e2:	460f      	mov	r7, r1
   314e4:	f04f 0320 	mov.w	r3, #32
   314e8:	f3ef 8411 	mrs	r4, BASEPRI
   314ec:	f383 8812 	msr	BASEPRI_MAX, r3
   314f0:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   314f4:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   314f8:	464a      	mov	r2, r9
   314fa:	4641      	mov	r1, r8
   314fc:	4630      	mov	r0, r6
   314fe:	f7fa fc65 	bl	2bdcc <sys_heap_aligned_alloc>
   31502:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   31504:	f7f9 ff76 	bl	2b3f4 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   31508:	9b03      	ldr	r3, [sp, #12]
   3150a:	b13b      	cbz	r3, 3151c <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   3150c:	f384 8811 	msr	BASEPRI, r4
   31510:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   31514:	4618      	mov	r0, r3
   31516:	b005      	add	sp, #20
   31518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   3151c:	1a28      	subs	r0, r5, r0
   3151e:	eb67 0101 	sbc.w	r1, r7, r1
   31522:	2801      	cmp	r0, #1
   31524:	f171 0200 	sbcs.w	r2, r1, #0
   31528:	dbf0      	blt.n	3150c <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   3152a:	e9cd 0100 	strd	r0, r1, [sp]
   3152e:	465a      	mov	r2, fp
   31530:	4621      	mov	r1, r4
   31532:	4650      	mov	r0, sl
   31534:	f7f9 fc52 	bl	2addc <z_pend_curr>
	__asm__ volatile(
   31538:	f04f 0320 	mov.w	r3, #32
   3153c:	f3ef 8411 	mrs	r4, BASEPRI
   31540:	f383 8812 	msr	BASEPRI_MAX, r3
   31544:	f3bf 8f6f 	isb	sy
   31548:	e7d6      	b.n	314f8 <k_heap_aligned_alloc+0x30>

0003154a <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   3154a:	b538      	push	{r3, r4, r5, lr}
   3154c:	4604      	mov	r4, r0
   3154e:	f04f 0320 	mov.w	r3, #32
   31552:	f3ef 8511 	mrs	r5, BASEPRI
   31556:	f383 8812 	msr	BASEPRI_MAX, r3
   3155a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   3155e:	f7fa fbfd 	bl	2bd5c <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   31562:	f104 000c 	add.w	r0, r4, #12
   31566:	f000 fafc 	bl	31b62 <z_unpend_all>
   3156a:	b130      	cbz	r0, 3157a <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   3156c:	4629      	mov	r1, r5
   3156e:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   31572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   31576:	f7f9 badd 	b.w	2ab34 <z_reschedule>
	__asm__ volatile(
   3157a:	f385 8811 	msr	BASEPRI, r5
   3157e:	f3bf 8f6f 	isb	sy
}
   31582:	bd38      	pop	{r3, r4, r5, pc}

00031584 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   31584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31586:	4604      	mov	r4, r0
   31588:	460d      	mov	r5, r1
	__asm__ volatile(
   3158a:	f04f 0320 	mov.w	r3, #32
   3158e:	f3ef 8611 	mrs	r6, BASEPRI
   31592:	f383 8812 	msr	BASEPRI_MAX, r3
   31596:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   3159a:	6947      	ldr	r7, [r0, #20]
   3159c:	b977      	cbnz	r7, 315bc <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   3159e:	f000 fac8 	bl	31b32 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   315a2:	b158      	cbz	r0, 315bc <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   315a4:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   315a6:	6142      	str	r2, [r0, #20]
   315a8:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   315aa:	f000 fa51 	bl	31a50 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   315ae:	4631      	mov	r1, r6
   315b0:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   315b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   315b8:	f7f9 babc 	b.w	2ab34 <z_reschedule>
	**(char ***) mem = slab->free_list;
   315bc:	682b      	ldr	r3, [r5, #0]
   315be:	6962      	ldr	r2, [r4, #20]
   315c0:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   315c2:	682b      	ldr	r3, [r5, #0]
   315c4:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   315c6:	69a3      	ldr	r3, [r4, #24]
   315c8:	3b01      	subs	r3, #1
   315ca:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   315cc:	f386 8811 	msr	BASEPRI, r6
   315d0:	f3bf 8f6f 	isb	sy
}
   315d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000315d6 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   315d6:	f3ef 8005 	mrs	r0, IPSR
}
   315da:	3800      	subs	r0, #0
   315dc:	bf18      	it	ne
   315de:	2001      	movne	r0, #1
   315e0:	4770      	bx	lr

000315e2 <z_impl_k_thread_name_set>:
}
   315e2:	f06f 0057 	mvn.w	r0, #87	; 0x57
   315e6:	4770      	bx	lr

000315e8 <k_thread_name_get>:
}
   315e8:	2000      	movs	r0, #0
   315ea:	4770      	bx	lr

000315ec <z_impl_k_thread_start>:
	z_sched_start(thread);
   315ec:	f7f9 bb9a 	b.w	2ad24 <z_sched_start>

000315f0 <z_pm_save_idle_exit>:
{
   315f0:	b508      	push	{r3, lr}
	pm_system_resume();
   315f2:	f7de fe61 	bl	102b8 <pm_system_resume>
}
   315f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   315fa:	f7ff bc7d 	b.w	30ef8 <sys_clock_idle_exit>

000315fe <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   315fe:	f990 300e 	ldrsb.w	r3, [r0, #14]
   31602:	428b      	cmp	r3, r1
   31604:	d001      	beq.n	3160a <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   31606:	f7f9 bbfd 	b.w	2ae04 <z_set_prio>
}
   3160a:	2000      	movs	r0, #0
   3160c:	4770      	bx	lr

0003160e <z_impl_k_mutex_init>:
{
   3160e:	4603      	mov	r3, r0
	mutex->owner = NULL;
   31610:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   31612:	e9c3 0002 	strd	r0, r0, [r3, #8]
   31616:	e9c3 3300 	strd	r3, r3, [r3]
}
   3161a:	4770      	bx	lr

0003161c <queue_insert>:
{
   3161c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   31620:	4699      	mov	r9, r3
   31622:	4604      	mov	r4, r0
   31624:	f89d 3020 	ldrb.w	r3, [sp, #32]
   31628:	460d      	mov	r5, r1
   3162a:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   3162c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   31630:	f04f 0220 	mov.w	r2, #32
   31634:	f3ef 8711 	mrs	r7, BASEPRI
   31638:	f382 8812 	msr	BASEPRI_MAX, r2
   3163c:	f3bf 8f6f 	isb	sy
	if (is_append) {
   31640:	b103      	cbz	r3, 31644 <queue_insert+0x28>
	return list->tail;
   31642:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   31644:	4630      	mov	r0, r6
   31646:	f000 fa74 	bl	31b32 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   3164a:	b158      	cbz	r0, 31664 <queue_insert+0x48>
   3164c:	2400      	movs	r4, #0
   3164e:	67c4      	str	r4, [r0, #124]	; 0x7c
   31650:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   31654:	f000 f9fc 	bl	31a50 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   31658:	4630      	mov	r0, r6
   3165a:	4639      	mov	r1, r7
   3165c:	f7f9 fa6a 	bl	2ab34 <z_reschedule>
	return 0;
   31660:	2000      	movs	r0, #0
   31662:	e00c      	b.n	3167e <queue_insert+0x62>
	if (alloc) {
   31664:	f1b9 0f00 	cmp.w	r9, #0
   31668:	d01b      	beq.n	316a2 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   3166a:	2108      	movs	r1, #8
   3166c:	f7f9 fff6 	bl	2b65c <z_thread_aligned_alloc>
		if (anode == NULL) {
   31670:	b938      	cbnz	r0, 31682 <queue_insert+0x66>
	__asm__ volatile(
   31672:	f387 8811 	msr	BASEPRI, r7
   31676:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   3167a:	f06f 000b 	mvn.w	r0, #11
}
   3167e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   31682:	2301      	movs	r3, #1
		anode->data = data;
   31684:	f8c0 8004 	str.w	r8, [r0, #4]
   31688:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3168a:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3168c:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   31690:	b95d      	cbnz	r5, 316aa <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   31692:	6823      	ldr	r3, [r4, #0]
   31694:	4313      	orrs	r3, r2
   31696:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   31698:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   3169a:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   3169c:	b973      	cbnz	r3, 316bc <queue_insert+0xa0>
	list->tail = node;
   3169e:	6060      	str	r0, [r4, #4]
}
   316a0:	e00c      	b.n	316bc <queue_insert+0xa0>
	node->next_and_flags = flags;
   316a2:	f8c8 9000 	str.w	r9, [r8]
}
   316a6:	4640      	mov	r0, r8
   316a8:	e7ef      	b.n	3168a <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   316aa:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   316ac:	f033 0303 	bics.w	r3, r3, #3
   316b0:	d110      	bne.n	316d4 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   316b2:	6002      	str	r2, [r0, #0]
	return list->tail;
   316b4:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   316b6:	b93a      	cbnz	r2, 316c8 <queue_insert+0xac>
	list->head = node;
   316b8:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   316bc:	2104      	movs	r1, #4
   316be:	f104 0010 	add.w	r0, r4, #16
   316c2:	f000 fc57 	bl	31f74 <z_handle_obj_poll_events>
   316c6:	e7c7      	b.n	31658 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   316c8:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   316ca:	f003 0303 	and.w	r3, r3, #3
   316ce:	4303      	orrs	r3, r0
   316d0:	6013      	str	r3, [r2, #0]
   316d2:	e7e4      	b.n	3169e <queue_insert+0x82>
   316d4:	4313      	orrs	r3, r2
   316d6:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   316d8:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   316da:	f003 0303 	and.w	r3, r3, #3
   316de:	4303      	orrs	r3, r0
   316e0:	602b      	str	r3, [r5, #0]
}
   316e2:	e7eb      	b.n	316bc <queue_insert+0xa0>

000316e4 <z_queue_node_peek>:
{
   316e4:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   316e6:	4604      	mov	r4, r0
   316e8:	b130      	cbz	r0, 316f8 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   316ea:	6802      	ldr	r2, [r0, #0]
   316ec:	0793      	lsls	r3, r2, #30
   316ee:	d003      	beq.n	316f8 <z_queue_node_peek+0x14>
		ret = anode->data;
   316f0:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   316f2:	b109      	cbz	r1, 316f8 <z_queue_node_peek+0x14>
			k_free(anode);
   316f4:	f000 fc4c 	bl	31f90 <k_free>
}
   316f8:	4620      	mov	r0, r4
   316fa:	bd10      	pop	{r4, pc}

000316fc <z_impl_k_queue_init>:
	list->head = NULL;
   316fc:	2300      	movs	r3, #0
	list->tail = NULL;
   316fe:	e9c0 3300 	strd	r3, r3, [r0]
   31702:	f100 0308 	add.w	r3, r0, #8
   31706:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   3170a:	f100 0310 	add.w	r3, r0, #16
   3170e:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   31712:	4770      	bx	lr

00031714 <k_queue_append>:
{
   31714:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   31716:	2301      	movs	r3, #1
   31718:	9300      	str	r3, [sp, #0]
   3171a:	2300      	movs	r3, #0
{
   3171c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   3171e:	4619      	mov	r1, r3
   31720:	f7ff ff7c 	bl	3161c <queue_insert>
}
   31724:	b003      	add	sp, #12
   31726:	f85d fb04 	ldr.w	pc, [sp], #4

0003172a <k_queue_prepend>:
{
   3172a:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   3172c:	2300      	movs	r3, #0
{
   3172e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   31730:	9300      	str	r3, [sp, #0]
   31732:	4619      	mov	r1, r3
   31734:	f7ff ff72 	bl	3161c <queue_insert>
}
   31738:	b003      	add	sp, #12
   3173a:	f85d fb04 	ldr.w	pc, [sp], #4

0003173e <k_queue_append_list>:
{
   3173e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   31742:	4605      	mov	r5, r0
   31744:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   31746:	460c      	mov	r4, r1
   31748:	b391      	cbz	r1, 317b0 <k_queue_append_list+0x72>
   3174a:	b38a      	cbz	r2, 317b0 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   3174c:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   31750:	f04f 0320 	mov.w	r3, #32
   31754:	f3ef 8811 	mrs	r8, BASEPRI
   31758:	f383 8812 	msr	BASEPRI_MAX, r3
   3175c:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   31760:	4638      	mov	r0, r7
   31762:	f000 f9e6 	bl	31b32 <z_unpend_first_thread>
   31766:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   3176a:	b920      	cbnz	r0, 31776 <k_queue_append_list+0x38>
	return list->tail;
   3176c:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   3176e:	b9ca      	cbnz	r2, 317a4 <k_queue_append_list+0x66>
	list->head = node;
   31770:	602c      	str	r4, [r5, #0]
	list->tail = node;
   31772:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   31774:	e00a      	b.n	3178c <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   31776:	6144      	str	r4, [r0, #20]
   31778:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   3177c:	f000 f968 	bl	31a50 <z_ready_thread>
		head = *(void **)head;
   31780:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   31782:	4638      	mov	r0, r7
   31784:	f000 f9d5 	bl	31b32 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   31788:	2c00      	cmp	r4, #0
   3178a:	d1ee      	bne.n	3176a <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   3178c:	2104      	movs	r1, #4
   3178e:	f105 0010 	add.w	r0, r5, #16
   31792:	f000 fbef 	bl	31f74 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   31796:	4638      	mov	r0, r7
   31798:	4641      	mov	r1, r8
   3179a:	f7f9 f9cb 	bl	2ab34 <z_reschedule>
	return 0;
   3179e:	2000      	movs	r0, #0
}
   317a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   317a4:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   317a6:	f003 0303 	and.w	r3, r3, #3
   317aa:	431c      	orrs	r4, r3
   317ac:	6014      	str	r4, [r2, #0]
}
   317ae:	e7e0      	b.n	31772 <k_queue_append_list+0x34>
		return -EINVAL;
   317b0:	f06f 0015 	mvn.w	r0, #21
   317b4:	e7f4      	b.n	317a0 <k_queue_append_list+0x62>

000317b6 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   317b6:	b15a      	cbz	r2, 317d0 <z_impl_k_sem_init+0x1a>
   317b8:	428a      	cmp	r2, r1
   317ba:	d309      	bcc.n	317d0 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   317bc:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   317c0:	e9c0 1202 	strd	r1, r2, [r0, #8]
   317c4:	e9c0 0000 	strd	r0, r0, [r0]
   317c8:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   317cc:	2000      	movs	r0, #0
   317ce:	4770      	bx	lr
		return -EINVAL;
   317d0:	f06f 0015 	mvn.w	r0, #21
}
   317d4:	4770      	bx	lr

000317d6 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   317d6:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   317d8:	2301      	movs	r3, #1
   317da:	408b      	lsls	r3, r1
   317dc:	ea22 0303 	bic.w	r3, r2, r3
   317e0:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   317e2:	fa22 f001 	lsr.w	r0, r2, r1
}
   317e6:	f000 0001 	and.w	r0, r0, #1
   317ea:	4770      	bx	lr

000317ec <unschedule_locked>:
{
   317ec:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   317ee:	2103      	movs	r1, #3
{
   317f0:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   317f2:	300c      	adds	r0, #12
   317f4:	f7ff ffef 	bl	317d6 <flag_test_and_clear>
   317f8:	4604      	mov	r4, r0
   317fa:	b118      	cbz	r0, 31804 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   317fc:	f105 0010 	add.w	r0, r5, #16
   31800:	f000 f9dc 	bl	31bbc <z_abort_timeout>
}
   31804:	4620      	mov	r0, r4
   31806:	bd38      	pop	{r3, r4, r5, pc}

00031808 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   31808:	b120      	cbz	r0, 31814 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   3180a:	2200      	movs	r2, #0
   3180c:	4611      	mov	r1, r2
   3180e:	3088      	adds	r0, #136	; 0x88
   31810:	f000 b9b7 	b.w	31b82 <z_sched_wake>
}
   31814:	4770      	bx	lr

00031816 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   31816:	68c3      	ldr	r3, [r0, #12]
{
   31818:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   3181a:	f3c3 0540 	ubfx	r5, r3, #1, #1
   3181e:	079b      	lsls	r3, r3, #30
{
   31820:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   31822:	d416      	bmi.n	31852 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   31824:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   31826:	2102      	movs	r1, #2
   31828:	300c      	adds	r0, #12
   3182a:	f7ff ffd4 	bl	317d6 <flag_test_and_clear>
   3182e:	b180      	cbz	r0, 31852 <cancel_async_locked+0x3c>
	return list->head;
   31830:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   31834:	b16a      	cbz	r2, 31852 <cancel_async_locked+0x3c>
   31836:	4294      	cmp	r4, r2
   31838:	d11b      	bne.n	31872 <cancel_async_locked+0x5c>
	return node->next;
   3183a:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   3183c:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   31840:	b98d      	cbnz	r5, 31866 <cancel_async_locked+0x50>
   31842:	428c      	cmp	r4, r1
	list->head = node;
   31844:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   31848:	d101      	bne.n	3184e <cancel_async_locked+0x38>
	list->tail = node;
   3184a:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   3184e:	2300      	movs	r3, #0
   31850:	6023      	str	r3, [r4, #0]
	return *flagp;
   31852:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   31854:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   31858:	bf1e      	ittt	ne
   3185a:	f043 0302 	orrne.w	r3, r3, #2
   3185e:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   31860:	f003 000f 	andne.w	r0, r3, #15
}
   31864:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   31866:	428c      	cmp	r4, r1
	parent->next = child;
   31868:	602a      	str	r2, [r5, #0]
	list->tail = node;
   3186a:	bf08      	it	eq
   3186c:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   31870:	e7ed      	b.n	3184e <cancel_async_locked+0x38>
	return node->next;
   31872:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   31874:	6812      	ldr	r2, [r2, #0]
   31876:	e7dd      	b.n	31834 <cancel_async_locked+0x1e>

00031878 <work_timeout>:
{
   31878:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3187a:	4604      	mov	r4, r0
   3187c:	f04f 0320 	mov.w	r3, #32
   31880:	f3ef 8511 	mrs	r5, BASEPRI
   31884:	f383 8812 	msr	BASEPRI_MAX, r3
   31888:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   3188c:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   3188e:	f1a0 0610 	sub.w	r6, r0, #16
   31892:	2103      	movs	r1, #3
   31894:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   31896:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   31898:	f7ff ff9d 	bl	317d6 <flag_test_and_clear>
   3189c:	b128      	cbz	r0, 318aa <work_timeout+0x32>
		queue = dw->queue;
   3189e:	69a3      	ldr	r3, [r4, #24]
   318a0:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   318a2:	a901      	add	r1, sp, #4
   318a4:	4630      	mov	r0, r6
   318a6:	f7f9 f80d 	bl	2a8c4 <submit_to_queue_locked>
	__asm__ volatile(
   318aa:	f385 8811 	msr	BASEPRI, r5
   318ae:	f3bf 8f6f 	isb	sy
}
   318b2:	b002      	add	sp, #8
   318b4:	bd70      	pop	{r4, r5, r6, pc}

000318b6 <k_work_init>:
{
   318b6:	b538      	push	{r3, r4, r5, lr}
   318b8:	4604      	mov	r4, r0
   318ba:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   318bc:	2210      	movs	r2, #16
   318be:	2100      	movs	r1, #0
   318c0:	f7fc fbbe 	bl	2e040 <memset>
   318c4:	6065      	str	r5, [r4, #4]
}
   318c6:	bd38      	pop	{r3, r4, r5, pc}

000318c8 <k_work_submit_to_queue>:
{
   318c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   318ca:	9001      	str	r0, [sp, #4]
   318cc:	4608      	mov	r0, r1
	__asm__ volatile(
   318ce:	f04f 0320 	mov.w	r3, #32
   318d2:	f3ef 8511 	mrs	r5, BASEPRI
   318d6:	f383 8812 	msr	BASEPRI_MAX, r3
   318da:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   318de:	a901      	add	r1, sp, #4
   318e0:	f7f8 fff0 	bl	2a8c4 <submit_to_queue_locked>
   318e4:	4604      	mov	r4, r0
	__asm__ volatile(
   318e6:	f385 8811 	msr	BASEPRI, r5
   318ea:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   318ee:	2800      	cmp	r0, #0
   318f0:	dd04      	ble.n	318fc <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   318f2:	f7f9 fbd1 	bl	2b098 <z_impl_k_is_preempt_thread>
   318f6:	b108      	cbz	r0, 318fc <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   318f8:	f7f9 fb26 	bl	2af48 <z_impl_k_yield>
}
   318fc:	4620      	mov	r0, r4
   318fe:	b003      	add	sp, #12
   31900:	bd30      	pop	{r4, r5, pc}

00031902 <k_work_init_delayable>:
{
   31902:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   31904:	2230      	movs	r2, #48	; 0x30
{
   31906:	4604      	mov	r4, r0
   31908:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   3190a:	2100      	movs	r1, #0
   3190c:	f7fc fb98 	bl	2e040 <memset>
   31910:	f44f 7380 	mov.w	r3, #256	; 0x100
   31914:	6065      	str	r5, [r4, #4]
   31916:	60e3      	str	r3, [r4, #12]
}
   31918:	bd38      	pop	{r3, r4, r5, pc}

0003191a <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   3191a:	b538      	push	{r3, r4, r5, lr}
   3191c:	4604      	mov	r4, r0
	__asm__ volatile(
   3191e:	f04f 0320 	mov.w	r3, #32
   31922:	f3ef 8511 	mrs	r5, BASEPRI
   31926:	f383 8812 	msr	BASEPRI_MAX, r3
   3192a:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   3192e:	f7ff ff5d 	bl	317ec <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   31932:	4620      	mov	r0, r4
   31934:	f7ff ff6f 	bl	31816 <cancel_async_locked>
	__asm__ volatile(
   31938:	f385 8811 	msr	BASEPRI, r5
   3193c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   31940:	bd38      	pop	{r3, r4, r5, pc}

00031942 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   31942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31944:	4604      	mov	r4, r0
   31946:	460d      	mov	r5, r1
	__asm__ volatile(
   31948:	f04f 0320 	mov.w	r3, #32
   3194c:	f3ef 8711 	mrs	r7, BASEPRI
   31950:	f383 8812 	msr	BASEPRI_MAX, r3
   31954:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   31958:	68c3      	ldr	r3, [r0, #12]
   3195a:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   3195e:	2b00      	cmp	r3, #0
   31960:	bf14      	ite	ne
   31962:	2601      	movne	r6, #1
   31964:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   31966:	d009      	beq.n	3197c <k_work_cancel_delayable_sync+0x3a>
	(void)unschedule_locked(dwork);
   31968:	f7ff ff40 	bl	317ec <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   3196c:	4620      	mov	r0, r4
   3196e:	f7ff ff52 	bl	31816 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   31972:	4629      	mov	r1, r5
   31974:	4620      	mov	r0, r4
   31976:	f7f8 ff87 	bl	2a888 <cancel_sync_locked>
   3197a:	4603      	mov	r3, r0
	__asm__ volatile(
   3197c:	f387 8811 	msr	BASEPRI, r7
   31980:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   31984:	b13b      	cbz	r3, 31996 <k_work_cancel_delayable_sync+0x54>
	return z_impl_k_sem_take(sem, timeout);
   31986:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3198a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3198e:	f105 0008 	add.w	r0, r5, #8
   31992:	f7f8 fea1 	bl	2a6d8 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   31996:	4630      	mov	r0, r6
   31998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003199a <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   3199a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   3199e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   319a0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   319a2:	2300      	movs	r3, #0
	node->prev = NULL;
   319a4:	e9c0 3300 	strd	r3, r3, [r0]
}
   319a8:	4770      	bx	lr

000319aa <unpend_thread_no_timeout>:
{
   319aa:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   319ac:	f7ff fff5 	bl	3199a <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   319b0:	7b43      	ldrb	r3, [r0, #13]
   319b2:	f023 0302 	bic.w	r3, r3, #2
   319b6:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   319b8:	2300      	movs	r3, #0
   319ba:	6083      	str	r3, [r0, #8]
}
   319bc:	bd08      	pop	{r3, pc}

000319be <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   319be:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   319c2:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   319c6:	4283      	cmp	r3, r0
		return b2 - b1;
   319c8:	bf14      	ite	ne
   319ca:	1ac0      	subne	r0, r0, r3
	return 0;
   319cc:	2000      	moveq	r0, #0
}
   319ce:	4770      	bx	lr

000319d0 <z_unpend_thread_no_timeout>:
{
   319d0:	b508      	push	{r3, lr}
	__asm__ volatile(
   319d2:	f04f 0320 	mov.w	r3, #32
   319d6:	f3ef 8111 	mrs	r1, BASEPRI
   319da:	f383 8812 	msr	BASEPRI_MAX, r3
   319de:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   319e2:	f7ff ffe2 	bl	319aa <unpend_thread_no_timeout>
	__asm__ volatile(
   319e6:	f381 8811 	msr	BASEPRI, r1
   319ea:	f3bf 8f6f 	isb	sy
}
   319ee:	bd08      	pop	{r3, pc}

000319f0 <z_unpend_thread>:
{
   319f0:	b510      	push	{r4, lr}
	__asm__ volatile(
   319f2:	f04f 0320 	mov.w	r3, #32
   319f6:	f3ef 8411 	mrs	r4, BASEPRI
   319fa:	f383 8812 	msr	BASEPRI_MAX, r3
   319fe:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   31a02:	f7ff ffd2 	bl	319aa <unpend_thread_no_timeout>
	__asm__ volatile(
   31a06:	f384 8811 	msr	BASEPRI, r4
   31a0a:	f3bf 8f6f 	isb	sy
}
   31a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   31a12:	3018      	adds	r0, #24
   31a14:	f000 b8d2 	b.w	31bbc <z_abort_timeout>

00031a18 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   31a18:	4603      	mov	r3, r0
   31a1a:	b920      	cbnz	r0, 31a26 <z_reschedule_irqlock+0xe>
   31a1c:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   31a20:	b90a      	cbnz	r2, 31a26 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   31a22:	f7de bf7f 	b.w	10924 <arch_swap>
   31a26:	f383 8811 	msr	BASEPRI, r3
   31a2a:	f3bf 8f6f 	isb	sy
}
   31a2e:	4770      	bx	lr

00031a30 <z_reschedule_unlocked>:
	__asm__ volatile(
   31a30:	f04f 0320 	mov.w	r3, #32
   31a34:	f3ef 8011 	mrs	r0, BASEPRI
   31a38:	f383 8812 	msr	BASEPRI_MAX, r3
   31a3c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   31a40:	f7ff bfea 	b.w	31a18 <z_reschedule_irqlock>

00031a44 <z_priq_dumb_best>:
{
   31a44:	4603      	mov	r3, r0
	return list->head == list;
   31a46:	6800      	ldr	r0, [r0, #0]
}
   31a48:	4283      	cmp	r3, r0
   31a4a:	bf08      	it	eq
   31a4c:	2000      	moveq	r0, #0
   31a4e:	4770      	bx	lr

00031a50 <z_ready_thread>:
{
   31a50:	b510      	push	{r4, lr}
   31a52:	f04f 0320 	mov.w	r3, #32
   31a56:	f3ef 8411 	mrs	r4, BASEPRI
   31a5a:	f383 8812 	msr	BASEPRI_MAX, r3
   31a5e:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   31a62:	f7f9 f929 	bl	2acb8 <ready_thread>
	__asm__ volatile(
   31a66:	f384 8811 	msr	BASEPRI, r4
   31a6a:	f3bf 8f6f 	isb	sy
}
   31a6e:	bd10      	pop	{r4, pc}

00031a70 <z_thread_timeout>:
{
   31a70:	b510      	push	{r4, lr}
   31a72:	4601      	mov	r1, r0
	__asm__ volatile(
   31a74:	f04f 0320 	mov.w	r3, #32
   31a78:	f3ef 8411 	mrs	r4, BASEPRI
   31a7c:	f383 8812 	msr	BASEPRI_MAX, r3
   31a80:	f3bf 8f6f 	isb	sy
		if (!killed) {
   31a84:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   31a88:	f013 0f28 	tst.w	r3, #40	; 0x28
   31a8c:	d10d      	bne.n	31aaa <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   31a8e:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   31a92:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   31a94:	b10b      	cbz	r3, 31a9a <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   31a96:	f7ff ff88 	bl	319aa <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   31a9a:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   31a9e:	f023 0314 	bic.w	r3, r3, #20
   31aa2:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   31aa6:	f7f9 f907 	bl	2acb8 <ready_thread>
	__asm__ volatile(
   31aaa:	f384 8811 	msr	BASEPRI, r4
   31aae:	f3bf 8f6f 	isb	sy
}
   31ab2:	bd10      	pop	{r4, pc}

00031ab4 <add_to_waitq_locked>:
{
   31ab4:	b538      	push	{r3, r4, r5, lr}
   31ab6:	4604      	mov	r4, r0
   31ab8:	460d      	mov	r5, r1
	unready_thread(thread);
   31aba:	f7f9 f951 	bl	2ad60 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   31abe:	7b63      	ldrb	r3, [r4, #13]
   31ac0:	f043 0302 	orr.w	r3, r3, #2
   31ac4:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   31ac6:	b195      	cbz	r5, 31aee <add_to_waitq_locked+0x3a>
   31ac8:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   31aca:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   31acc:	429d      	cmp	r5, r3
   31ace:	d015      	beq.n	31afc <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   31ad0:	b1a3      	cbz	r3, 31afc <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   31ad2:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   31ad6:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   31ada:	4291      	cmp	r1, r2
   31adc:	d008      	beq.n	31af0 <add_to_waitq_locked+0x3c>
		return b2 - b1;
   31ade:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   31ae0:	2a00      	cmp	r2, #0
   31ae2:	dd05      	ble.n	31af0 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   31ae4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   31ae6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   31aea:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   31aec:	605c      	str	r4, [r3, #4]
}
   31aee:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   31af0:	686a      	ldr	r2, [r5, #4]
   31af2:	4293      	cmp	r3, r2
   31af4:	d002      	beq.n	31afc <add_to_waitq_locked+0x48>
   31af6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   31af8:	2b00      	cmp	r3, #0
   31afa:	d1ec      	bne.n	31ad6 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   31afc:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   31afe:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   31b02:	601c      	str	r4, [r3, #0]
	list->tail = node;
   31b04:	606c      	str	r4, [r5, #4]
}
   31b06:	e7f2      	b.n	31aee <add_to_waitq_locked+0x3a>

00031b08 <z_unpend1_no_timeout>:
{
   31b08:	b510      	push	{r4, lr}
	__asm__ volatile(
   31b0a:	f04f 0320 	mov.w	r3, #32
   31b0e:	f3ef 8411 	mrs	r4, BASEPRI
   31b12:	f383 8812 	msr	BASEPRI_MAX, r3
   31b16:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   31b1a:	f7ff ff93 	bl	31a44 <z_priq_dumb_best>
		if (thread != NULL) {
   31b1e:	4601      	mov	r1, r0
   31b20:	b108      	cbz	r0, 31b26 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   31b22:	f7ff ff42 	bl	319aa <unpend_thread_no_timeout>
	__asm__ volatile(
   31b26:	f384 8811 	msr	BASEPRI, r4
   31b2a:	f3bf 8f6f 	isb	sy
}
   31b2e:	4608      	mov	r0, r1
   31b30:	bd10      	pop	{r4, pc}

00031b32 <z_unpend_first_thread>:
{
   31b32:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   31b34:	f04f 0320 	mov.w	r3, #32
   31b38:	f3ef 8511 	mrs	r5, BASEPRI
   31b3c:	f383 8812 	msr	BASEPRI_MAX, r3
   31b40:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   31b44:	f7ff ff7e 	bl	31a44 <z_priq_dumb_best>
		if (thread != NULL) {
   31b48:	4604      	mov	r4, r0
   31b4a:	b120      	cbz	r0, 31b56 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   31b4c:	f7ff ff2d 	bl	319aa <unpend_thread_no_timeout>
   31b50:	3018      	adds	r0, #24
   31b52:	f000 f833 	bl	31bbc <z_abort_timeout>
	__asm__ volatile(
   31b56:	f385 8811 	msr	BASEPRI, r5
   31b5a:	f3bf 8f6f 	isb	sy
}
   31b5e:	4620      	mov	r0, r4
   31b60:	bd38      	pop	{r3, r4, r5, pc}

00031b62 <z_unpend_all>:
{
   31b62:	b538      	push	{r3, r4, r5, lr}
   31b64:	4605      	mov	r5, r0
	int need_sched = 0;
   31b66:	2000      	movs	r0, #0
	return list->head == list;
   31b68:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   31b6a:	42a5      	cmp	r5, r4
   31b6c:	d000      	beq.n	31b70 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   31b6e:	b904      	cbnz	r4, 31b72 <z_unpend_all+0x10>
}
   31b70:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   31b72:	4620      	mov	r0, r4
   31b74:	f7ff ff3c 	bl	319f0 <z_unpend_thread>
		z_ready_thread(thread);
   31b78:	4620      	mov	r0, r4
   31b7a:	f7ff ff69 	bl	31a50 <z_ready_thread>
		need_sched = 1;
   31b7e:	2001      	movs	r0, #1
   31b80:	e7f2      	b.n	31b68 <z_unpend_all+0x6>

00031b82 <z_sched_wake>:
{
   31b82:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   31b84:	f04f 0320 	mov.w	r3, #32
   31b88:	f3ef 8511 	mrs	r5, BASEPRI
   31b8c:	f383 8812 	msr	BASEPRI_MAX, r3
   31b90:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   31b94:	f7ff ff56 	bl	31a44 <z_priq_dumb_best>
		if (thread != NULL) {
   31b98:	4604      	mov	r4, r0
   31b9a:	b150      	cbz	r0, 31bb2 <z_sched_wake+0x30>
   31b9c:	67c1      	str	r1, [r0, #124]	; 0x7c
   31b9e:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   31ba0:	f7ff ff03 	bl	319aa <unpend_thread_no_timeout>
   31ba4:	3018      	adds	r0, #24
   31ba6:	f000 f809 	bl	31bbc <z_abort_timeout>
			ready_thread(thread);
   31baa:	4620      	mov	r0, r4
   31bac:	f7f9 f884 	bl	2acb8 <ready_thread>
			ret = true;
   31bb0:	2001      	movs	r0, #1
	__asm__ volatile(
   31bb2:	f385 8811 	msr	BASEPRI, r5
   31bb6:	f3bf 8f6f 	isb	sy
}
   31bba:	bd38      	pop	{r3, r4, r5, pc}

00031bbc <z_abort_timeout>:
{
   31bbc:	b510      	push	{r4, lr}
	__asm__ volatile(
   31bbe:	f04f 0220 	mov.w	r2, #32
   31bc2:	f3ef 8411 	mrs	r4, BASEPRI
   31bc6:	f382 8812 	msr	BASEPRI_MAX, r2
   31bca:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   31bce:	6803      	ldr	r3, [r0, #0]
   31bd0:	b13b      	cbz	r3, 31be2 <z_abort_timeout+0x26>
			remove_timeout(to);
   31bd2:	f7f9 fb1f 	bl	2b214 <remove_timeout>
			ret = 0;
   31bd6:	2000      	movs	r0, #0
	__asm__ volatile(
   31bd8:	f384 8811 	msr	BASEPRI, r4
   31bdc:	f3bf 8f6f 	isb	sy
}
   31be0:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   31be2:	f06f 0015 	mvn.w	r0, #21
   31be6:	e7f7      	b.n	31bd8 <z_abort_timeout+0x1c>

00031be8 <z_get_next_timeout_expiry>:
{
   31be8:	b510      	push	{r4, lr}
	__asm__ volatile(
   31bea:	f04f 0320 	mov.w	r3, #32
   31bee:	f3ef 8411 	mrs	r4, BASEPRI
   31bf2:	f383 8812 	msr	BASEPRI_MAX, r3
   31bf6:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   31bfa:	f7f9 fae5 	bl	2b1c8 <next_timeout>
	__asm__ volatile(
   31bfe:	f384 8811 	msr	BASEPRI, r4
   31c02:	f3bf 8f6f 	isb	sy
}
   31c06:	bd10      	pop	{r4, pc}

00031c08 <z_set_timeout_expiry>:
{
   31c08:	b570      	push	{r4, r5, r6, lr}
   31c0a:	4604      	mov	r4, r0
   31c0c:	460d      	mov	r5, r1
	__asm__ volatile(
   31c0e:	f04f 0320 	mov.w	r3, #32
   31c12:	f3ef 8611 	mrs	r6, BASEPRI
   31c16:	f383 8812 	msr	BASEPRI_MAX, r3
   31c1a:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   31c1e:	f7f9 fad3 	bl	2b1c8 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   31c22:	2801      	cmp	r0, #1
   31c24:	dd05      	ble.n	31c32 <z_set_timeout_expiry+0x2a>
   31c26:	42a0      	cmp	r0, r4
   31c28:	db03      	blt.n	31c32 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   31c2a:	4629      	mov	r1, r5
   31c2c:	4620      	mov	r0, r4
   31c2e:	f7f7 fae9 	bl	29204 <sys_clock_set_timeout>
	__asm__ volatile(
   31c32:	f386 8811 	msr	BASEPRI, r6
   31c36:	f3bf 8f6f 	isb	sy
}
   31c3a:	bd70      	pop	{r4, r5, r6, pc}

00031c3c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   31c3c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   31c3e:	f7f9 fbd9 	bl	2b3f4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   31c42:	bd08      	pop	{r3, pc}

00031c44 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   31c44:	f7f9 bbd6 	b.w	2b3f4 <sys_clock_tick_get>

00031c48 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   31c48:	b108      	cbz	r0, 31c4e <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   31c4a:	f7df bb9d 	b.w	11388 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   31c4e:	4770      	bx	lr

00031c50 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   31c50:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   31c54:	bf08      	it	eq
   31c56:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   31c5a:	b538      	push	{r3, r4, r5, lr}
   31c5c:	4605      	mov	r5, r0
   31c5e:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   31c60:	d01d      	beq.n	31c9e <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   31c62:	ea51 0300 	orrs.w	r3, r1, r0
   31c66:	d103      	bne.n	31c70 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   31c68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   31c6c:	f7f9 bbc2 	b.w	2b3f4 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   31c70:	f06f 0301 	mvn.w	r3, #1
   31c74:	1a18      	subs	r0, r3, r0
   31c76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   31c7a:	eb63 0101 	sbc.w	r1, r3, r1
   31c7e:	2900      	cmp	r1, #0
   31c80:	da0c      	bge.n	31c9c <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   31c82:	f7f9 fbb7 	bl	2b3f4 <sys_clock_tick_get>
   31c86:	2d01      	cmp	r5, #1
   31c88:	4622      	mov	r2, r4
   31c8a:	f174 0400 	sbcs.w	r4, r4, #0
   31c8e:	462b      	mov	r3, r5
   31c90:	bfbc      	itt	lt
   31c92:	2301      	movlt	r3, #1
   31c94:	2200      	movlt	r2, #0
   31c96:	1818      	adds	r0, r3, r0
   31c98:	eb41 0102 	adc.w	r1, r1, r2
}
   31c9c:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   31c9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   31ca2:	4601      	mov	r1, r0
   31ca4:	e7fa      	b.n	31c9c <sys_clock_timeout_end_calc+0x4c>

00031ca6 <k_timer_init>:
	timer->status = 0U;
   31ca6:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   31ca8:	e9c0 1208 	strd	r1, r2, [r0, #32]
   31cac:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   31cb0:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   31cb4:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   31cb8:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   31cba:	6343      	str	r3, [r0, #52]	; 0x34
}
   31cbc:	4770      	bx	lr

00031cbe <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   31cbe:	b510      	push	{r4, lr}
   31cc0:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   31cc2:	f7ff ff7b 	bl	31bbc <z_abort_timeout>

	if (inactive) {
   31cc6:	b9b0      	cbnz	r0, 31cf6 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   31cc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   31cca:	b10b      	cbz	r3, 31cd0 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   31ccc:	4620      	mov	r0, r4
   31cce:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   31cd0:	f104 0018 	add.w	r0, r4, #24
   31cd4:	f7ff ff18 	bl	31b08 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   31cd8:	b168      	cbz	r0, 31cf6 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   31cda:	f7ff feb9 	bl	31a50 <z_ready_thread>
	__asm__ volatile(
   31cde:	f04f 0320 	mov.w	r3, #32
   31ce2:	f3ef 8011 	mrs	r0, BASEPRI
   31ce6:	f383 8812 	msr	BASEPRI_MAX, r3
   31cea:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   31cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   31cf2:	f7ff be91 	b.w	31a18 <z_reschedule_irqlock>
   31cf6:	bd10      	pop	{r4, pc}

00031cf8 <add_event>:
{
   31cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31cfa:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   31cfc:	e9d0 1300 	ldrd	r1, r3, [r0]
   31d00:	4288      	cmp	r0, r1
   31d02:	4604      	mov	r4, r0
   31d04:	d00d      	beq.n	31d22 <add_event+0x2a>
	if ((pending == NULL) ||
   31d06:	b163      	cbz	r3, 31d22 <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   31d08:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   31d0a:	b100      	cbz	r0, 31d0e <add_event+0x16>
   31d0c:	3860      	subs	r0, #96	; 0x60
   31d0e:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   31d12:	4639      	mov	r1, r7
   31d14:	f7ff fe53 	bl	319be <z_sched_prio_cmp>
	if ((pending == NULL) ||
   31d18:	2800      	cmp	r0, #0
   31d1a:	dc02      	bgt.n	31d22 <add_event+0x2a>
	return list->head == list;
   31d1c:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   31d1e:	42b4      	cmp	r4, r6
   31d20:	d109      	bne.n	31d36 <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   31d22:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   31d24:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   31d28:	601d      	str	r5, [r3, #0]
	list->tail = node;
   31d2a:	6065      	str	r5, [r4, #4]
}
   31d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   31d2e:	6863      	ldr	r3, [r4, #4]
   31d30:	42b3      	cmp	r3, r6
   31d32:	d0f6      	beq.n	31d22 <add_event+0x2a>
   31d34:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   31d36:	2e00      	cmp	r6, #0
   31d38:	d0f3      	beq.n	31d22 <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   31d3a:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   31d3c:	b101      	cbz	r1, 31d40 <add_event+0x48>
   31d3e:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   31d40:	4638      	mov	r0, r7
   31d42:	f7ff fe3c 	bl	319be <z_sched_prio_cmp>
   31d46:	2800      	cmp	r0, #0
   31d48:	ddf1      	ble.n	31d2e <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   31d4a:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   31d4c:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   31d50:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   31d52:	6075      	str	r5, [r6, #4]
			return;
   31d54:	e7ea      	b.n	31d2c <add_event+0x34>

00031d56 <register_events>:
{
   31d56:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   31d5a:	2500      	movs	r5, #0
{
   31d5c:	468b      	mov	fp, r1
   31d5e:	4614      	mov	r4, r2
   31d60:	461f      	mov	r7, r3
   31d62:	4682      	mov	sl, r0
	int events_registered = 0;
   31d64:	462e      	mov	r6, r5
	event->poller = NULL;
   31d66:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   31d68:	455d      	cmp	r5, fp
   31d6a:	db02      	blt.n	31d72 <register_events+0x1c>
}
   31d6c:	4630      	mov	r0, r6
   31d6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31d72:	f04f 0320 	mov.w	r3, #32
   31d76:	f3ef 8911 	mrs	r9, BASEPRI
   31d7a:	f383 8812 	msr	BASEPRI_MAX, r3
   31d7e:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   31d82:	f89a 300d 	ldrb.w	r3, [sl, #13]
   31d86:	f003 031f 	and.w	r3, r3, #31
   31d8a:	3b01      	subs	r3, #1
   31d8c:	2b07      	cmp	r3, #7
   31d8e:	d80f      	bhi.n	31db0 <register_events+0x5a>
   31d90:	e8df f003 	tbb	[pc, r3]
   31d94:	0a0e041e 	.word	0x0a0e041e
   31d98:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   31d9c:	f8da 3010 	ldr.w	r3, [sl, #16]
   31da0:	689b      	ldr	r3, [r3, #8]
   31da2:	b12b      	cbz	r3, 31db0 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   31da4:	2302      	movs	r3, #2
   31da6:	e020      	b.n	31dea <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   31da8:	f8da 3010 	ldr.w	r3, [sl, #16]
   31dac:	681b      	ldr	r3, [r3, #0]
   31dae:	bb8b      	cbnz	r3, 31e14 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   31db0:	bb47      	cbnz	r7, 31e04 <register_events+0xae>
   31db2:	7823      	ldrb	r3, [r4, #0]
   31db4:	b333      	cbz	r3, 31e04 <register_events+0xae>
	switch (event->type) {
   31db6:	f89a 300d 	ldrb.w	r3, [sl, #13]
   31dba:	f003 031f 	and.w	r3, r3, #31
   31dbe:	3b01      	subs	r3, #1
   31dc0:	2b07      	cmp	r3, #7
   31dc2:	d830      	bhi.n	31e26 <register_events+0xd0>
   31dc4:	e8df f003 	tbb	[pc, r3]
   31dc8:	282f2833 	.word	0x282f2833
   31dcc:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   31dd0:	f8da 3010 	ldr.w	r3, [sl, #16]
   31dd4:	689b      	ldr	r3, [r3, #8]
   31dd6:	2b00      	cmp	r3, #0
   31dd8:	d0ea      	beq.n	31db0 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   31dda:	2301      	movs	r3, #1
   31ddc:	e005      	b.n	31dea <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   31dde:	f8da 3010 	ldr.w	r3, [sl, #16]
   31de2:	6a1b      	ldr	r3, [r3, #32]
   31de4:	2b00      	cmp	r3, #0
   31de6:	d0e3      	beq.n	31db0 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   31de8:	2310      	movs	r3, #16
	event->state |= state;
   31dea:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   31dee:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   31df2:	f3c2 3145 	ubfx	r1, r2, #13, #6
   31df6:	430b      	orrs	r3, r1
   31df8:	f363 3252 	bfi	r2, r3, #13, #6
   31dfc:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   31e00:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   31e04:	f389 8811 	msr	BASEPRI, r9
   31e08:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   31e0c:	3501      	adds	r5, #1
   31e0e:	f10a 0a14 	add.w	sl, sl, #20
   31e12:	e7a9      	b.n	31d68 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   31e14:	2304      	movs	r3, #4
   31e16:	e7e8      	b.n	31dea <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   31e18:	f8da 0010 	ldr.w	r0, [sl, #16]
   31e1c:	4622      	mov	r2, r4
   31e1e:	4651      	mov	r1, sl
   31e20:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   31e22:	f7ff ff69 	bl	31cf8 <add_event>
	event->poller = poller;
   31e26:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   31e2a:	3601      	adds	r6, #1
   31e2c:	e7ea      	b.n	31e04 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   31e2e:	f8da 0010 	ldr.w	r0, [sl, #16]
   31e32:	4622      	mov	r2, r4
   31e34:	4651      	mov	r1, sl
   31e36:	e7f4      	b.n	31e22 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   31e38:	f8da 0010 	ldr.w	r0, [sl, #16]
   31e3c:	4622      	mov	r2, r4
   31e3e:	4651      	mov	r1, sl
   31e40:	3024      	adds	r0, #36	; 0x24
   31e42:	e7ee      	b.n	31e22 <register_events+0xcc>

00031e44 <signal_poll_event>:
{
   31e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   31e48:	6884      	ldr	r4, [r0, #8]
{
   31e4a:	4605      	mov	r5, r0
   31e4c:	460e      	mov	r6, r1
	if (poller != NULL) {
   31e4e:	b144      	cbz	r4, 31e62 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   31e50:	7863      	ldrb	r3, [r4, #1]
   31e52:	2b01      	cmp	r3, #1
   31e54:	d136      	bne.n	31ec4 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   31e56:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   31e5a:	f013 0302 	ands.w	r3, r3, #2
   31e5e:	d10a      	bne.n	31e76 <signal_poll_event+0x32>
		poller->is_polling = false;
   31e60:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   31e62:	68eb      	ldr	r3, [r5, #12]
   31e64:	f3c3 3145 	ubfx	r1, r3, #13, #6
   31e68:	430e      	orrs	r6, r1
	event->poller = NULL;
   31e6a:	2000      	movs	r0, #0
	event->state |= state;
   31e6c:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   31e70:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   31e72:	60eb      	str	r3, [r5, #12]
	return retcode;
   31e74:	e00b      	b.n	31e8e <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   31e76:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   31e7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   31e7e:	bf08      	it	eq
   31e80:	f112 0f02 	cmneq.w	r2, #2
   31e84:	d105      	bne.n	31e92 <signal_poll_event+0x4e>
		poller->is_polling = false;
   31e86:	2300      	movs	r3, #0
   31e88:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   31e8a:	f06f 000a 	mvn.w	r0, #10
}
   31e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   31e92:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   31e96:	4640      	mov	r0, r8
   31e98:	f7ff fdaa 	bl	319f0 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   31e9c:	2e08      	cmp	r6, #8
   31e9e:	bf0c      	ite	eq
   31ea0:	f06f 0303 	mvneq.w	r3, #3
   31ea4:	2300      	movne	r3, #0
   31ea6:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   31ea8:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   31eac:	06db      	lsls	r3, r3, #27
   31eae:	d102      	bne.n	31eb6 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   31eb0:	f854 7c48 	ldr.w	r7, [r4, #-72]
   31eb4:	b10f      	cbz	r7, 31eba <signal_poll_event+0x76>
		poller->is_polling = false;
   31eb6:	2300      	movs	r3, #0
   31eb8:	e7d2      	b.n	31e60 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   31eba:	4640      	mov	r0, r8
   31ebc:	f7ff fdc8 	bl	31a50 <z_ready_thread>
		poller->is_polling = false;
   31ec0:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   31ec2:	e7ce      	b.n	31e62 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   31ec4:	2b02      	cmp	r3, #2
   31ec6:	d1f6      	bne.n	31eb6 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   31ec8:	7823      	ldrb	r3, [r4, #0]
   31eca:	2b00      	cmp	r3, #0
   31ecc:	d0c9      	beq.n	31e62 <signal_poll_event+0x1e>
   31ece:	f854 7c04 	ldr.w	r7, [r4, #-4]
   31ed2:	2f00      	cmp	r7, #0
   31ed4:	d0f4      	beq.n	31ec0 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   31ed6:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   31eda:	f1a4 0914 	sub.w	r9, r4, #20
   31ede:	f104 0014 	add.w	r0, r4, #20
   31ee2:	f7ff fe6b 	bl	31bbc <z_abort_timeout>
		twork->poll_result = 0;
   31ee6:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   31eea:	4649      	mov	r1, r9
   31eec:	4638      	mov	r0, r7
   31eee:	f7ff fceb 	bl	318c8 <k_work_submit_to_queue>
		poller->is_polling = false;
   31ef2:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   31ef6:	e7b4      	b.n	31e62 <signal_poll_event+0x1e>

00031ef8 <clear_event_registrations>:
	while (num_events--) {
   31ef8:	2314      	movs	r3, #20
{
   31efa:	b5f0      	push	{r4, r5, r6, r7, lr}
   31efc:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   31f00:	2400      	movs	r4, #0
   31f02:	2601      	movs	r6, #1
	while (num_events--) {
   31f04:	b901      	cbnz	r1, 31f08 <clear_event_registrations+0x10>
}
   31f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   31f08:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   31f0c:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   31f10:	f003 031f 	and.w	r3, r3, #31
   31f14:	2b08      	cmp	r3, #8
   31f16:	f1a0 0714 	sub.w	r7, r0, #20
   31f1a:	d80d      	bhi.n	31f38 <clear_event_registrations+0x40>
   31f1c:	fa06 f303 	lsl.w	r3, r6, r3
   31f20:	f413 7f8b 	tst.w	r3, #278	; 0x116
   31f24:	d008      	beq.n	31f38 <clear_event_registrations+0x40>
	return node->next != NULL;
   31f26:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   31f2a:	b12b      	cbz	r3, 31f38 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   31f2c:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   31f30:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   31f32:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   31f34:	e940 4405 	strd	r4, r4, [r0, #-20]
   31f38:	f382 8811 	msr	BASEPRI, r2
   31f3c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   31f40:	f04f 0320 	mov.w	r3, #32
   31f44:	f3ef 8211 	mrs	r2, BASEPRI
   31f48:	f383 8812 	msr	BASEPRI_MAX, r3
   31f4c:	f3bf 8f6f 	isb	sy
   31f50:	3901      	subs	r1, #1
   31f52:	4638      	mov	r0, r7
   31f54:	e7d6      	b.n	31f04 <clear_event_registrations+0xc>

00031f56 <k_poll_event_init>:
{
   31f56:	b510      	push	{r4, lr}
	event->type = type;
   31f58:	04d2      	lsls	r2, r2, #19
   31f5a:	0209      	lsls	r1, r1, #8
   31f5c:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   31f60:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   31f64:	430a      	orrs	r2, r1
   31f66:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   31f68:	2400      	movs	r4, #0
	event->type = type;
   31f6a:	430a      	orrs	r2, r1
	event->obj = obj;
   31f6c:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   31f70:	6084      	str	r4, [r0, #8]
}
   31f72:	bd10      	pop	{r4, pc}

00031f74 <z_handle_obj_poll_events>:
{
   31f74:	4603      	mov	r3, r0
	return list->head == list;
   31f76:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   31f78:	4283      	cmp	r3, r0
   31f7a:	d008      	beq.n	31f8e <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   31f7c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   31f80:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   31f82:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   31f84:	2300      	movs	r3, #0
	node->prev = NULL;
   31f86:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   31f8a:	f7ff bf5b 	b.w	31e44 <signal_poll_event>
}
   31f8e:	4770      	bx	lr

00031f90 <k_free>:
	if (ptr != NULL) {
   31f90:	b120      	cbz	r0, 31f9c <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   31f92:	1f01      	subs	r1, r0, #4
   31f94:	f850 0c04 	ldr.w	r0, [r0, #-4]
   31f98:	f7ff bad7 	b.w	3154a <k_heap_free>
}
   31f9c:	4770      	bx	lr
	...

00031fa0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   31fa0:	f7f7 b9c8 	b.w	29334 <SystemInit>
