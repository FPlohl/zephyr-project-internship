
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_table-0x200>:
	...

0000c200 <_vector_table>:
    c200:	80 10 00 20 21 da 00 00 c3 25 01 00 f5 d9 00 00     ... !....%......
    c210:	f5 d9 00 00 f5 d9 00 00 f5 d9 00 00 00 00 00 00     ................
	...
    c22c:	fd d6 00 00 f5 d9 00 00 00 00 00 00 a9 d6 00 00     ................
    c23c:	f5 d9 00 00                                         ....

0000c240 <_irq_vector_table>:
    c240:	ad d7 00 00 ad d7 00 00 ad d7 00 00 ad d7 00 00     ................
    c250:	ad d7 00 00 ad d7 00 00 ad d7 00 00 ad d7 00 00     ................
    c260:	ad d7 00 00 ad d7 00 00 ad d7 00 00 ad d7 00 00     ................
    c270:	ad d7 00 00 ad d7 00 00 ad d7 00 00 ad d7 00 00     ................
    c280:	ad d7 00 00 ad d7 00 00 ad d7 00 00 ad d7 00 00     ................
    c290:	ad d7 00 00 ad d7 00 00 ad d7 00 00 ad d7 00 00     ................
    c2a0:	ad d7 00 00 ad d7 00 00 ad d7 00 00 ad d7 00 00     ................
    c2b0:	ad d7 00 00 ad d7 00 00 ad d7 00 00 ad d7 00 00     ................
    c2c0:	ad d7 00 00 ad d7 00 00 ad d7 00 00 ad d7 00 00     ................
    c2d0:	ad d7 00 00 ad d7 00 00 ad d7 00 00 ad d7 00 00     ................
    c2e0:	ad d7 00 00 ad d7 00 00 ad d7 00 00 ad d7 00 00     ................
    c2f0:	ad d7 00 00 ad d7 00 00 ad d7 00 00 ad d7 00 00     ................

Disassembly of section text:

0000c300 <__aeabi_uldivmod>:
    c300:	b953      	cbnz	r3, c318 <__aeabi_uldivmod+0x18>
    c302:	b94a      	cbnz	r2, c318 <__aeabi_uldivmod+0x18>
    c304:	2900      	cmp	r1, #0
    c306:	bf08      	it	eq
    c308:	2800      	cmpeq	r0, #0
    c30a:	bf1c      	itt	ne
    c30c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    c310:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c314:	f000 b80c 	b.w	c330 <__aeabi_idiv0>
    c318:	f1ad 0c08 	sub.w	ip, sp, #8
    c31c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c320:	f000 f808 	bl	c334 <__udivmoddi4>
    c324:	f8dd e004 	ldr.w	lr, [sp, #4]
    c328:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c32c:	b004      	add	sp, #16
    c32e:	4770      	bx	lr

0000c330 <__aeabi_idiv0>:
    c330:	4770      	bx	lr
    c332:	bf00      	nop

0000c334 <__udivmoddi4>:
    c334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c338:	4607      	mov	r7, r0
    c33a:	468c      	mov	ip, r1
    c33c:	4608      	mov	r0, r1
    c33e:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c340:	4615      	mov	r5, r2
    c342:	463c      	mov	r4, r7
    c344:	4619      	mov	r1, r3
    c346:	2b00      	cmp	r3, #0
    c348:	f040 80c6 	bne.w	c4d8 <__udivmoddi4+0x1a4>
    c34c:	4282      	cmp	r2, r0
    c34e:	fab2 f782 	clz	r7, r2
    c352:	d946      	bls.n	c3e2 <__udivmoddi4+0xae>
    c354:	b14f      	cbz	r7, c36a <__udivmoddi4+0x36>
    c356:	f1c7 0e20 	rsb	lr, r7, #32
    c35a:	fa24 fe0e 	lsr.w	lr, r4, lr
    c35e:	fa00 f307 	lsl.w	r3, r0, r7
    c362:	40bd      	lsls	r5, r7
    c364:	ea4e 0c03 	orr.w	ip, lr, r3
    c368:	40bc      	lsls	r4, r7
    c36a:	ea4f 4815 	mov.w	r8, r5, lsr #16
    c36e:	fa1f fe85 	uxth.w	lr, r5
    c372:	fbbc f9f8 	udiv	r9, ip, r8
    c376:	0c22      	lsrs	r2, r4, #16
    c378:	fb08 c319 	mls	r3, r8, r9, ip
    c37c:	fb09 fa0e 	mul.w	sl, r9, lr
    c380:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    c384:	459a      	cmp	sl, r3
    c386:	d928      	bls.n	c3da <__udivmoddi4+0xa6>
    c388:	18eb      	adds	r3, r5, r3
    c38a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    c38e:	d204      	bcs.n	c39a <__udivmoddi4+0x66>
    c390:	459a      	cmp	sl, r3
    c392:	d902      	bls.n	c39a <__udivmoddi4+0x66>
    c394:	f1a9 0002 	sub.w	r0, r9, #2
    c398:	442b      	add	r3, r5
    c39a:	eba3 030a 	sub.w	r3, r3, sl
    c39e:	b2a4      	uxth	r4, r4
    c3a0:	fbb3 f2f8 	udiv	r2, r3, r8
    c3a4:	fb08 3312 	mls	r3, r8, r2, r3
    c3a8:	fb02 fe0e 	mul.w	lr, r2, lr
    c3ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c3b0:	45a6      	cmp	lr, r4
    c3b2:	d914      	bls.n	c3de <__udivmoddi4+0xaa>
    c3b4:	192c      	adds	r4, r5, r4
    c3b6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
    c3ba:	d203      	bcs.n	c3c4 <__udivmoddi4+0x90>
    c3bc:	45a6      	cmp	lr, r4
    c3be:	d901      	bls.n	c3c4 <__udivmoddi4+0x90>
    c3c0:	1e93      	subs	r3, r2, #2
    c3c2:	442c      	add	r4, r5
    c3c4:	eba4 040e 	sub.w	r4, r4, lr
    c3c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c3cc:	b11e      	cbz	r6, c3d6 <__udivmoddi4+0xa2>
    c3ce:	40fc      	lsrs	r4, r7
    c3d0:	2300      	movs	r3, #0
    c3d2:	6034      	str	r4, [r6, #0]
    c3d4:	6073      	str	r3, [r6, #4]
    c3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c3da:	4648      	mov	r0, r9
    c3dc:	e7dd      	b.n	c39a <__udivmoddi4+0x66>
    c3de:	4613      	mov	r3, r2
    c3e0:	e7f0      	b.n	c3c4 <__udivmoddi4+0x90>
    c3e2:	b902      	cbnz	r2, c3e6 <__udivmoddi4+0xb2>
    c3e4:	deff      	udf	#255	; 0xff
    c3e6:	bb87      	cbnz	r7, c44a <__udivmoddi4+0x116>
    c3e8:	1a83      	subs	r3, r0, r2
    c3ea:	2101      	movs	r1, #1
    c3ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c3f0:	b2aa      	uxth	r2, r5
    c3f2:	fbb3 fcfe 	udiv	ip, r3, lr
    c3f6:	0c20      	lsrs	r0, r4, #16
    c3f8:	fb0e 331c 	mls	r3, lr, ip, r3
    c3fc:	fb0c f802 	mul.w	r8, ip, r2
    c400:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    c404:	4598      	cmp	r8, r3
    c406:	d963      	bls.n	c4d0 <__udivmoddi4+0x19c>
    c408:	18eb      	adds	r3, r5, r3
    c40a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    c40e:	d204      	bcs.n	c41a <__udivmoddi4+0xe6>
    c410:	4598      	cmp	r8, r3
    c412:	d902      	bls.n	c41a <__udivmoddi4+0xe6>
    c414:	f1ac 0002 	sub.w	r0, ip, #2
    c418:	442b      	add	r3, r5
    c41a:	eba3 0308 	sub.w	r3, r3, r8
    c41e:	b2a4      	uxth	r4, r4
    c420:	fbb3 fcfe 	udiv	ip, r3, lr
    c424:	fb0e 331c 	mls	r3, lr, ip, r3
    c428:	fb0c f202 	mul.w	r2, ip, r2
    c42c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c430:	42a2      	cmp	r2, r4
    c432:	d94f      	bls.n	c4d4 <__udivmoddi4+0x1a0>
    c434:	192c      	adds	r4, r5, r4
    c436:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    c43a:	d204      	bcs.n	c446 <__udivmoddi4+0x112>
    c43c:	42a2      	cmp	r2, r4
    c43e:	d902      	bls.n	c446 <__udivmoddi4+0x112>
    c440:	f1ac 0302 	sub.w	r3, ip, #2
    c444:	442c      	add	r4, r5
    c446:	1aa4      	subs	r4, r4, r2
    c448:	e7be      	b.n	c3c8 <__udivmoddi4+0x94>
    c44a:	f1c7 0c20 	rsb	ip, r7, #32
    c44e:	fa20 f80c 	lsr.w	r8, r0, ip
    c452:	fa00 f307 	lsl.w	r3, r0, r7
    c456:	fa24 fc0c 	lsr.w	ip, r4, ip
    c45a:	40bd      	lsls	r5, r7
    c45c:	ea4c 0203 	orr.w	r2, ip, r3
    c460:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c464:	b2ab      	uxth	r3, r5
    c466:	fbb8 fcfe 	udiv	ip, r8, lr
    c46a:	0c11      	lsrs	r1, r2, #16
    c46c:	fb0e 801c 	mls	r0, lr, ip, r8
    c470:	fb0c f903 	mul.w	r9, ip, r3
    c474:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    c478:	4581      	cmp	r9, r0
    c47a:	fa04 f407 	lsl.w	r4, r4, r7
    c47e:	d923      	bls.n	c4c8 <__udivmoddi4+0x194>
    c480:	1828      	adds	r0, r5, r0
    c482:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    c486:	d204      	bcs.n	c492 <__udivmoddi4+0x15e>
    c488:	4581      	cmp	r9, r0
    c48a:	d902      	bls.n	c492 <__udivmoddi4+0x15e>
    c48c:	f1ac 0102 	sub.w	r1, ip, #2
    c490:	4428      	add	r0, r5
    c492:	eba0 0009 	sub.w	r0, r0, r9
    c496:	b292      	uxth	r2, r2
    c498:	fbb0 fcfe 	udiv	ip, r0, lr
    c49c:	fb0e 001c 	mls	r0, lr, ip, r0
    c4a0:	fb0c f803 	mul.w	r8, ip, r3
    c4a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
    c4a8:	4598      	cmp	r8, r3
    c4aa:	d90f      	bls.n	c4cc <__udivmoddi4+0x198>
    c4ac:	18eb      	adds	r3, r5, r3
    c4ae:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
    c4b2:	d204      	bcs.n	c4be <__udivmoddi4+0x18a>
    c4b4:	4598      	cmp	r8, r3
    c4b6:	d902      	bls.n	c4be <__udivmoddi4+0x18a>
    c4b8:	f1ac 0202 	sub.w	r2, ip, #2
    c4bc:	442b      	add	r3, r5
    c4be:	eba3 0308 	sub.w	r3, r3, r8
    c4c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    c4c6:	e791      	b.n	c3ec <__udivmoddi4+0xb8>
    c4c8:	4661      	mov	r1, ip
    c4ca:	e7e2      	b.n	c492 <__udivmoddi4+0x15e>
    c4cc:	4662      	mov	r2, ip
    c4ce:	e7f6      	b.n	c4be <__udivmoddi4+0x18a>
    c4d0:	4660      	mov	r0, ip
    c4d2:	e7a2      	b.n	c41a <__udivmoddi4+0xe6>
    c4d4:	4663      	mov	r3, ip
    c4d6:	e7b6      	b.n	c446 <__udivmoddi4+0x112>
    c4d8:	4283      	cmp	r3, r0
    c4da:	d905      	bls.n	c4e8 <__udivmoddi4+0x1b4>
    c4dc:	b10e      	cbz	r6, c4e2 <__udivmoddi4+0x1ae>
    c4de:	e9c6 7000 	strd	r7, r0, [r6]
    c4e2:	2100      	movs	r1, #0
    c4e4:	4608      	mov	r0, r1
    c4e6:	e776      	b.n	c3d6 <__udivmoddi4+0xa2>
    c4e8:	fab3 f183 	clz	r1, r3
    c4ec:	b981      	cbnz	r1, c510 <__udivmoddi4+0x1dc>
    c4ee:	4283      	cmp	r3, r0
    c4f0:	d301      	bcc.n	c4f6 <__udivmoddi4+0x1c2>
    c4f2:	42ba      	cmp	r2, r7
    c4f4:	d80a      	bhi.n	c50c <__udivmoddi4+0x1d8>
    c4f6:	1abc      	subs	r4, r7, r2
    c4f8:	eb60 0303 	sbc.w	r3, r0, r3
    c4fc:	2001      	movs	r0, #1
    c4fe:	469c      	mov	ip, r3
    c500:	2e00      	cmp	r6, #0
    c502:	d068      	beq.n	c5d6 <__udivmoddi4+0x2a2>
    c504:	e9c6 4c00 	strd	r4, ip, [r6]
    c508:	2100      	movs	r1, #0
    c50a:	e764      	b.n	c3d6 <__udivmoddi4+0xa2>
    c50c:	4608      	mov	r0, r1
    c50e:	e7f7      	b.n	c500 <__udivmoddi4+0x1cc>
    c510:	f1c1 0c20 	rsb	ip, r1, #32
    c514:	408b      	lsls	r3, r1
    c516:	fa22 f40c 	lsr.w	r4, r2, ip
    c51a:	431c      	orrs	r4, r3
    c51c:	fa02 f501 	lsl.w	r5, r2, r1
    c520:	fa00 f301 	lsl.w	r3, r0, r1
    c524:	fa27 f20c 	lsr.w	r2, r7, ip
    c528:	fa20 fb0c 	lsr.w	fp, r0, ip
    c52c:	ea4f 4914 	mov.w	r9, r4, lsr #16
    c530:	4313      	orrs	r3, r2
    c532:	fbbb f8f9 	udiv	r8, fp, r9
    c536:	fa1f fe84 	uxth.w	lr, r4
    c53a:	fb09 bb18 	mls	fp, r9, r8, fp
    c53e:	0c1a      	lsrs	r2, r3, #16
    c540:	fb08 fa0e 	mul.w	sl, r8, lr
    c544:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
    c548:	4592      	cmp	sl, r2
    c54a:	fa07 f701 	lsl.w	r7, r7, r1
    c54e:	d93e      	bls.n	c5ce <__udivmoddi4+0x29a>
    c550:	18a2      	adds	r2, r4, r2
    c552:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    c556:	d204      	bcs.n	c562 <__udivmoddi4+0x22e>
    c558:	4592      	cmp	sl, r2
    c55a:	d902      	bls.n	c562 <__udivmoddi4+0x22e>
    c55c:	f1a8 0002 	sub.w	r0, r8, #2
    c560:	4422      	add	r2, r4
    c562:	eba2 020a 	sub.w	r2, r2, sl
    c566:	b29b      	uxth	r3, r3
    c568:	fbb2 f8f9 	udiv	r8, r2, r9
    c56c:	fb09 2218 	mls	r2, r9, r8, r2
    c570:	fb08 fe0e 	mul.w	lr, r8, lr
    c574:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    c578:	4596      	cmp	lr, r2
    c57a:	d92a      	bls.n	c5d2 <__udivmoddi4+0x29e>
    c57c:	18a2      	adds	r2, r4, r2
    c57e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    c582:	d204      	bcs.n	c58e <__udivmoddi4+0x25a>
    c584:	4596      	cmp	lr, r2
    c586:	d902      	bls.n	c58e <__udivmoddi4+0x25a>
    c588:	f1a8 0302 	sub.w	r3, r8, #2
    c58c:	4422      	add	r2, r4
    c58e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c592:	fba0 9305 	umull	r9, r3, r0, r5
    c596:	eba2 020e 	sub.w	r2, r2, lr
    c59a:	429a      	cmp	r2, r3
    c59c:	46ce      	mov	lr, r9
    c59e:	4698      	mov	r8, r3
    c5a0:	d302      	bcc.n	c5a8 <__udivmoddi4+0x274>
    c5a2:	d106      	bne.n	c5b2 <__udivmoddi4+0x27e>
    c5a4:	454f      	cmp	r7, r9
    c5a6:	d204      	bcs.n	c5b2 <__udivmoddi4+0x27e>
    c5a8:	ebb9 0e05 	subs.w	lr, r9, r5
    c5ac:	eb63 0804 	sbc.w	r8, r3, r4
    c5b0:	3801      	subs	r0, #1
    c5b2:	b186      	cbz	r6, c5d6 <__udivmoddi4+0x2a2>
    c5b4:	ebb7 030e 	subs.w	r3, r7, lr
    c5b8:	eb62 0708 	sbc.w	r7, r2, r8
    c5bc:	fa07 fc0c 	lsl.w	ip, r7, ip
    c5c0:	40cb      	lsrs	r3, r1
    c5c2:	ea4c 0303 	orr.w	r3, ip, r3
    c5c6:	40cf      	lsrs	r7, r1
    c5c8:	e9c6 3700 	strd	r3, r7, [r6]
    c5cc:	e79c      	b.n	c508 <__udivmoddi4+0x1d4>
    c5ce:	4640      	mov	r0, r8
    c5d0:	e7c7      	b.n	c562 <__udivmoddi4+0x22e>
    c5d2:	4643      	mov	r3, r8
    c5d4:	e7db      	b.n	c58e <__udivmoddi4+0x25a>
    c5d6:	4631      	mov	r1, r6
    c5d8:	e6fd      	b.n	c3d6 <__udivmoddi4+0xa2>
	...

0000c5dc <main>:

static const struct gpio_dt_spec led0 = GPIO_DT_SPEC_GET(LED0_NODE, gpios);
static const struct gpio_dt_spec led1 = GPIO_DT_SPEC_GET(LED1_NODE, gpios);

void main(void)
{
    c5dc:	b508      	push	{r3, lr}
	printk("build time: " __DATE__ " " __TIME__ "\n");
    c5de:	480f      	ldr	r0, [pc, #60]	; (c61c <main+0x40>)
    c5e0:	f005 fbc9 	bl	11d76 <printk>
	os_mgmt_register_group();
    c5e4:	f002 f8ea 	bl	e7bc <os_mgmt_register_group>
	img_mgmt_register_group();
    c5e8:	f001 ff76 	bl	e4d8 <img_mgmt_register_group>


	gpio_pin_configure_dt(&led0, GPIO_OUTPUT_ACTIVE);
    c5ec:	480c      	ldr	r0, [pc, #48]	; (c620 <main+0x44>)
    c5ee:	f005 fb74 	bl	11cda <gpio_pin_configure_dt.constprop.0.isra.0>
	gpio_pin_configure_dt(&led1, GPIO_OUTPUT_ACTIVE);
    c5f2:	480c      	ldr	r0, [pc, #48]	; (c624 <main+0x48>)
    c5f4:	f005 fb71 	bl	11cda <gpio_pin_configure_dt.constprop.0.isra.0>
					       gpio_port_pins_t pins)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_toggle_bits(port, pins);
    c5f8:	4b0b      	ldr	r3, [pc, #44]	; (c628 <main+0x4c>)
    c5fa:	689c      	ldr	r4, [r3, #8]
    c5fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    c600:	6963      	ldr	r3, [r4, #20]
    c602:	4809      	ldr	r0, [pc, #36]	; (c628 <main+0x4c>)
    c604:	4798      	blx	r3
    c606:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    c60a:	6963      	ldr	r3, [r4, #20]
    c60c:	4806      	ldr	r0, [pc, #24]	; (c628 <main+0x4c>)
    c60e:	4798      	blx	r3
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    c610:	2100      	movs	r1, #0
    c612:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    c616:	f005 f89b 	bl	11750 <z_impl_k_sleep>
    c61a:	e7ef      	b.n	c5fc <main+0x20>
    c61c:	000153e8 	.word	0x000153e8
    c620:	00015158 	.word	0x00015158
    c624:	00015160 	.word	0x00015160
    c628:	00014f30 	.word	0x00014f30

0000c62c <base64_encode>:
/*
 * Encode a buffer into base64 format
 */
int base64_encode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    c62c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c630:	4605      	mov	r5, r0
    c632:	9807      	ldr	r0, [sp, #28]
	size_t i, n;
	int C1, C2, C3;
	uint8_t *p;

	if (slen == 0) {
    c634:	b910      	cbnz	r0, c63c <base64_encode+0x10>
		*olen = 0;
    c636:	6010      	str	r0, [r2, #0]

	*olen = p - dst;
	*p = 0U;

	return 0;
}
    c638:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	n = slen / 3 + (slen % 3 != 0);
    c63c:	2403      	movs	r4, #3
    c63e:	fbb0 f4f4 	udiv	r4, r0, r4
    c642:	eb04 0744 	add.w	r7, r4, r4, lsl #1
    c646:	42b8      	cmp	r0, r7
    c648:	bf18      	it	ne
    c64a:	3401      	addne	r4, #1
	if (n > (BASE64_SIZE_T_MAX - 1) / 4) {
    c64c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    c650:	d305      	bcc.n	c65e <base64_encode+0x32>
		*olen = BASE64_SIZE_T_MAX;
    c652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c656:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
    c658:	f06f 000b 	mvn.w	r0, #11
    c65c:	e7ec      	b.n	c638 <base64_encode+0xc>
	n *= 4;
    c65e:	00a4      	lsls	r4, r4, #2
	if ((dlen < n + 1) || (!dst)) {
    c660:	3401      	adds	r4, #1
    c662:	428c      	cmp	r4, r1
    c664:	d800      	bhi.n	c668 <base64_encode+0x3c>
    c666:	b90d      	cbnz	r5, c66c <base64_encode+0x40>
		*olen = n + 1;
    c668:	6014      	str	r4, [r2, #0]
    c66a:	e7f5      	b.n	c658 <base64_encode+0x2c>
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    c66c:	f8df e0bc 	ldr.w	lr, [pc, #188]	; c72c <base64_encode+0x100>
    c670:	462e      	mov	r6, r5
	for (i = 0, p = dst; i < n; i += 3) {
    c672:	2400      	movs	r4, #0
    c674:	42bc      	cmp	r4, r7
    c676:	4631      	mov	r1, r6
    c678:	469c      	mov	ip, r3
    c67a:	f106 0604 	add.w	r6, r6, #4
    c67e:	f103 0303 	add.w	r3, r3, #3
    c682:	d32c      	bcc.n	c6de <base64_encode+0xb2>
	if (i < slen) {
    c684:	4284      	cmp	r4, r0
    c686:	d225      	bcs.n	c6d4 <base64_encode+0xa8>
		C1 = *src++;
    c688:	f89c 6000 	ldrb.w	r6, [ip]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    c68c:	4f27      	ldr	r7, [pc, #156]	; (c72c <base64_encode+0x100>)
		C2 = ((i + 1) < slen) ? *src++ : 0;
    c68e:	3401      	adds	r4, #1
    c690:	4284      	cmp	r4, r0
    c692:	bf38      	it	cc
    c694:	f89c 3001 	ldrbcc.w	r3, [ip, #1]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    c698:	ea4f 0ca6 	mov.w	ip, r6, asr #2
		C2 = ((i + 1) < slen) ? *src++ : 0;
    c69c:	bf28      	it	cs
    c69e:	2300      	movcs	r3, #0
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    c6a0:	f817 c00c 	ldrb.w	ip, [r7, ip]
    c6a4:	f881 c000 	strb.w	ip, [r1]
		if ((i + 1) < slen) {
    c6a8:	4284      	cmp	r4, r0
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    c6aa:	eb07 1c13 	add.w	ip, r7, r3, lsr #4
			*p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
    c6ae:	bf3c      	itt	cc
    c6b0:	009b      	lslcc	r3, r3, #2
    c6b2:	f003 033c 	andcc.w	r3, r3, #60	; 0x3c
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    c6b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
    c6ba:	f006 0630 	and.w	r6, r6, #48	; 0x30
			*p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
    c6be:	bf38      	it	cc
    c6c0:	5cfb      	ldrbcc	r3, [r7, r3]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    c6c2:	f81c 6006 	ldrb.w	r6, [ip, r6]
    c6c6:	704e      	strb	r6, [r1, #1]
			*p++ = '=';
    c6c8:	bf28      	it	cs
    c6ca:	233d      	movcs	r3, #61	; 0x3d
    c6cc:	708b      	strb	r3, [r1, #2]
		*p++ = '=';
    c6ce:	233d      	movs	r3, #61	; 0x3d
    c6d0:	70cb      	strb	r3, [r1, #3]
    c6d2:	3104      	adds	r1, #4
	*olen = p - dst;
    c6d4:	1b4d      	subs	r5, r1, r5
	*p = 0U;
    c6d6:	2000      	movs	r0, #0
	*olen = p - dst;
    c6d8:	6015      	str	r5, [r2, #0]
	*p = 0U;
    c6da:	7008      	strb	r0, [r1, #0]
	return 0;
    c6dc:	e7ac      	b.n	c638 <base64_encode+0xc>
		C1 = *src++;
    c6de:	f813 cc03 	ldrb.w	ip, [r3, #-3]
		C2 = *src++;
    c6e2:	f813 1c02 	ldrb.w	r1, [r3, #-2]
		C3 = *src++;
    c6e6:	f813 8c01 	ldrb.w	r8, [r3, #-1]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    c6ea:	ea4f 09ac 	mov.w	r9, ip, asr #2
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    c6ee:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    c6f2:	f81e 9009 	ldrb.w	r9, [lr, r9]
    c6f6:	f806 9c04 	strb.w	r9, [r6, #-4]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    c6fa:	f00c 0c30 	and.w	ip, ip, #48	; 0x30
    c6fe:	eb0e 1911 	add.w	r9, lr, r1, lsr #4
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    c702:	0089      	lsls	r1, r1, #2
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    c704:	f819 c00c 	ldrb.w	ip, [r9, ip]
    c708:	f806 cc03 	strb.w	ip, [r6, #-3]
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    c70c:	f001 013c 	and.w	r1, r1, #60	; 0x3c
    c710:	eb0e 1c98 	add.w	ip, lr, r8, lsr #6
		*p++ = base64_enc_map[C3 & 0x3F];
    c714:	f008 083f 	and.w	r8, r8, #63	; 0x3f
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    c718:	f81c 1001 	ldrb.w	r1, [ip, r1]
    c71c:	f806 1c02 	strb.w	r1, [r6, #-2]
		*p++ = base64_enc_map[C3 & 0x3F];
    c720:	f81e 1008 	ldrb.w	r1, [lr, r8]
    c724:	f806 1c01 	strb.w	r1, [r6, #-1]
	for (i = 0, p = dst; i < n; i += 3) {
    c728:	3403      	adds	r4, #3
    c72a:	e7a3      	b.n	c674 <base64_encode+0x48>
    c72c:	0001548a 	.word	0x0001548a

0000c730 <base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int base64_decode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    c730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c734:	468c      	mov	ip, r1
    c736:	9e07      	ldr	r6, [sp, #28]

		if (src[i] == '=' && ++j > 2) {
			return -EINVAL;
		}

		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    c738:	f8df 8120 	ldr.w	r8, [pc, #288]	; c85c <base64_decode+0x12c>
	for (i = n = j = 0U; i < slen; i++) {
    c73c:	2100      	movs	r1, #0
{
    c73e:	4607      	mov	r7, r0
	for (i = n = j = 0U; i < slen; i++) {
    c740:	460d      	mov	r5, r1
    c742:	4608      	mov	r0, r1
    c744:	42b5      	cmp	r5, r6
    c746:	d30a      	bcc.n	c75e <base64_decode+0x2e>
    c748:	462e      	mov	r6, r5
    c74a:	e004      	b.n	c756 <base64_decode+0x26>
			++i;
    c74c:	3501      	adds	r5, #1
		while (i < slen && src[i] == ' ') {
    c74e:	42ae      	cmp	r6, r5
			++x;
    c750:	f10e 0e01 	add.w	lr, lr, #1
		while (i < slen && src[i] == ' ') {
    c754:	d105      	bne.n	c762 <base64_decode+0x32>
		}

		n++;
	}

	if (n == 0) {
    c756:	bb90      	cbnz	r0, c7be <base64_decode+0x8e>
		*olen = 0;
    c758:	6010      	str	r0, [r2, #0]
	}

	*olen = p - dst;

	return 0;
}
    c75a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		x = 0U;
    c75e:	f04f 0e00 	mov.w	lr, #0
		while (i < slen && src[i] == ' ') {
    c762:	5d5c      	ldrb	r4, [r3, r5]
    c764:	2c20      	cmp	r4, #32
    c766:	d0f1      	beq.n	c74c <base64_decode+0x1c>
		if (i == slen) {
    c768:	42ae      	cmp	r6, r5
    c76a:	d0f4      	beq.n	c756 <base64_decode+0x26>
		if ((slen - i) >= 2 && src[i] == '\r' && src[i + 1] == '\n') {
    c76c:	eba6 0905 	sub.w	r9, r6, r5
    c770:	f1b9 0f01 	cmp.w	r9, #1
    c774:	d013      	beq.n	c79e <base64_decode+0x6e>
    c776:	2c0d      	cmp	r4, #13
    c778:	d111      	bne.n	c79e <base64_decode+0x6e>
    c77a:	eb03 0905 	add.w	r9, r3, r5
    c77e:	f899 9001 	ldrb.w	r9, [r9, #1]
    c782:	f1b9 0f0a 	cmp.w	r9, #10
		if (src[i] == '\n') {
    c786:	d018      	beq.n	c7ba <base64_decode+0x8a>
		if (x != 0U) {
    c788:	f1be 0f00 	cmp.w	lr, #0
    c78c:	d104      	bne.n	c798 <base64_decode+0x68>
		if (src[i] == '=' && ++j > 2) {
    c78e:	2c3d      	cmp	r4, #61	; 0x3d
    c790:	d107      	bne.n	c7a2 <base64_decode+0x72>
    c792:	3101      	adds	r1, #1
    c794:	2902      	cmp	r1, #2
    c796:	d907      	bls.n	c7a8 <base64_decode+0x78>
			return -EINVAL;
    c798:	f06f 0015 	mvn.w	r0, #21
    c79c:	e7dd      	b.n	c75a <base64_decode+0x2a>
		if (src[i] == '\n') {
    c79e:	2c0a      	cmp	r4, #10
    c7a0:	e7f1      	b.n	c786 <base64_decode+0x56>
		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    c7a2:	f014 0f80 	tst.w	r4, #128	; 0x80
    c7a6:	d1f7      	bne.n	c798 <base64_decode+0x68>
    c7a8:	f818 4004 	ldrb.w	r4, [r8, r4]
    c7ac:	2c7f      	cmp	r4, #127	; 0x7f
    c7ae:	d0f3      	beq.n	c798 <base64_decode+0x68>
		if (base64_dec_map[src[i]] < 64 && j != 0U) {
    c7b0:	2c3f      	cmp	r4, #63	; 0x3f
    c7b2:	d801      	bhi.n	c7b8 <base64_decode+0x88>
    c7b4:	2900      	cmp	r1, #0
    c7b6:	d1ef      	bne.n	c798 <base64_decode+0x68>
		n++;
    c7b8:	3001      	adds	r0, #1
	for (i = n = j = 0U; i < slen; i++) {
    c7ba:	3501      	adds	r5, #1
    c7bc:	e7c2      	b.n	c744 <base64_decode+0x14>
	n = (6 * (n >> 3)) + ((6 * (n & 0x7) + 7) >> 3);
    c7be:	f04f 0e06 	mov.w	lr, #6
    c7c2:	f000 0507 	and.w	r5, r0, #7
    c7c6:	08c4      	lsrs	r4, r0, #3
    c7c8:	fb0e f505 	mul.w	r5, lr, r5
    c7cc:	fb0e f404 	mul.w	r4, lr, r4
    c7d0:	3507      	adds	r5, #7
	n -= j;
    c7d2:	1a64      	subs	r4, r4, r1
    c7d4:	eb04 04d5 	add.w	r4, r4, r5, lsr #3
	if (dst == NULL || dlen < n) {
    c7d8:	b18f      	cbz	r7, c7fe <base64_decode+0xce>
    c7da:	4564      	cmp	r4, ip
    c7dc:	d80f      	bhi.n	c7fe <base64_decode+0xce>
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    c7de:	2400      	movs	r4, #0
		j -= (base64_dec_map[*src] == 64U);
    c7e0:	f8df e078 	ldr.w	lr, [pc, #120]	; c85c <base64_decode+0x12c>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    c7e4:	f8df 8078 	ldr.w	r8, [pc, #120]	; c860 <base64_decode+0x130>
    c7e8:	469c      	mov	ip, r3
    c7ea:	441e      	add	r6, r3
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    c7ec:	2003      	movs	r0, #3
	if (dst == NULL || dlen < n) {
    c7ee:	463b      	mov	r3, r7
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    c7f0:	4621      	mov	r1, r4
    c7f2:	4566      	cmp	r6, ip
    c7f4:	d107      	bne.n	c806 <base64_decode+0xd6>
	*olen = p - dst;
    c7f6:	1bdb      	subs	r3, r3, r7
    c7f8:	6013      	str	r3, [r2, #0]
	return 0;
    c7fa:	2000      	movs	r0, #0
    c7fc:	e7ad      	b.n	c75a <base64_decode+0x2a>
		*olen = n;
    c7fe:	6014      	str	r4, [r2, #0]
		return -ENOMEM;
    c800:	f06f 000b 	mvn.w	r0, #11
    c804:	e7a9      	b.n	c75a <base64_decode+0x2a>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    c806:	f81c 9b01 	ldrb.w	r9, [ip], #1
    c80a:	f1a9 050a 	sub.w	r5, r9, #10
    c80e:	b2ed      	uxtb	r5, r5
    c810:	2d16      	cmp	r5, #22
    c812:	d803      	bhi.n	c81c <base64_decode+0xec>
    c814:	fa28 f505 	lsr.w	r5, r8, r5
    c818:	07ed      	lsls	r5, r5, #31
    c81a:	d4ea      	bmi.n	c7f2 <base64_decode+0xc2>
		j -= (base64_dec_map[*src] == 64U);
    c81c:	f81e 5009 	ldrb.w	r5, [lr, r9]
		if (++n == 4) {
    c820:	3101      	adds	r1, #1
		j -= (base64_dec_map[*src] == 64U);
    c822:	2d40      	cmp	r5, #64	; 0x40
    c824:	bf08      	it	eq
    c826:	3801      	subeq	r0, #1
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    c828:	f005 053f 	and.w	r5, r5, #63	; 0x3f
		if (++n == 4) {
    c82c:	2904      	cmp	r1, #4
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    c82e:	ea45 1484 	orr.w	r4, r5, r4, lsl #6
		if (++n == 4) {
    c832:	d1de      	bne.n	c7f2 <base64_decode+0xc2>
			if (j > 0) {
    c834:	b178      	cbz	r0, c856 <base64_decode+0x126>
				*p++ = (unsigned char)(x >> 16);
    c836:	0c21      	lsrs	r1, r4, #16
			if (j > 1) {
    c838:	2801      	cmp	r0, #1
				*p++ = (unsigned char)(x >> 16);
    c83a:	7019      	strb	r1, [r3, #0]
			if (j > 1) {
    c83c:	d102      	bne.n	c844 <base64_decode+0x114>
				*p++ = (unsigned char)(x >> 16);
    c83e:	3301      	adds	r3, #1
			n = 0;
    c840:	2100      	movs	r1, #0
    c842:	e7d6      	b.n	c7f2 <base64_decode+0xc2>
			if (j > 2) {
    c844:	2802      	cmp	r0, #2
				*p++ = (unsigned char)(x >> 8);
    c846:	ea4f 2114 	mov.w	r1, r4, lsr #8
    c84a:	7059      	strb	r1, [r3, #1]
				*p++ = (unsigned char)(x);
    c84c:	bf16      	itet	ne
    c84e:	709c      	strbne	r4, [r3, #2]
				*p++ = (unsigned char)(x >> 8);
    c850:	3302      	addeq	r3, #2
				*p++ = (unsigned char)(x);
    c852:	3303      	addne	r3, #3
    c854:	e7f4      	b.n	c840 <base64_decode+0x110>
			n = 0;
    c856:	4601      	mov	r1, r0
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    c858:	e7cb      	b.n	c7f2 <base64_decode+0xc2>
    c85a:	bf00      	nop
    c85c:	0001540a 	.word	0x0001540a
    c860:	00400009 	.word	0x00400009

0000c864 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    c864:	680b      	ldr	r3, [r1, #0]
    c866:	3301      	adds	r3, #1
    c868:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    c86a:	4b01      	ldr	r3, [pc, #4]	; (c870 <char_out+0xc>)
    c86c:	681b      	ldr	r3, [r3, #0]
    c86e:	4718      	bx	r3
    c870:	20000000 	.word	0x20000000

0000c874 <__printk_hook_install>:
	_char_out = fn;
    c874:	4b01      	ldr	r3, [pc, #4]	; (c87c <__printk_hook_install+0x8>)
    c876:	6018      	str	r0, [r3, #0]
}
    c878:	4770      	bx	lr
    c87a:	bf00      	nop
    c87c:	20000000 	.word	0x20000000

0000c880 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    c880:	b507      	push	{r0, r1, r2, lr}
    c882:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
    c884:	2100      	movs	r1, #0
{
    c886:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
    c888:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
    c88a:	4803      	ldr	r0, [pc, #12]	; (c898 <vprintk+0x18>)
    c88c:	a901      	add	r1, sp, #4
    c88e:	f000 f8e5 	bl	ca5c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    c892:	b003      	add	sp, #12
    c894:	f85d fb04 	ldr.w	pc, [sp], #4
    c898:	0000c865 	.word	0x0000c865

0000c89c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    c89c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c8a0:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    c8a4:	f019 0808 	ands.w	r8, r9, #8
{
    c8a8:	4604      	mov	r4, r0
    c8aa:	4693      	mov	fp, r2
	if (processing) {
    c8ac:	d00d      	beq.n	c8ca <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    c8ae:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    c8b0:	bf0c      	ite	eq
    c8b2:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    c8b6:	f049 0920 	orrne.w	r9, r9, #32
    c8ba:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    c8be:	f38b 8811 	msr	BASEPRI, fp
    c8c2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    c8c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c8ca:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    c8ce:	2902      	cmp	r1, #2
    c8d0:	d107      	bne.n	c8e2 <process_event+0x46>
			evt = process_recheck(mgr);
    c8d2:	4620      	mov	r0, r4
    c8d4:	f005 fa5c 	bl	11d90 <process_recheck>
		if (evt == EVT_NOP) {
    c8d8:	2800      	cmp	r0, #0
    c8da:	d0f0      	beq.n	c8be <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    c8dc:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c8de:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    c8e0:	d14e      	bne.n	c980 <process_event+0xe4>
			res = mgr->last_res;
    c8e2:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c8e4:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    c8e6:	2f00      	cmp	r7, #0
    c8e8:	da15      	bge.n	c916 <process_event+0x7a>
		*clients = mgr->clients;
    c8ea:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c8ec:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    c8f0:	e9c4 8800 	strd	r8, r8, [r4]
    c8f4:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    c8f8:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    c8fa:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    c8fc:	8b21      	ldrh	r1, [r4, #24]
    c8fe:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    c902:	45ca      	cmp	sl, r9
    c904:	d002      	beq.n	c90c <process_event+0x70>
		if (do_monitors
    c906:	68a3      	ldr	r3, [r4, #8]
    c908:	2b00      	cmp	r3, #0
    c90a:	d15a      	bne.n	c9c2 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    c90c:	b90d      	cbnz	r5, c912 <process_event+0x76>
		    || (transit != NULL)) {
    c90e:	2e00      	cmp	r6, #0
    c910:	d071      	beq.n	c9f6 <process_event+0x15a>
    c912:	2300      	movs	r3, #0
    c914:	e056      	b.n	c9c4 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c916:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    c91a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    c91c:	2a01      	cmp	r2, #1
    c91e:	d81e      	bhi.n	c95e <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c920:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    c924:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    c926:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c928:	b289      	uxth	r1, r1
    c92a:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    c92e:	d10a      	bne.n	c946 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    c930:	b13d      	cbz	r5, c942 <process_event+0xa6>
    c932:	8b63      	ldrh	r3, [r4, #26]
    c934:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    c936:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    c938:	3301      	adds	r3, #1
    c93a:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    c93c:	2a00      	cmp	r2, #0
    c93e:	d1fa      	bne.n	c936 <process_event+0x9a>
    c940:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c942:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    c946:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    c948:	4620      	mov	r0, r4
    c94a:	f005 fa21 	bl	11d90 <process_recheck>
    c94e:	4606      	mov	r6, r0
    c950:	2800      	cmp	r0, #0
    c952:	d0d3      	beq.n	c8fc <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    c954:	8b23      	ldrh	r3, [r4, #24]
    c956:	f043 0320 	orr.w	r3, r3, #32
    c95a:	8323      	strh	r3, [r4, #24]
    c95c:	e7cd      	b.n	c8fa <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    c95e:	2b04      	cmp	r3, #4
    c960:	d10c      	bne.n	c97c <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c962:	f021 0107 	bic.w	r1, r1, #7
    c966:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    c968:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    c96a:	4620      	mov	r0, r4
    c96c:	f005 fa10 	bl	11d90 <process_recheck>
    c970:	4605      	mov	r5, r0
    c972:	2800      	cmp	r0, #0
    c974:	d0c1      	beq.n	c8fa <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    c976:	f041 0120 	orr.w	r1, r1, #32
    c97a:	8321      	strh	r1, [r4, #24]
    c97c:	2500      	movs	r5, #0
    c97e:	e7bc      	b.n	c8fa <process_event+0x5e>
		} else if (evt == EVT_START) {
    c980:	2803      	cmp	r0, #3
    c982:	d109      	bne.n	c998 <process_event+0xfc>
			transit = mgr->transitions->start;
    c984:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c986:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    c98a:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c98c:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    c990:	8323      	strh	r3, [r4, #24]
}
    c992:	2500      	movs	r5, #0
		res = 0;
    c994:	462f      	mov	r7, r5
    c996:	e7b1      	b.n	c8fc <process_event+0x60>
		} else if (evt == EVT_STOP) {
    c998:	2804      	cmp	r0, #4
    c99a:	d106      	bne.n	c9aa <process_event+0x10e>
			transit = mgr->transitions->stop;
    c99c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c99e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    c9a2:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c9a4:	f043 0304 	orr.w	r3, r3, #4
    c9a8:	e7f2      	b.n	c990 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    c9aa:	2805      	cmp	r0, #5
    c9ac:	d106      	bne.n	c9bc <process_event+0x120>
			transit = mgr->transitions->reset;
    c9ae:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c9b0:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    c9b4:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c9b6:	f043 0305 	orr.w	r3, r3, #5
    c9ba:	e7e9      	b.n	c990 <process_event+0xf4>
    c9bc:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    c9be:	462e      	mov	r6, r5
    c9c0:	e7e8      	b.n	c994 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    c9c2:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    c9c4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    c9c8:	8321      	strh	r1, [r4, #24]
    c9ca:	f38b 8811 	msr	BASEPRI, fp
    c9ce:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    c9d2:	b9fb      	cbnz	r3, ca14 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    c9d4:	bb85      	cbnz	r5, ca38 <process_event+0x19c>
			if (transit != NULL) {
    c9d6:	b116      	cbz	r6, c9de <process_event+0x142>
				transit(mgr, transition_complete);
    c9d8:	491f      	ldr	r1, [pc, #124]	; (ca58 <process_event+0x1bc>)
    c9da:	4620      	mov	r0, r4
    c9dc:	47b0      	blx	r6
	__asm__ volatile(
    c9de:	f04f 0320 	mov.w	r3, #32
    c9e2:	f3ef 8b11 	mrs	fp, BASEPRI
    c9e6:	f383 8812 	msr	BASEPRI_MAX, r3
    c9ea:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    c9ee:	8b23      	ldrh	r3, [r4, #24]
    c9f0:	f023 0308 	bic.w	r3, r3, #8
    c9f4:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    c9f6:	8b23      	ldrh	r3, [r4, #24]
    c9f8:	06da      	lsls	r2, r3, #27
    c9fa:	d525      	bpl.n	ca48 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    c9fc:	f023 0310 	bic.w	r3, r3, #16
    ca00:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    ca02:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    ca04:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    ca08:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    ca0c:	2900      	cmp	r1, #0
    ca0e:	f47f af5e 	bne.w	c8ce <process_event+0x32>
out:
    ca12:	e754      	b.n	c8be <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    ca14:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    ca16:	2900      	cmp	r1, #0
    ca18:	d0dc      	beq.n	c9d4 <process_event+0x138>
	return node->next;
    ca1a:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    ca1e:	f8d1 b004 	ldr.w	fp, [r1, #4]
    ca22:	463b      	mov	r3, r7
    ca24:	4652      	mov	r2, sl
    ca26:	4620      	mov	r0, r4
    ca28:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    ca2a:	f1b9 0f00 	cmp.w	r9, #0
    ca2e:	d0d1      	beq.n	c9d4 <process_event+0x138>
    ca30:	4649      	mov	r1, r9
    ca32:	f8d9 9000 	ldr.w	r9, [r9]
    ca36:	e7f2      	b.n	ca1e <process_event+0x182>
    ca38:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    ca3a:	463b      	mov	r3, r7
    ca3c:	4652      	mov	r2, sl
    ca3e:	4620      	mov	r0, r4
    ca40:	682d      	ldr	r5, [r5, #0]
    ca42:	f005 f9c1 	bl	11dc8 <notify_one>
    ca46:	e7c5      	b.n	c9d4 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    ca48:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    ca4c:	bf1e      	ittt	ne
    ca4e:	f023 0320 	bicne.w	r3, r3, #32
    ca52:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    ca54:	2102      	movne	r1, #2
    ca56:	e7d5      	b.n	ca04 <process_event+0x168>
    ca58:	00011df5 	.word	0x00011df5

0000ca5c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    ca5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ca60:	b091      	sub	sp, #68	; 0x44
    ca62:	468b      	mov	fp, r1
    ca64:	9002      	str	r0, [sp, #8]
    ca66:	4692      	mov	sl, r2
    ca68:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    ca6a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    ca6c:	f89a 0000 	ldrb.w	r0, [sl]
    ca70:	b908      	cbnz	r0, ca76 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    ca72:	4628      	mov	r0, r5
    ca74:	e35f      	b.n	d136 <cbvprintf+0x6da>
		if (*fp != '%') {
    ca76:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    ca78:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    ca7c:	d007      	beq.n	ca8e <cbvprintf+0x32>
			OUTC('%');
    ca7e:	9b02      	ldr	r3, [sp, #8]
    ca80:	4659      	mov	r1, fp
    ca82:	4798      	blx	r3
    ca84:	2800      	cmp	r0, #0
    ca86:	f2c0 8356 	blt.w	d136 <cbvprintf+0x6da>
    ca8a:	3501      	adds	r5, #1
			break;
    ca8c:	e212      	b.n	ceb4 <cbvprintf+0x458>
		} state = {
    ca8e:	2218      	movs	r2, #24
    ca90:	2100      	movs	r1, #0
    ca92:	a80a      	add	r0, sp, #40	; 0x28
    ca94:	f005 fdde 	bl	12654 <memset>
	if (*sp == '%') {
    ca98:	f89a 3001 	ldrb.w	r3, [sl, #1]
    ca9c:	2b25      	cmp	r3, #37	; 0x25
    ca9e:	d078      	beq.n	cb92 <cbvprintf+0x136>
    caa0:	2200      	movs	r2, #0
    caa2:	4610      	mov	r0, r2
    caa4:	4696      	mov	lr, r2
    caa6:	4694      	mov	ip, r2
    caa8:	4616      	mov	r6, r2
    caaa:	4639      	mov	r1, r7
		switch (*sp) {
    caac:	f817 3b01 	ldrb.w	r3, [r7], #1
    cab0:	2b2b      	cmp	r3, #43	; 0x2b
    cab2:	f000 809d 	beq.w	cbf0 <cbvprintf+0x194>
    cab6:	f200 8094 	bhi.w	cbe2 <cbvprintf+0x186>
    caba:	2b20      	cmp	r3, #32
    cabc:	f000 809b 	beq.w	cbf6 <cbvprintf+0x19a>
    cac0:	2b23      	cmp	r3, #35	; 0x23
    cac2:	f000 809b 	beq.w	cbfc <cbvprintf+0x1a0>
    cac6:	b12e      	cbz	r6, cad4 <cbvprintf+0x78>
    cac8:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    cacc:	f046 0604 	orr.w	r6, r6, #4
    cad0:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    cad4:	f1bc 0f00 	cmp.w	ip, #0
    cad8:	d005      	beq.n	cae6 <cbvprintf+0x8a>
    cada:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    cade:	f046 0608 	orr.w	r6, r6, #8
    cae2:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    cae6:	f1be 0f00 	cmp.w	lr, #0
    caea:	d005      	beq.n	caf8 <cbvprintf+0x9c>
    caec:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    caf0:	f046 0610 	orr.w	r6, r6, #16
    caf4:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    caf8:	b128      	cbz	r0, cb06 <cbvprintf+0xaa>
    cafa:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    cafe:	f040 0020 	orr.w	r0, r0, #32
    cb02:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    cb06:	b12a      	cbz	r2, cb14 <cbvprintf+0xb8>
    cb08:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    cb0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    cb10:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    cb14:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    cb18:	f002 0044 	and.w	r0, r2, #68	; 0x44
    cb1c:	2844      	cmp	r0, #68	; 0x44
    cb1e:	d103      	bne.n	cb28 <cbvprintf+0xcc>
		conv->flag_zero = false;
    cb20:	f36f 1286 	bfc	r2, #6, #1
    cb24:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    cb28:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    cb2c:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    cb2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    cb32:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    cb36:	d17b      	bne.n	cc30 <cbvprintf+0x1d4>
		conv->width_star = true;
    cb38:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    cb3c:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    cb40:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    cb42:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    cb46:	781a      	ldrb	r2, [r3, #0]
    cb48:	2a2e      	cmp	r2, #46	; 0x2e
    cb4a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    cb4e:	bf0c      	ite	eq
    cb50:	2101      	moveq	r1, #1
    cb52:	2100      	movne	r1, #0
    cb54:	f361 0241 	bfi	r2, r1, #1, #1
    cb58:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    cb5c:	d174      	bne.n	cc48 <cbvprintf+0x1ec>
	if (*sp == '*') {
    cb5e:	785a      	ldrb	r2, [r3, #1]
    cb60:	2a2a      	cmp	r2, #42	; 0x2a
    cb62:	d06a      	beq.n	cc3a <cbvprintf+0x1de>
	++sp;
    cb64:	3301      	adds	r3, #1
	size_t val = 0;
    cb66:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    cb68:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    cb6a:	4618      	mov	r0, r3
    cb6c:	f810 2b01 	ldrb.w	r2, [r0], #1
    cb70:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    cb74:	2f09      	cmp	r7, #9
    cb76:	f240 808e 	bls.w	cc96 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    cb7a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    cb7e:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    cb80:	f3c2 0040 	ubfx	r0, r2, #1, #1
    cb84:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    cb88:	f361 0241 	bfi	r2, r1, #1, #1
    cb8c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    cb90:	e05a      	b.n	cc48 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    cb92:	f10a 0702 	add.w	r7, sl, #2
    cb96:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    cb9a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    cb9e:	07d9      	lsls	r1, r3, #31
    cba0:	f140 8149 	bpl.w	ce36 <cbvprintf+0x3da>
			width = va_arg(ap, int);
    cba4:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    cba8:	f1b9 0f00 	cmp.w	r9, #0
    cbac:	da07      	bge.n	cbbe <cbvprintf+0x162>
				conv->flag_dash = true;
    cbae:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    cbb2:	f042 0204 	orr.w	r2, r2, #4
    cbb6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    cbba:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    cbbe:	075a      	lsls	r2, r3, #29
    cbc0:	f140 8142 	bpl.w	ce48 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    cbc4:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    cbc8:	f1b8 0f00 	cmp.w	r8, #0
    cbcc:	f280 8141 	bge.w	ce52 <cbvprintf+0x3f6>
				conv->prec_present = false;
    cbd0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    cbd4:	f36f 0341 	bfc	r3, #1, #1
    cbd8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    cbdc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    cbe0:	e137      	b.n	ce52 <cbvprintf+0x3f6>
		switch (*sp) {
    cbe2:	2b2d      	cmp	r3, #45	; 0x2d
    cbe4:	d00c      	beq.n	cc00 <cbvprintf+0x1a4>
    cbe6:	2b30      	cmp	r3, #48	; 0x30
    cbe8:	f47f af6d 	bne.w	cac6 <cbvprintf+0x6a>
			conv->flag_zero = true;
    cbec:	2201      	movs	r2, #1
	} while (loop);
    cbee:	e75c      	b.n	caaa <cbvprintf+0x4e>
			conv->flag_plus = true;
    cbf0:	f04f 0c01 	mov.w	ip, #1
    cbf4:	e759      	b.n	caaa <cbvprintf+0x4e>
			conv->flag_space = true;
    cbf6:	f04f 0e01 	mov.w	lr, #1
    cbfa:	e756      	b.n	caaa <cbvprintf+0x4e>
			conv->flag_hash = true;
    cbfc:	2001      	movs	r0, #1
    cbfe:	e754      	b.n	caaa <cbvprintf+0x4e>
		switch (*sp) {
    cc00:	2601      	movs	r6, #1
    cc02:	e752      	b.n	caaa <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    cc04:	fb0c 0202 	mla	r2, ip, r2, r0
    cc08:	3a30      	subs	r2, #48	; 0x30
    cc0a:	4633      	mov	r3, r6
    cc0c:	461e      	mov	r6, r3
    cc0e:	f816 0b01 	ldrb.w	r0, [r6], #1
    cc12:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    cc16:	2f09      	cmp	r7, #9
    cc18:	d9f4      	bls.n	cc04 <cbvprintf+0x1a8>
	if (sp != wp) {
    cc1a:	4299      	cmp	r1, r3
    cc1c:	d093      	beq.n	cb46 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    cc1e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    cc22:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    cc24:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    cc26:	f362 0141 	bfi	r1, r2, #1, #1
    cc2a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    cc2e:	e78a      	b.n	cb46 <cbvprintf+0xea>
    cc30:	460b      	mov	r3, r1
	size_t val = 0;
    cc32:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    cc34:	f04f 0c0a 	mov.w	ip, #10
    cc38:	e7e8      	b.n	cc0c <cbvprintf+0x1b0>
		conv->prec_star = true;
    cc3a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    cc3e:	f042 0204 	orr.w	r2, r2, #4
    cc42:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    cc46:	3302      	adds	r3, #2
	switch (*sp) {
    cc48:	461f      	mov	r7, r3
    cc4a:	f817 2b01 	ldrb.w	r2, [r7], #1
    cc4e:	2a6c      	cmp	r2, #108	; 0x6c
    cc50:	d041      	beq.n	ccd6 <cbvprintf+0x27a>
    cc52:	d825      	bhi.n	cca0 <cbvprintf+0x244>
    cc54:	2a68      	cmp	r2, #104	; 0x68
    cc56:	d02b      	beq.n	ccb0 <cbvprintf+0x254>
    cc58:	2a6a      	cmp	r2, #106	; 0x6a
    cc5a:	d046      	beq.n	ccea <cbvprintf+0x28e>
    cc5c:	2a4c      	cmp	r2, #76	; 0x4c
    cc5e:	d04c      	beq.n	ccfa <cbvprintf+0x29e>
    cc60:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    cc62:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    cc66:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
    cc6a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    cc6e:	2a78      	cmp	r2, #120	; 0x78
    cc70:	f200 80d9 	bhi.w	ce26 <cbvprintf+0x3ca>
    cc74:	2a57      	cmp	r2, #87	; 0x57
    cc76:	d84d      	bhi.n	cd14 <cbvprintf+0x2b8>
    cc78:	2a41      	cmp	r2, #65	; 0x41
    cc7a:	d003      	beq.n	cc84 <cbvprintf+0x228>
    cc7c:	3a45      	subs	r2, #69	; 0x45
    cc7e:	2a02      	cmp	r2, #2
    cc80:	f200 80d1 	bhi.w	ce26 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    cc84:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    cc88:	2204      	movs	r2, #4
    cc8a:	f362 0302 	bfi	r3, r2, #0, #3
    cc8e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    cc92:	2301      	movs	r3, #1
			break;
    cc94:	e09e      	b.n	cdd4 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    cc96:	fb06 2101 	mla	r1, r6, r1, r2
    cc9a:	3930      	subs	r1, #48	; 0x30
    cc9c:	4603      	mov	r3, r0
    cc9e:	e764      	b.n	cb6a <cbvprintf+0x10e>
	switch (*sp) {
    cca0:	2a74      	cmp	r2, #116	; 0x74
    cca2:	d026      	beq.n	ccf2 <cbvprintf+0x296>
    cca4:	2a7a      	cmp	r2, #122	; 0x7a
    cca6:	d1db      	bne.n	cc60 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    cca8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    ccac:	2206      	movs	r2, #6
    ccae:	e00d      	b.n	cccc <cbvprintf+0x270>
		if (*++sp == 'h') {
    ccb0:	785a      	ldrb	r2, [r3, #1]
    ccb2:	2a68      	cmp	r2, #104	; 0x68
    ccb4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    ccb8:	d106      	bne.n	ccc8 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    ccba:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    ccbc:	f361 02c6 	bfi	r2, r1, #3, #4
    ccc0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    ccc4:	1c9f      	adds	r7, r3, #2
    ccc6:	e7cc      	b.n	cc62 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    ccc8:	4613      	mov	r3, r2
    ccca:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    cccc:	f362 03c6 	bfi	r3, r2, #3, #4
    ccd0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    ccd4:	e7c5      	b.n	cc62 <cbvprintf+0x206>
		if (*++sp == 'l') {
    ccd6:	785a      	ldrb	r2, [r3, #1]
    ccd8:	2a6c      	cmp	r2, #108	; 0x6c
    ccda:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    ccde:	d101      	bne.n	cce4 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    cce0:	2104      	movs	r1, #4
    cce2:	e7eb      	b.n	ccbc <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    cce4:	4613      	mov	r3, r2
    cce6:	2203      	movs	r2, #3
    cce8:	e7f0      	b.n	cccc <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    ccea:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    ccee:	2205      	movs	r2, #5
    ccf0:	e7ec      	b.n	cccc <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    ccf2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    ccf6:	2207      	movs	r2, #7
    ccf8:	e7e8      	b.n	cccc <cbvprintf+0x270>
		conv->unsupported = true;
    ccfa:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    ccfe:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    cd02:	f023 0302 	bic.w	r3, r3, #2
    cd06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    cd0a:	f043 0302 	orr.w	r3, r3, #2
    cd0e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    cd12:	e7a6      	b.n	cc62 <cbvprintf+0x206>
	switch (conv->specifier) {
    cd14:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    cd18:	2920      	cmp	r1, #32
    cd1a:	f200 8084 	bhi.w	ce26 <cbvprintf+0x3ca>
    cd1e:	a001      	add	r0, pc, #4	; (adr r0, cd24 <cbvprintf+0x2c8>)
    cd20:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    cd24:	0000cde9 	.word	0x0000cde9
    cd28:	0000ce27 	.word	0x0000ce27
    cd2c:	0000ce27 	.word	0x0000ce27
    cd30:	0000ce27 	.word	0x0000ce27
    cd34:	0000ce27 	.word	0x0000ce27
    cd38:	0000ce27 	.word	0x0000ce27
    cd3c:	0000ce27 	.word	0x0000ce27
    cd40:	0000ce27 	.word	0x0000ce27
    cd44:	0000ce27 	.word	0x0000ce27
    cd48:	0000cc85 	.word	0x0000cc85
    cd4c:	0000ce27 	.word	0x0000ce27
    cd50:	0000cde9 	.word	0x0000cde9
    cd54:	0000cda9 	.word	0x0000cda9
    cd58:	0000cc85 	.word	0x0000cc85
    cd5c:	0000cc85 	.word	0x0000cc85
    cd60:	0000cc85 	.word	0x0000cc85
    cd64:	0000ce27 	.word	0x0000ce27
    cd68:	0000cda9 	.word	0x0000cda9
    cd6c:	0000ce27 	.word	0x0000ce27
    cd70:	0000ce27 	.word	0x0000ce27
    cd74:	0000ce27 	.word	0x0000ce27
    cd78:	0000ce27 	.word	0x0000ce27
    cd7c:	0000cdf1 	.word	0x0000cdf1
    cd80:	0000cde9 	.word	0x0000cde9
    cd84:	0000ce0d 	.word	0x0000ce0d
    cd88:	0000ce27 	.word	0x0000ce27
    cd8c:	0000ce27 	.word	0x0000ce27
    cd90:	0000ce0d 	.word	0x0000ce0d
    cd94:	0000ce27 	.word	0x0000ce27
    cd98:	0000cde9 	.word	0x0000cde9
    cd9c:	0000ce27 	.word	0x0000ce27
    cda0:	0000ce27 	.word	0x0000ce27
    cda4:	0000cde9 	.word	0x0000cde9
		conv->specifier_cat = SPECIFIER_SINT;
    cda8:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    cdac:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    cdae:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    cdb2:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    cdb6:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    cdb8:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    cdbc:	bf02      	ittt	eq
    cdbe:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    cdc2:	f041 0101 	orreq.w	r1, r1, #1
    cdc6:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    cdca:	2a63      	cmp	r2, #99	; 0x63
    cdcc:	d131      	bne.n	ce32 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    cdce:	3b00      	subs	r3, #0
    cdd0:	bf18      	it	ne
    cdd2:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    cdd4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    cdd8:	f3c2 0140 	ubfx	r1, r2, #1, #1
    cddc:	430b      	orrs	r3, r1
    cdde:	f363 0241 	bfi	r2, r3, #1, #1
    cde2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    cde6:	e6d8      	b.n	cb9a <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    cde8:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    cdec:	2002      	movs	r0, #2
    cdee:	e7de      	b.n	cdae <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    cdf0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    cdf4:	f003 0378 	and.w	r3, r3, #120	; 0x78
    cdf8:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    cdfc:	2103      	movs	r1, #3
    cdfe:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    ce02:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    ce04:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    ce08:	4143      	adcs	r3, r0
    ce0a:	e7e3      	b.n	cdd4 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    ce0c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    ce10:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    ce12:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    ce16:	f361 0202 	bfi	r2, r1, #0, #3
    ce1a:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    ce1e:	bf14      	ite	ne
    ce20:	2301      	movne	r3, #1
    ce22:	2300      	moveq	r3, #0
    ce24:	e7d6      	b.n	cdd4 <cbvprintf+0x378>
		conv->invalid = true;
    ce26:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    ce2a:	f043 0301 	orr.w	r3, r3, #1
    ce2e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    ce32:	2300      	movs	r3, #0
    ce34:	e7ce      	b.n	cdd4 <cbvprintf+0x378>
		} else if (conv->width_present) {
    ce36:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    ce3a:	2a00      	cmp	r2, #0
			width = conv->width_value;
    ce3c:	bfb4      	ite	lt
    ce3e:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    ce42:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
    ce46:	e6ba      	b.n	cbbe <cbvprintf+0x162>
		} else if (conv->prec_present) {
    ce48:	079b      	lsls	r3, r3, #30
    ce4a:	f57f aec7 	bpl.w	cbdc <cbvprintf+0x180>
			precision = conv->prec_value;
    ce4e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    ce52:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    ce56:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    ce58:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    ce5c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    ce60:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    ce64:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    ce66:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    ce6a:	d138      	bne.n	cede <cbvprintf+0x482>
			switch (length_mod) {
    ce6c:	1ecb      	subs	r3, r1, #3
    ce6e:	2b04      	cmp	r3, #4
    ce70:	d822      	bhi.n	ceb8 <cbvprintf+0x45c>
    ce72:	e8df f003 	tbb	[pc, r3]
    ce76:	0903      	.short	0x0903
    ce78:	2109      	.short	0x2109
    ce7a:	21          	.byte	0x21
    ce7b:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    ce7c:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    ce80:	17da      	asrs	r2, r3, #31
    ce82:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    ce86:	e006      	b.n	ce96 <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    ce88:	3407      	adds	r4, #7
    ce8a:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    ce8e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    ce92:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    ce96:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    ce9a:	f013 0603 	ands.w	r6, r3, #3
    ce9e:	d056      	beq.n	cf4e <cbvprintf+0x4f2>
			OUTS(sp, fp);
    cea0:	9802      	ldr	r0, [sp, #8]
    cea2:	463b      	mov	r3, r7
    cea4:	4652      	mov	r2, sl
    cea6:	4659      	mov	r1, fp
    cea8:	f005 fa33 	bl	12312 <outs>
    ceac:	2800      	cmp	r0, #0
    ceae:	f2c0 8142 	blt.w	d136 <cbvprintf+0x6da>
    ceb2:	4405      	add	r5, r0
			continue;
    ceb4:	46ba      	mov	sl, r7
    ceb6:	e5d9      	b.n	ca6c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    ceb8:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    cebc:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    cebe:	ea4f 72e3 	mov.w	r2, r3, asr #31
    cec2:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    cec6:	d105      	bne.n	ced4 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
    cec8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    cecc:	930a      	str	r3, [sp, #40]	; 0x28
    cece:	2300      	movs	r3, #0
    ced0:	930b      	str	r3, [sp, #44]	; 0x2c
    ced2:	e7e0      	b.n	ce96 <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
    ced4:	2902      	cmp	r1, #2
    ced6:	d1de      	bne.n	ce96 <cbvprintf+0x43a>
				value->sint = (short)value->sint;
    ced8:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    cedc:	e7d0      	b.n	ce80 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    cede:	2b02      	cmp	r3, #2
    cee0:	d123      	bne.n	cf2a <cbvprintf+0x4ce>
			switch (length_mod) {
    cee2:	1ecb      	subs	r3, r1, #3
    cee4:	2b04      	cmp	r3, #4
    cee6:	d813      	bhi.n	cf10 <cbvprintf+0x4b4>
    cee8:	e8df f003 	tbb	[pc, r3]
    ceec:	120a0a03 	.word	0x120a0a03
    cef0:	12          	.byte	0x12
    cef1:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    cef2:	6822      	ldr	r2, [r4, #0]
    cef4:	920a      	str	r2, [sp, #40]	; 0x28
    cef6:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    cef8:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    cefa:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    cefc:	4604      	mov	r4, r0
    cefe:	e7ca      	b.n	ce96 <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
    cf00:	1de0      	adds	r0, r4, #7
    cf02:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    cf06:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    cf0a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    cf0e:	e7f5      	b.n	cefc <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
    cf10:	f854 3b04 	ldr.w	r3, [r4], #4
    cf14:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    cf16:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    cf18:	f04f 0300 	mov.w	r3, #0
    cf1c:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    cf1e:	d0d3      	beq.n	cec8 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
    cf20:	2902      	cmp	r1, #2
    cf22:	d1b8      	bne.n	ce96 <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
    cf24:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    cf28:	e7d0      	b.n	cecc <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
    cf2a:	2b04      	cmp	r3, #4
    cf2c:	d109      	bne.n	cf42 <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
    cf2e:	1de3      	adds	r3, r4, #7
    cf30:	f023 0307 	bic.w	r3, r3, #7
    cf34:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    cf38:	e9d3 2300 	ldrd	r2, r3, [r3]
    cf3c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    cf40:	e7a9      	b.n	ce96 <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    cf42:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    cf44:	bf04      	itt	eq
    cf46:	f854 3b04 	ldreq.w	r3, [r4], #4
    cf4a:	930a      	streq	r3, [sp, #40]	; 0x28
    cf4c:	e7a3      	b.n	ce96 <cbvprintf+0x43a>
		switch (conv->specifier) {
    cf4e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    cf52:	2878      	cmp	r0, #120	; 0x78
    cf54:	d8ae      	bhi.n	ceb4 <cbvprintf+0x458>
    cf56:	2862      	cmp	r0, #98	; 0x62
    cf58:	d822      	bhi.n	cfa0 <cbvprintf+0x544>
    cf5a:	2825      	cmp	r0, #37	; 0x25
    cf5c:	f43f ad8f 	beq.w	ca7e <cbvprintf+0x22>
    cf60:	2858      	cmp	r0, #88	; 0x58
    cf62:	d1a7      	bne.n	ceb4 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    cf64:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    cf68:	9300      	str	r3, [sp, #0]
    cf6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    cf6e:	ab04      	add	r3, sp, #16
    cf70:	aa0c      	add	r2, sp, #48	; 0x30
    cf72:	f005 f988 	bl	12286 <encode_uint>
    cf76:	4682      	mov	sl, r0
			if (precision >= 0) {
    cf78:	f1b8 0f00 	cmp.w	r8, #0
    cf7c:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    cf80:	db0c      	blt.n	cf9c <cbvprintf+0x540>
				conv->flag_zero = false;
    cf82:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    cf86:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    cf8a:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    cf8e:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    cf90:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    cf94:	d902      	bls.n	cf9c <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
    cf96:	eba8 0303 	sub.w	r3, r8, r3
    cf9a:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    cf9c:	4680      	mov	r8, r0
    cf9e:	e03d      	b.n	d01c <cbvprintf+0x5c0>
		switch (conv->specifier) {
    cfa0:	3863      	subs	r0, #99	; 0x63
    cfa2:	2815      	cmp	r0, #21
    cfa4:	d886      	bhi.n	ceb4 <cbvprintf+0x458>
    cfa6:	a201      	add	r2, pc, #4	; (adr r2, cfac <cbvprintf+0x550>)
    cfa8:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    cfac:	0000d02d 	.word	0x0000d02d
    cfb0:	0000d091 	.word	0x0000d091
    cfb4:	0000ceb5 	.word	0x0000ceb5
    cfb8:	0000ceb5 	.word	0x0000ceb5
    cfbc:	0000ceb5 	.word	0x0000ceb5
    cfc0:	0000ceb5 	.word	0x0000ceb5
    cfc4:	0000d091 	.word	0x0000d091
    cfc8:	0000ceb5 	.word	0x0000ceb5
    cfcc:	0000ceb5 	.word	0x0000ceb5
    cfd0:	0000ceb5 	.word	0x0000ceb5
    cfd4:	0000ceb5 	.word	0x0000ceb5
    cfd8:	0000d0eb 	.word	0x0000d0eb
    cfdc:	0000d0b9 	.word	0x0000d0b9
    cfe0:	0000d0bd 	.word	0x0000d0bd
    cfe4:	0000ceb5 	.word	0x0000ceb5
    cfe8:	0000ceb5 	.word	0x0000ceb5
    cfec:	0000d005 	.word	0x0000d005
    cff0:	0000ceb5 	.word	0x0000ceb5
    cff4:	0000d0b9 	.word	0x0000d0b9
    cff8:	0000ceb5 	.word	0x0000ceb5
    cffc:	0000ceb5 	.word	0x0000ceb5
    d000:	0000d0b9 	.word	0x0000d0b9
			if (precision >= 0) {
    d004:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    d008:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    d00c:	db0a      	blt.n	d024 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    d00e:	4641      	mov	r1, r8
    d010:	4650      	mov	r0, sl
    d012:	f005 faee 	bl	125f2 <strnlen>
			bpe = bps + len;
    d016:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    d01a:	2600      	movs	r6, #0
		if (bps == NULL) {
    d01c:	f1ba 0f00 	cmp.w	sl, #0
    d020:	d10c      	bne.n	d03c <cbvprintf+0x5e0>
    d022:	e747      	b.n	ceb4 <cbvprintf+0x458>
				len = strlen(bps);
    d024:	4650      	mov	r0, sl
    d026:	f005 fadd 	bl	125e4 <strlen>
    d02a:	e7f4      	b.n	d016 <cbvprintf+0x5ba>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    d02c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d02e:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    d032:	2600      	movs	r6, #0
			bps = buf;
    d034:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    d038:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    d03c:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    d040:	b106      	cbz	r6, d044 <cbvprintf+0x5e8>
			nj_len += 1U;
    d042:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    d044:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    d048:	06d0      	lsls	r0, r2, #27
    d04a:	d568      	bpl.n	d11e <cbvprintf+0x6c2>
			nj_len += 2U;
    d04c:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    d04e:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    d050:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    d052:	bf48      	it	mi
    d054:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    d056:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    d058:	bf48      	it	mi
    d05a:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    d05c:	f1b9 0f00 	cmp.w	r9, #0
    d060:	dd76      	ble.n	d150 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    d062:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    d066:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    d06a:	f3c2 0380 	ubfx	r3, r2, #2, #1
    d06e:	9303      	str	r3, [sp, #12]
    d070:	0753      	lsls	r3, r2, #29
    d072:	d46d      	bmi.n	d150 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    d074:	0650      	lsls	r0, r2, #25
    d076:	d561      	bpl.n	d13c <cbvprintf+0x6e0>
					if (sign != 0) {
    d078:	b146      	cbz	r6, d08c <cbvprintf+0x630>
						OUTC(sign);
    d07a:	9b02      	ldr	r3, [sp, #8]
    d07c:	4659      	mov	r1, fp
    d07e:	4630      	mov	r0, r6
    d080:	4798      	blx	r3
    d082:	2800      	cmp	r0, #0
    d084:	db57      	blt.n	d136 <cbvprintf+0x6da>
						sign = 0;
    d086:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    d088:	3501      	adds	r5, #1
						sign = 0;
    d08a:	461e      	mov	r6, r3
					pad = '0';
    d08c:	2330      	movs	r3, #48	; 0x30
    d08e:	e056      	b.n	d13e <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    d090:	071e      	lsls	r6, r3, #28
    d092:	d40f      	bmi.n	d0b4 <cbvprintf+0x658>
				sign = ' ';
    d094:	f013 0610 	ands.w	r6, r3, #16
    d098:	bf18      	it	ne
    d09a:	2620      	movne	r6, #32
			sint = value->sint;
    d09c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    d0a0:	2b00      	cmp	r3, #0
    d0a2:	f6bf af5f 	bge.w	cf64 <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
    d0a6:	4252      	negs	r2, r2
    d0a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    d0ac:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    d0b0:	262d      	movs	r6, #45	; 0x2d
    d0b2:	e757      	b.n	cf64 <cbvprintf+0x508>
				sign = '+';
    d0b4:	262b      	movs	r6, #43	; 0x2b
    d0b6:	e7f1      	b.n	d09c <cbvprintf+0x640>
		switch (conv->specifier) {
    d0b8:	2600      	movs	r6, #0
    d0ba:	e753      	b.n	cf64 <cbvprintf+0x508>
			if (value->ptr != NULL) {
    d0bc:	980a      	ldr	r0, [sp, #40]	; 0x28
    d0be:	b340      	cbz	r0, d112 <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    d0c0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    d0c4:	9300      	str	r3, [sp, #0]
    d0c6:	aa0c      	add	r2, sp, #48	; 0x30
    d0c8:	ab04      	add	r3, sp, #16
    d0ca:	2100      	movs	r1, #0
    d0cc:	f005 f8db 	bl	12286 <encode_uint>
				conv->altform_0c = true;
    d0d0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    d0d4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    d0d8:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    d0dc:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    d0e0:	4682      	mov	sl, r0
				conv->altform_0c = true;
    d0e2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    d0e6:	2600      	movs	r6, #0
				goto prec_int_pad0;
    d0e8:	e746      	b.n	cf78 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    d0ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    d0ec:	2907      	cmp	r1, #7
    d0ee:	f63f aee1 	bhi.w	ceb4 <cbvprintf+0x458>
    d0f2:	e8df f001 	tbb	[pc, r1]
    d0f6:	040c      	.short	0x040c
    d0f8:	08080c06 	.word	0x08080c06
    d0fc:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    d0fe:	701d      	strb	r5, [r3, #0]
		break;
    d100:	e6d8      	b.n	ceb4 <cbvprintf+0x458>
		*(short *)dp = (short)count;
    d102:	801d      	strh	r5, [r3, #0]
		break;
    d104:	e6d6      	b.n	ceb4 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    d106:	17ea      	asrs	r2, r5, #31
    d108:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    d10c:	e6d2      	b.n	ceb4 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    d10e:	601d      	str	r5, [r3, #0]
		break;
    d110:	e6d0      	b.n	ceb4 <cbvprintf+0x458>
			bps = "(nil)";
    d112:	f8df a0c8 	ldr.w	sl, [pc, #200]	; d1dc <cbvprintf+0x780>
    d116:	4606      	mov	r6, r0
			bpe = bps + 5;
    d118:	f10a 0805 	add.w	r8, sl, #5
    d11c:	e78e      	b.n	d03c <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    d11e:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    d120:	bf48      	it	mi
    d122:	3301      	addmi	r3, #1
    d124:	e793      	b.n	d04e <cbvprintf+0x5f2>
					OUTC(pad);
    d126:	4618      	mov	r0, r3
    d128:	9303      	str	r3, [sp, #12]
    d12a:	4659      	mov	r1, fp
    d12c:	9b02      	ldr	r3, [sp, #8]
    d12e:	4798      	blx	r3
    d130:	2800      	cmp	r0, #0
    d132:	9b03      	ldr	r3, [sp, #12]
    d134:	da04      	bge.n	d140 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    d136:	b011      	add	sp, #68	; 0x44
    d138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    d13c:	2320      	movs	r3, #32
    d13e:	444d      	add	r5, r9
    d140:	464a      	mov	r2, r9
				while (width-- > 0) {
    d142:	2a00      	cmp	r2, #0
    d144:	eba5 0109 	sub.w	r1, r5, r9
    d148:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    d14c:	dceb      	bgt.n	d126 <cbvprintf+0x6ca>
    d14e:	460d      	mov	r5, r1
		if (sign != 0) {
    d150:	b136      	cbz	r6, d160 <cbvprintf+0x704>
			OUTC(sign);
    d152:	9b02      	ldr	r3, [sp, #8]
    d154:	4659      	mov	r1, fp
    d156:	4630      	mov	r0, r6
    d158:	4798      	blx	r3
    d15a:	2800      	cmp	r0, #0
    d15c:	dbeb      	blt.n	d136 <cbvprintf+0x6da>
    d15e:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    d160:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    d164:	06d9      	lsls	r1, r3, #27
    d166:	d401      	bmi.n	d16c <cbvprintf+0x710>
    d168:	071a      	lsls	r2, r3, #28
    d16a:	d506      	bpl.n	d17a <cbvprintf+0x71e>
				OUTC('0');
    d16c:	9b02      	ldr	r3, [sp, #8]
    d16e:	4659      	mov	r1, fp
    d170:	2030      	movs	r0, #48	; 0x30
    d172:	4798      	blx	r3
    d174:	2800      	cmp	r0, #0
    d176:	dbde      	blt.n	d136 <cbvprintf+0x6da>
    d178:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    d17a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    d17e:	06db      	lsls	r3, r3, #27
    d180:	d507      	bpl.n	d192 <cbvprintf+0x736>
				OUTC(conv->specifier);
    d182:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    d186:	9b02      	ldr	r3, [sp, #8]
    d188:	4659      	mov	r1, fp
    d18a:	4798      	blx	r3
    d18c:	2800      	cmp	r0, #0
    d18e:	dbd2      	blt.n	d136 <cbvprintf+0x6da>
    d190:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    d192:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    d194:	442e      	add	r6, r5
    d196:	1b73      	subs	r3, r6, r5
    d198:	2b00      	cmp	r3, #0
    d19a:	dc16      	bgt.n	d1ca <cbvprintf+0x76e>
			OUTS(bps, bpe);
    d19c:	9802      	ldr	r0, [sp, #8]
    d19e:	4643      	mov	r3, r8
    d1a0:	4652      	mov	r2, sl
    d1a2:	4659      	mov	r1, fp
    d1a4:	f005 f8b5 	bl	12312 <outs>
    d1a8:	2800      	cmp	r0, #0
    d1aa:	dbc4      	blt.n	d136 <cbvprintf+0x6da>
    d1ac:	4405      	add	r5, r0
		while (width > 0) {
    d1ae:	44a9      	add	r9, r5
    d1b0:	eba9 0305 	sub.w	r3, r9, r5
    d1b4:	2b00      	cmp	r3, #0
    d1b6:	f77f ae7d 	ble.w	ceb4 <cbvprintf+0x458>
			OUTC(' ');
    d1ba:	9b02      	ldr	r3, [sp, #8]
    d1bc:	4659      	mov	r1, fp
    d1be:	2020      	movs	r0, #32
    d1c0:	4798      	blx	r3
    d1c2:	2800      	cmp	r0, #0
    d1c4:	dbb7      	blt.n	d136 <cbvprintf+0x6da>
    d1c6:	3501      	adds	r5, #1
			--width;
    d1c8:	e7f2      	b.n	d1b0 <cbvprintf+0x754>
				OUTC('0');
    d1ca:	9b02      	ldr	r3, [sp, #8]
    d1cc:	4659      	mov	r1, fp
    d1ce:	2030      	movs	r0, #48	; 0x30
    d1d0:	4798      	blx	r3
    d1d2:	2800      	cmp	r0, #0
    d1d4:	dbaf      	blt.n	d136 <cbvprintf+0x6da>
    d1d6:	3501      	adds	r5, #1
    d1d8:	e7dd      	b.n	d196 <cbvprintf+0x73a>
    d1da:	bf00      	nop
    d1dc:	000154ca 	.word	0x000154ca

0000d1e0 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    d1e0:	b508      	push	{r3, lr}
    d1e2:	f04f 0220 	mov.w	r2, #32
    d1e6:	f3ef 8311 	mrs	r3, BASEPRI
    d1ea:	f382 8812 	msr	BASEPRI_MAX, r2
    d1ee:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    d1f2:	f000 fd95 	bl	dd20 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    d1f6:	4803      	ldr	r0, [pc, #12]	; (d204 <sys_reboot+0x24>)
    d1f8:	f004 fdbd 	bl	11d76 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    d1fc:	f000 f9cc 	bl	d598 <arch_cpu_idle>
    d200:	e7fc      	b.n	d1fc <sys_reboot+0x1c>
    d202:	bf00      	nop
    d204:	000154d0 	.word	0x000154d0

0000d208 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    d208:	4b0c      	ldr	r3, [pc, #48]	; (d23c <flash_area_open+0x34>)
    d20a:	681b      	ldr	r3, [r3, #0]
{
    d20c:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
    d20e:	b173      	cbz	r3, d22e <flash_area_open+0x26>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    d210:	4a0b      	ldr	r2, [pc, #44]	; (d240 <flash_area_open+0x38>)
    d212:	6815      	ldr	r5, [r2, #0]
    d214:	2200      	movs	r2, #0
    d216:	42aa      	cmp	r2, r5
    d218:	db02      	blt.n	d220 <flash_area_open+0x18>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
    d21a:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;
	return 0;
}
    d21e:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
    d220:	461c      	mov	r4, r3
    d222:	f813 6b10 	ldrb.w	r6, [r3], #16
    d226:	4286      	cmp	r6, r0
    d228:	d004      	beq.n	d234 <flash_area_open+0x2c>
	for (int i = 0; i < flash_map_entries; i++) {
    d22a:	3201      	adds	r2, #1
    d22c:	e7f3      	b.n	d216 <flash_area_open+0xe>
		return -EACCES;
    d22e:	f06f 000c 	mvn.w	r0, #12
    d232:	e7f4      	b.n	d21e <flash_area_open+0x16>
	*fap = area;
    d234:	600c      	str	r4, [r1, #0]
	return 0;
    d236:	2000      	movs	r0, #0
    d238:	e7f1      	b.n	d21e <flash_area_open+0x16>
    d23a:	bf00      	nop
    d23c:	20000004 	.word	0x20000004
    d240:	000151b8 	.word	0x000151b8

0000d244 <stream_flash_init>:
}

int stream_flash_init(struct stream_flash_ctx *ctx, const struct device *fdev,
		      uint8_t *buf, size_t buf_len, size_t offset, size_t size,
		      stream_flash_callback_t cb)
{
    d244:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    d248:	460d      	mov	r5, r1
    d24a:	e9dd 860a 	ldrd	r8, r6, [sp, #40]	; 0x28
    d24e:	4691      	mov	r9, r2
    d250:	461f      	mov	r7, r3
	if (!ctx || !fdev || !buf) {
    d252:	4604      	mov	r4, r0
    d254:	b920      	cbnz	r0, d260 <stream_flash_init+0x1c>
		return -EFAULT;
    d256:	f06f 000d 	mvn.w	r0, #13
#ifdef CONFIG_STREAM_FLASH_ERASE
	ctx->last_erased_page_start_offset = -1;
#endif

	return 0;
}
    d25a:	b003      	add	sp, #12
    d25c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!ctx || !fdev || !buf) {
    d260:	2900      	cmp	r1, #0
    d262:	d0f8      	beq.n	d256 <stream_flash_init+0x12>
    d264:	2a00      	cmp	r2, #0
    d266:	d0f6      	beq.n	d256 <stream_flash_init+0x12>
	struct _inspect_flash inspect_flash_ctx = {
    d268:	9300      	str	r3, [sp, #0]
	if (buf_len % flash_get_write_block_size(fdev)) {
    d26a:	4608      	mov	r0, r1
	struct _inspect_flash inspect_flash_ctx = {
    d26c:	2300      	movs	r3, #0
    d26e:	9301      	str	r3, [sp, #4]
	if (buf_len % flash_get_write_block_size(fdev)) {
    d270:	f005 f8fe 	bl	12470 <flash_get_write_block_size>
    d274:	fbb7 f3f0 	udiv	r3, r7, r0
    d278:	fb03 7010 	mls	r0, r3, r0, r7
    d27c:	2800      	cmp	r0, #0
    d27e:	d1ea      	bne.n	d256 <stream_flash_init+0x12>
	flash_page_foreach(fdev, find_flash_total_size, &inspect_flash_ctx);
    d280:	4912      	ldr	r1, [pc, #72]	; (d2cc <stream_flash_init+0x88>)
    d282:	466a      	mov	r2, sp
    d284:	4628      	mov	r0, r5
    d286:	f006 fadf 	bl	13848 <flash_page_foreach>
	if (inspect_flash_ctx.total_size == 0) {
    d28a:	9b01      	ldr	r3, [sp, #4]
    d28c:	2b00      	cmp	r3, #0
    d28e:	d0e2      	beq.n	d256 <stream_flash_init+0x12>
	if ((offset + size) > inspect_flash_ctx.total_size ||
    d290:	eb08 0206 	add.w	r2, r8, r6
    d294:	4293      	cmp	r3, r2
    d296:	d3de      	bcc.n	d256 <stream_flash_init+0x12>
	    offset % flash_get_write_block_size(fdev)) {
    d298:	4628      	mov	r0, r5
    d29a:	f005 f8e9 	bl	12470 <flash_get_write_block_size>
    d29e:	fbb8 f3f0 	udiv	r3, r8, r0
    d2a2:	fb03 8010 	mls	r0, r3, r0, r8
	if ((offset + size) > inspect_flash_ctx.total_size ||
    d2a6:	2800      	cmp	r0, #0
    d2a8:	d1d5      	bne.n	d256 <stream_flash_init+0x12>
	ctx->buf_len = buf_len;
    d2aa:	e9c4 9700 	strd	r9, r7, [r4]
	ctx->fdev = fdev;
    d2ae:	60e5      	str	r5, [r4, #12]
	ctx->bytes_written = 0;
    d2b0:	6120      	str	r0, [r4, #16]
	ctx->buf_bytes = 0U;
    d2b2:	60a0      	str	r0, [r4, #8]
	ctx->offset = offset;
    d2b4:	f8c4 8014 	str.w	r8, [r4, #20]
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
    d2b8:	b916      	cbnz	r6, d2c0 <stream_flash_init+0x7c>
    d2ba:	9e01      	ldr	r6, [sp, #4]
    d2bc:	eba6 0608 	sub.w	r6, r6, r8
	ctx->callback = cb;
    d2c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
    d2c2:	61a6      	str	r6, [r4, #24]
	ctx->callback = cb;
    d2c4:	61e3      	str	r3, [r4, #28]
	return 0;
    d2c6:	2000      	movs	r0, #0
    d2c8:	e7c7      	b.n	d25a <stream_flash_init+0x16>
    d2ca:	bf00      	nop
    d2cc:	0001247d 	.word	0x0001247d

0000d2d0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    d2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d2d4:	4605      	mov	r5, r0
    d2d6:	f04f 0320 	mov.w	r3, #32
    d2da:	f3ef 8611 	mrs	r6, BASEPRI
    d2de:	f383 8812 	msr	BASEPRI_MAX, r3
    d2e2:	f3bf 8f6f 	isb	sy
	return list->head;
    d2e6:	4b0e      	ldr	r3, [pc, #56]	; (d320 <pm_state_notify+0x50>)
    d2e8:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    d2ea:	b19c      	cbz	r4, d314 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    d2ec:	4f0d      	ldr	r7, [pc, #52]	; (d324 <pm_state_notify+0x54>)
    d2ee:	f8df 8038 	ldr.w	r8, [pc, #56]	; d328 <pm_state_notify+0x58>
    d2f2:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    d2f6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    d2fa:	2d00      	cmp	r5, #0
    d2fc:	bf08      	it	eq
    d2fe:	4613      	moveq	r3, r2
		if (callback) {
    d300:	b12b      	cbz	r3, d30e <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    d302:	f898 2014 	ldrb.w	r2, [r8, #20]
    d306:	fb09 f202 	mul.w	r2, r9, r2
    d30a:	5cb8      	ldrb	r0, [r7, r2]
    d30c:	4798      	blx	r3
	return node->next;
    d30e:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    d310:	2c00      	cmp	r4, #0
    d312:	d1f0      	bne.n	d2f6 <pm_state_notify+0x26>
	__asm__ volatile(
    d314:	f386 8811 	msr	BASEPRI, r6
    d318:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    d31c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d320:	20000398 	.word	0x20000398
    d324:	200003a0 	.word	0x200003a0
    d328:	200007e4 	.word	0x200007e4

0000d32c <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d32c:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    d32e:	2301      	movs	r3, #1
    d330:	f000 001f 	and.w	r0, r0, #31
    d334:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d338:	4b07      	ldr	r3, [pc, #28]	; (d358 <atomic_clear_bit.constprop.0+0x2c>)
    d33a:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d33e:	43c0      	mvns	r0, r0
    d340:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    d344:	e853 2f00 	ldrex	r2, [r3]
    d348:	4002      	ands	r2, r0
    d34a:	e843 2100 	strex	r1, r2, [r3]
    d34e:	2900      	cmp	r1, #0
    d350:	d1f8      	bne.n	d344 <atomic_clear_bit.constprop.0+0x18>
    d352:	f3bf 8f5b 	dmb	ish
}
    d356:	4770      	bx	lr
    d358:	200003ac 	.word	0x200003ac

0000d35c <pm_system_resume>:

void pm_system_resume(void)
{
    d35c:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
    d35e:	4b1a      	ldr	r3, [pc, #104]	; (d3c8 <pm_system_resume+0x6c>)
    d360:	7d1c      	ldrb	r4, [r3, #20]
    d362:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    d366:	f004 031f 	and.w	r3, r4, #31
    d36a:	2201      	movs	r2, #1
    d36c:	409a      	lsls	r2, r3
    d36e:	4b17      	ldr	r3, [pc, #92]	; (d3cc <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d370:	0961      	lsrs	r1, r4, #5
    d372:	43d0      	mvns	r0, r2
    d374:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d378:	e853 1f00 	ldrex	r1, [r3]
    d37c:	ea01 0500 	and.w	r5, r1, r0
    d380:	e843 5c00 	strex	ip, r5, [r3]
    d384:	f1bc 0f00 	cmp.w	ip, #0
    d388:	d1f6      	bne.n	d378 <pm_system_resume+0x1c>
    d38a:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    d38e:	4211      	tst	r1, r2
    d390:	d013      	beq.n	d3ba <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
    d392:	4b0f      	ldr	r3, [pc, #60]	; (d3d0 <pm_system_resume+0x74>)
    d394:	4d0f      	ldr	r5, [pc, #60]	; (d3d4 <pm_system_resume+0x78>)
    d396:	b18b      	cbz	r3, d3bc <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
    d398:	230c      	movs	r3, #12
    d39a:	4363      	muls	r3, r4
    d39c:	18ea      	adds	r2, r5, r3
    d39e:	5ce8      	ldrb	r0, [r5, r3]
    d3a0:	7851      	ldrb	r1, [r2, #1]
    d3a2:	f005 f96f 	bl	12684 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    d3a6:	2000      	movs	r0, #0
    d3a8:	f7ff ff92 	bl	d2d0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    d3ac:	230c      	movs	r3, #12
    d3ae:	435c      	muls	r4, r3
    d3b0:	192a      	adds	r2, r5, r4
    d3b2:	2300      	movs	r3, #0
    d3b4:	512b      	str	r3, [r5, r4]
    d3b6:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    d3ba:	bd38      	pop	{r3, r4, r5, pc}
    d3bc:	f383 8811 	msr	BASEPRI, r3
    d3c0:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    d3c4:	e7ef      	b.n	d3a6 <pm_system_resume+0x4a>
    d3c6:	bf00      	nop
    d3c8:	200007e4 	.word	0x200007e4
    d3cc:	200003b0 	.word	0x200003b0
    d3d0:	00012685 	.word	0x00012685
    d3d4:	200003a0 	.word	0x200003a0

0000d3d8 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    d3d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    d3dc:	4b32      	ldr	r3, [pc, #200]	; (d4a8 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d3de:	4a33      	ldr	r2, [pc, #204]	; (d4ac <pm_system_suspend+0xd4>)
    d3e0:	7d1c      	ldrb	r4, [r3, #20]
    d3e2:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    d3e6:	0963      	lsrs	r3, r4, #5
    d3e8:	ea4f 0983 	mov.w	r9, r3, lsl #2
    d3ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3f0:	4e2f      	ldr	r6, [pc, #188]	; (d4b0 <pm_system_suspend+0xd8>)
    d3f2:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    d3f6:	f004 081f 	and.w	r8, r4, #31
    d3fa:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    d3fe:	f013 0f01 	tst.w	r3, #1
{
    d402:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    d404:	d10a      	bne.n	d41c <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    d406:	4601      	mov	r1, r0
    d408:	4620      	mov	r0, r4
    d40a:	f000 f869 	bl	d4e0 <pm_policy_next_state>
		if (info != NULL) {
    d40e:	b128      	cbz	r0, d41c <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    d410:	c807      	ldmia	r0, {r0, r1, r2}
    d412:	230c      	movs	r3, #12
    d414:	fb03 6304 	mla	r3, r3, r4, r6
    d418:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    d41c:	230c      	movs	r3, #12
    d41e:	4363      	muls	r3, r4
    d420:	18f2      	adds	r2, r6, r3
    d422:	5cf5      	ldrb	r5, [r6, r3]
    d424:	b92d      	cbnz	r5, d432 <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    d426:	4620      	mov	r0, r4
    d428:	f7ff ff80 	bl	d32c <atomic_clear_bit.constprop.0>
		ret = false;
    d42c:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    d42e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    d432:	1c7b      	adds	r3, r7, #1
    d434:	d00f      	beq.n	d456 <pm_system_suspend+0x7e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    d436:	f8d2 c008 	ldr.w	ip, [r2, #8]
    d43a:	481e      	ldr	r0, [pc, #120]	; (d4b4 <pm_system_suspend+0xdc>)
    d43c:	4a1e      	ldr	r2, [pc, #120]	; (d4b8 <pm_system_suspend+0xe0>)
    d43e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    d442:	2100      	movs	r1, #0
    d444:	2300      	movs	r3, #0
    d446:	fbec 0105 	umlal	r0, r1, ip, r5
    d44a:	f7fe ff59 	bl	c300 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    d44e:	2101      	movs	r1, #1
    d450:	1a38      	subs	r0, r7, r0
    d452:	f007 fcce 	bl	14df2 <z_set_timeout_expiry>
	k_sched_lock();
    d456:	f003 ff43 	bl	112e0 <k_sched_lock>
	pm_state_notify(true);
    d45a:	2001      	movs	r0, #1
    d45c:	f7ff ff38 	bl	d2d0 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d460:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    d464:	2301      	movs	r3, #1
    d466:	fa03 f808 	lsl.w	r8, r3, r8
    d46a:	4b14      	ldr	r3, [pc, #80]	; (d4bc <pm_system_suspend+0xe4>)
    d46c:	4499      	add	r9, r3
    d46e:	e859 3f00 	ldrex	r3, [r9]
    d472:	ea43 0308 	orr.w	r3, r3, r8
    d476:	e849 3200 	strex	r2, r3, [r9]
    d47a:	2a00      	cmp	r2, #0
    d47c:	d1f7      	bne.n	d46e <pm_system_suspend+0x96>
    d47e:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    d482:	4b0f      	ldr	r3, [pc, #60]	; (d4c0 <pm_system_suspend+0xe8>)
    d484:	b133      	cbz	r3, d494 <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    d486:	230c      	movs	r3, #12
    d488:	4363      	muls	r3, r4
    d48a:	18f2      	adds	r2, r6, r3
    d48c:	5cf0      	ldrb	r0, [r6, r3]
    d48e:	7851      	ldrb	r1, [r2, #1]
    d490:	f005 f8ec 	bl	1266c <pm_state_set>
	pm_system_resume();
    d494:	f7ff ff62 	bl	d35c <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    d498:	4620      	mov	r0, r4
    d49a:	f7ff ff47 	bl	d32c <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    d49e:	f004 f8a7 	bl	115f0 <k_sched_unlock>
	bool ret = true;
    d4a2:	2001      	movs	r0, #1
    d4a4:	e7c3      	b.n	d42e <pm_system_suspend+0x56>
    d4a6:	bf00      	nop
    d4a8:	200007e4 	.word	0x200007e4
    d4ac:	200003ac 	.word	0x200003ac
    d4b0:	200003a0 	.word	0x200003a0
    d4b4:	000f423f 	.word	0x000f423f
    d4b8:	000f4240 	.word	0x000f4240
    d4bc:	200003b0 	.word	0x200003b0
    d4c0:	0001266d 	.word	0x0001266d

0000d4c4 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d4c4:	4b05      	ldr	r3, [pc, #20]	; (d4dc <pm_policy_state_lock_is_active+0x18>)
    d4c6:	f3bf 8f5b 	dmb	ish
    d4ca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    d4ce:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    d4d2:	3800      	subs	r0, #0
    d4d4:	bf18      	it	ne
    d4d6:	2001      	movne	r0, #1
    d4d8:	4770      	bx	lr
    d4da:	bf00      	nop
    d4dc:	200003b4 	.word	0x200003b4

0000d4e0 <pm_policy_next_state>:
{
    d4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d4e4:	b085      	sub	sp, #20
    d4e6:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    d4e8:	a903      	add	r1, sp, #12
    d4ea:	f000 f847 	bl	d57c <pm_state_cpu_get_all>
    d4ee:	f8df 8080 	ldr.w	r8, [pc, #128]	; d570 <pm_policy_next_state+0x90>
    d4f2:	f8df a080 	ldr.w	sl, [pc, #128]	; d574 <pm_policy_next_state+0x94>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    d4f6:	1e44      	subs	r4, r0, #1
    d4f8:	b224      	sxth	r4, r4
    d4fa:	f04f 0b00 	mov.w	fp, #0
    d4fe:	1c63      	adds	r3, r4, #1
    d500:	d104      	bne.n	d50c <pm_policy_next_state+0x2c>
	return NULL;
    d502:	2600      	movs	r6, #0
}
    d504:	4630      	mov	r0, r6
    d506:	b005      	add	sp, #20
    d508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    d50c:	9a03      	ldr	r2, [sp, #12]
    d50e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    d512:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    d516:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    d51a:	f7ff ffd3 	bl	d4c4 <pm_policy_state_lock_is_active>
    d51e:	4605      	mov	r5, r0
    d520:	bb10      	cbnz	r0, d568 <pm_policy_next_state+0x88>
    d522:	6870      	ldr	r0, [r6, #4]
    d524:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    d528:	46c4      	mov	ip, r8
    d52a:	4629      	mov	r1, r5
    d52c:	fbe0 c109 	umlal	ip, r1, r0, r9
    d530:	4652      	mov	r2, sl
    d532:	465b      	mov	r3, fp
    d534:	4660      	mov	r0, ip
    d536:	f7fe fee3 	bl	c300 <__aeabi_uldivmod>
    d53a:	9001      	str	r0, [sp, #4]
    d53c:	68b0      	ldr	r0, [r6, #8]
    d53e:	46c4      	mov	ip, r8
    d540:	4629      	mov	r1, r5
    d542:	fbe0 c109 	umlal	ip, r1, r0, r9
    d546:	465b      	mov	r3, fp
    d548:	4652      	mov	r2, sl
    d54a:	4660      	mov	r0, ip
    d54c:	f7fe fed8 	bl	c300 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    d550:	4b09      	ldr	r3, [pc, #36]	; (d578 <pm_policy_next_state+0x98>)
    d552:	681b      	ldr	r3, [r3, #0]
    d554:	1c59      	adds	r1, r3, #1
    d556:	d001      	beq.n	d55c <pm_policy_next_state+0x7c>
    d558:	4283      	cmp	r3, r0
    d55a:	d905      	bls.n	d568 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
    d55c:	1c7a      	adds	r2, r7, #1
    d55e:	d0d1      	beq.n	d504 <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
    d560:	9b01      	ldr	r3, [sp, #4]
    d562:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    d564:	42b8      	cmp	r0, r7
    d566:	d9cd      	bls.n	d504 <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    d568:	3c01      	subs	r4, #1
    d56a:	b224      	sxth	r4, r4
    d56c:	e7c7      	b.n	d4fe <pm_policy_next_state+0x1e>
    d56e:	bf00      	nop
    d570:	000f423f 	.word	0x000f423f
    d574:	000f4240 	.word	0x000f4240
    d578:	20000008 	.word	0x20000008

0000d57c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    d57c:	b908      	cbnz	r0, d582 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    d57e:	4b02      	ldr	r3, [pc, #8]	; (d588 <pm_state_cpu_get_all+0xc>)
    d580:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    d582:	2000      	movs	r0, #0
    d584:	4770      	bx	lr
    d586:	bf00      	nop
    d588:	000151bc 	.word	0x000151bc

0000d58c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    d58c:	4901      	ldr	r1, [pc, #4]	; (d594 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    d58e:	2210      	movs	r2, #16
	str	r2, [r1]
    d590:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    d592:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    d594:	e000ed10 	.word	0xe000ed10

0000d598 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    d598:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    d59a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    d59c:	f380 8811 	msr	BASEPRI, r0
	isb
    d5a0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    d5a4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    d5a8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    d5aa:	b662      	cpsie	i
	isb
    d5ac:	f3bf 8f6f 	isb	sy

	bx	lr
    d5b0:	4770      	bx	lr
    d5b2:	bf00      	nop

0000d5b4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    d5b4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    d5b6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    d5b8:	f381 8811 	msr	BASEPRI, r1

	wfe
    d5bc:	bf20      	wfe

	msr	BASEPRI, r0
    d5be:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    d5c2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    d5c4:	4770      	bx	lr
    d5c6:	bf00      	nop

0000d5c8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    d5c8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    d5ca:	2b00      	cmp	r3, #0
    d5cc:	db08      	blt.n	d5e0 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d5ce:	2201      	movs	r2, #1
    d5d0:	f000 001f 	and.w	r0, r0, #31
    d5d4:	fa02 f000 	lsl.w	r0, r2, r0
    d5d8:	095b      	lsrs	r3, r3, #5
    d5da:	4a02      	ldr	r2, [pc, #8]	; (d5e4 <arch_irq_enable+0x1c>)
    d5dc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    d5e0:	4770      	bx	lr
    d5e2:	bf00      	nop
    d5e4:	e000e100 	.word	0xe000e100

0000d5e8 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    d5e8:	4b05      	ldr	r3, [pc, #20]	; (d600 <arch_irq_is_enabled+0x18>)
    d5ea:	0942      	lsrs	r2, r0, #5
    d5ec:	f000 001f 	and.w	r0, r0, #31
    d5f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    d5f4:	2301      	movs	r3, #1
    d5f6:	fa03 f000 	lsl.w	r0, r3, r0
}
    d5fa:	4010      	ands	r0, r2
    d5fc:	4770      	bx	lr
    d5fe:	bf00      	nop
    d600:	e000e100 	.word	0xe000e100

0000d604 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    d604:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    d606:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d608:	bfa8      	it	ge
    d60a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    d60e:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d612:	bfb8      	it	lt
    d614:	4b06      	ldrlt	r3, [pc, #24]	; (d630 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d616:	ea4f 1141 	mov.w	r1, r1, lsl #5
    d61a:	bfac      	ite	ge
    d61c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d620:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d624:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d626:	bfb4      	ite	lt
    d628:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d62a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    d62e:	4770      	bx	lr
    d630:	e000ed14 	.word	0xe000ed14

0000d634 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    d634:	bf30      	wfi
    b z_SysNmiOnReset
    d636:	f7ff bffd 	b.w	d634 <z_SysNmiOnReset>
    d63a:	bf00      	nop

0000d63c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    d63c:	4a0b      	ldr	r2, [pc, #44]	; (d66c <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    d63e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    d640:	4b0b      	ldr	r3, [pc, #44]	; (d670 <z_arm_prep_c+0x34>)
    d642:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    d646:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    d648:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d64c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    d650:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    d654:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    d658:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    d65c:	f003 fa62 	bl	10b24 <z_bss_zero>
	z_data_copy();
    d660:	f004 f90a 	bl	11878 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    d664:	f000 f9d0 	bl	da08 <z_arm_interrupt_init>
	z_cstart();
    d668:	f003 faa0 	bl	10bac <z_cstart>
    d66c:	0000c200 	.word	0x0000c200
    d670:	e000ed00 	.word	0xe000ed00

0000d674 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    d674:	4a09      	ldr	r2, [pc, #36]	; (d69c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    d676:	490a      	ldr	r1, [pc, #40]	; (d6a0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    d678:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    d67a:	6809      	ldr	r1, [r1, #0]
    d67c:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    d67e:	4909      	ldr	r1, [pc, #36]	; (d6a4 <arch_swap+0x30>)
	_current->arch.basepri = key;
    d680:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    d682:	684b      	ldr	r3, [r1, #4]
    d684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    d688:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    d68a:	2300      	movs	r3, #0
    d68c:	f383 8811 	msr	BASEPRI, r3
    d690:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    d694:	6893      	ldr	r3, [r2, #8]
}
    d696:	6f98      	ldr	r0, [r3, #120]	; 0x78
    d698:	4770      	bx	lr
    d69a:	bf00      	nop
    d69c:	200007e4 	.word	0x200007e4
    d6a0:	000153d4 	.word	0x000153d4
    d6a4:	e000ed00 	.word	0xe000ed00

0000d6a8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    d6a8:	4912      	ldr	r1, [pc, #72]	; (d6f4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    d6aa:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    d6ac:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    d6b0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    d6b2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    d6b6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    d6ba:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    d6bc:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    d6c0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    d6c4:	4f0c      	ldr	r7, [pc, #48]	; (d6f8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    d6c6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    d6ca:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    d6cc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    d6ce:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    d6d0:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    d6d2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    d6d4:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    d6d6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    d6da:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    d6dc:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    d6de:	f000 fa2f 	bl	db40 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    d6e2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    d6e6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    d6ea:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    d6ee:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    d6f2:	4770      	bx	lr
    ldr r1, =_kernel
    d6f4:	200007e4 	.word	0x200007e4
    ldr v4, =_SCS_ICSR
    d6f8:	e000ed04 	.word	0xe000ed04

0000d6fc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    d6fc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    d700:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    d702:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    d706:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    d70a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    d70c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    d710:	2902      	cmp	r1, #2
    beq _oops
    d712:	d0ff      	beq.n	d714 <_oops>

0000d714 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    d714:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    d716:	f004 ff4c 	bl	125b2 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    d71a:	bd01      	pop	{r0, pc}

0000d71c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    d71c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    d720:	9b00      	ldr	r3, [sp, #0]
    d722:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    d726:	490a      	ldr	r1, [pc, #40]	; (d750 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    d728:	9b01      	ldr	r3, [sp, #4]
    d72a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    d72e:	9b02      	ldr	r3, [sp, #8]
    d730:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    d734:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    d738:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    d73c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    d740:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    d744:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    d746:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    d748:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    d74a:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    d74c:	4770      	bx	lr
    d74e:	bf00      	nop
    d750:	00011ee7 	.word	0x00011ee7

0000d754 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    d754:	4a09      	ldr	r2, [pc, #36]	; (d77c <z_check_thread_stack_fail+0x28>)
{
    d756:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    d758:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    d75a:	b170      	cbz	r0, d77a <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    d75c:	f113 0f16 	cmn.w	r3, #22
    d760:	6e40      	ldr	r0, [r0, #100]	; 0x64
    d762:	d005      	beq.n	d770 <z_check_thread_stack_fail+0x1c>
    d764:	f1a0 0220 	sub.w	r2, r0, #32
    d768:	429a      	cmp	r2, r3
    d76a:	d805      	bhi.n	d778 <z_check_thread_stack_fail+0x24>
    d76c:	4283      	cmp	r3, r0
    d76e:	d203      	bcs.n	d778 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    d770:	4281      	cmp	r1, r0
    d772:	bf28      	it	cs
    d774:	2000      	movcs	r0, #0
    d776:	4770      	bx	lr
    d778:	2000      	movs	r0, #0
}
    d77a:	4770      	bx	lr
    d77c:	200007e4 	.word	0x200007e4

0000d780 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    d780:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    d782:	4b09      	ldr	r3, [pc, #36]	; (d7a8 <arch_switch_to_main_thread+0x28>)
    d784:	6098      	str	r0, [r3, #8]
{
    d786:	460d      	mov	r5, r1
    d788:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    d78a:	f000 f9d9 	bl	db40 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    d78e:	4620      	mov	r0, r4
    d790:	f385 8809 	msr	PSP, r5
    d794:	2100      	movs	r1, #0
    d796:	b663      	cpsie	if
    d798:	f381 8811 	msr	BASEPRI, r1
    d79c:	f3bf 8f6f 	isb	sy
    d7a0:	2200      	movs	r2, #0
    d7a2:	2300      	movs	r3, #0
    d7a4:	f004 fb9f 	bl	11ee6 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    d7a8:	200007e4 	.word	0x200007e4

0000d7ac <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    d7ac:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    d7ae:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    d7b0:	4a0b      	ldr	r2, [pc, #44]	; (d7e0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    d7b2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    d7b4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    d7b6:	bf1e      	ittt	ne
	movne	r1, #0
    d7b8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    d7ba:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    d7bc:	f007 f8f5 	blne	149aa <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    d7c0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    d7c2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    d7c6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    d7ca:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    d7ce:	4905      	ldr	r1, [pc, #20]	; (d7e4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    d7d0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    d7d2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    d7d4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    d7d6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    d7da:	4903      	ldr	r1, [pc, #12]	; (d7e8 <_isr_wrapper+0x3c>)
	bx r1
    d7dc:	4708      	bx	r1
    d7de:	0000      	.short	0x0000
	ldr r2, =_kernel
    d7e0:	200007e4 	.word	0x200007e4
	ldr r1, =_sw_isr_table
    d7e4:	00014fa8 	.word	0x00014fa8
	ldr r1, =z_arm_int_exit
    d7e8:	0000d7ed 	.word	0x0000d7ed

0000d7ec <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    d7ec:	4b04      	ldr	r3, [pc, #16]	; (d800 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    d7ee:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    d7f0:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    d7f2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    d7f4:	d003      	beq.n	d7fe <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    d7f6:	4903      	ldr	r1, [pc, #12]	; (d804 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    d7f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    d7fc:	600a      	str	r2, [r1, #0]

0000d7fe <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    d7fe:	4770      	bx	lr
	ldr r3, =_kernel
    d800:	200007e4 	.word	0x200007e4
	ldr r1, =_SCS_ICSR
    d804:	e000ed04 	.word	0xe000ed04

0000d808 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    d808:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    d80a:	4b1c      	ldr	r3, [pc, #112]	; (d87c <mem_manage_fault+0x74>)
{
    d80c:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    d80e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    d810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    d812:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    d814:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    d816:	0790      	lsls	r0, r2, #30
    d818:	d520      	bpl.n	d85c <mem_manage_fault+0x54>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    d81a:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    d81c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d81e:	0612      	lsls	r2, r2, #24
    d820:	d51c      	bpl.n	d85c <mem_manage_fault+0x54>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    d822:	b119      	cbz	r1, d82c <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    d824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d826:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    d82a:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    d82c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    d82e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    d830:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d832:	06d2      	lsls	r2, r2, #27
    d834:	d415      	bmi.n	d862 <mem_manage_fault+0x5a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    d836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    d838:	079b      	lsls	r3, r3, #30
    d83a:	d412      	bmi.n	d862 <mem_manage_fault+0x5a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    d83c:	2000      	movs	r0, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    d83e:	4b0f      	ldr	r3, [pc, #60]	; (d87c <mem_manage_fault+0x74>)
    d840:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d842:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    d844:	bf42      	ittt	mi
    d846:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    d848:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    d84c:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    d84e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d850:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    d854:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    d856:	2300      	movs	r3, #0
    d858:	7023      	strb	r3, [r4, #0]

	return reason;
}
    d85a:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    d85c:	f06f 0015 	mvn.w	r0, #21
    d860:	e7e4      	b.n	d82c <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    d862:	4b06      	ldr	r3, [pc, #24]	; (d87c <mem_manage_fault+0x74>)
    d864:	685b      	ldr	r3, [r3, #4]
    d866:	0519      	lsls	r1, r3, #20
    d868:	d5e8      	bpl.n	d83c <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    d86a:	4629      	mov	r1, r5
    d86c:	f7ff ff72 	bl	d754 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    d870:	2800      	cmp	r0, #0
    d872:	d0e3      	beq.n	d83c <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    d874:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    d878:	2002      	movs	r0, #2
    d87a:	e7e0      	b.n	d83e <mem_manage_fault+0x36>
    d87c:	e000ed00 	.word	0xe000ed00

0000d880 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    d880:	4b0d      	ldr	r3, [pc, #52]	; (d8b8 <bus_fault.constprop.0+0x38>)
    d882:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    d884:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    d886:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d888:	0592      	lsls	r2, r2, #22
    d88a:	d508      	bpl.n	d89e <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    d88c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    d88e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d890:	0412      	lsls	r2, r2, #16
    d892:	d504      	bpl.n	d89e <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    d894:	b118      	cbz	r0, d89e <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    d896:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d898:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    d89c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    d89e:	4b06      	ldr	r3, [pc, #24]	; (d8b8 <bus_fault.constprop.0+0x38>)
    d8a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    d8a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d8a4:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    d8a6:	bf58      	it	pl
    d8a8:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    d8aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    d8ac:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    d8ae:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    d8b2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    d8b4:	7008      	strb	r0, [r1, #0]

	return reason;
}
    d8b6:	4770      	bx	lr
    d8b8:	e000ed00 	.word	0xe000ed00

0000d8bc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    d8bc:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    d8be:	4b48      	ldr	r3, [pc, #288]	; (d9e0 <z_arm_fault+0x124>)
    d8c0:	685b      	ldr	r3, [r3, #4]
{
    d8c2:	b08a      	sub	sp, #40	; 0x28
    d8c4:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    d8c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    d8ca:	2600      	movs	r6, #0
    d8cc:	f386 8811 	msr	BASEPRI, r6
    d8d0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    d8d4:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    d8d8:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    d8dc:	d111      	bne.n	d902 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    d8de:	f002 010c 	and.w	r1, r2, #12
    d8e2:	2908      	cmp	r1, #8
    d8e4:	d00d      	beq.n	d902 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    d8e6:	0711      	lsls	r1, r2, #28
    d8e8:	d401      	bmi.n	d8ee <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    d8ea:	4605      	mov	r5, r0
			*nested_exc = true;
    d8ec:	2601      	movs	r6, #1
	*recoverable = false;
    d8ee:	2200      	movs	r2, #0
	switch (fault) {
    d8f0:	3b03      	subs	r3, #3
	*recoverable = false;
    d8f2:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    d8f6:	2b03      	cmp	r3, #3
    d8f8:	d86b      	bhi.n	d9d2 <z_arm_fault+0x116>
    d8fa:	e8df f003 	tbb	[pc, r3]
    d8fe:	5504      	.short	0x5504
    d900:	5d59      	.short	0x5d59
		return NULL;
    d902:	4635      	mov	r5, r6
    d904:	e7f3      	b.n	d8ee <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    d906:	4b36      	ldr	r3, [pc, #216]	; (d9e0 <z_arm_fault+0x124>)
    d908:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    d90a:	f014 0402 	ands.w	r4, r4, #2
    d90e:	d160      	bne.n	d9d2 <z_arm_fault+0x116>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    d910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d912:	2a00      	cmp	r2, #0
    d914:	db15      	blt.n	d942 <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    d916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d918:	0052      	lsls	r2, r2, #1
    d91a:	d512      	bpl.n	d942 <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
    d91c:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    d91e:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    d922:	f64d 7202 	movw	r2, #57090	; 0xdf02
    d926:	4291      	cmp	r1, r2
    d928:	d00a      	beq.n	d940 <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
    d92a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    d92e:	b30a      	cbz	r2, d974 <z_arm_fault+0xb8>
			reason = mem_manage_fault(esf, 1, recoverable);
    d930:	f10d 0207 	add.w	r2, sp, #7
    d934:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    d936:	4628      	mov	r0, r5
    d938:	f7ff ff66 	bl	d808 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    d93c:	4604      	mov	r4, r0
		break;
    d93e:	e000      	b.n	d942 <z_arm_fault+0x86>
			reason = esf->basic.r0;
    d940:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    d942:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d946:	b99b      	cbnz	r3, d970 <z_arm_fault+0xb4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    d948:	2220      	movs	r2, #32
    d94a:	4629      	mov	r1, r5
    d94c:	a802      	add	r0, sp, #8
    d94e:	f004 fe76 	bl	1263e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    d952:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d954:	2e00      	cmp	r6, #0
    d956:	d03e      	beq.n	d9d6 <z_arm_fault+0x11a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    d958:	f3c3 0208 	ubfx	r2, r3, #0, #9
    d95c:	b922      	cbnz	r2, d968 <z_arm_fault+0xac>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    d95e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    d962:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    d966:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    d968:	a902      	add	r1, sp, #8
    d96a:	4620      	mov	r0, r4
    d96c:	f004 fe1f 	bl	125ae <z_arm_fatal_error>
}
    d970:	b00a      	add	sp, #40	; 0x28
    d972:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    d974:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    d978:	b12a      	cbz	r2, d986 <z_arm_fault+0xca>
			reason = bus_fault(esf, 1, recoverable);
    d97a:	f10d 0107 	add.w	r1, sp, #7
    d97e:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    d980:	f7ff ff7e 	bl	d880 <bus_fault.constprop.0>
    d984:	e7da      	b.n	d93c <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
    d986:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    d988:	b292      	uxth	r2, r2
    d98a:	2a00      	cmp	r2, #0
    d98c:	d0d9      	beq.n	d942 <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    d98e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    d990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    d992:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    d994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    d996:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    d998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    d99a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d99c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    d9a0:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    d9a4:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
    d9a6:	e7cc      	b.n	d942 <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
    d9a8:	f10d 0207 	add.w	r2, sp, #7
    d9ac:	2100      	movs	r1, #0
    d9ae:	e7c2      	b.n	d936 <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
    d9b0:	f10d 0107 	add.w	r1, sp, #7
    d9b4:	2000      	movs	r0, #0
    d9b6:	e7e3      	b.n	d980 <z_arm_fault+0xc4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    d9b8:	4b09      	ldr	r3, [pc, #36]	; (d9e0 <z_arm_fault+0x124>)
    d9ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    d9bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    d9be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    d9c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    d9c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    d9c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    d9c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d9c8:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    d9cc:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    d9d0:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    d9d2:	2400      	movs	r4, #0
    d9d4:	e7b5      	b.n	d942 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    d9d6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    d9da:	f023 0301 	bic.w	r3, r3, #1
    d9de:	e7c2      	b.n	d966 <z_arm_fault+0xaa>
    d9e0:	e000ed00 	.word	0xe000ed00

0000d9e4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    d9e4:	4a02      	ldr	r2, [pc, #8]	; (d9f0 <z_arm_fault_init+0xc>)
    d9e6:	6953      	ldr	r3, [r2, #20]
    d9e8:	f043 0310 	orr.w	r3, r3, #16
    d9ec:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    d9ee:	4770      	bx	lr
    d9f0:	e000ed00 	.word	0xe000ed00

0000d9f4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    d9f4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    d9f8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    d9fc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    d9fe:	4672      	mov	r2, lr
	bl z_arm_fault
    da00:	f7ff ff5c 	bl	d8bc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    da04:	bd01      	pop	{r0, pc}
    da06:	bf00      	nop

0000da08 <z_arm_interrupt_init>:
    da08:	4804      	ldr	r0, [pc, #16]	; (da1c <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    da0a:	2300      	movs	r3, #0
    da0c:	2120      	movs	r1, #32
    da0e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    da10:	3301      	adds	r3, #1
    da12:	2b30      	cmp	r3, #48	; 0x30
    da14:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    da18:	d1f9      	bne.n	da0e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    da1a:	4770      	bx	lr
    da1c:	e000e100 	.word	0xe000e100

0000da20 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    da20:	2000      	movs	r0, #0
    msr CONTROL, r0
    da22:	f380 8814 	msr	CONTROL, r0
    isb
    da26:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    da2a:	f007 fa37 	bl	14e9c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    da2e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    da30:	490d      	ldr	r1, [pc, #52]	; (da68 <__start+0x48>)
    str r0, [r1]
    da32:	6008      	str	r0, [r1, #0]
    dsb
    da34:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    da38:	480c      	ldr	r0, [pc, #48]	; (da6c <__start+0x4c>)
    msr msp, r0
    da3a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    da3e:	f000 f82b 	bl	da98 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    da42:	2020      	movs	r0, #32
    msr BASEPRI, r0
    da44:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    da48:	4809      	ldr	r0, [pc, #36]	; (da70 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    da4a:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    da4e:	1840      	adds	r0, r0, r1
    msr PSP, r0
    da50:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    da54:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    da58:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    da5a:	4308      	orrs	r0, r1
    msr CONTROL, r0
    da5c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    da60:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    da64:	f7ff fdea 	bl	d63c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    da68:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    da6c:	20001080 	.word	0x20001080
    ldr r0, =z_interrupt_stacks
    da70:	20001200 	.word	0x20001200

0000da74 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    da74:	4907      	ldr	r1, [pc, #28]	; (da94 <z_arm_clear_arm_mpu_config+0x20>)
    da76:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    da7a:	2300      	movs	r3, #0
	int num_regions =
    da7c:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    da80:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    da82:	4293      	cmp	r3, r2
    da84:	d100      	bne.n	da88 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    da86:	4770      	bx	lr
  MPU->RNR = rnr;
    da88:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    da8c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    da90:	3301      	adds	r3, #1
    da92:	e7f6      	b.n	da82 <z_arm_clear_arm_mpu_config+0xe>
    da94:	e000ed00 	.word	0xe000ed00

0000da98 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    da98:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    da9a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    da9c:	2300      	movs	r3, #0
    da9e:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    daa2:	f7ff ffe7 	bl	da74 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    daa6:	4b14      	ldr	r3, [pc, #80]	; (daf8 <z_arm_init_arch_hw_at_boot+0x60>)
    daa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    daac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    dab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    dab4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    dab8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    dabc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    dac0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    dac4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    dac8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    dacc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    dad0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    dad4:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    dad8:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    dadc:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    dae0:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    dae4:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    dae8:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    daec:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    daee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    daf2:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    daf6:	bd08      	pop	{r3, pc}
    daf8:	e000e100 	.word	0xe000e100

0000dafc <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    dafc:	4b08      	ldr	r3, [pc, #32]	; (db20 <z_impl_k_thread_abort+0x24>)
    dafe:	689b      	ldr	r3, [r3, #8]
    db00:	4283      	cmp	r3, r0
    db02:	d10b      	bne.n	db1c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    db04:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    db08:	b143      	cbz	r3, db1c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    db0a:	4b06      	ldr	r3, [pc, #24]	; (db24 <z_impl_k_thread_abort+0x28>)
    db0c:	685a      	ldr	r2, [r3, #4]
    db0e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    db12:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    db14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    db16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    db1a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    db1c:	f003 be48 	b.w	117b0 <z_thread_abort>
    db20:	200007e4 	.word	0x200007e4
    db24:	e000ed00 	.word	0xe000ed00

0000db28 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    db28:	4b02      	ldr	r3, [pc, #8]	; (db34 <z_arm_configure_static_mpu_regions+0xc>)
    db2a:	4a03      	ldr	r2, [pc, #12]	; (db38 <z_arm_configure_static_mpu_regions+0x10>)
    db2c:	4803      	ldr	r0, [pc, #12]	; (db3c <z_arm_configure_static_mpu_regions+0x14>)
    db2e:	2101      	movs	r1, #1
    db30:	f000 b86e 	b.w	dc10 <arm_core_mpu_configure_static_mpu_regions>
    db34:	20040000 	.word	0x20040000
    db38:	20000000 	.word	0x20000000
    db3c:	000151bc 	.word	0x000151bc

0000db40 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    db40:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    db42:	4b05      	ldr	r3, [pc, #20]	; (db58 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    db44:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    db46:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    db48:	4a04      	ldr	r2, [pc, #16]	; (db5c <z_arm_configure_dynamic_mpu_regions+0x1c>)
    db4a:	2120      	movs	r1, #32
    db4c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    db50:	4618      	mov	r0, r3
    db52:	2101      	movs	r1, #1
    db54:	f000 b866 	b.w	dc24 <arm_core_mpu_configure_dynamic_mpu_regions>
    db58:	200003d0 	.word	0x200003d0
    db5c:	150b0000 	.word	0x150b0000

0000db60 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    db60:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    db62:	4f1f      	ldr	r7, [pc, #124]	; (dbe0 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    db64:	2600      	movs	r6, #0
    db66:	428e      	cmp	r6, r1
    db68:	db01      	blt.n	db6e <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    db6a:	4610      	mov	r0, r2
    db6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    db6e:	6844      	ldr	r4, [r0, #4]
    db70:	b39c      	cbz	r4, dbda <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
    db72:	b153      	cbz	r3, db8a <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    db74:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    db78:	ea14 0f0c 	tst.w	r4, ip
    db7c:	d118      	bne.n	dbb0 <mpu_configure_regions+0x50>
		&&
    db7e:	2c1f      	cmp	r4, #31
    db80:	d916      	bls.n	dbb0 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    db82:	6805      	ldr	r5, [r0, #0]
		&&
    db84:	ea1c 0f05 	tst.w	ip, r5
    db88:	d112      	bne.n	dbb0 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    db8a:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    db8c:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    db8e:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    db92:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    db94:	d90f      	bls.n	dbb6 <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
    db96:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    db9a:	d80e      	bhi.n	dbba <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    db9c:	3c01      	subs	r4, #1
    db9e:	fab4 f484 	clz	r4, r4
    dba2:	f1c4 041f 	rsb	r4, r4, #31
    dba6:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    dba8:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    dbaa:	ea4c 0404 	orr.w	r4, ip, r4
    dbae:	d906      	bls.n	dbbe <mpu_configure_regions+0x5e>
			return -EINVAL;
    dbb0:	f06f 0215 	mvn.w	r2, #21
    dbb4:	e7d9      	b.n	db6a <mpu_configure_regions+0xa>
		return REGION_32B;
    dbb6:	2408      	movs	r4, #8
    dbb8:	e7f6      	b.n	dba8 <mpu_configure_regions+0x48>
		return REGION_4G;
    dbba:	243e      	movs	r4, #62	; 0x3e
    dbbc:	e7f4      	b.n	dba8 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    dbbe:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    dbc2:	4315      	orrs	r5, r2
    dbc4:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    dbc8:	f044 0401 	orr.w	r4, r4, #1
    dbcc:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    dbd0:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    dbd4:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    dbd6:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    dbda:	3601      	adds	r6, #1
    dbdc:	300c      	adds	r0, #12
    dbde:	e7c2      	b.n	db66 <mpu_configure_regions+0x6>
    dbe0:	e000ed00 	.word	0xe000ed00

0000dbe4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    dbe4:	4b04      	ldr	r3, [pc, #16]	; (dbf8 <arm_core_mpu_enable+0x14>)
    dbe6:	2205      	movs	r2, #5
    dbe8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    dbec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    dbf0:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    dbf4:	4770      	bx	lr
    dbf6:	bf00      	nop
    dbf8:	e000ed00 	.word	0xe000ed00

0000dbfc <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    dbfc:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    dc00:	4b02      	ldr	r3, [pc, #8]	; (dc0c <arm_core_mpu_disable+0x10>)
    dc02:	2200      	movs	r2, #0
    dc04:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    dc08:	4770      	bx	lr
    dc0a:	bf00      	nop
    dc0c:	e000ed00 	.word	0xe000ed00

0000dc10 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    dc10:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    dc12:	4c03      	ldr	r4, [pc, #12]	; (dc20 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    dc14:	2301      	movs	r3, #1
    dc16:	7822      	ldrb	r2, [r4, #0]
    dc18:	f7ff ffa2 	bl	db60 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    dc1c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    dc1e:	bd10      	pop	{r4, pc}
    dc20:	20000824 	.word	0x20000824

0000dc24 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    dc24:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    dc26:	4a09      	ldr	r2, [pc, #36]	; (dc4c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    dc28:	2300      	movs	r3, #0
    dc2a:	7812      	ldrb	r2, [r2, #0]
    dc2c:	f7ff ff98 	bl	db60 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    dc30:	f110 0f16 	cmn.w	r0, #22
    dc34:	d002      	beq.n	dc3c <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
    dc36:	4a06      	ldr	r2, [pc, #24]	; (dc50 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    dc38:	2807      	cmp	r0, #7
    dc3a:	dd00      	ble.n	dc3e <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    dc3c:	bd08      	pop	{r3, pc}
    dc3e:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    dc42:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    dc46:	3001      	adds	r0, #1
    dc48:	e7f6      	b.n	dc38 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    dc4a:	bf00      	nop
    dc4c:	20000824 	.word	0x20000824
    dc50:	e000ed00 	.word	0xe000ed00

0000dc54 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    dc54:	4914      	ldr	r1, [pc, #80]	; (dca8 <z_arm_mpu_init+0x54>)
    dc56:	6808      	ldr	r0, [r1, #0]
    dc58:	2808      	cmp	r0, #8
{
    dc5a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    dc5c:	d821      	bhi.n	dca2 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    dc5e:	f7ff ffcd 	bl	dbfc <arm_core_mpu_disable>
    dc62:	4c12      	ldr	r4, [pc, #72]	; (dcac <z_arm_mpu_init+0x58>)
    dc64:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    dc66:	2200      	movs	r2, #0
    dc68:	4290      	cmp	r0, r2
    dc6a:	f101 010c 	add.w	r1, r1, #12
    dc6e:	d105      	bne.n	dc7c <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    dc70:	4b0f      	ldr	r3, [pc, #60]	; (dcb0 <z_arm_mpu_init+0x5c>)
    dc72:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    dc74:	f7ff ffb6 	bl	dbe4 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    dc78:	2000      	movs	r0, #0
}
    dc7a:	bd10      	pop	{r4, pc}
    dc7c:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    dc80:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    dc84:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    dc88:	4313      	orrs	r3, r2
    dc8a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    dc8e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    dc92:	f851 3c04 	ldr.w	r3, [r1, #-4]
    dc96:	f043 0301 	orr.w	r3, r3, #1
    dc9a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    dc9e:	3201      	adds	r2, #1
    dca0:	e7e2      	b.n	dc68 <z_arm_mpu_init+0x14>
		return -1;
    dca2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    dca6:	e7e8      	b.n	dc7a <z_arm_mpu_init+0x26>
    dca8:	000151c8 	.word	0x000151c8
    dcac:	e000ed00 	.word	0xe000ed00
    dcb0:	20000824 	.word	0x20000824

0000dcb4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    dcb4:	4b01      	ldr	r3, [pc, #4]	; (dcbc <__stdout_hook_install+0x8>)
    dcb6:	6018      	str	r0, [r3, #0]
}
    dcb8:	4770      	bx	lr
    dcba:	bf00      	nop
    dcbc:	2000000c 	.word	0x2000000c

0000dcc0 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    dcc0:	b510      	push	{r4, lr}
	__asm__ volatile(
    dcc2:	f04f 0320 	mov.w	r3, #32
    dcc6:	f3ef 8011 	mrs	r0, BASEPRI
    dcca:	f383 8812 	msr	BASEPRI_MAX, r3
    dcce:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    dcd2:	4a11      	ldr	r2, [pc, #68]	; (dd18 <nordicsemi_nrf52_init+0x58>)
    dcd4:	2301      	movs	r3, #1
    dcd6:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    dcda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    dcde:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    dce2:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    dce6:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    dcea:	2c08      	cmp	r4, #8
    dcec:	d108      	bne.n	dd00 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    dcee:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    dcf2:	2905      	cmp	r1, #5
    dcf4:	d804      	bhi.n	dd00 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    dcf6:	4c09      	ldr	r4, [pc, #36]	; (dd1c <nordicsemi_nrf52_init+0x5c>)
    dcf8:	5c61      	ldrb	r1, [r4, r1]
    dcfa:	b109      	cbz	r1, dd00 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    dcfc:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    dd00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    dd04:	2201      	movs	r2, #1
    dd06:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    dd0a:	f380 8811 	msr	BASEPRI, r0
    dd0e:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    dd12:	2000      	movs	r0, #0
    dd14:	bd10      	pop	{r4, pc}
    dd16:	bf00      	nop
    dd18:	4001e000 	.word	0x4001e000
    dd1c:	0001551b 	.word	0x0001551b

0000dd20 <sys_arch_reboot>:
    *p_gpregret = val;
    dd20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    dd24:	b2c0      	uxtb	r0, r0
    dd26:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    dd2a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    dd2e:	4905      	ldr	r1, [pc, #20]	; (dd44 <sys_arch_reboot+0x24>)
    dd30:	4b05      	ldr	r3, [pc, #20]	; (dd48 <sys_arch_reboot+0x28>)
    dd32:	68ca      	ldr	r2, [r1, #12]
    dd34:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    dd38:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    dd3a:	60cb      	str	r3, [r1, #12]
    dd3c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    dd40:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    dd42:	e7fd      	b.n	dd40 <sys_arch_reboot+0x20>
    dd44:	e000ed00 	.word	0xe000ed00
    dd48:	05fa0004 	.word	0x05fa0004

0000dd4c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    dd4c:	b120      	cbz	r0, dd58 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    dd4e:	4b03      	ldr	r3, [pc, #12]	; (dd5c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    dd50:	0180      	lsls	r0, r0, #6
    dd52:	f043 0301 	orr.w	r3, r3, #1
    dd56:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    dd58:	4770      	bx	lr
    dd5a:	bf00      	nop
    dd5c:	00015150 	.word	0x00015150

0000dd60 <mcumgr_buf_alloc>:
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    dd60:	4802      	ldr	r0, [pc, #8]	; (dd6c <mcumgr_buf_alloc+0xc>)
    dd62:	2200      	movs	r2, #0
    dd64:	2300      	movs	r3, #0
    dd66:	f005 bbda 	b.w	1351e <net_buf_alloc_fixed>
    dd6a:	bf00      	nop
    dd6c:	200001ac 	.word	0x200001ac

0000dd70 <cbor_nb_reader_init>:

void
cbor_nb_reader_init(struct cbor_nb_reader *cnr,
		    struct net_buf *nb)
{
	cnr->r.get8 = &cbor_nb_reader_get8;
    dd70:	4b07      	ldr	r3, [pc, #28]	; (dd90 <cbor_nb_reader_init+0x20>)
    dd72:	6003      	str	r3, [r0, #0]
	cnr->r.get16 = &cbor_nb_reader_get16;
    dd74:	4b07      	ldr	r3, [pc, #28]	; (dd94 <cbor_nb_reader_init+0x24>)
    dd76:	6043      	str	r3, [r0, #4]
	cnr->r.get32 = &cbor_nb_reader_get32;
    dd78:	4b07      	ldr	r3, [pc, #28]	; (dd98 <cbor_nb_reader_init+0x28>)
    dd7a:	6083      	str	r3, [r0, #8]
	cnr->r.get64 = &cbor_nb_reader_get64;
    dd7c:	4b07      	ldr	r3, [pc, #28]	; (dd9c <cbor_nb_reader_init+0x2c>)
    dd7e:	60c3      	str	r3, [r0, #12]
	cnr->r.cmp = &cbor_nb_reader_cmp;
    dd80:	4b07      	ldr	r3, [pc, #28]	; (dda0 <cbor_nb_reader_init+0x30>)
    dd82:	6103      	str	r3, [r0, #16]
	cnr->r.cpy = &cbor_nb_reader_cpy;
    dd84:	4b07      	ldr	r3, [pc, #28]	; (dda4 <cbor_nb_reader_init+0x34>)
    dd86:	6143      	str	r3, [r0, #20]

	cnr->nb = nb;
	cnr->r.message_size = nb->len;
    dd88:	898b      	ldrh	r3, [r1, #12]
	cnr->nb = nb;
    dd8a:	61c1      	str	r1, [r0, #28]
	cnr->r.message_size = nb->len;
    dd8c:	6183      	str	r3, [r0, #24]
}
    dd8e:	4770      	bx	lr
    dd90:	00012697 	.word	0x00012697
    dd94:	000126ad 	.word	0x000126ad
    dd98:	000126cb 	.word	0x000126cb
    dd9c:	000126e7 	.word	0x000126e7
    dda0:	0001273d 	.word	0x0001273d
    dda4:	00012713 	.word	0x00012713

0000dda8 <cbor_nb_writer_init>:
	return CborNoError;
}

void
cbor_nb_writer_init(struct cbor_nb_writer *cnw, struct net_buf *nb)
{
    dda8:	b538      	push	{r3, r4, r5, lr}
    ddaa:	4604      	mov	r4, r0
    ddac:	460d      	mov	r5, r1
	net_buf_reset(nb);
    ddae:	4608      	mov	r0, r1
    ddb0:	f005 fbb0 	bl	13514 <net_buf_reset>
	cnw->nb = nb;
	/* Reserve header space */
	cnw->nb->len = sizeof(struct mgmt_hdr);
    ddb4:	2308      	movs	r3, #8
	cnw->nb = nb;
    ddb6:	60a5      	str	r5, [r4, #8]
	cnw->nb->len = sizeof(struct mgmt_hdr);
    ddb8:	81ab      	strh	r3, [r5, #12]
	cnw->enc.bytes_written = sizeof(struct mgmt_hdr);
    ddba:	6063      	str	r3, [r4, #4]
	cnw->enc.write = &cbor_nb_write;
    ddbc:	4b01      	ldr	r3, [pc, #4]	; (ddc4 <cbor_nb_writer_init+0x1c>)
    ddbe:	6023      	str	r3, [r4, #0]
}
    ddc0:	bd38      	pop	{r3, r4, r5, pc}
    ddc2:	bf00      	nop
    ddc4:	00012763 	.word	0x00012763

0000ddc8 <zephyr_smp_handle_reqs>:
/**
 * Processes all received SNP request packets.
 */
static void
zephyr_smp_handle_reqs(struct k_work *work)
{
    ddc8:	b5f0      	push	{r4, r5, r6, r7, lr}
	streamer = (struct smp_streamer) {
    ddca:	4e0d      	ldr	r6, [pc, #52]	; (de00 <zephyr_smp_handle_reqs+0x38>)
    ddcc:	4f0d      	ldr	r7, [pc, #52]	; (de04 <zephyr_smp_handle_reqs+0x3c>)
{
    ddce:	b091      	sub	sp, #68	; 0x44
    ddd0:	4604      	mov	r4, r0
	struct zephyr_smp_transport *zst;
	struct net_buf *nb;

	zst = (void *)work;

	while ((nb = net_buf_get(&zst->zst_fifo, K_NO_WAIT)) != NULL) {
    ddd2:	f100 0510 	add.w	r5, r0, #16
    ddd6:	2200      	movs	r2, #0
    ddd8:	2300      	movs	r3, #0
    ddda:	4628      	mov	r0, r5
    dddc:	f005 fba4 	bl	13528 <net_buf_get>
    dde0:	4601      	mov	r1, r0
    dde2:	b908      	cbnz	r0, dde8 <zephyr_smp_handle_reqs+0x20>
		zephyr_smp_process_packet(zst, nb);
	}
}
    dde4:	b011      	add	sp, #68	; 0x44
    dde6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	streamer = (struct smp_streamer) {
    dde8:	ab08      	add	r3, sp, #32
	rc = smp_process_request_packet(&streamer, nb);
    ddea:	a803      	add	r0, sp, #12
	streamer = (struct smp_streamer) {
    ddec:	e9cd 6403 	strd	r6, r4, [sp, #12]
    ddf0:	9305      	str	r3, [sp, #20]
    ddf2:	f8cd d018 	str.w	sp, [sp, #24]
    ddf6:	9707      	str	r7, [sp, #28]
	rc = smp_process_request_packet(&streamer, nb);
    ddf8:	f005 f970 	bl	130dc <smp_process_request_packet>
	return rc;
    ddfc:	e7eb      	b.n	ddd6 <zephyr_smp_handle_reqs+0xe>
    ddfe:	bf00      	nop
    de00:	000151f8 	.word	0x000151f8
    de04:	00012817 	.word	0x00012817

0000de08 <zephyr_smp_transport_init>:
zephyr_smp_transport_init(struct zephyr_smp_transport *zst,
			  zephyr_smp_transport_out_fn *output_func,
			  zephyr_smp_transport_get_mtu_fn *get_mtu_func,
			  zephyr_smp_transport_ud_copy_fn *ud_copy_func,
			  zephyr_smp_transport_ud_free_fn *ud_free_func)
{
    de08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    de0c:	f8dd 8018 	ldr.w	r8, [sp, #24]
    de10:	4604      	mov	r4, r0
    de12:	461d      	mov	r5, r3
    de14:	460f      	mov	r7, r1
    de16:	4616      	mov	r6, r2
	*zst = (struct zephyr_smp_transport) {
    de18:	2100      	movs	r1, #0
    de1a:	2230      	movs	r2, #48	; 0x30
    de1c:	f004 fc1a 	bl	12654 <memset>
    de20:	e9c4 7608 	strd	r7, r6, [r4, #32]
    de24:	e9c4 580a 	strd	r5, r8, [r4, #40]	; 0x28

#ifdef CONFIG_MCUMGR_SMP_REASSEMBLY
	zephyr_smp_reassembly_init(zst);
#endif

	k_work_init(&zst->zst_work, zephyr_smp_handle_reqs);
    de28:	4904      	ldr	r1, [pc, #16]	; (de3c <zephyr_smp_transport_init+0x34>)
    de2a:	4620      	mov	r0, r4
    de2c:	f006 fea2 	bl	14b74 <k_work_init>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_QUEUE_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_queue_init(queue);
    de30:	f104 0010 	add.w	r0, r4, #16
	k_fifo_init(&zst->zst_fifo);
}
    de34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    de38:	f006 be2a 	b.w	14a90 <z_impl_k_queue_init>
    de3c:	0000ddc9 	.word	0x0000ddc9

0000de40 <smp_uart_init>:

	return rc;
}

static int smp_uart_init(const struct device *dev)
{
    de40:	b513      	push	{r0, r1, r4, lr}
	ARG_UNUSED(dev);

	zephyr_smp_transport_init(&smp_uart_transport, smp_uart_tx_pkt,
    de42:	2400      	movs	r4, #0
    de44:	4a06      	ldr	r2, [pc, #24]	; (de60 <smp_uart_init+0x20>)
    de46:	4907      	ldr	r1, [pc, #28]	; (de64 <smp_uart_init+0x24>)
    de48:	4807      	ldr	r0, [pc, #28]	; (de68 <smp_uart_init+0x28>)
    de4a:	9400      	str	r4, [sp, #0]
    de4c:	4623      	mov	r3, r4
    de4e:	f7ff ffdb 	bl	de08 <zephyr_smp_transport_init>
				  smp_uart_get_mtu, NULL, NULL);
	uart_mcumgr_register(smp_uart_rx_frag);
    de52:	4806      	ldr	r0, [pc, #24]	; (de6c <smp_uart_init+0x2c>)
    de54:	f001 f8e0 	bl	f018 <uart_mcumgr_register>

	return 0;
}
    de58:	4620      	mov	r0, r4
    de5a:	b002      	add	sp, #8
    de5c:	bd10      	pop	{r4, pc}
    de5e:	bf00      	nop
    de60:	0001288b 	.word	0x0001288b
    de64:	00012891 	.word	0x00012891
    de68:	200003e4 	.word	0x200003e4
    de6c:	0000de71 	.word	0x0000de71

0000de70 <smp_uart_rx_frag>:
{
    de70:	b508      	push	{r3, lr}
    de72:	4601      	mov	r1, r0
	k_fifo_put(&smp_uart_rx_fifo, rx_buf);
    de74:	4803      	ldr	r0, [pc, #12]	; (de84 <smp_uart_rx_frag+0x14>)
    de76:	f006 fe13 	bl	14aa0 <k_queue_append>
}
    de7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_work_submit(&smp_uart_work);
    de7e:	4802      	ldr	r0, [pc, #8]	; (de88 <smp_uart_rx_frag+0x18>)
    de80:	f003 b998 	b.w	111b4 <k_work_submit>
    de84:	2000019c 	.word	0x2000019c
    de88:	20000010 	.word	0x20000010

0000de8c <smp_uart_process_rx_queue>:
{
    de8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (void *) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_QUEUE_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_queue_get(queue, timeout);
    de8e:	4e0d      	ldr	r6, [pc, #52]	; (dec4 <smp_uart_process_rx_queue+0x38>)
	nb = mcumgr_serial_process_frag(&smp_uart_rx_ctxt,
    de90:	4f0d      	ldr	r7, [pc, #52]	; (dec8 <smp_uart_process_rx_queue+0x3c>)
    de92:	2200      	movs	r2, #0
    de94:	2300      	movs	r3, #0
    de96:	4630      	mov	r0, r6
    de98:	f003 f82a 	bl	10ef0 <z_impl_k_queue_get>
	while ((rx_buf = k_fifo_get(&smp_uart_rx_fifo, K_NO_WAIT)) != NULL) {
    de9c:	4604      	mov	r4, r0
    de9e:	b900      	cbnz	r0, dea2 <smp_uart_process_rx_queue+0x16>
}
    dea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nb = mcumgr_serial_process_frag(&smp_uart_rx_ctxt,
    dea2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    dea6:	1d21      	adds	r1, r4, #4
    dea8:	4638      	mov	r0, r7
    deaa:	f005 fa8c 	bl	133c6 <mcumgr_serial_process_frag>
    deae:	4605      	mov	r5, r0
	uart_mcumgr_free_rx_buf(rx_buf);
    deb0:	4620      	mov	r0, r4
    deb2:	f001 f825 	bl	ef00 <uart_mcumgr_free_rx_buf>
	if (nb != NULL) {
    deb6:	2d00      	cmp	r5, #0
    deb8:	d0eb      	beq.n	de92 <smp_uart_process_rx_queue+0x6>
		zephyr_smp_rx_req(&smp_uart_transport, nb);
    deba:	4804      	ldr	r0, [pc, #16]	; (decc <smp_uart_process_rx_queue+0x40>)
    debc:	4629      	mov	r1, r5
    debe:	f004 fcda 	bl	12876 <zephyr_smp_rx_req>
    dec2:	e7e6      	b.n	de92 <smp_uart_process_rx_queue+0x6>
    dec4:	2000019c 	.word	0x2000019c
    dec8:	200003dc 	.word	0x200003dc
    decc:	200003e4 	.word	0x200003e4

0000ded0 <img_mgmt_impl_write_image_data>:
}

int
img_mgmt_impl_write_image_data(unsigned int offset, const void *data, unsigned int num_bytes,
				   bool last)
{
    ded0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ded4:	4c12      	ldr	r4, [pc, #72]	; (df20 <img_mgmt_impl_write_image_data+0x50>)
    ded6:	460e      	mov	r6, r1
    ded8:	4617      	mov	r7, r2
    deda:	4698      	mov	r8, r3

	if (CONFIG_HEAP_MEM_POOL_SIZE > 0 && offset != 0 && ctx == NULL) {
		return MGMT_ERR_EUNKNOWN;
	}

	if (offset == 0) {
    dedc:	4605      	mov	r5, r0
    dede:	b180      	cbz	r0, df02 <img_mgmt_impl_write_image_data+0x32>
			rc = MGMT_ERR_EUNKNOWN;
			goto out;
		}
	}

	if (offset != ctx->stream.bytes_written + ctx->stream.buf_bytes) {
    dee0:	6820      	ldr	r0, [r4, #0]
    dee2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
    dee6:	f8d0 220c 	ldr.w	r2, [r0, #524]	; 0x20c
    deea:	4413      	add	r3, r2
    deec:	42ab      	cmp	r3, r5
    deee:	d113      	bne.n	df18 <img_mgmt_impl_write_image_data+0x48>
		rc = MGMT_ERR_EUNKNOWN;
		goto out;
	}

	/* Cast away const. */
	rc = flash_img_buffered_write(ctx, (void *)data, num_bytes, last);
    def0:	4643      	mov	r3, r8
    def2:	463a      	mov	r2, r7
    def4:	4631      	mov	r1, r6
    def6:	f004 fa23 	bl	12340 <flash_img_buffered_write>
	if (rc != 0) {
    defa:	3800      	subs	r0, #0
    defc:	bf18      	it	ne
    defe:	2001      	movne	r0, #1
	if (CONFIG_HEAP_MEM_POOL_SIZE > 0 && (last || rc != 0)) {
		k_free(ctx);
		ctx = NULL;
	}

	return rc;
    df00:	e00b      	b.n	df1a <img_mgmt_impl_write_image_data+0x4a>
		if (ctx == NULL) {
    df02:	6823      	ldr	r3, [r4, #0]
    df04:	b90b      	cbnz	r3, df0a <img_mgmt_impl_write_image_data+0x3a>
			ctx = alloc_ctx();
    df06:	4b07      	ldr	r3, [pc, #28]	; (df24 <img_mgmt_impl_write_image_data+0x54>)
    df08:	6023      	str	r3, [r4, #0]
		rc = flash_img_init_id(ctx, g_img_mgmt_state.area_id);
    df0a:	4b07      	ldr	r3, [pc, #28]	; (df28 <img_mgmt_impl_write_image_data+0x58>)
    df0c:	6820      	ldr	r0, [r4, #0]
    df0e:	7819      	ldrb	r1, [r3, #0]
    df10:	f004 fa28 	bl	12364 <flash_img_init_id>
		if (rc != 0) {
    df14:	2800      	cmp	r0, #0
    df16:	d0e3      	beq.n	dee0 <img_mgmt_impl_write_image_data+0x10>
			rc = MGMT_ERR_EUNKNOWN;
    df18:	2001      	movs	r0, #1
}
    df1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    df1e:	bf00      	nop
    df20:	20000414 	.word	0x20000414
    df24:	20000418 	.word	0x20000418
    df28:	2000063c 	.word	0x2000063c

0000df2c <img_mgmt_impl_erase_image_data>:

int
img_mgmt_impl_erase_image_data(unsigned int off, unsigned int num_bytes)
{
    df2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    df2e:	460c      	mov	r4, r1
	const struct flash_area *fa;
	int rc;

	if (off != 0) {
    df30:	2800      	cmp	r0, #0
    df32:	d13f      	bne.n	dfb4 <img_mgmt_impl_erase_image_data+0x88>
		rc = MGMT_ERR_EINVAL;
		goto end;
	}

	rc = flash_area_open_ex(g_img_mgmt_state.area_id, &fa);
    df34:	4b21      	ldr	r3, [pc, #132]	; (dfbc <img_mgmt_impl_erase_image_data+0x90>)
    df36:	4669      	mov	r1, sp
    df38:	7818      	ldrb	r0, [r3, #0]
    df3a:	f004 feb8 	bl	12cae <flash_area_open_ex>
	if (rc != 0) {
    df3e:	2800      	cmp	r0, #0
    df40:	d13a      	bne.n	dfb8 <img_mgmt_impl_erase_image_data+0x8c>
		rc = MGMT_ERR_EUNKNOWN;
		goto end;
	}

	/* align requested erase size to the erase-block-size */
	const struct device *dev = flash_area_get_device(fa);
    df42:	9800      	ldr	r0, [sp, #0]
    df44:	f004 fa88 	bl	12458 <flash_area_get_device>
	if (dev == NULL) {
    df48:	4606      	mov	r6, r0
    df4a:	b930      	cbnz	r0, df5a <img_mgmt_impl_erase_image_data+0x2e>
		rc = MGMT_ERR_EUNKNOWN;
    df4c:	2401      	movs	r4, #1
	}

	rc = 0;

end_fa:
	flash_area_close(fa);
    df4e:	9800      	ldr	r0, [sp, #0]
    df50:	f004 fa29 	bl	123a6 <flash_area_close>
end:
	return rc;
}
    df54:	4620      	mov	r0, r4
    df56:	b004      	add	sp, #16
    df58:	bd70      	pop	{r4, r5, r6, pc}
	off_t page_offset = fa->fa_off + num_bytes - 1;
    df5a:	9b00      	ldr	r3, [sp, #0]
    df5c:	685b      	ldr	r3, [r3, #4]
    df5e:	3b01      	subs	r3, #1
    df60:	1919      	adds	r1, r3, r4
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    df62:	aa01      	add	r2, sp, #4
    df64:	f005 fc6c 	bl	13840 <z_impl_flash_get_page_info_by_offs>
	if (rc != 0) {
    df68:	4601      	mov	r1, r0
    df6a:	2800      	cmp	r0, #0
    df6c:	d1ee      	bne.n	df4c <img_mgmt_impl_erase_image_data+0x20>
	size_t erase_size = page.start_offset + page.size - fa->fa_off;
    df6e:	e9dd 0500 	ldrd	r0, r5, [sp]
    df72:	9a02      	ldr	r2, [sp, #8]
    df74:	4415      	add	r5, r2
    df76:	6842      	ldr	r2, [r0, #4]
    df78:	1aad      	subs	r5, r5, r2
	rc = flash_area_erase(fa, 0, erase_size);
    df7a:	462a      	mov	r2, r5
    df7c:	f004 fa4c 	bl	12418 <flash_area_erase>
	if (rc != 0) {
    df80:	4604      	mov	r4, r0
    df82:	2800      	cmp	r0, #0
    df84:	d1e2      	bne.n	df4c <img_mgmt_impl_erase_image_data+0x20>
	off = BOOT_TRAILER_IMG_STATUS_OFFS(fa);
    df86:	9b00      	ldr	r3, [sp, #0]
    df88:	6899      	ldr	r1, [r3, #8]
    df8a:	3920      	subs	r1, #32
	if (off >= erase_size) {
    df8c:	42a9      	cmp	r1, r5
    df8e:	d3de      	bcc.n	df4e <img_mgmt_impl_erase_image_data+0x22>
		rc = flash_get_page_info_by_offs(dev, fa->fa_off + off, &page);
    df90:	685b      	ldr	r3, [r3, #4]
    df92:	4419      	add	r1, r3
    df94:	aa01      	add	r2, sp, #4
    df96:	4630      	mov	r0, r6
    df98:	f005 fc52 	bl	13840 <z_impl_flash_get_page_info_by_offs>
		off = page.start_offset - fa->fa_off;
    df9c:	9800      	ldr	r0, [sp, #0]
    df9e:	9901      	ldr	r1, [sp, #4]
    dfa0:	6843      	ldr	r3, [r0, #4]
		erase_size = fa->fa_size - off;
    dfa2:	6882      	ldr	r2, [r0, #8]
		off = page.start_offset - fa->fa_off;
    dfa4:	1ac9      	subs	r1, r1, r3
		rc = flash_area_erase(fa, off, erase_size);
    dfa6:	1a52      	subs	r2, r2, r1
    dfa8:	f004 fa36 	bl	12418 <flash_area_erase>
		if (rc != 0) {
    dfac:	1e04      	subs	r4, r0, #0
    dfae:	bf18      	it	ne
    dfb0:	2401      	movne	r4, #1
    dfb2:	e7cc      	b.n	df4e <img_mgmt_impl_erase_image_data+0x22>
		rc = MGMT_ERR_EINVAL;
    dfb4:	2403      	movs	r4, #3
    dfb6:	e7cd      	b.n	df54 <img_mgmt_impl_erase_image_data+0x28>
		rc = MGMT_ERR_EUNKNOWN;
    dfb8:	2401      	movs	r4, #1
	return rc;
    dfba:	e7cb      	b.n	df54 <img_mgmt_impl_erase_image_data+0x28>
    dfbc:	2000063c 	.word	0x2000063c

0000dfc0 <img_mgmt_impl_upload_inspect>:
 *	   instead.
 */
int
img_mgmt_impl_upload_inspect(const struct img_mgmt_upload_req *req,
				 struct img_mgmt_upload_action *action)
{
    dfc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    dfc2:	460d      	mov	r5, r1
    dfc4:	4604      	mov	r4, r0
	const struct image_header *hdr;
	struct image_version cur_ver;
	bool empty;
	int rc;

	memset(action, 0, sizeof(*action));
    dfc6:	2218      	movs	r2, #24
    dfc8:	2100      	movs	r1, #0
    dfca:	4628      	mov	r0, r5
    dfcc:	f004 fb42 	bl	12654 <memset>

	if (req->off == -1) {
    dfd0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    dfd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    dfd8:	bf08      	it	eq
    dfda:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    dfde:	d102      	bne.n	dfe6 <img_mgmt_impl_upload_inspect+0x26>
		/* Request did not include an `off` field. */
		IMG_MGMT_UPLOAD_ACTION_SET_RC_RSN(action, img_mgmt_err_str_hdr_malformed);
		return MGMT_ERR_EINVAL;
    dfe0:	2003      	movs	r0, #3
	action->write_bytes = req->data_len;
	action->proceed = true;
	IMG_MGMT_UPLOAD_ACTION_SET_RC_RSN(action, NULL);

	return 0;
}
    dfe2:	b004      	add	sp, #16
    dfe4:	bd70      	pop	{r4, r5, r6, pc}
	if (req->off == 0) {
    dfe6:	ea52 0103 	orrs.w	r1, r2, r3
    dfea:	d15a      	bne.n	e0a2 <img_mgmt_impl_upload_inspect+0xe2>
		if (req->data_len < sizeof(struct image_header)) {
    dfec:	69a3      	ldr	r3, [r4, #24]
    dfee:	2b1f      	cmp	r3, #31
    dff0:	d9f6      	bls.n	dfe0 <img_mgmt_impl_upload_inspect+0x20>
		if (req->size == -1) {
    dff2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    dff6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    dffa:	bf08      	it	eq
    dffc:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    e000:	d0ee      	beq.n	dfe0 <img_mgmt_impl_upload_inspect+0x20>
		action->size = req->size;
    e002:	e9c5 2300 	strd	r2, r3, [r5]
		if (hdr->ih_magic != IMAGE_MAGIC) {
    e006:	6a22      	ldr	r2, [r4, #32]
    e008:	4b2c      	ldr	r3, [pc, #176]	; (e0bc <img_mgmt_impl_upload_inspect+0xfc>)
    e00a:	429a      	cmp	r2, r3
    e00c:	d1e8      	bne.n	dfe0 <img_mgmt_impl_upload_inspect+0x20>
		if (req->data_sha_len > IMG_MGMT_DATA_SHA_LEN) {
    e00e:	69e2      	ldr	r2, [r4, #28]
    e010:	2a20      	cmp	r2, #32
    e012:	d8e5      	bhi.n	dfe0 <img_mgmt_impl_upload_inspect+0x20>
		if ((req->data_sha_len > 0) && (g_img_mgmt_state.area_id != -1)) {
    e014:	b932      	cbnz	r2, e024 <img_mgmt_impl_upload_inspect+0x64>
		action->area_id = img_mgmt_get_unused_slot_area_id(req->image);
    e016:	f004 fea5 	bl	12d64 <img_mgmt_get_unused_slot_area_id.constprop.0>
		if (action->area_id < 0) {
    e01a:	2800      	cmp	r0, #0
		action->area_id = img_mgmt_get_unused_slot_area_id(req->image);
    e01c:	60e8      	str	r0, [r5, #12]
		if (action->area_id < 0) {
    e01e:	da11      	bge.n	e044 <img_mgmt_impl_upload_inspect+0x84>
			return MGMT_ERR_ENOENT;
    e020:	2005      	movs	r0, #5
    e022:	e7de      	b.n	dfe2 <img_mgmt_impl_upload_inspect+0x22>
		if ((req->data_sha_len > 0) && (g_img_mgmt_state.area_id != -1)) {
    e024:	4826      	ldr	r0, [pc, #152]	; (e0c0 <img_mgmt_impl_upload_inspect+0x100>)
    e026:	6803      	ldr	r3, [r0, #0]
    e028:	3301      	adds	r3, #1
    e02a:	d0f4      	beq.n	e016 <img_mgmt_impl_upload_inspect+0x56>
			if ((g_img_mgmt_state.data_sha_len == req->data_sha_len) &&
    e02c:	7b03      	ldrb	r3, [r0, #12]
    e02e:	429a      	cmp	r2, r3
    e030:	d1f1      	bne.n	e016 <img_mgmt_impl_upload_inspect+0x56>
			    !memcmp(g_img_mgmt_state.data_sha, req->data_sha, req->data_sha_len)) {
    e032:	f504 7108 	add.w	r1, r4, #544	; 0x220
    e036:	300d      	adds	r0, #13
    e038:	f004 faf0 	bl	1261c <memcmp>
			if ((g_img_mgmt_state.data_sha_len == req->data_sha_len) &&
    e03c:	2800      	cmp	r0, #0
    e03e:	d1ea      	bne.n	e016 <img_mgmt_impl_upload_inspect+0x56>
	return 0;
    e040:	2000      	movs	r0, #0
    e042:	e7ce      	b.n	dfe2 <img_mgmt_impl_upload_inspect+0x22>
		if (req->upgrade) {
    e044:	f894 3240 	ldrb.w	r3, [r4, #576]	; 0x240
    e048:	b93b      	cbnz	r3, e05a <img_mgmt_impl_upload_inspect+0x9a>
		rc = zephyr_img_mgmt_flash_check_empty(action->area_id, &empty);
    e04a:	7b28      	ldrb	r0, [r5, #12]
    e04c:	f10d 0107 	add.w	r1, sp, #7
    e050:	f004 fe40 	bl	12cd4 <zephyr_img_mgmt_flash_check_empty>
		if (rc) {
    e054:	b1d8      	cbz	r0, e08e <img_mgmt_impl_upload_inspect+0xce>
				return MGMT_ERR_EUNKNOWN;
    e056:	2001      	movs	r0, #1
    e058:	e7c3      	b.n	dfe2 <img_mgmt_impl_upload_inspect+0x22>
			rc = img_mgmt_my_version(&cur_ver);
    e05a:	a802      	add	r0, sp, #8
    e05c:	f004 ff37 	bl	12ece <img_mgmt_my_version>
			if (rc != 0) {
    e060:	2800      	cmp	r0, #0
    e062:	d1f8      	bne.n	e056 <img_mgmt_impl_upload_inspect+0x96>
	if (a->iv_major < b->iv_major) {
    e064:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e068:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    e06c:	429a      	cmp	r2, r3
    e06e:	d3ec      	bcc.n	e04a <img_mgmt_impl_upload_inspect+0x8a>
	} else if (a->iv_major > b->iv_major) {
    e070:	d80b      	bhi.n	e08a <img_mgmt_impl_upload_inspect+0xca>
	if (a->iv_minor < b->iv_minor) {
    e072:	f89d 2009 	ldrb.w	r2, [sp, #9]
    e076:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    e07a:	429a      	cmp	r2, r3
    e07c:	d3e5      	bcc.n	e04a <img_mgmt_impl_upload_inspect+0x8a>
	} else if (a->iv_minor > b->iv_minor) {
    e07e:	d804      	bhi.n	e08a <img_mgmt_impl_upload_inspect+0xca>
	if (a->iv_revision < b->iv_revision) {
    e080:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    e084:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    e086:	429a      	cmp	r2, r3
    e088:	d3df      	bcc.n	e04a <img_mgmt_impl_upload_inspect+0x8a>
				return MGMT_ERR_EBADSTATE;
    e08a:	2006      	movs	r0, #6
    e08c:	e7a9      	b.n	dfe2 <img_mgmt_impl_upload_inspect+0x22>
		action->erase = !empty;
    e08e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e092:	f083 0301 	eor.w	r3, r3, #1
    e096:	746b      	strb	r3, [r5, #17]
	action->write_bytes = req->data_len;
    e098:	69a3      	ldr	r3, [r4, #24]
    e09a:	60ab      	str	r3, [r5, #8]
	action->proceed = true;
    e09c:	2301      	movs	r3, #1
    e09e:	742b      	strb	r3, [r5, #16]
    e0a0:	e7ce      	b.n	e040 <img_mgmt_impl_upload_inspect+0x80>
		action->area_id = g_img_mgmt_state.area_id;
    e0a2:	4907      	ldr	r1, [pc, #28]	; (e0c0 <img_mgmt_impl_upload_inspect+0x100>)
    e0a4:	6808      	ldr	r0, [r1, #0]
		action->size = g_img_mgmt_state.size;
    e0a6:	688e      	ldr	r6, [r1, #8]
		if (req->off != g_img_mgmt_state.off) {
    e0a8:	6849      	ldr	r1, [r1, #4]
		action->area_id = g_img_mgmt_state.area_id;
    e0aa:	60e8      	str	r0, [r5, #12]
		action->size = g_img_mgmt_state.size;
    e0ac:	2000      	movs	r0, #0
		if (req->off != g_img_mgmt_state.off) {
    e0ae:	4283      	cmp	r3, r0
    e0b0:	bf08      	it	eq
    e0b2:	428a      	cmpeq	r2, r1
		action->size = g_img_mgmt_state.size;
    e0b4:	e9c5 6000 	strd	r6, r0, [r5]
		if (req->off != g_img_mgmt_state.off) {
    e0b8:	d1c2      	bne.n	e040 <img_mgmt_impl_upload_inspect+0x80>
    e0ba:	e7ed      	b.n	e098 <img_mgmt_impl_upload_inspect+0xd8>
    e0bc:	96f3b83d 	.word	0x96f3b83d
    e0c0:	2000063c 	.word	0x2000063c

0000e0c4 <img_mgmt_upload_good_rsp>:
	return 0;
}

static int
img_mgmt_upload_good_rsp(struct mgmt_ctxt *ctxt)
{
    e0c4:	b538      	push	{r3, r4, r5, lr}
	CborError err = CborNoError;

	err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
    e0c6:	490e      	ldr	r1, [pc, #56]	; (e100 <img_mgmt_upload_good_rsp+0x3c>)
{
    e0c8:	4605      	mov	r5, r0
	err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
    e0ca:	f004 fed6 	bl	12e7a <cbor_encode_text_stringz>
	err |= cbor_encode_int(&ctxt->encoder, MGMT_ERR_EOK);
    e0ce:	2200      	movs	r2, #0
    e0d0:	2300      	movs	r3, #0
	err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
    e0d2:	4604      	mov	r4, r0
	err |= cbor_encode_int(&ctxt->encoder, MGMT_ERR_EOK);
    e0d4:	4628      	mov	r0, r5
    e0d6:	f006 f8c7 	bl	14268 <cbor_encode_int>
	err |= cbor_encode_text_stringz(&ctxt->encoder, "off");
    e0da:	490a      	ldr	r1, [pc, #40]	; (e104 <img_mgmt_upload_good_rsp+0x40>)
	err |= cbor_encode_int(&ctxt->encoder, MGMT_ERR_EOK);
    e0dc:	4304      	orrs	r4, r0
	err |= cbor_encode_text_stringz(&ctxt->encoder, "off");
    e0de:	4628      	mov	r0, r5
    e0e0:	f004 fecb 	bl	12e7a <cbor_encode_text_stringz>
	err |= cbor_encode_int(&ctxt->encoder, g_img_mgmt_state.off);
    e0e4:	4b08      	ldr	r3, [pc, #32]	; (e108 <img_mgmt_upload_good_rsp+0x44>)
	err |= cbor_encode_text_stringz(&ctxt->encoder, "off");
    e0e6:	4304      	orrs	r4, r0
	err |= cbor_encode_int(&ctxt->encoder, g_img_mgmt_state.off);
    e0e8:	685a      	ldr	r2, [r3, #4]
    e0ea:	4628      	mov	r0, r5
    e0ec:	2300      	movs	r3, #0
    e0ee:	f006 f8bb 	bl	14268 <cbor_encode_int>

	if (err != 0) {
		return MGMT_ERR_ENOMEM;
    e0f2:	ea54 0300 	orrs.w	r3, r4, r0
	}

	return 0;
}
    e0f6:	bf14      	ite	ne
    e0f8:	2002      	movne	r0, #2
    e0fa:	2000      	moveq	r0, #0
    e0fc:	bd38      	pop	{r3, r4, r5, pc}
    e0fe:	bf00      	nop
    e100:	00015521 	.word	0x00015521
    e104:	00015524 	.word	0x00015524
    e108:	2000063c 	.word	0x2000063c

0000e10c <img_mgmt_read_info>:
{
    e10c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e110:	b08b      	sub	sp, #44	; 0x2c
    e112:	460c      	mov	r4, r1
	rc = img_mgmt_impl_erased_val(image_slot, &erased_val);
    e114:	f10d 0103 	add.w	r1, sp, #3
{
    e118:	4606      	mov	r6, r0
    e11a:	4617      	mov	r7, r2
    e11c:	461d      	mov	r5, r3
	rc = img_mgmt_impl_erased_val(image_slot, &erased_val);
    e11e:	f004 fe8a 	bl	12e36 <img_mgmt_impl_erased_val>
	if (rc != 0) {
    e122:	4601      	mov	r1, r0
    e124:	b108      	cbz	r0, e12a <img_mgmt_read_info+0x1e>
		return MGMT_ERR_EUNKNOWN;
    e126:	2001      	movs	r0, #1
    e128:	e049      	b.n	e1be <img_mgmt_read_info+0xb2>
	rc = img_mgmt_impl_read(image_slot, 0, &hdr, sizeof(hdr));
    e12a:	2320      	movs	r3, #32
    e12c:	aa02      	add	r2, sp, #8
    e12e:	4630      	mov	r0, r6
    e130:	f004 fe56 	bl	12de0 <img_mgmt_impl_read>
	if (rc != 0) {
    e134:	2800      	cmp	r0, #0
    e136:	d1f6      	bne.n	e126 <img_mgmt_read_info+0x1a>
	if (ver != NULL) {
    e138:	b12c      	cbz	r4, e146 <img_mgmt_read_info+0x3a>
		memset(ver, erased_val, sizeof(*ver));
    e13a:	f89d 1003 	ldrb.w	r1, [sp, #3]
    e13e:	2208      	movs	r2, #8
    e140:	4620      	mov	r0, r4
    e142:	f004 fa87 	bl	12654 <memset>
	if (hdr.ih_magic == IMAGE_MAGIC) {
    e146:	9902      	ldr	r1, [sp, #8]
    e148:	4b3a      	ldr	r3, [pc, #232]	; (e234 <img_mgmt_read_info+0x128>)
    e14a:	4299      	cmp	r1, r3
    e14c:	d13a      	bne.n	e1c4 <img_mgmt_read_info+0xb8>
		if (ver != NULL) {
    e14e:	b124      	cbz	r4, e15a <img_mgmt_read_info+0x4e>
			memcpy(ver, &hdr.ih_ver, sizeof(*ver));
    e150:	2208      	movs	r2, #8
    e152:	a907      	add	r1, sp, #28
    e154:	4620      	mov	r0, r4
    e156:	f004 fa72 	bl	1263e <memcpy>
	if (flags != NULL) {
    e15a:	b10d      	cbz	r5, e160 <img_mgmt_read_info+0x54>
		*flags = hdr.ih_flags;
    e15c:	9b06      	ldr	r3, [sp, #24]
    e15e:	602b      	str	r3, [r5, #0]
	data_off = hdr.ih_hdr_size + hdr.ih_img_size;
    e160:	9905      	ldr	r1, [sp, #20]
    e162:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	rc = img_mgmt_impl_read(slot, *start_off, &tlv_info, sizeof(tlv_info));
    e166:	2304      	movs	r3, #4
	data_off = hdr.ih_hdr_size + hdr.ih_img_size;
    e168:	440c      	add	r4, r1
	rc = img_mgmt_impl_read(slot, *start_off, &tlv_info, sizeof(tlv_info));
    e16a:	eb0d 0203 	add.w	r2, sp, r3
    e16e:	4621      	mov	r1, r4
    e170:	4630      	mov	r0, r6
    e172:	f004 fe35 	bl	12de0 <img_mgmt_impl_read>
	if (rc != 0) {
    e176:	b940      	cbnz	r0, e18a <img_mgmt_read_info+0x7e>
	if (tlv_info.it_magic != magic) {
    e178:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    e17c:	f646 1308 	movw	r3, #26888	; 0x6908
    e180:	429a      	cmp	r2, r3
	*end_off = *start_off + tlv_info.it_tlv_tot;
    e182:	bf04      	itt	eq
    e184:	f8bd 3006 	ldrheq.w	r3, [sp, #6]
		data_off = data_end - sizeof(struct image_tlv_info);
    e188:	18e4      	addeq	r4, r4, r3
	rc = img_mgmt_impl_read(slot, *start_off, &tlv_info, sizeof(tlv_info));
    e18a:	2304      	movs	r3, #4
    e18c:	eb0d 0203 	add.w	r2, sp, r3
    e190:	4621      	mov	r1, r4
    e192:	4630      	mov	r0, r6
    e194:	f004 fe24 	bl	12de0 <img_mgmt_impl_read>
	if (rc != 0) {
    e198:	4605      	mov	r5, r0
    e19a:	2800      	cmp	r0, #0
    e19c:	d1c3      	bne.n	e126 <img_mgmt_read_info+0x1a>
	if (tlv_info.it_magic != magic) {
    e19e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    e1a2:	f646 1307 	movw	r3, #26887	; 0x6907
    e1a6:	429a      	cmp	r2, r3
    e1a8:	d1bd      	bne.n	e126 <img_mgmt_read_info+0x1a>
	*end_off = *start_off + tlv_info.it_tlv_tot;
    e1aa:	f8bd 8006 	ldrh.w	r8, [sp, #6]
	*start_off += sizeof(tlv_info);
    e1ae:	3404      	adds	r4, #4
	*end_off = *start_off + tlv_info.it_tlv_tot;
    e1b0:	44a0      	add	r8, r4
	while (data_off + sizeof(tlv) <= data_end) {
    e1b2:	f104 0904 	add.w	r9, r4, #4
    e1b6:	45c1      	cmp	r9, r8
    e1b8:	d910      	bls.n	e1dc <img_mgmt_read_info+0xd0>
		return MGMT_ERR_EUNKNOWN;
    e1ba:	f085 0001 	eor.w	r0, r5, #1
}
    e1be:	b00b      	add	sp, #44	; 0x2c
    e1c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	erased_val_32 = ERASED_VAL_32(erased_val);
    e1c4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e1c8:	0413      	lsls	r3, r2, #16
    e1ca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    e1ce:	4313      	orrs	r3, r2
    e1d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	} else if (hdr.ih_magic == erased_val_32) {
    e1d4:	4299      	cmp	r1, r3
    e1d6:	d1a6      	bne.n	e126 <img_mgmt_read_info+0x1a>
		return MGMT_ERR_ENOENT;
    e1d8:	2005      	movs	r0, #5
    e1da:	e7f0      	b.n	e1be <img_mgmt_read_info+0xb2>
		rc = img_mgmt_impl_read(image_slot, data_off, &tlv, sizeof(tlv));
    e1dc:	2304      	movs	r3, #4
    e1de:	eb0d 0203 	add.w	r2, sp, r3
    e1e2:	4621      	mov	r1, r4
    e1e4:	4630      	mov	r0, r6
    e1e6:	f004 fdfb 	bl	12de0 <img_mgmt_impl_read>
		if (rc != 0) {
    e1ea:	2800      	cmp	r0, #0
    e1ec:	d19b      	bne.n	e126 <img_mgmt_read_info+0x1a>
		if (tlv.it_type == 0xff && tlv.it_len == 0xffff) {
    e1ee:	f89d 2004 	ldrb.w	r2, [sp, #4]
    e1f2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    e1f6:	2aff      	cmp	r2, #255	; 0xff
    e1f8:	d108      	bne.n	e20c <img_mgmt_read_info+0x100>
    e1fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e1fe:	4293      	cmp	r3, r2
    e200:	d091      	beq.n	e126 <img_mgmt_read_info+0x1a>
			data_off += sizeof(tlv) + tlv.it_len;
    e202:	3304      	adds	r3, #4
    e204:	eb03 0904 	add.w	r9, r3, r4
		hash_found = true;
    e208:	464c      	mov	r4, r9
    e20a:	e7d2      	b.n	e1b2 <img_mgmt_read_info+0xa6>
		if (tlv.it_type != IMAGE_TLV_SHA256 || tlv.it_len != IMAGE_HASH_LEN) {
    e20c:	2a10      	cmp	r2, #16
    e20e:	d1f8      	bne.n	e202 <img_mgmt_read_info+0xf6>
    e210:	2b20      	cmp	r3, #32
    e212:	d1f6      	bne.n	e202 <img_mgmt_read_info+0xf6>
		if (hash_found) {
    e214:	2d00      	cmp	r5, #0
    e216:	d186      	bne.n	e126 <img_mgmt_read_info+0x1a>
		if (hash != NULL) {
    e218:	b157      	cbz	r7, e230 <img_mgmt_read_info+0x124>
			if (data_off + IMAGE_HASH_LEN > data_end) {
    e21a:	3424      	adds	r4, #36	; 0x24
    e21c:	4544      	cmp	r4, r8
    e21e:	d882      	bhi.n	e126 <img_mgmt_read_info+0x1a>
			rc = img_mgmt_impl_read(image_slot, data_off, hash,
    e220:	463a      	mov	r2, r7
    e222:	4649      	mov	r1, r9
    e224:	4630      	mov	r0, r6
    e226:	f004 fddb 	bl	12de0 <img_mgmt_impl_read>
			if (rc != 0) {
    e22a:	2800      	cmp	r0, #0
    e22c:	f47f af7b 	bne.w	e126 <img_mgmt_read_info+0x1a>
		hash_found = true;
    e230:	2501      	movs	r5, #1
    e232:	e7e9      	b.n	e208 <img_mgmt_read_info+0xfc>
    e234:	96f3b83d 	.word	0x96f3b83d

0000e238 <img_mgmt_dfu_stopped>:
}

void
img_mgmt_dfu_stopped(void)
{
	if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_stopped_cb) {
    e238:	4b03      	ldr	r3, [pc, #12]	; (e248 <img_mgmt_dfu_stopped+0x10>)
    e23a:	681b      	ldr	r3, [r3, #0]
    e23c:	b113      	cbz	r3, e244 <img_mgmt_dfu_stopped+0xc>
    e23e:	685b      	ldr	r3, [r3, #4]
    e240:	b103      	cbz	r3, e244 <img_mgmt_dfu_stopped+0xc>
		img_mgmt_dfu_callbacks_fn->dfu_stopped_cb();
    e242:	4718      	bx	r3
	}
}
    e244:	4770      	bx	lr
    e246:	bf00      	nop
    e248:	2000066c 	.word	0x2000066c

0000e24c <img_mgmt_erase>:
{
    e24c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = img_mgmt_read_info(1, &ver, NULL, NULL);
    e24e:	2300      	movs	r3, #0
{
    e250:	4604      	mov	r4, r0
	rc = img_mgmt_read_info(1, &ver, NULL, NULL);
    e252:	461a      	mov	r2, r3
    e254:	4669      	mov	r1, sp
    e256:	2001      	movs	r0, #1
    e258:	f7ff ff58 	bl	e10c <img_mgmt_read_info>
	if (rc == 0) {
    e25c:	b1b0      	cbz	r0, e28c <img_mgmt_erase+0x40>
	rc = img_mgmt_impl_erase_slot();
    e25e:	f004 fd91 	bl	12d84 <img_mgmt_impl_erase_slot>
	if (!rc) {
    e262:	4605      	mov	r5, r0
    e264:	b908      	cbnz	r0, e26a <img_mgmt_erase+0x1e>
		img_mgmt_dfu_stopped();
    e266:	f7ff ffe7 	bl	e238 <img_mgmt_dfu_stopped>
	err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
    e26a:	490c      	ldr	r1, [pc, #48]	; (e29c <img_mgmt_erase+0x50>)
    e26c:	4620      	mov	r0, r4
    e26e:	f004 fe04 	bl	12e7a <cbor_encode_text_stringz>
	err |= cbor_encode_int(&ctxt->encoder, rc);
    e272:	17eb      	asrs	r3, r5, #31
	err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
    e274:	4606      	mov	r6, r0
	err |= cbor_encode_int(&ctxt->encoder, rc);
    e276:	462a      	mov	r2, r5
    e278:	4620      	mov	r0, r4
    e27a:	f005 fff5 	bl	14268 <cbor_encode_int>
		return MGMT_ERR_ENOMEM;
    e27e:	ea56 0300 	orrs.w	r3, r6, r0
    e282:	bf0c      	ite	eq
    e284:	2000      	moveq	r0, #0
    e286:	2002      	movne	r0, #2
}
    e288:	b002      	add	sp, #8
    e28a:	bd70      	pop	{r4, r5, r6, pc}
		if (img_mgmt_slot_in_use(1)) {
    e28c:	2001      	movs	r0, #1
    e28e:	f004 fe60 	bl	12f52 <img_mgmt_slot_in_use>
    e292:	2800      	cmp	r0, #0
    e294:	d0e3      	beq.n	e25e <img_mgmt_erase+0x12>
			return MGMT_ERR_EBADSTATE;
    e296:	2006      	movs	r0, #6
    e298:	e7f6      	b.n	e288 <img_mgmt_erase+0x3c>
    e29a:	bf00      	nop
    e29c:	00015521 	.word	0x00015521

0000e2a0 <img_mgmt_dfu_started>:

void
img_mgmt_dfu_started(void)
{
	if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_started_cb) {
    e2a0:	4b03      	ldr	r3, [pc, #12]	; (e2b0 <img_mgmt_dfu_started+0x10>)
    e2a2:	681b      	ldr	r3, [r3, #0]
    e2a4:	b113      	cbz	r3, e2ac <img_mgmt_dfu_started+0xc>
    e2a6:	681b      	ldr	r3, [r3, #0]
    e2a8:	b103      	cbz	r3, e2ac <img_mgmt_dfu_started+0xc>
		img_mgmt_dfu_callbacks_fn->dfu_started_cb();
    e2aa:	4718      	bx	r3
	}
}
    e2ac:	4770      	bx	lr
    e2ae:	bf00      	nop
    e2b0:	2000066c 	.word	0x2000066c

0000e2b4 <img_mgmt_dfu_pending>:

void
img_mgmt_dfu_pending(void)
{
	if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_pending_cb) {
    e2b4:	4b03      	ldr	r3, [pc, #12]	; (e2c4 <img_mgmt_dfu_pending+0x10>)
    e2b6:	681b      	ldr	r3, [r3, #0]
    e2b8:	b113      	cbz	r3, e2c0 <img_mgmt_dfu_pending+0xc>
    e2ba:	689b      	ldr	r3, [r3, #8]
    e2bc:	b103      	cbz	r3, e2c0 <img_mgmt_dfu_pending+0xc>
		img_mgmt_dfu_callbacks_fn->dfu_pending_cb();
    e2be:	4718      	bx	r3
	}
}
    e2c0:	4770      	bx	lr
    e2c2:	bf00      	nop
    e2c4:	2000066c 	.word	0x2000066c

0000e2c8 <img_mgmt_upload>:
{
    e2c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e2cc:	f5ad 7d77 	sub.w	sp, sp, #988	; 0x3dc
	struct img_mgmt_upload_req req = {
    e2d0:	ad64      	add	r5, sp, #400	; 0x190
{
    e2d2:	4607      	mov	r7, r0
	struct img_mgmt_upload_req req = {
    e2d4:	f44f 7212 	mov.w	r2, #584	; 0x248
    e2d8:	2100      	movs	r1, #0
    e2da:	4628      	mov	r0, r5
    e2dc:	f004 f9ba 	bl	12654 <memset>
    e2e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e2e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e2e8:	e9c5 2302 	strd	r2, r3, [r5, #8]
    e2ec:	e9c5 2304 	strd	r2, r3, [r5, #16]
	const struct cbor_attr_t off_attr[] = {
    e2f0:	2100      	movs	r1, #0
    e2f2:	f44f 72a8 	mov.w	r2, #336	; 0x150
    e2f6:	a810      	add	r0, sp, #64	; 0x40
    e2f8:	f004 f9ac 	bl	12654 <memset>
    e2fc:	4b68      	ldr	r3, [pc, #416]	; (e4a0 <img_mgmt_upload+0x1d8>)
    e2fe:	4969      	ldr	r1, [pc, #420]	; (e4a4 <img_mgmt_upload+0x1dc>)
    e300:	9310      	str	r3, [sp, #64]	; 0x40
    e302:	2301      	movs	r3, #1
    e304:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    e308:	911c      	str	r1, [sp, #112]	; 0x70
    e30a:	f88d 30cc 	strb.w	r3, [sp, #204]	; 0xcc
    e30e:	a96a      	add	r1, sp, #424	; 0x1a8
    e310:	f88d 30fc 	strb.w	r3, [sp, #252]	; 0xfc
    e314:	4b64      	ldr	r3, [pc, #400]	; (e4a8 <img_mgmt_upload+0x1e0>)
    e316:	911f      	str	r1, [sp, #124]	; 0x7c
    e318:	9340      	str	r3, [sp, #256]	; 0x100
    e31a:	f44f 7100 	mov.w	r1, #512	; 0x200
    e31e:	ab6b      	add	r3, sp, #428	; 0x1ac
    e320:	9126      	str	r1, [sp, #152]	; 0x98
    e322:	9343      	str	r3, [sp, #268]	; 0x10c
    e324:	4961      	ldr	r1, [pc, #388]	; (e4ac <img_mgmt_upload+0x1e4>)
    e326:	9128      	str	r1, [sp, #160]	; 0xa0
    e328:	2320      	movs	r3, #32
    e32a:	a968      	add	r1, sp, #416	; 0x1a0
    e32c:	934a      	str	r3, [sp, #296]	; 0x128
    e32e:	4b60      	ldr	r3, [pc, #384]	; (e4b0 <img_mgmt_upload+0x1e8>)
    e330:	912a      	str	r1, [sp, #168]	; 0xa8
    e332:	2202      	movs	r2, #2
    e334:	495f      	ldr	r1, [pc, #380]	; (e4b4 <img_mgmt_upload+0x1ec>)
    e336:	934c      	str	r3, [sp, #304]	; 0x130
    e338:	2305      	movs	r3, #5
    e33a:	2403      	movs	r4, #3
    e33c:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
    e340:	f50d 78d8 	add.w	r8, sp, #432	; 0x1b0
    e344:	f88d 20a4 	strb.w	r2, [sp, #164]	; 0xa4
    e348:	9134      	str	r1, [sp, #208]	; 0xd0
    e34a:	f88d 20d4 	strb.w	r2, [sp, #212]	; 0xd4
    e34e:	f50d 796c 	add.w	r9, sp, #944	; 0x3b0
    e352:	aa66      	add	r2, sp, #408	; 0x198
    e354:	f88d 3134 	strb.w	r3, [sp, #308]	; 0x134
	rc = cbor_read_object(&ctxt->it, off_attr);
    e358:	a910      	add	r1, sp, #64	; 0x40
	const struct cbor_attr_t off_attr[] = {
    e35a:	abf4      	add	r3, sp, #976	; 0x3d0
	rc = cbor_read_object(&ctxt->it, off_attr);
    e35c:	f107 001c 	add.w	r0, r7, #28
	const struct cbor_attr_t off_attr[] = {
    e360:	9512      	str	r5, [sp, #72]	; 0x48
    e362:	f88d 4074 	strb.w	r4, [sp, #116]	; 0x74
    e366:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
    e36a:	9236      	str	r2, [sp, #216]	; 0xd8
    e36c:	f88d 4104 	strb.w	r4, [sp, #260]	; 0x104
    e370:	f8cd 9108 	str.w	r9, [sp, #264]	; 0x108
    e374:	934e      	str	r3, [sp, #312]	; 0x138
	rc = cbor_read_object(&ctxt->it, off_attr);
    e376:	f004 fc96 	bl	12ca6 <cbor_read_object>
	if (rc != 0) {
    e37a:	b938      	cbnz	r0, e38c <img_mgmt_upload+0xc4>
	rc = img_mgmt_impl_upload_inspect(&req, &action);
    e37c:	a902      	add	r1, sp, #8
    e37e:	4628      	mov	r0, r5
    e380:	f7ff fe1e 	bl	dfc0 <img_mgmt_impl_upload_inspect>
	if (rc != 0) {
    e384:	4604      	mov	r4, r0
    e386:	b130      	cbz	r0, e396 <img_mgmt_upload+0xce>
		img_mgmt_dfu_stopped();
    e388:	f7ff ff56 	bl	e238 <img_mgmt_dfu_stopped>
}
    e38c:	4620      	mov	r0, r4
    e38e:	f50d 7d77 	add.w	sp, sp, #988	; 0x3dc
    e392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!action.proceed) {
    e396:	f89d 3018 	ldrb.w	r3, [sp, #24]
    e39a:	b923      	cbnz	r3, e3a6 <img_mgmt_upload+0xde>
	return img_mgmt_upload_good_rsp(ctxt);
    e39c:	4638      	mov	r0, r7
    e39e:	f7ff fe91 	bl	e0c4 <img_mgmt_upload_good_rsp>
    e3a2:	4604      	mov	r4, r0
    e3a4:	e7f2      	b.n	e38c <img_mgmt_upload+0xc4>
	if (img_mgmt_upload_cb != NULL) {
    e3a6:	4b44      	ldr	r3, [pc, #272]	; (e4b8 <img_mgmt_upload+0x1f0>)
    e3a8:	681b      	ldr	r3, [r3, #0]
    e3aa:	bb3b      	cbnz	r3, e3fc <img_mgmt_upload+0x134>
	g_img_mgmt_state.area_id = action.area_id;
    e3ac:	4e43      	ldr	r6, [pc, #268]	; (e4bc <img_mgmt_upload+0x1f4>)
    e3ae:	9b05      	ldr	r3, [sp, #20]
    e3b0:	6033      	str	r3, [r6, #0]
	g_img_mgmt_state.size = action.size;
    e3b2:	9b02      	ldr	r3, [sp, #8]
    e3b4:	60b3      	str	r3, [r6, #8]
	if (req.off == 0) {
    e3b6:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    e3ba:	4313      	orrs	r3, r2
    e3bc:	d136      	bne.n	e42c <img_mgmt_upload+0x164>
		g_img_mgmt_state.off = 0;
    e3be:	2400      	movs	r4, #0
    e3c0:	6074      	str	r4, [r6, #4]
		img_mgmt_dfu_started();
    e3c2:	f7ff ff6d 	bl	e2a0 <img_mgmt_dfu_started>
		g_img_mgmt_state.data_sha_len = req.data_sha_len;
    e3c6:	69ea      	ldr	r2, [r5, #28]
    e3c8:	7332      	strb	r2, [r6, #12]
		memcpy(g_img_mgmt_state.data_sha, req.data_sha, req.data_sha_len);
    e3ca:	4649      	mov	r1, r9
    e3cc:	f106 000d 	add.w	r0, r6, #13
		cmd_status_arg.status = IMG_MGMT_ID_UPLOAD_STATUS_START;
    e3d0:	9401      	str	r4, [sp, #4]
		memcpy(g_img_mgmt_state.data_sha, req.data_sha, req.data_sha_len);
    e3d2:	f004 f934 	bl	1263e <memcpy>
		memset(&g_img_mgmt_state.data_sha[req.data_sha_len], 0,
    e3d6:	69ea      	ldr	r2, [r5, #28]
    e3d8:	f102 000d 	add.w	r0, r2, #13
    e3dc:	4621      	mov	r1, r4
    e3de:	f1c2 0220 	rsb	r2, r2, #32
    e3e2:	4430      	add	r0, r6
    e3e4:	f004 f936 	bl	12654 <memset>
		if (action.erase) {
    e3e8:	f89d 3019 	ldrb.w	r3, [sp, #25]
    e3ec:	b303      	cbz	r3, e430 <img_mgmt_upload+0x168>
			rc = img_mgmt_impl_erase_image_data(0, req.size);
    e3ee:	6929      	ldr	r1, [r5, #16]
    e3f0:	4620      	mov	r0, r4
    e3f2:	f7ff fd9b 	bl	df2c <img_mgmt_impl_erase_image_data>
			if (rc != 0) {
    e3f6:	b1d8      	cbz	r0, e430 <img_mgmt_upload+0x168>
				rc = MGMT_ERR_EUNKNOWN;
    e3f8:	2401      	movs	r4, #1
    e3fa:	e007      	b.n	e40c <img_mgmt_upload+0x144>
		rc = img_mgmt_upload_cb(req.off, action.size, img_mgmt_upload_arg);
    e3fc:	4a30      	ldr	r2, [pc, #192]	; (e4c0 <img_mgmt_upload+0x1f8>)
    e3fe:	9902      	ldr	r1, [sp, #8]
    e400:	6812      	ldr	r2, [r2, #0]
    e402:	68a8      	ldr	r0, [r5, #8]
    e404:	4798      	blx	r3
		if (rc != 0) {
    e406:	4604      	mov	r4, r0
    e408:	2800      	cmp	r0, #0
    e40a:	d0cf      	beq.n	e3ac <img_mgmt_upload+0xe4>
	if (is_first) {
    e40c:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    e410:	4313      	orrs	r3, r2
    e412:	d12e      	bne.n	e472 <img_mgmt_upload+0x1aa>
		return img_mgmt_impl_log_upload_start(status);
    e414:	4620      	mov	r0, r4
    e416:	f004 fd28 	bl	12e6a <img_mgmt_impl_log_upload_start>
	mgmt_evt(MGMT_EVT_OP_CMD_STATUS, MGMT_GROUP_ID_IMAGE, IMG_MGMT_ID_UPLOAD,
    e41a:	2201      	movs	r2, #1
    e41c:	ab01      	add	r3, sp, #4
    e41e:	4611      	mov	r1, r2
    e420:	2002      	movs	r0, #2
    e422:	f000 fa0d 	bl	e840 <mgmt_evt>
	if (rc != 0) {
    e426:	2c00      	cmp	r4, #0
    e428:	d0b8      	beq.n	e39c <img_mgmt_upload+0xd4>
    e42a:	e7ad      	b.n	e388 <img_mgmt_upload+0xc0>
		cmd_status_arg.status = IMG_MGMT_ID_UPLOAD_STATUS_ONGOING;
    e42c:	2301      	movs	r3, #1
    e42e:	9301      	str	r3, [sp, #4]
	if (req.data_len != 0) {
    e430:	69ab      	ldr	r3, [r5, #24]
    e432:	b90b      	cbnz	r3, e438 <img_mgmt_upload+0x170>
{
    e434:	2400      	movs	r4, #0
    e436:	e7e9      	b.n	e40c <img_mgmt_upload+0x144>
		if (g_img_mgmt_state.off + req.data_len == g_img_mgmt_state.size) {
    e438:	6872      	ldr	r2, [r6, #4]
		rc = img_mgmt_impl_write_image_data(req.off, req.img_data, action.write_bytes,
    e43a:	68a8      	ldr	r0, [r5, #8]
		if (g_img_mgmt_state.off + req.data_len == g_img_mgmt_state.size) {
    e43c:	4413      	add	r3, r2
    e43e:	68b2      	ldr	r2, [r6, #8]
		rc = img_mgmt_impl_write_image_data(req.off, req.img_data, action.write_bytes,
    e440:	1a9a      	subs	r2, r3, r2
    e442:	4253      	negs	r3, r2
    e444:	4153      	adcs	r3, r2
    e446:	4641      	mov	r1, r8
    e448:	9a04      	ldr	r2, [sp, #16]
    e44a:	f7ff fd41 	bl	ded0 <img_mgmt_impl_write_image_data>
		if (rc != 0) {
    e44e:	4604      	mov	r4, r0
    e450:	2800      	cmp	r0, #0
    e452:	d1d1      	bne.n	e3f8 <img_mgmt_upload+0x130>
			g_img_mgmt_state.off += action.write_bytes;
    e454:	6873      	ldr	r3, [r6, #4]
    e456:	9a04      	ldr	r2, [sp, #16]
    e458:	4413      	add	r3, r2
			if (g_img_mgmt_state.off == g_img_mgmt_state.size) {
    e45a:	68b2      	ldr	r2, [r6, #8]
			g_img_mgmt_state.off += action.write_bytes;
    e45c:	6073      	str	r3, [r6, #4]
			if (g_img_mgmt_state.off == g_img_mgmt_state.size) {
    e45e:	4293      	cmp	r3, r2
    e460:	d1e8      	bne.n	e434 <img_mgmt_upload+0x16c>
				img_mgmt_dfu_pending();
    e462:	f7ff ff27 	bl	e2b4 <img_mgmt_dfu_pending>
				cmd_status_arg.status = IMG_MGMT_ID_UPLOAD_STATUS_COMPLETE;
    e466:	2302      	movs	r3, #2
    e468:	9301      	str	r3, [sp, #4]
				g_img_mgmt_state.area_id = -1;
    e46a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e46e:	6033      	str	r3, [r6, #0]
    e470:	e7cc      	b.n	e40c <img_mgmt_upload+0x144>
	img_mgmt_upload_log(req.off == 0, g_img_mgmt_state.off == g_img_mgmt_state.size, rc);
    e472:	4b12      	ldr	r3, [pc, #72]	; (e4bc <img_mgmt_upload+0x1f4>)
	if (is_last || status != 0) {
    e474:	e9d3 2301 	ldrd	r2, r3, [r3, #4]
    e478:	429a      	cmp	r2, r3
    e47a:	d001      	beq.n	e480 <img_mgmt_upload+0x1b8>
    e47c:	2c00      	cmp	r4, #0
    e47e:	d0cc      	beq.n	e41a <img_mgmt_upload+0x152>
		rc = img_mgmt_read_info(1, NULL, hash, NULL);
    e480:	ad08      	add	r5, sp, #32
    e482:	2300      	movs	r3, #0
    e484:	4619      	mov	r1, r3
    e486:	462a      	mov	r2, r5
    e488:	2001      	movs	r0, #1
    e48a:	f7ff fe3f 	bl	e10c <img_mgmt_read_info>
			hashp = hash;
    e48e:	2800      	cmp	r0, #0
		return img_mgmt_impl_log_upload_done(status, hashp);
    e490:	bf0c      	ite	eq
    e492:	4629      	moveq	r1, r5
    e494:	2100      	movne	r1, #0
    e496:	4620      	mov	r0, r4
    e498:	f004 fce9 	bl	12e6e <img_mgmt_impl_log_upload_done>
    e49c:	e7bd      	b.n	e41a <img_mgmt_upload+0x152>
    e49e:	bf00      	nop
    e4a0:	00015528 	.word	0x00015528
    e4a4:	0001552e 	.word	0x0001552e
    e4a8:	00015537 	.word	0x00015537
    e4ac:	00015533 	.word	0x00015533
    e4b0:	0001553b 	.word	0x0001553b
    e4b4:	00015524 	.word	0x00015524
    e4b8:	20000674 	.word	0x20000674
    e4bc:	2000063c 	.word	0x2000063c
    e4c0:	20000670 	.word	0x20000670

0000e4c4 <img_mgmt_dfu_confirmed>:

void
img_mgmt_dfu_confirmed(void)
{
	if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_confirmed_cb) {
    e4c4:	4b03      	ldr	r3, [pc, #12]	; (e4d4 <img_mgmt_dfu_confirmed+0x10>)
    e4c6:	681b      	ldr	r3, [r3, #0]
    e4c8:	b113      	cbz	r3, e4d0 <img_mgmt_dfu_confirmed+0xc>
    e4ca:	68db      	ldr	r3, [r3, #12]
    e4cc:	b103      	cbz	r3, e4d0 <img_mgmt_dfu_confirmed+0xc>
		img_mgmt_dfu_callbacks_fn->dfu_confirmed_cb();
    e4ce:	4718      	bx	r3
	}
}
    e4d0:	4770      	bx	lr
    e4d2:	bf00      	nop
    e4d4:	2000066c 	.word	0x2000066c

0000e4d8 <img_mgmt_register_group>:


void
img_mgmt_register_group(void)
{
	mgmt_register_group(&img_mgmt_group);
    e4d8:	4801      	ldr	r0, [pc, #4]	; (e4e0 <img_mgmt_register_group+0x8>)
    e4da:	f000 b975 	b.w	e7c8 <mgmt_register_group>
    e4de:	bf00      	nop
    e4e0:	20000020 	.word	0x20000020

0000e4e4 <img_mgmt_state_read>:
/**
 * Command handler: image state read
 */
int
img_mgmt_state_read(struct mgmt_ctxt *ctxt)
{
    e4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t state_flags;
	int rc;
	int i;

	err = 0;
	err |= cbor_encode_text_stringz(&ctxt->encoder, "images");
    e4e8:	4956      	ldr	r1, [pc, #344]	; (e644 <img_mgmt_state_read+0x160>)

#if CONFIG_IMG_MGMT_UPDATABLE_IMAGE_NUMBER > 1
		err |= cbor_encode_text_stringz(&image, "image");
		err |= cbor_encode_int(&image, i >> 1);
#endif
		err |= cbor_encode_text_stringz(&image, "slot");
    e4ea:	f8df 815c 	ldr.w	r8, [pc, #348]	; e648 <img_mgmt_state_read+0x164>
		err |= cbor_encode_int(&image, i % 2);

		err |= cbor_encode_text_stringz(&image, "version");
    e4ee:	f8df 915c 	ldr.w	r9, [pc, #348]	; e64c <img_mgmt_state_read+0x168>
		img_mgmt_ver_str(&ver, vers_str);
		err |= cbor_encode_text_stringz(&image, vers_str);

		err |= cbor_encode_text_stringz(&image, "hash");
    e4f2:	f8df a15c 	ldr.w	sl, [pc, #348]	; e650 <img_mgmt_state_read+0x16c>
{
    e4f6:	b09d      	sub	sp, #116	; 0x74
    e4f8:	4606      	mov	r6, r0
	err |= cbor_encode_text_stringz(&ctxt->encoder, "images");
    e4fa:	f004 fcee 	bl	12eda <cbor_encode_text_stringz>
	err |= cbor_encoder_create_array(&ctxt->encoder, &images, CborIndefiniteLength);
    e4fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	err |= cbor_encode_text_stringz(&ctxt->encoder, "images");
    e502:	4604      	mov	r4, r0
	err |= cbor_encoder_create_array(&ctxt->encoder, &images, CborIndefiniteLength);
    e504:	a905      	add	r1, sp, #20
    e506:	4630      	mov	r0, r6
    e508:	f005 feef 	bl	142ea <cbor_encoder_create_array>
    e50c:	2700      	movs	r7, #0
    e50e:	4304      	orrs	r4, r0
		rc = img_mgmt_read_info(i, &ver, hash, &flags);
    e510:	ab02      	add	r3, sp, #8
    e512:	aa14      	add	r2, sp, #80	; 0x50
    e514:	a903      	add	r1, sp, #12
    e516:	4638      	mov	r0, r7
    e518:	f7ff fdf8 	bl	e10c <img_mgmt_read_info>
		if (rc != 0) {
    e51c:	4683      	mov	fp, r0
    e51e:	2800      	cmp	r0, #0
    e520:	d174      	bne.n	e60c <img_mgmt_state_read+0x128>
		state_flags = img_mgmt_state_flags(i);
    e522:	4638      	mov	r0, r7
    e524:	f004 fce6 	bl	12ef4 <img_mgmt_state_flags>
		err |= cbor_encoder_create_map(&images, &image, CborIndefiniteLength);
    e528:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		state_flags = img_mgmt_state_flags(i);
    e52c:	4605      	mov	r5, r0
		err |= cbor_encoder_create_map(&images, &image, CborIndefiniteLength);
    e52e:	a909      	add	r1, sp, #36	; 0x24
    e530:	a805      	add	r0, sp, #20
    e532:	f005 fedd 	bl	142f0 <cbor_encoder_create_map>
		err |= cbor_encode_text_stringz(&image, "slot");
    e536:	4641      	mov	r1, r8
		err |= cbor_encoder_create_map(&images, &image, CborIndefiniteLength);
    e538:	9001      	str	r0, [sp, #4]
		err |= cbor_encode_text_stringz(&image, "slot");
    e53a:	a809      	add	r0, sp, #36	; 0x24
    e53c:	f004 fccd 	bl	12eda <cbor_encode_text_stringz>
    e540:	9b01      	ldr	r3, [sp, #4]
    e542:	4318      	orrs	r0, r3
		err |= cbor_encode_int(&image, i % 2);
    e544:	463a      	mov	r2, r7
    e546:	465b      	mov	r3, fp
		err |= cbor_encode_text_stringz(&image, "slot");
    e548:	4304      	orrs	r4, r0
		err |= cbor_encode_int(&image, i % 2);
    e54a:	a809      	add	r0, sp, #36	; 0x24
    e54c:	f005 fe8c 	bl	14268 <cbor_encode_int>
		err |= cbor_encode_text_stringz(&image, "version");
    e550:	4649      	mov	r1, r9
		err |= cbor_encode_int(&image, i % 2);
    e552:	4304      	orrs	r4, r0
		err |= cbor_encode_text_stringz(&image, "version");
    e554:	a809      	add	r0, sp, #36	; 0x24
    e556:	f004 fcc0 	bl	12eda <cbor_encode_text_stringz>
		img_mgmt_ver_str(&ver, vers_str);
    e55a:	a90d      	add	r1, sp, #52	; 0x34
		err |= cbor_encode_text_stringz(&image, "version");
    e55c:	4304      	orrs	r4, r0
		img_mgmt_ver_str(&ver, vers_str);
    e55e:	a803      	add	r0, sp, #12
    e560:	f004 fd3d 	bl	12fde <img_mgmt_ver_str>
		err |= cbor_encode_text_stringz(&image, vers_str);
    e564:	a90d      	add	r1, sp, #52	; 0x34
    e566:	a809      	add	r0, sp, #36	; 0x24
    e568:	f004 fcb7 	bl	12eda <cbor_encode_text_stringz>
		err |= cbor_encode_text_stringz(&image, "hash");
    e56c:	4651      	mov	r1, sl
		err |= cbor_encode_text_stringz(&image, vers_str);
    e56e:	4304      	orrs	r4, r0
		err |= cbor_encode_text_stringz(&image, "hash");
    e570:	a809      	add	r0, sp, #36	; 0x24
    e572:	f004 fcb2 	bl	12eda <cbor_encode_text_stringz>
		err |= cbor_encode_byte_string(&image, hash, IMAGE_HASH_LEN);
    e576:	2220      	movs	r2, #32
		err |= cbor_encode_text_stringz(&image, "hash");
    e578:	4304      	orrs	r4, r0
		err |= cbor_encode_byte_string(&image, hash, IMAGE_HASH_LEN);
    e57a:	a914      	add	r1, sp, #80	; 0x50
    e57c:	a809      	add	r0, sp, #36	; 0x24
    e57e:	f005 fe92 	bl	142a6 <cbor_encode_byte_string>

		if (!IS_ENABLED(CONFIG_IMG_MGMT_FRUGAL_LIST) || !(flags & IMAGE_F_NON_BOOTABLE)) {
			err |= cbor_encode_text_stringz(&image, "bootable");
    e582:	4934      	ldr	r1, [pc, #208]	; (e654 <img_mgmt_state_read+0x170>)
		err |= cbor_encode_byte_string(&image, hash, IMAGE_HASH_LEN);
    e584:	4304      	orrs	r4, r0
			err |= cbor_encode_text_stringz(&image, "bootable");
    e586:	a809      	add	r0, sp, #36	; 0x24
    e588:	f004 fca7 	bl	12eda <cbor_encode_text_stringz>
			err |= cbor_encode_boolean(&image, !(flags & IMAGE_F_NON_BOOTABLE));
    e58c:	9902      	ldr	r1, [sp, #8]
    e58e:	f081 0110 	eor.w	r1, r1, #16
    e592:	f3c1 1100 	ubfx	r1, r1, #4, #1
			err |= cbor_encode_text_stringz(&image, "bootable");
    e596:	4304      	orrs	r4, r0
                                          int iov_len);
CBOR_API CborError cbor_encode_floating_point(CborEncoder *encoder, CborType fpType, const void *value);
CBOR_INLINE_API int cbor_encode_bytes_written(CborEncoder *encoder)
{   return encoder->writer->bytes_written; }
CBOR_INLINE_API CborError cbor_encode_boolean(CborEncoder *encoder, bool value)
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
    e598:	3114      	adds	r1, #20
    e59a:	a809      	add	r0, sp, #36	; 0x24
    e59c:	f005 fe72 	bl	14284 <cbor_encode_simple_value>
		}

		if (!IS_ENABLED(CONFIG_IMG_MGMT_FRUGAL_LIST) ||
		    (state_flags & IMG_MGMT_STATE_F_PENDING)) {
			err |= cbor_encode_text_stringz(&image, "pending");
    e5a0:	492d      	ldr	r1, [pc, #180]	; (e658 <img_mgmt_state_read+0x174>)
			err |= cbor_encode_boolean(&image, !(flags & IMAGE_F_NON_BOOTABLE));
    e5a2:	4304      	orrs	r4, r0
			err |= cbor_encode_text_stringz(&image, "pending");
    e5a4:	a809      	add	r0, sp, #36	; 0x24
    e5a6:	f004 fc98 	bl	12eda <cbor_encode_text_stringz>
    e5aa:	f005 0101 	and.w	r1, r5, #1
    e5ae:	4304      	orrs	r4, r0
    e5b0:	3114      	adds	r1, #20
    e5b2:	a809      	add	r0, sp, #36	; 0x24
    e5b4:	f005 fe66 	bl	14284 <cbor_encode_simple_value>
			err |= cbor_encode_boolean(&image, state_flags & IMG_MGMT_STATE_F_PENDING);
		}

		if (!IS_ENABLED(CONFIG_IMG_MGMT_FRUGAL_LIST) ||
		    (state_flags & IMG_MGMT_STATE_F_CONFIRMED)) {
			err |= cbor_encode_text_stringz(&image, "confirmed");
    e5b8:	4928      	ldr	r1, [pc, #160]	; (e65c <img_mgmt_state_read+0x178>)
			err |= cbor_encode_boolean(&image, state_flags & IMG_MGMT_STATE_F_PENDING);
    e5ba:	4304      	orrs	r4, r0
			err |= cbor_encode_text_stringz(&image, "confirmed");
    e5bc:	a809      	add	r0, sp, #36	; 0x24
    e5be:	f004 fc8c 	bl	12eda <cbor_encode_text_stringz>
			err |= cbor_encode_boolean(&image,
    e5c2:	f3c5 0140 	ubfx	r1, r5, #1, #1
			err |= cbor_encode_text_stringz(&image, "confirmed");
    e5c6:	4304      	orrs	r4, r0
    e5c8:	3114      	adds	r1, #20
    e5ca:	a809      	add	r0, sp, #36	; 0x24
    e5cc:	f005 fe5a 	bl	14284 <cbor_encode_simple_value>
						   state_flags & IMG_MGMT_STATE_F_CONFIRMED);
		}

		if (!IS_ENABLED(CONFIG_IMG_MGMT_FRUGAL_LIST) ||
		    (state_flags & IMG_MGMT_STATE_F_ACTIVE)) {
			err |= cbor_encode_text_stringz(&image, "active");
    e5d0:	4923      	ldr	r1, [pc, #140]	; (e660 <img_mgmt_state_read+0x17c>)
			err |= cbor_encode_boolean(&image,
    e5d2:	4304      	orrs	r4, r0
			err |= cbor_encode_text_stringz(&image, "active");
    e5d4:	a809      	add	r0, sp, #36	; 0x24
    e5d6:	f004 fc80 	bl	12eda <cbor_encode_text_stringz>
			err |= cbor_encode_boolean(&image, state_flags & IMG_MGMT_STATE_F_ACTIVE);
    e5da:	f3c5 0180 	ubfx	r1, r5, #2, #1
			err |= cbor_encode_text_stringz(&image, "active");
    e5de:	4304      	orrs	r4, r0
    e5e0:	3114      	adds	r1, #20
    e5e2:	a809      	add	r0, sp, #36	; 0x24
    e5e4:	f005 fe4e 	bl	14284 <cbor_encode_simple_value>
		}

		if (!IS_ENABLED(CONFIG_IMG_MGMT_FRUGAL_LIST) ||
		    (state_flags & IMG_MGMT_STATE_F_PERMANENT)) {
			err |= cbor_encode_text_stringz(&image, "permanent");
    e5e8:	491e      	ldr	r1, [pc, #120]	; (e664 <img_mgmt_state_read+0x180>)
			err |= cbor_encode_boolean(&image, state_flags & IMG_MGMT_STATE_F_ACTIVE);
    e5ea:	4304      	orrs	r4, r0
			err |= cbor_encode_text_stringz(&image, "permanent");
    e5ec:	a809      	add	r0, sp, #36	; 0x24
    e5ee:	f004 fc74 	bl	12eda <cbor_encode_text_stringz>
			err |= cbor_encode_boolean(&image,
    e5f2:	f3c5 01c0 	ubfx	r1, r5, #3, #1
			err |= cbor_encode_text_stringz(&image, "permanent");
    e5f6:	4304      	orrs	r4, r0
    e5f8:	3114      	adds	r1, #20
    e5fa:	a809      	add	r0, sp, #36	; 0x24
    e5fc:	f005 fe42 	bl	14284 <cbor_encode_simple_value>
						   state_flags & IMG_MGMT_STATE_F_PERMANENT);
		}

		err |= cbor_encoder_close_container(&images, &image);
    e600:	a909      	add	r1, sp, #36	; 0x24
			err |= cbor_encode_boolean(&image,
    e602:	4304      	orrs	r4, r0
		err |= cbor_encoder_close_container(&images, &image);
    e604:	a805      	add	r0, sp, #20
    e606:	f005 fe82 	bl	1430e <cbor_encoder_close_container>
    e60a:	4304      	orrs	r4, r0
	for (i = 0; i < 2 * CONFIG_IMG_MGMT_UPDATABLE_IMAGE_NUMBER; i++) {
    e60c:	b1bf      	cbz	r7, e63e <img_mgmt_state_read+0x15a>
	}

	err |= cbor_encoder_close_container(&ctxt->encoder, &images);
    e60e:	a905      	add	r1, sp, #20
    e610:	4630      	mov	r0, r6
    e612:	f005 fe7c 	bl	1430e <cbor_encoder_close_container>

	/* splitStatus is always 0 so in frugal list it is not present at all */
	if (!IS_ENABLED(CONFIG_IMG_MGMT_FRUGAL_LIST)) {
		err |= cbor_encode_text_stringz(&ctxt->encoder, "splitStatus");
    e616:	4914      	ldr	r1, [pc, #80]	; (e668 <img_mgmt_state_read+0x184>)
	err |= cbor_encoder_close_container(&ctxt->encoder, &images);
    e618:	4605      	mov	r5, r0
		err |= cbor_encode_text_stringz(&ctxt->encoder, "splitStatus");
    e61a:	4630      	mov	r0, r6
    e61c:	f004 fc5d 	bl	12eda <cbor_encode_text_stringz>
    e620:	432c      	orrs	r4, r5
    e622:	4304      	orrs	r4, r0
		err |= cbor_encode_int(&ctxt->encoder, 0);
    e624:	2300      	movs	r3, #0
    e626:	2200      	movs	r2, #0
    e628:	4630      	mov	r0, r6
    e62a:	f005 fe1d 	bl	14268 <cbor_encode_int>
	}

	if (err != 0) {
		return MGMT_ERR_ENOMEM;
    e62e:	ea54 0300 	orrs.w	r3, r4, r0
	}

	return 0;
}
    e632:	bf14      	ite	ne
    e634:	2002      	movne	r0, #2
    e636:	2000      	moveq	r0, #0
    e638:	b01d      	add	sp, #116	; 0x74
    e63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e63e:	2701      	movs	r7, #1
    e640:	e766      	b.n	e510 <img_mgmt_state_read+0x2c>
    e642:	bf00      	nop
    e644:	00015543 	.word	0x00015543
    e648:	0001554a 	.word	0x0001554a
    e64c:	0001554f 	.word	0x0001554f
    e650:	00015557 	.word	0x00015557
    e654:	0001555c 	.word	0x0001555c
    e658:	00015565 	.word	0x00015565
    e65c:	0001556d 	.word	0x0001556d
    e660:	00015577 	.word	0x00015577
    e664:	0001557e 	.word	0x0001557e
    e668:	00015588 	.word	0x00015588

0000e66c <img_mgmt_state_write>:
/**
 * Command handler: image state write
 */
int
img_mgmt_state_write(struct mgmt_ctxt *ctxt)
{
    e66c:	b530      	push	{r4, r5, lr}
    e66e:	b0b1      	sub	sp, #196	; 0xc4
    e670:	4604      	mov	r4, r0
	size_t hash_len;
	bool confirm;
	int slot;
	int rc;

	const struct cbor_attr_t write_attr[] = {
    e672:	228c      	movs	r2, #140	; 0x8c
    e674:	2100      	movs	r1, #0
    e676:	a80d      	add	r0, sp, #52	; 0x34
    e678:	f003 ffec 	bl	12654 <memset>
    e67c:	4b1c      	ldr	r3, [pc, #112]	; (e6f0 <img_mgmt_state_write+0x84>)
    e67e:	930c      	str	r3, [sp, #48]	; 0x30
    e680:	2303      	movs	r3, #3
    e682:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    e686:	ab02      	add	r3, sp, #8
    e688:	930f      	str	r3, [sp, #60]	; 0x3c
    e68a:	2321      	movs	r3, #33	; 0x21
    e68c:	9316      	str	r3, [sp, #88]	; 0x58
    e68e:	4b19      	ldr	r3, [pc, #100]	; (e6f4 <img_mgmt_state_write+0x88>)
    e690:	9318      	str	r3, [sp, #96]	; 0x60
    e692:	2305      	movs	r3, #5
    e694:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    e698:	f10d 0307 	add.w	r3, sp, #7
    e69c:	931a      	str	r3, [sp, #104]	; 0x68
		},
		[2] = { 0 },
	};

	hash_len = 0;
	rc = cbor_read_object(&ctxt->it, write_attr);
    e69e:	a90c      	add	r1, sp, #48	; 0x30
	hash_len = 0;
    e6a0:	2300      	movs	r3, #0
	const struct cbor_attr_t write_attr[] = {
    e6a2:	ad03      	add	r5, sp, #12
	rc = cbor_read_object(&ctxt->it, write_attr);
    e6a4:	f104 001c 	add.w	r0, r4, #28
	const struct cbor_attr_t write_attr[] = {
    e6a8:	950e      	str	r5, [sp, #56]	; 0x38
	hash_len = 0;
    e6aa:	9302      	str	r3, [sp, #8]
	rc = cbor_read_object(&ctxt->it, write_attr);
    e6ac:	f004 fafb 	bl	12ca6 <cbor_read_object>
	if (rc != 0) {
    e6b0:	4601      	mov	r1, r0
    e6b2:	b110      	cbz	r0, e6ba <img_mgmt_state_write+0x4e>
		return MGMT_ERR_EINVAL;
    e6b4:	2003      	movs	r0, #3
	if (rc != 0) {
		return rc;
	}

	return 0;
}
    e6b6:	b031      	add	sp, #196	; 0xc4
    e6b8:	bd30      	pop	{r4, r5, pc}
	if (hash_len == 0) {
    e6ba:	9b02      	ldr	r3, [sp, #8]
    e6bc:	b95b      	cbnz	r3, e6d6 <img_mgmt_state_write+0x6a>
		if (confirm) {
    e6be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e6c2:	2b00      	cmp	r3, #0
    e6c4:	d0f6      	beq.n	e6b4 <img_mgmt_state_write+0x48>
		rc = img_mgmt_state_confirm();
    e6c6:	f004 fc77 	bl	12fb8 <img_mgmt_state_confirm>
	if (rc != 0) {
    e6ca:	2800      	cmp	r0, #0
    e6cc:	d1f3      	bne.n	e6b6 <img_mgmt_state_write+0x4a>
	rc = img_mgmt_state_read(ctxt);
    e6ce:	4620      	mov	r0, r4
    e6d0:	f7ff ff08 	bl	e4e4 <img_mgmt_state_read>
	if (rc != 0) {
    e6d4:	e7ef      	b.n	e6b6 <img_mgmt_state_write+0x4a>
		slot = img_mgmt_find_by_hash(hash, NULL);
    e6d6:	4628      	mov	r0, r5
    e6d8:	f004 fbdc 	bl	12e94 <img_mgmt_find_by_hash>
		if (slot < 0) {
    e6dc:	2800      	cmp	r0, #0
    e6de:	dbe9      	blt.n	e6b4 <img_mgmt_state_write+0x48>
	if (slot == IMG_MGMT_BOOT_CURR_SLOT && confirm) {
    e6e0:	f89d 1007 	ldrb.w	r1, [sp, #7]
    e6e4:	d101      	bne.n	e6ea <img_mgmt_state_write+0x7e>
    e6e6:	2900      	cmp	r1, #0
    e6e8:	d1ed      	bne.n	e6c6 <img_mgmt_state_write+0x5a>
		rc = img_mgmt_state_set_pending(slot, confirm);
    e6ea:	f004 fc3c 	bl	12f66 <img_mgmt_state_set_pending>
    e6ee:	e7ec      	b.n	e6ca <img_mgmt_state_write+0x5e>
    e6f0:	00015557 	.word	0x00015557
    e6f4:	00015594 	.word	0x00015594

0000e6f8 <zephyr_os_mgmt_reset_cb>:

static void
zephyr_os_mgmt_reset_cb(struct k_timer *timer)
{
	/* Reboot the system from the system workqueue thread. */
	k_work_submit(&zephyr_os_mgmt_reset_work);
    e6f8:	4801      	ldr	r0, [pc, #4]	; (e700 <zephyr_os_mgmt_reset_cb+0x8>)
    e6fa:	f002 bd5b 	b.w	111b4 <k_work_submit>
    e6fe:	bf00      	nop
    e700:	2000002c 	.word	0x2000002c

0000e704 <os_mgmt_impl_reset>:
}

int
os_mgmt_impl_reset(unsigned int delay_ms)
{
    e704:	b507      	push	{r0, r1, r2, lr}
    e706:	4601      	mov	r1, r0
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    e708:	f240 30e7 	movw	r0, #999	; 0x3e7
    e70c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e710:	2300      	movs	r3, #0
    e712:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
    e716:	0c49      	lsrs	r1, r1, #17
    e718:	f7fd fdf2 	bl	c300 <__aeabi_uldivmod>
    e71c:	4602      	mov	r2, r0
    e71e:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    e720:	2100      	movs	r1, #0
    e722:	2000      	movs	r0, #0
    e724:	e9cd 0100 	strd	r0, r1, [sp]
    e728:	4803      	ldr	r0, [pc, #12]	; (e738 <os_mgmt_impl_reset+0x34>)
    e72a:	f003 fa3d 	bl	11ba8 <z_impl_k_timer_start>
	k_timer_start(&zephyr_os_mgmt_reset_timer, K_MSEC(delay_ms), K_NO_WAIT);
	return 0;
}
    e72e:	2000      	movs	r0, #0
    e730:	b003      	add	sp, #12
    e732:	f85d fb04 	ldr.w	pc, [sp], #4
    e736:	bf00      	nop
    e738:	20000148 	.word	0x20000148

0000e73c <os_mgmt_echo>:
 * Command handler: os echo
 */
#if CONFIG_OS_MGMT_ECHO
static int
os_mgmt_echo(struct mgmt_ctxt *ctxt)
{
    e73c:	b570      	push	{r4, r5, r6, lr}
    e73e:	b0ba      	sub	sp, #232	; 0xe8
    e740:	4605      	mov	r5, r0
	char echo_buf[CONFIG_OS_MGMT_ECHO_LENGTH + 1];
	CborError err;

	const struct cbor_attr_t attrs[2] = {
    e742:	225c      	movs	r2, #92	; 0x5c
    e744:	2100      	movs	r1, #0
    e746:	a801      	add	r0, sp, #4
    e748:	f003 ff84 	bl	12654 <memset>
    e74c:	4b19      	ldr	r3, [pc, #100]	; (e7b4 <os_mgmt_echo+0x78>)
    e74e:	9300      	str	r3, [sp, #0]
    e750:	2304      	movs	r3, #4
    e752:	f88d 3004 	strb.w	r3, [sp, #4]
    e756:	2380      	movs	r3, #128	; 0x80
    e758:	930a      	str	r3, [sp, #40]	; 0x28
    e75a:	2301      	movs	r3, #1
    e75c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    e760:	ae19      	add	r6, sp, #100	; 0x64
		[1] = {
			.attribute = NULL
		}
	};

	echo_buf[0] = '\0';
    e762:	2300      	movs	r3, #0

	err = cbor_read_object(&ctxt->it, attrs);
    e764:	4669      	mov	r1, sp
    e766:	f105 001c 	add.w	r0, r5, #28
	const struct cbor_attr_t attrs[2] = {
    e76a:	9602      	str	r6, [sp, #8]
	echo_buf[0] = '\0';
    e76c:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
	err = cbor_read_object(&ctxt->it, attrs);
    e770:	f004 fa99 	bl	12ca6 <cbor_read_object>
	if (err != 0) {
    e774:	4604      	mov	r4, r0
    e776:	b128      	cbz	r0, e784 <os_mgmt_echo+0x48>
		return mgmt_err_from_cbor(err);
    e778:	f004 fc86 	bl	13088 <mgmt_err_from_cbor>
    e77c:	4604      	mov	r4, r0

	err = cbor_encode_text_stringz(&ctxt->encoder, "r")				||
	      cbor_encode_text_stringz(&ctxt->encoder, echo_buf);

	return (err == 0) ? 0 : MGMT_ERR_ENOMEM;
}
    e77e:	4620      	mov	r0, r4
    e780:	b03a      	add	sp, #232	; 0xe8
    e782:	bd70      	pop	{r4, r5, r6, pc}
	echo_buf[sizeof(echo_buf) - 1] = '\0';
    e784:	f88d 00e4 	strb.w	r0, [sp, #228]	; 0xe4
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
    e788:	480b      	ldr	r0, [pc, #44]	; (e7b8 <os_mgmt_echo+0x7c>)
    e78a:	f003 ff2b 	bl	125e4 <strlen>
    e78e:	490a      	ldr	r1, [pc, #40]	; (e7b8 <os_mgmt_echo+0x7c>)
    e790:	4602      	mov	r2, r0
    e792:	4628      	mov	r0, r5
    e794:	f005 fd98 	bl	142c8 <cbor_encode_text_string>
	err = cbor_encode_text_stringz(&ctxt->encoder, "r")				||
    e798:	b948      	cbnz	r0, e7ae <os_mgmt_echo+0x72>
    e79a:	4630      	mov	r0, r6
    e79c:	f003 ff22 	bl	125e4 <strlen>
    e7a0:	4631      	mov	r1, r6
    e7a2:	4602      	mov	r2, r0
    e7a4:	4628      	mov	r0, r5
    e7a6:	f005 fd8f 	bl	142c8 <cbor_encode_text_string>
    e7aa:	2800      	cmp	r0, #0
    e7ac:	d0e7      	beq.n	e77e <os_mgmt_echo+0x42>
	return (err == 0) ? 0 : MGMT_ERR_ENOMEM;
    e7ae:	2402      	movs	r4, #2
    e7b0:	e7e5      	b.n	e77e <os_mgmt_echo+0x42>
    e7b2:	bf00      	nop
    e7b4:	00015575 	.word	0x00015575
    e7b8:	0001559c 	.word	0x0001559c

0000e7bc <os_mgmt_register_group>:


void
os_mgmt_register_group(void)
{
	mgmt_register_group(&os_mgmt_group);
    e7bc:	4801      	ldr	r0, [pc, #4]	; (e7c4 <os_mgmt_register_group+0x8>)
    e7be:	f000 b803 	b.w	e7c8 <mgmt_register_group>
    e7c2:	bf00      	nop
    e7c4:	2000003c 	.word	0x2000003c

0000e7c8 <mgmt_register_group>:
}

void
mgmt_register_group(struct mgmt_group *group)
{
	if (mgmt_group_list_end == NULL) {
    e7c8:	4b03      	ldr	r3, [pc, #12]	; (e7d8 <mgmt_register_group+0x10>)
    e7ca:	681a      	ldr	r2, [r3, #0]
    e7cc:	b902      	cbnz	r2, e7d0 <mgmt_register_group+0x8>
		mgmt_group_list = group;
    e7ce:	4a03      	ldr	r2, [pc, #12]	; (e7dc <mgmt_register_group+0x14>)
	} else {
		mgmt_group_list_end->mg_next = group;
    e7d0:	6010      	str	r0, [r2, #0]
	}
	mgmt_group_list_end = group;
    e7d2:	6018      	str	r0, [r3, #0]
}
    e7d4:	4770      	bx	lr
    e7d6:	bf00      	nop
    e7d8:	20000680 	.word	0x20000680
    e7dc:	2000067c 	.word	0x2000067c

0000e7e0 <mgmt_find_handler>:
	for (group = mgmt_group_list; group != NULL; group = group->mg_next) {
    e7e0:	4b0b      	ldr	r3, [pc, #44]	; (e810 <mgmt_find_handler+0x30>)
    e7e2:	681b      	ldr	r3, [r3, #0]

const struct mgmt_handler *
mgmt_find_handler(uint16_t group_id, uint16_t command_id)
{
    e7e4:	b530      	push	{r4, r5, lr}
    e7e6:	4602      	mov	r2, r0
			if (!group->mg_handlers[command_id].mh_read &&
    e7e8:	00cc      	lsls	r4, r1, #3
	for (group = mgmt_group_list; group != NULL; group = group->mg_next) {
    e7ea:	b90b      	cbnz	r3, e7f0 <mgmt_find_handler+0x10>
	const struct mgmt_group *group;

	group = mgmt_find_group(group_id, command_id);
	if (!group) {
		return NULL;
    e7ec:	2000      	movs	r0, #0
	}

	return &group->mg_handlers[command_id];
}
    e7ee:	bd30      	pop	{r4, r5, pc}
		if (group->mg_group_id == group_id) {
    e7f0:	8958      	ldrh	r0, [r3, #10]
    e7f2:	4290      	cmp	r0, r2
    e7f4:	d10a      	bne.n	e80c <mgmt_find_handler+0x2c>
			if (command_id >= group->mg_handlers_count) {
    e7f6:	8918      	ldrh	r0, [r3, #8]
    e7f8:	4288      	cmp	r0, r1
    e7fa:	d9f7      	bls.n	e7ec <mgmt_find_handler+0xc>
			if (!group->mg_handlers[command_id].mh_read &&
    e7fc:	685d      	ldr	r5, [r3, #4]
    e7fe:	1928      	adds	r0, r5, r4
    e800:	592d      	ldr	r5, [r5, r4]
    e802:	2d00      	cmp	r5, #0
    e804:	d1f3      	bne.n	e7ee <mgmt_find_handler+0xe>
    e806:	6845      	ldr	r5, [r0, #4]
    e808:	2d00      	cmp	r5, #0
    e80a:	d1f0      	bne.n	e7ee <mgmt_find_handler+0xe>
	for (group = mgmt_group_list; group != NULL; group = group->mg_next) {
    e80c:	681b      	ldr	r3, [r3, #0]
    e80e:	e7ec      	b.n	e7ea <mgmt_find_handler+0xa>
    e810:	2000067c 	.word	0x2000067c

0000e814 <mgmt_write_rsp_status>:

int
mgmt_write_rsp_status(struct mgmt_ctxt *ctxt, int errcode)
{
    e814:	b570      	push	{r4, r5, r6, lr}
    e816:	4604      	mov	r4, r0
    e818:	4808      	ldr	r0, [pc, #32]	; (e83c <mgmt_write_rsp_status+0x28>)
    e81a:	460d      	mov	r5, r1
    e81c:	f003 fee2 	bl	125e4 <strlen>
    e820:	4906      	ldr	r1, [pc, #24]	; (e83c <mgmt_write_rsp_status+0x28>)
    e822:	4602      	mov	r2, r0
    e824:	4620      	mov	r0, r4
    e826:	f005 fd4f 	bl	142c8 <cbor_encode_text_string>
	int rc;

	rc = cbor_encode_text_stringz(&ctxt->encoder, "rc");
	if (rc != 0) {
    e82a:	b930      	cbnz	r0, e83a <mgmt_write_rsp_status+0x26>
		return rc;
	}

	rc = cbor_encode_int(&ctxt->encoder, errcode);
    e82c:	462a      	mov	r2, r5
    e82e:	17eb      	asrs	r3, r5, #31
    e830:	4620      	mov	r0, r4
		}
	}
#endif

	return 0;
}
    e832:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	rc = cbor_encode_int(&ctxt->encoder, errcode);
    e836:	f005 bd17 	b.w	14268 <cbor_encode_int>
}
    e83a:	bd70      	pop	{r4, r5, r6, pc}
    e83c:	00015521 	.word	0x00015521

0000e840 <mgmt_evt>:
	evt_cb = cb;
}

void
mgmt_evt(uint8_t opcode, uint16_t group, uint8_t id, void *arg)
{
    e840:	b410      	push	{r4}
	if (evt_cb) {
    e842:	4c04      	ldr	r4, [pc, #16]	; (e854 <mgmt_evt+0x14>)
    e844:	6824      	ldr	r4, [r4, #0]
    e846:	b114      	cbz	r4, e84e <mgmt_evt+0xe>
		evt_cb(opcode, group, id, arg);
    e848:	46a4      	mov	ip, r4
	}
}
    e84a:	bc10      	pop	{r4}
		evt_cb(opcode, group, id, arg);
    e84c:	4760      	bx	ip
}
    e84e:	bc10      	pop	{r4}
    e850:	4770      	bx	lr
    e852:	bf00      	nop
    e854:	20000678 	.word	0x20000678

0000e858 <mcumgr_serial_tx_frame>:
 * @return                      0 on success; negative error code on failure.
 */
int mcumgr_serial_tx_frame(const uint8_t *data, bool first, int len,
			   uint16_t crc, mcumgr_serial_tx_cb cb, void *arg,
			   int *out_data_bytes_txed)
{
    e858:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e85c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
	 */
	int max_input = (((MCUMGR_SERIAL_MAX_FRAME - 3) >> 2) * 3);

	if (first) {
		/* First frame marker */
		u16 = sys_cpu_to_be16(MCUMGR_SERIAL_HDR_PKT);
    e860:	1e0c      	subs	r4, r1, #0
{
    e862:	4616      	mov	r6, r2
		u16 = sys_cpu_to_be16(MCUMGR_SERIAL_HDR_PKT);
    e864:	f640 1206 	movw	r2, #2310	; 0x906
{
    e868:	4699      	mov	r9, r3
	} else {
		/* Continuation frame marker */
		u16 = sys_cpu_to_be16(MCUMGR_SERIAL_HDR_FRAG);
	}

	rc = cb(&u16, sizeof(u16), arg);
    e86a:	f04f 0102 	mov.w	r1, #2
		u16 = sys_cpu_to_be16(MCUMGR_SERIAL_HDR_PKT);
    e86e:	f241 4304 	movw	r3, #5124	; 0x1404
    e872:	bf18      	it	ne
    e874:	4613      	movne	r3, r2
{
    e876:	4605      	mov	r5, r0
    e878:	f8ad 3002 	strh.w	r3, [sp, #2]
	rc = cb(&u16, sizeof(u16), arg);
    e87c:	4642      	mov	r2, r8
    e87e:	eb0d 0001 	add.w	r0, sp, r1
    e882:	47b8      	blx	r7
	if (rc != 0) {
    e884:	2800      	cmp	r0, #0
    e886:	d15c      	bne.n	e942 <mcumgr_serial_tx_frame+0xea>

	/*
	 * Only the first fragment contains the packet length; the packet length, which is two
	 * byte long is paired with first byte of input buffer to form triplet for Base64 encoding.
	 */
	if (first) {
    e888:	b324      	cbz	r4, e8d4 <mcumgr_serial_tx_frame+0x7c>
		/* The size of the CRC16 should be added to packet length */
		u16 = sys_cpu_to_be16(len + 2);
		memcpy(raw, &u16, sizeof(u16));
    e88a:	2202      	movs	r2, #2
		u16 = sys_cpu_to_be16(len + 2);
    e88c:	1cb3      	adds	r3, r6, #2
    e88e:	ba5b      	rev16	r3, r3
		memcpy(raw, &u16, sizeof(u16));
    e890:	eb0d 0102 	add.w	r1, sp, r2
    e894:	a801      	add	r0, sp, #4
		u16 = sys_cpu_to_be16(len + 2);
    e896:	f8ad 3002 	strh.w	r3, [sp, #2]
		memcpy(raw, &u16, sizeof(u16));
    e89a:	f003 fed0 	bl	1263e <memcpy>
		raw[2] = data[0];
    e89e:	782b      	ldrb	r3, [r5, #0]
    e8a0:	f88d 3006 	strb.w	r3, [sp, #6]

		rc = mcumgr_serial_tx_small(raw, 3, cb, arg);
    e8a4:	463a      	mov	r2, r7
    e8a6:	4643      	mov	r3, r8
    e8a8:	2103      	movs	r1, #3
    e8aa:	a801      	add	r0, sp, #4
    e8ac:	f004 fd7a 	bl	133a4 <mcumgr_serial_tx_small>
		if (rc != 0) {
    e8b0:	2800      	cmp	r0, #0
    e8b2:	d146      	bne.n	e942 <mcumgr_serial_tx_frame+0xea>
			return rc;
		}

		++src_off;
		/* One triple of allowed input already used */
		max_input -= 3;
    e8b4:	235a      	movs	r3, #90	; 0x5a
		++src_off;
    e8b6:	2401      	movs	r4, #1
	 * Only as much as fits into the frame can be processed, but we also need to fit in the
	 * two byte CRC.  The frame can not be stretched and current logic does not allow to
	 * send CRC separately so if CRC would not fit as a whole, shrink to_process by one byte
	 * forcing one byte to the next frame, with the CRC.
	 */
	to_process = MIN(max_input, len - src_off);
    e8b8:	1b32      	subs	r2, r6, r4
    e8ba:	429a      	cmp	r2, r3
    e8bc:	4692      	mov	sl, r2
    e8be:	bfa8      	it	ge
    e8c0:	469a      	movge	sl, r3
	reminder = max_input - (len - src_off);
    e8c2:	1a9b      	subs	r3, r3, r2

	if (reminder == 0 || reminder == 1) {
    e8c4:	2b01      	cmp	r3, #1
    e8c6:	d807      	bhi.n	e8d8 <mcumgr_serial_tx_frame+0x80>
		to_process -= 1;
    e8c8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	bool last = false;
    e8cc:	f04f 0b00 	mov.w	fp, #0
    e8d0:	44a2      	add	sl, r4
    e8d2:	e014      	b.n	e8fe <mcumgr_serial_tx_frame+0xa6>
	int max_input = (((MCUMGR_SERIAL_MAX_FRAME - 3) >> 2) * 3);
    e8d4:	235d      	movs	r3, #93	; 0x5d
    e8d6:	e7ef      	b.n	e8b8 <mcumgr_serial_tx_frame+0x60>
	} else if (reminder >= 2) {
    e8d8:	bfcc      	ite	gt
    e8da:	f04f 0b01 	movgt.w	fp, #1
    e8de:	f04f 0b00 	movle.w	fp, #0
    e8e2:	e7f5      	b.n	e8d0 <mcumgr_serial_tx_frame+0x78>
	 * chunks, due to Base64 encoding; the number of chunks that can be processed is calculated
	 * from number of three byte, complete, chunks in input buffer,  but can not be greater
	 * than the number of four byte, complete, chunks that the frame can accept.
	 */
	while (to_process >= 3) {
		memcpy(raw, data + src_off, 3);
    e8e4:	2203      	movs	r2, #3
    e8e6:	1929      	adds	r1, r5, r4
    e8e8:	a801      	add	r0, sp, #4
    e8ea:	f003 fea8 	bl	1263e <memcpy>
		rc = mcumgr_serial_tx_small(raw, 3, cb, arg);
    e8ee:	4643      	mov	r3, r8
    e8f0:	463a      	mov	r2, r7
    e8f2:	2103      	movs	r1, #3
    e8f4:	a801      	add	r0, sp, #4
    e8f6:	f004 fd55 	bl	133a4 <mcumgr_serial_tx_small>
		if (rc != 0) {
    e8fa:	bb10      	cbnz	r0, e942 <mcumgr_serial_tx_frame+0xea>
			return rc;
		}
		src_off += 3;
    e8fc:	3403      	adds	r4, #3
	while (to_process >= 3) {
    e8fe:	ebaa 0204 	sub.w	r2, sl, r4
    e902:	2a02      	cmp	r2, #2
    e904:	4623      	mov	r3, r4
    e906:	dced      	bgt.n	e8e4 <mcumgr_serial_tx_frame+0x8c>
		to_process -= 3;
	}

	if (last) {
    e908:	f1bb 0f00 	cmp.w	fp, #0
    e90c:	d012      	beq.n	e934 <mcumgr_serial_tx_frame+0xdc>
		/*
		 * Process the reminder bytes of the input buffer, after sending it in three byte
		 * chunks, and CRC.
		 */
		switch (len - src_off) {
    e90e:	1b36      	subs	r6, r6, r4
    e910:	2e01      	cmp	r6, #1
    e912:	d019      	beq.n	e948 <mcumgr_serial_tx_frame+0xf0>
    e914:	2e02      	cmp	r6, #2
    e916:	d025      	beq.n	e964 <mcumgr_serial_tx_frame+0x10c>
    e918:	b966      	cbnz	r6, e934 <mcumgr_serial_tx_frame+0xdc>
		case 0:
			raw[0] = (crc & 0xff00) >> 8;
    e91a:	ea4f 2319 	mov.w	r3, r9, lsr #8
    e91e:	f88d 3004 	strb.w	r3, [sp, #4]
			raw[1] = crc & 0x00ff;
    e922:	f88d 9005 	strb.w	r9, [sp, #5]
			rc = mcumgr_serial_tx_small(raw, 2, cb, arg);
    e926:	4643      	mov	r3, r8
    e928:	463a      	mov	r2, r7
    e92a:	2102      	movs	r1, #2
			if (rc != 0) {
				return rc;
			}

			raw[0] = crc & 0x00ff;
			rc = mcumgr_serial_tx_small(raw, 1, cb, arg);
    e92c:	a801      	add	r0, sp, #4
    e92e:	f004 fd39 	bl	133a4 <mcumgr_serial_tx_small>
			break;
		}

		if (rc != 0) {
    e932:	b930      	cbnz	r0, e942 <mcumgr_serial_tx_frame+0xea>
			return rc;
		}
	}

	rc = cb("\n", 1, arg);
    e934:	4818      	ldr	r0, [pc, #96]	; (e998 <mcumgr_serial_tx_frame+0x140>)
    e936:	4642      	mov	r2, r8
    e938:	2101      	movs	r1, #1
    e93a:	47b8      	blx	r7
	if (rc != 0) {
    e93c:	b908      	cbnz	r0, e942 <mcumgr_serial_tx_frame+0xea>
		return rc;
	}

	*out_data_bytes_txed = src_off;
    e93e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e940:	601c      	str	r4, [r3, #0]
	return 0;
}
    e942:	b003      	add	sp, #12
    e944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			raw[0] = data[src_off++];
    e948:	5ceb      	ldrb	r3, [r5, r3]
    e94a:	f88d 3004 	strb.w	r3, [sp, #4]
			raw[1] = (crc & 0xff00) >> 8;
    e94e:	ea4f 2319 	mov.w	r3, r9, lsr #8
    e952:	f88d 3005 	strb.w	r3, [sp, #5]
			raw[0] = data[src_off++];
    e956:	3401      	adds	r4, #1
			raw[2] = crc & 0x00ff;
    e958:	f88d 9006 	strb.w	r9, [sp, #6]
			rc = mcumgr_serial_tx_small(raw, 3, cb, arg);
    e95c:	4643      	mov	r3, r8
    e95e:	463a      	mov	r2, r7
    e960:	2103      	movs	r1, #3
    e962:	e7e3      	b.n	e92c <mcumgr_serial_tx_frame+0xd4>
			raw[0] = data[src_off++];
    e964:	5d2b      	ldrb	r3, [r5, r4]
    e966:	f88d 3004 	strb.w	r3, [sp, #4]
			raw[1] = data[src_off++];
    e96a:	4425      	add	r5, r4
			rc = mcumgr_serial_tx_small(raw, 3, cb, arg);
    e96c:	463a      	mov	r2, r7
			raw[1] = data[src_off++];
    e96e:	786b      	ldrb	r3, [r5, #1]
    e970:	f88d 3005 	strb.w	r3, [sp, #5]
			raw[2] = (crc & 0xff00) >> 8;
    e974:	ea4f 2319 	mov.w	r3, r9, lsr #8
    e978:	f88d 3006 	strb.w	r3, [sp, #6]
			rc = mcumgr_serial_tx_small(raw, 3, cb, arg);
    e97c:	2103      	movs	r1, #3
    e97e:	4643      	mov	r3, r8
    e980:	a801      	add	r0, sp, #4
    e982:	f004 fd0f 	bl	133a4 <mcumgr_serial_tx_small>
			if (rc != 0) {
    e986:	2800      	cmp	r0, #0
    e988:	d1db      	bne.n	e942 <mcumgr_serial_tx_frame+0xea>
			raw[1] = data[src_off++];
    e98a:	3402      	adds	r4, #2
			raw[0] = crc & 0x00ff;
    e98c:	f88d 9004 	strb.w	r9, [sp, #4]
			rc = mcumgr_serial_tx_small(raw, 1, cb, arg);
    e990:	4643      	mov	r3, r8
    e992:	463a      	mov	r2, r7
    e994:	2101      	movs	r1, #1
    e996:	e7c9      	b.n	e92c <mcumgr_serial_tx_frame+0xd4>
    e998:	0001563d 	.word	0x0001563d

0000e99c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
    e99c:	4b02      	ldr	r3, [pc, #8]	; (e9a8 <net_buf_pool_get+0xc>)
    e99e:	2224      	movs	r2, #36	; 0x24
    e9a0:	fb02 3000 	mla	r0, r2, r0, r3
    e9a4:	4770      	bx	lr
    e9a6:	bf00      	nop
    e9a8:	200001ac 	.word	0x200001ac

0000e9ac <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    e9ac:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
    e9ae:	4b06      	ldr	r3, [pc, #24]	; (e9c8 <net_buf_id+0x1c>)
    e9b0:	2124      	movs	r1, #36	; 0x24
    e9b2:	fb01 3302 	mla	r3, r1, r2, r3
    e9b6:	6a1a      	ldr	r2, [r3, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    e9b8:	7d1b      	ldrb	r3, [r3, #20]
    e9ba:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
    e9bc:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    e9be:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
    e9c2:	fbb0 f0f3 	udiv	r0, r0, r3
    e9c6:	4770      	bx	lr
    e9c8:	200001ac 	.word	0x200001ac

0000e9cc <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
    e9cc:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    e9ce:	4b0a      	ldr	r3, [pc, #40]	; (e9f8 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    e9d0:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    e9d2:	2424      	movs	r4, #36	; 0x24
    e9d4:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
    e9d8:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    e9da:	69db      	ldr	r3, [r3, #28]
    e9dc:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
    e9de:	6823      	ldr	r3, [r4, #0]
    e9e0:	429a      	cmp	r2, r3
    e9e2:	bf94      	ite	ls
    e9e4:	600a      	strls	r2, [r1, #0]
    e9e6:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    e9e8:	f7ff ffe0 	bl	e9ac <net_buf_id>
    e9ec:	e9d4 2300 	ldrd	r2, r3, [r4]
}
    e9f0:	fb02 3000 	mla	r0, r2, r0, r3
    e9f4:	bd10      	pop	{r4, pc}
    e9f6:	bf00      	nop
    e9f8:	200001ac 	.word	0x200001ac

0000e9fc <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
    e9fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea00:	4605      	mov	r5, r0
    ea02:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
    ea04:	4610      	mov	r0, r2
    ea06:	4619      	mov	r1, r3
{
    ea08:	4691      	mov	r9, r2
    ea0a:	4698      	mov	r8, r3
    ea0c:	4617      	mov	r7, r2
    ea0e:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
    ea10:	f006 fa11 	bl	14e36 <sys_clock_timeout_end_calc>
    ea14:	4682      	mov	sl, r0
    ea16:	468b      	mov	fp, r1
	__asm__ volatile(
    ea18:	f04f 0320 	mov.w	r3, #32
    ea1c:	f3ef 8111 	mrs	r1, BASEPRI
    ea20:	f383 8812 	msr	BASEPRI_MAX, r3
    ea24:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    ea28:	8a6b      	ldrh	r3, [r5, #18]
    ea2a:	2b00      	cmp	r3, #0
    ea2c:	d05b      	beq.n	eae6 <net_buf_alloc_len+0xea>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    ea2e:	8a2a      	ldrh	r2, [r5, #16]
    ea30:	429a      	cmp	r2, r3
    ea32:	d93f      	bls.n	eab4 <net_buf_alloc_len+0xb8>
    ea34:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
    ea36:	2200      	movs	r2, #0
    ea38:	2300      	movs	r3, #0
    ea3a:	4628      	mov	r0, r5
    ea3c:	f002 fa58 	bl	10ef0 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
    ea40:	9900      	ldr	r1, [sp, #0]
    ea42:	4604      	mov	r4, r0
    ea44:	2800      	cmp	r0, #0
    ea46:	d035      	beq.n	eab4 <net_buf_alloc_len+0xb8>
	__asm__ volatile(
    ea48:	f381 8811 	msr	BASEPRI, r1
    ea4c:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    ea50:	9b01      	ldr	r3, [sp, #4]
    ea52:	2b00      	cmp	r3, #0
    ea54:	d057      	beq.n	eb06 <net_buf_alloc_len+0x10a>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    ea56:	ea58 0309 	orrs.w	r3, r8, r9
    ea5a:	d00f      	beq.n	ea7c <net_buf_alloc_len+0x80>
    ea5c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    ea60:	bf08      	it	eq
    ea62:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
    ea66:	d009      	beq.n	ea7c <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
    ea68:	f003 f840 	bl	11aec <sys_clock_tick_get>
    ea6c:	ebba 0700 	subs.w	r7, sl, r0
    ea70:	eb6b 0601 	sbc.w	r6, fp, r1
    ea74:	2e00      	cmp	r6, #0
    ea76:	bfbc      	itt	lt
    ea78:	2700      	movlt	r7, #0
    ea7a:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    ea7c:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    ea7e:	f8df 809c 	ldr.w	r8, [pc, #156]	; eb1c <net_buf_alloc_len+0x120>
    ea82:	2224      	movs	r2, #36	; 0x24
    ea84:	fb02 8303 	mla	r3, r2, r3, r8
    ea88:	a901      	add	r1, sp, #4
    ea8a:	69db      	ldr	r3, [r3, #28]
    ea8c:	681b      	ldr	r3, [r3, #0]
    ea8e:	463a      	mov	r2, r7
    ea90:	681d      	ldr	r5, [r3, #0]
    ea92:	4620      	mov	r0, r4
    ea94:	4633      	mov	r3, r6
    ea96:	47a8      	blx	r5
    ea98:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    ea9a:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    ea9c:	2800      	cmp	r0, #0
    ea9e:	d133      	bne.n	eb08 <net_buf_alloc_len+0x10c>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
    eaa0:	79a0      	ldrb	r0, [r4, #6]
    eaa2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    eaa6:	4621      	mov	r1, r4
    eaa8:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    eaac:	f006 f803 	bl	14ab6 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    eab0:	462c      	mov	r4, r5
}
    eab2:	e024      	b.n	eafe <net_buf_alloc_len+0x102>
		uninit_count = pool->uninit_count--;
    eab4:	8a68      	ldrh	r0, [r5, #18]
    eab6:	1e43      	subs	r3, r0, #1
    eab8:	826b      	strh	r3, [r5, #18]
    eaba:	f381 8811 	msr	BASEPRI, r1
    eabe:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    eac2:	7d2a      	ldrb	r2, [r5, #20]
    eac4:	f102 0417 	add.w	r4, r2, #23
    eac8:	f024 0303 	bic.w	r3, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
    eacc:	8a2c      	ldrh	r4, [r5, #16]
    eace:	1a20      	subs	r0, r4, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
    ead0:	6a2c      	ldr	r4, [r5, #32]
    ead2:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
    ead6:	4811      	ldr	r0, [pc, #68]	; (eb1c <net_buf_alloc_len+0x120>)
    ead8:	4b11      	ldr	r3, [pc, #68]	; (eb20 <net_buf_alloc_len+0x124>)
	buf->user_data_size = pool->user_data_size;
    eada:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
    eadc:	1a2d      	subs	r5, r5, r0
    eade:	10ad      	asrs	r5, r5, #2
    eae0:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
    eae2:	71a5      	strb	r5, [r4, #6]
		goto success;
    eae4:	e7b4      	b.n	ea50 <net_buf_alloc_len+0x54>
    eae6:	f381 8811 	msr	BASEPRI, r1
    eaea:	f3bf 8f6f 	isb	sy
    eaee:	464a      	mov	r2, r9
    eaf0:	4643      	mov	r3, r8
    eaf2:	4628      	mov	r0, r5
    eaf4:	f002 f9fc 	bl	10ef0 <z_impl_k_queue_get>
	if (!buf) {
    eaf8:	4604      	mov	r4, r0
    eafa:	2800      	cmp	r0, #0
    eafc:	d1a8      	bne.n	ea50 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
    eafe:	4620      	mov	r0, r4
    eb00:	b003      	add	sp, #12
    eb02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
    eb06:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
    eb08:	2300      	movs	r3, #0
	buf->ref   = 1U;
    eb0a:	2201      	movs	r2, #1
	buf->frags = NULL;
    eb0c:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
    eb0e:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
    eb10:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
    eb12:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
    eb14:	6923      	ldr	r3, [r4, #16]
    eb16:	81e2      	strh	r2, [r4, #14]
    eb18:	60a3      	str	r3, [r4, #8]
	return buf;
    eb1a:	e7f0      	b.n	eafe <net_buf_alloc_len+0x102>
    eb1c:	200001ac 	.word	0x200001ac
    eb20:	38e38e39 	.word	0x38e38e39

0000eb24 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    eb24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eb28:	4d17      	ldr	r5, [pc, #92]	; (eb88 <net_buf_unref+0x64>)
    eb2a:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    eb2c:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
    eb2e:	2724      	movs	r7, #36	; 0x24
	while (buf) {
    eb30:	b90c      	cbnz	r4, eb36 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
    eb32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
    eb36:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    eb38:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
    eb3c:	3b01      	subs	r3, #1
    eb3e:	b2db      	uxtb	r3, r3
    eb40:	7123      	strb	r3, [r4, #4]
    eb42:	2b00      	cmp	r3, #0
    eb44:	d1f5      	bne.n	eb32 <net_buf_unref+0xe>
		if (buf->__buf) {
    eb46:	6921      	ldr	r1, [r4, #16]
    eb48:	b159      	cbz	r1, eb62 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    eb4a:	7963      	ldrb	r3, [r4, #5]
    eb4c:	079b      	lsls	r3, r3, #30
    eb4e:	d407      	bmi.n	eb60 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    eb50:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
    eb52:	fb07 5303 	mla	r3, r7, r3, r5
    eb56:	4620      	mov	r0, r4
    eb58:	69db      	ldr	r3, [r3, #28]
    eb5a:	681b      	ldr	r3, [r3, #0]
    eb5c:	689b      	ldr	r3, [r3, #8]
    eb5e:	4798      	blx	r3
			buf->__buf = NULL;
    eb60:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
    eb62:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    eb64:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
    eb66:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
    eb6a:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
    eb6c:	699b      	ldr	r3, [r3, #24]
    eb6e:	b11b      	cbz	r3, eb78 <net_buf_unref+0x54>
			pool->destroy(buf);
    eb70:	4620      	mov	r0, r4
    eb72:	4798      	blx	r3
{
    eb74:	4644      	mov	r4, r8
    eb76:	e7db      	b.n	eb30 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
    eb78:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    eb7c:	4621      	mov	r1, r4
    eb7e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    eb82:	f005 ff98 	bl	14ab6 <k_queue_prepend>
}
    eb86:	e7f5      	b.n	eb74 <net_buf_unref+0x50>
    eb88:	200001ac 	.word	0x200001ac

0000eb8c <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    eb8c:	4b08      	ldr	r3, [pc, #32]	; (ebb0 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    eb8e:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    eb90:	1ac3      	subs	r3, r0, r3
{
    eb92:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    eb94:	4907      	ldr	r1, [pc, #28]	; (ebb4 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    eb96:	109b      	asrs	r3, r3, #2
{
    eb98:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    eb9a:	4359      	muls	r1, r3
    eb9c:	4806      	ldr	r0, [pc, #24]	; (ebb8 <onoff_stop+0x2c>)
    eb9e:	2240      	movs	r2, #64	; 0x40
    eba0:	f004 fd28 	bl	135f4 <stop>
	notify(mgr, res);
    eba4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    eba6:	4601      	mov	r1, r0
	notify(mgr, res);
    eba8:	4620      	mov	r0, r4
}
    ebaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    ebae:	4718      	bx	r3
    ebb0:	20000694 	.word	0x20000694
    ebb4:	b6db6db7 	.word	0xb6db6db7
    ebb8:	00014f18 	.word	0x00014f18

0000ebbc <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    ebbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    ebbe:	4c0c      	ldr	r4, [pc, #48]	; (ebf0 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    ebc0:	4a0c      	ldr	r2, [pc, #48]	; (ebf4 <onoff_start+0x38>)
    ebc2:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    ebc4:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    ebc6:	9300      	str	r3, [sp, #0]
{
    ebc8:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    ebca:	460b      	mov	r3, r1
    ebcc:	490a      	ldr	r1, [pc, #40]	; (ebf8 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    ebce:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    ebd0:	4361      	muls	r1, r4
{
    ebd2:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    ebd4:	4809      	ldr	r0, [pc, #36]	; (ebfc <onoff_start+0x40>)
    ebd6:	f004 fd39 	bl	1364c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    ebda:	1e01      	subs	r1, r0, #0
    ebdc:	da05      	bge.n	ebea <onoff_start+0x2e>
		notify(mgr, err);
    ebde:	4630      	mov	r0, r6
    ebe0:	462b      	mov	r3, r5
	}
}
    ebe2:	b002      	add	sp, #8
    ebe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    ebe8:	4718      	bx	r3
}
    ebea:	b002      	add	sp, #8
    ebec:	bd70      	pop	{r4, r5, r6, pc}
    ebee:	bf00      	nop
    ebf0:	20000694 	.word	0x20000694
    ebf4:	000136bd 	.word	0x000136bd
    ebf8:	b6db6db7 	.word	0xb6db6db7
    ebfc:	00014f18 	.word	0x00014f18

0000ec00 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    ec00:	2200      	movs	r2, #0
{
    ec02:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    ec04:	2101      	movs	r1, #1
{
    ec06:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    ec08:	4610      	mov	r0, r2
    ec0a:	f7fe fcfb 	bl	d604 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    ec0e:	480f      	ldr	r0, [pc, #60]	; (ec4c <clk_init+0x4c>)
    ec10:	f001 f9c4 	bl	ff9c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    ec14:	4b0e      	ldr	r3, [pc, #56]	; (ec50 <clk_init+0x50>)
    ec16:	4298      	cmp	r0, r3
    ec18:	d115      	bne.n	ec46 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    ec1a:	f005 f8ac 	bl	13d76 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    ec1e:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    ec20:	490c      	ldr	r1, [pc, #48]	; (ec54 <clk_init+0x54>)
    ec22:	4630      	mov	r0, r6
    ec24:	f003 f903 	bl	11e2e <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    ec28:	2800      	cmp	r0, #0
    ec2a:	db0b      	blt.n	ec44 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    ec2c:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    ec2e:	4909      	ldr	r1, [pc, #36]	; (ec54 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    ec30:	2501      	movs	r5, #1
    ec32:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    ec34:	f104 001c 	add.w	r0, r4, #28
    ec38:	f003 f8f9 	bl	11e2e <onoff_manager_init>
		if (err < 0) {
    ec3c:	2800      	cmp	r0, #0
    ec3e:	db01      	blt.n	ec44 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    ec40:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    ec42:	2000      	movs	r0, #0
}
    ec44:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    ec46:	f06f 0004 	mvn.w	r0, #4
    ec4a:	e7fb      	b.n	ec44 <clk_init+0x44>
    ec4c:	0000ec8d 	.word	0x0000ec8d
    ec50:	0bad0000 	.word	0x0bad0000
    ec54:	000152a8 	.word	0x000152a8

0000ec58 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    ec58:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    ec5a:	230c      	movs	r3, #12
    ec5c:	4809      	ldr	r0, [pc, #36]	; (ec84 <clkstarted_handle.constprop.0+0x2c>)
    ec5e:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    ec60:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    ec62:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    ec64:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    ec68:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    ec6a:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    ec6c:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    ec6e:	4418      	add	r0, r3
    ec70:	f004 fcad 	bl	135ce <set_on_state>
	if (callback) {
    ec74:	b12d      	cbz	r5, ec82 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    ec76:	4632      	mov	r2, r6
    ec78:	462b      	mov	r3, r5
    ec7a:	4803      	ldr	r0, [pc, #12]	; (ec88 <clkstarted_handle.constprop.0+0x30>)
}
    ec7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    ec80:	4718      	bx	r3
}
    ec82:	bd70      	pop	{r4, r5, r6, pc}
    ec84:	20000694 	.word	0x20000694
    ec88:	00014f18 	.word	0x00014f18

0000ec8c <clock_event_handler>:
	switch (event) {
    ec8c:	b110      	cbz	r0, ec94 <clock_event_handler+0x8>
    ec8e:	2801      	cmp	r0, #1
    ec90:	d004      	beq.n	ec9c <clock_event_handler+0x10>
    ec92:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    ec94:	4b03      	ldr	r3, [pc, #12]	; (eca4 <clock_event_handler+0x18>)
    ec96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ec98:	075b      	lsls	r3, r3, #29
    ec9a:	d101      	bne.n	eca0 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    ec9c:	f7ff bfdc 	b.w	ec58 <clkstarted_handle.constprop.0>
}
    eca0:	4770      	bx	lr
    eca2:	bf00      	nop
    eca4:	20000694 	.word	0x20000694

0000eca8 <generic_hfclk_start>:
{
    eca8:	b508      	push	{r3, lr}
	__asm__ volatile(
    ecaa:	f04f 0320 	mov.w	r3, #32
    ecae:	f3ef 8111 	mrs	r1, BASEPRI
    ecb2:	f383 8812 	msr	BASEPRI_MAX, r3
    ecb6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    ecba:	4a12      	ldr	r2, [pc, #72]	; (ed04 <generic_hfclk_start+0x5c>)
    ecbc:	6813      	ldr	r3, [r2, #0]
    ecbe:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    ecc2:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    ecc6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    ecc8:	d00c      	beq.n	ece4 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    ecca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    ecce:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    ecd2:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    ecd6:	f013 0301 	ands.w	r3, r3, #1
    ecda:	d003      	beq.n	ece4 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    ecdc:	480a      	ldr	r0, [pc, #40]	; (ed08 <generic_hfclk_start+0x60>)
    ecde:	f004 fc76 	bl	135ce <set_on_state>
			already_started = true;
    ece2:	2301      	movs	r3, #1
	__asm__ volatile(
    ece4:	f381 8811 	msr	BASEPRI, r1
    ece8:	f3bf 8f6f 	isb	sy
	if (already_started) {
    ecec:	b123      	cbz	r3, ecf8 <generic_hfclk_start+0x50>
}
    ecee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    ecf2:	2000      	movs	r0, #0
    ecf4:	f7ff bfb0 	b.w	ec58 <clkstarted_handle.constprop.0>
}
    ecf8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    ecfc:	2001      	movs	r0, #1
    ecfe:	f005 b844 	b.w	13d8a <nrfx_clock_start>
    ed02:	bf00      	nop
    ed04:	200006e4 	.word	0x200006e4
    ed08:	200006d4 	.word	0x200006d4

0000ed0c <api_blocking_start>:
{
    ed0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    ed0e:	2200      	movs	r2, #0
    ed10:	2301      	movs	r3, #1
    ed12:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    ed16:	4a09      	ldr	r2, [pc, #36]	; (ed3c <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    ed18:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    ed1c:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    ed1e:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    ed22:	f004 fcc4 	bl	136ae <api_start>
	if (err < 0) {
    ed26:	2800      	cmp	r0, #0
    ed28:	db05      	blt.n	ed36 <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    ed2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    ed2e:	2300      	movs	r3, #0
    ed30:	4668      	mov	r0, sp
    ed32:	f002 f931 	bl	10f98 <z_impl_k_sem_take>
}
    ed36:	b005      	add	sp, #20
    ed38:	f85d fb04 	ldr.w	pc, [sp], #4
    ed3c:	000136db 	.word	0x000136db

0000ed40 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ed40:	4b09      	ldr	r3, [pc, #36]	; (ed68 <generic_hfclk_stop+0x28>)
    ed42:	f3bf 8f5b 	dmb	ish
    ed46:	e853 2f00 	ldrex	r2, [r3]
    ed4a:	f022 0102 	bic.w	r1, r2, #2
    ed4e:	e843 1000 	strex	r0, r1, [r3]
    ed52:	2800      	cmp	r0, #0
    ed54:	d1f7      	bne.n	ed46 <generic_hfclk_stop+0x6>
    ed56:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    ed5a:	07d3      	lsls	r3, r2, #31
    ed5c:	d402      	bmi.n	ed64 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    ed5e:	2001      	movs	r0, #1
    ed60:	f001 b92c 	b.w	ffbc <nrfx_clock_stop>
}
    ed64:	4770      	bx	lr
    ed66:	bf00      	nop
    ed68:	200006e4 	.word	0x200006e4

0000ed6c <z_nrf_clock_control_lf_on>:
{
    ed6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    ed70:	4939      	ldr	r1, [pc, #228]	; (ee58 <z_nrf_clock_control_lf_on+0xec>)
    ed72:	f3bf 8f5b 	dmb	ish
    ed76:	4607      	mov	r7, r0
    ed78:	2201      	movs	r2, #1
    ed7a:	e851 3f00 	ldrex	r3, [r1]
    ed7e:	e841 2000 	strex	r0, r2, [r1]
    ed82:	2800      	cmp	r0, #0
    ed84:	d1f9      	bne.n	ed7a <z_nrf_clock_control_lf_on+0xe>
    ed86:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    ed8a:	b933      	cbnz	r3, ed9a <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    ed8c:	4933      	ldr	r1, [pc, #204]	; (ee5c <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    ed8e:	4834      	ldr	r0, [pc, #208]	; (ee60 <z_nrf_clock_control_lf_on+0xf4>)
    ed90:	604b      	str	r3, [r1, #4]
    ed92:	60cb      	str	r3, [r1, #12]
    ed94:	608a      	str	r2, [r1, #8]
    ed96:	f003 f85d 	bl	11e54 <onoff_request>
	switch (start_mode) {
    ed9a:	1e7b      	subs	r3, r7, #1
    ed9c:	2b01      	cmp	r3, #1
    ed9e:	d82f      	bhi.n	ee00 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    eda0:	2f01      	cmp	r7, #1
    eda2:	d107      	bne.n	edb4 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    eda4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    eda8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    edac:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    edb0:	2b01      	cmp	r3, #1
    edb2:	d025      	beq.n	ee00 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    edb4:	f005 fdee 	bl	14994 <k_is_in_isr>
    edb8:	4604      	mov	r4, r0
    edba:	b918      	cbnz	r0, edc4 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    edbc:	4b29      	ldr	r3, [pc, #164]	; (ee64 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    edbe:	781b      	ldrb	r3, [r3, #0]
    edc0:	2b00      	cmp	r3, #0
    edc2:	d141      	bne.n	ee48 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    edc4:	f04f 0320 	mov.w	r3, #32
    edc8:	f3ef 8611 	mrs	r6, BASEPRI
    edcc:	f383 8812 	msr	BASEPRI_MAX, r3
    edd0:	f3bf 8f6f 	isb	sy
    edd4:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    edd6:	f8df 8090 	ldr.w	r8, [pc, #144]	; ee68 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    edda:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    edde:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    ede2:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    ede6:	03d2      	lsls	r2, r2, #15
    ede8:	d50c      	bpl.n	ee04 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    edea:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    edee:	2b01      	cmp	r3, #1
    edf0:	d001      	beq.n	edf6 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    edf2:	2f01      	cmp	r7, #1
    edf4:	d106      	bne.n	ee04 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    edf6:	b30c      	cbz	r4, ee3c <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    edf8:	f386 8811 	msr	BASEPRI, r6
    edfc:	f3bf 8f6f 	isb	sy
}
    ee00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    ee04:	b1ac      	cbz	r4, ee32 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    ee06:	4630      	mov	r0, r6
    ee08:	f7fe fbd4 	bl	d5b4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    ee0c:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    ee10:	2b00      	cmp	r3, #0
    ee12:	d1e4      	bne.n	edde <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    ee14:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    ee18:	2a00      	cmp	r2, #0
    ee1a:	d0e0      	beq.n	edde <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ee1c:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    ee20:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    ee24:	2301      	movs	r3, #1
    ee26:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    ee2a:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ee2e:	60ab      	str	r3, [r5, #8]
}
    ee30:	e7d5      	b.n	edde <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    ee32:	2100      	movs	r1, #0
    ee34:	2021      	movs	r0, #33	; 0x21
    ee36:	f002 fc8b 	bl	11750 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    ee3a:	e7e7      	b.n	ee0c <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    ee3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ee40:	2202      	movs	r2, #2
    ee42:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    ee46:	e7db      	b.n	ee00 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    ee48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ee4c:	2202      	movs	r2, #2
    ee4e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    ee52:	4606      	mov	r6, r0
}
    ee54:	e7bf      	b.n	edd6 <z_nrf_clock_control_lf_on+0x6a>
    ee56:	bf00      	nop
    ee58:	200006e8 	.word	0x200006e8
    ee5c:	20000684 	.word	0x20000684
    ee60:	200006b0 	.word	0x200006b0
    ee64:	20000c78 	.word	0x20000c78
    ee68:	e000e100 	.word	0xe000e100

0000ee6c <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    ee6c:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    ee6e:	4c04      	ldr	r4, [pc, #16]	; (ee80 <rtt_console_init+0x14>)
    ee70:	4620      	mov	r0, r4
    ee72:	f7fd fcff 	bl	c874 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    ee76:	4620      	mov	r0, r4
    ee78:	f7fe ff1c 	bl	dcb4 <__stdout_hook_install>

	return 0;
}
    ee7c:	2000      	movs	r0, #0
    ee7e:	bd10      	pop	{r4, pc}
    ee80:	0000ee85 	.word	0x0000ee85

0000ee84 <rtt_console_out>:
{
    ee84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ee86:	4e14      	ldr	r6, [pc, #80]	; (eed8 <rtt_console_out+0x54>)
	char c = (char)character;
    ee88:	f88d 0007 	strb.w	r0, [sp, #7]
{
    ee8c:	4604      	mov	r4, r0
	char c = (char)character;
    ee8e:	2503      	movs	r5, #3
		SEGGER_RTT_LOCK();
    ee90:	f3ef 8711 	mrs	r7, BASEPRI
    ee94:	f04f 0120 	mov.w	r1, #32
    ee98:	f381 8811 	msr	BASEPRI, r1
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    ee9c:	2201      	movs	r2, #1
    ee9e:	f10d 0107 	add.w	r1, sp, #7
    eea2:	2000      	movs	r0, #0
    eea4:	f001 fd92 	bl	109cc <SEGGER_RTT_WriteNoLock>
		SEGGER_RTT_UNLOCK();
    eea8:	f387 8811 	msr	BASEPRI, r7
		if (cnt) {
    eeac:	b120      	cbz	r0, eeb8 <rtt_console_out+0x34>
			host_present = true;
    eeae:	2301      	movs	r3, #1
    eeb0:	7033      	strb	r3, [r6, #0]
}
    eeb2:	4620      	mov	r0, r4
    eeb4:	b003      	add	sp, #12
    eeb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
    eeb8:	7833      	ldrb	r3, [r6, #0]
    eeba:	2b00      	cmp	r3, #0
    eebc:	d0f9      	beq.n	eeb2 <rtt_console_out+0x2e>
			if (max_cnt) {
    eebe:	3d01      	subs	r5, #1
    eec0:	d008      	beq.n	eed4 <rtt_console_out+0x50>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    eec2:	f005 fd67 	bl	14994 <k_is_in_isr>
    eec6:	2800      	cmp	r0, #0
    eec8:	d1e2      	bne.n	ee90 <rtt_console_out+0xc>
    eeca:	2100      	movs	r1, #0
    eecc:	2042      	movs	r0, #66	; 0x42
    eece:	f002 fc3f 	bl	11750 <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
    eed2:	e7dd      	b.n	ee90 <rtt_console_out+0xc>
				host_present = false;
    eed4:	7035      	strb	r5, [r6, #0]
    eed6:	e7ec      	b.n	eeb2 <rtt_console_out+0x2e>
    eed8:	20000825 	.word	0x20000825

0000eedc <uart_mcumgr_send_raw>:

/**
 * Sends raw data over the UART.
 */
static int uart_mcumgr_send_raw(const void *data, int len, void *arg)
{
    eedc:	b570      	push	{r4, r5, r6, lr}
	const uint8_t *u8p;

	u8p = data;
	while (len--) {
		uart_poll_out(uart_mcumgr_dev, *u8p++);
    eede:	4e07      	ldr	r6, [pc, #28]	; (eefc <uart_mcumgr_send_raw+0x20>)
{
    eee0:	4604      	mov	r4, r0
	while (len--) {
    eee2:	1845      	adds	r5, r0, r1
    eee4:	42ac      	cmp	r4, r5
    eee6:	d101      	bne.n	eeec <uart_mcumgr_send_raw+0x10>
	}

	return 0;
}
    eee8:	2000      	movs	r0, #0
    eeea:	bd70      	pop	{r4, r5, r6, pc}
		uart_poll_out(uart_mcumgr_dev, *u8p++);
    eeec:	6830      	ldr	r0, [r6, #0]
    eeee:	f814 1b01 	ldrb.w	r1, [r4], #1
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    eef2:	6883      	ldr	r3, [r0, #8]
    eef4:	685b      	ldr	r3, [r3, #4]
    eef6:	4798      	blx	r3
}
    eef8:	e7f4      	b.n	eee4 <uart_mcumgr_send_raw+0x8>
    eefa:	bf00      	nop
    eefc:	200006f0 	.word	0x200006f0

0000ef00 <uart_mcumgr_free_rx_buf>:
{
    ef00:	b507      	push	{r0, r1, r2, lr}
	block = rx_buf;
    ef02:	9001      	str	r0, [sp, #4]
	k_mem_slab_free(&uart_mcumgr_slab, &block);
    ef04:	a901      	add	r1, sp, #4
    ef06:	4803      	ldr	r0, [pc, #12]	; (ef14 <uart_mcumgr_free_rx_buf+0x14>)
    ef08:	f005 fd1b 	bl	14942 <k_mem_slab_free>
}
    ef0c:	b003      	add	sp, #12
    ef0e:	f85d fb04 	ldr.w	pc, [sp], #4
    ef12:	bf00      	nop
    ef14:	20000180 	.word	0x20000180

0000ef18 <uart_mcumgr_isr>:
{
    ef18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!uart_mcumgr_ignoring) {
    ef1c:	4e36      	ldr	r6, [pc, #216]	; (eff8 <uart_mcumgr_isr+0xe0>)
{
    ef1e:	b08a      	sub	sp, #40	; 0x28
	while (uart_irq_update(uart_mcumgr_dev) &&
    ef20:	4c36      	ldr	r4, [pc, #216]	; (effc <uart_mcumgr_isr+0xe4>)
    ef22:	e007      	b.n	ef34 <uart_mcumgr_isr+0x1c>
	if (!uart_irq_rx_ready(uart_mcumgr_dev)) {
    ef24:	6820      	ldr	r0, [r4, #0]
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_rx_ready == NULL) {
    ef26:	6883      	ldr	r3, [r0, #8]
    ef28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ef2a:	b98b      	cbnz	r3, ef50 <uart_mcumgr_isr+0x38>
	return uart_fifo_read(uart_mcumgr_dev, buf, capacity);
    ef2c:	6820      	ldr	r0, [r4, #0]
	if (api->fifo_read == NULL) {
    ef2e:	6883      	ldr	r3, [r0, #8]
    ef30:	699b      	ldr	r3, [r3, #24]
    ef32:	b98b      	cbnz	r3, ef58 <uart_mcumgr_isr+0x40>
	while (uart_irq_update(uart_mcumgr_dev) &&
    ef34:	6820      	ldr	r0, [r4, #0]
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
    ef36:	6883      	ldr	r3, [r0, #8]
    ef38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ef3a:	2b00      	cmp	r3, #0
    ef3c:	d14f      	bne.n	efde <uart_mcumgr_isr+0xc6>
	       uart_irq_is_pending(uart_mcumgr_dev)) {
    ef3e:	6820      	ldr	r0, [r4, #0]
	if (api->irq_is_pending == NULL) {
    ef40:	6883      	ldr	r3, [r0, #8]
    ef42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ef44:	2b00      	cmp	r3, #0
    ef46:	d0ed      	beq.n	ef24 <uart_mcumgr_isr+0xc>
	return api->irq_is_pending(dev);
    ef48:	4798      	blx	r3
	while (uart_irq_update(uart_mcumgr_dev) &&
    ef4a:	2800      	cmp	r0, #0
    ef4c:	d1ea      	bne.n	ef24 <uart_mcumgr_isr+0xc>
    ef4e:	e049      	b.n	efe4 <uart_mcumgr_isr+0xcc>
	return api->irq_rx_ready(dev);
    ef50:	4798      	blx	r3
	if (!uart_irq_rx_ready(uart_mcumgr_dev)) {
    ef52:	2800      	cmp	r0, #0
    ef54:	d0ee      	beq.n	ef34 <uart_mcumgr_isr+0x1c>
    ef56:	e7e9      	b.n	ef2c <uart_mcumgr_isr+0x14>
	return api->fifo_read(dev, rx_data, size);
    ef58:	2220      	movs	r2, #32
    ef5a:	a902      	add	r1, sp, #8
    ef5c:	4798      	blx	r3
		if (chunk_len == 0) {
    ef5e:	4607      	mov	r7, r0
    ef60:	2800      	cmp	r0, #0
    ef62:	d0e7      	beq.n	ef34 <uart_mcumgr_isr+0x1c>
		if (uart_mcumgr_cur_buf == NULL) {
    ef64:	4c26      	ldr	r4, [pc, #152]	; (f000 <uart_mcumgr_isr+0xe8>)
    ef66:	ad02      	add	r5, sp, #8
		for (i = 0; i < chunk_len; i++) {
    ef68:	f04f 0800 	mov.w	r8, #0
    ef6c:	45b8      	cmp	r8, r7
    ef6e:	dad7      	bge.n	ef20 <uart_mcumgr_isr+0x8>
	if (!uart_mcumgr_ignoring) {
    ef70:	7833      	ldrb	r3, [r6, #0]
			rx_buf = uart_mcumgr_rx_byte(buf[i]);
    ef72:	f815 9b01 	ldrb.w	r9, [r5], #1
	if (!uart_mcumgr_ignoring) {
    ef76:	b97b      	cbnz	r3, ef98 <uart_mcumgr_isr+0x80>
		if (uart_mcumgr_cur_buf == NULL) {
    ef78:	f8d4 a000 	ldr.w	sl, [r4]
    ef7c:	f1ba 0f00 	cmp.w	sl, #0
    ef80:	d117      	bne.n	efb2 <uart_mcumgr_isr+0x9a>
	rc = k_mem_slab_alloc(&uart_mcumgr_slab, &block, K_NO_WAIT);
    ef82:	4820      	ldr	r0, [pc, #128]	; (f004 <uart_mcumgr_isr+0xec>)
    ef84:	2200      	movs	r2, #0
    ef86:	2300      	movs	r3, #0
    ef88:	a901      	add	r1, sp, #4
    ef8a:	f001 fead 	bl	10ce8 <k_mem_slab_alloc>
	if (rc != 0) {
    ef8e:	b148      	cbz	r0, efa4 <uart_mcumgr_isr+0x8c>
			uart_mcumgr_cur_buf = uart_mcumgr_alloc_rx_buf();
    ef90:	f8c4 a000 	str.w	sl, [r4]
			uart_mcumgr_ignoring = true;
    ef94:	2301      	movs	r3, #1
    ef96:	7033      	strb	r3, [r6, #0]
	if (byte == '\n') {
    ef98:	f1b9 0f0a 	cmp.w	r9, #10
    ef9c:	d11c      	bne.n	efd8 <uart_mcumgr_isr+0xc0>
			uart_mcumgr_ignoring = false;
    ef9e:	2300      	movs	r3, #0
    efa0:	7033      	strb	r3, [r6, #0]
			if (rx_buf != NULL) {
    efa2:	e019      	b.n	efd8 <uart_mcumgr_isr+0xc0>
	rx_buf = block;
    efa4:	9b01      	ldr	r3, [sp, #4]
			uart_mcumgr_cur_buf = uart_mcumgr_alloc_rx_buf();
    efa6:	6023      	str	r3, [r4, #0]
	rx_buf->length = 0;
    efa8:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	if (!uart_mcumgr_ignoring) {
    efac:	7833      	ldrb	r3, [r6, #0]
    efae:	2b00      	cmp	r3, #0
    efb0:	d1f2      	bne.n	ef98 <uart_mcumgr_isr+0x80>
	rx_buf = uart_mcumgr_cur_buf;
    efb2:	6820      	ldr	r0, [r4, #0]
		if (rx_buf->length >= sizeof(rx_buf->data)) {
    efb4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    efb8:	2b7f      	cmp	r3, #127	; 0x7f
    efba:	d904      	bls.n	efc6 <uart_mcumgr_isr+0xae>
			uart_mcumgr_free_rx_buf(uart_mcumgr_cur_buf);
    efbc:	f7ff ffa0 	bl	ef00 <uart_mcumgr_free_rx_buf>
			uart_mcumgr_cur_buf = NULL;
    efc0:	2300      	movs	r3, #0
    efc2:	6023      	str	r3, [r4, #0]
    efc4:	e7e6      	b.n	ef94 <uart_mcumgr_isr+0x7c>
			rx_buf->data[rx_buf->length++] = byte;
    efc6:	1c5a      	adds	r2, r3, #1
    efc8:	4403      	add	r3, r0
	if (byte == '\n') {
    efca:	f1b9 0f0a 	cmp.w	r9, #10
			rx_buf->data[rx_buf->length++] = byte;
    efce:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    efd2:	f883 9004 	strb.w	r9, [r3, #4]
	if (byte == '\n') {
    efd6:	d008      	beq.n	efea <uart_mcumgr_isr+0xd2>
		for (i = 0; i < chunk_len; i++) {
    efd8:	f108 0801 	add.w	r8, r8, #1
    efdc:	e7c6      	b.n	ef6c <uart_mcumgr_isr+0x54>
		return -ENOSYS;
	}
	return api->irq_update(dev);
    efde:	4798      	blx	r3
	while (uart_irq_update(uart_mcumgr_dev) &&
    efe0:	2800      	cmp	r0, #0
    efe2:	d1ac      	bne.n	ef3e <uart_mcumgr_isr+0x26>
}
    efe4:	b00a      	add	sp, #40	; 0x28
    efe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			uart_mcumgr_cur_buf = NULL;
    efea:	2300      	movs	r3, #0
    efec:	6023      	str	r3, [r4, #0]
				uart_mgumgr_recv_cb(rx_buf);
    efee:	4b06      	ldr	r3, [pc, #24]	; (f008 <uart_mcumgr_isr+0xf0>)
    eff0:	681b      	ldr	r3, [r3, #0]
    eff2:	4798      	blx	r3
    eff4:	e7f0      	b.n	efd8 <uart_mcumgr_isr+0xc0>
    eff6:	bf00      	nop
    eff8:	20000826 	.word	0x20000826
    effc:	200006f0 	.word	0x200006f0
    f000:	200006ec 	.word	0x200006ec
    f004:	20000180 	.word	0x20000180
    f008:	200006f4 	.word	0x200006f4

0000f00c <uart_mcumgr_send>:

int uart_mcumgr_send(const uint8_t *data, int len)
{
	return mcumgr_serial_tx_pkt(data, len, uart_mcumgr_send_raw, NULL);
    f00c:	4a01      	ldr	r2, [pc, #4]	; (f014 <uart_mcumgr_send+0x8>)
    f00e:	2300      	movs	r3, #0
    f010:	f004 ba34 	b.w	1347c <mcumgr_serial_tx_pkt>
    f014:	0000eedd 	.word	0x0000eedd

0000f018 <uart_mcumgr_register>:
}
#endif

void uart_mcumgr_register(uart_mcumgr_recv_fn *cb)
{
	uart_mgumgr_recv_cb = cb;
    f018:	4b16      	ldr	r3, [pc, #88]	; (f074 <uart_mcumgr_register+0x5c>)
{
    f01a:	b513      	push	{r0, r1, r4, lr}

	uart_mcumgr_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_uart_mcumgr));
    f01c:	4c16      	ldr	r4, [pc, #88]	; (f078 <uart_mcumgr_register+0x60>)
	uart_mgumgr_recv_cb = cb;
    f01e:	6018      	str	r0, [r3, #0]
	uart_mcumgr_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_uart_mcumgr));
    f020:	4816      	ldr	r0, [pc, #88]	; (f07c <uart_mcumgr_register+0x64>)
    f022:	6020      	str	r0, [r4, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    f024:	f005 fbf2 	bl	1480c <z_device_is_ready>

	if (device_is_ready(uart_mcumgr_dev)) {
    f028:	b310      	cbz	r0, f070 <uart_mcumgr_register+0x58>
		uart_mcumgr_setup(uart_mcumgr_dev);
    f02a:	6824      	ldr	r4, [r4, #0]
	if (api->irq_rx_disable != NULL) {
    f02c:	68a3      	ldr	r3, [r4, #8]
    f02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f030:	b10b      	cbz	r3, f036 <uart_mcumgr_register+0x1e>
		api->irq_rx_disable(dev);
    f032:	4620      	mov	r0, r4
    f034:	4798      	blx	r3
	if (api->irq_tx_disable != NULL) {
    f036:	68a3      	ldr	r3, [r4, #8]
    f038:	6a1b      	ldr	r3, [r3, #32]
    f03a:	b10b      	cbz	r3, f040 <uart_mcumgr_register+0x28>
		api->irq_tx_disable(dev);
    f03c:	4620      	mov	r0, r4
    f03e:	4798      	blx	r3
	if (api->fifo_read == NULL) {
    f040:	68a3      	ldr	r3, [r4, #8]
    f042:	699b      	ldr	r3, [r3, #24]
    f044:	b903      	cbnz	r3, f048 <uart_mcumgr_register+0x30>
    f046:	e7fe      	b.n	f046 <uart_mcumgr_register+0x2e>
	return api->fifo_read(dev, rx_data, size);
    f048:	2201      	movs	r2, #1
    f04a:	f10d 0107 	add.w	r1, sp, #7
    f04e:	4620      	mov	r0, r4
    f050:	4798      	blx	r3
	while (uart_fifo_read(uart, &c, 1)) {
    f052:	4602      	mov	r2, r0
    f054:	2800      	cmp	r0, #0
    f056:	d1f3      	bne.n	f040 <uart_mcumgr_register+0x28>
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    f058:	68a3      	ldr	r3, [r4, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    f05a:	b123      	cbz	r3, f066 <uart_mcumgr_register+0x4e>
    f05c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    f05e:	b113      	cbz	r3, f066 <uart_mcumgr_register+0x4e>
		api->irq_callback_set(dev, cb, user_data);
    f060:	4907      	ldr	r1, [pc, #28]	; (f080 <uart_mcumgr_register+0x68>)
    f062:	4620      	mov	r0, r4
    f064:	4798      	blx	r3
	if (api->irq_rx_enable != NULL) {
    f066:	68a3      	ldr	r3, [r4, #8]
    f068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f06a:	b10b      	cbz	r3, f070 <uart_mcumgr_register+0x58>
		api->irq_rx_enable(dev);
    f06c:	4620      	mov	r0, r4
    f06e:	4798      	blx	r3
	}
}
    f070:	b002      	add	sp, #8
    f072:	bd10      	pop	{r4, pc}
    f074:	200006f4 	.word	0x200006f4
    f078:	200006f0 	.word	0x200006f0
    f07c:	00014f78 	.word	0x00014f78
    f080:	0000ef19 	.word	0x0000ef19

0000f084 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    f084:	b530      	push	{r4, r5, lr}
	return port->config;
    f086:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    f088:	7b04      	ldrb	r4, [r0, #12]
    f08a:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    f08e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    f092:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    f096:	b085      	sub	sp, #20
    f098:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    f09c:	d104      	bne.n	f0a8 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    f09e:	4628      	mov	r0, r5
    f0a0:	f001 fa3a 	bl	10518 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    f0a4:	2000      	movs	r0, #0
    f0a6:	e032      	b.n	f10e <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
    f0a8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    f0ac:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    f0b0:	d12f      	bne.n	f112 <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    f0b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    f0b6:	bf0c      	ite	eq
    f0b8:	2304      	moveq	r3, #4
    f0ba:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    f0bc:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    f0c0:	6883      	ldr	r3, [r0, #8]
    f0c2:	fa23 f101 	lsr.w	r1, r3, r1
    f0c6:	07c9      	lsls	r1, r1, #31
    f0c8:	d42f      	bmi.n	f12a <gpio_nrfx_pin_interrupt_configure+0xa6>
    f0ca:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    f0ce:	d12c      	bne.n	f12a <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    f0d0:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
    f0d2:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    f0d4:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
    f0d8:	4a1c      	ldr	r2, [pc, #112]	; (f14c <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    f0da:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    f0de:	bf18      	it	ne
    f0e0:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    f0e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    f0e8:	07db      	lsls	r3, r3, #31
    f0ea:	d41e      	bmi.n	f12a <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    f0ec:	f10d 0407 	add.w	r4, sp, #7
    f0f0:	4621      	mov	r1, r4
    f0f2:	4628      	mov	r0, r5
    f0f4:	f001 f974 	bl	103e0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    f0f8:	4b15      	ldr	r3, [pc, #84]	; (f150 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    f0fa:	4298      	cmp	r0, r3
    f0fc:	d114      	bne.n	f128 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
    f0fe:	4620      	mov	r0, r4
    f100:	f001 f9bc 	bl	1047c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    f104:	4b13      	ldr	r3, [pc, #76]	; (f154 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    f106:	4298      	cmp	r0, r3
    f108:	d00e      	beq.n	f128 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
    f10a:	f06f 000b 	mvn.w	r0, #11
}
    f10e:	b005      	add	sp, #20
    f110:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    f112:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    f116:	d005      	beq.n	f124 <gpio_nrfx_pin_interrupt_configure+0xa0>
    f118:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    f11c:	bf0c      	ite	eq
    f11e:	2302      	moveq	r3, #2
    f120:	2301      	movne	r3, #1
    f122:	e7cb      	b.n	f0bc <gpio_nrfx_pin_interrupt_configure+0x38>
    f124:	2303      	movs	r3, #3
    f126:	e7c9      	b.n	f0bc <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    f128:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    f12a:	2300      	movs	r3, #0
    f12c:	4619      	mov	r1, r3
    f12e:	aa02      	add	r2, sp, #8
    f130:	4628      	mov	r0, r5
    f132:	f001 f82f 	bl	10194 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    f136:	4b07      	ldr	r3, [pc, #28]	; (f154 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    f138:	4298      	cmp	r0, r3
    f13a:	d104      	bne.n	f146 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    f13c:	2101      	movs	r1, #1
    f13e:	4628      	mov	r0, r5
    f140:	f001 f9a2 	bl	10488 <nrfx_gpiote_trigger_enable>
    f144:	e7ae      	b.n	f0a4 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    f146:	f06f 0004 	mvn.w	r0, #4
    f14a:	e7e0      	b.n	f10e <gpio_nrfx_pin_interrupt_configure+0x8a>
    f14c:	50000300 	.word	0x50000300
    f150:	0bad0004 	.word	0x0bad0004
    f154:	0bad0000 	.word	0x0bad0000

0000f158 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    f158:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    f15a:	f001 f97f 	bl	1045c <nrfx_gpiote_is_init>
    f15e:	4604      	mov	r4, r0
    f160:	b968      	cbnz	r0, f17e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    f162:	f001 f953 	bl	1040c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    f166:	4b08      	ldr	r3, [pc, #32]	; (f188 <gpio_nrfx_init+0x30>)
    f168:	4298      	cmp	r0, r3
    f16a:	d10a      	bne.n	f182 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    f16c:	4807      	ldr	r0, [pc, #28]	; (f18c <gpio_nrfx_init+0x34>)
    f16e:	4621      	mov	r1, r4
    f170:	f001 f930 	bl	103d4 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    f174:	4622      	mov	r2, r4
    f176:	2105      	movs	r1, #5
    f178:	2006      	movs	r0, #6
    f17a:	f7fe fa43 	bl	d604 <z_arm_irq_priority_set>
		return 0;
    f17e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    f180:	bd10      	pop	{r4, pc}
		return -EIO;
    f182:	f06f 0004 	mvn.w	r0, #4
    f186:	e7fb      	b.n	f180 <gpio_nrfx_init+0x28>
    f188:	0bad0000 	.word	0x0bad0000
    f18c:	0000f191 	.word	0x0000f191

0000f190 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    f190:	0942      	lsrs	r2, r0, #5
{
    f192:	b570      	push	{r4, r5, r6, lr}
    f194:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    f196:	d002      	beq.n	f19e <nrfx_gpio_handler+0xe>
    f198:	2a01      	cmp	r2, #1
    f19a:	d015      	beq.n	f1c8 <nrfx_gpio_handler+0x38>
}
    f19c:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    f19e:	4e0b      	ldr	r6, [pc, #44]	; (f1cc <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
    f1a0:	6932      	ldr	r2, [r6, #16]
    f1a2:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    f1a4:	2900      	cmp	r1, #0
    f1a6:	d0f9      	beq.n	f19c <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    f1a8:	f003 031f 	and.w	r3, r3, #31
    f1ac:	2501      	movs	r5, #1
    f1ae:	680c      	ldr	r4, [r1, #0]
    f1b0:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
    f1b2:	688a      	ldr	r2, [r1, #8]
    f1b4:	402a      	ands	r2, r5
    f1b6:	d002      	beq.n	f1be <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    f1b8:	684b      	ldr	r3, [r1, #4]
    f1ba:	4630      	mov	r0, r6
    f1bc:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    f1be:	2c00      	cmp	r4, #0
    f1c0:	d0ec      	beq.n	f19c <nrfx_gpio_handler+0xc>
    f1c2:	4621      	mov	r1, r4
    f1c4:	6824      	ldr	r4, [r4, #0]
    f1c6:	e7f4      	b.n	f1b2 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    f1c8:	4e01      	ldr	r6, [pc, #4]	; (f1d0 <nrfx_gpio_handler+0x40>)
    f1ca:	e7e9      	b.n	f1a0 <nrfx_gpio_handler+0x10>
    f1cc:	00014f30 	.word	0x00014f30
    f1d0:	00014f48 	.word	0x00014f48

0000f1d4 <gpio_nrfx_pin_configure>:
{
    f1d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    f1d8:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f1da:	7b3b      	ldrb	r3, [r7, #12]
    f1dc:	f001 051f 	and.w	r5, r1, #31
{
    f1e0:	b085      	sub	sp, #20
    f1e2:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f1e4:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    f1e8:	4614      	mov	r4, r2
    f1ea:	b9ca      	cbnz	r2, f220 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    f1ec:	a902      	add	r1, sp, #8
    f1ee:	4628      	mov	r0, r5
    f1f0:	f001 f8f6 	bl	103e0 <nrfx_gpiote_channel_get>
    f1f4:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    f1f6:	4628      	mov	r0, r5
    f1f8:	f001 f9b6 	bl	10568 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    f1fc:	4b4a      	ldr	r3, [pc, #296]	; (f328 <gpio_nrfx_pin_configure+0x154>)
    f1fe:	4298      	cmp	r0, r3
    f200:	d004      	beq.n	f20c <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    f202:	f06f 0004 	mvn.w	r0, #4
}
    f206:	b005      	add	sp, #20
    f208:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    f20c:	4284      	cmp	r4, r0
    f20e:	d105      	bne.n	f21c <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    f210:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f214:	f001 f92c 	bl	10470 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    f218:	42a0      	cmp	r0, r4
    f21a:	d1f2      	bne.n	f202 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    f21c:	2000      	movs	r0, #0
    f21e:	e7f2      	b.n	f206 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    f220:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    f224:	f10d 0103 	add.w	r1, sp, #3
    f228:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    f22a:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    f22e:	f001 f8d7 	bl	103e0 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    f232:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    f234:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    f236:	aa02      	add	r2, sp, #8
    f238:	4649      	mov	r1, r9
    f23a:	4628      	mov	r0, r5
    f23c:	f000 ffaa 	bl	10194 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    f240:	4b39      	ldr	r3, [pc, #228]	; (f328 <gpio_nrfx_pin_configure+0x154>)
    f242:	4298      	cmp	r0, r3
    f244:	d002      	beq.n	f24c <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    f246:	f06f 0015 	mvn.w	r0, #21
    f24a:	e7dc      	b.n	f206 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    f24c:	4580      	cmp	r8, r0
    f24e:	d103      	bne.n	f258 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    f250:	f89d 0003 	ldrb.w	r0, [sp, #3]
    f254:	f001 f90c 	bl	10470 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    f258:	03a3      	lsls	r3, r4, #14
    f25a:	d551      	bpl.n	f300 <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    f25c:	f240 6306 	movw	r3, #1542	; 0x606
    f260:	4023      	ands	r3, r4
    f262:	f240 2206 	movw	r2, #518	; 0x206
    f266:	4293      	cmp	r3, r2
    f268:	d03b      	beq.n	f2e2 <gpio_nrfx_pin_configure+0x10e>
    f26a:	d80c      	bhi.n	f286 <gpio_nrfx_pin_configure+0xb2>
    f26c:	2b06      	cmp	r3, #6
    f26e:	d015      	beq.n	f29c <gpio_nrfx_pin_configure+0xc8>
    f270:	d804      	bhi.n	f27c <gpio_nrfx_pin_configure+0xa8>
    f272:	b19b      	cbz	r3, f29c <gpio_nrfx_pin_configure+0xc8>
    f274:	2b02      	cmp	r3, #2
    f276:	d1e6      	bne.n	f246 <gpio_nrfx_pin_configure+0x72>
    f278:	2304      	movs	r3, #4
    f27a:	e00f      	b.n	f29c <gpio_nrfx_pin_configure+0xc8>
    f27c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    f280:	d1e1      	bne.n	f246 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    f282:	2301      	movs	r3, #1
    f284:	e00a      	b.n	f29c <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    f286:	f240 4202 	movw	r2, #1026	; 0x402
    f28a:	4293      	cmp	r3, r2
    f28c:	d02b      	beq.n	f2e6 <gpio_nrfx_pin_configure+0x112>
    f28e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    f292:	d02a      	beq.n	f2ea <gpio_nrfx_pin_configure+0x116>
    f294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    f298:	d1d5      	bne.n	f246 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    f29a:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    f29c:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    f2a0:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    f2a4:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    f2a8:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    f2aa:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    f2ae:	bf54      	ite	pl
    f2b0:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    f2b4:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    f2b6:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    f2b8:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    f2bc:	d517      	bpl.n	f2ee <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    f2be:	687b      	ldr	r3, [r7, #4]
    f2c0:	2101      	movs	r1, #1
    f2c2:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    f2c6:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    f2ca:	2200      	movs	r2, #0
    f2cc:	a901      	add	r1, sp, #4
    f2ce:	4628      	mov	r0, r5
    f2d0:	f001 f80e 	bl	102f0 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    f2d4:	4b14      	ldr	r3, [pc, #80]	; (f328 <gpio_nrfx_pin_configure+0x154>)
    f2d6:	4298      	cmp	r0, r3
    f2d8:	bf14      	ite	ne
    f2da:	f06f 0015 	mvnne.w	r0, #21
    f2de:	2000      	moveq	r0, #0
    f2e0:	e791      	b.n	f206 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    f2e2:	2307      	movs	r3, #7
    f2e4:	e7da      	b.n	f29c <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
    f2e6:	2305      	movs	r3, #5
    f2e8:	e7d8      	b.n	f29c <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    f2ea:	2303      	movs	r3, #3
    f2ec:	e7d6      	b.n	f29c <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    f2ee:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    f2f0:	bf41      	itttt	mi
    f2f2:	687b      	ldrmi	r3, [r7, #4]
    f2f4:	2101      	movmi	r1, #1
    f2f6:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    f2fa:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    f2fe:	e7e4      	b.n	f2ca <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
    f300:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    f302:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    f306:	bf54      	ite	pl
    f308:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    f30c:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    f30e:	461a      	mov	r2, r3
    f310:	a901      	add	r1, sp, #4
    f312:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    f314:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    f318:	f000 ff3c 	bl	10194 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    f31c:	4b02      	ldr	r3, [pc, #8]	; (f328 <gpio_nrfx_pin_configure+0x154>)
    f31e:	4298      	cmp	r0, r3
    f320:	f43f af7c 	beq.w	f21c <gpio_nrfx_pin_configure+0x48>
    f324:	e78f      	b.n	f246 <gpio_nrfx_pin_configure+0x72>
    f326:	bf00      	nop
    f328:	0bad0000 	.word	0x0bad0000

0000f32c <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    f32c:	4b02      	ldr	r3, [pc, #8]	; (f338 <flash_nrf_pages_layout+0xc>)
    f32e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    f330:	2301      	movs	r3, #1
    f332:	6013      	str	r3, [r2, #0]
}
    f334:	4770      	bx	lr
    f336:	bf00      	nop
    f338:	20000710 	.word	0x20000710

0000f33c <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    f33c:	4800      	ldr	r0, [pc, #0]	; (f340 <flash_nrf_get_parameters+0x4>)
    f33e:	4770      	bx	lr
    f340:	0001530c 	.word	0x0001530c

0000f344 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    f344:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    f346:	2201      	movs	r2, #1
    f348:	4611      	mov	r1, r2
    f34a:	4806      	ldr	r0, [pc, #24]	; (f364 <nrf_flash_init+0x20>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    f34c:	4c06      	ldr	r4, [pc, #24]	; (f368 <nrf_flash_init+0x24>)
    f34e:	f005 fbf3 	bl	14b38 <z_impl_k_sem_init>
    f352:	f004 fda6 	bl	13ea2 <nrfx_nvmc_flash_page_count_get>
    f356:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    f358:	f004 fd9f 	bl	13e9a <nrfx_nvmc_flash_page_size_get>
    f35c:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    f35e:	2000      	movs	r0, #0
    f360:	bd10      	pop	{r4, pc}
    f362:	bf00      	nop
    f364:	20000718 	.word	0x20000718
    f368:	20000710 	.word	0x20000710

0000f36c <restore_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
    f36c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    f370:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
    f374:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
    f378:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    f37c:	f023 031f 	bic.w	r3, r3, #31
    f380:	430b      	orrs	r3, r1
    pofcon |=
    f382:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
    f386:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
    f38a:	4b02      	ldr	r3, [pc, #8]	; (f394 <restore_pofwarn.part.0+0x28>)
    f38c:	2200      	movs	r2, #0
    f38e:	701a      	strb	r2, [r3, #0]
	}
}
    f390:	4770      	bx	lr
    f392:	bf00      	nop
    f394:	20000827 	.word	0x20000827

0000f398 <suspend_pofwarn>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    f398:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    f39c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    f3a0:	2b08      	cmp	r3, #8
    f3a2:	d122      	bne.n	f3ea <suspend_pofwarn+0x52>
    uint32_t pofcon = p_reg->POFCON;
    f3a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    f3a8:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
	if (enabled) {
    f3ac:	f011 0001 	ands.w	r0, r1, #1
    f3b0:	d01c      	beq.n	f3ec <suspend_pofwarn+0x54>
    uint32_t pofcon = p_reg->POFCON;
    f3b2:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
    f3b6:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    f3ba:	f020 001f 	bic.w	r0, r0, #31
    pofcon |=
    f3be:	4308      	orrs	r0, r1
    p_reg->POFCON = pofcon;
    f3c0:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f3c4:	f8d2 0108 	ldr.w	r0, [r2, #264]	; 0x108
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
    f3c8:	b158      	cbz	r0, f3e2 <suspend_pofwarn+0x4a>
    uint32_t pofcon = p_reg->POFCON;
    f3ca:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    f3ce:	f023 031f 	bic.w	r3, r3, #31
    f3d2:	430b      	orrs	r3, r1
    pofcon |=
    f3d4:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
    f3d8:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			return -ECANCELED;
    f3dc:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    f3e0:	4770      	bx	lr
		pofcon_enabled = enabled;
    f3e2:	4b03      	ldr	r3, [pc, #12]	; (f3f0 <suspend_pofwarn+0x58>)
    f3e4:	2201      	movs	r2, #1
    f3e6:	701a      	strb	r2, [r3, #0]
    f3e8:	4770      	bx	lr
		return 0;
    f3ea:	2000      	movs	r0, #0
}
    f3ec:	4770      	bx	lr
    f3ee:	bf00      	nop
    f3f0:	20000827 	.word	0x20000827

0000f3f4 <flash_nrf_write>:
{
    f3f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f3f8:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    f3fa:	4630      	mov	r0, r6
    f3fc:	4619      	mov	r1, r3
{
    f3fe:	4617      	mov	r7, r2
    f400:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    f402:	f004 f9be 	bl	13782 <is_regular_addr_valid>
    f406:	b388      	cbz	r0, f46c <flash_nrf_write+0x78>
	return (data & 0x3) ? false : true;
    f408:	ea46 0504 	orr.w	r5, r6, r4
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    f40c:	f015 0503 	ands.w	r5, r5, #3
    f410:	d12c      	bne.n	f46c <flash_nrf_write+0x78>
	if (!len) {
    f412:	b1bc      	cbz	r4, f444 <flash_nrf_write+0x50>
	return z_impl_k_sem_take(sem, timeout);
    f414:	4817      	ldr	r0, [pc, #92]	; (f474 <flash_nrf_write+0x80>)
	if (pofcon_enabled) {
    f416:	f8df 9060 	ldr.w	r9, [pc, #96]	; f478 <flash_nrf_write+0x84>
    f41a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f41e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f422:	f001 fdb9 	bl	10f98 <z_impl_k_sem_take>
static int write_op(void *context)
    f426:	f024 0403 	bic.w	r4, r4, #3
	while (w_ctx->len >= sizeof(uint32_t)) {
    f42a:	42a5      	cmp	r5, r4
    f42c:	eb06 0805 	add.w	r8, r6, r5
    f430:	d10b      	bne.n	f44a <flash_nrf_write+0x56>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    f432:	4a12      	ldr	r2, [pc, #72]	; (f47c <flash_nrf_write+0x88>)
    f434:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    f438:	07db      	lsls	r3, r3, #31
    f43a:	d5fb      	bpl.n	f434 <flash_nrf_write+0x40>
	return FLASH_OP_DONE;
    f43c:	2400      	movs	r4, #0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    f43e:	480d      	ldr	r0, [pc, #52]	; (f474 <flash_nrf_write+0x80>)
    f440:	f001 fd8a 	bl	10f58 <z_impl_k_sem_give>
}
    f444:	4620      	mov	r0, r4
    f446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (SUSPEND_POFWARN()) {
    f44a:	f7ff ffa5 	bl	f398 <suspend_pofwarn>
    f44e:	b950      	cbnz	r0, f466 <flash_nrf_write+0x72>
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    f450:	5979      	ldr	r1, [r7, r5]
    f452:	4640      	mov	r0, r8
    f454:	f001 f9ae 	bl	107b4 <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
    f458:	f899 3000 	ldrb.w	r3, [r9]
    f45c:	b10b      	cbz	r3, f462 <flash_nrf_write+0x6e>
    f45e:	f7ff ff85 	bl	f36c <restore_pofwarn.part.0>
	w_ctx->len -= shift;
    f462:	3504      	adds	r5, #4
}
    f464:	e7e1      	b.n	f42a <flash_nrf_write+0x36>
			return -ECANCELED;
    f466:	f06f 048b 	mvn.w	r4, #139	; 0x8b
    f46a:	e7e8      	b.n	f43e <flash_nrf_write+0x4a>
		return -EINVAL;
    f46c:	f06f 0415 	mvn.w	r4, #21
    f470:	e7e8      	b.n	f444 <flash_nrf_write+0x50>
    f472:	bf00      	nop
    f474:	20000718 	.word	0x20000718
    f478:	20000827 	.word	0x20000827
    f47c:	4001e000 	.word	0x4001e000

0000f480 <flash_nrf_erase>:
{
    f480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f484:	460d      	mov	r5, r1
    f486:	4616      	mov	r6, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    f488:	f004 fd07 	bl	13e9a <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    f48c:	4631      	mov	r1, r6
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    f48e:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
    f490:	4628      	mov	r0, r5
    f492:	f004 f976 	bl	13782 <is_regular_addr_valid>
    f496:	b378      	cbz	r0, f4f8 <flash_nrf_erase+0x78>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    f498:	fbb5 f3f7 	udiv	r3, r5, r7
    f49c:	fb07 5313 	mls	r3, r7, r3, r5
    f4a0:	bb53      	cbnz	r3, f4f8 <flash_nrf_erase+0x78>
    f4a2:	fbb6 f4f7 	udiv	r4, r6, r7
    f4a6:	fb07 6414 	mls	r4, r7, r4, r6
    f4aa:	bb2c      	cbnz	r4, f4f8 <flash_nrf_erase+0x78>
		if (!n_pages) {
    f4ac:	42be      	cmp	r6, r7
    f4ae:	d31d      	bcc.n	f4ec <flash_nrf_erase+0x6c>
	return z_impl_k_sem_take(sem, timeout);
    f4b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f4b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f4b8:	4811      	ldr	r0, [pc, #68]	; (f500 <flash_nrf_erase+0x80>)
	if (pofcon_enabled) {
    f4ba:	f8df 8048 	ldr.w	r8, [pc, #72]	; f504 <flash_nrf_erase+0x84>
    f4be:	f001 fd6b 	bl	10f98 <z_impl_k_sem_take>
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    f4c2:	f004 fcea 	bl	13e9a <nrfx_nvmc_flash_page_size_get>
    f4c6:	4607      	mov	r7, r0
		if (SUSPEND_POFWARN()) {
    f4c8:	f7ff ff66 	bl	f398 <suspend_pofwarn>
    f4cc:	4604      	mov	r4, r0
    f4ce:	b980      	cbnz	r0, f4f2 <flash_nrf_erase+0x72>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    f4d0:	4628      	mov	r0, r5
    f4d2:	f001 f94f 	bl	10774 <nrfx_nvmc_page_erase>
	if (pofcon_enabled) {
    f4d6:	f898 3000 	ldrb.w	r3, [r8]
    f4da:	b10b      	cbz	r3, f4e0 <flash_nrf_erase+0x60>
    f4dc:	f7ff ff46 	bl	f36c <restore_pofwarn.part.0>
	} while (e_ctx->len > 0);
    f4e0:	1bf6      	subs	r6, r6, r7
    f4e2:	443d      	add	r5, r7
    f4e4:	d1f0      	bne.n	f4c8 <flash_nrf_erase+0x48>
	z_impl_k_sem_give(sem);
    f4e6:	4806      	ldr	r0, [pc, #24]	; (f500 <flash_nrf_erase+0x80>)
    f4e8:	f001 fd36 	bl	10f58 <z_impl_k_sem_give>
}
    f4ec:	4620      	mov	r0, r4
    f4ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -ECANCELED;
    f4f2:	f06f 048b 	mvn.w	r4, #139	; 0x8b
    f4f6:	e7f6      	b.n	f4e6 <flash_nrf_erase+0x66>
		return -EINVAL;
    f4f8:	f06f 0415 	mvn.w	r4, #21
    f4fc:	e7f6      	b.n	f4ec <flash_nrf_erase+0x6c>
    f4fe:	bf00      	nop
    f500:	20000718 	.word	0x20000718
    f504:	20000827 	.word	0x20000827

0000f508 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    f508:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    f50a:	794b      	ldrb	r3, [r1, #5]
    f50c:	2b01      	cmp	r3, #1
    f50e:	d026      	beq.n	f55e <uarte_nrfx_configure+0x56>
    f510:	2b03      	cmp	r3, #3
    f512:	d121      	bne.n	f558 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    f514:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    f516:	798b      	ldrb	r3, [r1, #6]
    f518:	2b03      	cmp	r3, #3
    f51a:	d11d      	bne.n	f558 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    f51c:	79cc      	ldrb	r4, [r1, #7]
    f51e:	b10c      	cbz	r4, f524 <uarte_nrfx_configure+0x1c>
    f520:	2c01      	cmp	r4, #1
    f522:	d119      	bne.n	f558 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    f524:	790a      	ldrb	r2, [r1, #4]
    f526:	b112      	cbz	r2, f52e <uarte_nrfx_configure+0x26>
    f528:	2a02      	cmp	r2, #2
    f52a:	d115      	bne.n	f558 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    f52c:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    f52e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    f530:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    f532:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    f536:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    f538:	d065      	beq.n	f606 <uarte_nrfx_configure+0xfe>
    f53a:	d82d      	bhi.n	f598 <uarte_nrfx_configure+0x90>
    f53c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    f540:	d064      	beq.n	f60c <uarte_nrfx_configure+0x104>
    f542:	d816      	bhi.n	f572 <uarte_nrfx_configure+0x6a>
    f544:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    f548:	d062      	beq.n	f610 <uarte_nrfx_configure+0x108>
    f54a:	d80a      	bhi.n	f562 <uarte_nrfx_configure+0x5a>
    f54c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    f550:	d061      	beq.n	f616 <uarte_nrfx_configure+0x10e>
    f552:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    f556:	d061      	beq.n	f61c <uarte_nrfx_configure+0x114>
    f558:	f06f 0085 	mvn.w	r0, #133	; 0x85
    f55c:	e052      	b.n	f604 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    f55e:	2600      	movs	r6, #0
    f560:	e7d9      	b.n	f516 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    f562:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    f566:	d05c      	beq.n	f622 <uarte_nrfx_configure+0x11a>
    f568:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    f56c:	d1f4      	bne.n	f558 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    f56e:	4b37      	ldr	r3, [pc, #220]	; (f64c <uarte_nrfx_configure+0x144>)
    f570:	e03c      	b.n	f5ec <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    f572:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    f576:	d057      	beq.n	f628 <uarte_nrfx_configure+0x120>
    f578:	d807      	bhi.n	f58a <uarte_nrfx_configure+0x82>
    f57a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    f57e:	d055      	beq.n	f62c <uarte_nrfx_configure+0x124>
    f580:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    f584:	d1e8      	bne.n	f558 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    f586:	4b32      	ldr	r3, [pc, #200]	; (f650 <uarte_nrfx_configure+0x148>)
    f588:	e030      	b.n	f5ec <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    f58a:	f647 2712 	movw	r7, #31250	; 0x7a12
    f58e:	42bb      	cmp	r3, r7
    f590:	d1e2      	bne.n	f558 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    f592:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    f596:	e029      	b.n	f5ec <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    f598:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    f59c:	d048      	beq.n	f630 <uarte_nrfx_configure+0x128>
    f59e:	d813      	bhi.n	f5c8 <uarte_nrfx_configure+0xc0>
    f5a0:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    f5a4:	d047      	beq.n	f636 <uarte_nrfx_configure+0x12e>
    f5a6:	d809      	bhi.n	f5bc <uarte_nrfx_configure+0xb4>
    f5a8:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    f5ac:	42bb      	cmp	r3, r7
    f5ae:	d044      	beq.n	f63a <uarte_nrfx_configure+0x132>
    f5b0:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    f5b4:	d1d0      	bne.n	f558 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    f5b6:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    f5ba:	e017      	b.n	f5ec <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    f5bc:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    f5c0:	d1ca      	bne.n	f558 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    f5c2:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    f5c6:	e011      	b.n	f5ec <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    f5c8:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    f5cc:	d038      	beq.n	f640 <uarte_nrfx_configure+0x138>
    f5ce:	d808      	bhi.n	f5e2 <uarte_nrfx_configure+0xda>
    f5d0:	4f20      	ldr	r7, [pc, #128]	; (f654 <uarte_nrfx_configure+0x14c>)
    f5d2:	42bb      	cmp	r3, r7
    f5d4:	d037      	beq.n	f646 <uarte_nrfx_configure+0x13e>
    f5d6:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    f5da:	d1bd      	bne.n	f558 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    f5dc:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    f5e0:	e004      	b.n	f5ec <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    f5e2:	4f1d      	ldr	r7, [pc, #116]	; (f658 <uarte_nrfx_configure+0x150>)
    f5e4:	42bb      	cmp	r3, r7
    f5e6:	d1b7      	bne.n	f558 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    f5e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    f5ec:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    f5ee:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    f5f2:	1d03      	adds	r3, r0, #4
    f5f4:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    f5f6:	4334      	orrs	r4, r6
    f5f8:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    f5fa:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    f5fe:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    f602:	2000      	movs	r0, #0
}
    f604:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    f606:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    f60a:	e7ef      	b.n	f5ec <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    f60c:	4b13      	ldr	r3, [pc, #76]	; (f65c <uarte_nrfx_configure+0x154>)
    f60e:	e7ed      	b.n	f5ec <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    f610:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    f614:	e7ea      	b.n	f5ec <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    f616:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    f61a:	e7e7      	b.n	f5ec <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    f61c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    f620:	e7e4      	b.n	f5ec <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    f622:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    f626:	e7e1      	b.n	f5ec <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    f628:	4b0d      	ldr	r3, [pc, #52]	; (f660 <uarte_nrfx_configure+0x158>)
    f62a:	e7df      	b.n	f5ec <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    f62c:	4b0d      	ldr	r3, [pc, #52]	; (f664 <uarte_nrfx_configure+0x15c>)
    f62e:	e7dd      	b.n	f5ec <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    f630:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    f634:	e7da      	b.n	f5ec <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    f636:	4b0c      	ldr	r3, [pc, #48]	; (f668 <uarte_nrfx_configure+0x160>)
    f638:	e7d8      	b.n	f5ec <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    f63a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    f63e:	e7d5      	b.n	f5ec <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    f640:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    f644:	e7d2      	b.n	f5ec <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    f646:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    f64a:	e7cf      	b.n	f5ec <uarte_nrfx_configure+0xe4>
    f64c:	0013b000 	.word	0x0013b000
    f650:	004ea000 	.word	0x004ea000
    f654:	0003d090 	.word	0x0003d090
    f658:	000f4240 	.word	0x000f4240
    f65c:	00275000 	.word	0x00275000
    f660:	0075c000 	.word	0x0075c000
    f664:	003af000 	.word	0x003af000
    f668:	013a9000 	.word	0x013a9000

0000f66c <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    f66c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    f670:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    f674:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    f676:	f8d8 4000 	ldr.w	r4, [r8]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    f67a:	f8d8 900c 	ldr.w	r9, [r8, #12]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    f67e:	2100      	movs	r1, #0
    f680:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
    f684:	4607      	mov	r7, r0
	data->dev = dev;
    f686:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    f688:	aa01      	add	r2, sp, #4
    f68a:	4648      	mov	r0, r9
    f68c:	f004 fa9c 	bl	13bc8 <pinctrl_lookup_state>
	if (ret < 0) {
    f690:	1e05      	subs	r5, r0, #0
    f692:	db56      	blt.n	f742 <uarte_instance_init.constprop.0+0xd6>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    f694:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    f696:	f8d9 2000 	ldr.w	r2, [r9]
    f69a:	7919      	ldrb	r1, [r3, #4]
    f69c:	6818      	ldr	r0, [r3, #0]
    f69e:	f004 fab0 	bl	13c02 <pinctrl_configure_pins>
	if (err < 0) {
    f6a2:	1e05      	subs	r5, r0, #0
    f6a4:	db4d      	blt.n	f742 <uarte_instance_init.constprop.0+0xd6>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    f6a6:	1d31      	adds	r1, r6, #4
    f6a8:	4638      	mov	r0, r7
    f6aa:	f7ff ff2d 	bl	f508 <uarte_nrfx_configure>
	if (err) {
    f6ae:	4605      	mov	r5, r0
    f6b0:	2800      	cmp	r0, #0
    f6b2:	d146      	bne.n	f742 <uarte_instance_init.constprop.0+0xd6>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    f6b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    f6b8:	0799      	lsls	r1, r3, #30
    f6ba:	d519      	bpl.n	f6f0 <uarte_instance_init.constprop.0+0x84>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    f6bc:	f106 0016 	add.w	r0, r6, #22
    f6c0:	f001 f886 	bl	107d0 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    f6c4:	4b22      	ldr	r3, [pc, #136]	; (f750 <uarte_instance_init.constprop.0+0xe4>)
    f6c6:	4298      	cmp	r0, r3
    f6c8:	d13f      	bne.n	f74a <uarte_instance_init.constprop.0+0xde>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    f6ca:	7db0      	ldrb	r0, [r6, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    f6cc:	00c3      	lsls	r3, r0, #3
    f6ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    f6d2:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    f6d6:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    f6da:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    f6de:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    f6e2:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    f6e6:	4a1b      	ldr	r2, [pc, #108]	; (f754 <uarte_instance_init.constprop.0+0xe8>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    f6e8:	2301      	movs	r3, #1
    f6ea:	4083      	lsls	r3, r0
    f6ec:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    f6f0:	2308      	movs	r3, #8
    f6f2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    f6f6:	f898 3008 	ldrb.w	r3, [r8, #8]
    f6fa:	b95b      	cbnz	r3, f714 <uarte_instance_init.constprop.0+0xa8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f6fc:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    f700:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    f704:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    f708:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    f70c:	2301      	movs	r3, #1
    f70e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f712:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    f714:	f8d8 3004 	ldr.w	r3, [r8, #4]
    f718:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    f71a:	bf5c      	itt	pl
    f71c:	f44f 7280 	movpl.w	r2, #256	; 0x100
    f720:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    f724:	06db      	lsls	r3, r3, #27
    f726:	bf44      	itt	mi
    f728:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    f72c:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    f730:	3614      	adds	r6, #20
    p_reg->TXD.MAXCNT = length;
    f732:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    f734:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    f738:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f73c:	2301      	movs	r3, #1
    f73e:	60a3      	str	r3, [r4, #8]
    f740:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    f742:	4628      	mov	r0, r5
    f744:	b003      	add	sp, #12
    f746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    f74a:	f06f 0504 	mvn.w	r5, #4
    f74e:	e7f8      	b.n	f742 <uarte_instance_init.constprop.0+0xd6>
    f750:	0bad0000 	.word	0x0bad0000
    f754:	4001f000 	.word	0x4001f000

0000f758 <uarte_nrfx_poll_out>:
{
    f758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    f75a:	6906      	ldr	r6, [r0, #16]
{
    f75c:	4605      	mov	r5, r0
    f75e:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    f760:	f005 f918 	bl	14994 <k_is_in_isr>
    f764:	b910      	cbnz	r0, f76c <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    f766:	4b20      	ldr	r3, [pc, #128]	; (f7e8 <uarte_nrfx_poll_out+0x90>)
	if (isr_mode) {
    f768:	781b      	ldrb	r3, [r3, #0]
    f76a:	b983      	cbnz	r3, f78e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    f76c:	f04f 0320 	mov.w	r3, #32
    f770:	f3ef 8411 	mrs	r4, BASEPRI
    f774:	f383 8812 	msr	BASEPRI_MAX, r3
    f778:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    f77c:	6868      	ldr	r0, [r5, #4]
    f77e:	f004 f957 	bl	13a30 <is_tx_ready.isra.0>
    f782:	bb28      	cbnz	r0, f7d0 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    f784:	f384 8811 	msr	BASEPRI, r4
    f788:	f3bf 8f6f 	isb	sy
}
    f78c:	e7ee      	b.n	f76c <uarte_nrfx_poll_out+0x14>
{
    f78e:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    f790:	6868      	ldr	r0, [r5, #4]
    f792:	f004 f94d 	bl	13a30 <is_tx_ready.isra.0>
    f796:	b970      	cbnz	r0, f7b6 <uarte_nrfx_poll_out+0x5e>
    f798:	2001      	movs	r0, #1
    f79a:	f004 faea 	bl	13d72 <nrfx_busy_wait>
    f79e:	3c01      	subs	r4, #1
    f7a0:	d1f6      	bne.n	f790 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
    f7a2:	2100      	movs	r1, #0
    f7a4:	2021      	movs	r0, #33	; 0x21
    f7a6:	f001 ffd3 	bl	11750 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    f7aa:	e7f0      	b.n	f78e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    f7ac:	f384 8811 	msr	BASEPRI, r4
    f7b0:	f3bf 8f6f 	isb	sy
}
    f7b4:	e7f5      	b.n	f7a2 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    f7b6:	f04f 0320 	mov.w	r3, #32
    f7ba:	f3ef 8411 	mrs	r4, BASEPRI
    f7be:	f383 8812 	msr	BASEPRI_MAX, r3
    f7c2:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    f7c6:	6868      	ldr	r0, [r5, #4]
    f7c8:	f004 f932 	bl	13a30 <is_tx_ready.isra.0>
    f7cc:	2800      	cmp	r0, #0
    f7ce:	d0ed      	beq.n	f7ac <uarte_nrfx_poll_out+0x54>
	data->char_out = c;
    f7d0:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    f7d2:	2201      	movs	r2, #1
	data->char_out = c;
    f7d4:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    f7d8:	6868      	ldr	r0, [r5, #4]
    f7da:	f004 f90e 	bl	139fa <tx_start.isra.0>
	__asm__ volatile(
    f7de:	f384 8811 	msr	BASEPRI, r4
    f7e2:	f3bf 8f6f 	isb	sy
}
    f7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f7e8:	20000c78 	.word	0x20000c78

0000f7ec <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    f7ec:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    f7ee:	2301      	movs	r3, #1
    f7f0:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    f7f2:	4a11      	ldr	r2, [pc, #68]	; (f838 <compare_int_lock+0x4c>)
    f7f4:	f3bf 8f5b 	dmb	ish
    f7f8:	43dc      	mvns	r4, r3
    f7fa:	e852 1f00 	ldrex	r1, [r2]
    f7fe:	ea01 0c04 	and.w	ip, r1, r4
    f802:	e842 ce00 	strex	lr, ip, [r2]
    f806:	f1be 0f00 	cmp.w	lr, #0
    f80a:	d1f6      	bne.n	f7fa <compare_int_lock+0xe>
    f80c:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    f810:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    f814:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    f818:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    f81c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    f820:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    f824:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    f828:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    f82c:	420b      	tst	r3, r1
}
    f82e:	bf14      	ite	ne
    f830:	2001      	movne	r0, #1
    f832:	2000      	moveq	r0, #0
    f834:	bd10      	pop	{r4, pc}
    f836:	bf00      	nop
    f838:	2000072c 	.word	0x2000072c

0000f83c <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    f83c:	4919      	ldr	r1, [pc, #100]	; (f8a4 <sys_clock_timeout_handler+0x68>)
{
    f83e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f840:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    f842:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    f846:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    f848:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    f84c:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    f850:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    f852:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    f856:	d222      	bcs.n	f89e <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    f858:	4b13      	ldr	r3, [pc, #76]	; (f8a8 <sys_clock_timeout_handler+0x6c>)
    f85a:	681b      	ldr	r3, [r3, #0]
    f85c:	0a1a      	lsrs	r2, r3, #8
    f85e:	061b      	lsls	r3, r3, #24
    f860:	195e      	adds	r6, r3, r5
    f862:	4b12      	ldr	r3, [pc, #72]	; (f8ac <sys_clock_timeout_handler+0x70>)
    f864:	f142 0700 	adc.w	r7, r2, #0
    f868:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    f86c:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    f86e:	f002 f8e1 	bl	11a34 <sys_clock_announce>
    return p_reg->CC[ch];
    f872:	00a3      	lsls	r3, r4, #2
    f874:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    f878:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    f87c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    f880:	42aa      	cmp	r2, r5
    f882:	d10b      	bne.n	f89c <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    f884:	b91e      	cbnz	r6, f88e <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    f886:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    f88a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    f88e:	4b08      	ldr	r3, [pc, #32]	; (f8b0 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    f890:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    f894:	fa00 f404 	lsl.w	r4, r0, r4
    f898:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    f89c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    f89e:	2600      	movs	r6, #0
    f8a0:	e7e5      	b.n	f86e <sys_clock_timeout_handler+0x32>
    f8a2:	bf00      	nop
    f8a4:	200001e8 	.word	0x200001e8
    f8a8:	20000730 	.word	0x20000730
    f8ac:	200001d0 	.word	0x200001d0
    f8b0:	40011000 	.word	0x40011000

0000f8b4 <compare_int_unlock>:
	if (key) {
    f8b4:	b319      	cbz	r1, f8fe <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f8b6:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    f8ba:	2301      	movs	r3, #1
    f8bc:	4a10      	ldr	r2, [pc, #64]	; (f900 <compare_int_unlock+0x4c>)
    f8be:	4083      	lsls	r3, r0
    f8c0:	e852 1f00 	ldrex	r1, [r2]
    f8c4:	4319      	orrs	r1, r3
    f8c6:	e842 1c00 	strex	ip, r1, [r2]
    f8ca:	f1bc 0f00 	cmp.w	ip, #0
    f8ce:	d1f7      	bne.n	f8c0 <compare_int_unlock+0xc>
    f8d0:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    f8d4:	4a0b      	ldr	r2, [pc, #44]	; (f904 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    f8d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    f8da:	4083      	lsls	r3, r0
    f8dc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f8e0:	4b09      	ldr	r3, [pc, #36]	; (f908 <compare_int_unlock+0x54>)
    f8e2:	f3bf 8f5b 	dmb	ish
    f8e6:	681b      	ldr	r3, [r3, #0]
    f8e8:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    f8ec:	fa23 f000 	lsr.w	r0, r3, r0
    f8f0:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f8f2:	bf42      	ittt	mi
    f8f4:	4b05      	ldrmi	r3, [pc, #20]	; (f90c <compare_int_unlock+0x58>)
    f8f6:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    f8fa:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    f8fe:	4770      	bx	lr
    f900:	2000072c 	.word	0x2000072c
    f904:	40011000 	.word	0x40011000
    f908:	20000728 	.word	0x20000728
    f90c:	e000e100 	.word	0xe000e100

0000f910 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    f910:	4b0d      	ldr	r3, [pc, #52]	; (f948 <z_nrf_rtc_timer_read+0x38>)
    f912:	6818      	ldr	r0, [r3, #0]
    f914:	0a01      	lsrs	r1, r0, #8
    f916:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    f918:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    f91c:	4b0b      	ldr	r3, [pc, #44]	; (f94c <z_nrf_rtc_timer_read+0x3c>)
    f91e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    f922:	1818      	adds	r0, r3, r0
    f924:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    f928:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    f92c:	d20a      	bcs.n	f944 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    f92e:	4b08      	ldr	r3, [pc, #32]	; (f950 <z_nrf_rtc_timer_read+0x40>)
    f930:	e9d3 2300 	ldrd	r2, r3, [r3]
    f934:	4290      	cmp	r0, r2
    f936:	eb71 0303 	sbcs.w	r3, r1, r3
    f93a:	d203      	bcs.n	f944 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    f93c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    f940:	f141 0100 	adc.w	r1, r1, #0
}
    f944:	4770      	bx	lr
    f946:	bf00      	nop
    f948:	20000730 	.word	0x20000730
    f94c:	40011000 	.word	0x40011000
    f950:	200001d0 	.word	0x200001d0

0000f954 <compare_set>:
{
    f954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f958:	b085      	sub	sp, #20
    f95a:	4616      	mov	r6, r2
    f95c:	4698      	mov	r8, r3
    f95e:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    f960:	f7ff ff44 	bl	f7ec <compare_int_lock>
    f964:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    f966:	f7ff ffd3 	bl	f910 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    f96a:	42b0      	cmp	r0, r6
    f96c:	eb71 0308 	sbcs.w	r3, r1, r8
    f970:	d278      	bcs.n	fa64 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    f972:	4b46      	ldr	r3, [pc, #280]	; (fa8c <compare_set+0x138>)
    f974:	1a30      	subs	r0, r6, r0
    f976:	eb68 0101 	sbc.w	r1, r8, r1
    f97a:	4298      	cmp	r0, r3
    f97c:	f171 0300 	sbcs.w	r3, r1, #0
    f980:	f080 8081 	bcs.w	fa86 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    f984:	4b42      	ldr	r3, [pc, #264]	; (fa90 <compare_set+0x13c>)
    f986:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    f98a:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    f98e:	45d8      	cmp	r8, fp
    f990:	bf08      	it	eq
    f992:	4556      	cmpeq	r6, sl
    f994:	d051      	beq.n	fa3a <compare_set+0xe6>
    f996:	ea4f 0985 	mov.w	r9, r5, lsl #2
    f99a:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    f99e:	f105 0750 	add.w	r7, r5, #80	; 0x50
    f9a2:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    f9a6:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    f9a8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    f9ac:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f9b0:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    f9b2:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    f9b6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    f9ba:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    f9bc:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    f9c0:	4b34      	ldr	r3, [pc, #208]	; (fa94 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f9c2:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    f9c6:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    f9c8:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    f9cc:	1a40      	subs	r0, r0, r1
    f9ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    f9d2:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    f9d6:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    f9d8:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    f9dc:	d107      	bne.n	f9ee <compare_set+0x9a>
    f9de:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    f9e2:	2013      	movs	r0, #19
    f9e4:	f005 fa23 	bl	14e2e <z_impl_k_busy_wait>
    f9e8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    f9ec:	4b29      	ldr	r3, [pc, #164]	; (fa94 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    f9ee:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    f9f2:	eba4 000c 	sub.w	r0, r4, ip
    f9f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    f9fa:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    f9fe:	bf88      	it	hi
    fa00:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    fa02:	2000      	movs	r0, #0
    fa04:	6038      	str	r0, [r7, #0]
    fa06:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    fa08:	9801      	ldr	r0, [sp, #4]
    fa0a:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    fa0e:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    fa12:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    fa16:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    fa1a:	4281      	cmp	r1, r0
    fa1c:	d006      	beq.n	fa2c <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    fa1e:	1a20      	subs	r0, r4, r0
    fa20:	3802      	subs	r0, #2
    fa22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    fa26:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    fa2a:	d819      	bhi.n	fa60 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    fa2c:	1aa4      	subs	r4, r4, r2
    fa2e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    fa32:	eb14 0a06 	adds.w	sl, r4, r6
    fa36:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    fa3a:	4915      	ldr	r1, [pc, #84]	; (fa90 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    fa3c:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    fa3e:	012b      	lsls	r3, r5, #4
    fa40:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    fa44:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    fa48:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    fa4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    fa4c:	6053      	str	r3, [r2, #4]
	return ret;
    fa4e:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    fa50:	4628      	mov	r0, r5
    fa52:	9900      	ldr	r1, [sp, #0]
    fa54:	f7ff ff2e 	bl	f8b4 <compare_int_unlock>
}
    fa58:	4620      	mov	r0, r4
    fa5a:	b005      	add	sp, #20
    fa5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fa60:	4620      	mov	r0, r4
    fa62:	e7b1      	b.n	f9c8 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    fa64:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    fa66:	4a0c      	ldr	r2, [pc, #48]	; (fa98 <compare_set+0x144>)
    fa68:	f3bf 8f5b 	dmb	ish
    fa6c:	40ab      	lsls	r3, r5
    fa6e:	e852 1f00 	ldrex	r1, [r2]
    fa72:	4319      	orrs	r1, r3
    fa74:	e842 1000 	strex	r0, r1, [r2]
    fa78:	2800      	cmp	r0, #0
    fa7a:	d1f8      	bne.n	fa6e <compare_set+0x11a>
    fa7c:	f3bf 8f5b 	dmb	ish
    fa80:	46b2      	mov	sl, r6
    fa82:	46c3      	mov	fp, r8
    fa84:	e7d9      	b.n	fa3a <compare_set+0xe6>
			return -EINVAL;
    fa86:	f06f 0415 	mvn.w	r4, #21
    fa8a:	e7e1      	b.n	fa50 <compare_set+0xfc>
    fa8c:	01000001 	.word	0x01000001
    fa90:	200001d8 	.word	0x200001d8
    fa94:	40011000 	.word	0x40011000
    fa98:	20000728 	.word	0x20000728

0000fa9c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    fa9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    fa9e:	4b19      	ldr	r3, [pc, #100]	; (fb04 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    faa0:	4d19      	ldr	r5, [pc, #100]	; (fb08 <sys_clock_driver_init+0x6c>)
    faa2:	2400      	movs	r4, #0
    faa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    faa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    faac:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    fab0:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    fab4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    fab8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fabc:	4b13      	ldr	r3, [pc, #76]	; (fb0c <sys_clock_driver_init+0x70>)
    fabe:	2602      	movs	r6, #2
    fac0:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    fac4:	2101      	movs	r1, #1
    fac6:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    faca:	2011      	movs	r0, #17
    facc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    fad0:	4622      	mov	r2, r4
    fad2:	f7fd fd97 	bl	d604 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    fad6:	2011      	movs	r0, #17
    fad8:	f7fd fd76 	bl	d5c8 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    fadc:	4a0c      	ldr	r2, [pc, #48]	; (fb10 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    fade:	2301      	movs	r3, #1
    fae0:	60ab      	str	r3, [r5, #8]
    fae2:	602b      	str	r3, [r5, #0]
    fae4:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    fae6:	4b0b      	ldr	r3, [pc, #44]	; (fb14 <sys_clock_driver_init+0x78>)
    fae8:	4a0b      	ldr	r2, [pc, #44]	; (fb18 <sys_clock_driver_init+0x7c>)
    faea:	9300      	str	r3, [sp, #0]
    faec:	9401      	str	r4, [sp, #4]
    faee:	2300      	movs	r3, #0
    faf0:	4620      	mov	r0, r4
    faf2:	f7ff ff2f 	bl	f954 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    faf6:	4630      	mov	r0, r6
    faf8:	f7ff f938 	bl	ed6c <z_nrf_clock_control_lf_on>

	return 0;
}
    fafc:	4620      	mov	r0, r4
    fafe:	b002      	add	sp, #8
    fb00:	bd70      	pop	{r4, r5, r6, pc}
    fb02:	bf00      	nop
    fb04:	200001d8 	.word	0x200001d8
    fb08:	40011000 	.word	0x40011000
    fb0c:	e000e100 	.word	0xe000e100
    fb10:	2000072c 	.word	0x2000072c
    fb14:	0000f83d 	.word	0x0000f83d
    fb18:	007fffff 	.word	0x007fffff

0000fb1c <rtc_nrf_isr>:
{
    fb1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    fb20:	4c35      	ldr	r4, [pc, #212]	; (fbf8 <rtc_nrf_isr+0xdc>)
    fb22:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    fb26:	079a      	lsls	r2, r3, #30
    fb28:	d50b      	bpl.n	fb42 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fb2a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    fb2e:	b143      	cbz	r3, fb42 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    fb30:	4a32      	ldr	r2, [pc, #200]	; (fbfc <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    fb32:	2300      	movs	r3, #0
    fb34:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    fb38:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    fb3c:	6813      	ldr	r3, [r2, #0]
    fb3e:	3301      	adds	r3, #1
    fb40:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    fb42:	f04f 0320 	mov.w	r3, #32
    fb46:	f3ef 8211 	mrs	r2, BASEPRI
    fb4a:	f383 8812 	msr	BASEPRI_MAX, r3
    fb4e:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    fb52:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    fb56:	03db      	lsls	r3, r3, #15
    fb58:	d512      	bpl.n	fb80 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    fb5a:	f3bf 8f5b 	dmb	ish
    fb5e:	4b28      	ldr	r3, [pc, #160]	; (fc00 <rtc_nrf_isr+0xe4>)
    fb60:	e853 1f00 	ldrex	r1, [r3]
    fb64:	f021 0001 	bic.w	r0, r1, #1
    fb68:	e843 0600 	strex	r6, r0, [r3]
    fb6c:	2e00      	cmp	r6, #0
    fb6e:	d1f7      	bne.n	fb60 <rtc_nrf_isr+0x44>
    fb70:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    fb74:	2900      	cmp	r1, #0
    fb76:	d136      	bne.n	fbe6 <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fb78:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    fb7c:	2b00      	cmp	r3, #0
    fb7e:	d132      	bne.n	fbe6 <rtc_nrf_isr+0xca>
{
    fb80:	2300      	movs	r3, #0
	__asm__ volatile(
    fb82:	f382 8811 	msr	BASEPRI, r2
    fb86:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    fb8a:	b34b      	cbz	r3, fbe0 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
    fb8c:	f7ff fec0 	bl	f910 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    fb90:	f04f 0320 	mov.w	r3, #32
    fb94:	f3ef 8c11 	mrs	ip, BASEPRI
    fb98:	f383 8812 	msr	BASEPRI_MAX, r3
    fb9c:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    fba0:	4b18      	ldr	r3, [pc, #96]	; (fc04 <rtc_nrf_isr+0xe8>)
    fba2:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    fba6:	42b0      	cmp	r0, r6
    fba8:	eb71 0207 	sbcs.w	r2, r1, r7
    fbac:	f04f 0200 	mov.w	r2, #0
    fbb0:	d320      	bcc.n	fbf4 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    fbb2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    fbb6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    fbba:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    fbbe:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    fbc2:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    fbc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    fbc8:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    fbcc:	f38c 8811 	msr	BASEPRI, ip
    fbd0:	f3bf 8f6f 	isb	sy
		if (handler) {
    fbd4:	b121      	cbz	r1, fbe0 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
    fbd6:	9500      	str	r5, [sp, #0]
    fbd8:	4632      	mov	r2, r6
    fbda:	463b      	mov	r3, r7
    fbdc:	2000      	movs	r0, #0
    fbde:	4788      	blx	r1
}
    fbe0:	b003      	add	sp, #12
    fbe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    fbe6:	2300      	movs	r3, #0
    fbe8:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    fbec:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    fbf0:	2301      	movs	r3, #1
}
    fbf2:	e7c6      	b.n	fb82 <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    fbf4:	4611      	mov	r1, r2
    fbf6:	e7e9      	b.n	fbcc <rtc_nrf_isr+0xb0>
    fbf8:	40011000 	.word	0x40011000
    fbfc:	20000730 	.word	0x20000730
    fc00:	20000728 	.word	0x20000728
    fc04:	200001d8 	.word	0x200001d8

0000fc08 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    fc08:	1c43      	adds	r3, r0, #1
{
    fc0a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    fc0c:	d021      	beq.n	fc52 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    fc0e:	2801      	cmp	r0, #1
    fc10:	dd21      	ble.n	fc56 <sys_clock_set_timeout+0x4e>
    fc12:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    fc16:	da20      	bge.n	fc5a <sys_clock_set_timeout+0x52>
    fc18:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    fc1a:	f7ff fe79 	bl	f910 <z_nrf_rtc_timer_read>
    fc1e:	4b10      	ldr	r3, [pc, #64]	; (fc60 <sys_clock_set_timeout+0x58>)
    fc20:	e9d3 1300 	ldrd	r1, r3, [r3]
    fc24:	1a40      	subs	r0, r0, r1
		ticks = 0;
    fc26:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    fc2a:	bf28      	it	cs
    fc2c:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    fc2e:	3001      	adds	r0, #1
    fc30:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    fc32:	480c      	ldr	r0, [pc, #48]	; (fc64 <sys_clock_set_timeout+0x5c>)
    fc34:	4282      	cmp	r2, r0
    fc36:	bf28      	it	cs
    fc38:	4602      	movcs	r2, r0
    fc3a:	1852      	adds	r2, r2, r1
    fc3c:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    fc40:	4909      	ldr	r1, [pc, #36]	; (fc68 <sys_clock_set_timeout+0x60>)
    fc42:	9001      	str	r0, [sp, #4]
    fc44:	9100      	str	r1, [sp, #0]
    fc46:	f143 0300 	adc.w	r3, r3, #0
    fc4a:	f7ff fe83 	bl	f954 <compare_set>
}
    fc4e:	b002      	add	sp, #8
    fc50:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    fc52:	4804      	ldr	r0, [pc, #16]	; (fc64 <sys_clock_set_timeout+0x5c>)
    fc54:	e7e0      	b.n	fc18 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    fc56:	2400      	movs	r4, #0
    fc58:	e7df      	b.n	fc1a <sys_clock_set_timeout+0x12>
    fc5a:	4c02      	ldr	r4, [pc, #8]	; (fc64 <sys_clock_set_timeout+0x5c>)
    fc5c:	e7dd      	b.n	fc1a <sys_clock_set_timeout+0x12>
    fc5e:	bf00      	nop
    fc60:	200001e8 	.word	0x200001e8
    fc64:	007fffff 	.word	0x007fffff
    fc68:	0000f83d 	.word	0x0000f83d

0000fc6c <sys_clock_elapsed>:
{
    fc6c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    fc6e:	f7ff fe4f 	bl	f910 <z_nrf_rtc_timer_read>
    fc72:	4b02      	ldr	r3, [pc, #8]	; (fc7c <sys_clock_elapsed+0x10>)
    fc74:	681b      	ldr	r3, [r3, #0]
}
    fc76:	1ac0      	subs	r0, r0, r3
    fc78:	bd08      	pop	{r3, pc}
    fc7a:	bf00      	nop
    fc7c:	200001e8 	.word	0x200001e8

0000fc80 <nrf_gpio_pin_clear>:
    *p_pin = pin_number & 0x1F;
    fc80:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    fc84:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    fc86:	2801      	cmp	r0, #1
    fc88:	4b04      	ldr	r3, [pc, #16]	; (fc9c <nrf_gpio_pin_clear+0x1c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    fc8a:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    fc8e:	bf18      	it	ne
    fc90:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    fc94:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    fc96:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
    fc9a:	4770      	bx	lr
    fc9c:	50000300 	.word	0x50000300

0000fca0 <nrf_pin_configure>:
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    fca0:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    fca4:	2b00      	cmp	r3, #0
{
    fca6:	b530      	push	{r4, r5, lr}
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    fca8:	bf07      	ittee	eq
    fcaa:	4614      	moveq	r4, r2
    fcac:	460d      	moveq	r5, r1
    fcae:	2401      	movne	r4, #1
    fcb0:	2500      	movne	r5, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    fcb2:	f3c0 1281 	ubfx	r2, r0, #6, #2
    *p_pin = pin_number & 0x1F;
    fcb6:	f000 011f 	and.w	r1, r0, #31
        case 1: return NRF_P1;
    fcba:	f010 0f20 	tst.w	r0, #32
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    fcbe:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    fcc2:	ea40 0282 	orr.w	r2, r0, r2, lsl #2
        case 1: return NRF_P1;
    fcc6:	4b06      	ldr	r3, [pc, #24]	; (fce0 <nrf_pin_configure+0x40>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    fcc8:	ea42 0205 	orr.w	r2, r2, r5
        case 1: return NRF_P1;
    fccc:	bf08      	it	eq
    fcce:	f04f 43a0 	moveq.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    fcd2:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    fcd6:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    fcda:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    fcde:	bd30      	pop	{r4, r5, pc}
    fce0:	50000300 	.word	0x50000300

0000fce4 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
    fce4:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    fce8:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    fcea:	2801      	cmp	r0, #1
    fcec:	4b04      	ldr	r3, [pc, #16]	; (fd00 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    fcee:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    fcf2:	bf18      	it	ne
    fcf4:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    fcf8:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    fcfa:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
    fcfe:	4770      	bx	lr
    fd00:	50000300 	.word	0x50000300

0000fd04 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    fd04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    fd08:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    fd0c:	2a08      	cmp	r2, #8
    fd0e:	d106      	bne.n	fd1e <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    fd10:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    fd14:	2b05      	cmp	r3, #5
    fd16:	d802      	bhi.n	fd1e <nrf52_errata_103+0x1a>
    fd18:	4a02      	ldr	r2, [pc, #8]	; (fd24 <nrf52_errata_103+0x20>)
    fd1a:	5cd0      	ldrb	r0, [r2, r3]
    fd1c:	4770      	bx	lr
        return false;
    fd1e:	2000      	movs	r0, #0
}
    fd20:	4770      	bx	lr
    fd22:	bf00      	nop
    fd24:	000155c6 	.word	0x000155c6

0000fd28 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    fd28:	4a02      	ldr	r2, [pc, #8]	; (fd34 <nvmc_wait+0xc>)
    fd2a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    fd2e:	2b00      	cmp	r3, #0
    fd30:	d0fb      	beq.n	fd2a <nvmc_wait+0x2>
}
    fd32:	4770      	bx	lr
    fd34:	4001e000 	.word	0x4001e000

0000fd38 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    fd38:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    fd3a:	f004 f810 	bl	13d5e <nrf52_errata_136>
    fd3e:	b140      	cbz	r0, fd52 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    fd40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    fd44:	2200      	movs	r2, #0
    fd46:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    fd4a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    fd4e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    fd52:	f004 f804 	bl	13d5e <nrf52_errata_136>
    fd56:	2800      	cmp	r0, #0
    fd58:	d046      	beq.n	fde8 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    fd5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    fd5e:	4b60      	ldr	r3, [pc, #384]	; (fee0 <SystemInit+0x1a8>)
    fd60:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    fd64:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    fd68:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    fd6c:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    fd70:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    fd74:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    fd78:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    fd7c:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    fd80:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    fd84:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    fd88:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    fd8c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    fd90:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    fd94:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    fd98:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    fd9c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    fda0:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    fda4:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    fda8:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    fdac:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    fdb0:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    fdb4:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    fdb8:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    fdbc:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    fdc0:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    fdc4:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    fdc8:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    fdcc:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    fdd0:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    fdd4:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    fdd8:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    fddc:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    fde0:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    fde4:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    fde8:	f7ff ff8c 	bl	fd04 <nrf52_errata_103>
    fdec:	b118      	cbz	r0, fdf6 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    fdee:	4b3d      	ldr	r3, [pc, #244]	; (fee4 <SystemInit+0x1ac>)
    fdf0:	4a3d      	ldr	r2, [pc, #244]	; (fee8 <SystemInit+0x1b0>)
    fdf2:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    fdf6:	f7ff ff85 	bl	fd04 <nrf52_errata_103>
    fdfa:	b118      	cbz	r0, fe04 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    fdfc:	4b3b      	ldr	r3, [pc, #236]	; (feec <SystemInit+0x1b4>)
    fdfe:	22fb      	movs	r2, #251	; 0xfb
    fe00:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    fe04:	f7ff ff7e 	bl	fd04 <nrf52_errata_103>
    fe08:	b170      	cbz	r0, fe28 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    fe0a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    fe0e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    fe12:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    fe16:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    fe1a:	f022 020f 	bic.w	r2, r2, #15
    fe1e:	f003 030f 	and.w	r3, r3, #15
    fe22:	4313      	orrs	r3, r2
    fe24:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    fe28:	f7ff ff6c 	bl	fd04 <nrf52_errata_103>
    fe2c:	b120      	cbz	r0, fe38 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    fe2e:	4b30      	ldr	r3, [pc, #192]	; (fef0 <SystemInit+0x1b8>)
    fe30:	f44f 7200 	mov.w	r2, #512	; 0x200
    fe34:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    fe38:	f003 ff91 	bl	13d5e <nrf52_errata_136>
    fe3c:	b148      	cbz	r0, fe52 <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    fe3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    fe42:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    fe46:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    fe48:	bf44      	itt	mi
    fe4a:	f06f 0201 	mvnmi.w	r2, #1
    fe4e:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    fe52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    fe56:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    fe5a:	2a08      	cmp	r2, #8
    fe5c:	d10e      	bne.n	fe7c <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    fe5e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    fe62:	2b05      	cmp	r3, #5
    fe64:	d802      	bhi.n	fe6c <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    fe66:	4a23      	ldr	r2, [pc, #140]	; (fef4 <SystemInit+0x1bc>)
    fe68:	5cd3      	ldrb	r3, [r2, r3]
    fe6a:	b13b      	cbz	r3, fe7c <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    fe6c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    fe70:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    fe74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    fe78:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    fe7c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    fe80:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    fe84:	2a00      	cmp	r2, #0
    fe86:	db03      	blt.n	fe90 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    fe88:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    fe8c:	2b00      	cmp	r3, #0
    fe8e:	da22      	bge.n	fed6 <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    fe90:	4919      	ldr	r1, [pc, #100]	; (fef8 <SystemInit+0x1c0>)
    fe92:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    fe94:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    fe98:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    fe9c:	2412      	movs	r4, #18
    nvmc_wait();
    fe9e:	f7ff ff43 	bl	fd28 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    fea2:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    fea6:	f7ff ff3f 	bl	fd28 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    feaa:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    feae:	f7ff ff3b 	bl	fd28 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    feb2:	2300      	movs	r3, #0
    feb4:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    feb8:	f7ff ff36 	bl	fd28 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    febc:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    fec0:	490e      	ldr	r1, [pc, #56]	; (fefc <SystemInit+0x1c4>)
    fec2:	4b0f      	ldr	r3, [pc, #60]	; (ff00 <SystemInit+0x1c8>)
    fec4:	68ca      	ldr	r2, [r1, #12]
    fec6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    feca:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    fecc:	60cb      	str	r3, [r1, #12]
    fece:	f3bf 8f4f 	dsb	sy
    __NOP();
    fed2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    fed4:	e7fd      	b.n	fed2 <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    fed6:	4b0b      	ldr	r3, [pc, #44]	; (ff04 <SystemInit+0x1cc>)
    fed8:	4a0b      	ldr	r2, [pc, #44]	; (ff08 <SystemInit+0x1d0>)
    feda:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    fedc:	bd10      	pop	{r4, pc}
    fede:	bf00      	nop
    fee0:	4000c000 	.word	0x4000c000
    fee4:	40005000 	.word	0x40005000
    fee8:	00038148 	.word	0x00038148
    feec:	4000f000 	.word	0x4000f000
    fef0:	40029000 	.word	0x40029000
    fef4:	000155c0 	.word	0x000155c0
    fef8:	4001e000 	.word	0x4001e000
    fefc:	e000ed00 	.word	0xe000ed00
    ff00:	05fa0004 	.word	0x05fa0004
    ff04:	200000a0 	.word	0x200000a0
    ff08:	03d09000 	.word	0x03d09000

0000ff0c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    ff0c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    ff0e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    ff10:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    ff12:	fab2 f382 	clz	r3, r2
    ff16:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    ff1a:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    ff1c:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    ff1e:	d014      	beq.n	ff4a <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    ff20:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    ff24:	fa05 f303 	lsl.w	r3, r5, r3
    ff28:	ea22 0303 	bic.w	r3, r2, r3
    ff2c:	e850 6f00 	ldrex	r6, [r0]
    ff30:	4296      	cmp	r6, r2
    ff32:	d104      	bne.n	ff3e <nrfx_flag32_alloc+0x32>
    ff34:	e840 3c00 	strex	ip, r3, [r0]
    ff38:	f1bc 0f00 	cmp.w	ip, #0
    ff3c:	d1f6      	bne.n	ff2c <nrfx_flag32_alloc+0x20>
    ff3e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    ff42:	d1e5      	bne.n	ff10 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    ff44:	4802      	ldr	r0, [pc, #8]	; (ff50 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    ff46:	700c      	strb	r4, [r1, #0]
}
    ff48:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    ff4a:	4802      	ldr	r0, [pc, #8]	; (ff54 <nrfx_flag32_alloc+0x48>)
    ff4c:	e7fc      	b.n	ff48 <nrfx_flag32_alloc+0x3c>
    ff4e:	bf00      	nop
    ff50:	0bad0000 	.word	0x0bad0000
    ff54:	0bad0002 	.word	0x0bad0002

0000ff58 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    ff58:	6803      	ldr	r3, [r0, #0]
    ff5a:	40cb      	lsrs	r3, r1
    ff5c:	07db      	lsls	r3, r3, #31
{
    ff5e:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    ff60:	d415      	bmi.n	ff8e <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    ff62:	2301      	movs	r3, #1
    ff64:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    ff68:	6803      	ldr	r3, [r0, #0]
    ff6a:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    ff6e:	ea41 0203 	orr.w	r2, r1, r3
    ff72:	e850 4f00 	ldrex	r4, [r0]
    ff76:	429c      	cmp	r4, r3
    ff78:	d104      	bne.n	ff84 <nrfx_flag32_free+0x2c>
    ff7a:	e840 2c00 	strex	ip, r2, [r0]
    ff7e:	f1bc 0f00 	cmp.w	ip, #0
    ff82:	d1f6      	bne.n	ff72 <nrfx_flag32_free+0x1a>
    ff84:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    ff88:	d1ee      	bne.n	ff68 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    ff8a:	4802      	ldr	r0, [pc, #8]	; (ff94 <nrfx_flag32_free+0x3c>)
}
    ff8c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    ff8e:	4802      	ldr	r0, [pc, #8]	; (ff98 <nrfx_flag32_free+0x40>)
    ff90:	e7fc      	b.n	ff8c <nrfx_flag32_free+0x34>
    ff92:	bf00      	nop
    ff94:	0bad0000 	.word	0x0bad0000
    ff98:	0bad0004 	.word	0x0bad0004

0000ff9c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    ff9c:	4b04      	ldr	r3, [pc, #16]	; (ffb0 <nrfx_clock_init+0x14>)
    ff9e:	791a      	ldrb	r2, [r3, #4]
    ffa0:	b922      	cbnz	r2, ffac <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    ffa2:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    ffa4:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    ffa6:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    ffa8:	4802      	ldr	r0, [pc, #8]	; (ffb4 <nrfx_clock_init+0x18>)
    ffaa:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    ffac:	4802      	ldr	r0, [pc, #8]	; (ffb8 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    ffae:	4770      	bx	lr
    ffb0:	20000734 	.word	0x20000734
    ffb4:	0bad0000 	.word	0x0bad0000
    ffb8:	0bad000c 	.word	0x0bad000c

0000ffbc <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    ffbc:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    ffbe:	b110      	cbz	r0, ffc6 <nrfx_clock_stop+0xa>
    ffc0:	2801      	cmp	r0, #1
    ffc2:	d017      	beq.n	fff4 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    ffc4:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    ffc6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    ffca:	2302      	movs	r3, #2
    ffcc:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ffd0:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    ffd4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ffd8:	2301      	movs	r3, #1
    ffda:	60e3      	str	r3, [r4, #12]
    ffdc:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    ffe0:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    ffe4:	03db      	lsls	r3, r3, #15
    ffe6:	d5ed      	bpl.n	ffc4 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    ffe8:	2001      	movs	r0, #1
    ffea:	f003 fec2 	bl	13d72 <nrfx_busy_wait>
    ffee:	3d01      	subs	r5, #1
    fff0:	d1f6      	bne.n	ffe0 <nrfx_clock_stop+0x24>
    fff2:	e7e7      	b.n	ffc4 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
    fff4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fff8:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
    fffa:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fffe:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   10002:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10006:	6060      	str	r0, [r4, #4]
   10008:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1000c:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   10010:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   10014:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   10016:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1001a:	d505      	bpl.n	10028 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   1001c:	b123      	cbz	r3, 10028 <nrfx_clock_stop+0x6c>
   1001e:	2001      	movs	r0, #1
   10020:	f003 fea7 	bl	13d72 <nrfx_busy_wait>
   10024:	3d01      	subs	r5, #1
   10026:	d1f1      	bne.n	1000c <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   10028:	4b01      	ldr	r3, [pc, #4]	; (10030 <nrfx_clock_stop+0x74>)
   1002a:	2200      	movs	r2, #0
   1002c:	715a      	strb	r2, [r3, #5]
   1002e:	e7c9      	b.n	ffc4 <nrfx_clock_stop+0x8>
   10030:	20000734 	.word	0x20000734

00010034 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   10034:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   10038:	b510      	push	{r4, lr}
   1003a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1003e:	b16a      	cbz	r2, 1005c <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10040:	2200      	movs	r2, #0
   10042:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   10046:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   1004a:	2201      	movs	r2, #1
   1004c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   10050:	4b11      	ldr	r3, [pc, #68]	; (10098 <nrfx_power_clock_irq_handler+0x64>)
   10052:	7958      	ldrb	r0, [r3, #5]
   10054:	b910      	cbnz	r0, 1005c <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   10056:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   10058:	681b      	ldr	r3, [r3, #0]
   1005a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1005c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10060:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   10064:	b172      	cbz	r2, 10084 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10066:	2200      	movs	r2, #0
   10068:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1006c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   10070:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   10074:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   10078:	0792      	lsls	r2, r2, #30
   1007a:	d104      	bne.n	10086 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1007c:	2201      	movs	r2, #1
   1007e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10082:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   10084:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   10086:	2202      	movs	r2, #2
   10088:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1008c:	4b02      	ldr	r3, [pc, #8]	; (10098 <nrfx_power_clock_irq_handler+0x64>)
}
   1008e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   10092:	681b      	ldr	r3, [r3, #0]
   10094:	2001      	movs	r0, #1
   10096:	4718      	bx	r3
   10098:	20000734 	.word	0x20000734

0001009c <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1009c:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1009e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   100a2:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   100a4:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   100a6:	6002      	str	r2, [r0, #0]
}
   100a8:	4802      	ldr	r0, [pc, #8]	; (100b4 <nrf_gpio_pin_port_decode+0x18>)
   100aa:	bf18      	it	ne
   100ac:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   100b0:	4770      	bx	lr
   100b2:	bf00      	nop
   100b4:	50000300 	.word	0x50000300

000100b8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   100b8:	4b03      	ldr	r3, [pc, #12]	; (100c8 <pin_in_use_by_te+0x10>)
   100ba:	3008      	adds	r0, #8
   100bc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   100c0:	f3c0 1040 	ubfx	r0, r0, #5, #1
   100c4:	4770      	bx	lr
   100c6:	bf00      	nop
   100c8:	200000a4 	.word	0x200000a4

000100cc <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   100cc:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   100ce:	f100 0308 	add.w	r3, r0, #8
   100d2:	4c0c      	ldr	r4, [pc, #48]	; (10104 <call_handler+0x38>)
   100d4:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   100d8:	05da      	lsls	r2, r3, #23
{
   100da:	4605      	mov	r5, r0
   100dc:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   100de:	d507      	bpl.n	100f0 <call_handler+0x24>
   100e0:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   100e4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   100e8:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   100ec:	6852      	ldr	r2, [r2, #4]
   100ee:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   100f0:	68a3      	ldr	r3, [r4, #8]
   100f2:	b12b      	cbz	r3, 10100 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   100f4:	68e2      	ldr	r2, [r4, #12]
   100f6:	4631      	mov	r1, r6
   100f8:	4628      	mov	r0, r5
    }
}
   100fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   100fe:	4718      	bx	r3
}
   10100:	bd70      	pop	{r4, r5, r6, pc}
   10102:	bf00      	nop
   10104:	200000a4 	.word	0x200000a4

00010108 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   10108:	4a12      	ldr	r2, [pc, #72]	; (10154 <release_handler+0x4c>)
   1010a:	3008      	adds	r0, #8
{
   1010c:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1010e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   10112:	05d9      	lsls	r1, r3, #23
   10114:	d51b      	bpl.n	1014e <release_handler+0x46>
   10116:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1011a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1011e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   10122:	f102 0410 	add.w	r4, r2, #16
   10126:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   10128:	f834 3b02 	ldrh.w	r3, [r4], #2
   1012c:	f413 7f80 	tst.w	r3, #256	; 0x100
   10130:	d003      	beq.n	1013a <release_handler+0x32>
   10132:	f3c3 2343 	ubfx	r3, r3, #9, #4
   10136:	4299      	cmp	r1, r3
   10138:	d009      	beq.n	1014e <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1013a:	3001      	adds	r0, #1
   1013c:	2830      	cmp	r0, #48	; 0x30
   1013e:	d1f3      	bne.n	10128 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   10140:	2300      	movs	r3, #0
   10142:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   10146:	4804      	ldr	r0, [pc, #16]	; (10158 <release_handler+0x50>)
}
   10148:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1014a:	f7ff bf05 	b.w	ff58 <nrfx_flag32_free>
}
   1014e:	bc10      	pop	{r4}
   10150:	4770      	bx	lr
   10152:	bf00      	nop
   10154:	200000a4 	.word	0x200000a4
   10158:	20000118 	.word	0x20000118

0001015c <pin_handler_trigger_uninit>:
{
   1015c:	b538      	push	{r3, r4, r5, lr}
   1015e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   10160:	f7ff ffaa 	bl	100b8 <pin_in_use_by_te>
   10164:	4c09      	ldr	r4, [pc, #36]	; (1018c <pin_handler_trigger_uninit+0x30>)
   10166:	f102 0508 	add.w	r5, r2, #8
   1016a:	b140      	cbz	r0, 1017e <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1016c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   10170:	4907      	ldr	r1, [pc, #28]	; (10190 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   10172:	0b5b      	lsrs	r3, r3, #13
   10174:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   10178:	2000      	movs	r0, #0
   1017a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   1017e:	4610      	mov	r0, r2
   10180:	f7ff ffc2 	bl	10108 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   10184:	2300      	movs	r3, #0
   10186:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1018a:	bd38      	pop	{r3, r4, r5, pc}
   1018c:	200000a4 	.word	0x200000a4
   10190:	40006000 	.word	0x40006000

00010194 <nrfx_gpiote_input_configure>:
{
   10194:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   10198:	4604      	mov	r4, r0
   1019a:	4617      	mov	r7, r2
   1019c:	461d      	mov	r5, r3
    if (p_input_config)
   1019e:	b321      	cbz	r1, 101ea <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   101a0:	4e4e      	ldr	r6, [pc, #312]	; (102dc <nrfx_gpiote_input_configure+0x148>)
   101a2:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   101a6:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   101aa:	079b      	lsls	r3, r3, #30
   101ac:	d506      	bpl.n	101bc <nrfx_gpiote_input_configure+0x28>
   101ae:	f7ff ff83 	bl	100b8 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
   101b2:	b118      	cbz	r0, 101bc <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
   101b4:	484a      	ldr	r0, [pc, #296]	; (102e0 <nrfx_gpiote_input_configure+0x14c>)
}
   101b6:	b004      	add	sp, #16
   101b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   101bc:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   101be:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   101c2:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   101c6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   101ca:	f10d 020f 	add.w	r2, sp, #15
   101ce:	460b      	mov	r3, r1
   101d0:	4620      	mov	r0, r4
   101d2:	f10d 010e 	add.w	r1, sp, #14
   101d6:	f003 fe04 	bl	13de2 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   101da:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   101de:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   101e2:	f043 0301 	orr.w	r3, r3, #1
   101e6:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
   101ea:	b197      	cbz	r7, 10212 <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   101ec:	4b3b      	ldr	r3, [pc, #236]	; (102dc <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   101ee:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   101f0:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   101f2:	f104 0008 	add.w	r0, r4, #8
   101f6:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   101fa:	078f      	lsls	r7, r1, #30
   101fc:	d50c      	bpl.n	10218 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
   101fe:	2a00      	cmp	r2, #0
   10200:	d1d8      	bne.n	101b4 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   10202:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   10206:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1020a:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   1020e:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   10212:	bbcd      	cbnz	r5, 10288 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
   10214:	4833      	ldr	r0, [pc, #204]	; (102e4 <nrfx_gpiote_input_configure+0x150>)
   10216:	e7ce      	b.n	101b6 <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   10218:	f021 0120 	bic.w	r1, r1, #32
   1021c:	04c9      	lsls	r1, r1, #19
   1021e:	0cc9      	lsrs	r1, r1, #19
   10220:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   10224:	2a00      	cmp	r2, #0
   10226:	d0ec      	beq.n	10202 <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
   10228:	2e03      	cmp	r6, #3
   1022a:	d8c3      	bhi.n	101b4 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1022c:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1022e:	b92e      	cbnz	r6, 1023c <nrfx_gpiote_input_configure+0xa8>
   10230:	4a2d      	ldr	r2, [pc, #180]	; (102e8 <nrfx_gpiote_input_configure+0x154>)
   10232:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   10236:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   1023a:	e7e2      	b.n	10202 <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1023c:	00ba      	lsls	r2, r7, #2
   1023e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   10242:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   10246:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   1024a:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   1024e:	f02c 0c03 	bic.w	ip, ip, #3
   10252:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   10256:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   1025a:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   1025e:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   10262:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   10266:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1026a:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   1026e:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
   10272:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   10276:	ea4c 0c0e 	orr.w	ip, ip, lr
   1027a:	f041 0120 	orr.w	r1, r1, #32
   1027e:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   10282:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   10286:	e7bc      	b.n	10202 <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   10288:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1028c:	4620      	mov	r0, r4
   1028e:	f7ff ff3b 	bl	10108 <release_handler>
    if (!handler)
   10292:	2e00      	cmp	r6, #0
   10294:	d0be      	beq.n	10214 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   10296:	4d11      	ldr	r5, [pc, #68]	; (102dc <nrfx_gpiote_input_configure+0x148>)
   10298:	682b      	ldr	r3, [r5, #0]
   1029a:	429e      	cmp	r6, r3
   1029c:	d104      	bne.n	102a8 <nrfx_gpiote_input_configure+0x114>
   1029e:	686b      	ldr	r3, [r5, #4]
   102a0:	429f      	cmp	r7, r3
   102a2:	d101      	bne.n	102a8 <nrfx_gpiote_input_configure+0x114>
   102a4:	2200      	movs	r2, #0
   102a6:	e00a      	b.n	102be <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   102a8:	4810      	ldr	r0, [pc, #64]	; (102ec <nrfx_gpiote_input_configure+0x158>)
   102aa:	f10d 010f 	add.w	r1, sp, #15
   102ae:	f7ff fe2d 	bl	ff0c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   102b2:	4b0c      	ldr	r3, [pc, #48]	; (102e4 <nrfx_gpiote_input_configure+0x150>)
   102b4:	4298      	cmp	r0, r3
   102b6:	f47f af7e 	bne.w	101b6 <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
   102ba:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   102be:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   102c2:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   102c6:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   102c8:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   102ca:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   102ce:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   102d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   102d6:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   102da:	e79b      	b.n	10214 <nrfx_gpiote_input_configure+0x80>
   102dc:	200000a4 	.word	0x200000a4
   102e0:	0bad0004 	.word	0x0bad0004
   102e4:	0bad0000 	.word	0x0bad0000
   102e8:	40006000 	.word	0x40006000
   102ec:	20000118 	.word	0x20000118

000102f0 <nrfx_gpiote_output_configure>:
{
   102f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   102f2:	4604      	mov	r4, r0
   102f4:	b085      	sub	sp, #20
   102f6:	4615      	mov	r5, r2
    if (p_config)
   102f8:	b319      	cbz	r1, 10342 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   102fa:	4e33      	ldr	r6, [pc, #204]	; (103c8 <nrfx_gpiote_output_configure+0xd8>)
   102fc:	f100 0708 	add.w	r7, r0, #8
   10300:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   10304:	0793      	lsls	r3, r2, #30
   10306:	d403      	bmi.n	10310 <nrfx_gpiote_output_configure+0x20>
   10308:	f7ff fed6 	bl	100b8 <pin_in_use_by_te>
   1030c:	2800      	cmp	r0, #0
   1030e:	d158      	bne.n	103c2 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   10310:	f012 0f1c 	tst.w	r2, #28
   10314:	d002      	beq.n	1031c <nrfx_gpiote_output_configure+0x2c>
   10316:	784b      	ldrb	r3, [r1, #1]
   10318:	2b01      	cmp	r3, #1
   1031a:	d052      	beq.n	103c2 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1031c:	2301      	movs	r3, #1
   1031e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   10322:	2300      	movs	r3, #0
   10324:	e9cd 1300 	strd	r1, r3, [sp]
   10328:	1c4a      	adds	r2, r1, #1
   1032a:	1c8b      	adds	r3, r1, #2
   1032c:	4620      	mov	r0, r4
   1032e:	f10d 010f 	add.w	r1, sp, #15
   10332:	f003 fd56 	bl	13de2 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   10336:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   1033a:	f043 0303 	orr.w	r3, r3, #3
   1033e:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   10342:	b915      	cbnz	r5, 1034a <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   10344:	4821      	ldr	r0, [pc, #132]	; (103cc <nrfx_gpiote_output_configure+0xdc>)
}
   10346:	b005      	add	sp, #20
   10348:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1034a:	4e1f      	ldr	r6, [pc, #124]	; (103c8 <nrfx_gpiote_output_configure+0xd8>)
   1034c:	f104 0708 	add.w	r7, r4, #8
   10350:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   10354:	0783      	lsls	r3, r0, #30
   10356:	d534      	bpl.n	103c2 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   10358:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   1035c:	4661      	mov	r1, ip
   1035e:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   10360:	f020 0020 	bic.w	r0, r0, #32
   10364:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   10368:	04c0      	lsls	r0, r0, #19
   1036a:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   1036e:	0cc0      	lsrs	r0, r0, #19
   10370:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   10374:	2300      	movs	r3, #0
   10376:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1037a:	786a      	ldrb	r2, [r5, #1]
   1037c:	2a00      	cmp	r2, #0
   1037e:	d0e1      	beq.n	10344 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   10380:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   10384:	78ad      	ldrb	r5, [r5, #2]
   10386:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   1038a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1038e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   10392:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   10396:	0223      	lsls	r3, r4, #8
   10398:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1039c:	0412      	lsls	r2, r2, #16
   1039e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   103a2:	ea43 030e 	orr.w	r3, r3, lr
   103a6:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   103a8:	052a      	lsls	r2, r5, #20
   103aa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   103ae:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   103b2:	4313      	orrs	r3, r2
   103b4:	f040 0020 	orr.w	r0, r0, #32
   103b8:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   103bc:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   103c0:	e7c0      	b.n	10344 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
   103c2:	4803      	ldr	r0, [pc, #12]	; (103d0 <nrfx_gpiote_output_configure+0xe0>)
   103c4:	e7bf      	b.n	10346 <nrfx_gpiote_output_configure+0x56>
   103c6:	bf00      	nop
   103c8:	200000a4 	.word	0x200000a4
   103cc:	0bad0000 	.word	0x0bad0000
   103d0:	0bad0004 	.word	0x0bad0004

000103d4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   103d4:	4b01      	ldr	r3, [pc, #4]	; (103dc <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   103d6:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   103da:	4770      	bx	lr
   103dc:	200000a4 	.word	0x200000a4

000103e0 <nrfx_gpiote_channel_get>:
{
   103e0:	b508      	push	{r3, lr}
   103e2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   103e4:	f7ff fe68 	bl	100b8 <pin_in_use_by_te>
   103e8:	b138      	cbz	r0, 103fa <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   103ea:	4b05      	ldr	r3, [pc, #20]	; (10400 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   103ec:	4805      	ldr	r0, [pc, #20]	; (10404 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   103ee:	3208      	adds	r2, #8
   103f0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   103f4:	0b5b      	lsrs	r3, r3, #13
   103f6:	700b      	strb	r3, [r1, #0]
}
   103f8:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   103fa:	4803      	ldr	r0, [pc, #12]	; (10408 <nrfx_gpiote_channel_get+0x28>)
   103fc:	e7fc      	b.n	103f8 <nrfx_gpiote_channel_get+0x18>
   103fe:	bf00      	nop
   10400:	200000a4 	.word	0x200000a4
   10404:	0bad0000 	.word	0x0bad0000
   10408:	0bad0004 	.word	0x0bad0004

0001040c <nrfx_gpiote_init>:
{
   1040c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1040e:	4c0f      	ldr	r4, [pc, #60]	; (1044c <nrfx_gpiote_init+0x40>)
   10410:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   10414:	b9bd      	cbnz	r5, 10446 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   10416:	2260      	movs	r2, #96	; 0x60
   10418:	4629      	mov	r1, r5
   1041a:	f104 0010 	add.w	r0, r4, #16
   1041e:	f002 f919 	bl	12654 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   10422:	2006      	movs	r0, #6
   10424:	f7fd f8d0 	bl	d5c8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   10428:	4b09      	ldr	r3, [pc, #36]	; (10450 <nrfx_gpiote_init+0x44>)
    return err_code;
   1042a:	480a      	ldr	r0, [pc, #40]	; (10454 <nrfx_gpiote_init+0x48>)
   1042c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   10430:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   10434:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   10438:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1043c:	2301      	movs	r3, #1
   1043e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   10442:	6763      	str	r3, [r4, #116]	; 0x74
}
   10444:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   10446:	4804      	ldr	r0, [pc, #16]	; (10458 <nrfx_gpiote_init+0x4c>)
   10448:	e7fc      	b.n	10444 <nrfx_gpiote_init+0x38>
   1044a:	bf00      	nop
   1044c:	200000a4 	.word	0x200000a4
   10450:	40006000 	.word	0x40006000
   10454:	0bad0000 	.word	0x0bad0000
   10458:	0bad0005 	.word	0x0bad0005

0001045c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1045c:	4b03      	ldr	r3, [pc, #12]	; (1046c <nrfx_gpiote_is_init+0x10>)
   1045e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   10462:	3800      	subs	r0, #0
   10464:	bf18      	it	ne
   10466:	2001      	movne	r0, #1
   10468:	4770      	bx	lr
   1046a:	bf00      	nop
   1046c:	200000a4 	.word	0x200000a4

00010470 <nrfx_gpiote_channel_free>:
{
   10470:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   10472:	4801      	ldr	r0, [pc, #4]	; (10478 <nrfx_gpiote_channel_free+0x8>)
   10474:	f7ff bd70 	b.w	ff58 <nrfx_flag32_free>
   10478:	20000114 	.word	0x20000114

0001047c <nrfx_gpiote_channel_alloc>:
{
   1047c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1047e:	4801      	ldr	r0, [pc, #4]	; (10484 <nrfx_gpiote_channel_alloc+0x8>)
   10480:	f7ff bd44 	b.w	ff0c <nrfx_flag32_alloc>
   10484:	20000114 	.word	0x20000114

00010488 <nrfx_gpiote_trigger_enable>:
{
   10488:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1048a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1048c:	f7ff fe14 	bl	100b8 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   10490:	f104 0208 	add.w	r2, r4, #8
   10494:	4b1e      	ldr	r3, [pc, #120]	; (10510 <nrfx_gpiote_trigger_enable+0x88>)
   10496:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1049a:	b1e8      	cbz	r0, 104d8 <nrfx_gpiote_trigger_enable+0x50>
   1049c:	f013 0502 	ands.w	r5, r3, #2
   104a0:	d11a      	bne.n	104d8 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   104a2:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   104a4:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   104a6:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   104aa:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   104ae:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   104b2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   104b6:	6005      	str	r5, [r0, #0]
   104b8:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   104ba:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   104be:	f040 0001 	orr.w	r0, r0, #1
   104c2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   104c6:	b129      	cbz	r1, 104d4 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   104c8:	2201      	movs	r2, #1
   104ca:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   104ce:	4a11      	ldr	r2, [pc, #68]	; (10514 <nrfx_gpiote_trigger_enable+0x8c>)
   104d0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   104d4:	b003      	add	sp, #12
   104d6:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   104d8:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   104dc:	2b04      	cmp	r3, #4
   104de:	d012      	beq.n	10506 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   104e0:	2b05      	cmp	r3, #5
   104e2:	d012      	beq.n	1050a <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   104e4:	a801      	add	r0, sp, #4
   104e6:	9401      	str	r4, [sp, #4]
   104e8:	f7ff fdd8 	bl	1009c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   104ec:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   104ee:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   104f2:	40d9      	lsrs	r1, r3
   104f4:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   104f8:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   104fa:	4620      	mov	r0, r4
}
   104fc:	b003      	add	sp, #12
   104fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   10502:	f003 bcb5 	b.w	13e70 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   10506:	2103      	movs	r1, #3
   10508:	e7f7      	b.n	104fa <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1050a:	2102      	movs	r1, #2
   1050c:	e7f5      	b.n	104fa <nrfx_gpiote_trigger_enable+0x72>
   1050e:	bf00      	nop
   10510:	200000a4 	.word	0x200000a4
   10514:	40006000 	.word	0x40006000

00010518 <nrfx_gpiote_trigger_disable>:
{
   10518:	b508      	push	{r3, lr}
   1051a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1051c:	f7ff fdcc 	bl	100b8 <pin_in_use_by_te>
   10520:	b1c0      	cbz	r0, 10554 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   10522:	f102 0108 	add.w	r1, r2, #8
   10526:	4b0e      	ldr	r3, [pc, #56]	; (10560 <nrfx_gpiote_trigger_disable+0x48>)
   10528:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1052c:	0799      	lsls	r1, r3, #30
   1052e:	d411      	bmi.n	10554 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   10530:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   10532:	2201      	movs	r2, #1
   10534:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   10536:	009b      	lsls	r3, r3, #2
   10538:	490a      	ldr	r1, [pc, #40]	; (10564 <nrfx_gpiote_trigger_disable+0x4c>)
   1053a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1053e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   10542:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   10546:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1054a:	f022 0203 	bic.w	r2, r2, #3
   1054e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   10552:	bd08      	pop	{r3, pc}
   10554:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   10558:	2100      	movs	r1, #0
   1055a:	4610      	mov	r0, r2
   1055c:	f003 bc88 	b.w	13e70 <nrf_gpio_cfg_sense_set>
   10560:	200000a4 	.word	0x200000a4
   10564:	40006000 	.word	0x40006000

00010568 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   10568:	4b0e      	ldr	r3, [pc, #56]	; (105a4 <nrfx_gpiote_pin_uninit+0x3c>)
   1056a:	f100 0208 	add.w	r2, r0, #8
{
   1056e:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   10570:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   10574:	07db      	lsls	r3, r3, #31
{
   10576:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   10578:	d511      	bpl.n	1059e <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   1057a:	f7ff ffcd 	bl	10518 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1057e:	4620      	mov	r0, r4
   10580:	f7ff fdec 	bl	1015c <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   10584:	a801      	add	r0, sp, #4
   10586:	9401      	str	r4, [sp, #4]
   10588:	f7ff fd88 	bl	1009c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1058c:	9b01      	ldr	r3, [sp, #4]
   1058e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   10592:	2202      	movs	r2, #2
   10594:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   10598:	4803      	ldr	r0, [pc, #12]	; (105a8 <nrfx_gpiote_pin_uninit+0x40>)
}
   1059a:	b002      	add	sp, #8
   1059c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1059e:	4803      	ldr	r0, [pc, #12]	; (105ac <nrfx_gpiote_pin_uninit+0x44>)
   105a0:	e7fb      	b.n	1059a <nrfx_gpiote_pin_uninit+0x32>
   105a2:	bf00      	nop
   105a4:	200000a4 	.word	0x200000a4
   105a8:	0bad0000 	.word	0x0bad0000
   105ac:	0bad0004 	.word	0x0bad0004

000105b0 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   105b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   105b4:	4b64      	ldr	r3, [pc, #400]	; (10748 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   105b6:	4865      	ldr	r0, [pc, #404]	; (1074c <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   105b8:	4965      	ldr	r1, [pc, #404]	; (10750 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
   105ba:	2600      	movs	r6, #0
{
   105bc:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   105be:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   105c0:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   105c2:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   105c4:	b135      	cbz	r5, 105d4 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   105c6:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   105ca:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   105cc:	bf1e      	ittt	ne
   105ce:	601c      	strne	r4, [r3, #0]
   105d0:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   105d2:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   105d4:	3304      	adds	r3, #4
   105d6:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   105d8:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   105dc:	d1f1      	bne.n	105c2 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   105de:	f8df 816c 	ldr.w	r8, [pc, #364]	; 1074c <nrfx_gpiote_irq_handler+0x19c>
   105e2:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   105e6:	2b00      	cmp	r3, #0
   105e8:	f000 8091 	beq.w	1070e <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   105ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   105f0:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   105f4:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   105f6:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   105fa:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   105fe:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   10600:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   10604:	2700      	movs	r7, #0
            while (latch[i])
   10606:	f10d 0910 	add.w	r9, sp, #16
   1060a:	017b      	lsls	r3, r7, #5
   1060c:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1060e:	f04f 0a01 	mov.w	sl, #1
   10612:	e049      	b.n	106a8 <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
   10614:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   10616:	4a4f      	ldr	r2, [pc, #316]	; (10754 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   10618:	fa94 f4a4 	rbit	r4, r4
   1061c:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   10620:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   10622:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   10626:	08e0      	lsrs	r0, r4, #3
   10628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   1062c:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
   1062e:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   10632:	fa0a fc02 	lsl.w	ip, sl, r2
   10636:	f819 2000 	ldrb.w	r2, [r9, r0]
   1063a:	ea22 020c 	bic.w	r2, r2, ip
   1063e:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   10642:	a803      	add	r0, sp, #12
   10644:	f3c3 0582 	ubfx	r5, r3, #2, #3
   10648:	0899      	lsrs	r1, r3, #2
   1064a:	f7ff fd27 	bl	1009c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1064e:	9a03      	ldr	r2, [sp, #12]
   10650:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
   10654:	074b      	lsls	r3, r1, #29
   10656:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1065a:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1065c:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   10660:	d529      	bpl.n	106b6 <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
   10662:	4620      	mov	r0, r4
   10664:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   10666:	b2d5      	uxtb	r5, r2
   10668:	f7ff fd30 	bl	100cc <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1066c:	a803      	add	r0, sp, #12
   1066e:	9403      	str	r4, [sp, #12]
   10670:	f7ff fd14 	bl	1009c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   10674:	9b03      	ldr	r3, [sp, #12]
   10676:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1067a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1067e:	f3c3 4301 	ubfx	r3, r3, #16, #2
   10682:	429d      	cmp	r5, r3
   10684:	d107      	bne.n	10696 <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   10686:	2100      	movs	r1, #0
   10688:	4620      	mov	r0, r4
   1068a:	f003 fbf1 	bl	13e70 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1068e:	4629      	mov	r1, r5
   10690:	4620      	mov	r0, r4
   10692:	f003 fbed 	bl	13e70 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   10696:	a803      	add	r0, sp, #12
   10698:	9403      	str	r4, [sp, #12]
   1069a:	f7ff fcff 	bl	1009c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1069e:	9b03      	ldr	r3, [sp, #12]
   106a0:	fa0a f303 	lsl.w	r3, sl, r3
   106a4:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   106a8:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
   106ac:	2c00      	cmp	r4, #0
   106ae:	d1b1      	bne.n	10614 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   106b0:	b9cf      	cbnz	r7, 106e6 <nrfx_gpiote_irq_handler+0x136>
   106b2:	2701      	movs	r7, #1
   106b4:	e7a9      	b.n	1060a <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   106b6:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   106b8:	bf0c      	ite	eq
   106ba:	2103      	moveq	r1, #3
   106bc:	2102      	movne	r1, #2
   106be:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   106c0:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
   106c2:	f003 fbd5 	bl	13e70 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   106c6:	2d03      	cmp	r5, #3
   106c8:	d004      	beq.n	106d4 <nrfx_gpiote_irq_handler+0x124>
   106ca:	9a01      	ldr	r2, [sp, #4]
   106cc:	2a02      	cmp	r2, #2
   106ce:	d106      	bne.n	106de <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   106d0:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   106d2:	d1e0      	bne.n	10696 <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   106d4:	4659      	mov	r1, fp
   106d6:	4620      	mov	r0, r4
   106d8:	f7ff fcf8 	bl	100cc <call_handler>
   106dc:	e7db      	b.n	10696 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   106de:	2a03      	cmp	r2, #3
   106e0:	d1d9      	bne.n	10696 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   106e2:	2d02      	cmp	r5, #2
   106e4:	e7f5      	b.n	106d2 <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   106e6:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   106ea:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   106ee:	491a      	ldr	r1, [pc, #104]	; (10758 <nrfx_gpiote_irq_handler+0x1a8>)
   106f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   106f4:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   106f8:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   106fa:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   106fe:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
   10702:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   10704:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   10708:	4313      	orrs	r3, r2
   1070a:	f47f af7b 	bne.w	10604 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   1070e:	2401      	movs	r4, #1
    while (mask)
   10710:	b916      	cbnz	r6, 10718 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   10712:	b007      	add	sp, #28
   10714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   10718:	fa96 f3a6 	rbit	r3, r6
   1071c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   10720:	fa04 f203 	lsl.w	r2, r4, r3
   10724:	009b      	lsls	r3, r3, #2
   10726:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1072a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1072e:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   10732:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   10736:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1073a:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1073e:	f3c1 4101 	ubfx	r1, r1, #16, #2
   10742:	f7ff fcc3 	bl	100cc <call_handler>
   10746:	e7e3      	b.n	10710 <nrfx_gpiote_irq_handler+0x160>
   10748:	40006100 	.word	0x40006100
   1074c:	40006000 	.word	0x40006000
   10750:	40006120 	.word	0x40006120
   10754:	200000a4 	.word	0x200000a4
   10758:	50000300 	.word	0x50000300

0001075c <nvmc_word_write>:
   1075c:	4a04      	ldr	r2, [pc, #16]	; (10770 <nvmc_word_write+0x14>)
   1075e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   10762:	07db      	lsls	r3, r3, #31
   10764:	d5fb      	bpl.n	1075e <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   10766:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   10768:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   1076c:	4770      	bx	lr
   1076e:	bf00      	nop
   10770:	4001e000 	.word	0x4001e000

00010774 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   10774:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   10778:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   1077a:	fbb0 f3f2 	udiv	r3, r0, r2
   1077e:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   10782:	b973      	cbnz	r3, 107a2 <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   10784:	4b08      	ldr	r3, [pc, #32]	; (107a8 <nrfx_nvmc_page_erase+0x34>)
   10786:	2202      	movs	r2, #2
   10788:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   1078c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   10790:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   10794:	07d2      	lsls	r2, r2, #31
   10796:	d5fb      	bpl.n	10790 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   10798:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1079a:	4804      	ldr	r0, [pc, #16]	; (107ac <nrfx_nvmc_page_erase+0x38>)
   1079c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   107a0:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   107a2:	4803      	ldr	r0, [pc, #12]	; (107b0 <nrfx_nvmc_page_erase+0x3c>)
}
   107a4:	4770      	bx	lr
   107a6:	bf00      	nop
   107a8:	4001e000 	.word	0x4001e000
   107ac:	0bad0000 	.word	0x0bad0000
   107b0:	0bad000a 	.word	0x0bad000a

000107b4 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   107b4:	b510      	push	{r4, lr}
   107b6:	4c05      	ldr	r4, [pc, #20]	; (107cc <nrfx_nvmc_word_write+0x18>)
   107b8:	2301      	movs	r3, #1
   107ba:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   107be:	f7ff ffcd 	bl	1075c <nvmc_word_write>
   107c2:	2300      	movs	r3, #0
   107c4:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   107c8:	bd10      	pop	{r4, pc}
   107ca:	bf00      	nop
   107cc:	4001e000 	.word	0x4001e000

000107d0 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   107d0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   107d2:	4801      	ldr	r0, [pc, #4]	; (107d8 <nrfx_ppi_channel_alloc+0x8>)
   107d4:	f7ff bb9a 	b.w	ff0c <nrfx_flag32_alloc>
   107d8:	20000120 	.word	0x20000120

000107dc <boot_write_magic>:
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
   107dc:	b530      	push	{r4, r5, lr}
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
   107de:	6881      	ldr	r1, [r0, #8]
{
   107e0:	b085      	sub	sp, #20
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
   107e2:	3910      	subs	r1, #16
     * returned by boot_magic_off() is the start of magic which is not the
     * start of the flash write boundary and thus writes to the magic will fail.
     * To account for this change, write to magic is first padded with 0xFF
     * before writing to the trailer.
     */
    pad_off = ALIGN_DOWN(off, BOOT_MAX_ALIGN);
   107e4:	f021 0407 	bic.w	r4, r1, #7
{
   107e8:	4605      	mov	r5, r0

    erased_val = flash_area_erased_val(fap);
   107ea:	f001 fe38 	bl	1245e <flash_area_erased_val>

    memset(&magic[0], erased_val, sizeof(magic));
   107ee:	2210      	movs	r2, #16
    erased_val = flash_area_erased_val(fap);
   107f0:	4601      	mov	r1, r0
    memset(&magic[0], erased_val, sizeof(magic));
   107f2:	4668      	mov	r0, sp
   107f4:	f001 ff2e 	bl	12654 <memset>
    memcpy(&magic[BOOT_MAGIC_ALIGN_SIZE - BOOT_MAGIC_SZ], BOOT_IMG_MAGIC, BOOT_MAGIC_SZ);
   107f8:	4907      	ldr	r1, [pc, #28]	; (10818 <boot_write_magic+0x3c>)
   107fa:	2210      	movs	r2, #16
   107fc:	4668      	mov	r0, sp
   107fe:	f001 ff1e 	bl	1263e <memcpy>

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, pad_off, &magic[0], BOOT_MAGIC_ALIGN_SIZE);
   10802:	2310      	movs	r3, #16
   10804:	466a      	mov	r2, sp
   10806:	4621      	mov	r1, r4
   10808:	4628      	mov	r0, r5
   1080a:	f001 fde9 	bl	123e0 <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
   1080e:	3800      	subs	r0, #0
   10810:	bf18      	it	ne
   10812:	2001      	movne	r0, #1
   10814:	b005      	add	sp, #20
   10816:	bd30      	pop	{r4, r5, pc}
   10818:	000153d8 	.word	0x000153d8

0001081c <boot_read_swap_state>:
{
   1081c:	b530      	push	{r4, r5, lr}
   1081e:	460c      	mov	r4, r1
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
   10820:	6881      	ldr	r1, [r0, #8]
{
   10822:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
   10824:	2310      	movs	r3, #16
   10826:	aa02      	add	r2, sp, #8
   10828:	3910      	subs	r1, #16
{
   1082a:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
   1082c:	f001 fdbc 	bl	123a8 <flash_area_read>
    if (rc < 0) {
   10830:	2800      	cmp	r0, #0
   10832:	da02      	bge.n	1083a <boot_read_swap_state+0x1e>
        return BOOT_EFLASH;
   10834:	2001      	movs	r0, #1
}
   10836:	b007      	add	sp, #28
   10838:	bd30      	pop	{r4, r5, pc}
    if (buffer == NULL || len == 0) {
   1083a:	2210      	movs	r2, #16
   1083c:	a902      	add	r1, sp, #8
   1083e:	4628      	mov	r0, r5
   10840:	f003 fb33 	bl	13eaa <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
   10844:	b390      	cbz	r0, 108ac <boot_read_swap_state+0x90>
        state->magic = BOOT_MAGIC_UNSET;
   10846:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
   10848:	7023      	strb	r3, [r4, #0]
    off = boot_swap_info_off(fap);
   1084a:	4628      	mov	r0, r5
   1084c:	f003 fb3e 	bl	13ecc <boot_swap_info_off>
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
   10850:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
   10852:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
   10854:	f10d 0207 	add.w	r2, sp, #7
   10858:	4628      	mov	r0, r5
   1085a:	f001 fda5 	bl	123a8 <flash_area_read>
    if (rc < 0) {
   1085e:	2800      	cmp	r0, #0
   10860:	dbe8      	blt.n	10834 <boot_read_swap_state+0x18>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
   10862:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10866:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
   1086a:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
   1086c:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
   1086e:	7123      	strb	r3, [r4, #4]
    if (buffer == NULL || len == 0) {
   10870:	2201      	movs	r2, #1
   10872:	f10d 0107 	add.w	r1, sp, #7
   10876:	4628      	mov	r0, r5
   10878:	f003 fb17 	bl	13eaa <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
   1087c:	b910      	cbnz	r0, 10884 <boot_read_swap_state+0x68>
   1087e:	7863      	ldrb	r3, [r4, #1]
   10880:	2b04      	cmp	r3, #4
   10882:	d903      	bls.n	1088c <boot_read_swap_state+0x70>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
   10884:	2301      	movs	r3, #1
   10886:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
   10888:	2300      	movs	r3, #0
   1088a:	7123      	strb	r3, [r4, #4]
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   1088c:	68aa      	ldr	r2, [r5, #8]
   1088e:	3a18      	subs	r2, #24
   10890:	f022 0207 	bic.w	r2, r2, #7
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
   10894:	3a08      	subs	r2, #8
   10896:	1ca1      	adds	r1, r4, #2
   10898:	4628      	mov	r0, r5
   1089a:	f003 fb31 	bl	13f00 <boot_read_flag>
    if (rc) {
   1089e:	2800      	cmp	r0, #0
   108a0:	d1c8      	bne.n	10834 <boot_read_swap_state+0x18>
    return boot_read_image_ok(fap, &state->image_ok);
   108a2:	1ce1      	adds	r1, r4, #3
   108a4:	4628      	mov	r0, r5
   108a6:	f003 fb85 	bl	13fb4 <boot_read_image_ok>
   108aa:	e7c4      	b.n	10836 <boot_read_swap_state+0x1a>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
   108ac:	4904      	ldr	r1, [pc, #16]	; (108c0 <boot_read_swap_state+0xa4>)
   108ae:	2210      	movs	r2, #16
   108b0:	a802      	add	r0, sp, #8
   108b2:	f001 feb3 	bl	1261c <memcmp>
        return BOOT_MAGIC_GOOD;
   108b6:	2800      	cmp	r0, #0
   108b8:	bf14      	ite	ne
   108ba:	2302      	movne	r3, #2
   108bc:	2301      	moveq	r3, #1
   108be:	e7c3      	b.n	10848 <boot_read_swap_state+0x2c>
   108c0:	000153d8 	.word	0x000153d8

000108c4 <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
   108c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   108c8:	b085      	sub	sp, #20

    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
                        BOOT_HOOK_REGULAR, image_index, &primary_slot);
    if (rc == BOOT_HOOK_REGULAR)
    {
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
   108ca:	4669      	mov	r1, sp
   108cc:	2001      	movs	r0, #1
   108ce:	f003 fb77 	bl	13fc0 <boot_read_swap_state_by_id>
                                        &primary_slot);
    }
    if (rc) {
   108d2:	2800      	cmp	r0, #0
   108d4:	d136      	bne.n	10944 <boot_swap_type_multi+0x80>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
   108d6:	a902      	add	r1, sp, #8
   108d8:	2002      	movs	r0, #2
   108da:	f003 fb71 	bl	13fc0 <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc == BOOT_EFLASH) {
   108de:	2801      	cmp	r0, #1
   108e0:	d12e      	bne.n	10940 <boot_swap_type_multi+0x7c>
        BOOT_LOG_INF("Secondary image of image pair (%d.) "
                     "is unreachable. Treat it as empty", image_index);
        secondary_slot.magic = BOOT_MAGIC_UNSET;
   108e2:	2303      	movs	r3, #3
   108e4:	f88d 3008 	strb.w	r3, [sp, #8]
        secondary_slot.swap_type = BOOT_SWAP_TYPE_NONE;
        secondary_slot.copy_done = BOOT_FLAG_UNSET;
        secondary_slot.image_ok = BOOT_FLAG_UNSET;
   108e8:	f88d 300b 	strb.w	r3, [sp, #11]
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
        table = boot_swap_tables + i;

        if (boot_magic_compatible_check(table->magic_primary_slot,
   108ec:	f89d 5000 	ldrb.w	r5, [sp]
                                        primary_slot.magic) &&
            boot_magic_compatible_check(table->magic_secondary_slot,
   108f0:	f89d 6008 	ldrb.w	r6, [sp, #8]
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   108f4:	f89d 7003 	ldrb.w	r7, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   108f8:	f89d 800b 	ldrb.w	r8, [sp, #11]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
                table->copy_done_primary_slot == primary_slot.copy_done)) {
   108fc:	f89d 9002 	ldrb.w	r9, [sp, #2]
   10900:	4a16      	ldr	r2, [pc, #88]	; (1095c <boot_swap_type_multi+0x98>)
   10902:	2400      	movs	r4, #0
        if (boot_magic_compatible_check(table->magic_primary_slot,
   10904:	7810      	ldrb	r0, [r2, #0]
   10906:	4629      	mov	r1, r5
   10908:	f003 fae6 	bl	13ed8 <boot_magic_compatible_check>
   1090c:	b1f0      	cbz	r0, 1094c <boot_swap_type_multi+0x88>
            boot_magic_compatible_check(table->magic_secondary_slot,
   1090e:	7850      	ldrb	r0, [r2, #1]
   10910:	4631      	mov	r1, r6
   10912:	f003 fae1 	bl	13ed8 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
   10916:	b1c8      	cbz	r0, 1094c <boot_swap_type_multi+0x88>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   10918:	7893      	ldrb	r3, [r2, #2]
                                        secondary_slot.magic) &&
   1091a:	2b04      	cmp	r3, #4
   1091c:	d001      	beq.n	10922 <boot_swap_type_multi+0x5e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   1091e:	42bb      	cmp	r3, r7
   10920:	d114      	bne.n	1094c <boot_swap_type_multi+0x88>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   10922:	78d3      	ldrb	r3, [r2, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   10924:	2b04      	cmp	r3, #4
   10926:	d001      	beq.n	1092c <boot_swap_type_multi+0x68>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   10928:	4543      	cmp	r3, r8
   1092a:	d10f      	bne.n	1094c <boot_swap_type_multi+0x88>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   1092c:	7913      	ldrb	r3, [r2, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   1092e:	2b04      	cmp	r3, #4
   10930:	d10a      	bne.n	10948 <boot_swap_type_multi+0x84>
            BOOT_LOG_INF("Swap type: %s",
   10932:	7950      	ldrb	r0, [r2, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
   10934:	1e83      	subs	r3, r0, #2
   10936:	2b02      	cmp	r3, #2
   10938:	d804      	bhi.n	10944 <boot_swap_type_multi+0x80>
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
   1093a:	b005      	add	sp, #20
   1093c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (rc) {
   10940:	2800      	cmp	r0, #0
   10942:	d0d3      	beq.n	108ec <boot_swap_type_multi+0x28>
        return BOOT_SWAP_TYPE_PANIC;
   10944:	20ff      	movs	r0, #255	; 0xff
   10946:	e7f8      	b.n	1093a <boot_swap_type_multi+0x76>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   10948:	454b      	cmp	r3, r9
   1094a:	d0f2      	beq.n	10932 <boot_swap_type_multi+0x6e>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
   1094c:	3401      	adds	r4, #1
   1094e:	2c03      	cmp	r4, #3
   10950:	f102 0206 	add.w	r2, r2, #6
   10954:	d1d6      	bne.n	10904 <boot_swap_type_multi+0x40>
    return BOOT_SWAP_TYPE_NONE;
   10956:	2001      	movs	r0, #1
   10958:	e7ef      	b.n	1093a <boot_swap_type_multi+0x76>
   1095a:	bf00      	nop
   1095c:	000155cc 	.word	0x000155cc

00010960 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   10960:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   10962:	4c14      	ldr	r4, [pc, #80]	; (109b4 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   10964:	4a14      	ldr	r2, [pc, #80]	; (109b8 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   10966:	4915      	ldr	r1, [pc, #84]	; (109bc <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   10968:	2303      	movs	r3, #3
   1096a:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1096c:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1096e:	4b14      	ldr	r3, [pc, #80]	; (109c0 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
   10970:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   10972:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   10974:	f44f 6380 	mov.w	r3, #1024	; 0x400
   10978:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1097a:	2300      	movs	r3, #0
   1097c:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1097e:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   10980:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   10982:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   10984:	4a0f      	ldr	r2, [pc, #60]	; (109c4 <_DoInit+0x64>)
   10986:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   10988:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1098a:	2210      	movs	r2, #16
   1098c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1098e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   10990:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   10992:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   10994:	f001 fe1c 	bl	125d0 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   10998:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   1099c:	490a      	ldr	r1, [pc, #40]	; (109c8 <_DoInit+0x68>)
   1099e:	4620      	mov	r0, r4
   109a0:	f001 fe16 	bl	125d0 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   109a4:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   109a8:	2320      	movs	r3, #32
   109aa:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   109ac:	f3bf 8f5f 	dmb	sy
}
   109b0:	bd10      	pop	{r4, pc}
   109b2:	bf00      	nop
   109b4:	2000073c 	.word	0x2000073c
   109b8:	000155de 	.word	0x000155de
   109bc:	000155e7 	.word	0x000155e7
   109c0:	20000878 	.word	0x20000878
   109c4:	20000868 	.word	0x20000868
   109c8:	000155eb 	.word	0x000155eb

000109cc <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   109cc:	b570      	push	{r4, r5, r6, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   109ce:	4b16      	ldr	r3, [pc, #88]	; (10a28 <SEGGER_RTT_WriteNoLock+0x5c>)
   109d0:	2418      	movs	r4, #24
   109d2:	fb00 4504 	mla	r5, r0, r4, r4
   109d6:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   109d8:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   109dc:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   109de:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   109e0:	2c01      	cmp	r4, #1
   109e2:	d00e      	beq.n	10a02 <SEGGER_RTT_WriteNoLock+0x36>
   109e4:	2c02      	cmp	r4, #2
   109e6:	d018      	beq.n	10a1a <SEGGER_RTT_WriteNoLock+0x4e>
   109e8:	b9e4      	cbnz	r4, 10a24 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   109ea:	4628      	mov	r0, r5
   109ec:	f003 fb70 	bl	140d0 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   109f0:	4286      	cmp	r6, r0
   109f2:	d804      	bhi.n	109fe <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   109f4:	4632      	mov	r2, r6
   109f6:	4628      	mov	r0, r5
   109f8:	f003 fb73 	bl	140e2 <_WriteNoCheck>
   109fc:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   109fe:	4620      	mov	r0, r4
   10a00:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
   10a02:	4628      	mov	r0, r5
   10a04:	f003 fb64 	bl	140d0 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   10a08:	4286      	cmp	r6, r0
   10a0a:	4634      	mov	r4, r6
   10a0c:	bf28      	it	cs
   10a0e:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   10a10:	4622      	mov	r2, r4
   10a12:	4628      	mov	r0, r5
   10a14:	f003 fb65 	bl	140e2 <_WriteNoCheck>
    break;
   10a18:	e7f1      	b.n	109fe <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   10a1a:	4628      	mov	r0, r5
}
   10a1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   10a20:	f003 bb7d 	b.w	1411e <_WriteBlocking>
  switch (pRing->Flags) {
   10a24:	2400      	movs	r4, #0
  return Status;
   10a26:	e7ea      	b.n	109fe <SEGGER_RTT_WriteNoLock+0x32>
   10a28:	2000073c 	.word	0x2000073c

00010a2c <_cbor_value_copy_string>:
 * \sa cbor_value_dup_text_string(), cbor_value_copy_text_string(), cbor_value_get_string_length(), cbor_value_calculate_string_length()
 */

CborError _cbor_value_copy_string(const CborValue *value, void *buffer,
                                 size_t *buflen, CborValue *next)
{
   10a2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    bool copied_all;
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   10a2e:	b189      	cbz	r1, 10a54 <_cbor_value_copy_string+0x28>
                                          buffer ? (IterateFunction) value->parser->d->cpy : iterate_noop);
   10a30:	6804      	ldr	r4, [r0, #0]
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   10a32:	6824      	ldr	r4, [r4, #0]
   10a34:	6964      	ldr	r4, [r4, #20]
   10a36:	e9cd 3400 	strd	r3, r4, [sp]
   10a3a:	f10d 030f 	add.w	r3, sp, #15
   10a3e:	f003 fd7a 	bl	14536 <iterate_string_chunks>
    return err ? err :
   10a42:	b928      	cbnz	r0, 10a50 <_cbor_value_copy_string+0x24>
   10a44:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10a48:	2b00      	cmp	r3, #0
   10a4a:	bf08      	it	eq
   10a4c:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
                 copied_all ? CborNoError : CborErrorOutOfMemory;
}
   10a50:	b004      	add	sp, #16
   10a52:	bd10      	pop	{r4, pc}
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   10a54:	4c00      	ldr	r4, [pc, #0]	; (10a58 <_cbor_value_copy_string+0x2c>)
   10a56:	e7ee      	b.n	10a36 <_cbor_value_copy_string+0xa>
   10a58:	00014339 	.word	0x00014339

00010a5c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   10a5c:	4b0e      	ldr	r3, [pc, #56]	; (10a98 <z_sys_init_run_level+0x3c>)
{
   10a5e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   10a60:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   10a64:	3001      	adds	r0, #1
   10a66:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   10a6a:	42a6      	cmp	r6, r4
   10a6c:	d800      	bhi.n	10a70 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   10a6e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   10a70:	e9d4 3500 	ldrd	r3, r5, [r4]
   10a74:	4628      	mov	r0, r5
   10a76:	4798      	blx	r3
		if (dev != NULL) {
   10a78:	b165      	cbz	r5, 10a94 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   10a7a:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   10a7c:	b130      	cbz	r0, 10a8c <z_sys_init_run_level+0x30>
				if (rc < 0) {
   10a7e:	2800      	cmp	r0, #0
   10a80:	bfb8      	it	lt
   10a82:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   10a84:	28ff      	cmp	r0, #255	; 0xff
   10a86:	bfa8      	it	ge
   10a88:	20ff      	movge	r0, #255	; 0xff
   10a8a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   10a8c:	785a      	ldrb	r2, [r3, #1]
   10a8e:	f042 0201 	orr.w	r2, r2, #1
   10a92:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   10a94:	3408      	adds	r4, #8
   10a96:	e7e8      	b.n	10a6a <z_sys_init_run_level+0xe>
   10a98:	000153c0 	.word	0x000153c0

00010a9c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   10a9c:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   10a9e:	4605      	mov	r5, r0
   10aa0:	b910      	cbnz	r0, 10aa8 <z_impl_device_get_binding+0xc>
		return NULL;
   10aa2:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   10aa4:	4620      	mov	r0, r4
   10aa6:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   10aa8:	7803      	ldrb	r3, [r0, #0]
   10aaa:	2b00      	cmp	r3, #0
   10aac:	d0f9      	beq.n	10aa2 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   10aae:	4c0e      	ldr	r4, [pc, #56]	; (10ae8 <z_impl_device_get_binding+0x4c>)
   10ab0:	4e0e      	ldr	r6, [pc, #56]	; (10aec <z_impl_device_get_binding+0x50>)
   10ab2:	42b4      	cmp	r4, r6
   10ab4:	d108      	bne.n	10ac8 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   10ab6:	4c0c      	ldr	r4, [pc, #48]	; (10ae8 <z_impl_device_get_binding+0x4c>)
   10ab8:	42b4      	cmp	r4, r6
   10aba:	d0f2      	beq.n	10aa2 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   10abc:	4620      	mov	r0, r4
   10abe:	f003 fea5 	bl	1480c <z_device_is_ready>
   10ac2:	b950      	cbnz	r0, 10ada <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   10ac4:	3418      	adds	r4, #24
   10ac6:	e7f7      	b.n	10ab8 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   10ac8:	4620      	mov	r0, r4
   10aca:	f003 fe9f 	bl	1480c <z_device_is_ready>
   10ace:	b110      	cbz	r0, 10ad6 <z_impl_device_get_binding+0x3a>
   10ad0:	6823      	ldr	r3, [r4, #0]
   10ad2:	42ab      	cmp	r3, r5
   10ad4:	d0e6      	beq.n	10aa4 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   10ad6:	3418      	adds	r4, #24
   10ad8:	e7eb      	b.n	10ab2 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   10ada:	6821      	ldr	r1, [r4, #0]
   10adc:	4628      	mov	r0, r5
   10ade:	f001 fd91 	bl	12604 <strcmp>
   10ae2:	2800      	cmp	r0, #0
   10ae4:	d1ee      	bne.n	10ac4 <z_impl_device_get_binding+0x28>
   10ae6:	e7dd      	b.n	10aa4 <z_impl_device_get_binding+0x8>
   10ae8:	00014f18 	.word	0x00014f18
   10aec:	00014fa8 	.word	0x00014fa8

00010af0 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   10af0:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   10af2:	4b0a      	ldr	r3, [pc, #40]	; (10b1c <bg_thread_main+0x2c>)
   10af4:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   10af6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   10af8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   10afa:	f7ff ffaf 	bl	10a5c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   10afe:	f001 f8c5 	bl	11c8c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   10b02:	2003      	movs	r0, #3
   10b04:	f7ff ffaa 	bl	10a5c <z_sys_init_run_level>

	z_init_static_threads();
   10b08:	f000 f97a 	bl	10e00 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   10b0c:	f7fb fd66 	bl	c5dc <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   10b10:	4a03      	ldr	r2, [pc, #12]	; (10b20 <bg_thread_main+0x30>)
   10b12:	7b13      	ldrb	r3, [r2, #12]
   10b14:	f023 0301 	bic.w	r3, r3, #1
   10b18:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   10b1a:	bd08      	pop	{r3, pc}
   10b1c:	20000c78 	.word	0x20000c78
   10b20:	20000270 	.word	0x20000270

00010b24 <z_bss_zero>:
{
   10b24:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   10b26:	4803      	ldr	r0, [pc, #12]	; (10b34 <z_bss_zero+0x10>)
   10b28:	4a03      	ldr	r2, [pc, #12]	; (10b38 <z_bss_zero+0x14>)
   10b2a:	2100      	movs	r1, #0
   10b2c:	1a12      	subs	r2, r2, r0
   10b2e:	f003 fe9e 	bl	1486e <z_early_memset>
}
   10b32:	bd08      	pop	{r3, pc}
   10b34:	200001d0 	.word	0x200001d0
   10b38:	20000c7c 	.word	0x20000c7c

00010b3c <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   10b3c:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   10b3e:	2300      	movs	r3, #0
{
   10b40:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   10b42:	2201      	movs	r2, #1
   10b44:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   10b48:	4e13      	ldr	r6, [pc, #76]	; (10b98 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   10b4a:	4d14      	ldr	r5, [pc, #80]	; (10b9c <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   10b4c:	9301      	str	r3, [sp, #4]
   10b4e:	220f      	movs	r2, #15
   10b50:	e9cd 3202 	strd	r3, r2, [sp, #8]
   10b54:	4912      	ldr	r1, [pc, #72]	; (10ba0 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   10b56:	2318      	movs	r3, #24
   10b58:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   10b5c:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   10b60:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   10b62:	f44f 70b0 	mov.w	r0, #352	; 0x160
   10b66:	fb00 1104 	mla	r1, r0, r4, r1
   10b6a:	4b0e      	ldr	r3, [pc, #56]	; (10ba4 <z_init_cpu+0x68>)
   10b6c:	9500      	str	r5, [sp, #0]
   10b6e:	f44f 72a0 	mov.w	r2, #320	; 0x140
   10b72:	4630      	mov	r0, r6
   10b74:	f000 f8e6 	bl	10d44 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10b78:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   10b7a:	480b      	ldr	r0, [pc, #44]	; (10ba8 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
   10b7c:	752c      	strb	r4, [r5, #20]
   10b7e:	f023 0304 	bic.w	r3, r3, #4
   10b82:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   10b84:	f44f 6302 	mov.w	r3, #2080	; 0x820
   10b88:	fb03 0404 	mla	r4, r3, r4, r0
   10b8c:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   10b8e:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   10b90:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   10b92:	b006      	add	sp, #24
   10b94:	bd70      	pop	{r4, r5, r6, pc}
   10b96:	bf00      	nop
   10b98:	200001f0 	.word	0x200001f0
   10b9c:	200007e4 	.word	0x200007e4
   10ba0:	200010a0 	.word	0x200010a0
   10ba4:	00010eb9 	.word	0x00010eb9
   10ba8:	20001200 	.word	0x20001200

00010bac <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   10bac:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   10bae:	4b2d      	ldr	r3, [pc, #180]	; (10c64 <z_cstart+0xb8>)
   10bb0:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   10bb2:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   10bb6:	4d2c      	ldr	r5, [pc, #176]	; (10c68 <z_cstart+0xbc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   10bb8:	4e2c      	ldr	r6, [pc, #176]	; (10c6c <z_cstart+0xc0>)
   10bba:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   10bbc:	4f2c      	ldr	r7, [pc, #176]	; (10c70 <z_cstart+0xc4>)
   10bbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10bc2:	2400      	movs	r4, #0
   10bc4:	616b      	str	r3, [r5, #20]
   10bc6:	23e0      	movs	r3, #224	; 0xe0
   10bc8:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   10bcc:	77ec      	strb	r4, [r5, #31]
   10bce:	762c      	strb	r4, [r5, #24]
   10bd0:	766c      	strb	r4, [r5, #25]
   10bd2:	76ac      	strb	r4, [r5, #26]
   10bd4:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   10bd8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   10bda:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   10bde:	626b      	str	r3, [r5, #36]	; 0x24
   10be0:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   10be4:	f7fc fefe 	bl	d9e4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   10be8:	f7fc fcd0 	bl	d58c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   10bec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10bf0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   10bf2:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   10bf4:	f7fd f82e 	bl	dc54 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   10bf8:	f7fc ff96 	bl	db28 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   10bfc:	f240 1301 	movw	r3, #257	; 0x101
   10c00:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   10c04:	ab06      	add	r3, sp, #24
   10c06:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   10c08:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
   10c0c:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   10c0e:	f003 fdfc 	bl	1480a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   10c12:	4620      	mov	r0, r4
   10c14:	f7ff ff22 	bl	10a5c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   10c18:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   10c1a:	4d16      	ldr	r5, [pc, #88]	; (10c74 <z_cstart+0xc8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   10c1c:	f7ff ff1e 	bl	10a5c <z_sys_init_run_level>
	z_sched_init();
   10c20:	f000 fd02 	bl	11628 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   10c24:	4b14      	ldr	r3, [pc, #80]	; (10c78 <z_cstart+0xcc>)
	_kernel.ready_q.cache = &z_main_thread;
   10c26:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   10c28:	9305      	str	r3, [sp, #20]
   10c2a:	2301      	movs	r3, #1
   10c2c:	4913      	ldr	r1, [pc, #76]	; (10c7c <z_cstart+0xd0>)
   10c2e:	9400      	str	r4, [sp, #0]
   10c30:	e9cd 4303 	strd	r4, r3, [sp, #12]
   10c34:	f44f 6280 	mov.w	r2, #1024	; 0x400
   10c38:	463b      	mov	r3, r7
   10c3a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   10c3e:	4628      	mov	r0, r5
   10c40:	f000 f880 	bl	10d44 <z_setup_new_thread>
   10c44:	7b6a      	ldrb	r2, [r5, #13]
   10c46:	4606      	mov	r6, r0
   10c48:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   10c4c:	4628      	mov	r0, r5
   10c4e:	736a      	strb	r2, [r5, #13]
   10c50:	f004 f808 	bl	14c64 <z_ready_thread>
	z_init_cpu(0);
   10c54:	4620      	mov	r0, r4
   10c56:	f7ff ff71 	bl	10b3c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   10c5a:	463a      	mov	r2, r7
   10c5c:	4631      	mov	r1, r6
   10c5e:	4628      	mov	r0, r5
   10c60:	f7fc fd8e 	bl	d780 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   10c64:	20001a20 	.word	0x20001a20
   10c68:	e000ed00 	.word	0xe000ed00
   10c6c:	200007e4 	.word	0x200007e4
   10c70:	00010af1 	.word	0x00010af1
   10c74:	20000270 	.word	0x20000270
   10c78:	000155f2 	.word	0x000155f2
   10c7c:	20000c80 	.word	0x20000c80

00010c80 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   10c80:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   10c82:	4c06      	ldr	r4, [pc, #24]	; (10c9c <statics_init+0x1c>)
   10c84:	4d06      	ldr	r5, [pc, #24]	; (10ca0 <statics_init+0x20>)
   10c86:	42ac      	cmp	r4, r5
   10c88:	d301      	bcc.n	10c8e <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   10c8a:	2000      	movs	r0, #0
   10c8c:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   10c8e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   10c92:	4620      	mov	r0, r4
   10c94:	f003 fdef 	bl	14876 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   10c98:	3414      	adds	r4, #20
   10c9a:	e7f4      	b.n	10c86 <statics_init+0x6>
   10c9c:	2000019c 	.word	0x2000019c
   10ca0:	2000019c 	.word	0x2000019c

00010ca4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   10ca4:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   10ca6:	4b0e      	ldr	r3, [pc, #56]	; (10ce0 <init_mem_slab_module+0x3c>)
   10ca8:	4c0e      	ldr	r4, [pc, #56]	; (10ce4 <init_mem_slab_module+0x40>)
   10caa:	42a3      	cmp	r3, r4
   10cac:	d301      	bcc.n	10cb2 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   10cae:	2000      	movs	r0, #0
	return rc;
}
   10cb0:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   10cb2:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   10cb6:	ea41 0200 	orr.w	r2, r1, r0
   10cba:	f012 0203 	ands.w	r2, r2, #3
   10cbe:	d10b      	bne.n	10cd8 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   10cc0:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   10cc2:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   10cc4:	42aa      	cmp	r2, r5
   10cc6:	d101      	bne.n	10ccc <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   10cc8:	331c      	adds	r3, #28
   10cca:	e7ee      	b.n	10caa <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   10ccc:	695e      	ldr	r6, [r3, #20]
   10cce:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   10cd0:	3201      	adds	r2, #1
		slab->free_list = p;
   10cd2:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   10cd4:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   10cd6:	e7f5      	b.n	10cc4 <init_mem_slab_module+0x20>
	return rc;
   10cd8:	f06f 0015 	mvn.w	r0, #21
   10cdc:	e7e8      	b.n	10cb0 <init_mem_slab_module+0xc>
   10cde:	bf00      	nop
   10ce0:	20000180 	.word	0x20000180
   10ce4:	2000019c 	.word	0x2000019c

00010ce8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   10ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10cea:	460c      	mov	r4, r1
	__asm__ volatile(
   10cec:	f04f 0520 	mov.w	r5, #32
   10cf0:	f3ef 8111 	mrs	r1, BASEPRI
   10cf4:	f385 8812 	msr	BASEPRI_MAX, r5
   10cf8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   10cfc:	6945      	ldr	r5, [r0, #20]
   10cfe:	b15d      	cbz	r5, 10d18 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   10d00:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   10d02:	682b      	ldr	r3, [r5, #0]
   10d04:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   10d06:	6983      	ldr	r3, [r0, #24]
   10d08:	3301      	adds	r3, #1
   10d0a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   10d0c:	2000      	movs	r0, #0
	__asm__ volatile(
   10d0e:	f381 8811 	msr	BASEPRI, r1
   10d12:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   10d16:	e011      	b.n	10d3c <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   10d18:	ea52 0c03 	orrs.w	ip, r2, r3
   10d1c:	d103      	bne.n	10d26 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   10d1e:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   10d20:	f06f 000b 	mvn.w	r0, #11
   10d24:	e7f3      	b.n	10d0e <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   10d26:	e9cd 2300 	strd	r2, r3, [sp]
   10d2a:	4602      	mov	r2, r0
   10d2c:	3008      	adds	r0, #8
   10d2e:	f000 fc19 	bl	11564 <z_pend_curr>
		if (result == 0) {
   10d32:	b918      	cbnz	r0, 10d3c <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   10d34:	4b02      	ldr	r3, [pc, #8]	; (10d40 <k_mem_slab_alloc+0x58>)
   10d36:	689b      	ldr	r3, [r3, #8]
   10d38:	695b      	ldr	r3, [r3, #20]
   10d3a:	6023      	str	r3, [r4, #0]
}
   10d3c:	b003      	add	sp, #12
   10d3e:	bd30      	pop	{r4, r5, pc}
   10d40:	200007e4 	.word	0x200007e4

00010d44 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   10d44:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   10d48:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   10d4a:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   10d4c:	2604      	movs	r6, #4
   10d4e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   10d50:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   10d52:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   10d54:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   10d58:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   10d5a:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   10d5c:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   10d60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   10d62:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   10d64:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   10d68:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   10d6a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   10d6e:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
   10d72:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   10d74:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   10d76:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   10d78:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   10d7c:	9202      	str	r2, [sp, #8]
   10d7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10d80:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   10d82:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   10d84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10d86:	9200      	str	r2, [sp, #0]
   10d88:	4642      	mov	r2, r8
{
   10d8a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   10d8c:	f7fc fcc6 	bl	d71c <arch_new_thread>
	if (!_current) {
   10d90:	4b04      	ldr	r3, [pc, #16]	; (10da4 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   10d92:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   10d94:	689b      	ldr	r3, [r3, #8]
   10d96:	b103      	cbz	r3, 10d9a <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   10d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
   10d9a:	6723      	str	r3, [r4, #112]	; 0x70
}
   10d9c:	4640      	mov	r0, r8
   10d9e:	b004      	add	sp, #16
   10da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10da4:	200007e4 	.word	0x200007e4

00010da8 <z_impl_k_thread_create>:
{
   10da8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10daa:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   10dac:	2700      	movs	r7, #0
   10dae:	9705      	str	r7, [sp, #20]
   10db0:	9f10      	ldr	r7, [sp, #64]	; 0x40
   10db2:	9704      	str	r7, [sp, #16]
   10db4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   10db6:	9703      	str	r7, [sp, #12]
   10db8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   10dba:	9702      	str	r7, [sp, #8]
{
   10dbc:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   10dc0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   10dc2:	9701      	str	r7, [sp, #4]
   10dc4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   10dc6:	9700      	str	r7, [sp, #0]
{
   10dc8:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   10dca:	f7ff ffbb 	bl	10d44 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   10dce:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   10dd2:	bf08      	it	eq
   10dd4:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   10dd8:	d005      	beq.n	10de6 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   10dda:	ea55 0306 	orrs.w	r3, r5, r6
   10dde:	d105      	bne.n	10dec <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   10de0:	4620      	mov	r0, r4
   10de2:	f000 fb63 	bl	114ac <z_sched_start>
}
   10de6:	4620      	mov	r0, r4
   10de8:	b007      	add	sp, #28
   10dea:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   10dec:	4903      	ldr	r1, [pc, #12]	; (10dfc <z_impl_k_thread_create+0x54>)
   10dee:	4632      	mov	r2, r6
   10df0:	462b      	mov	r3, r5
   10df2:	f104 0018 	add.w	r0, r4, #24
   10df6:	f000 fda3 	bl	11940 <z_add_timeout>
   10dfa:	e7f4      	b.n	10de6 <z_impl_k_thread_create+0x3e>
   10dfc:	00014c85 	.word	0x00014c85

00010e00 <z_init_static_threads>:
{
   10e00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10e04:	4c29      	ldr	r4, [pc, #164]	; (10eac <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   10e06:	4d2a      	ldr	r5, [pc, #168]	; (10eb0 <z_init_static_threads+0xb0>)
{
   10e08:	b087      	sub	sp, #28
   10e0a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   10e0c:	42ae      	cmp	r6, r5
   10e0e:	f104 0430 	add.w	r4, r4, #48	; 0x30
   10e12:	d30f      	bcc.n	10e34 <z_init_static_threads+0x34>
	k_sched_lock();
   10e14:	f000 fa64 	bl	112e0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   10e18:	4c24      	ldr	r4, [pc, #144]	; (10eac <z_init_static_threads+0xac>)
   10e1a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 10eb4 <z_init_static_threads+0xb4>
   10e1e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   10e22:	f240 37e7 	movw	r7, #999	; 0x3e7
   10e26:	42ac      	cmp	r4, r5
   10e28:	d320      	bcc.n	10e6c <z_init_static_threads+0x6c>
}
   10e2a:	b007      	add	sp, #28
   10e2c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   10e30:	f000 bbde 	b.w	115f0 <k_sched_unlock>
		z_setup_new_thread(
   10e34:	f854 3c04 	ldr.w	r3, [r4, #-4]
   10e38:	9305      	str	r3, [sp, #20]
   10e3a:	f854 3c10 	ldr.w	r3, [r4, #-16]
   10e3e:	9304      	str	r3, [sp, #16]
   10e40:	f854 3c14 	ldr.w	r3, [r4, #-20]
   10e44:	9303      	str	r3, [sp, #12]
   10e46:	f854 3c18 	ldr.w	r3, [r4, #-24]
   10e4a:	9302      	str	r3, [sp, #8]
   10e4c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   10e50:	9301      	str	r3, [sp, #4]
   10e52:	f854 3c20 	ldr.w	r3, [r4, #-32]
   10e56:	9300      	str	r3, [sp, #0]
   10e58:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   10e5c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   10e60:	f7ff ff70 	bl	10d44 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   10e64:	f854 3c30 	ldr.w	r3, [r4, #-48]
   10e68:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   10e6a:	e7ce      	b.n	10e0a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   10e6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10e6e:	1c5a      	adds	r2, r3, #1
   10e70:	d00d      	beq.n	10e8e <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   10e72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10e76:	2100      	movs	r1, #0
   10e78:	4638      	mov	r0, r7
   10e7a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   10e7e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   10e82:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   10e86:	d104      	bne.n	10e92 <z_init_static_threads+0x92>
	z_sched_start(thread);
   10e88:	4640      	mov	r0, r8
   10e8a:	f000 fb0f 	bl	114ac <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   10e8e:	3430      	adds	r4, #48	; 0x30
   10e90:	e7c9      	b.n	10e26 <z_init_static_threads+0x26>
   10e92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10e96:	2300      	movs	r3, #0
   10e98:	f7fb fa32 	bl	c300 <__aeabi_uldivmod>
   10e9c:	4602      	mov	r2, r0
   10e9e:	460b      	mov	r3, r1
   10ea0:	f108 0018 	add.w	r0, r8, #24
   10ea4:	4649      	mov	r1, r9
   10ea6:	f000 fd4b 	bl	11940 <z_add_timeout>
   10eaa:	e7f0      	b.n	10e8e <z_init_static_threads+0x8e>
   10eac:	20000144 	.word	0x20000144
   10eb0:	20000144 	.word	0x20000144
   10eb4:	00014c85 	.word	0x00014c85

00010eb8 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   10eb8:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   10eba:	4c0b      	ldr	r4, [pc, #44]	; (10ee8 <idle+0x30>)
	return !z_sys_post_kernel;
   10ebc:	4d0b      	ldr	r5, [pc, #44]	; (10eec <idle+0x34>)
	__asm__ volatile(
   10ebe:	f04f 0220 	mov.w	r2, #32
   10ec2:	f3ef 8311 	mrs	r3, BASEPRI
   10ec6:	f382 8812 	msr	BASEPRI_MAX, r2
   10eca:	f3bf 8f6f 	isb	sy
   10ece:	f003 ff80 	bl	14dd2 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   10ed2:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   10ed4:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   10ed6:	b913      	cbnz	r3, 10ede <idle+0x26>
	arch_cpu_idle();
   10ed8:	f7fc fb5e 	bl	d598 <arch_cpu_idle>
}
   10edc:	e7ef      	b.n	10ebe <idle+0x6>
   10ede:	f7fc fa7b 	bl	d3d8 <pm_system_suspend>
   10ee2:	2800      	cmp	r0, #0
   10ee4:	d1eb      	bne.n	10ebe <idle+0x6>
   10ee6:	e7f7      	b.n	10ed8 <idle+0x20>
   10ee8:	200007e4 	.word	0x200007e4
   10eec:	20000c78 	.word	0x20000c78

00010ef0 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   10ef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10ef2:	4611      	mov	r1, r2
   10ef4:	f04f 0220 	mov.w	r2, #32
   10ef8:	f3ef 8511 	mrs	r5, BASEPRI
   10efc:	f382 8812 	msr	BASEPRI_MAX, r2
   10f00:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   10f04:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   10f06:	b19c      	cbz	r4, 10f30 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   10f08:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   10f0a:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   10f0c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   10f10:	4294      	cmp	r4, r2
	list->head = node;
   10f12:	6003      	str	r3, [r0, #0]
	list->tail = node;
   10f14:	bf08      	it	eq
   10f16:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   10f18:	2101      	movs	r1, #1
   10f1a:	4620      	mov	r0, r4
   10f1c:	f003 fdac 	bl	14a78 <z_queue_node_peek>
   10f20:	4604      	mov	r4, r0
	__asm__ volatile(
   10f22:	f385 8811 	msr	BASEPRI, r5
   10f26:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   10f2a:	4620      	mov	r0, r4
   10f2c:	b003      	add	sp, #12
   10f2e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   10f30:	ea51 0203 	orrs.w	r2, r1, r3
   10f34:	d0f5      	beq.n	10f22 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   10f36:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   10f3a:	e9cd 1300 	strd	r1, r3, [sp]
   10f3e:	4610      	mov	r0, r2
   10f40:	4629      	mov	r1, r5
   10f42:	f000 fb0f 	bl	11564 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   10f46:	2800      	cmp	r0, #0
   10f48:	d1ef      	bne.n	10f2a <z_impl_k_queue_get+0x3a>
   10f4a:	4b02      	ldr	r3, [pc, #8]	; (10f54 <z_impl_k_queue_get+0x64>)
   10f4c:	689b      	ldr	r3, [r3, #8]
   10f4e:	695c      	ldr	r4, [r3, #20]
   10f50:	e7eb      	b.n	10f2a <z_impl_k_queue_get+0x3a>
   10f52:	bf00      	nop
   10f54:	200007e4 	.word	0x200007e4

00010f58 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   10f58:	b538      	push	{r3, r4, r5, lr}
   10f5a:	4604      	mov	r4, r0
	__asm__ volatile(
   10f5c:	f04f 0320 	mov.w	r3, #32
   10f60:	f3ef 8511 	mrs	r5, BASEPRI
   10f64:	f383 8812 	msr	BASEPRI_MAX, r3
   10f68:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   10f6c:	f003 fed6 	bl	14d1c <z_unpend_first_thread>

	if (thread != NULL) {
   10f70:	b148      	cbz	r0, 10f86 <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   10f72:	2200      	movs	r2, #0
   10f74:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   10f76:	f003 fe75 	bl	14c64 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   10f7a:	4629      	mov	r1, r5
   10f7c:	4805      	ldr	r0, [pc, #20]	; (10f94 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   10f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   10f82:	f000 b99b 	b.w	112bc <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   10f86:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   10f8a:	429a      	cmp	r2, r3
   10f8c:	bf18      	it	ne
   10f8e:	3301      	addne	r3, #1
   10f90:	60a3      	str	r3, [r4, #8]
}
   10f92:	e7f2      	b.n	10f7a <z_impl_k_sem_give+0x22>
   10f94:	20000c79 	.word	0x20000c79

00010f98 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   10f98:	b513      	push	{r0, r1, r4, lr}
   10f9a:	f04f 0420 	mov.w	r4, #32
   10f9e:	f3ef 8111 	mrs	r1, BASEPRI
   10fa2:	f384 8812 	msr	BASEPRI_MAX, r4
   10fa6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   10faa:	6884      	ldr	r4, [r0, #8]
   10fac:	b144      	cbz	r4, 10fc0 <z_impl_k_sem_take+0x28>
		sem->count--;
   10fae:	3c01      	subs	r4, #1
   10fb0:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   10fb2:	f381 8811 	msr	BASEPRI, r1
   10fb6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   10fba:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   10fbc:	b002      	add	sp, #8
   10fbe:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   10fc0:	ea52 0403 	orrs.w	r4, r2, r3
   10fc4:	d106      	bne.n	10fd4 <z_impl_k_sem_take+0x3c>
   10fc6:	f381 8811 	msr	BASEPRI, r1
   10fca:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   10fce:	f06f 000f 	mvn.w	r0, #15
   10fd2:	e7f3      	b.n	10fbc <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   10fd4:	e9cd 2300 	strd	r2, r3, [sp]
   10fd8:	4602      	mov	r2, r0
   10fda:	4802      	ldr	r0, [pc, #8]	; (10fe4 <z_impl_k_sem_take+0x4c>)
   10fdc:	f000 fac2 	bl	11564 <z_pend_curr>
	return ret;
   10fe0:	e7ec      	b.n	10fbc <z_impl_k_sem_take+0x24>
   10fe2:	bf00      	nop
   10fe4:	20000c79 	.word	0x20000c79

00010fe8 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   10fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   10fec:	4e47      	ldr	r6, [pc, #284]	; (1110c <work_queue_main+0x124>)
   10fee:	b085      	sub	sp, #20
   10ff0:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   10ff2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   10ff6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   10ffa:	f04f 0320 	mov.w	r3, #32
   10ffe:	f3ef 8711 	mrs	r7, BASEPRI
   11002:	f383 8812 	msr	BASEPRI_MAX, r3
   11006:	f3bf 8f6f 	isb	sy
   1100a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   1100e:	b98d      	cbnz	r5, 11034 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   11010:	2102      	movs	r1, #2
   11012:	f104 0098 	add.w	r0, r4, #152	; 0x98
   11016:	f003 fd9b 	bl	14b50 <flag_test_and_clear>
   1101a:	2800      	cmp	r0, #0
   1101c:	d135      	bne.n	1108a <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1101e:	2300      	movs	r3, #0
   11020:	e9cd 8900 	strd	r8, r9, [sp]
   11024:	9302      	str	r3, [sp, #8]
   11026:	f104 0288 	add.w	r2, r4, #136	; 0x88
   1102a:	4639      	mov	r1, r7
   1102c:	4838      	ldr	r0, [pc, #224]	; (11110 <work_queue_main+0x128>)
   1102e:	f000 fc11 	bl	11854 <z_sched_wait>
			continue;
   11032:	e7e2      	b.n	10ffa <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11034:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   11038:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1103a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1103e:	4295      	cmp	r5, r2
   11040:	d101      	bne.n	11046 <work_queue_main+0x5e>
	list->tail = node;
   11042:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   11046:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1104a:	f043 0302 	orr.w	r3, r3, #2
   1104e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   11052:	68eb      	ldr	r3, [r5, #12]
   11054:	f023 0304 	bic.w	r3, r3, #4
   11058:	f043 0301 	orr.w	r3, r3, #1
   1105c:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   1105e:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   11060:	f387 8811 	msr	BASEPRI, r7
   11064:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   11068:	4628      	mov	r0, r5
   1106a:	4798      	blx	r3
	__asm__ volatile(
   1106c:	f04f 0320 	mov.w	r3, #32
   11070:	f3ef 8b11 	mrs	fp, BASEPRI
   11074:	f383 8812 	msr	BASEPRI_MAX, r3
   11078:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1107c:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1107e:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   11080:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   11084:	d40b      	bmi.n	1109e <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   11086:	60ea      	str	r2, [r5, #12]
   11088:	e00e      	b.n	110a8 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1108a:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1108e:	2200      	movs	r2, #0
   11090:	2101      	movs	r1, #1
   11092:	4628      	mov	r0, r5
   11094:	f003 fe6a 	bl	14d6c <z_sched_wake>
   11098:	2800      	cmp	r0, #0
   1109a:	d1f8      	bne.n	1108e <work_queue_main+0xa6>
   1109c:	e7bf      	b.n	1101e <work_queue_main+0x36>
	return list->head;
   1109e:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   110a0:	f023 0303 	bic.w	r3, r3, #3
   110a4:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   110a6:	b970      	cbnz	r0, 110c6 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   110a8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   110ac:	f023 0302 	bic.w	r3, r3, #2
   110b0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   110b4:	f38b 8811 	msr	BASEPRI, fp
   110b8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   110bc:	05d8      	lsls	r0, r3, #23
   110be:	d49c      	bmi.n	10ffa <work_queue_main+0x12>
	z_impl_k_yield();
   110c0:	f000 fabe 	bl	11640 <z_impl_k_yield>
}
   110c4:	e799      	b.n	10ffa <work_queue_main+0x12>
	return node->next;
   110c6:	2700      	movs	r7, #0
   110c8:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   110cc:	463b      	mov	r3, r7
		if (wc->work == work) {
   110ce:	6842      	ldr	r2, [r0, #4]
   110d0:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   110d2:	4601      	mov	r1, r0
		if (wc->work == work) {
   110d4:	d10c      	bne.n	110f0 <work_queue_main+0x108>
	return node->next;
   110d6:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   110d8:	b997      	cbnz	r7, 11100 <work_queue_main+0x118>
   110da:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   110dc:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   110de:	4282      	cmp	r2, r0
   110e0:	d100      	bne.n	110e4 <work_queue_main+0xfc>
	list->tail = node;
   110e2:	6071      	str	r1, [r6, #4]
	parent->next = child;
   110e4:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   110e8:	f7ff ff36 	bl	10f58 <z_impl_k_sem_give>
}
   110ec:	4639      	mov	r1, r7
   110ee:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   110f0:	f1ba 0f00 	cmp.w	sl, #0
   110f4:	d0d8      	beq.n	110a8 <work_queue_main+0xc0>
	return node->next;
   110f6:	4650      	mov	r0, sl
   110f8:	460f      	mov	r7, r1
   110fa:	f8da a000 	ldr.w	sl, [sl]
   110fe:	e7e6      	b.n	110ce <work_queue_main+0xe6>
	return list->tail;
   11100:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   11102:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   11104:	4290      	cmp	r0, r2
	list->tail = node;
   11106:	bf08      	it	eq
   11108:	6077      	streq	r7, [r6, #4]
}
   1110a:	e7eb      	b.n	110e4 <work_queue_main+0xfc>
   1110c:	2000080c 	.word	0x2000080c
   11110:	20000c79 	.word	0x20000c79

00011114 <submit_to_queue_locked>:
{
   11114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   11116:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   11118:	079a      	lsls	r2, r3, #30
{
   1111a:	4604      	mov	r4, r0
   1111c:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1111e:	f3c3 0540 	ubfx	r5, r3, #1, #1
   11122:	d41f      	bmi.n	11164 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   11124:	075f      	lsls	r7, r3, #29
   11126:	d41f      	bmi.n	11168 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   11128:	680a      	ldr	r2, [r1, #0]
   1112a:	b90a      	cbnz	r2, 11130 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1112c:	6882      	ldr	r2, [r0, #8]
   1112e:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   11130:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   11132:	bf44      	itt	mi
   11134:	68a3      	ldrmi	r3, [r4, #8]
   11136:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   11138:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   1113a:	bf4c      	ite	mi
   1113c:	2502      	movmi	r5, #2
		ret = 1;
   1113e:	2501      	movpl	r5, #1
	if (queue == NULL) {
   11140:	b37f      	cbz	r7, 111a2 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   11142:	4b1b      	ldr	r3, [pc, #108]	; (111b0 <submit_to_queue_locked+0x9c>)
   11144:	689b      	ldr	r3, [r3, #8]
   11146:	42bb      	cmp	r3, r7
   11148:	d111      	bne.n	1116e <submit_to_queue_locked+0x5a>
   1114a:	f003 fc23 	bl	14994 <k_is_in_isr>
   1114e:	f080 0001 	eor.w	r0, r0, #1
   11152:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   11154:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   11158:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1115a:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1115e:	d523      	bpl.n	111a8 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   11160:	b13a      	cbz	r2, 11172 <submit_to_queue_locked+0x5e>
   11162:	b940      	cbnz	r0, 11176 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   11164:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   11168:	2300      	movs	r3, #0
   1116a:	6033      	str	r3, [r6, #0]
	return ret;
   1116c:	e013      	b.n	11196 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1116e:	2000      	movs	r0, #0
   11170:	e7f0      	b.n	11154 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   11172:	071b      	lsls	r3, r3, #28
   11174:	d4f6      	bmi.n	11164 <submit_to_queue_locked+0x50>
	parent->next = child;
   11176:	2300      	movs	r3, #0
   11178:	6023      	str	r3, [r4, #0]
	return list->tail;
   1117a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   1117e:	b963      	cbnz	r3, 1119a <submit_to_queue_locked+0x86>
	list->head = node;
   11180:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   11184:	4638      	mov	r0, r7
   11186:	f003 fcee 	bl	14b66 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   1118a:	68e3      	ldr	r3, [r4, #12]
   1118c:	f043 0304 	orr.w	r3, r3, #4
   11190:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   11192:	6833      	ldr	r3, [r6, #0]
   11194:	60a3      	str	r3, [r4, #8]
}
   11196:	4628      	mov	r0, r5
   11198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1119a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1119c:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   111a0:	e7f0      	b.n	11184 <submit_to_queue_locked+0x70>
		return -EINVAL;
   111a2:	f06f 0515 	mvn.w	r5, #21
   111a6:	e7df      	b.n	11168 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   111a8:	f06f 0512 	mvn.w	r5, #18
   111ac:	e7dc      	b.n	11168 <submit_to_queue_locked+0x54>
   111ae:	bf00      	nop
   111b0:	200007e4 	.word	0x200007e4

000111b4 <k_work_submit>:
{
   111b4:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   111b6:	4801      	ldr	r0, [pc, #4]	; (111bc <k_work_submit+0x8>)
   111b8:	f003 bce5 	b.w	14b86 <k_work_submit_to_queue>
   111bc:	200002f8 	.word	0x200002f8

000111c0 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   111c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   111c2:	b089      	sub	sp, #36	; 0x24
   111c4:	4604      	mov	r4, r0
	list->head = NULL;
   111c6:	2000      	movs	r0, #0
	list->tail = NULL;
   111c8:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   111cc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   111ce:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   111d2:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   111d6:	f104 0090 	add.w	r0, r4, #144	; 0x90
   111da:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   111de:	b31d      	cbz	r5, 11228 <k_work_queue_start+0x68>
   111e0:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   111e2:	2800      	cmp	r0, #0
   111e4:	f240 1001 	movw	r0, #257	; 0x101
   111e8:	bf08      	it	eq
   111ea:	2001      	moveq	r0, #1
	*flagp = flags;
   111ec:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   111f0:	2000      	movs	r0, #0
   111f2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   111f6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   111fa:	e9cd 3003 	strd	r3, r0, [sp, #12]
   111fe:	e9cd 0001 	strd	r0, r0, [sp, #4]
   11202:	e9cd 6706 	strd	r6, r7, [sp, #24]
   11206:	4b09      	ldr	r3, [pc, #36]	; (1122c <k_work_queue_start+0x6c>)
   11208:	9400      	str	r4, [sp, #0]
   1120a:	4620      	mov	r0, r4
   1120c:	f7ff fdcc 	bl	10da8 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   11210:	b125      	cbz	r5, 1121c <k_work_queue_start+0x5c>
   11212:	6829      	ldr	r1, [r5, #0]
   11214:	b111      	cbz	r1, 1121c <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   11216:	4620      	mov	r0, r4
   11218:	f003 fbc2 	bl	149a0 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1121c:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1121e:	b009      	add	sp, #36	; 0x24
   11220:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   11224:	f003 bbbf 	b.w	149a6 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   11228:	2001      	movs	r0, #1
   1122a:	e7df      	b.n	111ec <k_work_queue_start+0x2c>
   1122c:	00010fe9 	.word	0x00010fe9

00011230 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   11230:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   11232:	4d07      	ldr	r5, [pc, #28]	; (11250 <z_reset_time_slice+0x20>)
   11234:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   11236:	b154      	cbz	r4, 1124e <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   11238:	f7fe fd18 	bl	fc6c <sys_clock_elapsed>
   1123c:	4b05      	ldr	r3, [pc, #20]	; (11254 <z_reset_time_slice+0x24>)
   1123e:	4404      	add	r4, r0
   11240:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   11242:	6828      	ldr	r0, [r5, #0]
   11244:	2100      	movs	r1, #0
	}
}
   11246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   1124a:	f003 bdd2 	b.w	14df2 <z_set_timeout_expiry>
}
   1124e:	bd38      	pop	{r3, r4, r5, pc}
   11250:	2000081c 	.word	0x2000081c
   11254:	200007e4 	.word	0x200007e4

00011258 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   11258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1125a:	4604      	mov	r4, r0
   1125c:	460d      	mov	r5, r1
	__asm__ volatile(
   1125e:	f04f 0320 	mov.w	r3, #32
   11262:	f3ef 8711 	mrs	r7, BASEPRI
   11266:	f383 8812 	msr	BASEPRI_MAX, r3
   1126a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1126e:	4e10      	ldr	r6, [pc, #64]	; (112b0 <k_sched_time_slice_set+0x58>)
   11270:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   11272:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   11276:	f240 30e7 	movw	r0, #999	; 0x3e7
   1127a:	6131      	str	r1, [r6, #16]
   1127c:	2300      	movs	r3, #0
   1127e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11282:	fbe4 010c 	umlal	r0, r1, r4, ip
   11286:	f7fb f83b 	bl	c300 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1128a:	2c00      	cmp	r4, #0
   1128c:	4b09      	ldr	r3, [pc, #36]	; (112b4 <k_sched_time_slice_set+0x5c>)
   1128e:	dc0a      	bgt.n	112a6 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
   11290:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   11292:	4b09      	ldr	r3, [pc, #36]	; (112b8 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   11294:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
   11296:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   11298:	f7ff ffca 	bl	11230 <z_reset_time_slice>
	__asm__ volatile(
   1129c:	f387 8811 	msr	BASEPRI, r7
   112a0:	f3bf 8f6f 	isb	sy
	}
}
   112a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
   112a6:	2802      	cmp	r0, #2
   112a8:	bfb8      	it	lt
   112aa:	2002      	movlt	r0, #2
   112ac:	e7f0      	b.n	11290 <k_sched_time_slice_set+0x38>
   112ae:	bf00      	nop
   112b0:	200007e4 	.word	0x200007e4
   112b4:	2000081c 	.word	0x2000081c
   112b8:	20000818 	.word	0x20000818

000112bc <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   112bc:	b949      	cbnz	r1, 112d2 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   112be:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   112c2:	b930      	cbnz	r0, 112d2 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   112c4:	4b05      	ldr	r3, [pc, #20]	; (112dc <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   112c6:	69da      	ldr	r2, [r3, #28]
   112c8:	689b      	ldr	r3, [r3, #8]
   112ca:	429a      	cmp	r2, r3
   112cc:	d001      	beq.n	112d2 <z_reschedule+0x16>
	ret = arch_swap(key);
   112ce:	f7fc b9d1 	b.w	d674 <arch_swap>
   112d2:	f381 8811 	msr	BASEPRI, r1
   112d6:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   112da:	4770      	bx	lr
   112dc:	200007e4 	.word	0x200007e4

000112e0 <k_sched_lock>:
	__asm__ volatile(
   112e0:	f04f 0320 	mov.w	r3, #32
   112e4:	f3ef 8111 	mrs	r1, BASEPRI
   112e8:	f383 8812 	msr	BASEPRI_MAX, r3
   112ec:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   112f0:	4b04      	ldr	r3, [pc, #16]	; (11304 <k_sched_lock+0x24>)
   112f2:	689a      	ldr	r2, [r3, #8]
   112f4:	7bd3      	ldrb	r3, [r2, #15]
   112f6:	3b01      	subs	r3, #1
   112f8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   112fa:	f381 8811 	msr	BASEPRI, r1
   112fe:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   11302:	4770      	bx	lr
   11304:	200007e4 	.word	0x200007e4

00011308 <update_cache>:
{
   11308:	b538      	push	{r3, r4, r5, lr}
   1130a:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   1130c:	480c      	ldr	r0, [pc, #48]	; (11340 <update_cache+0x38>)
   1130e:	4d0d      	ldr	r5, [pc, #52]	; (11344 <update_cache+0x3c>)
   11310:	f003 fca2 	bl	14c58 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   11314:	4604      	mov	r4, r0
   11316:	b900      	cbnz	r0, 1131a <update_cache+0x12>
   11318:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   1131a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   1131c:	b94a      	cbnz	r2, 11332 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   1131e:	7b5a      	ldrb	r2, [r3, #13]
   11320:	06d2      	lsls	r2, r2, #27
   11322:	d106      	bne.n	11332 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   11324:	69a2      	ldr	r2, [r4, #24]
   11326:	b922      	cbnz	r2, 11332 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   11328:	89da      	ldrh	r2, [r3, #14]
   1132a:	2a7f      	cmp	r2, #127	; 0x7f
   1132c:	d901      	bls.n	11332 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   1132e:	61eb      	str	r3, [r5, #28]
}
   11330:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   11332:	429c      	cmp	r4, r3
   11334:	d002      	beq.n	1133c <update_cache+0x34>
			z_reset_time_slice(thread);
   11336:	4620      	mov	r0, r4
   11338:	f7ff ff7a 	bl	11230 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1133c:	61ec      	str	r4, [r5, #28]
}
   1133e:	e7f7      	b.n	11330 <update_cache+0x28>
   11340:	20000804 	.word	0x20000804
   11344:	200007e4 	.word	0x200007e4

00011348 <move_thread_to_end_of_prio_q>:
{
   11348:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1134a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1134e:	7b43      	ldrb	r3, [r0, #13]
   11350:	2a00      	cmp	r2, #0
{
   11352:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   11354:	da04      	bge.n	11360 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1135a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   1135c:	f003 fc30 	bl	14bc0 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   11360:	7b4b      	ldrb	r3, [r1, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   11362:	4a15      	ldr	r2, [pc, #84]	; (113b8 <move_thread_to_end_of_prio_q+0x70>)
   11364:	f063 037f 	orn	r3, r3, #127	; 0x7f
   11368:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1136a:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1136e:	f102 0520 	add.w	r5, r2, #32
   11372:	42ab      	cmp	r3, r5
   11374:	d01b      	beq.n	113ae <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11376:	b1d3      	cbz	r3, 113ae <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   11378:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   1137c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   11380:	4286      	cmp	r6, r0
   11382:	d00f      	beq.n	113a4 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   11384:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   11386:	2800      	cmp	r0, #0
   11388:	dd0c      	ble.n	113a4 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1138a:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1138c:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   11390:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   11392:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   11394:	6890      	ldr	r0, [r2, #8]
   11396:	1a43      	subs	r3, r0, r1
   11398:	4258      	negs	r0, r3
}
   1139a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1139e:	4158      	adcs	r0, r3
   113a0:	f7ff bfb2 	b.w	11308 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   113a4:	42a3      	cmp	r3, r4
   113a6:	d002      	beq.n	113ae <move_thread_to_end_of_prio_q+0x66>
   113a8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   113aa:	2b00      	cmp	r3, #0
   113ac:	d1e6      	bne.n	1137c <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   113ae:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   113b2:	6021      	str	r1, [r4, #0]
	list->tail = node;
   113b4:	6251      	str	r1, [r2, #36]	; 0x24
}
   113b6:	e7ed      	b.n	11394 <move_thread_to_end_of_prio_q+0x4c>
   113b8:	200007e4 	.word	0x200007e4

000113bc <z_time_slice>:
{
   113bc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   113be:	f04f 0320 	mov.w	r3, #32
   113c2:	f3ef 8511 	mrs	r5, BASEPRI
   113c6:	f383 8812 	msr	BASEPRI_MAX, r3
   113ca:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   113ce:	4b17      	ldr	r3, [pc, #92]	; (1142c <z_time_slice+0x70>)
   113d0:	4a17      	ldr	r2, [pc, #92]	; (11430 <z_time_slice+0x74>)
   113d2:	689c      	ldr	r4, [r3, #8]
   113d4:	6811      	ldr	r1, [r2, #0]
   113d6:	428c      	cmp	r4, r1
   113d8:	d107      	bne.n	113ea <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   113da:	4620      	mov	r0, r4
   113dc:	f7ff ff28 	bl	11230 <z_reset_time_slice>
	__asm__ volatile(
   113e0:	f385 8811 	msr	BASEPRI, r5
   113e4:	f3bf 8f6f 	isb	sy
}
   113e8:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   113ea:	2100      	movs	r1, #0
   113ec:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   113ee:	4a11      	ldr	r2, [pc, #68]	; (11434 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   113f0:	6812      	ldr	r2, [r2, #0]
   113f2:	b1c2      	cbz	r2, 11426 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   113f4:	89e2      	ldrh	r2, [r4, #14]
   113f6:	2a7f      	cmp	r2, #127	; 0x7f
   113f8:	d815      	bhi.n	11426 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   113fa:	7b62      	ldrb	r2, [r4, #13]
   113fc:	06d2      	lsls	r2, r2, #27
   113fe:	d112      	bne.n	11426 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   11400:	4a0d      	ldr	r2, [pc, #52]	; (11438 <z_time_slice+0x7c>)
   11402:	f994 100e 	ldrsb.w	r1, [r4, #14]
   11406:	6812      	ldr	r2, [r2, #0]
   11408:	4291      	cmp	r1, r2
   1140a:	db0c      	blt.n	11426 <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
   1140c:	4a0b      	ldr	r2, [pc, #44]	; (1143c <z_time_slice+0x80>)
   1140e:	4294      	cmp	r4, r2
   11410:	d009      	beq.n	11426 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   11412:	691a      	ldr	r2, [r3, #16]
   11414:	4282      	cmp	r2, r0
   11416:	dc03      	bgt.n	11420 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   11418:	4620      	mov	r0, r4
   1141a:	f7ff ff95 	bl	11348 <move_thread_to_end_of_prio_q>
   1141e:	e7dc      	b.n	113da <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   11420:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   11422:	611a      	str	r2, [r3, #16]
   11424:	e7dc      	b.n	113e0 <z_time_slice+0x24>
   11426:	2200      	movs	r2, #0
   11428:	e7fb      	b.n	11422 <z_time_slice+0x66>
   1142a:	bf00      	nop
   1142c:	200007e4 	.word	0x200007e4
   11430:	20000814 	.word	0x20000814
   11434:	2000081c 	.word	0x2000081c
   11438:	20000818 	.word	0x20000818
   1143c:	200001f0 	.word	0x200001f0

00011440 <ready_thread>:
{
   11440:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   11442:	f990 200d 	ldrsb.w	r2, [r0, #13]
   11446:	7b43      	ldrb	r3, [r0, #13]
   11448:	2a00      	cmp	r2, #0
   1144a:	db2a      	blt.n	114a2 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1144c:	06da      	lsls	r2, r3, #27
   1144e:	d128      	bne.n	114a2 <ready_thread+0x62>
   11450:	6982      	ldr	r2, [r0, #24]
   11452:	bb32      	cbnz	r2, 114a2 <ready_thread+0x62>
	return list->head == list;
   11454:	4a14      	ldr	r2, [pc, #80]	; (114a8 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   11456:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1145a:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   1145c:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11460:	f102 0520 	add.w	r5, r2, #32
   11464:	42ab      	cmp	r3, r5
   11466:	d017      	beq.n	11498 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11468:	b1b3      	cbz	r3, 11498 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   1146a:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1146e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   11472:	428e      	cmp	r6, r1
   11474:	d00b      	beq.n	1148e <ready_thread+0x4e>
		return b2 - b1;
   11476:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   11478:	2900      	cmp	r1, #0
   1147a:	dd08      	ble.n	1148e <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   1147c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1147e:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   11482:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   11484:	6058      	str	r0, [r3, #4]
}
   11486:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   11488:	2000      	movs	r0, #0
   1148a:	f7ff bf3d 	b.w	11308 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1148e:	42a3      	cmp	r3, r4
   11490:	d002      	beq.n	11498 <ready_thread+0x58>
   11492:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11494:	2b00      	cmp	r3, #0
   11496:	d1ea      	bne.n	1146e <ready_thread+0x2e>
	node->prev = tail;
   11498:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   1149c:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1149e:	6250      	str	r0, [r2, #36]	; 0x24
}
   114a0:	e7f1      	b.n	11486 <ready_thread+0x46>
}
   114a2:	bc70      	pop	{r4, r5, r6}
   114a4:	4770      	bx	lr
   114a6:	bf00      	nop
   114a8:	200007e4 	.word	0x200007e4

000114ac <z_sched_start>:
{
   114ac:	b510      	push	{r4, lr}
	__asm__ volatile(
   114ae:	f04f 0220 	mov.w	r2, #32
   114b2:	f3ef 8411 	mrs	r4, BASEPRI
   114b6:	f382 8812 	msr	BASEPRI_MAX, r2
   114ba:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   114be:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   114c0:	0751      	lsls	r1, r2, #29
   114c2:	d404      	bmi.n	114ce <z_sched_start+0x22>
	__asm__ volatile(
   114c4:	f384 8811 	msr	BASEPRI, r4
   114c8:	f3bf 8f6f 	isb	sy
}
   114cc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   114ce:	f022 0204 	bic.w	r2, r2, #4
   114d2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   114d4:	f7ff ffb4 	bl	11440 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   114d8:	4621      	mov	r1, r4
   114da:	4802      	ldr	r0, [pc, #8]	; (114e4 <z_sched_start+0x38>)
}
   114dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   114e0:	f7ff beec 	b.w	112bc <z_reschedule>
   114e4:	20000c79 	.word	0x20000c79

000114e8 <unready_thread>:
{
   114e8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   114ea:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   114ee:	7b43      	ldrb	r3, [r0, #13]
   114f0:	2a00      	cmp	r2, #0
{
   114f2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   114f4:	da04      	bge.n	11500 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   114f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   114fa:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   114fc:	f003 fb60 	bl	14bc0 <sys_dlist_remove>
	update_cache(thread == _current);
   11500:	4b04      	ldr	r3, [pc, #16]	; (11514 <unready_thread+0x2c>)
   11502:	6898      	ldr	r0, [r3, #8]
   11504:	1a43      	subs	r3, r0, r1
   11506:	4258      	negs	r0, r3
   11508:	4158      	adcs	r0, r3
}
   1150a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1150e:	f7ff befb 	b.w	11308 <update_cache>
   11512:	bf00      	nop
   11514:	200007e4 	.word	0x200007e4

00011518 <pend>:
{
   11518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1151c:	4606      	mov	r6, r0
   1151e:	4615      	mov	r5, r2
   11520:	461c      	mov	r4, r3
	__asm__ volatile(
   11522:	f04f 0320 	mov.w	r3, #32
   11526:	f3ef 8711 	mrs	r7, BASEPRI
   1152a:	f383 8812 	msr	BASEPRI_MAX, r3
   1152e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   11532:	f003 fbc9 	bl	14cc8 <add_to_waitq_locked>
	__asm__ volatile(
   11536:	f387 8811 	msr	BASEPRI, r7
   1153a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1153e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   11542:	bf08      	it	eq
   11544:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   11548:	d008      	beq.n	1155c <pend+0x44>
   1154a:	462a      	mov	r2, r5
   1154c:	4623      	mov	r3, r4
   1154e:	f106 0018 	add.w	r0, r6, #24
   11552:	4903      	ldr	r1, [pc, #12]	; (11560 <pend+0x48>)
}
   11554:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11558:	f000 b9f2 	b.w	11940 <z_add_timeout>
   1155c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11560:	00014c85 	.word	0x00014c85

00011564 <z_pend_curr>:
{
   11564:	b510      	push	{r4, lr}
	pending_current = _current;
   11566:	4b07      	ldr	r3, [pc, #28]	; (11584 <z_pend_curr+0x20>)
   11568:	6898      	ldr	r0, [r3, #8]
   1156a:	4b07      	ldr	r3, [pc, #28]	; (11588 <z_pend_curr+0x24>)
{
   1156c:	460c      	mov	r4, r1
	pending_current = _current;
   1156e:	6018      	str	r0, [r3, #0]
{
   11570:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   11572:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   11576:	f7ff ffcf 	bl	11518 <pend>
   1157a:	4620      	mov	r0, r4
}
   1157c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11580:	f7fc b878 	b.w	d674 <arch_swap>
   11584:	200007e4 	.word	0x200007e4
   11588:	20000814 	.word	0x20000814

0001158c <z_impl_k_thread_suspend>:
{
   1158c:	b570      	push	{r4, r5, r6, lr}
   1158e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   11590:	3018      	adds	r0, #24
   11592:	f003 fc08 	bl	14da6 <z_abort_timeout>
	__asm__ volatile(
   11596:	f04f 0320 	mov.w	r3, #32
   1159a:	f3ef 8611 	mrs	r6, BASEPRI
   1159e:	f383 8812 	msr	BASEPRI_MAX, r3
   115a2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   115a6:	f994 200d 	ldrsb.w	r2, [r4, #13]
   115aa:	7b63      	ldrb	r3, [r4, #13]
   115ac:	2a00      	cmp	r2, #0
   115ae:	da05      	bge.n	115bc <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   115b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   115b4:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   115b6:	4620      	mov	r0, r4
   115b8:	f003 fb02 	bl	14bc0 <sys_dlist_remove>
		update_cache(thread == _current);
   115bc:	4d0b      	ldr	r5, [pc, #44]	; (115ec <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   115be:	7b63      	ldrb	r3, [r4, #13]
   115c0:	68a8      	ldr	r0, [r5, #8]
   115c2:	f043 0310 	orr.w	r3, r3, #16
   115c6:	7363      	strb	r3, [r4, #13]
   115c8:	1b03      	subs	r3, r0, r4
   115ca:	4258      	negs	r0, r3
   115cc:	4158      	adcs	r0, r3
   115ce:	f7ff fe9b 	bl	11308 <update_cache>
	__asm__ volatile(
   115d2:	f386 8811 	msr	BASEPRI, r6
   115d6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   115da:	68ab      	ldr	r3, [r5, #8]
   115dc:	42a3      	cmp	r3, r4
   115de:	d103      	bne.n	115e8 <z_impl_k_thread_suspend+0x5c>
}
   115e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   115e4:	f003 bb2e 	b.w	14c44 <z_reschedule_unlocked>
}
   115e8:	bd70      	pop	{r4, r5, r6, pc}
   115ea:	bf00      	nop
   115ec:	200007e4 	.word	0x200007e4

000115f0 <k_sched_unlock>:
{
   115f0:	b510      	push	{r4, lr}
	__asm__ volatile(
   115f2:	f04f 0320 	mov.w	r3, #32
   115f6:	f3ef 8411 	mrs	r4, BASEPRI
   115fa:	f383 8812 	msr	BASEPRI_MAX, r3
   115fe:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   11602:	4b08      	ldr	r3, [pc, #32]	; (11624 <k_sched_unlock+0x34>)
   11604:	689a      	ldr	r2, [r3, #8]
   11606:	7bd3      	ldrb	r3, [r2, #15]
   11608:	3301      	adds	r3, #1
   1160a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1160c:	2000      	movs	r0, #0
   1160e:	f7ff fe7b 	bl	11308 <update_cache>
	__asm__ volatile(
   11612:	f384 8811 	msr	BASEPRI, r4
   11616:	f3bf 8f6f 	isb	sy
}
   1161a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1161e:	f003 bb11 	b.w	14c44 <z_reschedule_unlocked>
   11622:	bf00      	nop
   11624:	200007e4 	.word	0x200007e4

00011628 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   11628:	4b04      	ldr	r3, [pc, #16]	; (1163c <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1162a:	2100      	movs	r1, #0
   1162c:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   11630:	e9c3 2208 	strd	r2, r2, [r3, #32]
   11634:	4608      	mov	r0, r1
   11636:	f7ff be0f 	b.w	11258 <k_sched_time_slice_set>
   1163a:	bf00      	nop
   1163c:	200007e4 	.word	0x200007e4

00011640 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   11640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   11642:	f04f 0320 	mov.w	r3, #32
   11646:	f3ef 8511 	mrs	r5, BASEPRI
   1164a:	f383 8812 	msr	BASEPRI_MAX, r3
   1164e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   11652:	491a      	ldr	r1, [pc, #104]	; (116bc <z_impl_k_yield+0x7c>)
   11654:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11656:	7b43      	ldrb	r3, [r0, #13]
   11658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1165c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1165e:	f003 faaf 	bl	14bc0 <sys_dlist_remove>
	}
	queue_thread(_current);
   11662:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   11664:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   11666:	4608      	mov	r0, r1
   11668:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1166c:	735a      	strb	r2, [r3, #13]
   1166e:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11672:	4282      	cmp	r2, r0
   11674:	d01c      	beq.n	116b0 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11676:	b1da      	cbz	r2, 116b0 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   11678:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   1167a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   1167e:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   11682:	42a6      	cmp	r6, r4
   11684:	d00f      	beq.n	116a6 <z_impl_k_yield+0x66>
		return b2 - b1;
   11686:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   11688:	2c00      	cmp	r4, #0
   1168a:	dd0c      	ble.n	116a6 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   1168c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1168e:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   11692:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   11694:	6053      	str	r3, [r2, #4]
	update_cache(1);
   11696:	2001      	movs	r0, #1
   11698:	f7ff fe36 	bl	11308 <update_cache>
   1169c:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   1169e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   116a2:	f7fb bfe7 	b.w	d674 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   116a6:	42ba      	cmp	r2, r7
   116a8:	d002      	beq.n	116b0 <z_impl_k_yield+0x70>
   116aa:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   116ac:	2a00      	cmp	r2, #0
   116ae:	d1e6      	bne.n	1167e <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   116b0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   116b2:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   116b6:	6013      	str	r3, [r2, #0]
	list->tail = node;
   116b8:	624b      	str	r3, [r1, #36]	; 0x24
}
   116ba:	e7ec      	b.n	11696 <z_impl_k_yield+0x56>
   116bc:	200007e4 	.word	0x200007e4

000116c0 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   116c0:	ea50 0301 	orrs.w	r3, r0, r1
{
   116c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   116c8:	4605      	mov	r5, r0
   116ca:	460e      	mov	r6, r1
	if (ticks == 0) {
   116cc:	d103      	bne.n	116d6 <z_tick_sleep+0x16>
	z_impl_k_yield();
   116ce:	f7ff ffb7 	bl	11640 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   116d2:	2000      	movs	r0, #0
   116d4:	e033      	b.n	1173e <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   116d6:	f06f 0401 	mvn.w	r4, #1
   116da:	1a24      	subs	r4, r4, r0
   116dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   116e0:	eb63 0301 	sbc.w	r3, r3, r1
   116e4:	2c01      	cmp	r4, #1
   116e6:	f173 0300 	sbcs.w	r3, r3, #0
   116ea:	da02      	bge.n	116f2 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   116ec:	f003 fb9b 	bl	14e26 <sys_clock_tick_get_32>
   116f0:	1944      	adds	r4, r0, r5
   116f2:	f04f 0320 	mov.w	r3, #32
   116f6:	f3ef 8811 	mrs	r8, BASEPRI
   116fa:	f383 8812 	msr	BASEPRI_MAX, r3
   116fe:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   11702:	4f10      	ldr	r7, [pc, #64]	; (11744 <z_tick_sleep+0x84>)
   11704:	4b10      	ldr	r3, [pc, #64]	; (11748 <z_tick_sleep+0x88>)
   11706:	68b8      	ldr	r0, [r7, #8]
   11708:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1170a:	f7ff feed 	bl	114e8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1170e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   11710:	490e      	ldr	r1, [pc, #56]	; (1174c <z_tick_sleep+0x8c>)
   11712:	462a      	mov	r2, r5
   11714:	4633      	mov	r3, r6
   11716:	3018      	adds	r0, #24
   11718:	f000 f912 	bl	11940 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1171c:	68ba      	ldr	r2, [r7, #8]
   1171e:	7b53      	ldrb	r3, [r2, #13]
   11720:	f043 0310 	orr.w	r3, r3, #16
   11724:	7353      	strb	r3, [r2, #13]
   11726:	4640      	mov	r0, r8
   11728:	f7fb ffa4 	bl	d674 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1172c:	f003 fb7b 	bl	14e26 <sys_clock_tick_get_32>
   11730:	1a20      	subs	r0, r4, r0
   11732:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   11736:	2801      	cmp	r0, #1
   11738:	f173 0300 	sbcs.w	r3, r3, #0
   1173c:	dbc9      	blt.n	116d2 <z_tick_sleep+0x12>
}
   1173e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11742:	bf00      	nop
   11744:	200007e4 	.word	0x200007e4
   11748:	20000814 	.word	0x20000814
   1174c:	00014c85 	.word	0x00014c85

00011750 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11750:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   11754:	bf08      	it	eq
   11756:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1175a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1175c:	d106      	bne.n	1176c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1175e:	4b08      	ldr	r3, [pc, #32]	; (11780 <z_impl_k_sleep+0x30>)
   11760:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   11762:	f7ff ff13 	bl	1158c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   11766:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1176a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   1176c:	f7ff ffa8 	bl	116c0 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   11770:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   11774:	fb80 0303 	smull	r0, r3, r0, r3
   11778:	0bc0      	lsrs	r0, r0, #15
   1177a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1177e:	e7f4      	b.n	1176a <z_impl_k_sleep+0x1a>
   11780:	200007e4 	.word	0x200007e4

00011784 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   11784:	4b01      	ldr	r3, [pc, #4]	; (1178c <z_impl_z_current_get+0x8>)
   11786:	6898      	ldr	r0, [r3, #8]
   11788:	4770      	bx	lr
   1178a:	bf00      	nop
   1178c:	200007e4 	.word	0x200007e4

00011790 <z_impl_k_is_preempt_thread>:
   11790:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   11794:	b93b      	cbnz	r3, 117a6 <z_impl_k_is_preempt_thread+0x16>
   11796:	4b05      	ldr	r3, [pc, #20]	; (117ac <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   11798:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
   1179a:	89d8      	ldrh	r0, [r3, #14]
   1179c:	287f      	cmp	r0, #127	; 0x7f
   1179e:	bf8c      	ite	hi
   117a0:	2000      	movhi	r0, #0
   117a2:	2001      	movls	r0, #1
   117a4:	4770      	bx	lr
   117a6:	2000      	movs	r0, #0
}
   117a8:	4770      	bx	lr
   117aa:	bf00      	nop
   117ac:	200007e4 	.word	0x200007e4

000117b0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   117b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   117b4:	4604      	mov	r4, r0
   117b6:	f04f 0320 	mov.w	r3, #32
   117ba:	f3ef 8611 	mrs	r6, BASEPRI
   117be:	f383 8812 	msr	BASEPRI_MAX, r3
   117c2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   117c6:	7b43      	ldrb	r3, [r0, #13]
   117c8:	071a      	lsls	r2, r3, #28
   117ca:	d505      	bpl.n	117d8 <z_thread_abort+0x28>
	__asm__ volatile(
   117cc:	f386 8811 	msr	BASEPRI, r6
   117d0:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   117d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   117d8:	f023 0220 	bic.w	r2, r3, #32
   117dc:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   117e0:	09d2      	lsrs	r2, r2, #7
   117e2:	d120      	bne.n	11826 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   117e4:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   117e6:	68a3      	ldr	r3, [r4, #8]
   117e8:	b113      	cbz	r3, 117f0 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   117ea:	4620      	mov	r0, r4
   117ec:	f003 f9f0 	bl	14bd0 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   117f0:	f104 0018 	add.w	r0, r4, #24
   117f4:	f003 fad7 	bl	14da6 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   117f8:	f104 0758 	add.w	r7, r4, #88	; 0x58
   117fc:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   11800:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11802:	42bd      	cmp	r5, r7
   11804:	d000      	beq.n	11808 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   11806:	b9b5      	cbnz	r5, 11836 <z_thread_abort+0x86>
		update_cache(1);
   11808:	2001      	movs	r0, #1
   1180a:	f7ff fd7d 	bl	11308 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1180e:	4b10      	ldr	r3, [pc, #64]	; (11850 <z_thread_abort+0xa0>)
   11810:	689b      	ldr	r3, [r3, #8]
   11812:	42a3      	cmp	r3, r4
   11814:	d1da      	bne.n	117cc <z_thread_abort+0x1c>
   11816:	f3ef 8305 	mrs	r3, IPSR
   1181a:	2b00      	cmp	r3, #0
   1181c:	d1d6      	bne.n	117cc <z_thread_abort+0x1c>
   1181e:	4630      	mov	r0, r6
   11820:	f7fb ff28 	bl	d674 <arch_swap>
	return ret;
   11824:	e7d2      	b.n	117cc <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11826:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1182a:	f043 0308 	orr.w	r3, r3, #8
   1182e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   11830:	f003 f9c6 	bl	14bc0 <sys_dlist_remove>
}
   11834:	e7d7      	b.n	117e6 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   11836:	4628      	mov	r0, r5
   11838:	f003 f9ca 	bl	14bd0 <unpend_thread_no_timeout>
   1183c:	f105 0018 	add.w	r0, r5, #24
   11840:	f003 fab1 	bl	14da6 <z_abort_timeout>
   11844:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
   11848:	4628      	mov	r0, r5
   1184a:	f7ff fdf9 	bl	11440 <ready_thread>
   1184e:	e7d7      	b.n	11800 <z_thread_abort+0x50>
   11850:	200007e4 	.word	0x200007e4

00011854 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   11854:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   11856:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1185a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1185c:	e9cd 6700 	strd	r6, r7, [sp]
   11860:	f7ff fe80 	bl	11564 <z_pend_curr>

	if (data != NULL) {
   11864:	b11c      	cbz	r4, 1186e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   11866:	4b03      	ldr	r3, [pc, #12]	; (11874 <z_sched_wait+0x20>)
   11868:	689b      	ldr	r3, [r3, #8]
   1186a:	695b      	ldr	r3, [r3, #20]
   1186c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1186e:	b002      	add	sp, #8
   11870:	bdd0      	pop	{r4, r6, r7, pc}
   11872:	bf00      	nop
   11874:	200007e4 	.word	0x200007e4

00011878 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   11878:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   1187a:	4806      	ldr	r0, [pc, #24]	; (11894 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   1187c:	4a06      	ldr	r2, [pc, #24]	; (11898 <z_data_copy+0x20>)
   1187e:	4907      	ldr	r1, [pc, #28]	; (1189c <z_data_copy+0x24>)
   11880:	1a12      	subs	r2, r2, r0
   11882:	f002 fff6 	bl	14872 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   11886:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1188a:	4a05      	ldr	r2, [pc, #20]	; (118a0 <z_data_copy+0x28>)
   1188c:	4905      	ldr	r1, [pc, #20]	; (118a4 <z_data_copy+0x2c>)
   1188e:	4806      	ldr	r0, [pc, #24]	; (118a8 <z_data_copy+0x30>)
   11890:	f002 bfef 	b.w	14872 <z_early_memcpy>
   11894:	20000000 	.word	0x20000000
   11898:	200001d0 	.word	0x200001d0
   1189c:	00015648 	.word	0x00015648
   118a0:	00000000 	.word	0x00000000
   118a4:	00015648 	.word	0x00015648
   118a8:	20000000 	.word	0x20000000

000118ac <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   118ac:	4b03      	ldr	r3, [pc, #12]	; (118bc <elapsed+0x10>)
   118ae:	681b      	ldr	r3, [r3, #0]
   118b0:	b90b      	cbnz	r3, 118b6 <elapsed+0xa>
   118b2:	f7fe b9db 	b.w	fc6c <sys_clock_elapsed>
}
   118b6:	2000      	movs	r0, #0
   118b8:	4770      	bx	lr
   118ba:	bf00      	nop
   118bc:	20000820 	.word	0x20000820

000118c0 <next_timeout>:
	return list->head == list;
   118c0:	4b10      	ldr	r3, [pc, #64]	; (11904 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   118c2:	b510      	push	{r4, lr}
   118c4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   118c6:	429c      	cmp	r4, r3
   118c8:	bf08      	it	eq
   118ca:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   118cc:	f7ff ffee 	bl	118ac <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   118d0:	b1a4      	cbz	r4, 118fc <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   118d2:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   118d6:	1a1b      	subs	r3, r3, r0
   118d8:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   118dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   118e0:	f170 0200 	sbcs.w	r2, r0, #0
   118e4:	da0a      	bge.n	118fc <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   118e6:	2800      	cmp	r0, #0
   118e8:	bfac      	ite	ge
   118ea:	4618      	movge	r0, r3
   118ec:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   118ee:	4b06      	ldr	r3, [pc, #24]	; (11908 <next_timeout+0x48>)
   118f0:	691b      	ldr	r3, [r3, #16]
   118f2:	b113      	cbz	r3, 118fa <next_timeout+0x3a>
   118f4:	4298      	cmp	r0, r3
   118f6:	bfa8      	it	ge
   118f8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   118fa:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   118fc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11900:	e7f5      	b.n	118ee <next_timeout+0x2e>
   11902:	bf00      	nop
   11904:	20000124 	.word	0x20000124
   11908:	200007e4 	.word	0x200007e4

0001190c <remove_timeout>:
{
   1190c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   1190e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   11910:	b168      	cbz	r0, 1192e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   11912:	4a0a      	ldr	r2, [pc, #40]	; (1193c <remove_timeout+0x30>)
   11914:	6852      	ldr	r2, [r2, #4]
   11916:	4290      	cmp	r0, r2
   11918:	d009      	beq.n	1192e <remove_timeout+0x22>
	if (next(t) != NULL) {
   1191a:	b143      	cbz	r3, 1192e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1191c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   11920:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   11924:	1912      	adds	r2, r2, r4
   11926:	eb41 0105 	adc.w	r1, r1, r5
   1192a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1192e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   11930:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   11932:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   11934:	2300      	movs	r3, #0
	node->prev = NULL;
   11936:	e9c0 3300 	strd	r3, r3, [r0]
}
   1193a:	bd30      	pop	{r4, r5, pc}
   1193c:	20000124 	.word	0x20000124

00011940 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   11944:	bf08      	it	eq
   11946:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   1194a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1194c:	4604      	mov	r4, r0
   1194e:	461f      	mov	r7, r3
   11950:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11952:	d067      	beq.n	11a24 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   11954:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   11956:	f04f 0320 	mov.w	r3, #32
   1195a:	f3ef 8611 	mrs	r6, BASEPRI
   1195e:	f383 8812 	msr	BASEPRI_MAX, r3
   11962:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   11966:	f06f 0201 	mvn.w	r2, #1
   1196a:	1b53      	subs	r3, r2, r5
   1196c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   11970:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   11974:	2b00      	cmp	r3, #0
   11976:	db1b      	blt.n	119b0 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   11978:	4b2b      	ldr	r3, [pc, #172]	; (11a28 <z_add_timeout+0xe8>)
   1197a:	e9d3 1300 	ldrd	r1, r3, [r3]
   1197e:	1a52      	subs	r2, r2, r1
   11980:	eb6c 0303 	sbc.w	r3, ip, r3
   11984:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   11986:	eb63 0307 	sbc.w	r3, r3, r7
   1198a:	2d01      	cmp	r5, #1
   1198c:	f173 0200 	sbcs.w	r2, r3, #0
   11990:	bfbc      	itt	lt
   11992:	2501      	movlt	r5, #1
   11994:	2300      	movlt	r3, #0
   11996:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   1199a:	4824      	ldr	r0, [pc, #144]	; (11a2c <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   1199c:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   119a0:	4283      	cmp	r3, r0
   119a2:	d118      	bne.n	119d6 <z_add_timeout+0x96>
	node->prev = tail;
   119a4:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   119a8:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   119ac:	6044      	str	r4, [r0, #4]
}
   119ae:	e026      	b.n	119fe <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   119b0:	f7ff ff7c 	bl	118ac <elapsed>
   119b4:	3501      	adds	r5, #1
   119b6:	f147 0700 	adc.w	r7, r7, #0
   119ba:	182d      	adds	r5, r5, r0
   119bc:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   119c0:	e9c4 5704 	strd	r5, r7, [r4, #16]
   119c4:	e7e9      	b.n	1199a <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   119c6:	1a52      	subs	r2, r2, r1
   119c8:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   119cc:	459c      	cmp	ip, r3
   119ce:	e9c4 2504 	strd	r2, r5, [r4, #16]
   119d2:	d0e7      	beq.n	119a4 <z_add_timeout+0x64>
   119d4:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   119d6:	2b00      	cmp	r3, #0
   119d8:	d0e4      	beq.n	119a4 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   119da:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   119de:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   119e2:	428a      	cmp	r2, r1
   119e4:	eb75 0e07 	sbcs.w	lr, r5, r7
   119e8:	daed      	bge.n	119c6 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   119ea:	1a8a      	subs	r2, r1, r2
   119ec:	eb67 0505 	sbc.w	r5, r7, r5
   119f0:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   119f4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   119f6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   119fa:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   119fc:	605c      	str	r4, [r3, #4]
	return list->head == list;
   119fe:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11a00:	4283      	cmp	r3, r0
   11a02:	d00b      	beq.n	11a1c <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   11a04:	429c      	cmp	r4, r3
   11a06:	d109      	bne.n	11a1c <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   11a08:	f7ff ff5a 	bl	118c0 <next_timeout>

			if (next_time == 0 ||
   11a0c:	b118      	cbz	r0, 11a16 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   11a0e:	4b08      	ldr	r3, [pc, #32]	; (11a30 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   11a10:	691b      	ldr	r3, [r3, #16]
   11a12:	4283      	cmp	r3, r0
   11a14:	d002      	beq.n	11a1c <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   11a16:	2100      	movs	r1, #0
   11a18:	f7fe f8f6 	bl	fc08 <sys_clock_set_timeout>
	__asm__ volatile(
   11a1c:	f386 8811 	msr	BASEPRI, r6
   11a20:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   11a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11a26:	bf00      	nop
   11a28:	200002f0 	.word	0x200002f0
   11a2c:	20000124 	.word	0x20000124
   11a30:	200007e4 	.word	0x200007e4

00011a34 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   11a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11a38:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   11a3a:	f7ff fcbf 	bl	113bc <z_time_slice>
	__asm__ volatile(
   11a3e:	f04f 0320 	mov.w	r3, #32
   11a42:	f3ef 8411 	mrs	r4, BASEPRI
   11a46:	f383 8812 	msr	BASEPRI_MAX, r3
   11a4a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   11a4e:	4e24      	ldr	r6, [pc, #144]	; (11ae0 <sys_clock_announce+0xac>)
	return list->head == list;
   11a50:	f8df 8090 	ldr.w	r8, [pc, #144]	; 11ae4 <sys_clock_announce+0xb0>
   11a54:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   11a56:	4d24      	ldr	r5, [pc, #144]	; (11ae8 <sys_clock_announce+0xb4>)
   11a58:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   11a5c:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11a5e:	4540      	cmp	r0, r8
		curr_tick += dt;
   11a60:	e9d5 1e00 	ldrd	r1, lr, [r5]
   11a64:	ea4f 77e2 	mov.w	r7, r2, asr #31
   11a68:	d00b      	beq.n	11a82 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   11a6a:	b150      	cbz	r0, 11a82 <sys_clock_announce+0x4e>
   11a6c:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   11a70:	429a      	cmp	r2, r3
   11a72:	eb77 090c 	sbcs.w	r9, r7, ip
   11a76:	da16      	bge.n	11aa6 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   11a78:	1a9b      	subs	r3, r3, r2
   11a7a:	eb6c 0c07 	sbc.w	ip, ip, r7
   11a7e:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   11a82:	1852      	adds	r2, r2, r1
   11a84:	eb4e 0707 	adc.w	r7, lr, r7
   11a88:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   11a8c:	2500      	movs	r5, #0
   11a8e:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   11a90:	f7ff ff16 	bl	118c0 <next_timeout>
   11a94:	4629      	mov	r1, r5
   11a96:	f7fe f8b7 	bl	fc08 <sys_clock_set_timeout>
	__asm__ volatile(
   11a9a:	f384 8811 	msr	BASEPRI, r4
   11a9e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   11aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   11aa6:	1859      	adds	r1, r3, r1
   11aa8:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   11aac:	1ad3      	subs	r3, r2, r3
   11aae:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   11ab0:	2200      	movs	r2, #0
   11ab2:	2300      	movs	r3, #0
   11ab4:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   11ab8:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   11abc:	f7ff ff26 	bl	1190c <remove_timeout>
   11ac0:	f384 8811 	msr	BASEPRI, r4
   11ac4:	f3bf 8f6f 	isb	sy
		t->fn(t);
   11ac8:	6883      	ldr	r3, [r0, #8]
   11aca:	4798      	blx	r3
	__asm__ volatile(
   11acc:	f04f 0320 	mov.w	r3, #32
   11ad0:	f3ef 8411 	mrs	r4, BASEPRI
   11ad4:	f383 8812 	msr	BASEPRI_MAX, r3
   11ad8:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   11adc:	e7bc      	b.n	11a58 <sys_clock_announce+0x24>
   11ade:	bf00      	nop
   11ae0:	20000820 	.word	0x20000820
   11ae4:	20000124 	.word	0x20000124
   11ae8:	200002f0 	.word	0x200002f0

00011aec <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   11aec:	b510      	push	{r4, lr}
   11aee:	f04f 0320 	mov.w	r3, #32
   11af2:	f3ef 8411 	mrs	r4, BASEPRI
   11af6:	f383 8812 	msr	BASEPRI_MAX, r3
   11afa:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   11afe:	f7fe f8b5 	bl	fc6c <sys_clock_elapsed>
   11b02:	4a05      	ldr	r2, [pc, #20]	; (11b18 <sys_clock_tick_get+0x2c>)
   11b04:	e9d2 3100 	ldrd	r3, r1, [r2]
   11b08:	18c0      	adds	r0, r0, r3
   11b0a:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   11b0e:	f384 8811 	msr	BASEPRI, r4
   11b12:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   11b16:	bd10      	pop	{r4, pc}
   11b18:	200002f0 	.word	0x200002f0

00011b1c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   11b1c:	b570      	push	{r4, r5, r6, lr}
   11b1e:	4604      	mov	r4, r0
	__asm__ volatile(
   11b20:	f04f 0320 	mov.w	r3, #32
   11b24:	f3ef 8511 	mrs	r5, BASEPRI
   11b28:	f383 8812 	msr	BASEPRI_MAX, r3
   11b2c:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   11b30:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   11b34:	3301      	adds	r3, #1
   11b36:	f142 0200 	adc.w	r2, r2, #0
   11b3a:	2b02      	cmp	r3, #2
   11b3c:	f172 0300 	sbcs.w	r3, r2, #0
   11b40:	d304      	bcc.n	11b4c <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   11b42:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   11b46:	4917      	ldr	r1, [pc, #92]	; (11ba4 <z_timer_expiration_handler+0x88>)
   11b48:	f7ff fefa 	bl	11940 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   11b4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   11b4e:	3301      	adds	r3, #1
   11b50:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   11b52:	6a23      	ldr	r3, [r4, #32]
   11b54:	b173      	cbz	r3, 11b74 <z_timer_expiration_handler+0x58>
	__asm__ volatile(
   11b56:	f385 8811 	msr	BASEPRI, r5
   11b5a:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   11b5e:	6a23      	ldr	r3, [r4, #32]
   11b60:	4620      	mov	r0, r4
   11b62:	4798      	blx	r3
	__asm__ volatile(
   11b64:	f04f 0320 	mov.w	r3, #32
   11b68:	f3ef 8511 	mrs	r5, BASEPRI
   11b6c:	f383 8812 	msr	BASEPRI_MAX, r3
   11b70:	f3bf 8f6f 	isb	sy
	return list->head == list;
   11b74:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11b78:	42a6      	cmp	r6, r4
   11b7a:	d000      	beq.n	11b7e <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   11b7c:	b926      	cbnz	r6, 11b88 <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
   11b7e:	f385 8811 	msr	BASEPRI, r5
   11b82:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   11b86:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   11b88:	4630      	mov	r0, r6
   11b8a:	f003 f82b 	bl	14be4 <z_unpend_thread_no_timeout>
   11b8e:	2300      	movs	r3, #0
   11b90:	67b3      	str	r3, [r6, #120]	; 0x78
   11b92:	f385 8811 	msr	BASEPRI, r5
   11b96:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   11b9a:	4630      	mov	r0, r6
}
   11b9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   11ba0:	f003 b860 	b.w	14c64 <z_ready_thread>
   11ba4:	00011b1d 	.word	0x00011b1d

00011ba8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   11ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11bac:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   11bae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   11bb2:	bf08      	it	eq
   11bb4:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
   11bb8:	4606      	mov	r6, r0
   11bba:	461c      	mov	r4, r3
   11bbc:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
   11bc0:	4689      	mov	r9, r1
   11bc2:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   11bc4:	d03e      	beq.n	11c44 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   11bc6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   11bca:	bf08      	it	eq
   11bcc:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   11bd0:	4615      	mov	r5, r2
   11bd2:	4607      	mov	r7, r0
   11bd4:	d014      	beq.n	11c00 <z_impl_k_timer_start+0x58>
   11bd6:	ea50 0302 	orrs.w	r3, r0, r2
   11bda:	d011      	beq.n	11c00 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
   11bdc:	f06f 0301 	mvn.w	r3, #1
   11be0:	1a9b      	subs	r3, r3, r2
   11be2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11be6:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   11bea:	2b00      	cmp	r3, #0
   11bec:	da08      	bge.n	11c00 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
   11bee:	2a02      	cmp	r2, #2
   11bf0:	f170 0300 	sbcs.w	r3, r0, #0
   11bf4:	bfbc      	itt	lt
   11bf6:	2502      	movlt	r5, #2
   11bf8:	2700      	movlt	r7, #0
   11bfa:	3d01      	subs	r5, #1
   11bfc:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   11c00:	f06f 0301 	mvn.w	r3, #1
   11c04:	1a5b      	subs	r3, r3, r1
   11c06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11c0a:	eb63 0304 	sbc.w	r3, r3, r4
   11c0e:	2b00      	cmp	r3, #0
   11c10:	da09      	bge.n	11c26 <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
   11c12:	2901      	cmp	r1, #1
   11c14:	f174 0300 	sbcs.w	r3, r4, #0
   11c18:	bfbc      	itt	lt
   11c1a:	2101      	movlt	r1, #1
   11c1c:	2400      	movlt	r4, #0
   11c1e:	f111 39ff 	adds.w	r9, r1, #4294967295	; 0xffffffff
   11c22:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   11c26:	4630      	mov	r0, r6
   11c28:	f003 f8bd 	bl	14da6 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   11c2c:	2300      	movs	r3, #0
   11c2e:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
   11c30:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   11c34:	464a      	mov	r2, r9
   11c36:	4643      	mov	r3, r8
   11c38:	4630      	mov	r0, r6
   11c3a:	4903      	ldr	r1, [pc, #12]	; (11c48 <z_impl_k_timer_start+0xa0>)
		     duration);
}
   11c3c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   11c40:	f7ff be7e 	b.w	11940 <z_add_timeout>
}
   11c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11c48:	00011b1d 	.word	0x00011b1d

00011c4c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   11c4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11c4e:	4606      	mov	r6, r0
   11c50:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   11c52:	f002 fe9f 	bl	14994 <k_is_in_isr>
   11c56:	b978      	cbnz	r0, 11c78 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   11c58:	4b0b      	ldr	r3, [pc, #44]	; (11c88 <z_thread_aligned_alloc+0x3c>)
   11c5a:	689b      	ldr	r3, [r3, #8]
   11c5c:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	}

	if (heap != NULL) {
   11c5e:	b17c      	cbz	r4, 11c80 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   11c60:	1d2a      	adds	r2, r5, #4
   11c62:	d209      	bcs.n	11c78 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   11c64:	2000      	movs	r0, #0
   11c66:	2100      	movs	r1, #0
   11c68:	e9cd 0100 	strd	r0, r1, [sp]
   11c6c:	f046 0104 	orr.w	r1, r6, #4
   11c70:	4620      	mov	r0, r4
   11c72:	f002 fe08 	bl	14886 <k_heap_aligned_alloc>
	if (mem == NULL) {
   11c76:	b908      	cbnz	r0, 11c7c <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   11c78:	2400      	movs	r4, #0
	}

	return ret;
   11c7a:	e001      	b.n	11c80 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   11c7c:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   11c7e:	1d04      	adds	r4, r0, #4
}
   11c80:	4620      	mov	r0, r4
   11c82:	b002      	add	sp, #8
   11c84:	bd70      	pop	{r4, r5, r6, pc}
   11c86:	bf00      	nop
   11c88:	200007e4 	.word	0x200007e4

00011c8c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   11c8c:	4a02      	ldr	r2, [pc, #8]	; (11c98 <boot_banner+0xc>)
   11c8e:	4903      	ldr	r1, [pc, #12]	; (11c9c <boot_banner+0x10>)
   11c90:	4803      	ldr	r0, [pc, #12]	; (11ca0 <boot_banner+0x14>)
   11c92:	f000 b870 	b.w	11d76 <printk>
   11c96:	bf00      	nop
   11c98:	0001563e 	.word	0x0001563e
   11c9c:	000155f7 	.word	0x000155f7
   11ca0:	00015618 	.word	0x00015618

00011ca4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   11ca4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   11ca6:	4b09      	ldr	r3, [pc, #36]	; (11ccc <k_sys_work_q_init+0x28>)
   11ca8:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   11caa:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   11cac:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   11cae:	9300      	str	r3, [sp, #0]
   11cb0:	4907      	ldr	r1, [pc, #28]	; (11cd0 <k_sys_work_q_init+0x2c>)
   11cb2:	4808      	ldr	r0, [pc, #32]	; (11cd4 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   11cb4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   11cb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11cbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   11cc0:	f7ff fa7e 	bl	111c0 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   11cc4:	4620      	mov	r0, r4
   11cc6:	b004      	add	sp, #16
   11cc8:	bd10      	pop	{r4, pc}
   11cca:	bf00      	nop
   11ccc:	0001563f 	.word	0x0001563f
   11cd0:	20001a20 	.word	0x20001a20
   11cd4:	200002f8 	.word	0x200002f8

00011cd8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   11cd8:	4770      	bx	lr

00011cda <gpio_pin_configure_dt.constprop.0.isra.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
   11cda:	b4f0      	push	{r4, r5, r6, r7}
   11cdc:	4603      	mov	r3, r0
	return gpio_pin_configure(spec->port,
   11cde:	6800      	ldr	r0, [r0, #0]
   11ce0:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   11ce2:	88db      	ldrh	r3, [r3, #6]
	struct gpio_driver_data *data =
   11ce4:	6906      	ldr	r6, [r0, #16]
	const struct gpio_driver_api *api =
   11ce6:	6887      	ldr	r7, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   11ce8:	6834      	ldr	r4, [r6, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   11cea:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
   11cec:	bf54      	ite	pl
   11cee:	f443 13d0 	orrpl.w	r3, r3, #1703936	; 0x1a0000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   11cf2:	f483 13b0 	eormi.w	r3, r3, #1441792	; 0x160000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   11cf6:	2501      	movs	r5, #1
   11cf8:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   11cfa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   11cfe:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   11d00:	bf4c      	ite	mi
   11d02:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   11d04:	43ac      	bicpl	r4, r5
	return api->pin_configure(port, pin, flags);
   11d06:	683b      	ldr	r3, [r7, #0]
   11d08:	6034      	str	r4, [r6, #0]
}
   11d0a:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
   11d0c:	4718      	bx	r3

00011d0e <crc16_itu_t>:
	return seed;
}

uint16_t crc16_itu_t(uint16_t seed, const uint8_t *src, size_t len)
{
	for (; len > 0; len--) {
   11d0e:	440a      	add	r2, r1
   11d10:	428a      	cmp	r2, r1
   11d12:	d100      	bne.n	11d16 <crc16_itu_t+0x8>
		seed ^= seed << 12U;
		seed ^= (seed & 0xffU) << 5U;
	}

	return seed;
}
   11d14:	4770      	bx	lr
		seed ^= *src++;
   11d16:	f811 3b01 	ldrb.w	r3, [r1], #1
   11d1a:	ba40      	rev16	r0, r0
   11d1c:	b280      	uxth	r0, r0
   11d1e:	4058      	eors	r0, r3
		seed ^= (seed & 0xffU) >> 4U;
   11d20:	f3c0 1303 	ubfx	r3, r0, #4, #4
   11d24:	4058      	eors	r0, r3
		seed ^= seed << 12U;
   11d26:	ea80 3000 	eor.w	r0, r0, r0, lsl #12
   11d2a:	b283      	uxth	r3, r0
		seed ^= (seed & 0xffU) << 5U;
   11d2c:	0158      	lsls	r0, r3, #5
   11d2e:	f400 50ff 	and.w	r0, r0, #8160	; 0x1fe0
   11d32:	4058      	eors	r0, r3
	for (; len > 0; len--) {
   11d34:	e7ec      	b.n	11d10 <crc16_itu_t+0x2>

00011d36 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   11d36:	4603      	mov	r3, r0
   11d38:	b158      	cbz	r0, 11d52 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   11d3a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   11d3c:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   11d40:	2a01      	cmp	r2, #1
   11d42:	d003      	beq.n	11d4c <sys_notify_validate+0x16>
   11d44:	2a03      	cmp	r2, #3
   11d46:	d104      	bne.n	11d52 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   11d48:	6802      	ldr	r2, [r0, #0]
   11d4a:	b112      	cbz	r2, 11d52 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   11d4c:	2000      	movs	r0, #0
   11d4e:	6098      	str	r0, [r3, #8]
   11d50:	4770      	bx	lr
		return -EINVAL;
   11d52:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   11d56:	4770      	bx	lr

00011d58 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   11d58:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   11d5a:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   11d5c:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   11d60:	2a03      	cmp	r2, #3
   11d62:	f04f 0200 	mov.w	r2, #0
{
   11d66:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   11d68:	bf0c      	ite	eq
   11d6a:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   11d6c:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   11d6e:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   11d70:	4770      	bx	lr

00011d72 <arch_printk_char_out>:
}
   11d72:	2000      	movs	r0, #0
   11d74:	4770      	bx	lr

00011d76 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
   11d76:	b40f      	push	{r0, r1, r2, r3}
   11d78:	b507      	push	{r0, r1, r2, lr}
   11d7a:	a904      	add	r1, sp, #16
   11d7c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   11d80:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   11d82:	f7fa fd7d 	bl	c880 <vprintk>

	va_end(ap);
}
   11d86:	b003      	add	sp, #12
   11d88:	f85d eb04 	ldr.w	lr, [sp], #4
   11d8c:	b004      	add	sp, #16
   11d8e:	4770      	bx	lr

00011d90 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11d90:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   11d92:	f013 0307 	ands.w	r3, r3, #7
   11d96:	d105      	bne.n	11da4 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   11d98:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   11d9a:	2b00      	cmp	r3, #0
   11d9c:	bf0c      	ite	eq
   11d9e:	2000      	moveq	r0, #0
   11da0:	2003      	movne	r0, #3
   11da2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   11da4:	2b02      	cmp	r3, #2
   11da6:	d105      	bne.n	11db4 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   11da8:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   11daa:	2b00      	cmp	r3, #0
   11dac:	bf14      	ite	ne
   11dae:	2000      	movne	r0, #0
   11db0:	2004      	moveq	r0, #4
   11db2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   11db4:	2b01      	cmp	r3, #1
   11db6:	d105      	bne.n	11dc4 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   11db8:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   11dba:	2b00      	cmp	r3, #0
   11dbc:	bf0c      	ite	eq
   11dbe:	2000      	moveq	r0, #0
   11dc0:	2005      	movne	r0, #5
   11dc2:	4770      	bx	lr
	int evt = EVT_NOP;
   11dc4:	2000      	movs	r0, #0
}
   11dc6:	4770      	bx	lr

00011dc8 <notify_one>:
{
   11dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11dcc:	460d      	mov	r5, r1
   11dce:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   11dd0:	4619      	mov	r1, r3
   11dd2:	1d28      	adds	r0, r5, #4
{
   11dd4:	4690      	mov	r8, r2
   11dd6:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   11dd8:	f7ff ffbe 	bl	11d58 <sys_notify_finalize>
	if (cb) {
   11ddc:	4604      	mov	r4, r0
   11dde:	b138      	cbz	r0, 11df0 <notify_one+0x28>
		cb(mgr, cli, state, res);
   11de0:	4633      	mov	r3, r6
   11de2:	4642      	mov	r2, r8
   11de4:	4629      	mov	r1, r5
   11de6:	4638      	mov	r0, r7
   11de8:	46a4      	mov	ip, r4
}
   11dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   11dee:	4760      	bx	ip
}
   11df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011df4 <transition_complete>:
{
   11df4:	b410      	push	{r4}
	__asm__ volatile(
   11df6:	f04f 0420 	mov.w	r4, #32
   11dfa:	f3ef 8211 	mrs	r2, BASEPRI
   11dfe:	f384 8812 	msr	BASEPRI_MAX, r4
   11e02:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   11e06:	6141      	str	r1, [r0, #20]
}
   11e08:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   11e0a:	2101      	movs	r1, #1
   11e0c:	f7fa bd46 	b.w	c89c <process_event>

00011e10 <validate_args>:
{
   11e10:	b510      	push	{r4, lr}
   11e12:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   11e14:	b140      	cbz	r0, 11e28 <validate_args+0x18>
   11e16:	b139      	cbz	r1, 11e28 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   11e18:	1d08      	adds	r0, r1, #4
   11e1a:	f7ff ff8c 	bl	11d36 <sys_notify_validate>
	if ((rv == 0)
   11e1e:	b928      	cbnz	r0, 11e2c <validate_args+0x1c>
	    && ((cli->notify.flags
   11e20:	68a3      	ldr	r3, [r4, #8]
   11e22:	f033 0303 	bics.w	r3, r3, #3
   11e26:	d001      	beq.n	11e2c <validate_args+0x1c>
		rv = -EINVAL;
   11e28:	f06f 0015 	mvn.w	r0, #21
}
   11e2c:	bd10      	pop	{r4, pc}

00011e2e <onoff_manager_init>:
{
   11e2e:	b538      	push	{r3, r4, r5, lr}
   11e30:	460c      	mov	r4, r1
	if ((mgr == NULL)
   11e32:	4605      	mov	r5, r0
   11e34:	b158      	cbz	r0, 11e4e <onoff_manager_init+0x20>
	    || (transitions == NULL)
   11e36:	b151      	cbz	r1, 11e4e <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   11e38:	680b      	ldr	r3, [r1, #0]
   11e3a:	b143      	cbz	r3, 11e4e <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   11e3c:	684b      	ldr	r3, [r1, #4]
   11e3e:	b133      	cbz	r3, 11e4e <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   11e40:	221c      	movs	r2, #28
   11e42:	2100      	movs	r1, #0
   11e44:	f000 fc06 	bl	12654 <memset>
   11e48:	612c      	str	r4, [r5, #16]
	return 0;
   11e4a:	2000      	movs	r0, #0
}
   11e4c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   11e4e:	f06f 0015 	mvn.w	r0, #21
   11e52:	e7fb      	b.n	11e4c <onoff_manager_init+0x1e>

00011e54 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   11e54:	b570      	push	{r4, r5, r6, lr}
   11e56:	4604      	mov	r4, r0
   11e58:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   11e5a:	f7ff ffd9 	bl	11e10 <validate_args>

	if (rv < 0) {
   11e5e:	1e05      	subs	r5, r0, #0
   11e60:	db31      	blt.n	11ec6 <onoff_request+0x72>
   11e62:	f04f 0320 	mov.w	r3, #32
   11e66:	f3ef 8111 	mrs	r1, BASEPRI
   11e6a:	f383 8812 	msr	BASEPRI_MAX, r3
   11e6e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   11e72:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11e74:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   11e76:	f64f 75ff 	movw	r5, #65535	; 0xffff
   11e7a:	42ab      	cmp	r3, r5
   11e7c:	f000 0207 	and.w	r2, r0, #7
   11e80:	d02e      	beq.n	11ee0 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   11e82:	2a02      	cmp	r2, #2
   11e84:	d10e      	bne.n	11ea4 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   11e86:	3301      	adds	r3, #1
   11e88:	8363      	strh	r3, [r4, #26]
	rv = state;
   11e8a:	4615      	mov	r5, r2
		notify = true;
   11e8c:	2301      	movs	r3, #1
	__asm__ volatile(
   11e8e:	f381 8811 	msr	BASEPRI, r1
   11e92:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   11e96:	b1b3      	cbz	r3, 11ec6 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   11e98:	2300      	movs	r3, #0
   11e9a:	4631      	mov	r1, r6
   11e9c:	4620      	mov	r0, r4
   11e9e:	f7ff ff93 	bl	11dc8 <notify_one>
   11ea2:	e010      	b.n	11ec6 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   11ea4:	0783      	lsls	r3, r0, #30
   11ea6:	d001      	beq.n	11eac <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   11ea8:	2a06      	cmp	r2, #6
   11eaa:	d10e      	bne.n	11eca <onoff_request+0x76>
	parent->next = child;
   11eac:	2300      	movs	r3, #0
   11eae:	6033      	str	r3, [r6, #0]
	return list->tail;
   11eb0:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   11eb2:	b993      	cbnz	r3, 11eda <onoff_request+0x86>
	list->head = node;
   11eb4:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   11eb8:	4615      	mov	r5, r2
   11eba:	b962      	cbnz	r2, 11ed6 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   11ebc:	460a      	mov	r2, r1
   11ebe:	4620      	mov	r0, r4
   11ec0:	2102      	movs	r1, #2
   11ec2:	f7fa fceb 	bl	c89c <process_event>
		}
	}

	return rv;
}
   11ec6:	4628      	mov	r0, r5
   11ec8:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   11eca:	2a05      	cmp	r2, #5
   11ecc:	bf0c      	ite	eq
   11ece:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   11ed2:	f06f 0504 	mvnne.w	r5, #4
   11ed6:	2300      	movs	r3, #0
   11ed8:	e7d9      	b.n	11e8e <onoff_request+0x3a>
	parent->next = child;
   11eda:	601e      	str	r6, [r3, #0]
	list->tail = node;
   11edc:	6066      	str	r6, [r4, #4]
}
   11ede:	e7eb      	b.n	11eb8 <onoff_request+0x64>
		rv = -EAGAIN;
   11ee0:	f06f 050a 	mvn.w	r5, #10
   11ee4:	e7f7      	b.n	11ed6 <onoff_request+0x82>

00011ee6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   11ee6:	4604      	mov	r4, r0
   11ee8:	b508      	push	{r3, lr}
   11eea:	4608      	mov	r0, r1
   11eec:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   11eee:	461a      	mov	r2, r3
   11ef0:	47a0      	blx	r4
	return z_impl_z_current_get();
   11ef2:	f7ff fc47 	bl	11784 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   11ef6:	f7fb fe01 	bl	dafc <z_impl_k_thread_abort>

00011efa <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   11efa:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   11efe:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   11f00:	0840      	lsrs	r0, r0, #1
   11f02:	4770      	bx	lr

00011f04 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   11f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11f06:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   11f08:	f7ff fff7 	bl	11efa <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   11f0c:	fab0 f080 	clz	r0, r0
   11f10:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   11f14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   11f18:	00ca      	lsls	r2, r1, #3
   11f1a:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   11f1e:	1d17      	adds	r7, r2, #4
{
   11f20:	460c      	mov	r4, r1
   11f22:	3206      	adds	r2, #6
   11f24:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   11f26:	b956      	cbnz	r6, 11f3e <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   11f28:	2101      	movs	r1, #1
   11f2a:	fa01 f000 	lsl.w	r0, r1, r0
   11f2e:	68d9      	ldr	r1, [r3, #12]
   11f30:	4301      	orrs	r1, r0
   11f32:	60d9      	str	r1, [r3, #12]
		b->next = c;
   11f34:	f8cc 4010 	str.w	r4, [ip, #16]
   11f38:	53dd      	strh	r5, [r3, r7]
   11f3a:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   11f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   11f3e:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   11f40:	3104      	adds	r1, #4
   11f42:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   11f44:	53d8      	strh	r0, [r3, r7]
   11f46:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   11f4a:	529e      	strh	r6, [r3, r2]
   11f4c:	80c5      	strh	r5, [r0, #6]
   11f4e:	525d      	strh	r5, [r3, r1]
   11f50:	e7f4      	b.n	11f3c <free_list_add+0x38>

00011f52 <free_list_remove_bidx>:
{
   11f52:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   11f54:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   11f58:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   11f5a:	4299      	cmp	r1, r3
   11f5c:	f102 0104 	add.w	r1, r2, #4
   11f60:	d10a      	bne.n	11f78 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   11f62:	2301      	movs	r3, #1
   11f64:	fa03 f202 	lsl.w	r2, r3, r2
   11f68:	68c3      	ldr	r3, [r0, #12]
   11f6a:	ea23 0302 	bic.w	r3, r3, r2
   11f6e:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   11f70:	2300      	movs	r3, #0
   11f72:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   11f76:	bd10      	pop	{r4, pc}
   11f78:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   11f7a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   11f7e:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   11f82:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   11f86:	80cb      	strh	r3, [r1, #6]
   11f88:	8082      	strh	r2, [r0, #4]
}
   11f8a:	e7f4      	b.n	11f76 <free_list_remove_bidx+0x24>

00011f8c <free_list_remove>:
{
   11f8c:	b508      	push	{r3, lr}
   11f8e:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   11f90:	f7ff ffb3 	bl	11efa <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   11f94:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   11f98:	f1c2 021f 	rsb	r2, r2, #31
   11f9c:	4618      	mov	r0, r3
}
   11f9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   11fa2:	f7ff bfd6 	b.w	11f52 <free_list_remove_bidx>

00011fa6 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   11fa6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11faa:	fab1 f581 	clz	r5, r1
   11fae:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   11fb2:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   11fb6:	4603      	mov	r3, r0
	if (b->next) {
   11fb8:	693a      	ldr	r2, [r7, #16]
{
   11fba:	460e      	mov	r6, r1
	if (b->next) {
   11fbc:	b1c2      	cbz	r2, 11ff0 <alloc_chunk+0x4a>
   11fbe:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   11fc2:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   11fc4:	4618      	mov	r0, r3
   11fc6:	4621      	mov	r1, r4
   11fc8:	f7ff ff97 	bl	11efa <chunk_size>
   11fcc:	42b0      	cmp	r0, r6
   11fce:	d306      	bcc.n	11fde <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   11fd0:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   11fd2:	4618      	mov	r0, r3
   11fd4:	f7ff ffbd 	bl	11f52 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   11fd8:	4620      	mov	r0, r4
   11fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   11fde:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   11fe2:	f1b8 0801 	subs.w	r8, r8, #1
   11fe6:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   11fe8:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   11fea:	d001      	beq.n	11ff0 <alloc_chunk+0x4a>
   11fec:	4282      	cmp	r2, r0
   11fee:	d1e8      	bne.n	11fc2 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   11ff0:	f1c5 0220 	rsb	r2, r5, #32
   11ff4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11ff8:	4094      	lsls	r4, r2
   11ffa:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   11ffc:	4014      	ands	r4, r2
   11ffe:	d0eb      	beq.n	11fd8 <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   12000:	fa94 f2a4 	rbit	r2, r4
   12004:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   12008:	1d11      	adds	r1, r2, #4
   1200a:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1200e:	4621      	mov	r1, r4
   12010:	e7df      	b.n	11fd2 <alloc_chunk+0x2c>

00012012 <merge_chunks>:
{
   12012:	b538      	push	{r3, r4, r5, lr}
   12014:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   12016:	f7ff ff70 	bl	11efa <chunk_size>
{
   1201a:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1201c:	4604      	mov	r4, r0
   1201e:	4611      	mov	r1, r2
   12020:	4618      	mov	r0, r3
   12022:	f7ff ff6a 	bl	11efa <chunk_size>
		((uint16_t *)cmem)[f] = val;
   12026:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1202a:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1202c:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   1202e:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   12030:	4618      	mov	r0, r3
   12032:	f7ff ff62 	bl	11efa <chunk_size>
	void *cmem = &buf[c];
   12036:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   12038:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   1203c:	bd38      	pop	{r3, r4, r5, pc}

0001203e <split_chunks>:
{
   1203e:	b538      	push	{r3, r4, r5, lr}
   12040:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   12042:	f7ff ff5a 	bl	11efa <chunk_size>
{
   12046:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   12048:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   1204a:	1a51      	subs	r1, r2, r1
   1204c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   12050:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   12052:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   12054:	8060      	strh	r0, [r4, #2]
   12056:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1205a:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   1205c:	8044      	strh	r4, [r0, #2]
   1205e:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   12062:	4618      	mov	r0, r3
   12064:	4611      	mov	r1, r2
   12066:	f7ff ff48 	bl	11efa <chunk_size>
	void *cmem = &buf[c];
   1206a:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1206c:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   12070:	bd38      	pop	{r3, r4, r5, pc}

00012072 <free_chunk>:
{
   12072:	b538      	push	{r3, r4, r5, lr}
   12074:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   12076:	f7ff ff40 	bl	11efa <chunk_size>
   1207a:	460c      	mov	r4, r1
   1207c:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   1207e:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   12082:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   12084:	07da      	lsls	r2, r3, #31
   12086:	d40a      	bmi.n	1209e <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   12088:	4628      	mov	r0, r5
   1208a:	f7ff ff7f 	bl	11f8c <free_list_remove>
	return c + chunk_size(h, c);
   1208e:	4621      	mov	r1, r4
   12090:	4628      	mov	r0, r5
   12092:	f7ff ff32 	bl	11efa <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   12096:	1822      	adds	r2, r4, r0
   12098:	4628      	mov	r0, r5
   1209a:	f7ff ffba 	bl	12012 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   1209e:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   120a2:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   120a4:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   120a8:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   120aa:	07db      	lsls	r3, r3, #31
   120ac:	d40c      	bmi.n	120c8 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   120ae:	4628      	mov	r0, r5
   120b0:	f7ff ff6c 	bl	11f8c <free_list_remove>
		return ((uint16_t *)cmem)[f];
   120b4:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   120b8:	4622      	mov	r2, r4
   120ba:	1a61      	subs	r1, r4, r1
   120bc:	4628      	mov	r0, r5
   120be:	f7ff ffa8 	bl	12012 <merge_chunks>
   120c2:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   120c6:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   120c8:	4621      	mov	r1, r4
   120ca:	4628      	mov	r0, r5
}
   120cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   120d0:	f7ff bf18 	b.w	11f04 <free_list_add>

000120d4 <sys_heap_free>:
	if (mem == NULL) {
   120d4:	b161      	cbz	r1, 120f0 <sys_heap_free+0x1c>
   120d6:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   120d8:	3904      	subs	r1, #4
   120da:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   120dc:	f021 0307 	bic.w	r3, r1, #7
   120e0:	4403      	add	r3, r0
	free_chunk(h, c);
   120e2:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   120e4:	885a      	ldrh	r2, [r3, #2]
   120e6:	f022 0201 	bic.w	r2, r2, #1
   120ea:	805a      	strh	r2, [r3, #2]
   120ec:	f7ff bfc1 	b.w	12072 <free_chunk>
}
   120f0:	4770      	bx	lr

000120f2 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   120f2:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   120f4:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   120f6:	b909      	cbnz	r1, 120fc <sys_heap_alloc+0xa>
		return NULL;
   120f8:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   120fa:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   120fc:	68ab      	ldr	r3, [r5, #8]
   120fe:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   12102:	d9f9      	bls.n	120f8 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   12104:	310b      	adds	r1, #11
   12106:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   12108:	4621      	mov	r1, r4
   1210a:	4628      	mov	r0, r5
   1210c:	f7ff ff4b 	bl	11fa6 <alloc_chunk>
	if (c == 0U) {
   12110:	4606      	mov	r6, r0
   12112:	2800      	cmp	r0, #0
   12114:	d0f0      	beq.n	120f8 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   12116:	4601      	mov	r1, r0
   12118:	4628      	mov	r0, r5
   1211a:	f7ff feee 	bl	11efa <chunk_size>
   1211e:	42a0      	cmp	r0, r4
   12120:	d907      	bls.n	12132 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   12122:	1932      	adds	r2, r6, r4
   12124:	4628      	mov	r0, r5
   12126:	f7ff ff8a 	bl	1203e <split_chunks>
		free_list_add(h, c + chunk_sz);
   1212a:	4611      	mov	r1, r2
   1212c:	4628      	mov	r0, r5
   1212e:	f7ff fee9 	bl	11f04 <free_list_add>
	void *cmem = &buf[c];
   12132:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   12136:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   12138:	8853      	ldrh	r3, [r2, #2]
   1213a:	f043 0301 	orr.w	r3, r3, #1
   1213e:	8053      	strh	r3, [r2, #2]
   12140:	3004      	adds	r0, #4
	return mem;
   12142:	e7da      	b.n	120fa <sys_heap_alloc+0x8>

00012144 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   12144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12148:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1214a:	424a      	negs	r2, r1
   1214c:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   12150:	ea31 0202 	bics.w	r2, r1, r2
{
   12154:	4603      	mov	r3, r0
	if (align != rew) {
   12156:	d00a      	beq.n	1216e <sys_heap_aligned_alloc+0x2a>
		return false;
   12158:	2f04      	cmp	r7, #4
   1215a:	463a      	mov	r2, r7
   1215c:	46b9      	mov	r9, r7
   1215e:	bf28      	it	cs
   12160:	2204      	movcs	r2, #4
		align -= rew;
   12162:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   12164:	b974      	cbnz	r4, 12184 <sys_heap_aligned_alloc+0x40>
		return NULL;
   12166:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   12168:	4628      	mov	r0, r5
   1216a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   1216e:	2904      	cmp	r1, #4
   12170:	d804      	bhi.n	1217c <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   12172:	4621      	mov	r1, r4
}
   12174:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   12178:	f7ff bfbb 	b.w	120f2 <sys_heap_alloc>
		rew = 0;
   1217c:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   12180:	2204      	movs	r2, #4
   12182:	e7ef      	b.n	12164 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   12184:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   12186:	68b3      	ldr	r3, [r6, #8]
   12188:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1218c:	d9eb      	bls.n	12166 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1218e:	f104 010b 	add.w	r1, r4, #11
   12192:	4439      	add	r1, r7
   12194:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   12196:	08c9      	lsrs	r1, r1, #3
   12198:	4630      	mov	r0, r6
   1219a:	f7ff ff04 	bl	11fa6 <alloc_chunk>
	if (c0 == 0) {
   1219e:	4680      	mov	r8, r0
   121a0:	2800      	cmp	r0, #0
   121a2:	d0e0      	beq.n	12166 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   121a4:	f109 0504 	add.w	r5, r9, #4
   121a8:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   121ac:	1e7b      	subs	r3, r7, #1
   121ae:	4435      	add	r5, r6
   121b0:	441d      	add	r5, r3
   121b2:	427f      	negs	r7, r7
   121b4:	403d      	ands	r5, r7
   121b6:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   121ba:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   121bc:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   121be:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   121c0:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   121c2:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   121c6:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   121c8:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   121cc:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   121d0:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   121d4:	d208      	bcs.n	121e8 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   121d6:	4601      	mov	r1, r0
   121d8:	463a      	mov	r2, r7
   121da:	4630      	mov	r0, r6
   121dc:	f7ff ff2f 	bl	1203e <split_chunks>
		free_list_add(h, c0);
   121e0:	4641      	mov	r1, r8
   121e2:	4630      	mov	r0, r6
   121e4:	f7ff fe8e 	bl	11f04 <free_list_add>
	return c + chunk_size(h, c);
   121e8:	4639      	mov	r1, r7
   121ea:	4630      	mov	r0, r6
   121ec:	f7ff fe85 	bl	11efa <chunk_size>
   121f0:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   121f2:	4284      	cmp	r4, r0
   121f4:	d207      	bcs.n	12206 <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   121f6:	4630      	mov	r0, r6
   121f8:	4622      	mov	r2, r4
   121fa:	f7ff ff20 	bl	1203e <split_chunks>
		free_list_add(h, c_end);
   121fe:	4621      	mov	r1, r4
   12200:	4630      	mov	r0, r6
   12202:	f7ff fe7f 	bl	11f04 <free_list_add>
	void *cmem = &buf[c];
   12206:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1220a:	8873      	ldrh	r3, [r6, #2]
   1220c:	f043 0301 	orr.w	r3, r3, #1
   12210:	8073      	strh	r3, [r6, #2]
   12212:	e7a9      	b.n	12168 <sys_heap_aligned_alloc+0x24>

00012214 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   12214:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   12216:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   12218:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1221a:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1221e:	f021 0107 	bic.w	r1, r1, #7
{
   12222:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   12224:	1acd      	subs	r5, r1, r3
   12226:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   12228:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   1222a:	fab2 f082 	clz	r0, r2
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1222e:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
   12232:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   12234:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   12236:	2600      	movs	r6, #0
   12238:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1223a:	f1c0 0020 	rsb	r0, r0, #32
   1223e:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
   12242:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
   12244:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   12246:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1224a:	4284      	cmp	r4, r0
   1224c:	d118      	bne.n	12280 <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1224e:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   12250:	f040 0001 	orr.w	r0, r0, #1
   12254:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   12256:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1225a:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1225c:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   1225e:	801e      	strh	r6, [r3, #0]
   12260:	8067      	strh	r7, [r4, #2]
   12262:	195c      	adds	r4, r3, r5
   12264:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   12268:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
   1226c:	8066      	strh	r6, [r4, #2]
   1226e:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   12270:	8850      	ldrh	r0, [r2, #2]
   12272:	f040 0001 	orr.w	r0, r0, #1
   12276:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   12278:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   1227a:	4618      	mov	r0, r3
   1227c:	f7ff be42 	b.w	11f04 <free_list_add>
		h->buckets[i].next = 0;
   12280:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
   12284:	e7e1      	b.n	1224a <sys_heap_init+0x36>

00012286 <encode_uint>:
{
   12286:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1228a:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   1228c:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   1228e:	2b6f      	cmp	r3, #111	; 0x6f
{
   12290:	4680      	mov	r8, r0
   12292:	460f      	mov	r7, r1
   12294:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   12296:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1229a:	d029      	beq.n	122f0 <encode_uint+0x6a>
   1229c:	d824      	bhi.n	122e8 <encode_uint+0x62>
		return 16;
   1229e:	2b58      	cmp	r3, #88	; 0x58
   122a0:	bf14      	ite	ne
   122a2:	260a      	movne	r6, #10
   122a4:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   122a6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   122aa:	4632      	mov	r2, r6
   122ac:	2300      	movs	r3, #0
   122ae:	4640      	mov	r0, r8
   122b0:	4639      	mov	r1, r7
   122b2:	f7fa f825 	bl	c300 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   122b6:	2a09      	cmp	r2, #9
   122b8:	b2d4      	uxtb	r4, r2
   122ba:	d81e      	bhi.n	122fa <encode_uint+0x74>
   122bc:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   122be:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   122c0:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   122c2:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   122c6:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   122ca:	d301      	bcc.n	122d0 <encode_uint+0x4a>
   122cc:	45d1      	cmp	r9, sl
   122ce:	d811      	bhi.n	122f4 <encode_uint+0x6e>
	if (conv->flag_hash) {
   122d0:	782b      	ldrb	r3, [r5, #0]
   122d2:	069b      	lsls	r3, r3, #26
   122d4:	d505      	bpl.n	122e2 <encode_uint+0x5c>
		if (radix == 8) {
   122d6:	2e08      	cmp	r6, #8
   122d8:	d115      	bne.n	12306 <encode_uint+0x80>
			conv->altform_0 = true;
   122da:	78ab      	ldrb	r3, [r5, #2]
   122dc:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   122e0:	70ab      	strb	r3, [r5, #2]
}
   122e2:	4648      	mov	r0, r9
   122e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   122e8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   122ec:	2b70      	cmp	r3, #112	; 0x70
   122ee:	e7d7      	b.n	122a0 <encode_uint+0x1a>
	switch (specifier) {
   122f0:	2608      	movs	r6, #8
   122f2:	e7d8      	b.n	122a6 <encode_uint+0x20>
		value /= radix;
   122f4:	4680      	mov	r8, r0
   122f6:	460f      	mov	r7, r1
   122f8:	e7d7      	b.n	122aa <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   122fa:	f1bb 0f19 	cmp.w	fp, #25
   122fe:	bf94      	ite	ls
   12300:	3437      	addls	r4, #55	; 0x37
   12302:	3457      	addhi	r4, #87	; 0x57
   12304:	e7db      	b.n	122be <encode_uint+0x38>
		} else if (radix == 16) {
   12306:	2e10      	cmp	r6, #16
   12308:	d1eb      	bne.n	122e2 <encode_uint+0x5c>
			conv->altform_0c = true;
   1230a:	78ab      	ldrb	r3, [r5, #2]
   1230c:	f043 0310 	orr.w	r3, r3, #16
   12310:	e7e6      	b.n	122e0 <encode_uint+0x5a>

00012312 <outs>:
{
   12312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12316:	4607      	mov	r7, r0
   12318:	4688      	mov	r8, r1
   1231a:	4615      	mov	r5, r2
   1231c:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1231e:	4614      	mov	r4, r2
   12320:	42b4      	cmp	r4, r6
   12322:	eba4 0005 	sub.w	r0, r4, r5
   12326:	d302      	bcc.n	1232e <outs+0x1c>
   12328:	b93e      	cbnz	r6, 1233a <outs+0x28>
   1232a:	7823      	ldrb	r3, [r4, #0]
   1232c:	b12b      	cbz	r3, 1233a <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1232e:	f814 0b01 	ldrb.w	r0, [r4], #1
   12332:	4641      	mov	r1, r8
   12334:	47b8      	blx	r7
		if (rc < 0) {
   12336:	2800      	cmp	r0, #0
   12338:	daf2      	bge.n	12320 <outs+0xe>
}
   1233a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001233e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BOOTLOADER_MCUBOOT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_SIGNATURE_KEY_FILE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_EXTRA_IMGTOOL_ARGS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1233e:	4770      	bx	lr

00012340 <flash_img_buffered_write>:
	     "CONFIG_IMG_BLOCK_BUF_SIZE is not a multiple of "
	     "FLASH_WRITE_BLOCK_SIZE");

int flash_img_buffered_write(struct flash_img_context *ctx, const uint8_t *data,
			     size_t len, bool flush)
{
   12340:	b570      	push	{r4, r5, r6, lr}
   12342:	4604      	mov	r4, r0
	int rc;

	rc = stream_flash_buffered_write(&ctx->stream, data, len, flush);
   12344:	f500 7001 	add.w	r0, r0, #516	; 0x204
{
   12348:	461e      	mov	r6, r3
	rc = stream_flash_buffered_write(&ctx->stream, data, len, flush);
   1234a:	f000 f8ec 	bl	12526 <stream_flash_buffered_write>
   1234e:	4605      	mov	r5, r0
	if (!flush) {
   12350:	b136      	cbz	r6, 12360 <flash_img_buffered_write+0x20>
	if (rc) {
		return rc;
	}
#endif

	flash_area_close(ctx->flash_area);
   12352:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
   12356:	f000 f826 	bl	123a6 <flash_area_close>
	ctx->flash_area = NULL;
   1235a:	2300      	movs	r3, #0
   1235c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

	return rc;
}
   12360:	4628      	mov	r0, r5
   12362:	bd70      	pop	{r4, r5, r6, pc}

00012364 <flash_img_init_id>:
{
	return stream_flash_bytes_written(&ctx->stream);
}

int flash_img_init_id(struct flash_img_context *ctx, uint8_t area_id)
{
   12364:	b530      	push	{r4, r5, lr}
   12366:	4605      	mov	r5, r0
   12368:	b085      	sub	sp, #20
   1236a:	4608      	mov	r0, r1
	int rc;
	const struct device *flash_dev;

	rc = flash_area_open(area_id,
   1236c:	f505 7100 	add.w	r1, r5, #512	; 0x200
   12370:	f7fa ff4a 	bl	d208 <flash_area_open>
			       (const struct flash_area **)&(ctx->flash_area));
	if (rc) {
   12374:	4604      	mov	r4, r0
   12376:	b998      	cbnz	r0, 123a0 <flash_img_init_id+0x3c>
		return rc;
	}

	flash_dev = flash_area_get_device(ctx->flash_area);
   12378:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
   1237c:	f000 f86c 	bl	12458 <flash_area_get_device>

	return stream_flash_init(&ctx->stream, flash_dev, ctx->buf,
			CONFIG_IMG_BLOCK_BUF_SIZE, ctx->flash_area->fa_off,
   12380:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
	return stream_flash_init(&ctx->stream, flash_dev, ctx->buf,
   12384:	9402      	str	r4, [sp, #8]
   12386:	689a      	ldr	r2, [r3, #8]
   12388:	9201      	str	r2, [sp, #4]
   1238a:	685b      	ldr	r3, [r3, #4]
   1238c:	9300      	str	r3, [sp, #0]
	flash_dev = flash_area_get_device(ctx->flash_area);
   1238e:	4601      	mov	r1, r0
	return stream_flash_init(&ctx->stream, flash_dev, ctx->buf,
   12390:	f44f 7300 	mov.w	r3, #512	; 0x200
   12394:	462a      	mov	r2, r5
   12396:	f505 7001 	add.w	r0, r5, #516	; 0x204
   1239a:	f7fa ff53 	bl	d244 <stream_flash_init>
   1239e:	4604      	mov	r4, r0
			ctx->flash_area->fa_size, NULL);
}
   123a0:	4620      	mov	r0, r4
   123a2:	b005      	add	sp, #20
   123a4:	bd30      	pop	{r4, r5, pc}

000123a6 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   123a6:	4770      	bx	lr

000123a8 <flash_area_read>:

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   123a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
   123ac:	1e0c      	subs	r4, r1, #0
   123ae:	4605      	mov	r5, r0
   123b0:	4617      	mov	r7, r2
   123b2:	461e      	mov	r6, r3
   123b4:	db10      	blt.n	123d8 <flash_area_read+0x30>
   123b6:	6882      	ldr	r2, [r0, #8]
   123b8:	18e3      	adds	r3, r4, r3
   123ba:	4293      	cmp	r3, r2
   123bc:	d80c      	bhi.n	123d8 <flash_area_read+0x30>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   123be:	68c0      	ldr	r0, [r0, #12]
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   123c0:	f7fe fb6c 	bl	10a9c <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   123c4:	6869      	ldr	r1, [r5, #4]
   123c6:	4421      	add	r1, r4
				    size_t len)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
   123c8:	6883      	ldr	r3, [r0, #8]
   123ca:	681c      	ldr	r4, [r3, #0]
   123cc:	463a      	mov	r2, r7
   123ce:	4633      	mov	r3, r6
   123d0:	46a4      	mov	ip, r4
}
   123d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   123d6:	4760      	bx	ip
   123d8:	f06f 0015 	mvn.w	r0, #21
   123dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000123e0 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   123e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   123e4:	1e0c      	subs	r4, r1, #0
   123e6:	4605      	mov	r5, r0
   123e8:	4617      	mov	r7, r2
   123ea:	461e      	mov	r6, r3
   123ec:	db10      	blt.n	12410 <flash_area_write+0x30>
   123ee:	6882      	ldr	r2, [r0, #8]
   123f0:	18e3      	adds	r3, r4, r3
   123f2:	4293      	cmp	r3, r2
   123f4:	d80c      	bhi.n	12410 <flash_area_write+0x30>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   123f6:	68c0      	ldr	r0, [r0, #12]
   123f8:	f7fe fb50 	bl	10a9c <z_impl_device_get_binding>

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   123fc:	6869      	ldr	r1, [r5, #4]
   123fe:	4421      	add	r1, r4
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->write(dev, offset, data, len);
   12400:	6883      	ldr	r3, [r0, #8]
   12402:	685c      	ldr	r4, [r3, #4]
   12404:	463a      	mov	r2, r7
   12406:	4633      	mov	r3, r6
   12408:	46a4      	mov	ip, r4

	return rc;
}
   1240a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1240e:	4760      	bx	ip
   12410:	f06f 0015 	mvn.w	r0, #21
   12414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012418 <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
   12418:	b570      	push	{r4, r5, r6, lr}
   1241a:	1e0c      	subs	r4, r1, #0
   1241c:	4605      	mov	r5, r0
   1241e:	4616      	mov	r6, r2
   12420:	db0e      	blt.n	12440 <flash_area_erase+0x28>
   12422:	18a3      	adds	r3, r4, r2
   12424:	6882      	ldr	r2, [r0, #8]
   12426:	4293      	cmp	r3, r2
   12428:	d80a      	bhi.n	12440 <flash_area_erase+0x28>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   1242a:	68c0      	ldr	r0, [r0, #12]
   1242c:	f7fe fb36 	bl	10a9c <z_impl_device_get_binding>

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   12430:	6869      	ldr	r1, [r5, #4]
   12432:	4421      	add	r1, r4
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
   12434:	6883      	ldr	r3, [r0, #8]
   12436:	4632      	mov	r2, r6
   12438:	689b      	ldr	r3, [r3, #8]

	return rc;
}
   1243a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1243e:	4718      	bx	r3
   12440:	f06f 0015 	mvn.w	r0, #21
   12444:	bd70      	pop	{r4, r5, r6, pc}

00012446 <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
   12446:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
   12448:	68c0      	ldr	r0, [r0, #12]
   1244a:	f7fe fb27 	bl	10a9c <z_impl_device_get_binding>
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
   1244e:	6883      	ldr	r3, [r0, #8]
   12450:	68db      	ldr	r3, [r3, #12]
   12452:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
   12454:	6800      	ldr	r0, [r0, #0]
   12456:	bd08      	pop	{r3, pc}

00012458 <flash_area_get_device>:
	return 1;
}

const struct device *flash_area_get_device(const struct flash_area *fa)
{
	return device_get_binding(fa->fa_dev_name);
   12458:	68c0      	ldr	r0, [r0, #12]
   1245a:	f7fe bb1f 	b.w	10a9c <z_impl_device_get_binding>

0001245e <flash_area_erased_val>:
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
   1245e:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(device_get_binding(fa->fa_dev_name));
   12460:	68c0      	ldr	r0, [r0, #12]
   12462:	f7fe fb1b 	bl	10a9c <z_impl_device_get_binding>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   12466:	6883      	ldr	r3, [r0, #8]
   12468:	68db      	ldr	r3, [r3, #12]
   1246a:	4798      	blx	r3

	return param->erase_value;
}
   1246c:	7900      	ldrb	r0, [r0, #4]
   1246e:	bd08      	pop	{r3, pc}

00012470 <flash_get_write_block_size>:

extern size_t z_impl_flash_get_write_block_size(const struct device * dev);

__pinned_func
static inline size_t flash_get_write_block_size(const struct device * dev)
{
   12470:	b508      	push	{r3, lr}
	return api->get_parameters(dev)->write_block_size;
   12472:	6883      	ldr	r3, [r0, #8]
   12474:	68db      	ldr	r3, [r3, #12]
   12476:	4798      	blx	r3
		return (size_t) arch_syscall_invoke1(parm0.x, K_SYSCALL_FLASH_GET_WRITE_BLOCK_SIZE);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_write_block_size(dev);
}
   12478:	6800      	ldr	r0, [r0, #0]
   1247a:	bd08      	pop	{r3, pc}

0001247c <find_flash_total_size>:
	if (ctx->buf_len > info->size) {
   1247c:	6843      	ldr	r3, [r0, #4]
   1247e:	680a      	ldr	r2, [r1, #0]
   12480:	429a      	cmp	r2, r3
	ctx->total_size += info->size;
   12482:	bf97      	itett	ls
   12484:	684a      	ldrls	r2, [r1, #4]
		ctx->total_size = 0;
   12486:	2300      	movhi	r3, #0
	ctx->total_size += info->size;
   12488:	189b      	addls	r3, r3, r2
	return true;
   1248a:	2001      	movls	r0, #1
		return false;
   1248c:	bf88      	it	hi
   1248e:	4618      	movhi	r0, r3
   12490:	604b      	str	r3, [r1, #4]
}
   12492:	4770      	bx	lr

00012494 <flash_sync>:
{
   12494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ctx->buf_bytes == 0) {
   12496:	6885      	ldr	r5, [r0, #8]
{
   12498:	4604      	mov	r4, r0
	if (ctx->buf_bytes == 0) {
   1249a:	b34d      	cbz	r5, 124f0 <flash_sync+0x5c>
	size_t write_addr = ctx->offset + ctx->bytes_written;
   1249c:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
	fill_length = flash_get_write_block_size(ctx->fdev);
   124a0:	68c0      	ldr	r0, [r0, #12]
   124a2:	f7ff ffe5 	bl	12470 <flash_get_write_block_size>
	if (ctx->buf_bytes % fill_length) {
   124a6:	68a5      	ldr	r5, [r4, #8]
   124a8:	fbb5 f3f0 	udiv	r3, r5, r0
   124ac:	fb00 5513 	mls	r5, r0, r3, r5
   124b0:	b15d      	cbz	r5, 124ca <flash_sync+0x36>
		fill_length -= ctx->buf_bytes % fill_length;
   124b2:	1b45      	subs	r5, r0, r5
		filler = flash_get_parameters(ctx->fdev)->erase_value;
   124b4:	68e0      	ldr	r0, [r4, #12]
	return api->get_parameters(dev);
   124b6:	6883      	ldr	r3, [r0, #8]
   124b8:	68db      	ldr	r3, [r3, #12]
   124ba:	4798      	blx	r3
		memset(ctx->buf + ctx->buf_bytes, filler, fill_length);
   124bc:	68a3      	ldr	r3, [r4, #8]
   124be:	7901      	ldrb	r1, [r0, #4]
   124c0:	6820      	ldr	r0, [r4, #0]
   124c2:	462a      	mov	r2, r5
   124c4:	4418      	add	r0, r3
   124c6:	f000 f8c5 	bl	12654 <memset>
	buf_bytes_aligned = ctx->buf_bytes + fill_length;
   124ca:	68a3      	ldr	r3, [r4, #8]
	rc = flash_write(ctx->fdev, write_addr, ctx->buf, buf_bytes_aligned);
   124cc:	68e0      	ldr	r0, [r4, #12]
   124ce:	6822      	ldr	r2, [r4, #0]
	size_t write_addr = ctx->offset + ctx->bytes_written;
   124d0:	443e      	add	r6, r7
	buf_bytes_aligned = ctx->buf_bytes + fill_length;
   124d2:	442b      	add	r3, r5
	rc = api->write(dev, offset, data, len);
   124d4:	6881      	ldr	r1, [r0, #8]
   124d6:	684d      	ldr	r5, [r1, #4]
   124d8:	4631      	mov	r1, r6
   124da:	47a8      	blx	r5
	if (rc != 0) {
   124dc:	4605      	mov	r5, r0
   124de:	b938      	cbnz	r0, 124f0 <flash_sync+0x5c>
	if (ctx->callback) {
   124e0:	69e3      	ldr	r3, [r4, #28]
   124e2:	b9f3      	cbnz	r3, 12522 <flash_sync+0x8e>
	ctx->bytes_written += ctx->buf_bytes;
   124e4:	6923      	ldr	r3, [r4, #16]
   124e6:	68a2      	ldr	r2, [r4, #8]
   124e8:	4413      	add	r3, r2
   124ea:	6123      	str	r3, [r4, #16]
	ctx->buf_bytes = 0U;
   124ec:	2300      	movs	r3, #0
   124ee:	60a3      	str	r3, [r4, #8]
}
   124f0:	4628      	mov	r0, r5
   124f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			ctx->buf[i] = ~ctx->buf[i];
   124f4:	5c53      	ldrb	r3, [r2, r1]
   124f6:	43db      	mvns	r3, r3
   124f8:	5453      	strb	r3, [r2, r1]
		for (int i = 0; i < ctx->buf_bytes; i++) {
   124fa:	3101      	adds	r1, #1
   124fc:	68a3      	ldr	r3, [r4, #8]
			ctx->buf[i] = ~ctx->buf[i];
   124fe:	6822      	ldr	r2, [r4, #0]
		for (int i = 0; i < ctx->buf_bytes; i++) {
   12500:	428b      	cmp	r3, r1
   12502:	d8f7      	bhi.n	124f4 <flash_sync+0x60>
		rc = flash_read(ctx->fdev, write_addr, ctx->buf,
   12504:	68e0      	ldr	r0, [r4, #12]
	return api->read(dev, offset, data, len);
   12506:	6881      	ldr	r1, [r0, #8]
   12508:	680f      	ldr	r7, [r1, #0]
   1250a:	4631      	mov	r1, r6
   1250c:	47b8      	blx	r7
		if (rc != 0) {
   1250e:	b930      	cbnz	r0, 1251e <flash_sync+0x8a>
		rc = ctx->callback(ctx->buf, ctx->buf_bytes, write_addr);
   12510:	69e3      	ldr	r3, [r4, #28]
   12512:	68a1      	ldr	r1, [r4, #8]
   12514:	6820      	ldr	r0, [r4, #0]
   12516:	4632      	mov	r2, r6
   12518:	4798      	blx	r3
		if (rc != 0) {
   1251a:	2800      	cmp	r0, #0
   1251c:	d0e2      	beq.n	124e4 <flash_sync+0x50>
   1251e:	4605      	mov	r5, r0
   12520:	e7e6      	b.n	124f0 <flash_sync+0x5c>
		for (int i = 0; i < ctx->buf_bytes; i++) {
   12522:	4601      	mov	r1, r0
   12524:	e7ea      	b.n	124fc <flash_sync+0x68>

00012526 <stream_flash_buffered_write>:
{
   12526:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1252a:	4689      	mov	r9, r1
   1252c:	4616      	mov	r6, r2
   1252e:	4698      	mov	r8, r3
	if (!ctx) {
   12530:	4604      	mov	r4, r0
   12532:	b398      	cbz	r0, 1259c <stream_flash_buffered_write+0x76>
	if (ctx->bytes_written + ctx->buf_bytes + len > ctx->available) {
   12534:	6882      	ldr	r2, [r0, #8]
   12536:	6903      	ldr	r3, [r0, #16]
   12538:	4413      	add	r3, r2
   1253a:	6982      	ldr	r2, [r0, #24]
   1253c:	4433      	add	r3, r6
   1253e:	4293      	cmp	r3, r2
   12540:	d830      	bhi.n	125a4 <stream_flash_buffered_write+0x7e>
	int processed = 0;
   12542:	2500      	movs	r5, #0
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   12544:	e9d4 7001 	ldrd	r7, r0, [r4, #4]
	while ((len - processed) >=
   12548:	eba6 0a05 	sub.w	sl, r6, r5
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   1254c:	1a3f      	subs	r7, r7, r0
	while ((len - processed) >=
   1254e:	45ba      	cmp	sl, r7
   12550:	d215      	bcs.n	1257e <stream_flash_buffered_write+0x58>
	if (processed < len) {
   12552:	42b5      	cmp	r5, r6
   12554:	d209      	bcs.n	1256a <stream_flash_buffered_write+0x44>
		memcpy(ctx->buf + ctx->buf_bytes,
   12556:	6823      	ldr	r3, [r4, #0]
   12558:	4652      	mov	r2, sl
   1255a:	4418      	add	r0, r3
   1255c:	eb09 0105 	add.w	r1, r9, r5
   12560:	f000 f86d 	bl	1263e <memcpy>
		ctx->buf_bytes += len - processed;
   12564:	68a3      	ldr	r3, [r4, #8]
   12566:	4453      	add	r3, sl
   12568:	60a3      	str	r3, [r4, #8]
	if (flush && ctx->buf_bytes > 0) {
   1256a:	f1b8 0f00 	cmp.w	r8, #0
   1256e:	d01c      	beq.n	125aa <stream_flash_buffered_write+0x84>
   12570:	68a0      	ldr	r0, [r4, #8]
   12572:	b1a8      	cbz	r0, 125a0 <stream_flash_buffered_write+0x7a>
		rc = flash_sync(ctx);
   12574:	4620      	mov	r0, r4
}
   12576:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		rc = flash_sync(ctx);
   1257a:	f7ff bf8b 	b.w	12494 <flash_sync>
		memcpy(ctx->buf + ctx->buf_bytes, data + processed,
   1257e:	6823      	ldr	r3, [r4, #0]
   12580:	463a      	mov	r2, r7
   12582:	4418      	add	r0, r3
   12584:	eb09 0105 	add.w	r1, r9, r5
   12588:	f000 f859 	bl	1263e <memcpy>
		ctx->buf_bytes = ctx->buf_len;
   1258c:	6863      	ldr	r3, [r4, #4]
   1258e:	60a3      	str	r3, [r4, #8]
		rc = flash_sync(ctx);
   12590:	4620      	mov	r0, r4
   12592:	f7ff ff7f 	bl	12494 <flash_sync>
		if (rc != 0) {
   12596:	b918      	cbnz	r0, 125a0 <stream_flash_buffered_write+0x7a>
		processed += buf_empty_bytes;
   12598:	443d      	add	r5, r7
   1259a:	e7d3      	b.n	12544 <stream_flash_buffered_write+0x1e>
		return -EFAULT;
   1259c:	f06f 000d 	mvn.w	r0, #13
}
   125a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   125a4:	f06f 000b 	mvn.w	r0, #11
   125a8:	e7fa      	b.n	125a0 <stream_flash_buffered_write+0x7a>
   125aa:	4640      	mov	r0, r8
   125ac:	e7f8      	b.n	125a0 <stream_flash_buffered_write+0x7a>

000125ae <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   125ae:	f002 b943 	b.w	14838 <z_fatal_error>

000125b2 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   125b2:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   125b4:	6800      	ldr	r0, [r0, #0]
   125b6:	f002 b93f 	b.w	14838 <z_fatal_error>

000125ba <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   125ba:	2100      	movs	r1, #0
   125bc:	2001      	movs	r0, #1
   125be:	f7ff bff6 	b.w	125ae <z_arm_fatal_error>

000125c2 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   125c2:	b508      	push	{r3, lr}
	handler();
   125c4:	f7fb f836 	bl	d634 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   125c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   125cc:	f7fb b90e 	b.w	d7ec <z_arm_exc_exit>

000125d0 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   125d0:	3901      	subs	r1, #1
   125d2:	4603      	mov	r3, r0
   125d4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   125d8:	b90a      	cbnz	r2, 125de <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   125da:	701a      	strb	r2, [r3, #0]

	return dest;
}
   125dc:	4770      	bx	lr
		*d = *s;
   125de:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   125e2:	e7f7      	b.n	125d4 <strcpy+0x4>

000125e4 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   125e4:	4603      	mov	r3, r0
	size_t n = 0;
   125e6:	2000      	movs	r0, #0

	while (*s != '\0') {
   125e8:	5c1a      	ldrb	r2, [r3, r0]
   125ea:	b902      	cbnz	r2, 125ee <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   125ec:	4770      	bx	lr
		n++;
   125ee:	3001      	adds	r0, #1
   125f0:	e7fa      	b.n	125e8 <strlen+0x4>

000125f2 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   125f2:	4603      	mov	r3, r0
	size_t n = 0;
   125f4:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   125f6:	5c1a      	ldrb	r2, [r3, r0]
   125f8:	b10a      	cbz	r2, 125fe <strnlen+0xc>
   125fa:	4288      	cmp	r0, r1
   125fc:	d100      	bne.n	12600 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   125fe:	4770      	bx	lr
		n++;
   12600:	3001      	adds	r0, #1
   12602:	e7f8      	b.n	125f6 <strnlen+0x4>

00012604 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   12604:	1e43      	subs	r3, r0, #1
   12606:	3901      	subs	r1, #1
   12608:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1260c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   12610:	4282      	cmp	r2, r0
   12612:	d101      	bne.n	12618 <strcmp+0x14>
   12614:	2a00      	cmp	r2, #0
   12616:	d1f7      	bne.n	12608 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   12618:	1a10      	subs	r0, r2, r0
   1261a:	4770      	bx	lr

0001261c <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1261c:	b510      	push	{r4, lr}
   1261e:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   12620:	b15a      	cbz	r2, 1263a <memcmp+0x1e>
   12622:	3901      	subs	r1, #1
   12624:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   12626:	f813 0b01 	ldrb.w	r0, [r3], #1
   1262a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1262e:	42a3      	cmp	r3, r4
   12630:	d001      	beq.n	12636 <memcmp+0x1a>
   12632:	4290      	cmp	r0, r2
   12634:	d0f7      	beq.n	12626 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   12636:	1a80      	subs	r0, r0, r2
}
   12638:	bd10      	pop	{r4, pc}
		return 0;
   1263a:	4610      	mov	r0, r2
   1263c:	e7fc      	b.n	12638 <memcmp+0x1c>

0001263e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   1263e:	b510      	push	{r4, lr}
   12640:	1e43      	subs	r3, r0, #1
   12642:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   12644:	4291      	cmp	r1, r2
   12646:	d100      	bne.n	1264a <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   12648:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   1264a:	f811 4b01 	ldrb.w	r4, [r1], #1
   1264e:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   12652:	e7f7      	b.n	12644 <memcpy+0x6>

00012654 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   12654:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   12656:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   12658:	4603      	mov	r3, r0
	while (n > 0) {
   1265a:	4293      	cmp	r3, r2
   1265c:	d100      	bne.n	12660 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1265e:	4770      	bx	lr
		*(d_byte++) = c_byte;
   12660:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   12664:	e7f9      	b.n	1265a <memset+0x6>

00012666 <_stdout_hook_default>:
}
   12666:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1266a:	4770      	bx	lr

0001266c <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   1266c:	2806      	cmp	r0, #6
   1266e:	d108      	bne.n	12682 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   12670:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12674:	2201      	movs	r2, #1
   12676:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1267a:	f3bf 8f4f 	dsb	sy
        __WFE();
   1267e:	bf20      	wfe
    while (true)
   12680:	e7fd      	b.n	1267e <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   12682:	4770      	bx	lr

00012684 <pm_state_exit_post_ops>:
   12684:	2300      	movs	r3, #0
   12686:	f383 8811 	msr	BASEPRI, r3
   1268a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1268e:	4770      	bx	lr

00012690 <sys_get_be32>:
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_be16(const uint8_t src[2])
{
	return ((uint16_t)src[0] << 8) | src[1];
   12690:	6800      	ldr	r0, [r0, #0]
 *  @return 32-bit integer in host endianness.
 */
static inline uint32_t sys_get_be32(const uint8_t src[4])
{
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
}
   12692:	ba00      	rev	r0, r0
   12694:	4770      	bx	lr

00012696 <cbor_nb_reader_get8>:
	if (offset < 0 || offset >= cnr->nb->len) {
   12696:	2900      	cmp	r1, #0
   12698:	db06      	blt.n	126a8 <cbor_nb_reader_get8+0x12>
   1269a:	69c3      	ldr	r3, [r0, #28]
   1269c:	899a      	ldrh	r2, [r3, #12]
   1269e:	428a      	cmp	r2, r1
   126a0:	dd02      	ble.n	126a8 <cbor_nb_reader_get8+0x12>
	return cnr->nb->data[offset];
   126a2:	689b      	ldr	r3, [r3, #8]
   126a4:	5c58      	ldrb	r0, [r3, r1]
   126a6:	4770      	bx	lr
		return UINT8_MAX;
   126a8:	20ff      	movs	r0, #255	; 0xff
}
   126aa:	4770      	bx	lr

000126ac <cbor_nb_reader_get16>:
	if (offset < 0 || offset > cnr->nb->len - (int)sizeof(uint16_t)) {
   126ac:	2900      	cmp	r1, #0
   126ae:	db09      	blt.n	126c4 <cbor_nb_reader_get16+0x18>
   126b0:	69c2      	ldr	r2, [r0, #28]
   126b2:	8993      	ldrh	r3, [r2, #12]
   126b4:	3b01      	subs	r3, #1
   126b6:	428b      	cmp	r3, r1
   126b8:	dd04      	ble.n	126c4 <cbor_nb_reader_get16+0x18>
	return ((uint16_t)src[0] << 8) | src[1];
   126ba:	6893      	ldr	r3, [r2, #8]
   126bc:	5a58      	ldrh	r0, [r3, r1]
   126be:	ba40      	rev16	r0, r0
   126c0:	b280      	uxth	r0, r0
	return sys_get_be16(cnr->nb->data + offset);
   126c2:	4770      	bx	lr
		return UINT16_MAX;
   126c4:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   126c8:	4770      	bx	lr

000126ca <cbor_nb_reader_get32>:
	if (offset < 0 || offset > cnr->nb->len - (int)sizeof(uint32_t)) {
   126ca:	2900      	cmp	r1, #0
   126cc:	db08      	blt.n	126e0 <cbor_nb_reader_get32+0x16>
   126ce:	69c2      	ldr	r2, [r0, #28]
   126d0:	8993      	ldrh	r3, [r2, #12]
   126d2:	3b03      	subs	r3, #3
   126d4:	428b      	cmp	r3, r1
   126d6:	dd03      	ble.n	126e0 <cbor_nb_reader_get32+0x16>
	return sys_get_be32(cnr->nb->data + offset);
   126d8:	6890      	ldr	r0, [r2, #8]
   126da:	4408      	add	r0, r1
   126dc:	f7ff bfd8 	b.w	12690 <sys_get_be32>
}
   126e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   126e4:	4770      	bx	lr

000126e6 <cbor_nb_reader_get64>:
	if (offset < 0 || offset > cnr->nb->len - (int)sizeof(uint64_t)) {
   126e6:	2900      	cmp	r1, #0
{
   126e8:	b508      	push	{r3, lr}
	if (offset < 0 || offset > cnr->nb->len - (int)sizeof(uint64_t)) {
   126ea:	db0e      	blt.n	1270a <cbor_nb_reader_get64+0x24>
   126ec:	69c2      	ldr	r2, [r0, #28]
   126ee:	8993      	ldrh	r3, [r2, #12]
   126f0:	3b07      	subs	r3, #7
   126f2:	428b      	cmp	r3, r1
   126f4:	dd09      	ble.n	1270a <cbor_nb_reader_get64+0x24>
	return sys_get_be64(cnr->nb->data + offset);
   126f6:	6893      	ldr	r3, [r2, #8]
   126f8:	440b      	add	r3, r1
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_be64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_be32(&src[0]) << 32) | sys_get_be32(&src[4]);
   126fa:	4618      	mov	r0, r3
   126fc:	f7ff ffc8 	bl	12690 <sys_get_be32>
   12700:	4601      	mov	r1, r0
   12702:	1d18      	adds	r0, r3, #4
   12704:	f7ff ffc4 	bl	12690 <sys_get_be32>
}
   12708:	bd08      	pop	{r3, pc}
		return UINT64_MAX;
   1270a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1270e:	4601      	mov	r1, r0
   12710:	e7fa      	b.n	12708 <cbor_nb_reader_get64+0x22>

00012712 <cbor_nb_reader_cpy>:
{
   12712:	b430      	push	{r4, r5}
   12714:	4614      	mov	r4, r2
	if (offset < 0 || offset > cnr->nb->len - (int)len) {
   12716:	2c00      	cmp	r4, #0
{
   12718:	4605      	mov	r5, r0
   1271a:	461a      	mov	r2, r3
   1271c:	4608      	mov	r0, r1
	if (offset < 0 || offset > cnr->nb->len - (int)len) {
   1271e:	db09      	blt.n	12734 <cbor_nb_reader_cpy+0x22>
   12720:	69e9      	ldr	r1, [r5, #28]
   12722:	898b      	ldrh	r3, [r1, #12]
   12724:	1a9b      	subs	r3, r3, r2
   12726:	42a3      	cmp	r3, r4
   12728:	db04      	blt.n	12734 <cbor_nb_reader_cpy+0x22>
	return (uintptr_t)memcpy(dst, cnr->nb->data + offset, len);
   1272a:	6889      	ldr	r1, [r1, #8]
   1272c:	4421      	add	r1, r4
}
   1272e:	bc30      	pop	{r4, r5}
	return (uintptr_t)memcpy(dst, cnr->nb->data + offset, len);
   12730:	f7ff bf85 	b.w	1263e <memcpy>
}
   12734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12738:	bc30      	pop	{r4, r5}
   1273a:	4770      	bx	lr

0001273c <cbor_nb_reader_cmp>:
{
   1273c:	b410      	push	{r4}
   1273e:	4614      	mov	r4, r2
	if (offset < 0 || offset > cnr->nb->len - (int)len) {
   12740:	2c00      	cmp	r4, #0
{
   12742:	461a      	mov	r2, r3
	if (offset < 0 || offset > cnr->nb->len - (int)len) {
   12744:	db09      	blt.n	1275a <cbor_nb_reader_cmp+0x1e>
   12746:	69c0      	ldr	r0, [r0, #28]
   12748:	8983      	ldrh	r3, [r0, #12]
   1274a:	1a9b      	subs	r3, r3, r2
   1274c:	42a3      	cmp	r3, r4
   1274e:	db04      	blt.n	1275a <cbor_nb_reader_cmp+0x1e>
	return memcmp(cnr->nb->data + offset, buf, len);
   12750:	6880      	ldr	r0, [r0, #8]
   12752:	4420      	add	r0, r4
}
   12754:	bc10      	pop	{r4}
	return memcmp(cnr->nb->data + offset, buf, len);
   12756:	f7ff bf61 	b.w	1261c <memcmp>
}
   1275a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1275e:	bc10      	pop	{r4}
   12760:	4770      	bx	lr

00012762 <cbor_nb_write>:
{
   12762:	b570      	push	{r4, r5, r6, lr}
   12764:	4604      	mov	r4, r0
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   12766:	6880      	ldr	r0, [r0, #8]
   12768:	3008      	adds	r0, #8
   1276a:	4615      	mov	r5, r2
   1276c:	460e      	mov	r6, r1
   1276e:	f000 ff1d 	bl	135ac <net_buf_simple_tailroom>
	if (len > net_buf_tailroom(cnw->nb)) {
   12772:	4285      	cmp	r5, r0
   12774:	d80a      	bhi.n	1278c <cbor_nb_write+0x2a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   12776:	68a0      	ldr	r0, [r4, #8]
   12778:	462a      	mov	r2, r5
   1277a:	4631      	mov	r1, r6
   1277c:	3008      	adds	r0, #8
   1277e:	f000 fefa 	bl	13576 <net_buf_simple_add_mem>
	cnw->enc.bytes_written += len;
   12782:	6862      	ldr	r2, [r4, #4]
   12784:	442a      	add	r2, r5
   12786:	6062      	str	r2, [r4, #4]
	return CborNoError;
   12788:	2000      	movs	r0, #0
}
   1278a:	bd70      	pop	{r4, r5, r6, pc}
		return CborErrorOutOfMemory;
   1278c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   12790:	e7fb      	b.n	1278a <cbor_nb_write+0x28>

00012792 <mcumgr_buf_free>:
	net_buf_unref(nb);
   12792:	f7fc b9c7 	b.w	eb24 <net_buf_unref>

00012796 <zephyr_smp_alloc_rsp>:
{
   12796:	b570      	push	{r4, r5, r6, lr}
   12798:	4604      	mov	r4, r0
   1279a:	460e      	mov	r6, r1
	rsp_nb = mcumgr_buf_alloc();
   1279c:	f7fb fae0 	bl	dd60 <mcumgr_buf_alloc>
	if (rsp_nb == NULL) {
   127a0:	4605      	mov	r5, r0
   127a2:	b118      	cbz	r0, 127ac <zephyr_smp_alloc_rsp+0x16>
	if (zst->zst_ud_copy) {
   127a4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   127a6:	b11b      	cbz	r3, 127b0 <zephyr_smp_alloc_rsp+0x1a>
		zst->zst_ud_copy(rsp_nb, req_nb);
   127a8:	4621      	mov	r1, r4
   127aa:	4798      	blx	r3
}
   127ac:	4628      	mov	r0, r5
   127ae:	bd70      	pop	{r4, r5, r6, pc}
		pool = net_buf_pool_get(req_nb->pool_id);
   127b0:	79a0      	ldrb	r0, [r4, #6]
   127b2:	f7fc f8f3 	bl	e99c <net_buf_pool_get>
		memcpy(net_buf_user_data(rsp_nb),
   127b6:	79e2      	ldrb	r2, [r4, #7]
   127b8:	f104 0114 	add.w	r1, r4, #20
   127bc:	f105 0014 	add.w	r0, r5, #20
   127c0:	f7ff ff3d 	bl	1263e <memcpy>
   127c4:	e7f2      	b.n	127ac <zephyr_smp_alloc_rsp+0x16>

000127c6 <zephyr_smp_write_hdr>:
{
   127c6:	b508      	push	{r3, lr}
	memcpy(nb->data, hdr, sizeof(*hdr));
   127c8:	6883      	ldr	r3, [r0, #8]
   127ca:	2208      	movs	r2, #8
   127cc:	6898      	ldr	r0, [r3, #8]
   127ce:	f7ff ff36 	bl	1263e <memcpy>
}
   127d2:	2000      	movs	r0, #0
   127d4:	bd08      	pop	{r3, pc}

000127d6 <zephyr_smp_free_buf>:
{
   127d6:	b510      	push	{r4, lr}
	if (!buf) {
   127d8:	4604      	mov	r4, r0
   127da:	b140      	cbz	r0, 127ee <zephyr_smp_free_buf+0x18>
	if (zst->zst_ud_free) {
   127dc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   127de:	b10b      	cbz	r3, 127e4 <zephyr_smp_free_buf+0xe>
		zst->zst_ud_free(net_buf_user_data((struct net_buf *)buf));
   127e0:	3014      	adds	r0, #20
   127e2:	4798      	blx	r3
	mcumgr_buf_free(buf);
   127e4:	4620      	mov	r0, r4
}
   127e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mcumgr_buf_free(buf);
   127ea:	f7ff bfd2 	b.w	12792 <mcumgr_buf_free>
}
   127ee:	bd10      	pop	{r4, pc}

000127f0 <zephyr_smp_init_writer>:
{
   127f0:	b508      	push	{r3, lr}
	cbor_nb_writer_init(czw, buf);
   127f2:	f7fb fad9 	bl	dda8 <cbor_nb_writer_init>
}
   127f6:	2000      	movs	r0, #0
   127f8:	bd08      	pop	{r3, pc}

000127fa <zephyr_smp_init_reader>:
{
   127fa:	b508      	push	{r3, lr}
	cbor_nb_reader_init(czr, buf);
   127fc:	f7fb fab8 	bl	dd70 <cbor_nb_reader_init>
}
   12800:	2000      	movs	r0, #0
   12802:	bd08      	pop	{r3, pc}

00012804 <zephyr_smp_reset_buf>:
	net_buf_reset(buf);
   12804:	f000 be86 	b.w	13514 <net_buf_reset>

00012808 <zephyr_smp_trim_front>:
	if (len > nb->len) {
   12808:	8983      	ldrh	r3, [r0, #12]
	return net_buf_simple_pull(&buf->b, len);
   1280a:	4299      	cmp	r1, r3
   1280c:	bf28      	it	cs
   1280e:	4619      	movcs	r1, r3
   12810:	3008      	adds	r0, #8
   12812:	f000 beb9 	b.w	13588 <net_buf_simple_pull>

00012816 <zephyr_smp_tx_rsp>:
{
   12816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	mtu = zst->zst_get_mtu(rsp);
   12818:	4608      	mov	r0, r1
   1281a:	6a53      	ldr	r3, [r2, #36]	; 0x24
{
   1281c:	460c      	mov	r4, r1
   1281e:	4615      	mov	r5, r2
	mtu = zst->zst_get_mtu(rsp);
   12820:	4798      	blx	r3
	if (mtu == 0U) {
   12822:	4607      	mov	r7, r0
   12824:	bb00      	cbnz	r0, 12868 <zephyr_smp_tx_rsp+0x52>
		return MGMT_ERR_EUNKNOWN;
   12826:	2001      	movs	r0, #1
}
   12828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (src->len <= mtu) {
   1282a:	89a3      	ldrh	r3, [r4, #12]
   1282c:	42bb      	cmp	r3, r7
   1282e:	d91f      	bls.n	12870 <zephyr_smp_tx_rsp+0x5a>
		frag = zephyr_smp_alloc_rsp(src, arg);
   12830:	4629      	mov	r1, r5
   12832:	4620      	mov	r0, r4
   12834:	f7ff ffaf 	bl	12796 <zephyr_smp_alloc_rsp>
		if (!frag) {
   12838:	4606      	mov	r6, r0
   1283a:	b928      	cbnz	r0, 12848 <zephyr_smp_tx_rsp+0x32>
			zephyr_smp_free_buf(nb, zst);
   1283c:	4620      	mov	r0, r4
   1283e:	4629      	mov	r1, r5
   12840:	f7ff ffc9 	bl	127d6 <zephyr_smp_free_buf>
			return MGMT_ERR_ENOMEM;
   12844:	2002      	movs	r0, #2
   12846:	e7ef      	b.n	12828 <zephyr_smp_tx_rsp+0x12>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   12848:	68a1      	ldr	r1, [r4, #8]
   1284a:	463a      	mov	r2, r7
   1284c:	3008      	adds	r0, #8
   1284e:	f000 fe92 	bl	13576 <net_buf_simple_add_mem>
		zephyr_smp_trim_front(src, mtu, NULL);
   12852:	2200      	movs	r2, #0
   12854:	4639      	mov	r1, r7
   12856:	4620      	mov	r0, r4
   12858:	f7ff ffd6 	bl	12808 <zephyr_smp_trim_front>
		rc = zst->zst_output(zst, frag);
   1285c:	6a2b      	ldr	r3, [r5, #32]
   1285e:	4631      	mov	r1, r6
   12860:	4628      	mov	r0, r5
   12862:	4798      	blx	r3
		if (rc != 0) {
   12864:	2800      	cmp	r0, #0
   12866:	d1de      	bne.n	12826 <zephyr_smp_tx_rsp+0x10>
	while (nb != NULL) {
   12868:	2c00      	cmp	r4, #0
   1286a:	d1de      	bne.n	1282a <zephyr_smp_tx_rsp+0x14>
	return 0;
   1286c:	4620      	mov	r0, r4
   1286e:	e7db      	b.n	12828 <zephyr_smp_tx_rsp+0x12>
   12870:	4626      	mov	r6, r4
		*nb = NULL;
   12872:	2400      	movs	r4, #0
   12874:	e7f2      	b.n	1285c <zephyr_smp_tx_rsp+0x46>

00012876 <zephyr_smp_rx_req>:

WEAK void
zephyr_smp_rx_req(struct zephyr_smp_transport *zst, struct net_buf *nb)
{
   12876:	b510      	push	{r4, lr}
   12878:	4604      	mov	r4, r0
	net_buf_put(&zst->zst_fifo, nb);
   1287a:	3010      	adds	r0, #16
   1287c:	f000 fe6e 	bl	1355c <net_buf_put>
	k_work_submit(&zst->zst_work);
   12880:	4620      	mov	r0, r4
}
   12882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit(&zst->zst_work);
   12886:	f7fe bc95 	b.w	111b4 <k_work_submit>

0001288a <smp_uart_get_mtu>:
}
   1288a:	f44f 7080 	mov.w	r0, #256	; 0x100
   1288e:	4770      	bx	lr

00012890 <smp_uart_tx_pkt>:
{
   12890:	b538      	push	{r3, r4, r5, lr}
   12892:	460c      	mov	r4, r1
	rc = uart_mcumgr_send(nb->data, nb->len);
   12894:	8989      	ldrh	r1, [r1, #12]
   12896:	68a0      	ldr	r0, [r4, #8]
   12898:	f7fc fbb8 	bl	f00c <uart_mcumgr_send>
   1289c:	4605      	mov	r5, r0
	mcumgr_buf_free(nb);
   1289e:	4620      	mov	r0, r4
   128a0:	f7ff ff77 	bl	12792 <mcumgr_buf_free>
}
   128a4:	4628      	mov	r0, r5
   128a6:	bd38      	pop	{r3, r4, r5, pc}

000128a8 <cbor_target_address>:
 * write or read and attribute from the cbor_attr_r structure
 */
static char *
cbor_target_address(const struct cbor_attr_t *cursor,
		    const struct cbor_array_t *parent, int offset)
{
   128a8:	b510      	push	{r4, lr}
   128aa:	4603      	mov	r3, r0
	char *targetaddr = NULL;

	if (parent == NULL || parent->element_type != CborAttrStructObjectType) {
   128ac:	b111      	cbz	r1, 128b4 <cbor_target_address+0xc>
   128ae:	7808      	ldrb	r0, [r1, #0]
   128b0:	280b      	cmp	r0, #11
   128b2:	d01a      	beq.n	128ea <cbor_target_address+0x42>
		/* ordinary case - use the address in the cursor structure */
		switch (cursor->type) {
   128b4:	7919      	ldrb	r1, [r3, #4]
   128b6:	3901      	subs	r1, #1
   128b8:	2907      	cmp	r1, #7
   128ba:	d81c      	bhi.n	128f6 <cbor_target_address+0x4e>
   128bc:	e8df f001 	tbb	[pc, r1]
   128c0:	10100c0c 	.word	0x10100c0c
   128c4:	0c080412 	.word	0x0c080412
		case CborAttrUnsignedIntegerType:
			targetaddr = (char *)&cursor->addr.uinteger[offset];
			break;
#if CBORATTR_FLOAT_SUPPORT != 0
		case CborAttrHalfFloatType:
			targetaddr = (char *)&cursor->addr.halffloat[offset];
   128c8:	6898      	ldr	r0, [r3, #8]
   128ca:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		targetaddr =
			parent->arr.objects.base + (offset * parent->arr.objects.stride) +
			cursor->addr.offset;
	}
	return targetaddr;
}
   128ce:	bd10      	pop	{r4, pc}
			targetaddr = (char *)&cursor->addr.fval[offset];
   128d0:	6898      	ldr	r0, [r3, #8]
   128d2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
			break;
   128d6:	e7fa      	b.n	128ce <cbor_target_address+0x26>
			targetaddr = (char *)&cursor->addr.real[offset];
   128d8:	6898      	ldr	r0, [r3, #8]
   128da:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
			break;
   128de:	e7f6      	b.n	128ce <cbor_target_address+0x26>
			targetaddr = cursor->addr.string;
   128e0:	6898      	ldr	r0, [r3, #8]
			break;
   128e2:	e7f4      	b.n	128ce <cbor_target_address+0x26>
			targetaddr = (char *)&cursor->addr.boolean[offset];
   128e4:	6898      	ldr	r0, [r3, #8]
		targetaddr =
   128e6:	4410      	add	r0, r2
   128e8:	e7f1      	b.n	128ce <cbor_target_address+0x26>
			parent->arr.objects.base + (offset * parent->arr.objects.stride) +
   128ea:	6898      	ldr	r0, [r3, #8]
   128ec:	68cc      	ldr	r4, [r1, #12]
   128ee:	fb04 0202 	mla	r2, r4, r2, r0
		targetaddr =
   128f2:	6888      	ldr	r0, [r1, #8]
   128f4:	e7f7      	b.n	128e6 <cbor_target_address+0x3e>
		switch (cursor->type) {
   128f6:	2000      	movs	r0, #0
	return targetaddr;
   128f8:	e7e9      	b.n	128ce <cbor_target_address+0x26>

000128fa <cbor_value_get_int64>:
    *result = _cbor_value_extract_int64_helper(value);
    return CborNoError;
}

CBOR_INLINE_API CborError cbor_value_get_int64(const CborValue *value, int64_t *result)
{
   128fa:	b538      	push	{r3, r4, r5, lr}
                _cbor_value_decode_int64_internal(value) : value->extra;
   128fc:	7bc3      	ldrb	r3, [r0, #15]
{
   128fe:	460c      	mov	r4, r1
                _cbor_value_decode_int64_internal(value) : value->extra;
   12900:	f013 0101 	ands.w	r1, r3, #1
{
   12904:	4605      	mov	r5, r0
                _cbor_value_decode_int64_internal(value) : value->extra;
   12906:	d00c      	beq.n	12922 <cbor_value_get_int64+0x28>
   12908:	f001 feb5 	bl	14676 <_cbor_value_decode_int64_internal>
    assert(cbor_value_is_integer(value));
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
   1290c:	e9c4 0100 	strd	r0, r1, [r4]
    if (value->flags & CborIteratorFlag_NegativeInteger)
   12910:	7beb      	ldrb	r3, [r5, #15]
   12912:	079b      	lsls	r3, r3, #30
        *result = -*result - 1;
   12914:	bf42      	ittt	mi
   12916:	43c0      	mvnmi	r0, r0
   12918:	43c9      	mvnmi	r1, r1
   1291a:	e9c4 0100 	strdmi	r0, r1, [r4]
    return CborNoError;
}
   1291e:	2000      	movs	r0, #0
   12920:	bd38      	pop	{r3, r4, r5, pc}
                _cbor_value_decode_int64_internal(value) : value->extra;
   12922:	8980      	ldrh	r0, [r0, #12]
   12924:	e7f2      	b.n	1290c <cbor_value_get_int64+0x12>

00012926 <cbor_read_array>:
	return err;
}

int
cbor_read_array(struct CborValue *value, const struct cbor_array_t *arr)
{
   12926:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1292a:	b089      	sub	sp, #36	; 0x24
   1292c:	460d      	mov	r5, r1
	int off, arrcount;
	size_t len;
	void *lptr;
	char *tp;

	err = cbor_value_enter_container(value, &elem);
   1292e:	a904      	add	r1, sp, #16
{
   12930:	4680      	mov	r8, r0
	err = cbor_value_enter_container(value, &elem);
   12932:	f001 fecf 	bl	146d4 <cbor_value_enter_container>
	if (err) {
   12936:	4604      	mov	r4, r0
   12938:	b110      	cbz	r0, 12940 <cbor_read_array+0x1a>
		err |= CborErrorDataTooLarge;
		cbor_value_advance(&elem);
	}
	err |= cbor_value_leave_container(value, &elem);
	return err;
}
   1293a:	b009      	add	sp, #36	; 0x24
   1293c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tp = arr->arr.strings.store;
   12940:	68af      	ldr	r7, [r5, #8]
	for (off = 0; off < arr->maxlen; off++) {
   12942:	4606      	mov	r6, r0
   12944:	696b      	ldr	r3, [r5, #20]
   12946:	42b3      	cmp	r3, r6
   12948:	dd1f      	ble.n	1298a <cbor_read_array+0x64>
		switch (arr->element_type) {
   1294a:	782b      	ldrb	r3, [r5, #0]
   1294c:	3b01      	subs	r3, #1
   1294e:	2b0a      	cmp	r3, #10
   12950:	d875      	bhi.n	12a3e <cbor_read_array+0x118>
   12952:	e8df f003 	tbb	[pc, r3]
   12956:	2e26      	.short	0x2e26
   12958:	44065a74 	.word	0x44065a74
   1295c:	74744b4b 	.word	0x74744b4b
   12960:	6d          	.byte	0x6d
   12961:	00          	.byte	0x00
    *result = !!value->extra;
   12962:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   12966:	686a      	ldr	r2, [r5, #4]
   12968:	3b00      	subs	r3, #0
   1296a:	bf18      	it	ne
   1296c:	2301      	movne	r3, #1
   1296e:	5593      	strb	r3, [r2, r6]
		if (arr->element_type != CborAttrStructObjectType) {
   12970:	782b      	ldrb	r3, [r5, #0]
   12972:	2b0b      	cmp	r3, #11
		arrcount++;
   12974:	f106 0601 	add.w	r6, r6, #1
		if (arr->element_type != CborAttrStructObjectType) {
   12978:	d003      	beq.n	12982 <cbor_read_array+0x5c>
			err |= cbor_value_advance(&elem);
   1297a:	a804      	add	r0, sp, #16
   1297c:	f001 ff22 	bl	147c4 <cbor_value_advance>
   12980:	4304      	orrs	r4, r0
		if (!cbor_value_is_valid(&elem)) {
   12982:	f89d 301e 	ldrb.w	r3, [sp, #30]
   12986:	2bff      	cmp	r3, #255	; 0xff
   12988:	d1dc      	bne.n	12944 <cbor_read_array+0x1e>
	if (arr->count) {
   1298a:	692b      	ldr	r3, [r5, #16]
   1298c:	b103      	cbz	r3, 12990 <cbor_read_array+0x6a>
		*arr->count = arrcount;
   1298e:	601e      	str	r6, [r3, #0]
	while (!cbor_value_at_end(&elem)) {
   12990:	9b06      	ldr	r3, [sp, #24]
   12992:	2b00      	cmp	r3, #0
   12994:	d156      	bne.n	12a44 <cbor_read_array+0x11e>
	err |= cbor_value_leave_container(value, &elem);
   12996:	a904      	add	r1, sp, #16
   12998:	4640      	mov	r0, r8
   1299a:	f001 fed5 	bl	14748 <cbor_value_leave_container>
   1299e:	4320      	orrs	r0, r4
	return err;
   129a0:	e7cb      	b.n	1293a <cbor_read_array+0x14>
			lptr = &arr->arr.integers.store[off];
   129a2:	6869      	ldr	r1, [r5, #4]
			err |= cbor_value_get_int64(&elem, lptr);
   129a4:	a804      	add	r0, sp, #16
   129a6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
   129aa:	f7ff ffa6 	bl	128fa <cbor_value_get_int64>
			err |= cbor_value_get_half_float(&elem, lptr);
   129ae:	4304      	orrs	r4, r0
			break;
   129b0:	e7de      	b.n	12970 <cbor_read_array+0x4a>
                _cbor_value_decode_int64_internal(value) : value->extra;
   129b2:	f89d 101f 	ldrb.w	r1, [sp, #31]
			lptr = &arr->arr.uintegers.store[off];
   129b6:	f8d5 9004 	ldr.w	r9, [r5, #4]
   129ba:	f011 0101 	ands.w	r1, r1, #1
   129be:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   129c2:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
   129c6:	d007      	beq.n	129d8 <cbor_read_array+0xb2>
   129c8:	a804      	add	r0, sp, #16
   129ca:	f001 fe54 	bl	14676 <_cbor_value_decode_int64_internal>
    *result = _cbor_value_extract_int64_helper(value);
   129ce:	f849 000b 	str.w	r0, [r9, fp]
   129d2:	f8ca 1004 	str.w	r1, [sl, #4]
			break;
   129d6:	e7cb      	b.n	12970 <cbor_read_array+0x4a>
                _cbor_value_decode_int64_internal(value) : value->extra;
   129d8:	f8bd 001c 	ldrh.w	r0, [sp, #28]
   129dc:	e7f7      	b.n	129ce <cbor_read_array+0xa8>
			lptr = &arr->arr.halffloats.store[off];
   129de:	6869      	ldr	r1, [r5, #4]
			err |= cbor_value_get_half_float(&elem, lptr);
   129e0:	a804      	add	r0, sp, #16
   129e2:	eb01 0146 	add.w	r1, r1, r6, lsl #1
   129e6:	f001 fefc 	bl	147e2 <cbor_value_get_half_float>
   129ea:	e7e0      	b.n	129ae <cbor_read_array+0x88>
			lptr = &arr->arr.reals.store[off];
   129ec:	6868      	ldr	r0, [r5, #4]
   129ee:	eb00 09c6 	add.w	r9, r0, r6, lsl #3
{ return value->type == CborDoubleType; }
CBOR_INLINE_API CborError cbor_value_get_double(const CborValue *value, double *result)
{
    assert(cbor_value_is_double(value));
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
    uint64_t data = _cbor_value_decode_int64_internal(value);
   129f2:	a804      	add	r0, sp, #16
   129f4:	f001 fe3f 	bl	14676 <_cbor_value_decode_int64_internal>
    memcpy(result, &data, sizeof(*result));
   129f8:	2208      	movs	r2, #8
    uint64_t data = _cbor_value_decode_int64_internal(value);
   129fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
    memcpy(result, &data, sizeof(*result));
   129fe:	eb0d 0102 	add.w	r1, sp, r2
   12a02:	4648      	mov	r0, r9
   12a04:	f7ff fe1b 	bl	1263e <memcpy>
			break;
   12a08:	e7b2      	b.n	12970 <cbor_read_array+0x4a>
			len = arr->arr.strings.storelen - (tp - arr->arr.strings.store);
   12a0a:	68ab      	ldr	r3, [r5, #8]
   12a0c:	1afa      	subs	r2, r7, r3
   12a0e:	68eb      	ldr	r3, [r5, #12]
   12a10:	1a9b      	subs	r3, r3, r2
   12a12:	9301      	str	r3, [sp, #4]
    return _cbor_value_copy_string(value, buffer, buflen, next);
   12a14:	4639      	mov	r1, r7
   12a16:	2300      	movs	r3, #0
   12a18:	aa01      	add	r2, sp, #4
   12a1a:	a804      	add	r0, sp, #16
   12a1c:	f7fe f806 	bl	10a2c <_cbor_value_copy_string>
			arr->arr.strings.ptrs[off] = tp;
   12a20:	686b      	ldr	r3, [r5, #4]
   12a22:	f843 7026 	str.w	r7, [r3, r6, lsl #2]
			tp += len + 1;
   12a26:	9b01      	ldr	r3, [sp, #4]
   12a28:	3301      	adds	r3, #1
			err |= cbor_value_copy_text_string(&elem, tp, &len, NULL);
   12a2a:	4304      	orrs	r4, r0
			tp += len + 1;
   12a2c:	441f      	add	r7, r3
			break;
   12a2e:	e79f      	b.n	12970 <cbor_read_array+0x4a>
			err |= cbor_internal_read_object(&elem, arr->arr.objects.subtype, arr, off);
   12a30:	6869      	ldr	r1, [r5, #4]
   12a32:	4633      	mov	r3, r6
   12a34:	462a      	mov	r2, r5
   12a36:	a804      	add	r0, sp, #16
   12a38:	f000 f80a 	bl	12a50 <cbor_internal_read_object>
   12a3c:	e7b7      	b.n	129ae <cbor_read_array+0x88>
			err |= CborErrorIllegalType;
   12a3e:	f444 7482 	orr.w	r4, r4, #260	; 0x104
			break;
   12a42:	e795      	b.n	12970 <cbor_read_array+0x4a>
		cbor_value_advance(&elem);
   12a44:	a804      	add	r0, sp, #16
		err |= CborErrorDataTooLarge;
   12a46:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
		cbor_value_advance(&elem);
   12a4a:	f001 febb 	bl	147c4 <cbor_value_advance>
   12a4e:	e79f      	b.n	12990 <cbor_read_array+0x6a>

00012a50 <cbor_internal_read_object>:
{
   12a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a54:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
   12a58:	469a      	mov	sl, r3
	size_t len = 0;
   12a5a:	2300      	movs	r3, #0
{
   12a5c:	4607      	mov	r7, r0
   12a5e:	9101      	str	r1, [sp, #4]
   12a60:	4691      	mov	r9, r2
	size_t len = 0;
   12a62:	9303      	str	r3, [sp, #12]
	for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   12a64:	f101 0420 	add.w	r4, r1, #32
   12a68:	f854 3c20 	ldr.w	r3, [r4, #-32]
   12a6c:	f1a4 0020 	sub.w	r0, r4, #32
   12a70:	bb8b      	cbnz	r3, 12ad6 <cbor_internal_read_object+0x86>
	if (cbor_value_is_map(root_value)) {
   12a72:	7bbb      	ldrb	r3, [r7, #14]
   12a74:	2ba0      	cmp	r3, #160	; 0xa0
   12a76:	f040 8113 	bne.w	12ca0 <cbor_internal_read_object+0x250>
		err |= cbor_value_enter_container(root_value, &cur_value);
   12a7a:	a907      	add	r1, sp, #28
   12a7c:	4638      	mov	r0, r7
   12a7e:	f001 fe29 	bl	146d4 <cbor_value_enter_container>
   12a82:	4604      	mov	r4, r0
{ return value && value->type != CborInvalidType; }
   12a84:	f89d 502a 	ldrb.w	r5, [sp, #42]	; 0x2a
	while (cbor_value_is_valid(&cur_value) && !err) {
   12a88:	2dff      	cmp	r5, #255	; 0xff
   12a8a:	f000 80fd 	beq.w	12c88 <cbor_internal_read_object+0x238>
   12a8e:	b9ec      	cbnz	r4, 12acc <cbor_internal_read_object+0x7c>
		if (cbor_value_is_text_string(&cur_value)) {
   12a90:	2d60      	cmp	r5, #96	; 0x60
   12a92:	d13e      	bne.n	12b12 <cbor_internal_read_object+0xc2>
			if (cbor_value_calculate_string_length(&cur_value, &len) == 0) {
   12a94:	a903      	add	r1, sp, #12
   12a96:	a807      	add	r0, sp, #28
   12a98:	f001 fe9b 	bl	147d2 <cbor_value_calculate_string_length>
   12a9c:	b958      	cbnz	r0, 12ab6 <cbor_internal_read_object+0x66>
				if (len > CBORATTR_MAX_SIZE) {
   12a9e:	9b03      	ldr	r3, [sp, #12]
   12aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   12aa4:	f200 80f9 	bhi.w	12c9a <cbor_internal_read_object+0x24a>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   12aa8:	4623      	mov	r3, r4
   12aaa:	aa03      	add	r2, sp, #12
   12aac:	a90b      	add	r1, sp, #44	; 0x2c
   12aae:	a807      	add	r0, sp, #28
   12ab0:	f7fd ffbc 	bl	10a2c <_cbor_value_copy_string>
   12ab4:	4604      	mov	r4, r0
			err |= cbor_value_advance(&cur_value);
   12ab6:	a807      	add	r0, sp, #28
   12ab8:	f001 fe84 	bl	147c4 <cbor_value_advance>
{ return value && value->type != CborInvalidType; }
   12abc:	f89d 502a 	ldrb.w	r5, [sp, #42]	; 0x2a
			if (cbor_value_is_valid(&cur_value)) {
   12ac0:	2dff      	cmp	r5, #255	; 0xff
			err |= cbor_value_advance(&cur_value);
   12ac2:	ea44 0400 	orr.w	r4, r4, r0
			if (cbor_value_is_valid(&cur_value)) {
   12ac6:	d126      	bne.n	12b16 <cbor_internal_read_object+0xc6>
				err |= CborErrorIllegalType;
   12ac8:	f444 7482 	orr.w	r4, r4, #260	; 0x104
	return err;
   12acc:	4620      	mov	r0, r4
}
   12ace:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
   12ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!cursor->nodefault) {
   12ad6:	7b23      	ldrb	r3, [r4, #12]
   12ad8:	b99b      	cbnz	r3, 12b02 <cbor_internal_read_object+0xb2>
			lptr = cbor_target_address(cursor, parent, offset);
   12ada:	4652      	mov	r2, sl
   12adc:	4649      	mov	r1, r9
   12ade:	f7ff fee3 	bl	128a8 <cbor_target_address>
			if (lptr != NULL) {
   12ae2:	b170      	cbz	r0, 12b02 <cbor_internal_read_object+0xb2>
				switch (cursor->type) {
   12ae4:	f814 3c1c 	ldrb.w	r3, [r4, #-28]
   12ae8:	3b01      	subs	r3, #1
   12aea:	2b07      	cmp	r3, #7
   12aec:	d809      	bhi.n	12b02 <cbor_internal_read_object+0xb2>
   12aee:	e8df f003 	tbb	[pc, r3]
   12af2:	0e0e      	.short	0x0e0e
   12af4:	0a040808 	.word	0x0a040808
   12af8:	0e0c      	.short	0x0e0c
					memcpy(lptr, &cursor->dflt.boolean, sizeof(bool));
   12afa:	2201      	movs	r2, #1
					memcpy(lptr, &cursor->dflt.real, sizeof(double));
   12afc:	4621      	mov	r1, r4
   12afe:	f7ff fd9e 	bl	1263e <memcpy>
	for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   12b02:	3430      	adds	r4, #48	; 0x30
   12b04:	e7b0      	b.n	12a68 <cbor_internal_read_object+0x18>
					memcpy(lptr, &cursor->dflt.halffloat, sizeof(uint16_t));
   12b06:	2202      	movs	r2, #2
   12b08:	e7f8      	b.n	12afc <cbor_internal_read_object+0xac>
					memcpy(lptr, &cursor->dflt.fval, sizeof(float));
   12b0a:	2204      	movs	r2, #4
   12b0c:	e7f6      	b.n	12afc <cbor_internal_read_object+0xac>
					memcpy(lptr, &cursor->dflt.real, sizeof(double));
   12b0e:	2208      	movs	r2, #8
   12b10:	e7f4      	b.n	12afc <cbor_internal_read_object+0xac>
			attrbuf[0] = '\0';
   12b12:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
		for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   12b16:	9b01      	ldr	r3, [sp, #4]
		best_match = NULL;
   12b18:	f04f 0800 	mov.w	r8, #0
   12b1c:	f103 0b30 	add.w	fp, r3, #48	; 0x30
		for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   12b20:	f85b 0c30 	ldr.w	r0, [fp, #-48]
   12b24:	f1ab 0630 	sub.w	r6, fp, #48	; 0x30
   12b28:	b9c8      	cbnz	r0, 12b5e <cbor_internal_read_object+0x10e>
		if (!cursor->attribute && best_match) {
   12b2a:	f1b8 0f00 	cmp.w	r8, #0
   12b2e:	bf18      	it	ne
   12b30:	4646      	movne	r6, r8
		if (cursor->attribute != NULL) {
   12b32:	6833      	ldr	r3, [r6, #0]
   12b34:	2b00      	cmp	r3, #0
   12b36:	d052      	beq.n	12bde <cbor_internal_read_object+0x18e>
			lptr = cbor_target_address(cursor, parent, offset);
   12b38:	4652      	mov	r2, sl
   12b3a:	4649      	mov	r1, r9
   12b3c:	4630      	mov	r0, r6
   12b3e:	f7ff feb3 	bl	128a8 <cbor_target_address>
			switch (cursor->type) {
   12b42:	7933      	ldrb	r3, [r6, #4]
   12b44:	3b01      	subs	r3, #1
			lptr = cbor_target_address(cursor, parent, offset);
   12b46:	4605      	mov	r5, r0
			switch (cursor->type) {
   12b48:	2b0b      	cmp	r3, #11
   12b4a:	f200 809a 	bhi.w	12c82 <cbor_internal_read_object+0x232>
   12b4e:	e8df f003 	tbb	[pc, r3]
   12b52:	504a      	.short	0x504a
   12b54:	5e408174 	.word	0x5e408174
   12b58:	918a6d63 	.word	0x918a6d63
   12b5c:	4698      	.short	0x4698
	switch (at) {
   12b5e:	f81b 2c2c 	ldrb.w	r2, [fp, #-44]
   12b62:	3a01      	subs	r2, #1
   12b64:	2a0b      	cmp	r2, #11
   12b66:	d81f      	bhi.n	12ba8 <cbor_internal_read_object+0x158>
   12b68:	e8df f002 	tbb	[pc, r2]
   12b6c:	211c0606 	.word	0x211c0606
   12b70:	29272523 	.word	0x29272523
   12b74:	2f1e2d2b 	.word	0x2f1e2d2b
		if (ct == CborIntegerType) {
   12b78:	b9b5      	cbnz	r5, 12ba8 <cbor_internal_read_object+0x158>
				if (cursor->attribute == CBORATTR_ATTR_UNNAMED &&
   12b7a:	1c43      	adds	r3, r0, #1
   12b7c:	d102      	bne.n	12b84 <cbor_internal_read_object+0x134>
   12b7e:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   12b82:	b322      	cbz	r2, 12bce <cbor_internal_read_object+0x17e>
				} else if (strlen(cursor->attribute) == len &&
   12b84:	f7ff fd2e 	bl	125e4 <strlen>
   12b88:	9903      	ldr	r1, [sp, #12]
   12b8a:	4288      	cmp	r0, r1
   12b8c:	4602      	mov	r2, r0
   12b8e:	d10b      	bne.n	12ba8 <cbor_internal_read_object+0x158>
					!memcmp(cursor->attribute, attrbuf, len)) {
   12b90:	f85b 0c30 	ldr.w	r0, [fp, #-48]
   12b94:	a90b      	add	r1, sp, #44	; 0x2c
   12b96:	f7ff fd41 	bl	1261c <memcmp>
				} else if (strlen(cursor->attribute) == len &&
   12b9a:	b928      	cbnz	r0, 12ba8 <cbor_internal_read_object+0x158>
		if (!cursor->attribute && best_match) {
   12b9c:	6832      	ldr	r2, [r6, #0]
   12b9e:	2a00      	cmp	r2, #0
   12ba0:	d1c7      	bne.n	12b32 <cbor_internal_read_object+0xe2>
   12ba2:	e7c2      	b.n	12b2a <cbor_internal_read_object+0xda>
		if (ct == CborByteStringType) {
   12ba4:	2d40      	cmp	r5, #64	; 0x40
		if (ct == CborNullType) {
   12ba6:	d0e8      	beq.n	12b7a <cbor_internal_read_object+0x12a>
		for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   12ba8:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
   12bac:	e7b8      	b.n	12b20 <cbor_internal_read_object+0xd0>
		if (ct == CborTextStringType) {
   12bae:	2d60      	cmp	r5, #96	; 0x60
   12bb0:	e7f9      	b.n	12ba6 <cbor_internal_read_object+0x156>
		if (ct == CborBooleanType) {
   12bb2:	2df5      	cmp	r5, #245	; 0xf5
   12bb4:	e7f7      	b.n	12ba6 <cbor_internal_read_object+0x156>
		if (ct == CborHalfFloatType) {
   12bb6:	2df9      	cmp	r5, #249	; 0xf9
   12bb8:	e7f5      	b.n	12ba6 <cbor_internal_read_object+0x156>
		if (ct == CborFloatType) {
   12bba:	2dfa      	cmp	r5, #250	; 0xfa
   12bbc:	e7f3      	b.n	12ba6 <cbor_internal_read_object+0x156>
		if (ct == CborDoubleType) {
   12bbe:	2dfb      	cmp	r5, #251	; 0xfb
   12bc0:	e7f1      	b.n	12ba6 <cbor_internal_read_object+0x156>
		if (ct == CborArrayType) {
   12bc2:	2d80      	cmp	r5, #128	; 0x80
   12bc4:	e7ef      	b.n	12ba6 <cbor_internal_read_object+0x156>
		if (ct == CborMapType) {
   12bc6:	2da0      	cmp	r5, #160	; 0xa0
   12bc8:	e7ed      	b.n	12ba6 <cbor_internal_read_object+0x156>
		if (ct == CborNullType) {
   12bca:	2df6      	cmp	r5, #246	; 0xf6
   12bcc:	e7eb      	b.n	12ba6 <cbor_internal_read_object+0x156>
   12bce:	46b0      	mov	r8, r6
   12bd0:	e7ea      	b.n	12ba8 <cbor_internal_read_object+0x158>
    *result = !!value->extra;
   12bd2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   12bd6:	3b00      	subs	r3, #0
   12bd8:	bf18      	it	ne
   12bda:	2301      	movne	r3, #1
   12bdc:	7003      	strb	r3, [r0, #0]
		err |= cbor_value_advance(&cur_value);
   12bde:	a807      	add	r0, sp, #28
   12be0:	f001 fdf0 	bl	147c4 <cbor_value_advance>
   12be4:	e044      	b.n	12c70 <cbor_internal_read_object+0x220>
				err |= cbor_value_get_int64(&cur_value, lptr);
   12be6:	4601      	mov	r1, r0
   12be8:	a807      	add	r0, sp, #28
   12bea:	f7ff fe86 	bl	128fa <cbor_value_get_int64>
				err |= cbor_value_get_half_float(&cur_value, lptr);
   12bee:	4304      	orrs	r4, r0
				break;
   12bf0:	e7f5      	b.n	12bde <cbor_internal_read_object+0x18e>
                _cbor_value_decode_int64_internal(value) : value->extra;
   12bf2:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
   12bf6:	f011 0101 	ands.w	r1, r1, #1
   12bfa:	d005      	beq.n	12c08 <cbor_internal_read_object+0x1b8>
   12bfc:	a807      	add	r0, sp, #28
   12bfe:	f001 fd3a 	bl	14676 <_cbor_value_decode_int64_internal>
    *result = _cbor_value_extract_int64_helper(value);
   12c02:	e9c5 0100 	strd	r0, r1, [r5]
				break;
   12c06:	e7ea      	b.n	12bde <cbor_internal_read_object+0x18e>
                _cbor_value_decode_int64_internal(value) : value->extra;
   12c08:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
   12c0c:	e7f9      	b.n	12c02 <cbor_internal_read_object+0x1b2>
				err |= cbor_value_get_half_float(&cur_value, lptr);
   12c0e:	4601      	mov	r1, r0
   12c10:	a807      	add	r0, sp, #28
   12c12:	f001 fde6 	bl	147e2 <cbor_value_get_half_float>
   12c16:	e7ea      	b.n	12bee <cbor_internal_read_object+0x19e>
    uint32_t data = (uint32_t)_cbor_value_decode_int64_internal(value);
   12c18:	a807      	add	r0, sp, #28
   12c1a:	f001 fd2c 	bl	14676 <_cbor_value_decode_int64_internal>
    memcpy(result, &data, sizeof(*result));
   12c1e:	2204      	movs	r2, #4
    uint32_t data = (uint32_t)_cbor_value_decode_int64_internal(value);
   12c20:	9004      	str	r0, [sp, #16]
    memcpy(result, &data, sizeof(*result));
   12c22:	a904      	add	r1, sp, #16
   12c24:	4628      	mov	r0, r5
   12c26:	f7ff fd0a 	bl	1263e <memcpy>
				break;
   12c2a:	e7d8      	b.n	12bde <cbor_internal_read_object+0x18e>
    uint64_t data = _cbor_value_decode_int64_internal(value);
   12c2c:	a807      	add	r0, sp, #28
   12c2e:	f001 fd22 	bl	14676 <_cbor_value_decode_int64_internal>
    memcpy(result, &data, sizeof(*result));
   12c32:	2208      	movs	r2, #8
    uint64_t data = _cbor_value_decode_int64_internal(value);
   12c34:	e9cd 0104 	strd	r0, r1, [sp, #16]
    memcpy(result, &data, sizeof(*result));
   12c38:	e7f3      	b.n	12c22 <cbor_internal_read_object+0x1d2>
				size_t len = cursor->len;
   12c3a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   12c3c:	9304      	str	r3, [sp, #16]
    return _cbor_value_copy_string(value, buffer, buflen, next);
   12c3e:	aa04      	add	r2, sp, #16
   12c40:	2300      	movs	r3, #0
   12c42:	4601      	mov	r1, r0
   12c44:	a807      	add	r0, sp, #28
   12c46:	f7fd fef1 	bl	10a2c <_cbor_value_copy_string>
				*cursor->addr.bytestring.len = len;
   12c4a:	68f3      	ldr	r3, [r6, #12]
   12c4c:	9a04      	ldr	r2, [sp, #16]
   12c4e:	601a      	str	r2, [r3, #0]
				err |= cbor_value_copy_byte_string(&cur_value, lptr, &len, NULL);
   12c50:	4304      	orrs	r4, r0
				break;
   12c52:	e7c4      	b.n	12bde <cbor_internal_read_object+0x18e>
				size_t len = cursor->len;
   12c54:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   12c56:	9304      	str	r3, [sp, #16]
    return _cbor_value_copy_string(value, buffer, buflen, next);
   12c58:	4601      	mov	r1, r0
   12c5a:	2300      	movs	r3, #0
   12c5c:	aa04      	add	r2, sp, #16
   12c5e:	a807      	add	r0, sp, #28
   12c60:	f7fd fee4 	bl	10a2c <_cbor_value_copy_string>
   12c64:	e7c3      	b.n	12bee <cbor_internal_read_object+0x19e>
				err |= cbor_read_array(&cur_value, &cursor->addr.array);
   12c66:	f106 0108 	add.w	r1, r6, #8
   12c6a:	a807      	add	r0, sp, #28
   12c6c:	f7ff fe5b 	bl	12926 <cbor_read_array>
		err |= cbor_value_advance(&cur_value);
   12c70:	4304      	orrs	r4, r0
   12c72:	e707      	b.n	12a84 <cbor_internal_read_object+0x34>
				err |= cbor_internal_read_object(&cur_value, cursor->addr.obj,
   12c74:	2300      	movs	r3, #0
   12c76:	68b1      	ldr	r1, [r6, #8]
   12c78:	461a      	mov	r2, r3
   12c7a:	a807      	add	r0, sp, #28
   12c7c:	f7ff fee8 	bl	12a50 <cbor_internal_read_object>
   12c80:	e7f6      	b.n	12c70 <cbor_internal_read_object+0x220>
				err |= CborErrorIllegalType;
   12c82:	f444 7482 	orr.w	r4, r4, #260	; 0x104
   12c86:	e7aa      	b.n	12bde <cbor_internal_read_object+0x18e>
	if (!err) {
   12c88:	2c00      	cmp	r4, #0
   12c8a:	f47f af1f 	bne.w	12acc <cbor_internal_read_object+0x7c>
		err |= cbor_value_leave_container(root_value, &cur_value);
   12c8e:	a907      	add	r1, sp, #28
   12c90:	4638      	mov	r0, r7
   12c92:	f001 fd59 	bl	14748 <cbor_value_leave_container>
   12c96:	4604      	mov	r4, r0
   12c98:	e718      	b.n	12acc <cbor_internal_read_object+0x7c>
					err |= CborErrorDataTooLarge;
   12c9a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   12c9e:	e715      	b.n	12acc <cbor_internal_read_object+0x7c>
		return err;
   12ca0:	f44f 7082 	mov.w	r0, #260	; 0x104
   12ca4:	e713      	b.n	12ace <cbor_internal_read_object+0x7e>

00012ca6 <cbor_read_object>:
int
cbor_read_object(struct CborValue *value, const struct cbor_attr_t *attrs)
{
	int st;

	st = cbor_internal_read_object(value, attrs, NULL, 0);
   12ca6:	2300      	movs	r3, #0
   12ca8:	461a      	mov	r2, r3
   12caa:	f7ff bed1 	b.w	12a50 <cbor_internal_read_object>

00012cae <flash_area_open_ex>:
{
   12cae:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12cb0:	460d      	mov	r5, r1
	int rc = flash_area_open(id, &lfa);
   12cb2:	a901      	add	r1, sp, #4
   12cb4:	f7fa faa8 	bl	d208 <flash_area_open>
	if (rc == 0) {
   12cb8:	4604      	mov	r4, r0
   12cba:	b928      	cbnz	r0, 12cc8 <flash_area_open_ex+0x1a>
		if (flash_area_get_device(lfa) != NULL) {
   12cbc:	9801      	ldr	r0, [sp, #4]
   12cbe:	f7ff fbcb 	bl	12458 <flash_area_get_device>
   12cc2:	b120      	cbz	r0, 12cce <flash_area_open_ex+0x20>
			*fa = lfa;
   12cc4:	9b01      	ldr	r3, [sp, #4]
   12cc6:	602b      	str	r3, [r5, #0]
}
   12cc8:	4620      	mov	r0, r4
   12cca:	b003      	add	sp, #12
   12ccc:	bd30      	pop	{r4, r5, pc}
			rc = -ENODEV;
   12cce:	f06f 0412 	mvn.w	r4, #18
	return rc;
   12cd2:	e7f9      	b.n	12cc8 <flash_area_open_ex+0x1a>

00012cd4 <zephyr_img_mgmt_flash_check_empty>:
{
   12cd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12cd8:	b093      	sub	sp, #76	; 0x4c
   12cda:	4688      	mov	r8, r1
	rc = flash_area_open_ex(fa_id, &fa);
   12cdc:	a901      	add	r1, sp, #4
   12cde:	f7ff ffe6 	bl	12cae <flash_area_open_ex>
	if (rc != 0) {
   12ce2:	4604      	mov	r4, r0
   12ce4:	bb60      	cbnz	r0, 12d40 <zephyr_img_mgmt_flash_check_empty+0x6c>
	erased_val = flash_area_erased_val(fa);
   12ce6:	9801      	ldr	r0, [sp, #4]
   12ce8:	f7ff fbb9 	bl	1245e <flash_area_erased_val>
	end = fa->fa_size;
   12cec:	9b01      	ldr	r3, [sp, #4]
	erased_val_32 = ERASED_VAL_32(erased_val);
   12cee:	0406      	lsls	r6, r0, #16
   12cf0:	ea46 6600 	orr.w	r6, r6, r0, lsl #24
   12cf4:	4306      	orrs	r6, r0
	end = fa->fa_size;
   12cf6:	f8d3 9008 	ldr.w	r9, [r3, #8]
	erased_val_32 = ERASED_VAL_32(erased_val);
   12cfa:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
	for (addr = 0; addr < end; addr += sizeof(data)) {
   12cfe:	454c      	cmp	r4, r9
   12d00:	db07      	blt.n	12d12 <zephyr_img_mgmt_flash_check_empty+0x3e>
	*out_empty = true;
   12d02:	2301      	movs	r3, #1
	flash_area_close(fa);
   12d04:	9801      	ldr	r0, [sp, #4]
	*out_empty = true;
   12d06:	f888 3000 	strb.w	r3, [r8]
	flash_area_close(fa);
   12d0a:	f7ff fb4c 	bl	123a6 <flash_area_close>
	return 0;
   12d0e:	2500      	movs	r5, #0
   12d10:	e022      	b.n	12d58 <zephyr_img_mgmt_flash_check_empty+0x84>
		if (end - addr < sizeof(data)) {
   12d12:	eba9 0704 	sub.w	r7, r9, r4
			bytes_to_read = sizeof(data);
   12d16:	2f40      	cmp	r7, #64	; 0x40
   12d18:	bfa8      	it	ge
   12d1a:	2740      	movge	r7, #64	; 0x40
		rc = flash_area_read(fa, addr, data, bytes_to_read);
   12d1c:	9801      	ldr	r0, [sp, #4]
   12d1e:	463b      	mov	r3, r7
   12d20:	aa02      	add	r2, sp, #8
   12d22:	4621      	mov	r1, r4
   12d24:	f7ff fb40 	bl	123a8 <flash_area_read>
		if (rc != 0) {
   12d28:	4605      	mov	r5, r0
   12d2a:	b930      	cbnz	r0, 12d3a <zephyr_img_mgmt_flash_check_empty+0x66>
		for (i = 0; i < bytes_to_read / 4; i++) {
   12d2c:	10bf      	asrs	r7, r7, #2
   12d2e:	aa02      	add	r2, sp, #8
   12d30:	4603      	mov	r3, r0
   12d32:	429f      	cmp	r7, r3
   12d34:	d106      	bne.n	12d44 <zephyr_img_mgmt_flash_check_empty+0x70>
	for (addr = 0; addr < end; addr += sizeof(data)) {
   12d36:	3440      	adds	r4, #64	; 0x40
   12d38:	e7e1      	b.n	12cfe <zephyr_img_mgmt_flash_check_empty+0x2a>
			flash_area_close(fa);
   12d3a:	9801      	ldr	r0, [sp, #4]
   12d3c:	f7ff fb33 	bl	123a6 <flash_area_close>
		return MGMT_ERR_EUNKNOWN;
   12d40:	2501      	movs	r5, #1
   12d42:	e009      	b.n	12d58 <zephyr_img_mgmt_flash_check_empty+0x84>
			if (data[i] != erased_val_32) {
   12d44:	f852 1b04 	ldr.w	r1, [r2], #4
   12d48:	42b1      	cmp	r1, r6
   12d4a:	d009      	beq.n	12d60 <zephyr_img_mgmt_flash_check_empty+0x8c>
				*out_empty = false;
   12d4c:	2300      	movs	r3, #0
				flash_area_close(fa);
   12d4e:	9801      	ldr	r0, [sp, #4]
				*out_empty = false;
   12d50:	f888 3000 	strb.w	r3, [r8]
				flash_area_close(fa);
   12d54:	f7ff fb27 	bl	123a6 <flash_area_close>
}
   12d58:	4628      	mov	r0, r5
   12d5a:	b013      	add	sp, #76	; 0x4c
   12d5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < bytes_to_read / 4; i++) {
   12d60:	3301      	adds	r3, #1
   12d62:	e7e6      	b.n	12d32 <zephyr_img_mgmt_flash_check_empty+0x5e>

00012d64 <img_mgmt_get_unused_slot_area_id.constprop.0>:
img_mgmt_get_unused_slot_area_id(int slot)
   12d64:	b508      	push	{r3, lr}
			if (img_mgmt_slot_in_use(slot) == 0) {
   12d66:	2000      	movs	r0, #0
   12d68:	f000 f8f3 	bl	12f52 <img_mgmt_slot_in_use>
   12d6c:	b128      	cbz	r0, 12d7a <img_mgmt_get_unused_slot_area_id.constprop.0+0x16>
   12d6e:	2001      	movs	r0, #1
   12d70:	f000 f8ef 	bl	12f52 <img_mgmt_slot_in_use>
   12d74:	b918      	cbnz	r0, 12d7e <img_mgmt_get_unused_slot_area_id.constprop.0+0x1a>
		fa_id = FLASH_AREA_ID(image_1);
   12d76:	2002      	movs	r0, #2
}
   12d78:	bd08      	pop	{r3, pc}
		fa_id = FLASH_AREA_ID(image_0);
   12d7a:	2001      	movs	r0, #1
					return area_id;
   12d7c:	e7fc      	b.n	12d78 <img_mgmt_get_unused_slot_area_id.constprop.0+0x14>
		return -1;
   12d7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12d82:	e7f9      	b.n	12d78 <img_mgmt_get_unused_slot_area_id.constprop.0+0x14>

00012d84 <img_mgmt_impl_erase_slot>:
{
   12d84:	b513      	push	{r0, r1, r4, lr}
	best_id = img_mgmt_get_unused_slot_area_id(-1);
   12d86:	f7ff ffed 	bl	12d64 <img_mgmt_get_unused_slot_area_id.constprop.0>
	if (best_id < 0) {
   12d8a:	2800      	cmp	r0, #0
   12d8c:	db11      	blt.n	12db2 <img_mgmt_impl_erase_slot+0x2e>
	rc = zephyr_img_mgmt_flash_check_empty(best_id, &empty);
   12d8e:	b2c4      	uxtb	r4, r0
   12d90:	f10d 0107 	add.w	r1, sp, #7
   12d94:	4620      	mov	r0, r4
   12d96:	f7ff ff9d 	bl	12cd4 <zephyr_img_mgmt_flash_check_empty>
	if (rc != 0) {
   12d9a:	b960      	cbnz	r0, 12db6 <img_mgmt_impl_erase_slot+0x32>
	if (!empty) {
   12d9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12da0:	b92b      	cbnz	r3, 12dae <img_mgmt_impl_erase_slot+0x2a>
		rc = boot_erase_img_bank(best_id);
   12da2:	4620      	mov	r0, r4
   12da4:	f000 fba3 	bl	134ee <boot_erase_img_bank>
		if (rc != 0) {
   12da8:	3800      	subs	r0, #0
   12daa:	bf18      	it	ne
   12dac:	2001      	movne	r0, #1
}
   12dae:	b002      	add	sp, #8
   12db0:	bd10      	pop	{r4, pc}
		return MGMT_ERR_ENOENT;
   12db2:	2005      	movs	r0, #5
   12db4:	e7fb      	b.n	12dae <img_mgmt_impl_erase_slot+0x2a>
		return MGMT_ERR_EUNKNOWN;
   12db6:	2001      	movs	r0, #1
   12db8:	e7f9      	b.n	12dae <img_mgmt_impl_erase_slot+0x2a>

00012dba <img_mgmt_impl_write_pending>:
	if (slot != 1 && !(CONFIG_IMG_MGMT_UPDATABLE_IMAGE_NUMBER == 2 && slot == 3)) {
   12dba:	2801      	cmp	r0, #1
{
   12dbc:	b508      	push	{r3, lr}
	if (slot != 1 && !(CONFIG_IMG_MGMT_UPDATABLE_IMAGE_NUMBER == 2 && slot == 3)) {
   12dbe:	d106      	bne.n	12dce <img_mgmt_impl_write_pending+0x14>
	rc = boot_request_upgrade_multi(zephyr_img_mgmt_slot_to_image(slot), permanent);
   12dc0:	2000      	movs	r0, #0
   12dc2:	f000 fb84 	bl	134ce <boot_request_upgrade_multi>
	if (rc != 0) {
   12dc6:	3800      	subs	r0, #0
   12dc8:	bf18      	it	ne
   12dca:	2001      	movne	r0, #1
}
   12dcc:	bd08      	pop	{r3, pc}
		return MGMT_ERR_EINVAL;
   12dce:	2003      	movs	r0, #3
   12dd0:	e7fc      	b.n	12dcc <img_mgmt_impl_write_pending+0x12>

00012dd2 <img_mgmt_impl_write_confirmed>:
{
   12dd2:	b508      	push	{r3, lr}
	rc = boot_write_img_confirmed();
   12dd4:	f000 fb83 	bl	134de <boot_write_img_confirmed>
}
   12dd8:	3800      	subs	r0, #0
   12dda:	bf18      	it	ne
   12ddc:	2001      	movne	r0, #1
   12dde:	bd08      	pop	{r3, pc}

00012de0 <img_mgmt_impl_read>:
{
   12de0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12de2:	460c      	mov	r4, r1
   12de4:	4615      	mov	r5, r2
   12de6:	461e      	mov	r6, r3
	switch (slot) {
   12de8:	b1b0      	cbz	r0, 12e18 <img_mgmt_impl_read+0x38>
   12dea:	2801      	cmp	r0, #1
   12dec:	bf14      	ite	ne
   12dee:	20ff      	movne	r0, #255	; 0xff
   12df0:	2002      	moveq	r0, #2
	rc = flash_area_open_ex(area_id, &fa);
   12df2:	a901      	add	r1, sp, #4
   12df4:	f7ff ff5b 	bl	12cae <flash_area_open_ex>
	if (rc != 0) {
   12df8:	b980      	cbnz	r0, 12e1c <img_mgmt_impl_read+0x3c>
	rc = flash_area_read(fa, offset, dst, num_bytes);
   12dfa:	4621      	mov	r1, r4
   12dfc:	4633      	mov	r3, r6
   12dfe:	462a      	mov	r2, r5
   12e00:	9801      	ldr	r0, [sp, #4]
   12e02:	f7ff fad1 	bl	123a8 <flash_area_read>
   12e06:	4604      	mov	r4, r0
	flash_area_close(fa);
   12e08:	9801      	ldr	r0, [sp, #4]
   12e0a:	f7ff facc 	bl	123a6 <flash_area_close>
	if (rc != 0) {
   12e0e:	1e20      	subs	r0, r4, #0
   12e10:	bf18      	it	ne
   12e12:	2001      	movne	r0, #1
}
   12e14:	b002      	add	sp, #8
   12e16:	bd70      	pop	{r4, r5, r6, pc}
		fa_id = FLASH_AREA_ID(image_0);
   12e18:	2001      	movs	r0, #1
   12e1a:	e7ea      	b.n	12df2 <img_mgmt_impl_read+0x12>
		return MGMT_ERR_EUNKNOWN;
   12e1c:	2001      	movs	r0, #1
   12e1e:	e7f9      	b.n	12e14 <img_mgmt_impl_read+0x34>

00012e20 <img_mgmt_impl_swap_type>:
{
   12e20:	b508      	push	{r3, lr}
	switch (mcuboot_swap_type_multi(image)) {
   12e22:	2000      	movs	r0, #0
   12e24:	f000 fb51 	bl	134ca <mcuboot_swap_type_multi>
   12e28:	1e83      	subs	r3, r0, #2
   12e2a:	2b02      	cmp	r3, #2
   12e2c:	bf94      	ite	ls
   12e2e:	f100 30ff 	addls.w	r0, r0, #4294967295	; 0xffffffff
   12e32:	2000      	movhi	r0, #0
}
   12e34:	bd08      	pop	{r3, pc}

00012e36 <img_mgmt_impl_erased_val>:

int
img_mgmt_impl_erased_val(int slot, uint8_t *erased_val)
{
   12e36:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12e38:	460d      	mov	r5, r1
	switch (slot) {
   12e3a:	b190      	cbz	r0, 12e62 <img_mgmt_impl_erased_val+0x2c>
   12e3c:	2801      	cmp	r0, #1
   12e3e:	bf14      	ite	ne
   12e40:	20ff      	movne	r0, #255	; 0xff
   12e42:	2002      	moveq	r0, #2

	if (area_id < 0) {
		return MGMT_ERR_EUNKNOWN;
	}

	rc = flash_area_open_ex(area_id, &fa);
   12e44:	a901      	add	r1, sp, #4
   12e46:	f7ff ff32 	bl	12cae <flash_area_open_ex>
	if (rc != 0) {
   12e4a:	4604      	mov	r4, r0
   12e4c:	b958      	cbnz	r0, 12e66 <img_mgmt_impl_erased_val+0x30>
		return MGMT_ERR_EUNKNOWN;
	}

	*erased_val = flash_area_erased_val(fa);
   12e4e:	9801      	ldr	r0, [sp, #4]
   12e50:	f7ff fb05 	bl	1245e <flash_area_erased_val>
   12e54:	7028      	strb	r0, [r5, #0]
	flash_area_close(fa);
   12e56:	9801      	ldr	r0, [sp, #4]
   12e58:	f7ff faa5 	bl	123a6 <flash_area_close>

	return 0;
}
   12e5c:	4620      	mov	r0, r4
   12e5e:	b003      	add	sp, #12
   12e60:	bd30      	pop	{r4, r5, pc}
		fa_id = FLASH_AREA_ID(image_0);
   12e62:	2001      	movs	r0, #1
   12e64:	e7ee      	b.n	12e44 <img_mgmt_impl_erased_val+0xe>
		return MGMT_ERR_EUNKNOWN;
   12e66:	2401      	movs	r4, #1
   12e68:	e7f8      	b.n	12e5c <img_mgmt_impl_erased_val+0x26>

00012e6a <img_mgmt_impl_log_upload_start>:

int
img_mgmt_impl_log_upload_start(int status)
{
	return 0;
}
   12e6a:	2000      	movs	r0, #0
   12e6c:	4770      	bx	lr

00012e6e <img_mgmt_impl_log_upload_done>:

int
img_mgmt_impl_log_upload_done(int status, const uint8_t *hash)
{
	return 0;
}
   12e6e:	2000      	movs	r0, #0
   12e70:	4770      	bx	lr

00012e72 <img_mgmt_impl_log_pending>:
   12e72:	2000      	movs	r0, #0
   12e74:	4770      	bx	lr

00012e76 <img_mgmt_impl_log_confirm>:
   12e76:	2000      	movs	r0, #0
   12e78:	4770      	bx	lr

00012e7a <cbor_encode_text_stringz>:
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   12e7a:	b538      	push	{r3, r4, r5, lr}
   12e7c:	4605      	mov	r5, r0
   12e7e:	4608      	mov	r0, r1
   12e80:	460c      	mov	r4, r1
   12e82:	f7ff fbaf 	bl	125e4 <strlen>
   12e86:	4621      	mov	r1, r4
   12e88:	4602      	mov	r2, r0
   12e8a:	4628      	mov	r0, r5
   12e8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12e90:	f001 ba1a 	b.w	142c8 <cbor_encode_text_string>

00012e94 <img_mgmt_find_by_hash>:
{
   12e94:	b570      	push	{r4, r5, r6, lr}
   12e96:	4605      	mov	r5, r0
   12e98:	b088      	sub	sp, #32
   12e9a:	460e      	mov	r6, r1
	for (i = 0; i < 2 * CONFIG_IMG_MGMT_UPDATABLE_IMAGE_NUMBER; i++) {
   12e9c:	2400      	movs	r4, #0
		if (img_mgmt_read_info(i, ver, hash, NULL) != 0) {
   12e9e:	2300      	movs	r3, #0
   12ea0:	466a      	mov	r2, sp
   12ea2:	4631      	mov	r1, r6
   12ea4:	4620      	mov	r0, r4
   12ea6:	f7fb f931 	bl	e10c <img_mgmt_read_info>
   12eaa:	b140      	cbz	r0, 12ebe <img_mgmt_find_by_hash+0x2a>
	for (i = 0; i < 2 * CONFIG_IMG_MGMT_UPDATABLE_IMAGE_NUMBER; i++) {
   12eac:	2c01      	cmp	r4, #1
   12eae:	d104      	bne.n	12eba <img_mgmt_find_by_hash+0x26>
	return -1;
   12eb0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   12eb4:	4620      	mov	r0, r4
   12eb6:	b008      	add	sp, #32
   12eb8:	bd70      	pop	{r4, r5, r6, pc}
   12eba:	2401      	movs	r4, #1
   12ebc:	e7ef      	b.n	12e9e <img_mgmt_find_by_hash+0xa>
		if (!memcmp(hash, find, IMAGE_HASH_LEN)) {
   12ebe:	2220      	movs	r2, #32
   12ec0:	4629      	mov	r1, r5
   12ec2:	4668      	mov	r0, sp
   12ec4:	f7ff fbaa 	bl	1261c <memcmp>
   12ec8:	2800      	cmp	r0, #0
   12eca:	d1ef      	bne.n	12eac <img_mgmt_find_by_hash+0x18>
   12ecc:	e7f2      	b.n	12eb4 <img_mgmt_find_by_hash+0x20>

00012ece <img_mgmt_my_version>:
	return img_mgmt_read_info(IMG_MGMT_BOOT_CURR_SLOT, ver, NULL, NULL);
   12ece:	2300      	movs	r3, #0
{
   12ed0:	4601      	mov	r1, r0
	return img_mgmt_read_info(IMG_MGMT_BOOT_CURR_SLOT, ver, NULL, NULL);
   12ed2:	461a      	mov	r2, r3
   12ed4:	4618      	mov	r0, r3
   12ed6:	f7fb b919 	b.w	e10c <img_mgmt_read_info>

00012eda <cbor_encode_text_stringz>:
   12eda:	b538      	push	{r3, r4, r5, lr}
   12edc:	4605      	mov	r5, r0
   12ede:	4608      	mov	r0, r1
   12ee0:	460c      	mov	r4, r1
   12ee2:	f7ff fb7f 	bl	125e4 <strlen>
   12ee6:	4621      	mov	r1, r4
   12ee8:	4602      	mov	r2, r0
   12eea:	4628      	mov	r0, r5
   12eec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12ef0:	f001 b9ea 	b.w	142c8 <cbor_encode_text_string>

00012ef4 <img_mgmt_state_flags>:
{
   12ef4:	b510      	push	{r4, lr}
   12ef6:	4604      	mov	r4, r0
	swap_type = img_mgmt_impl_swap_type(query_slot);
   12ef8:	f7ff ff92 	bl	12e20 <img_mgmt_impl_swap_type>
	switch (swap_type) {
   12efc:	2803      	cmp	r0, #3
   12efe:	d80f      	bhi.n	12f20 <img_mgmt_state_flags+0x2c>
   12f00:	e8df f000 	tbb	[pc, r0]
   12f04:	0b080502 	.word	0x0b080502
		if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   12f08:	b17c      	cbz	r4, 12f2a <img_mgmt_state_flags+0x36>
	flags = 0;
   12f0a:	2000      	movs	r0, #0
   12f0c:	e001      	b.n	12f12 <img_mgmt_state_flags+0x1e>
		if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   12f0e:	b174      	cbz	r4, 12f2e <img_mgmt_state_flags+0x3a>
			flags |= IMG_MGMT_STATE_F_PENDING;
   12f10:	2001      	movs	r0, #1
}
   12f12:	bd10      	pop	{r4, pc}
		if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   12f14:	b15c      	cbz	r4, 12f2e <img_mgmt_state_flags+0x3a>
			flags |= IMG_MGMT_STATE_F_PENDING | IMG_MGMT_STATE_F_PERMANENT;
   12f16:	2009      	movs	r0, #9
   12f18:	e7fb      	b.n	12f12 <img_mgmt_state_flags+0x1e>
		if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   12f1a:	b154      	cbz	r4, 12f32 <img_mgmt_state_flags+0x3e>
			flags |= IMG_MGMT_STATE_F_CONFIRMED;
   12f1c:	2002      	movs	r0, #2
   12f1e:	e7f8      	b.n	12f12 <img_mgmt_state_flags+0x1e>
	if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   12f20:	2c00      	cmp	r4, #0
   12f22:	d1f2      	bne.n	12f0a <img_mgmt_state_flags+0x16>
		flags |= IMG_MGMT_STATE_F_ACTIVE;
   12f24:	f044 0004 	orr.w	r0, r4, #4
   12f28:	e7f3      	b.n	12f12 <img_mgmt_state_flags+0x1e>
			flags |= IMG_MGMT_STATE_F_ACTIVE;
   12f2a:	2406      	movs	r4, #6
   12f2c:	e7fa      	b.n	12f24 <img_mgmt_state_flags+0x30>
			flags |= IMG_MGMT_STATE_F_CONFIRMED;
   12f2e:	2402      	movs	r4, #2
   12f30:	e7f8      	b.n	12f24 <img_mgmt_state_flags+0x30>
			flags |= IMG_MGMT_STATE_F_ACTIVE;
   12f32:	2404      	movs	r4, #4
   12f34:	e7f6      	b.n	12f24 <img_mgmt_state_flags+0x30>

00012f36 <img_mgmt_state_any_pending>:
{
   12f36:	b508      	push	{r3, lr}
	return img_mgmt_state_flags(0) & IMG_MGMT_STATE_F_PENDING ||
   12f38:	2000      	movs	r0, #0
   12f3a:	f7ff ffdb 	bl	12ef4 <img_mgmt_state_flags>
   12f3e:	f010 0f01 	tst.w	r0, #1
   12f42:	f04f 0001 	mov.w	r0, #1
   12f46:	d103      	bne.n	12f50 <img_mgmt_state_any_pending+0x1a>
		   img_mgmt_state_flags(1) & IMG_MGMT_STATE_F_PENDING;
   12f48:	f7ff ffd4 	bl	12ef4 <img_mgmt_state_flags>
	return img_mgmt_state_flags(0) & IMG_MGMT_STATE_F_PENDING ||
   12f4c:	f000 0001 	and.w	r0, r0, #1
}
   12f50:	bd08      	pop	{r3, pc}

00012f52 <img_mgmt_slot_in_use>:
{
   12f52:	b508      	push	{r3, lr}
	state_flags = img_mgmt_state_flags(slot);
   12f54:	f7ff ffce 	bl	12ef4 <img_mgmt_state_flags>
		   state_flags & IMG_MGMT_STATE_F_CONFIRMED	||
   12f58:	f010 0f06 	tst.w	r0, #6
   12f5c:	bf0c      	ite	eq
   12f5e:	f000 0001 	andeq.w	r0, r0, #1
   12f62:	2001      	movne	r0, #1
}
   12f64:	bd08      	pop	{r3, pc}

00012f66 <img_mgmt_state_set_pending>:
{
   12f66:	b5f0      	push	{r4, r5, r6, r7, lr}
   12f68:	b089      	sub	sp, #36	; 0x24
   12f6a:	4606      	mov	r6, r0
   12f6c:	460f      	mov	r7, r1
	state_flags = img_mgmt_state_flags(slot);
   12f6e:	f7ff ffc1 	bl	12ef4 <img_mgmt_state_flags>
	if (state_flags & IMG_MGMT_STATE_F_CONFIRMED && slot != 0) {
   12f72:	0783      	lsls	r3, r0, #30
   12f74:	d500      	bpl.n	12f78 <img_mgmt_state_set_pending+0x12>
   12f76:	b9d6      	cbnz	r6, 12fae <img_mgmt_state_set_pending+0x48>
	rc = img_mgmt_impl_write_pending(slot, permanent);
   12f78:	1e39      	subs	r1, r7, #0
   12f7a:	bf18      	it	ne
   12f7c:	2101      	movne	r1, #1
   12f7e:	4630      	mov	r0, r6
   12f80:	f7ff ff1b 	bl	12dba <img_mgmt_impl_write_pending>
	if (rc != 0) {
   12f84:	1e04      	subs	r4, r0, #0
   12f86:	bf18      	it	ne
   12f88:	2401      	movne	r4, #1
	if (img_mgmt_read_info(slot, NULL, hash, NULL)) {
   12f8a:	466d      	mov	r5, sp
   12f8c:	2300      	movs	r3, #0
   12f8e:	4619      	mov	r1, r3
   12f90:	462a      	mov	r2, r5
   12f92:	4630      	mov	r0, r6
   12f94:	f7fb f8ba 	bl	e10c <img_mgmt_read_info>
		hashp = hash;
   12f98:	2800      	cmp	r0, #0
   12f9a:	bf0c      	ite	eq
   12f9c:	4629      	moveq	r1, r5
   12f9e:	2100      	movne	r1, #0
		(void) img_mgmt_impl_log_confirm(rc, hashp);
   12fa0:	4620      	mov	r0, r4
	if (permanent) {
   12fa2:	b137      	cbz	r7, 12fb2 <img_mgmt_state_set_pending+0x4c>
		(void) img_mgmt_impl_log_confirm(rc, hashp);
   12fa4:	f7ff ff67 	bl	12e76 <img_mgmt_impl_log_confirm>
}
   12fa8:	4620      	mov	r0, r4
   12faa:	b009      	add	sp, #36	; 0x24
   12fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MGMT_ERR_EBADSTATE;
   12fae:	2406      	movs	r4, #6
   12fb0:	e7eb      	b.n	12f8a <img_mgmt_state_set_pending+0x24>
		(void) img_mgmt_impl_log_pending(rc, hashp);
   12fb2:	f7ff ff5e 	bl	12e72 <img_mgmt_impl_log_pending>
	return rc;
   12fb6:	e7f7      	b.n	12fa8 <img_mgmt_state_set_pending+0x42>

00012fb8 <img_mgmt_state_confirm>:
{
   12fb8:	b510      	push	{r4, lr}
	if (img_mgmt_state_any_pending()) {
   12fba:	f7ff ffbc 	bl	12f36 <img_mgmt_state_any_pending>
   12fbe:	b960      	cbnz	r0, 12fda <img_mgmt_state_confirm+0x22>
	rc = img_mgmt_impl_write_confirmed();
   12fc0:	f7ff ff07 	bl	12dd2 <img_mgmt_impl_write_confirmed>
	if (rc != 0) {
   12fc4:	1e04      	subs	r4, r0, #0
   12fc6:	bf18      	it	ne
   12fc8:	2401      	movne	r4, #1
	 img_mgmt_dfu_confirmed();
   12fca:	f7fb fa7b 	bl	e4c4 <img_mgmt_dfu_confirmed>
	return img_mgmt_impl_log_confirm(rc, NULL);
   12fce:	4620      	mov	r0, r4
   12fd0:	2100      	movs	r1, #0
}
   12fd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return img_mgmt_impl_log_confirm(rc, NULL);
   12fd6:	f7ff bf4e 	b.w	12e76 <img_mgmt_impl_log_confirm>
		rc = MGMT_ERR_EBADSTATE;
   12fda:	2406      	movs	r4, #6
   12fdc:	e7f7      	b.n	12fce <img_mgmt_state_confirm+0x16>

00012fde <img_mgmt_ver_str>:
#include "img_mgmt/image.h"
#include "img_mgmt/img_mgmt.h"

int
img_mgmt_ver_str(const struct image_version *ver, char *dst)
{
   12fde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int off = 0;

	off += ull_to_s(ver->iv_major, INT_MAX, dst + off);
   12fe0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
{
   12fe4:	460c      	mov	r4, r1
   12fe6:	4605      	mov	r5, r0
	off += ull_to_s(ver->iv_major, INT_MAX, dst + off);
   12fe8:	460b      	mov	r3, r1
   12fea:	7800      	ldrb	r0, [r0, #0]
   12fec:	2100      	movs	r1, #0
   12fee:	f000 f99e 	bl	1332e <ull_to_s>

	dst[off++] = '.';
   12ff2:	272e      	movs	r7, #46	; 0x2e
   12ff4:	5427      	strb	r7, [r4, r0]
   12ff6:	1c46      	adds	r6, r0, #1
	off += ull_to_s(ver->iv_minor, INT_MAX, dst + off);
   12ff8:	19a3      	adds	r3, r4, r6
   12ffa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   12ffe:	2100      	movs	r1, #0
   13000:	7868      	ldrb	r0, [r5, #1]
   13002:	f000 f994 	bl	1332e <ull_to_s>
   13006:	4430      	add	r0, r6

	dst[off++] = '.';
   13008:	1c46      	adds	r6, r0, #1
   1300a:	5427      	strb	r7, [r4, r0]
	off += ull_to_s(ver->iv_revision, INT_MAX, dst + off);
   1300c:	19a3      	adds	r3, r4, r6
   1300e:	8868      	ldrh	r0, [r5, #2]
   13010:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   13014:	2100      	movs	r1, #0
   13016:	f000 f98a 	bl	1332e <ull_to_s>

	if (ver->iv_build_num != 0) {
   1301a:	686b      	ldr	r3, [r5, #4]
   1301c:	b14b      	cbz	r3, 13032 <img_mgmt_ver_str+0x54>
	off += ull_to_s(ver->iv_revision, INT_MAX, dst + off);
   1301e:	4406      	add	r6, r0
		dst[off++] = '.';
		off += ull_to_s(ver->iv_build_num, INT_MAX, dst + off);
   13020:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
		dst[off++] = '.';
   13024:	55a7      	strb	r7, [r4, r6]
   13026:	3601      	adds	r6, #1
		off += ull_to_s(ver->iv_build_num, INT_MAX, dst + off);
   13028:	6868      	ldr	r0, [r5, #4]
   1302a:	19a3      	adds	r3, r4, r6
   1302c:	2100      	movs	r1, #0
   1302e:	f000 f97e 	bl	1332e <ull_to_s>
	}

	return 0;
}
   13032:	2000      	movs	r0, #0
   13034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013036 <zephyr_os_mgmt_reset_work_handler>:
{
   13036:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   13038:	2000      	movs	r0, #0
   1303a:	f7fa f8d1 	bl	d1e0 <sys_reboot>

0001303e <os_mgmt_reset>:
	return os_mgmt_impl_reset(CONFIG_OS_MGMT_RESET_MS);
   1303e:	20fa      	movs	r0, #250	; 0xfa
   13040:	f7fb bb60 	b.w	e704 <os_mgmt_impl_reset>

00013044 <mgmt_streamer_alloc_rsp>:
{
   13044:	4603      	mov	r3, r0
   13046:	4608      	mov	r0, r1
	return streamer->cfg->alloc_rsp(req, streamer->cb_arg);
   13048:	681a      	ldr	r2, [r3, #0]
   1304a:	6859      	ldr	r1, [r3, #4]
   1304c:	6812      	ldr	r2, [r2, #0]
   1304e:	4710      	bx	r2

00013050 <mgmt_streamer_trim_front>:
{
   13050:	4603      	mov	r3, r0
   13052:	4608      	mov	r0, r1
   13054:	4611      	mov	r1, r2
	streamer->cfg->trim_front(buf, len, streamer->cb_arg);
   13056:	681a      	ldr	r2, [r3, #0]
{
   13058:	b410      	push	{r4}
	streamer->cfg->trim_front(buf, len, streamer->cb_arg);
   1305a:	6854      	ldr	r4, [r2, #4]
   1305c:	685a      	ldr	r2, [r3, #4]
   1305e:	4623      	mov	r3, r4
}
   13060:	bc10      	pop	{r4}
	streamer->cfg->trim_front(buf, len, streamer->cb_arg);
   13062:	4718      	bx	r3

00013064 <mgmt_streamer_write_hdr>:
	return streamer->cfg->write_hdr(streamer->writer, hdr);
   13064:	6803      	ldr	r3, [r0, #0]
   13066:	68c0      	ldr	r0, [r0, #12]
   13068:	68db      	ldr	r3, [r3, #12]
   1306a:	4718      	bx	r3

0001306c <mgmt_streamer_init_reader>:
	return streamer->cfg->init_reader(streamer->reader, buf);
   1306c:	6803      	ldr	r3, [r0, #0]
   1306e:	6880      	ldr	r0, [r0, #8]
   13070:	691b      	ldr	r3, [r3, #16]
   13072:	4718      	bx	r3

00013074 <mgmt_streamer_init_writer>:
	return streamer->cfg->init_writer(streamer->writer, buf);
   13074:	6803      	ldr	r3, [r0, #0]
   13076:	68c0      	ldr	r0, [r0, #12]
   13078:	695b      	ldr	r3, [r3, #20]
   1307a:	4718      	bx	r3

0001307c <mgmt_streamer_free_buf>:
{
   1307c:	4603      	mov	r3, r0
   1307e:	4608      	mov	r0, r1
	streamer->cfg->free_buf(buf, streamer->cb_arg);
   13080:	681a      	ldr	r2, [r3, #0]
   13082:	6859      	ldr	r1, [r3, #4]
   13084:	6992      	ldr	r2, [r2, #24]
   13086:	4710      	bx	r2

00013088 <mgmt_err_from_cbor>:
	switch (cbor_status) {
   13088:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   1308c:	d003      	beq.n	13096 <mgmt_err_from_cbor+0xe>
   1308e:	3800      	subs	r0, #0
   13090:	bf18      	it	ne
   13092:	2001      	movne	r0, #1
   13094:	4770      	bx	lr
   13096:	2002      	movs	r0, #2
}
   13098:	4770      	bx	lr

0001309a <mgmt_ctxt_init>:
{
   1309a:	b570      	push	{r4, r5, r6, lr}
   1309c:	460e      	mov	r6, r1
	rc = cbor_parser_init(streamer->reader, 0, &ctxt->parser, &ctxt->it);
   1309e:	f100 031c 	add.w	r3, r0, #28
   130a2:	f100 0210 	add.w	r2, r0, #16
{
   130a6:	4605      	mov	r5, r0
	rc = cbor_parser_init(streamer->reader, 0, &ctxt->parser, &ctxt->it);
   130a8:	2100      	movs	r1, #0
   130aa:	68b0      	ldr	r0, [r6, #8]
   130ac:	f001 fafa 	bl	146a4 <cbor_parser_init>
   130b0:	4604      	mov	r4, r0
	if (rc != CborNoError) {
   130b2:	b118      	cbz	r0, 130bc <mgmt_ctxt_init+0x22>
}
   130b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return mgmt_err_from_cbor(rc);
   130b8:	f7ff bfe6 	b.w	13088 <mgmt_err_from_cbor>
	cbor_encoder_init(&ctxt->encoder, streamer->writer, 0);
   130bc:	4602      	mov	r2, r0
   130be:	68f1      	ldr	r1, [r6, #12]
   130c0:	4628      	mov	r0, r5
   130c2:	f001 f8cc 	bl	1425e <cbor_encoder_init>
}
   130c6:	4620      	mov	r0, r4
   130c8:	bd70      	pop	{r4, r5, r6, pc}

000130ca <mgmt_ntoh_hdr>:
	hdr->nh_len = ntohs(hdr->nh_len);
   130ca:	8843      	ldrh	r3, [r0, #2]
   130cc:	ba5b      	rev16	r3, r3
   130ce:	8043      	strh	r3, [r0, #2]
	hdr->nh_group = ntohs(hdr->nh_group);
   130d0:	8883      	ldrh	r3, [r0, #4]
   130d2:	ba5b      	rev16	r3, r3
   130d4:	8083      	strh	r3, [r0, #4]
}
   130d6:	4770      	bx	lr

000130d8 <mgmt_hton_hdr>:
   130d8:	f7ff bff7 	b.w	130ca <mgmt_ntoh_hdr>

000130dc <smp_process_request_packet>:
 *                       or there is not enough bytes to process header,
 *                       or other MGMT_ERR_[...] code on failure.
 */
int
smp_process_request_packet(struct smp_streamer *streamer, void *req)
{
   130dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   130e0:	b095      	sub	sp, #84	; 0x54
   130e2:	4605      	mov	r5, r0
   130e4:	460e      	mov	r6, r1
	int rc = 0;
	const char *rsn = NULL;

	rsp = NULL;

	mgmt_streamer_init_reader(&streamer->mgmt_stmr, req);
   130e6:	f7ff ffc1 	bl	1306c <mgmt_streamer_init_reader>
	reader->cpy(reader, (char *)dst_hdr, 0, sizeof(*dst_hdr));
   130ea:	f04f 0900 	mov.w	r9, #0

	while (streamer->mgmt_stmr.reader->message_size > 0) {
   130ee:	68a8      	ldr	r0, [r5, #8]
   130f0:	6984      	ldr	r4, [r0, #24]
   130f2:	b944      	cbnz	r4, 13106 <smp_process_request_packet+0x2a>
		}

		return rc;
	}

	mgmt_streamer_free_buf(&streamer->mgmt_stmr, req);
   130f4:	4631      	mov	r1, r6
   130f6:	4628      	mov	r0, r5
   130f8:	f7ff ffc0 	bl	1307c <mgmt_streamer_free_buf>
	mgmt_streamer_free_buf(&streamer->mgmt_stmr, rsp);
   130fc:	2100      	movs	r1, #0
   130fe:	4628      	mov	r0, r5
   13100:	f7ff ffbc 	bl	1307c <mgmt_streamer_free_buf>
	return rc;
   13104:	e093      	b.n	1322e <smp_process_request_packet+0x152>
	if (reader->message_size < sizeof(*dst_hdr)) {
   13106:	2c07      	cmp	r4, #7
   13108:	f240 8103 	bls.w	13312 <smp_process_request_packet+0x236>
	reader->cpy(reader, (char *)dst_hdr, 0, sizeof(*dst_hdr));
   1310c:	2308      	movs	r3, #8
   1310e:	2200      	movs	r2, #0
   13110:	a901      	add	r1, sp, #4
   13112:	6944      	ldr	r4, [r0, #20]
   13114:	47a0      	blx	r4
		mgmt_ntoh_hdr(&req_hdr);
   13116:	a801      	add	r0, sp, #4
   13118:	f7ff ffd7 	bl	130ca <mgmt_ntoh_hdr>
		if (streamer->mgmt_stmr.reader->message_size < (req_hdr.nh_len + MGMT_HDR_SIZE)) {
   1311c:	68aa      	ldr	r2, [r5, #8]
   1311e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   13122:	6992      	ldr	r2, [r2, #24]
   13124:	3308      	adds	r3, #8
   13126:	429a      	cmp	r2, r3
   13128:	f0c0 80f9 	bcc.w	1331e <smp_process_request_packet+0x242>
		mgmt_streamer_trim_front(&streamer->mgmt_stmr, req, MGMT_HDR_SIZE);
   1312c:	2208      	movs	r2, #8
   1312e:	4631      	mov	r1, r6
   13130:	4628      	mov	r0, r5
   13132:	f7ff ff8d 	bl	13050 <mgmt_streamer_trim_front>
		streamer->mgmt_stmr.reader->message_size -= MGMT_HDR_SIZE;
   13136:	68aa      	ldr	r2, [r5, #8]
   13138:	6993      	ldr	r3, [r2, #24]
   1313a:	3b08      	subs	r3, #8
   1313c:	6193      	str	r3, [r2, #24]
		rsp = mgmt_streamer_alloc_rsp(&streamer->mgmt_stmr, req);
   1313e:	4631      	mov	r1, r6
   13140:	4628      	mov	r0, r5
   13142:	f7ff ff7f 	bl	13044 <mgmt_streamer_alloc_rsp>
		if (rsp == NULL) {
   13146:	4680      	mov	r8, r0
   13148:	2800      	cmp	r0, #0
   1314a:	f000 80ed 	beq.w	13328 <smp_process_request_packet+0x24c>
		mgmt_streamer_init_writer(&streamer->mgmt_stmr, rsp);
   1314e:	4601      	mov	r1, r0
   13150:	4628      	mov	r0, r5
   13152:	f7ff ff8f 	bl	13074 <mgmt_streamer_init_writer>
	rc = mgmt_ctxt_init(&cbuf, &streamer->mgmt_stmr);
   13156:	4629      	mov	r1, r5
   13158:	a809      	add	r0, sp, #36	; 0x24
   1315a:	f7ff ff9e 	bl	1309a <mgmt_ctxt_init>
	if (rc != 0) {
   1315e:	4604      	mov	r4, r0
   13160:	2800      	cmp	r0, #0
   13162:	f040 80d8 	bne.w	13316 <smp_process_request_packet+0x23a>
	handler = mgmt_find_handler(req_hdr->nh_group, req_hdr->nh_id);
   13166:	f89d 100b 	ldrb.w	r1, [sp, #11]
   1316a:	f8bd 0008 	ldrh.w	r0, [sp, #8]
   1316e:	f7fb fb37 	bl	e7e0 <mgmt_find_handler>
	if (handler == NULL) {
   13172:	2800      	cmp	r0, #0
   13174:	d15f      	bne.n	13236 <smp_process_request_packet+0x15a>
		handler_found = false;
   13176:	2700      	movs	r7, #0
		return MGMT_ERR_ENOTSUP;
   13178:	2408      	movs	r4, #8
	if (rsp == NULL) {
   1317a:	46b1      	mov	r9, r6
   1317c:	4646      	mov	r6, r8
	mgmt_streamer_init_writer(&streamer->mgmt_stmr, rsp);
   1317e:	4631      	mov	r1, r6
   13180:	4628      	mov	r0, r5
   13182:	f7ff ff77 	bl	13074 <mgmt_streamer_init_writer>
	rc = mgmt_ctxt_init(&cbuf, &streamer->mgmt_stmr);
   13186:	4629      	mov	r1, r5
   13188:	a809      	add	r0, sp, #36	; 0x24
   1318a:	f7ff ff86 	bl	1309a <mgmt_ctxt_init>
	if (rc != 0) {
   1318e:	2800      	cmp	r0, #0
   13190:	d13b      	bne.n	1320a <smp_process_request_packet+0x12e>
	rc = cbor_encoder_create_map(&cbuf.encoder, &map, CborIndefiniteLength);
   13192:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13196:	a905      	add	r1, sp, #20
   13198:	a809      	add	r0, sp, #36	; 0x24
   1319a:	f001 f8a9 	bl	142f0 <cbor_encoder_create_map>
	if (rc != 0) {
   1319e:	bba0      	cbnz	r0, 1320a <smp_process_request_packet+0x12e>
	rc = mgmt_write_rsp_status(&cbuf, status);
   131a0:	4621      	mov	r1, r4
   131a2:	a809      	add	r0, sp, #36	; 0x24
   131a4:	f7fb fb36 	bl	e814 <mgmt_write_rsp_status>
	if (rc != 0) {
   131a8:	bb78      	cbnz	r0, 1320a <smp_process_request_packet+0x12e>
	rc = cbor_encoder_close_container(&cbuf.encoder, &map);
   131aa:	a905      	add	r1, sp, #20
   131ac:	a809      	add	r0, sp, #36	; 0x24
   131ae:	f001 f8ae 	bl	1430e <cbor_encoder_close_container>
	if (rc != 0) {
   131b2:	4680      	mov	r8, r0
   131b4:	bb48      	cbnz	r0, 1320a <smp_process_request_packet+0x12e>
		.nh_op = smp_rsp_op(req_hdr->nh_op),
   131b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
{   return encoder->writer->bytes_written; }
   131ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
		.nh_group = req_hdr->nh_group,
   131bc:	f8bd 0008 	ldrh.w	r0, [sp, #8]
			 cbor_encode_bytes_written(&cbuf.encoder) - MGMT_HDR_SIZE);
   131c0:	685b      	ldr	r3, [r3, #4]
		.nh_seq = req_hdr->nh_seq,
   131c2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	*rsp_hdr = (struct mgmt_hdr) {
   131c6:	f8ad 0010 	strh.w	r0, [sp, #16]
		return MGMT_OP_WRITE_RSP;
   131ca:	f012 0f07 	tst.w	r2, #7
   131ce:	bf0c      	ite	eq
   131d0:	f04f 0c01 	moveq.w	ip, #1
   131d4:	f04f 0c03 	movne.w	ip, #3
	*rsp_hdr = (struct mgmt_hdr) {
   131d8:	4642      	mov	r2, r8
   131da:	f36c 0202 	bfi	r2, ip, #0, #3
			 cbor_encode_bytes_written(&cbuf.encoder) - MGMT_HDR_SIZE);
   131de:	3b08      	subs	r3, #8
	mgmt_hton_hdr(rsp_hdr);
   131e0:	a803      	add	r0, sp, #12
	*rsp_hdr = (struct mgmt_hdr) {
   131e2:	f8ad 300e 	strh.w	r3, [sp, #14]
   131e6:	f8ad 800c 	strh.w	r8, [sp, #12]
   131ea:	f8ad 1012 	strh.w	r1, [sp, #18]
   131ee:	f88d 200c 	strb.w	r2, [sp, #12]
	mgmt_hton_hdr(rsp_hdr);
   131f2:	f7ff ff71 	bl	130d8 <mgmt_hton_hdr>
	return mgmt_streamer_write_hdr(&streamer->mgmt_stmr, src_hdr);
   131f6:	a903      	add	r1, sp, #12
   131f8:	4628      	mov	r0, r5
   131fa:	f7ff ff33 	bl	13064 <mgmt_streamer_write_hdr>
		streamer->tx_rsp_cb(streamer, rsp, streamer->mgmt_stmr.cb_arg);
   131fe:	4631      	mov	r1, r6
   13200:	692b      	ldr	r3, [r5, #16]
   13202:	686a      	ldr	r2, [r5, #4]
   13204:	4628      	mov	r0, r5
   13206:	4798      	blx	r3
		rsp = NULL;
   13208:	4646      	mov	r6, r8
	mgmt_streamer_free_buf(&streamer->mgmt_stmr, req);
   1320a:	4649      	mov	r1, r9
   1320c:	4628      	mov	r0, r5
   1320e:	f7ff ff35 	bl	1307c <mgmt_streamer_free_buf>
	mgmt_streamer_free_buf(&streamer->mgmt_stmr, rsp);
   13212:	4631      	mov	r1, r6
   13214:	4628      	mov	r0, r5
   13216:	f7ff ff31 	bl	1307c <mgmt_streamer_free_buf>
		if (handler_found) {
   1321a:	b147      	cbz	r7, 1322e <smp_process_request_packet+0x152>
			mgmt_evt(MGMT_EVT_OP_CMD_DONE, req_hdr.nh_group, req_hdr.nh_id,
   1321c:	f89d 200b 	ldrb.w	r2, [sp, #11]
   13220:	f8bd 1008 	ldrh.w	r1, [sp, #8]
			cmd_done_arg.err = rc;
   13224:	9400      	str	r4, [sp, #0]
			mgmt_evt(MGMT_EVT_OP_CMD_DONE, req_hdr.nh_group, req_hdr.nh_id,
   13226:	466b      	mov	r3, sp
   13228:	2003      	movs	r0, #3
   1322a:	f7fb fb09 	bl	e840 <mgmt_evt>
}
   1322e:	4620      	mov	r0, r4
   13230:	b015      	add	sp, #84	; 0x54
   13232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req_hdr->nh_op) {
   13236:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1323a:	f013 0307 	ands.w	r3, r3, #7
   1323e:	d004      	beq.n	1324a <smp_process_request_packet+0x16e>
   13240:	2b02      	cmp	r3, #2
   13242:	d050      	beq.n	132e6 <smp_process_request_packet+0x20a>
		handler_found = false;
   13244:	4627      	mov	r7, r4
		return MGMT_ERR_EINVAL;
   13246:	2403      	movs	r4, #3
   13248:	e797      	b.n	1317a <smp_process_request_packet+0x9e>
		handler_fn = handler->mh_read;
   1324a:	6804      	ldr	r4, [r0, #0]
	if (handler_fn) {
   1324c:	2c00      	cmp	r4, #0
   1324e:	d092      	beq.n	13176 <smp_process_request_packet+0x9a>
		rc = cbor_encoder_create_map(&cbuf->encoder, &payload_encoder,
   13250:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13254:	a905      	add	r1, sp, #20
   13256:	a809      	add	r0, sp, #36	; 0x24
   13258:	f001 f84a 	bl	142f0 <cbor_encoder_create_map>
   1325c:	4603      	mov	r3, r0
		if (rc != 0) {
   1325e:	2800      	cmp	r0, #0
   13260:	d043      	beq.n	132ea <smp_process_request_packet+0x20e>
			return mgmt_err_from_cbor(rc);
   13262:	f7ff ff11 	bl	13088 <mgmt_err_from_cbor>
		handler_found = false;
   13266:	2700      	movs	r7, #0
			return mgmt_err_from_cbor(rc);
   13268:	4604      	mov	r4, r0
	if (rc != 0) {
   1326a:	2c00      	cmp	r4, #0
   1326c:	d185      	bne.n	1317a <smp_process_request_packet+0x9e>
		.nh_op = smp_rsp_op(req_hdr->nh_op),
   1326e:	f89d 2004 	ldrb.w	r2, [sp, #4]
   13272:	9b09      	ldr	r3, [sp, #36]	; 0x24
		.nh_group = req_hdr->nh_group,
   13274:	f8bd 1008 	ldrh.w	r1, [sp, #8]
			 cbor_encode_bytes_written(&cbuf.encoder) - MGMT_HDR_SIZE);
   13278:	685b      	ldr	r3, [r3, #4]
	*rsp_hdr = (struct mgmt_hdr) {
   1327a:	f8ad 9014 	strh.w	r9, [sp, #20]
		return MGMT_OP_WRITE_RSP;
   1327e:	f012 0f07 	tst.w	r2, #7
   13282:	bf0c      	ite	eq
   13284:	2001      	moveq	r0, #1
   13286:	2003      	movne	r0, #3
		.nh_seq = req_hdr->nh_seq,
   13288:	f8bd 200a 	ldrh.w	r2, [sp, #10]
	*rsp_hdr = (struct mgmt_hdr) {
   1328c:	f88d 0014 	strb.w	r0, [sp, #20]
			 cbor_encode_bytes_written(&cbuf.encoder) - MGMT_HDR_SIZE);
   13290:	3b08      	subs	r3, #8
	mgmt_hton_hdr(rsp_hdr);
   13292:	a805      	add	r0, sp, #20
	*rsp_hdr = (struct mgmt_hdr) {
   13294:	f8ad 3016 	strh.w	r3, [sp, #22]
   13298:	f8ad 201a 	strh.w	r2, [sp, #26]
   1329c:	f8ad 1018 	strh.w	r1, [sp, #24]
	mgmt_hton_hdr(rsp_hdr);
   132a0:	f7ff ff1a 	bl	130d8 <mgmt_hton_hdr>
	return mgmt_streamer_write_hdr(&streamer->mgmt_stmr, src_hdr);
   132a4:	a905      	add	r1, sp, #20
   132a6:	4628      	mov	r0, r5
   132a8:	f7ff fedc 	bl	13064 <mgmt_streamer_write_hdr>
		rc = streamer->tx_rsp_cb(streamer, rsp, streamer->mgmt_stmr.cb_arg);
   132ac:	692b      	ldr	r3, [r5, #16]
   132ae:	686a      	ldr	r2, [r5, #4]
   132b0:	4641      	mov	r1, r8
   132b2:	4628      	mov	r0, r5
   132b4:	4798      	blx	r3
		if (rc != 0) {
   132b6:	4604      	mov	r4, r0
   132b8:	bb98      	cbnz	r0, 13322 <smp_process_request_packet+0x246>
		mgmt_streamer_trim_front(&streamer->mgmt_stmr, req, req_hdr.nh_len);
   132ba:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   132be:	4631      	mov	r1, r6
   132c0:	4628      	mov	r0, r5
   132c2:	f7ff fec5 	bl	13050 <mgmt_streamer_trim_front>
		streamer->mgmt_stmr.reader->message_size -= req_hdr.nh_len;
   132c6:	68aa      	ldr	r2, [r5, #8]
   132c8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   132cc:	6993      	ldr	r3, [r2, #24]
		cmd_done_arg.err = MGMT_ERR_EOK;
   132ce:	9400      	str	r4, [sp, #0]
		streamer->mgmt_stmr.reader->message_size -= req_hdr.nh_len;
   132d0:	1a5b      	subs	r3, r3, r1
   132d2:	6193      	str	r3, [r2, #24]
		mgmt_evt(MGMT_EVT_OP_CMD_DONE, req_hdr.nh_group, req_hdr.nh_id,
   132d4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   132d8:	f89d 200b 	ldrb.w	r2, [sp, #11]
   132dc:	466b      	mov	r3, sp
   132de:	2003      	movs	r0, #3
   132e0:	f7fb faae 	bl	e840 <mgmt_evt>
   132e4:	e703      	b.n	130ee <smp_process_request_packet+0x12>
		handler_fn = handler->mh_write;
   132e6:	6844      	ldr	r4, [r0, #4]
		break;
   132e8:	e7b0      	b.n	1324c <smp_process_request_packet+0x170>
		mgmt_evt(MGMT_EVT_OP_CMD_RECV, req_hdr->nh_group, req_hdr->nh_id, NULL);
   132ea:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   132ee:	f89d 200b 	ldrb.w	r2, [sp, #11]
   132f2:	2001      	movs	r0, #1
   132f4:	f7fb faa4 	bl	e840 <mgmt_evt>
		rc = handler_fn(cbuf);
   132f8:	a809      	add	r0, sp, #36	; 0x24
   132fa:	47a0      	blx	r4
		rcc = cbor_encoder_close_container(&cbuf->encoder, &payload_encoder);
   132fc:	a905      	add	r1, sp, #20
		rc = handler_fn(cbuf);
   132fe:	4604      	mov	r4, r0
		rcc = cbor_encoder_close_container(&cbuf->encoder, &payload_encoder);
   13300:	a809      	add	r0, sp, #36	; 0x24
   13302:	f001 f804 	bl	1430e <cbor_encoder_close_container>
		if (rc == 0) {
   13306:	b944      	cbnz	r4, 1331a <smp_process_request_packet+0x23e>
			rc = mgmt_err_from_cbor(rcc);
   13308:	f7ff febe 	bl	13088 <mgmt_err_from_cbor>
		*handler_found = true;
   1330c:	2701      	movs	r7, #1
			rc = mgmt_err_from_cbor(rcc);
   1330e:	4604      	mov	r4, r0
   13310:	e7ab      	b.n	1326a <smp_process_request_packet+0x18e>
			rc = MGMT_ERR_ECORRUPT;
   13312:	2409      	movs	r4, #9
   13314:	e6ee      	b.n	130f4 <smp_process_request_packet+0x18>
		handler_found = false;
   13316:	2700      	movs	r7, #0
   13318:	e72f      	b.n	1317a <smp_process_request_packet+0x9e>
		*handler_found = true;
   1331a:	2701      	movs	r7, #1
   1331c:	e72d      	b.n	1317a <smp_process_request_packet+0x9e>
		handler_found = false;
   1331e:	2700      	movs	r7, #0
			rc = MGMT_ERR_ECORRUPT;
   13320:	2409      	movs	r4, #9
		req = NULL;
   13322:	f04f 0900 	mov.w	r9, #0
   13326:	e72a      	b.n	1317e <smp_process_request_packet+0xa2>
		handler_found = false;
   13328:	4607      	mov	r7, r0
			rc = MGMT_ERR_ENOMEM;
   1332a:	2402      	movs	r4, #2
   1332c:	e7f9      	b.n	13322 <smp_process_request_packet+0x246>

0001332e <ull_to_s>:
#include <stdbool.h>
#include "util/mcumgr_util.h"

int
ull_to_s(unsigned long long val, int dst_max_len, char *dst)
{
   1332e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13332:	4605      	mov	r5, r0
   13334:	460e      	mov	r6, r1
	int off;
	int len;

	/* First, calculate the length of the resulting string. */
	copy = val;
	for (len = 0; copy != 0; len++) {
   13336:	2400      	movs	r4, #0
	copy = val;
   13338:	4601      	mov	r1, r0
		copy /= 10;
   1333a:	200a      	movs	r0, #10
	for (len = 0; copy != 0; len++) {
   1333c:	bb11      	cbnz	r1, 13384 <ull_to_s+0x56>
	}

	/* A value of 0 still requires one character ("0"). */
	if (len == 0) {
		len = 1;
   1333e:	2c00      	cmp	r4, #0
   13340:	bf08      	it	eq
   13342:	2401      	moveq	r4, #1
	}

	/* Ensure the buffer can accommodate the string and terminator. */
	if (len >= dst_max_len - 1) {
   13344:	3a01      	subs	r2, #1
   13346:	42a2      	cmp	r2, r4
   13348:	dd20      	ble.n	1338c <ull_to_s+0x5e>
		return -1;
	}

	/* Encode the string from right to left. */
	off = len;
	dst[off--] = '\0';
   1334a:	5519      	strb	r1, [r3, r4]
   1334c:	191f      	adds	r7, r3, r4
	do {
		digit = val % 10;
   1334e:	4628      	mov	r0, r5
   13350:	4631      	mov	r1, r6
   13352:	220a      	movs	r2, #10
   13354:	2300      	movs	r3, #0
   13356:	f7f8 ffd3 	bl	c300 <__aeabi_uldivmod>
		dst[off--] = '0' + digit;
   1335a:	3230      	adds	r2, #48	; 0x30
   1335c:	f807 2d01 	strb.w	r2, [r7, #-1]!

		val /= 10;
   13360:	2300      	movs	r3, #0
   13362:	4628      	mov	r0, r5
   13364:	4631      	mov	r1, r6
   13366:	220a      	movs	r2, #10
   13368:	f7f8 ffca 	bl	c300 <__aeabi_uldivmod>
   1336c:	46a9      	mov	r9, r5
   1336e:	46b0      	mov	r8, r6
	} while (val > 0);
   13370:	f1b9 0f0a 	cmp.w	r9, #10
   13374:	f178 0300 	sbcs.w	r3, r8, #0
		val /= 10;
   13378:	4605      	mov	r5, r0
   1337a:	460e      	mov	r6, r1
	} while (val > 0);
   1337c:	d2e7      	bcs.n	1334e <ull_to_s+0x20>

	return len;
}
   1337e:	4620      	mov	r0, r4
   13380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (len = 0; copy != 0; len++) {
   13384:	3401      	adds	r4, #1
		copy /= 10;
   13386:	fbb1 f1f0 	udiv	r1, r1, r0
	for (len = 0; copy != 0; len++) {
   1338a:	e7d7      	b.n	1333c <ull_to_s+0xe>
		return -1;
   1338c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   13390:	e7f5      	b.n	1337e <ull_to_s+0x50>

00013392 <mcumgr_serial_free_rx_ctxt>:
{
   13392:	b510      	push	{r4, lr}
   13394:	4604      	mov	r4, r0
	if (rx_ctxt->nb != NULL) {
   13396:	6800      	ldr	r0, [r0, #0]
   13398:	b118      	cbz	r0, 133a2 <mcumgr_serial_free_rx_ctxt+0x10>
		mcumgr_buf_free(rx_ctxt->nb);
   1339a:	f7ff f9fa 	bl	12792 <mcumgr_buf_free>
		rx_ctxt->nb = NULL;
   1339e:	2300      	movs	r3, #0
   133a0:	6023      	str	r3, [r4, #0]
}
   133a2:	bd10      	pop	{r4, pc}

000133a4 <mcumgr_serial_tx_small>:
{
   133a4:	b530      	push	{r4, r5, lr}
   133a6:	b087      	sub	sp, #28
   133a8:	4614      	mov	r4, r2
   133aa:	461d      	mov	r5, r3
	rc = base64_encode(b64, sizeof(b64), &dst_len, data, len);
   133ac:	9100      	str	r1, [sp, #0]
   133ae:	4603      	mov	r3, r0
   133b0:	aa03      	add	r2, sp, #12
   133b2:	2105      	movs	r1, #5
   133b4:	a804      	add	r0, sp, #16
   133b6:	f7f9 f939 	bl	c62c <base64_encode>
	return cb(b64, 4, arg);
   133ba:	462a      	mov	r2, r5
   133bc:	2104      	movs	r1, #4
   133be:	a804      	add	r0, sp, #16
   133c0:	47a0      	blx	r4
}
   133c2:	b007      	add	sp, #28
   133c4:	bd30      	pop	{r4, r5, pc}

000133c6 <mcumgr_serial_process_frag>:
{
   133c6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (rx_ctxt->nb == NULL) {
   133ca:	6803      	ldr	r3, [r0, #0]
{
   133cc:	4604      	mov	r4, r0
   133ce:	460f      	mov	r7, r1
   133d0:	4615      	mov	r5, r2
	if (rx_ctxt->nb == NULL) {
   133d2:	b11b      	cbz	r3, 133dc <mcumgr_serial_process_frag+0x16>
	if (frag_len < sizeof(op)) {
   133d4:	2d01      	cmp	r5, #1
   133d6:	d807      	bhi.n	133e8 <mcumgr_serial_process_frag+0x22>
	switch (op) {
   133d8:	2000      	movs	r0, #0
   133da:	e044      	b.n	13466 <mcumgr_serial_process_frag+0xa0>
		rx_ctxt->nb = mcumgr_buf_alloc();
   133dc:	f7fa fcc0 	bl	dd60 <mcumgr_buf_alloc>
   133e0:	6020      	str	r0, [r4, #0]
		if (rx_ctxt->nb == NULL) {
   133e2:	2800      	cmp	r0, #0
   133e4:	d1f6      	bne.n	133d4 <mcumgr_serial_process_frag+0xe>
   133e6:	e7f7      	b.n	133d8 <mcumgr_serial_process_frag+0x12>
	op = sys_be16_to_cpu(*(uint16_t *)frag);
   133e8:	883e      	ldrh	r6, [r7, #0]
	switch (op) {
   133ea:	f240 4314 	movw	r3, #1044	; 0x414
   133ee:	baf6      	revsh	r6, r6
   133f0:	429e      	cmp	r6, r3
   133f2:	d03b      	beq.n	1346c <mcumgr_serial_process_frag+0xa6>
   133f4:	f240 6309 	movw	r3, #1545	; 0x609
   133f8:	429e      	cmp	r6, r3
   133fa:	d1ed      	bne.n	133d8 <mcumgr_serial_process_frag+0x12>
		net_buf_reset(rx_ctxt->nb);
   133fc:	6820      	ldr	r0, [r4, #0]
   133fe:	f000 f889 	bl	13514 <net_buf_reset>
	rc = base64_decode(rx_ctxt->nb->data + rx_ctxt->nb->len,
   13402:	6820      	ldr	r0, [r4, #0]
   13404:	f8b0 800c 	ldrh.w	r8, [r0, #12]
   13408:	f850 3f08 	ldr.w	r3, [r0, #8]!
   1340c:	4498      	add	r8, r3
	return net_buf_simple_tailroom(&buf->b);
   1340e:	f000 f8cd 	bl	135ac <net_buf_simple_tailroom>
				       frag_len - sizeof(op));
   13412:	3d02      	subs	r5, #2
   13414:	4601      	mov	r1, r0
	rc = base64_decode(rx_ctxt->nb->data + rx_ctxt->nb->len,
   13416:	9500      	str	r5, [sp, #0]
   13418:	1cbb      	adds	r3, r7, #2
   1341a:	aa03      	add	r2, sp, #12
   1341c:	4640      	mov	r0, r8
   1341e:	f7f9 f987 	bl	c730 <base64_decode>
	if (rc != 0) {
   13422:	bb38      	cbnz	r0, 13474 <mcumgr_serial_process_frag+0xae>
	rx_ctxt->nb->len += dec_len;
   13424:	6820      	ldr	r0, [r4, #0]
   13426:	9b03      	ldr	r3, [sp, #12]
   13428:	8982      	ldrh	r2, [r0, #12]
   1342a:	4413      	add	r3, r2
	if (op == MCUMGR_SERIAL_HDR_PKT) {
   1342c:	f240 6209 	movw	r2, #1545	; 0x609
	rx_ctxt->nb->len += dec_len;
   13430:	b29b      	uxth	r3, r3
	if (op == MCUMGR_SERIAL_HDR_PKT) {
   13432:	4296      	cmp	r6, r2
	rx_ctxt->nb->len += dec_len;
   13434:	8183      	strh	r3, [r0, #12]
	if (op == MCUMGR_SERIAL_HDR_PKT) {
   13436:	d105      	bne.n	13444 <mcumgr_serial_process_frag+0x7e>
	if (rx_ctxt->nb->len < 2) {
   13438:	2b01      	cmp	r3, #1
   1343a:	d91b      	bls.n	13474 <mcumgr_serial_process_frag+0xae>
	return net_buf_simple_pull_be16(&buf->b);
   1343c:	3008      	adds	r0, #8
   1343e:	f000 f8ab 	bl	13598 <net_buf_simple_pull_be16>
	rx_ctxt->pkt_len = net_buf_pull_be16(rx_ctxt->nb);
   13442:	80a0      	strh	r0, [r4, #4]
	if (rx_ctxt->nb->len < rx_ctxt->pkt_len) {
   13444:	6823      	ldr	r3, [r4, #0]
   13446:	88a1      	ldrh	r1, [r4, #4]
   13448:	899a      	ldrh	r2, [r3, #12]
   1344a:	428a      	cmp	r2, r1
   1344c:	d3c4      	bcc.n	133d8 <mcumgr_serial_process_frag+0x12>
	if (rx_ctxt->nb->len > rx_ctxt->pkt_len) {
   1344e:	d811      	bhi.n	13474 <mcumgr_serial_process_frag+0xae>
	return crc16_itu_t(0x0000, data, len);
   13450:	6899      	ldr	r1, [r3, #8]
   13452:	2000      	movs	r0, #0
   13454:	f7fe fc5b 	bl	11d0e <crc16_itu_t>
	if (crc != 0U) {
   13458:	4603      	mov	r3, r0
   1345a:	b958      	cbnz	r0, 13474 <mcumgr_serial_process_frag+0xae>
	rx_ctxt->nb->len -= 2U;
   1345c:	6820      	ldr	r0, [r4, #0]
   1345e:	8982      	ldrh	r2, [r0, #12]
   13460:	3a02      	subs	r2, #2
   13462:	8182      	strh	r2, [r0, #12]
	rx_ctxt->nb = NULL;
   13464:	6023      	str	r3, [r4, #0]
}
   13466:	b004      	add	sp, #16
   13468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (rx_ctxt->nb->len == 0U) {
   1346c:	6823      	ldr	r3, [r4, #0]
   1346e:	899b      	ldrh	r3, [r3, #12]
   13470:	2b00      	cmp	r3, #0
   13472:	d1c6      	bne.n	13402 <mcumgr_serial_process_frag+0x3c>
		mcumgr_serial_free_rx_ctxt(rx_ctxt);
   13474:	4620      	mov	r0, r4
   13476:	f7ff ff8c 	bl	13392 <mcumgr_serial_free_rx_ctxt>
		return NULL;
   1347a:	e7ad      	b.n	133d8 <mcumgr_serial_process_frag+0x12>

0001347c <mcumgr_serial_tx_pkt>:

int mcumgr_serial_tx_pkt(const uint8_t *data, int len, mcumgr_serial_tx_cb cb,
			 void *arg)
{
   1347c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13480:	4605      	mov	r5, r0
   13482:	b087      	sub	sp, #28
	uint16_t crc;
	int data_bytes_txed = 0;
   13484:	2000      	movs	r0, #0
{
   13486:	460c      	mov	r4, r1
   13488:	4617      	mov	r7, r2
	return crc16_itu_t(0x0000, data, len);
   1348a:	460a      	mov	r2, r1
   1348c:	4629      	mov	r1, r5
{
   1348e:	4698      	mov	r8, r3
	int data_bytes_txed = 0;
   13490:	9005      	str	r0, [sp, #20]
	return crc16_itu_t(0x0000, data, len);
   13492:	f7fe fc3c 	bl	11d0e <crc16_itu_t>
	/* Calculate CRC of entire packet. */
	crc = mcumgr_serial_calc_crc(data, len);

	/* Transmit packet as a sequence of frames. */
	while (len) {
		rc = mcumgr_serial_tx_frame(data, data_bytes_txed == 0, len, crc, cb, arg,
   13496:	f10d 0914 	add.w	r9, sp, #20
	return crc16_itu_t(0x0000, data, len);
   1349a:	4606      	mov	r6, r0
	while (len) {
   1349c:	b91c      	cbnz	r4, 134a6 <mcumgr_serial_tx_pkt+0x2a>

		data += data_bytes_txed;
		len -= data_bytes_txed;
	}

	return 0;
   1349e:	4620      	mov	r0, r4
}
   134a0:	b007      	add	sp, #28
   134a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		rc = mcumgr_serial_tx_frame(data, data_bytes_txed == 0, len, crc, cb, arg,
   134a6:	9905      	ldr	r1, [sp, #20]
   134a8:	9700      	str	r7, [sp, #0]
   134aa:	fab1 f181 	clz	r1, r1
   134ae:	e9cd 8901 	strd	r8, r9, [sp, #4]
   134b2:	4633      	mov	r3, r6
   134b4:	4622      	mov	r2, r4
   134b6:	0949      	lsrs	r1, r1, #5
   134b8:	4628      	mov	r0, r5
   134ba:	f7fb f9cd 	bl	e858 <mcumgr_serial_tx_frame>
		if (rc != 0) {
   134be:	2800      	cmp	r0, #0
   134c0:	d1ee      	bne.n	134a0 <mcumgr_serial_tx_pkt+0x24>
		data += data_bytes_txed;
   134c2:	9b05      	ldr	r3, [sp, #20]
   134c4:	441d      	add	r5, r3
		len -= data_bytes_txed;
   134c6:	1ae4      	subs	r4, r4, r3
   134c8:	e7e8      	b.n	1349c <mcumgr_serial_tx_pkt+0x20>

000134ca <mcuboot_swap_type_multi>:
	return 0;
}

int mcuboot_swap_type_multi(int image_index)
{
	return boot_swap_type_multi(image_index);
   134ca:	f7fd b9fb 	b.w	108c4 <boot_swap_type_multi>

000134ce <boot_request_upgrade_multi>:
#endif /* FLASH_AREA_IMAGE_SECONDARY */
	return 0;
}

int boot_request_upgrade_multi(int image_index, int permanent)
{
   134ce:	b508      	push	{r3, lr}
	int rc;

	rc = boot_set_pending_multi(image_index, permanent);
   134d0:	f000 fd9b 	bl	1400a <boot_set_pending_multi>
	if (rc) {
		return -EFAULT;
   134d4:	2800      	cmp	r0, #0
	}
	return 0;
}
   134d6:	bf18      	it	ne
   134d8:	f06f 000d 	mvnne.w	r0, #13
   134dc:	bd08      	pop	{r3, pc}

000134de <boot_write_img_confirmed>:

	return flag_val == BOOT_FLAG_SET;
}

int boot_write_img_confirmed(void)
{
   134de:	b508      	push	{r3, lr}
	int rc;

	rc = boot_set_confirmed();
   134e0:	f000 fdf3 	bl	140ca <boot_set_confirmed>
	if (rc) {
		return -EIO;
   134e4:	2800      	cmp	r0, #0
	}

	return 0;
}
   134e6:	bf18      	it	ne
   134e8:	f06f 0004 	mvnne.w	r0, #4
   134ec:	bd08      	pop	{r3, pc}

000134ee <boot_erase_img_bank>:

	return 0;
}

int boot_erase_img_bank(uint8_t area_id)
{
   134ee:	b513      	push	{r0, r1, r4, lr}
	const struct flash_area *fa;
	int rc;

	rc = flash_area_open(area_id, &fa);
   134f0:	a901      	add	r1, sp, #4
   134f2:	f7f9 fe89 	bl	d208 <flash_area_open>
	if (rc) {
   134f6:	4604      	mov	r4, r0
   134f8:	b940      	cbnz	r0, 1350c <boot_erase_img_bank+0x1e>
		return rc;
	}

	rc = flash_area_erase(fa, 0, fa->fa_size);
   134fa:	9801      	ldr	r0, [sp, #4]
   134fc:	4621      	mov	r1, r4
   134fe:	6882      	ldr	r2, [r0, #8]
   13500:	f7fe ff8a 	bl	12418 <flash_area_erase>
   13504:	4604      	mov	r4, r0

	flash_area_close(fa);
   13506:	9801      	ldr	r0, [sp, #4]
   13508:	f7fe ff4d 	bl	123a6 <flash_area_close>

	return rc;
}
   1350c:	4620      	mov	r0, r4
   1350e:	b002      	add	sp, #8
   13510:	bd10      	pop	{r4, pc}

00013512 <fixed_data_unref>:
}
   13512:	4770      	bx	lr

00013514 <net_buf_reset>:
	buf->len  = 0U;
   13514:	2300      	movs	r3, #0
   13516:	8183      	strh	r3, [r0, #12]
	buf->data = buf->__buf;
   13518:	6903      	ldr	r3, [r0, #16]
   1351a:	6083      	str	r3, [r0, #8]
}
   1351c:	4770      	bx	lr

0001351e <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1351e:	69c1      	ldr	r1, [r0, #28]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   13520:	6849      	ldr	r1, [r1, #4]
   13522:	6809      	ldr	r1, [r1, #0]
   13524:	f7fb ba6a 	b.w	e9fc <net_buf_alloc_len>

00013528 <net_buf_get>:
{
   13528:	b570      	push	{r4, r5, r6, lr}
   1352a:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   1352c:	f7fd fce0 	bl	10ef0 <z_impl_k_queue_get>
	if (!buf) {
   13530:	4605      	mov	r5, r0
   13532:	b128      	cbz	r0, 13540 <net_buf_get+0x18>
   13534:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   13536:	7963      	ldrb	r3, [r4, #5]
   13538:	f013 0301 	ands.w	r3, r3, #1
   1353c:	d102      	bne.n	13544 <net_buf_get+0x1c>
	frag->frags = NULL;
   1353e:	6023      	str	r3, [r4, #0]
}
   13540:	4628      	mov	r0, r5
   13542:	bd70      	pop	{r4, r5, r6, pc}
   13544:	2300      	movs	r3, #0
   13546:	2200      	movs	r2, #0
   13548:	4630      	mov	r0, r6
   1354a:	f7fd fcd1 	bl	10ef0 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1354e:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   13550:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   13552:	f023 0301 	bic.w	r3, r3, #1
   13556:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   13558:	4604      	mov	r4, r0
   1355a:	e7ec      	b.n	13536 <net_buf_get+0xe>

0001355c <net_buf_put>:
{
   1355c:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1355e:	460a      	mov	r2, r1
   13560:	6814      	ldr	r4, [r2, #0]
   13562:	b914      	cbnz	r4, 1356a <net_buf_put+0xe>
}
   13564:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   13566:	f001 bab0 	b.w	14aca <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1356a:	7953      	ldrb	r3, [r2, #5]
   1356c:	f043 0301 	orr.w	r3, r3, #1
   13570:	7153      	strb	r3, [r2, #5]
   13572:	4622      	mov	r2, r4
   13574:	e7f4      	b.n	13560 <net_buf_put+0x4>

00013576 <net_buf_simple_add_mem>:
	return tail;
}

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   13576:	b430      	push	{r4, r5}
	return buf->data + buf->len;
   13578:	8884      	ldrh	r4, [r0, #4]
   1357a:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1357c:	18a3      	adds	r3, r4, r2
   1357e:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   13580:	1928      	adds	r0, r5, r4
}
   13582:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   13584:	f7ff b85b 	b.w	1263e <memcpy>

00013588 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   13588:	8882      	ldrh	r2, [r0, #4]
   1358a:	1a52      	subs	r2, r2, r1
{
   1358c:	4603      	mov	r3, r0
	buf->len -= len;
   1358e:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   13590:	6800      	ldr	r0, [r0, #0]
   13592:	4408      	add	r0, r1
   13594:	6018      	str	r0, [r3, #0]
}
   13596:	4770      	bx	lr

00013598 <net_buf_simple_pull_be16>:

uint16_t net_buf_simple_pull_be16(struct net_buf_simple *buf)
{
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   13598:	6803      	ldr	r3, [r0, #0]
{
   1359a:	b510      	push	{r4, lr}
   1359c:	881c      	ldrh	r4, [r3, #0]
   1359e:	ba64      	rev16	r4, r4
   135a0:	b2a4      	uxth	r4, r4
	net_buf_simple_pull(buf, sizeof(val));
   135a2:	2102      	movs	r1, #2
   135a4:	f7ff fff0 	bl	13588 <net_buf_simple_pull>

	return sys_be16_to_cpu(val);
}
   135a8:	4620      	mov	r0, r4
   135aa:	bd10      	pop	{r4, pc}

000135ac <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
}

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   135ac:	8883      	ldrh	r3, [r0, #4]
   135ae:	88c2      	ldrh	r2, [r0, #6]
   135b0:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   135b2:	6803      	ldr	r3, [r0, #0]
   135b4:	6880      	ldr	r0, [r0, #8]
   135b6:	1a18      	subs	r0, r3, r0
}
   135b8:	1a10      	subs	r0, r2, r0
   135ba:	4770      	bx	lr

000135bc <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   135bc:	6903      	ldr	r3, [r0, #16]
   135be:	b2c9      	uxtb	r1, r1
   135c0:	220c      	movs	r2, #12
   135c2:	fb01 3302 	mla	r3, r1, r2, r3
   135c6:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   135c8:	f000 0007 	and.w	r0, r0, #7
   135cc:	4770      	bx	lr

000135ce <set_on_state>:
	__asm__ volatile(
   135ce:	f04f 0320 	mov.w	r3, #32
   135d2:	f3ef 8211 	mrs	r2, BASEPRI
   135d6:	f383 8812 	msr	BASEPRI_MAX, r3
   135da:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   135de:	6803      	ldr	r3, [r0, #0]
   135e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   135e4:	f043 0302 	orr.w	r3, r3, #2
   135e8:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   135ea:	f382 8811 	msr	BASEPRI, r2
   135ee:	f3bf 8f6f 	isb	sy
}
   135f2:	4770      	bx	lr

000135f4 <stop>:
{
   135f4:	4603      	mov	r3, r0
   135f6:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   135f8:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   135fa:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   135fc:	f04f 0420 	mov.w	r4, #32
   13600:	f3ef 8611 	mrs	r6, BASEPRI
   13604:	f384 8812 	msr	BASEPRI_MAX, r4
   13608:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1360c:	250c      	movs	r5, #12
   1360e:	fb05 0401 	mla	r4, r5, r1, r0
   13612:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   13614:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   13618:	d001      	beq.n	1361e <stop+0x2a>
   1361a:	42a2      	cmp	r2, r4
   1361c:	d110      	bne.n	13640 <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1361e:	fb05 0001 	mla	r0, r5, r1, r0
   13622:	2201      	movs	r2, #1
   13624:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   13626:	2000      	movs	r0, #0
	__asm__ volatile(
   13628:	f386 8811 	msr	BASEPRI, r6
   1362c:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   13630:	b928      	cbnz	r0, 1363e <stop+0x4a>
	get_sub_config(dev, type)->stop();
   13632:	685b      	ldr	r3, [r3, #4]
   13634:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   13638:	684b      	ldr	r3, [r1, #4]
   1363a:	4798      	blx	r3
	return 0;
   1363c:	2000      	movs	r0, #0
}
   1363e:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   13640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13644:	e7f0      	b.n	13628 <stop+0x34>

00013646 <api_stop>:
	return stop(dev, subsys, CTX_API);
   13646:	2280      	movs	r2, #128	; 0x80
   13648:	f7ff bfd4 	b.w	135f4 <stop>

0001364c <async_start>:
{
   1364c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1364e:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   13650:	6904      	ldr	r4, [r0, #16]
{
   13652:	4605      	mov	r5, r0
   13654:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   13656:	f04f 0020 	mov.w	r0, #32
   1365a:	f3ef 8c11 	mrs	ip, BASEPRI
   1365e:	f380 8812 	msr	BASEPRI_MAX, r0
   13662:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   13666:	260c      	movs	r6, #12
   13668:	fb06 4601 	mla	r6, r6, r1, r4
   1366c:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1366e:	f000 0e07 	and.w	lr, r0, #7
   13672:	f1be 0f01 	cmp.w	lr, #1
   13676:	d111      	bne.n	1369c <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   13678:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   1367a:	2600      	movs	r6, #0
	__asm__ volatile(
   1367c:	f38c 8811 	msr	BASEPRI, ip
   13680:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   13684:	b946      	cbnz	r6, 13698 <async_start+0x4c>
	subdata->cb = cb;
   13686:	200c      	movs	r0, #12
   13688:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
   1368c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   13690:	686b      	ldr	r3, [r5, #4]
   13692:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   13696:	4798      	blx	r3
}
   13698:	4630      	mov	r0, r6
   1369a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1369c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   136a0:	4287      	cmp	r7, r0
   136a2:	bf14      	ite	ne
   136a4:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
   136a8:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   136ac:	e7e6      	b.n	1367c <async_start+0x30>

000136ae <api_start>:
{
   136ae:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   136b0:	2480      	movs	r4, #128	; 0x80
   136b2:	9400      	str	r4, [sp, #0]
   136b4:	f7ff ffca 	bl	1364c <async_start>
}
   136b8:	b002      	add	sp, #8
   136ba:	bd10      	pop	{r4, pc}

000136bc <onoff_started_callback>:
	return &data->mgr[type];
   136bc:	6900      	ldr	r0, [r0, #16]
{
   136be:	b410      	push	{r4}
	return &data->mgr[type];
   136c0:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   136c2:	241c      	movs	r4, #28
   136c4:	fb03 0004 	mla	r0, r3, r4, r0
   136c8:	2100      	movs	r1, #0
}
   136ca:	bc10      	pop	{r4}
	notify(mgr, 0);
   136cc:	4710      	bx	r2

000136ce <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   136ce:	2000      	movs	r0, #0
   136d0:	f000 bb5b 	b.w	13d8a <nrfx_clock_start>

000136d4 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   136d4:	2000      	movs	r0, #0
   136d6:	f7fc bc71 	b.w	ffbc <nrfx_clock_stop>

000136da <blocking_start_callback>:
{
   136da:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   136dc:	f7fd bc3c 	b.w	10f58 <z_impl_k_sem_give>

000136e0 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   136e0:	6843      	ldr	r3, [r0, #4]
   136e2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   136e4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   136e8:	600b      	str	r3, [r1, #0]
}
   136ea:	2000      	movs	r0, #0
   136ec:	4770      	bx	lr

000136ee <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   136ee:	6843      	ldr	r3, [r0, #4]
   136f0:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   136f2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   136f6:	4042      	eors	r2, r0
   136f8:	400a      	ands	r2, r1
   136fa:	4042      	eors	r2, r0
    p_reg->OUT = value;
   136fc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   13700:	2000      	movs	r0, #0
   13702:	4770      	bx	lr

00013704 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   13704:	6843      	ldr	r3, [r0, #4]
   13706:	685b      	ldr	r3, [r3, #4]
}
   13708:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1370a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1370e:	4770      	bx	lr

00013710 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   13710:	6843      	ldr	r3, [r0, #4]
   13712:	685b      	ldr	r3, [r3, #4]
}
   13714:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   13716:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1371a:	4770      	bx	lr

0001371c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1371c:	6843      	ldr	r3, [r0, #4]
   1371e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   13720:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   13724:	404b      	eors	r3, r1
    p_reg->OUT = value;
   13726:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1372a:	2000      	movs	r0, #0
   1372c:	4770      	bx	lr

0001372e <gpio_nrfx_manage_callback>:
	return port->data;
   1372e:	6903      	ldr	r3, [r0, #16]
	return list->head;
   13730:	6858      	ldr	r0, [r3, #4]
{
   13732:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   13734:	b158      	cbz	r0, 1374e <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   13736:	2400      	movs	r4, #0
   13738:	4281      	cmp	r1, r0
   1373a:	d112      	bne.n	13762 <gpio_nrfx_manage_callback+0x34>
	return node->next;
   1373c:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   1373e:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   13740:	b954      	cbnz	r4, 13758 <gpio_nrfx_manage_callback+0x2a>
   13742:	428d      	cmp	r5, r1
	list->head = node;
   13744:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   13746:	d100      	bne.n	1374a <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   13748:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1374a:	2000      	movs	r0, #0
   1374c:	6008      	str	r0, [r1, #0]
	if (set) {
   1374e:	b96a      	cbnz	r2, 1376c <gpio_nrfx_manage_callback+0x3e>
	return 0;
   13750:	2000      	movs	r0, #0
}
   13752:	bd30      	pop	{r4, r5, pc}
   13754:	4628      	mov	r0, r5
   13756:	e7ef      	b.n	13738 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   13758:	428d      	cmp	r5, r1
	parent->next = child;
   1375a:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1375c:	bf08      	it	eq
   1375e:	609c      	streq	r4, [r3, #8]
}
   13760:	e7f3      	b.n	1374a <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   13762:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   13764:	4604      	mov	r4, r0
   13766:	2d00      	cmp	r5, #0
   13768:	d1f4      	bne.n	13754 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1376a:	b13a      	cbz	r2, 1377c <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   1376c:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   1376e:	685a      	ldr	r2, [r3, #4]
   13770:	600a      	str	r2, [r1, #0]
	list->head = node;
   13772:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   13774:	2800      	cmp	r0, #0
   13776:	d1eb      	bne.n	13750 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   13778:	6099      	str	r1, [r3, #8]
}
   1377a:	e7ea      	b.n	13752 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1377c:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   13780:	e7e7      	b.n	13752 <gpio_nrfx_manage_callback+0x24>

00013782 <is_regular_addr_valid>:
{
   13782:	b538      	push	{r3, r4, r5, lr}
   13784:	4605      	mov	r5, r0
   13786:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   13788:	f000 fb81 	bl	13e8e <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   1378c:	2d00      	cmp	r5, #0
   1378e:	db07      	blt.n	137a0 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   13790:	42a8      	cmp	r0, r5
   13792:	d905      	bls.n	137a0 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   13794:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   13796:	4284      	cmp	r4, r0
   13798:	bf8c      	ite	hi
   1379a:	2000      	movhi	r0, #0
   1379c:	2001      	movls	r0, #1
}
   1379e:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   137a0:	2000      	movs	r0, #0
   137a2:	e7fc      	b.n	1379e <is_regular_addr_valid+0x1c>

000137a4 <flash_nrf_read>:
{
   137a4:	b570      	push	{r4, r5, r6, lr}
   137a6:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   137a8:	4628      	mov	r0, r5
   137aa:	4619      	mov	r1, r3
{
   137ac:	4616      	mov	r6, r2
   137ae:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   137b0:	f7ff ffe7 	bl	13782 <is_regular_addr_valid>
   137b4:	b138      	cbz	r0, 137c6 <flash_nrf_read+0x22>
	if (!len) {
   137b6:	b14c      	cbz	r4, 137cc <flash_nrf_read+0x28>
	memcpy(data, (void *)addr, len);
   137b8:	4622      	mov	r2, r4
   137ba:	4629      	mov	r1, r5
   137bc:	4630      	mov	r0, r6
   137be:	f7fe ff3e 	bl	1263e <memcpy>
	return 0;
   137c2:	2000      	movs	r0, #0
}
   137c4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   137c6:	f06f 0015 	mvn.w	r0, #21
   137ca:	e7fb      	b.n	137c4 <flash_nrf_read+0x20>
		return 0;
   137cc:	4620      	mov	r0, r4
   137ce:	e7f9      	b.n	137c4 <flash_nrf_read+0x20>

000137d0 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   137d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   137d4:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   137d6:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   137d8:	f04f 0800 	mov.w	r8, #0
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
   137dc:	691b      	ldr	r3, [r3, #16]
	info->start_offset = 0;
   137de:	f8c4 8000 	str.w	r8, [r4]
{
   137e2:	460d      	mov	r5, r1
   137e4:	4616      	mov	r6, r2
	info->index = 0U;
   137e6:	f8c4 8008 	str.w	r8, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
   137ea:	aa01      	add	r2, sp, #4
   137ec:	4669      	mov	r1, sp
   137ee:	4798      	blx	r3

	while (layout_size--) {
   137f0:	e9dd 7c00 	ldrd	r7, ip, [sp]
   137f4:	4640      	mov	r0, r8
		info->size = layout->pages_size;
   137f6:	f107 0e04 	add.w	lr, r7, #4
	while (layout_size--) {
   137fa:	4560      	cmp	r0, ip
   137fc:	d104      	bne.n	13808 <flash_get_page_info+0x38>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   137fe:	f06f 0015 	mvn.w	r0, #21
}
   13802:	b003      	add	sp, #12
   13804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
   13808:	f85e 9030 	ldr.w	r9, [lr, r0, lsl #3]
			index_jmp = index - info->index;
   1380c:	68a1      	ldr	r1, [r4, #8]
			index_jmp = (offs - info->start_offset) / info->size;
   1380e:	6822      	ldr	r2, [r4, #0]
		info->size = layout->pages_size;
   13810:	f8c4 9004 	str.w	r9, [r4, #4]
		if (offs == 0) {
   13814:	b985      	cbnz	r5, 13838 <flash_get_page_info+0x68>
			index_jmp = index - info->index;
   13816:	1a73      	subs	r3, r6, r1
		index_jmp = MIN(index_jmp, layout->pages_count);
   13818:	f857 8030 	ldr.w	r8, [r7, r0, lsl #3]
   1381c:	4543      	cmp	r3, r8
   1381e:	bf28      	it	cs
   13820:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
   13822:	fb03 2209 	mla	r2, r3, r9, r2
		info->index += index_jmp;
   13826:	4419      	add	r1, r3
		if (index_jmp < layout->pages_count) {
   13828:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
   1382a:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
   1382c:	60a1      	str	r1, [r4, #8]
		if (index_jmp < layout->pages_count) {
   1382e:	f100 0001 	add.w	r0, r0, #1
   13832:	d9e2      	bls.n	137fa <flash_get_page_info+0x2a>
			return 0;
   13834:	2000      	movs	r0, #0
   13836:	e7e4      	b.n	13802 <flash_get_page_info+0x32>
			index_jmp = (offs - info->start_offset) / info->size;
   13838:	1aab      	subs	r3, r5, r2
   1383a:	fbb3 f3f9 	udiv	r3, r3, r9
   1383e:	e7eb      	b.n	13818 <flash_get_page_info+0x48>

00013840 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   13840:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   13842:	2200      	movs	r2, #0
   13844:	f7ff bfc4 	b.w	137d0 <flash_get_page_info>

00013848 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   13848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   1384c:	6883      	ldr	r3, [r0, #8]
{
   1384e:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   13850:	691b      	ldr	r3, [r3, #16]
{
   13852:	4688      	mov	r8, r1
   13854:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   13856:	a901      	add	r1, sp, #4
   13858:	aa02      	add	r2, sp, #8
   1385a:	4798      	blx	r3
	off_t off = 0;
   1385c:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   1385e:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   13860:	4625      	mov	r5, r4
   13862:	9b02      	ldr	r3, [sp, #8]
   13864:	42ab      	cmp	r3, r5
   13866:	d802      	bhi.n	1386e <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   13868:	b006      	add	sp, #24
   1386a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   1386e:	9f01      	ldr	r7, [sp, #4]
   13870:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   13874:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   13876:	687b      	ldr	r3, [r7, #4]
   13878:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   1387a:	683a      	ldr	r2, [r7, #0]
   1387c:	42b2      	cmp	r2, r6
   1387e:	eb0a 0306 	add.w	r3, sl, r6
   13882:	d802      	bhi.n	1388a <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   13884:	3501      	adds	r5, #1
   13886:	469a      	mov	sl, r3
   13888:	e7eb      	b.n	13862 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   1388a:	4649      	mov	r1, r9
   1388c:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   1388e:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   13890:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   13892:	47c0      	blx	r8
   13894:	2800      	cmp	r0, #0
   13896:	d0e7      	beq.n	13868 <flash_page_foreach+0x20>
			off += page_info.size;
   13898:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   1389a:	3601      	adds	r6, #1
			off += page_info.size;
   1389c:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   1389e:	e7ec      	b.n	1387a <flash_page_foreach+0x32>

000138a0 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
   138a0:	6902      	ldr	r2, [r0, #16]
{
   138a2:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   138a4:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   138a8:	e883 0003 	stmia.w	r3, {r0, r1}
}
   138ac:	2000      	movs	r0, #0
   138ae:	4770      	bx	lr

000138b0 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   138b0:	6843      	ldr	r3, [r0, #4]
   138b2:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   138b4:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   138b8:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   138bc:	4770      	bx	lr

000138be <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   138be:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   138c0:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   138c2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   138c4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   138c8:	b148      	cbz	r0, 138de <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   138ca:	7d52      	ldrb	r2, [r2, #21]
   138cc:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   138ce:	2000      	movs	r0, #0
   138d0:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   138d4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   138d8:	2201      	movs	r2, #1
   138da:	601a      	str	r2, [r3, #0]
	return 0;
   138dc:	4770      	bx	lr
		return -1;
   138de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   138e2:	4770      	bx	lr

000138e4 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   138e4:	2a00      	cmp	r2, #0
{
   138e6:	b510      	push	{r4, lr}
   138e8:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   138ea:	dd0f      	ble.n	1390c <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
   138ec:	6843      	ldr	r3, [r0, #4]
   138ee:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   138f0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   138f4:	b148      	cbz	r0, 1390a <uarte_nrfx_fifo_read+0x26>
	const struct uarte_nrfx_data *data = dev->data;
   138f6:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   138f8:	2000      	movs	r0, #0
   138fa:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   138fe:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   13902:	7d52      	ldrb	r2, [r2, #21]
   13904:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13906:	2001      	movs	r0, #1
   13908:	6018      	str	r0, [r3, #0]
}
   1390a:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   1390c:	2000      	movs	r0, #0
   1390e:	e7fc      	b.n	1390a <uarte_nrfx_fifo_read+0x26>

00013910 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   13910:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   13912:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   13914:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   13916:	f04f 0020 	mov.w	r0, #32
   1391a:	f3ef 8311 	mrs	r3, BASEPRI
   1391e:	f380 8812 	msr	BASEPRI_MAX, r0
   13922:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   13926:	68c9      	ldr	r1, [r1, #12]
   13928:	2000      	movs	r0, #0
   1392a:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   1392c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   13930:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   13934:	f383 8811 	msr	BASEPRI, r3
   13938:	f3bf 8f6f 	isb	sy
}
   1393c:	4770      	bx	lr

0001393e <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   1393e:	6903      	ldr	r3, [r0, #16]
   13940:	68db      	ldr	r3, [r3, #12]
   13942:	2201      	movs	r2, #1
   13944:	739a      	strb	r2, [r3, #14]
}
   13946:	4770      	bx	lr

00013948 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   13948:	6903      	ldr	r3, [r0, #16]
   1394a:	68db      	ldr	r3, [r3, #12]
   1394c:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1394e:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   13952:	b962      	cbnz	r2, 1396e <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   13954:	6842      	ldr	r2, [r0, #4]
   13956:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13958:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   1395c:	b140      	cbz	r0, 13970 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   1395e:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   13962:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   13966:	d003      	beq.n	13970 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   13968:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1396a:	2001      	movs	r0, #1
   1396c:	4770      	bx	lr
   1396e:	2000      	movs	r0, #0
}
   13970:	4770      	bx	lr

00013972 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   13972:	6843      	ldr	r3, [r0, #4]
   13974:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13976:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1397a:	3800      	subs	r0, #0
   1397c:	bf18      	it	ne
   1397e:	2001      	movne	r0, #1
   13980:	4770      	bx	lr

00013982 <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
   13982:	6843      	ldr	r3, [r0, #4]
   13984:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   13986:	2210      	movs	r2, #16
   13988:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1398c:	4770      	bx	lr

0001398e <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
   1398e:	6843      	ldr	r3, [r0, #4]
   13990:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   13992:	2210      	movs	r2, #16
   13994:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   13998:	4770      	bx	lr

0001399a <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
   1399a:	6843      	ldr	r3, [r0, #4]
   1399c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1399e:	f44f 7200 	mov.w	r2, #512	; 0x200
   139a2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   139a6:	4770      	bx	lr

000139a8 <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
   139a8:	6843      	ldr	r3, [r0, #4]
   139aa:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   139ac:	f44f 7200 	mov.w	r2, #512	; 0x200
   139b0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   139b4:	4770      	bx	lr

000139b6 <uarte_nrfx_irq_update>:
}
   139b6:	2001      	movs	r0, #1
   139b8:	4770      	bx	lr

000139ba <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   139ba:	6903      	ldr	r3, [r0, #16]
   139bc:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   139be:	e9c3 1200 	strd	r1, r2, [r3]
}
   139c2:	4770      	bx	lr

000139c4 <uarte_nrfx_irq_is_pending>:
{
   139c4:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   139c6:	6843      	ldr	r3, [r0, #4]
   139c8:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   139ca:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   139ce:	025b      	lsls	r3, r3, #9
{
   139d0:	4604      	mov	r4, r0
		||
   139d2:	d405      	bmi.n	139e0 <uarte_nrfx_irq_is_pending+0x1c>
   139d4:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   139d8:	f010 0010 	ands.w	r0, r0, #16
   139dc:	d106      	bne.n	139ec <uarte_nrfx_irq_is_pending+0x28>
}
   139de:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   139e0:	f7ff ffb2 	bl	13948 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   139e4:	2800      	cmp	r0, #0
   139e6:	d0f5      	beq.n	139d4 <uarte_nrfx_irq_is_pending+0x10>
		||
   139e8:	2001      	movs	r0, #1
   139ea:	e7f8      	b.n	139de <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   139ec:	4620      	mov	r0, r4
   139ee:	f7ff ffc0 	bl	13972 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   139f2:	3800      	subs	r0, #0
   139f4:	bf18      	it	ne
   139f6:	2001      	movne	r0, #1
   139f8:	e7f1      	b.n	139de <uarte_nrfx_irq_is_pending+0x1a>

000139fa <tx_start.isra.0>:
	return config->uarte_regs;
   139fa:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   139fc:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   13a00:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13a04:	2200      	movs	r2, #0
   13a06:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   13a0a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   13a0e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   13a12:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   13a16:	6842      	ldr	r2, [r0, #4]
   13a18:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   13a1a:	bf41      	itttt	mi
   13a1c:	2208      	movmi	r2, #8
   13a1e:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   13a22:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   13a26:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13a2a:	2201      	movs	r2, #1
   13a2c:	609a      	str	r2, [r3, #8]
}
   13a2e:	4770      	bx	lr

00013a30 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   13a30:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   13a32:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13a34:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   13a38:	b940      	cbnz	r0, 13a4c <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   13a3a:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   13a3c:	079b      	lsls	r3, r3, #30
   13a3e:	d406      	bmi.n	13a4e <is_tx_ready.isra.0+0x1e>
   13a40:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   13a44:	3800      	subs	r0, #0
   13a46:	bf18      	it	ne
   13a48:	2001      	movne	r0, #1
   13a4a:	4770      	bx	lr
   13a4c:	2001      	movs	r0, #1
}
   13a4e:	4770      	bx	lr

00013a50 <uarte_nrfx_fifo_fill>:
{
   13a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   13a52:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   13a54:	68f3      	ldr	r3, [r6, #12]
   13a56:	899c      	ldrh	r4, [r3, #12]
   13a58:	f3bf 8f5b 	dmb	ish
   13a5c:	4294      	cmp	r4, r2
   13a5e:	bfa8      	it	ge
   13a60:	4614      	movge	r4, r2
{
   13a62:	4605      	mov	r5, r0
   13a64:	3310      	adds	r3, #16
   13a66:	2201      	movs	r2, #1
   13a68:	e853 0f00 	ldrex	r0, [r3]
   13a6c:	2800      	cmp	r0, #0
   13a6e:	d103      	bne.n	13a78 <uarte_nrfx_fifo_fill+0x28>
   13a70:	e843 2700 	strex	r7, r2, [r3]
   13a74:	2f00      	cmp	r7, #0
   13a76:	d1f7      	bne.n	13a68 <uarte_nrfx_fifo_fill+0x18>
   13a78:	f3bf 8f5b 	dmb	ish
   13a7c:	bf0c      	ite	eq
   13a7e:	4613      	moveq	r3, r2
   13a80:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   13a82:	d01d      	beq.n	13ac0 <uarte_nrfx_fifo_fill+0x70>
		return 0;
   13a84:	461c      	mov	r4, r3
}
   13a86:	4620      	mov	r0, r4
   13a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   13a8a:	68f2      	ldr	r2, [r6, #12]
   13a8c:	5cc8      	ldrb	r0, [r1, r3]
   13a8e:	6892      	ldr	r2, [r2, #8]
   13a90:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
   13a92:	3301      	adds	r3, #1
   13a94:	42a3      	cmp	r3, r4
   13a96:	dbf8      	blt.n	13a8a <uarte_nrfx_fifo_fill+0x3a>
	__asm__ volatile(
   13a98:	f04f 0320 	mov.w	r3, #32
   13a9c:	f3ef 8711 	mrs	r7, BASEPRI
   13aa0:	f383 8812 	msr	BASEPRI_MAX, r3
   13aa4:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   13aa8:	6868      	ldr	r0, [r5, #4]
   13aaa:	f7ff ffc1 	bl	13a30 <is_tx_ready.isra.0>
   13aae:	68f3      	ldr	r3, [r6, #12]
   13ab0:	b940      	cbnz	r0, 13ac4 <uarte_nrfx_fifo_fill+0x74>
		data->int_driven->fifo_fill_lock = 0;
   13ab2:	6118      	str	r0, [r3, #16]
		len = 0;
   13ab4:	4604      	mov	r4, r0
	__asm__ volatile(
   13ab6:	f387 8811 	msr	BASEPRI, r7
   13aba:	f3bf 8f6f 	isb	sy
	return len;
   13abe:	e7e2      	b.n	13a86 <uarte_nrfx_fifo_fill+0x36>
	for (int i = 0; i < len; i++) {
   13ac0:	2300      	movs	r3, #0
   13ac2:	e7e7      	b.n	13a94 <uarte_nrfx_fifo_fill+0x44>
		tx_start(dev, data->int_driven->tx_buffer, len);
   13ac4:	6899      	ldr	r1, [r3, #8]
   13ac6:	6868      	ldr	r0, [r5, #4]
   13ac8:	4622      	mov	r2, r4
   13aca:	f7ff ff96 	bl	139fa <tx_start.isra.0>
   13ace:	e7f2      	b.n	13ab6 <uarte_nrfx_fifo_fill+0x66>

00013ad0 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   13ad0:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   13ad2:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   13ad4:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   13ad8:	05c9      	lsls	r1, r1, #23
{
   13ada:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   13adc:	d518      	bpl.n	13b10 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13ade:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   13ae2:	b1a9      	cbz	r1, 13b10 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   13ae4:	f04f 0420 	mov.w	r4, #32
   13ae8:	f3ef 8111 	mrs	r1, BASEPRI
   13aec:	f384 8812 	msr	BASEPRI_MAX, r4
   13af0:	f3bf 8f6f 	isb	sy
   13af4:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   13af8:	b134      	cbz	r4, 13b08 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13afa:	2400      	movs	r4, #0
   13afc:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
   13b00:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13b04:	2401      	movs	r4, #1
   13b06:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
   13b08:	f381 8811 	msr	BASEPRI, r1
   13b0c:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   13b10:	6852      	ldr	r2, [r2, #4]
   13b12:	06d2      	lsls	r2, r2, #27
   13b14:	d51a      	bpl.n	13b4c <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
   13b16:	f04f 0220 	mov.w	r2, #32
   13b1a:	f3ef 8111 	mrs	r1, BASEPRI
   13b1e:	f382 8812 	msr	BASEPRI_MAX, r2
   13b22:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13b26:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   13b2a:	b112      	cbz	r2, 13b32 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   13b2c:	2200      	movs	r2, #0
   13b2e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   13b32:	6902      	ldr	r2, [r0, #16]
   13b34:	68d2      	ldr	r2, [r2, #12]
   13b36:	b10a      	cbz	r2, 13b3c <uarte_nrfx_isr_int+0x6c>
   13b38:	6912      	ldr	r2, [r2, #16]
   13b3a:	b91a      	cbnz	r2, 13b44 <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
   13b3c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   13b40:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   13b44:	f381 8811 	msr	BASEPRI, r1
   13b48:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   13b4c:	6902      	ldr	r2, [r0, #16]
   13b4e:	68d2      	ldr	r2, [r2, #12]
   13b50:	b15a      	cbz	r2, 13b6a <uarte_nrfx_isr_int+0x9a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13b52:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   13b56:	b151      	cbz	r1, 13b6e <uarte_nrfx_isr_int+0x9e>
		if (data->int_driven->disable_tx_irq) {
   13b58:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   13b5a:	2100      	movs	r1, #0
   13b5c:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   13b5e:	b134      	cbz	r4, 13b6e <uarte_nrfx_isr_int+0x9e>
    p_reg->INTENCLR = mask;
   13b60:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   13b64:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   13b68:	7391      	strb	r1, [r2, #14]
}
   13b6a:	bc10      	pop	{r4}
   13b6c:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13b6e:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   13b72:	b121      	cbz	r1, 13b7e <uarte_nrfx_isr_int+0xae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13b74:	2100      	movs	r1, #0
   13b76:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   13b7a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   13b7e:	6813      	ldr	r3, [r2, #0]
   13b80:	2b00      	cmp	r3, #0
   13b82:	d0f2      	beq.n	13b6a <uarte_nrfx_isr_int+0x9a>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   13b84:	6851      	ldr	r1, [r2, #4]
}
   13b86:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   13b88:	4718      	bx	r3

00013b8a <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   13b8a:	b510      	push	{r4, lr}
   13b8c:	2200      	movs	r2, #0
   13b8e:	4604      	mov	r4, r0
   13b90:	2101      	movs	r1, #1
   13b92:	2028      	movs	r0, #40	; 0x28
   13b94:	f7f9 fd36 	bl	d604 <z_arm_irq_priority_set>
   13b98:	2028      	movs	r0, #40	; 0x28
   13b9a:	f7f9 fd15 	bl	d5c8 <arch_irq_enable>
   13b9e:	4620      	mov	r0, r4
   13ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13ba4:	f7fb bd62 	b.w	f66c <uarte_instance_init.constprop.0>

00013ba8 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   13ba8:	b510      	push	{r4, lr}
   13baa:	2200      	movs	r2, #0
   13bac:	4604      	mov	r4, r0
   13bae:	2101      	movs	r1, #1
   13bb0:	2002      	movs	r0, #2
   13bb2:	f7f9 fd27 	bl	d604 <z_arm_irq_priority_set>
   13bb6:	2002      	movs	r0, #2
   13bb8:	f7f9 fd06 	bl	d5c8 <arch_irq_enable>
   13bbc:	4620      	mov	r0, r4
   13bbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13bc2:	f7fb bd53 	b.w	f66c <uarte_instance_init.constprop.0>

00013bc6 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   13bc6:	4770      	bx	lr

00013bc8 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   13bc8:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   13bca:	6843      	ldr	r3, [r0, #4]
   13bcc:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   13bce:	7a03      	ldrb	r3, [r0, #8]
   13bd0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   13bd4:	3b01      	subs	r3, #1
   13bd6:	00db      	lsls	r3, r3, #3
   13bd8:	6845      	ldr	r5, [r0, #4]
   13bda:	6814      	ldr	r4, [r2, #0]
   13bdc:	441d      	add	r5, r3
   13bde:	42ac      	cmp	r4, r5
   13be0:	d902      	bls.n	13be8 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
   13be2:	f06f 0001 	mvn.w	r0, #1
}
   13be6:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   13be8:	7965      	ldrb	r5, [r4, #5]
   13bea:	428d      	cmp	r5, r1
   13bec:	d002      	beq.n	13bf4 <pinctrl_lookup_state+0x2c>
		(*state)++;
   13bee:	3408      	adds	r4, #8
   13bf0:	6014      	str	r4, [r2, #0]
   13bf2:	e7f1      	b.n	13bd8 <pinctrl_lookup_state+0x10>
			return 0;
   13bf4:	2000      	movs	r0, #0
   13bf6:	e7f6      	b.n	13be6 <pinctrl_lookup_state+0x1e>

00013bf8 <nrf_gpio_pin_write>:
    if (value == 0)
   13bf8:	b909      	cbnz	r1, 13bfe <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
   13bfa:	f7fc b841 	b.w	fc80 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   13bfe:	f7fc b871 	b.w	fce4 <nrf_gpio_pin_set>

00013c02 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   13c02:	b570      	push	{r4, r5, r6, lr}
   13c04:	4615      	mov	r5, r2
   13c06:	4604      	mov	r4, r0
   13c08:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   13c0c:	42b4      	cmp	r4, r6
   13c0e:	d101      	bne.n	13c14 <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
   13c10:	2000      	movs	r0, #0
}
   13c12:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
   13c14:	6823      	ldr	r3, [r4, #0]
   13c16:	0c1a      	lsrs	r2, r3, #16
   13c18:	2a22      	cmp	r2, #34	; 0x22
   13c1a:	f200 809d 	bhi.w	13d58 <pinctrl_configure_pins+0x156>
   13c1e:	e8df f002 	tbb	[pc, r2]
   13c22:	1d12      	.short	0x1d12
   13c24:	39294324 	.word	0x39294324
   13c28:	9b9b9b43 	.word	0x9b9b9b43
   13c2c:	9b4d489b 	.word	0x9b4d489b
   13c30:	9b9b9b9b 	.word	0x9b9b9b9b
   13c34:	9b9b9b9b 	.word	0x9b9b9b9b
   13c38:	68635e52 	.word	0x68635e52
   13c3c:	6d9b9b9b 	.word	0x6d9b9b9b
   13c40:	8b817873 	.word	0x8b817873
   13c44:	95          	.byte	0x95
   13c45:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
   13c46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   13c4a:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   13c4e:	6820      	ldr	r0, [r4, #0]
   13c50:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   13c54:	f7fc f846 	bl	fce4 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   13c58:	2201      	movs	r2, #1
   13c5a:	e015      	b.n	13c88 <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
   13c5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   13c60:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   13c64:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   13c66:	2100      	movs	r1, #0
   13c68:	e00f      	b.n	13c8a <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
   13c6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   13c6e:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
   13c72:	e7ec      	b.n	13c4e <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
   13c74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   13c78:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   13c7c:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
   13c7e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   13c82:	f7fb fffd 	bl	fc80 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   13c86:	2200      	movs	r2, #0
   13c88:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   13c8a:	6820      	ldr	r0, [r4, #0]
   13c8c:	f7fc f808 	bl	fca0 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   13c90:	3404      	adds	r4, #4
   13c92:	e7bb      	b.n	13c0c <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
   13c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   13c98:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   13c9c:	6820      	ldr	r0, [r4, #0]
   13c9e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   13ca2:	f7fb ffed 	bl	fc80 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   13ca6:	e7d7      	b.n	13c58 <pinctrl_configure_pins+0x56>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
   13ca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   13cac:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   13cb0:	e7d8      	b.n	13c64 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
   13cb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   13cb6:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   13cba:	e7d3      	b.n	13c64 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
   13cbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   13cc0:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
   13cc4:	e7ce      	b.n	13c64 <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
   13cc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   13cca:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   13cce:	6820      	ldr	r0, [r4, #0]
   13cd0:	f3c0 3140 	ubfx	r1, r0, #13, #1
   13cd4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   13cd8:	f7ff ff8e 	bl	13bf8 <nrf_gpio_pin_write>
   13cdc:	e7bc      	b.n	13c58 <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
   13cde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   13ce2:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   13ce6:	e7f2      	b.n	13cce <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
   13ce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   13cec:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   13cf0:	e7ed      	b.n	13cce <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
   13cf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   13cf6:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
   13cfa:	e7e8      	b.n	13cce <pinctrl_configure_pins+0xcc>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
   13cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   13d00:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   13d04:	2201      	movs	r2, #1
   13d06:	e7ae      	b.n	13c66 <pinctrl_configure_pins+0x64>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
   13d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   13d0c:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   13d10:	e7f8      	b.n	13d04 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
   13d12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   13d16:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   13d1a:	6820      	ldr	r0, [r4, #0]
   13d1c:	2201      	movs	r2, #1
   13d1e:	2100      	movs	r1, #0
   13d20:	f7fb ffbe 	bl	fca0 <nrf_pin_configure>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
   13d24:	6823      	ldr	r3, [r4, #0]
   13d26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   13d2a:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   13d2e:	6820      	ldr	r0, [r4, #0]
   13d30:	2201      	movs	r2, #1
   13d32:	2100      	movs	r1, #0
   13d34:	f7fb ffb4 	bl	fca0 <nrf_pin_configure>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
   13d38:	6823      	ldr	r3, [r4, #0]
   13d3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   13d3e:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   13d42:	6820      	ldr	r0, [r4, #0]
   13d44:	2201      	movs	r2, #1
   13d46:	2100      	movs	r1, #0
   13d48:	f7fb ffaa 	bl	fca0 <nrf_pin_configure>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
   13d4c:	6823      	ldr	r3, [r4, #0]
   13d4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   13d52:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
   13d56:	e7d5      	b.n	13d04 <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
   13d58:	f06f 0085 	mvn.w	r0, #133	; 0x85
   13d5c:	e759      	b.n	13c12 <pinctrl_configure_pins+0x10>

00013d5e <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   13d5e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   13d62:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   13d66:	f1a0 0308 	sub.w	r3, r0, #8
   13d6a:	4258      	negs	r0, r3
   13d6c:	4158      	adcs	r0, r3
   13d6e:	4770      	bx	lr

00013d70 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   13d70:	4700      	bx	r0

00013d72 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   13d72:	f001 b85c 	b.w	14e2e <z_impl_k_busy_wait>

00013d76 <nrfx_clock_enable>:
{
   13d76:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   13d78:	2000      	movs	r0, #0
   13d7a:	f7f9 fc35 	bl	d5e8 <arch_irq_is_enabled>
   13d7e:	b918      	cbnz	r0, 13d88 <nrfx_clock_enable+0x12>
}
   13d80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   13d84:	f7f9 bc20 	b.w	d5c8 <arch_irq_enable>
   13d88:	bd08      	pop	{r3, pc}

00013d8a <nrfx_clock_start>:
    switch (domain)
   13d8a:	b110      	cbz	r0, 13d92 <nrfx_clock_start+0x8>
   13d8c:	2801      	cmp	r0, #1
   13d8e:	d01d      	beq.n	13dcc <nrfx_clock_start+0x42>
   13d90:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   13d92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13d96:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   13d9a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   13d9e:	03c9      	lsls	r1, r1, #15
   13da0:	d512      	bpl.n	13dc8 <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   13da2:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   13da6:	2a01      	cmp	r2, #1
   13da8:	d10e      	bne.n	13dc8 <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   13daa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13dae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13db2:	2200      	movs	r2, #0
   13db4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   13db8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   13dbc:	2202      	movs	r2, #2
   13dbe:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13dc2:	2201      	movs	r2, #1
   13dc4:	609a      	str	r2, [r3, #8]
}
   13dc6:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   13dc8:	2200      	movs	r2, #0
   13dca:	e7ee      	b.n	13daa <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13dcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13dd0:	2200      	movs	r2, #0
   13dd2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   13dd6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   13dda:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13dde:	6018      	str	r0, [r3, #0]
}
   13de0:	4770      	bx	lr

00013de2 <nrf_gpio_reconfigure>:
{
   13de2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13de4:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   13de6:	a801      	add	r0, sp, #4
{
   13de8:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
   13dec:	4617      	mov	r7, r2
   13dee:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   13df0:	f7fc f954 	bl	1009c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   13df4:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   13df6:	2f00      	cmp	r7, #0
   13df8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   13dfc:	bf14      	ite	ne
   13dfe:	2302      	movne	r3, #2
   13e00:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   13e02:	2900      	cmp	r1, #0
   13e04:	bf18      	it	ne
   13e06:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   13e0a:	2d00      	cmp	r5, #0
   13e0c:	bf14      	ite	ne
   13e0e:	f04f 0c0c 	movne.w	ip, #12
   13e12:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   13e16:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   13e18:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   13e1c:	bf14      	ite	ne
   13e1e:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   13e22:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   13e26:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   13e28:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   13e2c:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   13e30:	bf14      	ite	ne
   13e32:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   13e36:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   13e3a:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   13e3e:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   13e42:	b101      	cbz	r1, 13e46 <nrf_gpio_reconfigure+0x64>
   13e44:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   13e46:	b10f      	cbz	r7, 13e4c <nrf_gpio_reconfigure+0x6a>
   13e48:	783f      	ldrb	r7, [r7, #0]
   13e4a:	007f      	lsls	r7, r7, #1
   13e4c:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   13e4e:	b10d      	cbz	r5, 13e54 <nrf_gpio_reconfigure+0x72>
   13e50:	782d      	ldrb	r5, [r5, #0]
   13e52:	00ad      	lsls	r5, r5, #2
   13e54:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   13e56:	b10c      	cbz	r4, 13e5c <nrf_gpio_reconfigure+0x7a>
   13e58:	7822      	ldrb	r2, [r4, #0]
   13e5a:	0214      	lsls	r4, r2, #8
   13e5c:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   13e5e:	b10e      	cbz	r6, 13e64 <nrf_gpio_reconfigure+0x82>
   13e60:	7836      	ldrb	r6, [r6, #0]
   13e62:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   13e64:	432c      	orrs	r4, r5
   13e66:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   13e68:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   13e6c:	b003      	add	sp, #12
   13e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00013e70 <nrf_gpio_cfg_sense_set>:
{
   13e70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   13e72:	f10d 030f 	add.w	r3, sp, #15
   13e76:	9301      	str	r3, [sp, #4]
   13e78:	2300      	movs	r3, #0
{
   13e7a:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   13e7e:	9300      	str	r3, [sp, #0]
   13e80:	461a      	mov	r2, r3
   13e82:	4619      	mov	r1, r3
   13e84:	f7ff ffad 	bl	13de2 <nrf_gpio_reconfigure>
}
   13e88:	b005      	add	sp, #20
   13e8a:	f85d fb04 	ldr.w	pc, [sp], #4

00013e8e <nrfx_nvmc_flash_size_get>:
   13e8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   13e92:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   13e94:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   13e96:	4350      	muls	r0, r2
   13e98:	4770      	bx	lr

00013e9a <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   13e9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   13e9e:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   13ea0:	4770      	bx	lr

00013ea2 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   13ea2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   13ea6:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   13ea8:	4770      	bx	lr

00013eaa <bootutil_buffer_is_erased.part.0>:
bool bootutil_buffer_is_erased(const struct flash_area *area,
   13eaa:	b538      	push	{r3, r4, r5, lr}
   13eac:	460c      	mov	r4, r1
   13eae:	4615      	mov	r5, r2
   13eb0:	4425      	add	r5, r4
    erased_val = flash_area_erased_val(area);
   13eb2:	f7fe fad4 	bl	1245e <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
   13eb6:	4621      	mov	r1, r4
   13eb8:	42a9      	cmp	r1, r5
   13eba:	d101      	bne.n	13ec0 <bootutil_buffer_is_erased.part.0+0x16>
    return true;
   13ebc:	2001      	movs	r0, #1
}
   13ebe:	bd38      	pop	{r3, r4, r5, pc}
        if (u8b[i] != erased_val) {
   13ec0:	f811 3b01 	ldrb.w	r3, [r1], #1
   13ec4:	4298      	cmp	r0, r3
   13ec6:	d0f7      	beq.n	13eb8 <bootutil_buffer_is_erased.part.0+0xe>
            return false;
   13ec8:	2000      	movs	r0, #0
   13eca:	e7f8      	b.n	13ebe <bootutil_buffer_is_erased.part.0+0x14>

00013ecc <boot_swap_info_off>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   13ecc:	6880      	ldr	r0, [r0, #8]
   13ece:	3818      	subs	r0, #24
   13ed0:	f020 0007 	bic.w	r0, r0, #7
}
   13ed4:	3810      	subs	r0, #16
   13ed6:	4770      	bx	lr

00013ed8 <boot_magic_compatible_check>:
    switch (tbl_val) {
   13ed8:	2804      	cmp	r0, #4
   13eda:	d009      	beq.n	13ef0 <boot_magic_compatible_check+0x18>
   13edc:	2805      	cmp	r0, #5
   13ede:	d103      	bne.n	13ee8 <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
   13ee0:	1e48      	subs	r0, r1, #1
   13ee2:	bf18      	it	ne
   13ee4:	2001      	movne	r0, #1
   13ee6:	4770      	bx	lr
        return tbl_val == val;
   13ee8:	1a43      	subs	r3, r0, r1
   13eea:	4258      	negs	r0, r3
   13eec:	4158      	adcs	r0, r3
   13eee:	4770      	bx	lr
    switch (tbl_val) {
   13ef0:	2001      	movs	r0, #1
}
   13ef2:	4770      	bx	lr

00013ef4 <bootutil_buffer_is_erased>:
    if (buffer == NULL || len == 0) {
   13ef4:	b111      	cbz	r1, 13efc <bootutil_buffer_is_erased+0x8>
   13ef6:	b10a      	cbz	r2, 13efc <bootutil_buffer_is_erased+0x8>
   13ef8:	f7ff bfd7 	b.w	13eaa <bootutil_buffer_is_erased.part.0>
}
   13efc:	2000      	movs	r0, #0
   13efe:	4770      	bx	lr

00013f00 <boot_read_flag>:
{
   13f00:	b538      	push	{r3, r4, r5, lr}
   13f02:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   13f04:	2301      	movs	r3, #1
{
   13f06:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   13f08:	4622      	mov	r2, r4
{
   13f0a:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   13f0c:	f7fe fa4c 	bl	123a8 <flash_area_read>
    if (rc < 0) {
   13f10:	2800      	cmp	r0, #0
   13f12:	db10      	blt.n	13f36 <boot_read_flag+0x36>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
   13f14:	2201      	movs	r2, #1
   13f16:	4621      	mov	r1, r4
   13f18:	4628      	mov	r0, r5
   13f1a:	f7ff ffeb 	bl	13ef4 <bootutil_buffer_is_erased>
   13f1e:	b118      	cbz	r0, 13f28 <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
   13f20:	2303      	movs	r3, #3
   13f22:	7023      	strb	r3, [r4, #0]
    return 0;
   13f24:	2000      	movs	r0, #0
}
   13f26:	bd38      	pop	{r3, r4, r5, pc}
    if (flag != BOOT_FLAG_SET) {
   13f28:	7823      	ldrb	r3, [r4, #0]
        return BOOT_FLAG_BAD;
   13f2a:	2b01      	cmp	r3, #1
   13f2c:	bf0c      	ite	eq
   13f2e:	2301      	moveq	r3, #1
   13f30:	2302      	movne	r3, #2
        *flag = boot_flag_decode(*flag);
   13f32:	7023      	strb	r3, [r4, #0]
   13f34:	e7f7      	b.n	13f26 <boot_read_flag+0x26>
        return BOOT_EFLASH;
   13f36:	2001      	movs	r0, #1
   13f38:	e7f5      	b.n	13f26 <boot_read_flag+0x26>

00013f3a <boot_write_trailer>:
{
   13f3a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   13f3e:	461d      	mov	r5, r3
   13f40:	4606      	mov	r6, r0
   13f42:	460f      	mov	r7, r1
   13f44:	4690      	mov	r8, r2
    align = flash_area_align(fap);
   13f46:	f7fe fa7e 	bl	12446 <flash_area_align>
    align = ALIGN_UP(inlen, align);
   13f4a:	1e6c      	subs	r4, r5, #1
   13f4c:	4404      	add	r4, r0
   13f4e:	4240      	negs	r0, r0
   13f50:	4004      	ands	r4, r0
    if (align > BOOT_MAX_ALIGN) {
   13f52:	2c08      	cmp	r4, #8
   13f54:	d81a      	bhi.n	13f8c <boot_write_trailer+0x52>
    erased_val = flash_area_erased_val(fap);
   13f56:	4630      	mov	r0, r6
   13f58:	f7fe fa81 	bl	1245e <flash_area_erased_val>
    memcpy(buf, inbuf, inlen);
   13f5c:	462a      	mov	r2, r5
    erased_val = flash_area_erased_val(fap);
   13f5e:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
   13f60:	4641      	mov	r1, r8
   13f62:	4668      	mov	r0, sp
   13f64:	f7fe fb6b 	bl	1263e <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
   13f68:	1b62      	subs	r2, r4, r5
   13f6a:	4649      	mov	r1, r9
   13f6c:	eb0d 0005 	add.w	r0, sp, r5
   13f70:	f7fe fb70 	bl	12654 <memset>
    rc = flash_area_write(fap, off, buf, align);
   13f74:	4623      	mov	r3, r4
   13f76:	466a      	mov	r2, sp
   13f78:	4639      	mov	r1, r7
   13f7a:	4630      	mov	r0, r6
   13f7c:	f7fe fa30 	bl	123e0 <flash_area_write>
    if (rc != 0) {
   13f80:	3800      	subs	r0, #0
   13f82:	bf18      	it	ne
   13f84:	2001      	movne	r0, #1
}
   13f86:	b003      	add	sp, #12
   13f88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   13f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13f90:	e7f9      	b.n	13f86 <boot_write_trailer+0x4c>

00013f92 <boot_write_trailer_flag>:
{
   13f92:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
   13f94:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
   13f96:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
   13f9a:	aa01      	add	r2, sp, #4
   13f9c:	f7ff ffcd 	bl	13f3a <boot_write_trailer>
}
   13fa0:	b003      	add	sp, #12
   13fa2:	f85d fb04 	ldr.w	pc, [sp], #4

00013fa6 <boot_write_image_ok>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   13fa6:	6881      	ldr	r1, [r0, #8]
   13fa8:	3918      	subs	r1, #24
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
   13faa:	2201      	movs	r2, #1
   13fac:	f021 0107 	bic.w	r1, r1, #7
   13fb0:	f7ff bfef 	b.w	13f92 <boot_write_trailer_flag>

00013fb4 <boot_read_image_ok>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   13fb4:	6882      	ldr	r2, [r0, #8]
   13fb6:	3a18      	subs	r2, #24
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
   13fb8:	f022 0207 	bic.w	r2, r2, #7
   13fbc:	f7ff bfa0 	b.w	13f00 <boot_read_flag>

00013fc0 <boot_read_swap_state_by_id>:
{
   13fc0:	b513      	push	{r0, r1, r4, lr}
   13fc2:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
   13fc4:	b2c0      	uxtb	r0, r0
   13fc6:	a901      	add	r1, sp, #4
   13fc8:	f7f9 f91e 	bl	d208 <flash_area_open>
    if (rc != 0) {
   13fcc:	b950      	cbnz	r0, 13fe4 <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
   13fce:	4621      	mov	r1, r4
   13fd0:	9801      	ldr	r0, [sp, #4]
   13fd2:	f7fc fc23 	bl	1081c <boot_read_swap_state>
   13fd6:	4604      	mov	r4, r0
    flash_area_close(fap);
   13fd8:	9801      	ldr	r0, [sp, #4]
   13fda:	f7fe f9e4 	bl	123a6 <flash_area_close>
}
   13fde:	4620      	mov	r0, r4
   13fe0:	b002      	add	sp, #8
   13fe2:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
   13fe4:	2401      	movs	r4, #1
   13fe6:	e7fa      	b.n	13fde <boot_read_swap_state_by_id+0x1e>

00013fe8 <boot_write_swap_info>:
{
   13fe8:	b513      	push	{r0, r1, r4, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   13fea:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
{
   13fee:	4604      	mov	r4, r0
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   13ff0:	f88d 1007 	strb.w	r1, [sp, #7]
    off = boot_swap_info_off(fap);
   13ff4:	f7ff ff6a 	bl	13ecc <boot_swap_info_off>
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
   13ff8:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
   13ffa:	4601      	mov	r1, r0
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
   13ffc:	f10d 0207 	add.w	r2, sp, #7
   14000:	4620      	mov	r0, r4
   14002:	f7ff ff9a 	bl	13f3a <boot_write_trailer>
}
   14006:	b002      	add	sp, #8
   14008:	bd10      	pop	{r4, pc}

0001400a <boot_set_pending_multi>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending_multi(int image_index, int permanent)
{
   1400a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1400c:	460e      	mov	r6, r1
    const struct flash_area *fap;
    struct boot_swap_state state_secondary_slot;
    uint8_t swap_type;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap);
   1400e:	2002      	movs	r0, #2
   14010:	a901      	add	r1, sp, #4
   14012:	f7f9 f8f9 	bl	d208 <flash_area_open>
    if (rc != 0) {
   14016:	bb80      	cbnz	r0, 1407a <boot_set_pending_multi+0x70>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state_secondary_slot);
   14018:	9801      	ldr	r0, [sp, #4]
   1401a:	a902      	add	r1, sp, #8
   1401c:	f7fc fbfe 	bl	1081c <boot_read_swap_state>
    if (rc != 0) {
   14020:	4604      	mov	r4, r0
   14022:	b948      	cbnz	r0, 14038 <boot_set_pending_multi+0x2e>
        goto done;
    }

    switch (state_secondary_slot.magic) {
   14024:	f89d 5008 	ldrb.w	r5, [sp, #8]
    case BOOT_MAGIC_GOOD:
        /* Swap already scheduled. */
        break;

    case BOOT_MAGIC_UNSET:
        rc = boot_write_magic(fap);
   14028:	9801      	ldr	r0, [sp, #4]
    switch (state_secondary_slot.magic) {
   1402a:	2d02      	cmp	r5, #2
   1402c:	d01f      	beq.n	1406e <boot_set_pending_multi+0x64>
   1402e:	2d03      	cmp	r5, #3
   14030:	d008      	beq.n	14044 <boot_set_pending_multi+0x3a>
   14032:	2d01      	cmp	r5, #1
   14034:	bf18      	it	ne
   14036:	2403      	movne	r4, #3
        assert(0);
        rc = BOOT_EBADIMAGE;
    }

done:
    flash_area_close(fap);
   14038:	9801      	ldr	r0, [sp, #4]
   1403a:	f7fe f9b4 	bl	123a6 <flash_area_close>
    return rc;
}
   1403e:	4620      	mov	r0, r4
   14040:	b004      	add	sp, #16
   14042:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_write_magic(fap);
   14044:	f7fc fbca 	bl	107dc <boot_write_magic>
        if (rc == 0 && permanent) {
   14048:	4604      	mov	r4, r0
   1404a:	2800      	cmp	r0, #0
   1404c:	d1f4      	bne.n	14038 <boot_set_pending_multi+0x2e>
   1404e:	b166      	cbz	r6, 1406a <boot_set_pending_multi+0x60>
            rc = boot_write_image_ok(fap);
   14050:	9801      	ldr	r0, [sp, #4]
   14052:	f7ff ffa8 	bl	13fa6 <boot_write_image_ok>
        if (rc == 0) {
   14056:	4604      	mov	r4, r0
   14058:	2800      	cmp	r0, #0
   1405a:	d1ed      	bne.n	14038 <boot_set_pending_multi+0x2e>
            rc = boot_write_swap_info(fap, swap_type, 0);
   1405c:	9801      	ldr	r0, [sp, #4]
   1405e:	2200      	movs	r2, #0
   14060:	4629      	mov	r1, r5
   14062:	f7ff ffc1 	bl	13fe8 <boot_write_swap_info>
   14066:	4604      	mov	r4, r0
   14068:	e7e6      	b.n	14038 <boot_set_pending_multi+0x2e>
                swap_type = BOOT_SWAP_TYPE_TEST;
   1406a:	2502      	movs	r5, #2
   1406c:	e7f6      	b.n	1405c <boot_set_pending_multi+0x52>
        flash_area_erase(fap, 0, flash_area_get_size(fap));
   1406e:	4621      	mov	r1, r4
   14070:	6882      	ldr	r2, [r0, #8]
   14072:	f7fe f9d1 	bl	12418 <flash_area_erase>
        rc = BOOT_EBADIMAGE;
   14076:	2403      	movs	r4, #3
        break;
   14078:	e7de      	b.n	14038 <boot_set_pending_multi+0x2e>
        return BOOT_EFLASH;
   1407a:	2401      	movs	r4, #1
   1407c:	e7df      	b.n	1403e <boot_set_pending_multi+0x34>

0001407e <boot_set_confirmed_multi>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed_multi(int image_index)
{
   1407e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap = NULL;
   14080:	2300      	movs	r3, #0
    struct boot_swap_state state_primary_slot;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap);
   14082:	a901      	add	r1, sp, #4
   14084:	2001      	movs	r0, #1
    const struct flash_area *fap = NULL;
   14086:	9301      	str	r3, [sp, #4]
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap);
   14088:	f7f9 f8be 	bl	d208 <flash_area_open>
    if (rc != 0) {
   1408c:	b9d8      	cbnz	r0, 140c6 <boot_set_confirmed_multi+0x48>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state_primary_slot);
   1408e:	9801      	ldr	r0, [sp, #4]
   14090:	a902      	add	r1, sp, #8
   14092:	f7fc fbc3 	bl	1081c <boot_read_swap_state>
    if (rc != 0) {
   14096:	4604      	mov	r4, r0
   14098:	b968      	cbnz	r0, 140b6 <boot_set_confirmed_multi+0x38>
        goto done;
    }

    switch (state_primary_slot.magic) {
   1409a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1409e:	2b02      	cmp	r3, #2
   140a0:	d00f      	beq.n	140c2 <boot_set_confirmed_multi+0x44>
   140a2:	2b03      	cmp	r3, #3
   140a4:	d007      	beq.n	140b6 <boot_set_confirmed_multi+0x38>
    /* Intentionally do not check copy_done flag
     * so can confirm a padded image which was programed using a programing
     * interface.
     */

    if (state_primary_slot.image_ok != BOOT_FLAG_UNSET) {
   140a6:	f89d 300b 	ldrb.w	r3, [sp, #11]
   140aa:	2b03      	cmp	r3, #3
   140ac:	d103      	bne.n	140b6 <boot_set_confirmed_multi+0x38>
        /* Already confirmed. */
        goto done;
    }

    rc = boot_write_image_ok(fap);
   140ae:	9801      	ldr	r0, [sp, #4]
   140b0:	f7ff ff79 	bl	13fa6 <boot_write_image_ok>
   140b4:	4604      	mov	r4, r0

done:
    flash_area_close(fap);
   140b6:	9801      	ldr	r0, [sp, #4]
   140b8:	f7fe f975 	bl	123a6 <flash_area_close>
    return rc;
}
   140bc:	4620      	mov	r0, r4
   140be:	b004      	add	sp, #16
   140c0:	bd10      	pop	{r4, pc}
    switch (state_primary_slot.magic) {
   140c2:	2404      	movs	r4, #4
   140c4:	e7f7      	b.n	140b6 <boot_set_confirmed_multi+0x38>
        return BOOT_EFLASH;
   140c6:	2401      	movs	r4, #1
   140c8:	e7f8      	b.n	140bc <boot_set_confirmed_multi+0x3e>

000140ca <boot_set_confirmed>:
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed(void)
{
    return boot_set_confirmed_multi(0);
   140ca:	2000      	movs	r0, #0
   140cc:	f7ff bfd7 	b.w	1407e <boot_set_confirmed_multi>

000140d0 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   140d0:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   140d2:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   140d4:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   140d6:	bf9c      	itt	ls
   140d8:	6880      	ldrls	r0, [r0, #8]
   140da:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   140dc:	3b01      	subs	r3, #1
   140de:	1a98      	subs	r0, r3, r2
}
   140e0:	4770      	bx	lr

000140e2 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   140e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   140e6:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   140ea:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   140ec:	eba9 0804 	sub.w	r8, r9, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   140f0:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   140f2:	4590      	cmp	r8, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   140f4:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   140f6:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
   140f8:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   140fa:	d906      	bls.n	1410a <_WriteNoCheck+0x28>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   140fc:	f7fe fa9f 	bl	1263e <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
   14100:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
   14104:	60ec      	str	r4, [r5, #12]
}
   14106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   1410a:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   1410c:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   14110:	f7fe fa95 	bl	1263e <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   14114:	6868      	ldr	r0, [r5, #4]
   14116:	4622      	mov	r2, r4
   14118:	eb07 0108 	add.w	r1, r7, r8
   1411c:	e7ee      	b.n	140fc <_WriteNoCheck+0x1a>

0001411e <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1411e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   14122:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   14124:	4606      	mov	r6, r0
   14126:	4689      	mov	r9, r1
   14128:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   1412a:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1412e:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   14130:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   14132:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   14134:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   14136:	bf28      	it	cs
   14138:	18e4      	addcs	r4, r4, r3
   1413a:	3c01      	subs	r4, #1
   1413c:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1413e:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   14140:	42bc      	cmp	r4, r7
   14142:	bf28      	it	cs
   14144:	463c      	movcs	r4, r7
   14146:	4294      	cmp	r4, r2
   14148:	bf28      	it	cs
   1414a:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
   1414c:	4649      	mov	r1, r9
   1414e:	4622      	mov	r2, r4
   14150:	4428      	add	r0, r5
   14152:	f7fe fa74 	bl	1263e <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   14156:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   14158:	4425      	add	r5, r4
    NumBytesWritten += NumBytesToWrite;
   1415a:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   1415c:	44a1      	add	r9, r4
    NumBytes        -= NumBytesToWrite;
   1415e:	1b3f      	subs	r7, r7, r4
      WrOff = 0u;
   14160:	42ab      	cmp	r3, r5
   14162:	bf08      	it	eq
   14164:	2500      	moveq	r5, #0
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
   14166:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
   1416a:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   1416c:	2f00      	cmp	r7, #0
   1416e:	d1de      	bne.n	1412e <_WriteBlocking+0x10>
}
   14170:	4640      	mov	r0, r8
   14172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00014176 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   14176:	f7fc bbf3 	b.w	10960 <_DoInit>

0001417a <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1417a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1417c:	f7ff fffb 	bl	14176 <SEGGER_RTT_Init>

	return 0;
}
   14180:	2000      	movs	r0, #0
   14182:	bd08      	pop	{r3, pc}

00014184 <append_to_buffer.isra.0>:
    memcpy(where, &v, sizeof(v));
}

static inline CborError append_to_buffer(CborEncoder *encoder, const void *data, size_t len)
{
    return encoder->writer->write(encoder->writer, data, len);
   14184:	6803      	ldr	r3, [r0, #0]
   14186:	4718      	bx	r3

00014188 <encode_number_no_update>:
{
    return append_to_buffer(encoder, &byte, 1);
}

static inline CborError encode_number_no_update(CborEncoder *encoder, uint64_t ui, uint8_t shiftedMajorType)
{
   14188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1418c:	461d      	mov	r5, r3
   1418e:	b086      	sub	sp, #24
    v = cbor_htonll(v);
   14190:	ba13      	rev	r3, r2
{
   14192:	4617      	mov	r7, r2
    v = cbor_htonll(v);
   14194:	ba2a      	rev	r2, r5
   14196:	e9cd 2300 	strd	r2, r3, [sp]
    memcpy(where, &v, sizeof(v));
   1419a:	4669      	mov	r1, sp
{
   1419c:	4606      	mov	r6, r0
    memcpy(where, &v, sizeof(v));
   1419e:	2208      	movs	r2, #8
   141a0:	a804      	add	r0, sp, #16
{
   141a2:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
    memcpy(where, &v, sizeof(v));
   141a6:	f7fe fa4a 	bl	1263e <memcpy>
    uint64_t buf[2];
    uint8_t *const bufend = (uint8_t *)buf + sizeof(buf);
    uint8_t *bufstart = bufend - 1;
    put64(buf + 1, ui);     /* we probably have a bunch of zeros in the beginning */

    if (ui < Value8Bit) {
   141aa:	2f18      	cmp	r7, #24
   141ac:	f175 0300 	sbcs.w	r3, r5, #0
   141b0:	f10d 0117 	add.w	r1, sp, #23
   141b4:	d20c      	bcs.n	141d0 <encode_number_no_update+0x48>
        *bufstart += shiftedMajorType;
   141b6:	f89d 4017 	ldrb.w	r4, [sp, #23]
   141ba:	44a0      	add	r8, r4
   141bc:	f88d 8017 	strb.w	r8, [sp, #23]
            ++more;
        bufstart -= (size_t)1 << more;
        *bufstart = shiftedMajorType + Value8Bit + more;
    }

    return append_to_buffer(encoder, bufstart, bufend - bufstart);
   141c0:	ab06      	add	r3, sp, #24
   141c2:	6830      	ldr	r0, [r6, #0]
   141c4:	1a5a      	subs	r2, r3, r1
   141c6:	f7ff ffdd 	bl	14184 <append_to_buffer.isra.0>
}
   141ca:	b006      	add	sp, #24
   141cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (ui > 0xffU)
   141d0:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   141d4:	f175 0300 	sbcs.w	r3, r5, #0
            ++more;
   141d8:	bf2c      	ite	cs
   141da:	2401      	movcs	r4, #1
   141dc:	2400      	movcc	r4, #0
        if (ui > 0xffffU)
   141de:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   141e2:	f175 0300 	sbcs.w	r3, r5, #0
            ++more;
   141e6:	bf28      	it	cs
   141e8:	3401      	addcs	r4, #1
        if (ui > 0xffffffffU)
   141ea:	b10d      	cbz	r5, 141f0 <encode_number_no_update+0x68>
            ++more;
   141ec:	3401      	adds	r4, #1
   141ee:	b2e4      	uxtb	r4, r4
        bufstart -= (size_t)1 << more;
   141f0:	2301      	movs	r3, #1
   141f2:	40a3      	lsls	r3, r4
   141f4:	1ac9      	subs	r1, r1, r3
        *bufstart = shiftedMajorType + Value8Bit + more;
   141f6:	f108 0818 	add.w	r8, r8, #24
   141fa:	4444      	add	r4, r8
   141fc:	700c      	strb	r4, [r1, #0]
   141fe:	e7df      	b.n	141c0 <encode_number_no_update+0x38>

00014200 <encode_number>:

static inline CborError encode_number(CborEncoder *encoder, uint64_t ui, uint8_t shiftedMajorType)
{
   14200:	b430      	push	{r4, r5}
    ++encoder->added;
   14202:	6884      	ldr	r4, [r0, #8]
{
   14204:	f89d 5008 	ldrb.w	r5, [sp, #8]
    ++encoder->added;
   14208:	3401      	adds	r4, #1
   1420a:	6084      	str	r4, [r0, #8]
    return encode_number_no_update(encoder, ui, shiftedMajorType);
   1420c:	9502      	str	r5, [sp, #8]
}
   1420e:	bc30      	pop	{r4, r5}
    return encode_number_no_update(encoder, ui, shiftedMajorType);
   14210:	f7ff bfba 	b.w	14188 <encode_number_no_update>

00014214 <create_container>:

#ifdef __GNUC__
__attribute__((noinline))
#endif
static CborError create_container(CborEncoder *encoder, CborEncoder *container, size_t length, uint8_t shiftedMajorType)
{
   14214:	b530      	push	{r4, r5, lr}
   14216:	4605      	mov	r5, r0
   14218:	461c      	mov	r4, r3
    CborError err;
    container->writer = encoder->writer;
    ++encoder->added;
   1421a:	68ab      	ldr	r3, [r5, #8]
    container->writer = encoder->writer;
   1421c:	6800      	ldr	r0, [r0, #0]
   1421e:	6008      	str	r0, [r1, #0]
    ++encoder->added;
   14220:	3301      	adds	r3, #1
   14222:	60ab      	str	r3, [r5, #8]

    cbor_static_assert(((MapType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == CborIteratorFlag_ContainerIsMap);
    cbor_static_assert(((ArrayType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == 0);
    container->flags = shiftedMajorType & CborIteratorFlag_ContainerIsMap;

    if (length == CborIndefiniteLength) {
   14224:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    container->added = 0;
   14228:	f04f 0300 	mov.w	r3, #0
   1422c:	f004 0520 	and.w	r5, r4, #32
{
   14230:	b085      	sub	sp, #20
    container->added = 0;
   14232:	608b      	str	r3, [r1, #8]
    container->flags = shiftedMajorType & CborIteratorFlag_ContainerIsMap;
   14234:	60cd      	str	r5, [r1, #12]
    if (length == CborIndefiniteLength) {
   14236:	d10d      	bne.n	14254 <create_container+0x40>
        container->flags |= CborIteratorFlag_UnknownLength;
   14238:	f045 0504 	orr.w	r5, r5, #4
   1423c:	60cd      	str	r5, [r1, #12]
        err = append_byte_to_buffer(container, shiftedMajorType + IndefiniteLength);
   1423e:	341f      	adds	r4, #31
   14240:	2201      	movs	r2, #1
   14242:	f10d 010f 	add.w	r1, sp, #15
   14246:	f88d 400f 	strb.w	r4, [sp, #15]
    return append_to_buffer(encoder, &byte, 1);
   1424a:	f7ff ff9b 	bl	14184 <append_to_buffer.isra.0>
    }
    if (err && !isOomError(err))
        return err;

    return CborNoError;
}
   1424e:	2000      	movs	r0, #0
   14250:	b005      	add	sp, #20
   14252:	bd30      	pop	{r4, r5, pc}
        err = encode_number_no_update(container, length, shiftedMajorType);
   14254:	9400      	str	r4, [sp, #0]
   14256:	4608      	mov	r0, r1
   14258:	f7ff ff96 	bl	14188 <encode_number_no_update>
   1425c:	e7f7      	b.n	1424e <create_container+0x3a>

0001425e <cbor_encoder_init>:
    encoder->added = 0;
   1425e:	2300      	movs	r3, #0
    encoder->flags = flags;
   14260:	e9c0 3202 	strd	r3, r2, [r0, #8]
    encoder->writer = writer;
   14264:	6001      	str	r1, [r0, #0]
}
   14266:	4770      	bx	lr

00014268 <cbor_encode_int>:
{
   14268:	b507      	push	{r0, r1, r2, lr}
    uint64_t ui = value >> 63;              /* extend sign to whole length */
   1426a:	17d9      	asrs	r1, r3, #31
    return encode_number(encoder, ui, majorType);
   1426c:	f001 0120 	and.w	r1, r1, #32
   14270:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
   14274:	9100      	str	r1, [sp, #0]
   14276:	ea83 73e3 	eor.w	r3, r3, r3, asr #31
   1427a:	f7ff ffc1 	bl	14200 <encode_number>
}
   1427e:	b003      	add	sp, #12
   14280:	f85d fb04 	ldr.w	pc, [sp], #4

00014284 <cbor_encode_simple_value>:
    if (value >= HalfPrecisionFloat && value <= Break)
   14284:	f1a1 0319 	sub.w	r3, r1, #25
   14288:	2b06      	cmp	r3, #6
{
   1428a:	b507      	push	{r0, r1, r2, lr}
   1428c:	460a      	mov	r2, r1
    if (value >= HalfPrecisionFloat && value <= Break)
   1428e:	d907      	bls.n	142a0 <cbor_encode_simple_value+0x1c>
    return encode_number(encoder, value, SimpleTypesType << MajorTypeShift);
   14290:	23e0      	movs	r3, #224	; 0xe0
   14292:	9300      	str	r3, [sp, #0]
   14294:	2300      	movs	r3, #0
   14296:	f7ff ffb3 	bl	14200 <encode_number>
}
   1429a:	b003      	add	sp, #12
   1429c:	f85d fb04 	ldr.w	pc, [sp], #4
        return CborErrorIllegalSimpleType;
   142a0:	f44f 7083 	mov.w	r0, #262	; 0x106
   142a4:	e7f9      	b.n	1429a <cbor_encode_simple_value+0x16>

000142a6 <cbor_encode_byte_string>:
{
   142a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    CborError err = encode_number(encoder, length, shiftedMajorType);
   142a8:	2340      	movs	r3, #64	; 0x40
{
   142aa:	4604      	mov	r4, r0
    CborError err = encode_number(encoder, length, shiftedMajorType);
   142ac:	9300      	str	r3, [sp, #0]
   142ae:	2300      	movs	r3, #0
{
   142b0:	460d      	mov	r5, r1
   142b2:	4616      	mov	r6, r2
    CborError err = encode_number(encoder, length, shiftedMajorType);
   142b4:	f7ff ffa4 	bl	14200 <encode_number>
    return append_to_buffer(encoder, string, length);
   142b8:	6820      	ldr	r0, [r4, #0]
   142ba:	4632      	mov	r2, r6
   142bc:	4629      	mov	r1, r5
}
   142be:	b002      	add	sp, #8
   142c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return append_to_buffer(encoder, string, length);
   142c4:	f7ff bf5e 	b.w	14184 <append_to_buffer.isra.0>

000142c8 <cbor_encode_text_string>:
{
   142c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    CborError err = encode_number(encoder, length, shiftedMajorType);
   142ca:	2360      	movs	r3, #96	; 0x60
{
   142cc:	4604      	mov	r4, r0
    CborError err = encode_number(encoder, length, shiftedMajorType);
   142ce:	9300      	str	r3, [sp, #0]
   142d0:	2300      	movs	r3, #0
{
   142d2:	460d      	mov	r5, r1
   142d4:	4616      	mov	r6, r2
    CborError err = encode_number(encoder, length, shiftedMajorType);
   142d6:	f7ff ff93 	bl	14200 <encode_number>
    return append_to_buffer(encoder, string, length);
   142da:	6820      	ldr	r0, [r4, #0]
   142dc:	4632      	mov	r2, r6
   142de:	4629      	mov	r1, r5
}
   142e0:	b002      	add	sp, #8
   142e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return append_to_buffer(encoder, string, length);
   142e6:	f7ff bf4d 	b.w	14184 <append_to_buffer.isra.0>

000142ea <cbor_encoder_create_array>:
 *
 * \sa cbor_encoder_create_map
 */
CborError cbor_encoder_create_array(CborEncoder *encoder, CborEncoder *arrayEncoder, size_t length)
{
    return create_container(encoder, arrayEncoder, length, ArrayType << MajorTypeShift);
   142ea:	2380      	movs	r3, #128	; 0x80
   142ec:	f7ff bf92 	b.w	14214 <create_container>

000142f0 <cbor_encoder_create_map>:
 * value, this function returns error CborErrorDataTooLarge.
 *
 * \sa cbor_encoder_create_array
 */
CborError cbor_encoder_create_map(CborEncoder *encoder, CborEncoder *mapEncoder, size_t length)
{
   142f0:	b410      	push	{r4}
    if (length != CborIndefiniteLength && length > SIZE_MAX / 2)
   142f2:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   142f6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   142fa:	42a3      	cmp	r3, r4
   142fc:	d303      	bcc.n	14306 <cbor_encoder_create_map+0x16>
        return CborErrorDataTooLarge;
    return create_container(encoder, mapEncoder, length, MapType << MajorTypeShift);
}
   142fe:	bc10      	pop	{r4}
    return create_container(encoder, mapEncoder, length, MapType << MajorTypeShift);
   14300:	23a0      	movs	r3, #160	; 0xa0
   14302:	f7ff bf87 	b.w	14214 <create_container>
}
   14306:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1430a:	bc10      	pop	{r4}
   1430c:	4770      	bx	lr

0001430e <cbor_encoder_close_container>:
 * cbor_encoder_close_container_checked() instead.
 *
 * \sa cbor_encoder_create_array(), cbor_encoder_create_map()
 */
CborError cbor_encoder_close_container(CborEncoder *encoder, const CborEncoder *containerEncoder)
{
   1430e:	4603      	mov	r3, r0
   14310:	b507      	push	{r0, r1, r2, lr}
    encoder->writer = containerEncoder->writer;
   14312:	6808      	ldr	r0, [r1, #0]
   14314:	6018      	str	r0, [r3, #0]

    if (containerEncoder->flags & CborIteratorFlag_UnknownLength)
   14316:	68cb      	ldr	r3, [r1, #12]
   14318:	f013 0304 	ands.w	r3, r3, #4
   1431c:	d00a      	beq.n	14334 <cbor_encoder_close_container+0x26>
        return append_byte_to_buffer(encoder, BreakByte);
   1431e:	23ff      	movs	r3, #255	; 0xff
   14320:	2201      	movs	r2, #1
   14322:	f10d 0107 	add.w	r1, sp, #7
   14326:	f88d 3007 	strb.w	r3, [sp, #7]
    return append_to_buffer(encoder, &byte, 1);
   1432a:	f7ff ff2b 	bl	14184 <append_to_buffer.isra.0>
    return CborNoError;
}
   1432e:	b003      	add	sp, #12
   14330:	f85d fb04 	ldr.w	pc, [sp], #4
    return CborNoError;
   14334:	4618      	mov	r0, r3
   14336:	e7fa      	b.n	1432e <cbor_encoder_close_container+0x20>

00014338 <iterate_noop>:
}
   14338:	2001      	movs	r0, #1
   1433a:	4770      	bx	lr

0001433c <preparse_value>:
{
   1433c:	b570      	push	{r4, r5, r6, lr}
    it->type = CborInvalidType;
   1433e:	23ff      	movs	r3, #255	; 0xff
    const CborParser *parser = it->parser;
   14340:	6805      	ldr	r5, [r0, #0]
    it->type = CborInvalidType;
   14342:	7383      	strb	r3, [r0, #14]
    if (it->offset == parser->end)
   14344:	6841      	ldr	r1, [r0, #4]
   14346:	686b      	ldr	r3, [r5, #4]
   14348:	4299      	cmp	r1, r3
{
   1434a:	4604      	mov	r4, r0
    if (it->offset == parser->end)
   1434c:	d102      	bne.n	14354 <preparse_value+0x18>
        return CborErrorUnexpectedEOF;
   1434e:	f240 1001 	movw	r0, #257	; 0x101
}
   14352:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t descriptor = parser->d->get8(parser->d, it->offset);
   14354:	6828      	ldr	r0, [r5, #0]
   14356:	6803      	ldr	r3, [r0, #0]
   14358:	4798      	blx	r3
    it->extra = (descriptor &= SmallValueMask);
   1435a:	f000 031f 	and.w	r3, r0, #31
    uint8_t type = descriptor & MajorTypeMask;
   1435e:	f000 06e0 	and.w	r6, r0, #224	; 0xe0
    it->flags = 0;
   14362:	2200      	movs	r2, #0
    if (descriptor > Value64Bit) {
   14364:	2b1b      	cmp	r3, #27
    it->type = type;
   14366:	73a6      	strb	r6, [r4, #14]
    it->flags = 0;
   14368:	73e2      	strb	r2, [r4, #15]
    it->extra = (descriptor &= SmallValueMask);
   1436a:	81a3      	strh	r3, [r4, #12]
    if (descriptor > Value64Bit) {
   1436c:	d919      	bls.n	143a2 <preparse_value+0x66>
        if (unlikely(descriptor != IndefiniteLength))
   1436e:	2b1f      	cmp	r3, #31
   14370:	d007      	beq.n	14382 <preparse_value+0x46>
            return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
   14372:	f240 1005 	movw	r0, #261	; 0x105
   14376:	f240 1303 	movw	r3, #259	; 0x103
   1437a:	2ee0      	cmp	r6, #224	; 0xe0
   1437c:	bf08      	it	eq
   1437e:	4618      	moveq	r0, r3
   14380:	e7e7      	b.n	14352 <preparse_value+0x16>
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   14382:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   14386:	2840      	cmp	r0, #64	; 0x40
   14388:	d001      	beq.n	1438e <preparse_value+0x52>
   1438a:	2880      	cmp	r0, #128	; 0x80
   1438c:	d102      	bne.n	14394 <preparse_value+0x58>
            it->flags |= CborIteratorFlag_UnknownLength;
   1438e:	2304      	movs	r3, #4
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
   14390:	73e3      	strb	r3, [r4, #15]
   14392:	e039      	b.n	14408 <preparse_value+0xcc>
        return type == CborSimpleType ? CborErrorUnexpectedBreak : CborErrorIllegalNumber;
   14394:	2ee0      	cmp	r6, #224	; 0xe0
   14396:	f240 1005 	movw	r0, #261	; 0x105
   1439a:	bf08      	it	eq
   1439c:	f44f 7081 	moveq.w	r0, #258	; 0x102
   143a0:	e7d7      	b.n	14352 <preparse_value+0x16>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   143a2:	2b17      	cmp	r3, #23
   143a4:	bf82      	ittt	hi
   143a6:	f1a3 0118 	subhi.w	r1, r3, #24
   143aa:	2201      	movhi	r2, #1
   143ac:	408a      	lslhi	r2, r1
    if (bytesNeeded + 1 > (size_t)(parser->end - it->offset))
   143ae:	6868      	ldr	r0, [r5, #4]
   143b0:	6861      	ldr	r1, [r4, #4]
   143b2:	3201      	adds	r2, #1
   143b4:	1a40      	subs	r0, r0, r1
   143b6:	4282      	cmp	r2, r0
   143b8:	d8c9      	bhi.n	1434e <preparse_value+0x12>
    if (majortype == NegativeIntegerType) {
   143ba:	2e20      	cmp	r6, #32
    uint8_t majortype = type >> MajorTypeShift;
   143bc:	ea4f 1256 	mov.w	r2, r6, lsr #5
    if (majortype == NegativeIntegerType) {
   143c0:	d10c      	bne.n	143dc <preparse_value+0xa0>
        it->type = CborIntegerType;
   143c2:	f44f 7200 	mov.w	r2, #512	; 0x200
   143c6:	81e2      	strh	r2, [r4, #14]
    if (descriptor < Value8Bit)
   143c8:	2b17      	cmp	r3, #23
   143ca:	d91d      	bls.n	14408 <preparse_value+0xcc>
    if (descriptor == Value8Bit)
   143cc:	2b18      	cmp	r3, #24
   143ce:	d12a      	bne.n	14426 <preparse_value+0xea>
        it->extra = parser->d->get8(parser->d, it->offset + 1);
   143d0:	6828      	ldr	r0, [r5, #0]
   143d2:	6803      	ldr	r3, [r0, #0]
        it->extra = parser->d->get16(parser->d, it->offset + 1);
   143d4:	3101      	adds	r1, #1
   143d6:	4798      	blx	r3
   143d8:	81a0      	strh	r0, [r4, #12]
   143da:	e015      	b.n	14408 <preparse_value+0xcc>
    } else if (majortype == SimpleTypesType) {
   143dc:	2a07      	cmp	r2, #7
   143de:	d1f3      	bne.n	143c8 <preparse_value+0x8c>
        switch (descriptor) {
   143e0:	3b14      	subs	r3, #20
   143e2:	2b07      	cmp	r3, #7
   143e4:	d810      	bhi.n	14408 <preparse_value+0xcc>
   143e6:	e8df f003 	tbb	[pc, r3]
   143ea:	0b04      	.short	0x0b04
   143ec:	0b110b0b 	.word	0x0b110b0b
   143f0:	0909      	.short	0x0909
            it->extra = false;
   143f2:	2000      	movs	r0, #0
            it->type = CborBooleanType;
   143f4:	23f5      	movs	r3, #245	; 0xf5
            it->extra = false;
   143f6:	81a0      	strh	r0, [r4, #12]
            it->type = CborBooleanType;
   143f8:	73a3      	strb	r3, [r4, #14]
            break;
   143fa:	e7aa      	b.n	14352 <preparse_value+0x16>
            it->flags |= CborIteratorFlag_IntegerValueTooLarge;
   143fc:	2301      	movs	r3, #1
   143fe:	73e3      	strb	r3, [r4, #15]
            it->type = parser->d->get8(parser->d, it->offset);
   14400:	6828      	ldr	r0, [r5, #0]
   14402:	6803      	ldr	r3, [r0, #0]
   14404:	4798      	blx	r3
   14406:	73a0      	strb	r0, [r4, #14]
        switch (descriptor) {
   14408:	2000      	movs	r0, #0
   1440a:	e7a2      	b.n	14352 <preparse_value+0x16>
            it->extra = parser->d->get8(parser->d, it->offset + 1);
   1440c:	6828      	ldr	r0, [r5, #0]
   1440e:	3101      	adds	r1, #1
   14410:	6803      	ldr	r3, [r0, #0]
   14412:	4798      	blx	r3
   14414:	b280      	uxth	r0, r0
            if (unlikely(it->extra < 32)) {
   14416:	281f      	cmp	r0, #31
            it->extra = parser->d->get8(parser->d, it->offset + 1);
   14418:	81a0      	strh	r0, [r4, #12]
            if (unlikely(it->extra < 32)) {
   1441a:	d8f5      	bhi.n	14408 <preparse_value+0xcc>
                it->type = CborInvalidType;
   1441c:	23ff      	movs	r3, #255	; 0xff
   1441e:	73a3      	strb	r3, [r4, #14]
                return CborErrorIllegalSimpleType;
   14420:	f44f 7083 	mov.w	r0, #262	; 0x106
   14424:	e795      	b.n	14352 <preparse_value+0x16>
    else if (descriptor == Value16Bit)
   14426:	2b19      	cmp	r3, #25
   14428:	d102      	bne.n	14430 <preparse_value+0xf4>
        it->extra = parser->d->get16(parser->d, it->offset + 1);
   1442a:	6828      	ldr	r0, [r5, #0]
   1442c:	6843      	ldr	r3, [r0, #4]
   1442e:	e7d1      	b.n	143d4 <preparse_value+0x98>
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
   14430:	7be3      	ldrb	r3, [r4, #15]
   14432:	f043 0301 	orr.w	r3, r3, #1
   14436:	e7ab      	b.n	14390 <preparse_value+0x54>

00014438 <preparse_next_value>:
{
   14438:	b538      	push	{r3, r4, r5, lr}
    if (it->remaining != UINT32_MAX) {
   1443a:	6885      	ldr	r5, [r0, #8]
   1443c:	1c6b      	adds	r3, r5, #1
{
   1443e:	4604      	mov	r4, r0
    if (it->remaining != UINT32_MAX) {
   14440:	d009      	beq.n	14456 <preparse_next_value+0x1e>
        if (it->type != CborTagType && !--it->remaining) {
   14442:	7b83      	ldrb	r3, [r0, #14]
   14444:	2bc0      	cmp	r3, #192	; 0xc0
   14446:	d017      	beq.n	14478 <preparse_next_value+0x40>
   14448:	3d01      	subs	r5, #1
   1444a:	6085      	str	r5, [r0, #8]
   1444c:	b9a5      	cbnz	r5, 14478 <preparse_next_value+0x40>
            it->type = CborInvalidType;
   1444e:	23ff      	movs	r3, #255	; 0xff
   14450:	7383      	strb	r3, [r0, #14]
}
   14452:	2000      	movs	r0, #0
   14454:	bd38      	pop	{r3, r4, r5, pc}
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   14456:	e9d0 3100 	ldrd	r3, r1, [r0]
   1445a:	685a      	ldr	r2, [r3, #4]
   1445c:	4291      	cmp	r1, r2
   1445e:	d00b      	beq.n	14478 <preparse_next_value+0x40>
        it->parser->d->get8(it->parser->d, it->offset) == (uint8_t)BreakByte) {
   14460:	6818      	ldr	r0, [r3, #0]
   14462:	6803      	ldr	r3, [r0, #0]
   14464:	4798      	blx	r3
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   14466:	28ff      	cmp	r0, #255	; 0xff
   14468:	d106      	bne.n	14478 <preparse_next_value+0x40>
        ++it->offset;
   1446a:	6863      	ldr	r3, [r4, #4]
        it->type = CborInvalidType;
   1446c:	73a5      	strb	r5, [r4, #14]
        ++it->offset;
   1446e:	3301      	adds	r3, #1
   14470:	6063      	str	r3, [r4, #4]
        it->remaining = 0;
   14472:	2300      	movs	r3, #0
   14474:	60a3      	str	r3, [r4, #8]
        return CborNoError;
   14476:	e7ec      	b.n	14452 <preparse_next_value+0x1a>
    return preparse_value(it);
   14478:	4620      	mov	r0, r4
}
   1447a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return preparse_value(it);
   1447e:	f7ff bf5d 	b.w	1433c <preparse_value>

00014482 <extract_number>:
    memcpy(&result, ptr, sizeof(result));
    return cbor_ntohll(result);
}

static inline CborError extract_number(const CborParser *p, int *offset, uint64_t *len)
{
   14482:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14486:	4607      	mov	r7, r0
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   14488:	6800      	ldr	r0, [r0, #0]
{
   1448a:	460d      	mov	r5, r1
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   1448c:	6803      	ldr	r3, [r0, #0]
   1448e:	6809      	ldr	r1, [r1, #0]
{
   14490:	4614      	mov	r4, r2
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   14492:	4798      	blx	r3
    ++*offset;
   14494:	6829      	ldr	r1, [r5, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   14496:	f000 031f 	and.w	r3, r0, #31
    ++*offset;
   1449a:	3101      	adds	r1, #1
    *len = 1;
   1449c:	f04f 0801 	mov.w	r8, #1
   144a0:	f04f 0900 	mov.w	r9, #0
    if (additional_information < Value8Bit) {
   144a4:	2b17      	cmp	r3, #23
    ++*offset;
   144a6:	6029      	str	r1, [r5, #0]
    *len = 1;
   144a8:	e9c4 8900 	strd	r8, r9, [r4]
    if (additional_information < Value8Bit) {
   144ac:	d804      	bhi.n	144b8 <extract_number+0x36>
        *len = additional_information;
   144ae:	2000      	movs	r0, #0
   144b0:	e9c4 3000 	strd	r3, r0, [r4]
    } else {
        *len =  p->d->get64(p->d, *offset);
    }
    *offset += bytesNeeded;
    return CborNoError;
}
   144b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (unlikely(additional_information > Value64Bit))
   144b8:	2b1b      	cmp	r3, #27
   144ba:	d820      	bhi.n	144fe <extract_number+0x7c>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   144bc:	3b18      	subs	r3, #24
   144be:	2601      	movs	r6, #1
   144c0:	409e      	lsls	r6, r3
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   144c2:	687b      	ldr	r3, [r7, #4]
   144c4:	1a5b      	subs	r3, r3, r1
   144c6:	42b3      	cmp	r3, r6
   144c8:	d31c      	bcc.n	14504 <extract_number+0x82>
    } else if (bytesNeeded == 1) {
   144ca:	2e01      	cmp	r6, #1
        *len = p->d->get8(p->d, *offset);
   144cc:	6838      	ldr	r0, [r7, #0]
    } else if (bytesNeeded == 1) {
   144ce:	d109      	bne.n	144e4 <extract_number+0x62>
        *len = p->d->get8(p->d, *offset);
   144d0:	6803      	ldr	r3, [r0, #0]
        *len =  p->d->get16(p->d, *offset);
   144d2:	4798      	blx	r3
   144d4:	2300      	movs	r3, #0
   144d6:	6020      	str	r0, [r4, #0]
   144d8:	6063      	str	r3, [r4, #4]
    *offset += bytesNeeded;
   144da:	682b      	ldr	r3, [r5, #0]
   144dc:	4433      	add	r3, r6
   144de:	602b      	str	r3, [r5, #0]
    return CborNoError;
   144e0:	2000      	movs	r0, #0
   144e2:	e7e7      	b.n	144b4 <extract_number+0x32>
    } else if (bytesNeeded == 2) {
   144e4:	2e02      	cmp	r6, #2
   144e6:	d101      	bne.n	144ec <extract_number+0x6a>
        *len =  p->d->get16(p->d, *offset);
   144e8:	6843      	ldr	r3, [r0, #4]
   144ea:	e7f2      	b.n	144d2 <extract_number+0x50>
    } else if (bytesNeeded == 4) {
   144ec:	2e04      	cmp	r6, #4
   144ee:	d101      	bne.n	144f4 <extract_number+0x72>
        *len =  p->d->get32(p->d, *offset);
   144f0:	6883      	ldr	r3, [r0, #8]
   144f2:	e7ee      	b.n	144d2 <extract_number+0x50>
        *len =  p->d->get64(p->d, *offset);
   144f4:	68c3      	ldr	r3, [r0, #12]
   144f6:	4798      	blx	r3
   144f8:	e9c4 0100 	strd	r0, r1, [r4]
   144fc:	e7ed      	b.n	144da <extract_number+0x58>
        return CborErrorIllegalNumber;
   144fe:	f240 1005 	movw	r0, #261	; 0x105
   14502:	e7d7      	b.n	144b4 <extract_number+0x32>
        return CborErrorUnexpectedEOF;
   14504:	f240 1001 	movw	r0, #257	; 0x101
   14508:	e7d4      	b.n	144b4 <extract_number+0x32>

0001450a <advance_internal>:
{
   1450a:	b513      	push	{r0, r1, r4, lr}
   1450c:	4604      	mov	r4, r0
    CborError err = extract_number(it->parser, &it->offset,  &length);
   1450e:	1d01      	adds	r1, r0, #4
   14510:	466a      	mov	r2, sp
   14512:	6800      	ldr	r0, [r0, #0]
   14514:	f7ff ffb5 	bl	14482 <extract_number>
    if (err != CborNoError) {
   14518:	b958      	cbnz	r0, 14532 <advance_internal+0x28>
    if (it->type == CborByteStringType || it->type == CborTextStringType) {
   1451a:	7ba3      	ldrb	r3, [r4, #14]
   1451c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   14520:	2b40      	cmp	r3, #64	; 0x40
        it->offset += length;
   14522:	bf01      	itttt	eq
   14524:	6863      	ldreq	r3, [r4, #4]
   14526:	9a00      	ldreq	r2, [sp, #0]
   14528:	189b      	addeq	r3, r3, r2
   1452a:	6063      	streq	r3, [r4, #4]
    return preparse_next_value(it);
   1452c:	4620      	mov	r0, r4
   1452e:	f7ff ff83 	bl	14438 <preparse_next_value>
}
   14532:	b002      	add	sp, #8
   14534:	bd10      	pop	{r4, pc}

00014536 <iterate_string_chunks>:
{
   14536:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1453a:	4690      	mov	r8, r2
    if (cbor_value_is_length_known(value)) {
   1453c:	7bc2      	ldrb	r2, [r0, #15]
{
   1453e:	b087      	sub	sp, #28
   14540:	461e      	mov	r6, r3
    if (cbor_value_is_length_known(value)) {
   14542:	0752      	lsls	r2, r2, #29
    int offset = value->offset;
   14544:	6843      	ldr	r3, [r0, #4]
{
   14546:	9f10      	ldr	r7, [sp, #64]	; 0x40
    int offset = value->offset;
   14548:	9303      	str	r3, [sp, #12]
{
   1454a:	4604      	mov	r4, r0
   1454c:	4689      	mov	r9, r1
    if (cbor_value_is_length_known(value)) {
   1454e:	d446      	bmi.n	145de <iterate_string_chunks+0xa8>
    CborError err = extract_number(parser, offset, &v);
   14550:	6800      	ldr	r0, [r0, #0]
   14552:	aa04      	add	r2, sp, #16
   14554:	a903      	add	r1, sp, #12
   14556:	f7ff ff94 	bl	14482 <extract_number>
    if (err) {
   1455a:	b988      	cbnz	r0, 14580 <iterate_string_chunks+0x4a>
    *len = v;
   1455c:	f8dd a010 	ldr.w	sl, [sp, #16]
    if (v != *len)
   14560:	9b05      	ldr	r3, [sp, #20]
   14562:	4283      	cmp	r3, r0
   14564:	bf08      	it	eq
   14566:	45d2      	cmpeq	sl, sl
    *len = v;
   14568:	4655      	mov	r5, sl
    if (v != *len)
   1456a:	d15a      	bne.n	14622 <iterate_string_chunks+0xec>
        if (total > (size_t)(value->parser->end - offset))
   1456c:	f8d4 c000 	ldr.w	ip, [r4]
   14570:	9a03      	ldr	r2, [sp, #12]
   14572:	f8dc 3004 	ldr.w	r3, [ip, #4]
   14576:	1a9b      	subs	r3, r3, r2
   14578:	4553      	cmp	r3, sl
   1457a:	d204      	bcs.n	14586 <iterate_string_chunks+0x50>
            return CborErrorUnexpectedEOF;
   1457c:	f240 1001 	movw	r0, #257	; 0x101
}
   14580:	b007      	add	sp, #28
   14582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (total <= *buflen)
   14586:	f8d8 3000 	ldr.w	r3, [r8]
   1458a:	4553      	cmp	r3, sl
   1458c:	d309      	bcc.n	145a2 <iterate_string_chunks+0x6c>
            *result = !!func(value->parser->d, buffer, offset, total);
   1458e:	f8dc 0000 	ldr.w	r0, [ip]
   14592:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   14596:	4653      	mov	r3, sl
   14598:	4649      	mov	r1, r9
   1459a:	47e0      	blx	ip
   1459c:	3800      	subs	r0, #0
   1459e:	bf18      	it	ne
   145a0:	2001      	movne	r0, #1
        offset += total;
   145a2:	9b03      	ldr	r3, [sp, #12]
            *result = false;
   145a4:	7030      	strb	r0, [r6, #0]
        offset += total;
   145a6:	4453      	add	r3, sl
                ++offset;
   145a8:	9303      	str	r3, [sp, #12]
    if (*result && *buflen > total) {
   145aa:	7833      	ldrb	r3, [r6, #0]
   145ac:	b14b      	cbz	r3, 145c2 <iterate_string_chunks+0x8c>
   145ae:	f8d8 3000 	ldr.w	r3, [r8]
   145b2:	42ab      	cmp	r3, r5
   145b4:	d905      	bls.n	145c2 <iterate_string_chunks+0x8c>
        if(buffer) {
   145b6:	f1b9 0f00 	cmp.w	r9, #0
   145ba:	d002      	beq.n	145c2 <iterate_string_chunks+0x8c>
            *(buffer + total) = '\0';
   145bc:	2300      	movs	r3, #0
   145be:	f809 3005 	strb.w	r3, [r9, r5]
    *buflen = total;
   145c2:	f8c8 5000 	str.w	r5, [r8]
    if (next) {
   145c6:	2f00      	cmp	r7, #0
   145c8:	d053      	beq.n	14672 <iterate_string_chunks+0x13c>
        *next = *value;
   145ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   145ce:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
        next->offset = offset;
   145d2:	9b03      	ldr	r3, [sp, #12]
   145d4:	607b      	str	r3, [r7, #4]
        return preparse_next_value(next);
   145d6:	4638      	mov	r0, r7
   145d8:	f7ff ff2e 	bl	14438 <preparse_next_value>
   145dc:	e7d0      	b.n	14580 <iterate_string_chunks+0x4a>
        ++offset;
   145de:	3301      	adds	r3, #1
   145e0:	9303      	str	r3, [sp, #12]
        total = 0;
   145e2:	2500      	movs	r5, #0
        *result = true;
   145e4:	2301      	movs	r3, #1
   145e6:	7033      	strb	r3, [r6, #0]
                *result = false;
   145e8:	46ab      	mov	fp, r5
            if (offset == value->parser->end)
   145ea:	6823      	ldr	r3, [r4, #0]
   145ec:	9903      	ldr	r1, [sp, #12]
   145ee:	685a      	ldr	r2, [r3, #4]
   145f0:	428a      	cmp	r2, r1
   145f2:	d0c3      	beq.n	1457c <iterate_string_chunks+0x46>
            val = value->parser->d->get8(value->parser->d, offset);
   145f4:	6818      	ldr	r0, [r3, #0]
   145f6:	6803      	ldr	r3, [r0, #0]
   145f8:	4798      	blx	r3
            if (val == (uint8_t)BreakByte) {
   145fa:	28ff      	cmp	r0, #255	; 0xff
   145fc:	d102      	bne.n	14604 <iterate_string_chunks+0xce>
                ++offset;
   145fe:	9b03      	ldr	r3, [sp, #12]
   14600:	3301      	adds	r3, #1
   14602:	e7d1      	b.n	145a8 <iterate_string_chunks+0x72>
            if ((val & MajorTypeMask) != value->type)
   14604:	7ba3      	ldrb	r3, [r4, #14]
   14606:	f020 001f 	bic.w	r0, r0, #31
   1460a:	4298      	cmp	r0, r3
   1460c:	d12e      	bne.n	1466c <iterate_string_chunks+0x136>
    CborError err = extract_number(parser, offset, &v);
   1460e:	6820      	ldr	r0, [r4, #0]
   14610:	aa04      	add	r2, sp, #16
   14612:	a903      	add	r1, sp, #12
   14614:	f7ff ff35 	bl	14482 <extract_number>
    if (err) {
   14618:	2800      	cmp	r0, #0
   1461a:	d1b1      	bne.n	14580 <iterate_string_chunks+0x4a>
    *len = v;
   1461c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
    if (v != *len)
   14620:	b112      	cbz	r2, 14628 <iterate_string_chunks+0xf2>
                return CborErrorDataTooLarge;
   14622:	f44f 6080 	mov.w	r0, #1024	; 0x400
   14626:	e7ab      	b.n	14580 <iterate_string_chunks+0x4a>
#endif

static inline bool add_check_overflow(size_t v1, size_t v2, size_t *r)
{
#if ((defined(__GNUC__) && (__GNUC__ >= 5)) && !defined(__INTEL_COMPILER)) || __has_builtin(__builtin_add_overflow)
    return __builtin_add_overflow(v1, v2, r);
   14628:	eb15 0a03 	adds.w	sl, r5, r3
   1462c:	d2f9      	bcs.n	14622 <iterate_string_chunks+0xec>
            if (chunkLen > (size_t)(value->parser->end - offset))
   1462e:	6820      	ldr	r0, [r4, #0]
   14630:	9a03      	ldr	r2, [sp, #12]
   14632:	6841      	ldr	r1, [r0, #4]
   14634:	1a89      	subs	r1, r1, r2
   14636:	4299      	cmp	r1, r3
   14638:	d3a0      	bcc.n	1457c <iterate_string_chunks+0x46>
            if (*result && *buflen >= newTotal)
   1463a:	7831      	ldrb	r1, [r6, #0]
   1463c:	b199      	cbz	r1, 14666 <iterate_string_chunks+0x130>
   1463e:	f8d8 1000 	ldr.w	r1, [r8]
   14642:	4551      	cmp	r1, sl
   14644:	d30f      	bcc.n	14666 <iterate_string_chunks+0x130>
                *result = !!func(value->parser->d, buffer + total, offset, chunkLen);
   14646:	9301      	str	r3, [sp, #4]
   14648:	eb09 0105 	add.w	r1, r9, r5
   1464c:	6800      	ldr	r0, [r0, #0]
   1464e:	9d11      	ldr	r5, [sp, #68]	; 0x44
   14650:	47a8      	blx	r5
   14652:	3800      	subs	r0, #0
   14654:	bf18      	it	ne
   14656:	2001      	movne	r0, #1
   14658:	9b01      	ldr	r3, [sp, #4]
   1465a:	7030      	strb	r0, [r6, #0]
            offset += chunkLen;
   1465c:	9a03      	ldr	r2, [sp, #12]
   1465e:	4413      	add	r3, r2
   14660:	9303      	str	r3, [sp, #12]
   14662:	4655      	mov	r5, sl
        while (true) {
   14664:	e7c1      	b.n	145ea <iterate_string_chunks+0xb4>
                *result = false;
   14666:	f886 b000 	strb.w	fp, [r6]
   1466a:	e7f7      	b.n	1465c <iterate_string_chunks+0x126>
                return CborErrorIllegalType;
   1466c:	f44f 7082 	mov.w	r0, #260	; 0x104
   14670:	e786      	b.n	14580 <iterate_string_chunks+0x4a>
    return CborNoError;
   14672:	4638      	mov	r0, r7
   14674:	e784      	b.n	14580 <iterate_string_chunks+0x4a>

00014676 <_cbor_value_decode_int64_internal>:
    uint8_t val = value->parser->d->get8(value->parser->d, value->offset);
   14676:	6803      	ldr	r3, [r0, #0]
{
   14678:	b570      	push	{r4, r5, r6, lr}
   1467a:	4604      	mov	r4, r0
    uint8_t val = value->parser->d->get8(value->parser->d, value->offset);
   1467c:	6818      	ldr	r0, [r3, #0]
   1467e:	6861      	ldr	r1, [r4, #4]
   14680:	6803      	ldr	r3, [r0, #0]
   14682:	4798      	blx	r3
    if ((val & 1) == (Value32Bit & 1))
   14684:	e9d4 3100 	ldrd	r3, r1, [r4]
   14688:	f010 0501 	ands.w	r5, r0, #1
        return value->parser->d->get32(value->parser->d, value->offset + 1);
   1468c:	6818      	ldr	r0, [r3, #0]
    if ((val & 1) == (Value32Bit & 1))
   1468e:	d004      	beq.n	1469a <_cbor_value_decode_int64_internal+0x24>
}
   14690:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return value->parser->d->get64(value->parser->d, value->offset + 1);
   14694:	68c3      	ldr	r3, [r0, #12]
   14696:	3101      	adds	r1, #1
   14698:	4718      	bx	r3
        return value->parser->d->get32(value->parser->d, value->offset + 1);
   1469a:	6883      	ldr	r3, [r0, #8]
   1469c:	3101      	adds	r1, #1
   1469e:	4798      	blx	r3
}
   146a0:	4629      	mov	r1, r5
   146a2:	bd70      	pop	{r4, r5, r6, pc}

000146a4 <cbor_parser_init>:
{
   146a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   146a6:	4614      	mov	r4, r2
   146a8:	4606      	mov	r6, r0
   146aa:	460f      	mov	r7, r1
    memset(parser, 0, sizeof(*parser));
   146ac:	220c      	movs	r2, #12
   146ae:	4620      	mov	r0, r4
   146b0:	2100      	movs	r1, #0
{
   146b2:	461d      	mov	r5, r3
    memset(parser, 0, sizeof(*parser));
   146b4:	f7fd ffce 	bl	12654 <memset>
    parser->end = d->message_size;
   146b8:	69b3      	ldr	r3, [r6, #24]
    parser->d = d;
   146ba:	6026      	str	r6, [r4, #0]
    parser->flags = flags;
   146bc:	e9c4 3701 	strd	r3, r7, [r4, #4]
    it->remaining = 1;/* there's one type altogether, usually an array or map */
   146c0:	2200      	movs	r2, #0
   146c2:	2301      	movs	r3, #1
   146c4:	e9c5 2301 	strd	r2, r3, [r5, #4]
    it->parser = parser;
   146c8:	602c      	str	r4, [r5, #0]
    return preparse_value(it);
   146ca:	4628      	mov	r0, r5
}
   146cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return preparse_value(it);
   146d0:	f7ff be34 	b.w	1433c <preparse_value>

000146d4 <cbor_value_enter_container>:
{
   146d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   146d6:	4605      	mov	r5, r0
   146d8:	460c      	mov	r4, r1
    *recursed = *it;
   146da:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   146dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (it->flags & CborIteratorFlag_UnknownLength) {
   146e0:	7beb      	ldrb	r3, [r5, #15]
   146e2:	f013 0304 	ands.w	r3, r3, #4
   146e6:	d012      	beq.n	1470e <cbor_value_enter_container+0x3a>
        recursed->remaining = UINT32_MAX;
   146e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        ++recursed->offset;
   146ec:	3101      	adds	r1, #1
        recursed->remaining = UINT32_MAX;
   146ee:	60a3      	str	r3, [r4, #8]
        ++recursed->offset;
   146f0:	6061      	str	r1, [r4, #4]
        err = preparse_value(recursed);
   146f2:	4620      	mov	r0, r4
   146f4:	f7ff fe22 	bl	1433c <preparse_value>
        if (err != CborErrorUnexpectedBreak)
   146f8:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   146fc:	d115      	bne.n	1472a <cbor_value_enter_container+0x56>
        ++recursed->offset;
   146fe:	6863      	ldr	r3, [r4, #4]
   14700:	3301      	adds	r3, #1
   14702:	6063      	str	r3, [r4, #4]
    recursed->type = CborInvalidType;
   14704:	23ff      	movs	r3, #255	; 0xff
    recursed->remaining = 0;
   14706:	2000      	movs	r0, #0
    recursed->type = CborInvalidType;
   14708:	73a3      	strb	r3, [r4, #14]
    recursed->remaining = 0;
   1470a:	60a0      	str	r0, [r4, #8]
    return CborNoError;
   1470c:	e00d      	b.n	1472a <cbor_value_enter_container+0x56>
        err = extract_number(recursed->parser, &recursed->offset, &len);
   1470e:	466a      	mov	r2, sp
   14710:	1d21      	adds	r1, r4, #4
   14712:	f7ff feb6 	bl	14482 <extract_number>
        recursed->remaining = (uint32_t)len;
   14716:	e9dd 3200 	ldrd	r3, r2, [sp]
   1471a:	60a3      	str	r3, [r4, #8]
        if (recursed->remaining != len || len == UINT32_MAX) {
   1471c:	b90a      	cbnz	r2, 14722 <cbor_value_enter_container+0x4e>
   1471e:	1c59      	adds	r1, r3, #1
   14720:	d105      	bne.n	1472e <cbor_value_enter_container+0x5a>
            recursed->offset = it->offset;
   14722:	686b      	ldr	r3, [r5, #4]
   14724:	6063      	str	r3, [r4, #4]
            return CborErrorDataTooLarge;
   14726:	f44f 6080 	mov.w	r0, #1024	; 0x400
}
   1472a:	b003      	add	sp, #12
   1472c:	bd30      	pop	{r4, r5, pc}
        if (recursed->type == CborMapType) {
   1472e:	7ba1      	ldrb	r1, [r4, #14]
   14730:	29a0      	cmp	r1, #160	; 0xa0
   14732:	d103      	bne.n	1473c <cbor_value_enter_container+0x68>
            if (recursed->remaining > UINT32_MAX / 2) {
   14734:	2b00      	cmp	r3, #0
   14736:	dbf4      	blt.n	14722 <cbor_value_enter_container+0x4e>
            recursed->remaining *= 2;
   14738:	0059      	lsls	r1, r3, #1
   1473a:	60a1      	str	r1, [r4, #8]
        if (len != 0)
   1473c:	4313      	orrs	r3, r2
   1473e:	d0e1      	beq.n	14704 <cbor_value_enter_container+0x30>
            return preparse_value(recursed);
   14740:	4620      	mov	r0, r4
   14742:	f7ff fdfb 	bl	1433c <preparse_value>
   14746:	e7f0      	b.n	1472a <cbor_value_enter_container+0x56>

00014748 <cbor_value_leave_container>:
    it->offset = recursed->offset;
   14748:	684b      	ldr	r3, [r1, #4]
   1474a:	6043      	str	r3, [r0, #4]
    return preparse_next_value(it);
   1474c:	f7ff be74 	b.w	14438 <preparse_next_value>

00014750 <advance_recursive>:
{
   14750:	b530      	push	{r4, r5, lr}
    if (is_fixed_type(it->type))
   14752:	7b83      	ldrb	r3, [r0, #14]
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   14754:	f003 02df 	and.w	r2, r3, #223	; 0xdf
   14758:	2a40      	cmp	r2, #64	; 0x40
{
   1475a:	b085      	sub	sp, #20
   1475c:	4604      	mov	r4, r0
   1475e:	460d      	mov	r5, r1
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   14760:	d008      	beq.n	14774 <advance_recursive+0x24>
   14762:	2b80      	cmp	r3, #128	; 0x80
   14764:	d012      	beq.n	1478c <advance_recursive+0x3c>
    if (is_fixed_type(it->type))
   14766:	2ba0      	cmp	r3, #160	; 0xa0
   14768:	d010      	beq.n	1478c <advance_recursive+0x3c>
}
   1476a:	b005      	add	sp, #20
   1476c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return advance_internal(it);
   14770:	f7ff becb 	b.w	1450a <advance_internal>
    if (!cbor_value_is_container(it)) {
   14774:	2ba0      	cmp	r3, #160	; 0xa0
   14776:	d009      	beq.n	1478c <advance_recursive+0x3c>
        size_t len = SIZE_MAX;
   14778:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1477c:	9300      	str	r3, [sp, #0]
        return _cbor_value_copy_string(it, NULL, &len, it);
   1477e:	466a      	mov	r2, sp
   14780:	4603      	mov	r3, r0
   14782:	2100      	movs	r1, #0
   14784:	f7fc f952 	bl	10a2c <_cbor_value_copy_string>
}
   14788:	b005      	add	sp, #20
   1478a:	bd30      	pop	{r4, r5, pc}
    if (nestingLevel == CBOR_PARSER_MAX_RECURSIONS)
   1478c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   14790:	d015      	beq.n	147be <advance_recursive+0x6e>
    err = cbor_value_enter_container(it, &recursed);
   14792:	4669      	mov	r1, sp
   14794:	4620      	mov	r0, r4
   14796:	f7ff ff9d 	bl	146d4 <cbor_value_enter_container>
    if (err)
   1479a:	2800      	cmp	r0, #0
   1479c:	d1f4      	bne.n	14788 <advance_recursive+0x38>
        err = advance_recursive(&recursed, nestingLevel + 1);
   1479e:	3501      	adds	r5, #1
    while (!cbor_value_at_end(&recursed)) {
   147a0:	9b02      	ldr	r3, [sp, #8]
   147a2:	b92b      	cbnz	r3, 147b0 <advance_recursive+0x60>
    it->offset = recursed->offset;
   147a4:	9b01      	ldr	r3, [sp, #4]
   147a6:	6063      	str	r3, [r4, #4]
    return preparse_next_value(it);
   147a8:	4620      	mov	r0, r4
   147aa:	f7ff fe45 	bl	14438 <preparse_next_value>
    return cbor_value_leave_container(it, &recursed);
   147ae:	e7eb      	b.n	14788 <advance_recursive+0x38>
        err = advance_recursive(&recursed, nestingLevel + 1);
   147b0:	4629      	mov	r1, r5
   147b2:	4668      	mov	r0, sp
   147b4:	f7ff ffcc 	bl	14750 <advance_recursive>
        if (err)
   147b8:	2800      	cmp	r0, #0
   147ba:	d0f1      	beq.n	147a0 <advance_recursive+0x50>
   147bc:	e7e4      	b.n	14788 <advance_recursive+0x38>
        return CborErrorNestingTooDeep;
   147be:	f240 4001 	movw	r0, #1025	; 0x401
   147c2:	e7e1      	b.n	14788 <advance_recursive+0x38>

000147c4 <cbor_value_advance>:
    if (!it->remaining)
   147c4:	6883      	ldr	r3, [r0, #8]
   147c6:	b113      	cbz	r3, 147ce <cbor_value_advance+0xa>
    return advance_recursive(it, 0);
   147c8:	2100      	movs	r1, #0
   147ca:	f7ff bfc1 	b.w	14750 <advance_recursive>
}
   147ce:	2003      	movs	r0, #3
   147d0:	4770      	bx	lr

000147d2 <cbor_value_calculate_string_length>:
    *len = SIZE_MAX;
   147d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   147d6:	600b      	str	r3, [r1, #0]
    return _cbor_value_copy_string(value, NULL, len, NULL);
   147d8:	2300      	movs	r3, #0
{
   147da:	460a      	mov	r2, r1
    return _cbor_value_copy_string(value, NULL, len, NULL);
   147dc:	4619      	mov	r1, r3
   147de:	f7fc b925 	b.w	10a2c <_cbor_value_copy_string>

000147e2 <cbor_value_get_half_float>:
CborError cbor_value_get_half_float(const CborValue *value, void *result)
{
    assert(cbor_value_is_half_float(value));

    /* size has been computed already */
    uint16_t v = value->parser->d->get16(value->parser->d, value->offset + 1);
   147e2:	6802      	ldr	r2, [r0, #0]
{
   147e4:	4603      	mov	r3, r0
   147e6:	b513      	push	{r0, r1, r4, lr}
    uint16_t v = value->parser->d->get16(value->parser->d, value->offset + 1);
   147e8:	6810      	ldr	r0, [r2, #0]
{
   147ea:	460c      	mov	r4, r1
    uint16_t v = value->parser->d->get16(value->parser->d, value->offset + 1);
   147ec:	6859      	ldr	r1, [r3, #4]
   147ee:	6843      	ldr	r3, [r0, #4]
   147f0:	3101      	adds	r1, #1
   147f2:	4798      	blx	r3
    memcpy(result, &v, sizeof(v));
   147f4:	2202      	movs	r2, #2
    uint16_t v = value->parser->d->get16(value->parser->d, value->offset + 1);
   147f6:	f8ad 0006 	strh.w	r0, [sp, #6]
    memcpy(result, &v, sizeof(v));
   147fa:	f10d 0106 	add.w	r1, sp, #6
   147fe:	4620      	mov	r0, r4
   14800:	f7fd ff1d 	bl	1263e <memcpy>
    return CborNoError;
}
   14804:	2000      	movs	r0, #0
   14806:	b002      	add	sp, #8
   14808:	bd10      	pop	{r4, pc}

0001480a <z_device_state_init>:
}
   1480a:	4770      	bx	lr

0001480c <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1480c:	b138      	cbz	r0, 1481e <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1480e:	68c3      	ldr	r3, [r0, #12]
   14810:	8818      	ldrh	r0, [r3, #0]
   14812:	f3c0 0008 	ubfx	r0, r0, #0, #9
   14816:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   1481a:	4258      	negs	r0, r3
   1481c:	4158      	adcs	r0, r3
}
   1481e:	4770      	bx	lr

00014820 <arch_system_halt>:
	__asm__ volatile(
   14820:	f04f 0220 	mov.w	r2, #32
   14824:	f3ef 8311 	mrs	r3, BASEPRI
   14828:	f382 8812 	msr	BASEPRI_MAX, r2
   1482c:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
   14830:	e7fe      	b.n	14830 <arch_system_halt+0x10>

00014832 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   14832:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
   14834:	f7ff fff4 	bl	14820 <arch_system_halt>

00014838 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   14838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1483a:	4605      	mov	r5, r0
   1483c:	460e      	mov	r6, r1
   1483e:	f04f 0320 	mov.w	r3, #32
   14842:	f3ef 8711 	mrs	r7, BASEPRI
   14846:	f383 8812 	msr	BASEPRI_MAX, r3
   1484a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1484e:	f7fc ff99 	bl	11784 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   14852:	4631      	mov	r1, r6
   14854:	4604      	mov	r4, r0
   14856:	4628      	mov	r0, r5
   14858:	f7ff ffeb 	bl	14832 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1485c:	f387 8811 	msr	BASEPRI, r7
   14860:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   14864:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   14866:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1486a:	f7f9 b947 	b.w	dafc <z_impl_k_thread_abort>

0001486e <z_early_memset>:
	(void) memset(dst, c, n);
   1486e:	f7fd bef1 	b.w	12654 <memset>

00014872 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   14872:	f7fd bee4 	b.w	1263e <memcpy>

00014876 <k_heap_init>:
{
   14876:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   14878:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1487c:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   14880:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   14882:	f7fd bcc7 	b.w	12214 <sys_heap_init>

00014886 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   14886:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1488a:	b085      	sub	sp, #20
   1488c:	4606      	mov	r6, r0
   1488e:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   14890:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   14894:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   14896:	f000 face 	bl	14e36 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1489a:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1489e:	4605      	mov	r5, r0
   148a0:	460f      	mov	r7, r1
	__asm__ volatile(
   148a2:	f04f 0320 	mov.w	r3, #32
   148a6:	f3ef 8411 	mrs	r4, BASEPRI
   148aa:	f383 8812 	msr	BASEPRI_MAX, r3
   148ae:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   148b2:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   148b6:	464a      	mov	r2, r9
   148b8:	4641      	mov	r1, r8
   148ba:	4630      	mov	r0, r6
   148bc:	f7fd fc42 	bl	12144 <sys_heap_aligned_alloc>
   148c0:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   148c2:	f7fd f913 	bl	11aec <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   148c6:	9b03      	ldr	r3, [sp, #12]
   148c8:	b13b      	cbz	r3, 148da <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   148ca:	f384 8811 	msr	BASEPRI, r4
   148ce:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   148d2:	4618      	mov	r0, r3
   148d4:	b005      	add	sp, #20
   148d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   148da:	1a28      	subs	r0, r5, r0
   148dc:	eb67 0101 	sbc.w	r1, r7, r1
   148e0:	2801      	cmp	r0, #1
   148e2:	f171 0200 	sbcs.w	r2, r1, #0
   148e6:	dbf0      	blt.n	148ca <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   148e8:	e9cd 0100 	strd	r0, r1, [sp]
   148ec:	465a      	mov	r2, fp
   148ee:	4621      	mov	r1, r4
   148f0:	4650      	mov	r0, sl
   148f2:	f7fc fe37 	bl	11564 <z_pend_curr>
	__asm__ volatile(
   148f6:	f04f 0320 	mov.w	r3, #32
   148fa:	f3ef 8411 	mrs	r4, BASEPRI
   148fe:	f383 8812 	msr	BASEPRI_MAX, r3
   14902:	f3bf 8f6f 	isb	sy
   14906:	e7d6      	b.n	148b6 <k_heap_aligned_alloc+0x30>

00014908 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   14908:	b538      	push	{r3, r4, r5, lr}
   1490a:	4604      	mov	r4, r0
   1490c:	f04f 0320 	mov.w	r3, #32
   14910:	f3ef 8511 	mrs	r5, BASEPRI
   14914:	f383 8812 	msr	BASEPRI_MAX, r3
   14918:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   1491c:	f7fd fbda 	bl	120d4 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   14920:	f104 000c 	add.w	r0, r4, #12
   14924:	f000 fa12 	bl	14d4c <z_unpend_all>
   14928:	b130      	cbz	r0, 14938 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   1492a:	4629      	mov	r1, r5
   1492c:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   14930:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   14934:	f7fc bcc2 	b.w	112bc <z_reschedule>
	__asm__ volatile(
   14938:	f385 8811 	msr	BASEPRI, r5
   1493c:	f3bf 8f6f 	isb	sy
}
   14940:	bd38      	pop	{r3, r4, r5, pc}

00014942 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   14942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14944:	4604      	mov	r4, r0
   14946:	460d      	mov	r5, r1
	__asm__ volatile(
   14948:	f04f 0320 	mov.w	r3, #32
   1494c:	f3ef 8611 	mrs	r6, BASEPRI
   14950:	f383 8812 	msr	BASEPRI_MAX, r3
   14954:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   14958:	6947      	ldr	r7, [r0, #20]
   1495a:	b977      	cbnz	r7, 1497a <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1495c:	f000 f9de 	bl	14d1c <z_unpend_first_thread>

		if (pending_thread != NULL) {
   14960:	b158      	cbz	r0, 1497a <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   14962:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   14964:	6142      	str	r2, [r0, #20]
   14966:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
   14968:	f000 f97c 	bl	14c64 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1496c:	4631      	mov	r1, r6
   1496e:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   14972:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   14976:	f7fc bca1 	b.w	112bc <z_reschedule>
	**(char ***) mem = slab->free_list;
   1497a:	682b      	ldr	r3, [r5, #0]
   1497c:	6962      	ldr	r2, [r4, #20]
   1497e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   14980:	682b      	ldr	r3, [r5, #0]
   14982:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   14984:	69a3      	ldr	r3, [r4, #24]
   14986:	3b01      	subs	r3, #1
   14988:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1498a:	f386 8811 	msr	BASEPRI, r6
   1498e:	f3bf 8f6f 	isb	sy
}
   14992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00014994 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14994:	f3ef 8005 	mrs	r0, IPSR
}
   14998:	3800      	subs	r0, #0
   1499a:	bf18      	it	ne
   1499c:	2001      	movne	r0, #1
   1499e:	4770      	bx	lr

000149a0 <z_impl_k_thread_name_set>:
}
   149a0:	f06f 0057 	mvn.w	r0, #87	; 0x57
   149a4:	4770      	bx	lr

000149a6 <z_impl_k_thread_start>:
	z_sched_start(thread);
   149a6:	f7fc bd81 	b.w	114ac <z_sched_start>

000149aa <z_pm_save_idle_exit>:
{
   149aa:	b508      	push	{r3, lr}
	pm_system_resume();
   149ac:	f7f8 fcd6 	bl	d35c <pm_system_resume>
}
   149b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   149b4:	f7ff b907 	b.w	13bc6 <sys_clock_idle_exit>

000149b8 <queue_insert>:
{
   149b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   149bc:	4699      	mov	r9, r3
   149be:	4604      	mov	r4, r0
   149c0:	f89d 3020 	ldrb.w	r3, [sp, #32]
   149c4:	460d      	mov	r5, r1
   149c6:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   149c8:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   149cc:	f04f 0220 	mov.w	r2, #32
   149d0:	f3ef 8611 	mrs	r6, BASEPRI
   149d4:	f382 8812 	msr	BASEPRI_MAX, r2
   149d8:	f3bf 8f6f 	isb	sy
	if (is_append) {
   149dc:	b103      	cbz	r3, 149e0 <queue_insert+0x28>
	return list->tail;
   149de:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   149e0:	4638      	mov	r0, r7
   149e2:	f000 f99b 	bl	14d1c <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   149e6:	b158      	cbz	r0, 14a00 <queue_insert+0x48>
   149e8:	2400      	movs	r4, #0
   149ea:	6784      	str	r4, [r0, #120]	; 0x78
   149ec:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   149f0:	f000 f938 	bl	14c64 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   149f4:	4638      	mov	r0, r7
   149f6:	4631      	mov	r1, r6
   149f8:	f7fc fc60 	bl	112bc <z_reschedule>
	return 0;
   149fc:	2000      	movs	r0, #0
   149fe:	e00c      	b.n	14a1a <queue_insert+0x62>
	if (alloc) {
   14a00:	f1b9 0f00 	cmp.w	r9, #0
   14a04:	d01c      	beq.n	14a40 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   14a06:	2108      	movs	r1, #8
   14a08:	f7fd f920 	bl	11c4c <z_thread_aligned_alloc>
		if (anode == NULL) {
   14a0c:	b938      	cbnz	r0, 14a1e <queue_insert+0x66>
	__asm__ volatile(
   14a0e:	f386 8811 	msr	BASEPRI, r6
   14a12:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   14a16:	f06f 000b 	mvn.w	r0, #11
}
   14a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   14a1e:	2301      	movs	r3, #1
		anode->data = data;
   14a20:	f8c0 8004 	str.w	r8, [r0, #4]
   14a24:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14a26:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14a28:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   14a2c:	b965      	cbnz	r5, 14a48 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   14a2e:	6823      	ldr	r3, [r4, #0]
   14a30:	4313      	orrs	r3, r2
   14a32:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   14a34:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   14a36:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   14a38:	2b00      	cmp	r3, #0
   14a3a:	d1db      	bne.n	149f4 <queue_insert+0x3c>
	list->tail = node;
   14a3c:	6060      	str	r0, [r4, #4]
}
   14a3e:	e7d9      	b.n	149f4 <queue_insert+0x3c>
	node->next_and_flags = flags;
   14a40:	f8c8 9000 	str.w	r9, [r8]
}
   14a44:	4640      	mov	r0, r8
   14a46:	e7ee      	b.n	14a26 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14a48:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   14a4a:	f033 0303 	bics.w	r3, r3, #3
   14a4e:	d10b      	bne.n	14a68 <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   14a50:	6002      	str	r2, [r0, #0]
	return list->tail;
   14a52:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   14a54:	b912      	cbnz	r2, 14a5c <queue_insert+0xa4>
	list->head = node;
   14a56:	e9c4 0000 	strd	r0, r0, [r4]
}
   14a5a:	e7cb      	b.n	149f4 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14a5c:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14a5e:	f003 0303 	and.w	r3, r3, #3
   14a62:	4303      	orrs	r3, r0
   14a64:	6013      	str	r3, [r2, #0]
   14a66:	e7e9      	b.n	14a3c <queue_insert+0x84>
   14a68:	4313      	orrs	r3, r2
   14a6a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14a6c:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14a6e:	f003 0303 	and.w	r3, r3, #3
   14a72:	4318      	orrs	r0, r3
   14a74:	6028      	str	r0, [r5, #0]
}
   14a76:	e7bd      	b.n	149f4 <queue_insert+0x3c>

00014a78 <z_queue_node_peek>:
{
   14a78:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   14a7a:	4604      	mov	r4, r0
   14a7c:	b130      	cbz	r0, 14a8c <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14a7e:	6802      	ldr	r2, [r0, #0]
   14a80:	0793      	lsls	r3, r2, #30
   14a82:	d003      	beq.n	14a8c <z_queue_node_peek+0x14>
		ret = anode->data;
   14a84:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   14a86:	b109      	cbz	r1, 14a8c <z_queue_node_peek+0x14>
			k_free(anode);
   14a88:	f000 fa00 	bl	14e8c <k_free>
}
   14a8c:	4620      	mov	r0, r4
   14a8e:	bd10      	pop	{r4, pc}

00014a90 <z_impl_k_queue_init>:
	list->head = NULL;
   14a90:	2300      	movs	r3, #0
	list->tail = NULL;
   14a92:	e9c0 3300 	strd	r3, r3, [r0]
   14a96:	f100 0308 	add.w	r3, r0, #8
   14a9a:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   14a9e:	4770      	bx	lr

00014aa0 <k_queue_append>:
{
   14aa0:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   14aa2:	2301      	movs	r3, #1
   14aa4:	9300      	str	r3, [sp, #0]
   14aa6:	2300      	movs	r3, #0
{
   14aa8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   14aaa:	4619      	mov	r1, r3
   14aac:	f7ff ff84 	bl	149b8 <queue_insert>
}
   14ab0:	b003      	add	sp, #12
   14ab2:	f85d fb04 	ldr.w	pc, [sp], #4

00014ab6 <k_queue_prepend>:
{
   14ab6:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   14ab8:	2300      	movs	r3, #0
{
   14aba:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   14abc:	9300      	str	r3, [sp, #0]
   14abe:	4619      	mov	r1, r3
   14ac0:	f7ff ff7a 	bl	149b8 <queue_insert>
}
   14ac4:	b003      	add	sp, #12
   14ac6:	f85d fb04 	ldr.w	pc, [sp], #4

00014aca <k_queue_append_list>:
{
   14aca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14ace:	4605      	mov	r5, r0
   14ad0:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   14ad2:	460c      	mov	r4, r1
   14ad4:	b369      	cbz	r1, 14b32 <k_queue_append_list+0x68>
   14ad6:	b362      	cbz	r2, 14b32 <k_queue_append_list+0x68>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   14ad8:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   14adc:	f04f 0320 	mov.w	r3, #32
   14ae0:	f3ef 8711 	mrs	r7, BASEPRI
   14ae4:	f383 8812 	msr	BASEPRI_MAX, r3
   14ae8:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   14aec:	4640      	mov	r0, r8
   14aee:	f000 f915 	bl	14d1c <z_unpend_first_thread>
   14af2:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   14af6:	b920      	cbnz	r0, 14b02 <k_queue_append_list+0x38>
	return list->tail;
   14af8:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   14afa:	b9a2      	cbnz	r2, 14b26 <k_queue_append_list+0x5c>
	list->head = node;
   14afc:	602c      	str	r4, [r5, #0]
	list->tail = node;
   14afe:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   14b00:	e00a      	b.n	14b18 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   14b02:	6144      	str	r4, [r0, #20]
   14b04:	f8c0 9078 	str.w	r9, [r0, #120]	; 0x78
	z_ready_thread(thread);
   14b08:	f000 f8ac 	bl	14c64 <z_ready_thread>
		head = *(void **)head;
   14b0c:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   14b0e:	4640      	mov	r0, r8
   14b10:	f000 f904 	bl	14d1c <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   14b14:	2c00      	cmp	r4, #0
   14b16:	d1ee      	bne.n	14af6 <k_queue_append_list+0x2c>
	z_reschedule(&queue->lock, key);
   14b18:	4640      	mov	r0, r8
   14b1a:	4639      	mov	r1, r7
   14b1c:	f7fc fbce 	bl	112bc <z_reschedule>
	return 0;
   14b20:	2000      	movs	r0, #0
}
   14b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14b26:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14b28:	f003 0303 	and.w	r3, r3, #3
   14b2c:	431c      	orrs	r4, r3
   14b2e:	6014      	str	r4, [r2, #0]
}
   14b30:	e7e5      	b.n	14afe <k_queue_append_list+0x34>
		return -EINVAL;
   14b32:	f06f 0015 	mvn.w	r0, #21
   14b36:	e7f4      	b.n	14b22 <k_queue_append_list+0x58>

00014b38 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   14b38:	b13a      	cbz	r2, 14b4a <z_impl_k_sem_init+0x12>
   14b3a:	428a      	cmp	r2, r1
   14b3c:	d305      	bcc.n	14b4a <z_impl_k_sem_init+0x12>
	sem->limit = limit;
   14b3e:	e9c0 1202 	strd	r1, r2, [r0, #8]
   14b42:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
   14b46:	2000      	movs	r0, #0
   14b48:	4770      	bx	lr
		return -EINVAL;
   14b4a:	f06f 0015 	mvn.w	r0, #21
}
   14b4e:	4770      	bx	lr

00014b50 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   14b50:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   14b52:	2301      	movs	r3, #1
   14b54:	408b      	lsls	r3, r1
   14b56:	ea22 0303 	bic.w	r3, r2, r3
   14b5a:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   14b5c:	fa22 f001 	lsr.w	r0, r2, r1
}
   14b60:	f000 0001 	and.w	r0, r0, #1
   14b64:	4770      	bx	lr

00014b66 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   14b66:	b120      	cbz	r0, 14b72 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   14b68:	2200      	movs	r2, #0
   14b6a:	4611      	mov	r1, r2
   14b6c:	3088      	adds	r0, #136	; 0x88
   14b6e:	f000 b8fd 	b.w	14d6c <z_sched_wake>
}
   14b72:	4770      	bx	lr

00014b74 <k_work_init>:
{
   14b74:	b538      	push	{r3, r4, r5, lr}
   14b76:	4604      	mov	r4, r0
   14b78:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   14b7a:	2210      	movs	r2, #16
   14b7c:	2100      	movs	r1, #0
   14b7e:	f7fd fd69 	bl	12654 <memset>
   14b82:	6065      	str	r5, [r4, #4]
}
   14b84:	bd38      	pop	{r3, r4, r5, pc}

00014b86 <k_work_submit_to_queue>:
{
   14b86:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14b88:	9001      	str	r0, [sp, #4]
   14b8a:	4608      	mov	r0, r1
   14b8c:	f04f 0320 	mov.w	r3, #32
   14b90:	f3ef 8511 	mrs	r5, BASEPRI
   14b94:	f383 8812 	msr	BASEPRI_MAX, r3
   14b98:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   14b9c:	a901      	add	r1, sp, #4
   14b9e:	f7fc fab9 	bl	11114 <submit_to_queue_locked>
   14ba2:	4604      	mov	r4, r0
	__asm__ volatile(
   14ba4:	f385 8811 	msr	BASEPRI, r5
   14ba8:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   14bac:	2800      	cmp	r0, #0
   14bae:	dd04      	ble.n	14bba <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   14bb0:	f7fc fdee 	bl	11790 <z_impl_k_is_preempt_thread>
   14bb4:	b108      	cbz	r0, 14bba <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   14bb6:	f7fc fd43 	bl	11640 <z_impl_k_yield>
}
   14bba:	4620      	mov	r0, r4
   14bbc:	b003      	add	sp, #12
   14bbe:	bd30      	pop	{r4, r5, pc}

00014bc0 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   14bc0:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   14bc4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   14bc6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   14bc8:	2300      	movs	r3, #0
	node->prev = NULL;
   14bca:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
   14bce:	4770      	bx	lr

00014bd0 <unpend_thread_no_timeout>:
{
   14bd0:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   14bd2:	f7ff fff5 	bl	14bc0 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   14bd6:	7b43      	ldrb	r3, [r0, #13]
   14bd8:	f023 0302 	bic.w	r3, r3, #2
   14bdc:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   14bde:	2300      	movs	r3, #0
   14be0:	6083      	str	r3, [r0, #8]
}
   14be2:	bd08      	pop	{r3, pc}

00014be4 <z_unpend_thread_no_timeout>:
{
   14be4:	b508      	push	{r3, lr}
	__asm__ volatile(
   14be6:	f04f 0320 	mov.w	r3, #32
   14bea:	f3ef 8111 	mrs	r1, BASEPRI
   14bee:	f383 8812 	msr	BASEPRI_MAX, r3
   14bf2:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   14bf6:	f7ff ffeb 	bl	14bd0 <unpend_thread_no_timeout>
	__asm__ volatile(
   14bfa:	f381 8811 	msr	BASEPRI, r1
   14bfe:	f3bf 8f6f 	isb	sy
}
   14c02:	bd08      	pop	{r3, pc}

00014c04 <z_unpend_thread>:
{
   14c04:	b510      	push	{r4, lr}
	__asm__ volatile(
   14c06:	f04f 0320 	mov.w	r3, #32
   14c0a:	f3ef 8411 	mrs	r4, BASEPRI
   14c0e:	f383 8812 	msr	BASEPRI_MAX, r3
   14c12:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   14c16:	f7ff ffdb 	bl	14bd0 <unpend_thread_no_timeout>
	__asm__ volatile(
   14c1a:	f384 8811 	msr	BASEPRI, r4
   14c1e:	f3bf 8f6f 	isb	sy
}
   14c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14c26:	3018      	adds	r0, #24
   14c28:	f000 b8bd 	b.w	14da6 <z_abort_timeout>

00014c2c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   14c2c:	4603      	mov	r3, r0
   14c2e:	b920      	cbnz	r0, 14c3a <z_reschedule_irqlock+0xe>
   14c30:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   14c34:	b90a      	cbnz	r2, 14c3a <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   14c36:	f7f8 bd1d 	b.w	d674 <arch_swap>
   14c3a:	f383 8811 	msr	BASEPRI, r3
   14c3e:	f3bf 8f6f 	isb	sy
}
   14c42:	4770      	bx	lr

00014c44 <z_reschedule_unlocked>:
	__asm__ volatile(
   14c44:	f04f 0320 	mov.w	r3, #32
   14c48:	f3ef 8011 	mrs	r0, BASEPRI
   14c4c:	f383 8812 	msr	BASEPRI_MAX, r3
   14c50:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   14c54:	f7ff bfea 	b.w	14c2c <z_reschedule_irqlock>

00014c58 <z_priq_dumb_best>:
{
   14c58:	4603      	mov	r3, r0
	return list->head == list;
   14c5a:	6800      	ldr	r0, [r0, #0]
}
   14c5c:	4283      	cmp	r3, r0
   14c5e:	bf08      	it	eq
   14c60:	2000      	moveq	r0, #0
   14c62:	4770      	bx	lr

00014c64 <z_ready_thread>:
{
   14c64:	b510      	push	{r4, lr}
   14c66:	f04f 0320 	mov.w	r3, #32
   14c6a:	f3ef 8411 	mrs	r4, BASEPRI
   14c6e:	f383 8812 	msr	BASEPRI_MAX, r3
   14c72:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   14c76:	f7fc fbe3 	bl	11440 <ready_thread>
	__asm__ volatile(
   14c7a:	f384 8811 	msr	BASEPRI, r4
   14c7e:	f3bf 8f6f 	isb	sy
}
   14c82:	bd10      	pop	{r4, pc}

00014c84 <z_thread_timeout>:
{
   14c84:	b510      	push	{r4, lr}
   14c86:	4601      	mov	r1, r0
	__asm__ volatile(
   14c88:	f04f 0320 	mov.w	r3, #32
   14c8c:	f3ef 8411 	mrs	r4, BASEPRI
   14c90:	f383 8812 	msr	BASEPRI_MAX, r3
   14c94:	f3bf 8f6f 	isb	sy
		if (!killed) {
   14c98:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   14c9c:	f013 0f28 	tst.w	r3, #40	; 0x28
   14ca0:	d10d      	bne.n	14cbe <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   14ca2:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   14ca6:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   14ca8:	b10b      	cbz	r3, 14cae <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   14caa:	f7ff ff91 	bl	14bd0 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   14cae:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   14cb2:	f023 0314 	bic.w	r3, r3, #20
   14cb6:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   14cba:	f7fc fbc1 	bl	11440 <ready_thread>
	__asm__ volatile(
   14cbe:	f384 8811 	msr	BASEPRI, r4
   14cc2:	f3bf 8f6f 	isb	sy
}
   14cc6:	bd10      	pop	{r4, pc}

00014cc8 <add_to_waitq_locked>:
{
   14cc8:	b538      	push	{r3, r4, r5, lr}
   14cca:	4604      	mov	r4, r0
   14ccc:	460d      	mov	r5, r1
	unready_thread(thread);
   14cce:	f7fc fc0b 	bl	114e8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   14cd2:	7b63      	ldrb	r3, [r4, #13]
   14cd4:	f043 0302 	orr.w	r3, r3, #2
   14cd8:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   14cda:	b195      	cbz	r5, 14d02 <add_to_waitq_locked+0x3a>
   14cdc:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   14cde:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14ce0:	429d      	cmp	r5, r3
   14ce2:	d015      	beq.n	14d10 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14ce4:	b1a3      	cbz	r3, 14d10 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   14ce6:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   14cea:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   14cee:	4291      	cmp	r1, r2
   14cf0:	d008      	beq.n	14d04 <add_to_waitq_locked+0x3c>
		return b2 - b1;
   14cf2:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   14cf4:	2a00      	cmp	r2, #0
   14cf6:	dd05      	ble.n	14d04 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   14cf8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   14cfa:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   14cfe:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   14d00:	605c      	str	r4, [r3, #4]
}
   14d02:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   14d04:	686a      	ldr	r2, [r5, #4]
   14d06:	4293      	cmp	r3, r2
   14d08:	d002      	beq.n	14d10 <add_to_waitq_locked+0x48>
   14d0a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14d0c:	2b00      	cmp	r3, #0
   14d0e:	d1ec      	bne.n	14cea <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   14d10:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   14d12:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   14d16:	601c      	str	r4, [r3, #0]
	list->tail = node;
   14d18:	606c      	str	r4, [r5, #4]
}
   14d1a:	e7f2      	b.n	14d02 <add_to_waitq_locked+0x3a>

00014d1c <z_unpend_first_thread>:
{
   14d1c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   14d1e:	f04f 0320 	mov.w	r3, #32
   14d22:	f3ef 8511 	mrs	r5, BASEPRI
   14d26:	f383 8812 	msr	BASEPRI_MAX, r3
   14d2a:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   14d2e:	f7ff ff93 	bl	14c58 <z_priq_dumb_best>
		if (thread != NULL) {
   14d32:	4604      	mov	r4, r0
   14d34:	b120      	cbz	r0, 14d40 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   14d36:	f7ff ff4b 	bl	14bd0 <unpend_thread_no_timeout>
   14d3a:	3018      	adds	r0, #24
   14d3c:	f000 f833 	bl	14da6 <z_abort_timeout>
	__asm__ volatile(
   14d40:	f385 8811 	msr	BASEPRI, r5
   14d44:	f3bf 8f6f 	isb	sy
}
   14d48:	4620      	mov	r0, r4
   14d4a:	bd38      	pop	{r3, r4, r5, pc}

00014d4c <z_unpend_all>:
{
   14d4c:	b538      	push	{r3, r4, r5, lr}
   14d4e:	4605      	mov	r5, r0
	int need_sched = 0;
   14d50:	2000      	movs	r0, #0
	return list->head == list;
   14d52:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14d54:	42a5      	cmp	r5, r4
   14d56:	d000      	beq.n	14d5a <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   14d58:	b904      	cbnz	r4, 14d5c <z_unpend_all+0x10>
}
   14d5a:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   14d5c:	4620      	mov	r0, r4
   14d5e:	f7ff ff51 	bl	14c04 <z_unpend_thread>
		z_ready_thread(thread);
   14d62:	4620      	mov	r0, r4
   14d64:	f7ff ff7e 	bl	14c64 <z_ready_thread>
		need_sched = 1;
   14d68:	2001      	movs	r0, #1
   14d6a:	e7f2      	b.n	14d52 <z_unpend_all+0x6>

00014d6c <z_sched_wake>:
{
   14d6c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   14d6e:	f04f 0320 	mov.w	r3, #32
   14d72:	f3ef 8511 	mrs	r5, BASEPRI
   14d76:	f383 8812 	msr	BASEPRI_MAX, r3
   14d7a:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   14d7e:	f7ff ff6b 	bl	14c58 <z_priq_dumb_best>
		if (thread != NULL) {
   14d82:	4604      	mov	r4, r0
   14d84:	b150      	cbz	r0, 14d9c <z_sched_wake+0x30>
   14d86:	6781      	str	r1, [r0, #120]	; 0x78
   14d88:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   14d8a:	f7ff ff21 	bl	14bd0 <unpend_thread_no_timeout>
   14d8e:	3018      	adds	r0, #24
   14d90:	f000 f809 	bl	14da6 <z_abort_timeout>
			ready_thread(thread);
   14d94:	4620      	mov	r0, r4
   14d96:	f7fc fb53 	bl	11440 <ready_thread>
			ret = true;
   14d9a:	2001      	movs	r0, #1
	__asm__ volatile(
   14d9c:	f385 8811 	msr	BASEPRI, r5
   14da0:	f3bf 8f6f 	isb	sy
}
   14da4:	bd38      	pop	{r3, r4, r5, pc}

00014da6 <z_abort_timeout>:
{
   14da6:	b510      	push	{r4, lr}
	__asm__ volatile(
   14da8:	f04f 0220 	mov.w	r2, #32
   14dac:	f3ef 8411 	mrs	r4, BASEPRI
   14db0:	f382 8812 	msr	BASEPRI_MAX, r2
   14db4:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   14db8:	6803      	ldr	r3, [r0, #0]
   14dba:	b13b      	cbz	r3, 14dcc <z_abort_timeout+0x26>
			remove_timeout(to);
   14dbc:	f7fc fda6 	bl	1190c <remove_timeout>
			ret = 0;
   14dc0:	2000      	movs	r0, #0
	__asm__ volatile(
   14dc2:	f384 8811 	msr	BASEPRI, r4
   14dc6:	f3bf 8f6f 	isb	sy
}
   14dca:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   14dcc:	f06f 0015 	mvn.w	r0, #21
   14dd0:	e7f7      	b.n	14dc2 <z_abort_timeout+0x1c>

00014dd2 <z_get_next_timeout_expiry>:
{
   14dd2:	b510      	push	{r4, lr}
	__asm__ volatile(
   14dd4:	f04f 0320 	mov.w	r3, #32
   14dd8:	f3ef 8411 	mrs	r4, BASEPRI
   14ddc:	f383 8812 	msr	BASEPRI_MAX, r3
   14de0:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   14de4:	f7fc fd6c 	bl	118c0 <next_timeout>
	__asm__ volatile(
   14de8:	f384 8811 	msr	BASEPRI, r4
   14dec:	f3bf 8f6f 	isb	sy
}
   14df0:	bd10      	pop	{r4, pc}

00014df2 <z_set_timeout_expiry>:
{
   14df2:	b570      	push	{r4, r5, r6, lr}
   14df4:	4604      	mov	r4, r0
   14df6:	460d      	mov	r5, r1
	__asm__ volatile(
   14df8:	f04f 0320 	mov.w	r3, #32
   14dfc:	f3ef 8611 	mrs	r6, BASEPRI
   14e00:	f383 8812 	msr	BASEPRI_MAX, r3
   14e04:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   14e08:	f7fc fd5a 	bl	118c0 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   14e0c:	2801      	cmp	r0, #1
   14e0e:	dd05      	ble.n	14e1c <z_set_timeout_expiry+0x2a>
   14e10:	42a0      	cmp	r0, r4
   14e12:	db03      	blt.n	14e1c <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   14e14:	4629      	mov	r1, r5
   14e16:	4620      	mov	r0, r4
   14e18:	f7fa fef6 	bl	fc08 <sys_clock_set_timeout>
	__asm__ volatile(
   14e1c:	f386 8811 	msr	BASEPRI, r6
   14e20:	f3bf 8f6f 	isb	sy
}
   14e24:	bd70      	pop	{r4, r5, r6, pc}

00014e26 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   14e26:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   14e28:	f7fc fe60 	bl	11aec <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   14e2c:	bd08      	pop	{r3, pc}

00014e2e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   14e2e:	b108      	cbz	r0, 14e34 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   14e30:	f7f8 bf8c 	b.w	dd4c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   14e34:	4770      	bx	lr

00014e36 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   14e36:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   14e3a:	bf08      	it	eq
   14e3c:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   14e40:	b538      	push	{r3, r4, r5, lr}
   14e42:	4605      	mov	r5, r0
   14e44:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   14e46:	d01d      	beq.n	14e84 <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   14e48:	ea51 0300 	orrs.w	r3, r1, r0
   14e4c:	d103      	bne.n	14e56 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   14e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   14e52:	f7fc be4b 	b.w	11aec <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   14e56:	f06f 0301 	mvn.w	r3, #1
   14e5a:	1a18      	subs	r0, r3, r0
   14e5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14e60:	eb63 0101 	sbc.w	r1, r3, r1
   14e64:	2900      	cmp	r1, #0
   14e66:	da0c      	bge.n	14e82 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   14e68:	f7fc fe40 	bl	11aec <sys_clock_tick_get>
   14e6c:	2d01      	cmp	r5, #1
   14e6e:	4622      	mov	r2, r4
   14e70:	f174 0400 	sbcs.w	r4, r4, #0
   14e74:	462b      	mov	r3, r5
   14e76:	bfbc      	itt	lt
   14e78:	2301      	movlt	r3, #1
   14e7a:	2200      	movlt	r2, #0
   14e7c:	1818      	adds	r0, r3, r0
   14e7e:	eb41 0102 	adc.w	r1, r1, r2
}
   14e82:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   14e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14e88:	4601      	mov	r1, r0
   14e8a:	e7fa      	b.n	14e82 <sys_clock_timeout_end_calc+0x4c>

00014e8c <k_free>:
	if (ptr != NULL) {
   14e8c:	b120      	cbz	r0, 14e98 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   14e8e:	1f01      	subs	r1, r0, #4
   14e90:	f850 0c04 	ldr.w	r0, [r0, #-4]
   14e94:	f7ff bd38 	b.w	14908 <k_heap_free>
}
   14e98:	4770      	bx	lr
	...

00014e9c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   14e9c:	f7fa bf4c 	b.w	fd38 <SystemInit>
